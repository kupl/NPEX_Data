{
    "dubbo_068a7d9": {
        "bug_id": "dubbo_068a7d9",
        "commit": "https://github.com/apache/dubbo/commit/068a7d99e79b4ef3ff5d75342e2f847bd81f2c76",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/068a7d99e79b4ef3ff5d75342e2f847bd81f2c76/dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java?ref=068a7d99e79b4ef3ff5d75342e2f847bd81f2c76",
                "deletions": 1,
                "filename": "dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java",
                "patch": "@@ -89,7 +89,7 @@ public void run() {\n                             Set<String> logSet = entry.getValue();\n                             File file = new File(accesslog);\n                             File dir = file.getParentFile();\n-                            if (! dir.exists()) {\n+                            if (null!=dir&&! dir.exists()) {\n                                 dir.mkdirs();\n                             }\n                             if (logger.isDebugEnabled()) {",
                "raw_url": "https://github.com/apache/dubbo/raw/068a7d99e79b4ef3ff5d75342e2f847bd81f2c76/dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java",
                "sha": "a6ea17401b6ad835df3f7d987f55d51fefc09011",
                "status": "modified"
            }
        ],
        "message": "DUBBO-48 accesslogFilter NPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@234 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "parent": "https://github.com/apache/dubbo/commit/bb3fe6d19bbc1703ab3b578da23da2d4d3790ac0",
        "patched_files": [
            "AccessLogFilter.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "AccessLogFilterTest.java"
        ]
    },
    "dubbo_0b27565": {
        "bug_id": "dubbo_0b27565",
        "commit": "https://github.com/apache/dubbo/commit/0b275651aa461dd241b77eaead7fd48fb656de47",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/0b275651aa461dd241b77eaead7fd48fb656de47/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/model/TagRouterRule.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/model/TagRouterRule.java?ref=0b275651aa461dd241b77eaead7fd48fb656de47",
                "deletions": 2,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/model/TagRouterRule.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.dubbo.rpc.cluster.router.tag.model;\n \n+import org.apache.dubbo.common.utils.CollectionUtils;\n import org.apache.dubbo.rpc.cluster.router.AbstractRouterRule;\n \n import java.util.ArrayList;\n@@ -50,7 +51,7 @@ public void init() {\n             return;\n         }\n \n-        tags.forEach(tag -> {\n+        tags.stream().filter(tag -> CollectionUtils.isNotEmpty(tag.getAddresses())).forEach(tag -> {\n             tagnameToAddresses.put(tag.getName(), tag.getAddresses());\n             tag.getAddresses().forEach(addr -> {\n                 List<String> tagNames = addressToTagnames.computeIfAbsent(addr, k -> new ArrayList<>());\n@@ -60,7 +61,10 @@ public void init() {\n     }\n \n     public List<String> getAddresses() {\n-        return tags.stream().flatMap(tag -> tag.getAddresses().stream()).collect(Collectors.toList());\n+        return tags.stream()\n+                .filter(tag -> CollectionUtils.isNotEmpty(tag.getAddresses()))\n+                .flatMap(tag -> tag.getAddresses().stream())\n+                .collect(Collectors.toList());\n     }\n \n     public List<String> getTagNames() {",
                "raw_url": "https://github.com/apache/dubbo/raw/0b275651aa461dd241b77eaead7fd48fb656de47/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/model/TagRouterRule.java",
                "sha": "154a161a21412a4d45ca824bcfbf5f648598001e",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/dubbo/blob/0b275651aa461dd241b77eaead7fd48fb656de47/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java?ref=0b275651aa461dd241b77eaead7fd48fb656de47",
                "deletions": 0,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java",
                "patch": "@@ -19,6 +19,8 @@\n import org.apache.curator.framework.CuratorFramework;\n import org.apache.curator.framework.CuratorFrameworkFactory;\n import org.apache.curator.retry.ExponentialBackoffRetry;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;\n+import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n@@ -63,4 +65,47 @@ public void normalTagRuleTest() {\n     private void setData(String path, String data) throws Exception {\n         client.setData().forPath(path, data.getBytes());\n     }\n+\n+    /**\n+     * TagRouterRule parse test when the tags addresses is null\n+     *\n+     * <pre>\n+     *     ~ -> null\n+     *     null -> null\n+     * </pre>\n+     */\n+    @Test\n+    public void tagRouterRuleParseTest(){\n+        String tagRouterRuleConfig = \"---\\n\" +\n+                \"force: false\\n\" +\n+                \"runtime: true\\n\" +\n+                \"enabled: false\\n\" +\n+                \"priority: 1\\n\" +\n+                \"key: demo-provider\\n\" +\n+                \"tags:\\n\" +\n+                \"  - name: tag1\\n\" +\n+                \"    addresses: null\\n\" +\n+                \"  - name: tag2\\n\" +\n+                \"    addresses: [\\\"30.5.120.37:20880\\\"]\\n\" +\n+                \"  - name: tag3\\n\" +\n+                \"    addresses: []\\n\" +\n+                \"  - name: tag4\\n\" +\n+                \"    addresses: ~\\n\" +\n+                \"...\";\n+\n+        TagRouterRule tagRouterRule = TagRuleParser.parse(tagRouterRuleConfig);\n+\n+        // assert tags\n+        assert tagRouterRule.getTagNames().contains(\"tag1\");\n+        assert tagRouterRule.getTagNames().contains(\"tag2\");\n+        assert tagRouterRule.getTagNames().contains(\"tag3\");\n+        assert tagRouterRule.getTagNames().contains(\"tag4\");\n+        // assert addresses\n+        assert tagRouterRule.getAddresses().contains(\"30.5.120.37:20880\");\n+        assert tagRouterRule.getTagnameToAddresses().get(\"tag1\")==null;\n+        assert tagRouterRule.getTagnameToAddresses().get(\"tag2\").size()==1;\n+        assert tagRouterRule.getTagnameToAddresses().get(\"tag3\")==null;\n+        assert tagRouterRule.getTagnameToAddresses().get(\"tag4\")==null;\n+        assert tagRouterRule.getAddresses().size()==1;\n+    }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/0b275651aa461dd241b77eaead7fd48fb656de47/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java",
                "sha": "829208da27f70fa0d4f912154e00ec4a1743f399",
                "status": "modified"
            }
        ],
        "message": "[Dubbo-4218] Fix NPE when the TagRouterRule addresses config is null (#4218) (#4236)\n\n* Fix NPE when the TagRouterRule addresses config is null (#4218)\r\n\r\n* fix import\r\n\r\n* add more test",
        "parent": "https://github.com/apache/dubbo/commit/346630e4132c9e45c547d9a2554c2b7702dabfad",
        "patched_files": [
            "TagRouter.java",
            "TagRouterRule.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "TagRouterTest.java"
        ]
    },
    "dubbo_1267383": {
        "bug_id": "dubbo_1267383",
        "commit": "https://github.com/apache/dubbo/commit/12673832b1bce1655e07e8dc97e10fa09f59f52c",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/12673832b1bce1655e07e8dc97e10fa09f59f52c/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java?ref=12673832b1bce1655e07e8dc97e10fa09f59f52c",
                "deletions": 2,
                "filename": "dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "patch": "@@ -70,8 +70,17 @@ private void asyncCallback(final Invoker<?> invoker, final Invocation invocation\n         if (f instanceof FutureAdapter) {\r\n             ResponseFuture future = ((FutureAdapter<?>)f).getFuture();\r\n             future.setCallback(new ResponseCallback() {\r\n-                public void done(Object response) {\r\n-                    Result result = (Result) response;\r\n+                public void done(Object rpcResult) {\r\n+                    if (rpcResult == null){\r\n+                        logger.error(new IllegalStateException(\"invalid result value : null, expected \"+Result.class.getName()));\r\n+                        return;\r\n+                    }\r\n+                    ///must be rpcResult\r\n+                    if (! (rpcResult instanceof Result)){\r\n+                        logger.error(new IllegalStateException(\"invalid result type :\" + rpcResult.getClass() + \", expected \"+Result.class.getName()));\r\n+                        return;\r\n+                    }\r\n+                    Result result = (Result) rpcResult;\r\n                     if (result.hasException()) {\r\n                         fireThrowCallback(invoker, invocation, result.getException());\r\n                     } else {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/12673832b1bce1655e07e8dc97e10fa09f59f52c/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "sha": "2530f8935f62e3f5015b0e858195af263253a5e0",
                "status": "modified"
            }
        ],
        "message": "DUBBO-11 NPE\u95ee\u9898\u89e3\u51b3.\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@109 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "parent": "https://github.com/apache/dubbo/commit/1aa17bca4a4650fb2078bf8e090408ba182f5702",
        "patched_files": [
            "FutureFilter.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "FutureFilterTest.java"
        ]
    },
    "dubbo_2284ede": {
        "bug_id": "dubbo_2284ede",
        "commit": "https://github.com/apache/dubbo/commit/2284ede0f14fae6212fac54a2e04a12534446da7",
        "file": [
            {
                "additions": 102,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "changes": 103,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 1,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "patch": "@@ -79,71 +79,88 @@ public static String decode(String value) {\n         return org.apache.dubbo.common.URL.decode(value);\n     }\n \n+    @Override\n     public String getProtocol() {\n         return super.getProtocol();\n     }\n \n+    @Override\n     public URL setProtocol(String protocol) {\n         return new URL(protocol, super.getUsername(), super.getPassword(), super.getHost(), super.getPort(), super.getPath(), super.getParameters());\n     }\n \n+    @Override\n     public String getUsername() {\n         return super.getUsername();\n     }\n \n+    @Override\n     public URL setUsername(String username) {\n         return new URL(super.getProtocol(), username, super.getPassword(), super.getHost(), super.getPort(), super.getPath(), super.getParameters());\n     }\n \n+    @Override\n     public String getPassword() {\n         return super.getPassword();\n     }\n \n+    @Override\n     public URL setPassword(String password) {\n         return new URL(super.getProtocol(), super.getUsername(), password, super.getHost(), super.getPort(), super.getPath(), super.getParameters());\n     }\n \n+    @Override\n     public String getAuthority() {\n         return super.getAuthority();\n     }\n \n+    @Override\n     public String getHost() {\n         return super.getHost();\n     }\n \n+    @Override\n     public URL setHost(String host) {\n         return new URL(super.getProtocol(), super.getUsername(), super.getPassword(), host, super.getPort(), super.getPath(), super.getParameters());\n     }\n \n+    @Override\n     public String getIp() {\n         return super.getIp();\n     }\n \n+    @Override\n     public int getPort() {\n         return super.getPort();\n     }\n \n+    @Override\n     public URL setPort(int port) {\n         return new URL(super.getProtocol(), super.getUsername(), super.getPassword(), super.getHost(), port, super.getPath(), super.getParameters());\n     }\n \n+    @Override\n     public int getPort(int defaultPort) {\n         return super.getPort();\n     }\n \n+    @Override\n     public String getAddress() {\n         return super.getAddress();\n     }\n \n+    @Override\n     public URL setAddress(String address) {\n         org.apache.dubbo.common.URL result = super.setAddress(address);\n         return new URL(result);\n     }\n \n+    @Override\n     public String getBackupAddress() {\n         return super.getBackupAddress();\n     }\n \n+    @Override\n     public String getBackupAddress(int defaultPort) {\n         return super.getBackupAddress(defaultPort);\n     }\n@@ -153,305 +170,375 @@ public String getBackupAddress(int defaultPort) {\n //        return res.stream().map(url -> new URL(url)).collect(Collectors.toList());\n //    }\n \n+    @Override\n     public String getPath() {\n         return super.getPath();\n     }\n \n+    @Override\n     public URL setPath(String path) {\n         return new URL(super.getProtocol(), super.getUsername(), super.getPassword(), super.getHost(), super.getPort(), path, super.getParameters());\n     }\n \n+    @Override\n     public String getAbsolutePath() {\n         return super.getAbsolutePath();\n     }\n \n+    @Override\n     public Map<String, String> getParameters() {\n         return super.getParameters();\n     }\n \n+    @Override\n     public String getParameterAndDecoded(String key) {\n         return super.getParameterAndDecoded(key);\n     }\n \n+    @Override\n     public String getParameterAndDecoded(String key, String defaultValue) {\n-        return super.decode(getParameter(key, defaultValue));\n+        return org.apache.dubbo.common.URL.decode(getParameter(key, defaultValue));\n     }\n \n+    @Override\n     public String getParameter(String key) {\n         return super.getParameter(key);\n     }\n \n+    @Override\n     public String getParameter(String key, String defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public String[] getParameter(String key, String[] defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public URL getUrlParameter(String key) {\n         org.apache.dubbo.common.URL result = super.getUrlParameter(key);\n         return new URL(result);\n     }\n \n+    @Override\n     public double getParameter(String key, double defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public float getParameter(String key, float defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public long getParameter(String key, long defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public int getParameter(String key, int defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public short getParameter(String key, short defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public byte getParameter(String key, byte defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public float getPositiveParameter(String key, float defaultValue) {\n         return super.getPositiveParameter(key, defaultValue);\n     }\n \n+    @Override\n     public double getPositiveParameter(String key, double defaultValue) {\n         return super.getPositiveParameter(key, defaultValue);\n     }\n \n+    @Override\n     public long getPositiveParameter(String key, long defaultValue) {\n         return super.getPositiveParameter(key, defaultValue);\n     }\n \n+    @Override\n     public int getPositiveParameter(String key, int defaultValue) {\n         return super.getPositiveParameter(key, defaultValue);\n     }\n \n+    @Override\n     public short getPositiveParameter(String key, short defaultValue) {\n         return super.getPositiveParameter(key, defaultValue);\n     }\n \n+    @Override\n     public byte getPositiveParameter(String key, byte defaultValue) {\n         return super.getPositiveParameter(key, defaultValue);\n     }\n \n+    @Override\n     public char getParameter(String key, char defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public boolean getParameter(String key, boolean defaultValue) {\n         return super.getParameter(key, defaultValue);\n     }\n \n+    @Override\n     public boolean hasParameter(String key) {\n         return super.hasParameter(key);\n     }\n \n+    @Override\n     public String getMethodParameterAndDecoded(String method, String key) {\n         return super.getMethodParameterAndDecoded(method, key);\n     }\n \n+    @Override\n     public String getMethodParameterAndDecoded(String method, String key, String defaultValue) {\n         return super.getMethodParameterAndDecoded(method, key, defaultValue);\n     }\n \n+    @Override\n     public String getMethodParameter(String method, String key) {\n         return super.getMethodParameter(method, key);\n     }\n \n+    @Override\n     public String getMethodParameter(String method, String key, String defaultValue) {\n         return super.getMethodParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public double getMethodParameter(String method, String key, double defaultValue) {\n         return super.getMethodParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public float getMethodParameter(String method, String key, float defaultValue) {\n         return super.getMethodParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public long getMethodParameter(String method, String key, long defaultValue) {\n         return super.getMethodParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public int getMethodParameter(String method, String key, int defaultValue) {\n         return super.getMethodParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public short getMethodParameter(String method, String key, short defaultValue) {\n         return super.getMethodParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public byte getMethodParameter(String method, String key, byte defaultValue) {\n         return super.getMethodParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public double getMethodPositiveParameter(String method, String key, double defaultValue) {\n         return super.getMethodPositiveParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public float getMethodPositiveParameter(String method, String key, float defaultValue) {\n         return super.getMethodPositiveParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public long getMethodPositiveParameter(String method, String key, long defaultValue) {\n         return super.getMethodPositiveParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public int getMethodPositiveParameter(String method, String key, int defaultValue) {\n         return super.getMethodPositiveParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public short getMethodPositiveParameter(String method, String key, short defaultValue) {\n         return super.getMethodPositiveParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public byte getMethodPositiveParameter(String method, String key, byte defaultValue) {\n         return super.getMethodPositiveParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public char getMethodParameter(String method, String key, char defaultValue) {\n         return super.getMethodParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public boolean getMethodParameter(String method, String key, boolean defaultValue) {\n         return super.getMethodParameter(method, key, defaultValue);\n     }\n \n+    @Override\n     public boolean hasMethodParameter(String method, String key) {\n         return super.hasMethodParameter(method, key);\n     }\n \n+    @Override\n     public boolean isLocalHost() {\n         return super.isLocalHost();\n     }\n \n+    @Override\n     public boolean isAnyHost() {\n         return super.isAnyHost();\n     }\n \n+    @Override\n     public URL addParameterAndEncoded(String key, String value) {\n         if (value == null || value.length() == 0) {\n             return this;\n         }\n         return addParameter(key, encode(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, boolean value) {\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, char value) {\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, byte value) {\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, short value) {\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, int value) {\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, long value) {\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, float value) {\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, double value) {\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, Enum<?> value) {\n         if (value == null) {\n             return this;\n         }\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, Number value) {\n         if (value == null) {\n             return this;\n         }\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, CharSequence value) {\n         if (value == null || value.length() == 0) {\n             return this;\n         }\n         return addParameter(key, String.valueOf(value));\n     }\n \n+    @Override\n     public URL addParameter(String key, String value) {\n         org.apache.dubbo.common.URL result = super.addParameter(key, value);\n         return new URL(result);\n     }\n \n+    @Override\n     public URL addParameterIfAbsent(String key, String value) {\n         org.apache.dubbo.common.URL result = super.addParameterIfAbsent(key, value);\n         return new URL(result);\n     }\n \n+    @Override\n     public URL addParameters(Map<String, String> parameters) {\n         org.apache.dubbo.common.URL result = super.addParameters(parameters);\n         return new URL(result);\n     }\n \n+    @Override\n     public URL addParametersIfAbsent(Map<String, String> parameters) {\n         org.apache.dubbo.common.URL result = super.addParametersIfAbsent(parameters);\n         return new URL(result);\n     }\n \n+    @Override\n     public URL addParameters(String... pairs) {\n         org.apache.dubbo.common.URL result = super.addParameters(pairs);\n         return new URL(result);\n     }\n \n+    @Override\n     public URL addParameterString(String query) {\n         org.apache.dubbo.common.URL result = super.addParameterString(query);\n         return new URL(result);\n     }\n \n+    @Override\n     public URL removeParameter(String key) {\n         org.apache.dubbo.common.URL result = super.removeParameter(key);\n         return new URL(result);\n     }\n \n+    @Override\n     public URL removeParameters(Collection<String> keys) {\n         org.apache.dubbo.common.URL result = super.removeParameters(keys);\n         return new URL(result);\n     }\n \n+    @Override\n     public URL removeParameters(String... keys) {\n         org.apache.dubbo.common.URL result = super.removeParameters(keys);\n         return new URL(result);\n     }\n \n+    @Override\n     public URL clearParameters() {\n         org.apache.dubbo.common.URL result = super.clearParameters();\n         return new URL(result);\n     }\n \n+    @Override\n     public String getRawParameter(String key) {\n         return super.getRawParameter(key);\n     }\n \n+    @Override\n     public Map<String, String> toMap() {\n         return super.toMap();\n     }\n@@ -461,58 +548,72 @@ public String toString() {\n         return super.toString();\n     }\n \n+    @Override\n     public String toString(String... parameters) {\n         return super.toString(parameters);\n     }\n \n+    @Override\n     public String toIdentityString() {\n         return super.toIdentityString();\n     }\n \n+    @Override\n     public String toIdentityString(String... parameters) {\n         return super.toIdentityString(parameters);\n     }\n \n+    @Override\n     public String toFullString() {\n         return super.toFullString();\n     }\n \n+    @Override\n     public String toFullString(String... parameters) {\n         return super.toFullString(parameters);\n     }\n \n+    @Override\n     public String toParameterString() {\n         return super.toParameterString();\n     }\n \n+    @Override\n     public String toParameterString(String... parameters) {\n         return super.toParameterString(parameters);\n     }\n \n+    @Override\n     public java.net.URL toJavaURL() {\n         return super.toJavaURL();\n     }\n \n+    @Override\n     public InetSocketAddress toInetSocketAddress() {\n         return super.toInetSocketAddress();\n     }\n \n+    @Override\n     public String getServiceKey() {\n         return super.getServiceKey();\n     }\n \n+    @Override\n     public String toServiceStringWithoutResolving() {\n         return super.toServiceStringWithoutResolving();\n     }\n \n+    @Override\n     public String toServiceString() {\n         return super.toServiceString();\n     }\n \n+    @Override\n     public String getServiceInterface() {\n         return super.getServiceInterface();\n     }\n \n+    @Override\n     public URL setServiceInterface(String service) {\n         org.apache.dubbo.common.URL result = super.setServiceInterface(service);\n         return new URL(result);",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "sha": "76b09f43db9b4536054469d070c433f56796c27b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/status/StatusChecker.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/status/StatusChecker.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/common/status/StatusChecker.java",
                "patch": "@@ -20,5 +20,6 @@\n @Deprecated\n public interface StatusChecker extends org.apache.dubbo.common.status.StatusChecker {\n \n+    @Override\n     Status check();\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/status/StatusChecker.java",
                "sha": "3f74c133ffac01f3c9617a72e6000740e85dcc2b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/monitor/Monitor.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/monitor/Monitor.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/monitor/Monitor.java",
                "patch": "@@ -25,6 +25,7 @@\n @Deprecated\n public interface Monitor extends org.apache.dubbo.monitor.Monitor {\n \n+    @Override\n     com.alibaba.dubbo.common.URL getUrl();\n \n     void collect(com.alibaba.dubbo.common.URL statistics);",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/monitor/Monitor.java",
                "sha": "3d4abb3cd652f3e7339891b25eda8c4ee2759584",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/registry/Registry.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/registry/Registry.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/registry/Registry.java",
                "patch": "@@ -26,6 +26,7 @@\n @Deprecated\n public interface Registry extends org.apache.dubbo.registry.Registry {\n \n+    @Override\n     com.alibaba.dubbo.common.URL getUrl();\n \n     void register(com.alibaba.dubbo.common.URL url);",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/registry/Registry.java",
                "sha": "cc9ceb14ee16058cdfa38f1359be5c52805a4535",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/remoting/Channel.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/remoting/Channel.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/remoting/Channel.java",
                "patch": "@@ -20,7 +20,9 @@\n @Deprecated\n public interface Channel extends org.apache.dubbo.remoting.Channel {\n \n+    @Override\n     com.alibaba.dubbo.common.URL getUrl();\n \n+    @Override\n     com.alibaba.dubbo.remoting.ChannelHandler getChannelHandler();\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/remoting/Channel.java",
                "sha": "a900047fb98ae316f1b3a516d88829253b43d05d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Exporter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Exporter.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Exporter.java",
                "patch": "@@ -20,6 +20,7 @@\n @Deprecated\n public interface Exporter<T> extends org.apache.dubbo.rpc.Exporter<T> {\n \n+    @Override\n     Invoker<T> getInvoker();\n \n     class CompatibleExporter<T> implements Exporter<T> {",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Exporter.java",
                "sha": "c1fadeb9d833ced315e444b26a8f7a0f61395da4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Filter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Filter.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Filter.java",
                "patch": "@@ -22,6 +22,7 @@\n \n     Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException;\n \n+    @Override\n     default org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker<?> invoker,\n                                                org.apache.dubbo.rpc.Invocation invocation)\n             throws org.apache.dubbo.rpc.RpcException {",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Filter.java",
                "sha": "4ccde294e3a217ef743e637b368a8f454c5e096d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invocation.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invocation.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invocation.java",
                "patch": "@@ -22,6 +22,7 @@\n @Deprecated\n public interface Invocation extends org.apache.dubbo.rpc.Invocation {\n \n+    @Override\n     Invoker<?> getInvoker();\n \n     default org.apache.dubbo.rpc.Invocation getOriginal() {\n@@ -71,6 +72,7 @@ public String getAttachment(String key, String defaultValue) {\n             return new Invoker.CompatibleInvoker(delegate.getInvoker());\n         }\n \n+        @Override\n         public org.apache.dubbo.rpc.Invocation getOriginal() {\n             return delegate;\n         }",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invocation.java",
                "sha": "b96d14d1ee4aacab0c69075fbee48bbeb33c67f9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java",
                "patch": "@@ -22,6 +22,7 @@\n @Deprecated\n public interface Invoker<T> extends org.apache.dubbo.rpc.Invoker<T> {\n \n+    @Override\n     Result invoke(org.apache.dubbo.rpc.Invocation invocation) throws RpcException;\n \n     default org.apache.dubbo.rpc.Invoker<T> getOriginal() {\n@@ -61,6 +62,7 @@ public void destroy() {\n             invoker.destroy();\n         }\n \n+        @Override\n         public org.apache.dubbo.rpc.Invoker<T> getOriginal() {\n             return invoker;\n         }",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java",
                "sha": "55a948083f037a1b7ef3fbffc6aafd81f8801557",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Directory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Directory.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 2,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Directory.java",
                "patch": "@@ -17,18 +17,19 @@\n \n package com.alibaba.dubbo.rpc.cluster;\n \n-import com.alibaba.dubbo.common.URL;\n-\n import org.apache.dubbo.rpc.Invocation;\n import org.apache.dubbo.rpc.Invoker;\n import org.apache.dubbo.rpc.RpcException;\n \n+import com.alibaba.dubbo.common.URL;\n+\n import java.util.List;\n import java.util.stream.Collectors;\n \n @Deprecated\n public interface Directory<T> extends org.apache.dubbo.rpc.cluster.Directory<T> {\n \n+    @Override\n     URL getUrl();\n \n     List<com.alibaba.dubbo.rpc.Invoker<T>> list(com.alibaba.dubbo.rpc.Invocation invocation) throws com.alibaba.dubbo.rpc.RpcException;",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Directory.java",
                "sha": "6e87c613513e5c659aec0aabf6ae3172ab2d8a56",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Router.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Router.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Router.java",
                "patch": "@@ -28,6 +28,7 @@\n @Deprecated\n public interface Router extends org.apache.dubbo.rpc.cluster.Router {\n \n+    @Override\n     com.alibaba.dubbo.common.URL getUrl();\n \n     <T> List<com.alibaba.dubbo.rpc.Invoker<T>> route(List<com.alibaba.dubbo.rpc.Invoker<T>> invokers,",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Router.java",
                "sha": "8a2750386811ef689382c524ca54267a343ab713",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 3,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "patch": "@@ -16,12 +16,13 @@\n  */\n package org.apache.dubbo.config.spring.beans.factory.annotation;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.utils.StringUtils;\n import org.apache.dubbo.config.annotation.Reference;\n import org.apache.dubbo.config.spring.ReferenceBean;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.PropertyValues;\n@@ -581,7 +582,9 @@ private static boolean nullSafeEquals(Object first, Object another) {\n     }\n \n     private String toPlainString(String[] array) {\n-        if (array == null || array.length == 0) return \"\";\n+        if (array == null || array.length == 0) {\n+            return \"\";\n+        }\n         StringBuilder buffer = new StringBuilder();\n         for (int i = 0; i < array.length; i++) {\n             if (i > 0) {",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "sha": "e82239588c57da98f51720a814e2a0573a7b019a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/service/GenericService.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/service/GenericService.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/service/GenericService.java",
                "patch": "@@ -20,6 +20,7 @@\n @Deprecated\n public interface GenericService extends org.apache.dubbo.rpc.service.GenericService {\n \n+    @Override\n     Object $invoke(String method, String[] parameterTypes, Object[] args)\n             throws com.alibaba.dubbo.rpc.service.GenericException;\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/service/GenericService.java",
                "sha": "b63b60bd3e1ea6e6e86576678999ca5dbe291ccc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AbstractResult.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AbstractResult.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AbstractResult.java",
                "patch": "@@ -64,6 +64,7 @@ public String getAttachment(String key, String defaultValue) {\n         return result;\n     }\n \n+    @Override\n     public void setAttachment(String key, String value) {\n         attachments.put(key, value);\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AbstractResult.java",
                "sha": "760a9c1a1116f093570e99e6cb20d5e2447dd06b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncContextImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncContextImpl.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncContextImpl.java",
                "patch": "@@ -71,6 +71,7 @@ public void start() {\n         this.started.set(true);\n     }\n \n+    @Override\n     public void signalContextSwitch() {\n         RpcContext.restoreContext(storedContext);\n         RpcContext.restoreServerContext(storedServerContext);",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncContextImpl.java",
                "sha": "0142f7391534fa8017048b1bbd2fe8f86b8a8be4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java?ref=2284ede0f14fae6212fac54a2e04a12534446da7",
                "deletions": 0,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "patch": "@@ -162,6 +162,7 @@ public String getAttachment(String key, String defaultValue) {\n         return getRpcResult().getAttachment(key, defaultValue);\n     }\n \n+    @Override\n     public void setAttachment(String key, String value) {\n         getRpcResult().setAttachment(key, value);\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/2284ede0f14fae6212fac54a2e04a12534446da7/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/AsyncRpcResult.java",
                "sha": "81a8c75737d1c510944dc607671d570732b06c06",
                "status": "modified"
            }
        ],
        "message": "code format (#2730)\n\n* NullPointerException\r\n\r\n* code rule\r\n\r\n* code rule",
        "parent": "https://github.com/apache/dubbo/commit/505d15576cc90de4ed4b9b767c86663ad12697a3",
        "patched_files": [
            "ReferenceAnnotationBeanPostProcessor.java",
            "URL.java",
            "GenericService.java",
            "Filter.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "GenericServiceTest.java",
            "FilterTest.java",
            "URLTest.java",
            "ReferenceAnnotationBeanPostProcessorTest.java"
        ]
    },
    "dubbo_25f2d4c": {
        "bug_id": "dubbo_25f2d4c",
        "commit": "https://github.com/apache/dubbo/commit/25f2d4c900b545ae32a61333637a5a2c375a05ba",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/25f2d4c900b545ae32a61333637a5a2c375a05ba/dubbo-container/dubbo-container-spring/src/main/java/org/apache/dubbo/container/spring/SpringContainer.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-container/dubbo-container-spring/src/main/java/org/apache/dubbo/container/spring/SpringContainer.java?ref=25f2d4c900b545ae32a61333637a5a2c375a05ba",
                "deletions": 1,
                "filename": "dubbo-container/dubbo-container-spring/src/main/java/org/apache/dubbo/container/spring/SpringContainer.java",
                "patch": "@@ -46,7 +46,8 @@ public void start() {\n         if (StringUtils.isEmpty(configPath)) {\r\n             configPath = DEFAULT_SPRING_CONFIG;\r\n         }\r\n-        context = new ClassPathXmlApplicationContext(configPath.split(\"[,\\\\s]+\"));\r\n+        context = new ClassPathXmlApplicationContext(configPath.split(\"[,\\\\s]+\"), false);\r\n+        context.refresh();\r\n         context.start();\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/25f2d4c900b545ae32a61333637a5a2c375a05ba/dubbo-container/dubbo-container-spring/src/main/java/org/apache/dubbo/container/spring/SpringContainer.java",
                "sha": "884fe098e32295eee77c5816214ad00b198c9eaf",
                "status": "modified"
            }
        ],
        "message": "[DUBBO-3476]: NullPointerException happened when using SpringContainer.getContext() (#3600)\n\n*     #3476: NullPointerException happened when using SpringContainer.getContext()\r\n\r\n* rollback change for DEFAULT_SPRING_CONFIG",
        "parent": "https://github.com/apache/dubbo/commit/8f7b0c35938f12db8b075db87f9eeefb26c951d2",
        "patched_files": [
            "SpringContainer.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "SpringContainerTest.java"
        ]
    },
    "dubbo_2d274ec": {
        "bug_id": "dubbo_2d274ec",
        "commit": "https://github.com/apache/dubbo/commit/2d274ec8a36ceb9a85a60fc838affc88e99f8371",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/2d274ec8a36ceb9a85a60fc838affc88e99f8371/dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java?ref=2d274ec8a36ceb9a85a60fc838affc88e99f8371",
                "deletions": 2,
                "filename": "dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java",
                "patch": "@@ -123,10 +123,11 @@ public RegistryDirectory(Class<T> serviceType, URL url) {\n      * @return\r\n      */\r\n     public static List<Configurator> toConfigurators(List<URL> urls) {\r\n-        List<Configurator> configurators = new ArrayList<Configurator>(urls.size());\r\n         if (urls == null || urls.size() == 0) {\r\n-            return configurators;\r\n+            return Collections.emptyList();\r\n         }\r\n+\r\n+        List<Configurator> configurators = new ArrayList<Configurator>(urls.size());\r\n         for (URL url : urls) {\r\n             if (Constants.EMPTY_PROTOCOL.equals(url.getProtocol())) {\r\n                 configurators.clear();\r",
                "raw_url": "https://github.com/apache/dubbo/raw/2d274ec8a36ceb9a85a60fc838affc88e99f8371/dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java",
                "sha": "f3979b28324bcede3d7bdf4e54a68b064df09dd0",
                "status": "modified"
            }
        ],
        "message": "pull request#131: \u4fee\u590d\u5f53urls==null\u65f6,\u62a5NullPointerException",
        "parent": "https://github.com/apache/dubbo/commit/5526dd8d2e80741e311e5466fc24392b2421eb00",
        "patched_files": [
            "RegistryDirectory.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "RegistryDirectoryTest.java"
        ]
    },
    "dubbo_2faf5e7": {
        "bug_id": "dubbo_2faf5e7",
        "commit": "https://github.com/apache/dubbo/commit/2faf5e71f8cdb732e0234359594c668f39d82157",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/2faf5e71f8cdb732e0234359594c668f39d82157/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java?ref=2faf5e71f8cdb732e0234359594c668f39d82157",
                "deletions": 1,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "patch": "@@ -865,7 +865,7 @@ private String createAdaptiveExtensionClassCode() {\n \r\n                 boolean hasInvocation = false;\r\n                 for (int i = 0; i < pts.length; ++i) {\r\n-                    if (pts[i].getName().equals(\"org.apache.dubbo.rpc.Invocation\")) {\r\n+                    if ((\"org.apache.dubbo.rpc.Invocation\").equals(pts[i].getName())) {\r\n                         // Null Point check\r\n                         String s = String.format(\"\\nif (arg%d == null) throw new IllegalArgumentException(\\\"invocation == null\\\");\", i);\r\n                         code.append(s);\r",
                "raw_url": "https://github.com/apache/dubbo/raw/2faf5e71f8cdb732e0234359594c668f39d82157/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "sha": "730a71fe58fea09a04ed3868cb6a1603921020f3",
                "status": "modified"
            }
        ],
        "message": "NullPointerException (#2571)",
        "parent": "https://github.com/apache/dubbo/commit/755bbf92741d4fcfed52bf314a5971a53c46b00c",
        "patched_files": [
            "ExtensionLoader.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "ExtensionLoaderTest.java"
        ]
    },
    "dubbo_36a1155": {
        "bug_id": "dubbo_36a1155",
        "commit": "https://github.com/apache/dubbo/commit/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouterTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouterTest.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 3,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouterTest.java",
                "patch": "@@ -26,8 +26,8 @@\n import org.apache.dubbo.rpc.cluster.Router;\n import org.apache.dubbo.rpc.cluster.RouterFactory;\n import org.apache.dubbo.rpc.cluster.router.MockInvoker;\n+import org.junit.After;\n import org.junit.Assert;\n-import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -47,8 +47,9 @@\n     public static void setUpBeforeClass() throws Exception {\n     }\n \n-    @Before\n-    public void setUp() throws Exception {\n+    @After\n+    public void teardown() throws Exception {\n+        RpcContext.getContext().clearAttachments();\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouterTest.java",
                "sha": "a3ba0924013998c6073f444cb567826d33db23e8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 0,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance;\n import org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance;\n \n+import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.BeforeClass;\n@@ -74,6 +75,11 @@\n     public static void setUpBeforeClass() throws Exception {\n     }\n \n+    @After\n+    public void teardown() throws Exception {\n+        RpcContext.getContext().clearAttachments();\n+    }\n+\n     @SuppressWarnings({\"unchecked\"})\n     @Before\n     public void setUp() throws Exception {",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java",
                "sha": "2039b0a0e4c2d0191317f6475294ddb6cf53680f",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 6,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "patch": "@@ -20,6 +20,9 @@\n import com.alibaba.dubbo.common.Constants;\n import com.alibaba.dubbo.config.MethodConfig;\n import com.alibaba.dubbo.config.ArgumentConfig;\n+\n+import org.apache.dubbo.rpc.model.ConsumerMethodModel;\n+import org.apache.dubbo.service.Person;\n import org.hamcrest.Matchers;\n import org.junit.Test;\n \n@@ -34,6 +37,7 @@\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.not;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n \n public class MethodConfigTest {\n     @Test\n@@ -97,12 +101,23 @@ public void testSticky() throws Exception {\n         assertThat(method.getSticky(), is(true));\n     }\n \n+    @Test\n+    public void testConverMethodConfig2AsyncInfo() throws Exception{\n+        org.apache.dubbo.config.MethodConfig methodConfig = new org.apache.dubbo.config.MethodConfig();\n+        methodConfig.setOninvokeMethod(\"setName\");\n+        methodConfig.setOninvoke(new Person());\n+\n+        ConsumerMethodModel.AsyncMethodInfo methodInfo = org.apache.dubbo.config.MethodConfig.convertMethodConfig2AyncInfo(methodConfig);\n+\n+        assertTrue(methodInfo.getOninvokeMethod().equals( Person.class.getMethod(\"setName\", String.class)));\n+    }\n+\n     @Test\n     public void testOnreturn() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOnreturn(\"on-return-object\");\n         assertThat(method.getOnreturn(), equalTo((Object) \"on-return-object\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_RETURN_INSTANCE_KEY, (Object) \"on-return-object\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -115,7 +130,7 @@ public void testOnreturnMethod() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOnreturnMethod(\"on-return-method\");\n         assertThat(method.getOnreturnMethod(), equalTo(\"on-return-method\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_RETURN_METHOD_KEY, (Object) \"on-return-method\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -128,7 +143,7 @@ public void testOnthrow() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOnthrow(\"on-throw-object\");\n         assertThat(method.getOnthrow(), equalTo((Object) \"on-throw-object\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_THROW_INSTANCE_KEY, (Object) \"on-throw-object\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -141,7 +156,7 @@ public void testOnthrowMethod() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOnthrowMethod(\"on-throw-method\");\n         assertThat(method.getOnthrowMethod(), equalTo(\"on-throw-method\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_THROW_METHOD_KEY, (Object) \"on-throw-method\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -154,7 +169,7 @@ public void testOninvoke() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOninvoke(\"on-invoke-object\");\n         assertThat(method.getOninvoke(), equalTo((Object) \"on-invoke-object\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_INVOKE_INSTANCE_KEY, (Object) \"on-invoke-object\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -167,7 +182,7 @@ public void testOninvokeMethod() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOninvokeMethod(\"on-invoke-method\");\n         assertThat(method.getOninvokeMethod(), equalTo(\"on-invoke-method\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_INVOKE_METHOD_KEY, (Object) \"on-invoke-method\"));\n         Map<String, String> parameters = new HashMap<String, String>();",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "sha": "e7e0601e2b3a2de53fca69bc2cc043c49e5261cc",
                "status": "modified"
            },
            {
                "additions": 534,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "changes": 1021,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 487,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "patch": "@@ -1,487 +1,534 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.dubbo.config;\r\n-\r\n-import org.apache.dubbo.common.Constants;\r\n-import org.apache.dubbo.common.URL;\r\n-import org.apache.dubbo.common.extension.ExtensionLoader;\r\n-import org.apache.dubbo.common.logger.Logger;\r\n-import org.apache.dubbo.common.logger.LoggerFactory;\r\n-import org.apache.dubbo.common.utils.CollectionUtils;\r\n-import org.apache.dubbo.common.utils.ConfigUtils;\r\n-import org.apache.dubbo.common.utils.ReflectUtils;\r\n-import org.apache.dubbo.common.utils.StringUtils;\r\n-import org.apache.dubbo.config.support.Parameter;\r\n-\r\n-import java.io.Serializable;\r\n-import java.lang.reflect.Method;\r\n-import java.lang.reflect.Modifier;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import java.util.regex.Matcher;\r\n-import java.util.regex.Pattern;\r\n-\r\n-/**\r\n- * Utility methods and public methods for parsing configuration\r\n- *\r\n- * @export\r\n- */\r\n-public abstract class AbstractConfig implements Serializable {\r\n-\r\n-    protected static final Logger logger = LoggerFactory.getLogger(AbstractConfig.class);\r\n-    private static final long serialVersionUID = 4267533505537413570L;\r\n-    private static final int MAX_LENGTH = 200;\r\n-\r\n-    private static final int MAX_PATH_LENGTH = 200;\r\n-\r\n-    private static final Pattern PATTERN_NAME = Pattern.compile(\"[\\\\-._0-9a-zA-Z]+\");\r\n-\r\n-    private static final Pattern PATTERN_MULTI_NAME = Pattern.compile(\"[,\\\\-._0-9a-zA-Z]+\");\r\n-\r\n-    private static final Pattern PATTERN_METHOD_NAME = Pattern.compile(\"[a-zA-Z][0-9a-zA-Z]*\");\r\n-\r\n-    private static final Pattern PATTERN_PATH = Pattern.compile(\"[/\\\\-$._0-9a-zA-Z]+\");\r\n-\r\n-    private static final Pattern PATTERN_NAME_HAS_SYMBOL = Pattern.compile(\"[:*,/\\\\-._0-9a-zA-Z]+\");\r\n-\r\n-    private static final Pattern PATTERN_KEY = Pattern.compile(\"[*,\\\\-._0-9a-zA-Z]+\");\r\n-    private static final Map<String, String> legacyProperties = new HashMap<String, String>();\r\n-    private static final String[] SUFFIXES = new String[]{\"Config\", \"Bean\"};\r\n-\r\n-    static {\r\n-        legacyProperties.put(\"dubbo.protocol.name\", \"dubbo.service.protocol\");\r\n-        legacyProperties.put(\"dubbo.protocol.host\", \"dubbo.service.server.host\");\r\n-        legacyProperties.put(\"dubbo.protocol.port\", \"dubbo.service.server.port\");\r\n-        legacyProperties.put(\"dubbo.protocol.threads\", \"dubbo.service.max.thread.pool.size\");\r\n-        legacyProperties.put(\"dubbo.consumer.timeout\", \"dubbo.service.invoke.timeout\");\r\n-        legacyProperties.put(\"dubbo.consumer.retries\", \"dubbo.service.max.retry.providers\");\r\n-        legacyProperties.put(\"dubbo.consumer.check\", \"dubbo.service.allow.no.provider\");\r\n-        legacyProperties.put(\"dubbo.service.url\", \"dubbo.service.address\");\r\n-\r\n-        // this is only for compatibility\r\n-        Runtime.getRuntime().addShutdownHook(DubboShutdownHook.getDubboShutdownHook());\r\n-    }\r\n-\r\n-    protected String id;\r\n-\r\n-    private static String convertLegacyValue(String key, String value) {\r\n-        if (value != null && value.length() > 0) {\r\n-            if (\"dubbo.service.max.retry.providers\".equals(key)) {\r\n-                return String.valueOf(Integer.parseInt(value) - 1);\r\n-            } else if (\"dubbo.service.allow.no.provider\".equals(key)) {\r\n-                return String.valueOf(!Boolean.parseBoolean(value));\r\n-            }\r\n-        }\r\n-        return value;\r\n-    }\r\n-\r\n-    protected static void appendProperties(AbstractConfig config) {\r\n-        if (config == null) {\r\n-            return;\r\n-        }\r\n-        String prefix = \"dubbo.\" + getTagName(config.getClass()) + \".\";\r\n-        Method[] methods = config.getClass().getMethods();\r\n-        for (Method method : methods) {\r\n-            try {\r\n-                String name = method.getName();\r\n-                if (name.length() > 3 && name.startsWith(\"set\") && Modifier.isPublic(method.getModifiers())\r\n-                        && method.getParameterTypes().length == 1 && isPrimitive(method.getParameterTypes()[0])) {\r\n-                    String property = StringUtils.camelToSplitName(name.substring(3, 4).toLowerCase() + name.substring(4), \".\");\r\n-\r\n-                    String value = null;\r\n-                    if (config.getId() != null && config.getId().length() > 0) {\r\n-                        String pn = prefix + config.getId() + \".\" + property;\r\n-                        value = System.getProperty(pn);\r\n-                        if (!StringUtils.isBlank(value)) {\r\n-                            logger.info(\"Use System Property \" + pn + \" to config dubbo\");\r\n-                        }\r\n-                    }\r\n-                    if (value == null || value.length() == 0) {\r\n-                        String pn = prefix + property;\r\n-                        value = System.getProperty(pn);\r\n-                        if (!StringUtils.isBlank(value)) {\r\n-                            logger.info(\"Use System Property \" + pn + \" to config dubbo\");\r\n-                        }\r\n-                    }\r\n-                    if (value == null || value.length() == 0) {\r\n-                        Method getter;\r\n-                        try {\r\n-                            getter = config.getClass().getMethod(\"get\" + name.substring(3));\r\n-                        } catch (NoSuchMethodException e) {\r\n-                            try {\r\n-                                getter = config.getClass().getMethod(\"is\" + name.substring(3));\r\n-                            } catch (NoSuchMethodException e2) {\r\n-                                getter = null;\r\n-                            }\r\n-                        }\r\n-                        if (getter != null) {\r\n-                            if (getter.invoke(config) == null) {\r\n-                                if (config.getId() != null && config.getId().length() > 0) {\r\n-                                    value = ConfigUtils.getProperty(prefix + config.getId() + \".\" + property);\r\n-                                }\r\n-                                if (value == null || value.length() == 0) {\r\n-                                    value = ConfigUtils.getProperty(prefix + property);\r\n-                                }\r\n-                                if (value == null || value.length() == 0) {\r\n-                                    String legacyKey = legacyProperties.get(prefix + property);\r\n-                                    if (legacyKey != null && legacyKey.length() > 0) {\r\n-                                        value = convertLegacyValue(legacyKey, ConfigUtils.getProperty(legacyKey));\r\n-                                    }\r\n-                                }\r\n-\r\n-                            }\r\n-                        }\r\n-                    }\r\n-                    if (value != null && value.length() > 0) {\r\n-                        method.invoke(config, convertPrimitive(method.getParameterTypes()[0], value));\r\n-                    }\r\n-                }\r\n-            } catch (Exception e) {\r\n-                logger.error(e.getMessage(), e);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private static String getTagName(Class<?> cls) {\r\n-        String tag = cls.getSimpleName();\r\n-        for (String suffix : SUFFIXES) {\r\n-            if (tag.endsWith(suffix)) {\r\n-                tag = tag.substring(0, tag.length() - suffix.length());\r\n-                break;\r\n-            }\r\n-        }\r\n-        tag = tag.toLowerCase();\r\n-        return tag;\r\n-    }\r\n-\r\n-    protected static void appendParameters(Map<String, String> parameters, Object config) {\r\n-        appendParameters(parameters, config, null);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    protected static void appendParameters(Map<String, String> parameters, Object config, String prefix) {\r\n-        if (config == null) {\r\n-            return;\r\n-        }\r\n-        Method[] methods = config.getClass().getMethods();\r\n-        for (Method method : methods) {\r\n-            try {\r\n-                String name = method.getName();\r\n-                if ((name.startsWith(\"get\") || name.startsWith(\"is\"))\r\n-                        && !\"getClass\".equals(name)\r\n-                        && Modifier.isPublic(method.getModifiers())\r\n-                        && method.getParameterTypes().length == 0\r\n-                        && isPrimitive(method.getReturnType())) {\r\n-                    Parameter parameter = method.getAnnotation(Parameter.class);\r\n-                    if (method.getReturnType() == Object.class || parameter != null && parameter.excluded()) {\r\n-                        continue;\r\n-                    }\r\n-                    int i = name.startsWith(\"get\") ? 3 : 2;\r\n-                    String prop = StringUtils.camelToSplitName(name.substring(i, i + 1).toLowerCase() + name.substring(i + 1), \".\");\r\n-                    String key;\r\n-                    if (parameter != null && parameter.key().length() > 0) {\r\n-                        key = parameter.key();\r\n-                    } else {\r\n-                        key = prop;\r\n-                    }\r\n-                    Object value = method.invoke(config);\r\n-                    String str = String.valueOf(value).trim();\r\n-                    if (value != null && str.length() > 0) {\r\n-                        if (parameter != null && parameter.escaped()) {\r\n-                            str = URL.encode(str);\r\n-                        }\r\n-                        if (parameter != null && parameter.append()) {\r\n-                            String pre = parameters.get(Constants.DEFAULT_KEY + \".\" + key);\r\n-                            if (pre != null && pre.length() > 0) {\r\n-                                str = pre + \",\" + str;\r\n-                            }\r\n-                            pre = parameters.get(key);\r\n-                            if (pre != null && pre.length() > 0) {\r\n-                                str = pre + \",\" + str;\r\n-                            }\r\n-                        }\r\n-                        if (prefix != null && prefix.length() > 0) {\r\n-                            key = prefix + \".\" + key;\r\n-                        }\r\n-                        parameters.put(key, str);\r\n-                    } else if (parameter != null && parameter.required()) {\r\n-                        throw new IllegalStateException(config.getClass().getSimpleName() + \".\" + key + \" == null\");\r\n-                    }\r\n-                } else if (\"getParameters\".equals(name)\r\n-                        && Modifier.isPublic(method.getModifiers())\r\n-                        && method.getParameterTypes().length == 0\r\n-                        && method.getReturnType() == Map.class) {\r\n-                    Map<String, String> map = (Map<String, String>) method.invoke(config, new Object[0]);\r\n-                    if (map != null && map.size() > 0) {\r\n-                        String pre = (prefix != null && prefix.length() > 0 ? prefix + \".\" : \"\");\r\n-                        for (Map.Entry<String, String> entry : map.entrySet()) {\r\n-                            parameters.put(pre + entry.getKey().replace('-', '.'), entry.getValue());\r\n-                        }\r\n-                    }\r\n-                }\r\n-            } catch (Exception e) {\r\n-                throw new IllegalStateException(e.getMessage(), e);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    protected static void appendAttributes(Map<Object, Object> parameters, Object config) {\r\n-        appendAttributes(parameters, config, null);\r\n-    }\r\n-\r\n-    protected static void appendAttributes(Map<Object, Object> parameters, Object config, String prefix) {\r\n-        if (config == null) {\r\n-            return;\r\n-        }\r\n-        Method[] methods = config.getClass().getMethods();\r\n-        for (Method method : methods) {\r\n-            try {\r\n-                String name = method.getName();\r\n-                if ((name.startsWith(\"get\") || name.startsWith(\"is\"))\r\n-                        && !\"getClass\".equals(name)\r\n-                        && Modifier.isPublic(method.getModifiers())\r\n-                        && method.getParameterTypes().length == 0\r\n-                        && isPrimitive(method.getReturnType())) {\r\n-                    Parameter parameter = method.getAnnotation(Parameter.class);\r\n-                    if (parameter == null || !parameter.attribute()) {\r\n-                        continue;\r\n-                    }\r\n-                    String key;\r\n-                    if (parameter.key().length() > 0) {\r\n-                        key = parameter.key();\r\n-                    } else {\r\n-                        int i = name.startsWith(\"get\") ? 3 : 2;\r\n-                        key = name.substring(i, i + 1).toLowerCase() + name.substring(i + 1);\r\n-                    }\r\n-                    Object value = method.invoke(config);\r\n-                    if (value != null) {\r\n-                        if (prefix != null && prefix.length() > 0) {\r\n-                            key = prefix + \".\" + key;\r\n-                        }\r\n-                        parameters.put(key, value);\r\n-                    }\r\n-                }\r\n-            } catch (Exception e) {\r\n-                throw new IllegalStateException(e.getMessage(), e);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private static boolean isPrimitive(Class<?> type) {\r\n-        return type.isPrimitive()\r\n-                || type == String.class\r\n-                || type == Character.class\r\n-                || type == Boolean.class\r\n-                || type == Byte.class\r\n-                || type == Short.class\r\n-                || type == Integer.class\r\n-                || type == Long.class\r\n-                || type == Float.class\r\n-                || type == Double.class\r\n-                || type == Object.class;\r\n-    }\r\n-\r\n-    private static Object convertPrimitive(Class<?> type, String value) {\r\n-        if (type == char.class || type == Character.class) {\r\n-            return value.length() > 0 ? value.charAt(0) : '\\0';\r\n-        } else if (type == boolean.class || type == Boolean.class) {\r\n-            return Boolean.valueOf(value);\r\n-        } else if (type == byte.class || type == Byte.class) {\r\n-            return Byte.valueOf(value);\r\n-        } else if (type == short.class || type == Short.class) {\r\n-            return Short.valueOf(value);\r\n-        } else if (type == int.class || type == Integer.class) {\r\n-            return Integer.valueOf(value);\r\n-        } else if (type == long.class || type == Long.class) {\r\n-            return Long.valueOf(value);\r\n-        } else if (type == float.class || type == Float.class) {\r\n-            return Float.valueOf(value);\r\n-        } else if (type == double.class || type == Double.class) {\r\n-            return Double.valueOf(value);\r\n-        }\r\n-        return value;\r\n-    }\r\n-\r\n-    protected static void checkExtension(Class<?> type, String property, String value) {\r\n-        checkName(property, value);\r\n-        if (value != null && value.length() > 0\r\n-                && !ExtensionLoader.getExtensionLoader(type).hasExtension(value)) {\r\n-            throw new IllegalStateException(\"No such extension \" + value + \" for \" + property + \"/\" + type.getName());\r\n-        }\r\n-    }\r\n-\r\n-    protected static void checkMultiExtension(Class<?> type, String property, String value) {\r\n-        checkMultiName(property, value);\r\n-        if (value != null && value.length() > 0) {\r\n-            String[] values = value.split(\"\\\\s*[,]+\\\\s*\");\r\n-            for (String v : values) {\r\n-                if (v.startsWith(Constants.REMOVE_VALUE_PREFIX)) {\r\n-                    v = v.substring(1);\r\n-                }\r\n-                if (Constants.DEFAULT_KEY.equals(v)) {\r\n-                    continue;\r\n-                }\r\n-                if (!ExtensionLoader.getExtensionLoader(type).hasExtension(v)) {\r\n-                    throw new IllegalStateException(\"No such extension \" + v + \" for \" + property + \"/\" + type.getName());\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    protected static void checkLength(String property, String value) {\r\n-        checkProperty(property, value, MAX_LENGTH, null);\r\n-    }\r\n-\r\n-    protected static void checkPathLength(String property, String value) {\r\n-        checkProperty(property, value, MAX_PATH_LENGTH, null);\r\n-    }\r\n-\r\n-    protected static void checkName(String property, String value) {\r\n-        checkProperty(property, value, MAX_LENGTH, PATTERN_NAME);\r\n-    }\r\n-\r\n-    protected static void checkNameHasSymbol(String property, String value) {\r\n-        checkProperty(property, value, MAX_LENGTH, PATTERN_NAME_HAS_SYMBOL);\r\n-    }\r\n-\r\n-    protected static void checkKey(String property, String value) {\r\n-        checkProperty(property, value, MAX_LENGTH, PATTERN_KEY);\r\n-    }\r\n-\r\n-    protected static void checkMultiName(String property, String value) {\r\n-        checkProperty(property, value, MAX_LENGTH, PATTERN_MULTI_NAME);\r\n-    }\r\n-\r\n-    protected static void checkPathName(String property, String value) {\r\n-        checkProperty(property, value, MAX_PATH_LENGTH, PATTERN_PATH);\r\n-    }\r\n-\r\n-    protected static void checkMethodName(String property, String value) {\r\n-        checkProperty(property, value, MAX_LENGTH, PATTERN_METHOD_NAME);\r\n-    }\r\n-\r\n-    protected static void checkParameterName(Map<String, String> parameters) {\r\n-        if (parameters == null || parameters.size() == 0) {\r\n-            return;\r\n-        }\r\n-        for (Map.Entry<String, String> entry : parameters.entrySet()) {\r\n-            checkNameHasSymbol(entry.getKey(), entry.getValue());\r\n-        }\r\n-    }\r\n-\r\n-    protected static void checkProperty(String property, String value, int maxlength, Pattern pattern) {\r\n-        if (value == null || value.length() == 0) {\r\n-            return;\r\n-        }\r\n-        if (value.length() > maxlength) {\r\n-            throw new IllegalStateException(\"Invalid \" + property + \"=\\\"\" + value + \"\\\" is longer than \" + maxlength);\r\n-        }\r\n-        if (pattern != null) {\r\n-            Matcher matcher = pattern.matcher(value);\r\n-            if (!matcher.matches()) {\r\n-                throw new IllegalStateException(\"Invalid \" + property + \"=\\\"\" + value + \"\\\" contains illegal \" +\r\n-                        \"character, only digit, letter, '-', '_' or '.' is legal.\");\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    @Parameter(excluded = true)\r\n-    public String getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(String id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    protected void appendAnnotation(Class<?> annotationClass, Object annotation) {\r\n-        Method[] methods = annotationClass.getMethods();\r\n-        for (Method method : methods) {\r\n-            if (method.getDeclaringClass() != Object.class\r\n-                    && method.getReturnType() != void.class\r\n-                    && method.getParameterTypes().length == 0\r\n-                    && Modifier.isPublic(method.getModifiers())\r\n-                    && !Modifier.isStatic(method.getModifiers())) {\r\n-                try {\r\n-                    String property = method.getName();\r\n-                    if (\"interfaceClass\".equals(property) || \"interfaceName\".equals(property)) {\r\n-                        property = \"interface\";\r\n-                    }\r\n-                    String setter = \"set\" + property.substring(0, 1).toUpperCase() + property.substring(1);\r\n-                    Object value = method.invoke(annotation);\r\n-                    if (value != null && !value.equals(method.getDefaultValue())) {\r\n-                        Class<?> parameterType = ReflectUtils.getBoxedClass(method.getReturnType());\r\n-                        if (\"filter\".equals(property) || \"listener\".equals(property)) {\r\n-                            parameterType = String.class;\r\n-                            value = StringUtils.join((String[]) value, \",\");\r\n-                        } else if (\"parameters\".equals(property)) {\r\n-                            parameterType = Map.class;\r\n-                            value = CollectionUtils.toStringMap((String[]) value);\r\n-                        }\r\n-                        try {\r\n-                            Method setterMethod = getClass().getMethod(setter, parameterType);\r\n-                            setterMethod.invoke(this, value);\r\n-                        } catch (NoSuchMethodException e) {\r\n-                            // ignore\r\n-                        }\r\n-                    }\r\n-                } catch (Throwable e) {\r\n-                    logger.error(e.getMessage(), e);\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString() {\r\n-        try {\r\n-            StringBuilder buf = new StringBuilder();\r\n-            buf.append(\"<dubbo:\");\r\n-            buf.append(getTagName(getClass()));\r\n-            Method[] methods = getClass().getMethods();\r\n-            for (Method method : methods) {\r\n-                try {\r\n-                    String name = method.getName();\r\n-                    if ((name.startsWith(\"get\") || name.startsWith(\"is\"))\r\n-                            && !\"getClass\".equals(name) && !\"get\".equals(name) && !\"is\".equals(name)\r\n-                            && Modifier.isPublic(method.getModifiers())\r\n-                            && method.getParameterTypes().length == 0\r\n-                            && isPrimitive(method.getReturnType())) {\r\n-                        int i = name.startsWith(\"get\") ? 3 : 2;\r\n-                        String key = name.substring(i, i + 1).toLowerCase() + name.substring(i + 1);\r\n-                        Object value = method.invoke(this);\r\n-                        if (value != null) {\r\n-                            buf.append(\" \");\r\n-                            buf.append(key);\r\n-                            buf.append(\"=\\\"\");\r\n-                            buf.append(value);\r\n-                            buf.append(\"\\\"\");\r\n-                        }\r\n-                    }\r\n-                } catch (Exception e) {\r\n-                    logger.warn(e.getMessage(), e);\r\n-                }\r\n-            }\r\n-            buf.append(\" />\");\r\n-            return buf.toString();\r\n-        } catch (Throwable t) {\r\n-            logger.warn(t.getMessage(), t);\r\n-            return super.toString();\r\n-        }\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config;\n+\n+import org.apache.dubbo.common.Constants;\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.ConfigUtils;\n+import org.apache.dubbo.common.utils.ReflectUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.config.support.Parameter;\n+import org.apache.dubbo.rpc.model.ConsumerMethodModel;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Utility methods and public methods for parsing configuration\n+ *\n+ * @export\n+ */\n+public abstract class AbstractConfig implements Serializable {\n+\n+    protected static final Logger logger = LoggerFactory.getLogger(AbstractConfig.class);\n+    private static final long serialVersionUID = 4267533505537413570L;\n+    private static final int MAX_LENGTH = 200;\n+\n+    private static final int MAX_PATH_LENGTH = 200;\n+\n+    private static final Pattern PATTERN_NAME = Pattern.compile(\"[\\\\-._0-9a-zA-Z]+\");\n+\n+    private static final Pattern PATTERN_MULTI_NAME = Pattern.compile(\"[,\\\\-._0-9a-zA-Z]+\");\n+\n+    private static final Pattern PATTERN_METHOD_NAME = Pattern.compile(\"[a-zA-Z][0-9a-zA-Z]*\");\n+\n+    private static final Pattern PATTERN_PATH = Pattern.compile(\"[/\\\\-$._0-9a-zA-Z]+\");\n+\n+    private static final Pattern PATTERN_NAME_HAS_SYMBOL = Pattern.compile(\"[:*,/\\\\-._0-9a-zA-Z]+\");\n+\n+    private static final Pattern PATTERN_KEY = Pattern.compile(\"[*,\\\\-._0-9a-zA-Z]+\");\n+    private static final Map<String, String> legacyProperties = new HashMap<String, String>();\n+    private static final String[] SUFFIXES = new String[]{\"Config\", \"Bean\"};\n+\n+    static {\n+        legacyProperties.put(\"dubbo.protocol.name\", \"dubbo.service.protocol\");\n+        legacyProperties.put(\"dubbo.protocol.host\", \"dubbo.service.server.host\");\n+        legacyProperties.put(\"dubbo.protocol.port\", \"dubbo.service.server.port\");\n+        legacyProperties.put(\"dubbo.protocol.threads\", \"dubbo.service.max.thread.pool.size\");\n+        legacyProperties.put(\"dubbo.consumer.timeout\", \"dubbo.service.invoke.timeout\");\n+        legacyProperties.put(\"dubbo.consumer.retries\", \"dubbo.service.max.retry.providers\");\n+        legacyProperties.put(\"dubbo.consumer.check\", \"dubbo.service.allow.no.provider\");\n+        legacyProperties.put(\"dubbo.service.url\", \"dubbo.service.address\");\n+\n+        // this is only for compatibility\n+        Runtime.getRuntime().addShutdownHook(DubboShutdownHook.getDubboShutdownHook());\n+    }\n+\n+    protected String id;\n+\n+    private static String convertLegacyValue(String key, String value) {\n+        if (value != null && value.length() > 0) {\n+            if (\"dubbo.service.max.retry.providers\".equals(key)) {\n+                return String.valueOf(Integer.parseInt(value) - 1);\n+            } else if (\"dubbo.service.allow.no.provider\".equals(key)) {\n+                return String.valueOf(!Boolean.parseBoolean(value));\n+            }\n+        }\n+        return value;\n+    }\n+\n+    protected static void appendProperties(AbstractConfig config) {\n+        if (config == null) {\n+            return;\n+        }\n+        String prefix = \"dubbo.\" + getTagName(config.getClass()) + \".\";\n+        Method[] methods = config.getClass().getMethods();\n+        for (Method method : methods) {\n+            try {\n+                String name = method.getName();\n+                if (name.length() > 3 && name.startsWith(\"set\") && Modifier.isPublic(method.getModifiers())\n+                        && method.getParameterTypes().length == 1 && isPrimitive(method.getParameterTypes()[0])) {\n+                    String property = StringUtils.camelToSplitName(name.substring(3, 4).toLowerCase() + name.substring(4), \".\");\n+\n+                    String value = null;\n+                    if (config.getId() != null && config.getId().length() > 0) {\n+                        String pn = prefix + config.getId() + \".\" + property;\n+                        value = System.getProperty(pn);\n+                        if (!StringUtils.isBlank(value)) {\n+                            logger.info(\"Use System Property \" + pn + \" to config dubbo\");\n+                        }\n+                    }\n+                    if (value == null || value.length() == 0) {\n+                        String pn = prefix + property;\n+                        value = System.getProperty(pn);\n+                        if (!StringUtils.isBlank(value)) {\n+                            logger.info(\"Use System Property \" + pn + \" to config dubbo\");\n+                        }\n+                    }\n+                    if (value == null || value.length() == 0) {\n+                        Method getter;\n+                        try {\n+                            getter = config.getClass().getMethod(\"get\" + name.substring(3));\n+                        } catch (NoSuchMethodException e) {\n+                            try {\n+                                getter = config.getClass().getMethod(\"is\" + name.substring(3));\n+                            } catch (NoSuchMethodException e2) {\n+                                getter = null;\n+                            }\n+                        }\n+                        if (getter != null) {\n+                            if (getter.invoke(config) == null) {\n+                                if (config.getId() != null && config.getId().length() > 0) {\n+                                    value = ConfigUtils.getProperty(prefix + config.getId() + \".\" + property);\n+                                }\n+                                if (value == null || value.length() == 0) {\n+                                    value = ConfigUtils.getProperty(prefix + property);\n+                                }\n+                                if (value == null || value.length() == 0) {\n+                                    String legacyKey = legacyProperties.get(prefix + property);\n+                                    if (legacyKey != null && legacyKey.length() > 0) {\n+                                        value = convertLegacyValue(legacyKey, ConfigUtils.getProperty(legacyKey));\n+                                    }\n+                                }\n+\n+                            }\n+                        }\n+                    }\n+                    if (value != null && value.length() > 0) {\n+                        method.invoke(config, convertPrimitive(method.getParameterTypes()[0], value));\n+                    }\n+                }\n+            } catch (Exception e) {\n+                logger.error(e.getMessage(), e);\n+            }\n+        }\n+    }\n+\n+    private static String getTagName(Class<?> cls) {\n+        String tag = cls.getSimpleName();\n+        for (String suffix : SUFFIXES) {\n+            if (tag.endsWith(suffix)) {\n+                tag = tag.substring(0, tag.length() - suffix.length());\n+                break;\n+            }\n+        }\n+        tag = tag.toLowerCase();\n+        return tag;\n+    }\n+\n+    protected static void appendParameters(Map<String, String> parameters, Object config) {\n+        appendParameters(parameters, config, null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected static void appendParameters(Map<String, String> parameters, Object config, String prefix) {\n+        if (config == null) {\n+            return;\n+        }\n+        Method[] methods = config.getClass().getMethods();\n+        for (Method method : methods) {\n+            try {\n+                String name = method.getName();\n+                if ((name.startsWith(\"get\") || name.startsWith(\"is\"))\n+                        && !\"getClass\".equals(name)\n+                        && Modifier.isPublic(method.getModifiers())\n+                        && method.getParameterTypes().length == 0\n+                        && isPrimitive(method.getReturnType())) {\n+                    Parameter parameter = method.getAnnotation(Parameter.class);\n+                    if (method.getReturnType() == Object.class || parameter != null && parameter.excluded()) {\n+                        continue;\n+                    }\n+                    int i = name.startsWith(\"get\") ? 3 : 2;\n+                    String prop = StringUtils.camelToSplitName(name.substring(i, i + 1).toLowerCase() + name.substring(i + 1), \".\");\n+                    String key;\n+                    if (parameter != null && parameter.key().length() > 0) {\n+                        key = parameter.key();\n+                    } else {\n+                        key = prop;\n+                    }\n+                    Object value = method.invoke(config);\n+                    String str = String.valueOf(value).trim();\n+                    if (value != null && str.length() > 0) {\n+                        if (parameter != null && parameter.escaped()) {\n+                            str = URL.encode(str);\n+                        }\n+                        if (parameter != null && parameter.append()) {\n+                            String pre = parameters.get(Constants.DEFAULT_KEY + \".\" + key);\n+                            if (pre != null && pre.length() > 0) {\n+                                str = pre + \",\" + str;\n+                            }\n+                            pre = parameters.get(key);\n+                            if (pre != null && pre.length() > 0) {\n+                                str = pre + \",\" + str;\n+                            }\n+                        }\n+                        if (prefix != null && prefix.length() > 0) {\n+                            key = prefix + \".\" + key;\n+                        }\n+                        parameters.put(key, str);\n+                    } else if (parameter != null && parameter.required()) {\n+                        throw new IllegalStateException(config.getClass().getSimpleName() + \".\" + key + \" == null\");\n+                    }\n+                } else if (\"getParameters\".equals(name)\n+                        && Modifier.isPublic(method.getModifiers())\n+                        && method.getParameterTypes().length == 0\n+                        && method.getReturnType() == Map.class) {\n+                    Map<String, String> map = (Map<String, String>) method.invoke(config, new Object[0]);\n+                    if (map != null && map.size() > 0) {\n+                        String pre = (prefix != null && prefix.length() > 0 ? prefix + \".\" : \"\");\n+                        for (Map.Entry<String, String> entry : map.entrySet()) {\n+                            parameters.put(pre + entry.getKey().replace('-', '.'), entry.getValue());\n+                        }\n+                    }\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(e.getMessage(), e);\n+            }\n+        }\n+    }\n+\n+    protected static void appendAttributes(Map<String, Object> parameters, Object config) {\n+        appendAttributes(parameters, config, null);\n+    }\n+\n+    protected static void appendAttributes(Map<String, Object> parameters, Object config, String prefix) {\n+        if (config == null) {\n+            return;\n+        }\n+        Method[] methods = config.getClass().getMethods();\n+        for (Method method : methods) {\n+            try {\n+                Parameter parameter = method.getAnnotation(Parameter.class);\n+                if (parameter == null || !parameter.attribute()) {\n+                    continue;\n+                }\n+                String name = method.getName();\n+                if ((name.startsWith(\"get\") || name.startsWith(\"is\"))\n+                        && !\"getClass\".equals(name)\n+                        && Modifier.isPublic(method.getModifiers())\n+                        && method.getParameterTypes().length == 0\n+                        && isPrimitive(method.getReturnType())) {\n+                    String key;\n+                    if (parameter.key().length() > 0) {\n+                        key = parameter.key();\n+                    } else {\n+                        int i = name.startsWith(\"get\") ? 3 : 2;\n+                        key = name.substring(i, i + 1).toLowerCase() + name.substring(i + 1);\n+                    }\n+                    Object value = method.invoke(config);\n+                    if (value != null) {\n+                        if (prefix != null && prefix.length() > 0) {\n+                            key = prefix + \".\" + key;\n+                        }\n+                        parameters.put(key, value);\n+                    }\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(e.getMessage(), e);\n+            }\n+        }\n+    }\n+\n+    protected static ConsumerMethodModel.AsyncMethodInfo convertMethodConfig2AyncInfo(MethodConfig methodConfig) {\n+        if (methodConfig == null || (methodConfig.getOninvoke() == null && methodConfig.getOnreturn() == null && methodConfig.getOnthrow() == null)) {\n+            return null;\n+        }\n+\n+        //check config conflict\n+        if (Boolean.FALSE.equals(methodConfig.isReturn()) && (methodConfig.getOnreturn() != null || methodConfig.getOnthrow() != null)) {\n+            throw new IllegalStateException(\"method config error : return attribute must be set true when onreturn or onthrow has been set.\");\n+        }\n+\n+        ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = new ConsumerMethodModel.AsyncMethodInfo();\n+\n+        asyncMethodInfo.setOninvokeInstance(methodConfig.getOninvoke());\n+        asyncMethodInfo.setOnreturnInstance(methodConfig.getOnreturn());\n+        asyncMethodInfo.setOnthrowInstance(methodConfig.getOnthrow());\n+\n+        try {\n+            String oninvokeMethod = methodConfig.getOninvokeMethod();\n+            if (StringUtils.isNotEmpty(oninvokeMethod)) {\n+                asyncMethodInfo.setOninvokeMethod(getMethodByName(methodConfig.getOninvoke().getClass(), oninvokeMethod));\n+            }\n+\n+            String onreturnMethod = methodConfig.getOnreturnMethod();\n+            if (StringUtils.isNotEmpty(onreturnMethod)) {\n+                asyncMethodInfo.setOnreturnMethod(getMethodByName(methodConfig.getOnreturn().getClass(), onreturnMethod));\n+            }\n+\n+            String onthrowMethod = methodConfig.getOnthrowMethod();\n+            if (StringUtils.isNotEmpty(onthrowMethod)) {\n+                asyncMethodInfo.setOnthrowMethod(getMethodByName(methodConfig.getOnthrow().getClass(), onthrowMethod));\n+            }\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e.getMessage(), e);\n+        }\n+\n+        return asyncMethodInfo;\n+    }\n+\n+    private static Method getMethodByName(Class<?> clazz, String methodName) {\n+        try {\n+            return ReflectUtils.findMethodByMethodName(clazz, methodName);\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static boolean isPrimitive(Class<?> type) {\n+        return type.isPrimitive()\n+                || type == String.class\n+                || type == Character.class\n+                || type == Boolean.class\n+                || type == Byte.class\n+                || type == Short.class\n+                || type == Integer.class\n+                || type == Long.class\n+                || type == Float.class\n+                || type == Double.class\n+                || type == Object.class;\n+    }\n+\n+    private static Object convertPrimitive(Class<?> type, String value) {\n+        if (type == char.class || type == Character.class) {\n+            return value.length() > 0 ? value.charAt(0) : '\\0';\n+        } else if (type == boolean.class || type == Boolean.class) {\n+            return Boolean.valueOf(value);\n+        } else if (type == byte.class || type == Byte.class) {\n+            return Byte.valueOf(value);\n+        } else if (type == short.class || type == Short.class) {\n+            return Short.valueOf(value);\n+        } else if (type == int.class || type == Integer.class) {\n+            return Integer.valueOf(value);\n+        } else if (type == long.class || type == Long.class) {\n+            return Long.valueOf(value);\n+        } else if (type == float.class || type == Float.class) {\n+            return Float.valueOf(value);\n+        } else if (type == double.class || type == Double.class) {\n+            return Double.valueOf(value);\n+        }\n+        return value;\n+    }\n+\n+    protected static void checkExtension(Class<?> type, String property, String value) {\n+        checkName(property, value);\n+        if (value != null && value.length() > 0\n+                && !ExtensionLoader.getExtensionLoader(type).hasExtension(value)) {\n+            throw new IllegalStateException(\"No such extension \" + value + \" for \" + property + \"/\" + type.getName());\n+        }\n+    }\n+\n+    protected static void checkMultiExtension(Class<?> type, String property, String value) {\n+        checkMultiName(property, value);\n+        if (value != null && value.length() > 0) {\n+            String[] values = value.split(\"\\\\s*[,]+\\\\s*\");\n+            for (String v : values) {\n+                if (v.startsWith(Constants.REMOVE_VALUE_PREFIX)) {\n+                    v = v.substring(1);\n+                }\n+                if (Constants.DEFAULT_KEY.equals(v)) {\n+                    continue;\n+                }\n+                if (!ExtensionLoader.getExtensionLoader(type).hasExtension(v)) {\n+                    throw new IllegalStateException(\"No such extension \" + v + \" for \" + property + \"/\" + type.getName());\n+                }\n+            }\n+        }\n+    }\n+\n+    protected static void checkLength(String property, String value) {\n+        checkProperty(property, value, MAX_LENGTH, null);\n+    }\n+\n+    protected static void checkPathLength(String property, String value) {\n+        checkProperty(property, value, MAX_PATH_LENGTH, null);\n+    }\n+\n+    protected static void checkName(String property, String value) {\n+        checkProperty(property, value, MAX_LENGTH, PATTERN_NAME);\n+    }\n+\n+    protected static void checkNameHasSymbol(String property, String value) {\n+        checkProperty(property, value, MAX_LENGTH, PATTERN_NAME_HAS_SYMBOL);\n+    }\n+\n+    protected static void checkKey(String property, String value) {\n+        checkProperty(property, value, MAX_LENGTH, PATTERN_KEY);\n+    }\n+\n+    protected static void checkMultiName(String property, String value) {\n+        checkProperty(property, value, MAX_LENGTH, PATTERN_MULTI_NAME);\n+    }\n+\n+    protected static void checkPathName(String property, String value) {\n+        checkProperty(property, value, MAX_PATH_LENGTH, PATTERN_PATH);\n+    }\n+\n+    protected static void checkMethodName(String property, String value) {\n+        checkProperty(property, value, MAX_LENGTH, PATTERN_METHOD_NAME);\n+    }\n+\n+    protected static void checkParameterName(Map<String, String> parameters) {\n+        if (parameters == null || parameters.size() == 0) {\n+            return;\n+        }\n+        for (Map.Entry<String, String> entry : parameters.entrySet()) {\n+            checkNameHasSymbol(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    protected static void checkProperty(String property, String value, int maxlength, Pattern pattern) {\n+        if (value == null || value.length() == 0) {\n+            return;\n+        }\n+        if (value.length() > maxlength) {\n+            throw new IllegalStateException(\"Invalid \" + property + \"=\\\"\" + value + \"\\\" is longer than \" + maxlength);\n+        }\n+        if (pattern != null) {\n+            Matcher matcher = pattern.matcher(value);\n+            if (!matcher.matches()) {\n+                throw new IllegalStateException(\"Invalid \" + property + \"=\\\"\" + value + \"\\\" contains illegal \" +\n+                        \"character, only digit, letter, '-', '_' or '.' is legal.\");\n+            }\n+        }\n+    }\n+\n+    @Parameter(excluded = true)\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    protected void appendAnnotation(Class<?> annotationClass, Object annotation) {\n+        Method[] methods = annotationClass.getMethods();\n+        for (Method method : methods) {\n+            if (method.getDeclaringClass() != Object.class\n+                    && method.getReturnType() != void.class\n+                    && method.getParameterTypes().length == 0\n+                    && Modifier.isPublic(method.getModifiers())\n+                    && !Modifier.isStatic(method.getModifiers())) {\n+                try {\n+                    String property = method.getName();\n+                    if (\"interfaceClass\".equals(property) || \"interfaceName\".equals(property)) {\n+                        property = \"interface\";\n+                    }\n+                    String setter = \"set\" + property.substring(0, 1).toUpperCase() + property.substring(1);\n+                    Object value = method.invoke(annotation);\n+                    if (value != null && !value.equals(method.getDefaultValue())) {\n+                        Class<?> parameterType = ReflectUtils.getBoxedClass(method.getReturnType());\n+                        if (\"filter\".equals(property) || \"listener\".equals(property)) {\n+                            parameterType = String.class;\n+                            value = StringUtils.join((String[]) value, \",\");\n+                        } else if (\"parameters\".equals(property)) {\n+                            parameterType = Map.class;\n+                            value = CollectionUtils.toStringMap((String[]) value);\n+                        }\n+                        try {\n+                            Method setterMethod = getClass().getMethod(setter, parameterType);\n+                            setterMethod.invoke(this, value);\n+                        } catch (NoSuchMethodException e) {\n+                            // ignore\n+                        }\n+                    }\n+                } catch (Throwable e) {\n+                    logger.error(e.getMessage(), e);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        try {\n+            StringBuilder buf = new StringBuilder();\n+            buf.append(\"<dubbo:\");\n+            buf.append(getTagName(getClass()));\n+            Method[] methods = getClass().getMethods();\n+            for (Method method : methods) {\n+                try {\n+                    String name = method.getName();\n+                    if ((name.startsWith(\"get\") || name.startsWith(\"is\"))\n+                            && !\"getClass\".equals(name) && !\"get\".equals(name) && !\"is\".equals(name)\n+                            && Modifier.isPublic(method.getModifiers())\n+                            && method.getParameterTypes().length == 0\n+                            && isPrimitive(method.getReturnType())) {\n+                        int i = name.startsWith(\"get\") ? 3 : 2;\n+                        String key = name.substring(i, i + 1).toLowerCase() + name.substring(i + 1);\n+                        Object value = method.invoke(this);\n+                        if (value != null) {\n+                            buf.append(\" \");\n+                            buf.append(key);\n+                            buf.append(\"=\\\"\");\n+                            buf.append(value);\n+                            buf.append(\"\\\"\");\n+                        }\n+                    }\n+                } catch (Exception e) {\n+                    logger.warn(e.getMessage(), e);\n+                }\n+            }\n+            buf.append(\" />\");\n+            return buf.toString();\n+        } catch (Throwable t) {\n+            logger.warn(t.getMessage(), t);\n+            return super.toString();\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "sha": "fdaa3b16a1cf9d08e5ff891b89e38f9919a8cdc4",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 47,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "patch": "@@ -24,14 +24,12 @@\n import org.apache.dubbo.common.extension.ExtensionLoader;\r\n import org.apache.dubbo.common.utils.ConfigUtils;\r\n import org.apache.dubbo.common.utils.NetUtils;\r\n-import org.apache.dubbo.common.utils.ReflectUtils;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n import org.apache.dubbo.config.annotation.Reference;\r\n import org.apache.dubbo.config.support.Parameter;\r\n import org.apache.dubbo.rpc.Invoker;\r\n import org.apache.dubbo.rpc.Protocol;\r\n import org.apache.dubbo.rpc.ProxyFactory;\r\n-import org.apache.dubbo.rpc.StaticContext;\r\n import org.apache.dubbo.rpc.cluster.Cluster;\r\n import org.apache.dubbo.rpc.cluster.directory.StaticDirectory;\r\n import org.apache.dubbo.rpc.cluster.support.AvailableCluster;\r\n@@ -45,7 +43,6 @@\n import java.io.File;\r\n import java.io.FileInputStream;\r\n import java.io.IOException;\r\n-import java.lang.reflect.Method;\r\n import java.util.ArrayList;\r\n import java.util.Arrays;\r\n import java.util.HashMap;\r\n@@ -116,39 +113,6 @@ public ReferenceConfig(Reference reference) {\n         appendAnnotation(Reference.class, reference);\r\n     }\r\n \r\n-    private static void checkAndConvertImplicitConfig(MethodConfig method, Map<String, String> map, Map<Object, Object> attributes) {\r\n-        //check config conflict\r\n-        if (Boolean.FALSE.equals(method.isReturn()) && (method.getOnreturn() != null || method.getOnthrow() != null)) {\r\n-            throw new IllegalStateException(\"method config error : return attribute must be set true when onreturn or onthrow has been setted.\");\r\n-        }\r\n-        //convert onreturn methodName to Method\r\n-        String onReturnMethodKey = StaticContext.getKey(map, method.getName(), Constants.ON_RETURN_METHOD_KEY);\r\n-        Object onReturnMethod = attributes.get(onReturnMethodKey);\r\n-        if (onReturnMethod instanceof String) {\r\n-            attributes.put(onReturnMethodKey, getMethodByName(method.getOnreturn().getClass(), onReturnMethod.toString()));\r\n-        }\r\n-        //convert onthrow methodName to Method\r\n-        String onThrowMethodKey = StaticContext.getKey(map, method.getName(), Constants.ON_THROW_METHOD_KEY);\r\n-        Object onThrowMethod = attributes.get(onThrowMethodKey);\r\n-        if (onThrowMethod instanceof String) {\r\n-            attributes.put(onThrowMethodKey, getMethodByName(method.getOnthrow().getClass(), onThrowMethod.toString()));\r\n-        }\r\n-        //convert oninvoke methodName to Method\r\n-        String onInvokeMethodKey = StaticContext.getKey(map, method.getName(), Constants.ON_INVOKE_METHOD_KEY);\r\n-        Object onInvokeMethod = attributes.get(onInvokeMethodKey);\r\n-        if (onInvokeMethod instanceof String) {\r\n-            attributes.put(onInvokeMethodKey, getMethodByName(method.getOninvoke().getClass(), onInvokeMethod.toString()));\r\n-        }\r\n-    }\r\n-\r\n-    private static Method getMethodByName(Class<?> clazz, String methodName) {\r\n-        try {\r\n-            return ReflectUtils.findMethodByMethodName(clazz, methodName);\r\n-        } catch (Exception e) {\r\n-            throw new IllegalStateException(e);\r\n-        }\r\n-    }\r\n-\r\n     public URL toUrl() {\r\n         return urls.isEmpty() ? null : urls.iterator().next();\r\n     }\r\n@@ -309,23 +273,20 @@ private void init() {\n         appendParameters(map, module);\r\n         appendParameters(map, consumer, Constants.DEFAULT_KEY);\r\n         appendParameters(map, this);\r\n-        String prefix = StringUtils.getServiceKey(map);\r\n+        Map<String, Object> attributes = null;\r\n         if (methods != null && !methods.isEmpty()) {\r\n-            Map<Object, Object> attributes = new HashMap<Object, Object>();\r\n-            for (MethodConfig method : methods) {\r\n-                appendParameters(map, method, method.getName());\r\n-                String retryKey = method.getName() + \".retry\";\r\n+            attributes = new HashMap<String, Object>();\r\n+            for (MethodConfig methodConfig : methods) {\r\n+                appendParameters(map, methodConfig, methodConfig.getName());\r\n+                String retryKey = methodConfig.getName() + \".retry\";\r\n                 if (map.containsKey(retryKey)) {\r\n                     String retryValue = map.remove(retryKey);\r\n                     if (\"false\".equals(retryValue)) {\r\n-                        map.put(method.getName() + \".retries\", \"0\");\r\n+                        map.put(methodConfig.getName() + \".retries\", \"0\");\r\n                     }\r\n                 }\r\n-                appendAttributes(attributes, method, prefix + \".\" + method.getName());\r\n-                checkAndConvertImplicitConfig(method, map, attributes);\r\n+                attributes.put(methodConfig.getName(), convertMethodConfig2AyncInfo(methodConfig));\r\n             }\r\n-            //attributes are stored by system context.\r\n-            StaticContext.getSystemContext().putAll(attributes);\r\n         }\r\n \r\n         String hostToRegistry = ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY);\r\n@@ -337,7 +298,8 @@ private void init() {\n         map.put(Constants.REGISTER_IP_KEY, hostToRegistry);\r\n \r\n         ref = createProxy(map);\r\n-        ConsumerModel consumerModel = new ConsumerModel(getUniqueServiceName(), ref, interfaceClass.getMethods());\r\n+\r\n+        ConsumerModel consumerModel = new ConsumerModel(getUniqueServiceName(), ref, interfaceClass.getMethods(), attributes);\r\n         ApplicationModel.initConsumerModel(getUniqueServiceName(), consumerModel);\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "sha": "61ed531e141359dadfc7905a298c3e9bfcff5681",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 2,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java",
                "patch": "@@ -141,7 +141,7 @@ public void testAppendParameters4() throws Exception {\n \n     @Test\n     public void testAppendAttributes1() throws Exception {\n-        Map<Object, Object> parameters = new HashMap<Object, Object>();\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n         AbstractConfig.appendAttributes(parameters, new AttributeConfig('l', true, (byte) 0x01), \"prefix\");\n         TestCase.assertEquals('l', parameters.get(\"prefix.let\"));\n         TestCase.assertEquals(true, parameters.get(\"prefix.activate\"));\n@@ -150,7 +150,7 @@ public void testAppendAttributes1() throws Exception {\n \n     @Test\n     public void testAppendAttributes2() throws Exception {\n-        Map<Object, Object> parameters = new HashMap<Object, Object>();\n+        Map<String, Object> parameters = new HashMap<String, Object>();\n         AbstractConfig.appendAttributes(parameters, new AttributeConfig('l', true, (byte) 0x01));\n         TestCase.assertEquals('l', parameters.get(\"let\"));\n         TestCase.assertEquals(true, parameters.get(\"activate\"));",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java",
                "sha": "ef7354dfd2b430a84f27e850b75508f22e436776",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 6,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "patch": "@@ -100,7 +100,7 @@ public void testOnreturn() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOnreturn(\"on-return-object\");\n         assertThat(method.getOnreturn(), equalTo((Object) \"on-return-object\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_RETURN_INSTANCE_KEY, (Object) \"on-return-object\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -113,7 +113,7 @@ public void testOnreturnMethod() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOnreturnMethod(\"on-return-method\");\n         assertThat(method.getOnreturnMethod(), equalTo(\"on-return-method\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_RETURN_METHOD_KEY, (Object) \"on-return-method\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -126,7 +126,7 @@ public void testOnthrow() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOnthrow(\"on-throw-object\");\n         assertThat(method.getOnthrow(), equalTo((Object) \"on-throw-object\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_THROW_INSTANCE_KEY, (Object) \"on-throw-object\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -139,7 +139,7 @@ public void testOnthrowMethod() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOnthrowMethod(\"on-throw-method\");\n         assertThat(method.getOnthrowMethod(), equalTo(\"on-throw-method\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_THROW_METHOD_KEY, (Object) \"on-throw-method\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -152,7 +152,7 @@ public void testOninvoke() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOninvoke(\"on-invoke-object\");\n         assertThat(method.getOninvoke(), equalTo((Object) \"on-invoke-object\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_INVOKE_INSTANCE_KEY, (Object) \"on-invoke-object\"));\n         Map<String, String> parameters = new HashMap<String, String>();\n@@ -165,7 +165,7 @@ public void testOninvokeMethod() throws Exception {\n         MethodConfig method = new MethodConfig();\n         method.setOninvokeMethod(\"on-invoke-method\");\n         assertThat(method.getOninvokeMethod(), equalTo(\"on-invoke-method\"));\n-        Map<Object, Object> attribute = new HashMap<Object, Object>();\n+        Map<String, Object> attribute = new HashMap<String, Object>();\n         MethodConfig.appendAttributes(attribute, method);\n         assertThat(attribute, hasEntry((Object) Constants.ON_INVOKE_METHOD_KEY, (Object) \"on-invoke-method\"));\n         Map<String, String> parameters = new HashMap<String, String>();",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "sha": "8f7e8609ce7e9ffcefaf3d7982a3de589563501c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/99a00ba72b53d6f740899ddb76c858b8f99683ac/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/StaticContext.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/StaticContext.java?ref=99a00ba72b53d6f740899ddb76c858b8f99683ac",
                "deletions": 75,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/StaticContext.java",
                "patch": "@@ -1,75 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.dubbo.rpc;\n-\n-import org.apache.dubbo.common.URL;\n-import org.apache.dubbo.common.utils.StringUtils;\n-\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-\n-/**\n- * System context, for internal use only\n- */\n-public class StaticContext extends ConcurrentHashMap<Object, Object> {\n-    private static final long serialVersionUID = 1L;\n-    private static final String SYSTEMNAME = \"system\";\n-    private static final ConcurrentMap<String, StaticContext> context_map = new ConcurrentHashMap<String, StaticContext>();\n-    private String name;\n-\n-    private StaticContext(String name) {\n-        super();\n-        this.name = name;\n-    }\n-\n-    public static StaticContext getSystemContext() {\n-        return getContext(SYSTEMNAME);\n-    }\n-\n-    public static StaticContext getContext(String name) {\n-        StaticContext appContext = context_map.get(name);\n-        if (appContext == null) {\n-            appContext = context_map.putIfAbsent(name, new StaticContext(name));\n-            if (appContext == null) {\n-                appContext = context_map.get(name);\n-            }\n-        }\n-        return appContext;\n-    }\n-\n-    public static StaticContext remove(String name) {\n-        return context_map.remove(name);\n-    }\n-\n-    public static String getKey(URL url, String methodName, String suffix) {\n-        return getKey(url.getServiceKey(), methodName, suffix);\n-    }\n-\n-    public static String getKey(Map<String, String> paras, String methodName, String suffix) {\n-        return getKey(StringUtils.getServiceKey(paras), methodName, suffix);\n-    }\n-\n-    private static String getKey(String servicekey, String methodName, String suffix) {\n-        StringBuffer sb = new StringBuffer().append(servicekey).append(\".\").append(methodName).append(\".\").append(suffix);\n-        return sb.toString();\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/99a00ba72b53d6f740899ddb76c858b8f99683ac/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/StaticContext.java",
                "sha": "30caf571092d2e7ed41978a071265ab67dcec191",
                "status": "removed"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 1,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java",
                "patch": "@@ -23,7 +23,15 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n-// adjust project structure in order to fully utilize the methods introduced here.\n+/**\n+ * Represent a application which is using Dubbo and store basic metadata info for using\n+ * during the processing of RPC invoking.\n+ *\n+ * ApplicationModel includes many ProviderModel which is about published services\n+ * and many Consumer Model which is about subscribed services.\n+ *\n+ * adjust project structure in order to fully utilize the methods introduced here.\n+ */\n public class ApplicationModel {\n \n     protected static final Logger LOGGER = LoggerFactory.getLogger(ApplicationModel.class);",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ApplicationModel.java",
                "sha": "74a52d7c4c7f47cfa86182c706ef148c680b030d",
                "status": "modified"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ConsumerMethodModel.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ConsumerMethodModel.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 1,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ConsumerMethodModel.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.apache.dubbo.common.Constants;\n \n import java.lang.reflect.Method;\n+import java.util.Map;\n \n public class ConsumerMethodModel {\n     private final Method method;\n@@ -30,13 +31,22 @@\n     private final String methodName;\n     private final boolean generic;\n \n-    public ConsumerMethodModel(Method method) {\n+    private final AsyncMethodInfo asyncInfo;\n+\n+\n+    public ConsumerMethodModel(Method method, Map<String, Object> attributes) {\n         this.method = method;\n         this.parameterClasses = method.getParameterTypes();\n         this.returnClass = method.getReturnType();\n         this.parameterTypes = this.createParamSignature(parameterClasses);\n         this.methodName = method.getName();\n         this.generic = methodName.equals(Constants.$INVOKE) && parameterTypes != null && parameterTypes.length == 3;\n+\n+        if (attributes != null) {\n+            asyncInfo = (AsyncMethodInfo) attributes.get(methodName);\n+        } else {\n+            asyncInfo = null;\n+        }\n     }\n \n     public Method getMethod() {\n@@ -47,6 +57,9 @@ public Method getMethod() {\n         return returnClass;\n     }\n \n+    public AsyncMethodInfo getAsyncInfo() {\n+        return asyncInfo;\n+    }\n \n     public String getMethodName() {\n         return methodName;\n@@ -75,4 +88,73 @@ public boolean isGeneric() {\n     public Class<?>[] getParameterClasses() {\n         return parameterClasses;\n     }\n+\n+\n+    public static class AsyncMethodInfo {\n+        // callback instance when async-call is invoked\n+        private Object oninvokeInstance;\n+\n+        // callback method when async-call is invoked\n+        private Method oninvokeMethod;\n+\n+        // callback instance when async-call is returned\n+        private Object onreturnInstance;\n+\n+        // callback method when async-call is returned\n+        private Method onreturnMethod;\n+\n+        // callback instance when async-call has exception thrown\n+        private Object onthrowInstance;\n+\n+        // callback method when async-call has exception thrown\n+        private Method onthrowMethod;\n+\n+        public Object getOninvokeInstance() {\n+            return oninvokeInstance;\n+        }\n+\n+        public void setOninvokeInstance(Object oninvokeInstance) {\n+            this.oninvokeInstance = oninvokeInstance;\n+        }\n+\n+        public Method getOninvokeMethod() {\n+            return oninvokeMethod;\n+        }\n+\n+        public void setOninvokeMethod(Method oninvokeMethod) {\n+            this.oninvokeMethod = oninvokeMethod;\n+        }\n+\n+        public Object getOnreturnInstance() {\n+            return onreturnInstance;\n+        }\n+\n+        public void setOnreturnInstance(Object onreturnInstance) {\n+            this.onreturnInstance = onreturnInstance;\n+        }\n+\n+        public Method getOnreturnMethod() {\n+            return onreturnMethod;\n+        }\n+\n+        public void setOnreturnMethod(Method onreturnMethod) {\n+            this.onreturnMethod = onreturnMethod;\n+        }\n+\n+        public Object getOnthrowInstance() {\n+            return onthrowInstance;\n+        }\n+\n+        public void setOnthrowInstance(Object onthrowInstance) {\n+            this.onthrowInstance = onthrowInstance;\n+        }\n+\n+        public Method getOnthrowMethod() {\n+            return onthrowMethod;\n+        }\n+\n+        public void setOnthrowMethod(Method onthrowMethod) {\n+            this.onthrowMethod = onthrowMethod;\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ConsumerMethodModel.java",
                "sha": "5a871cecc635413af5d499ead0e3cd166726b62c",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ConsumerModel.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ConsumerModel.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 2,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ConsumerModel.java",
                "patch": "@@ -21,20 +21,24 @@\n import java.util.IdentityHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n \n+/**\n+ * Consumer Model which is about subscribed services.\n+ */\n public class ConsumerModel {\n     private final Object proxyObject;\n     private final String serviceName;\n \n     private final Map<Method, ConsumerMethodModel> methodModels = new IdentityHashMap<Method, ConsumerMethodModel>();\n \n-    public ConsumerModel(String serviceName, Object proxyObject, Method[] methods) {\n+    public ConsumerModel(String serviceName, Object proxyObject, Method[] methods, Map<String, Object> attributes) {\n         this.serviceName = serviceName;\n         this.proxyObject = proxyObject;\n \n         if (proxyObject != null) {\n             for (Method method : methods) {\n-                methodModels.put(method, new ConsumerMethodModel(method));\n+                methodModels.put(method, new ConsumerMethodModel(method, attributes));\n             }\n         }\n     }\n@@ -53,6 +57,17 @@ public ConsumerMethodModel getMethodModel(Method method) {\n         return methodModels.get(method);\n     }\n \n+    /**\n+     * Return method model for the given method on consumer side\n+     *\n+     * @param method method object\n+     * @return method model\n+     */\n+    public ConsumerMethodModel getMethodModel(String method) {\n+        Optional<Map.Entry<Method, ConsumerMethodModel>> consumerMethodModelEntry = methodModels.entrySet().stream().filter(entry -> entry.getKey().getName().equals(method)).findFirst();\n+        return consumerMethodModelEntry.map(Map.Entry::getValue).orElse(null);\n+    }\n+\n     /**\n      * Return all method models for the current service\n      *",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ConsumerModel.java",
                "sha": "398bc91bd21df56014d02f1e5c5fab1caa88c3a4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 0,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java",
                "patch": "@@ -23,6 +23,9 @@\n import java.util.List;\n import java.util.Map;\n \n+/**\n+ * ProviderModel which is about published services\n+ */\n public class ProviderModel {\n     private final String serviceName;\n     private final Object serviceInstance;",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/model/ProviderModel.java",
                "sha": "6fb9bebd7ea2688a71772beedd742e6c59831872",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/99a00ba72b53d6f740899ddb76c858b8f99683ac/dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/StaticContextTest.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/StaticContextTest.java?ref=99a00ba72b53d6f740899ddb76c858b8f99683ac",
                "deletions": 64,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/StaticContextTest.java",
                "patch": "@@ -1,64 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.dubbo.rpc;\n-\n-import org.apache.dubbo.common.Constants;\n-import org.apache.dubbo.common.URL;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-public class StaticContextTest {\n-\n-    @Test\n-    public void testGetContext() {\n-        String name = \"custom\";\n-\n-        StaticContext context = StaticContext.getContext(name);\n-        Assert.assertTrue(context != null);\n-        Assert.assertEquals(name, context.getName());\n-\n-        StaticContext.remove(name);\n-\n-        StaticContext sysContext = StaticContext.getSystemContext();\n-        Assert.assertTrue(sysContext != null);\n-\n-    }\n-\n-    @Test\n-    public void testGetKey() {\n-        String interfaceName = \"interface\";\n-        String method = \"method\";\n-        String group = \"group\";\n-        String version = \"1.0\";\n-\n-        String suffix = \"suffix\";\n-\n-        Map<String, String> para = new HashMap<>();\n-        para.put(Constants.INTERFACE_KEY, interfaceName);\n-        para.put(Constants.GROUP_KEY, group);\n-        para.put(Constants.VERSION_KEY, version);\n-\n-        URL url = new URL(\"dubbo\", \"localhost\", 20880, interfaceName, para);\n-\n-        Assert.assertEquals(StaticContext.getKey(url, method, suffix),\n-                StaticContext.getKey(para, method, suffix));\n-\n-    }\n-}",
                "raw_url": "https://github.com/apache/dubbo/raw/99a00ba72b53d6f740899ddb76c858b8f99683ac/dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/StaticContextTest.java",
                "sha": "723b1be1e4639a0fd6ecd3edfb96d45e10b004a7",
                "status": "removed"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 8,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "patch": "@@ -26,7 +26,9 @@\n import org.apache.dubbo.rpc.PostProcessFilter;\n import org.apache.dubbo.rpc.Result;\n import org.apache.dubbo.rpc.RpcException;\n-import org.apache.dubbo.rpc.StaticContext;\n+import org.apache.dubbo.rpc.model.ApplicationModel;\n+import org.apache.dubbo.rpc.model.ConsumerMethodModel;\n+import org.apache.dubbo.rpc.model.ConsumerModel;\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n@@ -79,14 +81,18 @@ private void asyncCallback(final Invoker<?> invoker, final Invocation invocation\n     }\n \n     private void fireInvokeCallback(final Invoker<?> invoker, final Invocation invocation) {\n-        final Method onInvokeMethod = (Method) StaticContext.getSystemContext().get(StaticContext.getKey(invoker.getUrl(), invocation.getMethodName(), Constants.ON_INVOKE_METHOD_KEY));\n-        final Object onInvokeInst = StaticContext.getSystemContext().get(StaticContext.getKey(invoker.getUrl(), invocation.getMethodName(), Constants.ON_INVOKE_INSTANCE_KEY));\n+        final ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = getAsyncMethodInfo(invoker, invocation);\n+        if (asyncMethodInfo == null) {\n+            return;\n+        }\n+        final Method onInvokeMethod = asyncMethodInfo.getOninvokeMethod();\n+        final Object onInvokeInst = asyncMethodInfo.getOninvokeInstance();\n \n         if (onInvokeMethod == null && onInvokeInst == null) {\n             return;\n         }\n         if (onInvokeMethod == null || onInvokeInst == null) {\n-            throw new IllegalStateException(\"service:\" + invoker.getUrl().getServiceKey() + \" has a onreturn callback config , but no such \" + (onInvokeMethod == null ? \"method\" : \"instance\") + \" found. url:\" + invoker.getUrl());\n+            throw new IllegalStateException(\"service:\" + invoker.getUrl().getServiceKey() + \" has a oninvoke callback config , but no such \" + (onInvokeMethod == null ? \"method\" : \"instance\") + \" found. url:\" + invoker.getUrl());\n         }\n         if (!onInvokeMethod.isAccessible()) {\n             onInvokeMethod.setAccessible(true);\n@@ -103,8 +109,13 @@ private void fireInvokeCallback(final Invoker<?> invoker, final Invocation invoc\n     }\n \n     private void fireReturnCallback(final Invoker<?> invoker, final Invocation invocation, final Object result) {\n-        final Method onReturnMethod = (Method) StaticContext.getSystemContext().get(StaticContext.getKey(invoker.getUrl(), invocation.getMethodName(), Constants.ON_RETURN_METHOD_KEY));\n-        final Object onReturnInst = StaticContext.getSystemContext().get(StaticContext.getKey(invoker.getUrl(), invocation.getMethodName(), Constants.ON_RETURN_INSTANCE_KEY));\n+        final ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = getAsyncMethodInfo(invoker, invocation);\n+        if (asyncMethodInfo == null) {\n+            return;\n+        }\n+\n+        final Method onReturnMethod = asyncMethodInfo.getOnreturnMethod();\n+        final Object onReturnInst = asyncMethodInfo.getOnreturnInstance();\n \n         //not set onreturn callback\n         if (onReturnMethod == null && onReturnInst == null) {\n@@ -144,8 +155,13 @@ private void fireReturnCallback(final Invoker<?> invoker, final Invocation invoc\n     }\n \n     private void fireThrowCallback(final Invoker<?> invoker, final Invocation invocation, final Throwable exception) {\n-        final Method onthrowMethod = (Method) StaticContext.getSystemContext().get(StaticContext.getKey(invoker.getUrl(), invocation.getMethodName(), Constants.ON_THROW_METHOD_KEY));\n-        final Object onthrowInst = StaticContext.getSystemContext().get(StaticContext.getKey(invoker.getUrl(), invocation.getMethodName(), Constants.ON_THROW_INSTANCE_KEY));\n+        final ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = getAsyncMethodInfo(invoker, invocation);\n+        if (asyncMethodInfo == null) {\n+            return;\n+        }\n+\n+        final Method onthrowMethod = asyncMethodInfo.getOnthrowMethod();\n+        final Object onthrowInst = asyncMethodInfo.getOnthrowInstance();\n \n         //onthrow callback not configured\n         if (onthrowMethod == null && onthrowInst == null) {\n@@ -184,4 +200,20 @@ private void fireThrowCallback(final Invoker<?> invoker, final Invocation invoca\n             logger.error(invocation.getMethodName() + \".call back method invoke error . callback method :\" + onthrowMethod + \", url:\" + invoker.getUrl(), exception);\n         }\n     }\n+\n+    private ConsumerMethodModel.AsyncMethodInfo getAsyncMethodInfo(Invoker<?> invoker, Invocation invocation) {\n+        final ConsumerModel consumerModel = ApplicationModel.getConsumerModel(invoker.getUrl().getServiceKey());\n+        if (consumerModel == null) {\n+            return null;\n+        }\n+        ConsumerMethodModel methodModel = consumerModel.getMethodModel(invocation.getMethodName());\n+        if (methodModel == null) {\n+            return null;\n+        }\n+        final ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = methodModel.getAsyncInfo();\n+        if (asyncMethodInfo == null) {\n+            return null;\n+        }\n+        return asyncMethodInfo;\n+    }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "sha": "f101ed84277b2ec583338bab58688df7edfb2483",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/dubbo/blob/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ImplicitCallBackTest.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ImplicitCallBackTest.java?ref=36a1155bbed8cb31d2b6b4a10908fdef0acd02c9",
                "deletions": 37,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ImplicitCallBackTest.java",
                "patch": "@@ -23,7 +23,9 @@\n import org.apache.dubbo.rpc.Exporter;\n import org.apache.dubbo.rpc.Invoker;\n import org.apache.dubbo.rpc.RpcContext;\n-import org.apache.dubbo.rpc.StaticContext;\n+import org.apache.dubbo.rpc.model.ApplicationModel;\n+import org.apache.dubbo.rpc.model.ConsumerMethodModel;\n+import org.apache.dubbo.rpc.model.ConsumerModel;\n import org.apache.dubbo.rpc.protocol.dubbo.support.ProtocolUtils;\n import org.junit.After;\n import org.junit.Assert;\n@@ -72,6 +74,12 @@ public void initOrResetService() {\n         referService();\n     }\n \n+    public void initOrResetExService() {\n+        destroyService();\n+        exportExService();\n+        referService();\n+    }\n+\n     public void destroyService() {\n         demoProxy = null;\n         try {\n@@ -95,26 +103,36 @@ public void exportExService() {\n \n     public void initOrResetUrl(boolean isAsync) throws Exception {\n         int port = NetUtils.getAvailablePort();\n-        consumerUrl = serviceURL = URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\" + IDemoService.class.getName() + \"?group=test&async=\" + isAsync + \"&timeout=100000&reference.filter=future\");\n-        StaticContext.getSystemContext().clear();\n+        consumerUrl = serviceURL = URL.valueOf(\"dubbo://127.0.0.1:\" + port + \"/\" + IDemoService.class.getName() + \"?group=\" + System.nanoTime() + \"&async=\" + isAsync + \"&timeout=100000&reference.filter=future\");\n     }\n \n     public void initImplicitCallBackURL_onlyOnthrow() throws Exception {\n-        StaticContext.getSystemContext().put(StaticContext.getKey(consumerUrl, \"get\", Constants.ON_THROW_METHOD_KEY), onThrowMethod);\n-        StaticContext.getSystemContext().put(StaticContext.getKey(consumerUrl, \"get\", Constants.ON_THROW_INSTANCE_KEY), notify);\n+        Map<String, Object> attitudes = new HashMap<>();\n+        ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = new ConsumerMethodModel.AsyncMethodInfo();\n+        asyncMethodInfo.setOnthrowInstance(notify);\n+        asyncMethodInfo.setOnthrowMethod(onThrowMethod);\n+        attitudes.put(\"get\", asyncMethodInfo);\n+        ApplicationModel.initConsumerModel(consumerUrl.getServiceKey(), new ConsumerModel(consumerUrl.getServiceKey(), demoProxy, IDemoService.class.getMethods(), attitudes));\n     }\n \n     //================================================================================================\n \n     public void initImplicitCallBackURL_onlyOnreturn() throws Exception {\n-        StaticContext.getSystemContext().put(StaticContext.getKey(consumerUrl, \"get\", Constants.ON_RETURN_METHOD_KEY), onReturnMethod);\n-        StaticContext.getSystemContext().put(StaticContext.getKey(consumerUrl, \"get\", Constants.ON_RETURN_INSTANCE_KEY), notify);\n-\n+        Map<String, Object> attitudes = new HashMap<>();\n+        ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = new ConsumerMethodModel.AsyncMethodInfo();\n+        asyncMethodInfo.setOnreturnInstance(notify);\n+        asyncMethodInfo.setOnreturnMethod(onReturnMethod);\n+        attitudes.put(\"get\", asyncMethodInfo);\n+        ApplicationModel.initConsumerModel(consumerUrl.getServiceKey(), new ConsumerModel(consumerUrl.getServiceKey(), demoProxy, IDemoService.class.getMethods(), attitudes));\n     }\n \n     public void initImplicitCallBackURL_onlyOninvoke() throws Exception {\n-        StaticContext.getSystemContext().put(StaticContext.getKey(consumerUrl, \"get\", Constants.ON_INVOKE_METHOD_KEY), onInvokeMethod);\n-        StaticContext.getSystemContext().put(StaticContext.getKey(consumerUrl, \"get\", Constants.ON_INVOKE_INSTANCE_KEY), notify);\n+        Map<String, Object> attitudes = new HashMap<>();\n+        ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = new ConsumerMethodModel.AsyncMethodInfo();\n+        asyncMethodInfo.setOninvokeInstance(notify);\n+        asyncMethodInfo.setOninvokeMethod(onInvokeMethod);\n+        attitudes.put(\"get\", asyncMethodInfo);\n+        ApplicationModel.initConsumerModel(consumerUrl.getServiceKey(), new ConsumerModel(consumerUrl.getServiceKey(), demoProxy, IDemoService.class.getMethods(), attitudes));\n     }\n \n     @Test\n@@ -129,8 +147,9 @@ public void test_CloseCallback() throws Exception {\n     @Test\n     public void test_Sync_Onreturn() throws Exception {\n         initOrResetUrl(false);\n-        initImplicitCallBackURL_onlyOnreturn();\n         initOrResetService();\n+        initImplicitCallBackURL_onlyOnreturn();\n+\n         int requestId = 2;\n         Person ret = demoProxy.get(requestId);\n         Assert.assertEquals(requestId, ret.getId());\n@@ -148,11 +167,9 @@ public void test_Sync_Onreturn() throws Exception {\n     @Test\n     public void test_Ex_OnReturn() throws Exception {\n         initOrResetUrl(true);\n+        initOrResetExService();\n         initImplicitCallBackURL_onlyOnreturn();\n \n-        destroyService();\n-        exportExService();\n-        referService();\n \n         int requestId = 2;\n         Person ret = demoProxy.get(requestId);\n@@ -171,12 +188,9 @@ public void test_Ex_OnReturn() throws Exception {\n     @Test\n     public void test_Ex_OnInvoke() throws Exception {\n         initOrResetUrl(true);\n+        initOrResetExService();\n         initImplicitCallBackURL_onlyOninvoke();\n \n-        destroyService();\n-        exportExService();\n-        referService();\n-\n         int requestId = 2;\n         Person ret = demoProxy.get(requestId);\n         Assert.assertEquals(null, ret);\n@@ -194,12 +208,9 @@ public void test_Ex_OnInvoke() throws Exception {\n     @Test\n     public void test_Ex_Onthrow() throws Exception {\n         initOrResetUrl(true);\n+        initOrResetExService();\n         initImplicitCallBackURL_onlyOnthrow();\n \n-        destroyService();\n-        exportExService();\n-        referService();\n-\n         int requestId = 2;\n         Person ret = demoProxy.get(requestId);\n         Assert.assertEquals(null, ret);\n@@ -218,10 +229,8 @@ public void test_Ex_Onthrow() throws Exception {\n     @Test\n     public void test_Sync_NoFuture() throws Exception {\n         initOrResetUrl(false);\n+        initOrResetService();\n         initImplicitCallBackURL_onlyOnreturn();\n-        destroyService();\n-        exportService();\n-        referService();\n \n         int requestId = 2;\n         Person ret = demoProxy.get(requestId);\n@@ -234,9 +243,7 @@ public void test_Sync_NoFuture() throws Exception {\n     @Test\n     public void test_Async_Future() throws Exception {\n         initOrResetUrl(true);\n-        destroyService();\n-        exportService();\n-        referService();\n+        initOrResetService();\n \n         int requestId = 2;\n         Person ret = demoProxy.get(requestId);\n@@ -250,9 +257,7 @@ public void test_Async_Future() throws Exception {\n     @Test\n     public void test_Async_Future_Multi() throws Exception {\n         initOrResetUrl(true);\n-        destroyService();\n-        exportService();\n-        referService();\n+        initOrResetService();\n \n         int requestId1 = 1;\n         Person ret = demoProxy.get(requestId1);\n@@ -275,9 +280,7 @@ public void test_Async_Future_Multi() throws Exception {\n     public void test_Async_Future_Ex() throws Throwable {\n         try {\n             initOrResetUrl(true);\n-            destroyService();\n-            exportExService();\n-            referService();\n+            initOrResetExService();\n \n             int requestId = 2;\n             Person ret = demoProxy.get(requestId);\n@@ -295,9 +298,7 @@ public void test_Async_Future_Ex() throws Throwable {\n     @Test(expected = RuntimeException.class)\n     public void test_Normal_Ex() throws Exception {\n         initOrResetUrl(false);\n-        destroyService();\n-        exportExService();\n-        referService();\n+        initOrResetExService();\n \n         int requestId = 2;\n         Person ret = demoProxy.get(requestId);",
                "raw_url": "https://github.com/apache/dubbo/raw/36a1155bbed8cb31d2b6b4a10908fdef0acd02c9/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/ImplicitCallBackTest.java",
                "sha": "4c5308caf2eb69b156eb607f5ed1f31302d0ff68",
                "status": "modified"
            }
        ],
        "message": "[version 2.7.0]remove the StaticContext class and refactor the code related to Async (#2688)\n\n* [Dubbo] move the classes of model from config to rpc-api for reusing\r\n\r\n* remove ServiceClassHolder and use the ApplicationModel replacedly\r\n\r\n* [Dubbo] delete the unused imported of ApplicationModel\r\n\r\n* Update dubbo-demo-consumer.xml\r\n\r\nthis commits is no need to commit to remote repo.\r\n\r\n* remove StaticContext\r\n\r\n* remove the unused imported classes of ReferenceConfig\r\n\r\n* fix NPE of ConsumerModel\r\n\r\n* fix the failed testcase of AbstractClusterInvokerTest\r\n\r\n* [Dubbo] #PR2688 to fix the review issues",
        "parent": "https://github.com/apache/dubbo/commit/99a00ba72b53d6f740899ddb76c858b8f99683ac",
        "patched_files": [
            "AbstractClusterInvoker.java",
            "MethodConfig.java",
            "ConsumerMethodModel.java",
            "ConsumerModel.java",
            "StaticContext.java",
            "TagRouter.java",
            "ReferenceConfig.java",
            "AbstractConfig.java",
            "ApplicationModel.java",
            "ProviderModel.java",
            "FutureFilter.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "AbstractConfigTest.java",
            "MethodConfigTest.java",
            "ImplicitCallBackTest.java",
            "AbstractClusterInvokerTest.java",
            "ReferenceConfigTest.java",
            "TagRouterTest.java",
            "FutureFilterTest.java",
            "StaticContextTest.java"
        ]
    },
    "dubbo_38f45ee": {
        "bug_id": "dubbo_38f45ee",
        "commit": "https://github.com/apache/dubbo/commit/38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
        "file": [
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/dubbo/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java",
                "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+import com.alibaba.dubbo.common.Constants;\n+import com.alibaba.dubbo.common.URL;\n+import com.alibaba.dubbo.common.threadpool.ThreadPool;\n+import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;\n+import com.alibaba.dubbo.common.utils.NamedThreadFactory;\n+\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * EagerThreadPool\n+ * When the core threads are all in busy,\n+ * create new thread instead of putting task into blocking queue.\n+ */\n+public class EagerThreadPool implements ThreadPool {\n+\n+    @Override\n+    public Executor getExecutor(URL url) {\n+        String name = url.getParameter(Constants.THREAD_NAME_KEY, Constants.DEFAULT_THREAD_NAME);\n+        int cores = url.getParameter(Constants.CORE_THREADS_KEY, Constants.DEFAULT_CORE_THREADS);\n+        int threads = url.getParameter(Constants.THREADS_KEY, Integer.MAX_VALUE);\n+        int queues = url.getParameter(Constants.QUEUES_KEY, Constants.DEFAULT_QUEUES);\n+        int alive = url.getParameter(Constants.ALIVE_KEY, Constants.DEFAULT_ALIVE);\n+\n+        // init queue and executor\n+        TaskQueue<Runnable> taskQueue = new TaskQueue<Runnable>(queues <= 0 ? 1 : queues);\n+        EagerThreadPoolExecutor executor = new EagerThreadPoolExecutor(cores,\n+                threads,\n+                alive,\n+                TimeUnit.MILLISECONDS,\n+                taskQueue,\n+                new NamedThreadFactory(name, true),\n+                new AbortPolicyWithReport(name, url));\n+        taskQueue.setExecutor(executor);\n+        return executor;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java",
                "sha": "eb4e1f3feb72f47634de8733efd434768dac7bf7",
                "status": "added"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/dubbo/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java",
                "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * EagerThreadPoolExecutor\n+ */\n+public class EagerThreadPoolExecutor extends ThreadPoolExecutor {\n+\n+    /**\n+     * task count\n+     */\n+    private final AtomicInteger submittedTaskCount = new AtomicInteger(0);\n+\n+    public EagerThreadPoolExecutor(int corePoolSize,\n+                                   int maximumPoolSize,\n+                                   long keepAliveTime,\n+                                   TimeUnit unit, TaskQueue<Runnable> workQueue,\n+                                   ThreadFactory threadFactory,\n+                                   RejectedExecutionHandler handler) {\n+        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);\n+    }\n+\n+    /**\n+     * @return current tasks which are executed\n+     */\n+    public int getSubmittedTaskCount() {\n+        return submittedTaskCount.get();\n+    }\n+\n+    @Override\n+    protected void afterExecute(Runnable r, Throwable t) {\n+        submittedTaskCount.decrementAndGet();\n+    }\n+\n+    @Override\n+    public void execute(Runnable command) {\n+        if (command == null) {\n+            throw new NullPointerException();\n+        }\n+        // do not increment in method beforeExecute!\n+        submittedTaskCount.incrementAndGet();\n+        try {\n+            super.execute(command);\n+        } catch (RejectedExecutionException rx) {\n+            // retry to offer the task into queue.\n+            final TaskQueue queue = (TaskQueue) super.getQueue();\n+            try {\n+                if (!queue.retryOffer(command, 0, TimeUnit.MILLISECONDS)) {\n+                    submittedTaskCount.decrementAndGet();\n+                    throw new RejectedExecutionException(\"Queue capacity is full.\");\n+                }\n+            } catch (InterruptedException x) {\n+                submittedTaskCount.decrementAndGet();\n+                throw new RejectedExecutionException(x);\n+            }\n+        } catch (Throwable t) {\n+            // decrease any way\n+            submittedTaskCount.decrementAndGet();\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java",
                "sha": "47f84c52794b9a352c406db6f91119dc98d82770",
                "status": "added"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/dubbo/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java",
                "patch": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * TaskQueue in the EagerThreadPoolExecutor\n+ * It offer a task if the executor's submittedTaskCount less than currentPoolThreadSize\n+ * or the currentPoolThreadSize more than executor's maximumPoolSize.\n+ * That can make the executor create new worker\n+ * when the task num is bigger than corePoolSize but less than maximumPoolSize.\n+ */\n+public class TaskQueue<R extends Runnable> extends LinkedBlockingQueue<Runnable> {\n+\n+    private static final long serialVersionUID = -2635853580887179627L;\n+\n+    private EagerThreadPoolExecutor executor;\n+\n+    public TaskQueue(int capacity) {\n+        super(capacity);\n+    }\n+\n+    public void setExecutor(EagerThreadPoolExecutor exec) {\n+        executor = exec;\n+    }\n+\n+    @Override\n+    public boolean offer(Runnable runnable) {\n+        if (executor == null) {\n+            throw new RejectedExecutionException(\"The task queue does not have executor!\");\n+        }\n+\n+        int currentPoolThreadSize = executor.getPoolSize();\n+        // have free worker. put task into queue to let the worker deal with task.\n+        if (executor.getSubmittedTaskCount() < currentPoolThreadSize) {\n+            return super.offer(runnable);\n+        }\n+\n+        // return false to let executor create new worker.\n+        if (currentPoolThreadSize < executor.getMaximumPoolSize()) {\n+            return false;\n+        }\n+\n+        // currentPoolThreadSize >= max\n+        return super.offer(runnable);\n+    }\n+\n+    /**\n+     * retry offer task\n+     *\n+     * @param o task\n+     * @return offer success or not\n+     * @throws RejectedExecutionException if executor is terminated.\n+     */\n+    public boolean retryOffer(Runnable o, long timeout, TimeUnit unit) throws InterruptedException {\n+        if (executor.isShutdown()) {\n+            throw new RejectedExecutionException(\"Executor is shutdown!\");\n+        }\n+        return super.offer(o, timeout, unit);\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java",
                "sha": "7e7d87051a9cd0962386968f8dfc30daa8f9c063",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool",
                "patch": "@@ -1,3 +1,4 @@\n fixed=com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool\n cached=com.alibaba.dubbo.common.threadpool.support.cached.CachedThreadPool\n limited=com.alibaba.dubbo.common.threadpool.support.limited.LimitedThreadPool\n+eager=com.alibaba.dubbo.common.threadpool.support.eager.EagerThreadPool",
                "raw_url": "https://github.com/apache/dubbo/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool",
                "sha": "8d87177b7415c8e2aa7d15514700d6cddb923f57",
                "status": "modified"
            },
            {
                "additions": 93,
                "blob_url": "https://github.com/apache/dubbo/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "patch": "@@ -0,0 +1,93 @@\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+\n+import com.alibaba.dubbo.common.URL;\n+import com.alibaba.dubbo.common.extension.ExtensionLoader;\n+import com.alibaba.dubbo.common.threadpool.ThreadPool;\n+import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;\n+import com.alibaba.dubbo.common.utils.NamedThreadFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EagerThreadPoolExecutorTest {\n+\n+    private static final URL URL = new URL(\"dubbo\", \"localhost\", 8080);\n+\n+    /**\n+     * It print like this:\n+     * thread number in current pool\uff1a1,  task number in task queue\uff1a0 executor size: 1\n+     * thread number in current pool\uff1a2,  task number in task queue\uff1a0 executor size: 2\n+     * thread number in current pool\uff1a3,  task number in task queue\uff1a0 executor size: 3\n+     * thread number in current pool\uff1a4,  task number in task queue\uff1a0 executor size: 4\n+     * thread number in current pool\uff1a5,  task number in task queue\uff1a0 executor size: 5\n+     * thread number in current pool\uff1a6,  task number in task queue\uff1a0 executor size: 6\n+     * thread number in current pool\uff1a7,  task number in task queue\uff1a0 executor size: 7\n+     * thread number in current pool\uff1a8,  task number in task queue\uff1a0 executor size: 8\n+     * thread number in current pool\uff1a9,  task number in task queue\uff1a0 executor size: 9\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a0 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a4 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a3 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a2 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a1 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a0 executor size: 10\n+     * <p>\n+     * We can see , when the core threads are in busy,\n+     * the thread pool create thread (but thread nums always less than max) instead of put task into queue.\n+     */\n+    @Test\n+    public void testEagerThreadPool() throws Exception {\n+        String name = \"eager-tf\";\n+        int queues = 5;\n+        int cores = 5;\n+        int threads = 10;\n+        // alive 1 second\n+        long alive = 1000;\n+\n+        //init queue and executor\n+        TaskQueue<Runnable> taskQueue = new TaskQueue<Runnable>(queues);\n+        final EagerThreadPoolExecutor executor = new EagerThreadPoolExecutor(cores,\n+                threads,\n+                alive,\n+                TimeUnit.MILLISECONDS,\n+                taskQueue,\n+                new NamedThreadFactory(name, true),\n+                new AbortPolicyWithReport(name, URL));\n+        taskQueue.setExecutor(executor);\n+\n+        for (int i = 0; i < 15; i++) {\n+            Thread.sleep(50);\n+            executor.execute(new Runnable() {\n+                @Override\n+                public void run() {\n+                    System.out.println(\"thread number in current pool\uff1a\"\n+                            + executor.getPoolSize()\n+                            + \",  task number in task queue\uff1a\"\n+                            + executor.getQueue().size()\n+                            + \" executor size: \"\n+                            + executor.getPoolSize());\n+                    try {\n+                        Thread.sleep(1000);\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            });\n+        }\n+        Thread.sleep(5000);\n+        // cores theads are all alive.\n+        Assert.assertTrue(\"more than cores threads alive!\", executor.getPoolSize() == cores);\n+    }\n+\n+    @Test\n+    public void testSPI() {\n+        ExecutorService executorService = (ExecutorService) ExtensionLoader\n+                .getExtensionLoader(ThreadPool.class)\n+                .getExtension(\"eager\")\n+                .getExecutor(URL);\n+        Assert.assertTrue(\"test spi fail!\",\n+                executorService.getClass().getSimpleName().equals(\"EagerThreadPoolExecutor\"));\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "sha": "a9aeca2c949474ebf35457dd8b1a14d71256308b",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "deletions": 0,
                "filename": "dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java",
                "patch": "@@ -116,6 +116,7 @@ public void test_loadProperties_oneFile_notRootPath() throws Exception {\n         expected.put(\"fixed\", \"com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool\");\n         expected.put(\"cached\", \"com.alibaba.dubbo.common.threadpool.support.cached.CachedThreadPool\");\n         expected.put(\"limited\", \"com.alibaba.dubbo.common.threadpool.support.limited.LimitedThreadPool\");\n+        expected.put(\"eager\", \"com.alibaba.dubbo.common.threadpool.support.eager.EagerThreadPool\");\n \n         Assert.assertEquals(expected, p);\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java",
                "sha": "8b11281ac5c8cbb2e7c3d8cee78097e6e3b94a3c",
                "status": "modified"
            }
        ],
        "message": "Extension: Eager Thread Pool (#1568)\n\n* Extension: Enhanced Thread Pool\r\nA thread pool that can provide faster processing speeds when there are more tasks (of course it consumes more resources)\r\n* When the number of tasks exceeds the core size, a new thread is first started to execute the task instead of putting it into the queue.\r\n* When the number of tasks is lower than the core size for a long time, the core size threads are maintained and redundant threads are recycled.\r\n* Compared to the fixed pool\uff1aWhen there are more tasks, provide more workers to handle the tasks.\r\n* Compared to the cached pool\uff1aThe task queue in the cached pool is actually a SynchronousQueue and does not have the ability to cache tasks.\r\n* Whether to fail fail or put into a queue when a thread runs out\uff1aBoth are feasible and need to consider which way should be applied according to the business scenario. Delayed scenarios are not allowed. Failfast is more reasonable than queues. However, if there is a certain tolerance for delays, queues are more reasonable than failfast.\r\n\r\n* remove * in import\r\n\r\n* add license to fix ci failure\r\n\r\n* rename the thread pool to EagerThreadPool\r\nmodify sth with the code review\r\nformat the code file\r\n\r\n* remove '*' in import statement\r\n\r\n* throw NullPointerException if the param is null.\r\n\r\n* throw NullPointerException if the param is null.\r\n\r\n* catch throwable and decrease submitted task count anyway",
        "parent": "https://github.com/apache/dubbo/commit/9f48d8dbdd06e60faf84809a19a8c4e47733c38d",
        "patched_files": [
            "TaskQueue.java",
            "EagerThreadPool.java",
            "com.alibaba.dubbo.common.threadpool.ThreadPool",
            "EagerThreadPoolExecutor.java",
            "ConfigUtils.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "ConfigUtilsTest.java",
            "EagerThreadPoolExecutorTest.java"
        ]
    },
    "dubbo_455943f": {
        "bug_id": "dubbo_455943f",
        "commit": "https://github.com/apache/dubbo/commit/455943f4606caf88f6c1627e83c745d92f29813b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java?ref=455943f4606caf88f6c1627e83c745d92f29813b",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "patch": "@@ -151,6 +151,6 @@ public void notifyFullInvokers(List<Invoker<T>> invokers, URL url) {\n     }\n \n     public void setFullMethodInvokers(List<Invoker<T>> fullInvokers) {\n-        this.fullInvokers = fullInvokers;\n+        this.fullInvokers = (fullInvokers == null ? Collections.emptyList() : fullInvokers);\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "sha": "33374af445fbe49ed9c008b246de294d8cf07c52",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java?ref=455943f4606caf88f6c1627e83c745d92f29813b",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.dubbo.rpc.RpcException;\r\n import org.apache.dubbo.rpc.cluster.RouterChain;\r\n \r\n+import java.util.Collections;\r\n import java.util.List;\r\n \r\n /**\r\n@@ -101,7 +102,7 @@ public void buildRouterChain(List<Invoker<T>> groupInvokers) {\n                 logger.error(\"Failed to execute router: \" + getUrl() + \", cause: \" + t.getMessage(), t);\r\n             }\r\n         }\r\n-        return finalInvokers;\r\n+        return finalInvokers == null ? Collections.emptyList() : finalInvokers;\r\n     }\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
                "sha": "4794b12a29f58f7fa6e3c1657996533b408335a5",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java?ref=455943f4606caf88f6c1627e83c745d92f29813b",
                "deletions": 0,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n import org.apache.dubbo.rpc.Invocation;\n import org.apache.dubbo.rpc.Invoker;\n import org.apache.dubbo.rpc.RpcException;\n@@ -39,6 +40,10 @@\n     @Override\n     public <T> List<Invoker<T>> route(final List<Invoker<T>> invokers,\n                                       URL url, final Invocation invocation) throws RpcException {\n+        if (CollectionUtils.isEmpty(invokers)) {\n+            return invokers;\n+        }\n+\n         if (invocation.getAttachments() == null) {\n             return getNormalInvokers(invokers);\n         } else {",
                "raw_url": "https://github.com/apache/dubbo/raw/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
                "sha": "896638a2c04f09573a08efc5c186414cd83965aa",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java?ref=455943f4606caf88f6c1627e83c745d92f29813b",
                "deletions": 5,
                "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "patch": "@@ -112,7 +112,7 @@\n     private volatile Set<URL> cachedInvokerUrls; // The initial value is null and the midway may be assigned to null, please use the local variable reference\r\n \r\n     private static final ConsumerConfigurationListener consumerConfigurationListener = new ConsumerConfigurationListener();\r\n-    private ServiceConfigurationListener serviceConfigurationListener;\r\n+    private ReferenceConfigurationListener serviceConfigurationListener;\r\n \r\n \r\n     public RegistryDirectory(Class<T> serviceType, URL url) {\r\n@@ -156,7 +156,7 @@ public void setRegistry(Registry registry) {\n     public void subscribe(URL url) {\r\n         setConsumerUrl(url);\r\n         consumerConfigurationListener.addNotifyListener(this);\r\n-        serviceConfigurationListener = new ServiceConfigurationListener(url);\r\n+        serviceConfigurationListener = new ReferenceConfigurationListener(url);\r\n         registry.subscribe(url, this);\r\n     }\r\n \r\n@@ -222,8 +222,8 @@ private void refreshInvoker(List<URL> invokerUrls) {\n                 .getProtocol())) {\r\n             this.forbidden = true; // Forbid to access\r\n             this.invokers = null;\r\n-            destroyAllInvokers(); // Close all invokers\r\n             routerChain.notifyFullInvokers(this.invokers, getConsumerUrl());\r\n+            destroyAllInvokers(); // Close all invokers\r\n         } else {\r\n             this.forbidden = false; // Allow to access\r\n             Map<String, Invoker<T>> oldUrlInvokerMap = this.urlInvokerMap; // local reference\r\n@@ -744,10 +744,10 @@ public URL getProviderUrl() {\n         }\r\n     }\r\n \r\n-    private class ServiceConfigurationListener extends AbstractConfiguratorListener {\r\n+    private class ReferenceConfigurationListener extends AbstractConfiguratorListener {\r\n         private URL url;\r\n \r\n-        ServiceConfigurationListener(URL url) {\r\n+        ReferenceConfigurationListener(URL url) {\r\n             this.url = url;\r\n             this.init();\r\n         }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/455943f4606caf88f6c1627e83c745d92f29813b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "sha": "b3e70c60c0de9ea9f6d378335ce89be8db64bf7d",
                "status": "modified"
            }
        ],
        "message": "add fault tolerant code to avoid NPE",
        "parent": "https://github.com/apache/dubbo/commit/5b1b14de1ba3cd86f6494fb12d51085b264b3ec3",
        "patched_files": [
            "StaticDirectory.java",
            "RegistryDirectory.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "StaticDirectoryTest.java",
            "RegistryDirectoryTest.java"
        ]
    },
    "dubbo_49fbd32": {
        "bug_id": "dubbo_49fbd32",
        "commit": "https://github.com/apache/dubbo/commit/49fbd32cd858759febfc166c20a2883a7d1b2df8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/49fbd32cd858759febfc166c20a2883a7d1b2df8/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java?ref=49fbd32cd858759febfc166c20a2883a7d1b2df8",
                "deletions": 1,
                "filename": "dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
                "patch": "@@ -104,7 +104,7 @@ public RegistryDirectory(Class<T> serviceType, URL url) {\n         this.serviceKey = url.getServiceKey();\r\n         this.queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(RpcConstants.REFER_KEY));\r\n         this.directoryUrl = url.removeParameter(RpcConstants.REFER_KEY).addParameters(queryMap);\r\n-        String group = directoryUrl.getParameter( Constants.GROUP_KEY );\r\n+        String group = directoryUrl.getParameter( Constants.GROUP_KEY, \"\" );\r\n         this.multiGroup = \"*\".equals(group) || group.contains( \",\" );\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/49fbd32cd858759febfc166c20a2883a7d1b2df8/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
                "sha": "65f243e7e15725ab80f83e827eb8906a8f72f893",
                "status": "modified"
            }
        ],
        "message": "DUBBO-54 fix NPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@982 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "parent": "https://github.com/apache/dubbo/commit/70cad53ff7a956b59bdfc44f2a80aa7979ee9c6f",
        "patched_files": [
            "RegistryDirectory.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "RegistryDirectoryTest.java"
        ]
    },
    "dubbo_50afb87": {
        "bug_id": "dubbo_50afb87",
        "commit": "https://github.com/apache/dubbo/commit/50afb8775cb78acf1592516f31143afc2b6e7e38",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java?ref=50afb8775cb78acf1592516f31143afc2b6e7e38",
                "deletions": 4,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "patch": "@@ -67,10 +67,6 @@ public void initWithRouters(List<Router> builtinRouters) {\n         this.sort();\n     }\n \n-    public void addRouter(Router router) {\n-        this.routers.add(router);\n-    }\n-\n     /**\n      * If we use route:// protocol in version before 2.7.0, each URL will generate a Router instance, so we should\n      * keep the routers up to date, that is, each time router URLs changes, we should update the routers list, only",
                "raw_url": "https://github.com/apache/dubbo/raw/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "sha": "a690d73f1c9f88e178cdd83aebaff649511f54d6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java?ref=50afb8775cb78acf1592516f31143afc2b6e7e38",
                "deletions": 3,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java",
                "patch": "@@ -28,7 +28,7 @@\n import org.apache.dubbo.rpc.cluster.Router;\n import org.apache.dubbo.rpc.cluster.RouterChain;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n@@ -96,8 +96,7 @@ public void setRouterChain(RouterChain<T> routerChain) {\n     }\n \n     protected void addRouters(List<Router> routers) {\n-        // copy list\n-        routers = routers == null ? new ArrayList<>() : new ArrayList<>(routers);\n+        routers = routers == null ? Collections.emptyList() : routers;\n         routerChain.addRouters(routers);\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/AbstractDirectory.java",
                "sha": "54ce8269afda990fd4693a0445e4eacbb17cd621",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/dubbo/blob/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java?ref=50afb8775cb78acf1592516f31143afc2b6e7e38",
                "deletions": 5,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "patch": "@@ -27,6 +27,14 @@\n import java.util.function.Predicate;\r\n import java.util.stream.Collectors;\r\n \r\n+import static org.apache.dubbo.common.Constants.CATEGORY_KEY;\r\n+import static org.apache.dubbo.common.Constants.CONFIGURATORS_CATEGORY;\r\n+import static org.apache.dubbo.common.Constants.DEFAULT_CATEGORY;\r\n+import static org.apache.dubbo.common.Constants.OVERRIDE_PROTOCOL;\r\n+import static org.apache.dubbo.common.Constants.PROVIDERS_CATEGORY;\r\n+import static org.apache.dubbo.common.Constants.ROUTERS_CATEGORY;\r\n+import static org.apache.dubbo.common.Constants.ROUTE_PROTOCOL;\r\n+\r\n public class UrlUtils {\r\n \r\n     /**\r\n@@ -343,14 +351,14 @@ public static URL getEmptyUrl(String service, String category) {\n             service = service.substring(0, i);\r\n         }\r\n         return URL.valueOf(Constants.EMPTY_PROTOCOL + \"://0.0.0.0/\" + service + URL_PARAM_STARTING_SYMBOL\r\n-                + Constants.CATEGORY_KEY + \"=\" + category\r\n+                + CATEGORY_KEY + \"=\" + category\r\n                 + (group == null ? \"\" : \"&\" + Constants.GROUP_KEY + \"=\" + group)\r\n                 + (version == null ? \"\" : \"&\" + Constants.VERSION_KEY + \"=\" + version));\r\n     }\r\n \r\n     public static boolean isMatchCategory(String category, String categories) {\r\n         if (categories == null || categories.length() == 0) {\r\n-            return Constants.DEFAULT_CATEGORY.equals(category);\r\n+            return DEFAULT_CATEGORY.equals(category);\r\n         } else if (categories.contains(Constants.ANY_VALUE)) {\r\n             return true;\r\n         } else if (categories.contains(Constants.REMOVE_VALUE_PREFIX)) {\r\n@@ -370,8 +378,8 @@ public static boolean isMatch(URL consumerUrl, URL providerUrl) {\n             return false;\r\n         }\r\n \r\n-        if (!isMatchCategory(providerUrl.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY),\r\n-                consumerUrl.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY))) {\r\n+        if (!isMatchCategory(providerUrl.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY),\r\n+                consumerUrl.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY))) {\r\n             return false;\r\n         }\r\n         if (!providerUrl.getParameter(Constants.ENABLED_KEY, true)\r\n@@ -445,6 +453,22 @@ public static boolean isServiceKeyMatch(URL pattern, URL value) {\n         return urls.stream().filter(predicate).collect(Collectors.toList());\r\n     }\r\n \r\n+    public static boolean isConfigurator(URL url) {\r\n+        return OVERRIDE_PROTOCOL.equals(url.getProtocol()) ||\r\n+                CONFIGURATORS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY));\r\n+    }\r\n+\r\n+    public static boolean isRoute(URL url) {\r\n+        return ROUTE_PROTOCOL.equals(url.getProtocol()) ||\r\n+                ROUTERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY));\r\n+    }\r\n+\r\n+    public static boolean isProvider(URL url) {\r\n+        return !OVERRIDE_PROTOCOL.equals(url.getProtocol()) &&\r\n+                !ROUTE_PROTOCOL.equals(url.getProtocol()) &&\r\n+                PROVIDERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, PROVIDERS_CATEGORY));\r\n+    }\r\n+\r\n     /**\r\n      * Check if the given value matches the given pattern. The pattern supports wildcard \"*\".\r\n      *\r\n@@ -459,4 +483,4 @@ static boolean isItemMatch(String pattern, String value) {\n             return \"*\".equals(pattern) || pattern.equals(value);\r\n         }\r\n     }\r\n-}\n\\ No newline at end of file\n+}\r",
                "raw_url": "https://github.com/apache/dubbo/raw/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "sha": "f93bc5a5f349302d200b25bb576b6f521ab13a36",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/dubbo/blob/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "changes": 161,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java?ref=50afb8775cb78acf1592516f31143afc2b6e7e38",
                "deletions": 115,
                "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.dubbo.common.utils.Assert;\r\n import org.apache.dubbo.common.utils.NetUtils;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n+import org.apache.dubbo.common.utils.UrlUtils;\r\n import org.apache.dubbo.configcenter.DynamicConfiguration;\r\n import org.apache.dubbo.registry.NotifyListener;\r\n import org.apache.dubbo.registry.Registry;\r\n@@ -34,7 +35,6 @@\n import org.apache.dubbo.rpc.RpcException;\r\n import org.apache.dubbo.rpc.cluster.Cluster;\r\n import org.apache.dubbo.rpc.cluster.Configurator;\r\n-import org.apache.dubbo.rpc.cluster.ConfiguratorFactory;\r\n import org.apache.dubbo.rpc.cluster.Router;\r\n import org.apache.dubbo.rpc.cluster.RouterChain;\r\n import org.apache.dubbo.rpc.cluster.RouterFactory;\r\n@@ -47,7 +47,6 @@\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Collections;\r\n-import java.util.Comparator;\r\n import java.util.HashMap;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n@@ -61,7 +60,6 @@\n import static org.apache.dubbo.common.Constants.CONFIGURATORS_CATEGORY;\r\n import static org.apache.dubbo.common.Constants.DEFAULT_CATEGORY;\r\n import static org.apache.dubbo.common.Constants.DYNAMIC_CONFIGURATORS_CATEGORY;\r\n-import static org.apache.dubbo.common.Constants.OVERRIDE_PROTOCOL;\r\n import static org.apache.dubbo.common.Constants.PROVIDERS_CATEGORY;\r\n import static org.apache.dubbo.common.Constants.ROUTERS_CATEGORY;\r\n import static org.apache.dubbo.common.Constants.ROUTE_PROTOCOL;\r\n@@ -80,13 +78,10 @@\n     private static final RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class)\r\n             .getAdaptiveExtension();\r\n \r\n-    private static final ConfiguratorFactory configuratorFactory = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)\r\n-            .getAdaptiveExtension();\r\n     private final String serviceKey; // Initialization at construction time, assertion not null\r\n     private final Class<T> serviceType; // Initialization at construction time, assertion not null\r\n     private final Map<String, String> queryMap; // Initialization at construction time, assertion not null\r\n     private final URL directoryUrl; // Initialization at construction time, assertion not null, and always assign non null value\r\n-    private final String[] serviceMethods;\r\n     private final boolean multiGroup;\r\n     private Protocol protocol; // Initialization at the time of injection, the assertion is not null\r\n     private Registry registry; // Initialization at the time of injection, the assertion is not null\r\n@@ -106,9 +101,6 @@\n     private volatile Map<String, Invoker<T>> urlInvokerMap; // The initial value is null and the midway may be assigned to null, please use the local variable reference\r\n     private volatile List<Invoker<T>> invokers;\r\n \r\n-    // Map<methodName, Invoker> cache service method to invokers mapping.\r\n-//    private volatile Map<String, List<Invoker<T>>> methodInvokerMap; // The initial value is null and the midway may be assigned to null, please use the local variable reference\r\n-\r\n     // Set<invokerUrls> cache invokeUrls to invokers mapping.\r\n     private volatile Set<URL> cachedInvokerUrls; // The initial value is null and the midway may be assigned to null, please use the local variable reference\r\n \r\n@@ -130,8 +122,6 @@ public RegistryDirectory(Class<T> serviceType, URL url) {\n         this.overrideDirectoryUrl = this.directoryUrl = turnRegistryUrlToConsumerUrl(url);\r\n         String group = directoryUrl.getParameter(Constants.GROUP_KEY, \"\");\r\n         this.multiGroup = group != null && (\"*\".equals(group) || group.contains(\",\"));\r\n-        String methods = queryMap.get(Constants.METHODS_KEY);\r\n-        this.serviceMethods = methods == null ? null : Constants.COMMA_SPLIT_PATTERN.split(methods);\r\n     }\r\n \r\n     private URL turnRegistryUrlToConsumerUrl(URL url) {\r\n@@ -187,37 +177,38 @@ public void destroy() {\n \r\n     @Override\r\n     public synchronized void notify(List<URL> urls) {\r\n-        List<URL> categoryUrls = urls.stream().filter(this::isValidCategory).filter(this::isNotCompatibleFor26x).collect(Collectors.toList());\r\n+        List<URL> categoryUrls = urls.stream()\r\n+                .filter(this::isValidCategory)\r\n+                .filter(this::isNotCompatibleFor26x)\r\n+                .collect(Collectors.toList());\r\n \r\n         /**\r\n          * TODO Try to refactor the processing of these three type of urls using Collectors.groupBy()?\r\n          */\r\n-        this.configurators = Configurator.toConfigurators(classifyUrls(categoryUrls, url -> (CONFIGURATORS_CATEGORY.equals(url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY))\r\n-                 || OVERRIDE_PROTOCOL.equals(url.getProtocol())))).orElse(configurators);\r\n+        this.configurators = Configurator.toConfigurators(classifyUrls(categoryUrls, UrlUtils::isConfigurator))\r\n+                .orElse(configurators);\r\n \r\n-        toRouters(classifyUrls(categoryUrls, url -> {\r\n-            return ROUTE_PROTOCOL.equals(url.getProtocol())\r\n-                    || ROUTERS_CATEGORY.equals(url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY));\r\n-        })).ifPresent(this::addRouters);\r\n+        toRouters(classifyUrls(categoryUrls, UrlUtils::isRoute)).ifPresent(this::addRouters);\r\n \r\n         // providers\r\n-        refreshOverrideAndInvoker(classifyUrls(categoryUrls, url -> PROVIDERS_CATEGORY.equals(url.getParameter(Constants.CATEGORY_KEY, PROVIDERS_CATEGORY))\r\n-                && !OVERRIDE_PROTOCOL.equals(url.getProtocol())\r\n-                && !ROUTE_PROTOCOL.equals(url.getProtocol()))\r\n-        );\r\n+        refreshOverrideAndInvoker(classifyUrls(categoryUrls, UrlUtils::isProvider));\r\n     }\r\n \r\n-    public void refreshOverrideAndInvoker(List<URL> urls) {\r\n+    private void refreshOverrideAndInvoker(List<URL> urls) {\r\n         // mock zookeeper://xxx?mock=return null\r\n         overrideDirectoryUrl();\r\n         refreshInvoker(urls);\r\n     }\r\n \r\n     /**\r\n      * Convert the invokerURL list to the Invoker Map. The rules of the conversion are as follows:\r\n-     * 1.If URL has been converted to invoker, it is no longer re-referenced and obtained directly from the cache, and notice that any parameter changes in the URL will be re-referenced.\r\n-     * 2.If the incoming invoker list is not empty, it means that it is the latest invoker list\r\n-     * 3.If the list of incoming invokerUrl is empty, It means that the rule is only a override rule or a route rule, which needs to be re-contrasted to decide whether to re-reference.\r\n+     * <ol>\r\n+     * <li> If URL has been converted to invoker, it is no longer re-referenced and obtained directly from the cache,\r\n+     * and notice that any parameter changes in the URL will be re-referenced.</li>\r\n+     * <li>If the incoming invoker list is not empty, it means that it is the latest invoker list.</li>\r\n+     * <li>If the list of incoming invokerUrl is empty, It means that the rule is only a override rule or a route\r\n+     * rule, which needs to be re-contrasted to decide whether to re-reference.</li>\r\n+     * </ol>\r\n      *\r\n      * @param invokerUrls this parameter can't be null\r\n      */\r\n@@ -248,7 +239,6 @@ private void refreshInvoker(List<URL> invokerUrls) {\n                 return;\r\n             }\r\n             Map<String, Invoker<T>> newUrlInvokerMap = toInvokers(invokerUrls);// Translate url list to Invoker map\r\n-//            Map<String, List<Invoker<T>>> newMethodInvokerMap = toMethodInvokers(newUrlInvokerMap); // Change method name to map Invoker Map\r\n \r\n             // state change\r\n             // If the calculation is wrong, it is not processed.\r\n@@ -262,7 +252,6 @@ private void refreshInvoker(List<URL> invokerUrls) {\n             // pre-route and build cache, notice that route cache should build on original Invoker list.\r\n             // toMergeMethodInvokerMap() will wrap some invokers having different groups, those wrapped invokers not should be routed.\r\n             routerChain.setInvokers(newInvokers);\r\n-//            this.methodInvokerMap = multiGroup ? toMergeMethodInvokerMap(newMethodInvokerMap) : newMethodInvokerMap;\r\n             this.invokers = multiGroup ? toMergeInvokerList(newInvokers) : newInvokers;\r\n             this.urlInvokerMap = newUrlInvokerMap;\r\n \r\n@@ -307,7 +296,7 @@ private void refreshInvoker(List<URL> invokerUrls) {\n             return Optional.empty();\r\n         }\r\n \r\n-        List<Router> routers = new ArrayList<Router>();\r\n+        List<Router> routers = new ArrayList<>();\r\n         for (URL url : urls) {\r\n             if (Constants.EMPTY_PROTOCOL.equals(url.getProtocol())) {\r\n                 continue;\r\n@@ -318,8 +307,9 @@ private void refreshInvoker(List<URL> invokerUrls) {\n             }\r\n             try {\r\n                 Router router = routerFactory.getRouter(url);\r\n-                routerChain.addRouter(router);\r\n-                if (!routers.contains(router)) routers.add(router);\r\n+                if (!routers.contains(router)) {\r\n+                    routers.add(router);\r\n+                }\r\n             } catch (Throwable t) {\r\n                 logger.error(\"convert router url to router error, url: \" + url, t);\r\n             }\r\n@@ -360,10 +350,10 @@ private void refreshInvoker(List<URL> invokerUrls) {\n                 continue;\r\n             }\r\n             if (!ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) {\r\n-                logger.error(new IllegalStateException(\"Unsupported protocol \" + providerUrl.getProtocol() + \" in notified url: \" + providerUrl + \" from registry \" + getUrl()\r\n-                        .getAddress() + \" to consumer \" + NetUtils.getLocalHost() + \", supported protocol: \" + ExtensionLoader\r\n-                        .getExtensionLoader(Protocol.class)\r\n-                        .getSupportedExtensions()));\r\n+                logger.error(new IllegalStateException(\"Unsupported protocol \" + providerUrl.getProtocol() +\r\n+                        \" in notified url: \" + providerUrl + \" from registry \" + getUrl().getAddress() +\r\n+                        \" to consumer \" + NetUtils.getLocalHost() + \", supported protocol: \" +\r\n+                        ExtensionLoader.getExtensionLoader(Protocol.class).getSupportedExtensions()));\r\n                 continue;\r\n             }\r\n             URL url = mergeUrl(providerUrl);\r\n@@ -437,71 +427,27 @@ private URL mergeUrl(URL providerUrl) {\n     }\r\n \r\n     private URL overrideWithConfigurator(URL providerUrl) {\r\n-        List<Configurator> localConfigurators = this.configurators; // local reference\r\n-        if (localConfigurators != null && !localConfigurators.isEmpty()) {\r\n-            for (Configurator configurator : localConfigurators) {\r\n-                providerUrl = configurator.configure(providerUrl);\r\n-            }\r\n-        }\r\n+        // override url with configurator from \"override://\" URL for dubbo 2.6 and before\r\n+        providerUrl = overrideWithConfigurators(this.configurators, providerUrl);\r\n \r\n-        List<Configurator> localAppDynamicConfigurators = consumerConfigurationListener.getConfigurators(); // local reference\r\n-        if (localAppDynamicConfigurators != null && !localAppDynamicConfigurators.isEmpty()) {\r\n-            for (Configurator configurator : localAppDynamicConfigurators) {\r\n-                providerUrl = configurator.configure(providerUrl);\r\n-            }\r\n-        }\r\n+        // override url with configurator from configurator from \"app-name.configurators\"\r\n+        providerUrl = overrideWithConfigurators(consumerConfigurationListener.getConfigurators(), providerUrl);\r\n \r\n+        // override url with configurator from configurators from \"service-name.configurators\"\r\n         if (serviceConfigurationListener != null) {\r\n-            List<Configurator> localDynamicConfigurators = serviceConfigurationListener.getConfigurators(); // local reference\r\n-            if (localDynamicConfigurators != null && !localDynamicConfigurators.isEmpty()) {\r\n-                for (Configurator configurator : localDynamicConfigurators) {\r\n-                    providerUrl = configurator.configure(providerUrl);\r\n-                }\r\n-            }\r\n+            providerUrl = overrideWithConfigurators(serviceConfigurationListener.getConfigurators(), providerUrl);\r\n         }\r\n \r\n         return providerUrl;\r\n     }\r\n \r\n-    /**\r\n-     * Transform the invokers list into a mapping relationship with a method\r\n-     *\r\n-     * @param invokersMap Invoker Map\r\n-     * @return Mapping relation between Invoker and method\r\n-     */\r\n-    private Map<String, List<Invoker<T>>> toMethodInvokers(Map<String, Invoker<T>> invokersMap) {\r\n-        Map<String, List<Invoker<T>>> newMethodInvokerMap = new HashMap<String, List<Invoker<T>>>();\r\n-        // According to the methods classification declared by the provider URL, the methods is compatible with the registry to execute the filtered methods\r\n-        List<Invoker<T>> invokersList = new ArrayList<Invoker<T>>();\r\n-        if (invokersMap != null && invokersMap.size() > 0) {\r\n-            for (Invoker<T> invoker : invokersMap.values()) {\r\n-                String parameter = invoker.getUrl().getParameter(Constants.METHODS_KEY);\r\n-                if (parameter != null && parameter.length() > 0) {\r\n-                    String[] methods = Constants.COMMA_SPLIT_PATTERN.split(parameter);\r\n-                    if (methods != null && methods.length > 0) {\r\n-                        for (String method : methods) {\r\n-                            if (method != null && method.length() > 0 && !Constants.ANY_VALUE.equals(method)) {\r\n-                                List<Invoker<T>> methodInvokers = newMethodInvokerMap.get(method);\r\n-                                if (methodInvokers == null) {\r\n-                                    methodInvokers = new ArrayList<Invoker<T>>();\r\n-                                    newMethodInvokerMap.put(method, methodInvokers);\r\n-                                }\r\n-                                methodInvokers.add(invoker);\r\n-                            }\r\n-                        }\r\n-                    }\r\n-                }\r\n-                invokersList.add(invoker);\r\n+    private URL overrideWithConfigurators(List<Configurator> configurators, URL url) {\r\n+        if (configurators != null && !configurators.isEmpty()) {\r\n+            for (Configurator configurator : configurators) {\r\n+                url = configurator.configure(url);\r\n             }\r\n         }\r\n-        newMethodInvokerMap.put(Constants.ANY_VALUE, invokersList);\r\n-        // sort and unmodifiable\r\n-        for (String method : new HashSet<String>(newMethodInvokerMap.keySet())) {\r\n-            List<Invoker<T>> methodInvokers = newMethodInvokerMap.get(method);\r\n-            Collections.sort(methodInvokers, InvokerComparator.getComparator());\r\n-            newMethodInvokerMap.put(method, Collections.unmodifiableList(methodInvokers));\r\n-        }\r\n-        return Collections.unmodifiableMap(newMethodInvokerMap);\r\n+        return url;\r\n     }\r\n \r\n     /**\r\n@@ -571,8 +517,10 @@ private void destroyUnusedInvokers(Map<String, Invoker<T>> oldUrlInvokerMap, Map\n     public List<Invoker<T>> doList(Invocation invocation) {\r\n         if (forbidden) {\r\n             // 1. No service provider 2. Service providers are disabled\r\n-            throw new RpcException(RpcException.FORBIDDEN_EXCEPTION, \"No provider available from registry \" + getUrl().getAddress() + \" for service \" + getConsumerUrl()\r\n-                    .getServiceKey() + \" on consumer \" + NetUtils.getLocalHost() + \" use dubbo version \" + Version.getVersion() + \", please check status of providers(disabled, not registered or in blacklist).\");\r\n+            throw new RpcException(RpcException.FORBIDDEN_EXCEPTION, \"No provider available from registry \" +\r\n+                    getUrl().getAddress() + \" for service \" + getConsumerUrl().getServiceKey() + \" on consumer \" +\r\n+                    NetUtils.getLocalHost() + \" use dubbo version \" + Version.getVersion() +\r\n+                    \", please check status of providers(disabled, not registered or in blacklist).\");\r\n         }\r\n \r\n         if (multiGroup) {\r\n@@ -647,33 +595,16 @@ public void buildRouterChain(URL url) {\n         return invokers;\r\n     }\r\n \r\n-    private static class InvokerComparator implements Comparator<Invoker<?>> {\r\n-\r\n-        private static final InvokerComparator comparator = new InvokerComparator();\r\n-\r\n-        private InvokerComparator() {\r\n-        }\r\n-\r\n-        public static InvokerComparator getComparator() {\r\n-            return comparator;\r\n-        }\r\n-\r\n-        @Override\r\n-        public int compare(Invoker<?> o1, Invoker<?> o2) {\r\n-            return o1.getUrl().toString().compareTo(o2.getUrl().toString());\r\n-        }\r\n-\r\n-    }\r\n-\r\n     private boolean isValidCategory(URL url) {\r\n         String category = url.getParameter(CATEGORY_KEY, DEFAULT_CATEGORY);\r\n-        if ((ROUTERS_CATEGORY.equals(category) || ROUTE_PROTOCOL.equals(url.getProtocol())) || PROVIDERS_CATEGORY.equals(category) || CONFIGURATORS_CATEGORY\r\n-                .equals(category) || DYNAMIC_CONFIGURATORS_CATEGORY.equals(category) || APP_DYNAMIC_CONFIGURATORS_CATEGORY\r\n-                .equals(category)) {\r\n+        if ((ROUTERS_CATEGORY.equals(category) || ROUTE_PROTOCOL.equals(url.getProtocol())) ||\r\n+                PROVIDERS_CATEGORY.equals(category) ||\r\n+                CONFIGURATORS_CATEGORY.equals(category) || DYNAMIC_CONFIGURATORS_CATEGORY.equals(category) ||\r\n+                APP_DYNAMIC_CONFIGURATORS_CATEGORY.equals(category)) {\r\n             return true;\r\n         }\r\n-        logger.warn(\"Unsupported category \" + category + \" in notified url: \" + url + \" from registry \" + getUrl().getAddress() + \" to consumer \" + NetUtils\r\n-                .getLocalHost());\r\n+        logger.warn(\"Unsupported category \" + category + \" in notified url: \" + url + \" from registry \" +\r\n+                getUrl().getAddress() + \" to consumer \" + NetUtils.getLocalHost());\r\n         return false;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/50afb8775cb78acf1592516f31143afc2b6e7e38/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "sha": "5ebace2a4b283364f8e217ed2e8e1f29951508e4",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #3083 beiwei30/incubator-dubbo,  more code review.\n\n* refactor ScriptRouter\r\n\r\n* refactor TagRouter\r\n\r\n* refactor AbstractConfiguratorListener\r\n\r\n* make sure parameter should not be null\r\n\r\n* correct comments\r\n\r\n* make ReferenceConfigurationListener private static\r\n\r\n* avoid dup code in init\r\n\r\n* add fixme for potential useless code\r\n\r\n* clean up useless variables\r\n\r\n* move methods into UrlUtils\r\n\r\n* make method private\r\n\r\n* reformat javadoc\r\n\r\n* avoid dup code\r\n\r\n* reformat log message\r\n\r\n* reformat log message\r\n\r\n* reformat the code\r\n\r\n* remove useless imports\r\n\r\n* remove useless code\r\n\r\n* refactor ScriptRouter\r\n\r\n* refactor TagRouter\r\n\r\n* refactor AbstractConfiguratorListener\r\n\r\n* Add comment\r\n\r\n* Fix UT\r\n\r\n* make sure parameter should not be null\r\n\r\n* correct comments\r\n\r\n* make ReferenceConfigurationListener private static\r\n\r\n* Revert demo changes\r\n\r\n* Revert code to avoid NPE in RPC wire after providers are cleared.\r\n\r\n* make ListenableRouter code thread safe\r\n\r\n* Fix UT\r\n\r\n* Remove assert check to continue with execute.\r\n\r\n* avoid dup code in init\r\n\r\n* solve compile error\r\n\r\n* add fixme for potential useless code\r\n\r\n* clean up useless variables\r\n\r\n* move methods into UrlUtils\r\n\r\n* make method private\r\n\r\n* reformat javadoc\r\n\r\n* avoid dup code\r\n\r\n* reformat log message\r\n\r\n* reformat log message\r\n\r\n* reformat the code\r\n\r\n* remove useless imports\r\n\r\n* remove useless code\r\n\r\n* code review comments from @khanimteyaz\r\n\r\n* code review from @khanimteyaz",
        "parent": "https://github.com/apache/dubbo/commit/5c54c6837876b7daf0c55d9f9cafde109baa1a5d",
        "patched_files": [
            "UrlUtils.java",
            "RegistryDirectory.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "RegistryDirectoryTest.java",
            "UrlUtilsTest.java"
        ]
    },
    "dubbo_5434ab7": {
        "bug_id": "dubbo_5434ab7",
        "commit": "https://github.com/apache/dubbo/commit/5434ab74c724e4ed0f4b7dab11e6758a0a9c48d8",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/dubbo/blob/5434ab74c724e4ed0f4b7dab11e6758a0a9c48d8/dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/Version.java?ref=5434ab74c724e4ed0f4b7dab11e6758a0a9c48d8",
                "deletions": 8,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "patch": "@@ -144,14 +144,18 @@ private static String getPrefixDigits(String v) {\n     public static String getVersion(Class<?> cls, String defaultVersion) {\n         try {\n             // find version info from MANIFEST.MF first\n-            String version = cls.getPackage().getImplementationVersion();\n-            if (!StringUtils.isEmpty(version)) {\n-                return version;\n-            }\n-            \n-            version = cls.getPackage().getSpecificationVersion();\n-            if (!StringUtils.isEmpty(version)) {\n-                return version;\n+            Package pkg = cls.getPackage();\n+            String version = null;\n+            if (pkg != null) {\n+                version = pkg.getImplementationVersion();\n+                if (!StringUtils.isEmpty(version)) {\n+                    return version;\n+                }\n+\n+                version = pkg.getSpecificationVersion();\n+                if (!StringUtils.isEmpty(version)) {\n+                    return version;\n+                }\n             }\n             \n             // guess version fro jar file name if nothing's found from MANIFEST.MF",
                "raw_url": "https://github.com/apache/dubbo/raw/5434ab74c724e4ed0f4b7dab11e6758a0a9c48d8/dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "sha": "0ab48a6c4fc971a448ee7fde019519f5aab8ea34",
                "status": "modified"
            }
        ],
        "message": "Fix npe when package is null. (#3557)",
        "parent": "https://github.com/apache/dubbo/commit/ade0cd70243416fadb0a4a52ad4e8df191738f92",
        "patched_files": [
            "Version.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "VersionTest.java"
        ]
    },
    "dubbo_5526dd8": {
        "bug_id": "dubbo_5526dd8",
        "commit": "https://github.com/apache/dubbo/commit/5526dd8d2e80741e311e5466fc24392b2421eb00",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java?ref=5526dd8d2e80741e311e5466fc24392b2421eb00",
                "deletions": 3,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "patch": "@@ -966,9 +966,16 @@ public URL addParameters(Map<String, String> parameters) {\n         boolean hasAndEqual = true;\r\n         for (Map.Entry<String, String> entry : parameters.entrySet()) {\r\n             String value = getParameters().get(entry.getKey());\r\n-            if (value == null && entry.getValue() != null || !value.equals(entry.getValue())) {\r\n-                hasAndEqual = false;\r\n-                break;\r\n+            if (value == null) {\r\n+                if (entry.getValue() != null) {\r\n+                    hasAndEqual = false;\r\n+                    break;\r\n+                }\r\n+            } else {\r\n+                if (!value.equals(entry.getValue())) {\r\n+                    hasAndEqual = false;\r\n+                    break;\r\n+                }\r\n             }\r\n         }\r\n         // \u5982\u679c\u6ca1\u6709\u4fee\u6539\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\r",
                "raw_url": "https://github.com/apache/dubbo/raw/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "sha": "d89f5735d58ebb6a5fb5bf48c622f3720078ad01",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo/blob/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java?ref=5526dd8d2e80741e311e5466fc24392b2421eb00",
                "deletions": 1,
                "filename": "dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java",
                "patch": "@@ -16,7 +16,6 @@\n package com.alibaba.dubbo.common;\r\n \r\n import com.alibaba.dubbo.common.utils.CollectionUtils;\r\n-\r\n import org.junit.Test;\r\n \r\n import java.io.File;\r\n@@ -633,4 +632,11 @@ public void test_Path() throws Exception {\n         assertEquals(\"path\", url.getPath());\r\n     }\r\n \r\n+    @Test\r\n+    public void testAddParameters() throws Exception {\r\n+        URL url = URL.valueOf(\"dubbo://127.0.0.1:20880\");\r\n+        Map<String, String> parameters = new HashMap<String, String>();\r\n+        parameters.put(\"version\", null);\r\n+        url.addParameters(parameters);\r\n+    }\r\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java",
                "sha": "ddd21f55a708786a50e41961ee94ad204c7d592d",
                "status": "modified"
            }
        ],
        "message": "pull request#131: \u4fee\u590d\u5f53value == null &&\u3000entry.getValue() \uff1d= null \u65f6\u8bed\u53e5if(value == null && entry.getValue() != null || !value.equals(entry.getValue())) \u62a5NullPointerException",
        "parent": "https://github.com/apache/dubbo/commit/c5c017dcba089d8b4c7e7e42b51cd2664194c138",
        "patched_files": [
            "URL.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "URLTest.java"
        ]
    },
    "dubbo_6938d48": {
        "bug_id": "dubbo_6938d48",
        "commit": "https://github.com/apache/dubbo/commit/6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 4,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "patch": "@@ -26,10 +26,10 @@\n import org.apache.dubbo.common.utils.NetUtils;\r\n import org.apache.dubbo.rpc.Invocation;\r\n import org.apache.dubbo.rpc.Invoker;\r\n-import org.apache.dubbo.rpc.RpcContext;\r\n-import org.apache.dubbo.rpc.RpcInvocation;\r\n import org.apache.dubbo.rpc.Result;\r\n+import org.apache.dubbo.rpc.RpcContext;\r\n import org.apache.dubbo.rpc.RpcException;\r\n+import org.apache.dubbo.rpc.RpcInvocation;\r\n import org.apache.dubbo.rpc.cluster.Directory;\r\n import org.apache.dubbo.rpc.cluster.LoadBalance;\r\n import org.apache.dubbo.rpc.support.RpcUtils;\r\n@@ -138,10 +138,12 @@ public void destroy() {\n     }\r\n \r\n     private Invoker<T> doSelect(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected) throws RpcException {\r\n-        if (invokers == null || invokers.isEmpty())\r\n+        if (invokers == null || invokers.isEmpty()) {\r\n             return null;\r\n-        if (invokers.size() == 1)\r\n+        }\r\n+        if (invokers.size() == 1) {\r\n             return invokers.get(0);\r\n+        }\r\n         Invoker<T> invoker = loadbalance.select(invokers, getUrl(), invocation);\r\n \r\n         //If the `invoker` is in the  `selected` or invoker is unavailable && availablecheck is true, reselect.\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "sha": "e8b80595e7da99d80e9023a5acc86a98ea448860",
                "status": "modified"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "changes": 116,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/URL.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 36,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "patch": "@@ -206,14 +206,18 @@ public static URL valueOf(String url) {\n         }\r\n         i = url.indexOf(\"://\");\r\n         if (i >= 0) {\r\n-            if (i == 0) throw new IllegalStateException(\"url missing protocol: \\\"\" + url + \"\\\"\");\r\n+            if (i == 0) {\r\n+                throw new IllegalStateException(\"url missing protocol: \\\"\" + url + \"\\\"\");\r\n+            }\r\n             protocol = url.substring(0, i);\r\n             url = url.substring(i + 3);\r\n         } else {\r\n             // case: file:/path/to/file.txt\r\n             i = url.indexOf(\":/\");\r\n             if (i >= 0) {\r\n-                if (i == 0) throw new IllegalStateException(\"url missing protocol: \\\"\" + url + \"\\\"\");\r\n+                if (i == 0) {\r\n+                    throw new IllegalStateException(\"url missing protocol: \\\"\" + url + \"\\\"\");\r\n+                }\r\n                 protocol = url.substring(0, i);\r\n                 url = url.substring(i + 1);\r\n             }\r\n@@ -246,7 +250,9 @@ public static URL valueOf(String url) {\n                 url = url.substring(0, i);\r\n             }\r\n         }\r\n-        if (url.length() > 0) host = url;\r\n+        if (url.length() > 0) {\r\n+            host = url;\r\n+        }\r\n         return new URL(protocol, username, password, host, port, path, parameters);\r\n     }\r\n \r\n@@ -915,17 +921,23 @@ public URL addParameter(String key, double value) {\n     }\r\n \r\n     public URL addParameter(String key, Enum<?> value) {\r\n-        if (value == null) return this;\r\n+        if (value == null) {\r\n+            return this;\r\n+        }\r\n         return addParameter(key, String.valueOf(value));\r\n     }\r\n \r\n     public URL addParameter(String key, Number value) {\r\n-        if (value == null) return this;\r\n+        if (value == null) {\r\n+            return this;\r\n+        }\r\n         return addParameter(key, String.valueOf(value));\r\n     }\r\n \r\n     public URL addParameter(String key, CharSequence value) {\r\n-        if (value == null || value.length() == 0) return this;\r\n+        if (value == null || value.length() == 0) {\r\n+            return this;\r\n+        }\r\n         return addParameter(key, String.valueOf(value));\r\n     }\r\n \r\n@@ -984,7 +996,9 @@ public URL addParameters(Map<String, String> parameters) {\n             }\r\n         }\r\n         // return immediately if there's no change\r\n-        if (hasAndEqual) return this;\r\n+        if (hasAndEqual) {\r\n+            return this;\r\n+        }\r\n \r\n         Map<String, String> map = new HashMap<String, String>(getParameters());\r\n         map.putAll(parameters);\r\n@@ -1055,35 +1069,47 @@ public URL clearParameters() {\n     }\r\n \r\n     public String getRawParameter(String key) {\r\n-        if (\"protocol\".equals(key))\r\n+        if (\"protocol\".equals(key)) {\r\n             return protocol;\r\n-        if (\"username\".equals(key))\r\n+        }\r\n+        if (\"username\".equals(key)) {\r\n             return username;\r\n-        if (\"password\".equals(key))\r\n+        }\r\n+        if (\"password\".equals(key)) {\r\n             return password;\r\n-        if (\"host\".equals(key))\r\n+        }\r\n+        if (\"host\".equals(key)) {\r\n             return host;\r\n-        if (\"port\".equals(key))\r\n+        }\r\n+        if (\"port\".equals(key)) {\r\n             return String.valueOf(port);\r\n-        if (\"path\".equals(key))\r\n+        }\r\n+        if (\"path\".equals(key)) {\r\n             return path;\r\n+        }\r\n         return getParameter(key);\r\n     }\r\n \r\n     public Map<String, String> toMap() {\r\n         Map<String, String> map = new HashMap<String, String>(parameters);\r\n-        if (protocol != null)\r\n+        if (protocol != null) {\r\n             map.put(\"protocol\", protocol);\r\n-        if (username != null)\r\n+        }\r\n+        if (username != null) {\r\n             map.put(\"username\", username);\r\n-        if (password != null)\r\n+        }\r\n+        if (password != null) {\r\n             map.put(\"password\", password);\r\n-        if (host != null)\r\n+        }\r\n+        if (host != null) {\r\n             map.put(\"host\", host);\r\n-        if (port > 0)\r\n+        }\r\n+        if (port > 0) {\r\n             map.put(\"port\", String.valueOf(port));\r\n-        if (path != null)\r\n+        }\r\n+        if (path != null) {\r\n             map.put(\"path\", path);\r\n+        }\r\n         return map;\r\n     }\r\n \r\n@@ -1218,7 +1244,9 @@ public InetSocketAddress toInetSocketAddress() {\n \r\n     public String getServiceKey() {\r\n         String inf = getServiceInterface();\r\n-        if (inf == null) return null;\r\n+        if (inf == null) {\r\n+            return null;\r\n+        }\r\n         StringBuilder buf = new StringBuilder();\r\n         String group = getParameter(Constants.GROUP_KEY);\r\n         if (group != null && group.length() > 0) {\r\n@@ -1359,45 +1387,61 @@ public int hashCode() {\n \r\n     @Override\r\n     public boolean equals(Object obj) {\r\n-        if (this == obj)\r\n+        if (this == obj) {\r\n             return true;\r\n-        if (obj == null)\r\n+        }\r\n+        if (obj == null) {\r\n             return false;\r\n-        if (getClass() != obj.getClass())\r\n+        }\r\n+        if (getClass() != obj.getClass()) {\r\n             return false;\r\n+        }\r\n         URL other = (URL) obj;\r\n         if (host == null) {\r\n-            if (other.host != null)\r\n+            if (other.host != null) {\r\n                 return false;\r\n-        } else if (!host.equals(other.host))\r\n+            }\r\n+        } else if (!host.equals(other.host)) {\r\n             return false;\r\n+        }\r\n         if (parameters == null) {\r\n-            if (other.parameters != null)\r\n+            if (other.parameters != null) {\r\n                 return false;\r\n-        } else if (!parameters.equals(other.parameters))\r\n+            }\r\n+        } else if (!parameters.equals(other.parameters)) {\r\n             return false;\r\n+        }\r\n         if (password == null) {\r\n-            if (other.password != null)\r\n+            if (other.password != null) {\r\n                 return false;\r\n-        } else if (!password.equals(other.password))\r\n+            }\r\n+        } else if (!password.equals(other.password)) {\r\n             return false;\r\n+        }\r\n         if (path == null) {\r\n-            if (other.path != null)\r\n+            if (other.path != null) {\r\n                 return false;\r\n-        } else if (!path.equals(other.path))\r\n+            }\r\n+        } else if (!path.equals(other.path)) {\r\n             return false;\r\n-        if (port != other.port)\r\n+        }\r\n+        if (port != other.port) {\r\n             return false;\r\n+        }\r\n         if (protocol == null) {\r\n-            if (other.protocol != null)\r\n+            if (other.protocol != null) {\r\n                 return false;\r\n-        } else if (!protocol.equals(other.protocol))\r\n+            }\r\n+        } else if (!protocol.equals(other.protocol)) {\r\n             return false;\r\n+        }\r\n         if (username == null) {\r\n-            if (other.username != null)\r\n+            if (other.username != null) {\r\n                 return false;\r\n-        } else if (!username.equals(other.username))\r\n+            }\r\n+        } else if (!username.equals(other.username)) {\r\n             return false;\r\n+        }\r\n         return true;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "sha": "eba72e850b3bcde3941e3aabbee1438147be694f",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 8,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java",
                "patch": "@@ -399,14 +399,16 @@ private static Object instantiateForDeserialize(JavaBeanDescriptor beanDescripto\n             }\n             result = Array.newInstance(componentType, beanDescriptor.propertySize());\n             cache.put(beanDescriptor, result);\n-        } else try {\n-            Class<?> cl = name2Class(loader, beanDescriptor.getClassName());\n-            result = instantiate(cl);\n-            cache.put(beanDescriptor, result);\n-        } catch (ClassNotFoundException e) {\n-            throw new RuntimeException(e.getMessage(), e);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e.getMessage(), e);\n+        } else {\n+            try {\n+                Class<?> cl = name2Class(loader, beanDescriptor.getClassName());\n+                result = instantiate(cl);\n+                cache.put(beanDescriptor, result);\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e.getMessage(), e);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e.getMessage(), e);\n+            }\n         }\n \n         return result;",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtil.java",
                "sha": "a1bdc7af5eb691fb7b6325c2f0f3ed1af8618f89",
                "status": "modified"
            },
            {
                "additions": 390,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "changes": 780,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 390,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "patch": "@@ -1,391 +1,391 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.dubbo.common.bytecode;\r\n-\r\n-import org.apache.dubbo.common.utils.ClassHelper;\r\n-import org.apache.dubbo.common.utils.ReflectUtils;\r\n-\r\n-import javassist.CannotCompileException;\r\n-import javassist.ClassPool;\r\n-import javassist.CtClass;\r\n-import javassist.CtConstructor;\r\n-import javassist.CtField;\r\n-import javassist.CtMethod;\r\n-import javassist.CtNewConstructor;\r\n-import javassist.CtNewMethod;\r\n-import javassist.LoaderClassPath;\r\n-import javassist.NotFoundException;\r\n-\r\n-import java.lang.reflect.Constructor;\r\n-import java.lang.reflect.Method;\r\n-import java.lang.reflect.Modifier;\r\n-import java.security.ProtectionDomain;\r\n-import java.util.ArrayList;\r\n-import java.util.HashSet;\r\n-import java.util.LinkedList;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-import java.util.concurrent.ConcurrentHashMap;\r\n-import java.util.concurrent.atomic.AtomicLong;\r\n-\r\n-/**\r\n- * ClassGenerator\r\n- */\r\n-public final class ClassGenerator {\r\n-\r\n-    private static final AtomicLong CLASS_NAME_COUNTER = new AtomicLong(0);\r\n-    private static final String SIMPLE_NAME_TAG = \"<init>\";\r\n-    private static final Map<ClassLoader, ClassPool> POOL_MAP = new ConcurrentHashMap<ClassLoader, ClassPool>(); //ClassLoader - ClassPool\r\n-    private ClassPool mPool;\r\n-    private CtClass mCtc;\r\n-    private String mClassName;\r\n-    private String mSuperClass;\r\n-    private Set<String> mInterfaces;\r\n-    private List<String> mFields;\r\n-    private List<String> mConstructors;\r\n-    private List<String> mMethods;\r\n-    private Map<String, Method> mCopyMethods; // <method desc,method instance>\r\n-    private Map<String, Constructor<?>> mCopyConstructors; // <constructor desc,constructor instance>\r\n-    private boolean mDefaultConstructor = false;\r\n-\r\n-    private ClassGenerator() {\r\n-    }\r\n-\r\n-    private ClassGenerator(ClassPool pool) {\r\n-        mPool = pool;\r\n-    }\r\n-\r\n-    public static ClassGenerator newInstance() {\r\n-        return new ClassGenerator(getClassPool(Thread.currentThread().getContextClassLoader()));\r\n-    }\r\n-\r\n-    public static ClassGenerator newInstance(ClassLoader loader) {\r\n-        return new ClassGenerator(getClassPool(loader));\r\n-    }\r\n-\r\n-    public static boolean isDynamicClass(Class<?> cl) {\r\n-        return ClassGenerator.DC.class.isAssignableFrom(cl);\r\n-    }\r\n-\r\n-    public static ClassPool getClassPool(ClassLoader loader) {\r\n-        if (loader == null) {\r\n-            return ClassPool.getDefault();\r\n-        }\r\n-\r\n-        ClassPool pool = POOL_MAP.get(loader);\r\n-        if (pool == null) {\r\n-            pool = new ClassPool(true);\r\n-            pool.appendClassPath(new LoaderClassPath(loader));\r\n-            POOL_MAP.put(loader, pool);\r\n-        }\r\n-        return pool;\r\n-    }\r\n-\r\n-    private static String modifier(int mod) {\r\n-        StringBuilder modifier = new StringBuilder();\r\n-        if (Modifier.isPublic(mod)) {\r\n-            modifier.append(\"public\");\r\n-        }\r\n-        if (Modifier.isProtected(mod)) {\r\n-            modifier.append(\"protected\");\r\n-        }\r\n-        if (Modifier.isPrivate(mod)) {\r\n-            modifier.append(\"private\");\r\n-        }\r\n-\r\n-        if (Modifier.isStatic(mod)) {\r\n-            modifier.append(\" static\");\r\n-        }\r\n-        if (Modifier.isVolatile(mod)) {\r\n-            modifier.append(\" volatile\");\r\n-        }\r\n-\r\n-        return modifier.toString();\r\n-    }\r\n-\r\n-    public String getClassName() {\r\n-        return mClassName;\r\n-    }\r\n-\r\n-    public ClassGenerator setClassName(String name) {\r\n-        mClassName = name;\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addInterface(String cn) {\r\n-        if (mInterfaces == null) {\r\n-            mInterfaces = new HashSet<String>();\r\n-        }\r\n-        mInterfaces.add(cn);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addInterface(Class<?> cl) {\r\n-        return addInterface(cl.getName());\r\n-    }\r\n-\r\n-    public ClassGenerator setSuperClass(String cn) {\r\n-        mSuperClass = cn;\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator setSuperClass(Class<?> cl) {\r\n-        mSuperClass = cl.getName();\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addField(String code) {\r\n-        if (mFields == null) {\r\n-            mFields = new ArrayList<String>();\r\n-        }\r\n-        mFields.add(code);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addField(String name, int mod, Class<?> type) {\r\n-        return addField(name, mod, type, null);\r\n-    }\r\n-\r\n-    public ClassGenerator addField(String name, int mod, Class<?> type, String def) {\r\n-        StringBuilder sb = new StringBuilder();\r\n-        sb.append(modifier(mod)).append(' ').append(ReflectUtils.getName(type)).append(' ');\r\n-        sb.append(name);\r\n-        if (def != null && def.length() > 0) {\r\n-            sb.append('=');\r\n-            sb.append(def);\r\n-        }\r\n-        sb.append(';');\r\n-        return addField(sb.toString());\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(String code) {\r\n-        if (mMethods == null) {\r\n-            mMethods = new ArrayList<String>();\r\n-        }\r\n-        mMethods.add(code);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(String name, int mod, Class<?> rt, Class<?>[] pts, String body) {\r\n-        return addMethod(name, mod, rt, pts, null, body);\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(String name, int mod, Class<?> rt, Class<?>[] pts, Class<?>[] ets,\r\n-                                    String body) {\r\n-        StringBuilder sb = new StringBuilder();\r\n-        sb.append(modifier(mod)).append(' ').append(ReflectUtils.getName(rt)).append(' ').append(name);\r\n-        sb.append('(');\r\n-        for (int i = 0; i < pts.length; i++) {\r\n-            if (i > 0) {\r\n-                sb.append(',');\r\n-            }\r\n-            sb.append(ReflectUtils.getName(pts[i]));\r\n-            sb.append(\" arg\").append(i);\r\n-        }\r\n-        sb.append(')');\r\n-        if (ets != null && ets.length > 0) {\r\n-            sb.append(\" throws \");\r\n-            for (int i = 0; i < ets.length; i++) {\r\n-                if (i > 0) {\r\n-                    sb.append(',');\r\n-                }\r\n-                sb.append(ReflectUtils.getName(ets[i]));\r\n-            }\r\n-        }\r\n-        sb.append('{').append(body).append('}');\r\n-        return addMethod(sb.toString());\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(Method m) {\r\n-        addMethod(m.getName(), m);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addMethod(String name, Method m) {\r\n-        String desc = name + ReflectUtils.getDescWithoutMethodName(m);\r\n-        addMethod(':' + desc);\r\n-        if (mCopyMethods == null) {\r\n-            mCopyMethods = new ConcurrentHashMap<String, Method>(8);\r\n-        }\r\n-        mCopyMethods.put(desc, m);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addConstructor(String code) {\r\n-        if (mConstructors == null) {\r\n-            mConstructors = new LinkedList<String>();\r\n-        }\r\n-        mConstructors.add(code);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addConstructor(int mod, Class<?>[] pts, String body) {\r\n-        return addConstructor(mod, pts, null, body);\r\n-    }\r\n-\r\n-    public ClassGenerator addConstructor(int mod, Class<?>[] pts, Class<?>[] ets, String body) {\r\n-        StringBuilder sb = new StringBuilder();\r\n-        sb.append(modifier(mod)).append(' ').append(SIMPLE_NAME_TAG);\r\n-        sb.append('(');\r\n-        for (int i = 0; i < pts.length; i++) {\r\n-            if (i > 0) {\r\n-                sb.append(',');\r\n-            }\r\n-            sb.append(ReflectUtils.getName(pts[i]));\r\n-            sb.append(\" arg\").append(i);\r\n-        }\r\n-        sb.append(')');\r\n-        if (ets != null && ets.length > 0) {\r\n-            sb.append(\" throws \");\r\n-            for (int i = 0; i < ets.length; i++) {\r\n-                if (i > 0) {\r\n-                    sb.append(',');\r\n-                }\r\n-                sb.append(ReflectUtils.getName(ets[i]));\r\n-            }\r\n-        }\r\n-        sb.append('{').append(body).append('}');\r\n-        return addConstructor(sb.toString());\r\n-    }\r\n-\r\n-    public ClassGenerator addConstructor(Constructor<?> c) {\r\n-        String desc = ReflectUtils.getDesc(c);\r\n-        addConstructor(\":\" + desc);\r\n-        if (mCopyConstructors == null) {\r\n-            mCopyConstructors = new ConcurrentHashMap<String, Constructor<?>>(4);\r\n-        }\r\n-        mCopyConstructors.put(desc, c);\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassGenerator addDefaultConstructor() {\r\n-        mDefaultConstructor = true;\r\n-        return this;\r\n-    }\r\n-\r\n-    public ClassPool getClassPool() {\r\n-        return mPool;\r\n-    }\r\n-\r\n-    public Class<?> toClass() {\r\n-        return toClass(ClassHelper.getClassLoader(ClassGenerator.class),\r\n-                getClass().getProtectionDomain());\r\n-    }\r\n-\r\n-    public Class<?> toClass(ClassLoader loader, ProtectionDomain pd) {\r\n-        if (mCtc != null) {\r\n-            mCtc.detach();\r\n-        }\r\n-        long id = CLASS_NAME_COUNTER.getAndIncrement();\r\n-        try {\r\n-            CtClass ctcs = mSuperClass == null ? null : mPool.get(mSuperClass);\r\n-            if (mClassName == null) {\r\n-                mClassName = (mSuperClass == null || javassist.Modifier.isPublic(ctcs.getModifiers())\r\n-                        ? ClassGenerator.class.getName() : mSuperClass + \"$sc\") + id;\r\n-            }\r\n-            mCtc = mPool.makeClass(mClassName);\r\n-            if (mSuperClass != null) {\r\n-                mCtc.setSuperclass(ctcs);\r\n-            }\r\n-            mCtc.addInterface(mPool.get(DC.class.getName())); // add dynamic class tag.\r\n-            if (mInterfaces != null) {\r\n-                for (String cl : mInterfaces) {\r\n-                    mCtc.addInterface(mPool.get(cl));\r\n-                }\r\n-            }\r\n-            if (mFields != null) {\r\n-                for (String code : mFields) {\r\n-                    mCtc.addField(CtField.make(code, mCtc));\r\n-                }\r\n-            }\r\n-            if (mMethods != null) {\r\n-                for (String code : mMethods) {\r\n-                    if (code.charAt(0) == ':') {\r\n-                        mCtc.addMethod(CtNewMethod.copy(getCtMethod(mCopyMethods.get(code.substring(1))),\r\n-                                code.substring(1, code.indexOf('(')), mCtc, null));\r\n-                    } else {\r\n-                        mCtc.addMethod(CtNewMethod.make(code, mCtc));\r\n-                    }\r\n-                }\r\n-            }\r\n-            if (mDefaultConstructor) {\r\n-                mCtc.addConstructor(CtNewConstructor.defaultConstructor(mCtc));\r\n-            }\r\n-            if (mConstructors != null) {\r\n-                for (String code : mConstructors) {\r\n-                    if (code.charAt(0) == ':') {\r\n-                        mCtc.addConstructor(CtNewConstructor\r\n-                                .copy(getCtConstructor(mCopyConstructors.get(code.substring(1))), mCtc, null));\r\n-                    } else {\r\n-                        String[] sn = mCtc.getSimpleName().split(\"\\\\$+\"); // inner class name include $.\r\n-                        mCtc.addConstructor(\r\n-                                CtNewConstructor.make(code.replaceFirst(SIMPLE_NAME_TAG, sn[sn.length - 1]), mCtc));\r\n-                    }\r\n-                }\r\n-            }\r\n-            return mCtc.toClass(loader, pd);\r\n-        } catch (RuntimeException e) {\r\n-            throw e;\r\n-        } catch (NotFoundException e) {\r\n-            throw new RuntimeException(e.getMessage(), e);\r\n-        } catch (CannotCompileException e) {\r\n-            throw new RuntimeException(e.getMessage(), e);\r\n-        }\r\n-    }\r\n-\r\n-    public void release() {\r\n-        if (mCtc != null) {\r\n-            mCtc.detach();\r\n-        }\r\n-        if (mInterfaces != null) {\r\n-            mInterfaces.clear();\r\n-        }\r\n-        if (mFields != null) {\r\n-            mFields.clear();\r\n-        }\r\n-        if (mMethods != null) {\r\n-            mMethods.clear();\r\n-        }\r\n-        if (mConstructors != null) {\r\n-            mConstructors.clear();\r\n-        }\r\n-        if (mCopyMethods != null) {\r\n-            mCopyMethods.clear();\r\n-        }\r\n-        if (mCopyConstructors != null) {\r\n-            mCopyConstructors.clear();\r\n-        }\r\n-    }\r\n-\r\n-    private CtClass getCtClass(Class<?> c) throws NotFoundException {\r\n-        return mPool.get(c.getName());\r\n-    }\r\n-\r\n-    private CtMethod getCtMethod(Method m) throws NotFoundException {\r\n-        return getCtClass(m.getDeclaringClass())\r\n-                .getMethod(m.getName(), ReflectUtils.getDescWithoutMethodName(m));\r\n-    }\r\n-\r\n-    private CtConstructor getCtConstructor(Constructor<?> c) throws NotFoundException {\r\n-        return getCtClass(c.getDeclaringClass()).getConstructor(ReflectUtils.getDesc(c));\r\n-    }\r\n-\r\n-    public static interface DC {\r\n-\r\n-    } // dynamic class tag interface.\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.common.bytecode;\n+\n+import org.apache.dubbo.common.utils.ClassHelper;\n+import org.apache.dubbo.common.utils.ReflectUtils;\n+\n+import javassist.CannotCompileException;\n+import javassist.ClassPool;\n+import javassist.CtClass;\n+import javassist.CtConstructor;\n+import javassist.CtField;\n+import javassist.CtMethod;\n+import javassist.CtNewConstructor;\n+import javassist.CtNewMethod;\n+import javassist.LoaderClassPath;\n+import javassist.NotFoundException;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.security.ProtectionDomain;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * ClassGenerator\n+ */\n+public final class ClassGenerator {\n+\n+    private static final AtomicLong CLASS_NAME_COUNTER = new AtomicLong(0);\n+    private static final String SIMPLE_NAME_TAG = \"<init>\";\n+    private static final Map<ClassLoader, ClassPool> POOL_MAP = new ConcurrentHashMap<ClassLoader, ClassPool>(); //ClassLoader - ClassPool\n+    private ClassPool mPool;\n+    private CtClass mCtc;\n+    private String mClassName;\n+    private String mSuperClass;\n+    private Set<String> mInterfaces;\n+    private List<String> mFields;\n+    private List<String> mConstructors;\n+    private List<String> mMethods;\n+    private Map<String, Method> mCopyMethods; // <method desc,method instance>\n+    private Map<String, Constructor<?>> mCopyConstructors; // <constructor desc,constructor instance>\n+    private boolean mDefaultConstructor = false;\n+\n+    private ClassGenerator() {\n+    }\n+\n+    private ClassGenerator(ClassPool pool) {\n+        mPool = pool;\n+    }\n+\n+    public static ClassGenerator newInstance() {\n+        return new ClassGenerator(getClassPool(Thread.currentThread().getContextClassLoader()));\n+    }\n+\n+    public static ClassGenerator newInstance(ClassLoader loader) {\n+        return new ClassGenerator(getClassPool(loader));\n+    }\n+\n+    public static boolean isDynamicClass(Class<?> cl) {\n+        return ClassGenerator.DC.class.isAssignableFrom(cl);\n+    }\n+\n+    public static ClassPool getClassPool(ClassLoader loader) {\n+        if (loader == null) {\n+            return ClassPool.getDefault();\n+        }\n+\n+        ClassPool pool = POOL_MAP.get(loader);\n+        if (pool == null) {\n+            pool = new ClassPool(true);\n+            pool.appendClassPath(new LoaderClassPath(loader));\n+            POOL_MAP.put(loader, pool);\n+        }\n+        return pool;\n+    }\n+\n+    private static String modifier(int mod) {\n+        StringBuilder modifier = new StringBuilder();\n+        if (Modifier.isPublic(mod)) {\n+            modifier.append(\"public\");\n+        }\n+        if (Modifier.isProtected(mod)) {\n+            modifier.append(\"protected\");\n+        }\n+        if (Modifier.isPrivate(mod)) {\n+            modifier.append(\"private\");\n+        }\n+\n+        if (Modifier.isStatic(mod)) {\n+            modifier.append(\" static\");\n+        }\n+        if (Modifier.isVolatile(mod)) {\n+            modifier.append(\" volatile\");\n+        }\n+\n+        return modifier.toString();\n+    }\n+\n+    public String getClassName() {\n+        return mClassName;\n+    }\n+\n+    public ClassGenerator setClassName(String name) {\n+        mClassName = name;\n+        return this;\n+    }\n+\n+    public ClassGenerator addInterface(String cn) {\n+        if (mInterfaces == null) {\n+            mInterfaces = new HashSet<String>();\n+        }\n+        mInterfaces.add(cn);\n+        return this;\n+    }\n+\n+    public ClassGenerator addInterface(Class<?> cl) {\n+        return addInterface(cl.getName());\n+    }\n+\n+    public ClassGenerator setSuperClass(String cn) {\n+        mSuperClass = cn;\n+        return this;\n+    }\n+\n+    public ClassGenerator setSuperClass(Class<?> cl) {\n+        mSuperClass = cl.getName();\n+        return this;\n+    }\n+\n+    public ClassGenerator addField(String code) {\n+        if (mFields == null) {\n+            mFields = new ArrayList<String>();\n+        }\n+        mFields.add(code);\n+        return this;\n+    }\n+\n+    public ClassGenerator addField(String name, int mod, Class<?> type) {\n+        return addField(name, mod, type, null);\n+    }\n+\n+    public ClassGenerator addField(String name, int mod, Class<?> type, String def) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(modifier(mod)).append(' ').append(ReflectUtils.getName(type)).append(' ');\n+        sb.append(name);\n+        if (def != null && def.length() > 0) {\n+            sb.append('=');\n+            sb.append(def);\n+        }\n+        sb.append(';');\n+        return addField(sb.toString());\n+    }\n+\n+    public ClassGenerator addMethod(String code) {\n+        if (mMethods == null) {\n+            mMethods = new ArrayList<String>();\n+        }\n+        mMethods.add(code);\n+        return this;\n+    }\n+\n+    public ClassGenerator addMethod(String name, int mod, Class<?> rt, Class<?>[] pts, String body) {\n+        return addMethod(name, mod, rt, pts, null, body);\n+    }\n+\n+    public ClassGenerator addMethod(String name, int mod, Class<?> rt, Class<?>[] pts, Class<?>[] ets,\n+                                    String body) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(modifier(mod)).append(' ').append(ReflectUtils.getName(rt)).append(' ').append(name);\n+        sb.append('(');\n+        for (int i = 0; i < pts.length; i++) {\n+            if (i > 0) {\n+                sb.append(',');\n+            }\n+            sb.append(ReflectUtils.getName(pts[i]));\n+            sb.append(\" arg\").append(i);\n+        }\n+        sb.append(')');\n+        if (ets != null && ets.length > 0) {\n+            sb.append(\" throws \");\n+            for (int i = 0; i < ets.length; i++) {\n+                if (i > 0) {\n+                    sb.append(',');\n+                }\n+                sb.append(ReflectUtils.getName(ets[i]));\n+            }\n+        }\n+        sb.append('{').append(body).append('}');\n+        return addMethod(sb.toString());\n+    }\n+\n+    public ClassGenerator addMethod(Method m) {\n+        addMethod(m.getName(), m);\n+        return this;\n+    }\n+\n+    public ClassGenerator addMethod(String name, Method m) {\n+        String desc = name + ReflectUtils.getDescWithoutMethodName(m);\n+        addMethod(':' + desc);\n+        if (mCopyMethods == null) {\n+            mCopyMethods = new ConcurrentHashMap<String, Method>(8);\n+        }\n+        mCopyMethods.put(desc, m);\n+        return this;\n+    }\n+\n+    public ClassGenerator addConstructor(String code) {\n+        if (mConstructors == null) {\n+            mConstructors = new LinkedList<String>();\n+        }\n+        mConstructors.add(code);\n+        return this;\n+    }\n+\n+    public ClassGenerator addConstructor(int mod, Class<?>[] pts, String body) {\n+        return addConstructor(mod, pts, null, body);\n+    }\n+\n+    public ClassGenerator addConstructor(int mod, Class<?>[] pts, Class<?>[] ets, String body) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(modifier(mod)).append(' ').append(SIMPLE_NAME_TAG);\n+        sb.append('(');\n+        for (int i = 0; i < pts.length; i++) {\n+            if (i > 0) {\n+                sb.append(',');\n+            }\n+            sb.append(ReflectUtils.getName(pts[i]));\n+            sb.append(\" arg\").append(i);\n+        }\n+        sb.append(')');\n+        if (ets != null && ets.length > 0) {\n+            sb.append(\" throws \");\n+            for (int i = 0; i < ets.length; i++) {\n+                if (i > 0) {\n+                    sb.append(',');\n+                }\n+                sb.append(ReflectUtils.getName(ets[i]));\n+            }\n+        }\n+        sb.append('{').append(body).append('}');\n+        return addConstructor(sb.toString());\n+    }\n+\n+    public ClassGenerator addConstructor(Constructor<?> c) {\n+        String desc = ReflectUtils.getDesc(c);\n+        addConstructor(\":\" + desc);\n+        if (mCopyConstructors == null) {\n+            mCopyConstructors = new ConcurrentHashMap<String, Constructor<?>>(4);\n+        }\n+        mCopyConstructors.put(desc, c);\n+        return this;\n+    }\n+\n+    public ClassGenerator addDefaultConstructor() {\n+        mDefaultConstructor = true;\n+        return this;\n+    }\n+\n+    public ClassPool getClassPool() {\n+        return mPool;\n+    }\n+\n+    public Class<?> toClass() {\n+        return toClass(ClassHelper.getClassLoader(ClassGenerator.class),\n+                getClass().getProtectionDomain());\n+    }\n+\n+    public Class<?> toClass(ClassLoader loader, ProtectionDomain pd) {\n+        if (mCtc != null) {\n+            mCtc.detach();\n+        }\n+        long id = CLASS_NAME_COUNTER.getAndIncrement();\n+        try {\n+            CtClass ctcs = mSuperClass == null ? null : mPool.get(mSuperClass);\n+            if (mClassName == null) {\n+                mClassName = (mSuperClass == null || javassist.Modifier.isPublic(ctcs.getModifiers())\n+                        ? ClassGenerator.class.getName() : mSuperClass + \"$sc\") + id;\n+            }\n+            mCtc = mPool.makeClass(mClassName);\n+            if (mSuperClass != null) {\n+                mCtc.setSuperclass(ctcs);\n+            }\n+            mCtc.addInterface(mPool.get(DC.class.getName())); // add dynamic class tag.\n+            if (mInterfaces != null) {\n+                for (String cl : mInterfaces) {\n+                    mCtc.addInterface(mPool.get(cl));\n+                }\n+            }\n+            if (mFields != null) {\n+                for (String code : mFields) {\n+                    mCtc.addField(CtField.make(code, mCtc));\n+                }\n+            }\n+            if (mMethods != null) {\n+                for (String code : mMethods) {\n+                    if (code.charAt(0) == ':') {\n+                        mCtc.addMethod(CtNewMethod.copy(getCtMethod(mCopyMethods.get(code.substring(1))),\n+                                code.substring(1, code.indexOf('(')), mCtc, null));\n+                    } else {\n+                        mCtc.addMethod(CtNewMethod.make(code, mCtc));\n+                    }\n+                }\n+            }\n+            if (mDefaultConstructor) {\n+                mCtc.addConstructor(CtNewConstructor.defaultConstructor(mCtc));\n+            }\n+            if (mConstructors != null) {\n+                for (String code : mConstructors) {\n+                    if (code.charAt(0) == ':') {\n+                        mCtc.addConstructor(CtNewConstructor\n+                                .copy(getCtConstructor(mCopyConstructors.get(code.substring(1))), mCtc, null));\n+                    } else {\n+                        String[] sn = mCtc.getSimpleName().split(\"\\\\$+\"); // inner class name include $.\n+                        mCtc.addConstructor(\n+                                CtNewConstructor.make(code.replaceFirst(SIMPLE_NAME_TAG, sn[sn.length - 1]), mCtc));\n+                    }\n+                }\n+            }\n+            return mCtc.toClass(loader, pd);\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (NotFoundException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        } catch (CannotCompileException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    public void release() {\n+        if (mCtc != null) {\n+            mCtc.detach();\n+        }\n+        if (mInterfaces != null) {\n+            mInterfaces.clear();\n+        }\n+        if (mFields != null) {\n+            mFields.clear();\n+        }\n+        if (mMethods != null) {\n+            mMethods.clear();\n+        }\n+        if (mConstructors != null) {\n+            mConstructors.clear();\n+        }\n+        if (mCopyMethods != null) {\n+            mCopyMethods.clear();\n+        }\n+        if (mCopyConstructors != null) {\n+            mCopyConstructors.clear();\n+        }\n+    }\n+\n+    private CtClass getCtClass(Class<?> c) throws NotFoundException {\n+        return mPool.get(c.getName());\n+    }\n+\n+    private CtMethod getCtMethod(Method m) throws NotFoundException {\n+        return getCtClass(m.getDeclaringClass())\n+                .getMethod(m.getName(), ReflectUtils.getDescWithoutMethodName(m));\n+    }\n+\n+    private CtConstructor getCtConstructor(Constructor<?> c) throws NotFoundException {\n+        return getCtClass(c.getDeclaringClass()).getConstructor(ReflectUtils.getDesc(c));\n+    }\n+\n+    public static interface DC {\n+\n+    } // dynamic class tag interface.\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "sha": "c044c7b297a0ed1f7fd98e225b8d355b38c3ffd4",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 14,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java",
                "patch": "@@ -98,16 +98,18 @@ public static Mixin mixin(Class<?>[] ics, Class<?>[] dcs, ClassLoader cl) {\n                     if (pkg == null) {\r\n                         pkg = npkg;\r\n                     } else {\r\n-                        if (!pkg.equals(npkg))\r\n+                        if (!pkg.equals(npkg)) {\r\n                             throw new IllegalArgumentException(\"non-public interfaces class from different packages\");\r\n+                        }\r\n                     }\r\n                 }\r\n \r\n                 ccp.addField(\"private \" + dcs[i].getName() + \" d\" + i + \";\");\r\n \r\n                 code.append(\"d\").append(i).append(\" = (\").append(dcs[i].getName()).append(\")$1[\").append(i).append(\"];\\n\");\r\n-                if (MixinAware.class.isAssignableFrom(dcs[i]))\r\n+                if (MixinAware.class.isAssignableFrom(dcs[i])) {\r\n                     code.append(\"d\").append(i).append(\".setMixinInstance(this);\\n\");\r\n+                }\r\n             }\r\n             ccp.addConstructor(Modifier.PUBLIC, new Class<?>[]{Object[].class}, code.toString());\r\n \r\n@@ -119,39 +121,45 @@ public static Mixin mixin(Class<?>[] ics, Class<?>[] dcs, ClassLoader cl) {\n                     if (pkg == null) {\r\n                         pkg = npkg;\r\n                     } else {\r\n-                        if (!pkg.equals(npkg))\r\n+                        if (!pkg.equals(npkg)) {\r\n                             throw new IllegalArgumentException(\"non-public delegate class from different packages\");\r\n+                        }\r\n                     }\r\n                 }\r\n \r\n                 ccp.addInterface(ics[i]);\r\n \r\n                 for (Method method : ics[i].getMethods()) {\r\n-                    if (\"java.lang.Object\".equals(method.getDeclaringClass().getName()))\r\n+                    if (\"java.lang.Object\".equals(method.getDeclaringClass().getName())) {\r\n                         continue;\r\n+                    }\r\n \r\n                     String desc = ReflectUtils.getDesc(method);\r\n-                    if (worked.contains(desc))\r\n+                    if (worked.contains(desc)) {\r\n                         continue;\r\n+                    }\r\n                     worked.add(desc);\r\n \r\n                     int ix = findMethod(dcs, desc);\r\n-                    if (ix < 0)\r\n+                    if (ix < 0) {\r\n                         throw new RuntimeException(\"Missing method [\" + desc + \"] implement.\");\r\n+                    }\r\n \r\n                     Class<?> rt = method.getReturnType();\r\n                     String mn = method.getName();\r\n-                    if (Void.TYPE.equals(rt))\r\n+                    if (Void.TYPE.equals(rt)) {\r\n                         ccp.addMethod(mn, method.getModifiers(), rt, method.getParameterTypes(), method.getExceptionTypes(),\r\n                                 \"d\" + ix + \".\" + mn + \"($$);\");\r\n-                    else\r\n+                    } else {\r\n                         ccp.addMethod(mn, method.getModifiers(), rt, method.getParameterTypes(), method.getExceptionTypes(),\r\n                                 \"return ($r)d\" + ix + \".\" + mn + \"($$);\");\r\n+                    }\r\n                 }\r\n             }\r\n \r\n-            if (pkg == null)\r\n+            if (pkg == null) {\r\n                 pkg = PACKAGE_NAME;\r\n+            }\r\n \r\n             // create MixinInstance class.\r\n             String micn = pkg + \".mixin\" + id;\r\n@@ -173,10 +181,12 @@ public static Mixin mixin(Class<?>[] ics, Class<?>[] dcs, ClassLoader cl) {\n             throw new RuntimeException(e.getMessage(), e);\r\n         } finally {\r\n             // release ClassGenerator\r\n-            if (ccp != null)\r\n+            if (ccp != null) {\r\n                 ccp.release();\r\n-            if (ccm != null)\r\n+            }\r\n+            if (ccm != null) {\r\n                 ccm.release();\r\n+            }\r\n         }\r\n     }\r\n \r\n@@ -187,17 +197,20 @@ private static int findMethod(Class<?>[] dcs, String desc) {\n             cl = dcs[i];\r\n             methods = cl.getMethods();\r\n             for (Method method : methods) {\r\n-                if (desc.equals(ReflectUtils.getDesc(method)))\r\n+                if (desc.equals(ReflectUtils.getDesc(method))) {\r\n                     return i;\r\n+                }\r\n             }\r\n         }\r\n         return -1;\r\n     }\r\n \r\n     private static void assertInterfaceArray(Class<?>[] ics) {\r\n-        for (int i = 0; i < ics.length; i++)\r\n-            if (!ics[i].isInterface())\r\n+        for (int i = 0; i < ics.length; i++) {\r\n+            if (!ics[i].isInterface()) {\r\n                 throw new RuntimeException(\"Class \" + ics[i].getName() + \" is not a interface.\");\r\n+            }\r\n+        }\r\n     }\r\n \r\n     /**\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Mixin.java",
                "sha": "df95dabf445296f03013a4c863957f9a3a3b41df",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 21,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "patch": "@@ -77,23 +77,26 @@ public static Proxy getProxy(Class<?>... ics) {\n      * @return Proxy instance.\r\n      */\r\n     public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\r\n-        if (ics.length > 65535)\r\n+        if (ics.length > 65535) {\r\n             throw new IllegalArgumentException(\"interface limit exceeded\");\r\n+        }\r\n \r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < ics.length; i++) {\r\n             String itf = ics[i].getName();\r\n-            if (!ics[i].isInterface())\r\n+            if (!ics[i].isInterface()) {\r\n                 throw new RuntimeException(itf + \" is not a interface.\");\r\n+            }\r\n \r\n             Class<?> tmp = null;\r\n             try {\r\n                 tmp = Class.forName(itf, false, cl);\r\n             } catch (ClassNotFoundException e) {\r\n             }\r\n \r\n-            if (tmp != ics[i])\r\n+            if (tmp != ics[i]) {\r\n                 throw new IllegalArgumentException(ics[i] + \" is not visible from class loader\");\r\n+            }\r\n \r\n             sb.append(itf).append(';');\r\n         }\r\n@@ -117,8 +120,9 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n                 Object value = cache.get(key);\r\n                 if (value instanceof Reference<?>) {\r\n                     proxy = (Proxy) ((Reference<?>) value).get();\r\n-                    if (proxy != null)\r\n+                    if (proxy != null) {\r\n                         return proxy;\r\n+                    }\r\n                 }\r\n \r\n                 if (value == PendingGenerationMarker) {\r\n@@ -149,36 +153,41 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n                     if (pkg == null) {\r\n                         pkg = npkg;\r\n                     } else {\r\n-                        if (!pkg.equals(npkg))\r\n+                        if (!pkg.equals(npkg)) {\r\n                             throw new IllegalArgumentException(\"non-public interfaces from different packages\");\r\n+                        }\r\n                     }\r\n                 }\r\n                 ccp.addInterface(ics[i]);\r\n \r\n                 for (Method method : ics[i].getMethods()) {\r\n                     String desc = ReflectUtils.getDesc(method);\r\n-                    if (worked.contains(desc))\r\n+                    if (worked.contains(desc)) {\r\n                         continue;\r\n+                    }\r\n                     worked.add(desc);\r\n \r\n                     int ix = methods.size();\r\n                     Class<?> rt = method.getReturnType();\r\n                     Class<?>[] pts = method.getParameterTypes();\r\n \r\n                     StringBuilder code = new StringBuilder(\"Object[] args = new Object[\").append(pts.length).append(\"];\");\r\n-                    for (int j = 0; j < pts.length; j++)\r\n+                    for (int j = 0; j < pts.length; j++) {\r\n                         code.append(\" args[\").append(j).append(\"] = ($w)$\").append(j + 1).append(\";\");\r\n+                    }\r\n                     code.append(\" Object ret = handler.invoke(this, methods[\" + ix + \"], args);\");\r\n-                    if (!Void.TYPE.equals(rt))\r\n+                    if (!Void.TYPE.equals(rt)) {\r\n                         code.append(\" return \").append(asArgument(rt, \"ret\")).append(\";\");\r\n+                    }\r\n \r\n                     methods.add(method);\r\n                     ccp.addMethod(method.getName(), method.getModifiers(), rt, pts, method.getExceptionTypes(), code.toString());\r\n                 }\r\n             }\r\n \r\n-            if (pkg == null)\r\n+            if (pkg == null) {\r\n                 pkg = PACKAGE_NAME;\r\n+            }\r\n \r\n             // create ProxyInstance class.\r\n             String pcn = pkg + \".proxy\" + id;\r\n@@ -205,15 +214,18 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n             throw new RuntimeException(e.getMessage(), e);\r\n         } finally {\r\n             // release ClassGenerator\r\n-            if (ccp != null)\r\n+            if (ccp != null) {\r\n                 ccp.release();\r\n-            if (ccm != null)\r\n+            }\r\n+            if (ccm != null) {\r\n                 ccm.release();\r\n+            }\r\n             synchronized (cache) {\r\n-                if (proxy == null)\r\n+                if (proxy == null) {\r\n                     cache.remove(key);\r\n-                else\r\n+                } else {\r\n                     cache.put(key, new WeakReference<Proxy>(proxy));\r\n+                }\r\n                 cache.notifyAll();\r\n             }\r\n         }\r\n@@ -222,22 +234,30 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n \r\n     private static String asArgument(Class<?> cl, String name) {\r\n         if (cl.isPrimitive()) {\r\n-            if (Boolean.TYPE == cl)\r\n+            if (Boolean.TYPE == cl) {\r\n                 return name + \"==null?false:((Boolean)\" + name + \").booleanValue()\";\r\n-            if (Byte.TYPE == cl)\r\n+            }\r\n+            if (Byte.TYPE == cl) {\r\n                 return name + \"==null?(byte)0:((Byte)\" + name + \").byteValue()\";\r\n-            if (Character.TYPE == cl)\r\n+            }\r\n+            if (Character.TYPE == cl) {\r\n                 return name + \"==null?(char)0:((Character)\" + name + \").charValue()\";\r\n-            if (Double.TYPE == cl)\r\n+            }\r\n+            if (Double.TYPE == cl) {\r\n                 return name + \"==null?(double)0:((Double)\" + name + \").doubleValue()\";\r\n-            if (Float.TYPE == cl)\r\n+            }\r\n+            if (Float.TYPE == cl) {\r\n                 return name + \"==null?(float)0:((Float)\" + name + \").floatValue()\";\r\n-            if (Integer.TYPE == cl)\r\n+            }\r\n+            if (Integer.TYPE == cl) {\r\n                 return name + \"==null?(int)0:((Integer)\" + name + \").intValue()\";\r\n-            if (Long.TYPE == cl)\r\n+            }\r\n+            if (Long.TYPE == cl) {\r\n                 return name + \"==null?(long)0:((Long)\" + name + \").longValue()\";\r\n-            if (Short.TYPE == cl)\r\n+            }\r\n+            if (Short.TYPE == cl) {\r\n                 return name + \"==null?(short)0:((Short)\" + name + \").shortValue()\";\r\n+            }\r\n             throw new RuntimeException(name + \" is unknown primitive type.\");\r\n         }\r\n         return \"(\" + ReflectUtils.getName(cl) + \")\" + name;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "sha": "150e946b6905e02d84ad17e5f0e1744e3863db97",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 27,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "patch": "@@ -77,11 +77,19 @@ public boolean hasProperty(String name) {\n \r\n         @Override\r\n         public Object invokeMethod(Object instance, String mn, Class<?>[] types, Object[] args) throws NoSuchMethodException {\r\n-            if (\"getClass\".equals(mn)) return instance.getClass();\r\n-            if (\"hashCode\".equals(mn)) return instance.hashCode();\r\n-            if (\"toString\".equals(mn)) return instance.toString();\r\n+            if (\"getClass\".equals(mn)) {\r\n+                return instance.getClass();\r\n+            }\r\n+            if (\"hashCode\".equals(mn)) {\r\n+                return instance.hashCode();\r\n+            }\r\n+            if (\"toString\".equals(mn)) {\r\n+                return instance.toString();\r\n+            }\r\n             if (\"equals\".equals(mn)) {\r\n-                if (args.length == 1) return instance.equals(args[0]);\r\n+                if (args.length == 1) {\r\n+                    return instance.equals(args[0]);\r\n+                }\r\n                 throw new IllegalArgumentException(\"Invoke method [\" + mn + \"] argument number error.\");\r\n             }\r\n             throw new NoSuchMethodException(\"Method [\" + mn + \"] not found.\");\r\n@@ -97,10 +105,13 @@ public Object invokeMethod(Object instance, String mn, Class<?>[] types, Object[\n      */\r\n     public static Wrapper getWrapper(Class<?> c) {\r\n         while (ClassGenerator.isDynamicClass(c)) // can not wrapper on dynamic class.\r\n+        {\r\n             c = c.getSuperclass();\r\n+        }\r\n \r\n-        if (c == Object.class)\r\n+        if (c == Object.class) {\r\n             return OBJECT_WRAPPER;\r\n+        }\r\n \r\n         Wrapper ret = WRAPPER_MAP.get(c);\r\n         if (ret == null) {\r\n@@ -111,8 +122,9 @@ public static Wrapper getWrapper(Class<?> c) {\n     }\r\n \r\n     private static Wrapper makeWrapper(Class<?> c) {\r\n-        if (c.isPrimitive())\r\n+        if (c.isPrimitive()) {\r\n             throw new IllegalArgumentException(\"Can not create wrapper for primitive type: \" + c);\r\n+        }\r\n \r\n         String name = c.getName();\r\n         ClassLoader cl = ClassHelper.getClassLoader(c);\r\n@@ -134,8 +146,9 @@ private static Wrapper makeWrapper(Class<?> c) {\n         for (Field f : c.getFields()) {\r\n             String fn = f.getName();\r\n             Class<?> ft = f.getType();\r\n-            if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers()))\r\n+            if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers())) {\r\n                 continue;\r\n+            }\r\n \r\n             c1.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ w.\").append(fn).append(\"=\").append(arg(ft, \"$3\")).append(\"; return; }\");\r\n             c2.append(\" if( $2.equals(\\\"\").append(fn).append(\"\\\") ){ return ($w)w.\").append(fn).append(\"; }\");\r\n@@ -150,7 +163,9 @@ private static Wrapper makeWrapper(Class<?> c) {\n         }\r\n         for (Method m : methods) {\r\n             if (m.getDeclaringClass() == Object.class) //ignore Object's method.\r\n+            {\r\n                 continue;\r\n+            }\r\n \r\n             String mn = m.getName();\r\n             c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\r\n@@ -175,16 +190,18 @@ private static Wrapper makeWrapper(Class<?> c) {\n \r\n             c3.append(\" ) { \");\r\n \r\n-            if (m.getReturnType() == Void.TYPE)\r\n+            if (m.getReturnType() == Void.TYPE) {\r\n                 c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(), \"$4\")).append(\");\").append(\" return null;\");\r\n-            else\r\n+            } else {\r\n                 c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(), \"$4\")).append(\");\");\r\n+            }\r\n \r\n             c3.append(\" }\");\r\n \r\n             mns.add(mn);\r\n-            if (m.getDeclaringClass() == c)\r\n+            if (m.getDeclaringClass() == c) {\r\n                 dmns.add(mn);\r\n+            }\r\n             ms.put(ReflectUtils.getDesc(m), m);\r\n         }\r\n         if (hasMethod) {\r\n@@ -229,8 +246,9 @@ private static Wrapper makeWrapper(Class<?> c) {\n         cc.addField(\"public static \" + Map.class.getName() + \" pts;\"); // property type map.\r\n         cc.addField(\"public static String[] mns;\"); // all method name array.\r\n         cc.addField(\"public static String[] dmns;\"); // declared method name array.\r\n-        for (int i = 0, len = ms.size(); i < len; i++)\r\n+        for (int i = 0, len = ms.size(); i < len; i++) {\r\n             cc.addField(\"public static Class[] mts\" + i + \";\");\r\n+        }\r\n \r\n         cc.addMethod(\"public String[] getPropertyNames(){ return pns; }\");\r\n         cc.addMethod(\"public boolean hasProperty(String n){ return pts.containsKey($1); }\");\r\n@@ -249,8 +267,9 @@ private static Wrapper makeWrapper(Class<?> c) {\n             wc.getField(\"mns\").set(null, mns.toArray(new String[0]));\r\n             wc.getField(\"dmns\").set(null, dmns.toArray(new String[0]));\r\n             int ix = 0;\r\n-            for (Method m : ms.values())\r\n+            for (Method m : ms.values()) {\r\n                 wc.getField(\"mts\" + ix++).set(null, m.getParameterTypes());\r\n+            }\r\n             return (Wrapper) wc.newInstance();\r\n         } catch (RuntimeException e) {\r\n             throw e;\r\n@@ -266,34 +285,45 @@ private static Wrapper makeWrapper(Class<?> c) {\n \r\n     private static String arg(Class<?> cl, String name) {\r\n         if (cl.isPrimitive()) {\r\n-            if (cl == Boolean.TYPE)\r\n+            if (cl == Boolean.TYPE) {\r\n                 return \"((Boolean)\" + name + \").booleanValue()\";\r\n-            if (cl == Byte.TYPE)\r\n+            }\r\n+            if (cl == Byte.TYPE) {\r\n                 return \"((Byte)\" + name + \").byteValue()\";\r\n-            if (cl == Character.TYPE)\r\n+            }\r\n+            if (cl == Character.TYPE) {\r\n                 return \"((Character)\" + name + \").charValue()\";\r\n-            if (cl == Double.TYPE)\r\n+            }\r\n+            if (cl == Double.TYPE) {\r\n                 return \"((Number)\" + name + \").doubleValue()\";\r\n-            if (cl == Float.TYPE)\r\n+            }\r\n+            if (cl == Float.TYPE) {\r\n                 return \"((Number)\" + name + \").floatValue()\";\r\n-            if (cl == Integer.TYPE)\r\n+            }\r\n+            if (cl == Integer.TYPE) {\r\n                 return \"((Number)\" + name + \").intValue()\";\r\n-            if (cl == Long.TYPE)\r\n+            }\r\n+            if (cl == Long.TYPE) {\r\n                 return \"((Number)\" + name + \").longValue()\";\r\n-            if (cl == Short.TYPE)\r\n+            }\r\n+            if (cl == Short.TYPE) {\r\n                 return \"((Number)\" + name + \").shortValue()\";\r\n+            }\r\n             throw new RuntimeException(\"Unknown primitive type: \" + cl.getName());\r\n         }\r\n         return \"(\" + ReflectUtils.getName(cl) + \")\" + name;\r\n     }\r\n \r\n     private static String args(Class<?>[] cs, String name) {\r\n         int len = cs.length;\r\n-        if (len == 0) return \"\";\r\n+        if (len == 0) {\r\n+            return \"\";\r\n+        }\r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < len; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 sb.append(',');\r\n+            }\r\n             sb.append(arg(cs[i], name + \"[\" + i + \"]\"));\r\n         }\r\n         return sb.toString();\r\n@@ -365,8 +395,9 @@ private static boolean hasMethods(Method[] methods) {\n      */\r\n     public Object[] getPropertyValues(Object instance, String[] pns) throws NoSuchPropertyException, IllegalArgumentException {\r\n         Object[] ret = new Object[pns.length];\r\n-        for (int i = 0; i < ret.length; i++)\r\n+        for (int i = 0; i < ret.length; i++) {\r\n             ret[i] = getPropertyValue(instance, pns[i]);\r\n+        }\r\n         return ret;\r\n     }\r\n \r\n@@ -378,11 +409,13 @@ private static boolean hasMethods(Method[] methods) {\n      * @param pvs      property value array.\r\n      */\r\n     public void setPropertyValues(Object instance, String[] pns, Object[] pvs) throws NoSuchPropertyException, IllegalArgumentException {\r\n-        if (pns.length != pvs.length)\r\n+        if (pns.length != pvs.length) {\r\n             throw new IllegalArgumentException(\"pns.length != pvs.length\");\r\n+        }\r\n \r\n-        for (int i = 0; i < pns.length; i++)\r\n+        for (int i = 0; i < pns.length; i++) {\r\n             setPropertyValue(instance, pns[i], pvs[i]);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -406,8 +439,11 @@ public void setPropertyValues(Object instance, String[] pns, Object[] pvs) throw\n      * @return has or has not.\r\n      */\r\n     public boolean hasMethod(String name) {\r\n-        for (String mn : getMethodNames())\r\n-            if (mn.equals(name)) return true;\r\n+        for (String mn : getMethodNames()) {\r\n+            if (mn.equals(name)) {\r\n+                return true;\r\n+            }\r\n+        }\r\n         return false;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "sha": "03ac84f4dc121fee34f34cdf08a302284c7f92b9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 2,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "patch": "@@ -168,8 +168,9 @@ public JavaFileManagerImpl(JavaFileManager fileManager, ClassLoaderImpl classLoa\n         @Override\r\n         public FileObject getFileForInput(Location location, String packageName, String relativeName) throws IOException {\r\n             FileObject o = fileObjects.get(uri(location, packageName, relativeName));\r\n-            if (o != null)\r\n+            if (o != null) {\r\n                 return o;\r\n+            }\r\n             return super.getFileForInput(location, packageName, relativeName);\r\n         }\r\n \r\n@@ -196,8 +197,9 @@ public ClassLoader getClassLoader(JavaFileManager.Location location) {\n \r\n         @Override\r\n         public String inferBinaryName(Location loc, JavaFileObject file) {\r\n-            if (file instanceof JavaFileObjectImpl)\r\n+            if (file instanceof JavaFileObjectImpl) {\r\n                 return file.getName();\r\n+            }\r\n             return super.inferBinaryName(loc, file);\r\n         }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java",
                "sha": "9c2800cc217ffe2f861527749d4c45800eb49083",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 24,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "patch": "@@ -105,8 +105,9 @@ private ExtensionLoader(Class<?> type) {\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     public static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\r\n-        if (type == null)\r\n+        if (type == null) {\r\n             throw new IllegalArgumentException(\"Extension type == null\");\r\n+        }\r\n         if (!type.isInterface()) {\r\n             throw new IllegalArgumentException(\"Extension type(\" + type + \") is not interface!\");\r\n         }\r\n@@ -277,8 +278,9 @@ private boolean isActive(String[] keys, URL url) {\n      */\r\n     @SuppressWarnings(\"unchecked\")\r\n     public T getLoadedExtension(String name) {\r\n-        if (name == null || name.length() == 0)\r\n+        if (name == null || name.length() == 0) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n+        }\r\n         Holder<Object> holder = cachedInstances.get(name);\r\n         if (holder == null) {\r\n             cachedInstances.putIfAbsent(name, new Holder<Object>());\r\n@@ -304,8 +306,9 @@ public T getLoadedExtension(String name) {\n      */\r\n     @SuppressWarnings(\"unchecked\")\r\n     public T getExtension(String name) {\r\n-        if (name == null || name.length() == 0)\r\n+        if (name == null || name.length() == 0) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n+        }\r\n         if (\"true\".equals(name)) {\r\n             return getDefaultExtension();\r\n         }\r\n@@ -340,8 +343,9 @@ public T getDefaultExtension() {\n     }\r\n \r\n     public boolean hasExtension(String name) {\r\n-        if (name == null || name.length() == 0)\r\n+        if (name == null || name.length() == 0) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n+        }\r\n         try {\r\n             this.getExtensionClass(name);\r\n             return true;\r\n@@ -549,13 +553,16 @@ private T injectExtension(T instance) {\n     }\r\n \r\n     private Class<?> getExtensionClass(String name) {\r\n-        if (type == null)\r\n+        if (type == null) {\r\n             throw new IllegalArgumentException(\"Extension type == null\");\r\n-        if (name == null)\r\n+        }\r\n+        if (name == null) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n+        }\r\n         Class<?> clazz = getExtensionClasses().get(name);\r\n-        if (clazz == null)\r\n+        if (clazz == null) {\r\n             throw new IllegalStateException(\"No such extension \\\"\" + name + \"\\\" for \" + type.getName() + \"!\");\r\n+        }\r\n         return clazz;\r\n     }\r\n \r\n@@ -584,7 +591,9 @@ private T injectExtension(T instance) {\n                     throw new IllegalStateException(\"more than 1 default extension name on extension \" + type.getName()\r\n                             + \": \" + Arrays.toString(names));\r\n                 }\r\n-                if (names.length == 1) cachedDefaultName = names[0];\r\n+                if (names.length == 1) {\r\n+                    cachedDefaultName = names[0];\r\n+                }\r\n             }\r\n         }\r\n \r\n@@ -627,7 +636,9 @@ private void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader cl\n                 String line;\r\n                 while ((line = reader.readLine()) != null) {\r\n                     final int ci = line.indexOf('#');\r\n-                    if (ci >= 0) line = line.substring(0, ci);\r\n+                    if (ci >= 0) {\r\n+                        line = line.substring(0, ci);\r\n+                    }\r\n                     line = line.trim();\r\n                     if (line.length() > 0) {\r\n                         try {\r\n@@ -768,8 +779,9 @@ private String createAdaptiveExtensionClassCode() {\n             }\r\n         }\r\n         // no need to generate adaptive class since there's no adaptive method found.\r\n-        if (!hasAdaptiveAnnotation)\r\n+        if (!hasAdaptiveAnnotation) {\r\n             throw new IllegalStateException(\"No adaptive method on extension \" + type.getName() + \", refuse to create the adaptive class!\");\r\n+        }\r\n \r\n         codeBuilder.append(\"package \").append(type.getPackage().getName()).append(\";\");\r\n         codeBuilder.append(\"\\nimport \").append(ExtensionLoader.class.getName()).append(\";\");\r\n@@ -865,7 +877,7 @@ private String createAdaptiveExtensionClassCode() {\n \r\n                 boolean hasInvocation = false;\r\n                 for (int i = 0; i < pts.length; ++i) {\r\n-                    if (pts[i].getName().equals(\"org.apache.dubbo.rpc.Invocation\")) {\r\n+                    if ((\"org.apache.dubbo.rpc.Invocation\").equals(pts[i].getName())) {\r\n                         // Null Point check\r\n                         String s = String.format(\"\\nif (arg%d == null) throw new IllegalArgumentException(\\\"invocation == null\\\");\", i);\r\n                         code.append(s);\r\n@@ -881,30 +893,36 @@ private String createAdaptiveExtensionClassCode() {\n                 for (int i = value.length - 1; i >= 0; --i) {\r\n                     if (i == value.length - 1) {\r\n                         if (null != defaultExtName) {\r\n-                            if (!\"protocol\".equals(value[i]))\r\n-                                if (hasInvocation)\r\n+                            if (!\"protocol\".equals(value[i])) {\r\n+                                if (hasInvocation) {\r\n                                     getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                                else\r\n+                                } else {\r\n                                     getNameCode = String.format(\"url.getParameter(\\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                            else\r\n+                                }\r\n+                            } else {\r\n                                 getNameCode = String.format(\"( url.getProtocol() == null ? \\\"%s\\\" : url.getProtocol() )\", defaultExtName);\r\n+                            }\r\n                         } else {\r\n-                            if (!\"protocol\".equals(value[i]))\r\n-                                if (hasInvocation)\r\n+                            if (!\"protocol\".equals(value[i])) {\r\n+                                if (hasInvocation) {\r\n                                     getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                                else\r\n+                                } else {\r\n                                     getNameCode = String.format(\"url.getParameter(\\\"%s\\\")\", value[i]);\r\n-                            else\r\n+                                }\r\n+                            } else {\r\n                                 getNameCode = \"url.getProtocol()\";\r\n+                            }\r\n                         }\r\n                     } else {\r\n-                        if (!\"protocol\".equals(value[i]))\r\n-                            if (hasInvocation)\r\n+                        if (!\"protocol\".equals(value[i])) {\r\n+                            if (hasInvocation) {\r\n                                 getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                            else\r\n+                            } else {\r\n                                 getNameCode = String.format(\"url.getParameter(\\\"%s\\\", %s)\", value[i], getNameCode);\r\n-                        else\r\n+                            }\r\n+                        } else {\r\n                             getNameCode = String.format(\"url.getProtocol() == null ? (%s) : url.getProtocol()\", getNameCode);\r\n+                        }\r\n                     }\r\n                 }\r\n                 code.append(\"\\nString extName = \").append(getNameCode).append(\";\");\r\n@@ -929,8 +947,9 @@ private String createAdaptiveExtensionClassCode() {\n                 s = String.format(\"extension.%s(\", method.getName());\r\n                 code.append(s);\r\n                 for (int i = 0; i < pts.length; i++) {\r\n-                    if (i != 0)\r\n+                    if (i != 0) {\r\n                         code.append(\", \");\r\n+                    }\r\n                     code.append(\"arg\").append(i);\r\n                 }\r\n                 code.append(\");\");\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "sha": "75b7562398e48b1514895e7e6b3c7e926368710b",
                "status": "modified"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "changes": 123,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 40,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "patch": "@@ -395,12 +395,15 @@ public static String bytes2hex(byte[] bs) {\n      * @return hex string.\n      */\n     public static String bytes2hex(byte[] bs, int off, int len) {\n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"bytes2hex: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"bytes2hex: length < 0, length is \" + len);\n-        if (off + len > bs.length)\n+        }\n+        if (off + len > bs.length) {\n             throw new IndexOutOfBoundsException(\"bytes2hex: offset + length > array length.\");\n+        }\n \n         byte b;\n         int r = off, w = 0;\n@@ -432,20 +435,25 @@ public static String bytes2hex(byte[] bs, int off, int len) {\n      * @return byte array.\n      */\n     public static byte[] hex2bytes(final String str, final int off, int len) {\n-        if ((len & 1) == 1)\n+        if ((len & 1) == 1) {\n             throw new IllegalArgumentException(\"hex2bytes: ( len & 1 ) == 1.\");\n+        }\n \n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"hex2bytes: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"hex2bytes: length < 0, length is \" + len);\n-        if (off + len > str.length())\n+        }\n+        if (off + len > str.length()) {\n             throw new IndexOutOfBoundsException(\"hex2bytes: offset + length > array length.\");\n+        }\n \n         int num = len / 2, r = off, w = 0;\n         byte[] b = new byte[num];\n-        for (int i = 0; i < num; i++)\n+        for (int i = 0; i < num; i++) {\n             b[w++] = (byte) (hex(str.charAt(r++)) << 4 | hex(str.charAt(r++)));\n+        }\n         return b;\n     }\n \n@@ -488,8 +496,9 @@ public static String bytes2base64(byte[] b, String code) {\n      * @return base64 string.\n      */\n     public static String bytes2base64(byte[] b, int offset, int length, String code) {\n-        if (code.length() < 64)\n+        if (code.length() < 64) {\n             throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+        }\n \n         return bytes2base64(b, offset, length, code.toCharArray());\n     }\n@@ -515,15 +524,19 @@ public static String bytes2base64(byte[] b, char[] code) {\n      * @return base64 string.\n      */\n     public static String bytes2base64(final byte[] bs, final int off, final int len, final char[] code) {\n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"bytes2base64: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"bytes2base64: length < 0, length is \" + len);\n-        if (off + len > bs.length)\n+        }\n+        if (off + len > bs.length) {\n             throw new IndexOutOfBoundsException(\"bytes2base64: offset + length > array length.\");\n+        }\n \n-        if (code.length < 64)\n+        if (code.length < 64) {\n             throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+        }\n \n         boolean pad = code.length > 64; // has pad char.\n         int num = len / 3, rem = len % 3, r = off, w = 0;\n@@ -551,8 +564,9 @@ public static String bytes2base64(final byte[] bs, final int off, final int len,\n             cs[w++] = code[b1 >> 2];\n             cs[w++] = code[(b1 << 4) & MASK6 | (b2 >> 4)];\n             cs[w++] = code[(b2 << 2) & MASK6];\n-            if (pad)\n+            if (pad) {\n                 cs[w++] = code[64];\n+            }\n         }\n         return new String(cs);\n     }\n@@ -600,24 +614,30 @@ public static String bytes2base64(final byte[] bs, final int off, final int len,\n      * @return byte array.\n      */\n     public static byte[] base642bytes(final String str, final int off, final int len, final String code) {\n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"base642bytes: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"base642bytes: length < 0, length is \" + len);\n-        if (off + len > str.length())\n+        }\n+        if (off + len > str.length()) {\n             throw new IndexOutOfBoundsException(\"base642bytes: offset + length > string length.\");\n+        }\n \n-        if (code.length() < 64)\n+        if (code.length() < 64) {\n             throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+        }\n \n         int rem = len % 4;\n-        if (rem == 1)\n+        if (rem == 1) {\n             throw new IllegalArgumentException(\"base642bytes: base64 string length % 4 == 1.\");\n+        }\n \n         int num = len / 4, size = num * 3;\n         if (code.length() > 64) {\n-            if (rem != 0)\n+            if (rem != 0) {\n                 throw new IllegalArgumentException(\"base642bytes: base64 string length error.\");\n+            }\n \n             char pc = code.charAt(64);\n             if (str.charAt(off + len - 2) == pc) {\n@@ -630,10 +650,11 @@ public static String bytes2base64(final byte[] bs, final int off, final int len,\n                 rem = 3;\n             }\n         } else {\n-            if (rem == 2)\n+            if (rem == 2) {\n                 size++;\n-            else if (rem == 3)\n+            } else if (rem == 3) {\n                 size += 2;\n+            }\n         }\n \n         int r = off, w = 0;\n@@ -681,35 +702,43 @@ else if (rem == 3)\n      * @return byte array.\n      */\n     public static byte[] base642bytes(final String str, final int off, final int len, final char[] code) {\n-        if (off < 0)\n+        if (off < 0) {\n             throw new IndexOutOfBoundsException(\"base642bytes: offset < 0, offset is \" + off);\n-        if (len < 0)\n+        }\n+        if (len < 0) {\n             throw new IndexOutOfBoundsException(\"base642bytes: length < 0, length is \" + len);\n-        if (off + len > str.length())\n+        }\n+        if (off + len > str.length()) {\n             throw new IndexOutOfBoundsException(\"base642bytes: offset + length > string length.\");\n+        }\n \n-        if (code.length < 64)\n+        if (code.length < 64) {\n             throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+        }\n \n         int rem = len % 4;\n-        if (rem == 1)\n+        if (rem == 1) {\n             throw new IllegalArgumentException(\"base642bytes: base64 string length % 4 == 1.\");\n+        }\n \n         int num = len / 4, size = num * 3;\n         if (code.length > 64) {\n-            if (rem != 0)\n+            if (rem != 0) {\n                 throw new IllegalArgumentException(\"base642bytes: base64 string length error.\");\n+            }\n \n             char pc = code[64];\n-            if (str.charAt(off + len - 2) == pc)\n+            if (str.charAt(off + len - 2) == pc) {\n                 size -= 2;\n-            else if (str.charAt(off + len - 1) == pc)\n+            } else if (str.charAt(off + len - 1) == pc) {\n                 size--;\n+            }\n         } else {\n-            if (rem == 2)\n+            if (rem == 2) {\n                 size++;\n-            else if (rem == 3)\n+            } else if (rem == 3) {\n                 size += 2;\n+            }\n         }\n \n         int r = off, w = 0;\n@@ -823,30 +852,43 @@ else if (rem == 3)\n     }\n \n     private static byte hex(char c) {\n-        if (c <= '9') return (byte) (c - '0');\n-        if (c >= 'a' && c <= 'f') return (byte) (c - 'a' + 10);\n-        if (c >= 'A' && c <= 'F') return (byte) (c - 'A' + 10);\n+        if (c <= '9') {\n+            return (byte) (c - '0');\n+        }\n+        if (c >= 'a' && c <= 'f') {\n+            return (byte) (c - 'a' + 10);\n+        }\n+        if (c >= 'A' && c <= 'F') {\n+            return (byte) (c - 'A' + 10);\n+        }\n         throw new IllegalArgumentException(\"hex string format error [\" + c + \"].\");\n     }\n \n     private static int indexOf(char[] cs, char c) {\n-        for (int i = 0, len = cs.length; i < len; i++)\n-            if (cs[i] == c) return i;\n+        for (int i = 0, len = cs.length; i < len; i++) {\n+            if (cs[i] == c) {\n+                return i;\n+            }\n+        }\n         return -1;\n     }\n \n     private static byte[] decodeTable(String code) {\n         int hash = code.hashCode();\n         byte[] ret = DECODE_TABLE_MAP.get(hash);\n         if (ret == null) {\n-            if (code.length() < 64)\n+            if (code.length() < 64) {\n                 throw new IllegalArgumentException(\"Base64 code length < 64.\");\n+            }\n             // create new decode table.\n             ret = new byte[128];\n             for (int i = 0; i < 128; i++) // init table.\n+            {\n                 ret[i] = -1;\n-            for (int i = 0; i < 64; i++)\n+            }\n+            for (int i = 0; i < 64; i++) {\n                 ret[code.charAt(i)] = (byte) i;\n+            }\n             DECODE_TABLE_MAP.put(hash, ret);\n         }\n         return ret;\n@@ -858,8 +900,9 @@ private static int indexOf(char[] cs, char c) {\n         while (is.available() > 0) {\n             int read, total = 0;\n             do {\n-                if ((read = is.read(buf, total, bs - total)) <= 0)\n+                if ((read = is.read(buf, total, bs - total)) <= 0) {\n                     break;\n+                }\n                 total += read;\n             }\n             while (total < bs);",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/Bytes.java",
                "sha": "263e7b9f67c808cb9d2695fcfdb8f64472d964fc",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 9,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "patch": "@@ -41,20 +41,25 @@ public int read() throws IOException {\n \n             @Override\n             public int read(byte b[], int off, int len) throws IOException {\n-                if (b == null)\n+                if (b == null) {\n                     throw new NullPointerException();\n+                }\n \n-                if (off < 0 || len < 0 || len > b.length - off)\n+                if (off < 0 || len < 0 || len > b.length - off) {\n                     throw new IndexOutOfBoundsException();\n+                }\n \n-                if (mPosition >= mLimit)\n+                if (mPosition >= mLimit) {\n                     return -1;\n+                }\n \n-                if (mPosition + len > mLimit)\n+                if (mPosition + len > mLimit) {\n                     len = mLimit - mPosition;\n+                }\n \n-                if (len <= 0)\n+                if (len <= 0) {\n                     return 0;\n+                }\n \n                 is.read(b, off, len);\n                 mPosition += len;\n@@ -63,11 +68,13 @@ public int read(byte b[], int off, int len) throws IOException {\n \n             @Override\n             public long skip(long len) throws IOException {\n-                if (mPosition + len > mLimit)\n+                if (mPosition + len > mLimit) {\n                     len = mLimit - mPosition;\n+                }\n \n-                if (len <= 0)\n+                if (len <= 0) {\n                     return 0;\n+                }\n \n                 is.skip(len);\n                 mPosition += len;\n@@ -128,7 +135,9 @@ public int read() throws IOException {\n                     }\n \n                     if (!mInReset) {\n-                        if (mDry) return -1;\n+                        if (mDry) {\n+                            return -1;\n+                        }\n \n                         if (null == mMarkBuffer) {\n                             mMarkBuffer = new byte[markBufferSize];\n@@ -196,7 +205,9 @@ public boolean markSupported() {\n             public int available() throws IOException {\n                 int available = is.available();\n \n-                if (mInMarked && mInReset) available += mCount - mPosition;\n+                if (mInMarked && mInReset) {\n+                    available += mCount - mPosition;\n+                }\n \n                 return available;\n             }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/StreamUtils.java",
                "sha": "0bb950531fee28e5e138626412bd4c37d401e78a",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 7,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java",
                "patch": "@@ -48,27 +48,34 @@ public int read() {\n \n     @Override\n     public int read(byte b[], int off, int len) {\n-        if (b == null)\n+        if (b == null) {\n             throw new NullPointerException();\n-        if (off < 0 || len < 0 || len > b.length - off)\n+        }\n+        if (off < 0 || len < 0 || len > b.length - off) {\n             throw new IndexOutOfBoundsException();\n-        if (mPosition >= mLimit)\n+        }\n+        if (mPosition >= mLimit) {\n             return -1;\n-        if (mPosition + len > mLimit)\n+        }\n+        if (mPosition + len > mLimit) {\n             len = mLimit - mPosition;\n-        if (len <= 0)\n+        }\n+        if (len <= 0) {\n             return 0;\n+        }\n         System.arraycopy(mData, mPosition, b, off, len);\n         mPosition += len;\n         return len;\n     }\n \n     @Override\n     public long skip(long len) {\n-        if (mPosition + len > mLimit)\n+        if (mPosition + len > mLimit) {\n             len = mLimit - mPosition;\n-        if (len <= 0)\n+        }\n+        if (len <= 0) {\n             return 0;\n+        }\n         mPosition += len;\n         return len;\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStream.java",
                "sha": "16bb0d6c479a81664f15eb629a7a35435dea64f4",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 5,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java",
                "patch": "@@ -34,29 +34,34 @@ public UnsafeByteArrayOutputStream() {\n     }\n \n     public UnsafeByteArrayOutputStream(int size) {\n-        if (size < 0)\n+        if (size < 0) {\n             throw new IllegalArgumentException(\"Negative initial size: \" + size);\n+        }\n         mBuffer = new byte[size];\n     }\n \n     @Override\n     public void write(int b) {\n         int newcount = mCount + 1;\n-        if (newcount > mBuffer.length)\n+        if (newcount > mBuffer.length) {\n             mBuffer = Bytes.copyOf(mBuffer, Math.max(mBuffer.length << 1, newcount));\n+        }\n         mBuffer[mCount] = (byte) b;\n         mCount = newcount;\n     }\n \n     @Override\n     public void write(byte b[], int off, int len) {\n-        if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0))\n+        if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0)) {\n             throw new IndexOutOfBoundsException();\n-        if (len == 0)\n+        }\n+        if (len == 0) {\n             return;\n+        }\n         int newcount = mCount + len;\n-        if (newcount > mBuffer.length)\n+        if (newcount > mBuffer.length) {\n             mBuffer = Bytes.copyOf(mBuffer, Math.max(mBuffer.length << 1, newcount));\n+        }\n         System.arraycopy(b, off, mBuffer, mCount, len);\n         mCount = newcount;\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStream.java",
                "sha": "1ac43c893ddd92420e83e78c753437578a6c09eb",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 7,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java",
                "patch": "@@ -36,8 +36,9 @@ public UnsafeStringReader(String str) {\n     @Override\n     public int read() throws IOException {\n         ensureOpen();\n-        if (mPosition >= mLimit)\n+        if (mPosition >= mLimit) {\n             return -1;\n+        }\n \n         return mString.charAt(mPosition++);\n     }\n@@ -46,14 +47,17 @@ public int read() throws IOException {\n     public int read(char[] cs, int off, int len) throws IOException {\n         ensureOpen();\n         if ((off < 0) || (off > cs.length) || (len < 0) ||\n-                ((off + len) > cs.length) || ((off + len) < 0))\n+                ((off + len) > cs.length) || ((off + len) < 0)) {\n             throw new IndexOutOfBoundsException();\n+        }\n \n-        if (len == 0)\n+        if (len == 0) {\n             return 0;\n+        }\n \n-        if (mPosition >= mLimit)\n+        if (mPosition >= mLimit) {\n             return -1;\n+        }\n \n         int n = Math.min(mLimit - mPosition, len);\n         mString.getChars(mPosition, mPosition + n, cs, off);\n@@ -64,8 +68,9 @@ public int read(char[] cs, int off, int len) throws IOException {\n     @Override\n     public long skip(long ns) throws IOException {\n         ensureOpen();\n-        if (mPosition >= mLimit)\n+        if (mPosition >= mLimit) {\n             return 0;\n+        }\n \n         long n = Math.min(mLimit - mPosition, ns);\n         n = Math.max(-mPosition, n);\n@@ -86,8 +91,9 @@ public boolean markSupported() {\n \n     @Override\n     public void mark(int readAheadLimit) throws IOException {\n-        if (readAheadLimit < 0)\n+        if (readAheadLimit < 0) {\n             throw new IllegalArgumentException(\"Read-ahead limit < 0\");\n+        }\n \n         ensureOpen();\n         mMark = mPosition;\n@@ -105,7 +111,8 @@ public void close() throws IOException {\n     }\n \n     private void ensureOpen() throws IOException {\n-        if (mString == null)\n+        if (mString == null) {\n             throw new IOException(\"Stream closed\");\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java",
                "sha": "ad37476bd72ed86f79cc4f9f5684211b548d29cd",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 5,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java",
                "patch": "@@ -30,8 +30,9 @@ public UnsafeStringWriter() {\n     }\n \n     public UnsafeStringWriter(int size) {\n-        if (size < 0)\n+        if (size < 0) {\n             throw new IllegalArgumentException(\"Negative buffer size\");\n+        }\n \n         lock = mBuffer = new StringBuilder();\n     }\n@@ -49,11 +50,13 @@ public void write(char[] cs) throws IOException {\n     @Override\n     public void write(char[] cs, int off, int len) throws IOException {\n         if ((off < 0) || (off > cs.length) || (len < 0) ||\n-                ((off + len) > cs.length) || ((off + len) < 0))\n+                ((off + len) > cs.length) || ((off + len) < 0)) {\n             throw new IndexOutOfBoundsException();\n+        }\n \n-        if (len > 0)\n+        if (len > 0) {\n             mBuffer.append(cs, off, len);\n+        }\n     }\n \n     @Override\n@@ -68,10 +71,11 @@ public void write(String str, int off, int len) {\n \n     @Override\n     public Writer append(CharSequence csq) {\n-        if (csq == null)\n+        if (csq == null) {\n             write(\"null\");\n-        else\n+        } else {\n             write(csq.toString());\n+        }\n         return this;\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringWriter.java",
                "sha": "47e9a3a1aa50ed157f529c755e615e31789f106f",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "changes": 108,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 30,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "patch": "@@ -141,7 +141,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Boolean) return ((Boolean) jv).booleanValue();\n+                if (jv instanceof Boolean) {\n+                    return ((Boolean) jv).booleanValue();\n+                }\n                 return false;\n             }\n         };\n@@ -150,7 +152,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Boolean) return (Boolean) jv;\n+                if (jv instanceof Boolean) {\n+                    return (Boolean) jv;\n+                }\n                 return (Boolean) null;\n             }\n         };\n@@ -159,7 +163,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof String && ((String) jv).length() > 0) return ((String) jv).charAt(0);\n+                if (jv instanceof String && ((String) jv).length() > 0) {\n+                    return ((String) jv).charAt(0);\n+                }\n                 return (char) 0;\n             }\n         };\n@@ -168,7 +174,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof String && ((String) jv).length() > 0) return ((String) jv).charAt(0);\n+                if (jv instanceof String && ((String) jv).length() > 0) {\n+                    return ((String) jv).charAt(0);\n+                }\n                 return (Character) null;\n             }\n         };\n@@ -177,7 +185,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).intValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).intValue();\n+                }\n                 return 0;\n             }\n         };\n@@ -186,7 +196,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return Integer.valueOf(((Number) jv).intValue());\n+                if (jv instanceof Number) {\n+                    return Integer.valueOf(((Number) jv).intValue());\n+                }\n                 return (Integer) null;\n             }\n         };\n@@ -195,7 +207,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).shortValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).shortValue();\n+                }\n                 return (short) 0;\n             }\n         };\n@@ -204,7 +218,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return Short.valueOf(((Number) jv).shortValue());\n+                if (jv instanceof Number) {\n+                    return Short.valueOf(((Number) jv).shortValue());\n+                }\n                 return (Short) null;\n             }\n         };\n@@ -213,7 +229,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).longValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).longValue();\n+                }\n                 return (long) 0;\n             }\n         };\n@@ -222,7 +240,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return Long.valueOf(((Number) jv).longValue());\n+                if (jv instanceof Number) {\n+                    return Long.valueOf(((Number) jv).longValue());\n+                }\n                 return (Long) null;\n             }\n         };\n@@ -231,7 +251,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).floatValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).floatValue();\n+                }\n                 return (float) 0;\n             }\n         };\n@@ -240,7 +262,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return new Float(((Number) jv).floatValue());\n+                if (jv instanceof Number) {\n+                    return new Float(((Number) jv).floatValue());\n+                }\n                 return (Float) null;\n             }\n         };\n@@ -249,7 +273,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).doubleValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).doubleValue();\n+                }\n                 return (double) 0;\n             }\n         };\n@@ -258,7 +284,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return new Double(((Number) jv).doubleValue());\n+                if (jv instanceof Number) {\n+                    return new Double(((Number) jv).doubleValue());\n+                }\n                 return (Double) null;\n             }\n         };\n@@ -267,7 +295,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return ((Number) jv).byteValue();\n+                if (jv instanceof Number) {\n+                    return ((Number) jv).byteValue();\n+                }\n                 return (byte) 0;\n             }\n         };\n@@ -276,7 +306,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) {\n-                if (jv instanceof Number) return Byte.valueOf(((Number) jv).byteValue());\n+                if (jv instanceof Number) {\n+                    return Byte.valueOf(((Number) jv).byteValue());\n+                }\n                 return (Byte) null;\n             }\n         };\n@@ -285,7 +317,9 @@ public Object decode(Object jv) {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof String) return Bytes.base642bytes((String) jv);\n+                if (jv instanceof String) {\n+                    return Bytes.base642bytes((String) jv);\n+                }\n                 return (byte[]) null;\n             }\n         };\n@@ -310,7 +344,9 @@ public Object decode(Object jv) throws IOException {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof Number) return BigInteger.valueOf(((Number) jv).longValue());\n+                if (jv instanceof Number) {\n+                    return BigInteger.valueOf(((Number) jv).longValue());\n+                }\n                 return (BigInteger) null;\n             }\n         };\n@@ -319,7 +355,9 @@ public Object decode(Object jv) throws IOException {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof Number) return BigDecimal.valueOf(((Number) jv).doubleValue());\n+                if (jv instanceof Number) {\n+                    return BigDecimal.valueOf(((Number) jv).doubleValue());\n+                }\n                 return (BigDecimal) null;\n             }\n         };\n@@ -328,7 +366,9 @@ public Object decode(Object jv) throws IOException {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof Number) return new AtomicInteger(((Number) jv).intValue());\n+                if (jv instanceof Number) {\n+                    return new AtomicInteger(((Number) jv).intValue());\n+                }\n                 return (AtomicInteger) null;\n             }\n         };\n@@ -337,7 +377,9 @@ public Object decode(Object jv) throws IOException {\n         d = new Decoder() {\n             @Override\n             public Object decode(Object jv) throws IOException {\n-                if (jv instanceof Number) return new AtomicLong(((Number) jv).longValue());\n+                if (jv instanceof Number) {\n+                    return new AtomicLong(((Number) jv).longValue());\n+                }\n                 return (AtomicLong) null;\n             }\n         };\n@@ -353,8 +395,9 @@ public Object decode(Object jv) throws IOException {\n                         throw new IllegalArgumentException(e.getMessage(), e);\n                     }\n                 }\n-                if (jv instanceof Number)\n+                if (jv instanceof Number) {\n                     return new Date(((Number) jv).longValue());\n+                }\n                 return (Date) null;\n             }\n         };\n@@ -398,32 +441,36 @@ public void writeValue(Object obj, JSONWriter jb, boolean writeClass) throws IOE\n         } else if (c.isArray()) {\n             int len = Array.getLength(obj);\n             jb.arrayBegin();\n-            for (int i = 0; i < len; i++)\n+            for (int i = 0; i < len; i++) {\n                 writeValue(Array.get(obj, i), jb, writeClass);\n+            }\n             jb.arrayEnd();\n         } else if (Map.class.isAssignableFrom(c)) {\n             Object key, value;\n             jb.objectBegin();\n             for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) obj).entrySet()) {\n                 key = entry.getKey();\n-                if (key == null)\n+                if (key == null) {\n                     continue;\n+                }\n                 jb.objectItem(key.toString());\n \n                 value = entry.getValue();\n-                if (value == null)\n+                if (value == null) {\n                     jb.valueNull();\n-                else\n+                } else {\n                     writeValue(value, jb, writeClass);\n+                }\n             }\n             jb.objectEnd();\n         } else if (Collection.class.isAssignableFrom(c)) {\n             jb.arrayBegin();\n             for (Object item : (Collection<Object>) obj) {\n-                if (item == null)\n+                if (item == null) {\n                     jb.valueNull();\n-                else\n+                } else {\n                     writeValue(item, jb, writeClass);\n+                }\n             }\n             jb.arrayEnd();\n         } else if(obj instanceof Locale) {\n@@ -446,10 +493,11 @@ public void writeValue(Object obj, JSONWriter jb, boolean writeClass) throws IOE\n                 jb.objectItem(pn);\n \n                 Object value = w.getPropertyValue(obj, pn);\n-                if (value == null || value == obj)\n+                if (value == null || value == obj) {\n                     jb.valueNull();\n-                else\n+                } else {\n                     writeValue(value, jb, writeClass);\n+                }\n             }\n             if (writeClass) {\n                 jb.objectItem(JSONVisitor.CLASS_PROPERTY);",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/GenericJSONConverter.java",
                "sha": "166c19288e60d21f32b99c635a81522e1b9892c9",
                "status": "modified"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 24,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "patch": "@@ -92,105 +92,131 @@ private static Object toArray(Class<?> c, Stack<Object> list, int len) throws Pa\n             }\r\n         }\r\n         if (c == boolean.class) {\r\n-            if (len == 0) return EMPTY_BOOL_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_BOOL_ARRAY;\r\n+            }\r\n             Object o;\r\n             boolean[] ret = new boolean[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Boolean)\r\n+                if (o instanceof Boolean) {\r\n                     ret[i] = ((Boolean) o).booleanValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == int.class) {\r\n-            if (len == 0) return EMPTY_INT_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_INT_ARRAY;\r\n+            }\r\n             Object o;\r\n             int[] ret = new int[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).intValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == long.class) {\r\n-            if (len == 0) return EMPTY_LONG_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_LONG_ARRAY;\r\n+            }\r\n             Object o;\r\n             long[] ret = new long[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).longValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == float.class) {\r\n-            if (len == 0) return EMPTY_FLOAT_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_FLOAT_ARRAY;\r\n+            }\r\n             Object o;\r\n             float[] ret = new float[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).floatValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == double.class) {\r\n-            if (len == 0) return EMPTY_DOUBLE_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_DOUBLE_ARRAY;\r\n+            }\r\n             Object o;\r\n             double[] ret = new double[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).doubleValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == byte.class) {\r\n-            if (len == 0) return EMPTY_BYTE_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_BYTE_ARRAY;\r\n+            }\r\n             Object o;\r\n             byte[] ret = new byte[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).byteValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == char.class) {\r\n-            if (len == 0) return EMPTY_CHAR_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_CHAR_ARRAY;\r\n+            }\r\n             Object o;\r\n             char[] ret = new char[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Character)\r\n+                if (o instanceof Character) {\r\n                     ret[i] = ((Character) o).charValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n         if (c == short.class) {\r\n-            if (len == 0) return EMPTY_SHORT_ARRAY;\r\n+            if (len == 0) {\r\n+                return EMPTY_SHORT_ARRAY;\r\n+            }\r\n             Object o;\r\n             short[] ret = new short[len];\r\n             for (int i = len - 1; i >= 0; i--) {\r\n                 o = list.pop();\r\n-                if (o instanceof Number)\r\n+                if (o instanceof Number) {\r\n                     ret[i] = ((Number) o).shortValue();\r\n+                }\r\n             }\r\n             return ret;\r\n         }\r\n \r\n         Object ret = Array.newInstance(c, len);\r\n-        for (int i = len - 1; i >= 0; i--)\r\n+        for (int i = len - 1; i >= 0; i--) {\r\n             Array.set(ret, i, list.pop());\r\n+        }\r\n         return ret;\r\n     }\r\n \r\n     private static String name(Class<?>[] types) {\r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < types.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 sb.append(\", \");\r\n+            }\r\n             sb.append(types[i].getName());\r\n         }\r\n         return sb.toString();\r\n@@ -294,12 +320,13 @@ public void objectItemValue(Object obj, boolean isValue) throws ParseException {\n     public void arrayBegin() throws ParseException {\r\n         mStack.push(mType);\r\n \r\n-        if (mType.isArray())\r\n+        if (mType.isArray()) {\r\n             mType = mType.getComponentType();\r\n-        else if (mType == Object.class || Collection.class.isAssignableFrom(mType))\r\n+        } else if (mType == Object.class || Collection.class.isAssignableFrom(mType)) {\r\n             mType = Object.class;\r\n-        else\r\n+        } else {\r\n             throw new ParseException(\"Convert error, can not load json array data into class [\" + mType.getName() + \"].\");\r\n+        }\r\n     }\r\n \r\n     @Override\r\n@@ -331,8 +358,9 @@ public Object arrayEnd(int count) throws ParseException {\n             } else {\r\n                 throw new ParseException(\"Convert error, can not load json array data into class [\" + mType.getName() + \"].\");\r\n             }\r\n-            for (int i = 0; i < count; i++)\r\n+            for (int i = 0; i < count; i++) {\r\n                 items.add(mStack.remove(i - count));\r\n+            }\r\n             ret = items;\r\n         }\r\n         mStack.pop();\r\n@@ -342,10 +370,11 @@ public Object arrayEnd(int count) throws ParseException {\n     @Override\r\n     public void arrayItem(int index) throws ParseException {\r\n         if (mTypes != null && mStack.size() == index + 1) {\r\n-            if (index < mTypes.length)\r\n+            if (index < mTypes.length) {\r\n                 mType = mTypes[index];\r\n-            else\r\n+            } else {\r\n                 throw new ParseException(\"Can not load json array data into [\" + name(mTypes) + \"].\");\r\n+            }\r\n         }\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/J2oVisitor.java",
                "sha": "fdcf674c5904714729db66c2b50a0cac8654d340",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 10,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
                "patch": "@@ -52,7 +52,9 @@ private JSON() {\n      * @throws IOException\r\n      */\r\n     public static String json(Object obj) throws IOException {\r\n-        if (obj == null) return NULL;\r\n+        if (obj == null) {\r\n+            return NULL;\r\n+        }\r\n         StringWriter sw = new StringWriter();\r\n         try {\r\n             json(obj, sw);\r\n@@ -74,10 +76,11 @@ public static void json(Object obj, Writer writer) throws IOException {\n     }\r\n \r\n     public static void json(Object obj, Writer writer, boolean writeClass) throws IOException {\r\n-        if (obj == null)\r\n+        if (obj == null) {\r\n             writer.write(NULL);\r\n-        else\r\n+        } else {\r\n             json(obj, new JSONWriter(writer), writeClass);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -89,7 +92,9 @@ public static void json(Object obj, Writer writer, boolean writeClass) throws IO\n      * @throws IOException\r\n      */\r\n     public static String json(Object obj, String[] properties) throws IOException {\r\n-        if (obj == null) return NULL;\r\n+        if (obj == null) {\r\n+            return NULL;\r\n+        }\r\n         StringWriter sw = new StringWriter();\r\n         try {\r\n             json(obj, properties, sw);\r\n@@ -112,17 +117,19 @@ public static void json(Object obj, final String[] properties, Writer writer) th\n      * @throws IOException\r\n      */\r\n     public static void json(Object obj, final String[] properties, Writer writer, boolean writeClass) throws IOException {\r\n-        if (obj == null)\r\n+        if (obj == null) {\r\n             writer.write(NULL);\r\n-        else\r\n+        } else {\r\n             json(obj, properties, new JSONWriter(writer), writeClass);\r\n+        }\r\n     }\r\n \r\n     private static void json(Object obj, JSONWriter jb, boolean writeClass) throws IOException {\r\n-        if (obj == null)\r\n+        if (obj == null) {\r\n             jb.valueNull();\r\n-        else\r\n+        } else {\r\n             DEFAULT_CONVERTER.writeValue(obj, jb, writeClass);\r\n+        }\r\n     }\r\n \r\n     private static void json(Object obj, String[] properties, JSONWriter jb, boolean writeClass) throws IOException {\r\n@@ -136,10 +143,11 @@ private static void json(Object obj, String[] properties, JSONWriter jb, boolean\n             for (String prop : properties) {\r\n                 jb.objectItem(prop);\r\n                 value = wrapper.getPropertyValue(obj, prop);\r\n-                if (value == null)\r\n+                if (value == null) {\r\n                     jb.valueNull();\r\n-                else\r\n+                } else {\r\n                     DEFAULT_CONVERTER.writeValue(value, jb, writeClass);\r\n+                }\r\n             }\r\n             jb.objectEnd();\r\n         }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
                "sha": "1d3aa8891d255ed1bb6b01d87949e137c6467fcf",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONArray.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONArray.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 3,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONArray.java",
                "patch": "@@ -151,8 +151,9 @@ public void add(Object ele) {\n      * add items.\r\n      */\r\n     public void addAll(Object[] eles) {\r\n-        for (Object ele : eles)\r\n+        for (Object ele : eles) {\r\n             mArray.add(ele);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -172,10 +173,11 @@ public void addAll(Collection<?> c) {\n     public void writeJSON(JSONConverter jc, JSONWriter jb, boolean writeClass) throws IOException {\r\n         jb.arrayBegin();\r\n         for (Object item : mArray) {\r\n-            if (item == null)\r\n+            if (item == null) {\r\n                 jb.valueNull();\r\n-            else\r\n+            } else {\r\n                 jc.writeValue(item, jb, writeClass);\r\n+            }\r\n         }\r\n         jb.arrayEnd();\r\n     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONArray.java",
                "sha": "f5e039c3be88d44b841e8c408b596368e3d83344",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONObject.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONObject.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 4,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONObject.java",
                "patch": "@@ -167,8 +167,9 @@ public void put(String name, Object value) {\n      * @param values value array.\r\n      */\r\n     public void putAll(String[] names, Object[] values) {\r\n-        for (int i = 0, len = Math.min(names.length, values.length); i < len; i++)\r\n+        for (int i = 0, len = Math.min(names.length, values.length); i < len; i++) {\r\n             mMap.put(names[i], values[i]);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -177,8 +178,9 @@ public void putAll(String[] names, Object[] values) {\n      * @param map map.\r\n      */\r\n     public void putAll(Map<String, Object> map) {\r\n-        for (Map.Entry<String, Object> entry : map.entrySet())\r\n+        for (Map.Entry<String, Object> entry : map.entrySet()) {\r\n             mMap.put(entry.getKey(), entry.getValue());\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -196,10 +198,11 @@ public void writeJSON(JSONConverter jc, JSONWriter jb, boolean writeClass) throw\n             key = entry.getKey();\r\n             jb.objectItem(key);\r\n             value = entry.getValue();\r\n-            if (value == null)\r\n+            if (value == null) {\r\n                 jb.valueNull();\r\n-            else\r\n+            } else {\r\n                 jc.writeValue(value, jb, writeClass);\r\n+            }\r\n         }\r\n         jb.objectEnd();\r\n     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONObject.java",
                "sha": "052f35269dde74d811115532ff259baf7b7ad37d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 2,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java",
                "patch": "@@ -57,10 +57,12 @@ public JSONToken nextToken() throws IOException, ParseException {\n \n     public JSONToken nextToken(int expect) throws IOException, ParseException {\n         JSONToken ret = mLex.yylex();\n-        if (ret == null)\n+        if (ret == null) {\n             throw new ParseException(\"EOF error.\");\n-        if (expect != JSONToken.ANY && expect != ret.type)\n+        }\n+        if (expect != JSONToken.ANY && expect != ret.type) {\n             throw new ParseException(\"Unexpected token.\");\n+        }\n         return ret;\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONReader.java",
                "sha": "616a15f5972dff766f06de39cb33be31c16ddee3",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 5,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "patch": "@@ -53,11 +53,13 @@ public JSONWriter(OutputStream is, String charset) throws UnsupportedEncodingExc\n     }\r\n \r\n     private static String escape(String str) {\r\n-        if (str == null)\r\n+        if (str == null) {\r\n             return str;\r\n+        }\r\n         int len = str.length();\r\n-        if (len == 0)\r\n+        if (len == 0) {\r\n             return str;\r\n+        }\r\n \r\n         char c;\r\n         StringBuilder sb = null;\r\n@@ -82,8 +84,9 @@ private static String escape(String str) {\n                         sb.append('\\\\').append(c);\r\n                         break;\r\n                     default:\r\n-                        if (sb != null)\r\n+                        if (sb != null) {\r\n                             sb.append(c);\r\n+                        }\r\n                 }\r\n             }\r\n         }\r\n@@ -263,8 +266,9 @@ public JSONWriter valueDouble(double value) throws IOException {\n     private void beforeValue() throws IOException {\r\n         switch (mState.type) {\r\n             case ARRAY:\r\n-                if (mState.itemCount++ > 0)\r\n+                if (mState.itemCount++ > 0) {\r\n                     mWriter.write(JSON.COMMA);\r\n+                }\r\n                 return;\r\n             case OBJECT:\r\n                 throw new IOException(\"Must call objectItem first.\");\r\n@@ -280,8 +284,9 @@ private void beforeObjectItem() throws IOException {\n                 mWriter.write(JSON.NULL);\r\n             case OBJECT:\r\n                 mState.type = OBJECT_VALUE;\r\n-                if (mState.itemCount++ > 0)\r\n+                if (mState.itemCount++ > 0) {\r\n                     mWriter.write(JSON.COMMA);\r\n+                }\r\n                 return;\r\n             default:\r\n                 throw new IOException(\"Must call objectBegin first.\");\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "sha": "094832134c08f18b8a87d084ff85dd071291de1a",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 9,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "patch": "@@ -340,7 +340,9 @@ private static int zzUnpackAction(String packed, int offset, int[] result) {\n         while (i < l) {\n             int count = packed.charAt(i++);\n             int value = packed.charAt(i++);\n-            do result[j++] = value; while (--count > 0);\n+            do {\n+                result[j++] = value;\n+            } while (--count > 0);\n         }\n         return j;\n     }\n@@ -393,7 +395,9 @@ private static int zzUnpackAttribute(String packed, int offset, int[] result) {\n         while (i < l) {\n             int count = packed.charAt(i++);\n             int value = packed.charAt(i++);\n-            do result[j++] = value; while (--count > 0);\n+            do {\n+                result[j++] = value;\n+            } while (--count > 0);\n         }\n         return j;\n     }\n@@ -411,7 +415,9 @@ private static int zzUnpackAttribute(String packed, int offset, int[] result) {\n         while (i < 122) {\n             int count = packed.charAt(i++);\n             char value = packed.charAt(i++);\n-            do map[j++] = value; while (--count > 0);\n+            do {\n+                map[j++] = value;\n+            } while (--count > 0);\n         }\n         return map;\n     }\n@@ -477,8 +483,9 @@ public final void yyclose() throws java.io.IOException {\n         zzAtEOF = true;            /* indicate end of file */\n         zzEndRead = zzStartRead;  /* invalidate buffer    */\n \n-        if (zzReader != null)\n+        if (zzReader != null) {\n             zzReader.close();\n+        }\n     }\n \n \n@@ -588,8 +595,9 @@ private void zzScanError(int errorCode) {\n      *               This number must not be greater than yylength()!\n      */\n     public void yypushback(int number) {\n-        if (number > yylength())\n+        if (number > yylength()) {\n             zzScanError(ZZ_PUSHBACK_2BIG);\n+        }\n \n         zzMarkedPos -= number;\n     }\n@@ -631,9 +639,9 @@ public JSONToken yylex() throws java.io.IOException, ParseException {\n             {\n                 while (true) {\n \n-                    if (zzCurrentPosL < zzEndReadL)\n+                    if (zzCurrentPosL < zzEndReadL) {\n                         zzInput = zzBufferL[zzCurrentPosL++];\n-                    else if (zzAtEOF) {\n+                    } else if (zzAtEOF) {\n                         zzInput = YYEOF;\n                         break zzForAction;\n                     } else {\n@@ -654,14 +662,18 @@ else if (zzAtEOF) {\n                         }\n                     }\n                     int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];\n-                    if (zzNext == -1) break zzForAction;\n+                    if (zzNext == -1) {\n+                        break zzForAction;\n+                    }\n                     zzState = zzNext;\n \n                     int zzAttributes = zzAttrL[zzState];\n                     if ((zzAttributes & 1) == 1) {\n                         zzAction = zzState;\n                         zzMarkedPosL = zzCurrentPosL;\n-                        if ((zzAttributes & 8) == 8) break zzForAction;\n+                        if ((zzAttributes & 8) == 8) {\n+                            break zzForAction;\n+                        }\n                     }\n \n                 }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "sha": "8abb42d1ab2a263c53a750d26778b69be5d7f053",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 12,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "patch": "@@ -61,35 +61,47 @@ public JdkLoggerAdapter() {\n     }\n \n     private static java.util.logging.Level toJdkLevel(Level level) {\n-        if (level == Level.ALL)\n+        if (level == Level.ALL) {\n             return java.util.logging.Level.ALL;\n-        if (level == Level.TRACE)\n+        }\n+        if (level == Level.TRACE) {\n             return java.util.logging.Level.FINER;\n-        if (level == Level.DEBUG)\n+        }\n+        if (level == Level.DEBUG) {\n             return java.util.logging.Level.FINE;\n-        if (level == Level.INFO)\n+        }\n+        if (level == Level.INFO) {\n             return java.util.logging.Level.INFO;\n-        if (level == Level.WARN)\n+        }\n+        if (level == Level.WARN) {\n             return java.util.logging.Level.WARNING;\n-        if (level == Level.ERROR)\n+        }\n+        if (level == Level.ERROR) {\n             return java.util.logging.Level.SEVERE;\n+        }\n         // if (level == Level.OFF)\n         return java.util.logging.Level.OFF;\n     }\n \n     private static Level fromJdkLevel(java.util.logging.Level level) {\n-        if (level == java.util.logging.Level.ALL)\n+        if (level == java.util.logging.Level.ALL) {\n             return Level.ALL;\n-        if (level == java.util.logging.Level.FINER)\n+        }\n+        if (level == java.util.logging.Level.FINER) {\n             return Level.TRACE;\n-        if (level == java.util.logging.Level.FINE)\n+        }\n+        if (level == java.util.logging.Level.FINE) {\n             return Level.DEBUG;\n-        if (level == java.util.logging.Level.INFO)\n+        }\n+        if (level == java.util.logging.Level.INFO) {\n             return Level.INFO;\n-        if (level == java.util.logging.Level.WARNING)\n+        }\n+        if (level == java.util.logging.Level.WARNING) {\n             return Level.WARN;\n-        if (level == java.util.logging.Level.SEVERE)\n+        }\n+        if (level == java.util.logging.Level.SEVERE) {\n             return Level.ERROR;\n+        }\n         // if (level == java.util.logging.Level.OFF)\n         return Level.OFF;\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/logger/jdk/JdkLoggerAdapter.java",
                "sha": "19041304b1164baacd20427a3b6f226e04f3eccd",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLoggerAdapter.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLoggerAdapter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 12,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLoggerAdapter.java",
                "patch": "@@ -54,35 +54,47 @@ public Log4jLoggerAdapter() {\n     }\n \n     private static org.apache.log4j.Level toLog4jLevel(Level level) {\n-        if (level == Level.ALL)\n+        if (level == Level.ALL) {\n             return org.apache.log4j.Level.ALL;\n-        if (level == Level.TRACE)\n+        }\n+        if (level == Level.TRACE) {\n             return org.apache.log4j.Level.TRACE;\n-        if (level == Level.DEBUG)\n+        }\n+        if (level == Level.DEBUG) {\n             return org.apache.log4j.Level.DEBUG;\n-        if (level == Level.INFO)\n+        }\n+        if (level == Level.INFO) {\n             return org.apache.log4j.Level.INFO;\n-        if (level == Level.WARN)\n+        }\n+        if (level == Level.WARN) {\n             return org.apache.log4j.Level.WARN;\n-        if (level == Level.ERROR)\n+        }\n+        if (level == Level.ERROR) {\n             return org.apache.log4j.Level.ERROR;\n+        }\n         // if (level == Level.OFF)\n         return org.apache.log4j.Level.OFF;\n     }\n \n     private static Level fromLog4jLevel(org.apache.log4j.Level level) {\n-        if (level == org.apache.log4j.Level.ALL)\n+        if (level == org.apache.log4j.Level.ALL) {\n             return Level.ALL;\n-        if (level == org.apache.log4j.Level.TRACE)\n+        }\n+        if (level == org.apache.log4j.Level.TRACE) {\n             return Level.TRACE;\n-        if (level == org.apache.log4j.Level.DEBUG)\n+        }\n+        if (level == org.apache.log4j.Level.DEBUG) {\n             return Level.DEBUG;\n-        if (level == org.apache.log4j.Level.INFO)\n+        }\n+        if (level == org.apache.log4j.Level.INFO) {\n             return Level.INFO;\n-        if (level == org.apache.log4j.Level.WARN)\n+        }\n+        if (level == org.apache.log4j.Level.WARN) {\n             return Level.WARN;\n-        if (level == org.apache.log4j.Level.ERROR)\n+        }\n+        if (level == org.apache.log4j.Level.ERROR) {\n             return Level.ERROR;\n+        }\n         // if (level == org.apache.log4j.Level.OFF)\n         return Level.OFF;\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/logger/log4j/Log4jLoggerAdapter.java",
                "sha": "5febaf2501d59f599b9f95306dc880958070d7fd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java",
                "patch": "@@ -33,7 +33,9 @@\n     @Override\n     public Map<String, Object> get(String componentName) {\n         ConcurrentMap<String, Object> value = data.get(componentName);\n-        if (value == null) return new HashMap<String, Object>();\n+        if (value == null) {\n+            return new HashMap<String, Object>();\n+        }\n \n         return new HashMap<String, Object>(value);\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/store/support/SimpleDataStore.java",
                "sha": "d60cc5d131650a0442b0c1b6f0fa15c6db2340f4",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 2,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java",
                "patch": "@@ -142,8 +142,12 @@ public int hashCode() {\n \r\n     @Override\r\n     public boolean equals(Object obj) {\r\n-        if (this == obj) return true;\r\n-        if (!(obj instanceof AtomicPositiveInteger)) return false;\r\n+        if (this == obj) {\r\n+            return true;\r\n+        }\r\n+        if (!(obj instanceof AtomicPositiveInteger)) {\r\n+            return false;\r\n+        }\r\n         AtomicPositiveInteger other = (AtomicPositiveInteger) obj;\r\n         return intValue() == other.intValue();\r\n     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/AtomicPositiveInteger.java",
                "sha": "4a13c6c4acd5c733c8303fea4e744bde182d9d0d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
                "patch": "@@ -187,7 +187,9 @@ private static boolean objectEquals(Object obj1, Object obj2) {\n     @SuppressWarnings(\"unchecked\")\r\n     public static <K, V> Map<K, V> toMap(Object... pairs) {\r\n         Map<K, V> ret = new HashMap<K, V>();\r\n-        if (pairs == null || pairs.length == 0) return ret;\r\n+        if (pairs == null || pairs.length == 0) {\r\n+            return ret;\r\n+        }\r\n \r\n         if (pairs.length % 2 != 0) {\r\n             throw new IllegalArgumentException(\"Map pairs can not be odd number.\");\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
                "sha": "cd5414b704e4f1d1a775cf3e5ecfcf7290fec456",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 5,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "patch": "@@ -147,8 +147,9 @@ public static long write(Reader reader, Writer writer, int bufferSize) throws IO\n      * @throws IOException\r\n      */\r\n     public static String[] readLines(File file) throws IOException {\r\n-        if (file == null || !file.exists() || !file.canRead())\r\n+        if (file == null || !file.exists() || !file.canRead()) {\r\n             return new String[0];\r\n+        }\r\n \r\n         return readLines(new FileInputStream(file));\r\n     }\r\n@@ -165,8 +166,9 @@ public static long write(Reader reader, Writer writer, int bufferSize) throws IO\n         BufferedReader reader = new BufferedReader(new InputStreamReader(is));\r\n         try {\r\n             String line;\r\n-            while ((line = reader.readLine()) != null)\r\n+            while ((line = reader.readLine()) != null) {\r\n                 lines.add(line);\r\n+            }\r\n             return lines.toArray(new String[0]);\r\n         } finally {\r\n             reader.close();\r\n@@ -183,8 +185,9 @@ public static long write(Reader reader, Writer writer, int bufferSize) throws IO\n     public static void writeLines(OutputStream os, String[] lines) throws IOException {\r\n         PrintWriter writer = new PrintWriter(new OutputStreamWriter(os));\r\n         try {\r\n-            for (String line : lines)\r\n+            for (String line : lines) {\r\n                 writer.println(line);\r\n+            }\r\n             writer.flush();\r\n         } finally {\r\n             writer.close();\r\n@@ -199,8 +202,9 @@ public static void writeLines(OutputStream os, String[] lines) throws IOExceptio\n      * @throws IOException\r\n      */\r\n     public static void writeLines(File file, String[] lines) throws IOException {\r\n-        if (file == null)\r\n+        if (file == null) {\r\n             throw new IOException(\"File is null.\");\r\n+        }\r\n         writeLines(new FileOutputStream(file), lines);\r\n     }\r\n \r\n@@ -212,8 +216,9 @@ public static void writeLines(File file, String[] lines) throws IOException {\n      * @throws IOException\r\n      */\r\n     public static void appendLines(File file, String[] lines) throws IOException {\r\n-        if (file == null)\r\n+        if (file == null) {\r\n             throw new IOException(\"File is null.\");\r\n+        }\r\n         writeLines(new FileOutputStream(file, true), lines);\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/IOUtils.java",
                "sha": "14d5b81ea3cdbe29a2cf29cea78a044a55531f0d",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 11,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java",
                "patch": "@@ -72,22 +72,44 @@ public int hashCode() {\n \r\n     @Override\r\n     public boolean equals(Object obj) {\r\n-        if (this == obj) return true;\r\n-        if (obj == null) return false;\r\n-        if (getClass() != obj.getClass()) return false;\r\n+        if (this == obj) {\r\n+            return true;\r\n+        }\r\n+        if (obj == null) {\r\n+            return false;\r\n+        }\r\n+        if (getClass() != obj.getClass()) {\r\n+            return false;\r\n+        }\r\n         Log other = (Log) obj;\r\n         if (logLevel == null) {\r\n-            if (other.logLevel != null) return false;\r\n-        } else if (!logLevel.equals(other.logLevel)) return false;\r\n+            if (other.logLevel != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!logLevel.equals(other.logLevel)) {\r\n+            return false;\r\n+        }\r\n         if (logMessage == null) {\r\n-            if (other.logMessage != null) return false;\r\n-        } else if (!logMessage.equals(other.logMessage)) return false;\r\n+            if (other.logMessage != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!logMessage.equals(other.logMessage)) {\r\n+            return false;\r\n+        }\r\n         if (logName == null) {\r\n-            if (other.logName != null) return false;\r\n-        } else if (!logName.equals(other.logName)) return false;\r\n+            if (other.logName != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!logName.equals(other.logName)) {\r\n+            return false;\r\n+        }\r\n         if (logThread == null) {\r\n-            if (other.logThread != null) return false;\r\n-        } else if (!logThread.equals(other.logThread)) return false;\r\n+            if (other.logThread != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!logThread.equals(other.logThread)) {\r\n+            return false;\r\n+        }\r\n         return true;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Log.java",
                "sha": "974058ffb1e7f4d543f4b591d07b032c5aa00f41",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 6,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java",
                "patch": "@@ -50,7 +50,9 @@ public static int findName(String expectedLogName) {\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             String logName = logList.get(i).getLogName();\r\n-            if (logName.contains(expectedLogName)) count++;\r\n+            if (logName.contains(expectedLogName)) {\r\n+                count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -60,7 +62,9 @@ public static int findLevel(Level expectedLevel) {\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             Level logLevel = logList.get(i).getLogLevel();\r\n-            if (logLevel.equals(expectedLevel)) count++;\r\n+            if (logLevel.equals(expectedLevel)) {\r\n+                count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -70,8 +74,9 @@ public static int findLevelWithThreadName(Level expectedLevel, String threadName\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             Log log = logList.get(i);\r\n-            if (log.getLogLevel().equals(expectedLevel) && log.getLogThread().equals(threadName))\r\n+            if (log.getLogLevel().equals(expectedLevel) && log.getLogThread().equals(threadName)) {\r\n                 count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -81,7 +86,9 @@ public static int findThread(String expectedThread) {\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             String logThread = logList.get(i).getLogThread();\r\n-            if (logThread.contains(expectedThread)) count++;\r\n+            if (logThread.contains(expectedThread)) {\r\n+                count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -91,7 +98,9 @@ public static int findMessage(String expectedMessage) {\n         List<Log> logList = DubboAppender.logList;\r\n         for (int i = 0; i < logList.size(); i++) {\r\n             String logMessage = logList.get(i).getLogMessage();\r\n-            if (logMessage.contains(expectedMessage)) count++;\r\n+            if (logMessage.contains(expectedMessage)) {\r\n+                count++;\r\n+            }\r\n         }\r\n         return count;\r\n     }\r\n@@ -103,7 +112,9 @@ public static int findMessage(Level expectedLevel, String expectedMessage) {\n             Level logLevel = logList.get(i).getLogLevel();\r\n             if (logLevel.equals(expectedLevel)) {\r\n                 String logMessage = logList.get(i).getLogMessage();\r\n-                if (logMessage.contains(expectedMessage)) count++;\r\n+                if (logMessage.contains(expectedMessage)) {\r\n+                    count++;\r\n+                }\r\n             }\r\n         }\r\n         return count;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/LogUtil.java",
                "sha": "6b5eff58c2d398c266df74d932f01a0c1ec733c9",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 3,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "patch": "@@ -134,8 +134,9 @@ public static InetSocketAddress getLocalSocketAddress(String host, int port) {\n     }\r\n \r\n     static boolean isValidAddress(InetAddress address) {\r\n-        if (address == null || address.isLoopbackAddress())\r\n+        if (address == null || address.isLoopbackAddress()) {\r\n             return false;\r\n+        }\r\n         String name = address.getHostAddress();\r\n         return (name != null\r\n                 && !ANYHOST.equals(name)\r\n@@ -221,8 +222,9 @@ public static String filterLocalHost(String host) {\n      * @return first valid local IP\r\n      */\r\n     public static InetAddress getLocalAddress() {\r\n-        if (LOCAL_ADDRESS != null)\r\n+        if (LOCAL_ADDRESS != null) {\r\n             return LOCAL_ADDRESS;\r\n+        }\r\n         InetAddress localAddress = getLocalAddress0();\r\n         LOCAL_ADDRESS = localAddress;\r\n         return localAddress;\r\n@@ -333,8 +335,9 @@ public static String toURL(String protocol, String host, int port, String path)\n         StringBuilder sb = new StringBuilder();\r\n         sb.append(protocol).append(\"://\");\r\n         sb.append(host).append(':').append(port);\r\n-        if (path.charAt(0) != '/')\r\n+        if (path.charAt(0) != '/') {\r\n             sb.append('/');\r\n+        }\r\n         sb.append(path);\r\n         return sb.toString();\r\n     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "sha": "29d79a30f0fbf1522bdf705a97f60a9e8f4cfd5c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 2,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "patch": "@@ -82,8 +82,9 @@\n     }\r\n \r\n     public static Object[] realize(Object[] objs, Class<?>[] types, Type[] gtypes) {\r\n-        if (objs.length != types.length || objs.length != gtypes.length)\r\n+        if (objs.length != types.length || objs.length != gtypes.length) {\r\n             throw new IllegalArgumentException(\"args.length != types.length\");\r\n+        }\r\n         Object[] dests = new Object[objs.length];\r\n         for (int i = 0; i < objs.length; i++) {\r\n             dests[i] = realize(objs[i], types[i], gtypes[i]);\r\n@@ -448,8 +449,9 @@ private static Object realize0(Object pojo, Class<?> type, Type genericType, fin\n                             Method method = getSetterMethod(dest.getClass(), name, value.getClass());\r\n                             Field field = getField(dest.getClass(), name);\r\n                             if (method != null) {\r\n-                                if (!method.isAccessible())\r\n+                                if (!method.isAccessible()) {\r\n                                     method.setAccessible(true);\r\n+                                }\r\n                                 Type ptype = method.getGenericParameterTypes()[0];\r\n                                 value = realize0(value, method.getParameterTypes()[0], ptype, history);\r\n                                 try {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "sha": "9c3f774ab387dddaf80ab56f710a9d567e7754c3",
                "status": "modified"
            },
            {
                "additions": 167,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java",
                "changes": 250,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 83,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java",
                "patch": "@@ -138,22 +138,23 @@ public static boolean isPrimitive(Class<?> cls) {\n     }\r\n \r\n     public static Class<?> getBoxedClass(Class<?> c) {\r\n-        if (c == int.class)\r\n+        if (c == int.class) {\r\n             c = Integer.class;\r\n-        else if (c == boolean.class)\r\n+        } else if (c == boolean.class) {\r\n             c = Boolean.class;\r\n-        else if (c == long.class)\r\n+        } else if (c == long.class) {\r\n             c = Long.class;\r\n-        else if (c == float.class)\r\n+        } else if (c == float.class) {\r\n             c = Float.class;\r\n-        else if (c == double.class)\r\n+        } else if (c == double.class) {\r\n             c = Double.class;\r\n-        else if (c == char.class)\r\n+        } else if (c == char.class) {\r\n             c = Character.class;\r\n-        else if (c == byte.class)\r\n+        } else if (c == byte.class) {\r\n             c = Byte.class;\r\n-        else if (c == short.class)\r\n+        } else if (c == short.class) {\r\n             c = Short.class;\r\n+        }\r\n         return c;\r\n     }\r\n \r\n@@ -186,25 +187,36 @@ public static boolean isCompatible(Class<?> c, Object o) {\n      */\r\n     public static boolean isCompatible(Class<?>[] cs, Object[] os) {\r\n         int len = cs.length;\r\n-        if (len != os.length) return false;\r\n-        if (len == 0) return true;\r\n-        for (int i = 0; i < len; i++)\r\n-            if (!isCompatible(cs[i], os[i])) return false;\r\n+        if (len != os.length) {\r\n+            return false;\r\n+        }\r\n+        if (len == 0) {\r\n+            return true;\r\n+        }\r\n+        for (int i = 0; i < len; i++) {\r\n+            if (!isCompatible(cs[i], os[i])) {\r\n+                return false;\r\n+            }\r\n+        }\r\n         return true;\r\n     }\r\n \r\n     public static String getCodeBase(Class<?> cls) {\r\n-        if (cls == null)\r\n+        if (cls == null) {\r\n             return null;\r\n+        }\r\n         ProtectionDomain domain = cls.getProtectionDomain();\r\n-        if (domain == null)\r\n+        if (domain == null) {\r\n             return null;\r\n+        }\r\n         CodeSource source = domain.getCodeSource();\r\n-        if (source == null)\r\n+        if (source == null) {\r\n             return null;\r\n+        }\r\n         URL location = source.getLocation();\r\n-        if (location == null)\r\n+        if (location == null) {\r\n             return null;\r\n+        }\r\n         return location.getFile();\r\n     }\r\n \r\n@@ -266,8 +278,9 @@ public static String getName(final Method m) {\n         ret.append(m.getName()).append('(');\r\n         Class<?>[] parameterTypes = m.getParameterTypes();\r\n         for (int i = 0; i < parameterTypes.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 ret.append(',');\r\n+            }\r\n             ret.append(getName(parameterTypes[i]));\r\n         }\r\n         ret.append(')');\r\n@@ -303,8 +316,9 @@ public static String getName(final Constructor<?> c) {\n         StringBuilder ret = new StringBuilder(\"(\");\r\n         Class<?>[] parameterTypes = c.getParameterTypes();\r\n         for (int i = 0; i < parameterTypes.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 ret.append(',');\r\n+            }\r\n             ret.append(getName(parameterTypes[i]));\r\n         }\r\n         ret.append(')');\r\n@@ -330,15 +344,25 @@ public static String getDesc(Class<?> c) {\n \r\n         if (c.isPrimitive()) {\r\n             String t = c.getName();\r\n-            if (\"void\".equals(t)) ret.append(JVM_VOID);\r\n-            else if (\"boolean\".equals(t)) ret.append(JVM_BOOLEAN);\r\n-            else if (\"byte\".equals(t)) ret.append(JVM_BYTE);\r\n-            else if (\"char\".equals(t)) ret.append(JVM_CHAR);\r\n-            else if (\"double\".equals(t)) ret.append(JVM_DOUBLE);\r\n-            else if (\"float\".equals(t)) ret.append(JVM_FLOAT);\r\n-            else if (\"int\".equals(t)) ret.append(JVM_INT);\r\n-            else if (\"long\".equals(t)) ret.append(JVM_LONG);\r\n-            else if (\"short\".equals(t)) ret.append(JVM_SHORT);\r\n+            if (\"void\".equals(t)) {\r\n+                ret.append(JVM_VOID);\r\n+            } else if (\"boolean\".equals(t)) {\r\n+                ret.append(JVM_BOOLEAN);\r\n+            } else if (\"byte\".equals(t)) {\r\n+                ret.append(JVM_BYTE);\r\n+            } else if (\"char\".equals(t)) {\r\n+                ret.append(JVM_CHAR);\r\n+            } else if (\"double\".equals(t)) {\r\n+                ret.append(JVM_DOUBLE);\r\n+            } else if (\"float\".equals(t)) {\r\n+                ret.append(JVM_FLOAT);\r\n+            } else if (\"int\".equals(t)) {\r\n+                ret.append(JVM_INT);\r\n+            } else if (\"long\".equals(t)) {\r\n+                ret.append(JVM_LONG);\r\n+            } else if (\"short\".equals(t)) {\r\n+                ret.append(JVM_SHORT);\r\n+            }\r\n         } else {\r\n             ret.append('L');\r\n             ret.append(c.getName().replace('.', '/'));\r\n@@ -356,12 +380,14 @@ public static String getDesc(Class<?> c) {\n      * @throws NotFoundException\r\n      */\r\n     public static String getDesc(final Class<?>[] cs) {\r\n-        if (cs.length == 0)\r\n+        if (cs.length == 0) {\r\n             return \"\";\r\n+        }\r\n \r\n         StringBuilder sb = new StringBuilder(64);\r\n-        for (Class<?> c : cs)\r\n+        for (Class<?> c : cs) {\r\n             sb.append(getDesc(c));\r\n+        }\r\n         return sb.toString();\r\n     }\r\n \r\n@@ -376,8 +402,9 @@ public static String getDesc(final Class<?>[] cs) {\n     public static String getDesc(final Method m) {\r\n         StringBuilder ret = new StringBuilder(m.getName()).append('(');\r\n         Class<?>[] parameterTypes = m.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append(getDesc(m.getReturnType()));\r\n         return ret.toString();\r\n     }\r\n@@ -392,8 +419,9 @@ public static String getDesc(final Method m) {\n     public static String getDesc(final Constructor<?> c) {\r\n         StringBuilder ret = new StringBuilder(\"(\");\r\n         Class<?>[] parameterTypes = c.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append('V');\r\n         return ret.toString();\r\n     }\r\n@@ -409,8 +437,9 @@ public static String getDescWithoutMethodName(Method m) {\n         StringBuilder ret = new StringBuilder();\r\n         ret.append('(');\r\n         Class<?>[] parameterTypes = m.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append(getDesc(m.getReturnType()));\r\n         return ret.toString();\r\n     }\r\n@@ -431,15 +460,25 @@ public static String getDesc(final CtClass c) throws NotFoundException {\n             ret.append(getDesc(c.getComponentType()));\r\n         } else if (c.isPrimitive()) {\r\n             String t = c.getName();\r\n-            if (\"void\".equals(t)) ret.append(JVM_VOID);\r\n-            else if (\"boolean\".equals(t)) ret.append(JVM_BOOLEAN);\r\n-            else if (\"byte\".equals(t)) ret.append(JVM_BYTE);\r\n-            else if (\"char\".equals(t)) ret.append(JVM_CHAR);\r\n-            else if (\"double\".equals(t)) ret.append(JVM_DOUBLE);\r\n-            else if (\"float\".equals(t)) ret.append(JVM_FLOAT);\r\n-            else if (\"int\".equals(t)) ret.append(JVM_INT);\r\n-            else if (\"long\".equals(t)) ret.append(JVM_LONG);\r\n-            else if (\"short\".equals(t)) ret.append(JVM_SHORT);\r\n+            if (\"void\".equals(t)) {\r\n+                ret.append(JVM_VOID);\r\n+            } else if (\"boolean\".equals(t)) {\r\n+                ret.append(JVM_BOOLEAN);\r\n+            } else if (\"byte\".equals(t)) {\r\n+                ret.append(JVM_BYTE);\r\n+            } else if (\"char\".equals(t)) {\r\n+                ret.append(JVM_CHAR);\r\n+            } else if (\"double\".equals(t)) {\r\n+                ret.append(JVM_DOUBLE);\r\n+            } else if (\"float\".equals(t)) {\r\n+                ret.append(JVM_FLOAT);\r\n+            } else if (\"int\".equals(t)) {\r\n+                ret.append(JVM_INT);\r\n+            } else if (\"long\".equals(t)) {\r\n+                ret.append(JVM_LONG);\r\n+            } else if (\"short\".equals(t)) {\r\n+                ret.append(JVM_SHORT);\r\n+            }\r\n         } else {\r\n             ret.append('L');\r\n             ret.append(c.getName().replace('.', '/'));\r\n@@ -458,8 +497,9 @@ public static String getDesc(final CtClass c) throws NotFoundException {\n     public static String getDesc(final CtMethod m) throws NotFoundException {\r\n         StringBuilder ret = new StringBuilder(m.getName()).append('(');\r\n         CtClass[] parameterTypes = m.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append(getDesc(m.getReturnType()));\r\n         return ret.toString();\r\n     }\r\n@@ -474,8 +514,9 @@ public static String getDesc(final CtMethod m) throws NotFoundException {\n     public static String getDesc(final CtConstructor c) throws NotFoundException {\r\n         StringBuilder ret = new StringBuilder(\"(\");\r\n         CtClass[] parameterTypes = c.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append('V');\r\n         return ret.toString();\r\n     }\r\n@@ -491,8 +532,9 @@ public static String getDescWithoutMethodName(final CtMethod m) throws NotFoundE\n         StringBuilder ret = new StringBuilder();\r\n         ret.append('(');\r\n         CtClass[] parameterTypes = m.getParameterTypes();\r\n-        for (int i = 0; i < parameterTypes.length; i++)\r\n+        for (int i = 0; i < parameterTypes.length; i++) {\r\n             ret.append(getDesc(parameterTypes[i]));\r\n+        }\r\n         ret.append(')').append(getDesc(m.getReturnType()));\r\n         return ret.toString();\r\n     }\r\n@@ -511,17 +553,30 @@ public static String name2desc(String name) {\n             c = (name.length() - index) / 2;\r\n             name = name.substring(0, index);\r\n         }\r\n-        while (c-- > 0) sb.append(\"[\");\r\n-        if (\"void\".equals(name)) sb.append(JVM_VOID);\r\n-        else if (\"boolean\".equals(name)) sb.append(JVM_BOOLEAN);\r\n-        else if (\"byte\".equals(name)) sb.append(JVM_BYTE);\r\n-        else if (\"char\".equals(name)) sb.append(JVM_CHAR);\r\n-        else if (\"double\".equals(name)) sb.append(JVM_DOUBLE);\r\n-        else if (\"float\".equals(name)) sb.append(JVM_FLOAT);\r\n-        else if (\"int\".equals(name)) sb.append(JVM_INT);\r\n-        else if (\"long\".equals(name)) sb.append(JVM_LONG);\r\n-        else if (\"short\".equals(name)) sb.append(JVM_SHORT);\r\n-        else sb.append('L').append(name.replace('.', '/')).append(';');\r\n+        while (c-- > 0) {\r\n+            sb.append(\"[\");\r\n+        }\r\n+        if (\"void\".equals(name)) {\r\n+            sb.append(JVM_VOID);\r\n+        } else if (\"boolean\".equals(name)) {\r\n+            sb.append(JVM_BOOLEAN);\r\n+        } else if (\"byte\".equals(name)) {\r\n+            sb.append(JVM_BYTE);\r\n+        } else if (\"char\".equals(name)) {\r\n+            sb.append(JVM_CHAR);\r\n+        } else if (\"double\".equals(name)) {\r\n+            sb.append(JVM_DOUBLE);\r\n+        } else if (\"float\".equals(name)) {\r\n+            sb.append(JVM_FLOAT);\r\n+        } else if (\"int\".equals(name)) {\r\n+            sb.append(JVM_INT);\r\n+        } else if (\"long\".equals(name)) {\r\n+            sb.append(JVM_LONG);\r\n+        } else if (\"short\".equals(name)) {\r\n+            sb.append(JVM_SHORT);\r\n+        } else {\r\n+            sb.append('L').append(name.replace('.', '/')).append(';');\r\n+        }\r\n         return sb.toString();\r\n     }\r\n \r\n@@ -579,7 +634,9 @@ public static String desc2name(String desc) {\n         } else {\r\n             sb.append(desc.substring(c + 1, desc.length() - 1).replace('/', '.'));\r\n         }\r\n-        while (c-- > 0) sb.append(\"[]\");\r\n+        while (c-- > 0) {\r\n+            sb.append(\"[]\");\r\n+        }\r\n         return sb.toString();\r\n     }\r\n \r\n@@ -628,34 +685,57 @@ public static String desc2name(String desc) {\n         }\r\n         if (c > 0) {\r\n             StringBuilder sb = new StringBuilder();\r\n-            while (c-- > 0)\r\n+            while (c-- > 0) {\r\n                 sb.append(\"[\");\r\n+            }\r\n \r\n-            if (\"void\".equals(name)) sb.append(JVM_VOID);\r\n-            else if (\"boolean\".equals(name)) sb.append(JVM_BOOLEAN);\r\n-            else if (\"byte\".equals(name)) sb.append(JVM_BYTE);\r\n-            else if (\"char\".equals(name)) sb.append(JVM_CHAR);\r\n-            else if (\"double\".equals(name)) sb.append(JVM_DOUBLE);\r\n-            else if (\"float\".equals(name)) sb.append(JVM_FLOAT);\r\n-            else if (\"int\".equals(name)) sb.append(JVM_INT);\r\n-            else if (\"long\".equals(name)) sb.append(JVM_LONG);\r\n-            else if (\"short\".equals(name)) sb.append(JVM_SHORT);\r\n-            else sb.append('L').append(name).append(';'); // \"java.lang.Object\" ==> \"Ljava.lang.Object;\"\r\n+            if (\"void\".equals(name)) {\r\n+                sb.append(JVM_VOID);\r\n+            } else if (\"boolean\".equals(name)) {\r\n+                sb.append(JVM_BOOLEAN);\r\n+            } else if (\"byte\".equals(name)) {\r\n+                sb.append(JVM_BYTE);\r\n+            } else if (\"char\".equals(name)) {\r\n+                sb.append(JVM_CHAR);\r\n+            } else if (\"double\".equals(name)) {\r\n+                sb.append(JVM_DOUBLE);\r\n+            } else if (\"float\".equals(name)) {\r\n+                sb.append(JVM_FLOAT);\r\n+            } else if (\"int\".equals(name)) {\r\n+                sb.append(JVM_INT);\r\n+            } else if (\"long\".equals(name)) {\r\n+                sb.append(JVM_LONG);\r\n+            } else if (\"short\".equals(name)) {\r\n+                sb.append(JVM_SHORT);\r\n+            } else {\r\n+                sb.append('L').append(name).append(';'); // \"java.lang.Object\" ==> \"Ljava.lang.Object;\"\r\n+            }\r\n             name = sb.toString();\r\n         } else {\r\n-            if (\"void\".equals(name)) return void.class;\r\n-            else if (\"boolean\".equals(name)) return boolean.class;\r\n-            else if (\"byte\".equals(name)) return byte.class;\r\n-            else if (\"char\".equals(name)) return char.class;\r\n-            else if (\"double\".equals(name)) return double.class;\r\n-            else if (\"float\".equals(name)) return float.class;\r\n-            else if (\"int\".equals(name)) return int.class;\r\n-            else if (\"long\".equals(name)) return long.class;\r\n-            else if (\"short\".equals(name)) return short.class;\r\n-        }\r\n-\r\n-        if (cl == null)\r\n+            if (\"void\".equals(name)) {\r\n+                return void.class;\r\n+            } else if (\"boolean\".equals(name)) {\r\n+                return boolean.class;\r\n+            } else if (\"byte\".equals(name)) {\r\n+                return byte.class;\r\n+            } else if (\"char\".equals(name)) {\r\n+                return char.class;\r\n+            } else if (\"double\".equals(name)) {\r\n+                return double.class;\r\n+            } else if (\"float\".equals(name)) {\r\n+                return float.class;\r\n+            } else if (\"int\".equals(name)) {\r\n+                return int.class;\r\n+            } else if (\"long\".equals(name)) {\r\n+                return long.class;\r\n+            } else if (\"short\".equals(name)) {\r\n+                return short.class;\r\n+            }\r\n+        }\r\n+\r\n+        if (cl == null) {\r\n             cl = ClassHelper.getClassLoader();\r\n+        }\r\n         Class<?> clazz = NAME_CLASS_CACHE.get(name);\r\n         if (clazz == null) {\r\n             clazz = Class.forName(name, true, cl);\r\n@@ -717,8 +797,9 @@ public static String desc2name(String desc) {\n                 throw new ClassNotFoundException(\"Class not found: \" + desc);\r\n         }\r\n \r\n-        if (cl == null)\r\n+        if (cl == null) {\r\n             cl = ClassHelper.getClassLoader();\r\n+        }\r\n         Class<?> clazz = DESC_CLASS_CACHE.get(desc);\r\n         if (clazz == null) {\r\n             clazz = Class.forName(desc, true, cl);\r\n@@ -748,13 +829,15 @@ public static String desc2name(String desc) {\n      * @throws ClassNotFoundException\r\n      */\r\n     private static Class<?>[] desc2classArray(ClassLoader cl, String desc) throws ClassNotFoundException {\r\n-        if (desc.length() == 0)\r\n+        if (desc.length() == 0) {\r\n             return EMPTY_CLASS_ARRAY;\r\n+        }\r\n \r\n         List<Class<?>> cs = new ArrayList<Class<?>>();\r\n         Matcher m = DESC_PATTERN.matcher(desc);\r\n-        while (m.find())\r\n+        while (m.find()) {\r\n             cs.add(desc2class(cl, m.group()));\r\n+        }\r\n         return cs.toArray(EMPTY_CLASS_ARRAY);\r\n     }\r\n \r\n@@ -862,8 +945,9 @@ public static Object getEmptyObject(Class<?> returnType) {\n     }\r\n \r\n     private static Object getEmptyObject(Class<?> returnType, Map<Class<?>, Object> emptyInstances, int level) {\r\n-        if (level > 2)\r\n+        if (level > 2) {\r\n             return null;\r\n+        }\r\n         if (returnType == null) {\r\n             return null;\r\n         } else if (returnType == boolean.class || returnType == Boolean.class) {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java",
                "sha": "20e091acc45382aa452206c2a69ec08d41fefb8a",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 7,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java",
                "patch": "@@ -38,10 +38,11 @@ public Stack() {\n      * @param ele\r\n      */\r\n     public void push(E ele) {\r\n-        if (mElements.size() > mSize)\r\n+        if (mElements.size() > mSize) {\r\n             mElements.set(mSize, ele);\r\n-        else\r\n+        } else {\r\n             mElements.add(ele);\r\n+        }\r\n         mSize++;\r\n     }\r\n \r\n@@ -51,8 +52,9 @@ public void push(E ele) {\n      * @return the last element.\r\n      */\r\n     public E pop() {\r\n-        if (mSize == 0)\r\n+        if (mSize == 0) {\r\n             throw new EmptyStackException();\r\n+        }\r\n         return mElements.set(--mSize, null);\r\n     }\r\n \r\n@@ -62,8 +64,9 @@ public E pop() {\n      * @return the last element.\r\n      */\r\n     public E peek() {\r\n-        if (mSize == 0)\r\n+        if (mSize == 0) {\r\n             throw new EmptyStackException();\r\n+        }\r\n         return mElements.get(mSize - 1);\r\n     }\r\n \r\n@@ -74,8 +77,9 @@ public E peek() {\n      * @return element.\r\n      */\r\n     public E get(int index) {\r\n-        if (index >= mSize)\r\n+        if (index >= mSize) {\r\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + mSize);\r\n+        }\r\n \r\n         return index < 0 ? mElements.get(index + mSize) : mElements.get(index);\r\n     }\r\n@@ -88,8 +92,9 @@ public E get(int index) {\n      * @return old element.\r\n      */\r\n     public E set(int index, E value) {\r\n-        if (index >= mSize)\r\n+        if (index >= mSize) {\r\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + mSize);\r\n+        }\r\n \r\n         return mElements.set(index < 0 ? index + mSize : index, value);\r\n     }\r\n@@ -101,8 +106,9 @@ public E set(int index, E value) {\n      * @return element\r\n      */\r\n     public E remove(int index) {\r\n-        if (index >= mSize)\r\n+        if (index >= mSize) {\r\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + mSize);\r\n+        }\r\n \r\n         E ret = mElements.remove(index < 0 ? index + mSize : index);\r\n         mSize--;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/Stack.java",
                "sha": "1283d831b7465b34c1055f206aee31b7834db208",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 23,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "patch": "@@ -18,10 +18,11 @@\n \r\n import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.common.io.UnsafeStringWriter;\r\n-import com.alibaba.fastjson.JSON;\r\n import org.apache.dubbo.common.logger.Logger;\r\n import org.apache.dubbo.common.logger.LoggerFactory;\r\n \r\n+import com.alibaba.fastjson.JSON;\r\n+\r\n import java.io.PrintWriter;\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n@@ -339,8 +340,9 @@ public static String replace(final String text, final String searchString, final\n     }\r\n \r\n     public static boolean isBlank(String str) {\r\n-        if (str == null || str.length() == 0)\r\n+        if (str == null || str.length() == 0) {\r\n             return true;\r\n+        }\r\n         return false;\r\n     }\r\n \r\n@@ -351,8 +353,9 @@ public static boolean isBlank(String str) {\n      * @return is empty.\r\n      */\r\n     public static boolean isEmpty(String str) {\r\n-        if (str == null || str.length() == 0)\r\n+        if (str == null || str.length() == 0) {\r\n             return true;\r\n+        }\r\n         return false;\r\n     }\r\n \r\n@@ -372,10 +375,12 @@ public static boolean isNotEmpty(String str) {\n      * @return equals\r\n      */\r\n     public static boolean isEquals(String s1, String s2) {\r\n-        if (s1 == null && s2 == null)\r\n+        if (s1 == null && s2 == null) {\r\n             return true;\r\n-        if (s1 == null || s2 == null)\r\n+        }\r\n+        if (s1 == null || s2 == null) {\r\n             return false;\r\n+        }\r\n         return s1.equals(s2);\r\n     }\r\n \r\n@@ -386,14 +391,16 @@ public static boolean isEquals(String s1, String s2) {\n      * @return is integer\r\n      */\r\n     public static boolean isInteger(String str) {\r\n-        if (str == null || str.length() == 0)\r\n+        if (str == null || str.length() == 0) {\r\n             return false;\r\n+        }\r\n         return INT_PATTERN.matcher(str).matches();\r\n     }\r\n \r\n     public static int parseInteger(String str) {\r\n-        if (!isInteger(str))\r\n+        if (!isInteger(str)) {\r\n             return 0;\r\n+        }\r\n         return Integer.parseInt(str);\r\n     }\r\n \r\n@@ -495,23 +502,27 @@ public static String toString(String msg, Throwable e) {\n      * @return String.\r\n      */\r\n     public static String translat(String src, String from, String to) {\r\n-        if (isEmpty(src)) return src;\r\n+        if (isEmpty(src)) {\r\n+            return src;\r\n+        }\r\n         StringBuilder sb = null;\r\n         int ix;\r\n         char c;\r\n         for (int i = 0, len = src.length(); i < len; i++) {\r\n             c = src.charAt(i);\r\n             ix = from.indexOf(c);\r\n             if (ix == -1) {\r\n-                if (sb != null)\r\n+                if (sb != null) {\r\n                     sb.append(c);\r\n+                }\r\n             } else {\r\n                 if (sb == null) {\r\n                     sb = new StringBuilder(len);\r\n                     sb.append(src, 0, i);\r\n                 }\r\n-                if (ix < to.length())\r\n+                if (ix < to.length()) {\r\n                     sb.append(to.charAt(ix));\r\n+                }\r\n             }\r\n         }\r\n         return sb == null ? src : sb.toString();\r\n@@ -530,14 +541,16 @@ public static String translat(String src, String from, String to) {\n         for (int i = 0; i < len; i++) {\r\n             c = str.charAt(i);\r\n             if (c == ch) {\r\n-                if (list == null)\r\n+                if (list == null) {\r\n                     list = new ArrayList<String>();\r\n+                }\r\n                 list.add(str.substring(ix, i));\r\n                 ix = i + 1;\r\n             }\r\n         }\r\n-        if (ix > 0)\r\n+        if (ix > 0) {\r\n             list.add(str.substring(ix));\r\n+        }\r\n         return list == null ? EMPTY_STRING_ARRAY : (String[]) list.toArray(EMPTY_STRING_ARRAY);\r\n     }\r\n \r\n@@ -548,10 +561,13 @@ public static String translat(String src, String from, String to) {\n      * @return String.\r\n      */\r\n     public static String join(String[] array) {\r\n-        if (array.length == 0) return \"\";\r\n+        if (array.length == 0) {\r\n+            return \"\";\r\n+        }\r\n         StringBuilder sb = new StringBuilder();\r\n-        for (String s : array)\r\n+        for (String s : array) {\r\n             sb.append(s);\r\n+        }\r\n         return sb.toString();\r\n     }\r\n \r\n@@ -563,11 +579,14 @@ public static String join(String[] array) {\n      * @return String.\r\n      */\r\n     public static String join(String[] array, char split) {\r\n-        if (array.length == 0) return \"\";\r\n+        if (array.length == 0) {\r\n+            return \"\";\r\n+        }\r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 sb.append(split);\r\n+            }\r\n             sb.append(array[i]);\r\n         }\r\n         return sb.toString();\r\n@@ -581,24 +600,32 @@ public static String join(String[] array, char split) {\n      * @return String.\r\n      */\r\n     public static String join(String[] array, String split) {\r\n-        if (array.length == 0) return \"\";\r\n+        if (array.length == 0) {\r\n+            return \"\";\r\n+        }\r\n         StringBuilder sb = new StringBuilder();\r\n         for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0)\r\n+            if (i > 0) {\r\n                 sb.append(split);\r\n+            }\r\n             sb.append(array[i]);\r\n         }\r\n         return sb.toString();\r\n     }\r\n \r\n     public static String join(Collection<String> coll, String split) {\r\n-        if (coll.isEmpty()) return \"\";\r\n+        if (coll.isEmpty()) {\r\n+            return \"\";\r\n+        }\r\n \r\n         StringBuilder sb = new StringBuilder();\r\n         boolean isFirst = true;\r\n         for (String s : coll) {\r\n-            if (isFirst) isFirst = false;\r\n-            else sb.append(split);\r\n+            if (isFirst) {\r\n+                isFirst = false;\r\n+            } else {\r\n+                sb.append(split);\r\n+            }\r\n             sb.append(s);\r\n         }\r\n         return sb.toString();\r\n@@ -616,8 +643,9 @@ public static String join(Collection<String> coll, String split) {\n         Map<String, String> map = new HashMap<String, String>(tmp.length);\r\n         for (int i = 0; i < tmp.length; i++) {\r\n             Matcher matcher = KVP_PATTERN.matcher(tmp[i]);\r\n-            if (matcher.matches() == false)\r\n+            if (matcher.matches() == false) {\r\n                 continue;\r\n+            }\r\n             map.put(matcher.group(1), matcher.group(2));\r\n         }\r\n         return map;\r\n@@ -635,8 +663,9 @@ public static String getQueryStringValue(String qs, String key) {\n      * @return Parameters instance.\r\n      */\r\n     public static Map<String, String> parseQueryString(String qs) {\r\n-        if (qs == null || qs.length() == 0)\r\n+        if (qs == null || qs.length() == 0) {\r\n             return new HashMap<String, String>();\r\n+        }\r\n         return parseKeyValuePair(qs, \"\\\\&\");\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "sha": "c2c708f0a609d057e987d425333b3445020f51ef",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 4,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "patch": "@@ -361,8 +361,9 @@ public static boolean isMatchCategory(String category, String categories) {\n     public static boolean isMatch(URL consumerUrl, URL providerUrl) {\r\n         String consumerInterface = consumerUrl.getServiceInterface();\r\n         String providerInterface = providerUrl.getServiceInterface();\r\n-        if (!(Constants.ANY_VALUE.equals(consumerInterface) || StringUtils.isEquals(consumerInterface, providerInterface)))\r\n+        if (!(Constants.ANY_VALUE.equals(consumerInterface) || StringUtils.isEquals(consumerInterface, providerInterface))) {\r\n             return false;\r\n+        }\r\n \r\n         if (!isMatchCategory(providerUrl.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY),\r\n                 consumerUrl.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY))) {\r\n@@ -393,14 +394,17 @@ public static boolean isMatchGlobPattern(String pattern, String value, URL param\n     }\r\n \r\n     public static boolean isMatchGlobPattern(String pattern, String value) {\r\n-        if (\"*\".equals(pattern))\r\n+        if (\"*\".equals(pattern)) {\r\n             return true;\r\n+        }\r\n         if ((pattern == null || pattern.length() == 0)\r\n-                && (value == null || value.length() == 0))\r\n+                && (value == null || value.length() == 0)) {\r\n             return true;\r\n+        }\r\n         if ((pattern == null || pattern.length() == 0)\r\n-                || (value == null || value.length() == 0))\r\n+                || (value == null || value.length() == 0)) {\r\n             return false;\r\n+        }\r\n \r\n         int i = pattern.lastIndexOf('*');\r\n         // doesn't find \"*\"\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "sha": "f9e6f4ec3c758f0f3f882cff5066dc70eba67499",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 3,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "patch": "@@ -378,17 +378,23 @@ public URL addParameter(String key, double value) {\n     }\n \n     public URL addParameter(String key, Enum<?> value) {\n-        if (value == null) return this;\n+        if (value == null) {\n+            return this;\n+        }\n         return addParameter(key, String.valueOf(value));\n     }\n \n     public URL addParameter(String key, Number value) {\n-        if (value == null) return this;\n+        if (value == null) {\n+            return this;\n+        }\n         return addParameter(key, String.valueOf(value));\n     }\n \n     public URL addParameter(String key, CharSequence value) {\n-        if (value == null || value.length() == 0) return this;\n+        if (value == null || value.length() == 0) {\n+            return this;\n+        }\n         return addParameter(key, String.valueOf(value));\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "sha": "3a6796a786af49e5b5acd052713b6df103266b6e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "patch": "@@ -257,8 +257,9 @@ protected static void appendAttributes(Map<Object, Object> parameters, Object co\n                         && method.getParameterTypes().length == 0\r\n                         && isPrimitive(method.getReturnType())) {\r\n                     Parameter parameter = method.getAnnotation(Parameter.class);\r\n-                    if (parameter == null || !parameter.attribute())\r\n+                    if (parameter == null || !parameter.attribute()) {\r\n                         continue;\r\n+                    }\r\n                     String key;\r\n                     if (parameter.key().length() > 0) {\r\n                         key = parameter.key();\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "sha": "a5a1270ae31d67ed678b41f108b6f7f66d7905a5",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 3,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "patch": "@@ -229,7 +229,9 @@ private void init() {\n                     throw new IllegalStateException(\"Unload \" + resolveFile + \", cause: \" + e.getMessage(), e);\r\n                 } finally {\r\n                     try {\r\n-                        if (null != fis) fis.close();\r\n+                        if (null != fis) {\r\n+                            fis.close();\r\n+                        }\r\n                     } catch (IOException e) {\r\n                         logger.warn(e.getMessage(), e);\r\n                     }\r\n@@ -440,9 +442,13 @@ private void checkDefault() {\n \r\n     private void resolveAsyncInterface(Class<?> interfaceClass, Map<String, String> map) {\r\n         AsyncFor annotation = interfaceClass.getAnnotation(AsyncFor.class);\r\n-        if (annotation == null) return;\r\n+        if (annotation == null) {\r\n+            return;\r\n+        }\r\n         Class<?> target = annotation.value();\r\n-        if (!target.isAssignableFrom(interfaceClass)) return;\r\n+        if (!target.isAssignableFrom(interfaceClass)) {\r\n+            return;\r\n+        }\r\n         this.asyncInterfaceClass = interfaceClass;\r\n         this.interfaceClass = target;\r\n         setInterface(this.interfaceClass.getName());\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "sha": "fb0f13e39c1816e4a0b3f47b29bae8e4b7825d67",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java",
                "patch": "@@ -162,8 +162,9 @@ public Integer getWait() {\n     @Deprecated\r\n     public void setWait(Integer wait) {\r\n         this.wait = wait;\r\n-        if (wait != null && wait > 0)\r\n+        if (wait != null && wait > 0) {\r\n             System.setProperty(Constants.SHUTDOWN_WAIT_KEY, String.valueOf(wait));\r\n+        }\r\n     }\r\n \r\n     public Boolean isCheck() {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/RegistryConfig.java",
                "sha": "0c2022b87c8a11696822006e16dd5a44885d3f2e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
                "patch": "@@ -117,7 +117,9 @@ public static ReferenceConfigCache getCache(String name, KeyGenerator keyGenerat\n \n     void destroyKey(String key) {\n         ReferenceConfig<?> config = cache.remove(key);\n-        if (config == null) return;\n+        if (config == null) {\n+            return;\n+        }\n         config.destroy();\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
                "sha": "0ced6174be7c8dea6196fe0acc7ffe59fd3990f1",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 6,
                "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java",
                "patch": "@@ -200,11 +200,13 @@ protected Object decodeBody(Channel channel, InputStream is, byte[] header) thro\n \r\n     protected Object getRequestData(long id) {\r\n         DefaultFuture future = DefaultFuture.getFuture(id);\r\n-        if (future == null)\r\n+        if (future == null) {\r\n             return null;\r\n+        }\r\n         Request req = future.getRequest();\r\n-        if (req == null)\r\n+        if (req == null) {\r\n             return null;\r\n+        }\r\n         return req.getData();\r\n     }\r\n \r\n@@ -218,8 +220,12 @@ protected void encodeRequest(Channel channel, ChannelBuffer buffer, Request req)\n         // set request and serialization flag.\r\n         header[2] = (byte) (FLAG_REQUEST | serialization.getContentTypeId());\r\n \r\n-        if (req.isTwoWay()) header[2] |= FLAG_TWOWAY;\r\n-        if (req.isEvent()) header[2] |= FLAG_EVENT;\r\n+        if (req.isTwoWay()) {\r\n+            header[2] |= FLAG_TWOWAY;\r\n+        }\r\n+        if (req.isEvent()) {\r\n+            header[2] |= FLAG_EVENT;\r\n+        }\r\n \r\n         // set request id.\r\n         Bytes.long2bytes(req.getId(), header, 4);\r\n@@ -260,7 +266,9 @@ protected void encodeResponse(Channel channel, ChannelBuffer buffer, Response re\n             Bytes.short2bytes(MAGIC, header);\r\n             // set request and serialization flag.\r\n             header[2] = serialization.getContentTypeId();\r\n-            if (res.isHeartbeat()) header[2] |= FLAG_EVENT;\r\n+            if (res.isHeartbeat()) {\r\n+                header[2] |= FLAG_EVENT;\r\n+            }\r\n             // set response status.\r\n             byte status = res.getStatus();\r\n             header[3] = status;\r\n@@ -277,7 +285,9 @@ protected void encodeResponse(Channel channel, ChannelBuffer buffer, Response re\n                 } else {\r\n                     encodeResponseData(channel, out, res.getResult(), res.getVersion());\r\n                 }\r\n-            } else out.writeUTF(res.getErrorMessage());\r\n+            } else {\r\n+                out.writeUTF(res.getErrorMessage());\r\n+            }\r\n             out.flushBuffer();\r\n             if (out instanceof Cleanable) {\r\n                 ((Cleanable) out).cleanup();\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/codec/ExchangeCodec.java",
                "sha": "4031688e04e076eb2b1cf55234d0a13f468664b5",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 3,
                "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java",
                "patch": "@@ -83,9 +83,13 @@ void handleRequest(final ExchangeChannel channel, Request req) throws RemotingEx\n             Object data = req.getData();\r\n \r\n             String msg;\r\n-            if (data == null) msg = null;\r\n-            else if (data instanceof Throwable) msg = StringUtils.toString((Throwable) data);\r\n-            else msg = data.toString();\r\n+            if (data == null) {\r\n+                msg = null;\r\n+            } else if (data instanceof Throwable) {\r\n+                msg = StringUtils.toString((Throwable) data);\r\n+            } else {\r\n+                msg = data.toString();\r\n+            }\r\n             res.setErrorMessage(\"Fail to decode request due to: \" + msg);\r\n             res.setStatus(Response.BAD_REQUEST);\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/header/HeaderExchangeHandler.java",
                "sha": "9e73541a05f8a4e78ee1d77e0f022a653c32c386",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 7,
                "filename": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java",
                "patch": "@@ -199,56 +199,63 @@ public InetSocketAddress getConnectAddress() {\n     @Override\n     public InetSocketAddress getRemoteAddress() {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return getUrl().toInetSocketAddress();\n+        }\n         return channel.getRemoteAddress();\n     }\n \n     @Override\n     public InetSocketAddress getLocalAddress() {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return InetSocketAddress.createUnresolved(NetUtils.getLocalHost(), 0);\n+        }\n         return channel.getLocalAddress();\n     }\n \n     @Override\n     public boolean isConnected() {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return false;\n+        }\n         return channel.isConnected();\n     }\n \n     @Override\n     public Object getAttribute(String key) {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return null;\n+        }\n         return channel.getAttribute(key);\n     }\n \n     @Override\n     public void setAttribute(String key, Object value) {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return;\n+        }\n         channel.setAttribute(key, value);\n     }\n \n     @Override\n     public void removeAttribute(String key) {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return;\n+        }\n         channel.removeAttribute(key);\n     }\n \n     @Override\n     public boolean hasAttribute(String key) {\n         Channel channel = getChannel();\n-        if (channel == null)\n+        if (channel == null) {\n             return false;\n+        }\n         return channel.hasAttribute(key);\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/transport/AbstractClient.java",
                "sha": "ed913d2a0f7cc8c4d02e54429571558073b1f732",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyChannel.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyChannel.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 5,
                "filename": "dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyChannel.java",
                "patch": "@@ -168,13 +168,23 @@ public int hashCode() {\n \r\n     @Override\r\n     public boolean equals(Object obj) {\r\n-        if (this == obj) return true;\r\n-        if (obj == null) return false;\r\n-        if (getClass() != obj.getClass()) return false;\r\n+        if (this == obj) {\r\n+            return true;\r\n+        }\r\n+        if (obj == null) {\r\n+            return false;\r\n+        }\r\n+        if (getClass() != obj.getClass()) {\r\n+            return false;\r\n+        }\r\n         GrizzlyChannel other = (GrizzlyChannel) obj;\r\n         if (connection == null) {\r\n-            if (other.connection != null) return false;\r\n-        } else if (!connection.equals(other.connection)) return false;\r\n+            if (other.connection != null) {\r\n+                return false;\r\n+            }\r\n+        } else if (!connection.equals(other.connection)) {\r\n+            return false;\r\n+        }\r\n         return true;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-grizzly/src/main/java/org/apache/dubbo/remoting/transport/grizzly/GrizzlyChannel.java",
                "sha": "4732676a082a9967f7f24f890ce31bb00144836b",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaChannel.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaChannel.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 5,
                "filename": "dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaChannel.java",
                "patch": "@@ -161,13 +161,23 @@ public int hashCode() {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (this == obj) return true;\n-        if (obj == null) return false;\n-        if (getClass() != obj.getClass()) return false;\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n         MinaChannel other = (MinaChannel) obj;\n         if (session == null) {\n-            if (other.session != null) return false;\n-        } else if (!session.equals(other.session)) return false;\n+            if (other.session != null) {\n+                return false;\n+            }\n+        } else if (!session.equals(other.session)) {\n+            return false;\n+        }\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaChannel.java",
                "sha": "093ce21694035ac4b7b4c3c7090aa045ca1d55d9",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaCodecAdapter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaCodecAdapter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaCodecAdapter.java",
                "patch": "@@ -95,7 +95,9 @@ public void encode(IoSession session, Object msg, ProtocolEncoderOutput out) thr\n         @Override\n         public void decode(IoSession session, ByteBuffer in, ProtocolDecoderOutput out) throws Exception {\n             int readable = in.limit();\n-            if (readable <= 0) return;\n+            if (readable <= 0) {\n+                return;\n+            }\n \n             ChannelBuffer frame;\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-mina/src/main/java/org/apache/dubbo/remoting/transport/mina/MinaCodecAdapter.java",
                "sha": "5e60fb2d49023afb5c3ac57b5a27423b9b0b0b50",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyChannel.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyChannel.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 5,
                "filename": "dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyChannel.java",
                "patch": "@@ -177,13 +177,23 @@ public int hashCode() {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (this == obj) return true;\n-        if (obj == null) return false;\n-        if (getClass() != obj.getClass()) return false;\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n         NettyChannel other = (NettyChannel) obj;\n         if (channel == null) {\n-            if (other.channel != null) return false;\n-        } else if (!channel.equals(other.channel)) return false;\n+            if (other.channel != null) {\n+                return false;\n+            }\n+        } else if (!channel.equals(other.channel)) {\n+            return false;\n+        }\n         return true;\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyChannel.java",
                "sha": "9a0e107c84f9f7a37448a85c4ad37b00eca49ddc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java",
                "patch": "@@ -157,8 +157,9 @@ protected void doClose() throws Throwable {\n     @Override\r\n     protected org.apache.dubbo.remoting.Channel getChannel() {\r\n         Channel c = channel;\r\n-        if (c == null || !c.isConnected())\r\n+        if (c == null || !c.isConnected()) {\r\n             return null;\r\n+        }\r\n         return NettyChannel.getOrAddChannel(c, getUrl(), this);\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty/src/main/java/org/apache/dubbo/remoting/transport/netty/NettyClient.java",
                "sha": "434fd2a03b062590e9a6d49ee1df38cab92bd6a8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
                "patch": "@@ -156,8 +156,9 @@ protected void doClose() throws Throwable {\n     @Override\n     protected org.apache.dubbo.remoting.Channel getChannel() {\n         Channel c = channel;\n-        if (c == null || !c.isActive())\n+        if (c == null || !c.isActive()) {\n             return null;\n+        }\n         return NettyChannel.getOrAddChannel(c, getUrl(), this);\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-remoting/dubbo-remoting-netty4/src/main/java/org/apache/dubbo/remoting/transport/netty4/NettyClient.java",
                "sha": "4ea6fe12c52fbf3f87e0702cf931c30133e875ca",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java",
                "patch": "@@ -33,8 +33,9 @@\n \r\n     @Override\r\n     public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {\r\n-        if (inv.getMethodName().equals(Constants.$ECHO) && inv.getArguments() != null && inv.getArguments().length == 1)\r\n+        if (inv.getMethodName().equals(Constants.$ECHO) && inv.getArguments() != null && inv.getArguments().length == 1) {\r\n             return new RpcResult(inv.getArguments()[0]);\r\n+        }\r\n         return invoker.invoke(inv);\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java",
                "sha": "5dfa8f0813eb41fd5849664cfd4dbb1dbd6eee7f",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 3,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java",
                "patch": "@@ -33,12 +33,15 @@\n     private volatile boolean unexported = false;\r\n \r\n     public AbstractExporter(Invoker<T> invoker) {\r\n-        if (invoker == null)\r\n+        if (invoker == null) {\r\n             throw new IllegalStateException(\"service invoker == null\");\r\n-        if (invoker.getInterface() == null)\r\n+        }\r\n+        if (invoker.getInterface() == null) {\r\n             throw new IllegalStateException(\"service type == null\");\r\n-        if (invoker.getUrl() == null)\r\n+        }\r\n+        if (invoker.getUrl() == null) {\r\n             throw new IllegalStateException(\"service url == null\");\r\n+        }\r\n         this.invoker = invoker;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractExporter.java",
                "sha": "41a47806c9a896f75251432526d47c223641d545",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 2,
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "patch": "@@ -63,10 +63,12 @@ public AbstractInvoker(Class<T> type, URL url, String[] keys) {\n     }\n \n     public AbstractInvoker(Class<T> type, URL url, Map<String, String> attachment) {\n-        if (type == null)\n+        if (type == null) {\n             throw new IllegalArgumentException(\"service type == null\");\n-        if (url == null)\n+        }\n+        if (url == null) {\n             throw new IllegalArgumentException(\"service url == null\");\n+        }\n         this.type = type;\n         this.url = url;\n         this.attachment = attachment == null ? null : Collections.unmodifiableMap(attachment);",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/protocol/AbstractInvoker.java",
                "sha": "e4eba3c29a987155d2909d8eeade25f16c6ab9d1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 2,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java",
                "patch": "@@ -91,8 +91,9 @@ public Object decode(Channel channel, InputStream input) throws IOException {\n             case DubboCodec.RESPONSE_WITH_EXCEPTION:\n                 try {\n                     Object obj = in.readObject();\n-                    if (obj instanceof Throwable == false)\n+                    if (obj instanceof Throwable == false) {\n                         throw new IOException(\"Response data error, expect Throwable, but get \" + obj);\n+                    }\n                     setException((Throwable) obj);\n                 } catch (ClassNotFoundException e) {\n                     throw new IOException(StringUtils.toString(\"Read response data failed.\", e));\n@@ -119,8 +120,9 @@ public Object decode(Channel channel, InputStream input) throws IOException {\n             case DubboCodec.RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS:\n                 try {\n                     Object obj = in.readObject();\n-                    if (obj instanceof Throwable == false)\n+                    if (obj instanceof Throwable == false) {\n                         throw new IOException(\"Response data error, expect Throwable, but get \" + obj);\n+                    }\n                     setException((Throwable) obj);\n                     setAttachments((Map<String, String>) in.readObject(Map.class));\n                 } catch (ClassNotFoundException e) {",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DecodeableRpcResult.java",
                "sha": "7c72133e66b9996992972da2e1c169c1e9c37c25",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java",
                "patch": "@@ -179,10 +179,11 @@ protected void encodeRequestData(Channel channel, ObjectOutput out, Object data,\n         out.writeUTF(inv.getMethodName());\n         out.writeUTF(ReflectUtils.getDesc(inv.getParameterTypes()));\n         Object[] args = inv.getArguments();\n-        if (args != null)\n+        if (args != null) {\n             for (int i = 0; i < args.length; i++) {\n                 out.writeObject(encodeInvocationArgument(channel, inv, i));\n             }\n+        }\n         out.writeObject(RpcUtils.getNecessaryAttachments(inv));\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboCodec.java",
                "sha": "60b36ee681f9efe5673bdf18148af24c71ef166c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java",
                "patch": "@@ -116,8 +116,9 @@ protected Result doInvoke(final Invocation invocation) throws Throwable {\n \n     @Override\n     public boolean isAvailable() {\n-        if (!super.isAvailable())\n+        if (!super.isAvailable()) {\n             return false;\n+        }\n         for (ExchangeClient client : clients) {\n             if (client.isConnected() && !client.hasAttribute(Constants.CHANNEL_ATTRIBUTE_READONLY_KEY)) {\n                 //cannot write == not Available ?",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboInvoker.java",
                "sha": "93343c0c26f12e4c6c2e950d2bd2e64099cd012c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 2,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "patch": "@@ -225,8 +225,9 @@ private boolean isClientSide(Channel channel) {\n \n         DubboExporter<?> exporter = (DubboExporter<?>) exporterMap.get(serviceKey);\n \n-        if (exporter == null)\n+        if (exporter == null) {\n             throw new RemotingException(channel, \"Not found exported service: \" + serviceKey + \" in \" + exporterMap.keySet() + \", may be version or group mismatch \" + \", channel: consumer: \" + channel.getRemoteAddress() + \" --> provider: \" + channel.getLocalAddress() + \", message:\" + inv);\n+        }\n \n         return exporter.getInvoker();\n     }\n@@ -297,8 +298,9 @@ private ExchangeServer createServer(URL url) {\n         url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));\n         String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);\n \n-        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))\n+        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) {\n             throw new RpcException(\"Unsupported server type: \" + str + \", url: \" + url);\n+        }\n \n         url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);\n         ExchangeServer server;",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/DubboProtocol.java",
                "sha": "334f0fbaba9dde5b097be72e717ff30d8fdbf1e2",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 6,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java",
                "patch": "@@ -62,15 +62,17 @@ public LazyConnectExchangeClient(URL url, ExchangeHandler requestHandler) {\n \n \n     private void initClient() throws RemotingException {\n-        if (client != null)\n+        if (client != null) {\n             return;\n+        }\n         if (logger.isInfoEnabled()) {\n             logger.info(\"Lazy connect to \" + url);\n         }\n         connectLock.lock();\n         try {\n-            if (client != null)\n+            if (client != null) {\n                 return;\n+            }\n             this.client = Exchangers.connect(url, requestHandler);\n         } finally {\n             connectLock.unlock();\n@@ -162,22 +164,25 @@ public void send(Object message, boolean sent) throws RemotingException {\n \n     @Override\n     public boolean isClosed() {\n-        if (client != null)\n+        if (client != null) {\n             return client.isClosed();\n-        else\n+        } else {\n             return true;\n+        }\n     }\n \n     @Override\n     public void close() {\n-        if (client != null)\n+        if (client != null) {\n             client.close();\n+        }\n     }\n \n     @Override\n     public void close(int timeout) {\n-        if (client != null)\n+        if (client != null) {\n             client.close(timeout);\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/LazyConnectExchangeClient.java",
                "sha": "b5a4057f54dd1d6ccb1fb4d5115024331e002392",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 8,
                "filename": "dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "patch": "@@ -74,22 +74,30 @@ private Serialization getSerialization(URL url) {\n             config.setTestOnBorrow(url.getParameter(\"test.on.borrow\", true));\r\n             config.setTestOnReturn(url.getParameter(\"test.on.return\", false));\r\n             config.setTestWhileIdle(url.getParameter(\"test.while.idle\", false));\r\n-            if (url.getParameter(\"max.idle\", 0) > 0)\r\n+            if (url.getParameter(\"max.idle\", 0) > 0) {\r\n                 config.setMaxIdle(url.getParameter(\"max.idle\", 0));\r\n-            if (url.getParameter(\"min.idle\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"min.idle\", 0) > 0) {\r\n                 config.setMinIdle(url.getParameter(\"min.idle\", 0));\r\n-            if (url.getParameter(\"max.active\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"max.active\", 0) > 0) {\r\n                 config.setMaxTotal(url.getParameter(\"max.active\", 0));\r\n-            if (url.getParameter(\"max.total\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"max.total\", 0) > 0) {\r\n                 config.setMaxTotal(url.getParameter(\"max.total\", 0));\r\n-            if (url.getParameter(\"max.wait\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"max.wait\", 0) > 0) {\r\n                 config.setMaxWaitMillis(url.getParameter(\"max.wait\", 0));\r\n-            if (url.getParameter(\"num.tests.per.eviction.run\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"num.tests.per.eviction.run\", 0) > 0) {\r\n                 config.setNumTestsPerEvictionRun(url.getParameter(\"num.tests.per.eviction.run\", 0));\r\n-            if (url.getParameter(\"time.between.eviction.runs.millis\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"time.between.eviction.runs.millis\", 0) > 0) {\r\n                 config.setTimeBetweenEvictionRunsMillis(url.getParameter(\"time.between.eviction.runs.millis\", 0));\r\n-            if (url.getParameter(\"min.evictable.idle.time.millis\", 0) > 0)\r\n+            }\r\n+            if (url.getParameter(\"min.evictable.idle.time.millis\", 0) > 0) {\r\n                 config.setMinEvictableIdleTimeMillis(url.getParameter(\"min.evictable.idle.time.millis\", 0));\r\n+            }\r\n             final JedisPool jedisPool = new JedisPool(config, url.getHost(), url.getPort(DEFAULT_PORT),\r\n                     url.getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT),\r\n                     StringUtils.isBlank(url.getPassword()) ? null : url.getPassword(),\r",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-redis/src/main/java/org/apache/dubbo/rpc/protocol/redis/RedisProtocol.java",
                "sha": "ba35c298ec487e983b6b01a986ea8349da8b7312",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
                "patch": "@@ -201,8 +201,9 @@ private ExchangeServer getServer(URL url) {\n         url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());\n         String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);\n \n-        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))\n+        if (str != null && str.length() > 0 && !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) {\n             throw new RpcException(\"Unsupported server type: \" + str + \", url: \" + url);\n+        }\n \n         ExchangeServer server;\n         try {",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/ThriftProtocol.java",
                "sha": "96f4726f1dfe76ce31a0177b47b438a21e98fd49",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/io/RandomAccessByteArrayOutputStream.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/io/RandomAccessByteArrayOutputStream.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 5,
                "filename": "dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/io/RandomAccessByteArrayOutputStream.java",
                "patch": "@@ -36,31 +36,36 @@ public RandomAccessByteArrayOutputStream() {\n \n     public RandomAccessByteArrayOutputStream(int size) {\n \n-        if (size < 0)\n+        if (size < 0) {\n             throw new IllegalArgumentException(\"Negative initial size: \" + size);\n+        }\n         buffer = new byte[size];\n     }\n \n     @Override\n     public void write(int b) {\n \n         int newcount = count + 1;\n-        if (newcount > buffer.length)\n+        if (newcount > buffer.length) {\n             buffer = Bytes.copyOf(buffer, Math.max(buffer.length << 1, newcount));\n+        }\n         buffer[count] = (byte) b;\n         count = newcount;\n     }\n \n     @Override\n     public void write(byte b[], int off, int len) {\n \n-        if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0))\n+        if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length) || ((off + len) < 0)) {\n             throw new IndexOutOfBoundsException();\n-        if (len == 0)\n+        }\n+        if (len == 0) {\n             return;\n+        }\n         int newcount = count + len;\n-        if (newcount > buffer.length)\n+        if (newcount > buffer.length) {\n             buffer = Bytes.copyOf(buffer, Math.max(buffer.length << 1, newcount));\n+        }\n         System.arraycopy(b, off, buffer, count, len);\n         count = newcount;\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-rpc/dubbo-rpc-thrift/src/main/java/org/apache/dubbo/rpc/protocol/thrift/io/RandomAccessByteArrayOutputStream.java",
                "sha": "a5d0d119370c90ef89b2623df6e7f06d875ea7a0",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 1,
                "filename": "dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.dubbo.common.serialize.ObjectInput;\n import org.apache.dubbo.common.utils.PojoUtils;\n+\n import com.alibaba.fastjson.JSON;\n \n import java.io.BufferedReader;\n@@ -105,7 +106,9 @@ public Object readObject() throws IOException, ClassNotFoundException {\n \n     private String readLine() throws IOException, EOFException {\n         String line = reader.readLine();\n-        if (line == null || line.trim().length() == 0) throw new EOFException();\n+        if (line == null || line.trim().length() == 0) {\n+            throw new EOFException();\n+        }\n         return line;\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-serialization/dubbo-serialization-fastjson/src/main/java/org/apache/dubbo/common/serialize/fastjson/FastJsonObjectInput.java",
                "sha": "96824fd58cf172367db2f321429781892b699c2e",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaObjectInput.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaObjectInput.java?ref=6938d487a388cc8cd0a2bc8740fe9ee8d378767e",
                "deletions": 5,
                "filename": "dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaObjectInput.java",
                "patch": "@@ -40,12 +40,15 @@ public JavaObjectInput(InputStream is, boolean compacted) throws IOException {\n     @Override\n     public byte[] readBytes() throws IOException {\n         int len = getObjectInputStream().readInt();\n-        if (len < 0)\n+        if (len < 0) {\n             return null;\n-        if (len == 0)\n+        }\n+        if (len == 0) {\n             return new byte[0];\n-        if (len > MAX_BYTE_ARRAY_LENGTH)\n+        }\n+        if (len > MAX_BYTE_ARRAY_LENGTH) {\n             throw new IOException(\"Byte array length too large. \" + len);\n+        }\n \n         byte[] b = new byte[len];\n         getObjectInputStream().readFully(b);\n@@ -55,17 +58,19 @@ public JavaObjectInput(InputStream is, boolean compacted) throws IOException {\n     @Override\n     public String readUTF() throws IOException {\n         int len = getObjectInputStream().readInt();\n-        if (len < 0)\n+        if (len < 0) {\n             return null;\n+        }\n \n         return getObjectInputStream().readUTF();\n     }\n \n     @Override\n     public Object readObject() throws IOException, ClassNotFoundException {\n         byte b = getObjectInputStream().readByte();\n-        if (b == 0)\n+        if (b == 0) {\n             return null;\n+        }\n \n         return getObjectInputStream().readObject();\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/6938d487a388cc8cd0a2bc8740fe9ee8d378767e/dubbo-serialization/dubbo-serialization-jdk/src/main/java/org/apache/dubbo/common/serialize/java/JavaObjectInput.java",
                "sha": "00e712e6e97c500726339c97faca333eb6946f64",
                "status": "modified"
            }
        ],
        "message": "Code format (#2662)\n\n* NullPointerException\r\n\r\n* code rule",
        "parent": "https://github.com/apache/dubbo/commit/dd950acaebb67aab19b2303a6ba11c6904d25194",
        "patched_files": [
            "SimpleDataStore.java",
            "StreamUtils.java",
            "Proxy.java",
            "PojoUtils.java",
            "Log.java",
            "EchoFilter.java",
            "JSON.java",
            "ReflectUtils.java",
            "UnsafeStringReader.java",
            "Stack.java",
            "DubboProtocol.java",
            "IOUtils.java",
            "StringUtils.java",
            "FastJsonObjectInput.java",
            "JdkCompiler.java",
            "JSONReader.java",
            "UrlUtils.java",
            "HeaderExchangeHandler.java",
            "NettyClient.java",
            "Mixin.java",
            "Wrapper.java",
            "AbstractClusterInvoker.java",
            "JavaBeanSerializeUtil.java",
            "RedisProtocol.java",
            "URL.java",
            "NetUtils.java",
            "ReferenceConfig.java",
            "AbstractConfig.java",
            "RegistryConfig.java",
            "ReferenceConfigCache.java",
            "ClassGenerator.java",
            "ThriftProtocol.java",
            "JSONWriter.java",
            "ExtensionLoader.java",
            "LogUtil.java",
            "UnsafeByteArrayOutputStream.java",
            "UnsafeStringWriter.java",
            "Bytes.java",
            "AtomicPositiveInteger.java",
            "UnsafeByteArrayInputStream.java",
            "CollectionUtils.java",
            "ExchangeCodec.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "AbstractConfigTest.java",
            "StringUtilsTest.java",
            "UnsafeByteArrayOutputStreamTest.java",
            "BytesTest.java",
            "AbstractClusterInvokerTest.java",
            "ReferenceConfigTest.java",
            "ReflectUtilsTest.java",
            "UnsafeByteArrayInputStreamTest.java",
            "JavaBeanSerializeUtilTest.java",
            "AtomicPositiveIntegerTest.java",
            "StackTest.java",
            "UrlUtilsTest.java",
            "EchoFilterTest.java",
            "NettyClientTest.java",
            "NetUtilsTest.java",
            "UnsafeStringWriterTest.java",
            "ExtensionLoaderTest.java",
            "JSONReaderTest.java",
            "LogTest.java",
            "ReferenceConfigCacheTest.java",
            "UnsafeStringReaderTest.java",
            "MixinTest.java",
            "JSONWriterTest.java",
            "HeaderExchangeHandlerTest.java",
            "PojoUtilsTest.java",
            "JdkCompilerTest.java",
            "SimpleDataStoreTest.java",
            "ThriftProtocolTest.java",
            "ProxyTest.java",
            "CollectionUtilsTest.java",
            "ClassGeneratorTest.java",
            "JSONTest.java",
            "WrapperTest.java",
            "IOUtilsTest.java",
            "LogUtilTest.java",
            "DubboProtocolTest.java",
            "StreamUtilsTest.java",
            "RegistryConfigTest.java",
            "ExchangeCodecTest.java",
            "RedisProtocolTest.java",
            "URLTest.java",
            "FastJsonObjectInputTest.java"
        ]
    },
    "dubbo_6dcd593": {
        "bug_id": "dubbo_6dcd593",
        "commit": "https://github.com/apache/dubbo/commit/6dcd5938c30cb3994f08c3ea93089473234500ca",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/6dcd5938c30cb3994f08c3ea93089473234500ca/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java?ref=6dcd5938c30cb3994f08c3ea93089473234500ca",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "patch": "@@ -27,6 +27,10 @@\n @Deprecated\n public class URL extends org.apache.dubbo.common.URL {\n \n+    protected URL() {\n+        super();\n+    }\n+\n     public URL(org.apache.dubbo.common.URL url) {\n         super(url.getProtocol(), url.getUsername(), url.getPassword(), url.getHost(), url.getPort(), url.getPath(), url.getParameters());\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/6dcd5938c30cb3994f08c3ea93089473234500ca/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "sha": "42bab29301816ebce3b8c8675a47727d1f950607",
                "status": "modified"
            }
        ],
        "message": "add no-argument constructor method to URL.java fix #3342 (#3350)\n\n* Fix NullPointerException when Hessian instantiate URL with JavaDeserializer",
        "parent": "https://github.com/apache/dubbo/commit/a6d55faf75bd77e9b6b0ccdf6290da11e1f4b619",
        "patched_files": [
            "URL.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "URLTest.java"
        ]
    },
    "dubbo_7285ce9": {
        "bug_id": "dubbo_7285ce9",
        "commit": "https://github.com/apache/dubbo/commit/7285ce9bf2ed8ec56d06fb0b3c7b0f1d7aa81192",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/7285ce9bf2ed8ec56d06fb0b3c7b0f1d7aa81192/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java?ref=7285ce9bf2ed8ec56d06fb0b3c7b0f1d7aa81192",
                "deletions": 1,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "patch": "@@ -366,7 +366,7 @@ private static Object realize0(Object pojo, Class<?> type, Type genericType, fin\n                 history.put(pojo, dest);\r\n                 for (Object obj : src) {\r\n                     Type keyType = getGenericClassByIndex(genericType, 0);\r\n-                    Class<?> keyClazz = obj.getClass();\r\n+                    Class<?> keyClazz = obj == null ? null : obj.getClass();\r\n                     if (keyType instanceof Class) {\r\n                         keyClazz = (Class<?>) keyType;\r\n                     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/7285ce9bf2ed8ec56d06fb0b3c7b0f1d7aa81192/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "sha": "52204acb4dd76bc606a3760e64f82065baa40739",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/dubbo/blob/7285ce9bf2ed8ec56d06fb0b3c7b0f1d7aa81192/dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java?ref=7285ce9bf2ed8ec56d06fb0b3c7b0f1d7aa81192",
                "deletions": 0,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java",
                "patch": "@@ -37,6 +37,7 @@\n import java.util.LinkedHashMap;\r\n import java.util.LinkedList;\r\n import java.util.List;\r\n+import java.util.HashSet;\r\n import java.util.Map;\r\n import java.util.UUID;\r\n \r\n@@ -682,6 +683,24 @@ public void testDateTimeTimestamp() throws Exception {\n         assertEquals(dateTimeStr, new SimpleDateFormat(dateFormat[0]).format(timestamp));\r\n     }\r\n \r\n+    @Test\r\n+    public void testRealizeCollectionWithNullElement() {\r\n+        LinkedList<String> listStr = new LinkedList<>();\r\n+        listStr.add(\"arrayValue\");\r\n+        listStr.add(null);\r\n+        HashSet<String> setStr = new HashSet<>();\r\n+        setStr.add(\"setValue\");\r\n+        setStr.add(null);\r\n+\r\n+        Object listResult = PojoUtils.realize(listStr, LinkedList.class);\r\n+        assertEquals(LinkedList.class, listResult.getClass());\r\n+        assertEquals(listResult, listStr);\r\n+\r\n+        Object setResult = PojoUtils.realize(setStr, HashSet.class);\r\n+        assertEquals(HashSet.class, setResult.getClass());\r\n+        assertEquals(setResult, setStr);\r\n+    }\r\n+\r\n     public enum Day {\r\n         SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY\r\n     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/7285ce9bf2ed8ec56d06fb0b3c7b0f1d7aa81192/dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java",
                "sha": "f0ab173b4f85329397013d5f6417abe27a0c8c85",
                "status": "modified"
            }
        ],
        "message": "[Dubbo-4299]Fix NPE when PojoUtils realize Null element in collection(#4299) (#4300)\n\n* fix NPE when PojoUtils realize Null element in collection(#4299)\r\n\r\n* add unit tests for bugfix of PojoUtils NPE(#4299)\r\n\r\n* revert import (#4299)",
        "parent": "https://github.com/apache/dubbo/commit/fa619c9842113ca320e0f72050987f77a6c7f92f",
        "patched_files": [
            "PojoUtils.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "PojoUtilsTest.java"
        ]
    },
    "dubbo_895a4dd": {
        "bug_id": "dubbo_895a4dd",
        "commit": "https://github.com/apache/dubbo/commit/895a4dd690f8190a972e9d4ae370bf5b1c8700c7",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/dubbo/blob/895a4dd690f8190a972e9d4ae370bf5b1c8700c7/dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RpcContextFilter.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RpcContextFilter.java?ref=895a4dd690f8190a972e9d4ae370bf5b1c8700c7",
                "deletions": 5,
                "filename": "dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RpcContextFilter.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import org.apache.dubbo.common.utils.StringUtils;\n import org.apache.dubbo.rpc.RpcContext;\n-\n import org.jboss.resteasy.spi.ResteasyProviderFactory;\n \n import javax.annotation.Priority;\n@@ -70,19 +69,35 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n     public void filter(ClientRequestContext requestContext) throws IOException {\n         int size = 0;\n         for (Map.Entry<String, String> entry : RpcContext.getContext().getAttachments().entrySet()) {\n-            if (entry.getValue().contains(\",\") || entry.getValue().contains(\"=\")\n-                    || entry.getKey().contains(\",\") || entry.getKey().contains(\"=\")) {\n+            String key = entry.getKey();\n+            String value = entry.getKey();\n+            if (illegalForRest(key) || illegalForRest(value)) {\n                 throw new IllegalArgumentException(\"The attachments of \" + RpcContext.class.getSimpleName() + \" must not contain ',' or '=' when using rest protocol\");\n             }\n \n             // TODO for now we don't consider the differences of encoding and server limit\n-            size += entry.getValue().getBytes(\"UTF-8\").length;\n+            if (value != null) {\n+                size += value.getBytes(\"UTF-8\").length;\n+            }\n             if (size > MAX_HEADER_SIZE) {\n                 throw new IllegalArgumentException(\"The attachments of \" + RpcContext.class.getSimpleName() + \" is too big\");\n             }\n \n-            String attachments = entry.getKey() + \"=\" + entry.getValue();\n+            String attachments = key + \"=\" + value;\n             requestContext.getHeaders().add(DUBBO_ATTACHMENT_HEADER, attachments);\n         }\n     }\n+\n+    /**\n+     * If a string value illegal for rest protocol(',' and '=' is illegal for rest protocol).\n+     *\n+     * @param v string value\n+     * @return true for illegal\n+     */\n+    private boolean illegalForRest(String v) {\n+        if (StringUtils.isNotEmpty(v)) {\n+            return v.contains(\",\") || v.contains(\"=\");\n+        }\n+        return false;\n+    }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/895a4dd690f8190a972e9d4ae370bf5b1c8700c7/dubbo-rpc/dubbo-rpc-rest/src/main/java/org/apache/dubbo/rpc/protocol/rest/RpcContextFilter.java",
                "sha": "ae9e813ddc23f23af966dd59db4c41773d784855",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/dubbo/blob/895a4dd690f8190a972e9d4ae370bf5b1c8700c7/dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java?ref=895a4dd690f8190a972e9d4ae370bf5b1c8700c7",
                "deletions": 0,
                "filename": "dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java",
                "patch": "@@ -128,6 +128,27 @@ public void testFilter() {\n         exporter.unexport();\n     }\n \n+    @Test\n+    public void testRpcContextFilter() {\n+        ServiceClassHolder.getInstance().pushServiceClass(DemoService.class);\n+\n+        // use RpcContextFilter\n+        URL nettyUrl = exportUrl.addParameter(Constants.SERVER_KEY, \"netty\")\n+                .addParameter(Constants.EXTENSION_KEY, \"org.apache.dubbo.rpc.protocol.rest.RpcContextFilter\");\n+        Exporter<IDemoService> exporter = protocol.export(proxy.getInvoker(new DemoService(), IDemoService.class, nettyUrl));\n+\n+        IDemoService demoService = this.proxy.getProxy(protocol.refer(IDemoService.class, nettyUrl));\n+\n+        String value = null;\n+        // put a null value into attachment.\n+        RpcContext.getContext().setAttachment(\"key\", value);\n+        Integer result = demoService.hello(1, 2);\n+\n+        assertThat(result, is(3));\n+\n+        exporter.unexport();\n+    }\n+\n     @Test(expected = RuntimeException.class)\n     public void testRegFail() {\n         ServiceClassHolder.getInstance().pushServiceClass(DemoService.class);",
                "raw_url": "https://github.com/apache/dubbo/raw/895a4dd690f8190a972e9d4ae370bf5b1c8700c7/dubbo-rpc/dubbo-rpc-rest/src/test/java/org/apache/dubbo/rpc/protocol/rest/RestProtocolTest.java",
                "sha": "a698d0c3e2584546875f77a90c973d27b08b9771",
                "status": "modified"
            }
        ],
        "message": "Judge null for key and value in attachment in RpcContextFilter. (#2171)\n\n* Judge null for key and value in attachment in RpcContextFilter.\r\nIf not, NullPointerException will be thrown in RpcContextFilter in some case.\r\n\r\n* optimize code",
        "parent": "https://github.com/apache/dubbo/commit/9f21b9f8461cd8422ecd590df6854b045162dd1b",
        "patched_files": [
            "RpcContextFilter.java",
            "RestProtocol.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "RestProtocolTest.java"
        ]
    },
    "dubbo_897b80d": {
        "bug_id": "dubbo_897b80d",
        "commit": "https://github.com/apache/dubbo/commit/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/.travis.yml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/.travis.yml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": ".travis.yml",
                "patch": "@@ -2,7 +2,9 @@ language: java\n sudo: false # faster builds\n \n jdk:\n+  - openjdk11\n   - oraclejdk11\n+  - openjdk8\n   - oraclejdk8\n \n cache:\n@@ -16,3 +18,6 @@ script:\n \n after_success:\n   - bash <(curl -s https://codecov.io/bash)\n+\n+after_failure:\n+  - if [ -f dubbo.log ]; then echo \"------TAIL of dubbo.log------\"; tail -n 1000 dubbo.log; echo \"------END of dubbo.log------\"; fi",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/.travis.yml",
                "sha": "e3821cb4c32cefd4a9da71039490a3a6d3b309fd",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/CHANGES.md",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/CHANGES.md?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 31,
                "filename": "CHANGES.md",
                "patch": "@@ -1,61 +1,68 @@\n # Release Notes\n \n ## 2.7.0\n-\u73af\u5883\u8981\u6c42\uff1a\u9700\u8981Java 8\u53ca\u4ee5\u4e0a\u7248\u672c\u652f\u6301\n \n-\u8bf7\u5728[\u8fd9\u91cc]()\u4e86\u89e3\u5173\u4e8e\u5347\u7ea72.7.x\u7248\u672c\u7684\u6ce8\u610f\u4e8b\u9879\u548c\u517c\u5bb9\u6027\u95ee\u9898\n+Requirements: **Java 8+** required\n \n-## New Features\n+Please check [here](https://github.com/apache/incubator-dubbo/blob/2.7.0-release/CHANGES.md#upgrading-and-compatibility-notifications) for notes and possible compatibility issues for upgrading from 2.6.x or lower to 2.7.0.\n \n-- \u670d\u52a1\u6cbb\u7406\u89c4\u5219\u589e\u5f3a\u3002\n-  - \u66f4\u4e30\u5bcc\u7684\u670d\u52a1\u6cbb\u7406\u89c4\u5219\uff0c\u65b0\u589e\u5e94\u7528\u7ea7\u522b\u6761\u4ef6\u8def\u7531\u3001Tag\u8def\u7531\u7b49\n-  - \u6cbb\u7406\u89c4\u5219\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u89e3\u8026\uff0c\u589e\u52a0\u5bf9Apollo\u7b49\u7b2c\u4e09\u65b9\u4e13\u4e1a\u914d\u7f6e\u4e2d\u5fc3\u7684\u652f\u6301\uff0c\u66f4\u6613\u4e8e\u6269\u5c55\n-  -  \u65b0\u589e\u5e94\u7528\u7ea7\u522b\u7684\u52a8\u6001\u914d\u7f6e\u89c4\u5219\n-  -  \u89c4\u5219\u4f53\u4f7f\u7528\u66f4\u6613\u8bfb\u3001\u6613\u7528YAML\u683c\u5f0f\n+### New Features\n \n-- \u5916\u90e8\u5316\u914d\u7f6e\u3002\u652f\u6301\u8bfb\u53d6\u6258\u7ba1\u5728\u8fdc\u7a0b\u7684\u96c6\u4e2d\u5f0f\u914d\u7f6e\u4e2d\u5fc3\u7684dubbo.properties\uff0c\u5b9e\u73b0\u5e94\u7528\u914d\u7f6e\u7684\u96c6\u4e2d\u5f0f\u7ba1\u63a7\u3002\n+- Enhancement of service governance rules.\n+  - Enriched Routing Rules.\n+    1. Conditional Routing. Supports both application-level and service-level conditions.\n+    2. Tag Routing. Newly introduced to better support traffic isolation, such as grey deployment.\n+  - Decoupling governance rules with the registry, making it easier to extend. Apollo and Zookeeper are available in this version. Nacos support is on the way...\n+  - Application-level Dynamic Configuration support.\n+  - Use YAML as the configuration language, which is more friendly to read and use.\n \n-- \u66f4\u7cbe\u70bc\u7684\u6ce8\u518c\u4e2d\u5fc3URL\uff0c\u8fdb\u4e00\u6b65\u51cf\u8f7b\u6ce8\u518c\u4e2d\u5fc3\u5b58\u50a8\u548c\u540c\u6b65\u538b\u529b\uff0c\u521d\u6b65\u5b9e\u73b0\u5730\u5740\u548c\u914d\u7f6e\u7684\u804c\u8d23\u5206\u79bb\u3002\n+- Externalized Configuration. Supports reading `dubbo.properties` hosted in remote centralized configuration center - centralized configuration.\n \n-- \u65b0\u589e\u670d\u52a1\u5143\u6570\u636e\u4e2d\u5fc3\uff0c\u8d1f\u8d23\u5b58\u50a8\u5305\u62ec\u670d\u52a1\u9759\u6001\u5316\u914d\u7f6e\u3001\u670d\u52a1\u5b9a\u4e49\uff08\u5982\u65b9\u6cd5\u7b7e\u540d\uff09\u7b49\u6570\u636e\uff0c\u9ed8\u8ba4\u63d0\u4f9bZookeeper, Redis\u652f\u6301\u3002\u6b64\u529f\u80fd\u4e5f\u662fOPS\u5b9e\u73b0\u670d\u52a1\u6d4b\u8bd5\u3001Mock\u7b49\u6cbb\u7406\u80fd\u529b\u7684\u57fa\u7840\u3002\n+- Simplified registry URL. With lower Registry memory use and less notification pressure from Service Directory, separates Configuration notification from Service Discovery.\n \n-- \u5f02\u6b65\u7f16\u7a0b\u6a21\u5f0f\u589e\u5f3a\uff08\u9650\u5b9a\u4e8eDubbo\u534f\u8bae\uff09\n-  - \u539f\u751fCompletableFuture<T>\u7b7e\u540d\u63a5\u53e3\u652f\u6301\n-  - \u670d\u52a1\u7aef\u5f02\u6b65\u652f\u6301\n-  - \u5f02\u6b65Filter\u94fe\n+- Metadata Center. A totally new concept since 2.7.0,  used to store service metadata including static configuration, service definition, method signature, etc.. By default, Zookeeper and Redis are supported as the backend storage. Will work as the basis of service testing, mock and other service governance features going to be supported in [Dubbo-Admin](https://github.com/apache/incubator-dubbo-admin).\n \n-- \u65b0\u589eProtobuf\u5e8f\u5217\u5316\u534f\u8bae\u6269\u5c55\n+- Asynchronous Programming Model (only works for Dubbo protocol now)\n+  - Built-in support for the method with CompletableFuture<T> signature.\n+  - Server-side asynchronous support, with an AsyncContext API works like Servlet 3.0.\n+  - Asynchronous filter chain callback.\n \n-- \u65b0\u589eExpiringCache\u7f13\u5b58\u7b56\u7565\u6269\u5c55\n+- Serialization Extension: Protobuf.\n \n-## Enhancements / Bugfixes\n+- Caching Policy Extension: Expiring Cache.\n \n-- \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u4f18\u5316\uff0c\u5305\u62ecConsitentHash(#2190) \u3001LeastActive(#2171)\u3001Random(#2597) \u3001RoundRobin(#2586) (#2650)\n+### Enhancements / Bugfixes\n \n-- \u5347\u7ea7\u7b2c\u4e09\u65b9\u4f9d\u8d56\uff1a\u9ed8\u8ba4\u901a\u4fe1\u6846\u67b6\u4e3anetty 4\u3001\u9ed8\u8ba4ZK\u5ba2\u6237\u7aef\u4e3aCurator\u3001Jetty 9k\n+- Load Balancing strategy enhancement: ConsitentHash #2190, LeastActive #2171, Random #2597, RoundRobin #2650.\n \n-- \u589e\u52a0\u5730\u5740\u8bfb\u53d6\u65f6\u5bf9IPV6\u7684\u652f\u6301(#2079)\n+- Third-party dependency upgrading.\n+  - Switch default remoting to Netty 4.\n+  - Switch default Zookeeper client to Curator.\n+  - Upgrade Jetty to 9.x.\n \n-- \u6027\u80fd\u4f18\u5316\uff0c\u94fe\u63a5\u5173\u95ed\u7684\u60c5\u51b5\u4e0b\u4f7f\u5f97Consumer\u5feb\u901f\u8fd4\u56de  (#2185)\n+- IPV6 support #2079.\n \n-- \u4fee\u590dJdk\u539f\u751f\u7c7b\u578b\u5728kryo\u4e2d\u7684\u5e8f\u5217\u5316\u95ee\u9898 (#2178)\n+- Performance tuning, check hanging requests on a closed channel, make them return directly #2185.\n \n-- \u4fee\u590dProvider\u7aef\u53cd\u5e8f\u5217\u5316\u5931\u8d25\u540e\uff0c\u6ca1\u6709\u53ca\u65e9\u901a\u77e5Consumer\u7aef\u7684\u95ee\u9898 (#1903)\n+- Fixed the serialization problem of JDK primitive types in Kryo #2178.\n \n+- Fixed the problem of failing to notify Consumer as early as possible after the Provider side deserialization failed #1903.\n \n-## \u5347\u7ea7\u4e0e\u517c\u5bb9\u6027\n+### Upgrading and Compatibility Notifications\n \n-\u6b64\u6b21\u7248\u672c\u53d1\u5e03\u6211\u4eec\u9075\u5faa\u4e86\u4fdd\u6301\u548c\u8001\u7248\u672c\u517c\u5bb9\u7684\u539f\u5219\uff0c\u5c24\u5176\u662f\u5728\u4e00\u4e9b\u53ef\u80fd\u4f1a\u7834\u574f2.7\u7248\u672c\u4e0e\u4f4e\u7248\u672c\u4e92\u64cd\u4f5c\u6027\u7684\u95ee\u9898\u4e0a\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e9b\u517c\u5bb9\u6027\u4ee3\u7801\uff0c\u5178\u578b\u5982\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u3001Package\u91cd\u547d\u540d\u3001\u6ce8\u518cURL\u7b80\u5316\u7b49\u3002\n+We have always keep compatibility in mind during the whole process of 2.7.0. We even want old users to upgrade with only on pom version upgrade, but it's hard to achieve that, especially when considering that we have the package renamed in this version, so we had some tradeoffs. If you only used the Dubbo's most basic features, you may have little problems of upgrading, but if you have used some advanced features or have some SPI extensions inside, you'd better read the upgrade notifications carefully. The compatibility issues can be classified into the following 5 categories, for each part, there will have detailed dos and don'ts published later in the official website.\n \n-1. Package\u91cd\u547d\u540d\n+1. Interoperability between 2.7.0 and lower versions\n \n-com.alibaba.dubbo -> org.apache.dubbo\n+2. Package renaming\n \n-2. \u6ce8\u518cURL\u7b80\u5316\n+   com.alibaba.dubbo -> org.apache.dubbo\n \n-3. \u670d\u52a1\u6cbb\u7406\u89c4\u5219\n+3. Simplification of registered URLs\n \n-4. \u914d\u7f6e\n+4. Service Governance Rules\n+\n+5. Configuration\n \n \n ## 2.6.5",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/CHANGES.md",
                "sha": "78711ebbb4925e6c3214bd0ea6750bd8dfb341ec",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/CONTRIBUTING.md",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/CONTRIBUTING.md?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "CONTRIBUTING.md",
                "patch": "@@ -13,7 +13,7 @@ The mailing list is the recommended way for discussing almost anything that rela\n \n - [dev@dubbo.incubator.apache.org](mailto:dev-subscribe@dubbo.incubator.apache.org): the develop mailing list, you can ask question here if you have encountered any problem when using or developing Dubbo.\n - [commits@dubbo.incubator.apache.org](mailto:commits-subscribe@dubbo.incubator.apache.org): all the commits will be sent to this mailing list. You can subscribe to it if you are interested in Dubbo's development.\n-- [notification@dubbo.incubator.apache.org](mailto:notification-subscribe@dubbo.incubator.apache.org): all the Github [issue](https://github.com/apache/incubator-dubbo/issues) updates and [pull request](https://github.com/apache/incubator-dubbo/pulls) updates will be sent to this mailing list.\n+- [notifications@dubbo.incubator.apache.org](mailto:notifications-subscribe@dubbo.incubator.apache.org): all the Github [issue](https://github.com/apache/incubator-dubbo/issues) updates and [pull request](https://github.com/apache/incubator-dubbo/pulls) updates will be sent to this mailing list.\n \n ### Reporting issue\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/CONTRIBUTING.md",
                "sha": "e5ed3a9ee9b86e161a7b9ae79b2320a86611564c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/LICENSE",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/LICENSE?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 9,
                "filename": "LICENSE",
                "patch": "@@ -208,15 +208,6 @@ Apache Dubbo includes a number of submodules with separate copyright notices\n and license terms. Your use of these submodules is subject to the terms and\n conditions of the following licenses.\n \n-For the org.apache.dubbo.common.concurrent package:\n-\n-This product bundles and repackages the following code in Google Guava 16.0.1, which is available under a\n-\"Apache License 2.0\" license. For details, see https://github.com/google/guava/blob/v16.0.1/COPYING.\n-\n- * com.google.common.util.concurrent.ExecutionList\n- * com.google.common.util.concurrent.ListenableFuture\n- * com.google.common.util.concurrent.ListenableFutureTask\n-\n For the package org.apache.dubbo.common.threadlocal and org.apache.dubbo.common.timer:\n \n This product contains a modified portion of 'Netty', an event-driven asynchronous network application framework also\n@@ -229,3 +220,8 @@ This product contains a modified portion of 'Netty', an event-driven asynchronou\n  * io.netty.util.Timeout\n  * io.netty.util.HashedWheelTimer\n \n+For the org.apache.dubbo.common.utils.CIDRUtils :\n+\n+This product contains a modified portion of 'edazdarevic.commons.net.CIDRUtils',\n+ under a \"MIT License\" license, see https://github.com/edazdarevic/CIDRUtils/blob/master/CIDRUtils.java\n+",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/LICENSE",
                "sha": "11eea3b82db02c90f39e754b8fb8d34942db9ae0",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/README.md",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/README.md?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 28,
                "filename": "README.md",
                "patch": "@@ -2,7 +2,7 @@\n \n [![Build Status](https://travis-ci.org/apache/incubator-dubbo.svg?branch=master)](https://travis-ci.org/apache/incubator-dubbo)\n [![codecov](https://codecov.io/gh/apache/incubator-dubbo/branch/master/graph/badge.svg)](https://codecov.io/gh/apache/incubator-dubbo)\n-![maven](https://img.shields.io/maven-central/v/com.alibaba/dubbo.svg)\n+![maven](https://img.shields.io/maven-central/v/org.apache.dubbo/dubbo.svg)\n ![license](https://img.shields.io/github/license/alibaba/dubbo.svg)\n [![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/apache/incubator-dubbo.svg)](http://isitmaintained.com/project/apache/incubator-dubbo \"Average time to resolve an issue\")\n [![Percentage of issues still open](http://isitmaintained.com/badge/open/apache/incubator-dubbo.svg)](http://isitmaintained.com/project/apache/incubator-dubbo \"Percentage of issues still open\")\n@@ -29,26 +29,26 @@ We are now collecting dubbo user info in order to help us to improve Dubbo bette\n \n ## Getting started\n \n-The following code snippet comes from [Dubbo Samples](https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-api). You may clone the sample project and step into `dubbo-samples-api` sub directory before read on.\n+The following code snippet comes from [Dubbo Samples](https://github.com/apache/incubator-dubbo-samples/tree/master/dubbo-samples-api). You may clone the sample project and step into `dubbo-samples-api` sub directory before read on.\n \n ```bash\n-# git clone https://github.com/dubbo/dubbo-samples.git\n-# cd dubbo-samples/dubbo-samples-api\n+# git clone https://github.com/apache/incubator-dubbo-samples.git\n+# cd incubator-dubbo-samples/dubbo-samples-api\n ```\n \n-There's a [README](https://github.com/dubbo/dubbo-samples/blob/master/dubbo-samples-api/README.md) file under `dubbo-samples-api` directory. Read it and try this sample out by following the instructions.\n+There's a [README](https://github.com/apache/incubator-dubbo-samples/tree/master/dubbo-samples-api/README.md) file under `dubbo-samples-api` directory. Read it and try this sample out by following the instructions.\n \n ### Maven dependency\n \n ```xml\n <properties>\n-    <dubbo.version>2.6.5</dubbo.version>\n+    <dubbo.version>2.7.0</dubbo.version>\n </properties>\n     \n <dependencyManagement>\n     <dependencies>\n         <dependency>\n-            <groupId>com.alibaba</groupId>\n+            <groupId>org.apache.dubbo</groupId>\n             <artifactId>dubbo-dependencies-bom</artifactId>\n             <version>${dubbo.version}</version>\n             <type>pom</type>\n@@ -59,35 +59,47 @@ There's a [README](https://github.com/dubbo/dubbo-samples/blob/master/dubbo-samp\n \n <dependencies>\n     <dependency>\n-        <groupId>com.alibaba</groupId>\n+        <groupId>org.apache.dubbo</groupId>\n         <artifactId>dubbo</artifactId>\n         <version>${dubbo.version}</version>\n     </dependency>\n     <dependency>\n         <groupId>io.netty</groupId>\n         <artifactId>netty-all</artifactId>\n     </dependency>\n+    <dependency>\n+        <groupId>org.apache.curator</groupId>\n+        <artifactId>curator-framework</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>org.apache.curator</groupId>\n+        <artifactId>curator-recipes</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>org.apache.zookeeper</groupId>\n+        <artifactId>zookeeper</artifactId>\n+    </dependency>\n </dependencies>\n ```\n \n ### Define service interfaces\n \n ```java\n-package org.apache.dubbo.demo.api;\n+package org.apache.dubbo.samples.api;\n \n public interface GreetingService {\n     String sayHello(String name);\n }\n ```\n \n-*See [api/GreetingService.java](https://github.com/dubbo/dubbo-samples/blob/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/api/GreetingsService.java) on GitHub.*\n+*See [api/GreetingService.java](https://github.com/apache/incubator-dubbo-samples/blob/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/api/GreetingsService.java) on GitHub.*\n \n ### Implement service interface for the provider\n \n ```java\n-package org.apache.dubbo.demo.provider;\n+package org.apache.dubbo.samples.provider;\n  \n-import org.apache.dubbo.demo.GreetingService;\n+import org.apache.dubbo.samples.api.GreetingService;\n  \n public class GreetingServiceImpl implements GreetingService {\n     public String sayHello(String name) {\n@@ -96,17 +108,17 @@ public class GreetingServiceImpl implements GreetingService {\n }\n ```\n \n-*See [provider/GreetingServiceImpl.java](https://github.com/dubbo/dubbo-samples/blob/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/provider/GreetingsServiceImpl.java) on GitHub.*\n+*See [provider/GreetingServiceImpl.java](https://github.com/apache/incubator-dubbo-samples/blob/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/provider/GreetingsServiceImpl.java) on GitHub.*\n \n ### Start service provider\n \n ```java\n package org.apache.dubbo.demo.provider;\n \n-import com.alibaba.dubbo.config.ApplicationConfig;\n-import com.alibaba.dubbo.config.RegistryConfig;\n-import com.alibaba.dubbo.config.ServiceConfig;\n-import org.apache.dubbo.demo.GreetingService;\n+import org.apache.dubbo.config.ApplicationConfig;\n+import org.apache.dubbo.config.RegistryConfig;\n+import org.apache.dubbo.config.ServiceConfig;\n+import org.apache.dubbo.samples.api.GreetingService;\n \n import java.io.IOException;\n  \n@@ -124,7 +136,7 @@ public class Application {\n }\n ```\n \n-*See [provider/Application.java](https://github.com/dubbo/dubbo-samples/blob/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/provider/Application.java) on GitHub.*\n+*See [provider/Application.java](https://github.com/apache/incubator-dubbo-samples/blob/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/provider/Application.java) on GitHub.*\n \n ### Build and run the provider\n \n@@ -138,10 +150,10 @@ public class Application {\n ```java\n package org.apache.dubbo.demo.consumer;\n \n-import com.alibaba.dubbo.config.ApplicationConfig;\n-import com.alibaba.dubbo.config.ReferenceConfig;\n-import com.alibaba.dubbo.config.RegistryConfig;\n-import org.apache.dubbo.demo.GreetingService;\n+import org.apache.dubbo.config.ApplicationConfig;\n+import org.apache.dubbo.config.ReferenceConfig;\n+import org.apache.dubbo.config.RegistryConfig;\n+import org.apache.dubbo.samples.api.GreetingService;\n \n public class Application {\n     public static void main(String[] args) {\n@@ -164,7 +176,7 @@ public class Application {\n \n The consumer will print out `Hello world` on the screen.\n \n-*See [consumer/Application.java](https://github.com/dubbo/dubbo-samples/blob/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/consumer/Application.java) on GitHub.*\n+*See [consumer/Application.java](https://github.com/apache/incubator-dubbo-samples/blob/master/dubbo-samples-api/src/main/java/org/apache/dubbo/samples/consumer/Application.java) on GitHub.*\n \n ### Next steps\n \n@@ -197,7 +209,7 @@ See\u00a0[CONTRIBUTING](https://github.com/apache/incubator-dubbo/blob/master/CONTRI\n   * blog post\n   * translation on documentation\n   * use cases about how Dubbo is being used in enterprise system.\n-* Improve the [dubbo-ops/dubbo-monitor](https://github.com/apache/incubator-dubbo-ops).\n+* Improve the [dubbo-admin/dubbo-monitor](https://github.com/apache/incubator-dubbo-admin).\n * Contribute to the projects listed in [ecosystem](https://github.com/dubbo).\n * Any form of contribution that is not mentioned above.\n * If you would like to contribute, please send an email to dev@dubbo.incubator.apache.org to let us know!\n@@ -208,21 +220,22 @@ Please follow the [template](https://github.com/apache/incubator-dubbo/issues/ne\n \n ## Reporting a security vulnerability\n \n-Please report security vulnerability to [us](security@dubbo.incubator.apache.org) privately.\n+Please report security vulnerability to [us](mailto:security@dubbo.incubator.apache.org) privately.\n \n-## Dubbo eco system\n+## Dubbo ecosystem\n \n * [Dubbo Ecosystem Entry](https://github.com/dubbo) - A GitHub group `dubbo` to gather all Dubbo relevant projects not appropriate in [apache](https://github.com/apache) group yet\n * [Dubbo Website](https://github.com/apache/incubator-dubbo-website) - Apache Dubbo (incubating) official website\n-* [Dubbo Samples](https://github.com/dubbo/dubbo-samples) - samples for Apache Dubbo (incubating)\n+* [Dubbo Samples](https://github.com/apache/incubator-dubbo-samples) - samples for Apache Dubbo (incubating)\n * [Dubbo Spring Boot](https://github.com/apache/incubator-dubbo-spring-boot-project) - Spring Boot Project for Dubbo\n-* [Dubbo OPS](https://github.com/apache/incubator-dubbo-ops) - The reference implementation for Dubbo admin\n+* [Dubbo Admin](https://github.com/apache/incubator-dubbo-admin) - The reference implementation for Dubbo admin\n \n #### Language\n \n * [Node.js](https://github.com/dubbo/dubbo2.js)\n * [Python](https://github.com/dubbo/dubbo-client-py)\n * [PHP](https://github.com/dubbo/dubbo-php-framework)\n+* [Go](https://github.com/dubbo/dubbo-go)\n \n ## License\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/README.md",
                "sha": "09c12ffa974f86a0851301547cf79d9adcd42b54",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/codestyle/checkstyle.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/codestyle/checkstyle.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "codestyle/checkstyle.xml",
                "patch": "@@ -20,6 +20,7 @@\n         <module name=\"NoLineWrap\"/>\n         <module name=\"OuterTypeFilename\"/>\n         <module name=\"UnusedImports\"/>\n+        <module name=\"RedundantImport\"/>\n \n         <!--<module name=\"CustomImportOrder\">-->\n         <!--<property name=\"specialImportsRegExp\" value=\"org.apache.dubbo.*\"/>-->",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/codestyle/checkstyle.xml",
                "sha": "fa4d735a785db332dbe64cb5a4fa80dac04f9f3c",
                "status": "modified"
            },
            {
                "additions": 76,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-all/pom.xml",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-all/pom.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 9,
                "filename": "dubbo-all/pom.xml",
                "patch": "@@ -19,11 +19,11 @@\n     <parent>\n         <groupId>org.apache.dubbo</groupId>\n         <artifactId>dubbo-parent</artifactId>\n-        <version>2.7.0-SNAPSHOT</version>\n+        <version>2.7.1-SNAPSHOT</version>\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n     <artifactId>dubbo</artifactId>\n-    <version>2.7.0-SNAPSHOT</version>\n+    <version>2.7.1-SNAPSHOT</version>\n     <packaging>jar</packaging>\n     <name>dubbo-all</name>\n     <description>The all in one project of dubbo</description>\n@@ -234,6 +234,20 @@\n             <scope>compile</scope>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.dubbo</groupId>\n+            <artifactId>dubbo-registry-consul</artifactId>\n+            <version>${project.version}</version>\n+            <scope>compile</scope>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.dubbo</groupId>\n+            <artifactId>dubbo-registry-etcd3</artifactId>\n+            <version>${project.version}</version>\n+            <scope>compile</scope>\n+            <optional>true</optional>\n+        </dependency>\n         <dependency>\n             <groupId>org.apache.dubbo</groupId>\n             <artifactId>dubbo-monitor-api</artifactId>\n@@ -346,6 +360,20 @@\n             <scope>compile</scope>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.dubbo</groupId>\n+            <artifactId>dubbo-configcenter-consul</artifactId>\n+            <version>${project.version}</version>\n+            <scope>compile</scope>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.dubbo</groupId>\n+            <artifactId>dubbo-configcenter-etcd</artifactId>\n+            <version>${project.version}</version>\n+            <scope>compile</scope>\n+            <optional>true</optional>\n+        </dependency>\n         <dependency>\n             <groupId>org.apache.dubbo</groupId>\n             <artifactId>dubbo-compatible</artifactId>\n@@ -381,6 +409,13 @@\n             <scope>compile</scope>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.dubbo</groupId>\n+            <artifactId>dubbo-metadata-report-consul</artifactId>\n+            <version>${project.version}</version>\n+            <scope>compile</scope>\n+            <optional>true</optional>\n+        </dependency>\n \n         <!-- Transitive dependencies -->\n         <dependency>\n@@ -395,14 +430,27 @@\n             <groupId>io.netty</groupId>\n             <artifactId>netty-all</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>com.google.code.gson</groupId>\n+            <artifactId>gson</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.yaml</groupId>\n+            <artifactId>snakeyaml</artifactId>\n+        </dependency>\n \n         <!-- Temporarily add this part to exclude transitive dependency -->\n         <dependency>\n-            <groupId>junit</groupId>\n-            <artifactId>junit</artifactId>\n-            <version>${junit_version}</version>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-engine</artifactId>\n+            <version>${junit_jupiter_version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-params</artifactId>\n+            <version>${junit_jupiter_version}</version>\n             <scope>test</scope>\n-            <optional>true</optional>\n         </dependency>\n         <dependency>\n             <groupId>cglib</groupId>\n@@ -459,6 +507,8 @@\n                                     <include>org.apache.dubbo:dubbo-registry-multicast</include>\n                                     <include>org.apache.dubbo:dubbo-registry-zookeeper</include>\n                                     <include>org.apache.dubbo:dubbo-registry-redis</include>\n+                                    <include>org.apache.dubbo:dubbo-registry-consul</include>\n+                                    <include>org.apache.dubbo:dubbo-registry-etcd3</include>\n                                     <include>org.apache.dubbo:dubbo-monitor-api</include>\n                                     <include>org.apache.dubbo:dubbo-monitor-default</include>\n                                     <include>org.apache.dubbo:dubbo-config-api</include>\n@@ -479,11 +529,13 @@\n                                     <include>org.apache.dubbo:dubbo-configcenter-definition</include>\n                                     <include>org.apache.dubbo:dubbo-configcenter-apollo</include>\n                                     <include>org.apache.dubbo:dubbo-configcenter-zookeeper</include>\n+                                    <include>org.apache.dubbo:dubbo-configcenter-consul</include>\n+                                    <include>org.apache.dubbo:dubbo-configcenter-etcd</include>\n                                     <include>org.apache.dubbo:dubbo-metadata-report-api</include>\n                                     <include>org.apache.dubbo:dubbo-metadata-definition</include>\n                                     <include>org.apache.dubbo:dubbo-metadata-report-redis</include>\n                                     <include>org.apache.dubbo:dubbo-metadata-report-zookeeper</include>\n-                                    <include>com.google.code.gson:gson</include>\n+                                    <include>org.apache.dubbo:dubbo-metadata-report-consul</include>\n                                 </includes>\n                             </artifactSet>\n                             <transformers>\n@@ -601,12 +653,27 @@\n                                     <resource>META-INF/dubbo/internal/org.apache.dubbo.qos.command.BaseCommand\n                                     </resource>\n                                 </transformer>\n-                                <transformer\n-                                        implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                                     <resource>META-INF/dubbo/internal/org.apache.dubbo.configcenter.DynamicConfigurationFactory\n                                     </resource>\n                                 </transformer>\n+                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n+                                    <resource>META-INF/dubbo/internal/org.apache.dubbo.metadata.store.MetadataReportFactory\n+                                    </resource>\n+                                </transformer>\n                             </transformers>\n+                            <filters>\n+                                <filter>\n+                                    <artifact>org.apache.dubbo:dubbo</artifact>\n+                                    <excludes>\n+                                        <!-- These two line is optional, it can remove some warn log -->\n+                                        <exclude>com/**</exclude>\n+                                        <exclude>org/**</exclude>\n+                                        <!-- This one is required -->\n+                                        <exclude>META-INF/dubbo/**</exclude>\n+                                    </excludes>\n+                                </filter>\n+                            </filters>\n                         </configuration>\n                     </execution>\n                 </executions>",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-all/pom.xml",
                "sha": "a4a0b5cc3cd8120ba2cf247ed6cef6971699a577",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-bom/pom.xml",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-bom/pom.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-bom/pom.xml",
                "patch": "@@ -6,12 +6,12 @@\n     <parent>\n         <groupId>org.apache.dubbo</groupId>\n         <artifactId>dubbo-parent</artifactId>\n-        <version>2.7.0-SNAPSHOT</version>\n+        <version>2.7.1-SNAPSHOT</version>\n     </parent>\n \n     <groupId>org.apache.dubbo</groupId>\n     <artifactId>dubbo-bom</artifactId>\n-    <version>2.7.0-SNAPSHOT</version>\n+    <version>2.7.1-SNAPSHOT</version>\n     <packaging>pom</packaging>\n \n     <name>dubbo-bom</name>\n@@ -138,6 +138,11 @@\n                 <artifactId>dubbo-remoting-http</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.apache.dubbo</groupId>\n+                <artifactId>dubbo-remoting-etcd3</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>org.apache.dubbo</groupId>\n                 <artifactId>dubbo-rpc-api</artifactId>\n@@ -218,6 +223,16 @@\n                 <artifactId>dubbo-registry-redis</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.apache.dubbo</groupId>\n+                <artifactId>dubbo-registry-etcd3</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.dubbo</groupId>\n+                <artifactId>dubbo-registry-consul</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>org.apache.dubbo</groupId>\n                 <artifactId>dubbo-monitor-api</artifactId>\n@@ -303,6 +318,11 @@\n                 <artifactId>dubbo-metadata-report-redis</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.apache.dubbo</groupId>\n+                <artifactId>dubbo-metadata-report-consul</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>org.apache.dubbo</groupId>\n                 <artifactId>dubbo-configcenter-api</artifactId>\n@@ -318,6 +338,16 @@\n                 <artifactId>dubbo-configcenter-apollo</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.apache.dubbo</groupId>\n+                <artifactId>dubbo-configcenter-consul</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.dubbo</groupId>\n+                <artifactId>dubbo-configcenter-etcd</artifactId>\n+                <version>${project.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>org.apache.dubbo</groupId>\n                 <artifactId>dubbo-metadata-definition</artifactId>",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-bom/pom.xml",
                "sha": "47875b83ffbdd2dbaf283e0f1e2acf5f5b33f39b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/pom.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-cluster/pom.xml",
                "patch": "@@ -19,7 +19,7 @@\n     <parent>\n         <groupId>org.apache.dubbo</groupId>\n         <artifactId>dubbo-parent</artifactId>\n-        <version>2.7.0-SNAPSHOT</version>\n+        <version>2.7.1-SNAPSHOT</version>\n     </parent>\n     <artifactId>dubbo-cluster</artifactId>\n     <packaging>jar</packaging>",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/pom.xml",
                "sha": "58d0367d873bd9f0007506004b51c7df1f859348",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Configurator.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Configurator.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Configurator.java",
                "patch": "@@ -98,6 +98,7 @@\n      * 1. the url with a specific host ip should have higher priority than 0.0.0.0\r\n      * 2. if two url has the same host, compare by priority value\uff1b\r\n      */\r\n+    @Override\r\n     default int compareTo(Configurator o) {\r\n         if (o == null) {\r\n             return -1;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Configurator.java",
                "sha": "b85a0461312caf52705c93c246dbc0e015a8b101",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Router.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Router.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Router.java",
                "patch": "@@ -32,6 +32,9 @@\n  * @see org.apache.dubbo.rpc.cluster.Directory#list(Invocation)\r\n  */\r\n public interface Router extends Comparable<Router> {\r\n+\r\n+    int DEFAULT_PRIORITY = Integer.MAX_VALUE;\r\n+\r\n     /**\r\n      * Get the router url.\r\n      *\r\n@@ -85,4 +88,12 @@\n      * @return router's priority\r\n      */\r\n     int getPriority();\r\n+\r\n+    @Override\r\n+    default int compareTo(Router o) {\r\n+        if (o == null) {\r\n+            throw new IllegalArgumentException();\r\n+        }\r\n+        return Integer.compare(this.getPriority(), o.getPriority());\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/Router.java",
                "sha": "fadefdeae0f97beff04d20a50809ac86517fe76f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfigurator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfigurator.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfigurator.java",
                "patch": "@@ -20,7 +20,7 @@\n import org.apache.dubbo.rpc.cluster.configurator.AbstractConfigurator;\r\n \r\n /**\r\n- * AbsentConfigurator\r\n+ * OverrideConfigurator\r\n  *\r\n  */\r\n public class OverrideConfigurator extends AbstractConfigurator {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfigurator.java",
                "sha": "bc9beb4f8b4720c26a3fafb9c455929016063837",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorFactory.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorFactory.java",
                "patch": "@@ -21,7 +21,7 @@\n import org.apache.dubbo.rpc.cluster.ConfiguratorFactory;\r\n \r\n /**\r\n- * AbsentConfiguratorFactory\r\n+ * OverrideConfiguratorFactory\r\n  *\r\n  */\r\n public class OverrideConfiguratorFactory implements ConfiguratorFactory {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorFactory.java",
                "sha": "a63aa55004e9e1718d268cfceb0869c5947c03f4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParser.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParser.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParser.java",
                "patch": "@@ -130,7 +130,7 @@ private static String toParameterString(ConfigItem item) {\n             sb.append(item.getSide());\n         }\n         Map<String, String> parameters = item.getParameters();\n-        if (parameters == null || parameters.isEmpty()) {\n+        if (CollectionUtils.isEmptyMap(parameters)) {\n             throw new IllegalStateException(\"Invalid configurator rule, please specify at least one parameter \" +\n                     \"you want to change in the rule.\");\n         }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParser.java",
                "sha": "76d6f2db3a3b65a07ea47ca6f7f4574a980dd75e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.apache.dubbo.common.URL;\r\n import org.apache.dubbo.common.logger.Logger;\r\n import org.apache.dubbo.common.logger.LoggerFactory;\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n import org.apache.dubbo.rpc.Invocation;\r\n import org.apache.dubbo.rpc.Invoker;\r\n import org.apache.dubbo.rpc.RpcException;\r\n@@ -29,7 +30,6 @@\n \r\n /**\r\n  * StaticDirectory\r\n- *\r\n  */\r\n public class StaticDirectory<T> extends AbstractDirectory<T> {\r\n     private static final Logger logger = LoggerFactory.getLogger(StaticDirectory.class);\r\n@@ -49,9 +49,10 @@ public StaticDirectory(URL url, List<Invoker<T>> invokers) {\n     }\r\n \r\n     public StaticDirectory(URL url, List<Invoker<T>> invokers, RouterChain<T> routerChain) {\r\n-        super(url == null && invokers != null && !invokers.isEmpty() ? invokers.get(0).getUrl() : url, routerChain);\r\n-        if (invokers == null || invokers.isEmpty())\r\n+        super(url == null && CollectionUtils.isNotEmpty(invokers) ? invokers.get(0).getUrl() : url, routerChain);\r\n+        if (CollectionUtils.isEmpty(invokers)) {\r\n             throw new IllegalArgumentException(\"invokers == null\");\r\n+        }\r\n         this.invokers = invokers;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java",
                "sha": "c5a26a3f7d3dfcc2f8673eea5f7b15e9d94fe28e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java",
                "patch": "@@ -18,6 +18,7 @@\n \r\n import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.common.URL;\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n import org.apache.dubbo.rpc.Invocation;\r\n import org.apache.dubbo.rpc.Invoker;\r\n import org.apache.dubbo.rpc.cluster.LoadBalance;\r\n@@ -44,7 +45,7 @@ static int calculateWarmupWeight(int uptime, int warmup, int weight) {\n \r\n     @Override\r\n     public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) {\r\n-        if (invokers == null || invokers.isEmpty()) {\r\n+        if (CollectionUtils.isEmpty(invokers)) {\r\n             return null;\r\n         }\r\n         if (invokers.size() == 1) {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/AbstractLoadBalance.java",
                "sha": "78151ed5af495b0e803614dd3dac780f7a378edf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalance.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalance.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 8,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalance.java",
                "patch": "@@ -22,7 +22,7 @@\n import org.apache.dubbo.rpc.Invoker;\r\n import org.apache.dubbo.rpc.support.RpcUtils;\r\n \r\n-import java.io.UnsupportedEncodingException;\r\n+import java.nio.charset.StandardCharsets;\r\n import java.security.MessageDigest;\r\n import java.security.NoSuchAlgorithmException;\r\n import java.util.List;\r\n@@ -33,7 +33,6 @@\n \r\n /**\r\n  * ConsistentHashLoadBalance\r\n- *\r\n  */\r\n public class ConsistentHashLoadBalance extends AbstractLoadBalance {\r\n     public static final String NAME = \"consistenthash\";\r\n@@ -126,12 +125,7 @@ private long hash(byte[] digest, int number) {\n                 throw new IllegalStateException(e.getMessage(), e);\r\n             }\r\n             md5.reset();\r\n-            byte[] bytes;\r\n-            try {\r\n-                bytes = value.getBytes(\"UTF-8\");\r\n-            } catch (UnsupportedEncodingException e) {\r\n-                throw new IllegalStateException(e.getMessage(), e);\r\n-            }\r\n+            byte[] bytes = value.getBytes(StandardCharsets.UTF_8);\r\n             md5.update(bytes);\r\n             return md5.digest();\r\n         }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalance.java",
                "sha": "83d6f8c9112366b9476aa14de24efedba156266d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/AbstractRouter.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/AbstractRouter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 8,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/AbstractRouter.java",
                "patch": "@@ -20,11 +20,8 @@\n import org.apache.dubbo.configcenter.DynamicConfiguration;\n import org.apache.dubbo.rpc.cluster.Router;\n \n-/**\n- * TODO Extract more code to here if necessary\n- */\n public abstract class AbstractRouter implements Router {\n-    protected int priority;\n+    protected int priority = DEFAULT_PRIORITY;\n     protected boolean force = false;\n     protected URL url;\n \n@@ -66,10 +63,6 @@ public void setForce(boolean force) {\n     }\n \n     @Override\n-    public int compareTo(Router o) {\n-        return (this.getPriority() >= o.getPriority()) ? 1 : -1;\n-    }\n-\n     public int getPriority() {\n         return priority;\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/AbstractRouter.java",
                "sha": "657ad866c283abe34175dcf60f7bd3a0c1a2037e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouter.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 6,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouter.java",
                "patch": "@@ -20,13 +20,13 @@\n import org.apache.dubbo.common.URL;\r\n import org.apache.dubbo.common.logger.Logger;\r\n import org.apache.dubbo.common.logger.LoggerFactory;\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n import org.apache.dubbo.common.utils.NetUtils;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n import org.apache.dubbo.common.utils.UrlUtils;\r\n import org.apache.dubbo.rpc.Invocation;\r\n import org.apache.dubbo.rpc.Invoker;\r\n import org.apache.dubbo.rpc.RpcException;\r\n-import org.apache.dubbo.rpc.cluster.Router;\r\n import org.apache.dubbo.rpc.cluster.router.AbstractRouter;\r\n \r\n import java.text.ParseException;\r\n@@ -43,7 +43,7 @@\n  * ConditionRouter\r\n  *\r\n  */\r\n-public class ConditionRouter extends AbstractRouter implements Comparable<Router> {\r\n+public class ConditionRouter extends AbstractRouter {\r\n     public static final String NAME = \"condition\";\r\n \r\n     private static final Logger logger = LoggerFactory.getLogger(ConditionRouter.class);\r\n@@ -101,7 +101,7 @@ public void init(String rule) {\n             String separator = matcher.group(1);\r\n             String content = matcher.group(2);\r\n             // Start part of the condition expression.\r\n-            if (separator == null || separator.length() == 0) {\r\n+            if (StringUtils.isEmpty(separator)) {\r\n                 pair = new MatchPair();\r\n                 condition.put(content, pair);\r\n             }\r\n@@ -163,7 +163,7 @@ else if (\",\".equals(separator)) { // Should be separated by ','\n             return invokers;\r\n         }\r\n \r\n-        if (invokers == null || invokers.isEmpty()) {\r\n+        if (CollectionUtils.isEmpty(invokers)) {\r\n             return invokers;\r\n         }\r\n         try {\r\n@@ -205,11 +205,11 @@ public URL getUrl() {\n     }\r\n \r\n     boolean matchWhen(URL url, Invocation invocation) {\r\n-        return whenCondition == null || whenCondition.isEmpty() || matchCondition(whenCondition, url, null, invocation);\r\n+        return CollectionUtils.isEmptyMap(whenCondition) || matchCondition(whenCondition, url, null, invocation);\r\n     }\r\n \r\n     private boolean matchThen(URL url, URL param) {\r\n-        return !(thenCondition == null || thenCondition.isEmpty()) && matchCondition(thenCondition, url, param, null);\r\n+        return CollectionUtils.isNotEmptyMap(thenCondition) && matchCondition(thenCondition, url, param, null);\r\n     }\r\n \r\n     private boolean matchCondition(Map<String, MatchPair> condition, URL url, URL param, Invocation invocation) {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouter.java",
                "sha": "6549cdade591a30d528851ac5f6634e678ae4e5f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppRouter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppRouter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppRouter.java",
                "patch": "@@ -25,8 +25,13 @@\n  */\n public class AppRouter extends ListenableRouter {\n     public static final String NAME = \"APP_ROUTER\";\n+    /**\n+     * AppRouter should after ServiceRouter\n+     */\n+    private static final int APP_ROUTER_DEFAULT_PRIORITY = 150;\n \n     public AppRouter(DynamicConfiguration configuration, URL url) {\n         super(configuration, url, url.getParameter(Constants.APPLICATION_KEY));\n+        this.priority = APP_ROUTER_DEFAULT_PRIORITY;\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/AppRouter.java",
                "sha": "31a5df174c10777db8fea4fe348b808862f82e19",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java",
                "patch": "@@ -44,7 +44,7 @@\n public abstract class ListenableRouter extends AbstractRouter implements ConfigurationListener {\n     public static final String NAME = \"LISTENABLE_ROUTER\";\n     private static final String RULE_SUFFIX = \".condition-router\";\n-    public static final int DEFAULT_PRIORITY = 200;\n+\n     private static final Logger logger = LoggerFactory.getLogger(ListenableRouter.class);\n     private ConditionRouterRule routerRule;\n     private List<ConditionRouter> conditionRouters = Collections.emptyList();\n@@ -120,7 +120,7 @@ private synchronized void init(String ruleKey) {\n         String routerKey = ruleKey + RULE_SUFFIX;\n         configuration.addListener(routerKey, this);\n         String rule = configuration.getConfig(routerKey);\n-        if (rule != null) {\n+        if (StringUtils.isNotEmpty(rule)) {\n             this.process(new ConfigChangeEvent(routerKey, rule));\n         }\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ListenableRouter.java",
                "sha": "564f371eac0a6e2a87c617310441e55588d3adf6",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceRouter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceRouter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceRouter.java",
                "patch": "@@ -24,8 +24,13 @@\n  */\n public class ServiceRouter extends ListenableRouter {\n     public static final String NAME = \"SERVICE_ROUTER\";\n+    /**\n+     * ServiceRouter should before AppRouter\n+     */\n+    private static final int SERVICE_ROUTER_DEFAULT_PRIORITY = 140;\n \n     public ServiceRouter(DynamicConfiguration configuration, URL url) {\n         super(configuration, url, url.getEncodedServiceKey());\n+        this.priority = SERVICE_ROUTER_DEFAULT_PRIORITY;\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/condition/config/ServiceRouter.java",
                "sha": "ed3748e0fd532f28fdf828b24eee33a87fa0e79a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterFactory.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterFactory.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterFactory.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.URLBuilder;\n import org.apache.dubbo.common.utils.IOUtils;\n import org.apache.dubbo.rpc.cluster.Router;\n import org.apache.dubbo.rpc.cluster.RouterFactory;\n@@ -55,9 +56,12 @@ public Router getRouter(URL url) {\n \n             // FIXME: this code looks useless\n             boolean runtime = url.getParameter(Constants.RUNTIME_KEY, false);\n-            URL script = url.setProtocol(protocol).addParameter(Constants.TYPE_KEY, type)\n+            URL script = URLBuilder.from(url)\n+                    .setProtocol(protocol)\n+                    .addParameter(Constants.TYPE_KEY, type)\n                     .addParameter(Constants.RUNTIME_KEY, runtime)\n-                    .addParameterAndEncoded(Constants.RULE_KEY, rule);\n+                    .addParameterAndEncoded(Constants.RULE_KEY, rule)\n+                    .build();\n \n             return routerFactory.getRouter(script);\n         } catch (IOException e) {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterFactory.java",
                "sha": "1dd446cc1874b84dfea99316cc2a0d8d424dbf21",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 13,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
                "patch": "@@ -22,7 +22,6 @@\n import org.apache.dubbo.rpc.Invocation;\n import org.apache.dubbo.rpc.Invoker;\n import org.apache.dubbo.rpc.RpcException;\n-import org.apache.dubbo.rpc.cluster.Router;\n import org.apache.dubbo.rpc.cluster.router.AbstractRouter;\n \n import java.util.ArrayList;\n@@ -31,11 +30,15 @@\n /**\n  * A specific Router designed to realize mock feature.\n  * If a request is configured to use mock, then this router guarantees that only the invokers with protocol MOCK appear in final the invoker list, all other invokers will be excluded.\n- *\n  */\n public class MockInvokersSelector extends AbstractRouter {\n \n     public static final String NAME = \"MOCK_ROUTER\";\n+    private static final int MOCK_INVOKERS_DEFAULT_PRIORITY = Integer.MIN_VALUE;\n+\n+    public MockInvokersSelector() {\n+        this.priority = MOCK_INVOKERS_DEFAULT_PRIORITY;\n+    }\n \n     @Override\n     public <T> List<Invoker<T>> route(final List<Invoker<T>> invokers,\n@@ -95,15 +98,4 @@\n         return hasMockProvider;\n     }\n \n-    /**\n-     * Always stay on the top of the list\n-     *\n-     * @param o\n-     * @return\n-     */\n-    @Override\n-    public int compareTo(Router o) {\n-        return 1;\n-    }\n-\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/mock/MockInvokersSelector.java",
                "sha": "78ada6642298289192421e28e36c410c545c5db5",
                "status": "modified"
            },
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouter.java",
                "changes": 112,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 41,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouter.java",
                "patch": "@@ -20,6 +20,7 @@\n import org.apache.dubbo.common.URL;\r\n import org.apache.dubbo.common.logger.Logger;\r\n import org.apache.dubbo.common.logger.LoggerFactory;\r\n+import org.apache.dubbo.common.utils.StringUtils;\r\n import org.apache.dubbo.rpc.Invocation;\r\n import org.apache.dubbo.rpc.Invoker;\r\n import org.apache.dubbo.rpc.RpcContext;\r\n@@ -37,80 +38,108 @@\n import java.util.List;\r\n import java.util.Map;\r\n import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.stream.Collectors;\r\n \r\n /**\r\n  * ScriptRouter\r\n  */\r\n public class ScriptRouter extends AbstractRouter {\r\n     public static final String NAME = \"SCRIPT_ROUTER\";\r\n+    private static final int SCRIPT_ROUTER_DEFAULT_PRIORITY = 0;\r\n     private static final Logger logger = LoggerFactory.getLogger(ScriptRouter.class);\r\n \r\n     private static final Map<String, ScriptEngine> engines = new ConcurrentHashMap<>();\r\n \r\n     private final ScriptEngine engine;\r\n \r\n-    private final int priority;\r\n-\r\n     private final String rule;\r\n \r\n+    private CompiledScript function;\r\n+\r\n     public ScriptRouter(URL url) {\r\n         this.url = url;\r\n-        String type = url.getParameter(Constants.TYPE_KEY);\r\n-        this.priority = url.getParameter(Constants.PRIORITY_KEY, 0);\r\n-        String rule = url.getParameterAndDecoded(Constants.RULE_KEY);\r\n-        if (type == null || type.length() == 0) {\r\n-            type = Constants.DEFAULT_SCRIPT_TYPE_KEY;\r\n-        }\r\n-        if (rule == null || rule.length() == 0) {\r\n-            throw new IllegalStateException(\"route rule can not be empty. rule:\" + rule);\r\n+        this.priority = url.getParameter(Constants.PRIORITY_KEY, SCRIPT_ROUTER_DEFAULT_PRIORITY);\r\n+\r\n+        engine = getEngine(url);\r\n+        rule = getRule(url);\r\n+        try {\r\n+            Compilable compilable = (Compilable) engine;\r\n+            function = compilable.compile(rule);\r\n+        } catch (ScriptException e) {\r\n+            logger.error(\"route error, rule has been ignored. rule: \" + rule +\r\n+                    \", url: \" + RpcContext.getContext().getUrl(), e);\r\n         }\r\n-        ScriptEngine engine = engines.get(type);\r\n-        if (engine == null) {\r\n-            engine = new ScriptEngineManager().getEngineByName(type);\r\n-            if (engine == null) {\r\n-                throw new IllegalStateException(\"unsupported route rule type: \" + type + \", rule: \" + rule);\r\n-            }\r\n-            engines.put(type, engine);\r\n+\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * get rule from url parameters.\r\n+     */\r\n+    private String getRule(URL url) {\r\n+        String vRule = url.getParameterAndDecoded(Constants.RULE_KEY);\r\n+        if (StringUtils.isEmpty(vRule)) {\r\n+            throw new IllegalStateException(\"route rule can not be empty.\");\r\n         }\r\n-        this.engine = engine;\r\n-        this.rule = rule;\r\n+        return vRule;\r\n     }\r\n \r\n-    @Override\r\n-    public URL getUrl() {\r\n-        return url;\r\n+    /**\r\n+     * create ScriptEngine instance by type from url parameters, then cache it\r\n+     */\r\n+    private ScriptEngine getEngine(URL url) {\r\n+        String type = url.getParameter(Constants.TYPE_KEY, Constants.DEFAULT_SCRIPT_TYPE_KEY);\r\n+\r\n+        return engines.computeIfAbsent(type, t -> {\r\n+            ScriptEngine scriptEngine = new ScriptEngineManager().getEngineByName(type);\r\n+            if (scriptEngine == null) {\r\n+                throw new IllegalStateException(\"unsupported route engine type: \" + type);\r\n+            }\r\n+            return scriptEngine;\r\n+        });\r\n     }\r\n \r\n     @Override\r\n-    @SuppressWarnings(\"unchecked\")\r\n     public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\r\n         try {\r\n-            List<Invoker<T>> invokersCopy = new ArrayList<>(invokers);\r\n-            Compilable compilable = (Compilable) engine;\r\n-            Bindings bindings = engine.createBindings();\r\n-            bindings.put(\"invokers\", invokersCopy);\r\n-            bindings.put(\"invocation\", invocation);\r\n-            bindings.put(\"context\", RpcContext.getContext());\r\n-            CompiledScript function = compilable.compile(rule);\r\n-            Object obj = function.eval(bindings);\r\n-            if (obj instanceof Invoker[]) {\r\n-                invokersCopy = Arrays.asList((Invoker<T>[]) obj);\r\n-            } else if (obj instanceof Object[]) {\r\n-                invokersCopy = new ArrayList<Invoker<T>>();\r\n-                for (Object inv : (Object[]) obj) {\r\n-                    invokersCopy.add((Invoker<T>) inv);\r\n-                }\r\n-            } else {\r\n-                invokersCopy = (List<Invoker<T>>) obj;\r\n+            Bindings bindings = createBindings(invokers, invocation);\r\n+            if (function == null) {\r\n+                return invokers;\r\n             }\r\n-            return invokersCopy;\r\n+            return getRoutedInvokers(function.eval(bindings));\r\n         } catch (ScriptException e) {\r\n             logger.error(\"route error, rule has been ignored. rule: \" + rule + \", method:\" +\r\n                     invocation.getMethodName() + \", url: \" + RpcContext.getContext().getUrl(), e);\r\n             return invokers;\r\n         }\r\n     }\r\n \r\n+    /**\r\n+     * get routed invokers from result of script rule evaluation\r\n+     */\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    protected <T> List<Invoker<T>> getRoutedInvokers(Object obj) {\r\n+        if (obj instanceof Invoker[]) {\r\n+            return Arrays.asList((Invoker<T>[]) obj);\r\n+        } else if (obj instanceof Object[]) {\r\n+            return Arrays.stream((Object[]) obj).map(item -> (Invoker<T>) item).collect(Collectors.toList());\r\n+        } else {\r\n+            return (List<Invoker<T>>) obj;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * create bindings for script engine\r\n+     */\r\n+    private <T> Bindings createBindings(List<Invoker<T>> invokers, Invocation invocation) {\r\n+        Bindings bindings = engine.createBindings();\r\n+        // create a new List of invokers\r\n+        bindings.put(\"invokers\", new ArrayList<>(invokers));\r\n+        bindings.put(\"invocation\", invocation);\r\n+        bindings.put(\"context\", RpcContext.getContext());\r\n+        return bindings;\r\n+    }\r\n+\r\n     @Override\r\n     public boolean isRuntime() {\r\n         return this.url.getParameter(Constants.RUNTIME_KEY, false);\r\n@@ -120,4 +149,5 @@ public boolean isRuntime() {\n     public boolean isForce() {\r\n         return url.getParameter(Constants.FORCE_KEY, false);\r\n     }\r\n+\r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouter.java",
                "sha": "0b47d2e7530c2d83af368086b22a6c8e03bf50a7",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 19,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.dubbo.common.logger.Logger;\n import org.apache.dubbo.common.logger.LoggerFactory;\n import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.NetUtils;\n import org.apache.dubbo.common.utils.StringUtils;\n import org.apache.dubbo.configcenter.ConfigChangeEvent;\n import org.apache.dubbo.configcenter.ConfigChangeType;\n@@ -29,11 +30,11 @@\n import org.apache.dubbo.rpc.Invocation;\n import org.apache.dubbo.rpc.Invoker;\n import org.apache.dubbo.rpc.RpcException;\n-import org.apache.dubbo.rpc.cluster.Router;\n import org.apache.dubbo.rpc.cluster.router.AbstractRouter;\n import org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule;\n import org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser;\n \n+import java.net.UnknownHostException;\n import java.util.List;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n@@ -44,9 +45,9 @@\n /**\n  * TagRouter, \"application.tag-router\"\n  */\n-public class TagRouter extends AbstractRouter implements Comparable<Router>, ConfigurationListener {\n+public class TagRouter extends AbstractRouter implements ConfigurationListener {\n     public static final String NAME = \"TAG_ROUTER\";\n-    private static final int DEFAULT_PRIORITY = 100;\n+    private static final int TAG_ROUTER_DEFAULT_PRIORITY = 100;\n     private static final Logger logger = LoggerFactory.getLogger(TagRouter.class);\n     private static final String RULE_SUFFIX = \".tag-router\";\n \n@@ -55,6 +56,7 @@\n \n     public TagRouter(DynamicConfiguration configuration, URL url) {\n         super(configuration, url);\n+        this.priority = TAG_ROUTER_DEFAULT_PRIORITY;\n     }\n \n     @Override\n@@ -87,8 +89,10 @@ public URL getUrl() {\n             return invokers;\n         }\n \n-        if (tagRouterRule == null || !tagRouterRule.isValid() || !tagRouterRule.isEnabled()) {\n-            return invokers;\n+        // since the rule can be changed by config center, we should copy one to use.\n+        final TagRouterRule tagRouterRuleCopy = tagRouterRule;\n+        if (tagRouterRuleCopy == null || !tagRouterRuleCopy.isValid() || !tagRouterRuleCopy.isEnabled()) {\n+            return filterUsingStaticTag(invokers, url, invocation);\n         }\n \n         List<Invoker<T>> result = invokers;\n@@ -97,12 +101,12 @@ public URL getUrl() {\n \n         // if we are requesting for a Provider with a specific tag\n         if (StringUtils.isNotEmpty(tag)) {\n-            List<String> addresses = tagRouterRule.getTagnameToAddresses().get(tag);\n+            List<String> addresses = tagRouterRuleCopy.getTagnameToAddresses().get(tag);\n             // filter by dynamic tag group first\n             if (CollectionUtils.isNotEmpty(addresses)) {\n                 result = filterInvoker(invokers, invoker -> addressMatches(invoker.getUrl(), addresses));\n                 // if result is not null OR it's null but force=true, return result directly\n-                if (CollectionUtils.isNotEmpty(result) || tagRouterRule.isForce()) {\n+                if (CollectionUtils.isNotEmpty(result) || tagRouterRuleCopy.isForce()) {\n                     return result;\n                 }\n             } else {\n@@ -112,19 +116,19 @@ public URL getUrl() {\n             }\n             // If there's no tagged providers that can match the current tagged request. force.tag is set by default\n             // to false, which means it will invoke any providers without a tag unless it's explicitly disallowed.\n-            if (CollectionUtils.isNotEmpty(result) || isForceUse(invocation)) {\n+            if (CollectionUtils.isNotEmpty(result) || isForceUseTag(invocation)) {\n                 return result;\n             }\n             // FAILOVER: return all Providers without any tags.\n             else {\n                 List<Invoker<T>> tmp = filterInvoker(invokers, invoker -> addressNotMatches(invoker.getUrl(),\n-                        tagRouterRule.getAddresses()));\n+                        tagRouterRuleCopy.getAddresses()));\n                 return filterInvoker(tmp, invoker -> StringUtils.isEmpty(invoker.getUrl().getParameter(TAG_KEY)));\n             }\n         } else {\n             // List<String> addresses = tagRouterRule.filter(providerApp);\n             // return all addresses in dynamic tag group.\n-            List<String> addresses = tagRouterRule.getAddresses();\n+            List<String> addresses = tagRouterRuleCopy.getAddresses();\n             if (CollectionUtils.isNotEmpty(addresses)) {\n                 result = filterInvoker(invokers, invoker -> addressNotMatches(invoker.getUrl(), addresses));\n                 // 1. all addresses are in dynamic tag group, return empty list.\n@@ -136,14 +140,40 @@ public URL getUrl() {\n             }\n             return filterInvoker(result, invoker -> {\n                 String localTag = invoker.getUrl().getParameter(TAG_KEY);\n-                return StringUtils.isEmpty(localTag) || !tagRouterRule.getTagNames().contains(localTag);\n+                return StringUtils.isEmpty(localTag) || !tagRouterRuleCopy.getTagNames().contains(localTag);\n             });\n         }\n     }\n \n-    @Override\n-    public int getPriority() {\n-        return DEFAULT_PRIORITY;\n+    /**\n+     * If there's no dynamic tag rule being set, use static tag in URL.\n+     * <p>\n+     * A typical scenario is a Consumer using version 2.7.x calls Providers using version 2.6.x or lower,\n+     * the Consumer should always respect the tag in provider URL regardless of whether a dynamic tag rule has been set to it or not.\n+     * <p>\n+     * TODO, to guarantee consistent behavior of interoperability between 2.6- and 2.7+, this method should has the same logic with the TagRouter in 2.6.x.\n+     *\n+     * @param invokers\n+     * @param url\n+     * @param invocation\n+     * @param <T>\n+     * @return\n+     */\n+    private <T> List<Invoker<T>> filterUsingStaticTag(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n+        List<Invoker<T>> result = invokers;\n+        // Dynamic param\n+        String tag = StringUtils.isEmpty(invocation.getAttachment(TAG_KEY)) ? url.getParameter(TAG_KEY) :\n+                invocation.getAttachment(TAG_KEY);\n+        // Tag request\n+        if (!StringUtils.isEmpty(tag)) {\n+            result = filterInvoker(invokers, invoker -> tag.equals(invoker.getUrl().getParameter(Constants.TAG_KEY)));\n+            if (CollectionUtils.isEmpty(result) && !isForceUseTag(invocation)) {\n+                result = filterInvoker(invokers, invoker -> StringUtils.isEmpty(invoker.getUrl().getParameter(Constants.TAG_KEY)));\n+            }\n+        } else {\n+            result = filterInvoker(invokers, invoker -> StringUtils.isEmpty(invoker.getUrl().getParameter(Constants.TAG_KEY)));\n+        }\n+        return result;\n     }\n \n     @Override\n@@ -157,7 +187,7 @@ public boolean isForce() {\n         return tagRouterRule != null && tagRouterRule.isForce();\n     }\n \n-    private boolean isForceUse(Invocation invocation) {\n+    private boolean isForceUseTag(Invocation invocation) {\n         return Boolean.valueOf(invocation.getAttachment(FORCE_USE_TAG, url.getParameter(FORCE_USE_TAG, \"false\")));\n     }\n \n@@ -168,11 +198,26 @@ private boolean isForceUse(Invocation invocation) {\n     }\n \n     private boolean addressMatches(URL url, List<String> addresses) {\n-        return addresses != null && addresses.contains(url.getAddress());\n+        return addresses != null && checkAddressMatch(addresses, url.getHost(), url.getPort());\n     }\n \n     private boolean addressNotMatches(URL url, List<String> addresses) {\n-        return addresses == null || !addresses.contains(url.getAddress());\n+        return addresses == null || !checkAddressMatch(addresses, url.getHost(), url.getPort());\n+    }\n+\n+    private boolean checkAddressMatch(List<String> addresses, String host, int port) {\n+        for (String address : addresses) {\n+            try {\n+                if (NetUtils.matchIpExpression(address, host, port)) {\n+                    return true;\n+                }\n+            } catch (UnknownHostException e) {\n+                logger.error(\"The format of ip address is invalid in tag route. Address :\" + address, e);\n+            } catch (Exception e) {\n+                logger.error(\"The format of ip address is invalid in tag route. Address :\" + address, e);\n+            }\n+        }\n+        return false;\n     }\n \n     public void setApplication(String app) {\n@@ -181,7 +226,7 @@ public void setApplication(String app) {\n \n     @Override\n     public <T> void notify(List<Invoker<T>> invokers) {\n-        if (invokers == null || invokers.isEmpty()) {\n+        if (CollectionUtils.isEmpty(invokers)) {\n             return;\n         }\n \n@@ -204,7 +249,7 @@ public void setApplication(String app) {\n                 configuration.addListener(key, this);\n                 application = providerApplication;\n                 String rawRule = configuration.getConfig(key);\n-                if (rawRule != null) {\n+                if (StringUtils.isNotEmpty(rawRule)) {\n                     this.process(new ConfigChangeEvent(key, rawRule));\n                 }\n             }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "sha": "d03efca6e4d7b9e5d2ab03508636198b85781b3a",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 13,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "patch": "@@ -109,18 +109,18 @@ public void destroy() {\n      * @param invokers    invoker candidates\r\n      * @param selected    exclude selected invokers or not\r\n      * @return the invoker which will final to do invoke.\r\n-     * @throws RpcException\r\n+     * @throws RpcException exception\r\n      */\r\n     protected Invoker<T> select(LoadBalance loadbalance, Invocation invocation,\r\n-        List<Invoker<T>> invokers, List<Invoker<T>> selected) throws RpcException {\r\n+                                List<Invoker<T>> invokers, List<Invoker<T>> selected) throws RpcException {\r\n \r\n         if (CollectionUtils.isEmpty(invokers)) {\r\n             return null;\r\n         }\r\n         String methodName = invocation == null ? StringUtils.EMPTY : invocation.getMethodName();\r\n \r\n         boolean sticky = invokers.get(0).getUrl()\r\n-            .getMethodParameter(methodName, Constants.CLUSTER_STICKY_KEY, Constants.DEFAULT_CLUSTER_STICKY);\r\n+                .getMethodParameter(methodName, Constants.CLUSTER_STICKY_KEY, Constants.DEFAULT_CLUSTER_STICKY);\r\n \r\n         //ignore overloaded method\r\n         if (stickyInvoker != null && !invokers.contains(stickyInvoker)) {\r\n@@ -142,7 +142,7 @@ public void destroy() {\n     }\r\n \r\n     private Invoker<T> doSelect(LoadBalance loadbalance, Invocation invocation,\r\n-        List<Invoker<T>> invokers, List<Invoker<T>> selected) throws RpcException {\r\n+                                List<Invoker<T>> invokers, List<Invoker<T>> selected) throws RpcException {\r\n \r\n         if (CollectionUtils.isEmpty(invokers)) {\r\n             return null;\r\n@@ -180,19 +180,20 @@ public void destroy() {\n      * Reselect, use invokers not in `selected` first, if all invokers are in `selected`,\r\n      * just pick an available one using loadbalance policy.\r\n      *\r\n-     * @param loadbalance\r\n-     * @param invocation\r\n-     * @param invokers\r\n-     * @param selected\r\n-     * @return\r\n-     * @throws RpcException\r\n+     * @param loadbalance    load balance policy\r\n+     * @param invocation     invocation\r\n+     * @param invokers       invoker candidates\r\n+     * @param selected       exclude selected invokers or not\r\n+     * @param availablecheck check invoker available if true\r\n+     * @return the reselect result to do invoke\r\n+     * @throws RpcException exception\r\n      */\r\n     private Invoker<T> reselect(LoadBalance loadbalance, Invocation invocation,\r\n-        List<Invoker<T>> invokers, List<Invoker<T>> selected, boolean availablecheck) throws RpcException {\r\n+                                List<Invoker<T>> invokers, List<Invoker<T>> selected, boolean availablecheck) throws RpcException {\r\n \r\n         //Allocating one in advance, this list is certain to be used.\r\n         List<Invoker<T>> reselectInvokers = new ArrayList<>(\r\n-            invokers.size() > 1 ? (invokers.size() - 1) : invokers.size());\r\n+                invokers.size() > 1 ? (invokers.size() - 1) : invokers.size());\r\n \r\n         // First, try picking a invoker not in `selected`.\r\n         for (Invoker<T> invoker : invokers) {\r\n@@ -242,7 +243,6 @@ public Result invoke(final Invocation invocation) throws RpcException {\n     }\r\n \r\n     protected void checkWhetherDestroyed() {\r\n-\r\n         if (destroyed.get()) {\r\n             throw new RpcException(\"Rpc cluster invoker for \" + getInterface() + \" on consumer \" + NetUtils.getLocalHost()\r\n                     + \" use dubbo version \" + Version.getVersion()\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvoker.java",
                "sha": "abc9cf21afb942a2c407d54241eee81861fcef8b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java",
                "patch": "@@ -84,7 +84,9 @@ public static URL mergeUrl(URL remoteUrl, Map<String, String> localMap) {\n             String remoteGroup = map.get(Constants.GROUP_KEY);\r\n             String remoteRelease = map.get(Constants.RELEASE_KEY);\r\n             map.putAll(localMap);\r\n-            map.put(Constants.GROUP_KEY, remoteGroup);\r\n+            if (StringUtils.isNotEmpty(remoteGroup)) {\r\n+                map.put(Constants.GROUP_KEY, remoteGroup);\r\n+            }\r\n             // we should always keep the Provider RELEASE_KEY not overrode by the the value on Consumer side.\r\n             map.remove(Constants.RELEASE_KEY);\r\n             if (StringUtils.isNotEmpty(remoteRelease)) {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/ClusterUtils.java",
                "sha": "37b3e7192838eaa7581df00a0d39ddd43f4f3dc1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java",
                "patch": "@@ -20,6 +20,7 @@\n import org.apache.dubbo.common.URL;\r\n import org.apache.dubbo.common.logger.Logger;\r\n import org.apache.dubbo.common.logger.LoggerFactory;\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n import org.apache.dubbo.rpc.Invocation;\r\n import org.apache.dubbo.rpc.Invoker;\r\n@@ -103,7 +104,7 @@ private Result doMockInvoke(Invocation invocation, RpcException e) {\n         Invoker<T> minvoker;\r\n \r\n         List<Invoker<T>> mockInvokers = selectMockInvoker(invocation);\r\n-        if (mockInvokers == null || mockInvokers.isEmpty()) {\r\n+        if (CollectionUtils.isEmpty(mockInvokers)) {\r\n             minvoker = (Invoker<T>) new MockInvoker(directory.getUrl());\r\n         } else {\r\n             minvoker = mockInvokers.get(0);\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java",
                "sha": "009f4df44286753abbf967c80b6dc47f28ee049d",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/StickyTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/StickyTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 10,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/StickyTest.java",
                "patch": "@@ -28,9 +28,9 @@\n import org.apache.dubbo.rpc.RpcResult;\n import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;\n \n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -56,7 +56,7 @@\n     );\n     private int runs = 1;\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         dic = mock(Directory.class);\n         invocation = new RpcInvocation();\n@@ -77,34 +77,34 @@ public void setUp() throws Exception {\n     public void testStickyNoCheck() {\n         int count = testSticky(null, false);\n         System.out.println(count);\n-        Assert.assertTrue(count > 0 && count <= runs);\n+        Assertions.assertTrue(count > 0 && count <= runs);\n     }\n \n     @Test\n     public void testStickyForceCheck() {\n         int count = testSticky(null, true);\n-        Assert.assertTrue(count == 0 || count == runs);\n+        Assertions.assertTrue(count == 0 || count == runs);\n     }\n \n     @Test\n     public void testMethodStickyNoCheck() {\n         int count = testSticky(\"method1\", false);\n         System.out.println(count);\n-        Assert.assertTrue(count > 0 && count <= runs);\n+        Assertions.assertTrue(count > 0 && count <= runs);\n     }\n \n     @Test\n     public void testMethodStickyForceCheck() {\n         int count = testSticky(\"method1\", true);\n-        Assert.assertTrue(count == 0 || count == runs);\n+        Assertions.assertTrue(count == 0 || count == runs);\n     }\n \n     @Test\n     public void testMethodsSticky() {\n         for (int i = 0; i < 100; i++) {//Two different methods should always use the same invoker every time.\n             int count1 = testSticky(\"method1\", true);\n             int count2 = testSticky(\"method2\", true);\n-            Assert.assertTrue(count1 == count2);\n+            Assertions.assertTrue(count1 == count2);\n         }\n     }\n \n@@ -129,7 +129,7 @@ public int testSticky(String methodName, boolean check) {\n \n         int count = 0;\n         for (int i = 0; i < runs; i++) {\n-            Assert.assertEquals(null, clusterinvoker.invoke(invocation));\n+            Assertions.assertEquals(null, clusterinvoker.invoke(invocation));\n             if (invoker1 == clusterinvoker.getSelectedInvoker()) {\n                 count++;\n             }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/StickyTest.java",
                "sha": "b10fa01c80257c3b3dbd000c5291e30856cd90c1",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/absent/AbsentConfiguratorTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/absent/AbsentConfiguratorTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 10,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/absent/AbsentConfiguratorTest.java",
                "patch": "@@ -20,8 +20,8 @@\n import org.apache.dubbo.common.utils.NetUtils;\r\n import org.apache.dubbo.rpc.cluster.configurator.consts.UrlConstant;\r\n \r\n-import org.junit.Assert;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n /**\r\n  * OverrideConfiguratorTest\r\n@@ -34,35 +34,35 @@ public void testOverrideApplication() {\n         AbsentConfigurator configurator = new AbsentConfigurator(URL.valueOf(\"override://foo@0.0.0.0/com.foo.BarService?timeout=200\"));\r\n \r\n         URL url = configurator.configure(URL.valueOf(UrlConstant.URL_CONSUMER));\r\n-        Assert.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n \r\n         url = configurator.configure(URL.valueOf(UrlConstant.URL_ONE));\r\n-        Assert.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n \r\n         url = configurator.configure(URL.valueOf(UrlConstant.APPLICATION_BAR_SIDE_CONSUMER_11));\r\n-        Assert.assertNull(url.getParameter(\"timeout\"));\r\n+        Assertions.assertNull(url.getParameter(\"timeout\"));\r\n \r\n         url = configurator.configure(URL.valueOf(UrlConstant.TIMEOUT_1000_SIDE_CONSUMER_11));\r\n-        Assert.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n     }\r\n \r\n     @Test\r\n     public void testOverrideHost() {\r\n         AbsentConfigurator configurator = new AbsentConfigurator(URL.valueOf(\"override://\" + NetUtils.getLocalHost() + \"/com.foo.BarService?timeout=200\"));\r\n \r\n         URL url = configurator.configure(URL.valueOf(UrlConstant.URL_CONSUMER));\r\n-        Assert.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n \r\n         url = configurator.configure(URL.valueOf(UrlConstant.URL_ONE));\r\n-        Assert.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n \r\n         AbsentConfigurator configurator1 = new AbsentConfigurator(URL.valueOf(UrlConstant.SERVICE_TIMEOUT_200));\r\n \r\n         url = configurator1.configure(URL.valueOf(UrlConstant.APPLICATION_BAR_SIDE_CONSUMER_10));\r\n-        Assert.assertNull(url.getParameter(\"timeout\"));\r\n+        Assertions.assertNull(url.getParameter(\"timeout\"));\r\n \r\n         url = configurator1.configure(URL.valueOf(UrlConstant.TIMEOUT_1000_SIDE_CONSUMER_10));\r\n-        Assert.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n     }\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/absent/AbsentConfiguratorTest.java",
                "sha": "36ef868b134462bcd98844a8c69fe4f0bac4cc92",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 10,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorTest.java",
                "patch": "@@ -21,8 +21,8 @@\n import org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator;\r\n import org.apache.dubbo.rpc.cluster.configurator.consts.UrlConstant;\r\n \r\n-import org.junit.Assert;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n /**\r\n  * OverrideConfiguratorTest\r\n@@ -34,35 +34,35 @@ public void testOverride_Application() {\n         OverrideConfigurator configurator = new OverrideConfigurator(URL.valueOf(\"override://foo@0.0.0.0/com.foo.BarService?timeout=200\"));\r\n \r\n         URL url = configurator.configure(URL.valueOf(UrlConstant.URL_CONSUMER));\r\n-        Assert.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n \r\n         url = configurator.configure(URL.valueOf(UrlConstant.URL_ONE));\r\n-        Assert.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n \r\n         url = configurator.configure(URL.valueOf(UrlConstant.APPLICATION_BAR_SIDE_CONSUMER_11));\r\n-        Assert.assertNull(url.getParameter(\"timeout\"));\r\n+        Assertions.assertNull(url.getParameter(\"timeout\"));\r\n \r\n         url = configurator.configure(URL.valueOf(UrlConstant.TIMEOUT_1000_SIDE_CONSUMER_11));\r\n-        Assert.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n     }\r\n \r\n     @Test\r\n     public void testOverride_Host() {\r\n         OverrideConfigurator configurator = new OverrideConfigurator(URL.valueOf(\"override://\" + NetUtils.getLocalHost() + \"/com.foo.BarService?timeout=200\"));\r\n \r\n         URL url = configurator.configure(URL.valueOf(UrlConstant.URL_CONSUMER));\r\n-        Assert.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n \r\n         url = configurator.configure(URL.valueOf(UrlConstant.URL_ONE));\r\n-        Assert.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"200\", url.getParameter(\"timeout\"));\r\n \r\n         AbsentConfigurator configurator1 = new AbsentConfigurator(URL.valueOf(\"override://10.20.153.10/com.foo.BarService?timeout=200\"));\r\n \r\n         url = configurator1.configure(URL.valueOf(UrlConstant.APPLICATION_BAR_SIDE_CONSUMER_10));\r\n-        Assert.assertNull(url.getParameter(\"timeout\"));\r\n+        Assertions.assertNull(url.getParameter(\"timeout\"));\r\n \r\n         url = configurator1.configure(URL.valueOf(UrlConstant.TIMEOUT_1000_SIDE_CONSUMER_10));\r\n-        Assert.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n+        Assertions.assertEquals(\"1000\", url.getParameter(\"timeout\"));\r\n     }\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/override/OverrideConfiguratorTest.java",
                "sha": "f2b7d3d2ac22ebd75a98e208557469dd4e5dac34",
                "status": "modified"
            },
            {
                "additions": 100,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParserTest.java",
                "changes": 193,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParserTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 93,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParserTest.java",
                "patch": "@@ -21,12 +21,13 @@\n import org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfigItem;\n import org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n import org.yaml.snakeyaml.TypeDescription;\n import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.constructor.Constructor;\n \n+import java.io.IOException;\n import java.io.InputStream;\n import java.util.List;\n \n@@ -35,129 +36,135 @@\n  */\n public class ConfigParserTest {\n \n-    private String streamToString(InputStream stream) {\n-        try {\n-            byte[] bytes = new byte[stream.available()];\n-            stream.read(bytes);\n-            return new String(bytes);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        return null;\n+    private String streamToString(InputStream stream) throws IOException {\n+        byte[] bytes = new byte[stream.available()];\n+        stream.read(bytes);\n+        return new String(bytes);\n     }\n \n     @Test\n-    public void snakeYamlBasicTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoApp.yml\");\n+    public void snakeYamlBasicTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoApp.yml\")) {\n \n-        Constructor constructor = new Constructor(ConfiguratorConfig.class);\n-        TypeDescription carDescription = new TypeDescription(ConfiguratorConfig.class);\n-        carDescription.addPropertyParameters(\"items\", ConfigItem.class);\n-        constructor.addTypeDescription(carDescription);\n+            Constructor constructor = new Constructor(ConfiguratorConfig.class);\n+            TypeDescription carDescription = new TypeDescription(ConfiguratorConfig.class);\n+            carDescription.addPropertyParameters(\"items\", ConfigItem.class);\n+            constructor.addTypeDescription(carDescription);\n \n-        Yaml yaml = new Yaml(constructor);\n-        ConfiguratorConfig config = yaml.load(yamlStream);\n-        System.out.println(config);\n+            Yaml yaml = new Yaml(constructor);\n+            ConfiguratorConfig config = yaml.load(yamlStream);\n+            System.out.println(config);\n+        }\n     }\n \n     @Test\n     public void parseConfiguratorsServiceNoAppTest() throws Exception {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoApp.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(2, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(url.getAddress(), \"127.0.0.1:20880\");\n-        Assert.assertEquals(url.getParameter(Constants.WEIGHT_KEY, 0), 222);\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoApp.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n+            Assertions.assertNotNull(urls);\n+            Assertions.assertEquals(2, urls.size());\n+            URL url = urls.get(0);\n+            Assertions.assertEquals(url.getAddress(), \"127.0.0.1:20880\");\n+            Assertions.assertEquals(url.getParameter(Constants.WEIGHT_KEY, 0), 222);\n+        }\n     }\n \n     @Test\n     public void parseConfiguratorsServiceGroupVersionTest() throws Exception {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceGroupVersion.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(1, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"testgroup\", url.getParameter(Constants.GROUP_KEY));\n-        Assert.assertEquals(\"1.0.0\", url.getParameter(Constants.VERSION_KEY));\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceGroupVersion.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n+            Assertions.assertNotNull(urls);\n+            Assertions.assertEquals(1, urls.size());\n+            URL url = urls.get(0);\n+            Assertions.assertEquals(\"testgroup\", url.getParameter(Constants.GROUP_KEY));\n+            Assertions.assertEquals(\"1.0.0\", url.getParameter(Constants.VERSION_KEY));\n+        }\n     }\n \n     @Test\n-    public void parseConfiguratorsServiceMultiAppsTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceMultiApps.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(4, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertNotNull(url.getParameter(Constants.APPLICATION_KEY));\n+    public void parseConfiguratorsServiceMultiAppsTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceMultiApps.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n+            Assertions.assertNotNull(urls);\n+            Assertions.assertEquals(4, urls.size());\n+            URL url = urls.get(0);\n+            Assertions.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assertions.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assertions.assertNotNull(url.getParameter(Constants.APPLICATION_KEY));\n+        }\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void parseConfiguratorsServiceNoRuleTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoRule.yml\");\n-        ConfigParser.parseConfigurators(streamToString(yamlStream));\n-        Assert.fail();\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ServiceNoRule.yml\")) {\n+                ConfigParser.parseConfigurators(streamToString(yamlStream));\n+                Assertions.fail();\n+            }\n+        });\n     }\n \n     @Test\n-    public void parseConfiguratorsAppMultiServicesTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppMultiServices.yml\");\n-        String yamlFile = streamToString(yamlStream);\n-        List<URL> urls = ConfigParser.parseConfigurators(yamlFile);\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(4, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(\"service1\", url.getServiceInterface());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n-        Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+    public void parseConfiguratorsAppMultiServicesTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppMultiServices.yml\")) {\n+            String yamlFile = streamToString(yamlStream);\n+            List<URL> urls = ConfigParser.parseConfigurators(yamlFile);\n+            Assertions.assertNotNull(urls);\n+            Assertions.assertEquals(4, urls.size());\n+            URL url = urls.get(0);\n+            Assertions.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assertions.assertEquals(\"service1\", url.getServiceInterface());\n+            Assertions.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assertions.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n+            Assertions.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+        }\n     }\n \n \n     @Test\n-    public void parseConfiguratorsAppAnyServicesTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppAnyServices.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(2, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(\"*\", url.getServiceInterface());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n-        Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+    public void parseConfiguratorsAppAnyServicesTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppAnyServices.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n+            Assertions.assertNotNull(urls);\n+            Assertions.assertEquals(2, urls.size());\n+            URL url = urls.get(0);\n+            Assertions.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assertions.assertEquals(\"*\", url.getServiceInterface());\n+            Assertions.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assertions.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n+            Assertions.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+        }\n     }\n \n     @Test\n-    public void parseConfiguratorsAppNoServiceTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppNoService.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(1, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(\"*\", url.getServiceInterface());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n-        Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+    public void parseConfiguratorsAppNoServiceTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppNoService.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n+            Assertions.assertNotNull(urls);\n+            Assertions.assertEquals(1, urls.size());\n+            URL url = urls.get(0);\n+            Assertions.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assertions.assertEquals(\"*\", url.getServiceInterface());\n+            Assertions.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assertions.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n+            Assertions.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+        }\n     }\n \n     @Test\n-    public void parseConsumerSpecificProvidersTest() {\n-        InputStream yamlStream = this.getClass().getResourceAsStream(\"/ConsumerSpecificProviders.yml\");\n-        List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n-        Assert.assertNotNull(urls);\n-        Assert.assertEquals(1, urls.size());\n-        URL url = urls.get(0);\n-        Assert.assertEquals(\"127.0.0.1\", url.getAddress());\n-        Assert.assertEquals(\"*\", url.getServiceInterface());\n-        Assert.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n-        Assert.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n-        Assert.assertEquals(\"127.0.0.1:20880\", url.getParameter(Constants.OVERRIDE_PROVIDERS_KEY));\n-        Assert.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+    public void parseConsumerSpecificProvidersTest() throws IOException {\n+        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/ConsumerSpecificProviders.yml\")) {\n+            List<URL> urls = ConfigParser.parseConfigurators(streamToString(yamlStream));\n+            Assertions.assertNotNull(urls);\n+            Assertions.assertEquals(1, urls.size());\n+            URL url = urls.get(0);\n+            Assertions.assertEquals(\"127.0.0.1\", url.getAddress());\n+            Assertions.assertEquals(\"*\", url.getServiceInterface());\n+            Assertions.assertEquals(6666, url.getParameter(Constants.TIMEOUT_KEY, 0));\n+            Assertions.assertEquals(\"random\", url.getParameter(Constants.LOADBALANCE_KEY));\n+            Assertions.assertEquals(\"127.0.0.1:20880\", url.getParameter(Constants.OVERRIDE_PROVIDERS_KEY));\n+            Assertions.assertEquals(url.getParameter(Constants.APPLICATION_KEY), \"demo-consumer\");\n+        }\n     }\n \n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParserTest.java",
                "sha": "6bfe3e0c9e10e230e9112b3cbab4057ba79257b9",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectoryTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectoryTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 5,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectoryTest.java",
                "patch": "@@ -25,8 +25,8 @@\n import org.apache.dubbo.rpc.cluster.router.MockInvoker;\n import org.apache.dubbo.rpc.cluster.router.condition.ConditionRouterFactory;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -56,10 +56,10 @@ public void testStaticDirectory() {\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\n         StaticDirectory<String> staticDirectory = new StaticDirectory<>(filteredInvokers);\n         boolean isAvailable = staticDirectory.isAvailable();\n-        Assert.assertTrue(!isAvailable);\n+        Assertions.assertTrue(!isAvailable);\n         List<Invoker<String>> newInvokers = staticDirectory.list(new MockDirInvocation());\n-        Assert.assertTrue(newInvokers.size() > 0);\n+        Assertions.assertTrue(newInvokers.size() > 0);\n         staticDirectory.destroy();\n-        Assert.assertEquals(0, newInvokers.size());\n+        Assertions.assertEquals(0, newInvokers.size());\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectoryTest.java",
                "sha": "706f1416b5bcf6a271f1714dc0796727eeca5a43",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalanceTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalanceTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 24,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalanceTest.java",
                "patch": "@@ -18,8 +18,8 @@\n \n import org.apache.dubbo.rpc.Invoker;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -28,27 +28,27 @@\n @SuppressWarnings(\"rawtypes\")\n public class ConsistentHashLoadBalanceTest extends LoadBalanceBaseTest {\n \n-\t@Test\n-\tpublic void testConsistentHashLoadBalance() {\n-\t\tint runs = 10000;\n-\t\tlong unHitedInvokerCount = 0;\n-\t\tMap<Invoker, Long> hitedInvokers = new HashMap<>();\n-\t\tMap<Invoker, AtomicLong> counter = getInvokeCounter(runs, ConsistentHashLoadBalance.NAME);\n-\t\tfor (Invoker minvoker : counter.keySet()) {\n-\t\t\tLong count = counter.get(minvoker).get();\n-\n-\t\t\tif (count == 0) {\n-\t\t\t\tunHitedInvokerCount++;\n-\t\t\t} else {\n-\t\t\t\thitedInvokers.put(minvoker, count);\n-\t\t\t}\n-\t\t}\n-\n-\t\tAssert.assertEquals(\"the number of unHitedInvoker should be counter.size() - 1\", counter.size() - 1,\n-\t\t\t\tunHitedInvokerCount);\n-\t\tAssert.assertEquals(\"the number of hitedInvoker should be 1\", 1, hitedInvokers.size());\n-\t\tAssert.assertEquals(\"the number of hited count should be the number of runs\", runs,\n-\t\t\t\thitedInvokers.values().iterator().next().intValue());\n-\t}\n+    @Test\n+    public void testConsistentHashLoadBalance() {\n+        int runs = 10000;\n+        long unHitedInvokerCount = 0;\n+        Map<Invoker, Long> hitedInvokers = new HashMap<>();\n+        Map<Invoker, AtomicLong> counter = getInvokeCounter(runs, ConsistentHashLoadBalance.NAME);\n+        for (Invoker minvoker : counter.keySet()) {\n+            Long count = counter.get(minvoker).get();\n+\n+            if (count == 0) {\n+                unHitedInvokerCount++;\n+            } else {\n+                hitedInvokers.put(minvoker, count);\n+            }\n+        }\n+\n+        Assertions.assertEquals(counter.size() - 1,\n+                unHitedInvokerCount, \"the number of unHitedInvoker should be counter.size() - 1\");\n+        Assertions.assertEquals(1, hitedInvokers.size(), \"the number of hitedInvoker should be 1\");\n+        Assertions.assertEquals(runs,\n+                hitedInvokers.values().iterator().next().intValue(), \"the number of hited count should be the number of runs\");\n+    }\n \n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/ConsistentHashLoadBalanceTest.java",
                "sha": "48bef62a205a3901f9943e94b4cd5fb642c0cb36",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveBalanceTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveBalanceTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 8,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveBalanceTest.java",
                "patch": "@@ -17,24 +17,25 @@\n package org.apache.dubbo.rpc.cluster.loadbalance;\n \n import org.apache.dubbo.rpc.Invoker;\n-import org.junit.Assert;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n \n public class LeastActiveBalanceTest extends LoadBalanceBaseTest {\n-    @Ignore\n+    @Disabled\n     @Test\n     public void testLeastActiveLoadBalance_select() {\n         int runs = 10000;\n         Map<Invoker, AtomicLong> counter = getInvokeCounter(runs, LeastActiveLoadBalance.NAME);\n         for (Map.Entry<Invoker, AtomicLong> entry : counter.entrySet()) {\n             Long count = entry.getValue().get();\n             //            System.out.println(count);\n-            Assert.assertTrue(\"abs diff shoud < avg\",\n-                    Math.abs(count - runs / (0f + invokers.size())) < runs / (0f + invokers.size()));\n+            Assertions.assertTrue(\n+                    Math.abs(count - runs / (0f + invokers.size())) < runs / (0f + invokers.size()), \"abs diff shoud < avg\");\n         }\n     }\n \n@@ -56,13 +57,13 @@ public void testSelectByWeight() {\n                 sumInvoker2++;\n             }\n             // never select invoker3 because it's active is more than invoker1 and invoker2\n-            Assert.assertTrue(\"select is not the least active one\", !selected.getUrl().getProtocol().equals(\"test3\"));\n+            Assertions.assertTrue(!selected.getUrl().getProtocol().equals(\"test3\"), \"select is not the least active one\");\n         }\n \n         // the sumInvoker1 : sumInvoker2 approximately equal to 1: 9\n         System.out.println(sumInvoker1);\n         System.out.println(sumInvoker2);\n \n-        Assert.assertEquals(\"select failed!\", sumInvoker1 + sumInvoker2, loop);\n+        Assertions.assertEquals(sumInvoker1 + sumInvoker2, loop, \"select failed!\");\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LeastActiveBalanceTest.java",
                "sha": "00b5c14db1b2b8ff728f446a621305acc18d6250",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LoadBalanceBaseTest.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LoadBalanceBaseTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 21,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LoadBalanceBaseTest.java",
                "patch": "@@ -24,10 +24,10 @@\n import org.apache.dubbo.rpc.RpcInvocation;\n import org.apache.dubbo.rpc.RpcStatus;\n import org.apache.dubbo.rpc.cluster.LoadBalance;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n \n import com.alibaba.fastjson.JSON;\n import org.mockito.Mockito;\n@@ -63,14 +63,14 @@\n     /**\n      * @throws java.lang.Exception\n      */\n-    @BeforeClass\n+    @BeforeAll\n     public static void setUpBeforeClass() throws Exception {\n     }\n \n     /**\n      * @throws java.lang.Exception\n      */\n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n \n         invocation = mock(Invocation.class);\n@@ -136,20 +136,20 @@ protected AbstractLoadBalance getLoadBalance(String loadbalanceName) {\n \n     @Test\n     public void testLoadBalanceWarmup() {\n-        Assert.assertEquals(1, calculateDefaultWarmupWeight(0));\n-        Assert.assertEquals(1, calculateDefaultWarmupWeight(13));\n-        Assert.assertEquals(1, calculateDefaultWarmupWeight(6 * 1000));\n-        Assert.assertEquals(2, calculateDefaultWarmupWeight(12 * 1000));\n-        Assert.assertEquals(10, calculateDefaultWarmupWeight(60 * 1000));\n-        Assert.assertEquals(50, calculateDefaultWarmupWeight(5 * 60 * 1000));\n-        Assert.assertEquals(50, calculateDefaultWarmupWeight(5 * 60 * 1000 + 23));\n-        Assert.assertEquals(50, calculateDefaultWarmupWeight(5 * 60 * 1000 + 5999));\n-        Assert.assertEquals(51, calculateDefaultWarmupWeight(5 * 60 * 1000 + 6000));\n-        Assert.assertEquals(90, calculateDefaultWarmupWeight(9 * 60 * 1000));\n-        Assert.assertEquals(98, calculateDefaultWarmupWeight(10 * 60 * 1000 - 12 * 1000));\n-        Assert.assertEquals(99, calculateDefaultWarmupWeight(10 * 60 * 1000 - 6 * 1000));\n-        Assert.assertEquals(100, calculateDefaultWarmupWeight(10 * 60 * 1000));\n-        Assert.assertEquals(100, calculateDefaultWarmupWeight(20 * 60 * 1000));\n+        Assertions.assertEquals(1, calculateDefaultWarmupWeight(0));\n+        Assertions.assertEquals(1, calculateDefaultWarmupWeight(13));\n+        Assertions.assertEquals(1, calculateDefaultWarmupWeight(6 * 1000));\n+        Assertions.assertEquals(2, calculateDefaultWarmupWeight(12 * 1000));\n+        Assertions.assertEquals(10, calculateDefaultWarmupWeight(60 * 1000));\n+        Assertions.assertEquals(50, calculateDefaultWarmupWeight(5 * 60 * 1000));\n+        Assertions.assertEquals(50, calculateDefaultWarmupWeight(5 * 60 * 1000 + 23));\n+        Assertions.assertEquals(50, calculateDefaultWarmupWeight(5 * 60 * 1000 + 5999));\n+        Assertions.assertEquals(51, calculateDefaultWarmupWeight(5 * 60 * 1000 + 6000));\n+        Assertions.assertEquals(90, calculateDefaultWarmupWeight(9 * 60 * 1000));\n+        Assertions.assertEquals(98, calculateDefaultWarmupWeight(10 * 60 * 1000 - 12 * 1000));\n+        Assertions.assertEquals(99, calculateDefaultWarmupWeight(10 * 60 * 1000 - 6 * 1000));\n+        Assertions.assertEquals(100, calculateDefaultWarmupWeight(10 * 60 * 1000));\n+        Assertions.assertEquals(100, calculateDefaultWarmupWeight(20 * 60 * 1000));\n     }\n \n     /**\n@@ -209,7 +209,7 @@ public String toString() {\n     protected Invoker<LoadBalanceBaseTest> weightInvoker3;\n     protected Invoker<LoadBalanceBaseTest> weightInvokerTmp;\n \n-    @Before\n+    @BeforeEach\n     public void before() throws Exception {\n         weightInvoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());\n         weightInvoker2 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/LoadBalanceBaseTest.java",
                "sha": "ec43e3871b796db8d413253da326a2ce2ee4cc38",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RandomLoadBalanceTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RandomLoadBalanceTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 9,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RandomLoadBalanceTest.java",
                "patch": "@@ -18,8 +18,9 @@\n \n import org.apache.dubbo.rpc.Invoker;\n import org.apache.dubbo.rpc.RpcStatus;\n-import org.junit.Assert;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -34,7 +35,7 @@ public void testRandomLoadBalanceSelect() {\n         Map<Invoker, AtomicLong> counter = getInvokeCounter(runs, RandomLoadBalance.NAME);\n         for (Map.Entry<Invoker, AtomicLong> entry : counter.entrySet()) {\n             Long count = entry.getValue().get();\n-            Assert.assertTrue(\"abs diff should < avg\", Math.abs(count - runs / (0f + invokers.size())) < runs / (0f + invokers.size()));\n+            Assertions.assertTrue(Math.abs(count - runs / (0f + invokers.size())) < runs / (0f + invokers.size()), \"abs diff should < avg\");\n         }\n \n         for (int i = 0; i < 5; i++) {\n@@ -46,11 +47,11 @@ public void testRandomLoadBalanceSelect() {\n         for (Map.Entry<Invoker, AtomicLong> entry : counter.entrySet()) {\n             Long count = entry.getValue().get();\n         }\n-        Assert.assertEquals(runs, counter.get(invoker1).intValue());\n-        Assert.assertEquals(0, counter.get(invoker2).intValue());\n-        Assert.assertEquals(0, counter.get(invoker3).intValue());\n-        Assert.assertEquals(0, counter.get(invoker4).intValue());\n-        Assert.assertEquals(0, counter.get(invoker5).intValue());\n+        Assertions.assertEquals(runs, counter.get(invoker1).intValue());\n+        Assertions.assertEquals(0, counter.get(invoker2).intValue());\n+        Assertions.assertEquals(0, counter.get(invoker3).intValue());\n+        Assertions.assertEquals(0, counter.get(invoker4).intValue());\n+        Assertions.assertEquals(0, counter.get(invoker5).intValue());\n     }\n \n     @Test\n@@ -81,7 +82,7 @@ public void testSelectByWeight() {\n         System.out.println(sumInvoker1);\n         System.out.println(sumInvoker2);\n         System.out.println(sumInvoker3);\n-        Assert.assertEquals(\"select failed!\", sumInvoker1 + sumInvoker2 + sumInvoker3, loop);\n+        Assertions.assertEquals(sumInvoker1 + sumInvoker2 + sumInvoker3, loop, \"select failed!\");\n     }\n \n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RandomLoadBalanceTest.java",
                "sha": "f18a07d0e0056dbfe6944ac74ec87003adbc2ddf",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalanceTest.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalanceTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 19,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalanceTest.java",
                "patch": "@@ -17,9 +17,10 @@\n package org.apache.dubbo.rpc.cluster.loadbalance;\n \n import org.apache.dubbo.rpc.Invoker;\n-import org.junit.Assert;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n \n import java.lang.reflect.Field;\n import java.util.ArrayList;\n@@ -30,19 +31,19 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n \n-@Ignore\n+@Disabled\n public class RoundRobinLoadBalanceTest extends LoadBalanceBaseTest {\n \n     private void assertStrictWRRResult(int loop, Map<Invoker, InvokeResult> resultMap) {\n         int invokeCount = 0;\n         for (InvokeResult invokeResult : resultMap.values()) {\n             int count = (int) invokeResult.getCount().get();\n             // Because it's a strictly round robin, so the abs delta should be < 10 too\n-            Assert.assertTrue(\"delta with expected count should < 10\",\n-                    Math.abs(invokeResult.getExpected(loop) - count) < 10);\n+            Assertions.assertTrue(\n+                    Math.abs(invokeResult.getExpected(loop) - count) < 10, \"delta with expected count should < 10\");\n             invokeCount += count;\n         }\n-        Assert.assertEquals(\"select failed!\", invokeCount, loop);\n+        Assertions.assertEquals(invokeCount, loop, \"select failed!\");\n     }\n \n     @Test\n@@ -51,7 +52,7 @@ public void testRoundRobinLoadBalanceSelect() {\n         Map<Invoker, AtomicLong> counter = getInvokeCounter(runs, RoundRobinLoadBalance.NAME);\n         for (Map.Entry<Invoker, AtomicLong> entry : counter.entrySet()) {\n             Long count = entry.getValue().get();\n-            Assert.assertTrue(\"abs diff should < 1\", Math.abs(count - runs / (0f + invokers.size())) < 1f);\n+            Assertions.assertTrue(Math.abs(count - runs / (0f + invokers.size())) < 1f, \"abs diff should < 1\");\n         }\n     }\n \n@@ -62,7 +63,7 @@ public void testSelectByWeight() {\n         final int runs = 10000;\n         List<Thread> threads = new ArrayList<Thread>();\n         int threadNum = 10;\n-        for (int i = 0; i < threadNum; i ++) {\n+        for (int i = 0; i < threadNum; i++) {\n             threads.add(new Thread() {\n                 @Override\n                 public void run() {\n@@ -109,15 +110,15 @@ public void testNodeCacheShouldNotRecycle() {\n             assertStrictWRRResult(loop, resultMap);\n \n             // inner nodes cache judgement\n-            RoundRobinLoadBalance lb = (RoundRobinLoadBalance)getLoadBalance(RoundRobinLoadBalance.NAME);\n-            Assert.assertEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n+            RoundRobinLoadBalance lb = (RoundRobinLoadBalance) getLoadBalance(RoundRobinLoadBalance.NAME);\n+            Assertions.assertEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n \n             weightInvokers.remove(weightInvokerTmp);\n \n             resultMap = getWeightedInvokeResult(loop, RoundRobinLoadBalance.NAME);\n             assertStrictWRRResult(loop, resultMap);\n \n-            Assert.assertNotEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n+            Assertions.assertNotEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n         } finally {\n             //prevent other UT's failure\n             weightInvokers.remove(weightInvokerTmp);\n@@ -134,13 +135,13 @@ public void testNodeCacheShouldRecycle() {\n                 recycleTimeField.setAccessible(true);\n                 recycleTimeField.setInt(RoundRobinLoadBalance.class, 10);\n             } catch (NoSuchFieldException e) {\n-                Assert.assertTrue(\"getField failed\", true);\n+                Assertions.assertTrue(true, \"getField failed\");\n             } catch (SecurityException e) {\n-                Assert.assertTrue(\"getField failed\", true);\n+                Assertions.assertTrue(true, \"getField failed\");\n             } catch (IllegalArgumentException e) {\n-                Assert.assertTrue(\"getField failed\", true);\n+                Assertions.assertTrue(true, \"getField failed\");\n             } catch (IllegalAccessException e) {\n-                Assert.assertTrue(\"getField failed\", true);\n+                Assertions.assertTrue(true, \"getField failed\");\n             }\n         }\n \n@@ -152,15 +153,15 @@ public void testNodeCacheShouldRecycle() {\n             assertStrictWRRResult(loop, resultMap);\n \n             // inner nodes cache judgement\n-            RoundRobinLoadBalance lb = (RoundRobinLoadBalance)getLoadBalance(RoundRobinLoadBalance.NAME);\n-            Assert.assertEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n+            RoundRobinLoadBalance lb = (RoundRobinLoadBalance) getLoadBalance(RoundRobinLoadBalance.NAME);\n+            Assertions.assertEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n \n             weightInvokers.remove(weightInvokerTmp);\n \n             resultMap = getWeightedInvokeResult(loop, RoundRobinLoadBalance.NAME);\n             assertStrictWRRResult(loop, resultMap);\n \n-            Assert.assertEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n+            Assertions.assertEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n         } finally {\n             //prevent other UT's failure\n             weightInvokers.remove(weightInvokerTmp);",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalanceTest.java",
                "sha": "86d4130a21d11f1f49fd72f0ef79fd49888c2e14",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/merger/ResultMergerTest.java",
                "changes": 122,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/merger/ResultMergerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 61,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/merger/ResultMergerTest.java",
                "patch": "@@ -16,8 +16,8 @@\n  */\n package org.apache.dubbo.rpc.cluster.merger;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.lang.reflect.Array;\n import java.util.ArrayList;\n@@ -36,9 +36,9 @@\n     public void testMergerFactoryIllegalArgumentException() {\n         try {\n             MergerFactory.getMerger(null);\n-            Assert.fail(\"expected IllegalArgumentException for null argument\");\n+            Assertions.fail(\"expected IllegalArgumentException for null argument\");\n         } catch (IllegalArgumentException exception) {\n-            Assert.assertEquals(\"returnType is null\", exception.getMessage());\n+            Assertions.assertEquals(\"returnType is null\", exception.getMessage());\n         }\n     }\n \n@@ -51,9 +51,9 @@ public void testArrayMergerIllegalArgumentException() {\n         Integer[] integerArray = {3, 4, 5};\n         try {\n             Object result = ArrayMerger.INSTANCE.merge(stringArray, null, integerArray);\n-            Assert.fail(\"expected IllegalArgumentException for different arguments' types\");\n+            Assertions.fail(\"expected IllegalArgumentException for different arguments' types\");\n         } catch (IllegalArgumentException exception) {\n-            Assert.assertEquals(\"Arguments' types are different\", exception.getMessage());\n+            Assertions.assertEquals(\"Arguments' types are different\", exception.getMessage());\n         }\n     }\n \n@@ -67,33 +67,33 @@ public void testArrayMerger() {\n         String[] stringArray3 = {};\n \n         Object result = ArrayMerger.INSTANCE.merge(stringArray1, stringArray2, stringArray3, null);\n-        Assert.assertTrue(result.getClass().isArray());\n-        Assert.assertEquals(6, Array.getLength(result));\n-        Assert.assertTrue(String.class.isInstance(Array.get(result, 0)));\n+        Assertions.assertTrue(result.getClass().isArray());\n+        Assertions.assertEquals(6, Array.getLength(result));\n+        Assertions.assertTrue(String.class.isInstance(Array.get(result, 0)));\n         for (int i = 0; i < 6; i++) {\n-            Assert.assertEquals(String.valueOf(i + 1), Array.get(result, i));\n+            Assertions.assertEquals(String.valueOf(i + 1), Array.get(result, i));\n         }\n \n         Integer[] intArray1 = {1, 2, 3};\n         Integer[] intArray2 = {4, 5, 6};\n         Integer[] intArray3 = {7};\n         // trigger ArrayMerger\n         result = MergerFactory.getMerger(Integer[].class).merge(intArray1, intArray2, intArray3, null);\n-        Assert.assertTrue(result.getClass().isArray());\n-        Assert.assertEquals(7, Array.getLength(result));\n-        Assert.assertTrue(Integer.class == result.getClass().getComponentType());\n+        Assertions.assertTrue(result.getClass().isArray());\n+        Assertions.assertEquals(7, Array.getLength(result));\n+        Assertions.assertTrue(Integer.class == result.getClass().getComponentType());\n         for (int i = 0; i < 7; i++) {\n-            Assert.assertEquals(i + 1, Array.get(result, i));\n+            Assertions.assertEquals(i + 1, Array.get(result, i));\n         }\n \n         result = ArrayMerger.INSTANCE.merge(null);\n-        Assert.assertEquals(0, Array.getLength(result));\n+        Assertions.assertEquals(0, Array.getLength(result));\n \n         result = ArrayMerger.INSTANCE.merge(null, null);\n-        Assert.assertEquals(0, Array.getLength(result));\n+        Assertions.assertEquals(0, Array.getLength(result));\n \n         result = ArrayMerger.INSTANCE.merge(null, new Object[0]);\n-        Assert.assertEquals(0, Array.getLength(result));\n+        Assertions.assertEquals(0, Array.getLength(result));\n     }\n \n     /**\n@@ -104,17 +104,17 @@ public void testBooleanArrayMerger() {\n         boolean[] arrayOne = {true, false};\n         boolean[] arrayTwo = {false};\n         boolean[] result = MergerFactory.getMerger(boolean[].class).merge(arrayOne, arrayTwo, null);\n-        Assert.assertEquals(3, result.length);\n+        Assertions.assertEquals(3, result.length);\n         boolean[] mergedResult = {true, false, false};\n         for (int i = 0; i < mergedResult.length; i++) {\n-            Assert.assertEquals(mergedResult[i], result[i]);\n+            Assertions.assertEquals(mergedResult[i], result[i]);\n         }\n \n         result = MergerFactory.getMerger(boolean[].class).merge(null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n \n         result = MergerFactory.getMerger(boolean[].class).merge(null, null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n     }\n \n     /**\n@@ -125,17 +125,17 @@ public void testByteArrayMerger() {\n         byte[] arrayOne = {1, 2};\n         byte[] arrayTwo = {1, 32};\n         byte[] result = MergerFactory.getMerger(byte[].class).merge(arrayOne, arrayTwo, null);\n-        Assert.assertEquals(4, result.length);\n+        Assertions.assertEquals(4, result.length);\n         byte[] mergedResult = {1, 2, 1, 32};\n         for (int i = 0; i < mergedResult.length; i++) {\n-            Assert.assertEquals(mergedResult[i], result[i]);\n+            Assertions.assertEquals(mergedResult[i], result[i]);\n         }\n \n         result = MergerFactory.getMerger(byte[].class).merge(null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n \n         result = MergerFactory.getMerger(byte[].class).merge(null, null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n     }\n \n     /**\n@@ -146,17 +146,17 @@ public void testCharArrayMerger() {\n         char[] arrayOne = \"hello\".toCharArray();\n         char[] arrayTwo = \"world\".toCharArray();\n         char[] result = MergerFactory.getMerger(char[].class).merge(arrayOne, arrayTwo, null);\n-        Assert.assertEquals(10, result.length);\n+        Assertions.assertEquals(10, result.length);\n         char[] mergedResult = \"helloworld\".toCharArray();\n         for (int i = 0; i < mergedResult.length; i++) {\n-            Assert.assertEquals(mergedResult[i], result[i]);\n+            Assertions.assertEquals(mergedResult[i], result[i]);\n         }\n \n         result = MergerFactory.getMerger(char[].class).merge(null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n \n         result = MergerFactory.getMerger(char[].class).merge(null, null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n     }\n \n     /**\n@@ -167,17 +167,17 @@ public void testDoubleArrayMerger() {\n         double[] arrayOne = {1.2d, 3.5d};\n         double[] arrayTwo = {2d, 34d};\n         double[] result = MergerFactory.getMerger(double[].class).merge(arrayOne, arrayTwo, null);\n-        Assert.assertEquals(4, result.length);\n+        Assertions.assertEquals(4, result.length);\n         double[] mergedResult = {1.2d, 3.5d, 2d, 34d};\n         for (int i = 0; i < mergedResult.length; i++) {\n-            Assert.assertTrue(mergedResult[i] == result[i]);\n+            Assertions.assertTrue(mergedResult[i] == result[i]);\n         }\n \n         result = MergerFactory.getMerger(double[].class).merge(null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n \n         result = MergerFactory.getMerger(double[].class).merge(null, null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n     }\n \n     /**\n@@ -188,17 +188,17 @@ public void testFloatArrayMerger() {\n         float[] arrayOne = {1.2f, 3.5f};\n         float[] arrayTwo = {2f, 34f};\n         float[] result = MergerFactory.getMerger(float[].class).merge(arrayOne, arrayTwo, null);\n-        Assert.assertEquals(4, result.length);\n+        Assertions.assertEquals(4, result.length);\n         double[] mergedResult = {1.2f, 3.5f, 2f, 34f};\n         for (int i = 0; i < mergedResult.length; i++) {\n-            Assert.assertTrue(mergedResult[i] == result[i]);\n+            Assertions.assertTrue(mergedResult[i] == result[i]);\n         }\n \n         result = MergerFactory.getMerger(float[].class).merge(null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n \n         result = MergerFactory.getMerger(float[].class).merge(null, null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n     }\n \n     /**\n@@ -209,17 +209,17 @@ public void testIntArrayMerger() {\n         int[] arrayOne = {1, 2};\n         int[] arrayTwo = {2, 34};\n         int[] result = MergerFactory.getMerger(int[].class).merge(arrayOne, arrayTwo, null);\n-        Assert.assertEquals(4, result.length);\n+        Assertions.assertEquals(4, result.length);\n         double[] mergedResult = {1, 2, 2, 34};\n         for (int i = 0; i < mergedResult.length; i++) {\n-            Assert.assertTrue(mergedResult[i] == result[i]);\n+            Assertions.assertTrue(mergedResult[i] == result[i]);\n         }\n \n         result = MergerFactory.getMerger(int[].class).merge(null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n \n         result = MergerFactory.getMerger(int[].class).merge(null, null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n     }\n \n     /**\n@@ -238,21 +238,21 @@ public void testListMerger() {\n         }};\n \n         List result = MergerFactory.getMerger(List.class).merge(list1, list2, null);\n-        Assert.assertEquals(5, result.size());\n+        Assertions.assertEquals(5, result.size());\n         ArrayList<String> expected = new ArrayList<String>() {{\n             add(null);\n             add(\"1\");\n             add(\"2\");\n             add(\"3\");\n             add(\"4\");\n         }};\n-        Assert.assertEquals(expected, result);\n+        Assertions.assertEquals(expected, result);\n \n         result = MergerFactory.getMerger(List.class).merge(null);\n-        Assert.assertEquals(0, result.size());\n+        Assertions.assertEquals(0, result.size());\n \n         result = MergerFactory.getMerger(List.class).merge(null, null);\n-        Assert.assertEquals(0, result.size());\n+        Assertions.assertEquals(0, result.size());\n     }\n \n     /**\n@@ -269,20 +269,20 @@ public void testMapArrayMerger() {\n             put(\"444\", 2323);\n         }};\n         Map<Object, Object> result = MergerFactory.getMerger(Map.class).merge(mapOne, mapTwo, null);\n-        Assert.assertEquals(4, result.size());\n+        Assertions.assertEquals(4, result.size());\n         Map<String, Integer> mergedResult = new HashMap<String, Integer>() {{\n             put(\"11\", 222);\n             put(\"223\", 11);\n             put(\"3333\", 3232);\n             put(\"444\", 2323);\n         }};\n-        Assert.assertEquals(mergedResult, result);\n+        Assertions.assertEquals(mergedResult, result);\n \n         result = MergerFactory.getMerger(Map.class).merge(null);\n-        Assert.assertEquals(0, result.size());\n+        Assertions.assertEquals(0, result.size());\n \n         result = MergerFactory.getMerger(Map.class).merge(null, null);\n-        Assert.assertEquals(0, result.size());\n+        Assertions.assertEquals(0, result.size());\n     }\n \n     /**\n@@ -293,17 +293,17 @@ public void testLongArrayMerger() {\n         long[] arrayOne = {1l, 2l};\n         long[] arrayTwo = {2l, 34l};\n         long[] result = MergerFactory.getMerger(long[].class).merge(arrayOne, arrayTwo, null);\n-        Assert.assertEquals(4, result.length);\n+        Assertions.assertEquals(4, result.length);\n         double[] mergedResult = {1l, 2l, 2l, 34l};\n         for (int i = 0; i < mergedResult.length; i++) {\n-            Assert.assertTrue(mergedResult[i] == result[i]);\n+            Assertions.assertTrue(mergedResult[i] == result[i]);\n         }\n \n         result = MergerFactory.getMerger(long[].class).merge(null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n \n         result = MergerFactory.getMerger(long[].class).merge(null, null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n     }\n \n     /**\n@@ -324,8 +324,8 @@ public void testSetMerger() {\n \n         Set result = MergerFactory.getMerger(Set.class).merge(set1, set2, null);\n \n-        Assert.assertEquals(4, result.size());\n-        Assert.assertEquals(new HashSet<String>() {\n+        Assertions.assertEquals(4, result.size());\n+        Assertions.assertEquals(new HashSet<String>() {\n             {\n                 add(null);\n                 add(\"1\");\n@@ -335,10 +335,10 @@ public void testSetMerger() {\n         }, result);\n \n         result = MergerFactory.getMerger(Set.class).merge(null);\n-        Assert.assertEquals(0, result.size());\n+        Assertions.assertEquals(0, result.size());\n \n         result = MergerFactory.getMerger(Set.class).merge(null, null);\n-        Assert.assertEquals(0, result.size());\n+        Assertions.assertEquals(0, result.size());\n     }\n \n     /**\n@@ -349,16 +349,16 @@ public void testShortArrayMerger() {\n         short[] arrayOne = {1, 2};\n         short[] arrayTwo = {2, 34};\n         short[] result = MergerFactory.getMerger(short[].class).merge(arrayOne, arrayTwo, null);\n-        Assert.assertEquals(4, result.length);\n+        Assertions.assertEquals(4, result.length);\n         double[] mergedResult = {1, 2, 2, 34};\n         for (int i = 0; i < mergedResult.length; i++) {\n-            Assert.assertTrue(mergedResult[i] == result[i]);\n+            Assertions.assertTrue(mergedResult[i] == result[i]);\n         }\n \n         result = MergerFactory.getMerger(short[].class).merge(null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n \n         result = MergerFactory.getMerger(short[].class).merge(null, null);\n-        Assert.assertEquals(0, result.length);\n+        Assertions.assertEquals(0, result.length);\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/merger/ResultMergerTest.java",
                "sha": "788d1af160f4b00cff4811e1afe2844c9864da2e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/ConfigConditionRouterTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/ConfigConditionRouterTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 5,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/ConfigConditionRouterTest.java",
                "patch": "@@ -19,15 +19,15 @@\n import org.apache.curator.framework.CuratorFramework;\n import org.apache.curator.framework.CuratorFrameworkFactory;\n import org.apache.curator.retry.ExponentialBackoffRetry;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n \n-@Ignore(\"FIXME This is not a formal UT\")\n+@Disabled(\"FIXME This is not a formal UT\")\n public class ConfigConditionRouterTest {\n     private static CuratorFramework client;\n \n-    @Before\n+    @BeforeEach\n     public void init() {\n         client = CuratorFrameworkFactory.newClient(\"127.0.0.1:2181\", 60 * 1000, 60 * 1000,\n                 new ExponentialBackoffRetry(1000, 3));",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/ConfigConditionRouterTest.java",
                "sha": "1235869a2e72fcb998a53dbad8217a1370d57408",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 5,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java",
                "patch": "@@ -19,15 +19,15 @@\n import org.apache.curator.framework.CuratorFramework;\n import org.apache.curator.framework.CuratorFrameworkFactory;\n import org.apache.curator.retry.ExponentialBackoffRetry;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n \n-@Ignore(\"FIXME This is not a formal UT\")\n+@Disabled(\"FIXME This is not a formal UT\")\n public class TagRouterTest {\n     private static CuratorFramework client;\n \n-    @Before\n+    @BeforeEach\n     public void init() {\n         client = CuratorFrameworkFactory.newClient(\"127.0.0.1:2181\", 60 * 1000, 60 * 1000,\n                 new ExponentialBackoffRetry(1000, 3));",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/TagRouterTest.java",
                "sha": "98cdaf4d4dfaff6c190afd1bde0caf0459f46ae0",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouterTest.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouterTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 42,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouterTest.java",
                "patch": "@@ -26,10 +26,10 @@\n import org.apache.dubbo.rpc.cluster.Router;\r\n import org.apache.dubbo.rpc.cluster.router.MockInvoker;\r\n \r\n-import org.junit.Assert;\r\n-import org.junit.Before;\r\n-import org.junit.BeforeClass;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.BeforeAll;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n@@ -38,11 +38,11 @@\n \r\n     private URL SCRIPT_URL = URL.valueOf(\"condition://0.0.0.0/com.foo.BarService\");\r\n \r\n-    @BeforeClass\r\n+    @BeforeAll\r\n     public static void setUpBeforeClass() throws Exception {\r\n     }\r\n \r\n-    @Before\r\n+    @BeforeEach\r\n     public void setUp() throws Exception {\r\n     }\r\n \r\n@@ -56,31 +56,31 @@ public void testRoute_matchWhen() {\n \r\n         Router router = new ConditionRouterFactory().getRouter(getRouteUrl(\" => host = 1.2.3.4\"));\r\n         boolean matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"), invocation);\r\n-        Assert.assertEquals(true, matchWhen);\r\n+        Assertions.assertEquals(true, matchWhen);\r\n \r\n         router = new ConditionRouterFactory().getRouter(getRouteUrl(\"host = 2.2.2.2,1.1.1.1,3.3.3.3 => host = 1.2.3.4\"));\r\n         matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"), invocation);\r\n-        Assert.assertEquals(true, matchWhen);\r\n+        Assertions.assertEquals(true, matchWhen);\r\n \r\n         router = new ConditionRouterFactory().getRouter(getRouteUrl(\"host = 2.2.2.2,1.1.1.1,3.3.3.3 & host !=1.1.1.1 => host = 1.2.3.4\"));\r\n         matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"), invocation);\r\n-        Assert.assertEquals(false, matchWhen);\r\n+        Assertions.assertEquals(false, matchWhen);\r\n \r\n         router = new ConditionRouterFactory().getRouter(getRouteUrl(\"host !=4.4.4.4 & host = 2.2.2.2,1.1.1.1,3.3.3.3 => host = 1.2.3.4\"));\r\n         matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"), invocation);\r\n-        Assert.assertEquals(true, matchWhen);\r\n+        Assertions.assertEquals(true, matchWhen);\r\n \r\n         router = new ConditionRouterFactory().getRouter(getRouteUrl(\"host !=4.4.4.* & host = 2.2.2.2,1.1.1.1,3.3.3.3 => host = 1.2.3.4\"));\r\n         matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"), invocation);\r\n-        Assert.assertEquals(true, matchWhen);\r\n+        Assertions.assertEquals(true, matchWhen);\r\n \r\n         router = new ConditionRouterFactory().getRouter(getRouteUrl(\"host = 2.2.2.2,1.1.1.*,3.3.3.3 & host != 1.1.1.1 => host = 1.2.3.4\"));\r\n         matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"), invocation);\r\n-        Assert.assertEquals(false, matchWhen);\r\n+        Assertions.assertEquals(false, matchWhen);\r\n \r\n         router = new ConditionRouterFactory().getRouter(getRouteUrl(\"host = 2.2.2.2,1.1.1.*,3.3.3.3 & host != 1.1.1.2 => host = 1.2.3.4\"));\r\n         matchWhen = ((ConditionRouter) router).matchWhen(URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService\"), invocation);\r\n-        Assert.assertEquals(true, matchWhen);\r\n+        Assertions.assertEquals(true, matchWhen);\r\n     }\r\n \r\n     @Test\r\n@@ -121,12 +121,12 @@ public void testRoute_matchFilter() {\n         List<Invoker<String>> filteredInvokers4 = router4.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n         List<Invoker<String>> filteredInvokers5 = router5.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n         List<Invoker<String>> filteredInvokers6 = router6.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(1, filteredInvokers1.size());\r\n-        Assert.assertEquals(0, filteredInvokers2.size());\r\n-        Assert.assertEquals(0, filteredInvokers3.size());\r\n-        Assert.assertEquals(1, filteredInvokers4.size());\r\n-        Assert.assertEquals(2, filteredInvokers5.size());\r\n-        Assert.assertEquals(1, filteredInvokers6.size());\r\n+        Assertions.assertEquals(1, filteredInvokers1.size());\r\n+        Assertions.assertEquals(0, filteredInvokers2.size());\r\n+        Assertions.assertEquals(0, filteredInvokers3.size());\r\n+        Assertions.assertEquals(1, filteredInvokers4.size());\r\n+        Assertions.assertEquals(2, filteredInvokers5.size());\r\n+        Assertions.assertEquals(1, filteredInvokers6.size());\r\n     }\r\n \r\n     @Test\r\n@@ -136,23 +136,23 @@ public void testRoute_methodRoute() {\n         Router router = new ConditionRouterFactory().getRouter(getRouteUrl(\"methods=getFoo => host = 1.2.3.4\"));\r\n         boolean matchWhen = ((ConditionRouter) router).matchWhen(\r\n                 URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService?methods=setFoo,getFoo,findFoo\"), invocation);\r\n-        Assert.assertEquals(true, matchWhen);\r\n+        Assertions.assertEquals(true, matchWhen);\r\n         // Exactly one method, match\r\n         matchWhen = ((ConditionRouter) router).matchWhen(\r\n                 URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService?methods=getFoo\"), invocation);\r\n-        Assert.assertEquals(true, matchWhen);\r\n+        Assertions.assertEquals(true, matchWhen);\r\n         // Method routing and Other condition routing can work together\r\n         Router router2 = new ConditionRouterFactory()\r\n                 .getRouter(getRouteUrl(\"methods=getFoo & host!=1.1.1.1 => host = 1.2.3.4\"));\r\n         matchWhen = ((ConditionRouter) router2).matchWhen(\r\n                 URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService?methods=getFoo\"), invocation);\r\n-        Assert.assertEquals(false, matchWhen);\r\n+        Assertions.assertEquals(false, matchWhen);\r\n \r\n         Router router3 = new ConditionRouterFactory()\r\n                 .getRouter(getRouteUrl(\"methods=getFoo & host=1.1.1.1 => host = 1.2.3.4\"));\r\n         matchWhen = ((ConditionRouter) router3).matchWhen(\r\n                 URL.valueOf(\"consumer://1.1.1.1/com.foo.BarService?methods=getFoo\"), invocation);\r\n-        Assert.assertEquals(true, matchWhen);\r\n+        Assertions.assertEquals(true, matchWhen);\r\n         // Test filter condition\r\n         List<Invoker<String>> invokers = new ArrayList<Invoker<String>>();\r\n         Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.20.3.3:20880/com.foo.BarService\"));\r\n@@ -169,14 +169,14 @@ public void testRoute_methodRoute() {\n                 Constants.FORCE_KEY, String.valueOf(true)));\r\n         List<Invoker<String>> filteredInvokers1 = router4.route(invokers,\r\n                 URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), invocation);\r\n-        Assert.assertEquals(1, filteredInvokers1.size());\r\n+        Assertions.assertEquals(1, filteredInvokers1.size());\r\n \r\n         Router router5 = new ConditionRouterFactory().getRouter(getRouteUrl(\r\n                 \"host = \" + NetUtils.getLocalHost() + \" & methods = unvalidmethod => \" + \" host = 10.20.3.3\")\r\n                 .addParameter(Constants.FORCE_KEY, String.valueOf(true)));\r\n         List<Invoker<String>> filteredInvokers2 = router5.route(invokers,\r\n                 URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), invocation);\r\n-        Assert.assertEquals(3, filteredInvokers2.size());\r\n+        Assertions.assertEquals(3, filteredInvokers2.size());\r\n         // Request a non-exists method\r\n     }\r\n \r\n@@ -188,7 +188,7 @@ public void testRoute_ReturnFalse() {\n         invokers.add(new MockInvoker<String>());\r\n         invokers.add(new MockInvoker<String>());\r\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(0, filteredInvokers.size());\r\n+        Assertions.assertEquals(0, filteredInvokers.size());\r\n     }\r\n \r\n     @Test\r\n@@ -199,7 +199,7 @@ public void testRoute_ReturnEmpty() {\n         invokers.add(new MockInvoker<String>());\r\n         invokers.add(new MockInvoker<String>());\r\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(0, filteredInvokers.size());\r\n+        Assertions.assertEquals(0, filteredInvokers.size());\r\n     }\r\n \r\n     @Test\r\n@@ -210,7 +210,7 @@ public void testRoute_ReturnAll() {\n         invokers.add(new MockInvoker<String>(URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880/com.foo.BarService\")));\r\n         invokers.add(new MockInvoker<String>(URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880/com.foo.BarService\")));\r\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(invokers, filteredInvokers);\r\n+        Assertions.assertEquals(invokers, filteredInvokers);\r\n     }\r\n \r\n     @Test\r\n@@ -224,9 +224,9 @@ public void testRoute_HostFilter() {\n         invokers.add(invoker2);\r\n         invokers.add(invoker3);\r\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(2, filteredInvokers.size());\r\n-        Assert.assertEquals(invoker2, filteredInvokers.get(0));\r\n-        Assert.assertEquals(invoker3, filteredInvokers.get(1));\r\n+        Assertions.assertEquals(2, filteredInvokers.size());\r\n+        Assertions.assertEquals(invoker2, filteredInvokers.get(0));\r\n+        Assertions.assertEquals(invoker3, filteredInvokers.get(1));\r\n     }\r\n \r\n     @Test\r\n@@ -240,9 +240,9 @@ public void testRoute_Empty_HostFilter() {\n         invokers.add(invoker2);\r\n         invokers.add(invoker3);\r\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(2, filteredInvokers.size());\r\n-        Assert.assertEquals(invoker2, filteredInvokers.get(0));\r\n-        Assert.assertEquals(invoker3, filteredInvokers.get(1));\r\n+        Assertions.assertEquals(2, filteredInvokers.size());\r\n+        Assertions.assertEquals(invoker2, filteredInvokers.get(0));\r\n+        Assertions.assertEquals(invoker3, filteredInvokers.get(1));\r\n     }\r\n \r\n     @Test\r\n@@ -256,9 +256,9 @@ public void testRoute_False_HostFilter() {\n         invokers.add(invoker2);\r\n         invokers.add(invoker3);\r\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(2, filteredInvokers.size());\r\n-        Assert.assertEquals(invoker2, filteredInvokers.get(0));\r\n-        Assert.assertEquals(invoker3, filteredInvokers.get(1));\r\n+        Assertions.assertEquals(2, filteredInvokers.size());\r\n+        Assertions.assertEquals(invoker2, filteredInvokers.get(0));\r\n+        Assertions.assertEquals(invoker3, filteredInvokers.get(1));\r\n     }\r\n \r\n     @Test\r\n@@ -272,9 +272,9 @@ public void testRoute_Placeholder() {\n         invokers.add(invoker2);\r\n         invokers.add(invoker3);\r\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(2, filteredInvokers.size());\r\n-        Assert.assertEquals(invoker2, filteredInvokers.get(0));\r\n-        Assert.assertEquals(invoker3, filteredInvokers.get(1));\r\n+        Assertions.assertEquals(2, filteredInvokers.size());\r\n+        Assertions.assertEquals(invoker2, filteredInvokers.get(0));\r\n+        Assertions.assertEquals(invoker3, filteredInvokers.get(1));\r\n     }\r\n \r\n     @Test\r\n@@ -288,7 +288,7 @@ public void testRoute_NoForce() {\n         invokers.add(invoker2);\r\n         invokers.add(invoker3);\r\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(invokers, filteredInvokers);\r\n+        Assertions.assertEquals(invokers, filteredInvokers);\r\n     }\r\n \r\n     @Test\r\n@@ -302,7 +302,7 @@ public void testRoute_Force() {\n         invokers.add(invoker2);\r\n         invokers.add(invoker3);\r\n         List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\r\n-        Assert.assertEquals(0, filteredInvokers.size());\r\n+        Assertions.assertEquals(0, filteredInvokers.size());\r\n     }\r\n \r\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/condition/ConditionRouterTest.java",
                "sha": "a10949d30169ef50863bbc470487d520fff92516",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 10,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java",
                "patch": "@@ -31,10 +31,10 @@\n import org.apache.dubbo.rpc.cluster.directory.StaticDirectory;\n import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;\n \n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import javax.script.ScriptEngineManager;\n import java.util.ArrayList;\n@@ -55,11 +55,11 @@\n     Result result = new RpcResult();\n     private RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class).getAdaptiveExtension();\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setUpBeforeClass() throws Exception {\n     }\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         invokers.add(invoker1);\n         invokers.add(invoker2);\n@@ -78,7 +78,7 @@ public void testRouteNotAvailable() {\n         for (int i = 0; i < 100; i++) {\n             sinvoker.invoke(invocation);\n             Invoker<FileRouterEngineTest> invoker = sinvoker.getSelectedInvoker();\n-            Assert.assertEquals(invoker2, invoker);\n+            Assertions.assertEquals(invoker2, invoker);\n         }\n     }\n \n@@ -95,7 +95,7 @@ public void testRouteAvailable() {\n         for (int i = 0; i < 100; i++) {\n             sinvoker.invoke(invocation);\n             Invoker<FileRouterEngineTest> invoker = sinvoker.getSelectedInvoker();\n-            Assert.assertEquals(invoker1, invoker);\n+            Assertions.assertEquals(invoker1, invoker);\n         }\n     }\n \n@@ -113,7 +113,7 @@ public void testRouteByMethodName() {\n             for (int i = 0; i < 100; i++) {\n                 sinvoker.invoke(invocation);\n                 Invoker<FileRouterEngineTest> invoker = sinvoker.getSelectedInvoker();\n-                Assert.assertEquals(invoker1, invoker);\n+                Assertions.assertEquals(invoker1, invoker);\n             }\n         }\n         {\n@@ -125,7 +125,7 @@ public void testRouteByMethodName() {\n             for (int i = 0; i < 100; i++) {\n                 sinvoker.invoke(invocation);\n                 Invoker<FileRouterEngineTest> invoker = sinvoker.getSelectedInvoker();\n-                Assert.assertEquals(invoker2, invoker);\n+                Assertions.assertEquals(invoker2, invoker);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/file/FileRouterEngineTest.java",
                "sha": "c4cb85daf8bb5b5496edf69c0c94ef2a6ac2322a",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouterTest.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouterTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 40,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouterTest.java",
                "patch": "@@ -17,29 +17,30 @@\n package org.apache.dubbo.rpc.cluster.router.script;\n \n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.URL;\n import org.apache.dubbo.rpc.Invoker;\n import org.apache.dubbo.rpc.RpcInvocation;\n import org.apache.dubbo.rpc.cluster.Router;\n import org.apache.dubbo.rpc.cluster.router.MockInvoker;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n public class ScriptRouterTest {\n \n     private URL SCRIPT_URL = URL.valueOf(\"script://javascript?type=javascript\");\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setUpBeforeClass() throws Exception {\n     }\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n     }\n \n@@ -55,7 +56,7 @@ public void testRouteReturnAll() {\n         invokers.add(new MockInvoker<String>());\n         invokers.add(new MockInvoker<String>());\n         List<Invoker<String>> filteredInvokers = router.route(invokers, invokers.get(0).getUrl(), new RpcInvocation());\n-        Assert.assertEquals(invokers, filteredInvokers);\n+        Assertions.assertEquals(invokers, filteredInvokers);\n     }\n \n     @Test\n@@ -78,53 +79,53 @@ public void testRoutePickInvokers() {\n         invokers.add(invoker2);\n         invokers.add(invoker3);\n         List<Invoker<String>> filteredInvokers = router.route(invokers, invokers.get(0).getUrl(), new RpcInvocation());\n-        Assert.assertEquals(2, filteredInvokers.size());\n-        Assert.assertEquals(invoker2, filteredInvokers.get(0));\n-        Assert.assertEquals(invoker3, filteredInvokers.get(1));\n+        Assertions.assertEquals(2, filteredInvokers.size());\n+        Assertions.assertEquals(invoker2, filteredInvokers.get(0));\n+        Assertions.assertEquals(invoker3, filteredInvokers.get(1));\n     }\n \n     @Test\n     public void testRouteHostFilter() {\n-    \tList<Invoker<String>> invokers = new ArrayList<Invoker<String>>();\n-    \tMockInvoker<String> invoker1 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.1:20880/com.dubbo.HelloService\"));\n-    \tMockInvoker<String> invoker2 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.2:20880/com.dubbo.HelloService\"));\n-    \tMockInvoker<String> invoker3 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.3:20880/com.dubbo.HelloService\"));\n+        List<Invoker<String>> invokers = new ArrayList<Invoker<String>>();\n+        MockInvoker<String> invoker1 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.1:20880/com.dubbo.HelloService\"));\n+        MockInvoker<String> invoker2 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.2:20880/com.dubbo.HelloService\"));\n+        MockInvoker<String> invoker3 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.3:20880/com.dubbo.HelloService\"));\n         invokers.add(invoker1);\n         invokers.add(invoker2);\n         invokers.add(invoker3);\n-        \n-        String script = \"function route(invokers, invocation, context){ \" + \n-        \t\t\"\tvar result = new java.util.ArrayList(invokers.size()); \" + \n-        \t\t\"\tvar targetHost = new java.util.ArrayList(); \" + \n-        \t\t\"\ttargetHost.add(\\\"10.134.108.2\\\"); \" + \n-        \t\t\"\tfor (var i = 0; i < invokers.length; i++) { \" + \n-        \t\t\"\t\tif(targetHost.contains(invokers[i].getUrl().getHost())){ \" + \n-        \t\t\"\t\t\tresult.add(invokers[i]); \" + \n-        \t\t\"\t\t} \" + \n-        \t\t\"\t} \" + \n-        \t\t\"\treturn result; \" + \n-        \t\t\"} \" + \n-        \t\t\"route(invokers, invocation, context) \";\n-        \n+\n+        String script = \"function route(invokers, invocation, context){ \" +\n+                \"\tvar result = new java.util.ArrayList(invokers.size()); \" +\n+                \"\tvar targetHost = new java.util.ArrayList(); \" +\n+                \"\ttargetHost.add(\\\"10.134.108.2\\\"); \" +\n+                \"\tfor (var i = 0; i < invokers.length; i++) { \" +\n+                \"\t\tif(targetHost.contains(invokers[i].getUrl().getHost())){ \" +\n+                \"\t\t\tresult.add(invokers[i]); \" +\n+                \"\t\t} \" +\n+                \"\t} \" +\n+                \"\treturn result; \" +\n+                \"} \" +\n+                \"route(invokers, invocation, context) \";\n+\n         Router router = new ScriptRouterFactory().getRouter(getRouteUrl(script));\n         List<Invoker<String>> routeResult = router.route(invokers, invokers.get(0).getUrl(), new RpcInvocation());\n-        Assert.assertEquals(1, routeResult.size());\n-        Assert.assertEquals(invoker2,routeResult.get(0));\n+        Assertions.assertEquals(1, routeResult.size());\n+        Assertions.assertEquals(invoker2, routeResult.get(0));\n     }\n-    \n+\n     @Test\n     public void testRoute_throwException() {\n-    \tList<Invoker<String>> invokers = new ArrayList<Invoker<String>>();\n-    \tMockInvoker<String> invoker1 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.1:20880/com.dubbo.HelloService\"));\n-    \tMockInvoker<String> invoker2 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.2:20880/com.dubbo.HelloService\"));\n-    \tMockInvoker<String> invoker3 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.3:20880/com.dubbo.HelloService\"));\n+        List<Invoker<String>> invokers = new ArrayList<Invoker<String>>();\n+        MockInvoker<String> invoker1 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.1:20880/com.dubbo.HelloService\"));\n+        MockInvoker<String> invoker2 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.2:20880/com.dubbo.HelloService\"));\n+        MockInvoker<String> invoker3 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.134.108.3:20880/com.dubbo.HelloService\"));\n         invokers.add(invoker1);\n         invokers.add(invoker2);\n         invokers.add(invoker3);\n-        \n+\n         String script = \"/\";\n         Router router = new ScriptRouterFactory().getRouter(getRouteUrl(script));\n         List<Invoker<String>> routeResult = router.route(invokers, invokers.get(0).getUrl(), new RpcInvocation());\n-        Assert.assertEquals(3, routeResult.size());\n+        Assertions.assertEquals(3, routeResult.size());\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/router/script/ScriptRouterTest.java",
                "sha": "45e4e7fb9e4ce7b05dded531e1c3bf75b09f7b17",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java",
                "changes": 94,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 47,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java",
                "patch": "@@ -35,11 +35,11 @@\n import org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance;\n import org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance;\n \n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n import java.util.ArrayList;\n@@ -72,17 +72,17 @@\n     Invoker<IHelloService> mockedInvoker1;\n \n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setUpBeforeClass() throws Exception {\n     }\n \n-    @After\n+    @AfterEach\n     public void teardown() throws Exception {\n         RpcContext.getContext().clearAttachments();\n     }\n \n     @SuppressWarnings({\"unchecked\"})\n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         invocation.setMethodName(\"sayHello\");\n \n@@ -148,15 +148,15 @@ public void testBindingAttachment() {\n         // setup attachment\n         RpcContext.getContext().setAttachment(attachKey, attachValue);\n         Map<String, String> attachments = RpcContext.getContext().getAttachments();\n-        Assert.assertTrue(\"set attachment failed!\", attachments != null && attachments.size() == 1);\n+        Assertions.assertTrue( attachments != null && attachments.size() == 1,\"set attachment failed!\");\n \n         cluster = new AbstractClusterInvoker(dic) {\n             @Override\n             protected Result doInvoke(Invocation invocation, List invokers, LoadBalance loadbalance)\n                     throws RpcException {\n                 // attachment will be bind to invocation\n                 String value = invocation.getAttachment(attachKey);\n-                Assert.assertTrue(\"binding attachment failed!\", value != null && value.equals(attachValue));\n+                Assertions.assertTrue(value != null && value.equals(attachValue),\"binding attachment failed!\");\n                 return null;\n             }\n         };\n@@ -168,16 +168,16 @@ protected Result doInvoke(Invocation invocation, List invokers, LoadBalance load\n     @Test\n     public void testSelect_Invokersize0() throws Exception {\n         LoadBalance l = cluster.initLoadBalance(invokers, invocation);\n-        Assert.assertNotNull(\"cluster.initLoadBalance returns null!\", l);\n+        Assertions.assertNotNull(l,\"cluster.initLoadBalance returns null!\");\n         {\n             Invoker invoker = cluster.select(l, null, null, null);\n-            Assert.assertEquals(null, invoker);\n+            Assertions.assertEquals(null, invoker);\n         }\n         {\n             invokers.clear();\n             selectedInvokers.clear();\n             Invoker invoker = cluster.select(l, null, invokers, null);\n-            Assert.assertEquals(null, invoker);\n+            Assertions.assertEquals(null, invoker);\n         }\n     }\n \n@@ -186,9 +186,9 @@ public void testSelect_Invokersize1() throws Exception {\n         invokers.clear();\n         invokers.add(invoker1);\n         LoadBalance l = cluster.initLoadBalance(invokers, invocation);\n-        Assert.assertNotNull(\"cluster.initLoadBalance returns null!\", l);\n+        Assertions.assertNotNull(l,\"cluster.initLoadBalance returns null!\");\n         Invoker invoker = cluster.select(l, null, invokers, null);\n-        Assert.assertEquals(invoker1, invoker);\n+        Assertions.assertEquals(invoker1, invoker);\n     }\n \n     @Test\n@@ -197,18 +197,18 @@ public void testSelect_Invokersize2AndselectNotNull() throws Exception {\n         invokers.add(invoker2);\n         invokers.add(invoker4);\n         LoadBalance l = cluster.initLoadBalance(invokers, invocation);\n-        Assert.assertNotNull(\"cluster.initLoadBalance returns null!\", l);\n+        Assertions.assertNotNull(l,\"cluster.initLoadBalance returns null!\");\n         {\n             selectedInvokers.clear();\n             selectedInvokers.add(invoker4);\n             Invoker invoker = cluster.select(l, invocation, invokers, selectedInvokers);\n-            Assert.assertEquals(invoker2, invoker);\n+            Assertions.assertEquals(invoker2, invoker);\n         }\n         {\n             selectedInvokers.clear();\n             selectedInvokers.add(invoker2);\n             Invoker invoker = cluster.select(l, invocation, invokers, selectedInvokers);\n-            Assert.assertEquals(invoker4, invoker);\n+            Assertions.assertEquals(invoker4, invoker);\n         }\n     }\n \n@@ -228,8 +228,8 @@ public void testCloseAvailablecheck() {\n         initlistsize5();\n \n         Invoker sinvoker = cluster_nocheck.select(lb, invocation, invokers, selectedInvokers);\n-        Assert.assertEquals(false, sinvoker.isAvailable());\n-        Assert.assertEquals(invoker1, sinvoker);\n+        Assertions.assertEquals(false, sinvoker.isAvailable());\n+        Assertions.assertEquals(invoker1, sinvoker);\n \n     }\n \n@@ -246,7 +246,7 @@ public void testDonotSelectAgainAndNoCheckAvailable() {\n             selectedInvokers.add(invoker4);\n             selectedInvokers.add(invoker5);\n             Invoker sinvoker = cluster_nocheck.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertSame(invoker1, sinvoker);\n+            Assertions.assertSame(invoker1, sinvoker);\n         }\n         {\n             //Boundary condition test .\n@@ -256,7 +256,7 @@ public void testDonotSelectAgainAndNoCheckAvailable() {\n             selectedInvokers.add(invoker4);\n             selectedInvokers.add(invoker5);\n             Invoker sinvoker = cluster_nocheck.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertSame(invoker2, sinvoker);\n+            Assertions.assertSame(invoker2, sinvoker);\n         }\n         {\n             //Boundary condition test .\n@@ -266,7 +266,7 @@ public void testDonotSelectAgainAndNoCheckAvailable() {\n             selectedInvokers.add(invoker4);\n             selectedInvokers.add(invoker5);\n             Invoker sinvoker = cluster_nocheck.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertSame(invoker3, sinvoker);\n+            Assertions.assertSame(invoker3, sinvoker);\n         }\n         {\n             //Boundary condition test .\n@@ -276,7 +276,7 @@ public void testDonotSelectAgainAndNoCheckAvailable() {\n             selectedInvokers.add(invoker3);\n             selectedInvokers.add(invoker4);\n             Invoker sinvoker = cluster_nocheck.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertSame(invoker5, sinvoker);\n+            Assertions.assertSame(invoker5, sinvoker);\n         }\n         {\n             //Boundary condition test .\n@@ -287,7 +287,7 @@ public void testDonotSelectAgainAndNoCheckAvailable() {\n             selectedInvokers.add(invoker4);\n             selectedInvokers.add(invoker5);\n             Invoker sinvoker = cluster_nocheck.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertTrue(invokers.contains(sinvoker));\n+            Assertions.assertTrue(invokers.contains(sinvoker));\n         }\n \n     }\n@@ -305,7 +305,7 @@ public void testSelectAgainAndCheckAvailable() {\n             selectedInvokers.add(invoker3);\n             selectedInvokers.add(invoker5);\n             Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertTrue(sinvoker == invoker4);\n+            Assertions.assertTrue(sinvoker == invoker4);\n         }\n         {\n             //Boundary condition test .\n@@ -315,14 +315,14 @@ public void testSelectAgainAndCheckAvailable() {\n             selectedInvokers.add(invoker4);\n             selectedInvokers.add(invoker5);\n             Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertTrue(sinvoker == invoker2 || sinvoker == invoker4);\n+            Assertions.assertTrue(sinvoker == invoker2 || sinvoker == invoker4);\n         }\n         {\n             //Boundary condition test .\n             for (int i = 0; i < 100; i++) {\n                 selectedInvokers.clear();\n                 Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-                Assert.assertTrue(sinvoker == invoker2 || sinvoker == invoker4);\n+                Assertions.assertTrue(sinvoker == invoker2 || sinvoker == invoker4);\n             }\n         }\n         {\n@@ -333,7 +333,7 @@ public void testSelectAgainAndCheckAvailable() {\n                 selectedInvokers.add(invoker3);\n                 selectedInvokers.add(invoker5);\n                 Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-                Assert.assertTrue(sinvoker == invoker2 || sinvoker == invoker4);\n+                Assertions.assertTrue(sinvoker == invoker2 || sinvoker == invoker4);\n             }\n         }\n         {\n@@ -346,7 +346,7 @@ public void testSelectAgainAndCheckAvailable() {\n                 selectedInvokers.add(invoker4);\n                 selectedInvokers.add(invoker5);\n                 Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-                Assert.assertTrue(sinvoker == invoker2 || sinvoker == invoker4);\n+                Assertions.assertTrue(sinvoker == invoker2 || sinvoker == invoker4);\n             }\n         }\n     }\n@@ -357,28 +357,28 @@ public void testSelect_multiInvokers(String lbname) throws Exception {\n         int min = 1000, max = 5000;\n         Double d = (Math.random() * (max - min + 1) + min);\n         int runs = d.intValue();\n-        Assert.assertTrue(runs > min);\n+        Assertions.assertTrue(runs > min);\n         LoadBalance lb = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(lbname);\n         initlistsize5();\n         for (int i = 0; i < runs; i++) {\n             Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertEquals(true, sinvoker.isAvailable());\n+            Assertions.assertEquals(true, sinvoker.isAvailable());\n \n             Mockito.clearInvocations(invoker1, invoker2, invoker3, invoker4, invoker5);\n         }\n         for (int i = 0; i < runs; i++) {\n             selectedInvokers.clear();\n             selectedInvokers.add(invoker1);\n             Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertEquals(true, sinvoker.isAvailable());\n+            Assertions.assertEquals(true, sinvoker.isAvailable());\n \n             Mockito.clearInvocations(invoker1, invoker2, invoker3, invoker4, invoker5);\n         }\n         for (int i = 0; i < runs; i++) {\n             selectedInvokers.clear();\n             selectedInvokers.add(invoker2);\n             Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertEquals(true, sinvoker.isAvailable());\n+            Assertions.assertEquals(true, sinvoker.isAvailable());\n \n             Mockito.clearInvocations(invoker1, invoker2, invoker3, invoker4, invoker5);\n         }\n@@ -387,7 +387,7 @@ public void testSelect_multiInvokers(String lbname) throws Exception {\n             selectedInvokers.add(invoker2);\n             selectedInvokers.add(invoker4);\n             Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertEquals(true, sinvoker.isAvailable());\n+            Assertions.assertEquals(true, sinvoker.isAvailable());\n \n             Mockito.clearInvocations(invoker1, invoker2, invoker3, invoker4, invoker5);\n         }\n@@ -397,7 +397,7 @@ public void testSelect_multiInvokers(String lbname) throws Exception {\n             selectedInvokers.add(invoker3);\n             selectedInvokers.add(invoker5);\n             Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertEquals(true, sinvoker.isAvailable());\n+            Assertions.assertEquals(true, sinvoker.isAvailable());\n \n             Mockito.clearInvocations(invoker1, invoker2, invoker3, invoker4, invoker5);\n         }\n@@ -408,7 +408,7 @@ public void testSelect_multiInvokers(String lbname) throws Exception {\n             selectedInvokers.add(invoker2);\n             selectedInvokers.add(invoker3);\n             Invoker sinvoker = cluster.select(lb, invocation, invokers, selectedInvokers);\n-            Assert.assertEquals(true, sinvoker.isAvailable());\n+            Assertions.assertEquals(true, sinvoker.isAvailable());\n \n             Mockito.clearInvocations(invoker1, invoker2, invoker3, invoker4, invoker5);\n         }\n@@ -438,10 +438,10 @@ public void testSelectBalance() {\n             Long count = entry.getValue().get();\n //            System.out.println(count);\n             if (entry.getKey().isAvailable())\n-                Assert.assertTrue(\"count should > avg\", count > runs / invokers.size());\n+                Assertions.assertTrue(count > runs / invokers.size(),\"count should > avg\");\n         }\n \n-        Assert.assertEquals(runs, counter.get(invoker2).get() + counter.get(invoker4).get());\n+        Assertions.assertEquals(runs, counter.get(invoker2).get() + counter.get(invoker4).get());\n         ;\n \n     }\n@@ -491,23 +491,23 @@ public void destroy() {\n         FailoverClusterInvoker<DemoService> failoverClusterInvoker = new FailoverClusterInvoker<DemoService>(directory);\n         try {\n             failoverClusterInvoker.invoke(new RpcInvocation(\"sayHello\", new Class<?>[0], new Object[0]));\n-            Assert.fail();\n+            Assertions.fail();\n         } catch (RpcException e) {\n-            Assert.assertEquals(RpcException.TIMEOUT_EXCEPTION, e.getCode());\n+            Assertions.assertEquals(RpcException.TIMEOUT_EXCEPTION, e.getCode());\n         }\n         ForkingClusterInvoker<DemoService> forkingClusterInvoker = new ForkingClusterInvoker<DemoService>(directory);\n         try {\n             forkingClusterInvoker.invoke(new RpcInvocation(\"sayHello\", new Class<?>[0], new Object[0]));\n-            Assert.fail();\n+            Assertions.fail();\n         } catch (RpcException e) {\n-            Assert.assertEquals(RpcException.TIMEOUT_EXCEPTION, e.getCode());\n+            Assertions.assertEquals(RpcException.TIMEOUT_EXCEPTION, e.getCode());\n         }\n         FailfastClusterInvoker<DemoService> failfastClusterInvoker = new FailfastClusterInvoker<DemoService>(directory);\n         try {\n             failfastClusterInvoker.invoke(new RpcInvocation(\"sayHello\", new Class<?>[0], new Object[0]));\n-            Assert.fail();\n+            Assertions.fail();\n         } catch (RpcException e) {\n-            Assert.assertEquals(RpcException.TIMEOUT_EXCEPTION, e.getCode());\n+            Assertions.assertEquals(RpcException.TIMEOUT_EXCEPTION, e.getCode());\n         }\n     }\n \n@@ -525,10 +525,10 @@ public void testMockedInvokerSelect() {\n         mockedInvocation.setMethodName(\"sayHello\");\n         mockedInvocation.setAttachment(Constants.INVOCATION_NEED_MOCK, \"true\");\n         List<Invoker<IHelloService>> mockedInvokers = dic.list(mockedInvocation);\n-        Assert.assertEquals(1, mockedInvokers.size());\n+        Assertions.assertEquals(1, mockedInvokers.size());\n \n         List<Invoker<IHelloService>> invokers = dic.list(invocation);\n-        Assert.assertEquals(5, invokers.size());\n+        Assertions.assertEquals(5, invokers.size());\n     }\n \n     public static interface IHelloService {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/AbstractClusterInvokerTest.java",
                "sha": "130cdb5dd815ddbe51416a391e9b3c1e2301486c",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ClusterUtilsTest.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ClusterUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 23,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ClusterUtilsTest.java",
                "patch": "@@ -19,8 +19,9 @@\n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.URL;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.apache.dubbo.common.URLBuilder;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n public class ClusterUtilsTest {\n \n@@ -31,7 +32,8 @@ public void testMergeUrl() throws Exception {\n                 .setUsername(\"username\")\n                 .setPassword(\"password\");\n \n-        providerURL = providerURL.addParameter(Constants.GROUP_KEY, \"dubbo\")\n+        providerURL = URLBuilder.from(providerURL)\n+                .addParameter(Constants.GROUP_KEY, \"dubbo\")\n                 .addParameter(Constants.VERSION_KEY, \"1.2.3\")\n                 .addParameter(Constants.DUBBO_VERSION_KEY, \"2.3.7\")\n                 .addParameter(Constants.THREADPOOL_KEY, \"fixed\")\n@@ -45,36 +47,38 @@ public void testMergeUrl() throws Exception {\n                 .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.CORE_THREADS_KEY, Integer.MAX_VALUE)\n                 .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.QUEUES_KEY, Integer.MAX_VALUE)\n                 .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.ALIVE_KEY, Integer.MAX_VALUE)\n-                .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREAD_NAME_KEY, \"test\");\n+                .addParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREAD_NAME_KEY, \"test\")\n+                .build();\n \n-        URL consumerURL = URL.valueOf(\"dubbo://localhost:55555\");\n-        consumerURL = consumerURL.addParameter(Constants.PID_KEY, \"1234\");\n-        consumerURL = consumerURL.addParameter(Constants.THREADPOOL_KEY, \"foo\");\n+        URL consumerURL = new URLBuilder(Constants.DUBBO_PROTOCOL, \"localhost\", 55555)\n+                .addParameter(Constants.PID_KEY, \"1234\")\n+                .addParameter(Constants.THREADPOOL_KEY, \"foo\")\n+                .build();\n \n         URL url = ClusterUtils.mergeUrl(providerURL, consumerURL.getParameters());\n \n-        Assert.assertFalse(url.hasParameter(Constants.THREADS_KEY));\n-        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREADS_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.THREADS_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREADS_KEY));\n \n-        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREADPOOL_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREADPOOL_KEY));\n \n-        Assert.assertFalse(url.hasParameter(Constants.CORE_THREADS_KEY));\n-        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.CORE_THREADS_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.CORE_THREADS_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.CORE_THREADS_KEY));\n \n-        Assert.assertFalse(url.hasParameter(Constants.QUEUES_KEY));\n-        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.QUEUES_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.QUEUES_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.QUEUES_KEY));\n \n-        Assert.assertFalse(url.hasParameter(Constants.ALIVE_KEY));\n-        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.ALIVE_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.ALIVE_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.ALIVE_KEY));\n \n-        Assert.assertFalse(url.hasParameter(Constants.THREAD_NAME_KEY));\n-        Assert.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREAD_NAME_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.THREAD_NAME_KEY));\n+        Assertions.assertFalse(url.hasParameter(Constants.DEFAULT_KEY_PREFIX + Constants.THREAD_NAME_KEY));\n \n-        Assert.assertEquals(url.getPath(), \"path\");\n-        Assert.assertEquals(url.getUsername(), \"username\");\n-        Assert.assertEquals(url.getPassword(), \"password\");\n-        Assert.assertEquals(url.getParameter(Constants.PID_KEY), \"1234\");\n-        Assert.assertEquals(url.getParameter(Constants.THREADPOOL_KEY), \"foo\");\n+        Assertions.assertEquals(url.getPath(), \"path\");\n+        Assertions.assertEquals(url.getUsername(), \"username\");\n+        Assertions.assertEquals(url.getPassword(), \"password\");\n+        Assertions.assertEquals(url.getParameter(Constants.PID_KEY), \"1234\");\n+        Assertions.assertEquals(url.getParameter(Constants.THREADPOOL_KEY), \"foo\");\n     }\n \n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ClusterUtilsTest.java",
                "sha": "c010a157dccdede9210df11d83e498e562512001",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailSafeClusterInvokerTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailSafeClusterInvokerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 7,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailSafeClusterInvokerTest.java",
                "patch": "@@ -26,14 +26,14 @@\n import org.apache.dubbo.rpc.cluster.Directory;\r\n import org.apache.dubbo.rpc.cluster.filter.DemoService;\r\n \r\n-import org.junit.Assert;\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n-import static org.junit.Assert.assertTrue;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n import static org.mockito.BDDMockito.given;\r\n import static org.mockito.Mockito.mock;\r\n \r\n@@ -54,7 +54,7 @@\n      * @throws java.lang.Exception\r\n      */\r\n \r\n-    @Before\r\n+    @BeforeEach\r\n     public void setUp() throws Exception {\r\n \r\n         dic = mock(Directory.class);\r\n@@ -85,7 +85,7 @@ public void testInvokeExceptoin() {\n         resetInvokerToException();\r\n         FailsafeClusterInvoker<DemoService> invoker = new FailsafeClusterInvoker<DemoService>(dic);\r\n         invoker.invoke(invocation);\r\n-        Assert.assertNull(RpcContext.getContext().getInvoker());\r\n+        Assertions.assertNull(RpcContext.getContext().getInvoker());\r\n     }\r\n \r\n     @Test()\r\n@@ -95,7 +95,7 @@ public void testInvokeNoExceptoin() {\n \r\n         FailsafeClusterInvoker<DemoService> invoker = new FailsafeClusterInvoker<DemoService>(dic);\r\n         Result ret = invoker.invoke(invocation);\r\n-        Assert.assertSame(result, ret);\r\n+        Assertions.assertSame(result, ret);\r\n     }\r\n \r\n     @Test()\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailSafeClusterInvokerTest.java",
                "sha": "413d9b9dc8a5b0e44c53c895afa35f6475578d76",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvokerTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvokerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 21,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvokerTest.java",
                "patch": "@@ -1,3 +1,4 @@\n+\r\n /*\r\n  * Licensed to the Apache Software Foundation (ASF) under one or more\r\n  * contributor license agreements.  See the NOTICE file distributed with\r\n@@ -27,27 +28,30 @@\n import org.apache.dubbo.rpc.cluster.Directory;\r\n \r\n import org.apache.log4j.Level;\r\n-import org.junit.Assert;\r\n-import org.junit.Before;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.AfterEach;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Disabled;\r\n+import org.junit.jupiter.api.MethodOrderer;\r\n+import org.junit.jupiter.api.Order;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.jupiter.api.TestMethodOrder;\r\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n import java.util.concurrent.CountDownLatch;\r\n import java.util.concurrent.TimeUnit;\r\n \r\n-import static org.junit.Assert.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n import static org.mockito.BDDMockito.given;\r\n import static org.mockito.Mockito.mock;\r\n \r\n- /**\r\n-  * FailbackClusterInvokerTest\r\n-  *\r\n-  * add annotation @FixMethodOrder, the testARetryFailed Method must to first execution\r\n+/**\r\n+ * FailbackClusterInvokerTest\r\n+ * <p>\r\n+ * add annotation @TestMethodOrder, the testARetryFailed Method must to first execution\r\n  */\r\n-@SuppressWarnings(\"unchecked\")\r\n-@FixMethodOrder(org.junit.runners.MethodSorters.NAME_ASCENDING)\r\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\r\n public class FailbackClusterInvokerTest {\r\n \r\n     List<Invoker<FailbackClusterInvokerTest>> invokers = new ArrayList<Invoker<FailbackClusterInvokerTest>>();\r\n@@ -61,7 +65,7 @@\n      * @throws java.lang.Exception\r\n      */\r\n \r\n-    @Before\r\n+    @BeforeEach\r\n     public void setUp() throws Exception {\r\n \r\n         dic = mock(Directory.class);\r\n@@ -74,6 +78,15 @@ public void setUp() throws Exception {\n         invokers.add(invoker);\r\n     }\r\n \r\n+    @AfterEach\r\n+    public void tearDown() {\r\n+\r\n+        dic = null;\r\n+        invocation = new RpcInvocation();\r\n+        invokers.clear();\r\n+    }\r\n+\r\n+\r\n     private void resetInvokerToException() {\r\n         given(invoker.invoke(invocation)).willThrow(new RuntimeException());\r\n         given(invoker.getUrl()).willReturn(url);\r\n@@ -87,27 +100,30 @@ private void resetInvokerToNoException() {\n     }\r\n \r\n     @Test\r\n+    @Order(1)\r\n     public void testInvokeException() {\r\n         resetInvokerToException();\r\n         FailbackClusterInvoker<FailbackClusterInvokerTest> invoker = new FailbackClusterInvoker<FailbackClusterInvokerTest>(\r\n                 dic);\r\n         invoker.invoke(invocation);\r\n-        Assert.assertNull(RpcContext.getContext().getInvoker());\r\n+        Assertions.assertNull(RpcContext.getContext().getInvoker());\r\n         DubboAppender.clear();\r\n     }\r\n \r\n-    @Test()\r\n+    @Test\r\n+    @Order(2)\r\n     public void testInvokeNoException() {\r\n \r\n         resetInvokerToNoException();\r\n \r\n         FailbackClusterInvoker<FailbackClusterInvokerTest> invoker = new FailbackClusterInvoker<FailbackClusterInvokerTest>(\r\n                 dic);\r\n         Result ret = invoker.invoke(invocation);\r\n-        Assert.assertSame(result, ret);\r\n+        Assertions.assertSame(result, ret);\r\n     }\r\n \r\n-    @Test()\r\n+    @Test\r\n+    @Order(3)\r\n     public void testNoInvoke() {\r\n         dic = mock(Directory.class);\r\n \r\n@@ -130,7 +146,9 @@ public void testNoInvoke() {\n         LogUtil.stop();\r\n     }\r\n \r\n-    @Test()\r\n+    @Disabled\r\n+    @Test\r\n+    @Order(4)\r\n     public void testARetryFailed() throws Exception {\r\n         //Test retries and\r\n \r\n@@ -143,15 +161,15 @@ public void testARetryFailed() throws Exception {\n         invoker.invoke(invocation);\r\n         invoker.invoke(invocation);\r\n         invoker.invoke(invocation);\r\n-        Assert.assertNull(RpcContext.getContext().getInvoker());\r\n+        Assertions.assertNull(RpcContext.getContext().getInvoker());\r\n //        invoker.retryFailed();// when retry the invoker which get from failed map already is not the mocked invoker,so\r\n         //Ensure that the main thread is online\r\n         CountDownLatch countDown = new CountDownLatch(1);\r\n         countDown.await(15000L, TimeUnit.MILLISECONDS);\r\n         LogUtil.stop();\r\n-        Assert.assertEquals(\"must have four error message \", 4, LogUtil.findMessage(Level.ERROR, \"Failed retry to invoke method\"));\r\n-        Assert.assertEquals(\"must have two error message \", 2, LogUtil.findMessage(Level.ERROR, \"Failed retry times exceed threshold\"));\r\n-        Assert.assertEquals(\"must have one error message \", 1, LogUtil.findMessage(Level.ERROR, \"Failback background works error\"));\r\n+        Assertions.assertEquals(4, LogUtil.findMessage(Level.ERROR, \"Failed retry to invoke method\"), \"must have four error message \");\r\n+        Assertions.assertEquals(2, LogUtil.findMessage(Level.ERROR, \"Failed retry times exceed threshold\"), \"must have two error message \");\r\n+        Assertions.assertEquals(1, LogUtil.findMessage(Level.ERROR, \"Failback background works error\"), \"must have one error message \");\r\n         // it can be invoke successfully\r\n     }\r\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailbackClusterInvokerTest.java",
                "sha": "ad96a66830d15604fa0ebc210373302bf94657f3",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 14,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java",
                "patch": "@@ -25,22 +25,20 @@\n import org.apache.dubbo.rpc.RpcResult;\n import org.apache.dubbo.rpc.cluster.Directory;\n \n-import org.junit.Assert;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import java.util.ArrayList;\n import java.util.List;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.fail;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n \n /**\n  * FailfastClusterInvokerTest\n- *\n  */\n @SuppressWarnings(\"unchecked\")\n public class FailfastClusterInvokerTest {\n@@ -55,7 +53,7 @@\n      * @throws java.lang.Exception\n      */\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n \n         dic = mock(Directory.class);\n@@ -81,12 +79,14 @@ private void resetInvoker1ToNoException() {\n         given(invoker1.getInterface()).willReturn(FailfastClusterInvokerTest.class);\n     }\n \n-    @Test(expected = RpcException.class)\n+    @Test\n     public void testInvokeExceptoin() {\n-        resetInvoker1ToException();\n-        FailfastClusterInvoker<FailfastClusterInvokerTest> invoker = new FailfastClusterInvoker<FailfastClusterInvokerTest>(dic);\n-        invoker.invoke(invocation);\n-        Assert.assertSame(invoker1, RpcContext.getContext().getInvoker());\n+        Assertions.assertThrows(RpcException.class, () -> {\n+            resetInvoker1ToException();\n+            FailfastClusterInvoker<FailfastClusterInvokerTest> invoker = new FailfastClusterInvoker<FailfastClusterInvokerTest>(dic);\n+            invoker.invoke(invocation);\n+            Assertions.assertSame(invoker1, RpcContext.getContext().getInvoker());\n+        });\n     }\n \n     @Test()\n@@ -96,7 +96,7 @@ public void testInvokeNoExceptoin() {\n \n         FailfastClusterInvoker<FailfastClusterInvokerTest> invoker = new FailfastClusterInvoker<FailfastClusterInvokerTest>(dic);\n         Result ret = invoker.invoke(invocation);\n-        Assert.assertSame(result, ret);\n+        Assertions.assertSame(result, ret);\n     }\n \n     @Test()",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailfastClusterInvokerTest.java",
                "sha": "d8dd653f34eebaa42a03130e3f98f11fcf7b9eec",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 8,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java",
                "patch": "@@ -27,18 +27,18 @@\n import org.apache.dubbo.rpc.cluster.directory.StaticDirectory;\r\n import org.apache.dubbo.rpc.protocol.AbstractInvoker;\r\n \r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n import java.util.concurrent.Callable;\r\n \r\n-import static org.junit.Assert.assertEquals;\r\n-import static org.junit.Assert.assertFalse;\r\n-import static org.junit.Assert.assertSame;\r\n-import static org.junit.Assert.assertTrue;\r\n-import static org.junit.Assert.fail;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertFalse;\r\n+import static org.junit.jupiter.api.Assertions.assertSame;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n import static org.mockito.BDDMockito.given;\r\n import static org.mockito.Mockito.mock;\r\n \r\n@@ -61,7 +61,7 @@\n      * @throws java.lang.Exception\r\n      */\r\n \r\n-    @Before\r\n+    @BeforeEach\r\n     public void setUp() throws Exception {\r\n \r\n         dic = mock(Directory.class);\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/FailoverClusterInvokerTest.java",
                "sha": "ff29a6183a96d3c909510b17ba7acedbd909d5ae",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvokerTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvokerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 12,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvokerTest.java",
                "patch": "@@ -25,15 +25,15 @@\n import org.apache.dubbo.rpc.RpcContext;\r\n import org.apache.dubbo.rpc.cluster.Directory;\r\n \r\n-import org.junit.Assert;\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n import java.util.Map;\r\n \r\n-import static org.junit.Assert.assertFalse;\r\n+import static org.junit.jupiter.api.Assertions.assertFalse;\r\n import static org.mockito.BDDMockito.given;\r\n import static org.mockito.Mockito.mock;\r\n \r\n@@ -52,7 +52,7 @@\n     private Directory<ForkingClusterInvokerTest> dic;\r\n     private Result result = new RpcResult();\r\n \r\n-    @Before\r\n+    @BeforeEach\r\n     public void setUp() throws Exception {\r\n \r\n         dic = mock(Directory.class);\r\n@@ -111,9 +111,9 @@ public void testInvokeException() {\n \r\n         try {\r\n             invoker.invoke(invocation);\r\n-            Assert.fail();\r\n+            Assertions.fail();\r\n         } catch (RpcException expected) {\r\n-            Assert.assertTrue(expected.getMessage().contains(\"Failed to forking invoke provider\"));\r\n+            Assertions.assertTrue(expected.getMessage().contains(\"Failed to forking invoke provider\"));\r\n             assertFalse(expected.getCause() instanceof RpcException);\r\n         }\r\n     }\r\n@@ -130,16 +130,16 @@ public void testClearRpcContext() {\n         RpcContext.getContext().setAttachment(attachKey, attachValue);\r\n \r\n         Map<String, String> attachments = RpcContext.getContext().getAttachments();\r\n-        Assert.assertTrue(\"set attachment failed!\", attachments != null && attachments.size() == 1);\r\n+        Assertions.assertTrue(attachments != null && attachments.size() == 1, \"set attachment failed!\");\r\n         try {\r\n             invoker.invoke(invocation);\r\n-            Assert.fail();\r\n+            Assertions.fail();\r\n         } catch (RpcException expected) {\r\n-            Assert.assertTrue(\"Succeeded to forking invoke provider !\", expected.getMessage().contains(\"Failed to forking invoke provider\"));\r\n+            Assertions.assertTrue(expected.getMessage().contains(\"Failed to forking invoke provider\"), \"Succeeded to forking invoke provider !\");\r\n             assertFalse(expected.getCause() instanceof RpcException);\r\n         }\r\n         Map<String, String> afterInvoke = RpcContext.getContext().getAttachments();\r\n-        Assert.assertTrue(\"clear attachment failed!\", afterInvoke != null && afterInvoke.size() == 0);\r\n+        Assertions.assertTrue(afterInvoke != null && afterInvoke.size() == 0, \"clear attachment failed!\");\r\n     }\r\n \r\n     @Test()\r\n@@ -150,7 +150,7 @@ public void testInvokeNoException() {\n         ForkingClusterInvoker<ForkingClusterInvokerTest> invoker = new ForkingClusterInvoker<ForkingClusterInvokerTest>(\r\n                 dic);\r\n         Result ret = invoker.invoke(invocation);\r\n-        Assert.assertSame(result, ret);\r\n+        Assertions.assertSame(result, ret);\r\n     }\r\n \r\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/ForkingClusterInvokerTest.java",
                "sha": "b3d343a3bbe4c134982b2f5596805e84f1292015",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvokerTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvokerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 7,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvokerTest.java",
                "patch": "@@ -24,9 +24,9 @@\n import org.apache.dubbo.rpc.RpcResult;\n import org.apache.dubbo.rpc.cluster.Directory;\n \n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n@@ -38,7 +38,7 @@\n import java.util.List;\n import java.util.Map;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n \n@@ -86,7 +86,7 @@ static void merge(Map<String, List<String>> first, Map<String, List<String>> sec\n         }\n     }\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n \n         directory = mock(Directory.class);\n@@ -155,7 +155,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n \n         // invoke\n         Result result = mergeableClusterInvoker.invoke(invocation);\n-        Assert.assertTrue(result.getValue() instanceof Menu);\n+        Assertions.assertTrue(result.getValue() instanceof Menu);\n         Menu menu = (Menu) result.getValue();\n         Map<String, List<String>> expected = new HashMap<String, List<String>>();\n         merge(expected, firstMenuMap);\n@@ -219,7 +219,7 @@ public void testAddMenu() throws Exception {\n         mergeableClusterInvoker = new MergeableClusterInvoker<MenuService>(directory);\n \n         Result result = mergeableClusterInvoker.invoke(invocation);\n-        Assert.assertNull(result.getValue());\n+        Assertions.assertNull(result.getValue());\n \n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/MergeableClusterInvokerTest.java",
                "sha": "8a4089c9049ad94f9e86bcc4572d0e78afff47e1",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvokerTest.java",
                "changes": 120,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvokerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 60,
                "filename": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvokerTest.java",
                "patch": "@@ -31,9 +31,9 @@\n import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;\r\n import org.apache.dubbo.rpc.support.MockProtocol;\r\n \r\n-import org.junit.Assert;\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.util.ArrayList;\r\n import java.util.Arrays;\r\n@@ -43,7 +43,7 @@\n \r\n     List<Invoker<IHelloService>> invokers = new ArrayList<Invoker<IHelloService>>();\r\n \r\n-    @Before\r\n+    @BeforeEach\r\n     public void beforeMethod() {\r\n         invokers.clear();\r\n     }\r\n@@ -67,13 +67,13 @@ public void testMockInvokerInvoke_normal() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"something\", ret.getValue());\r\n+        Assertions.assertEquals(\"something\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"sayHello\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(null, ret.getValue());\r\n+        Assertions.assertEquals(null, ret.getValue());\r\n     }\r\n \r\n     /**\r\n@@ -95,19 +95,19 @@ public void testMockInvokerInvoke_failmock() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"aa\", ret.getValue());\r\n+        Assertions.assertEquals(\"aa\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething2\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(null, ret.getValue());\r\n+        Assertions.assertEquals(null, ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"sayHello\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(null, ret.getValue());\r\n+        Assertions.assertEquals(null, ret.getValue());\r\n     }\r\n \r\n \r\n@@ -131,19 +131,19 @@ public void testMockInvokerInvoke_forcemock() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"aa\", ret.getValue());\r\n+        Assertions.assertEquals(\"aa\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething2\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(null, ret.getValue());\r\n+        Assertions.assertEquals(null, ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"sayHello\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(null, ret.getValue());\r\n+        Assertions.assertEquals(null, ret.getValue());\r\n     }\r\n \r\n     @Test\r\n@@ -162,7 +162,7 @@ public void testMockInvokerInvoke_forcemock_defaultreturn() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"sayHello\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(null, ret.getValue());\r\n+        Assertions.assertEquals(null, ret.getValue());\r\n     }\r\n \r\n     /**\r\n@@ -178,25 +178,25 @@ public void testMockInvokerFromOverride_Invoke_Fock_someMethods() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"something\", ret.getValue());\r\n+        Assertions.assertEquals(\"something\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething2\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"y\", ret.getValue());\r\n+        Assertions.assertEquals(\"y\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething3\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"something3\", ret.getValue());\r\n+        Assertions.assertEquals(\"something3\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"sayHello\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(null, ret.getValue());\r\n+        Assertions.assertEquals(null, ret.getValue());\r\n     }\r\n \r\n     /**\r\n@@ -213,20 +213,20 @@ public void testMockInvokerFromOverride_Invoke_Fock_WithOutDefault() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"x\", ret.getValue());\r\n+        Assertions.assertEquals(\"x\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething2\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"y\", ret.getValue());\r\n+        Assertions.assertEquals(\"y\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething3\");\r\n         try {\r\n             ret = cluster.invoke(invocation);\r\n-            Assert.fail();\r\n+            Assertions.fail();\r\n         } catch (RpcException e) {\r\n \r\n         }\r\n@@ -247,25 +247,25 @@ public void testMockInvokerFromOverride_Invoke_Fock_WithDefault() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"x\", ret.getValue());\r\n+        Assertions.assertEquals(\"x\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething2\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"y\", ret.getValue());\r\n+        Assertions.assertEquals(\"y\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething3\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(null, ret.getValue());\r\n+        Assertions.assertEquals(null, ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"sayHello\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(null, ret.getValue());\r\n+        Assertions.assertEquals(null, ret.getValue());\r\n     }\r\n \r\n     /**\r\n@@ -283,25 +283,25 @@ public void testMockInvokerFromOverride_Invoke_Fock_WithFailDefault() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"x\", ret.getValue());\r\n+        Assertions.assertEquals(\"x\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething2\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"y\", ret.getValue());\r\n+        Assertions.assertEquals(\"y\", ret.getValue());\r\n \r\n         // If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething3\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"z\", ret.getValue());\r\n+        Assertions.assertEquals(\"z\", ret.getValue());\r\n \r\n         //If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"sayHello\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"z\", ret.getValue());\r\n+        Assertions.assertEquals(\"z\", ret.getValue());\r\n     }\r\n \r\n     /**\r\n@@ -319,25 +319,25 @@ public void testMockInvokerFromOverride_Invoke_Fock_WithForceDefault() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"x\", ret.getValue());\r\n+        Assertions.assertEquals(\"x\", ret.getValue());\r\n \r\n         //If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething2\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"y\", ret.getValue());\r\n+        Assertions.assertEquals(\"y\", ret.getValue());\r\n \r\n         //If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething3\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"z\", ret.getValue());\r\n+        Assertions.assertEquals(\"z\", ret.getValue());\r\n \r\n         //If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"sayHello\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"z\", ret.getValue());\r\n+        Assertions.assertEquals(\"z\", ret.getValue());\r\n     }\r\n \r\n     /**\r\n@@ -353,19 +353,19 @@ public void testMockInvokerFromOverride_Invoke_Fock_Default() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"x\", ret.getValue());\r\n+        Assertions.assertEquals(\"x\", ret.getValue());\r\n \r\n         //If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething2\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"x\", ret.getValue());\r\n+        Assertions.assertEquals(\"x\", ret.getValue());\r\n \r\n         //If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"sayHello\");\r\n         ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"x\", ret.getValue());\r\n+        Assertions.assertEquals(\"x\", ret.getValue());\r\n     }\r\n \r\n     /**\r\n@@ -381,14 +381,14 @@ public void testMockInvokerFromOverride_Invoke_checkCompatible_return() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"x\", ret.getValue());\r\n+        Assertions.assertEquals(\"x\", ret.getValue());\r\n \r\n         //If no mock was configured, return null directly\r\n         invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething3\");\r\n         try {\r\n             ret = cluster.invoke(invocation);\r\n-            Assert.fail(\"fail invoke\");\r\n+            Assertions.fail(\"fail invoke\");\r\n         } catch (RpcException e) {\r\n \r\n         }\r\n@@ -407,7 +407,7 @@ public void testMockInvokerFromOverride_Invoke_checkCompatible_ImplMock() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"somethingmock\", ret.getValue());\r\n+        Assertions.assertEquals(\"somethingmock\", ret.getValue());\r\n     }\r\n \r\n     /**\r\n@@ -423,7 +423,7 @@ public void testMockInvokerFromOverride_Invoke_checkCompatible_ImplMock2() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"somethingmock\", ret.getValue());\r\n+        Assertions.assertEquals(\"somethingmock\", ret.getValue());\r\n     }\r\n \r\n     /**\r\n@@ -438,7 +438,7 @@ public void testMockInvokerFromOverride_Invoke_checkCompatible_ImplMock3() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(\"somethingmock\", ret.getValue());\r\n+        Assertions.assertEquals(\"somethingmock\", ret.getValue());\r\n     }\r\n \r\n     @Test\r\n@@ -451,8 +451,8 @@ public void testMockInvokerFromOverride_Invoke_check_String() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getSomething\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertTrue(\"result type must be String but was : \" + ret.getValue().getClass(), ret.getValue() instanceof String);\r\n-        Assert.assertEquals(\"1688\", (String) ret.getValue());\r\n+        Assertions.assertTrue(ret.getValue() instanceof String, \"result type must be String but was : \" + ret.getValue().getClass());\r\n+        Assertions.assertEquals(\"1688\", (String) ret.getValue());\r\n     }\r\n \r\n     @Test\r\n@@ -465,8 +465,8 @@ public void testMockInvokerFromOverride_Invoke_check_int() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getInt1\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertTrue(\"result type must be integer but was : \" + ret.getValue().getClass(), ret.getValue() instanceof Integer);\r\n-        Assert.assertEquals(new Integer(1688), (Integer) ret.getValue());\r\n+        Assertions.assertTrue(ret.getValue() instanceof Integer, \"result type must be integer but was : \" + ret.getValue().getClass());\r\n+        Assertions.assertEquals(new Integer(1688), (Integer) ret.getValue());\r\n     }\r\n \r\n     @Test\r\n@@ -479,8 +479,8 @@ public void testMockInvokerFromOverride_Invoke_check_boolean() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getBoolean1\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertTrue(\"result type must be Boolean but was : \" + ret.getValue().getClass(), ret.getValue() instanceof Boolean);\r\n-        Assert.assertEquals(true, Boolean.parseBoolean(ret.getValue().toString()));\r\n+        Assertions.assertTrue(ret.getValue() instanceof Boolean, \"result type must be Boolean but was : \" + ret.getValue().getClass());\r\n+        Assertions.assertEquals(true, Boolean.parseBoolean(ret.getValue().toString()));\r\n     }\r\n \r\n     @Test\r\n@@ -493,7 +493,7 @@ public void testMockInvokerFromOverride_Invoke_check_Boolean() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getBoolean2\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(true, Boolean.parseBoolean(ret.getValue().toString()));\r\n+        Assertions.assertEquals(true, Boolean.parseBoolean(ret.getValue().toString()));\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -507,7 +507,7 @@ public void testMockInvokerFromOverride_Invoke_check_ListString_empty() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getListString\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(0, ((List<String>) ret.getValue()).size());\r\n+        Assertions.assertEquals(0, ((List<String>) ret.getValue()).size());\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -522,8 +522,8 @@ public void testMockInvokerFromOverride_Invoke_check_ListString() {\n         invocation.setMethodName(\"getListString\");\r\n         Result ret = cluster.invoke(invocation);\r\n         List<String> rl = (List<String>) ret.getValue();\r\n-        Assert.assertEquals(2, rl.size());\r\n-        Assert.assertEquals(\"hi\", rl.get(0));\r\n+        Assertions.assertEquals(2, rl.size());\r\n+        Assertions.assertEquals(\"hi\", rl.get(0));\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -537,7 +537,7 @@ public void testMockInvokerFromOverride_Invoke_check_ListPojo_empty() {\n         RpcInvocation invocation = new RpcInvocation();\r\n         invocation.setMethodName(\"getUsers\");\r\n         Result ret = cluster.invoke(invocation);\r\n-        Assert.assertEquals(0, ((List<User>) ret.getValue()).size());\r\n+        Assertions.assertEquals(0, ((List<User>) ret.getValue()).size());\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -553,8 +553,8 @@ public void testMockInvokerFromOverride_Invoke_check_ListPojo() {\n         Result ret = cluster.invoke(invocation);\r\n         List<User> rl = (List<User>) ret.getValue();\r\n         System.out.println(rl);\r\n-        Assert.assertEquals(2, rl.size());\r\n-        Assert.assertEquals(\"hi1\", ((User) rl.get(0)).getName());\r\n+        Assertions.assertEquals(2, rl.size());\r\n+        Assertions.assertEquals(\"hi1\", ((User) rl.get(0)).getName());\r\n     }\r\n \r\n     @Test\r\n@@ -583,9 +583,9 @@ public void testMockInvokerFromOverride_Invoke_force_throw() {\n         invocation.setMethodName(\"getBoolean2\");\r\n         try {\r\n             cluster.invoke(invocation);\r\n-            Assert.fail();\r\n+            Assertions.fail();\r\n         } catch (RpcException e) {\r\n-            Assert.assertFalse(\"not custem exception\", e.isBiz());\r\n+            Assertions.assertFalse(e.isBiz(), \"not custem exception\");\r\n         }\r\n     }\r\n \r\n@@ -600,7 +600,7 @@ public void testMockInvokerFromOverride_Invoke_force_throwCustemException() thro\n         invocation.setMethodName(\"getBoolean2\");\r\n         try {\r\n             cluster.invoke(invocation).recreate();\r\n-            Assert.fail();\r\n+            Assertions.fail();\r\n         } catch (MyMockException e) {\r\n \r\n         }\r\n@@ -617,9 +617,9 @@ public void testMockInvokerFromOverride_Invoke_force_throwCustemExceptionNotFoun\n         invocation.setMethodName(\"getBoolean2\");\r\n         try {\r\n             cluster.invoke(invocation);\r\n-            Assert.fail();\r\n+            Assertions.fail();\r\n         } catch (Exception e) {\r\n-            Assert.assertTrue(e.getCause() instanceof IllegalStateException);\r\n+            Assertions.assertTrue(e.getCause() instanceof IllegalStateException);\r\n         }\r\n     }\r\n \r\n@@ -634,9 +634,9 @@ public void testMockInvokerFromOverride_Invoke_mock_false() {\n         invocation.setMethodName(\"getBoolean2\");\r\n         try {\r\n             cluster.invoke(invocation);\r\n-            Assert.fail();\r\n+            Assertions.fail();\r\n         } catch (RpcException e) {\r\n-            Assert.assertTrue(e.isTimeout());\r\n+            Assertions.assertTrue(e.isTimeout());\r\n         }\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvokerTest.java",
                "sha": "618e9705d659d9719d77f7a3cf84771b697ff659",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/resources/log4j.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/test/resources/log4j.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-cluster/src/test/resources/log4j.xml",
                "patch": "@@ -18,6 +18,7 @@\n <!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\r\n <log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\" debug=\"false\">\r\n     <appender name=\"DUBBO\" class=\"org.apache.dubbo.common.utils.DubboAppender\">\r\n+        <param name=\"File\" value=\"../dubbo.log\"/>\r\n         <layout class=\"org.apache.log4j.PatternLayout\">\r\n             <param name=\"ConversionPattern\" value=\"[%d{dd/MM/yy HH:mm:ss:SSS z}] %t %5p %c{2}: %m%n\"/>\r\n         </layout>\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-cluster/src/test/resources/log4j.xml",
                "sha": "eb0c9f105de265a45cd25e9ddebbc820c508f4e3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/pom.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-common/pom.xml",
                "patch": "@@ -20,7 +20,7 @@\n     <parent>\n         <groupId>org.apache.dubbo</groupId>\n         <artifactId>dubbo-parent</artifactId>\n-        <version>2.7.0-SNAPSHOT</version>\n+        <version>2.7.1-SNAPSHOT</version>\n     </parent>\n     <artifactId>dubbo-common</artifactId>\n     <packaging>jar</packaging>",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/pom.xml",
                "sha": "bd3347f524028acc3f11b52d74df5d1cb8036b41",
                "status": "modified"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 12,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java",
                "patch": "@@ -97,7 +97,10 @@\n \n     public static final String DEFAULT_PROXY = \"javassist\";\n \n-    public static final int DEFAULT_PAYLOAD = 8 * 1024 * 1024;                      // 8M\n+    /**\n+     * 8M\n+     */\n+    public static final int DEFAULT_PAYLOAD = 8 * 1024 * 1024;\n \n     public static final String DEFAULT_CLUSTER = \"failover\";\n \n@@ -143,7 +146,13 @@\n \n     public static final int DEFAULT_ALIVE = 60 * 1000;\n \n-    public static final int DEFAULT_CONNECTIONS = 0;\n+    /**\n+     * By default, a consumer JVM instance and a provider JVM instance share a long TCP connection (except when connections are set),\n+     * which can set the number of long TCP connections shared to avoid the bottleneck of sharing a single long TCP connection.\n+     */\n+    public static final String DEFAULT_SHARE_CONNECTIONS = \"1\";\n+\n+    public static final String SHARE_CONNECTIONS_KEY = \"shareconnections\";\n \n     public static final int DEFAULT_ACCEPTS = 0;\n \n@@ -155,15 +164,20 @@\n \n     public static final int DEFAULT_CONNECT_TIMEOUT = 3000;\n \n-//    public static final int DEFAULT_REGISTRY_CONNECT_TIMEOUT = 5000;\n-\n+    /**\n+     * public static final int DEFAULT_REGISTRY_CONNECT_TIMEOUT = 5000;\n+     */\n     public static final int DEFAULT_RETRIES = 2;\n \n     public static final int DEFAULT_FAILBACK_TASKS = 100;\n \n     public static final int DEFAULT_FAILBACK_TIMES = 3;\n \n-    // default buffer size is 8k.\n+    public static final int MAX_PROXY_COUNT = 65535;\n+\n+    /**\n+     * default buffer size is 8k.\n+     */\n     public static final int DEFAULT_BUFFER_SIZE = 8 * 1024;\n \n     public static final Integer DEFAULT_METADATA_REPORT_RETRY_TIMES = 100;\n@@ -186,7 +200,9 @@\n \n     public static final String LOADBALANCE_KEY = \"loadbalance\";\n \n-    // key for router type, for e.g., \"script\"/\"file\",  corresponding to ScriptRouterFactory.NAME, FileRouterFactory.NAME\n+    /**\n+     * key for router type, for e.g., \"script\"/\"file\",  corresponding to ScriptRouterFactory.NAME, FileRouterFactory.NAME\n+     */\n     public static final String ROUTER_KEY = \"router\";\n \n     public static final String CLUSTER_KEY = \"cluster\";\n@@ -231,7 +247,7 @@\n \n     public static final String PROTOCOL_KEY = \"protocol\";\n \n-    public static final String DOBBO_PROTOCOL = DUBBO;\n+    public static final String DUBBO_PROTOCOL = DUBBO;\n \n     public static final String ZOOKEEPER_PROTOCOL = \"zookeeper\";\n \n@@ -298,9 +314,9 @@\n     public static final long LEAST_HEARTBEAT_DURATION = 1000;\n \n     /**\n-     * ticks per wheel. Currently only contains two tasks, so 16 locations are enough\n+     * ticks per wheel.\n      */\n-    public static final int TICKS_PER_WHEEL = 16;\n+    public static final int TICKS_PER_WHEEL = 128;\n \n     public static final String HEARTBEAT_TIMEOUT_KEY = \"heartbeat.timeout\";\n \n@@ -737,6 +753,12 @@\n \n     public static final String HOST_KEY = \"host\";\n \n+    public static final String PORT_KEY = \"port\";\n+\n+    public static final String USERNAME_KEY = \"username\";\n+\n+    public static final String PASSWORD_KEY = \"password\";\n+\n     public static final String ADDRESS_KEY = \"address\";\n \n     public static final String RETRY_TIMES_KEY = \"retry.times\";\n@@ -750,7 +772,9 @@\n     public static final String CONFIG_VERSION_KEY = \"configVersion\";\n \n     public static final String COMPATIBLE_CONFIG_KEY = \"compatible_config\";\n-    // package version in the manifest\n+    /**\n+     * package version in the manifest\n+     */\n     public static final String RELEASE_KEY = \"release\";\n \n     public static final String OVERRIDE_PROVIDERS_KEY = \"providerAddresses\";\n@@ -813,8 +837,25 @@\n      */\n     public static final String PROXY_CLASS_REF = \"refClass\";\n \n-    /*\n-     * private Constants(){ }\n+    public static final String ETCD3_NOTIFY_MAXTHREADS_KEYS = \"etcd3.notify.maxthreads\";\n+\n+    public static final int DEFAULT_ETCD3_NOTIFY_THREADS = DEFAULT_IO_THREADS;\n+\n+    public static final String DEFAULT_ETCD3_NOTIFY_QUEUES_KEY = \"etcd3.notify.queues\";\n+\n+    public static final int DEFAULT_GRPC_QUEUES = 300_0000;\n+\n+    /**\n+     * metrics\n      */\n+    public static final String DUBBO_PROVIDER = \"dubbo.provider\";\n+    public static final String DUBBO_CONSUMER = \"dubbo.consumer\";\n+    public static final String DUBBO_PROVIDER_METHOD = \"dubbo.provider.method\";\n+    public static final String DUBBO_CONSUMER_METHOD = \"dubbo.consumer.method\";\n+    public static final String SERVICE = \"service\";\n+    public static final String METHOD = \"method\";\n+    public static final String DUBBO_GROUP = \"dubbo\";\n+    public static final String METRICS_KEY = \"metrics\";\n+\n \n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/Constants.java",
                "sha": "c6724b84e743aae0d1082b5aaa11d0168d353849",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/Parameters.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/Parameters.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 19,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/Parameters.java",
                "patch": "@@ -96,37 +96,37 @@ public String getDecodedParameter(String key, String defaultValue) {\n \r\n     public String getParameter(String key) {\r\n         String value = parameters.get(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             value = parameters.get(Constants.HIDE_KEY_PREFIX + key);\r\n         }\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             value = parameters.get(Constants.DEFAULT_KEY_PREFIX + key);\r\n         }\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             value = parameters.get(Constants.HIDE_KEY_PREFIX + Constants.DEFAULT_KEY_PREFIX + key);\r\n         }\r\n         return value;\r\n     }\r\n \r\n     public String getParameter(String key, String defaultValue) {\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return value;\r\n     }\r\n \r\n     public int getIntParameter(String key) {\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return 0;\r\n         }\r\n         return Integer.parseInt(value);\r\n     }\r\n \r\n     public int getIntParameter(String key, int defaultValue) {\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return Integer.parseInt(value);\r\n@@ -137,7 +137,7 @@ public int getPositiveIntParameter(String key, int defaultValue) {\n             throw new IllegalArgumentException(\"defaultValue <= 0\");\r\n         }\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         int i = Integer.parseInt(value);\r\n@@ -149,55 +149,55 @@ public int getPositiveIntParameter(String key, int defaultValue) {\n \r\n     public boolean getBooleanParameter(String key) {\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return false;\r\n         }\r\n         return Boolean.parseBoolean(value);\r\n     }\r\n \r\n     public boolean getBooleanParameter(String key, boolean defaultValue) {\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return Boolean.parseBoolean(value);\r\n     }\r\n \r\n-    public boolean hasParamter(String key) {\r\n+    public boolean hasParameter(String key) {\r\n         String value = getParameter(key);\r\n         return value != null && value.length() > 0;\r\n     }\r\n \r\n     public String getMethodParameter(String method, String key) {\r\n         String value = parameters.get(method + \".\" + key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             value = parameters.get(Constants.HIDE_KEY_PREFIX + method + \".\" + key);\r\n         }\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return getParameter(key);\r\n         }\r\n         return value;\r\n     }\r\n \r\n     public String getMethodParameter(String method, String key, String defaultValue) {\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return value;\r\n     }\r\n \r\n     public int getMethodIntParameter(String method, String key) {\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return 0;\r\n         }\r\n         return Integer.parseInt(value);\r\n     }\r\n \r\n     public int getMethodIntParameter(String method, String key, int defaultValue) {\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return Integer.parseInt(value);\r\n@@ -208,7 +208,7 @@ public int getMethodPositiveIntParameter(String method, String key, int defaultV\n             throw new IllegalArgumentException(\"defaultValue <= 0\");\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         int i = Integer.parseInt(value);\r\n@@ -220,21 +220,21 @@ public int getMethodPositiveIntParameter(String method, String key, int defaultV\n \r\n     public boolean getMethodBooleanParameter(String method, String key) {\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return false;\r\n         }\r\n         return Boolean.parseBoolean(value);\r\n     }\r\n \r\n     public boolean getMethodBooleanParameter(String method, String key, boolean defaultValue) {\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return Boolean.parseBoolean(value);\r\n     }\r\n \r\n-    public boolean hasMethodParamter(String method, String key) {\r\n+    public boolean hasMethodParameter(String method, String key) {\r\n         String value = getMethodParameter(method, key);\r\n         return value != null && value.length() > 0;\r\n     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/Parameters.java",
                "sha": "333270c9de30c40d2576e216d3ad2ddcd00572e4",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/Resetable.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/Resetable.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 30,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/Resetable.java",
                "patch": "@@ -1,31 +1,31 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.dubbo.common;\r\n-\r\n-/**\r\n- * Resetable.\r\n- */\r\n-public interface Resetable {\r\n-\r\n-    /**\r\n-     * reset.\r\n-     *\r\n-     * @param url\r\n-     */\r\n-    void reset(URL url);\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.common;\n+\n+/**\n+ * Resetable.\n+ */\n+public interface Resetable {\n+\n+    /**\n+     * reset.\n+     *\n+     * @param url\n+     */\n+    void reset(URL url);\n+\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/Resetable.java",
                "sha": "021cfbf257aa2364ef9d1bb9a80a058d754c1a0d",
                "status": "modified"
            },
            {
                "additions": 104,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "changes": 189,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/URL.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 85,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "patch": "@@ -18,6 +18,7 @@\n \r\n import org.apache.dubbo.common.config.Configuration;\r\n import org.apache.dubbo.common.config.InmemoryConfiguration;\r\n+import org.apache.dubbo.common.utils.ArrayUtils;\r\n import org.apache.dubbo.common.utils.CollectionUtils;\r\n import org.apache.dubbo.common.utils.NetUtils;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n@@ -70,7 +71,8 @@\n  * @see java.net.URL\r\n  * @see java.net.URI\r\n  */\r\n-public /**final**/ class URL implements Serializable {\r\n+public /*final**/\r\n+class URL implements Serializable {\r\n \r\n     private static final long serialVersionUID = -1985165475234910535L;\r\n \r\n@@ -149,8 +151,8 @@ public URL(String protocol, String username, String password, String host, int p\n     }\r\n \r\n     public URL(String protocol, String username, String password, String host, int port, String path, Map<String, String> parameters) {\r\n-        if ((username == null || username.length() == 0)\r\n-                && password != null && password.length() > 0) {\r\n+        if (StringUtils.isEmpty(username)\r\n+                && StringUtils.isNotEmpty(password)) {\r\n             throw new IllegalArgumentException(\"Invalid url, password without username!\");\r\n         }\r\n         this.protocol = protocol;\r\n@@ -164,9 +166,9 @@ public URL(String protocol, String username, String password, String host, int p\n         }\r\n         this.path = path;\r\n         if (parameters == null) {\r\n-            parameters = new HashMap<String, String>();\r\n+            parameters = new HashMap<>();\r\n         } else {\r\n-            parameters = new HashMap<String, String>(parameters);\r\n+            parameters = new HashMap<>(parameters);\r\n         }\r\n         this.parameters = Collections.unmodifiableMap(parameters);\r\n     }\r\n@@ -189,10 +191,10 @@ public static URL valueOf(String url) {\n         int port = 0;\r\n         String path = null;\r\n         Map<String, String> parameters = null;\r\n-        int i = url.indexOf(\"?\"); // seperator between body and parameters\r\n+        int i = url.indexOf(\"?\"); // separator between body and parameters\r\n         if (i >= 0) {\r\n-            String[] parts = url.substring(i + 1).split(\"\\\\&\");\r\n-            parameters = new HashMap<String, String>();\r\n+            String[] parts = url.substring(i + 1).split(\"&\");\r\n+            parameters = new HashMap<>();\r\n             for (String part : parts) {\r\n                 part = part.trim();\r\n                 if (part.length() > 0) {\r\n@@ -263,7 +265,7 @@ public static URL valueOf(String url, String... reserveParams) {\n         if (reserveParams == null || reserveParams.length == 0) {\r\n             return result;\r\n         }\r\n-        Map<String, String> newMap = new HashMap<String, String>(reserveParams.length);\r\n+        Map<String, String> newMap = new HashMap<>(reserveParams.length);\r\n         Map<String, String> oldMap = result.getParameters();\r\n         for (String reserveParam : reserveParams) {\r\n             String tmp = oldMap.get(reserveParam);\r\n@@ -275,7 +277,7 @@ public static URL valueOf(String url, String... reserveParams) {\n     }\r\n \r\n     public static URL valueOf(URL url, String[] reserveParams, String[] reserveParamPrefixs) {\r\n-        Map<String, String> newMap = new HashMap<String, String>();\r\n+        Map<String, String> newMap = new HashMap<>();\r\n         Map<String, String> oldMap = url.getParameters();\r\n         if (reserveParamPrefixs != null && reserveParamPrefixs.length != 0) {\r\n             for (Map.Entry<String, String> entry : oldMap.entrySet()) {\r\n@@ -300,7 +302,7 @@ public static URL valueOf(URL url, String[] reserveParams, String[] reserveParam\n     }\r\n \r\n     public static String encode(String value) {\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return \"\";\r\n         }\r\n         try {\r\n@@ -311,7 +313,7 @@ public static String encode(String value) {\n     }\r\n \r\n     public static String decode(String value) {\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return \"\";\r\n         }\r\n         try {\r\n@@ -346,8 +348,8 @@ public URL setPassword(String password) {\n     }\r\n \r\n     public String getAuthority() {\r\n-        if ((username == null || username.length() == 0)\r\n-                && (password == null || password.length() == 0)) {\r\n+        if (StringUtils.isEmpty(username)\r\n+                && StringUtils.isEmpty(password)) {\r\n             return null;\r\n         }\r\n         return (username == null ? \"\" : username)\r\n@@ -413,7 +415,7 @@ public String getBackupAddress() {\n     public String getBackupAddress(int defaultPort) {\r\n         StringBuilder address = new StringBuilder(appendDefaultPort(getAddress(), defaultPort));\r\n         String[] backups = getParameter(Constants.BACKUP_KEY, new String[0]);\r\n-        if (backups != null && backups.length > 0) {\r\n+        if (ArrayUtils.isNotEmpty(backups)) {\r\n             for (String backup : backups) {\r\n                 address.append(\",\");\r\n                 address.append(appendDefaultPort(backup, defaultPort));\r\n@@ -423,7 +425,7 @@ public String getBackupAddress(int defaultPort) {\n     }\r\n \r\n     public List<URL> getBackupUrls() {\r\n-        List<URL> urls = new ArrayList<URL>();\r\n+        List<URL> urls = new ArrayList<>();\r\n         urls.add(this);\r\n         String[] backups = getParameter(Constants.BACKUP_KEY, new String[0]);\r\n         if (backups != null && backups.length > 0) {\r\n@@ -434,9 +436,8 @@ public String getBackupAddress(int defaultPort) {\n         return urls;\r\n     }\r\n \r\n-    private String appendDefaultPort(String address, int defaultPort) {\r\n-        if (address != null && address.length() > 0\r\n-                && defaultPort > 0) {\r\n+    static String appendDefaultPort(String address, int defaultPort) {\r\n+        if (address != null && address.length() > 0 && defaultPort > 0) {\r\n             int i = address.indexOf(':');\r\n             if (i < 0) {\r\n                 return address + \":\" + defaultPort;\r\n@@ -476,23 +477,23 @@ public String getParameterAndDecoded(String key, String defaultValue) {\n \r\n     public String getParameter(String key) {\r\n         String value = parameters.get(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             value = parameters.get(Constants.DEFAULT_KEY_PREFIX + key);\r\n         }\r\n         return value;\r\n     }\r\n \r\n     public String getParameter(String key, String defaultValue) {\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return value;\r\n     }\r\n \r\n     public String[] getParameter(String key, String[] defaultValue) {\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return Constants.COMMA_SPLIT_PATTERN.split(value);\r\n@@ -509,14 +510,14 @@ public String getParameter(String key, String defaultValue) {\n \r\n     private Map<String, Number> getNumbers() {\r\n         if (numbers == null) { // concurrent initialization is tolerant\r\n-            numbers = new ConcurrentHashMap<String, Number>();\r\n+            numbers = new ConcurrentHashMap<>();\r\n         }\r\n         return numbers;\r\n     }\r\n \r\n     private Map<String, URL> getUrls() {\r\n         if (urls == null) { // concurrent initialization is tolerant\r\n-            urls = new ConcurrentHashMap<String, URL>();\r\n+            urls = new ConcurrentHashMap<>();\r\n         }\r\n         return urls;\r\n     }\r\n@@ -527,7 +528,7 @@ public URL getUrlParameter(String key) {\n             return u;\r\n         }\r\n         String value = getParameterAndDecoded(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return null;\r\n         }\r\n         u = URL.valueOf(value);\r\n@@ -541,7 +542,7 @@ public double getParameter(String key, double defaultValue) {\n             return n.doubleValue();\r\n         }\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         double d = Double.parseDouble(value);\r\n@@ -555,7 +556,7 @@ public float getParameter(String key, float defaultValue) {\n             return n.floatValue();\r\n         }\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         float f = Float.parseFloat(value);\r\n@@ -569,7 +570,7 @@ public long getParameter(String key, long defaultValue) {\n             return n.longValue();\r\n         }\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         long l = Long.parseLong(value);\r\n@@ -583,7 +584,7 @@ public int getParameter(String key, int defaultValue) {\n             return n.intValue();\r\n         }\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         int i = Integer.parseInt(value);\r\n@@ -597,7 +598,7 @@ public short getParameter(String key, short defaultValue) {\n             return n.shortValue();\r\n         }\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         short s = Short.parseShort(value);\r\n@@ -611,7 +612,7 @@ public byte getParameter(String key, byte defaultValue) {\n             return n.byteValue();\r\n         }\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         byte b = Byte.parseByte(value);\r\n@@ -687,15 +688,15 @@ public byte getPositiveParameter(String key, byte defaultValue) {\n \r\n     public char getParameter(String key, char defaultValue) {\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return value.charAt(0);\r\n     }\r\n \r\n     public boolean getParameter(String key, boolean defaultValue) {\r\n         String value = getParameter(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return Boolean.parseBoolean(value);\r\n@@ -716,15 +717,15 @@ public String getMethodParameterAndDecoded(String method, String key, String def\n \r\n     public String getMethodParameter(String method, String key) {\r\n         String value = parameters.get(method + \".\" + key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return getParameter(key);\r\n         }\r\n         return value;\r\n     }\r\n \r\n     public String getMethodParameter(String method, String key, String defaultValue) {\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return value;\r\n@@ -734,10 +735,10 @@ public double getMethodParameter(String method, String key, double defaultValue)\n         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n-            return n.intValue();\r\n+            return n.doubleValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         double d = Double.parseDouble(value);\r\n@@ -749,10 +750,10 @@ public float getMethodParameter(String method, String key, float defaultValue) {\n         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n-            return n.intValue();\r\n+            return n.floatValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         float f = Float.parseFloat(value);\r\n@@ -764,10 +765,10 @@ public long getMethodParameter(String method, String key, long defaultValue) {\n         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n-            return n.intValue();\r\n+            return n.longValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         long l = Long.parseLong(value);\r\n@@ -782,7 +783,7 @@ public int getMethodParameter(String method, String key, int defaultValue) {\n             return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         int i = Integer.parseInt(value);\r\n@@ -797,7 +798,7 @@ public short getMethodParameter(String method, String key, short defaultValue) {\n             return n.shortValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         short s = Short.parseShort(value);\r\n@@ -812,7 +813,7 @@ public byte getMethodParameter(String method, String key, byte defaultValue) {\n             return n.byteValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         byte b = Byte.parseByte(value);\r\n@@ -888,15 +889,15 @@ public byte getMethodPositiveParameter(String method, String key, byte defaultVa\n \r\n     public char getMethodParameter(String method, String key, char defaultValue) {\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return value.charAt(0);\r\n     }\r\n \r\n     public boolean getMethodParameter(String method, String key, boolean defaultValue) {\r\n         String value = getMethodParameter(method, key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return defaultValue;\r\n         }\r\n         return Boolean.parseBoolean(value);\r\n@@ -934,7 +935,7 @@ public boolean isAnyHost() {\n     }\r\n \r\n     public URL addParameterAndEncoded(String key, String value) {\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             return this;\r\n         }\r\n         return addParameter(key, encode(value));\r\n@@ -994,29 +995,29 @@ public URL addParameter(String key, CharSequence value) {\n     }\r\n \r\n     public URL addParameter(String key, String value) {\r\n-        if (key == null || key.length() == 0\r\n-                || value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(key)\r\n+                || StringUtils.isEmpty(value)) {\r\n             return this;\r\n         }\r\n         // if value doesn't change, return immediately\r\n         if (value.equals(getParameters().get(key))) { // value != null\r\n             return this;\r\n         }\r\n \r\n-        Map<String, String> map = new HashMap<String, String>(getParameters());\r\n+        Map<String, String> map = new HashMap<>(getParameters());\r\n         map.put(key, value);\r\n         return new URL(protocol, username, password, host, port, path, map);\r\n     }\r\n \r\n     public URL addParameterIfAbsent(String key, String value) {\r\n-        if (key == null || key.length() == 0\r\n-                || value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(key)\r\n+                || StringUtils.isEmpty(value)) {\r\n             return this;\r\n         }\r\n         if (hasParameter(key)) {\r\n             return this;\r\n         }\r\n-        Map<String, String> map = new HashMap<String, String>(getParameters());\r\n+        Map<String, String> map = new HashMap<>(getParameters());\r\n         map.put(key, value);\r\n         return new URL(protocol, username, password, host, port, path, map);\r\n     }\r\n@@ -1028,7 +1029,7 @@ public URL addParameterIfAbsent(String key, String value) {\n      * @return A new URL\r\n      */\r\n     public URL addParameters(Map<String, String> parameters) {\r\n-        if (parameters == null || parameters.size() == 0) {\r\n+        if (CollectionUtils.isEmptyMap(parameters)) {\r\n             return this;\r\n         }\r\n \r\n@@ -1052,16 +1053,16 @@ public URL addParameters(Map<String, String> parameters) {\n             return this;\r\n         }\r\n \r\n-        Map<String, String> map = new HashMap<String, String>(getParameters());\r\n+        Map<String, String> map = new HashMap<>(getParameters());\r\n         map.putAll(parameters);\r\n         return new URL(protocol, username, password, host, port, path, map);\r\n     }\r\n \r\n     public URL addParametersIfAbsent(Map<String, String> parameters) {\r\n-        if (parameters == null || parameters.size() == 0) {\r\n+        if (CollectionUtils.isEmptyMap(parameters)) {\r\n             return this;\r\n         }\r\n-        Map<String, String> map = new HashMap<String, String>(parameters);\r\n+        Map<String, String> map = new HashMap<>(parameters);\r\n         map.putAll(getParameters());\r\n         return new URL(protocol, username, password, host, port, path, map);\r\n     }\r\n@@ -1073,7 +1074,7 @@ public URL addParameters(String... pairs) {\n         if (pairs.length % 2 != 0) {\r\n             throw new IllegalArgumentException(\"Map pairs can not be odd number.\");\r\n         }\r\n-        Map<String, String> map = new HashMap<String, String>();\r\n+        Map<String, String> map = new HashMap<>();\r\n         int len = pairs.length / 2;\r\n         for (int i = 0; i < len; i++) {\r\n             map.put(pairs[2 * i], pairs[2 * i + 1]);\r\n@@ -1082,21 +1083,21 @@ public URL addParameters(String... pairs) {\n     }\r\n \r\n     public URL addParameterString(String query) {\r\n-        if (query == null || query.length() == 0) {\r\n+        if (StringUtils.isEmpty(query)) {\r\n             return this;\r\n         }\r\n         return addParameters(StringUtils.parseQueryString(query));\r\n     }\r\n \r\n     public URL removeParameter(String key) {\r\n-        if (key == null || key.length() == 0) {\r\n+        if (StringUtils.isEmpty(key)) {\r\n             return this;\r\n         }\r\n         return removeParameters(key);\r\n     }\r\n \r\n     public URL removeParameters(Collection<String> keys) {\r\n-        if (keys == null || keys.isEmpty()) {\r\n+        if (CollectionUtils.isEmpty(keys)) {\r\n             return this;\r\n         }\r\n         return removeParameters(keys.toArray(new String[0]));\r\n@@ -1106,7 +1107,7 @@ public URL removeParameters(String... keys) {\n         if (keys == null || keys.length == 0) {\r\n             return this;\r\n         }\r\n-        Map<String, String> map = new HashMap<String, String>(getParameters());\r\n+        Map<String, String> map = new HashMap<>(getParameters());\r\n         for (String key : keys) {\r\n             map.remove(key);\r\n         }\r\n@@ -1117,50 +1118,50 @@ public URL removeParameters(String... keys) {\n     }\r\n \r\n     public URL clearParameters() {\r\n-        return new URL(protocol, username, password, host, port, path, new HashMap<String, String>());\r\n+        return new URL(protocol, username, password, host, port, path, new HashMap<>());\r\n     }\r\n \r\n     public String getRawParameter(String key) {\r\n-        if (\"protocol\".equals(key)) {\r\n+        if (Constants.PROTOCOL_KEY.equals(key)) {\r\n             return protocol;\r\n         }\r\n-        if (\"username\".equals(key)) {\r\n+        if (Constants.USERNAME_KEY.equals(key)) {\r\n             return username;\r\n         }\r\n-        if (\"password\".equals(key)) {\r\n+        if (Constants.PASSWORD_KEY.equals(key)) {\r\n             return password;\r\n         }\r\n-        if (\"host\".equals(key)) {\r\n+        if (Constants.HOST_KEY.equals(key)) {\r\n             return host;\r\n         }\r\n-        if (\"port\".equals(key)) {\r\n+        if (Constants.PORT_KEY.equals(key)) {\r\n             return String.valueOf(port);\r\n         }\r\n-        if (\"path\".equals(key)) {\r\n+        if (Constants.PATH_KEY.equals(key)) {\r\n             return path;\r\n         }\r\n         return getParameter(key);\r\n     }\r\n \r\n     public Map<String, String> toMap() {\r\n-        Map<String, String> map = new HashMap<String, String>(parameters);\r\n+        Map<String, String> map = new HashMap<>(parameters);\r\n         if (protocol != null) {\r\n-            map.put(\"protocol\", protocol);\r\n+            map.put(Constants.PROTOCOL_KEY, protocol);\r\n         }\r\n         if (username != null) {\r\n-            map.put(\"username\", username);\r\n+            map.put(Constants.USERNAME_KEY, username);\r\n         }\r\n         if (password != null) {\r\n-            map.put(\"password\", password);\r\n+            map.put(Constants.USERNAME_KEY, password);\r\n         }\r\n         if (host != null) {\r\n-            map.put(\"host\", host);\r\n+            map.put(Constants.HOST_KEY, host);\r\n         }\r\n         if (port > 0) {\r\n-            map.put(\"port\", String.valueOf(port));\r\n+            map.put(Constants.PORT_KEY, String.valueOf(port));\r\n         }\r\n         if (path != null) {\r\n-            map.put(\"path\", path);\r\n+            map.put(Constants.PATH_KEY, path);\r\n         }\r\n         return map;\r\n     }\r\n@@ -1213,10 +1214,10 @@ public String toParameterString(String... parameters) {\n     }\r\n \r\n     private void buildParameters(StringBuilder buf, boolean concat, String[] parameters) {\r\n-        if (getParameters() != null && getParameters().size() > 0) {\r\n-            List<String> includes = (parameters == null || parameters.length == 0 ? null : Arrays.asList(parameters));\r\n+        if (CollectionUtils.isNotEmptyMap(getParameters())) {\r\n+            List<String> includes = (ArrayUtils.isEmpty(parameters) ? null : Arrays.asList(parameters));\r\n             boolean first = true;\r\n-            for (Map.Entry<String, String> entry : new TreeMap<String, String>(getParameters()).entrySet()) {\r\n+            for (Map.Entry<String, String> entry : new TreeMap<>(getParameters()).entrySet()) {\r\n                 if (entry.getKey() != null && entry.getKey().length() > 0\r\n                         && (includes == null || includes.contains(entry.getKey()))) {\r\n                     if (first) {\r\n@@ -1241,11 +1242,11 @@ private String buildString(boolean appendUser, boolean appendParameter, String..\n \r\n     private String buildString(boolean appendUser, boolean appendParameter, boolean useIP, boolean useService, String... parameters) {\r\n         StringBuilder buf = new StringBuilder();\r\n-        if (protocol != null && protocol.length() > 0) {\r\n+        if (StringUtils.isNotEmpty(protocol)) {\r\n             buf.append(protocol);\r\n             buf.append(\"://\");\r\n         }\r\n-        if (appendUser && username != null && username.length() > 0) {\r\n+        if (appendUser && StringUtils.isNotEmpty(username)) {\r\n             buf.append(username);\r\n             if (password != null && password.length() > 0) {\r\n                 buf.append(\":\");\r\n@@ -1296,7 +1297,7 @@ public InetSocketAddress toInetSocketAddress() {\n     }\r\n \r\n     /**\r\n-     * The format is '{group}/{interfaceName/path}*{version}'\r\n+     * The format is '{group}*{interfaceName}:{version}'\r\n      *\r\n      * @return\r\n      */\r\n@@ -1306,18 +1307,36 @@ public String getEncodedServiceKey() {\n         return serviceKey;\r\n     }\r\n \r\n+    /**\r\n+     * The format of return value is '{group}/{interfaceName}:{version}'\r\n+     * @return\r\n+     */\r\n     public String getServiceKey() {\r\n         String inf = getServiceInterface();\r\n         if (inf == null) {\r\n             return null;\r\n         }\r\n+        return buildKey(inf, getParameter(Constants.GROUP_KEY), getParameter(Constants.VERSION_KEY));\r\n+    }\r\n+\r\n+    /**\r\n+     * The format of return value is '{group}/{path/interfaceName}:{version}'\r\n+     * @return\r\n+     */\r\n+    public String getPathKey() {\r\n+        String inf = StringUtils.isNotEmpty(path) ? path : getServiceInterface();\r\n+        if (inf == null) {\r\n+            return null;\r\n+        }\r\n+        return buildKey(inf, getParameter(Constants.GROUP_KEY), getParameter(Constants.VERSION_KEY));\r\n+    }\r\n+\r\n+    public static String buildKey(String path, String group, String version) {\r\n         StringBuilder buf = new StringBuilder();\r\n-        String group = getParameter(Constants.GROUP_KEY);\r\n         if (group != null && group.length() > 0) {\r\n             buf.append(group).append(\"/\");\r\n         }\r\n-        buf.append(inf);\r\n-        String version = getParameter(Constants.VERSION_KEY);\r\n+        buf.append(path);\r\n         if (version != null && version.length() > 0) {\r\n             buf.append(\":\").append(version);\r\n         }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/URL.java",
                "sha": "35a3b7bd1f97d2f665d63bd19d337f01084f7910",
                "status": "modified"
            },
            {
                "additions": 350,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/URLBuilder.java",
                "changes": 350,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/URLBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/URLBuilder.java",
                "patch": "@@ -0,0 +1,350 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.dubbo.common;\r\n+\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n+import org.apache.dubbo.common.utils.StringUtils;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Objects;\r\n+\r\n+public final class URLBuilder {\r\n+    private String protocol;\r\n+\r\n+    private String username;\r\n+\r\n+    private String password;\r\n+\r\n+    // by default, host to registry\r\n+    private String host;\r\n+\r\n+    // by default, port to registry\r\n+    private int port;\r\n+\r\n+    private String path;\r\n+\r\n+    private Map<String, String> parameters;\r\n+\r\n+    public URLBuilder() {\r\n+        protocol = null;\r\n+        username = null;\r\n+        password = null;\r\n+        host = null;\r\n+        port = 0;\r\n+        path = null;\r\n+        parameters = new HashMap<>();\r\n+    }\r\n+\r\n+    public URLBuilder(String protocol, String host, int port) {\r\n+        this(protocol, null, null, host, port, null, null);\r\n+    }\r\n+\r\n+    public URLBuilder(String protocol, String host, int port, String[] pairs) {\r\n+        this(protocol, null, null, host, port, null, CollectionUtils.toStringMap(pairs));\r\n+    }\r\n+\r\n+    public URLBuilder(String protocol, String host, int port, Map<String, String> parameters) {\r\n+        this(protocol, null, null, host, port, null, parameters);\r\n+    }\r\n+\r\n+    public URLBuilder(String protocol, String host, int port, String path) {\r\n+        this(protocol, null, null, host, port, path, null);\r\n+    }\r\n+\r\n+    public URLBuilder(String protocol, String host, int port, String path, String... pairs) {\r\n+        this(protocol, null, null, host, port, path, CollectionUtils.toStringMap(pairs));\r\n+    }\r\n+\r\n+    public URLBuilder(String protocol, String host, int port, String path, Map<String, String> parameters) {\r\n+        this(protocol, null, null, host, port, path, parameters);\r\n+    }\r\n+\r\n+    public URLBuilder(String protocol, String username, String password, String host, int port, String path, Map<String, String> parameters) {\r\n+        this.protocol = protocol;\r\n+        this.username = username;\r\n+        this.password = password;\r\n+        this.host = host;\r\n+        this.port = port;\r\n+        this.path = path;\r\n+        this.parameters = parameters != null ? parameters : new HashMap<>();\r\n+    }\r\n+\r\n+    public static URLBuilder from(URL url) {\r\n+        String protocol = url.getProtocol();\r\n+        String username = url.getUsername();\r\n+        String password = url.getPassword();\r\n+        String host = url.getHost();\r\n+        int port = url.getPort();\r\n+        String path = url.getPath();\r\n+        Map<String, String> parameters = new HashMap<>(url.getParameters());\r\n+        return new URLBuilder(\r\n+                protocol,\r\n+                username,\r\n+                password,\r\n+                host,\r\n+                port,\r\n+                path,\r\n+                parameters);\r\n+    }\r\n+\r\n+    public URL build() {\r\n+        if (StringUtils.isEmpty(username) && StringUtils.isNotEmpty(password)) {\r\n+            throw new IllegalArgumentException(\"Invalid url, password without username!\");\r\n+        }\r\n+        port = port < 0 ? 0 : port;\r\n+        // trim the leading \"/\"\r\n+        int firstNonSlash = 0;\r\n+        if (path != null) {\r\n+            while (firstNonSlash < path.length() && path.charAt(firstNonSlash) == '/') {\r\n+                firstNonSlash++;\r\n+            }\r\n+            if (firstNonSlash >= path.length()) {\r\n+                path = \"\";\r\n+            } else if (firstNonSlash > 0) {\r\n+                path = path.substring(firstNonSlash);\r\n+            }\r\n+        }\r\n+        return new URL(protocol, username, password, host, port, path, parameters);\r\n+    }\r\n+\r\n+\r\n+    public URLBuilder setProtocol(String protocol) {\r\n+        this.protocol = protocol;\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder setUsername(String username) {\r\n+        this.username = username;\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder setPassword(String password) {\r\n+        this.password = password;\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder setHost(String host) {\r\n+        this.host = host;\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder setPort(int port) {\r\n+        this.port = port;\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder setAddress(String address) {\r\n+        int i = address.lastIndexOf(':');\r\n+        String host;\r\n+        int port = this.port;\r\n+        if (i >= 0) {\r\n+            host = address.substring(0, i);\r\n+            port = Integer.parseInt(address.substring(i + 1));\r\n+        } else {\r\n+            host = address;\r\n+        }\r\n+        this.host = host;\r\n+        this.port = port;\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder setPath(String path) {\r\n+        this.path = path;\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder addParameterAndEncoded(String key, String value) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n+            return this;\r\n+        }\r\n+        return addParameter(key, URL.encode(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, boolean value) {\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, char value) {\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, byte value) {\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, short value) {\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, int value) {\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, long value) {\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, float value) {\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, double value) {\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, Enum<?> value) {\r\n+        if (value == null) {\r\n+            return this;\r\n+        }\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, Number value) {\r\n+        if (value == null) {\r\n+            return this;\r\n+        }\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, CharSequence value) {\r\n+        if (value == null || value.length() == 0) {\r\n+            return this;\r\n+        }\r\n+        return addParameter(key, String.valueOf(value));\r\n+    }\r\n+\r\n+    public URLBuilder addParameter(String key, String value) {\r\n+        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(value)) {\r\n+            return this;\r\n+        }\r\n+        // if value doesn't change, return immediately\r\n+        if (value.equals(parameters.get(key))) { // value != null\r\n+            return this;\r\n+        }\r\n+\r\n+        parameters.put(key, value);\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder addParameterIfAbsent(String key, String value) {\r\n+        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(value)) {\r\n+            return this;\r\n+        }\r\n+        if (hasParameter(key)) {\r\n+            return this;\r\n+        }\r\n+        parameters.put(key, value);\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder addParameters(Map<String, String> parameters) {\r\n+        if (CollectionUtils.isEmptyMap(parameters)) {\r\n+            return this;\r\n+        }\r\n+\r\n+        boolean hasAndEqual = true;\r\n+        for (Map.Entry<String, String> entry : parameters.entrySet()) {\r\n+            String oldValue = this.parameters.get(entry.getKey());\r\n+            String newValue = entry.getValue();\r\n+            if (!Objects.equals(oldValue, newValue)) {\r\n+                hasAndEqual = false;\r\n+                break;\r\n+            }\r\n+        }\r\n+        // return immediately if there's no change\r\n+        if (hasAndEqual) {\r\n+            return this;\r\n+        }\r\n+\r\n+        this.parameters.putAll(parameters);\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder addParametersIfAbsent(Map<String, String> parameters) {\r\n+        if (CollectionUtils.isEmptyMap(parameters)) {\r\n+            return this;\r\n+        }\r\n+        this.parameters.putAll(parameters);\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder addParameters(String... pairs) {\r\n+        if (pairs == null || pairs.length == 0) {\r\n+            return this;\r\n+        }\r\n+        if (pairs.length % 2 != 0) {\r\n+            throw new IllegalArgumentException(\"Map pairs can not be odd number.\");\r\n+        }\r\n+        Map<String, String> map = new HashMap<>();\r\n+        int len = pairs.length / 2;\r\n+        for (int i = 0; i < len; i++) {\r\n+            map.put(pairs[2 * i], pairs[2 * i + 1]);\r\n+        }\r\n+        return addParameters(map);\r\n+    }\r\n+\r\n+    public URLBuilder addParameterString(String query) {\r\n+        if (StringUtils.isEmpty(query)) {\r\n+            return this;\r\n+        }\r\n+        return addParameters(StringUtils.parseQueryString(query));\r\n+    }\r\n+\r\n+    public URLBuilder removeParameter(String key) {\r\n+        if (StringUtils.isEmpty(key)) {\r\n+            return this;\r\n+        }\r\n+        return removeParameters(key);\r\n+    }\r\n+\r\n+    public URLBuilder removeParameters(Collection<String> keys) {\r\n+        if (CollectionUtils.isEmpty(keys)) {\r\n+            return this;\r\n+        }\r\n+        return removeParameters(keys.toArray(new String[0]));\r\n+    }\r\n+\r\n+    public URLBuilder removeParameters(String... keys) {\r\n+        if (keys == null || keys.length == 0) {\r\n+            return this;\r\n+        }\r\n+        for (String key : keys) {\r\n+            parameters.remove(key);\r\n+        }\r\n+        return this;\r\n+    }\r\n+\r\n+    public URLBuilder clearParameters() {\r\n+        parameters.clear();\r\n+        return this;\r\n+    }\r\n+\r\n+    public boolean hasParameter(String key) {\r\n+        String value = getParameter(key);\r\n+        return value != null && value.length() > 0;\r\n+    }\r\n+\r\n+    public String getParameter(String key) {\r\n+        String value = parameters.get(key);\r\n+        if (StringUtils.isEmpty(value)) {\r\n+            value = parameters.get(Constants.DEFAULT_KEY_PREFIX + key);\r\n+        }\r\n+        return value;\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/URLBuilder.java",
                "sha": "c938737811da2107345c86b56dc9de53939e4a97",
                "status": "added"
            },
            {
                "additions": 90,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "changes": 158,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/Version.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 68,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "patch": "@@ -21,19 +21,24 @@\n import org.apache.dubbo.common.utils.ClassHelper;\n import org.apache.dubbo.common.utils.StringUtils;\n \n+import java.io.IOException;\n import java.net.URL;\n import java.security.CodeSource;\n import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * Version\n  */\n public final class Version {\n     private static final Logger logger = LoggerFactory.getLogger(Version.class);\n+    \n+    private static final Pattern PREFIX_DIGITS_PATTERN = Pattern.compile(\"^([0-9]*).*\");\n \n     // Dubbo RPC protocol version, for compatibility, it must not be between 2.0.10 ~ 2.6.2\n     public static final String DEFAULT_DUBBO_PROTOCOL_VERSION = \"2.0.2\";\n@@ -89,7 +94,7 @@ public static boolean isRelease263OrHigher(String version) {\n     }\n \n     public static boolean isSupportResponseAttachment(String version) {\n-        if (version == null || version.length() == 0) {\n+        if (StringUtils.isEmpty(version)) {\n             return false;\n         }\n         // for previous dubbo version(2.0.10/020010~2.6.2/020602), this version is the jar's version, so they need to\n@@ -120,82 +125,91 @@ private static int parseInt(String version) {\n         String[] vArr = version.split(\"\\\\.\");\n         int len = vArr.length;\n         for (int i = 0; i < len; i++) {\n-            v += Integer.parseInt(getDigital(vArr[i])) * Math.pow(10, (len - i - 1) * 2);\n+            v += Integer.parseInt(getPrefixDigits(vArr[i])) * Math.pow(10, (len - i - 1) * 2);\n         }\n         return v;\n     }\n \n-    private static String getDigital(String v) {\n-        int index = 0;\n-        for (int i = 0; i < v.length(); i++) {\n-            char c = v.charAt(i);\n-            if (Character.isDigit(c)) {\n-                if (i == v.length() - 1) {\n-                    index = i + 1;\n-                } else {\n-                    index = i;\n-                }\n-            } else {\n-                index = i;\n-                break;\n-            }\n-        }\n-        return v.substring(0, index);\n-    }\n-\n-    private static boolean hasResource(String path) {\n-        try {\n-            return Version.class.getClassLoader().getResource(path) != null;\n-        } catch (Throwable t) {\n-            return false;\n+    /**\n+     * get prefix digits from given version string\n+     */\n+    private static String getPrefixDigits(String v) {\n+        Matcher matcher = PREFIX_DIGITS_PATTERN.matcher(v);\n+        if (matcher.find()) {\n+            return matcher.group(1);\n         }\n+        return \"\";\n     }\n \n     public static String getVersion(Class<?> cls, String defaultVersion) {\n         try {\n             // find version info from MANIFEST.MF first\n-            String version = cls.getPackage().getImplementationVersion();\n-            if (version == null || version.length() == 0) {\n-                version = cls.getPackage().getSpecificationVersion();\n-            }\n-            if (version == null || version.length() == 0) {\n-                // guess version fro jar file name if nothing's found from MANIFEST.MF\n-                CodeSource codeSource = cls.getProtectionDomain().getCodeSource();\n-                if (codeSource == null) {\n-                    logger.info(\"No codeSource for class \" + cls.getName() + \" when getVersion, use default version \" + defaultVersion);\n-                } else {\n-                    String file = codeSource.getLocation().getFile();\n-                    if (file != null && file.length() > 0 && file.endsWith(\".jar\")) {\n-                        file = file.substring(0, file.length() - 4);\n-                        int i = file.lastIndexOf('/');\n-                        if (i >= 0) {\n-                            file = file.substring(i + 1);\n-                        }\n-                        i = file.indexOf(\"-\");\n-                        if (i >= 0) {\n-                            file = file.substring(i + 1);\n-                        }\n-                        while (file.length() > 0 && !Character.isDigit(file.charAt(0))) {\n-                            i = file.indexOf(\"-\");\n-                            if (i >= 0) {\n-                                file = file.substring(i + 1);\n-                            } else {\n-                                break;\n-                            }\n-                        }\n-                        version = file;\n-                    }\n+            Package pkg = cls.getPackage();\n+            String version = null;\n+            if (pkg != null) {\n+                version = pkg.getImplementationVersion();\n+                if (!StringUtils.isEmpty(version)) {\n+                    return version;\n+                }\n+\n+                version = pkg.getSpecificationVersion();\n+                if (!StringUtils.isEmpty(version)) {\n+                    return version;\n                 }\n             }\n+            \n+            // guess version fro jar file name if nothing's found from MANIFEST.MF\n+            CodeSource codeSource = cls.getProtectionDomain().getCodeSource();\n+            if (codeSource == null) {\n+                logger.info(\"No codeSource for class \" + cls.getName() + \" when getVersion, use default version \" + defaultVersion);\n+                return defaultVersion;\n+            } \n+            \n+            String file = codeSource.getLocation().getFile();\n+            if (!StringUtils.isEmpty(file) && file.endsWith(\".jar\")) {\n+                version = getFromFile(file);\n+            }\n+            \n             // return default version if no version info is found\n-            return version == null || version.length() == 0 ? defaultVersion : version;\n+            return StringUtils.isEmpty(version) ? defaultVersion : version;\n         } catch (Throwable e) {\n             // return default version when any exception is thrown\n             logger.error(\"return default version, ignore exception \" + e.getMessage(), e);\n             return defaultVersion;\n         }\n     }\n \n+    /**\n+     * get version from file: path/to/group-module-x.y.z.jar, returns x.y.z\n+     */\n+    private static String getFromFile(String file) {\n+        // remove suffix \".jar\": \"path/to/group-module-x.y.z\"\n+        file = file.substring(0, file.length() - 4);\n+        \n+        // remove path: \"group-module-x.y.z\"\n+        int i = file.lastIndexOf('/');\n+        if (i >= 0) {\n+            file = file.substring(i + 1);\n+        }\n+        \n+        // remove group: \"module-x.y.z\"\n+        i = file.indexOf(\"-\");\n+        if (i >= 0) {\n+            file = file.substring(i + 1);\n+        }\n+        \n+        // remove module: \"x.y.z\"\n+        while (file.length() > 0 && !Character.isDigit(file.charAt(0))) {\n+            i = file.indexOf(\"-\");\n+            if (i >= 0) {\n+                file = file.substring(i + 1);\n+            } else {\n+                break;\n+            }\n+        }\n+        return file;\n+    }\n+\n     public static void checkDuplicate(Class<?> cls, boolean failOnError) {\n         checkDuplicate(cls.getName().replace('.', '/') + \".class\", failOnError);\n     }\n@@ -207,17 +221,7 @@ public static void checkDuplicate(Class<?> cls) {\n     public static void checkDuplicate(String path, boolean failOnError) {\n         try {\n             // search in caller's classloader\n-            Enumeration<URL> urls = ClassHelper.getCallerClassLoader(Version.class).getResources(path);\n-            Set<String> files = new HashSet<String>();\n-            while (urls.hasMoreElements()) {\n-                URL url = urls.nextElement();\n-                if (url != null) {\n-                    String file = url.getFile();\n-                    if (file != null && file.length() > 0) {\n-                        files.add(file);\n-                    }\n-                }\n-            }\n+            Set<String> files = getResources(path);\n             // duplicated jar is found\n             if (files.size() > 1) {\n                 String error = \"Duplicate class \" + path + \" in \" + files.size() + \" jar \" + files;\n@@ -232,4 +236,22 @@ public static void checkDuplicate(String path, boolean failOnError) {\n         }\n     }\n \n+    /**\n+     * search resources in caller's classloader\n+     */\n+    private static Set<String> getResources(String path) throws IOException {\n+        Enumeration<URL> urls = ClassHelper.getCallerClassLoader(Version.class).getResources(path);\n+        Set<String> files = new HashSet<String>();\n+        while (urls.hasMoreElements()) {\n+            URL url = urls.nextElement();\n+            if (url != null) {\n+                String file = url.getFile();\n+                if (file != null && file.length() > 0) {\n+                    files.add(file);\n+                }\n+            }\n+        }\n+        return files;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/Version.java",
                "sha": "0ab48a6c4fc971a448ee7fde019519f5aab8ea34",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.dubbo.common.bytecode;\n \n+import org.apache.dubbo.common.utils.ArrayUtils;\n import org.apache.dubbo.common.utils.ClassHelper;\n import org.apache.dubbo.common.utils.ReflectUtils;\n \n@@ -29,6 +30,7 @@\n import javassist.CtNewMethod;\n import javassist.LoaderClassPath;\n import javassist.NotFoundException;\n+import org.apache.dubbo.common.utils.StringUtils;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n@@ -165,7 +167,7 @@ public ClassGenerator addField(String name, int mod, Class<?> type, String def)\n         StringBuilder sb = new StringBuilder();\n         sb.append(modifier(mod)).append(' ').append(ReflectUtils.getName(type)).append(' ');\n         sb.append(name);\n-        if (def != null && def.length() > 0) {\n+        if (StringUtils.isNotEmpty(def)) {\n             sb.append('=');\n             sb.append(def);\n         }\n@@ -198,7 +200,7 @@ public ClassGenerator addMethod(String name, int mod, Class<?> rt, Class<?>[] pt\n             sb.append(\" arg\").append(i);\n         }\n         sb.append(')');\n-        if (ets != null && ets.length > 0) {\n+        if (ArrayUtils.isNotEmpty(ets)) {\n             sb.append(\" throws \");\n             for (int i = 0; i < ets.length; i++) {\n                 if (i > 0) {\n@@ -250,7 +252,7 @@ public ClassGenerator addConstructor(int mod, Class<?>[] pts, Class<?>[] ets, St\n             sb.append(\" arg\").append(i);\n         }\n         sb.append(')');\n-        if (ets != null && ets.length > 0) {\n+        if (ArrayUtils.isNotEmpty(ets)) {\n             sb.append(\" throws \");\n             for (int i = 0; i < ets.length; i++) {\n                 if (i > 0) {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/ClassGenerator.java",
                "sha": "40ae8856cfe85fa8ba0db3de14aaa716e259aec5",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 15,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\r\n package org.apache.dubbo.common.bytecode;\r\n \r\n+import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.common.utils.ClassHelper;\r\n import org.apache.dubbo.common.utils.ReflectUtils;\r\n \r\n@@ -38,12 +39,7 @@\n  */\r\n \r\n public abstract class Proxy {\r\n-    public static final InvocationHandler RETURN_NULL_INVOKER = new InvocationHandler() {\r\n-        @Override\r\n-        public Object invoke(Object proxy, Method method, Object[] args) {\r\n-            return null;\r\n-        }\r\n-    };\r\n+    public static final InvocationHandler RETURN_NULL_INVOKER = (proxy, method, args) -> null;\r\n     public static final InvocationHandler THROW_UNSUPPORTED_INVOKER = new InvocationHandler() {\r\n         @Override\r\n         public Object invoke(Object proxy, Method method, Object[] args) {\r\n@@ -77,7 +73,7 @@ public static Proxy getProxy(Class<?>... ics) {\n      * @return Proxy instance.\r\n      */\r\n     public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\r\n-        if (ics.length > 65535) {\r\n+        if (ics.length > Constants.MAX_PROXY_COUNT) {\r\n             throw new IllegalArgumentException(\"interface limit exceeded\");\r\n         }\r\n \r\n@@ -107,11 +103,7 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n         // get cache by class loader.\r\n         Map<String, Object> cache;\r\n         synchronized (ProxyCacheMap) {\r\n-            cache = ProxyCacheMap.get(cl);\r\n-            if (cache == null) {\r\n-                cache = new HashMap<String, Object>();\r\n-                ProxyCacheMap.put(cl, cache);\r\n-            }\r\n+            cache = ProxyCacheMap.computeIfAbsent(cl, k -> new HashMap<>());\r\n         }\r\n \r\n         Proxy proxy = null;\r\n@@ -144,8 +136,8 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n         try {\r\n             ccp = ClassGenerator.newInstance(cl);\r\n \r\n-            Set<String> worked = new HashSet<String>();\r\n-            List<Method> methods = new ArrayList<Method>();\r\n+            Set<String> worked = new HashSet<>();\r\n+            List<Method> methods = new ArrayList<>();\r\n \r\n             for (int i = 0; i < ics.length; i++) {\r\n                 if (!Modifier.isPublic(ics[i].getModifiers())) {\r\n@@ -175,7 +167,7 @@ public static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n                     for (int j = 0; j < pts.length; j++) {\r\n                         code.append(\" args[\").append(j).append(\"] = ($w)$\").append(j + 1).append(\";\");\r\n                     }\r\n-                    code.append(\" Object ret = handler.invoke(this, methods[\" + ix + \"], args);\");\r\n+                    code.append(\" Object ret = handler.invoke(this, methods[\").append(ix).append(\"], args);\");\r\n                     if (!Void.TYPE.equals(rt)) {\r\n                         code.append(\" return \").append(asArgument(rt, \"ret\")).append(\";\");\r\n                     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Proxy.java",
                "sha": "e72faae2cb16d65867d75b609d52bf24a4c0e837",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 40,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "patch": "@@ -137,10 +137,10 @@ private static Wrapper makeWrapper(Class<?> c) {\n         c2.append(name).append(\" w; try{ w = ((\").append(name).append(\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\");\r\n         c3.append(name).append(\" w; try{ w = ((\").append(name).append(\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\");\r\n \r\n-        Map<String, Class<?>> pts = new HashMap<String, Class<?>>(); // <property name, property types>\r\n-        Map<String, Method> ms = new LinkedHashMap<String, Method>(); // <method desc, Method instance>\r\n-        List<String> mns = new ArrayList<String>(); // method names.\r\n-        List<String> dmns = new ArrayList<String>(); // declaring method names.\r\n+        Map<String, Class<?>> pts = new HashMap<>(); // <property name, property types>\r\n+        Map<String, Method> ms = new LinkedHashMap<>(); // <method desc, Method instance>\r\n+        List<String> mns = new ArrayList<>(); // method names.\r\n+        List<String> dmns = new ArrayList<>(); // declaring method names.\r\n \r\n         // get all public field.\r\n         for (Field f : c.getFields()) {\r\n@@ -160,51 +160,49 @@ private static Wrapper makeWrapper(Class<?> c) {\n         boolean hasMethod = hasMethods(methods);\r\n         if (hasMethod) {\r\n             c3.append(\" try{\");\r\n-        }\r\n-        for (Method m : methods) {\r\n-            if (m.getDeclaringClass() == Object.class) //ignore Object's method.\r\n-            {\r\n-                continue;\r\n-            }\r\n+            for (Method m : methods) {\r\n+                //ignore Object's method.\r\n+                if (m.getDeclaringClass() == Object.class) {\r\n+                    continue;\r\n+                }\r\n \r\n-            String mn = m.getName();\r\n-            c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\r\n-            int len = m.getParameterTypes().length;\r\n-            c3.append(\" && \").append(\" $3.length == \").append(len);\r\n+                String mn = m.getName();\r\n+                c3.append(\" if( \\\"\").append(mn).append(\"\\\".equals( $2 ) \");\r\n+                int len = m.getParameterTypes().length;\r\n+                c3.append(\" && \").append(\" $3.length == \").append(len);\r\n \r\n-            boolean override = false;\r\n-            for (Method m2 : methods) {\r\n-                if (m != m2 && m.getName().equals(m2.getName())) {\r\n-                    override = true;\r\n-                    break;\r\n+                boolean override = false;\r\n+                for (Method m2 : methods) {\r\n+                    if (m != m2 && m.getName().equals(m2.getName())) {\r\n+                        override = true;\r\n+                        break;\r\n+                    }\r\n                 }\r\n-            }\r\n-            if (override) {\r\n-                if (len > 0) {\r\n-                    for (int l = 0; l < len; l++) {\r\n-                        c3.append(\" && \").append(\" $3[\").append(l).append(\"].getName().equals(\\\"\")\r\n-                                .append(m.getParameterTypes()[l].getName()).append(\"\\\")\");\r\n+                if (override) {\r\n+                    if (len > 0) {\r\n+                        for (int l = 0; l < len; l++) {\r\n+                            c3.append(\" && \").append(\" $3[\").append(l).append(\"].getName().equals(\\\"\")\r\n+                                    .append(m.getParameterTypes()[l].getName()).append(\"\\\")\");\r\n+                        }\r\n                     }\r\n                 }\r\n-            }\r\n \r\n-            c3.append(\" ) { \");\r\n+                c3.append(\" ) { \");\r\n \r\n-            if (m.getReturnType() == Void.TYPE) {\r\n-                c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(), \"$4\")).append(\");\").append(\" return null;\");\r\n-            } else {\r\n-                c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(), \"$4\")).append(\");\");\r\n-            }\r\n+                if (m.getReturnType() == Void.TYPE) {\r\n+                    c3.append(\" w.\").append(mn).append('(').append(args(m.getParameterTypes(), \"$4\")).append(\");\").append(\" return null;\");\r\n+                } else {\r\n+                    c3.append(\" return ($w)w.\").append(mn).append('(').append(args(m.getParameterTypes(), \"$4\")).append(\");\");\r\n+                }\r\n \r\n-            c3.append(\" }\");\r\n+                c3.append(\" }\");\r\n \r\n-            mns.add(mn);\r\n-            if (m.getDeclaringClass() == c) {\r\n-                dmns.add(mn);\r\n+                mns.add(mn);\r\n+                if (m.getDeclaringClass() == c) {\r\n+                    dmns.add(mn);\r\n+                }\r\n+                ms.put(ReflectUtils.getDesc(m), m);\r\n             }\r\n-            ms.put(ReflectUtils.getDesc(m), m);\r\n-        }\r\n-        if (hasMethod) {\r\n             c3.append(\" } catch(Throwable e) { \");\r\n             c3.append(\"     throw new java.lang.reflect.InvocationTargetException(e); \");\r\n             c3.append(\" }\");\r\n@@ -216,7 +214,7 @@ private static Wrapper makeWrapper(Class<?> c) {\n         Matcher matcher;\r\n         for (Map.Entry<String, Method> entry : ms.entrySet()) {\r\n             String md = entry.getKey();\r\n-            Method method = (Method) entry.getValue();\r\n+            Method method = entry.getValue();\r\n             if ((matcher = ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {\r\n                 String pn = propertyName(matcher.group(1));\r\n                 c2.append(\" if( $2.equals(\\\"\").append(pn).append(\"\\\") ){ return ($w)w.\").append(method.getName()).append(\"(); }\");\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/bytecode/Wrapper.java",
                "sha": "6d3f42bd8fe776f6ded0972a1de6245a55a02f4b",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 6,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java",
                "patch": "@@ -16,6 +16,8 @@\n  */\r\n package org.apache.dubbo.common.compiler.support;\r\n \r\n+import org.apache.dubbo.common.utils.StringUtils;\r\n+\r\n import java.io.PrintWriter;\r\n import java.io.StringWriter;\r\n import java.lang.reflect.Array;\r\n@@ -56,12 +58,12 @@ public static Object newInstance(String name) {\n \r\n     public static Class<?> forName(String[] packages, String className) {\r\n         try {\r\n-            return _forName(className);\r\n+            return classForName(className);\r\n         } catch (ClassNotFoundException e) {\r\n             if (packages != null && packages.length > 0) {\r\n                 for (String pkg : packages) {\r\n                     try {\r\n-                        return _forName(pkg + \".\" + className);\r\n+                        return classForName(pkg + \".\" + className);\r\n                     } catch (ClassNotFoundException e2) {\r\n                     }\r\n                 }\r\n@@ -72,14 +74,14 @@ public static Object newInstance(String name) {\n \r\n     public static Class<?> forName(String className) {\r\n         try {\r\n-            return _forName(className);\r\n+            return classForName(className);\r\n         } catch (ClassNotFoundException e) {\r\n             throw new IllegalStateException(e.getMessage(), e);\r\n         }\r\n     }\r\n \r\n-    public static Class<?> _forName(String className) throws ClassNotFoundException {\r\n-        switch(className){\r\n+    public static Class<?> classForName(String className) throws ClassNotFoundException {\r\n+        switch (className) {\r\n             case \"boolean\":\r\n                 return boolean.class;\r\n             case \"byte\":\r\n@@ -112,6 +114,7 @@ public static Object newInstance(String name) {\n                 return float[].class;\r\n             case \"double[]\":\r\n                 return double[].class;\r\n+            default:\r\n         }\r\n         try {\r\n             return arrayForName(className);\r\n@@ -290,7 +293,7 @@ public static URI toURI(String name) {\n     }\r\n \r\n     public static boolean isBeforeJava5(String javaVersion) {\r\n-        return (javaVersion == null || javaVersion.length() == 0 || \"1.0\".equals(javaVersion)\r\n+        return (StringUtils.isEmpty(javaVersion) || \"1.0\".equals(javaVersion)\r\n                 || \"1.1\".equals(javaVersion) || \"1.2\".equals(javaVersion)\r\n                 || \"1.3\".equals(javaVersion) || \"1.4\".equals(javaVersion));\r\n     }\r\n@@ -428,5 +431,17 @@ public static String getInitCode(Class<?> type) {\n         }\r\n         return map;\r\n     }\r\n+    \r\n+    /**\r\n+     * get simple class name from qualified class name\r\n+     */\r\n+    public static String getSimpleClassName(String qualifiedName) {\r\n+        if (null == qualifiedName) {\r\n+            return null;\r\n+        }\r\n+        \r\n+        int i = qualifiedName.lastIndexOf('.');\r\n+        return i < 0 ? qualifiedName : qualifiedName.substring(i + 1);\r\n+    }\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/ClassUtils.java",
                "sha": "365cb7f36db7926d977b67896ab31d98c61f4f8f",
                "status": "modified"
            },
            {
                "additions": 174,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/CtClassBuilder.java",
                "changes": 174,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/CtClassBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/CtClassBuilder.java",
                "patch": "@@ -0,0 +1,174 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.dubbo.common.compiler.support;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import javassist.CannotCompileException;\r\n+import javassist.ClassPool;\r\n+import javassist.CtClass;\r\n+import javassist.CtField;\r\n+import javassist.CtNewConstructor;\r\n+import javassist.CtNewMethod;\r\n+import javassist.LoaderClassPath;\r\n+import javassist.NotFoundException;\r\n+\r\n+/**\r\n+ * CtClassBuilder is builder for CtClass\r\n+ * <p>\r\n+ * contains all the information, including:\r\n+ * <p>\r\n+ * class name, imported packages, super class name, implemented interfaces, constructors, fields, methods.\r\n+ */\r\n+public class CtClassBuilder {\r\n+\r\n+    private String className;\r\n+\r\n+    private String superClassName = \"java.lang.Object\";\r\n+\r\n+    private List<String> imports = new ArrayList<>();\r\n+\r\n+    private Map<String, String> fullNames = new HashMap<>();\r\n+\r\n+    private List<String> ifaces = new ArrayList<>();\r\n+\r\n+    private List<String> constructors = new ArrayList<>();\r\n+\r\n+    private List<String> fields = new ArrayList<>();\r\n+\r\n+    private List<String> methods = new ArrayList<>();\r\n+\r\n+    public String getClassName() {\r\n+        return className;\r\n+    }\r\n+\r\n+    public void setClassName(String className) {\r\n+        this.className = className;\r\n+    }\r\n+\r\n+    public String getSuperClassName() {\r\n+        return superClassName;\r\n+    }\r\n+\r\n+    public void setSuperClassName(String superClassName) {\r\n+        this.superClassName = getQualifiedClassName(superClassName);\r\n+    }\r\n+\r\n+    public List<String> getImports() {\r\n+        return imports;\r\n+    }\r\n+\r\n+    public void addImports(String pkg) {\r\n+        int pi = pkg.lastIndexOf('.');\r\n+        if (pi > 0) {\r\n+            String pkgName = pkg.substring(0, pi);\r\n+            this.imports.add(pkgName);\r\n+            if (!pkg.endsWith(\".*\")) {\r\n+                fullNames.put(pkg.substring(pi + 1), pkg);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public List<String> getInterfaces() {\r\n+        return ifaces;\r\n+    }\r\n+\r\n+    public void addInterface(String iface) {\r\n+        this.ifaces.add(getQualifiedClassName(iface));\r\n+    }\r\n+\r\n+    public List<String> getConstructors() {\r\n+        return constructors;\r\n+    }\r\n+\r\n+    public void addConstructor(String constructor) {\r\n+        this.constructors.add(constructor);\r\n+    }\r\n+\r\n+    public List<String> getFields() {\r\n+        return fields;\r\n+    }\r\n+\r\n+    public void addField(String field) {\r\n+        this.fields.add(field);\r\n+    }\r\n+\r\n+    public List<String> getMethods() {\r\n+        return methods;\r\n+    }\r\n+\r\n+    public void addMethod(String method) {\r\n+        this.methods.add(method);\r\n+    }\r\n+\r\n+    /**\r\n+     * get full qualified class name\r\n+     * \r\n+     * @param className super class name, maybe qualified or not\r\n+     */\r\n+    protected String getQualifiedClassName(String className) {\r\n+        if (className.contains(\".\")) {\r\n+            return className;\r\n+        }\r\n+\r\n+        if (fullNames.containsKey(className)) {\r\n+            return fullNames.get(className);\r\n+        }\r\n+\r\n+        return ClassUtils.forName(imports.toArray(new String[0]), className).getName();\r\n+    }\r\n+\r\n+    /**\r\n+     * build CtClass object\r\n+     */\r\n+    public CtClass build(ClassLoader classLoader) throws NotFoundException, CannotCompileException {\r\n+        ClassPool pool = new ClassPool(true);\r\n+        pool.appendClassPath(new LoaderClassPath(classLoader));\r\n+        \r\n+        // create class\r\n+        CtClass ctClass = pool.makeClass(className, pool.get(superClassName));\r\n+\r\n+        // add imported packages\r\n+        imports.stream().forEach(pool::importPackage);\r\n+\r\n+        // add implemented interfaces\r\n+        for (String iface : ifaces) {\r\n+            ctClass.addInterface(pool.get(iface));\r\n+        }\r\n+\r\n+        // add constructors\r\n+        for (String constructor : constructors) {\r\n+            ctClass.addConstructor(CtNewConstructor.make(constructor, ctClass));\r\n+        }\r\n+\r\n+        // add fields\r\n+        for (String field : fields) {\r\n+            ctClass.addField(CtField.make(field, ctClass));\r\n+        }\r\n+\r\n+        // add methods\r\n+        for (String method : methods) {\r\n+            ctClass.addMethod(CtNewMethod.make(method, ctClass));\r\n+        }\r\n+\r\n+        return ctClass;\r\n+    }\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/CtClassBuilder.java",
                "sha": "0dc8f8813851bc4c5e9ea1b1a0dd5ccf8088f323",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JavassistCompiler.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JavassistCompiler.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 68,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JavassistCompiler.java",
                "patch": "@@ -18,17 +18,9 @@\n \r\n import org.apache.dubbo.common.utils.ClassHelper;\r\n \r\n-import javassist.ClassPool;\r\n import javassist.CtClass;\r\n-import javassist.CtField;\r\n-import javassist.CtNewConstructor;\r\n-import javassist.CtNewMethod;\r\n-import javassist.LoaderClassPath;\r\n \r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n+import java.util.Arrays;\r\n import java.util.regex.Matcher;\r\n import java.util.regex.Pattern;\r\n \r\n@@ -49,77 +41,46 @@\n \r\n     @Override\r\n     public Class<?> doCompile(String name, String source) throws Throwable {\r\n-        int i = name.lastIndexOf('.');\r\n-        String className = i < 0 ? name : name.substring(i + 1);\r\n-        ClassPool pool = new ClassPool(true);\r\n-        pool.appendClassPath(new LoaderClassPath(ClassHelper.getCallerClassLoader(getClass())));\r\n+        CtClassBuilder builder = new CtClassBuilder();\r\n+        builder.setClassName(name);\r\n+\r\n+        // process imported classes\r\n         Matcher matcher = IMPORT_PATTERN.matcher(source);\r\n-        List<String> importPackages = new ArrayList<String>();\r\n-        Map<String, String> fullNames = new HashMap<String, String>();\r\n         while (matcher.find()) {\r\n-            String pkg = matcher.group(1);\r\n-            if (pkg.endsWith(\".*\")) {\r\n-                String pkgName = pkg.substring(0, pkg.length() - 2);\r\n-                pool.importPackage(pkgName);\r\n-                importPackages.add(pkgName);\r\n-            } else {\r\n-                int pi = pkg.lastIndexOf('.');\r\n-                if (pi > 0) {\r\n-                    String pkgName = pkg.substring(0, pi);\r\n-                    pool.importPackage(pkgName);\r\n-                    importPackages.add(pkgName);\r\n-                    fullNames.put(pkg.substring(pi + 1), pkg);\r\n-                }\r\n-            }\r\n+            builder.addImports(matcher.group(1).trim());\r\n         }\r\n-        String[] packages = importPackages.toArray(new String[0]);\r\n+        \r\n+        // process extended super class\r\n         matcher = EXTENDS_PATTERN.matcher(source);\r\n-        CtClass cls;\r\n         if (matcher.find()) {\r\n-            String extend = matcher.group(1).trim();\r\n-            String extendClass;\r\n-            if (extend.contains(\".\")) {\r\n-                extendClass = extend;\r\n-            } else if (fullNames.containsKey(extend)) {\r\n-                extendClass = fullNames.get(extend);\r\n-            } else {\r\n-                extendClass = ClassUtils.forName(packages, extend).getName();\r\n-            }\r\n-            cls = pool.makeClass(name, pool.get(extendClass));\r\n-        } else {\r\n-            cls = pool.makeClass(name);\r\n+            builder.setSuperClassName(matcher.group(1).trim());\r\n         }\r\n+        \r\n+        // process implemented interfaces\r\n         matcher = IMPLEMENTS_PATTERN.matcher(source);\r\n         if (matcher.find()) {\r\n             String[] ifaces = matcher.group(1).trim().split(\"\\\\,\");\r\n-            for (String iface : ifaces) {\r\n-                iface = iface.trim();\r\n-                String ifaceClass;\r\n-                if (iface.contains(\".\")) {\r\n-                    ifaceClass = iface;\r\n-                } else if (fullNames.containsKey(iface)) {\r\n-                    ifaceClass = fullNames.get(iface);\r\n-                } else {\r\n-                    ifaceClass = ClassUtils.forName(packages, iface).getName();\r\n-                }\r\n-                cls.addInterface(pool.get(ifaceClass));\r\n-            }\r\n+            Arrays.stream(ifaces).forEach(i -> builder.addInterface(i.trim()));\r\n         }\r\n-        String body = source.substring(source.indexOf(\"{\") + 1, source.length() - 1);\r\n+        \r\n+        // process constructors, fields, methods\r\n+        String body = source.substring(source.indexOf('{') + 1, source.length() - 1);\r\n         String[] methods = METHODS_PATTERN.split(body);\r\n-        for (String method : methods) {\r\n-            method = method.trim();\r\n-            if (method.length() > 0) {\r\n-                if (method.startsWith(className)) {\r\n-                    cls.addConstructor(CtNewConstructor.make(\"public \" + method, cls));\r\n-                } else if (FIELD_PATTERN.matcher(method).matches()) {\r\n-                    cls.addField(CtField.make(\"private \" + method, cls));\r\n-                } else {\r\n-                    cls.addMethod(CtNewMethod.make(\"public \" + method, cls));\r\n-                }\r\n+        String className = ClassUtils.getSimpleClassName(name);\r\n+        Arrays.stream(methods).map(String::trim).filter(m -> !m.isEmpty()).forEach(method-> {\r\n+            if (method.startsWith(className)) {\r\n+                builder.addConstructor(\"public \" + method);\r\n+            } else if (FIELD_PATTERN.matcher(method).matches()) {\r\n+                builder.addField(\"private \" + method);\r\n+            } else {\r\n+                builder.addMethod(\"public \" + method);\r\n             }\r\n-        }\r\n-        return cls.toClass(ClassHelper.getCallerClassLoader(getClass()), JavassistCompiler.class.getProtectionDomain());\r\n+        });\r\n+        \r\n+        // compile\r\n+        ClassLoader classLoader = ClassHelper.getCallerClassLoader(getClass());\r\n+        CtClass cls = builder.build(classLoader);\r\n+        return cls.toClass(classLoader, JavassistCompiler.class.getProtectionDomain());\r\n     }\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JavassistCompiler.java",
                "sha": "11f76b1e6bd97cce3cc98b8791594d56f5d45fe7",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/02cca0976f68db240867c7016d1a58b35cfd4a4b/dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/ExecutionList.java",
                "changes": 180,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/ExecutionList.java?ref=02cca0976f68db240867c7016d1a58b35cfd4a4b",
                "deletions": 180,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/ExecutionList.java",
                "patch": "@@ -1,180 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.dubbo.common.concurrent;\n-\n-import org.apache.dubbo.common.logger.Logger;\n-import org.apache.dubbo.common.logger.LoggerFactory;\n-import org.apache.dubbo.common.utils.NamedThreadFactory;\n-\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.SynchronousQueue;\n-import java.util.concurrent.ThreadPoolExecutor;\n-import java.util.concurrent.TimeUnit;\n-\n-/**\n- * <p>A list of listeners, each with an associated {@code Executor}, that\n- * guarantees that every {@code Runnable} that is {@linkplain #add added} will\n- * be executed after {@link #execute()} is called. Any {@code Runnable} added\n- * after the call to {@code execute} is still guaranteed to execute. There is no\n- * guarantee, however, that listeners will be executed in the order that they\n- * are added.\n- * <p>\n- * <p>Exceptions thrown by a listener will be propagated up to the executor.\n- * Any exception thrown during {@code Executor.execute} (e.g., a {@code\n- * RejectedExecutionException} or an exception thrown by {@linkplain\n- * MoreExecutors#sameThreadExecutor inline execution}) will be caught and\n- * logged.\n- */\n-public final class ExecutionList {\n-    // Logger to log exceptions caught when running runnables.\n-    static final Logger logger = LoggerFactory.getLogger(ExecutionList.class.getName());\n-\n-    /**\n-     * The runnable, executor pairs to execute.  This acts as a stack threaded through the\n-     * {@link RunnableExecutorPair#next} field.\n-     */\n-    private RunnableExecutorPair runnables;\n-\n-    private boolean executed;\n-\n-    private static final Executor DEFAULT_EXECUTOR = new ThreadPoolExecutor(1, 10, 60000L, TimeUnit.MILLISECONDS, new SynchronousQueue<Runnable>(), new NamedThreadFactory(\"DubboFutureCallbackDefault\", true));\n-\n-    /**\n-     * Creates a new, empty {@link ExecutionList}.\n-     */\n-    public ExecutionList() {\n-    }\n-\n-    /**\n-     * Adds the {@code Runnable} and accompanying {@code Executor} to the list of\n-     * listeners to execute. If execution has already begun, the listener is\n-     * executed immediately.\n-     * <p>\n-     * <p>Note: For fast, lightweight listeners that would be safe to execute in\n-     * any thread, consider {@link MoreExecutors#sameThreadExecutor}. For heavier\n-     * listeners, {@code sameThreadExecutor()} carries some caveats: First, the\n-     * thread that the listener runs in depends on whether the {@code\n-     * ExecutionList} has been executed at the time it is added. In particular,\n-     * listeners may run in the thread that calls {@code add}. Second, the thread\n-     * that calls {@link #execute} may be an internal implementation thread, such\n-     * as an RPC network thread, and {@code sameThreadExecutor()} listeners may\n-     * run in this thread. Finally, during the execution of a {@code\n-     * sameThreadExecutor} listener, all other registered but unexecuted\n-     * listeners are prevented from running, even if those listeners are to run\n-     * in other executors.\n-     */\n-    public void add(Runnable runnable, Executor executor) {\n-        // Fail fast on a null.  We throw NPE here because the contract of\n-        // Executor states that it throws NPE on null listener, so we propagate\n-        // that contract up into the add method as well.\n-        if (runnable == null) {\n-            throw new NullPointerException(\"Runnable can not be null!\");\n-        }\n-        if (executor == null) {\n-            logger.info(\"Executor for listenablefuture is null, will use default executor!\");\n-            executor = DEFAULT_EXECUTOR;\n-        }\n-        // Lock while we check state.  We must maintain the lock while adding the\n-        // new pair so that another thread can't run the list out from under us.\n-        // We only add to the list if we have not yet started execution.\n-        synchronized (this) {\n-            if (!executed) {\n-                runnables = new RunnableExecutorPair(runnable, executor, runnables);\n-                return;\n-            }\n-        }\n-        // Execute the runnable immediately. Because of scheduling this may end up\n-        // getting called before some of the previously added runnables, but we're\n-        // OK with that.  If we want to change the contract to guarantee ordering\n-        // among runnables we'd have to modify the logic here to allow it.\n-        executeListener(runnable, executor);\n-    }\n-\n-    /**\n-     * Runs this execution list, executing all existing pairs in the order they\n-     * were added. However, note that listeners added after this point may be\n-     * executed before those previously added, and note that the execution order\n-     * of all listeners is ultimately chosen by the implementations of the\n-     * supplied executors.\n-     * <p>\n-     * <p>This method is idempotent. Calling it several times in parallel is\n-     * semantically equivalent to calling it exactly once.\n-     *\n-     * @since 10.0 (present in 1.0 as {@code run})\n-     */\n-    public void execute() {\n-        // Lock while we update our state so the add method above will finish adding\n-        // any listeners before we start to run them.\n-        RunnableExecutorPair list;\n-        synchronized (this) {\n-            if (executed) {\n-                return;\n-            }\n-            executed = true;\n-            list = runnables;\n-            runnables = null;  // allow GC to free listeners even if this stays around for a while.\n-        }\n-        // If we succeeded then list holds all the runnables we to execute.  The pairs in the stack are\n-        // in the opposite order from how they were added so we need to reverse the list to fulfill our\n-        // contract.\n-        // This is somewhat annoying, but turns out to be very fast in practice.  Alternatively, we\n-        // could drop the contract on the method that enforces this queue like behavior since depending\n-        // on it is likely to be a bug anyway.\n-\n-        // N.B. All writes to the list and the next pointers must have happened before the above\n-        // synchronized block, so we can iterate the list without the lock held here.\n-        RunnableExecutorPair reversedList = null;\n-        while (list != null) {\n-            RunnableExecutorPair tmp = list;\n-            list = list.next;\n-            tmp.next = reversedList;\n-            reversedList = tmp;\n-        }\n-        while (reversedList != null) {\n-            executeListener(reversedList.runnable, reversedList.executor);\n-            reversedList = reversedList.next;\n-        }\n-    }\n-\n-    /**\n-     * Submits the given runnable to the given {@link Executor} catching and logging all\n-     * {@linkplain RuntimeException runtime exceptions} thrown by the executor.\n-     */\n-    private static void executeListener(Runnable runnable, Executor executor) {\n-        try {\n-            executor.execute(runnable);\n-        } catch (RuntimeException e) {\n-            // Log it and keep going, bad runnable and/or executor.  Don't\n-            // punish the other runnables if we're given a bad one.  We only\n-            // catch RuntimeException because we want Errors to propagate up.\n-            logger.error(\"RuntimeException while executing runnable \"\n-                    + runnable + \" with executor \" + executor, e);\n-        }\n-    }\n-\n-    private static final class RunnableExecutorPair {\n-        final Runnable runnable;\n-        final Executor executor;\n-        RunnableExecutorPair next;\n-\n-        RunnableExecutorPair(Runnable runnable, Executor executor, RunnableExecutorPair next) {\n-            this.runnable = runnable;\n-            this.executor = executor;\n-            this.next = next;\n-        }\n-    }\n-}",
                "raw_url": "https://github.com/apache/dubbo/raw/02cca0976f68db240867c7016d1a58b35cfd4a4b/dubbo-common/src/main/java/org/apache/dubbo/common/concurrent/ExecutionList.java",
                "sha": "c88626cbe6a95f2c6308db657dd844725f26c748",
                "status": "removed"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java",
                "patch": "@@ -38,7 +38,7 @@\n     public static int getServerShutdownTimeout() {\n         int timeout = Constants.DEFAULT_SERVER_SHUTDOWN_TIMEOUT;\n         Configuration configuration = Environment.getInstance().getConfiguration();\n-        String value = configuration.getString(Constants.SHUTDOWN_WAIT_KEY);\n+        String value = StringUtils.trim(configuration.getString(Constants.SHUTDOWN_WAIT_KEY));\n \n         if (value != null && value.length() > 0) {\n             try {\n@@ -47,7 +47,7 @@ public static int getServerShutdownTimeout() {\n                 // ignore\n             }\n         } else {\n-            value = configuration.getString(Constants.SHUTDOWN_WAIT_SECONDS_KEY);\n+            value = StringUtils.trim(configuration.getString(Constants.SHUTDOWN_WAIT_SECONDS_KEY));\n             if (value != null && value.length() > 0) {\n                 try {\n                     timeout = Integer.parseInt(value) * 1000;\n@@ -64,7 +64,7 @@ public static String getProperty(String property) {\n     }\n \n     public static String getProperty(String property, String defaultValue) {\n-        return Environment.getInstance().getConfiguration().getString(property, defaultValue);\n+        return StringUtils.trim(Environment.getInstance().getConfiguration().getString(property, defaultValue));\n     }\n \n     public static Map<String, String> parseProperties(String content) throws IOException {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/config/ConfigurationUtils.java",
                "sha": "e2431f20d2495f9402cc3f973d9f03cf2f88c89b",
                "status": "modified"
            },
            {
                "additions": 381,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGenerator.java",
                "changes": 381,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGenerator.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGenerator.java",
                "patch": "@@ -0,0 +1,381 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.dubbo.common.extension;\r\n+\r\n+import java.lang.reflect.Method;\r\n+import java.lang.reflect.Modifier;\r\n+import java.lang.reflect.Parameter;\r\n+import java.util.Arrays;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.IntStream;\r\n+\r\n+import org.apache.dubbo.common.URL;\r\n+import org.apache.dubbo.common.logger.Logger;\r\n+import org.apache.dubbo.common.logger.LoggerFactory;\r\n+import org.apache.dubbo.common.utils.StringUtils;\r\n+\r\n+/**\r\n+ * Code generator for Adaptive class\r\n+ */\r\n+public class AdaptiveClassCodeGenerator {\r\n+    \r\n+    private static final Logger logger = LoggerFactory.getLogger(AdaptiveClassCodeGenerator.class);\r\n+\r\n+    private static final String CLASSNAME_INVOCATION = \"org.apache.dubbo.rpc.Invocation\";\r\n+    \r\n+    private static final String CODE_PACKAGE = \"package %s;\\n\";\r\n+    \r\n+    private static final String CODE_IMPORTS = \"import %s;\\n\";\r\n+    \r\n+    private static final String CODE_CLASS_DECLARATION = \"public class %s$Adaptive implements %s {\\n\";\r\n+    \r\n+    private static final String CODE_METHOD_DECLARATION = \"public %s %s(%s) %s {\\n%s}\\n\";\r\n+    \r\n+    private static final String CODE_METHOD_ARGUMENT = \"%s arg%d\";\r\n+    \r\n+    private static final String CODE_METHOD_THROWS = \"throws %s\";\r\n+    \r\n+    private static final String CODE_UNSUPPORTED = \"throw new UnsupportedOperationException(\\\"The method %s of interface %s is not adaptive method!\\\");\\n\";\r\n+    \r\n+    private static final String CODE_URL_NULL_CHECK = \"if (arg%d == null) throw new IllegalArgumentException(\\\"url == null\\\");\\n%s url = arg%d;\\n\";\r\n+    \r\n+    private static final String CODE_EXT_NAME_ASSIGNMENT = \"String extName = %s;\\n\";\r\n+    \r\n+    private static final String CODE_EXT_NAME_NULL_CHECK = \"if(extName == null) \"\r\n+                    + \"throw new IllegalStateException(\\\"Failed to get extension (%s) name from url (\\\" + url.toString() + \\\") use keys(%s)\\\");\\n\";\r\n+    \r\n+    private static final String CODE_INVOCATION_ARGUMENT_NULL_CHECK = \"if (arg%d == null) throw new IllegalArgumentException(\\\"invocation == null\\\"); \"\r\n+                    + \"String methodName = arg%d.getMethodName();\\n\";\r\n+    \r\n+    \r\n+    private static final String CODE_EXTENSION_ASSIGNMENT = \"%s extension = (%<s)%s.getExtensionLoader(%s.class).getExtension(extName);\\n\";\r\n+    \r\n+    private final Class<?> type;\r\n+    \r\n+    private String defaultExtName;\r\n+    \r\n+    public AdaptiveClassCodeGenerator(Class<?> type, String defaultExtName) {\r\n+        this.type = type;\r\n+        this.defaultExtName = defaultExtName;\r\n+    }\r\n+    \r\n+    /**\r\n+     * test if given type has at least one method annotated with <code>SPI</code>\r\n+     */\r\n+    private boolean hasAdaptiveMethod() {\r\n+        return Arrays.stream(type.getMethods()).anyMatch(m -> m.isAnnotationPresent(Adaptive.class));\r\n+    }\r\n+    \r\n+    /**\r\n+     * generate and return class code\r\n+     */\r\n+    public String generate() {\r\n+        // no need to generate adaptive class since there's no adaptive method found.\r\n+        if (!hasAdaptiveMethod()) {\r\n+            throw new IllegalStateException(\"No adaptive method exist on extension \" + type.getName() + \", refuse to create the adaptive class!\");\r\n+        }\r\n+\r\n+        StringBuilder code = new StringBuilder();\r\n+        code.append(generatePackageInfo());\r\n+        code.append(generateImports());\r\n+        code.append(generateClassDeclaration());\r\n+        \r\n+        Method[] methods = type.getMethods();\r\n+        for (Method method : methods) {\r\n+            code.append(generateMethod(method));\r\n+        }\r\n+        code.append(\"}\");\r\n+        \r\n+        if (logger.isDebugEnabled()) {\r\n+            logger.debug(code.toString());\r\n+        }\r\n+        return code.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * generate package info\r\n+     */\r\n+    private String generatePackageInfo() {\r\n+        return String.format(CODE_PACKAGE, type.getPackage().getName());\r\n+    }\r\n+\r\n+    /**\r\n+     * generate imports\r\n+     */\r\n+    private String generateImports() {\r\n+        return String.format(CODE_IMPORTS, ExtensionLoader.class.getName());\r\n+    }\r\n+\r\n+    /**\r\n+     * generate class declaration\r\n+     */\r\n+    private String generateClassDeclaration() {\r\n+        return String.format(CODE_CLASS_DECLARATION, type.getSimpleName(), type.getCanonicalName());\r\n+    }\r\n+    \r\n+    /**\r\n+     * generate method not annotated with Adaptive with throwing unsupported exception \r\n+     */\r\n+    private String generateUnsupported(Method method) {\r\n+        return String.format(CODE_UNSUPPORTED, method, type.getName());\r\n+    }\r\n+    \r\n+    /**\r\n+     * get index of parameter with type URL\r\n+     */\r\n+    private int getUrlTypeIndex(Method method) {            \r\n+        int urlTypeIndex = -1;\r\n+        Class<?>[] pts = method.getParameterTypes();\r\n+        for (int i = 0; i < pts.length; ++i) {\r\n+            if (pts[i].equals(URL.class)) {\r\n+                urlTypeIndex = i;\r\n+                break;\r\n+            }\r\n+        }\r\n+        return urlTypeIndex;\r\n+    }\r\n+    \r\n+    /**\r\n+     * generate method declaration\r\n+     */\r\n+    private String generateMethod(Method method) {\r\n+        String methodReturnType = method.getReturnType().getCanonicalName();\r\n+        String methodName = method.getName();\r\n+        String methodContent = generateMethodContent(method);\r\n+        String methodArgs = generateMethodArguments(method);\r\n+        String methodThrows = generateMethodThrows(method);\r\n+        return String.format(CODE_METHOD_DECLARATION, methodReturnType, methodName, methodArgs, methodThrows, methodContent);\r\n+    }\r\n+\r\n+    /**\r\n+     * generate method arguments\r\n+     */\r\n+    private String generateMethodArguments(Method method) {\r\n+        Class<?>[] pts = method.getParameterTypes();\r\n+        return IntStream.range(0, pts.length)\r\n+                        .mapToObj(i -> String.format(CODE_METHOD_ARGUMENT, pts[i].getCanonicalName(), i))\r\n+                        .collect(Collectors.joining(\", \"));\r\n+    }\r\n+    \r\n+    /**\r\n+     * generate method throws \r\n+     */\r\n+    private String generateMethodThrows(Method method) {\r\n+        Class<?>[] ets = method.getExceptionTypes();\r\n+        if (ets.length > 0) {\r\n+            String list = Arrays.stream(ets).map(Class::getCanonicalName).collect(Collectors.joining(\", \"));\r\n+            return String.format(CODE_METHOD_THROWS, list);\r\n+        } else {\r\n+            return \"\";\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * generate method URL argument null check \r\n+     */\r\n+    private String generateUrlNullCheck(int index) {\r\n+        return String.format(CODE_URL_NULL_CHECK, index, URL.class.getName(), index);\r\n+    }\r\n+    \r\n+    /**\r\n+     * generate method content\r\n+     */\r\n+    private String generateMethodContent(Method method) {\r\n+        Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class);\r\n+        StringBuilder code = new StringBuilder(512);\r\n+        if (adaptiveAnnotation == null) {\r\n+            return generateUnsupported(method);\r\n+        } else {\r\n+            int urlTypeIndex = getUrlTypeIndex(method);\r\n+            \r\n+            // found parameter in URL type\r\n+            if (urlTypeIndex != -1) {\r\n+                // Null Point check\r\n+                code.append(generateUrlNullCheck(urlTypeIndex));\r\n+            } else {\r\n+                // did not find parameter in URL type\r\n+                code.append(generateUrlAssignmentIndirectly(method));\r\n+            }\r\n+\r\n+            String[] value = getMethodAdaptiveValue(adaptiveAnnotation);\r\n+\r\n+            boolean hasInvocation = hasInvocationArgument(method);\r\n+            \r\n+            code.append(generateInvocationArgumentNullCheck(method));\r\n+            \r\n+            code.append(generateExtNameAssignment(value, hasInvocation));\r\n+            // check extName == null?\r\n+            code.append(generateExtNameNullCheck(value));\r\n+            \r\n+            code.append(generateExtensionAssignment());\r\n+\r\n+            // return statement\r\n+            code.append(generateReturnAndInovation(method));\r\n+        }\r\n+        \r\n+        return code.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * generate code for variable extName null check\r\n+     */\r\n+    private String generateExtNameNullCheck(String[] value) {\r\n+        return String.format(CODE_EXT_NAME_NULL_CHECK, type.getName(), Arrays.toString(value));\r\n+    }\r\n+\r\n+    /**\r\n+     * generate extName assigment code\r\n+     */\r\n+    private String generateExtNameAssignment(String[] value, boolean hasInvocation) {\r\n+        // TODO: refactor it\r\n+        String getNameCode = null;\r\n+        for (int i = value.length - 1; i >= 0; --i) {\r\n+            if (i == value.length - 1) {\r\n+                if (null != defaultExtName) {\r\n+                    if (!\"protocol\".equals(value[i])) {\r\n+                        if (hasInvocation) {\r\n+                            getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n+                        } else {\r\n+                            getNameCode = String.format(\"url.getParameter(\\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n+                        }\r\n+                    } else {\r\n+                        getNameCode = String.format(\"( url.getProtocol() == null ? \\\"%s\\\" : url.getProtocol() )\", defaultExtName);\r\n+                    }\r\n+                } else {\r\n+                    if (!\"protocol\".equals(value[i])) {\r\n+                        if (hasInvocation) {\r\n+                            getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n+                        } else {\r\n+                            getNameCode = String.format(\"url.getParameter(\\\"%s\\\")\", value[i]);\r\n+                        }\r\n+                    } else {\r\n+                        getNameCode = \"url.getProtocol()\";\r\n+                    }\r\n+                }\r\n+            } else {\r\n+                if (!\"protocol\".equals(value[i])) {\r\n+                    if (hasInvocation) {\r\n+                        getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n+                    } else {\r\n+                        getNameCode = String.format(\"url.getParameter(\\\"%s\\\", %s)\", value[i], getNameCode);\r\n+                    }\r\n+                } else {\r\n+                    getNameCode = String.format(\"url.getProtocol() == null ? (%s) : url.getProtocol()\", getNameCode);\r\n+                }\r\n+            }\r\n+        }\r\n+        \r\n+        return String.format(CODE_EXT_NAME_ASSIGNMENT, getNameCode);\r\n+    }\r\n+\r\n+    /**\r\n+     * @return\r\n+     */\r\n+    private String generateExtensionAssignment() {\r\n+        return String.format(CODE_EXTENSION_ASSIGNMENT, type.getName(), ExtensionLoader.class.getSimpleName(), type.getName());\r\n+    }\r\n+\r\n+    /**\r\n+     * generate method invocation statement and return it if necessary\r\n+     */\r\n+    private String generateReturnAndInovation(Method method) {\r\n+        String returnStatement = method.getReturnType().equals(void.class) ? \"\" : \"return \";\r\n+        \r\n+        String args = Arrays.stream(method.getParameters()).map(Parameter::getName).collect(Collectors.joining(\", \"));\r\n+\r\n+        return returnStatement + String.format(\"extension.%s(%s);\\n\", method.getName(), args);\r\n+    }\r\n+    \r\n+    /**\r\n+     * test if method has argument of type <code>Invocation</code>\r\n+     */\r\n+    private boolean hasInvocationArgument(Method method) {\r\n+        Class<?>[] pts = method.getParameterTypes();\r\n+        return Arrays.stream(pts).anyMatch(p -> CLASSNAME_INVOCATION.equals(p.getName()));\r\n+    }\r\n+    \r\n+    /**\r\n+     * generate code to test argument of type <code>Invocation</code> is null\r\n+     */\r\n+    private String generateInvocationArgumentNullCheck(Method method) {\r\n+        Class<?>[] pts = method.getParameterTypes();\r\n+        return IntStream.range(0, pts.length).filter(i -> CLASSNAME_INVOCATION.equals(pts[i].getName()))\r\n+                        .mapToObj(i -> String.format(CODE_INVOCATION_ARGUMENT_NULL_CHECK, i, i))\r\n+                        .findFirst().orElse(\"\");\r\n+    }\r\n+\r\n+    /**\r\n+     * get value of adaptive annotation or if empty return splitted simple name\r\n+     */\r\n+    private String[] getMethodAdaptiveValue(Adaptive adaptiveAnnotation) {\r\n+        String[] value = adaptiveAnnotation.value();\r\n+        // value is not set, use the value generated from class name as the key\r\n+        if (value.length == 0) {\r\n+            String splitName = StringUtils.camelToSplitName(type.getSimpleName(), \".\");\r\n+            value = new String[]{splitName};\r\n+        }\r\n+        return value;\r\n+    }\r\n+\r\n+    /**\r\n+     * get parameter with type <code>URL</code> from method parameter:\r\n+     * <p>\r\n+     * test if parameter has method which returns type <code>URL</code>\r\n+     * <p>\r\n+     * if not found, throws IllegalStateException\r\n+     */\r\n+    private String generateUrlAssignmentIndirectly(Method method) {\r\n+        Class<?>[] pts = method.getParameterTypes();\r\n+        \r\n+        // find URL getter method\r\n+        for (int i = 0; i < pts.length; ++i) {\r\n+            for (Method m : pts[i].getMethods()) {\r\n+                String name = m.getName();\r\n+                if ((name.startsWith(\"get\") || name.length() > 3)\r\n+                        && Modifier.isPublic(m.getModifiers())\r\n+                        && !Modifier.isStatic(m.getModifiers())\r\n+                        && m.getParameterTypes().length == 0\r\n+                        && m.getReturnType() == URL.class) {\r\n+                    return generateGetUrlNullCheck(i, pts[i], name);\r\n+                }\r\n+            }\r\n+        }\r\n+        \r\n+        // getter method not found, throw\r\n+        throw new IllegalStateException(\"Failed to create adaptive class for interface \" + type.getName()\r\n+                        + \": not found url parameter or url attribute in parameters of method \" + method.getName());\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * 1, test if argi is null\r\n+     * 2, test if argi.getXX() returns null\r\n+     * 3, assign url with argi.getXX()\r\n+     */\r\n+    private String generateGetUrlNullCheck(int index, Class<?> type, String method) {\r\n+        // Null point check\r\n+        StringBuilder code = new StringBuilder();\r\n+        code.append(String.format(\"if (arg%d == null) throw new IllegalArgumentException(\\\"%s argument == null\\\");\\n\",\r\n+                index, type.getName()));\r\n+        code.append(String.format(\"if (arg%d.%s() == null) throw new IllegalArgumentException(\\\"%s argument %s() == null\\\");\\n\",\r\n+                index, method, type.getName(), method));\r\n+\r\n+        code.append(String.format(\"%s url = arg%d.%s();\\n\", URL.class.getName(), index, method));\r\n+        return code.toString();\r\n+    }\r\n+    \r\n+}\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/extension/AdaptiveClassCodeGenerator.java",
                "sha": "fcce47feaf1079fd0d7595bdff58e52ca823e9c9",
                "status": "added"
            },
            {
                "additions": 176,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "changes": 481,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 305,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "patch": "@@ -21,17 +21,19 @@\n import org.apache.dubbo.common.extension.support.ActivateComparator;\r\n import org.apache.dubbo.common.logger.Logger;\r\n import org.apache.dubbo.common.logger.LoggerFactory;\r\n+import org.apache.dubbo.common.utils.ArrayUtils;\r\n import org.apache.dubbo.common.utils.ClassHelper;\r\n import org.apache.dubbo.common.utils.ConcurrentHashSet;\r\n import org.apache.dubbo.common.utils.ConfigUtils;\r\n import org.apache.dubbo.common.utils.Holder;\r\n import org.apache.dubbo.common.utils.ReflectUtils;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n-\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n import java.io.BufferedReader;\r\n import java.io.InputStreamReader;\r\n import java.lang.reflect.Method;\r\n import java.lang.reflect.Modifier;\r\n+import java.nio.charset.StandardCharsets;\r\n import java.util.ArrayList;\r\n import java.util.Arrays;\r\n import java.util.Collections;\r\n@@ -70,30 +72,30 @@\n \r\n     private static final Pattern NAME_SEPARATOR = Pattern.compile(\"\\\\s*[,]+\\\\s*\");\r\n \r\n-    private static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS = new ConcurrentHashMap<Class<?>, ExtensionLoader<?>>();\r\n+    private static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS = new ConcurrentHashMap<>();\r\n \r\n-    private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<Class<?>, Object>();\r\n+    private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\r\n \r\n     // ==============================\r\n \r\n     private final Class<?> type;\r\n \r\n     private final ExtensionFactory objectFactory;\r\n \r\n-    private final ConcurrentMap<Class<?>, String> cachedNames = new ConcurrentHashMap<Class<?>, String>();\r\n+    private final ConcurrentMap<Class<?>, String> cachedNames = new ConcurrentHashMap<>();\r\n \r\n-    private final Holder<Map<String, Class<?>>> cachedClasses = new Holder<Map<String, Class<?>>>();\r\n+    private final Holder<Map<String, Class<?>>> cachedClasses = new Holder<>();\r\n \r\n-    private final Map<String, Object> cachedActivates = new ConcurrentHashMap<String, Object>();\r\n-    private final ConcurrentMap<String, Holder<Object>> cachedInstances = new ConcurrentHashMap<String, Holder<Object>>();\r\n-    private final Holder<Object> cachedAdaptiveInstance = new Holder<Object>();\r\n+    private final Map<String, Object> cachedActivates = new ConcurrentHashMap<>();\r\n+    private final ConcurrentMap<String, Holder<Object>> cachedInstances = new ConcurrentHashMap<>();\r\n+    private final Holder<Object> cachedAdaptiveInstance = new Holder<>();\r\n     private volatile Class<?> cachedAdaptiveClass = null;\r\n     private String cachedDefaultName;\r\n     private volatile Throwable createAdaptiveInstanceError;\r\n \r\n     private Set<Class<?>> cachedWrapperClasses;\r\n \r\n-    private Map<String, IllegalStateException> exceptions = new ConcurrentHashMap<String, IllegalStateException>();\r\n+    private Map<String, IllegalStateException> exceptions = new ConcurrentHashMap<>();\r\n \r\n     private ExtensionLoader(Class<?> type) {\r\n         this.type = type;\r\n@@ -110,11 +112,11 @@ private ExtensionLoader(Class<?> type) {\n             throw new IllegalArgumentException(\"Extension type == null\");\r\n         }\r\n         if (!type.isInterface()) {\r\n-            throw new IllegalArgumentException(\"Extension type(\" + type + \") is not interface!\");\r\n+            throw new IllegalArgumentException(\"Extension type (\" + type + \") is not an interface!\");\r\n         }\r\n         if (!withExtensionAnnotation(type)) {\r\n-            throw new IllegalArgumentException(\"Extension type(\" + type +\r\n-                    \") is not extension, because WITHOUT @\" + SPI.class.getSimpleName() + \" Annotation!\");\r\n+            throw new IllegalArgumentException(\"Extension type (\" + type +\r\n+                    \") is not an extension, because it is NOT annotated with @\" + SPI.class.getSimpleName() + \"!\");\r\n         }\r\n \r\n         ExtensionLoader<T> loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\r\n@@ -187,7 +189,7 @@ public String getExtensionName(Class<?> extensionClass) {\n      */\r\n     public List<T> getActivateExtension(URL url, String key, String group) {\r\n         String value = url.getParameter(key);\r\n-        return getActivateExtension(url, value == null || value.length() == 0 ? null : Constants.COMMA_SPLIT_PATTERN.split(value), group);\r\n+        return getActivateExtension(url, StringUtils.isEmpty(value) ? null : Constants.COMMA_SPLIT_PATTERN.split(value), group);\r\n     }\r\n \r\n     /**\r\n@@ -200,8 +202,8 @@ public String getExtensionName(Class<?> extensionClass) {\n      * @see org.apache.dubbo.common.extension.Activate\r\n      */\r\n     public List<T> getActivateExtension(URL url, String[] values, String group) {\r\n-        List<T> exts = new ArrayList<T>();\r\n-        List<String> names = values == null ? new ArrayList<String>(0) : Arrays.asList(values);\r\n+        List<T> exts = new ArrayList<>();\r\n+        List<String> names = values == null ? new ArrayList<>(0) : Arrays.asList(values);\r\n         if (!names.contains(Constants.REMOVE_VALUE_PREFIX + Constants.DEFAULT_KEY)) {\r\n             getExtensionClasses();\r\n             for (Map.Entry<String, Object> entry : cachedActivates.entrySet()) {\r\n@@ -228,9 +230,9 @@ public String getExtensionName(Class<?> extensionClass) {\n                     }\r\n                 }\r\n             }\r\n-            Collections.sort(exts, ActivateComparator.COMPARATOR);\r\n+            exts.sort(ActivateComparator.COMPARATOR);\r\n         }\r\n-        List<T> usrs = new ArrayList<T>();\r\n+        List<T> usrs = new ArrayList<>();\r\n         for (int i = 0; i < names.size(); i++) {\r\n             String name = names.get(i);\r\n             if (!name.startsWith(Constants.REMOVE_VALUE_PREFIX)\r\n@@ -253,7 +255,7 @@ public String getExtensionName(Class<?> extensionClass) {\n     }\r\n \r\n     private boolean isMatchGroup(String group, String[] groups) {\r\n-        if (group == null || group.length() == 0) {\r\n+        if (StringUtils.isEmpty(group)) {\r\n             return true;\r\n         }\r\n         if (groups != null && groups.length > 0) {\r\n@@ -293,15 +295,20 @@ private boolean isActive(String[] keys, URL url) {\n      */\r\n     @SuppressWarnings(\"unchecked\")\r\n     public T getLoadedExtension(String name) {\r\n-        if (name == null || name.length() == 0) {\r\n+        if (StringUtils.isEmpty(name)) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n         }\r\n+        Holder<Object> holder = getOrCreateHolder(name);\r\n+        return (T) holder.get();\r\n+    }\r\n+\r\n+    private Holder<Object> getOrCreateHolder(String name) {\r\n         Holder<Object> holder = cachedInstances.get(name);\r\n         if (holder == null) {\r\n-            cachedInstances.putIfAbsent(name, new Holder<Object>());\r\n+            cachedInstances.putIfAbsent(name, new Holder<>());\r\n             holder = cachedInstances.get(name);\r\n         }\r\n-        return (T) holder.get();\r\n+        return holder;\r\n     }\r\n \r\n     /**\r\n@@ -312,7 +319,7 @@ public T getLoadedExtension(String name) {\n      * @see #getSupportedExtensions()\r\n      */\r\n     public Set<String> getLoadedExtensions() {\r\n-        return Collections.unmodifiableSet(new TreeSet<String>(cachedInstances.keySet()));\r\n+        return Collections.unmodifiableSet(new TreeSet<>(cachedInstances.keySet()));\r\n     }\r\n \r\n     public Object getLoadedAdaptiveExtensionInstances() {\r\n@@ -325,17 +332,13 @@ public Object getLoadedAdaptiveExtensionInstances() {\n      */\r\n     @SuppressWarnings(\"unchecked\")\r\n     public T getExtension(String name) {\r\n-        if (name == null || name.length() == 0) {\r\n+        if (StringUtils.isEmpty(name)) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n         }\r\n         if (\"true\".equals(name)) {\r\n             return getDefaultExtension();\r\n         }\r\n-        Holder<Object> holder = cachedInstances.get(name);\r\n-        if (holder == null) {\r\n-            cachedInstances.putIfAbsent(name, new Holder<Object>());\r\n-            holder = cachedInstances.get(name);\r\n-        }\r\n+        Holder<Object> holder = getOrCreateHolder(name);\r\n         Object instance = holder.get();\r\n         if (instance == null) {\r\n             synchronized (holder) {\r\n@@ -354,15 +357,14 @@ public T getExtension(String name) {\n      */\r\n     public T getDefaultExtension() {\r\n         getExtensionClasses();\r\n-        if (null == cachedDefaultName || cachedDefaultName.length() == 0\r\n-                || \"true\".equals(cachedDefaultName)) {\r\n+        if (StringUtils.isBlank(cachedDefaultName) || \"true\".equals(cachedDefaultName)) {\r\n             return null;\r\n         }\r\n         return getExtension(cachedDefaultName);\r\n     }\r\n \r\n     public boolean hasExtension(String name) {\r\n-        if (name == null || name.length() == 0) {\r\n+        if (StringUtils.isEmpty(name)) {\r\n             throw new IllegalArgumentException(\"Extension name == null\");\r\n         }\r\n         Class<?> c = this.getExtensionClass(name);\r\n@@ -371,7 +373,7 @@ public boolean hasExtension(String name) {\n \r\n     public Set<String> getSupportedExtensions() {\r\n         Map<String, Class<?>> clazzes = getExtensionClasses();\r\n-        return Collections.unmodifiableSet(new TreeSet<String>(clazzes.keySet()));\r\n+        return Collections.unmodifiableSet(new TreeSet<>(clazzes.keySet()));\r\n     }\r\n \r\n     /**\r\n@@ -394,11 +396,11 @@ public void addExtension(String name, Class<?> clazz) {\n \r\n         if (!type.isAssignableFrom(clazz)) {\r\n             throw new IllegalStateException(\"Input type \" +\r\n-                    clazz + \"not implement Extension \" + type);\r\n+                    clazz + \" doesn't implement the Extension \" + type);\r\n         }\r\n         if (clazz.isInterface()) {\r\n             throw new IllegalStateException(\"Input type \" +\r\n-                    clazz + \"can not be interface!\");\r\n+                    clazz + \" can't be interface!\");\r\n         }\r\n \r\n         if (!clazz.isAnnotationPresent(Adaptive.class)) {\r\n@@ -407,14 +409,14 @@ public void addExtension(String name, Class<?> clazz) {\n             }\r\n             if (cachedClasses.get().containsKey(name)) {\r\n                 throw new IllegalStateException(\"Extension name \" +\r\n-                        name + \" already existed(Extension \" + type + \")!\");\r\n+                        name + \" already exists (Extension \" + type + \")!\");\r\n             }\r\n \r\n             cachedNames.put(clazz, name);\r\n             cachedClasses.get().put(name, clazz);\r\n         } else {\r\n             if (cachedAdaptiveClass != null) {\r\n-                throw new IllegalStateException(\"Adaptive Extension already existed(Extension \" + type + \")!\");\r\n+                throw new IllegalStateException(\"Adaptive Extension already exists (Extension \" + type + \")!\");\r\n             }\r\n \r\n             cachedAdaptiveClass = clazz;\r\n@@ -435,11 +437,11 @@ public void replaceExtension(String name, Class<?> clazz) {\n \r\n         if (!type.isAssignableFrom(clazz)) {\r\n             throw new IllegalStateException(\"Input type \" +\r\n-                    clazz + \"not implement Extension \" + type);\r\n+                    clazz + \" doesn't implement Extension \" + type);\r\n         }\r\n         if (clazz.isInterface()) {\r\n             throw new IllegalStateException(\"Input type \" +\r\n-                    clazz + \"can not be interface!\");\r\n+                    clazz + \" can't be interface!\");\r\n         }\r\n \r\n         if (!clazz.isAnnotationPresent(Adaptive.class)) {\r\n@@ -448,15 +450,15 @@ public void replaceExtension(String name, Class<?> clazz) {\n             }\r\n             if (!cachedClasses.get().containsKey(name)) {\r\n                 throw new IllegalStateException(\"Extension name \" +\r\n-                        name + \" not existed(Extension \" + type + \")!\");\r\n+                        name + \" doesn't exist (Extension \" + type + \")!\");\r\n             }\r\n \r\n             cachedNames.put(clazz, name);\r\n             cachedClasses.get().put(name, clazz);\r\n             cachedInstances.remove(name);\r\n         } else {\r\n             if (cachedAdaptiveClass == null) {\r\n-                throw new IllegalStateException(\"Adaptive Extension not existed(Extension \" + type + \")!\");\r\n+                throw new IllegalStateException(\"Adaptive Extension doesn't exist (Extension \" + type + \")!\");\r\n             }\r\n \r\n             cachedAdaptiveClass = clazz;\r\n@@ -477,12 +479,12 @@ public T getAdaptiveExtension() {\n                             cachedAdaptiveInstance.set(instance);\r\n                         } catch (Throwable t) {\r\n                             createAdaptiveInstanceError = t;\r\n-                            throw new IllegalStateException(\"fail to create adaptive instance: \" + t.toString(), t);\r\n+                            throw new IllegalStateException(\"Failed to create adaptive instance: \" + t.toString(), t);\r\n                         }\r\n                     }\r\n                 }\r\n             } else {\r\n-                throw new IllegalStateException(\"fail to create adaptive instance: \" + createAdaptiveInstanceError.toString(), createAdaptiveInstanceError);\r\n+                throw new IllegalStateException(\"Failed to create adaptive instance: \" + createAdaptiveInstanceError.toString(), createAdaptiveInstanceError);\r\n             }\r\n         }\r\n \r\n@@ -528,25 +530,23 @@ private T createExtension(String name) {\n             }\r\n             injectExtension(instance);\r\n             Set<Class<?>> wrapperClasses = cachedWrapperClasses;\r\n-            if (wrapperClasses != null && !wrapperClasses.isEmpty()) {\r\n+            if (CollectionUtils.isNotEmpty(wrapperClasses)) {\r\n                 for (Class<?> wrapperClass : wrapperClasses) {\r\n                     instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));\r\n                 }\r\n             }\r\n             return instance;\r\n         } catch (Throwable t) {\r\n-            throw new IllegalStateException(\"Extension instance(name: \" + name + \", class: \" +\r\n-                    type + \")  could not be instantiated: \" + t.getMessage(), t);\r\n+            throw new IllegalStateException(\"Extension instance (name: \" + name + \", class: \" +\r\n+                    type + \") couldn't be instantiated: \" + t.getMessage(), t);\r\n         }\r\n     }\r\n \r\n     private T injectExtension(T instance) {\r\n         try {\r\n             if (objectFactory != null) {\r\n                 for (Method method : instance.getClass().getMethods()) {\r\n-                    if (method.getName().startsWith(\"set\")\r\n-                            && method.getParameterTypes().length == 1\r\n-                            && Modifier.isPublic(method.getModifiers())) {\r\n+                    if (isSetter(method)) {\r\n                         /**\r\n                          * Check {@link DisableInject} to see if we need auto injection for this property\r\n                          */\r\n@@ -558,13 +558,13 @@ private T injectExtension(T instance) {\n                             continue;\r\n                         }\r\n                         try {\r\n-                            String property = method.getName().length() > 3 ? method.getName().substring(3, 4).toLowerCase() + method.getName().substring(4) : \"\";\r\n+                            String property = getSetterProperty(method);\r\n                             Object object = objectFactory.getExtension(pt, property);\r\n                             if (object != null) {\r\n                                 method.invoke(instance, object);\r\n                             }\r\n                         } catch (Exception e) {\r\n-                            logger.error(\"fail to inject via method \" + method.getName()\r\n+                            logger.error(\"Failed to inject via method \" + method.getName()\r\n                                     + \" of interface \" + type.getName() + \": \" + e.getMessage(), e);\r\n                         }\r\n                     }\r\n@@ -576,6 +576,30 @@ private T injectExtension(T instance) {\n         return instance;\r\n     }\r\n \r\n+    /**\r\n+     * get properties name for setter, for instance: setVersion, return \"version\"\r\n+     * <p>\r\n+     * return \"\", if setter name with length less than 3\r\n+     */\r\n+    private String getSetterProperty(Method method) {\r\n+        return method.getName().length() > 3 ? method.getName().substring(3, 4).toLowerCase() + method.getName().substring(4) : \"\";\r\n+    }\r\n+\r\n+    /**\r\n+     * return true if and only if:\r\n+     * <p>\r\n+     * 1, public\r\n+     * <p>\r\n+     * 2, name starts with \"set\"\r\n+     * <p>\r\n+     * 3, only has one parameter\r\n+     */\r\n+    private boolean isSetter(Method method) {\r\n+        return method.getName().startsWith(\"set\")\r\n+                && method.getParameterTypes().length == 1\r\n+                && Modifier.isPublic(method.getModifiers());\r\n+    }\r\n+\r\n     private Class<?> getExtensionClass(String name) {\r\n         if (type == null) {\r\n             throw new IllegalArgumentException(\"Extension type == null\");\r\n@@ -602,29 +626,36 @@ private T injectExtension(T instance) {\n \r\n     // synchronized in getExtensionClasses\r\n     private Map<String, Class<?>> loadExtensionClasses() {\r\n+        cacheDefaultExtensionName();\r\n+\r\n+        Map<String, Class<?>> extensionClasses = new HashMap<>();\r\n+        loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY, type.getName());\r\n+        loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY, type.getName().replace(\"org.apache\", \"com.alibaba\"));\r\n+        loadDirectory(extensionClasses, DUBBO_DIRECTORY, type.getName());\r\n+        loadDirectory(extensionClasses, DUBBO_DIRECTORY, type.getName().replace(\"org.apache\", \"com.alibaba\"));\r\n+        loadDirectory(extensionClasses, SERVICES_DIRECTORY, type.getName());\r\n+        loadDirectory(extensionClasses, SERVICES_DIRECTORY, type.getName().replace(\"org.apache\", \"com.alibaba\"));\r\n+        return extensionClasses;\r\n+    }\r\n+\r\n+    /**\r\n+     * extract and cache default extension name if exists\r\n+     */\r\n+    private void cacheDefaultExtensionName() {\r\n         final SPI defaultAnnotation = type.getAnnotation(SPI.class);\r\n         if (defaultAnnotation != null) {\r\n             String value = defaultAnnotation.value();\r\n             if ((value = value.trim()).length() > 0) {\r\n                 String[] names = NAME_SEPARATOR.split(value);\r\n                 if (names.length > 1) {\r\n-                    throw new IllegalStateException(\"more than 1 default extension name on extension \" + type.getName()\r\n+                    throw new IllegalStateException(\"More than 1 default extension name on extension \" + type.getName()\r\n                             + \": \" + Arrays.toString(names));\r\n                 }\r\n                 if (names.length == 1) {\r\n                     cachedDefaultName = names[0];\r\n                 }\r\n             }\r\n         }\r\n-\r\n-        Map<String, Class<?>> extensionClasses = new HashMap<String, Class<?>>();\r\n-        loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY, type.getName());\r\n-        loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY, type.getName().replace(\"org.apache\", \"com.alibaba\"));\r\n-        loadDirectory(extensionClasses, DUBBO_DIRECTORY, type.getName());\r\n-        loadDirectory(extensionClasses, DUBBO_DIRECTORY, type.getName().replace(\"org.apache\", \"com.alibaba\"));\r\n-        loadDirectory(extensionClasses, SERVICES_DIRECTORY, type.getName());\r\n-        loadDirectory(extensionClasses, SERVICES_DIRECTORY, type.getName().replace(\"org.apache\", \"com.alibaba\"));\r\n-        return extensionClasses;\r\n     }\r\n \r\n     private void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type) {\r\n@@ -644,15 +675,14 @@ private void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, S\n                 }\r\n             }\r\n         } catch (Throwable t) {\r\n-            logger.error(\"Exception when load extension class(interface: \" +\r\n+            logger.error(\"Exception occurred when loading extension class (interface: \" +\r\n                     type + \", description file: \" + fileName + \").\", t);\r\n         }\r\n     }\r\n \r\n     private void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader classLoader, java.net.URL resourceURL) {\r\n         try {\r\n-            BufferedReader reader = new BufferedReader(new InputStreamReader(resourceURL.openStream(), \"utf-8\"));\r\n-            try {\r\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(resourceURL.openStream(), StandardCharsets.UTF_8))) {\r\n                 String line;\r\n                 while ((line = reader.readLine()) != null) {\r\n                     final int ci = line.indexOf('#');\r\n@@ -672,76 +702,117 @@ private void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader cl\n                                 loadClass(extensionClasses, resourceURL, Class.forName(line, true, classLoader), name);\r\n                             }\r\n                         } catch (Throwable t) {\r\n-                            IllegalStateException e = new IllegalStateException(\"Failed to load extension class(interface: \" + type + \", class line: \" + line + \") in \" + resourceURL + \", cause: \" + t.getMessage(), t);\r\n+                            IllegalStateException e = new IllegalStateException(\"Failed to load extension class (interface: \" + type + \", class line: \" + line + \") in \" + resourceURL + \", cause: \" + t.getMessage(), t);\r\n                             exceptions.put(line, e);\r\n                         }\r\n                     }\r\n                 }\r\n-            } finally {\r\n-                reader.close();\r\n             }\r\n         } catch (Throwable t) {\r\n-            logger.error(\"Exception when load extension class(interface: \" +\r\n+            logger.error(\"Exception occurred when loading extension class (interface: \" +\r\n                     type + \", class file: \" + resourceURL + \") in \" + resourceURL, t);\r\n         }\r\n     }\r\n \r\n     private void loadClass(Map<String, Class<?>> extensionClasses, java.net.URL resourceURL, Class<?> clazz, String name) throws NoSuchMethodException {\r\n         if (!type.isAssignableFrom(clazz)) {\r\n-            throw new IllegalStateException(\"Error when load extension class(interface: \" +\r\n+            throw new IllegalStateException(\"Error occurred when loading extension class (interface: \" +\r\n                     type + \", class line: \" + clazz.getName() + \"), class \"\r\n-                    + clazz.getName() + \"is not subtype of interface.\");\r\n+                    + clazz.getName() + \" is not subtype of interface.\");\r\n         }\r\n         if (clazz.isAnnotationPresent(Adaptive.class)) {\r\n-            if (cachedAdaptiveClass == null) {\r\n-                cachedAdaptiveClass = clazz;\r\n-            } else if (!cachedAdaptiveClass.equals(clazz)) {\r\n-                throw new IllegalStateException(\"More than 1 adaptive class found: \"\r\n-                        + cachedAdaptiveClass.getClass().getName()\r\n-                        + \", \" + clazz.getClass().getName());\r\n-            }\r\n+            cacheAdaptiveClass(clazz);\r\n         } else if (isWrapperClass(clazz)) {\r\n-            Set<Class<?>> wrappers = cachedWrapperClasses;\r\n-            if (wrappers == null) {\r\n-                cachedWrapperClasses = new ConcurrentHashSet<Class<?>>();\r\n-                wrappers = cachedWrapperClasses;\r\n-            }\r\n-            wrappers.add(clazz);\r\n+            cacheWrapperClass(clazz);\r\n         } else {\r\n             clazz.getConstructor();\r\n-            if (name == null || name.length() == 0) {\r\n+            if (StringUtils.isEmpty(name)) {\r\n                 name = findAnnotationName(clazz);\r\n                 if (name.length() == 0) {\r\n                     throw new IllegalStateException(\"No such extension name for the class \" + clazz.getName() + \" in the config \" + resourceURL);\r\n                 }\r\n             }\r\n+\r\n             String[] names = NAME_SEPARATOR.split(name);\r\n-            if (names != null && names.length > 0) {\r\n-                Activate activate = clazz.getAnnotation(Activate.class);\r\n-                if (activate != null) {\r\n-                    cachedActivates.put(names[0], activate);\r\n-                } else {\r\n-                    // support com.alibaba.dubbo.common.extension.Activate\r\n-                    com.alibaba.dubbo.common.extension.Activate oldActivate = clazz.getAnnotation(com.alibaba.dubbo.common.extension.Activate.class);\r\n-                    if (oldActivate != null) {\r\n-                        cachedActivates.put(names[0], oldActivate);\r\n-                    }\r\n-                }\r\n+            if (ArrayUtils.isNotEmpty(names)) {\r\n+                cacheActivateClass(clazz, names[0]);\r\n                 for (String n : names) {\r\n-                    if (!cachedNames.containsKey(clazz)) {\r\n-                        cachedNames.put(clazz, n);\r\n-                    }\r\n-                    Class<?> c = extensionClasses.get(n);\r\n-                    if (c == null) {\r\n-                        extensionClasses.put(n, clazz);\r\n-                    } else if (c != clazz) {\r\n-                        throw new IllegalStateException(\"Duplicate extension \" + type.getName() + \" name \" + n + \" on \" + c.getName() + \" and \" + clazz.getName());\r\n-                    }\r\n+                    cacheName(clazz, n);\r\n+                    saveInExtensionClass(extensionClasses, clazz, name);\r\n                 }\r\n             }\r\n         }\r\n     }\r\n \r\n+    /**\r\n+     * cache name\r\n+     */\r\n+    private void cacheName(Class<?> clazz, String name) {\r\n+        if (!cachedNames.containsKey(clazz)) {\r\n+            cachedNames.put(clazz, name);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * put clazz in extensionClasses\r\n+     */\r\n+    private void saveInExtensionClass(Map<String, Class<?>> extensionClasses, Class<?> clazz, String name) {\r\n+        Class<?> c = extensionClasses.get(name);\r\n+        if (c == null) {\r\n+            extensionClasses.put(name, clazz);\r\n+        } else if (c != clazz) {\r\n+            throw new IllegalStateException(\"Duplicate extension \" + type.getName() + \" name \" + name + \" on \" + c.getName() + \" and \" + clazz.getName());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * cache Activate class which is annotated with <code>Activate</code>\r\n+     * <p>\r\n+     * for compatibility, also cache class with old alibaba Activate annotation\r\n+     */\r\n+    private void cacheActivateClass(Class<?> clazz, String name) {\r\n+        Activate activate = clazz.getAnnotation(Activate.class);\r\n+        if (activate != null) {\r\n+            cachedActivates.put(name, activate);\r\n+        } else {\r\n+            // support com.alibaba.dubbo.common.extension.Activate\r\n+            com.alibaba.dubbo.common.extension.Activate oldActivate = clazz.getAnnotation(com.alibaba.dubbo.common.extension.Activate.class);\r\n+            if (oldActivate != null) {\r\n+                cachedActivates.put(name, oldActivate);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * cache Adaptive class which is annotated with <code>Adaptive</code>\r\n+     */\r\n+    private void cacheAdaptiveClass(Class<?> clazz) {\r\n+        if (cachedAdaptiveClass == null) {\r\n+            cachedAdaptiveClass = clazz;\r\n+        } else if (!cachedAdaptiveClass.equals(clazz)) {\r\n+            throw new IllegalStateException(\"More than 1 adaptive class found: \"\r\n+                    + cachedAdaptiveClass.getClass().getName()\r\n+                    + \", \" + clazz.getClass().getName());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * cache wrapper class\r\n+     * <p>\r\n+     * like: ProtocolFilterWrapper, ProtocolListenerWrapper\r\n+     */\r\n+    private void cacheWrapperClass(Class<?> clazz) {\r\n+        if (cachedWrapperClasses == null) {\r\n+            cachedWrapperClasses = new ConcurrentHashSet<>();\r\n+        }\r\n+        cachedWrapperClasses.add(clazz);\r\n+    }\r\n+\r\n+    /**\r\n+     * test if clazz is a wrapper class\r\n+     * <p>\r\n+     * which has Constructor with given class type as its only argument\r\n+     */\r\n     private boolean isWrapperClass(Class<?> clazz) {\r\n         try {\r\n             clazz.getConstructor(type);\r\n@@ -769,7 +840,7 @@ private T createAdaptiveExtension() {\n         try {\r\n             return injectExtension((T) getAdaptiveExtensionClass().newInstance());\r\n         } catch (Exception e) {\r\n-            throw new IllegalStateException(\"Can not create adaptive extension \" + type + \", cause: \" + e.getMessage(), e);\r\n+            throw new IllegalStateException(\"Can't create adaptive extension \" + type + \", cause: \" + e.getMessage(), e);\r\n         }\r\n     }\r\n \r\n@@ -782,212 +853,12 @@ private T createAdaptiveExtension() {\n     }\r\n \r\n     private Class<?> createAdaptiveExtensionClass() {\r\n-        String code = createAdaptiveExtensionClassCode();\r\n+        String code = new AdaptiveClassCodeGenerator(type, cachedDefaultName).generate();\r\n         ClassLoader classLoader = findClassLoader();\r\n         org.apache.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();\r\n         return compiler.compile(code, classLoader);\r\n     }\r\n \r\n-    private String createAdaptiveExtensionClassCode() {\r\n-        StringBuilder codeBuilder = new StringBuilder();\r\n-        Method[] methods = type.getMethods();\r\n-        boolean hasAdaptiveAnnotation = false;\r\n-        for (Method m : methods) {\r\n-            if (m.isAnnotationPresent(Adaptive.class)) {\r\n-                hasAdaptiveAnnotation = true;\r\n-                break;\r\n-            }\r\n-        }\r\n-        // no need to generate adaptive class since there's no adaptive method found.\r\n-        if (!hasAdaptiveAnnotation) {\r\n-            throw new IllegalStateException(\"No adaptive method on extension \" + type.getName() + \", refuse to create the adaptive class!\");\r\n-        }\r\n-\r\n-        codeBuilder.append(\"package \").append(type.getPackage().getName()).append(\";\");\r\n-        codeBuilder.append(\"\\nimport \").append(ExtensionLoader.class.getName()).append(\";\");\r\n-        codeBuilder.append(\"\\npublic class \").append(type.getSimpleName()).append(\"$Adaptive\").append(\" implements \").append(type.getCanonicalName()).append(\" {\");\r\n-\r\n-        for (Method method : methods) {\r\n-            Class<?> rt = method.getReturnType();\r\n-            Class<?>[] pts = method.getParameterTypes();\r\n-            Class<?>[] ets = method.getExceptionTypes();\r\n-\r\n-            Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class);\r\n-            StringBuilder code = new StringBuilder(512);\r\n-            if (adaptiveAnnotation == null) {\r\n-                code.append(\"throw new UnsupportedOperationException(\\\"method \")\r\n-                        .append(method.toString()).append(\" of interface \")\r\n-                        .append(type.getName()).append(\" is not adaptive method!\\\");\");\r\n-            } else {\r\n-                int urlTypeIndex = -1;\r\n-                for (int i = 0; i < pts.length; ++i) {\r\n-                    if (pts[i].equals(URL.class)) {\r\n-                        urlTypeIndex = i;\r\n-                        break;\r\n-                    }\r\n-                }\r\n-                // found parameter in URL type\r\n-                if (urlTypeIndex != -1) {\r\n-                    // Null Point check\r\n-                    String s = String.format(\"\\nif (arg%d == null) throw new IllegalArgumentException(\\\"url == null\\\");\",\r\n-                            urlTypeIndex);\r\n-                    code.append(s);\r\n-\r\n-                    s = String.format(\"\\n%s url = arg%d;\", URL.class.getName(), urlTypeIndex);\r\n-                    code.append(s);\r\n-                }\r\n-                // did not find parameter in URL type\r\n-                else {\r\n-                    String attribMethod = null;\r\n-\r\n-                    // find URL getter method\r\n-                    LBL_PTS:\r\n-                    for (int i = 0; i < pts.length; ++i) {\r\n-                        Method[] ms = pts[i].getMethods();\r\n-                        for (Method m : ms) {\r\n-                            String name = m.getName();\r\n-                            if ((name.startsWith(\"get\") || name.length() > 3)\r\n-                                    && Modifier.isPublic(m.getModifiers())\r\n-                                    && !Modifier.isStatic(m.getModifiers())\r\n-                                    && m.getParameterTypes().length == 0\r\n-                                    && m.getReturnType() == URL.class) {\r\n-                                urlTypeIndex = i;\r\n-                                attribMethod = name;\r\n-                                break LBL_PTS;\r\n-                            }\r\n-                        }\r\n-                    }\r\n-                    if (attribMethod == null) {\r\n-                        throw new IllegalStateException(\"fail to create adaptive class for interface \" + type.getName()\r\n-                                + \": not found url parameter or url attribute in parameters of method \" + method.getName());\r\n-                    }\r\n-\r\n-                    // Null point check\r\n-                    String s = String.format(\"\\nif (arg%d == null) throw new IllegalArgumentException(\\\"%s argument == null\\\");\",\r\n-                            urlTypeIndex, pts[urlTypeIndex].getName());\r\n-                    code.append(s);\r\n-                    s = String.format(\"\\nif (arg%d.%s() == null) throw new IllegalArgumentException(\\\"%s argument %s() == null\\\");\",\r\n-                            urlTypeIndex, attribMethod, pts[urlTypeIndex].getName(), attribMethod);\r\n-                    code.append(s);\r\n-\r\n-                    s = String.format(\"%s url = arg%d.%s();\", URL.class.getName(), urlTypeIndex, attribMethod);\r\n-                    code.append(s);\r\n-                }\r\n-\r\n-                String[] value = adaptiveAnnotation.value();\r\n-                // value is not set, use the value generated from class name as the key\r\n-                if (value.length == 0) {\r\n-                    String splitName = StringUtils.camelToSplitName(type.getSimpleName(), \".\");\r\n-                    value = new String[]{splitName};\r\n-                }\r\n-\r\n-                boolean hasInvocation = false;\r\n-                for (int i = 0; i < pts.length; ++i) {\r\n-                    if ((\"org.apache.dubbo.rpc.Invocation\").equals(pts[i].getName())) {\r\n-                        // Null Point check\r\n-                        String s = String.format(\"\\nif (arg%d == null) throw new IllegalArgumentException(\\\"invocation == null\\\");\", i);\r\n-                        code.append(s);\r\n-                        s = String.format(\"\\nString methodName = arg%d.getMethodName();\", i);\r\n-                        code.append(s);\r\n-                        hasInvocation = true;\r\n-                        break;\r\n-                    }\r\n-                }\r\n-\r\n-                String defaultExtName = cachedDefaultName;\r\n-                String getNameCode = null;\r\n-                for (int i = value.length - 1; i >= 0; --i) {\r\n-                    if (i == value.length - 1) {\r\n-                        if (null != defaultExtName) {\r\n-                            if (!\"protocol\".equals(value[i])) {\r\n-                                if (hasInvocation) {\r\n-                                    getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                                } else {\r\n-                                    getNameCode = String.format(\"url.getParameter(\\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                                }\r\n-                            } else {\r\n-                                getNameCode = String.format(\"( url.getProtocol() == null ? \\\"%s\\\" : url.getProtocol() )\", defaultExtName);\r\n-                            }\r\n-                        } else {\r\n-                            if (!\"protocol\".equals(value[i])) {\r\n-                                if (hasInvocation) {\r\n-                                    getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                                } else {\r\n-                                    getNameCode = String.format(\"url.getParameter(\\\"%s\\\")\", value[i]);\r\n-                                }\r\n-                            } else {\r\n-                                getNameCode = \"url.getProtocol()\";\r\n-                            }\r\n-                        }\r\n-                    } else {\r\n-                        if (!\"protocol\".equals(value[i])) {\r\n-                            if (hasInvocation) {\r\n-                                getNameCode = String.format(\"url.getMethodParameter(methodName, \\\"%s\\\", \\\"%s\\\")\", value[i], defaultExtName);\r\n-                            } else {\r\n-                                getNameCode = String.format(\"url.getParameter(\\\"%s\\\", %s)\", value[i], getNameCode);\r\n-                            }\r\n-                        } else {\r\n-                            getNameCode = String.format(\"url.getProtocol() == null ? (%s) : url.getProtocol()\", getNameCode);\r\n-                        }\r\n-                    }\r\n-                }\r\n-                code.append(\"\\nString extName = \").append(getNameCode).append(\";\");\r\n-                // check extName == null?\r\n-                String s = String.format(\"\\nif(extName == null) \" +\r\n-                                \"throw new IllegalStateException(\\\"Fail to get extension(%s) name from url(\\\" + url.toString() + \\\") use keys(%s)\\\");\",\r\n-                        type.getName(), Arrays.toString(value));\r\n-                code.append(s);\r\n-\r\n-                s = String.format(\"\\n%s extension = (%<s)%s.getExtensionLoader(%s.class).getExtension(extName);\",\r\n-                        type.getName(), ExtensionLoader.class.getSimpleName(), type.getName());\r\n-                code.append(s);\r\n-\r\n-                // return statement\r\n-                if (!rt.equals(void.class)) {\r\n-                    code.append(\"\\nreturn \");\r\n-                }\r\n-\r\n-                s = String.format(\"extension.%s(\", method.getName());\r\n-                code.append(s);\r\n-                for (int i = 0; i < pts.length; i++) {\r\n-                    if (i != 0) {\r\n-                        code.append(\", \");\r\n-                    }\r\n-                    code.append(\"arg\").append(i);\r\n-                }\r\n-                code.append(\");\");\r\n-            }\r\n-\r\n-            codeBuilder.append(\"\\npublic \").append(rt.getCanonicalName()).append(\" \").append(method.getName()).append(\"(\");\r\n-            for (int i = 0; i < pts.length; i++) {\r\n-                if (i > 0) {\r\n-                    codeBuilder.append(\", \");\r\n-                }\r\n-                codeBuilder.append(pts[i].getCanonicalName());\r\n-                codeBuilder.append(\" \");\r\n-                codeBuilder.append(\"arg\").append(i);\r\n-            }\r\n-            codeBuilder.append(\")\");\r\n-            if (ets.length > 0) {\r\n-                codeBuilder.append(\" throws \");\r\n-                for (int i = 0; i < ets.length; i++) {\r\n-                    if (i > 0) {\r\n-                        codeBuilder.append(\", \");\r\n-                    }\r\n-                    codeBuilder.append(ets[i].getCanonicalName());\r\n-                }\r\n-            }\r\n-            codeBuilder.append(\" {\");\r\n-            codeBuilder.append(code.toString());\r\n-            codeBuilder.append(\"\\n}\");\r\n-        }\r\n-        codeBuilder.append(\"\\n}\");\r\n-        if (logger.isDebugEnabled()) {\r\n-            logger.debug(codeBuilder.toString());\r\n-        }\r\n-        return codeBuilder.toString();\r\n-    }\r\n-\r\n     @Override\r\n     public String toString() {\r\n         return this.getClass().getName() + \"[\" + type.getName() + \"]\";\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java",
                "sha": "3f2709e862181990dc3dcf095186d3064ff1c2a3",
                "status": "modified"
            },
            {
                "additions": 74,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/extension/support/ActivateComparator.java",
                "changes": 129,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/extension/support/ActivateComparator.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 55,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/extension/support/ActivateComparator.java",
                "patch": "@@ -19,7 +19,9 @@\n import org.apache.dubbo.common.extension.Activate;\r\n import org.apache.dubbo.common.extension.ExtensionLoader;\r\n import org.apache.dubbo.common.extension.SPI;\r\n+import org.apache.dubbo.common.utils.ArrayUtils;\r\n \r\n+import java.util.Arrays;\r\n import java.util.Comparator;\r\n \r\n /**\r\n@@ -44,75 +46,92 @@ public int compare(Object o1, Object o2) {\n             return 0;\r\n         }\r\n \r\n-        // to support com.alibab.dubbo.common.extension.Activate\r\n-        String[] a1Before, a2Before, a1After, a2After;\r\n-        int a1Order, a2Order;\r\n-        Class<?> inf = null;\r\n-        if (o1.getClass().getInterfaces().length > 0) {\r\n-            inf = o1.getClass().getInterfaces()[0];\r\n+        Class<?> inf = findSpi(o1.getClass());\r\n \r\n-            if (inf.getInterfaces().length > 0) {\r\n-                inf = inf.getInterfaces()[0];\r\n-            }\r\n-        }\r\n+        ActivateInfo a1 = parseActivate(o1.getClass());\r\n+        ActivateInfo a2 = parseActivate(o2.getClass());\r\n \r\n-        Activate a1 = o1.getClass().getAnnotation(Activate.class);\r\n-        if (a1 != null) {\r\n-            a1Before = a1.before();\r\n-            a1After = a1.after();\r\n-            a1Order = a1.order();\r\n-        } else {\r\n-            com.alibaba.dubbo.common.extension.Activate oa1 = o1.getClass().getAnnotation(com.alibaba.dubbo.common.extension.Activate.class);\r\n-            a1Before = oa1.before();\r\n-            a1After = oa1.after();\r\n-            a1Order = oa1.order();\r\n-        }\r\n-        Activate a2 = o2.getClass().getAnnotation(Activate.class);\r\n-        if (a2 != null) {\r\n-            a2Before = a2.before();\r\n-            a2After = a2.after();\r\n-            a2Order = a2.order();\r\n-        } else {\r\n-            com.alibaba.dubbo.common.extension.Activate oa2 = o2.getClass().getAnnotation(com.alibaba.dubbo.common.extension.Activate.class);\r\n-            a2Before = oa2.before();\r\n-            a2After = oa2.after();\r\n-            a2Order = oa2.order();\r\n-        }\r\n-        if ((a1Before.length > 0 || a1After.length > 0\r\n-                || a2Before.length > 0 || a2After.length > 0)\r\n-                && inf != null && inf.isAnnotationPresent(SPI.class)) {\r\n+        if ((a1.applicableToCompare() || a2.applicableToCompare()) && inf != null) {\r\n             ExtensionLoader<?> extensionLoader = ExtensionLoader.getExtensionLoader(inf);\r\n-            if (a1Before.length > 0 || a1After.length > 0) {\r\n+            if (a1.applicableToCompare()) {\r\n                 String n2 = extensionLoader.getExtensionName(o2.getClass());\r\n-                for (String before : a1Before) {\r\n-                    if (before.equals(n2)) {\r\n-                        return -1;\r\n-                    }\r\n+                if (a1.isLess(n2)) {\r\n+                    return -1;\r\n                 }\r\n-                for (String after : a1After) {\r\n-                    if (after.equals(n2)) {\r\n-                        return 1;\r\n-                    }\r\n+\r\n+                if (a1.isMore(n2)) {\r\n+                    return 1;\r\n                 }\r\n             }\r\n-            if (a2Before.length > 0 || a2After.length > 0) {\r\n+\r\n+            if (a2.applicableToCompare()) {\r\n                 String n1 = extensionLoader.getExtensionName(o1.getClass());\r\n-                for (String before : a2Before) {\r\n-                    if (before.equals(n1)) {\r\n-                        return 1;\r\n-                    }\r\n+                if (a2.isLess(n1)) {\r\n+                    return 1;\r\n                 }\r\n-                for (String after : a2After) {\r\n-                    if (after.equals(n1)) {\r\n-                        return -1;\r\n-                    }\r\n+\r\n+                if (a2.isMore(n1)) {\r\n+                    return -1;\r\n                 }\r\n             }\r\n         }\r\n-        int n1 = a1 == null ? 0 : a1Order;\r\n-        int n2 = a2 == null ? 0 : a2Order;\r\n+        int n1 = a1 == null ? 0 : a1.order;\r\n+        int n2 = a2 == null ? 0 : a2.order;\r\n         // never return 0 even if n1 equals n2, otherwise, o1 and o2 will override each other in collection like HashSet\r\n         return n1 > n2 ? 1 : -1;\r\n     }\r\n \r\n+    private Class<?> findSpi(Class clazz) {\r\n+        if (clazz.getInterfaces().length <= 0) {\r\n+            return null;\r\n+        }\r\n+\r\n+        for (Class<?> intf : clazz.getInterfaces()) {\r\n+            if (intf.isAnnotationPresent(SPI.class)) {\r\n+                return intf;\r\n+            } else {\r\n+                Class result = findSpi(intf);\r\n+                if (result != null) {\r\n+                    return result;\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    private ActivateInfo parseActivate(Class<?> clazz) {\r\n+        ActivateInfo info = new ActivateInfo();\r\n+        if (clazz.isAnnotationPresent(Activate.class)) {\r\n+            Activate activate = clazz.getAnnotation(Activate.class);\r\n+            info.before = activate.before();\r\n+            info.after = activate.after();\r\n+            info.order = activate.order();\r\n+        } else {\r\n+            com.alibaba.dubbo.common.extension.Activate activate = clazz.getAnnotation(\r\n+                    com.alibaba.dubbo.common.extension.Activate.class);\r\n+            info.before = activate.before();\r\n+            info.after = activate.after();\r\n+            info.order = activate.order();\r\n+        }\r\n+        return info;\r\n+    }\r\n+\r\n+    private static class ActivateInfo {\r\n+        private String[] before;\r\n+        private String[] after;\r\n+        private int order;\r\n+\r\n+        private boolean applicableToCompare() {\r\n+            return ArrayUtils.isNotEmpty(before) || ArrayUtils.isNotEmpty(after);\r\n+        }\r\n+\r\n+        private boolean isLess(String name) {\r\n+            return Arrays.asList(before).contains(name);\r\n+        }\r\n+\r\n+        private boolean isMore(String name) {\r\n+            return Arrays.asList(after).contains(name);\r\n+        }\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/extension/support/ActivateComparator.java",
                "sha": "5dcedc38cc43c66bfee6ddb6890bba9469ff5a2d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
                "patch": "@@ -579,6 +579,7 @@ private static Object parse(Reader reader, JSONVisitor handler, int expect) thro\n                                         handler.objectItemValue(value, false);\r\n                                         break;\r\n                                     }\r\n+                                    default:\r\n                                 }\r\n                             }\r\n                             break;\r\n@@ -629,6 +630,7 @@ private static Object parse(Reader reader, JSONVisitor handler, int expect) thro\n                                         handler.objectItemValue(value, false);\r\n                                         break;\r\n                                     }\r\n+                                    default:\r\n                                 }\r\n                             }\r\n                             break;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSON.java",
                "sha": "0903cfbc869faf5b8956857854cd08dab54259e3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "patch": "@@ -275,6 +275,7 @@ private void beforeValue() throws IOException {\n             case OBJECT_VALUE:\r\n                 mState.type = OBJECT;\r\n                 return;\r\n+            default:\r\n         }\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/json/JSONWriter.java",
                "sha": "6c6bf09c0fe432a2d75877c37bb37096fafa2309",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "patch": "@@ -837,6 +837,7 @@ public JSONToken yylex() throws java.io.IOException, ParseException {\n                         return null;\n                     } else {\n                         zzScanError(ZZ_NO_MATCH);\n+                        break;\n                     }\n             }\n         }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/json/Yylex.java",
                "sha": "822175e60315e9ef2b54ff6d1ce4b0c607929b5f",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/logger/Logger.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/logger/Logger.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 20,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/Logger.java",
                "patch": "@@ -28,144 +28,144 @@\n      *\n      * @param msg log this message\n      */\n-    public void trace(String msg);\n+    void trace(String msg);\n \n     /**\n      * Logs an error with trace log level.\n      *\n      * @param e log this cause\n      */\n-    public void trace(Throwable e);\n+    void trace(Throwable e);\n \n     /**\n      * Logs an error with trace log level.\n      *\n      * @param msg log this message\n      * @param e   log this cause\n      */\n-    public void trace(String msg, Throwable e);\n+    void trace(String msg, Throwable e);\n \n     /**\n      * Logs a message with debug log level.\n      *\n      * @param msg log this message\n      */\n-    public void debug(String msg);\n+    void debug(String msg);\n \n     /**\n      * Logs an error with debug log level.\n      *\n      * @param e log this cause\n      */\n-    public void debug(Throwable e);\n+    void debug(Throwable e);\n \n     /**\n      * Logs an error with debug log level.\n      *\n      * @param msg log this message\n      * @param e   log this cause\n      */\n-    public void debug(String msg, Throwable e);\n+    void debug(String msg, Throwable e);\n \n     /**\n      * Logs a message with info log level.\n      *\n      * @param msg log this message\n      */\n-    public void info(String msg);\n+    void info(String msg);\n \n     /**\n      * Logs an error with info log level.\n      *\n      * @param e log this cause\n      */\n-    public void info(Throwable e);\n+    void info(Throwable e);\n \n     /**\n      * Logs an error with info log level.\n      *\n      * @param msg log this message\n      * @param e   log this cause\n      */\n-    public void info(String msg, Throwable e);\n+    void info(String msg, Throwable e);\n \n     /**\n      * Logs a message with warn log level.\n      *\n      * @param msg log this message\n      */\n-    public void warn(String msg);\n+    void warn(String msg);\n \n     /**\n      * Logs a message with warn log level.\n      *\n      * @param e log this message\n      */\n-    public void warn(Throwable e);\n+    void warn(Throwable e);\n \n     /**\n      * Logs a message with warn log level.\n      *\n      * @param msg log this message\n      * @param e   log this cause\n      */\n-    public void warn(String msg, Throwable e);\n+    void warn(String msg, Throwable e);\n \n     /**\n      * Logs a message with error log level.\n      *\n      * @param msg log this message\n      */\n-    public void error(String msg);\n+    void error(String msg);\n \n     /**\n      * Logs an error with error log level.\n      *\n      * @param e log this cause\n      */\n-    public void error(Throwable e);\n+    void error(Throwable e);\n \n     /**\n      * Logs an error with error log level.\n      *\n      * @param msg log this message\n      * @param e   log this cause\n      */\n-    public void error(String msg, Throwable e);\n+    void error(String msg, Throwable e);\n \n     /**\n      * Is trace logging currently enabled?\n      *\n      * @return true if trace is enabled\n      */\n-    public boolean isTraceEnabled();\n+    boolean isTraceEnabled();\n \n     /**\n      * Is debug logging currently enabled?\n      *\n      * @return true if debug is enabled\n      */\n-    public boolean isDebugEnabled();\n+    boolean isDebugEnabled();\n \n     /**\n      * Is info logging currently enabled?\n      *\n      * @return true if info is enabled\n      */\n-    public boolean isInfoEnabled();\n+    boolean isInfoEnabled();\n \n     /**\n      * Is warn logging currently enabled?\n      *\n      * @return true if warn is enabled\n      */\n-    public boolean isWarnEnabled();\n+    boolean isWarnEnabled();\n \n     /**\n      * Is error logging currently enabled?\n      *\n      * @return true if error is enabled\n      */\n-    public boolean isErrorEnabled();\n+    boolean isErrorEnabled();\n \n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/logger/Logger.java",
                "sha": "c505326d0c3b4db0bef52ece859e7ebb816549b0",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/logger/LoggerFactory.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/logger/LoggerFactory.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 39,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/logger/LoggerFactory.java",
                "patch": "@@ -25,6 +25,8 @@\n import org.apache.dubbo.common.logger.support.FailsafeLogger;\n \n import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n@@ -34,40 +36,43 @@\n  */\n public class LoggerFactory {\n \n-    private static final ConcurrentMap<String, FailsafeLogger> LOGGERS = new ConcurrentHashMap<String, FailsafeLogger>();\n+    private static final ConcurrentMap<String, FailsafeLogger> LOGGERS = new ConcurrentHashMap<>();\n     private static volatile LoggerAdapter LOGGER_ADAPTER;\n \n     // search common-used logging frameworks\n     static {\n-        String logger = System.getProperty(\"dubbo.application.logger\");\n-        if (\"slf4j\".equals(logger)) {\n-            setLoggerAdapter(new Slf4jLoggerAdapter());\n-        } else if (\"jcl\".equals(logger)) {\n-            setLoggerAdapter(new JclLoggerAdapter());\n-        } else if (\"log4j\".equals(logger)) {\n-            setLoggerAdapter(new Log4jLoggerAdapter());\n-        } else if (\"jdk\".equals(logger)) {\n-            setLoggerAdapter(new JdkLoggerAdapter());\n-        } else if (\"log4j2\".equals(logger)) {\n-            setLoggerAdapter(new Log4j2LoggerAdapter());\n-        } else {\n-            try {\n+        String logger = System.getProperty(\"dubbo.application.logger\", \"\");\n+        switch (logger) {\n+            case \"slf4j\":\n+                setLoggerAdapter(new Slf4jLoggerAdapter());\n+                break;\n+            case \"jcl\":\n+                setLoggerAdapter(new JclLoggerAdapter());\n+                break;\n+            case \"log4j\":\n                 setLoggerAdapter(new Log4jLoggerAdapter());\n-            } catch (Throwable e1) {\n-                try {\n-                    setLoggerAdapter(new Slf4jLoggerAdapter());\n-                } catch (Throwable e2) {\n+                break;\n+            case \"jdk\":\n+                setLoggerAdapter(new JdkLoggerAdapter());\n+                break;\n+            case \"log4j2\":\n+                setLoggerAdapter(new Log4j2LoggerAdapter());\n+                break;\n+            default:\n+                List<Class<? extends LoggerAdapter>> candidates = Arrays.asList(\n+                        Log4jLoggerAdapter.class,\n+                        Slf4jLoggerAdapter.class,\n+                        Log4j2LoggerAdapter.class,\n+                        JclLoggerAdapter.class,\n+                        JdkLoggerAdapter.class\n+                );\n+                for (Class<? extends LoggerAdapter> clazz : candidates) {\n                     try {\n-                        setLoggerAdapter(new Log4j2LoggerAdapter());\n-                    } catch (Throwable e3) {\n-                        try {\n-                            setLoggerAdapter(new JclLoggerAdapter());\n-                        } catch (Throwable e4) {\n-                            setLoggerAdapter(new JdkLoggerAdapter());\n-                        }\n+                        setLoggerAdapter(clazz.newInstance());\n+                        break;\n+                    } catch (Throwable ignored) {\n                     }\n                 }\n-            }\n         }\n     }\n \n@@ -103,12 +108,7 @@ public static void setLoggerAdapter(LoggerAdapter loggerAdapter) {\n      * @return logger\n      */\n     public static Logger getLogger(Class<?> key) {\n-        FailsafeLogger logger = LOGGERS.get(key.getName());\n-        if (logger == null) {\n-            LOGGERS.putIfAbsent(key.getName(), new FailsafeLogger(LOGGER_ADAPTER.getLogger(key)));\n-            logger = LOGGERS.get(key.getName());\n-        }\n-        return logger;\n+        return LOGGERS.computeIfAbsent(key.getName(), name -> new FailsafeLogger(LOGGER_ADAPTER.getLogger(name)));\n     }\n \n     /**\n@@ -118,12 +118,7 @@ public static Logger getLogger(Class<?> key) {\n      * @return logger provider\n      */\n     public static Logger getLogger(String key) {\n-        FailsafeLogger logger = LOGGERS.get(key);\n-        if (logger == null) {\n-            LOGGERS.putIfAbsent(key, new FailsafeLogger(LOGGER_ADAPTER.getLogger(key)));\n-            logger = LOGGERS.get(key);\n-        }\n-        return logger;\n+        return LOGGERS.computeIfAbsent(key, k -> new FailsafeLogger(LOGGER_ADAPTER.getLogger(k)));\n     }\n \n     /**\n@@ -153,4 +148,4 @@ public static File getFile() {\n         return LOGGER_ADAPTER.getFile();\n     }\n \n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/logger/LoggerFactory.java",
                "sha": "41d1632eacce40476a714710bd71003cf7150bd6",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 36,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java",
                "patch": "@@ -24,13 +24,13 @@\n \r\n import java.io.File;\r\n import java.io.FileOutputStream;\r\n-import java.io.IOException;\r\n import java.text.SimpleDateFormat;\r\n import java.util.Date;\r\n import java.util.concurrent.Executors;\r\n import java.util.concurrent.RejectedExecutionException;\r\n import java.util.concurrent.Semaphore;\r\n import java.util.concurrent.ThreadPoolExecutor;\r\n+import java.util.concurrent.ExecutorService;\r\n \r\n /**\r\n  * Abort Policy.\r\n@@ -78,43 +78,34 @@ private void dumpJStack() {\n             return;\r\n         }\r\n \r\n-        Executors.newSingleThreadExecutor().execute(new Runnable() {\r\n-            @Override\r\n-            public void run() {\r\n-                String dumpPath = url.getParameter(Constants.DUMP_DIRECTORY, System.getProperty(\"user.home\"));\r\n-\r\n-                SimpleDateFormat sdf;\r\n-\r\n-                String OS = System.getProperty(\"os.name\").toLowerCase();\r\n-\r\n-                // window system don't support \":\" in file name\r\n-                if(OS.contains(\"win\")){\r\n-                    sdf = new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\");\r\n-                }else {\r\n-                    sdf = new SimpleDateFormat(\"yyyy-MM-dd_HH:mm:ss\");\r\n-                }\r\n-\r\n-                String dateStr = sdf.format(new Date());\r\n-                FileOutputStream jstackStream = null;\r\n-                try {\r\n-                    jstackStream = new FileOutputStream(new File(dumpPath, \"Dubbo_JStack.log\" + \".\" + dateStr));\r\n-                    JVMUtil.jstack(jstackStream);\r\n-                } catch (Throwable t) {\r\n-                    logger.error(\"dump jstack error\", t);\r\n-                } finally {\r\n-                    guard.release();\r\n-                    if (jstackStream != null) {\r\n-                        try {\r\n-                            jstackStream.flush();\r\n-                            jstackStream.close();\r\n-                        } catch (IOException e) {\r\n-                        }\r\n-                    }\r\n-                }\r\n-\r\n-                lastPrintTime = System.currentTimeMillis();\r\n+        ExecutorService pool = Executors.newSingleThreadExecutor();\r\n+        pool.execute(() -> {\r\n+            String dumpPath = url.getParameter(Constants.DUMP_DIRECTORY, System.getProperty(\"user.home\"));\r\n+\r\n+            SimpleDateFormat sdf;\r\n+\r\n+            String os = System.getProperty(\"os.name\").toLowerCase();\r\n+\r\n+            // window system don't support \":\" in file name\r\n+            if (os.contains(\"win\")) {\r\n+                sdf = new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\");\r\n+            } else {\r\n+                sdf = new SimpleDateFormat(\"yyyy-MM-dd_HH:mm:ss\");\r\n+            }\r\n+\r\n+            String dateStr = sdf.format(new Date());\r\n+            //try-with-resources\r\n+            try (FileOutputStream jStackStream = new FileOutputStream(new File(dumpPath, \"Dubbo_JStack.log\" + \".\" + dateStr))) {\r\n+                JVMUtil.jstack(jStackStream);\r\n+            } catch (Throwable t) {\r\n+                logger.error(\"dump jStack error\", t);\r\n+            } finally {\r\n+                guard.release();\r\n             }\r\n+            lastPrintTime = System.currentTimeMillis();\r\n         });\r\n+        //must shutdown thread pool ,if not will lead to OOM\r\n+        pool.shutdown();\r\n \r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java",
                "sha": "8a137613f17fbcc7ca485e63943fd61f7339442c",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 8,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java",
                "patch": "@@ -25,9 +25,9 @@\n import java.util.Locale;\n import java.util.Queue;\n import java.util.Set;\n-import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.TimeUnit;\n@@ -109,8 +109,8 @@\n     private final HashedWheelBucket[] wheel;\n     private final int mask;\n     private final CountDownLatch startTimeInitialized = new CountDownLatch(1);\n-    private final Queue<HashedWheelTimeout> timeouts = new ArrayBlockingQueue<HashedWheelTimeout>(1024);\n-    private final Queue<HashedWheelTimeout> cancelledTimeouts = new ArrayBlockingQueue<HashedWheelTimeout>(1024);\n+    private final Queue<HashedWheelTimeout> timeouts = new LinkedBlockingQueue<>();\n+    private final Queue<HashedWheelTimeout> cancelledTimeouts = new LinkedBlockingQueue<>();\n     private final AtomicLong pendingTimeouts = new AtomicLong(0);\n     private final long maxPendingTimeouts;\n \n@@ -290,11 +290,13 @@ protected void finalize() throws Throwable {\n     }\n \n     private static int normalizeTicksPerWheel(int ticksPerWheel) {\n-        int normalizedTicksPerWheel = 1;\n-        while (normalizedTicksPerWheel < ticksPerWheel) {\n-            normalizedTicksPerWheel <<= 1;\n-        }\n-        return normalizedTicksPerWheel;\n+        int normalizedTicksPerWheel = ticksPerWheel - 1;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 1;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 2;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 4;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 8;\n+        normalizedTicksPerWheel |= normalizedTicksPerWheel >>> 16;\n+        return normalizedTicksPerWheel + 1;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java",
                "sha": "3abeb660a6464b6cdd4d7627ec9607fc89412d8e",
                "status": "modified"
            },
            {
                "additions": 140,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CIDRUtils.java",
                "changes": 140,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CIDRUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CIDRUtils.java",
                "patch": "@@ -0,0 +1,140 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2013 Edin Dazdarevic (edin.dazdarevic@gmail.com)\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ *\n+ **/\n+package org.apache.dubbo.common.utils;\n+\n+import java.math.BigInteger;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A class that enables to get an IP range from CIDR specification. It supports\n+ * both IPv4 and IPv6.\n+ * <p>\n+ * From https://github.com/edazdarevic/CIDRUtils/blob/master/CIDRUtils.java\n+ */\n+public class CIDRUtils {\n+    private final String cidr;\n+\n+    private InetAddress inetAddress;\n+    private InetAddress startAddress;\n+    private InetAddress endAddress;\n+    private final int prefixLength;\n+\n+\n+    public CIDRUtils(String cidr) throws UnknownHostException {\n+\n+        this.cidr = cidr;\n+\n+        /* split CIDR to address and prefix part */\n+        if (this.cidr.contains(\"/\")) {\n+            int index = this.cidr.indexOf(\"/\");\n+            String addressPart = this.cidr.substring(0, index);\n+            String networkPart = this.cidr.substring(index + 1);\n+\n+            inetAddress = InetAddress.getByName(addressPart);\n+            prefixLength = Integer.parseInt(networkPart);\n+\n+            calculate();\n+        } else {\n+            throw new IllegalArgumentException(\"not an valid CIDR format!\");\n+        }\n+    }\n+\n+\n+    private void calculate() throws UnknownHostException {\n+\n+        ByteBuffer maskBuffer;\n+        int targetSize;\n+        if (inetAddress.getAddress().length == 4) {\n+            maskBuffer =\n+                    ByteBuffer\n+                            .allocate(4)\n+                            .putInt(-1);\n+            targetSize = 4;\n+        } else {\n+            maskBuffer = ByteBuffer.allocate(16)\n+                    .putLong(-1L)\n+                    .putLong(-1L);\n+            targetSize = 16;\n+        }\n+\n+        BigInteger mask = (new BigInteger(1, maskBuffer.array())).not().shiftRight(prefixLength);\n+\n+        ByteBuffer buffer = ByteBuffer.wrap(inetAddress.getAddress());\n+        BigInteger ipVal = new BigInteger(1, buffer.array());\n+\n+        BigInteger startIp = ipVal.and(mask);\n+        BigInteger endIp = startIp.add(mask.not());\n+\n+        byte[] startIpArr = toBytes(startIp.toByteArray(), targetSize);\n+        byte[] endIpArr = toBytes(endIp.toByteArray(), targetSize);\n+\n+        this.startAddress = InetAddress.getByAddress(startIpArr);\n+        this.endAddress = InetAddress.getByAddress(endIpArr);\n+\n+    }\n+\n+    private byte[] toBytes(byte[] array, int targetSize) {\n+        int counter = 0;\n+        List<Byte> newArr = new ArrayList<Byte>();\n+        while (counter < targetSize && (array.length - 1 - counter >= 0)) {\n+            newArr.add(0, array[array.length - 1 - counter]);\n+            counter++;\n+        }\n+\n+        int size = newArr.size();\n+        for (int i = 0; i < (targetSize - size); i++) {\n+\n+            newArr.add(0, (byte) 0);\n+        }\n+\n+        byte[] ret = new byte[newArr.size()];\n+        for (int i = 0; i < newArr.size(); i++) {\n+            ret[i] = newArr.get(i);\n+        }\n+        return ret;\n+    }\n+\n+    public String getNetworkAddress() {\n+\n+        return this.startAddress.getHostAddress();\n+    }\n+\n+    public String getBroadcastAddress() {\n+        return this.endAddress.getHostAddress();\n+    }\n+\n+    public boolean isInRange(String ipAddress) throws UnknownHostException {\n+        InetAddress address = InetAddress.getByName(ipAddress);\n+        BigInteger start = new BigInteger(1, this.startAddress.getAddress());\n+        BigInteger end = new BigInteger(1, this.endAddress.getAddress());\n+        BigInteger target = new BigInteger(1, address.getAddress());\n+\n+        int st = start.compareTo(target);\n+        int te = target.compareTo(end);\n+\n+        return (st == -1 || st == 0) && (te == -1 || te == 0);\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CIDRUtils.java",
                "sha": "5d9dc8bcbdf1cce2a0603734ba86106f540872f2",
                "status": "added"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassHelper.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassHelper.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 15,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassHelper.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.dubbo.common.utils;\n \n+\n import java.lang.reflect.Array;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n@@ -104,8 +105,7 @@ public static ClassLoader getClassLoader(Class<?> clazz) {\n                 // getClassLoader() returning null indicates the bootstrap ClassLoader\n                 try {\n                     cl = ClassLoader.getSystemClassLoader();\n-                }\n-                catch (Throwable ex) {\n+                } catch (Throwable ex) {\n                     // Cannot access system ClassLoader - oh well, maybe the caller can live with null...\n                 }\n             }\n@@ -265,26 +265,34 @@ public static boolean isPrimitive(Class<?> type) {\n     }\n \n     public static Object convertPrimitive(Class<?> type, String value) {\n-        if (type == char.class || type == Character.class) {\n+        if (value == null) {\n+            return null;\n+        } else if (type == char.class || type == Character.class) {\n             return value.length() > 0 ? value.charAt(0) : '\\0';\n         } else if (type == boolean.class || type == Boolean.class) {\n             return Boolean.valueOf(value);\n-        } else if (type == byte.class || type == Byte.class) {\n-            return Byte.valueOf(value);\n-        } else if (type == short.class || type == Short.class) {\n-            return Short.valueOf(value);\n-        } else if (type == int.class || type == Integer.class) {\n-            return Integer.valueOf(value);\n-        } else if (type == long.class || type == Long.class) {\n-            return Long.valueOf(value);\n-        } else if (type == float.class || type == Float.class) {\n-            return Float.valueOf(value);\n-        } else if (type == double.class || type == Double.class) {\n-            return Double.valueOf(value);\n+        }\n+        try {\n+            if (type == byte.class || type == Byte.class) {\n+                return Byte.valueOf(value);\n+            } else if (type == short.class || type == Short.class) {\n+                return Short.valueOf(value);\n+            } else if (type == int.class || type == Integer.class) {\n+                return Integer.valueOf(value);\n+            } else if (type == long.class || type == Long.class) {\n+                return Long.valueOf(value);\n+            } else if (type == float.class || type == Float.class) {\n+                return Float.valueOf(value);\n+            } else if (type == double.class || type == Double.class) {\n+                return Double.valueOf(value);\n+            }\n+        } catch (NumberFormatException e) {\n+            return null;\n         }\n         return value;\n     }\n \n+\n     /**\n      * We only check boolean value at this moment.\n      *",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassHelper.java",
                "sha": "d249645c2bf1e11d5d0b1b42875d8714d859fc7a",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
                "patch": "@@ -55,7 +55,7 @@ private CollectionUtils() {\n \r\n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\r\n     public static <T> List<T> sort(List<T> list) {\r\n-        if (list != null && !list.isEmpty()) {\r\n+        if (isNotEmpty(list)) {\r\n             Collections.sort((List) list);\r\n         }\r\n         return list;\r\n@@ -120,7 +120,7 @@ private CollectionUtils() {\n         for (Map.Entry<String, String> entry : map.entrySet()) {\r\n             String key = entry.getKey();\r\n             String value = entry.getValue();\r\n-            if (value == null || value.length() == 0) {\r\n+            if (StringUtils.isEmpty(value)) {\r\n                 list.add(key);\r\n             } else {\r\n                 list.add(key + separator + value);\r\n@@ -206,7 +206,15 @@ public static boolean isEmpty(Collection<?> collection) {\n     }\r\n \r\n     public static boolean isNotEmpty(Collection<?> collection) {\r\n-        return collection != null && !collection.isEmpty();\r\n+        return !isEmpty(collection);\r\n+    }\r\n+\r\n+    public static boolean isEmptyMap(Map map) {\r\n+        return map == null || map.size() == 0;\r\n+    }\r\n+\r\n+    public static boolean isNotEmptyMap(Map map) {\r\n+        return !isEmptyMap(map);\r\n     }\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CollectionUtils.java",
                "sha": "40baecdd2dbf94c69aa45309e456c769cae680fb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 9,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "patch": "@@ -104,15 +104,10 @@ public static Object compatibleTypeConvert(Object value, Class<?> type) {\n                 // Process string to char array for generic invoke\r\n                 // See\r\n                 // - https://github.com/apache/incubator-dubbo/issues/2003\r\n-                if (string == null) {\r\n-                    return null;\r\n-                }\r\n-                else {\r\n-                    int len = string.length();\r\n-                    char[] chars = new char[len];\r\n-                    string.getChars(0, len, chars, 0);\r\n-                    return chars;\r\n-                }\r\n+                int len = string.length();\r\n+                char[] chars = new char[len];\r\n+                string.getChars(0, len, chars, 0);\r\n+                return chars;\r\n             }\r\n         } else if (value instanceof Number) {\r\n             Number number = (Number) value;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/CompatibleTypeUtils.java",
                "sha": "efc570fe9251c7ca6743d8af4ca108dd05dd02f5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java",
                "patch": "@@ -50,7 +50,7 @@ public static boolean isNotEmpty(String value) {\n     }\r\n \r\n     public static boolean isEmpty(String value) {\r\n-        return value == null || value.length() == 0\r\n+        return StringUtils.isEmpty(value)\r\n                 || \"false\".equalsIgnoreCase(value)\r\n                 || \"0\".equalsIgnoreCase(value)\r\n                 || \"null\".equalsIgnoreCase(value)\r\n@@ -190,7 +190,7 @@ public static String getProperty(String key, String defaultValue) {\n      */\r\n     public static String getSystemProperty(String key) {\r\n         String value = System.getenv(key);\r\n-        if (value == null || value.length() == 0) {\r\n+        if (StringUtils.isEmpty(value)) {\r\n             value = System.getProperty(key);\r\n         }\r\n         return value;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConfigUtils.java",
                "sha": "0c68512c20edf3094a276fd0b6d6914eba12265e",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/DubboAppender.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/DubboAppender.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/DubboAppender.java",
                "patch": "@@ -16,17 +16,24 @@\n  */\r\n package org.apache.dubbo.common.utils;\r\n \r\n-import org.apache.log4j.ConsoleAppender;\r\n+import org.apache.log4j.FileAppender;\r\n import org.apache.log4j.spi.LoggingEvent;\r\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n-public class DubboAppender extends ConsoleAppender {\r\n+public class DubboAppender extends FileAppender {\r\n+\r\n+    private static final String DEFAULT_FILE_NAME = \"dubbo.log\";\r\n+\r\n+    public DubboAppender() {\r\n+        super();\r\n+        setFile(DEFAULT_FILE_NAME);\r\n+    }\r\n \r\n     public static boolean available = false;\r\n \r\n-    public static List<Log> logList = new ArrayList<Log>();\r\n+    public static List<Log> logList = new ArrayList<>();\r\n \r\n     public static void doStart() {\r\n         available = true;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/DubboAppender.java",
                "sha": "e2b1940a7e4b93f4c8800fd1cf425d5641651af9",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ExecutorUtil.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ExecutorUtil.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ExecutorUtil.java",
                "patch": "@@ -26,6 +26,7 @@\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.ThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.ScheduledFuture;\n \n public class ExecutorUtil {\n     private static final Logger logger = LoggerFactory.getLogger(ExecutorUtil.class);\n@@ -45,9 +46,10 @@ public static boolean isTerminated(Executor executor) {\n \n     /**\n      * Use the shutdown pattern from:\n-     *  https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html\n+     * https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html\n+     *\n      * @param executor the Executor to shutdown\n-     * @param timeout the timeout in milliseconds before termination\n+     * @param timeout  the timeout in milliseconds before termination\n      */\n     public static void gracefulShutdown(Executor executor, int timeout) {\n         if (!(executor instanceof ExecutorService) || isTerminated(executor)) {\n@@ -131,4 +133,11 @@ public static URL setThreadName(URL url, String defaultName) {\n         url = url.addParameter(Constants.THREAD_NAME_KEY, name);\n         return url;\n     }\n+\n+    public static void cancelScheduledFuture(ScheduledFuture<?> scheduledFuture) {\n+        ScheduledFuture<?> future = scheduledFuture;\n+        if (future != null && !future.isCancelled()) {\n+            future.cancel(true);\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ExecutorUtil.java",
                "sha": "14408dacf6413ab1e7262b204937cc8e7e926685",
                "status": "modified"
            },
            {
                "additions": 220,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "changes": 279,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 59,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "patch": "@@ -16,62 +16,60 @@\n  */\r\n package org.apache.dubbo.common.utils;\r\n \r\n+import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.common.URL;\r\n import org.apache.dubbo.common.logger.Logger;\r\n import org.apache.dubbo.common.logger.LoggerFactory;\r\n \r\n import java.io.IOException;\r\n+import java.net.Inet4Address;\r\n import java.net.Inet6Address;\r\n import java.net.InetAddress;\r\n import java.net.InetSocketAddress;\r\n+import java.net.MulticastSocket;\r\n import java.net.NetworkInterface;\r\n import java.net.ServerSocket;\r\n import java.net.UnknownHostException;\r\n import java.util.Enumeration;\r\n import java.util.Map;\r\n-import java.util.Random;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ThreadLocalRandom;\r\n import java.util.regex.Pattern;\r\n \r\n /**\r\n  * IP and Port Helper for RPC\r\n  */\r\n public class NetUtils {\r\n-\r\n-    public static final String LOCALHOST = \"127.0.0.1\";\r\n-    public static final String ANYHOST = \"0.0.0.0\";\r\n     private static final Logger logger = LoggerFactory.getLogger(NetUtils.class);\r\n-    private static final int RND_PORT_START = 30000;\r\n \r\n+    // returned port range is [30000, 39999]\r\n+    private static final int RND_PORT_START = 30000;\r\n     private static final int RND_PORT_RANGE = 10000;\r\n \r\n-    private static final Random RANDOM = new Random(System.currentTimeMillis());\r\n+    // valid port range is (0, 65535]\r\n     private static final int MIN_PORT = 0;\r\n     private static final int MAX_PORT = 65535;\r\n+\r\n     private static final Pattern ADDRESS_PATTERN = Pattern.compile(\"^\\\\d{1,3}(\\\\.\\\\d{1,3}){3}\\\\:\\\\d{1,5}$\");\r\n     private static final Pattern LOCAL_IP_PATTERN = Pattern.compile(\"127(\\\\.\\\\d{1,3}){3}$\");\r\n     private static final Pattern IP_PATTERN = Pattern.compile(\"\\\\d{1,3}(\\\\.\\\\d{1,3}){3,5}$\");\r\n-    private static final Map<String, String> hostNameCache = new LRUCache<String, String>(1000);\r\n+\r\n+    private static final Map<String, String> hostNameCache = new LRUCache<>(1000);\r\n     private static volatile InetAddress LOCAL_ADDRESS = null;\r\n \r\n+    private static final String SPLIT_IPV4_CHARECTER = \"\\\\.\";\r\n+    private static final String SPLIT_IPV6_CHARECTER = \":\";\r\n+\r\n     public static int getRandomPort() {\r\n-        return RND_PORT_START + RANDOM.nextInt(RND_PORT_RANGE);\r\n+        return RND_PORT_START + ThreadLocalRandom.current().nextInt(RND_PORT_RANGE);\r\n     }\r\n \r\n     public static int getAvailablePort() {\r\n-        ServerSocket ss = null;\r\n-        try {\r\n-            ss = new ServerSocket();\r\n+        try (ServerSocket ss = new ServerSocket()) {\r\n             ss.bind(null);\r\n             return ss.getLocalPort();\r\n         } catch (IOException e) {\r\n             return getRandomPort();\r\n-        } finally {\r\n-            if (ss != null) {\r\n-                try {\r\n-                    ss.close();\r\n-                } catch (IOException e) {\r\n-                }\r\n-            }\r\n         }\r\n     }\r\n \r\n@@ -80,19 +78,10 @@ public static int getAvailablePort(int port) {\n             return getAvailablePort();\r\n         }\r\n         for (int i = port; i < MAX_PORT; i++) {\r\n-            ServerSocket ss = null;\r\n-            try {\r\n-                ss = new ServerSocket(i);\r\n+            try (ServerSocket ss = new ServerSocket(i)) {\r\n                 return i;\r\n             } catch (IOException e) {\r\n                 // continue\r\n-            } finally {\r\n-                if (ss != null) {\r\n-                    try {\r\n-                        ss.close();\r\n-                    } catch (IOException e) {\r\n-                    }\r\n-                }\r\n             }\r\n         }\r\n         return port;\r\n@@ -109,21 +98,23 @@ public static boolean isValidAddress(String address) {\n     public static boolean isLocalHost(String host) {\r\n         return host != null\r\n                 && (LOCAL_IP_PATTERN.matcher(host).matches()\r\n-                || host.equalsIgnoreCase(\"localhost\"));\r\n+                || host.equalsIgnoreCase(Constants.LOCALHOST_KEY));\r\n     }\r\n \r\n     public static boolean isAnyHost(String host) {\r\n-        return \"0.0.0.0\".equals(host);\r\n+        return Constants.ANYHOST_VALUE.equals(host);\r\n     }\r\n \r\n+    // FIXME: should remove this method completely\r\n     public static boolean isInvalidLocalHost(String host) {\r\n         return host == null\r\n                 || host.length() == 0\r\n-                || host.equalsIgnoreCase(\"localhost\")\r\n-                || host.equals(\"0.0.0.0\")\r\n+                || host.equalsIgnoreCase(Constants.LOCALHOST_KEY)\r\n+                || host.equals(Constants.ANYHOST_VALUE)\r\n                 || (LOCAL_IP_PATTERN.matcher(host).matches());\r\n     }\r\n \r\n+    // FIXME: should remove this method completely\r\n     public static boolean isValidLocalHost(String host) {\r\n         return !isInvalidLocalHost(host);\r\n     }\r\n@@ -133,19 +124,17 @@ public static InetSocketAddress getLocalSocketAddress(String host, int port) {\n                 new InetSocketAddress(port) : new InetSocketAddress(host, port);\r\n     }\r\n \r\n-    static boolean isValidAddress(InetAddress address) {\r\n-        if (address == null || address.isLoopbackAddress()) {\r\n-            return false;\r\n-        }\r\n+    static boolean isValidV4Address(InetAddress address) {\r\n         String name = address.getHostAddress();\r\n         return (name != null\r\n-                && !ANYHOST.equals(name)\r\n-                && !LOCALHOST.equals(name)\r\n-                && IP_PATTERN.matcher(name).matches());\r\n+                && IP_PATTERN.matcher(name).matches()\r\n+                && !Constants.ANYHOST_VALUE.equals(name)\r\n+                && !Constants.LOCALHOST_VALUE.equals(name));\r\n     }\r\n \r\n     /**\r\n      * Check if an ipv6 address is reachable.\r\n+     *\r\n      * @param address the given address\r\n      * @return true if it is reachable\r\n      */\r\n@@ -162,16 +151,21 @@ static boolean isValidV6Address(Inet6Address address) {\n         return false;\r\n     }\r\n \r\n+    static boolean isValidPublicAddress(InetAddress address) {\r\n+        return !address.isSiteLocalAddress() && !address.isLoopbackAddress();\r\n+    }\r\n+\r\n     /**\r\n      * normalize the ipv6 Address, convert scope name to scope id.\r\n      * e.g.\r\n      * convert\r\n-     *   fe80:0:0:0:894:aeec:f37d:23e1%en0\r\n+     * fe80:0:0:0:894:aeec:f37d:23e1%en0\r\n      * to\r\n-     *   fe80:0:0:0:894:aeec:f37d:23e1%5\r\n-     *\r\n+     * fe80:0:0:0:894:aeec:f37d:23e1%5\r\n+     * <p>\r\n      * The %5 after ipv6 address is called scope id.\r\n      * see java doc of {@link Inet6Address} for more details.\r\n+     *\r\n      * @param address the input address\r\n      * @return the normalized address, with scope id converted to int\r\n      */\r\n@@ -191,7 +185,7 @@ static InetAddress normalizeV6Address(Inet6Address address) {\n \r\n     public static String getLocalHost() {\r\n         InetAddress address = getLocalAddress();\r\n-        return address == null ? LOCALHOST : address.getHostAddress();\r\n+        return address == null ? Constants.LOCALHOST_VALUE : address.getHostAddress();\r\n     }\r\n \r\n     public static String filterLocalHost(String host) {\r\n@@ -230,21 +224,33 @@ public static InetAddress getLocalAddress() {\n         return localAddress;\r\n     }\r\n \r\n+    private static Optional<InetAddress> toValidAddress(InetAddress address) {\r\n+        if (isValidPublicAddress(address)) {\r\n+            if (address instanceof Inet6Address) {\r\n+                Inet6Address v6Address = (Inet6Address) address;\r\n+                if (isValidV6Address(v6Address)) {\r\n+                    return Optional.ofNullable(normalizeV6Address(v6Address));\r\n+                }\r\n+            }\r\n+            if (isValidV4Address(address)) {\r\n+                return Optional.of(address);\r\n+            }\r\n+        }\r\n+        return Optional.empty();\r\n+    }\r\n+\r\n     private static InetAddress getLocalAddress0() {\r\n         InetAddress localAddress = null;\r\n         try {\r\n             localAddress = InetAddress.getLocalHost();\r\n-            if (localAddress instanceof Inet6Address) {\r\n-                Inet6Address address = (Inet6Address) localAddress;\r\n-                if (isValidV6Address(address)){\r\n-                    return normalizeV6Address(address);\r\n-                }\r\n-            } else if (isValidAddress(localAddress)) {\r\n-                return localAddress;\r\n+            Optional<InetAddress> addressOp = toValidAddress(localAddress);\r\n+            if (addressOp.isPresent()) {\r\n+                return addressOp.get();\r\n             }\r\n         } catch (Throwable e) {\r\n             logger.warn(e);\r\n         }\r\n+\r\n         try {\r\n             Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\r\n             if (null == interfaces) {\r\n@@ -256,14 +262,9 @@ private static InetAddress getLocalAddress0() {\n                     Enumeration<InetAddress> addresses = network.getInetAddresses();\r\n                     while (addresses.hasMoreElements()) {\r\n                         try {\r\n-                            InetAddress address = addresses.nextElement();\r\n-                            if (address instanceof Inet6Address) {\r\n-                                Inet6Address v6Address = (Inet6Address) address;\r\n-                                if (isValidV6Address(v6Address)){\r\n-                                    return normalizeV6Address(v6Address);\r\n-                                }\r\n-                            } else if (isValidAddress(address)) {\r\n-                                return address;\r\n+                            Optional<InetAddress> addressOp = toValidAddress(addresses.nextElement());\r\n+                            if (addressOp.isPresent()) {\r\n+                                return addressOp.get();\r\n                             }\r\n                         } catch (Throwable e) {\r\n                             logger.warn(e);\r\n@@ -342,4 +343,164 @@ public static String toURL(String protocol, String host, int port, String path)\n         return sb.toString();\r\n     }\r\n \r\n-}\n\\ No newline at end of file\n+    public static void joinMulticastGroup(MulticastSocket multicastSocket, InetAddress multicastAddress) throws IOException {\r\n+        setInterface(multicastSocket, multicastAddress instanceof Inet6Address);\r\n+        multicastSocket.setLoopbackMode(false);\r\n+        multicastSocket.joinGroup(multicastAddress);\r\n+    }\r\n+\r\n+    public static void setInterface(MulticastSocket multicastSocket, boolean preferIpv6) throws IOException {\r\n+        boolean interfaceSet = false;\r\n+        Enumeration interfaces = NetworkInterface.getNetworkInterfaces();\r\n+        while (interfaces.hasMoreElements()) {\r\n+            NetworkInterface i = (NetworkInterface) interfaces.nextElement();\r\n+            Enumeration addresses = i.getInetAddresses();\r\n+            while (addresses.hasMoreElements()) {\r\n+                InetAddress address = (InetAddress) addresses.nextElement();\r\n+                if (preferIpv6 && address instanceof Inet6Address) {\r\n+                    multicastSocket.setInterface(address);\r\n+                    interfaceSet = true;\r\n+                    break;\r\n+                } else if (!preferIpv6 && address instanceof Inet4Address) {\r\n+                    multicastSocket.setInterface(address);\r\n+                    interfaceSet = true;\r\n+                    break;\r\n+                }\r\n+            }\r\n+            if (interfaceSet) {\r\n+                break;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public static boolean matchIpExpression(String pattern, String host, int port) throws UnknownHostException {\r\n+\r\n+        // if the pattern is subnet format, it will not be allowed to config port param in pattern.\r\n+        if (pattern.contains(\"/\")) {\r\n+            CIDRUtils utils = new CIDRUtils(pattern);\r\n+            return utils.isInRange(host);\r\n+        }\r\n+\r\n+\r\n+        return matchIpRange(pattern, host, port);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param pattern\r\n+     * @param host\r\n+     * @param port\r\n+     * @return\r\n+     * @throws UnknownHostException\r\n+     */\r\n+    public static boolean matchIpRange(String pattern, String host, int port) throws UnknownHostException {\r\n+        if (pattern == null || host == null) {\r\n+            throw new IllegalArgumentException(\"Illegal Argument pattern or hostName. Pattern:\" + pattern + \", Host:\" + host);\r\n+        }\r\n+        pattern = pattern.trim();\r\n+        if (pattern.equals(\"*.*.*.*\") || pattern.equals(\"*\")) {\r\n+            return true;\r\n+        }\r\n+\r\n+        InetAddress inetAddress = InetAddress.getByName(host);\r\n+        boolean isIpv4 = isValidV4Address(inetAddress) ? true : false;\r\n+        String[] hostAndPort = getPatternHostAndPort(pattern, isIpv4);\r\n+        if (hostAndPort[1] != null && !hostAndPort[1].equals(String.valueOf(port))) {\r\n+            return false;\r\n+        }\r\n+        pattern = hostAndPort[0];\r\n+\r\n+        String splitCharacter = SPLIT_IPV4_CHARECTER;\r\n+        if (!isIpv4) {\r\n+            splitCharacter = SPLIT_IPV6_CHARECTER;\r\n+        }\r\n+        String[] mask = pattern.split(splitCharacter);\r\n+        //check format of pattern\r\n+        checkHostPattern(pattern, mask, isIpv4);\r\n+\r\n+        host = inetAddress.getHostAddress();\r\n+\r\n+        String[] ip_address = host.split(splitCharacter);\r\n+        if (pattern.equals(host)) {\r\n+            return true;\r\n+        }\r\n+        // short name condition\r\n+        if (!ipPatternContainExpression(pattern)) {\r\n+            InetAddress patternAddress = InetAddress.getByName(pattern);\r\n+            if (patternAddress.getHostAddress().equals(host)) {\r\n+                return true;\r\n+            } else {\r\n+                return false;\r\n+            }\r\n+        }\r\n+        for (int i = 0; i < mask.length; i++) {\r\n+            if (mask[i].equals(\"*\") || mask[i].equals(ip_address[i])) {\r\n+                continue;\r\n+            } else if (mask[i].contains(\"-\")) {\r\n+                String[] rangeNumStrs = mask[i].split(\"-\");\r\n+                if (rangeNumStrs.length != 2) {\r\n+                    throw new IllegalArgumentException(\"There is wrong format of ip Address: \" + mask[i]);\r\n+                }\r\n+                Integer min = getNumOfIpSegment(rangeNumStrs[0], isIpv4);\r\n+                Integer max = getNumOfIpSegment(rangeNumStrs[1], isIpv4);\r\n+                Integer ip = getNumOfIpSegment(ip_address[i], isIpv4);\r\n+                if (ip < min || ip > max) {\r\n+                    return false;\r\n+                }\r\n+            } else if (\"0\".equals(ip_address[i]) && (\"0\".equals(mask[i]) || \"00\".equals(mask[i]) || \"000\".equals(mask[i]) || \"0000\".equals(mask[i]))) {\r\n+                continue;\r\n+            } else if (!mask[i].equals(ip_address[i])) {\r\n+                return false;\r\n+            }\r\n+        }\r\n+        return true;\r\n+    }\r\n+\r\n+    private static boolean ipPatternContainExpression(String pattern) {\r\n+        return pattern.contains(\"*\") || pattern.contains(\"-\");\r\n+    }\r\n+\r\n+    private static void checkHostPattern(String pattern, String[] mask, boolean isIpv4) {\r\n+        if (!isIpv4) {\r\n+            if (mask.length != 8 && ipPatternContainExpression(pattern)) {\r\n+                throw new IllegalArgumentException(\"If you config ip expression that contains '*' or '-', please fill qulified ip pattern like 234e:0:4567:0:0:0:3d:*. \");\r\n+            }\r\n+            if (mask.length != 8 && !pattern.contains(\"::\")) {\r\n+                throw new IllegalArgumentException(\"The host is ipv6, but the pattern is not ipv6 pattern : \" + pattern);\r\n+            }\r\n+        } else {\r\n+            if (mask.length != 4) {\r\n+                throw new IllegalArgumentException(\"The host is ipv4, but the pattern is not ipv4 pattern : \" + pattern);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static String[] getPatternHostAndPort(String pattern, boolean isIpv4) {\r\n+        String[] result = new String[2];\r\n+        if (pattern.startsWith(\"[\") && pattern.contains(\"]:\")) {\r\n+            int end = pattern.indexOf(\"]:\");\r\n+            result[0] = pattern.substring(1, end);\r\n+            result[1] = pattern.substring(end + 2);\r\n+            return result;\r\n+        } else if (pattern.startsWith(\"[\") && pattern.endsWith(\"]\")) {\r\n+            result[0] = pattern.substring(1, pattern.length() - 1);\r\n+            result[1] = null;\r\n+            return result;\r\n+        } else if (isIpv4 && pattern.contains(\":\")) {\r\n+            int end = pattern.indexOf(\":\");\r\n+            result[0] = pattern.substring(0, end);\r\n+            result[1] = pattern.substring(end + 1);\r\n+            return result;\r\n+        } else {\r\n+            result[0] = pattern;\r\n+            return result;\r\n+        }\r\n+    }\r\n+\r\n+    private static Integer getNumOfIpSegment(String ipSegment, boolean isIpv4) {\r\n+        if (isIpv4) {\r\n+            return Integer.parseInt(ipSegment);\r\n+        }\r\n+        return Integer.parseInt(ipSegment, 16);\r\n+    }\r\n+\r\n+}\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java",
                "sha": "91f04b8a90dd81c2c85cbd077e75506d61f93e01",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "patch": "@@ -16,6 +16,9 @@\n  */\r\n package org.apache.dubbo.common.utils;\r\n \r\n+import org.apache.dubbo.common.logger.Logger;\r\n+import org.apache.dubbo.common.logger.LoggerFactory;\r\n+\r\n import java.lang.reflect.Array;\r\n import java.lang.reflect.Constructor;\r\n import java.lang.reflect.Field;\r\n@@ -57,6 +60,7 @@\n  */\r\n public class PojoUtils {\r\n \r\n+    private static final Logger logger = LoggerFactory.getLogger(PojoUtils.class);\r\n     private static final ConcurrentMap<String, Method> NAME_METHODS_CACHE = new ConcurrentHashMap<String, Method>();\r\n     private static final ConcurrentMap<Class<?>, ConcurrentMap<String, Field>> CLASS_FIELD_CACHE = new ConcurrentHashMap<Class<?>, ConcurrentMap<String, Field>>();\r\n \r\n@@ -457,9 +461,10 @@ private static Object realize0(Object pojo, Class<?> type, Type genericType, fin\n                                 try {\r\n                                     method.invoke(dest, value);\r\n                                 } catch (Exception e) {\r\n-                                    e.printStackTrace();\r\n-                                    throw new RuntimeException(\"Failed to set pojo \" + dest.getClass().getSimpleName() + \" property \" + name\r\n-                                            + \" value \" + value + \"(\" + value.getClass() + \"), cause: \" + e.getMessage(), e);\r\n+                                    String exceptionDescription = \"Failed to set pojo \" + dest.getClass().getSimpleName() + \" property \" + name\r\n+                                            + \" value \" + value + \"(\" + value.getClass() + \"), cause: \" + e.getMessage();\r\n+                                    logger.error(exceptionDescription, e);\r\n+                                    throw new RuntimeException(exceptionDescription, e);\r\n                                 }\r\n                             } else if (field != null) {\r\n                                 value = realize0(value, field.getType(), field.getGenericType(), history);\r\n@@ -515,7 +520,14 @@ private static Object newInstance(Class<?> cls) {\n         } catch (Throwable t) {\r\n             try {\r\n                 Constructor<?>[] constructors = cls.getDeclaredConstructors();\r\n-                if (constructors != null && constructors.length == 0) {\r\n+                /**\r\n+                 * From Javadoc java.lang.Class#getDeclaredConstructors\r\n+                 * This method returns an array of Constructor objects reflecting all the constructors\r\n+                 * declared by the class represented by this Class object.\r\n+                 * This method returns an array of length 0,\r\n+                 * if this Class object represents an interface, a primitive type, an array class, or void.\r\n+                 */\r\n+                if (constructors.length == 0) {\r\n                     throw new RuntimeException(\"Illegal constructor: \" + cls.getName());\r\n                 }\r\n                 Constructor<?> constructor = constructors[0];\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java",
                "sha": "18998dc623904afa5bf69301199c628dccbb9302",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 32,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "patch": "@@ -55,10 +55,9 @@ private StringUtils() {\n      * Gets a CharSequence length or {@code 0} if the CharSequence is\r\n      * {@code null}.\r\n      *\r\n-     * @param cs\r\n-     *            a CharSequence or {@code null}\r\n+     * @param cs a CharSequence or {@code null}\r\n      * @return CharSequence length or {@code 0} if the CharSequence is\r\n-     *         {@code null}.\r\n+     * {@code null}.\r\n      */\r\n     public static int length(final CharSequence cs) {\r\n         return cs == null ? 0 : cs.length();\r\n@@ -77,10 +76,10 @@ public static int length(final CharSequence cs) {\n      * StringUtils.repeat(\"a\", -2) = \"\"\r\n      * </pre>\r\n      *\r\n-     * @param str  the String to repeat, may be null\r\n-     * @param repeat  number of times to repeat str, negative treated as zero\r\n+     * @param str    the String to repeat, may be null\r\n+     * @param repeat number of times to repeat str, negative treated as zero\r\n      * @return a new String consisting of the original String repeated,\r\n-     *  {@code null} if null String input\r\n+     * {@code null} if null String input\r\n      */\r\n     public static String repeat(final String str, final int repeat) {\r\n         // Performance tuned for 2.0 (JDK1.4)\r\n@@ -101,9 +100,9 @@ public static String repeat(final String str, final int repeat) {\n \r\n         final int outputLength = inputLength * repeat;\r\n         switch (inputLength) {\r\n-            case 1 :\r\n+            case 1:\r\n                 return repeat(str.charAt(0), repeat);\r\n-            case 2 :\r\n+            case 2:\r\n                 final char ch0 = str.charAt(0);\r\n                 final char ch1 = str.charAt(1);\r\n                 final char[] output2 = new char[outputLength];\r\n@@ -112,7 +111,7 @@ public static String repeat(final String str, final int repeat) {\n                     output2[i + 1] = ch1;\r\n                 }\r\n                 return new String(output2);\r\n-            default :\r\n+            default:\r\n                 final StringBuilder buf = new StringBuilder(outputLength);\r\n                 for (int i = 0; i < repeat; i++) {\r\n                     buf.append(str);\r\n@@ -134,15 +133,15 @@ public static String repeat(final String str, final int repeat) {\n      * StringUtils.repeat(\"?\", \", \", 3)  = \"?, ?, ?\"\r\n      * </pre>\r\n      *\r\n-     * @param str        the String to repeat, may be null\r\n-     * @param separator  the String to inject, may be null\r\n-     * @param repeat     number of times to repeat str, negative treated as zero\r\n+     * @param str       the String to repeat, may be null\r\n+     * @param separator the String to inject, may be null\r\n+     * @param repeat    number of times to repeat str, negative treated as zero\r\n      * @return a new String consisting of the original String repeated,\r\n-     *  {@code null} if null String input\r\n+     * {@code null} if null String input\r\n      * @since 2.5\r\n      */\r\n     public static String repeat(final String str, final String separator, final int repeat) {\r\n-        if(str == null || separator == null) {\r\n+        if (str == null || separator == null) {\r\n             return repeat(str, repeat);\r\n         }\r\n         // given that repeat(String, int) is quite optimized, better to rely on it than try and splice this into it\r\n@@ -168,10 +167,10 @@ public static String repeat(final String str, final String separator, final int\n      * StringUtils.removeEnd(\"abc\", \"\")    = \"abc\"\r\n      * </pre>\r\n      *\r\n-     * @param str  the source String to search, may be null\r\n-     * @param remove  the String to search for and remove, may be null\r\n+     * @param str    the source String to search, may be null\r\n+     * @param remove the String to search for and remove, may be null\r\n      * @return the substring with the string removed if found,\r\n-     *  {@code null} if null String input\r\n+     * {@code null} if null String input\r\n      */\r\n     public static String removeEnd(final String str, final String remove) {\r\n         if (isAnyEmpty(str, remove)) {\r\n@@ -200,8 +199,8 @@ public static String removeEnd(final String str, final String remove) {\n      * consider using {@link #repeat(String, int)} instead.\r\n      * </p>\r\n      *\r\n-     * @param ch  character to repeat\r\n-     * @param repeat  number of times to repeat char, negative treated as zero\r\n+     * @param ch     character to repeat\r\n+     * @param repeat number of times to repeat char, negative treated as zero\r\n      * @return String with repeated character\r\n      * @see #repeat(String, int)\r\n      */\r\n@@ -234,8 +233,8 @@ public static String repeat(final char ch, final int repeat) {\n      * StringUtils.stripEnd(\"120.00\", \".0\")   = \"12\"\r\n      * </pre>\r\n      *\r\n-     * @param str  the String to remove characters from, may be null\r\n-     * @param stripChars  the set of characters to remove, null treated as whitespace\r\n+     * @param str        the String to remove characters from, may be null\r\n+     * @param stripChars the set of characters to remove, null treated as whitespace\r\n      * @return the stripped String, {@code null} if null String input\r\n      */\r\n     public static String stripEnd(final String str, final String stripChars) {\r\n@@ -274,12 +273,12 @@ public static String stripEnd(final String str, final String stripChars) {\n      * StringUtils.replace(\"aba\", \"a\", \"z\")   = \"zbz\"\r\n      * </pre>\r\n      *\r\n-     * @see #replace(String text, String searchString, String replacement, int max)\r\n-     * @param text  text to search and replace in, may be null\r\n-     * @param searchString  the String to search for, may be null\r\n+     * @param text         text to search and replace in, may be null\r\n+     * @param searchString the String to search for, may be null\r\n      * @param replacement  the String to replace it with, may be null\r\n      * @return the text with any replacements processed,\r\n-     *  {@code null} if null String input\r\n+     * {@code null} if null String input\r\n+     * @see #replace(String text, String searchString, String replacement, int max)\r\n      */\r\n     public static String replace(final String text, final String searchString, final String replacement) {\r\n         return replace(text, searchString, replacement, -1);\r\n@@ -306,12 +305,12 @@ public static String replace(final String text, final String searchString, final\n      * StringUtils.replace(\"abaa\", \"a\", \"z\", -1)  = \"zbzz\"\r\n      * </pre>\r\n      *\r\n-     * @param text  text to search and replace in, may be null\r\n-     * @param searchString  the String to search for, may be null\r\n+     * @param text         text to search and replace in, may be null\r\n+     * @param searchString the String to search for, may be null\r\n      * @param replacement  the String to replace it with, may be null\r\n-     * @param max  maximum number of values to replace, or {@code -1} if no maximum\r\n+     * @param max          maximum number of values to replace, or {@code -1} if no maximum\r\n      * @return the text with any replacements processed,\r\n-     *  {@code null} if null String input\r\n+     * {@code null} if null String input\r\n      */\r\n     public static String replace(final String text, final String searchString, final String replacement, int max) {\r\n         if (isAnyEmpty(text, searchString) || replacement == null || max == 0) {\r\n@@ -374,7 +373,7 @@ public static boolean isNoneEmpty(final String... ss) {\n         if (ArrayUtils.isEmpty(ss)) {\r\n             return false;\r\n         }\r\n-        for (final String s : ss){\r\n+        for (final String s : ss) {\r\n             if (isEmpty(s)) {\r\n                 return false;\r\n             }\r\n@@ -478,19 +477,28 @@ public static boolean isContains(String[] values, String value) {\n         return false;\r\n     }\r\n \r\n-    public static boolean isNumeric(String str) {\r\n-        if (str == null) {\r\n+    public static boolean isNumeric(String str, boolean allowDot) {\r\n+        if (str == null || str.isEmpty()) {\r\n             return false;\r\n         }\r\n+        boolean hasDot = false;\r\n         int sz = str.length();\r\n         for (int i = 0; i < sz; i++) {\r\n+            if (str.charAt(i) == '.') {\r\n+                if (hasDot || !allowDot) {\r\n+                    return false;\r\n+                }\r\n+                hasDot = true;\r\n+                continue;\r\n+            }\r\n             if (!Character.isDigit(str.charAt(i))) {\r\n                 return false;\r\n             }\r\n         }\r\n         return true;\r\n     }\r\n \r\n+\r\n     /**\r\n      * @param e\r\n      * @return string\r\n@@ -781,4 +789,8 @@ public static String toArgumentString(Object[] args) {\n         }\r\n         return buf.toString();\r\n     }\r\n+\r\n+    public static String trim(String str) {\r\n+        return str == null ? null : str.trim();\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/StringUtils.java",
                "sha": "a351346ef1a99afadd94f781b627e660cdead63a",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 18,
                "filename": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "patch": "@@ -63,22 +63,22 @@ public static URL parseURL(String address, Map<String, String> defaults) {\n                 url += URL_PARAM_STARTING_SYMBOL + Constants.BACKUP_KEY + \"=\" + backup.toString();\r\n             }\r\n         }\r\n-        String defaultProtocol = defaults == null ? null : defaults.get(\"protocol\");\r\n+        String defaultProtocol = defaults == null ? null : defaults.get(Constants.PROTOCOL_KEY);\r\n         if (defaultProtocol == null || defaultProtocol.length() == 0) {\r\n-            defaultProtocol = \"dubbo\";\r\n+            defaultProtocol = Constants.DUBBO_PROTOCOL;\r\n         }\r\n-        String defaultUsername = defaults == null ? null : defaults.get(\"username\");\r\n-        String defaultPassword = defaults == null ? null : defaults.get(\"password\");\r\n-        int defaultPort = StringUtils.parseInteger(defaults == null ? null : defaults.get(\"port\"));\r\n-        String defaultPath = defaults == null ? null : defaults.get(\"path\");\r\n+        String defaultUsername = defaults == null ? null : defaults.get(Constants.USERNAME_KEY);\r\n+        String defaultPassword = defaults == null ? null : defaults.get(Constants.PASSWORD_KEY);\r\n+        int defaultPort = StringUtils.parseInteger(defaults == null ? null : defaults.get(Constants.PORT_KEY));\r\n+        String defaultPath = defaults == null ? null : defaults.get(Constants.PATH_KEY);\r\n         Map<String, String> defaultParameters = defaults == null ? null : new HashMap<String, String>(defaults);\r\n         if (defaultParameters != null) {\r\n-            defaultParameters.remove(\"protocol\");\r\n-            defaultParameters.remove(\"username\");\r\n-            defaultParameters.remove(\"password\");\r\n-            defaultParameters.remove(\"host\");\r\n-            defaultParameters.remove(\"port\");\r\n-            defaultParameters.remove(\"path\");\r\n+            defaultParameters.remove(Constants.PROTOCOL_KEY);\r\n+            defaultParameters.remove(Constants.USERNAME_KEY);\r\n+            defaultParameters.remove(Constants.PASSWORD_KEY);\r\n+            defaultParameters.remove(Constants.HOST_KEY);\r\n+            defaultParameters.remove(Constants.PORT_KEY);\r\n+            defaultParameters.remove(Constants.PATH_KEY);\r\n         }\r\n         URL u = URL.valueOf(url);\r\n         boolean changed = false;\r\n@@ -126,7 +126,7 @@ public static URL parseURL(String address, Map<String, String> defaults) {\n                 String defaultValue = entry.getValue();\r\n                 if (defaultValue != null && defaultValue.length() > 0) {\r\n                     String value = parameters.get(key);\r\n-                    if (value == null || value.length() == 0) {\r\n+                    if (StringUtils.isEmpty(value)) {\r\n                         changed = true;\r\n                         parameters.put(key, defaultValue);\r\n                     }\r\n@@ -318,7 +318,7 @@ public static URL parseURL(String address, Map<String, String> defaults) {\n \r\n     //compatible for dubbo-2.0.0\r\n     public static List<String> revertForbid(List<String> forbid, Set<URL> subscribed) {\r\n-        if (forbid != null && !forbid.isEmpty()) {\r\n+        if (CollectionUtils.isNotEmpty(forbid)) {\r\n             List<String> newForbid = new ArrayList<String>();\r\n             for (String serviceName : forbid) {\r\n                 if (!serviceName.contains(\":\") && !serviceName.contains(\"/\")) {\r\n@@ -410,12 +410,10 @@ public static boolean isMatchGlobPattern(String pattern, String value) {\n         if (\"*\".equals(pattern)) {\r\n             return true;\r\n         }\r\n-        if ((pattern == null || pattern.length() == 0)\r\n-                && (value == null || value.length() == 0)) {\r\n+        if (StringUtils.isEmpty(pattern) && StringUtils.isEmpty(value)) {\r\n             return true;\r\n         }\r\n-        if ((pattern == null || pattern.length() == 0)\r\n-                || (value == null || value.length() == 0)) {\r\n+        if (StringUtils.isEmpty(pattern) || StringUtils.isEmpty(value)) {\r\n             return false;\r\n         }\r\n \r\n@@ -469,6 +467,19 @@ public static boolean isProvider(URL url) {\n                 PROVIDERS_CATEGORY.equals(url.getParameter(CATEGORY_KEY, PROVIDERS_CATEGORY));\r\n     }\r\n \r\n+    public static int getHeartbeat(URL url) {\r\n+        return url.getParameter(Constants.HEARTBEAT_KEY, Constants.DEFAULT_HEARTBEAT);\r\n+    }\r\n+\r\n+    public static int getIdleTimeout(URL url) {\r\n+        int heartBeat = getHeartbeat(url);\r\n+        int idleTimeout = url.getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartBeat * 3);\r\n+        if (idleTimeout < heartBeat * 2) {\r\n+            throw new IllegalStateException(\"idleTimeout < heartbeatInterval * 2\");\r\n+        }\r\n+        return idleTimeout;\r\n+    }\r\n+\r\n     /**\r\n      * Check if the given value matches the given pattern. The pattern supports wildcard \"*\".\r\n      *\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java",
                "sha": "f7ca5c007b90ab2df65f8c18da62fb6eec66f36f",
                "status": "modified"
            },
            {
                "additions": 100,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/URLBuilderTest.java",
                "changes": 100,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/URLBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/URLBuilderTest.java",
                "patch": "@@ -0,0 +1,100 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.dubbo.common;\r\n+\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+import java.util.Arrays;\r\n+\r\n+import static org.hamcrest.CoreMatchers.equalTo;\r\n+import static org.hamcrest.MatcherAssert.assertThat;\r\n+\r\n+public class URLBuilderTest {\r\n+    @Test\r\n+    public void testNoArgConstructor() {\r\n+        URL url = new URLBuilder().build();\r\n+        assertThat(url.toString(), equalTo(\"\"));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldAddParameter() {\r\n+        URL url1 = URL.valueOf(\"dubbo://admin:hello1234@10.20.130.230:20880/context/path?version=1.0.0&application=morgan\");\r\n+        URL url2 = URLBuilder.from(url1)\r\n+                .addParameter(\"newKey1\", \"newValue1\") // string\r\n+                .addParameter(\"newKey2\", 2) // int\r\n+                .addParameter(\"version\", 1) // override\r\n+                .build();\r\n+        assertThat(url2.getParameter(\"newKey1\"), equalTo(\"newValue1\"));\r\n+        assertThat(url2.getParameter(\"newKey2\"), equalTo(\"2\"));\r\n+        assertThat(url2.getParameter(\"version\"), equalTo(\"1\"));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldSet() {\r\n+        URL url1 = URL.valueOf(\"dubbo://admin:hello1234@10.20.130.230:20880/context/path?version=1.0.0&application=morgan\");\r\n+        URL url2 = URLBuilder.from(url1)\r\n+                .setProtocol(\"rest\")\r\n+                .setUsername(\"newUsername\")\r\n+                .setPassword(\"newPassword\")\r\n+                .setHost(\"newHost\")\r\n+                .setPath(\"newContext\")\r\n+                .setPort(1234)\r\n+                .build();\r\n+        assertThat(url2.getProtocol(), equalTo(\"rest\"));\r\n+        assertThat(url2.getUsername(), equalTo(\"newUsername\"));\r\n+        assertThat(url2.getPassword(), equalTo(\"newPassword\"));\r\n+        assertThat(url2.getHost(), equalTo(\"newHost\"));\r\n+        assertThat(url2.getPort(), equalTo(1234));\r\n+        assertThat(url2.getPath(), equalTo(\"newContext\"));\r\n+\r\n+        url2 = URLBuilder.from(url1)\r\n+                .setAddress(\"newHost2:2345\")\r\n+                .build();\r\n+        assertThat(url2.getHost(), equalTo(\"newHost2\"));\r\n+        assertThat(url2.getPort(), equalTo(2345));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldClearParameters() {\r\n+        URL url1 = URL.valueOf(\"dubbo://admin:hello1234@10.20.130.230:20880/context/path?version=1.0.0&application=morgan\");\r\n+        URL url2 = URLBuilder.from(url1)\r\n+                .clearParameters()\r\n+                .build();\r\n+        assertThat(url2.getParameters().size(), equalTo(0));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldRemoveParameters() {\r\n+        URL url1 = URL.valueOf(\"dubbo://admin:hello1234@10.20.130.230:20880/context/path?version=1.0.0&application=morgan&key2=v2\");\r\n+        URL url2 = URLBuilder.from(url1)\r\n+                .removeParameters(Arrays.asList(\"key2\", \"application\"))\r\n+                .build();\r\n+        assertThat(url2.getParameters().size(), equalTo(1));\r\n+        assertThat(url2.getParameter(\"version\"), equalTo(\"1.0.0\"));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldAddIfAbsent() {\r\n+        URL url1 = URL.valueOf(\"dubbo://admin:hello1234@10.20.130.230:20880/context/path?version=1.0.0&application=morgan&key2=v2\");\r\n+        URL url2 = URLBuilder.from(url1)\r\n+                .addParameterIfAbsent(\"absentKey\", \"absentValue\")\r\n+                .addParameterIfAbsent(\"version\", \"2.0.0\") // should not override\r\n+                .build();\r\n+        assertThat(url2.getParameter(\"version\"), equalTo(\"1.0.0\"));\r\n+        assertThat(url2.getParameter(\"absentKey\"), equalTo(\"absentValue\"));\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/URLBuilderTest.java",
                "sha": "c607bd385c68470b10cbcacea8865faecb0a465d",
                "status": "added"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/URLTest.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/URLTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 7,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/URLTest.java",
                "patch": "@@ -17,7 +17,9 @@\n package org.apache.dubbo.common;\r\n \r\n import org.apache.dubbo.common.utils.CollectionUtils;\r\n-import org.junit.Test;\r\n+\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.io.File;\r\n import java.util.Arrays;\r\n@@ -26,12 +28,12 @@\n \r\n import static org.hamcrest.CoreMatchers.anyOf;\r\n import static org.hamcrest.CoreMatchers.equalTo;\r\n-import static org.junit.Assert.assertEquals;\r\n-import static org.junit.Assert.assertNull;\r\n-import static org.junit.Assert.assertSame;\r\n-import static org.junit.Assert.assertThat;\r\n-import static org.junit.Assert.assertTrue;\r\n-import static org.junit.Assert.fail;\r\n+import static org.hamcrest.MatcherAssert.assertThat;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertNull;\r\n+import static org.junit.jupiter.api.Assertions.assertSame;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n \r\n public class URLTest {\r\n \r\n@@ -679,4 +681,28 @@ public void testIpV6AddressWithScopeId(){\n         assertEquals(\"1.0.0\", url.getParameter(\"version\"));\r\n         assertEquals(\"morgan\", url.getParameter(\"application\"));\r\n     }\r\n+\r\n+    @Test\r\n+    public void testDefaultPort() {\r\n+        Assertions.assertEquals(\"10.20.153.10:2181\", URL.appendDefaultPort(\"10.20.153.10:0\", 2181));\r\n+        Assertions.assertEquals(\"10.20.153.10:2181\", URL.appendDefaultPort(\"10.20.153.10\", 2181));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testGetServiceKey () {\r\n+        URL url1 = URL.valueOf(\"10.20.130.230:20880/context/path?interface=org.apache.dubbo.test.interfaceName\");\r\n+        Assertions.assertEquals(\"org.apache.dubbo.test.interfaceName\", url1.getServiceKey());\r\n+\r\n+        URL url2 = URL.valueOf(\"10.20.130.230:20880/org.apache.dubbo.test.interfaceName?interface=org.apache.dubbo.test.interfaceName\");\r\n+        Assertions.assertEquals(\"org.apache.dubbo.test.interfaceName\", url2.getServiceKey());\r\n+\r\n+        URL url3 = URL.valueOf(\"10.20.130.230:20880/org.apache.dubbo.test.interfaceName?interface=org.apache.dubbo.test.interfaceName&group=group1&version=1.0.0\");\r\n+        Assertions.assertEquals(\"group1/org.apache.dubbo.test.interfaceName:1.0.0\", url3.getServiceKey());\r\n+\r\n+        URL url4 = URL.valueOf(\"10.20.130.230:20880/context/path?interface=org.apache.dubbo.test.interfaceName\");\r\n+        Assertions.assertEquals(\"context/path\", url4.getPathKey());\r\n+\r\n+        URL url5 = URL.valueOf(\"10.20.130.230:20880/context/path?interface=org.apache.dubbo.test.interfaceName&group=group1&version=1.0.0\");\r\n+        Assertions.assertEquals(\"group1/context/path:1.0.0\", url5.getPathKey());\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/URLTest.java",
                "sha": "a74f7baa9747ad75b59065494e236d6b0e70b0ce",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanAccessorTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanAccessorTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 8,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanAccessorTest.java",
                "patch": "@@ -16,22 +16,22 @@\n  */\n package org.apache.dubbo.common.beanutil;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n public class JavaBeanAccessorTest {\n \n     @Test\n     public void testIsAccessByMethod(){\n-        Assert.assertTrue(JavaBeanAccessor.isAccessByMethod(JavaBeanAccessor.METHOD));\n-        Assert.assertTrue(JavaBeanAccessor.isAccessByMethod(JavaBeanAccessor.ALL));\n-        Assert.assertFalse(JavaBeanAccessor.isAccessByMethod(JavaBeanAccessor.FIELD));\n+        Assertions.assertTrue(JavaBeanAccessor.isAccessByMethod(JavaBeanAccessor.METHOD));\n+        Assertions.assertTrue(JavaBeanAccessor.isAccessByMethod(JavaBeanAccessor.ALL));\n+        Assertions.assertFalse(JavaBeanAccessor.isAccessByMethod(JavaBeanAccessor.FIELD));\n     }\n \n     @Test\n     public void testIsAccessByField(){\n-        Assert.assertTrue(JavaBeanAccessor.isAccessByField(JavaBeanAccessor.FIELD));\n-        Assert.assertTrue(JavaBeanAccessor.isAccessByField(JavaBeanAccessor.ALL));\n-        Assert.assertFalse(JavaBeanAccessor.isAccessByField(JavaBeanAccessor.METHOD));\n+        Assertions.assertTrue(JavaBeanAccessor.isAccessByField(JavaBeanAccessor.FIELD));\n+        Assertions.assertTrue(JavaBeanAccessor.isAccessByField(JavaBeanAccessor.ALL));\n+        Assertions.assertFalse(JavaBeanAccessor.isAccessByField(JavaBeanAccessor.METHOD));\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanAccessorTest.java",
                "sha": "55bbc598ec560a3e8323fff890346b5490cd02f3",
                "status": "modified"
            },
            {
                "additions": 169,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtilTest.java",
                "changes": 319,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtilTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 150,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtilTest.java",
                "patch": "@@ -22,8 +22,9 @@\n import org.apache.dubbo.common.model.person.PersonStatus;\n import org.apache.dubbo.common.model.person.Phone;\n import org.apache.dubbo.common.utils.PojoUtilsTest;\n-import org.junit.Assert;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.lang.reflect.Array;\n import java.math.BigDecimal;\n@@ -37,181 +38,199 @@\n public class JavaBeanSerializeUtilTest {\n \n     @Test\n-    public void testSerialize_Primitive() throws Exception {\n+    public void testSerialize_Primitive() {\n         JavaBeanDescriptor descriptor;\n         descriptor = JavaBeanSerializeUtil.serialize(Integer.MAX_VALUE);\n-        Assert.assertTrue(descriptor.isPrimitiveType());\n-        Assert.assertEquals(Integer.MAX_VALUE, descriptor.getPrimitiveProperty());\n+        Assertions.assertTrue(descriptor.isPrimitiveType());\n+        Assertions.assertEquals(Integer.MAX_VALUE, descriptor.getPrimitiveProperty());\n \n         Date now = new Date();\n         descriptor = JavaBeanSerializeUtil.serialize(now);\n-        Assert.assertTrue(descriptor.isPrimitiveType());\n-        Assert.assertEquals(now, descriptor.getPrimitiveProperty());\n+        Assertions.assertTrue(descriptor.isPrimitiveType());\n+        Assertions.assertEquals(now, descriptor.getPrimitiveProperty());\n     }\n \n     @Test\n-    public void testSerialize_Primitive_NUll() throws Exception {\n+    public void testSerialize_Primitive_NUll() {\n         JavaBeanDescriptor descriptor;\n         descriptor = JavaBeanSerializeUtil.serialize(null);\n-        Assert.assertTrue(descriptor == null);\n+        Assertions.assertTrue(descriptor == null);\n     }\n \n     @Test\n-    public void testDeserialize_Primitive() throws Exception {\n+    public void testDeserialize_Primitive() {\n         JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n         descriptor.setPrimitiveProperty(Long.MAX_VALUE);\n-        Assert.assertEquals(Long.MAX_VALUE, JavaBeanSerializeUtil.deserialize(descriptor));\n+        Assertions.assertEquals(Long.MAX_VALUE, JavaBeanSerializeUtil.deserialize(descriptor));\n \n         BigDecimal decimal = BigDecimal.TEN;\n-        Assert.assertEquals(Long.MAX_VALUE, descriptor.setPrimitiveProperty(decimal));\n-        Assert.assertEquals(decimal, JavaBeanSerializeUtil.deserialize(descriptor));\n+        Assertions.assertEquals(Long.MAX_VALUE, descriptor.setPrimitiveProperty(decimal));\n+        Assertions.assertEquals(decimal, JavaBeanSerializeUtil.deserialize(descriptor));\n \n         String string = UUID.randomUUID().toString();\n-        Assert.assertEquals(decimal, descriptor.setPrimitiveProperty(string));\n-        Assert.assertEquals(string, JavaBeanSerializeUtil.deserialize(descriptor));\n+        Assertions.assertEquals(decimal, descriptor.setPrimitiveProperty(string));\n+        Assertions.assertEquals(string, JavaBeanSerializeUtil.deserialize(descriptor));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testDeserialize_Primitive0() throws Exception {\n-        JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_BEAN + 1);\n+    @Test\n+    public void testDeserialize_Primitive0() {\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_BEAN + 1);\n+        });\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testDeserialize_Null() throws Exception {\n-        JavaBeanDescriptor descriptor = new JavaBeanDescriptor(null, JavaBeanDescriptor.TYPE_BEAN);\n+    @Test\n+    public void testDeserialize_Null() {\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            JavaBeanDescriptor descriptor = new JavaBeanDescriptor(null, JavaBeanDescriptor.TYPE_BEAN);\n+        });\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testDeserialize_containsProperty() throws Exception {\n-        JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n-        descriptor.containsProperty(null);\n+    @Test\n+    public void testDeserialize_containsProperty() {\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n+            descriptor.containsProperty(null);\n+        });\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testSetEnumNameProperty() throws Exception {\n-        JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n-        descriptor.setEnumNameProperty(JavaBeanDescriptor.class.getName());\n+    @Test\n+    public void testSetEnumNameProperty() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n+            descriptor.setEnumNameProperty(JavaBeanDescriptor.class.getName());\n+        });\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testGetEnumNameProperty() throws Exception {\n-        JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n-        descriptor.getEnumPropertyName();\n+    @Test\n+    public void testGetEnumNameProperty() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n+            descriptor.getEnumPropertyName();\n+        });\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testSetClassNameProperty() throws Exception {\n-        JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n-        descriptor.setClassNameProperty(JavaBeanDescriptor.class.getName());\n+    @Test\n+    public void testSetClassNameProperty() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n+            descriptor.setClassNameProperty(JavaBeanDescriptor.class.getName());\n+        });\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testGetClassNameProperty() throws Exception {\n-        JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n-        descriptor.getClassNameProperty();\n+    @Test\n+    public void testGetClassNameProperty() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_PRIMITIVE);\n+            descriptor.getClassNameProperty();\n+        });\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testSetPrimitiveProperty() throws Exception {\n-        JavaBeanDescriptor descriptor = new JavaBeanDescriptor(JavaBeanDescriptor.class.getName(), JavaBeanDescriptor.TYPE_BEAN);\n-        descriptor.setPrimitiveProperty(JavaBeanDescriptor.class.getName());\n+    @Test\n+    public void testSetPrimitiveProperty() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            JavaBeanDescriptor descriptor = new JavaBeanDescriptor(JavaBeanDescriptor.class.getName(), JavaBeanDescriptor.TYPE_BEAN);\n+            descriptor.setPrimitiveProperty(JavaBeanDescriptor.class.getName());\n+        });\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testGetPrimitiveProperty() throws Exception {\n-        JavaBeanDescriptor descriptor = new JavaBeanDescriptor(JavaBeanDescriptor.class.getName(), JavaBeanDescriptor.TYPE_BEAN);\n-        descriptor.getPrimitiveProperty();\n+    @Test\n+    public void testGetPrimitiveProperty() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            JavaBeanDescriptor descriptor = new JavaBeanDescriptor(JavaBeanDescriptor.class.getName(), JavaBeanDescriptor.TYPE_BEAN);\n+            descriptor.getPrimitiveProperty();\n+        });\n     }\n \n     @Test\n-    public void testDeserialize_get_and_set() throws Exception {\n+    public void testDeserialize_get_and_set() {\n         JavaBeanDescriptor descriptor = new JavaBeanDescriptor(long.class.getName(), JavaBeanDescriptor.TYPE_BEAN);\n         descriptor.setType(JavaBeanDescriptor.TYPE_PRIMITIVE);\n-        Assert.assertTrue(descriptor.getType() == JavaBeanDescriptor.TYPE_PRIMITIVE);\n+        Assertions.assertTrue(descriptor.getType() == JavaBeanDescriptor.TYPE_PRIMITIVE);\n         descriptor.setClassName(JavaBeanDescriptor.class.getName());\n-        Assert.assertEquals(JavaBeanDescriptor.class.getName(), descriptor.getClassName());\n+        Assertions.assertEquals(JavaBeanDescriptor.class.getName(), descriptor.getClassName());\n     }\n \n     @Test\n-    public void testSerialize_Array() throws Exception {\n+    public void testSerialize_Array() {\n         int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n         JavaBeanDescriptor descriptor = JavaBeanSerializeUtil.serialize(array, JavaBeanAccessor.METHOD);\n-        Assert.assertTrue(descriptor.isArrayType());\n-        Assert.assertEquals(int.class.getName(), descriptor.getClassName());\n+        Assertions.assertTrue(descriptor.isArrayType());\n+        Assertions.assertEquals(int.class.getName(), descriptor.getClassName());\n         for (int i = 0; i < array.length; i++) {\n-            Assert.assertEquals(array[i],\n+            Assertions.assertEquals(array[i],\n                     ((JavaBeanDescriptor) descriptor.getProperty(i)).getPrimitiveProperty());\n         }\n \n         Integer[] integers = new Integer[]{1, 2, 3, 4, null, null, null};\n         descriptor = JavaBeanSerializeUtil.serialize(integers, JavaBeanAccessor.METHOD);\n-        Assert.assertTrue(descriptor.isArrayType());\n-        Assert.assertEquals(Integer.class.getName(), descriptor.getClassName());\n-        Assert.assertEquals(integers.length, descriptor.propertySize());\n+        Assertions.assertTrue(descriptor.isArrayType());\n+        Assertions.assertEquals(Integer.class.getName(), descriptor.getClassName());\n+        Assertions.assertEquals(integers.length, descriptor.propertySize());\n         for (int i = 0; i < integers.length; i++) {\n             if (integers[i] == null) {\n-                Assert.assertTrue(integers[i] == descriptor.getProperty(i));\n+                Assertions.assertTrue(integers[i] == descriptor.getProperty(i));\n             } else {\n-                Assert.assertEquals(integers[i], ((JavaBeanDescriptor) descriptor.getProperty(i)).getPrimitiveProperty());\n+                Assertions.assertEquals(integers[i], ((JavaBeanDescriptor) descriptor.getProperty(i)).getPrimitiveProperty());\n             }\n         }\n \n         int[][] second = {{1, 2}, {3, 4}};\n         descriptor = JavaBeanSerializeUtil.serialize(second, JavaBeanAccessor.METHOD);\n-        Assert.assertTrue(descriptor.isArrayType());\n-        Assert.assertEquals(int[].class.getName(), descriptor.getClassName());\n+        Assertions.assertTrue(descriptor.isArrayType());\n+        Assertions.assertEquals(int[].class.getName(), descriptor.getClassName());\n         for (int i = 0; i < second.length; i++) {\n             for (int j = 0; j < second[i].length; j++) {\n                 JavaBeanDescriptor item = (((JavaBeanDescriptor) descriptor.getProperty(i)));\n-                Assert.assertTrue(item.isArrayType());\n-                Assert.assertEquals(int.class.getName(), item.getClassName());\n-                Assert.assertEquals(second[i][j], ((JavaBeanDescriptor) item.getProperty(j)).getPrimitiveProperty());\n+                Assertions.assertTrue(item.isArrayType());\n+                Assertions.assertEquals(int.class.getName(), item.getClassName());\n+                Assertions.assertEquals(second[i][j], ((JavaBeanDescriptor) item.getProperty(j)).getPrimitiveProperty());\n             }\n         }\n \n         BigPerson[] persons = new BigPerson[]{createBigPerson(), createBigPerson()};\n         descriptor = JavaBeanSerializeUtil.serialize(persons);\n-        Assert.assertTrue(descriptor.isArrayType());\n-        Assert.assertEquals(BigPerson.class.getName(), descriptor.getClassName());\n+        Assertions.assertTrue(descriptor.isArrayType());\n+        Assertions.assertEquals(BigPerson.class.getName(), descriptor.getClassName());\n         for (int i = 0; i < persons.length; i++) {\n             assertEqualsBigPerson(persons[i], descriptor.getProperty(i));\n         }\n     }\n \n     @Test\n     public void testConstructorArg() {\n-        Assert.assertFalse((boolean) JavaBeanSerializeUtil.getConstructorArg(boolean.class));\n-        Assert.assertFalse((boolean) JavaBeanSerializeUtil.getConstructorArg(Boolean.class));\n-        Assert.assertEquals((byte)0, JavaBeanSerializeUtil.getConstructorArg(byte.class));\n-        Assert.assertEquals((byte)0, JavaBeanSerializeUtil.getConstructorArg(Byte.class));\n-        Assert.assertEquals((short)0, JavaBeanSerializeUtil.getConstructorArg(short.class));\n-        Assert.assertEquals((short)0, JavaBeanSerializeUtil.getConstructorArg(Short.class));\n-        Assert.assertEquals(0, JavaBeanSerializeUtil.getConstructorArg(int.class));\n-        Assert.assertEquals(0, JavaBeanSerializeUtil.getConstructorArg(Integer.class));\n-        Assert.assertEquals((long)0, JavaBeanSerializeUtil.getConstructorArg(long.class));\n-        Assert.assertEquals((long)0, JavaBeanSerializeUtil.getConstructorArg(Long.class));\n-        Assert.assertEquals((float) 0, JavaBeanSerializeUtil.getConstructorArg(float.class));\n-        Assert.assertEquals((float) 0, JavaBeanSerializeUtil.getConstructorArg(Float.class));\n-        Assert.assertEquals((double) 0, JavaBeanSerializeUtil.getConstructorArg(double.class));\n-        Assert.assertEquals((double) 0, JavaBeanSerializeUtil.getConstructorArg(Double.class));\n-        Assert.assertEquals((char)0, JavaBeanSerializeUtil.getConstructorArg(char.class));\n-        Assert.assertEquals(new Character((char)0), JavaBeanSerializeUtil.getConstructorArg(Character.class));\n-        Assert.assertEquals(null, JavaBeanSerializeUtil.getConstructorArg(JavaBeanSerializeUtil.class));\n+        Assertions.assertFalse((boolean) JavaBeanSerializeUtil.getConstructorArg(boolean.class));\n+        Assertions.assertFalse((boolean) JavaBeanSerializeUtil.getConstructorArg(Boolean.class));\n+        Assertions.assertEquals((byte) 0, JavaBeanSerializeUtil.getConstructorArg(byte.class));\n+        Assertions.assertEquals((byte) 0, JavaBeanSerializeUtil.getConstructorArg(Byte.class));\n+        Assertions.assertEquals((short) 0, JavaBeanSerializeUtil.getConstructorArg(short.class));\n+        Assertions.assertEquals((short) 0, JavaBeanSerializeUtil.getConstructorArg(Short.class));\n+        Assertions.assertEquals(0, JavaBeanSerializeUtil.getConstructorArg(int.class));\n+        Assertions.assertEquals(0, JavaBeanSerializeUtil.getConstructorArg(Integer.class));\n+        Assertions.assertEquals((long) 0, JavaBeanSerializeUtil.getConstructorArg(long.class));\n+        Assertions.assertEquals((long) 0, JavaBeanSerializeUtil.getConstructorArg(Long.class));\n+        Assertions.assertEquals((float) 0, JavaBeanSerializeUtil.getConstructorArg(float.class));\n+        Assertions.assertEquals((float) 0, JavaBeanSerializeUtil.getConstructorArg(Float.class));\n+        Assertions.assertEquals((double) 0, JavaBeanSerializeUtil.getConstructorArg(double.class));\n+        Assertions.assertEquals((double) 0, JavaBeanSerializeUtil.getConstructorArg(Double.class));\n+        Assertions.assertEquals((char) 0, JavaBeanSerializeUtil.getConstructorArg(char.class));\n+        Assertions.assertEquals(new Character((char) 0), JavaBeanSerializeUtil.getConstructorArg(Character.class));\n+        Assertions.assertEquals(null, JavaBeanSerializeUtil.getConstructorArg(JavaBeanSerializeUtil.class));\n     }\n \n     @Test\n-    public void testDeserialize_Array() throws Exception {\n+    public void testDeserialize_Array() {\n         final int len = 10;\n         JavaBeanDescriptor descriptor = new JavaBeanDescriptor(int.class.getName(), JavaBeanDescriptor.TYPE_ARRAY);\n         for (int i = 0; i < len; i++) {\n             descriptor.setProperty(i, i);\n         }\n \n         Object obj = JavaBeanSerializeUtil.deserialize(descriptor);\n-        Assert.assertTrue(obj.getClass().isArray());\n-        Assert.assertTrue(int.class == obj.getClass().getComponentType());\n+        Assertions.assertTrue(obj.getClass().isArray());\n+        Assertions.assertTrue(int.class == obj.getClass().getComponentType());\n         for (int i = 0; i < len; i++) {\n-            Assert.assertEquals(i, Array.get(obj, i));\n+            Assertions.assertEquals(i, Array.get(obj, i));\n         }\n \n         descriptor = new JavaBeanDescriptor(int[].class.getName(), JavaBeanDescriptor.TYPE_ARRAY);\n@@ -223,14 +242,14 @@ public void testDeserialize_Array() throws Exception {\n             descriptor.setProperty(i, innerItem);\n         }\n         obj = JavaBeanSerializeUtil.deserialize(descriptor);\n-        Assert.assertTrue(obj.getClass().isArray());\n-        Assert.assertEquals(int[].class, obj.getClass().getComponentType());\n+        Assertions.assertTrue(obj.getClass().isArray());\n+        Assertions.assertEquals(int[].class, obj.getClass().getComponentType());\n         for (int i = 0; i < len; i++) {\n             Object innerItem = Array.get(obj, i);\n-            Assert.assertTrue(innerItem.getClass().isArray());\n-            Assert.assertEquals(int.class, innerItem.getClass().getComponentType());\n+            Assertions.assertTrue(innerItem.getClass().isArray());\n+            Assertions.assertEquals(int.class, innerItem.getClass().getComponentType());\n             for (int j = 0; j < len; j++) {\n-                Assert.assertEquals(j, Array.get(innerItem, j));\n+                Assertions.assertEquals(j, Array.get(innerItem, j));\n             }\n         }\n \n@@ -240,18 +259,18 @@ public void testDeserialize_Array() throws Exception {\n         descriptor.setProperty(0, innerDescriptor);\n \n         obj = JavaBeanSerializeUtil.deserialize(descriptor);\n-        Assert.assertTrue(obj.getClass().isArray());\n-        Assert.assertEquals(BigPerson[].class, obj.getClass().getComponentType());\n-        Assert.assertEquals(1, Array.getLength(obj));\n+        Assertions.assertTrue(obj.getClass().isArray());\n+        Assertions.assertEquals(BigPerson[].class, obj.getClass().getComponentType());\n+        Assertions.assertEquals(1, Array.getLength(obj));\n         obj = Array.get(obj, 0);\n-        Assert.assertTrue(obj.getClass().isArray());\n-        Assert.assertEquals(BigPerson.class, obj.getClass().getComponentType());\n-        Assert.assertEquals(1, Array.getLength(obj));\n-        Assert.assertEquals(createBigPerson(), Array.get(obj, 0));\n+        Assertions.assertTrue(obj.getClass().isArray());\n+        Assertions.assertEquals(BigPerson.class, obj.getClass().getComponentType());\n+        Assertions.assertEquals(1, Array.getLength(obj));\n+        Assertions.assertEquals(createBigPerson(), Array.get(obj, 0));\n     }\n \n     @Test\n-    public void test_Circular_Reference() throws Exception {\n+    public void test_Circular_Reference() {\n         PojoUtilsTest.Parent parent = new PojoUtilsTest.Parent();\n         parent.setAge(Integer.MAX_VALUE);\n         parent.setEmail(\"a@b\");\n@@ -265,19 +284,19 @@ public void test_Circular_Reference() throws Exception {\n         parent.setChild(child);\n \n         JavaBeanDescriptor descriptor = JavaBeanSerializeUtil.serialize(parent, JavaBeanAccessor.METHOD);\n-        Assert.assertTrue(descriptor.isBeanType());\n+        Assertions.assertTrue(descriptor.isBeanType());\n         assertEqualsPrimitive(parent.getAge(), descriptor.getProperty(\"age\"));\n         assertEqualsPrimitive(parent.getName(), descriptor.getProperty(\"name\"));\n         assertEqualsPrimitive(parent.getEmail(), descriptor.getProperty(\"email\"));\n \n         JavaBeanDescriptor childDescriptor = (JavaBeanDescriptor) descriptor.getProperty(\"child\");\n-        Assert.assertTrue(descriptor == childDescriptor.getProperty(\"parent\"));\n+        Assertions.assertTrue(descriptor == childDescriptor.getProperty(\"parent\"));\n         assertEqualsPrimitive(child.getName(), childDescriptor.getProperty(\"name\"));\n         assertEqualsPrimitive(child.getAge(), childDescriptor.getProperty(\"age\"));\n     }\n \n     @Test\n-    public void testBeanSerialize() throws Exception {\n+    public void testBeanSerialize() {\n         Bean bean = new Bean();\n         bean.setDate(new Date());\n         bean.setStatus(PersonStatus.ENABLED);\n@@ -295,39 +314,39 @@ public void testBeanSerialize() throws Exception {\n         bean.setAddresses(map);\n \n         JavaBeanDescriptor descriptor = JavaBeanSerializeUtil.serialize(bean, JavaBeanAccessor.METHOD);\n-        Assert.assertTrue(descriptor.isBeanType());\n+        Assertions.assertTrue(descriptor.isBeanType());\n         assertEqualsPrimitive(bean.getDate(), descriptor.getProperty(\"date\"));\n         assertEqualsEnum(bean.getStatus(), descriptor.getProperty(\"status\"));\n-        Assert.assertTrue(((JavaBeanDescriptor) descriptor.getProperty(\"type\")).isClassType());\n-        Assert.assertEquals(Bean.class.getName(), ((JavaBeanDescriptor) descriptor.getProperty(\"type\")).getClassNameProperty());\n-        Assert.assertTrue(((JavaBeanDescriptor) descriptor.getProperty(\"array\")).isArrayType());\n-        Assert.assertEquals(0, ((JavaBeanDescriptor) descriptor.getProperty(\"array\")).propertySize());\n+        Assertions.assertTrue(((JavaBeanDescriptor) descriptor.getProperty(\"type\")).isClassType());\n+        Assertions.assertEquals(Bean.class.getName(), ((JavaBeanDescriptor) descriptor.getProperty(\"type\")).getClassNameProperty());\n+        Assertions.assertTrue(((JavaBeanDescriptor) descriptor.getProperty(\"array\")).isArrayType());\n+        Assertions.assertEquals(0, ((JavaBeanDescriptor) descriptor.getProperty(\"array\")).propertySize());\n \n         JavaBeanDescriptor property = (JavaBeanDescriptor) descriptor.getProperty(\"collection\");\n-        Assert.assertTrue(property.isCollectionType());\n-        Assert.assertEquals(1, property.propertySize());\n+        Assertions.assertTrue(property.isCollectionType());\n+        Assertions.assertEquals(1, property.propertySize());\n         property = (JavaBeanDescriptor) property.getProperty(0);\n-        Assert.assertTrue(property.isBeanType());\n-        Assert.assertEquals(Phone.class.getName(), property.getClassName());\n-        Assert.assertEquals(0, property.propertySize());\n+        Assertions.assertTrue(property.isBeanType());\n+        Assertions.assertEquals(Phone.class.getName(), property.getClassName());\n+        Assertions.assertEquals(0, property.propertySize());\n \n         property = (JavaBeanDescriptor) descriptor.getProperty(\"addresses\");\n-        Assert.assertTrue(property.isMapType());\n-        Assert.assertEquals(bean.getAddresses().getClass().getName(), property.getClassName());\n-        Assert.assertEquals(1, property.propertySize());\n+        Assertions.assertTrue(property.isMapType());\n+        Assertions.assertEquals(bean.getAddresses().getClass().getName(), property.getClassName());\n+        Assertions.assertEquals(1, property.propertySize());\n \n \n         Map.Entry<Object, Object> entry = property.iterator().next();\n-        Assert.assertTrue(((JavaBeanDescriptor) entry.getKey()).isPrimitiveType());\n-        Assert.assertEquals(\"first\", ((JavaBeanDescriptor) entry.getKey()).getPrimitiveProperty());\n+        Assertions.assertTrue(((JavaBeanDescriptor) entry.getKey()).isPrimitiveType());\n+        Assertions.assertEquals(\"first\", ((JavaBeanDescriptor) entry.getKey()).getPrimitiveProperty());\n \n-        Assert.assertTrue(((JavaBeanDescriptor) entry.getValue()).isBeanType());\n-        Assert.assertEquals(FullAddress.class.getName(), ((JavaBeanDescriptor) entry.getValue()).getClassName());\n-        Assert.assertEquals(0, ((JavaBeanDescriptor) entry.getValue()).propertySize());\n+        Assertions.assertTrue(((JavaBeanDescriptor) entry.getValue()).isBeanType());\n+        Assertions.assertEquals(FullAddress.class.getName(), ((JavaBeanDescriptor) entry.getValue()).getClassName());\n+        Assertions.assertEquals(0, ((JavaBeanDescriptor) entry.getValue()).propertySize());\n     }\n \n     @Test\n-    public void testDeserializeBean() throws Exception {\n+    public void testDeserializeBean() {\n         Bean bean = new Bean();\n         bean.setDate(new Date());\n         bean.setStatus(PersonStatus.ENABLED);\n@@ -346,69 +365,69 @@ public void testDeserializeBean() throws Exception {\n \n         JavaBeanDescriptor beanDescriptor = JavaBeanSerializeUtil.serialize(bean, JavaBeanAccessor.METHOD);\n         Object deser = JavaBeanSerializeUtil.deserialize(beanDescriptor);\n-        Assert.assertTrue(deser instanceof Bean);\n+        Assertions.assertTrue(deser instanceof Bean);\n         Bean deserBean = (Bean) deser;\n-        Assert.assertEquals(bean.getDate(), deserBean.getDate());\n-        Assert.assertEquals(bean.getStatus(), deserBean.getStatus());\n-        Assert.assertEquals(bean.getType(), deserBean.getType());\n-        Assert.assertEquals(bean.getCollection().size(), deserBean.getCollection().size());\n-        Assert.assertEquals(bean.getCollection().iterator().next().getClass(),\n+        Assertions.assertEquals(bean.getDate(), deserBean.getDate());\n+        Assertions.assertEquals(bean.getStatus(), deserBean.getStatus());\n+        Assertions.assertEquals(bean.getType(), deserBean.getType());\n+        Assertions.assertEquals(bean.getCollection().size(), deserBean.getCollection().size());\n+        Assertions.assertEquals(bean.getCollection().iterator().next().getClass(),\n                 deserBean.getCollection().iterator().next().getClass());\n-        Assert.assertEquals(bean.getAddresses().size(), deserBean.getAddresses().size());\n-        Assert.assertEquals(bean.getAddresses().entrySet().iterator().next().getKey(),\n+        Assertions.assertEquals(bean.getAddresses().size(), deserBean.getAddresses().size());\n+        Assertions.assertEquals(bean.getAddresses().entrySet().iterator().next().getKey(),\n                 deserBean.getAddresses().entrySet().iterator().next().getKey());\n-        Assert.assertEquals(bean.getAddresses().entrySet().iterator().next().getValue().getClass(),\n+        Assertions.assertEquals(bean.getAddresses().entrySet().iterator().next().getValue().getClass(),\n                 deserBean.getAddresses().entrySet().iterator().next().getValue().getClass());\n     }\n \n     @Test\n     @SuppressWarnings(\"unchecked\")\n-    public void testSerializeJavaBeanDescriptor() throws Exception {\n+    public void testSerializeJavaBeanDescriptor() {\n         JavaBeanDescriptor descriptor = new JavaBeanDescriptor();\n         JavaBeanDescriptor result = JavaBeanSerializeUtil.serialize(descriptor);\n-        Assert.assertTrue(descriptor == result);\n+        Assertions.assertTrue(descriptor == result);\n \n         Map map = new HashMap();\n         map.put(\"first\", descriptor);\n         result = JavaBeanSerializeUtil.serialize(map);\n-        Assert.assertTrue(result.isMapType());\n-        Assert.assertEquals(HashMap.class.getName(), result.getClassName());\n-        Assert.assertEquals(map.size(), result.propertySize());\n+        Assertions.assertTrue(result.isMapType());\n+        Assertions.assertEquals(HashMap.class.getName(), result.getClassName());\n+        Assertions.assertEquals(map.size(), result.propertySize());\n         Object object = result.iterator().next().getValue();\n-        Assert.assertTrue(object instanceof JavaBeanDescriptor);\n+        Assertions.assertTrue(object instanceof JavaBeanDescriptor);\n         JavaBeanDescriptor actual = (JavaBeanDescriptor) object;\n-        Assert.assertEquals(map.get(\"first\"), actual);\n+        Assertions.assertEquals(map.get(\"first\"), actual);\n     }\n \n     static void assertEqualsEnum(Enum<?> expected, Object obj) {\n         JavaBeanDescriptor descriptor = (JavaBeanDescriptor) obj;\n-        Assert.assertTrue(descriptor.isEnumType());\n-        Assert.assertEquals(expected.getClass().getName(), descriptor.getClassName());\n-        Assert.assertEquals(expected.name(), descriptor.getEnumPropertyName());\n+        Assertions.assertTrue(descriptor.isEnumType());\n+        Assertions.assertEquals(expected.getClass().getName(), descriptor.getClassName());\n+        Assertions.assertEquals(expected.name(), descriptor.getEnumPropertyName());\n     }\n \n     static void assertEqualsPrimitive(Object expected, Object obj) {\n         if (expected == null) {\n             return;\n         }\n         JavaBeanDescriptor descriptor = (JavaBeanDescriptor) obj;\n-        Assert.assertTrue(descriptor.isPrimitiveType());\n-        Assert.assertEquals(expected, descriptor.getPrimitiveProperty());\n+        Assertions.assertTrue(descriptor.isPrimitiveType());\n+        Assertions.assertEquals(expected, descriptor.getPrimitiveProperty());\n     }\n \n     static void assertEqualsBigPerson(BigPerson person, Object obj) {\n         JavaBeanDescriptor descriptor = (JavaBeanDescriptor) obj;\n-        Assert.assertTrue(descriptor.isBeanType());\n+        Assertions.assertTrue(descriptor.isBeanType());\n         assertEqualsPrimitive(person.getPersonId(), descriptor.getProperty(\"personId\"));\n         assertEqualsPrimitive(person.getLoginName(), descriptor.getProperty(\"loginName\"));\n         assertEqualsEnum(person.getStatus(), descriptor.getProperty(\"status\"));\n         assertEqualsPrimitive(person.getEmail(), descriptor.getProperty(\"email\"));\n         assertEqualsPrimitive(person.getPenName(), descriptor.getProperty(\"penName\"));\n \n         JavaBeanDescriptor infoProfile = (JavaBeanDescriptor) descriptor.getProperty(\"infoProfile\");\n-        Assert.assertTrue(infoProfile.isBeanType());\n+        Assertions.assertTrue(infoProfile.isBeanType());\n         JavaBeanDescriptor phones = (JavaBeanDescriptor) infoProfile.getProperty(\"phones\");\n-        Assert.assertTrue(phones.isCollectionType());\n+        Assertions.assertTrue(phones.isCollectionType());\n         assertEqualsPhone(person.getInfoProfile().getPhones().get(0), phones.getProperty(0));\n         assertEqualsPhone(person.getInfoProfile().getPhones().get(1), phones.getProperty(1));\n         assertEqualsPhone(person.getInfoProfile().getFax(), infoProfile.getProperty(\"fax\"));\n@@ -424,7 +443,7 @@ static void assertEqualsBigPerson(BigPerson person, Object obj) {\n \n     static void assertEqualsPhone(Phone excpected, Object obj) {\n         JavaBeanDescriptor descriptor = (JavaBeanDescriptor) obj;\n-        Assert.assertTrue(descriptor.isBeanType());\n+        Assertions.assertTrue(descriptor.isBeanType());\n         if (excpected.getArea() != null) {\n             assertEqualsPrimitive(excpected.getArea(), descriptor.getProperty(\"area\"));\n         }\n@@ -441,7 +460,7 @@ static void assertEqualsPhone(Phone excpected, Object obj) {\n \n     static void assertEqualsFullAddress(FullAddress expected, Object obj) {\n         JavaBeanDescriptor descriptor = (JavaBeanDescriptor) obj;\n-        Assert.assertTrue(descriptor.isBeanType());\n+        Assertions.assertTrue(descriptor.isBeanType());\n         if (expected.getCityId() != null) {\n             assertEqualsPrimitive(expected.getCityId(), descriptor.getProperty(\"cityId\"));\n         }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/beanutil/JavaBeanSerializeUtilTest.java",
                "sha": "5c72a14d3d0a0b0c993fb9395a0b83683d42d745",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java",
                "patch": "@@ -16,8 +16,7 @@\n  */\n package org.apache.dubbo.common.bytecode;\n \n-import junit.framework.TestCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n@@ -28,7 +27,7 @@\n     void setName(Bean bean, T name);\n }\n \n-public class ClassGeneratorTest extends TestCase {\n+public class ClassGeneratorTest {\n \n     @SuppressWarnings(\"unchecked\")\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ClassGeneratorTest.java",
                "sha": "c49554623ec13ecf107b368c94b2a2a043a96b05",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/MixinTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/MixinTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/MixinTest.java",
                "patch": "@@ -16,10 +16,11 @@\n  */\n package org.apache.dubbo.common.bytecode;\n \n-import junit.framework.TestCase;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n-public class MixinTest extends TestCase {\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class MixinTest {\n \n     @Test\n     public void testMain() throws Exception {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/MixinTest.java",
                "sha": "5ed7a6eff22a6d8e5a4880feeee626aa4730a317",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ProxyTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ProxyTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 30,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ProxyTest.java",
                "patch": "@@ -16,32 +16,28 @@\n  */\n package org.apache.dubbo.common.bytecode;\n \n-import junit.framework.TestCase;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.MethodInterceptor;\n-import net.sf.cglib.proxy.MethodProxy;\n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n-import java.lang.reflect.InvocationHandler;\n-import java.lang.reflect.Method;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n-public class ProxyTest extends TestCase {\n+public class ProxyTest {\n \n     @Test\n     public void testMain() throws Exception {\n         Proxy proxy = Proxy.getProxy(ITest.class, ITest.class);\n-        ITest instance = (ITest) proxy.newInstance(new InvocationHandler() {\n-            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-                if (\"getName\".equals(method.getName())) {\n-                    assertEquals(args.length, 0);\n-                } else if (\"setName\".equals(method.getName())) {\n-                    assertEquals(args.length, 2);\n-                    assertEquals(args[0], \"qianlei\");\n-                    assertEquals(args[1], \"hello\");\n-                }\n-                return null;\n+        ITest instance = (ITest) proxy.newInstance((proxy1, method, args) -> {\n+            if (\"getName\".equals(method.getName())) {\n+                assertEquals(args.length, 0);\n+            } else if (\"setName\".equals(method.getName())) {\n+                assertEquals(args.length, 2);\n+                assertEquals(args[0], \"qianlei\");\n+                assertEquals(args[1], \"hello\");\n             }\n+            return null;\n         });\n \n         assertNull(instance.getName());\n@@ -50,27 +46,19 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n \n     @Test\n     public void testCglibProxy() throws Exception {\n-        ITest test = (ITest) Proxy.getProxy(ITest.class).newInstance(new InvocationHandler() {\n-\n-            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-                System.out.println(method.getName());\n-                return null;\n-            }\n+        ITest test = (ITest) Proxy.getProxy(ITest.class).newInstance((proxy, method, args) -> {\n+            System.out.println(method.getName());\n+            return null;\n         });\n \n         Enhancer enhancer = new Enhancer();\n         enhancer.setSuperclass(test.getClass());\n-        enhancer.setCallback(new MethodInterceptor() {\n-\n-            public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n-                return null;\n-            }\n-        });\n+        enhancer.setCallback((MethodInterceptor) (obj, method, args, proxy) -> null);\n         try {\n             enhancer.create();\n         } catch (IllegalArgumentException e) {\n             e.printStackTrace();\n-            Assert.fail();\n+            Assertions.fail();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/ProxyTest.java",
                "sha": "ac626e05aab1130058020bafd83ab973f13690cc",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/WrapperTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/WrapperTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 27,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/WrapperTest.java",
                "patch": "@@ -16,12 +16,12 @@\n  */\r\n package org.apache.dubbo.common.bytecode;\r\n \r\n-import org.junit.Assert;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n-import static org.junit.Assert.assertArrayEquals;\r\n-import static org.junit.Assert.assertEquals;\r\n-import static org.junit.Assert.fail;\r\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n \r\n public class WrapperTest {\r\n     @Test\r\n@@ -63,48 +63,54 @@ public void test_makeEmptyClass() throws Exception {\n     @Test\r\n     public void testHasMethod() throws Exception {\r\n         Wrapper w = Wrapper.getWrapper(I1.class);\r\n-        Assert.assertTrue(w.hasMethod(\"setName\"));\r\n-        Assert.assertTrue(w.hasMethod(\"hello\"));\r\n-        Assert.assertTrue(w.hasMethod(\"showInt\"));\r\n-        Assert.assertTrue(w.hasMethod(\"getFloat\"));\r\n-        Assert.assertTrue(w.hasMethod(\"setFloat\"));\r\n-        Assert.assertFalse(w.hasMethod(\"setFloatXXX\"));\r\n+        Assertions.assertTrue(w.hasMethod(\"setName\"));\r\n+        Assertions.assertTrue(w.hasMethod(\"hello\"));\r\n+        Assertions.assertTrue(w.hasMethod(\"showInt\"));\r\n+        Assertions.assertTrue(w.hasMethod(\"getFloat\"));\r\n+        Assertions.assertTrue(w.hasMethod(\"setFloat\"));\r\n+        Assertions.assertFalse(w.hasMethod(\"setFloatXXX\"));\r\n     }\r\n \r\n     @Test\r\n     public void testWrapperObject() throws Exception {\r\n         Wrapper w = Wrapper.getWrapper(Object.class);\r\n-        Assert.assertTrue(w.getMethodNames().length == 4);\r\n-        Assert.assertTrue(w.getPropertyNames().length == 0);\r\n-        Assert.assertEquals(null, w.getPropertyType(null));\r\n+        Assertions.assertTrue(w.getMethodNames().length == 4);\r\n+        Assertions.assertTrue(w.getPropertyNames().length == 0);\r\n+        Assertions.assertEquals(null, w.getPropertyType(null));\r\n     }\r\n \r\n-    @Test(expected = NoSuchPropertyException.class)\r\n+    @Test\r\n     public void testGetPropertyValue() throws Exception {\r\n-        Wrapper w = Wrapper.getWrapper(Object.class);\r\n-        w.getPropertyValue(null, null);\r\n+        Assertions.assertThrows(NoSuchPropertyException.class, () -> {\r\n+            Wrapper w = Wrapper.getWrapper(Object.class);\r\n+            w.getPropertyValue(null, null);\r\n+        });\r\n     }\r\n \r\n-    @Test(expected = NoSuchPropertyException.class)\r\n+    @Test\r\n     public void testSetPropertyValue() throws Exception {\r\n-        Wrapper w = Wrapper.getWrapper(Object.class);\r\n-        w.setPropertyValue(null, null, null);\r\n+        Assertions.assertThrows(NoSuchPropertyException.class, () -> {\r\n+            Wrapper w = Wrapper.getWrapper(Object.class);\r\n+            w.setPropertyValue(null, null, null);\r\n+        });\r\n     }\r\n \r\n     @Test\r\n     public void testInvokeWrapperObject() throws Exception {\r\n         Wrapper w = Wrapper.getWrapper(Object.class);\r\n         Object instance = new Object();\r\n-        Assert.assertEquals(instance.getClass(), (Class<?>) w.invokeMethod(instance, \"getClass\", null, null));\r\n-        Assert.assertEquals(instance.hashCode(), (int) w.invokeMethod(instance, \"hashCode\", null, null));\r\n-        Assert.assertEquals(instance.toString(), (String) w.invokeMethod(instance, \"toString\", null, null));\r\n-        Assert.assertEquals(true, (boolean) w.invokeMethod(instance, \"equals\", null, new Object[]{instance}));\r\n+        Assertions.assertEquals(instance.getClass(), (Class<?>) w.invokeMethod(instance, \"getClass\", null, null));\r\n+        Assertions.assertEquals(instance.hashCode(), (int) w.invokeMethod(instance, \"hashCode\", null, null));\r\n+        Assertions.assertEquals(instance.toString(), (String) w.invokeMethod(instance, \"toString\", null, null));\r\n+        Assertions.assertEquals(true, (boolean) w.invokeMethod(instance, \"equals\", null, new Object[]{instance}));\r\n     }\r\n \r\n-    @Test(expected = NoSuchMethodException.class)\r\n+    @Test\r\n     public void testNoSuchMethod() throws Exception {\r\n-        Wrapper w = Wrapper.getWrapper(Object.class);\r\n-        w.invokeMethod(new Object(), \"__XX__\", null, null);\r\n+        Assertions.assertThrows(NoSuchMethodException.class, () -> {\r\n+            Wrapper w = Wrapper.getWrapper(Object.class);\r\n+            w.invokeMethod(new Object(), \"__XX__\", null, null);\r\n+        });\r\n     }\r\n \r\n     /**\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/bytecode/WrapperTest.java",
                "sha": "ab5dff433934cd540c36cf629a90bd1f23c6ace8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/AdaptiveCompilerTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/AdaptiveCompilerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/AdaptiveCompilerTest.java",
                "patch": "@@ -16,8 +16,8 @@\n  */\n package org.apache.dubbo.common.compiler.support;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n public class AdaptiveCompilerTest extends JavaCodeTest {\n \n@@ -27,7 +27,7 @@ public void testAvailableCompiler() throws Exception {\n         AdaptiveCompiler compiler = new AdaptiveCompiler();\n         Class<?> clazz = compiler.compile(getSimpleCode(), AdaptiveCompiler.class.getClassLoader());\n         HelloService helloService = (HelloService) clazz.newInstance();\n-        Assert.assertEquals(\"Hello world!\", helloService.sayHello());\n+        Assertions.assertEquals(\"Hello world!\", helloService.sayHello());\n     }\n \n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/AdaptiveCompilerTest.java",
                "sha": "6e6e5848aa830fb9caafe1c37c1836b53f323277",
                "status": "modified"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/ClassUtilsTest.java",
                "changes": 136,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/ClassUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 64,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/ClassUtilsTest.java",
                "patch": "@@ -16,11 +16,10 @@\n  */\n package org.apache.dubbo.common.compiler.support;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.lang.reflect.GenericArrayType;\n-import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.TypeVariable;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -33,32 +32,32 @@\n     @Test\n     public void testNewInstance() {\n         HelloServiceImpl0 instance = (HelloServiceImpl0) ClassUtils.newInstance(HelloServiceImpl0.class.getName());\n-        Assert.assertEquals(\"Hello world!\", instance.sayHello());\n+        Assertions.assertEquals(\"Hello world!\", instance.sayHello());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testNewInstance0() {\n-        ClassUtils.newInstance(PrivateHelloServiceImpl.class.getName());\n+        Assertions.assertThrows(IllegalStateException.class, () -> ClassUtils.newInstance(PrivateHelloServiceImpl.class.getName()));\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testNewInstance1() {\n-        ClassUtils.newInstance(\"org.apache.dubbo.common.compiler.support.internal.HelloServiceInternalImpl\");\n+        Assertions.assertThrows(IllegalStateException.class, () -> ClassUtils.newInstance(\"org.apache.dubbo.common.compiler.support.internal.HelloServiceInternalImpl\"));\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testNewInstance2() {\n-        ClassUtils.newInstance(\"org.apache.dubbo.common.compiler.support.internal.NotExistsImpl\");\n+        Assertions.assertThrows(IllegalStateException.class, () -> ClassUtils.newInstance(\"org.apache.dubbo.common.compiler.support.internal.NotExistsImpl\"));\n     }\n \n     @Test\n     public void testForName() {\n         ClassUtils.forName(new String[]{\"org.apache.dubbo.common.compiler.support\"}, \"HelloServiceImpl0\");\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testForName1() {\n-        ClassUtils.forName(new String[]{\"org.apache.dubbo.common.compiler.support\"}, \"HelloServiceImplXX\");\n+        Assertions.assertThrows(IllegalStateException.class, () -> ClassUtils.forName(new String[]{\"org.apache.dubbo.common.compiler.support\"}, \"HelloServiceImplXX\"));\n     }\n \n     @Test\n@@ -83,86 +82,95 @@ public void testForName2() {\n \n     @Test\n     public void testGetBoxedClass() {\n-        Assert.assertEquals(Boolean.class, ClassUtils.getBoxedClass(boolean.class));\n-        Assert.assertEquals(Character.class, ClassUtils.getBoxedClass(char.class));\n-        Assert.assertEquals(Byte.class, ClassUtils.getBoxedClass(byte.class));\n-        Assert.assertEquals(Short.class, ClassUtils.getBoxedClass(short.class));\n-        Assert.assertEquals(Integer.class, ClassUtils.getBoxedClass(int.class));\n-        Assert.assertEquals(Long.class, ClassUtils.getBoxedClass(long.class));\n-        Assert.assertEquals(Float.class, ClassUtils.getBoxedClass(float.class));\n-        Assert.assertEquals(Double.class, ClassUtils.getBoxedClass(double.class));\n-        Assert.assertEquals(ClassUtilsTest.class, ClassUtils.getBoxedClass(ClassUtilsTest.class));\n+        Assertions.assertEquals(Boolean.class, ClassUtils.getBoxedClass(boolean.class));\n+        Assertions.assertEquals(Character.class, ClassUtils.getBoxedClass(char.class));\n+        Assertions.assertEquals(Byte.class, ClassUtils.getBoxedClass(byte.class));\n+        Assertions.assertEquals(Short.class, ClassUtils.getBoxedClass(short.class));\n+        Assertions.assertEquals(Integer.class, ClassUtils.getBoxedClass(int.class));\n+        Assertions.assertEquals(Long.class, ClassUtils.getBoxedClass(long.class));\n+        Assertions.assertEquals(Float.class, ClassUtils.getBoxedClass(float.class));\n+        Assertions.assertEquals(Double.class, ClassUtils.getBoxedClass(double.class));\n+        Assertions.assertEquals(ClassUtilsTest.class, ClassUtils.getBoxedClass(ClassUtilsTest.class));\n     }\n \n     @Test\n     public void testBoxedAndUnboxed() {\n-        Assert.assertEquals(Boolean.valueOf(true), ClassUtils.boxed(true));\n-        Assert.assertEquals(Character.valueOf('0'), ClassUtils.boxed('0'));\n-        Assert.assertEquals(Byte.valueOf((byte) 0), ClassUtils.boxed((byte) 0));\n-        Assert.assertEquals(Short.valueOf((short) 0), ClassUtils.boxed((short) 0));\n-        Assert.assertEquals(Integer.valueOf((int) 0), ClassUtils.boxed((int) 0));\n-        Assert.assertEquals(Long.valueOf((long) 0), ClassUtils.boxed((long) 0));\n-        Assert.assertEquals(Float.valueOf((float) 0), ClassUtils.boxed((float) 0));\n-        Assert.assertEquals(Double.valueOf((double) 0), ClassUtils.boxed((double) 0));\n-\n-        Assert.assertEquals(true, ClassUtils.unboxed(Boolean.valueOf(true)));\n-        Assert.assertEquals('0', ClassUtils.unboxed(Character.valueOf('0')));\n-        Assert.assertEquals((byte) 0, ClassUtils.unboxed(Byte.valueOf((byte) 0)));\n-        Assert.assertEquals((short) 0, ClassUtils.unboxed(Short.valueOf((short) 0)));\n-        Assert.assertEquals(0, ClassUtils.unboxed(Integer.valueOf((int) 0)));\n-        Assert.assertEquals((long) 0, ClassUtils.unboxed(Long.valueOf((long) 0)));\n-        Assert.assertEquals((float) 0, ClassUtils.unboxed(Float.valueOf((float) 0)), ((float)0));\n-        Assert.assertEquals((double) 0, ClassUtils.unboxed(Double.valueOf((double) 0)), ((double)0));\n+        Assertions.assertEquals(Boolean.valueOf(true), ClassUtils.boxed(true));\n+        Assertions.assertEquals(Character.valueOf('0'), ClassUtils.boxed('0'));\n+        Assertions.assertEquals(Byte.valueOf((byte) 0), ClassUtils.boxed((byte) 0));\n+        Assertions.assertEquals(Short.valueOf((short) 0), ClassUtils.boxed((short) 0));\n+        Assertions.assertEquals(Integer.valueOf((int) 0), ClassUtils.boxed((int) 0));\n+        Assertions.assertEquals(Long.valueOf((long) 0), ClassUtils.boxed((long) 0));\n+        Assertions.assertEquals(Float.valueOf((float) 0), ClassUtils.boxed((float) 0));\n+        Assertions.assertEquals(Double.valueOf((double) 0), ClassUtils.boxed((double) 0));\n+\n+        Assertions.assertEquals(true, ClassUtils.unboxed(Boolean.valueOf(true)));\n+        Assertions.assertEquals('0', ClassUtils.unboxed(Character.valueOf('0')));\n+        Assertions.assertEquals((byte) 0, ClassUtils.unboxed(Byte.valueOf((byte) 0)));\n+        Assertions.assertEquals((short) 0, ClassUtils.unboxed(Short.valueOf((short) 0)));\n+        Assertions.assertEquals(0, ClassUtils.unboxed(Integer.valueOf((int) 0)));\n+        Assertions.assertEquals((long) 0, ClassUtils.unboxed(Long.valueOf((long) 0)));\n+//        Assertions.assertEquals((float) 0, ClassUtils.unboxed(Float.valueOf((float) 0)), ((float) 0));\n+//        Assertions.assertEquals((double) 0, ClassUtils.unboxed(Double.valueOf((double) 0)), ((double) 0));\n     }\n \n     @Test\n-    public void testGetSize(){\n-        Assert.assertEquals(0, ClassUtils.getSize(null));\n-        List<Integer> list = new ArrayList<>();list.add(1);\n-        Assert.assertEquals(1, ClassUtils.getSize(list));\n-        Map map = new HashMap(); map.put(1, 1);\n-        Assert.assertEquals(1, ClassUtils.getSize(map));\n+    public void testGetSize() {\n+        Assertions.assertEquals(0, ClassUtils.getSize(null));\n+        List<Integer> list = new ArrayList<>();\n+        list.add(1);\n+        Assertions.assertEquals(1, ClassUtils.getSize(list));\n+        Map map = new HashMap();\n+        map.put(1, 1);\n+        Assertions.assertEquals(1, ClassUtils.getSize(map));\n         int[] array = new int[1];\n-        Assert.assertEquals(1, ClassUtils.getSize(array));\n-        Assert.assertEquals(-1, ClassUtils.getSize(new Object()));\n+        Assertions.assertEquals(1, ClassUtils.getSize(array));\n+        Assertions.assertEquals(-1, ClassUtils.getSize(new Object()));\n     }\n \n-    @Test(expected = RuntimeException.class)\n-    public void testToUri(){\n-        ClassUtils.toURI(\"#xx_abc#hello\");\n+    @Test\n+    public void testToUri() {\n+        Assertions.assertThrows(RuntimeException.class, () -> ClassUtils.toURI(\"#xx_abc#hello\"));\n     }\n \n     @Test\n-    public void testGetGenericClass(){\n-        Assert.assertTrue(TypeVariable.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass.class)));\n-        Assert.assertTrue(String.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass0.class)));\n-        Assert.assertTrue(Collection.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass1.class)));\n-        Assert.assertTrue(TypeVariable.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass2.class)));\n-        Assert.assertTrue(GenericArrayType.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass3.class)));\n+    public void testGetGenericClass() {\n+        Assertions.assertTrue(TypeVariable.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass.class)));\n+        Assertions.assertTrue(String.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass0.class)));\n+        Assertions.assertTrue(Collection.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass1.class)));\n+        Assertions.assertTrue(TypeVariable.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass2.class)));\n+        Assertions.assertTrue(GenericArrayType.class.isAssignableFrom(ClassUtils.getGenericClass(GenericClass3.class)));\n     }\n \n     @Test\n-    public void testGetSizeMethod(){\n-        Assert.assertEquals(\"getLength()\", ClassUtils.getSizeMethod(GenericClass3.class));\n+    public void testGetSizeMethod() {\n+        Assertions.assertEquals(\"getLength()\", ClassUtils.getSizeMethod(GenericClass3.class));\n+    }\n+    \n+    @Test\n+    public void testGetSimpleClassName() {\n+        Assertions.assertNull(ClassUtils.getSimpleClassName(null));\n+        Assertions.assertEquals(\"Map\", ClassUtils.getSimpleClassName(Map.class.getName()));\n+        Assertions.assertEquals(\"Map\", ClassUtils.getSimpleClassName(Map.class.getSimpleName()));\n     }\n \n-    private interface GenericInterface<T>{\n+    private interface GenericInterface<T> {\n     }\n \n-    private class GenericClass<T> implements GenericInterface<T>{\n+    private class GenericClass<T> implements GenericInterface<T> {\n     }\n \n-    private class GenericClass0 implements GenericInterface<String>{\n+    private class GenericClass0 implements GenericInterface<String> {\n     }\n \n-    private class GenericClass1 implements GenericInterface<Collection<String>>{\n+    private class GenericClass1 implements GenericInterface<Collection<String>> {\n     }\n \n-    private class GenericClass2<T> implements GenericInterface<T[]>{\n+    private class GenericClass2<T> implements GenericInterface<T[]> {\n     }\n \n-    private class GenericClass3<T> implements GenericInterface<T[][]>{\n-        public int getLength(){\n+    private class GenericClass3<T> implements GenericInterface<T[][]> {\n+        public int getLength() {\n             return -1;\n         }\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/ClassUtilsTest.java",
                "sha": "8acf00bfeef731588c9a9d08c8131696023c4e41",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/JavassistCompilerTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/JavassistCompilerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 12,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/JavassistCompilerTest.java",
                "patch": "@@ -16,8 +16,8 @@\n  */\n package org.apache.dubbo.common.compiler.support;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.lang.reflect.Method;\n \n@@ -30,7 +30,7 @@ public void testCompileJavaClass() throws Exception {\n         // Because javassist compiles using the caller class loader, we should't use HelloService directly\n         Object instance = clazz.newInstance();\n         Method sayHello = instance.getClass().getMethod(\"sayHello\");\n-        Assert.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        Assertions.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n     }\n \n     /**\n@@ -42,16 +42,18 @@ public void testCompileJavaClass0() throws Exception {\n         Class<?> clazz = compiler.compile(getSimpleCodeWithoutPackage(), JavassistCompiler.class.getClassLoader());\n         Object instance = clazz.newInstance();\n         Method sayHello = instance.getClass().getMethod(\"sayHello\");\n-        Assert.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        Assertions.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testCompileJavaClass1() throws Exception {\n-        JavassistCompiler compiler = new JavassistCompiler();\n-        Class<?> clazz = compiler.compile(getSimpleCodeWithSyntax0(), JavassistCompiler.class.getClassLoader());\n-        Object instance = clazz.newInstance();\n-        Method sayHello = instance.getClass().getMethod(\"sayHello\");\n-        Assert.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            JavassistCompiler compiler = new JavassistCompiler();\n+            Class<?> clazz = compiler.compile(getSimpleCodeWithSyntax0(), JavassistCompiler.class.getClassLoader());\n+            Object instance = clazz.newInstance();\n+            Method sayHello = instance.getClass().getMethod(\"sayHello\");\n+            Assertions.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        });\n     }\n \n     @Test\n@@ -60,7 +62,7 @@ public void testCompileJavaClassWithImport() throws Exception {\n         Class<?> clazz = compiler.compile(getSimpleCodeWithImports(), JavassistCompiler.class.getClassLoader());\n         Object instance = clazz.newInstance();\n         Method sayHello = instance.getClass().getMethod(\"sayHello\");\n-        Assert.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        Assertions.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n     }\n \n     @Test\n@@ -69,6 +71,6 @@ public void testCompileJavaClassWithExtends() throws Exception {\n         Class<?> clazz = compiler.compile(getSimpleCodeWithWithExtends(), JavassistCompiler.class.getClassLoader());\n         Object instance = clazz.newInstance();\n         Method sayHello = instance.getClass().getMethod(\"sayHello\");\n-        Assert.assertEquals(\"Hello world3!\", sayHello.invoke(instance));\n+        Assertions.assertEquals(\"Hello world3!\", sayHello.invoke(instance));\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/JavassistCompilerTest.java",
                "sha": "adbfbb878d0768d28dfb2251b28497f294c29ef5",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/JdkCompilerTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/JdkCompilerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 16,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/JdkCompilerTest.java",
                "patch": "@@ -16,37 +16,41 @@\n  */\n package org.apache.dubbo.common.compiler.support;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.lang.reflect.Method;\n \n-public class JdkCompilerTest extends JavaCodeTest{\n+public class JdkCompilerTest extends JavaCodeTest {\n \n     @Test\n     public void test_compileJavaClass() throws Exception {\n         JdkCompiler compiler = new JdkCompiler();\n         Class<?> clazz = compiler.compile(getSimpleCode(), JdkCompiler.class.getClassLoader());\n         Object instance = clazz.newInstance();\n         Method sayHello = instance.getClass().getMethod(\"sayHello\");\n-        Assert.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        Assertions.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void test_compileJavaClass0() throws Exception {\n-        JdkCompiler compiler = new JdkCompiler();\n-        Class<?> clazz = compiler.compile(getSimpleCodeWithoutPackage(), JdkCompiler.class.getClassLoader());\n-        Object instance = clazz.newInstance();\n-        Method sayHello = instance.getClass().getMethod(\"sayHello\");\n-        Assert.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            JdkCompiler compiler = new JdkCompiler();\n+            Class<?> clazz = compiler.compile(getSimpleCodeWithoutPackage(), JdkCompiler.class.getClassLoader());\n+            Object instance = clazz.newInstance();\n+            Method sayHello = instance.getClass().getMethod(\"sayHello\");\n+            Assertions.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        });\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void test_compileJavaClass1() throws Exception {\n-        JdkCompiler compiler = new JdkCompiler();\n-        Class<?> clazz = compiler.compile(getSimpleCodeWithSyntax(), JdkCompiler.class.getClassLoader());\n-        Object instance = clazz.newInstance();\n-        Method sayHello = instance.getClass().getMethod(\"sayHello\");\n-        Assert.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            JdkCompiler compiler = new JdkCompiler();\n+            Class<?> clazz = compiler.compile(getSimpleCodeWithSyntax(), JdkCompiler.class.getClassLoader());\n+            Object instance = clazz.newInstance();\n+            Method sayHello = instance.getClass().getMethod(\"sayHello\");\n+            Assertions.assertEquals(\"Hello world!\", sayHello.invoke(instance));\n+        });\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/compiler/support/JdkCompilerTest.java",
                "sha": "b95e645680f8b800e7b5e62a6aea5e40f58ad4c4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/CompletableFutureTaskTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/CompletableFutureTaskTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/CompletableFutureTaskTest.java",
                "patch": "@@ -17,7 +17,7 @@\n package org.apache.dubbo.common.concurrent;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.ArgumentMatchers.any;\n@@ -33,7 +33,7 @@\n import java.util.concurrent.TimeUnit;\n \n import org.apache.dubbo.common.utils.NamedThreadFactory;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n \n public class CompletableFutureTaskTest {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/CompletableFutureTaskTest.java",
                "sha": "2d0cb48fef68ea7c1ad3e8afcd35aa66862ceffa",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/02cca0976f68db240867c7016d1a58b35cfd4a4b/dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/ExecutionListTest.java",
                "changes": 94,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/ExecutionListTest.java?ref=02cca0976f68db240867c7016d1a58b35cfd4a4b",
                "deletions": 94,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/ExecutionListTest.java",
                "patch": "@@ -1,94 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.dubbo.common.concurrent;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.Executor;\n-\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.doThrow;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-\n-public class ExecutionListTest {\n-    private ExecutionList executionList;\n-\n-    @Before\n-    public void setUp() throws Exception {\n-        this.executionList = new ExecutionList();\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void testAddNullRunnable() {\n-        this.executionList.add(null, mock(Executor.class));\n-    }\n-\n-    @Test\n-    public void testAddRunnableToExecutor() {\n-        Executor mockedExecutor = mock(Executor.class);\n-\n-        this.executionList.add(mock(Runnable.class), mockedExecutor);\n-        this.executionList.execute();\n-\n-        verify(mockedExecutor).execute(any(Runnable.class));\n-    }\n-\n-    @Test\n-    public void testExecuteRunnableWithDefaultExecutor() throws InterruptedException {\n-        final CountDownLatch countDownLatch = new CountDownLatch(1);\n-        this.executionList.add(countDownLatch::countDown, null);\n-\n-        this.executionList.execute();\n-        countDownLatch.await();\n-    }\n-\n-    @Test\n-    public void testExceptionForExecutor() {\n-        Executor mockedExecutor = mock(Executor.class);\n-        doThrow(new RuntimeException()).when(mockedExecutor).execute(any(Runnable.class));\n-\n-        this.executionList.add(mock(Runnable.class), mockedExecutor);\n-        this.executionList.execute();\n-    }\n-\n-    @Test\n-    public void testNotRunSameRunnableTwice() {\n-        Executor mockedExecutor = mock(Executor.class);\n-\n-        this.executionList.add(mock(Runnable.class), mockedExecutor);\n-\n-        this.executionList.execute();\n-        this.executionList.execute();\n-\n-        verify(mockedExecutor).execute(any(Runnable.class));\n-    }\n-\n-    @Test\n-    public void testRunImmediatelyAfterExecuted() {\n-        Executor mockedExecutor = mock(Executor.class);\n-\n-        this.executionList.add(mock(Runnable.class), mockedExecutor);\n-        this.executionList.execute();\n-        this.executionList.add(mock(Runnable.class), mockedExecutor);\n-\n-        verify(mockedExecutor, times(2)).execute(any(Runnable.class));\n-    }\n-}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/02cca0976f68db240867c7016d1a58b35cfd4a4b/dubbo-common/src/test/java/org/apache/dubbo/common/concurrent/ExecutionListTest.java",
                "sha": "417b4a49dabebf80db2b2044859db1ade3e707a5",
                "status": "removed"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/config/ConfigurationUtilsTest.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/config/ConfigurationUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/config/ConfigurationUtilsTest.java",
                "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.common.config;\n+\n+import org.apache.dubbo.common.Constants;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Map;\n+\n+/**\n+ *\n+ */\n+public class ConfigurationUtilsTest {\n+\n+    @Test\n+    public void testGetServerShutdownTimeout () {\n+        System.setProperty(Constants.SHUTDOWN_WAIT_KEY, \" 10000\");\n+        Assertions.assertEquals(10000, ConfigurationUtils.getServerShutdownTimeout());\n+        System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);\n+    }\n+\n+    @Test\n+    public void testGetProperty () {\n+        System.setProperty(Constants.SHUTDOWN_WAIT_KEY, \" 10000\");\n+        Assertions.assertEquals(\"10000\", ConfigurationUtils.getProperty(Constants.SHUTDOWN_WAIT_KEY));\n+        System.clearProperty(Constants.SHUTDOWN_WAIT_KEY);\n+    }\n+\n+    @Test\n+    public void testParseSingleProperties() throws Exception {\n+        String p1 = \"aaa=bbb\";\n+        Map<String, String> result = ConfigurationUtils.parseProperties(p1);\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"bbb\", result.get(\"aaa\"));\n+    }\n+\n+    @Test\n+    public void testParseMultipleProperties() throws Exception {\n+        String p1 = \"aaa=bbb\\nccc=ddd\";\n+        Map<String, String> result = ConfigurationUtils.parseProperties(p1);\n+        Assertions.assertEquals(2, result.size());\n+        Assertions.assertEquals(\"bbb\", result.get(\"aaa\"));\n+        Assertions.assertEquals(\"ddd\", result.get(\"ccc\"));\n+    }\n+\n+    @Test\n+    public void testEscapedNewLine() throws Exception {\n+        String p1 = \"dubbo.registry.address=zookeeper://127.0.0.1:2181\\\\\\\\ndubbo.protocol.port=20880\";\n+        Map<String, String> result = ConfigurationUtils.parseProperties(p1);\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"zookeeper://127.0.0.1:2181\\\\ndubbo.protocol.port=20880\", result.get(\"dubbo.registry.address\"));\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/config/ConfigurationUtilsTest.java",
                "sha": "a16a37483106cf4b736602fa8f64ba6a86f73609",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/config/PropertiesConfigurationTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/config/PropertiesConfigurationTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/config/PropertiesConfigurationTest.java",
                "patch": "@@ -16,15 +16,15 @@\n  */\n package org.apache.dubbo.common.config;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n public class PropertiesConfigurationTest {\n \n     @Test\n     public void testOrderPropertiesProviders() {\n         PropertiesConfiguration configuration = new PropertiesConfiguration(\"test\", null);\n-        Assert.assertTrue(configuration.getInternalProperty(\"testKey\").equals(\"999\"));\n+        Assertions.assertTrue(configuration.getInternalProperty(\"testKey\").equals(\"999\"));\n     }\n \n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/config/PropertiesConfigurationTest.java",
                "sha": "8a23ed2faa6b894eedbab8e253b5da2011b8635a",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoaderTest.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoaderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 38,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoaderTest.java",
                "patch": "@@ -49,8 +49,9 @@\n import org.apache.dubbo.common.extension.ext9_empty.impl.Ext9EmptyImpl;\n import org.apache.dubbo.common.extension.injection.InjectExt;\n import org.apache.dubbo.common.extension.injection.impl.InjectExtImpl;\n-import org.junit.Assert;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashSet;\n import java.util.List;\n@@ -59,13 +60,13 @@\n import static org.hamcrest.CoreMatchers.allOf;\n import static org.hamcrest.CoreMatchers.anyOf;\n import static org.hamcrest.CoreMatchers.instanceOf;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.junit.matchers.JUnitMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class ExtensionLoaderTest {\n     @Test\n@@ -86,7 +87,7 @@ public void test_getExtensionLoader_NotInterface() throws Exception {\n             fail();\n         } catch (IllegalArgumentException expected) {\n             assertThat(expected.getMessage(),\n-                    containsString(\"Extension type(class org.apache.dubbo.common.extension.ExtensionLoaderTest) is not interface\"));\n+                    containsString(\"Extension type (class org.apache.dubbo.common.extension.ExtensionLoaderTest) is not an interface\"));\n         }\n     }\n \n@@ -98,8 +99,8 @@ public void test_getExtensionLoader_NotSpiAnnotation() throws Exception {\n         } catch (IllegalArgumentException expected) {\n             assertThat(expected.getMessage(),\n                     allOf(containsString(\"org.apache.dubbo.common.extension.NoSpiExt\"),\n-                            containsString(\"is not extension\"),\n-                            containsString(\"WITHOUT @SPI Annotation\")));\n+                            containsString(\"is not an extension\"),\n+                            containsString(\"NOT annotated with @SPI\")));\n         }\n     }\n \n@@ -262,7 +263,7 @@ public void test_AddExtension_ExceptionWhenExistedExtension() throws Exception {\n             ExtensionLoader.getExtensionLoader(AddExt1.class).addExtension(\"impl1\", AddExt1_ManualAdd1.class);\n             fail();\n         } catch (IllegalStateException expected) {\n-            assertThat(expected.getMessage(), containsString(\"Extension name impl1 already existed(Extension interface org.apache.dubbo.common.extension.ext8_add.AddExt1)!\"));\n+            assertThat(expected.getMessage(), containsString(\"Extension name impl1 already exists (Extension interface org.apache.dubbo.common.extension.ext8_add.AddExt1)!\"));\n         }\n     }\n \n@@ -285,7 +286,7 @@ public void test_AddExtension_Adaptive_ExceptionWhenExistedAdaptive() throws Exc\n             loader.addExtension(null, AddExt1_ManualAdaptive.class);\n             fail();\n         } catch (IllegalStateException expected) {\n-            assertThat(expected.getMessage(), containsString(\"Adaptive Extension already existed(Extension interface org.apache.dubbo.common.extension.ext8_add.AddExt1)!\"));\n+            assertThat(expected.getMessage(), containsString(\"Adaptive Extension already exists (Extension interface org.apache.dubbo.common.extension.ext8_add.AddExt1)!\"));\n         }\n     }\n \n@@ -334,7 +335,7 @@ public void test_replaceExtension_ExceptionWhenNotExistedExtension() throws Exce\n             ExtensionLoader.getExtensionLoader(AddExt1.class).replaceExtension(\"NotExistedExtension\", AddExt1_ManualAdd1.class);\n             fail();\n         } catch (IllegalStateException expected) {\n-            assertThat(expected.getMessage(), containsString(\"Extension name NotExistedExtension not existed(Extension interface org.apache.dubbo.common.extension.ext8_add.AddExt1)\"));\n+            assertThat(expected.getMessage(), containsString(\"Extension name NotExistedExtension doesn't exist (Extension interface org.apache.dubbo.common.extension.ext8_add.AddExt1)\"));\n         }\n     }\n \n@@ -346,7 +347,7 @@ public void test_replaceExtension_Adaptive_ExceptionWhenNotExistedExtension() th\n             loader.replaceExtension(null, AddExt4_ManualAdaptive.class);\n             fail();\n         } catch (IllegalStateException expected) {\n-            assertThat(expected.getMessage(), containsString(\"Adaptive Extension not existed(Extension interface org.apache.dubbo.common.extension.ext8_add.AddExt4)\"));\n+            assertThat(expected.getMessage(), containsString(\"Adaptive Extension doesn't exist (Extension interface org.apache.dubbo.common.extension.ext8_add.AddExt4)\"));\n         }\n     }\n \n@@ -360,7 +361,7 @@ public void test_InitError() throws Exception {\n             loader.getExtension(\"error\");\n             fail();\n         } catch (IllegalStateException expected) {\n-            assertThat(expected.getMessage(), containsString(\"Failed to load extension class(interface: interface org.apache.dubbo.common.extension.ext7.InitErrorExt\"));\n+            assertThat(expected.getMessage(), containsString(\"Failed to load extension class (interface: interface org.apache.dubbo.common.extension.ext7.InitErrorExt\"));\n             assertThat(expected.getCause(), instanceOf(ExceptionInInitializerError.class));\n         }\n     }\n@@ -371,22 +372,22 @@ public void testLoadActivateExtension() throws Exception {\n         URL url = URL.valueOf(\"test://localhost/test\");\n         List<ActivateExt1> list = ExtensionLoader.getExtensionLoader(ActivateExt1.class)\n                 .getActivateExtension(url, new String[]{}, \"default_group\");\n-        Assert.assertEquals(1, list.size());\n-        Assert.assertTrue(list.get(0).getClass() == ActivateExt1Impl1.class);\n+        Assertions.assertEquals(1, list.size());\n+        Assertions.assertTrue(list.get(0).getClass() == ActivateExt1Impl1.class);\n \n         // test group\n         url = url.addParameter(Constants.GROUP_KEY, \"group1\");\n         list = ExtensionLoader.getExtensionLoader(ActivateExt1.class)\n                 .getActivateExtension(url, new String[]{}, \"group1\");\n-        Assert.assertEquals(1, list.size());\n-        Assert.assertTrue(list.get(0).getClass() == GroupActivateExtImpl.class);\n+        Assertions.assertEquals(1, list.size());\n+        Assertions.assertTrue(list.get(0).getClass() == GroupActivateExtImpl.class);\n \n         // test old @Activate group\n         url = url.addParameter(Constants.GROUP_KEY, \"old_group\");\n         list = ExtensionLoader.getExtensionLoader(ActivateExt1.class)\n                 .getActivateExtension(url, new String[]{}, \"old_group\");\n-        Assert.assertEquals(2, list.size());\n-        Assert.assertTrue(list.get(0).getClass() == OldActivateExt1Impl2.class\n+        Assertions.assertEquals(2, list.size());\n+        Assertions.assertTrue(list.get(0).getClass() == OldActivateExt1Impl2.class\n                 || list.get(0).getClass() == OldActivateExt1Impl3.class);\n \n         // test value\n@@ -395,17 +396,17 @@ public void testLoadActivateExtension() throws Exception {\n         url = url.addParameter(\"value\", \"value\");\n         list = ExtensionLoader.getExtensionLoader(ActivateExt1.class)\n                 .getActivateExtension(url, new String[]{}, \"value\");\n-        Assert.assertEquals(1, list.size());\n-        Assert.assertTrue(list.get(0).getClass() == ValueActivateExtImpl.class);\n+        Assertions.assertEquals(1, list.size());\n+        Assertions.assertTrue(list.get(0).getClass() == ValueActivateExtImpl.class);\n \n         // test order\n         url = URL.valueOf(\"test://localhost/test\");\n         url = url.addParameter(Constants.GROUP_KEY, \"order\");\n         list = ExtensionLoader.getExtensionLoader(ActivateExt1.class)\n                 .getActivateExtension(url, new String[]{}, \"order\");\n-        Assert.assertEquals(2, list.size());\n-        Assert.assertTrue(list.get(0).getClass() == OrderActivateExtImpl1.class);\n-        Assert.assertTrue(list.get(1).getClass() == OrderActivateExtImpl2.class);\n+        Assertions.assertEquals(2, list.size());\n+        Assertions.assertTrue(list.get(0).getClass() == OrderActivateExtImpl1.class);\n+        Assertions.assertTrue(list.get(1).getClass() == OrderActivateExtImpl2.class);\n     }\n \n     @Test\n@@ -414,26 +415,26 @@ public void testLoadDefaultActivateExtension() throws Exception {\n         URL url = URL.valueOf(\"test://localhost/test?ext=order1,default\");\n         List<ActivateExt1> list = ExtensionLoader.getExtensionLoader(ActivateExt1.class)\n                 .getActivateExtension(url, \"ext\", \"default_group\");\n-        Assert.assertEquals(2, list.size());\n-        Assert.assertTrue(list.get(0).getClass() == OrderActivateExtImpl1.class);\n-        Assert.assertTrue(list.get(1).getClass() == ActivateExt1Impl1.class);\n+        Assertions.assertEquals(2, list.size());\n+        Assertions.assertTrue(list.get(0).getClass() == OrderActivateExtImpl1.class);\n+        Assertions.assertTrue(list.get(1).getClass() == ActivateExt1Impl1.class);\n \n         url = URL.valueOf(\"test://localhost/test?ext=default,order1\");\n         list = ExtensionLoader.getExtensionLoader(ActivateExt1.class)\n                 .getActivateExtension(url, \"ext\", \"default_group\");\n-        Assert.assertEquals(2, list.size());\n-        Assert.assertTrue(list.get(0).getClass() == ActivateExt1Impl1.class);\n-        Assert.assertTrue(list.get(1).getClass() == OrderActivateExtImpl1.class);\n+        Assertions.assertEquals(2, list.size());\n+        Assertions.assertTrue(list.get(0).getClass() == ActivateExt1Impl1.class);\n+        Assertions.assertTrue(list.get(1).getClass() == OrderActivateExtImpl1.class);\n     }\n \n     @Test\n     public void testInjectExtension() {\n         // test default\n         InjectExt injectExt = ExtensionLoader.getExtensionLoader(InjectExt.class).getExtension(\"injection\");\n         InjectExtImpl injectExtImpl = (InjectExtImpl) injectExt;\n-        Assert.assertNotNull(injectExtImpl.getSimpleExt());\n-        Assert.assertNull(injectExtImpl.getSimpleExt1());\n-        Assert.assertNull(injectExtImpl.getGenericType());\n+        Assertions.assertNotNull(injectExtImpl.getSimpleExt());\n+        Assertions.assertNull(injectExtImpl.getSimpleExt1());\n+        Assertions.assertNull(injectExtImpl.getGenericType());\n     }\n \n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoaderTest.java",
                "sha": "12d8aa92af7fdab8a1463dc0d49107ece7dcf169",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Adaptive_Test.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Adaptive_Test.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 18,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Adaptive_Test.java",
                "patch": "@@ -29,19 +29,19 @@\n import org.apache.dubbo.common.extension.ext6_inject.impl.Ext6Impl2;\n import org.apache.dubbo.common.utils.LogUtil;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.CoreMatchers.allOf;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.junit.matchers.JUnitMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class ExtensionLoader_Adaptive_Test {\n \n@@ -147,17 +147,17 @@ public void test_getAdaptiveExtension_ExceptionWhenNoAdaptiveMethodOnInterface()\n             fail();\n         } catch (IllegalStateException expected) {\n             assertThat(expected.getMessage(),\n-                    allOf(containsString(\"Can not create adaptive extension interface org.apache.dubbo.common.extension.ext5.NoAdaptiveMethodExt\"),\n-                            containsString(\"No adaptive method on extension org.apache.dubbo.common.extension.ext5.NoAdaptiveMethodExt, refuse to create the adaptive class\")));\n+                    allOf(containsString(\"Can't create adaptive extension interface org.apache.dubbo.common.extension.ext5.NoAdaptiveMethodExt\"),\n+                            containsString(\"No adaptive method exist on extension org.apache.dubbo.common.extension.ext5.NoAdaptiveMethodExt, refuse to create the adaptive class\")));\n         }\n         // report same error when get is invoked for multiple times\n         try {\n             ExtensionLoader.getExtensionLoader(NoAdaptiveMethodExt.class).getAdaptiveExtension();\n             fail();\n         } catch (IllegalStateException expected) {\n             assertThat(expected.getMessage(),\n-                    allOf(containsString(\"Can not create adaptive extension interface org.apache.dubbo.common.extension.ext5.NoAdaptiveMethodExt\"),\n-                            containsString(\"No adaptive method on extension org.apache.dubbo.common.extension.ext5.NoAdaptiveMethodExt, refuse to create the adaptive class\")));\n+                    allOf(containsString(\"Can't create adaptive extension interface org.apache.dubbo.common.extension.ext5.NoAdaptiveMethodExt\"),\n+                            containsString(\"No adaptive method exist on extension org.apache.dubbo.common.extension.ext5.NoAdaptiveMethodExt, refuse to create the adaptive class\")));\n         }\n     }\n \n@@ -185,7 +185,7 @@ public void test_getAdaptiveExtension_ExceptionWhenNoUrlAttribute() throws Excep\n             ExtensionLoader.getExtensionLoader(NoUrlParamExt.class).getAdaptiveExtension();\n             fail();\n         } catch (Exception expected) {\n-            assertThat(expected.getMessage(), containsString(\"fail to create adaptive class for interface \"));\n+            assertThat(expected.getMessage(), containsString(\"Failed to create adaptive class for interface \"));\n             assertThat(expected.getMessage(), containsString(\": not found url parameter or url attribute in parameters of method \"));\n         }\n     }\n@@ -218,7 +218,7 @@ public void test_urlHolder_getAdaptiveExtension_noExtension() throws Exception {\n             ext.echo(holder, \"haha\");\n             fail();\n         } catch (IllegalStateException expected) {\n-            assertThat(expected.getMessage(), containsString(\"Fail to get extension(\"));\n+            assertThat(expected.getMessage(), containsString(\"Failed to get extension\"));\n         }\n \n         url = url.addParameter(\"ext2\", \"XXX\");\n@@ -281,7 +281,7 @@ public void test_urlHolder_getAdaptiveExtension_ExceptionWhenNameNotProvided() t\n             ext.echo(holder, \"impl1\");\n             fail();\n         } catch (IllegalStateException expected) {\n-            assertThat(expected.getMessage(), containsString(\"Fail to get extension(\"));\n+            assertThat(expected.getMessage(), containsString(\"Failed to get extension\"));\n         }\n \n         url = url.addParameter(\"key1\", \"impl1\");\n@@ -290,7 +290,7 @@ public void test_urlHolder_getAdaptiveExtension_ExceptionWhenNameNotProvided() t\n             ext.echo(holder, \"haha\");\n             fail();\n         } catch (IllegalStateException expected) {\n-            assertThat(expected.getMessage(), containsString(\"Fail to get extension(org.apache.dubbo.common.extension.ext2.Ext2) name from url\"));\n+            assertThat(expected.getMessage(), containsString(\"Failed to get extension (org.apache.dubbo.common.extension.ext2.Ext2) name from url\"));\n         }\n     }\n \n@@ -304,7 +304,7 @@ public void test_getAdaptiveExtension_inject() throws Exception {\n \n         assertEquals(\"Ext6Impl1-echo-Ext1Impl1-echo\", ext.echo(url, \"ha\"));\n \n-        Assert.assertTrue(\"can not find error.\", LogUtil.checkNoError());\n+        Assertions.assertTrue(LogUtil.checkNoError(), \"can not find error.\");\n         LogUtil.stop();\n \n         url = url.addParameters(\"simple.ext\", \"impl2\");\n@@ -319,4 +319,4 @@ public void test_getAdaptiveExtension_InjectNotExtFail() throws Exception {\n         Ext6Impl2 impl = (Ext6Impl2) ext;\n         assertNull(impl.getList());\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Adaptive_Test.java",
                "sha": "fe64a63b6ed23f816e8aa88ded16abc7614c3330",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Adaptive_UseJdkCompiler_Test.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Adaptive_UseJdkCompiler_Test.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Adaptive_UseJdkCompiler_Test.java",
                "patch": "@@ -18,16 +18,16 @@\n \n import org.apache.dubbo.common.compiler.support.AdaptiveCompiler;\n \n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n \n public class ExtensionLoader_Adaptive_UseJdkCompiler_Test extends ExtensionLoader_Adaptive_Test {\n-    @BeforeClass\n+    @BeforeAll\n     public static void setUp() throws Exception {\n         AdaptiveCompiler.setDefaultCompiler(\"jdk\");\n     }\n \n-    @AfterClass\n+    @AfterAll\n     public static void tearDown() throws Exception {\n         AdaptiveCompiler.setDefaultCompiler(\"javassist\");\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Adaptive_UseJdkCompiler_Test.java",
                "sha": "371f8589741ff4902b0ccb9e49b39b16a42e7877",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Compatible_Test.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Compatible_Test.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Compatible_Test.java",
                "patch": "@@ -20,9 +20,9 @@\n import org.apache.dubbo.common.extension.compatible.impl.CompatibleExtImpl1;\n import org.apache.dubbo.common.extension.compatible.impl.CompatibleExtImpl2;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class ExtensionLoader_Compatible_Test {\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ExtensionLoader_Compatible_Test.java",
                "sha": "d9df13670711859c708949fe036120bcdd4141f7",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_inject/impl/Ext6Impl1.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_inject/impl/Ext6Impl1.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_inject/impl/Ext6Impl1.java",
                "patch": "@@ -21,15 +21,15 @@\n import org.apache.dubbo.common.extension.ext6_inject.Dao;\n import org.apache.dubbo.common.extension.ext6_inject.Ext6;\n \n-import org.junit.Assert;\n+import org.junit.jupiter.api.Assertions;\n \n public class Ext6Impl1 implements Ext6 {\n     public Dao obj;\n     SimpleExt ext1;\n \n     public void setDao(Dao obj) {\n-        Assert.assertNotNull(\"inject extension instance can not be null\", obj);\n-        Assert.fail();\n+        Assertions.assertNotNull(obj, \"inject extension instance can not be null\");\n+        Assertions.fail();\n     }\n \n     public void setExt1(SimpleExt ext1) {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/ext6_inject/impl/Ext6Impl1.java",
                "sha": "4f746dba8ef833927d676e133e82be7aa7ac7c0d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/support/ActivateComparatorTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/extension/support/ActivateComparatorTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 7,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/extension/support/ActivateComparatorTest.java",
                "patch": "@@ -17,8 +17,8 @@\n package org.apache.dubbo.common.extension.support;\n \n import org.apache.dubbo.common.extension.Activate;\n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.ArrayList;\n import java.util.Collections;\n@@ -42,10 +42,10 @@ public void testActivateComparator(){\n \n         Collections.sort(filters, ActivateComparator.COMPARATOR);\n \n-        Assert.assertEquals(f4, filters.get(0));\n-        Assert.assertEquals(f5, filters.get(1));\n-        Assert.assertEquals(f3, filters.get(2));\n-        Assert.assertEquals(f2, filters.get(3));\n-        Assert.assertEquals(f1, filters.get(4));\n+        Assertions.assertEquals(f4, filters.get(0));\n+        Assertions.assertEquals(f5, filters.get(1));\n+        Assertions.assertEquals(f3, filters.get(2));\n+        Assertions.assertEquals(f2, filters.get(3));\n+        Assertions.assertEquals(f1, filters.get(4));\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/extension/support/ActivateComparatorTest.java",
                "sha": "9181766fc7fc1f7e78d1f3d5b37d7325404a5a2e",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/BytesTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/io/BytesTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 14,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/io/BytesTest.java",
                "patch": "@@ -16,13 +16,14 @@\n  */\n package org.apache.dubbo.common.io;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.io.File;\n import java.io.IOException;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class BytesTest {\n     private final byte[] b1 = \"adpfioha;eoh;aldfadl;kfadslkfdajfio123431241235123davas;odvwe;lmzcoqpwoewqogineopwqihwqetup\\n\\tejqf;lajsfd\u4e2d\u6587\u5b57\u7b260da0gsaofdsf==adfasdfs\".getBytes();\n@@ -58,24 +59,24 @@ public void testMain() throws Exception {\n         assertThat(bytesWithC64, is(bytes));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testWrongBase64Code() {\n-        Bytes.bytes2base64(\"dubbo\".getBytes(), 0, 1, new char[]{'a'});\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> Bytes.bytes2base64(\"dubbo\".getBytes(), 0, 1, new char[]{'a'}));\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testWrongOffSet() {\n-        Bytes.bytes2base64(\"dubbo\".getBytes(), -1, 1);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> Bytes.bytes2base64(\"dubbo\".getBytes(), -1, 1));\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testLargeLength() {\n-        Bytes.bytes2base64(\"dubbo\".getBytes(), 0, 100000);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> Bytes.bytes2base64(\"dubbo\".getBytes(), 0, 100000));\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testSmallLength() {\n-        Bytes.bytes2base64(\"dubbo\".getBytes(), 0, -1);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> Bytes.bytes2base64(\"dubbo\".getBytes(), 0, -1));\n     }\n \n     @Test\n@@ -115,14 +116,14 @@ public void testZip() throws IOException {\n         assertThat(unzip, is(s.getBytes()));\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testBytes2HexWithWrongOffset() {\n-        Bytes.bytes2hex(\"hello\".getBytes(), -1, 1);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> Bytes.bytes2hex(\"hello\".getBytes(), -1, 1));\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testBytes2HexWithWrongLength() {\n-        Bytes.bytes2hex(\"hello\".getBytes(), 0, 6);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> Bytes.bytes2hex(\"hello\".getBytes(), 0, 6));\n     }\n \n     private byte[] int2bytes(int x) {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/BytesTest.java",
                "sha": "71b915c1e40814b90ee248ce241d1f06bf0d03f5",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/StreamUtilsTest.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/io/StreamUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 40,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/io/StreamUtilsTest.java",
                "patch": "@@ -16,16 +16,17 @@\n  */\n package org.apache.dubbo.common.io;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PushbackInputStream;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n \n public class StreamUtilsTest {\n \n@@ -117,23 +118,25 @@ public void testLimitedInputStream() throws Exception {\n         is.close();\n     }\n \n-    @Test(expected = IOException.class)\n-    public void testMarkInputSupport() throws IOException {\n-        InputStream is = StreamUtilsTest.class.getResourceAsStream(\"/StreamUtilsTest.txt\");\n-        try {\n-            is = StreamUtils.markSupportedInputStream(new PushbackInputStream(is), 1);\n-\n-            is.mark(1);\n-            int read = is.read();\n-            assertThat(read, is((int) '0'));\n-\n-            is.skip(1);\n-            is.read();\n-        } finally {\n-            if (is != null) {\n-                is.close();\n+    @Test\n+    public void testMarkInputSupport() {\n+        Assertions.assertThrows(IOException.class, () -> {\n+            InputStream is = StreamUtilsTest.class.getResourceAsStream(\"/StreamUtilsTest.txt\");\n+            try {\n+                is = StreamUtils.markSupportedInputStream(new PushbackInputStream(is), 1);\n+\n+                is.mark(1);\n+                int read = is.read();\n+                assertThat(read, is((int) '0'));\n+\n+                is.skip(1);\n+                is.read();\n+            } finally {\n+                if (is != null) {\n+                    is.close();\n+                }\n             }\n-        }\n+        });\n     }\n \n     @Test\n@@ -145,29 +148,33 @@ public void testSkipForOriginMarkSupportInput() throws IOException {\n         is.close();\n     }\n \n-    @Test(expected = NullPointerException.class)\n-    public void testReadEmptyByteArray() throws IOException {\n-        InputStream is = StreamUtilsTest.class.getResourceAsStream(\"/StreamUtilsTest.txt\");\n-        try {\n-            is = StreamUtils.limitedInputStream(is, 2);\n-            is.read(null, 0, 1);\n-        } finally {\n-            if (is != null) {\n-                is.close();\n+    @Test\n+    public void testReadEmptyByteArray() {\n+        Assertions.assertThrows(NullPointerException.class, () -> {\n+            InputStream is = StreamUtilsTest.class.getResourceAsStream(\"/StreamUtilsTest.txt\");\n+            try {\n+                is = StreamUtils.limitedInputStream(is, 2);\n+                is.read(null, 0, 1);\n+            } finally {\n+                if (is != null) {\n+                    is.close();\n+                }\n             }\n-        }\n+        });\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n-    public void testReadWithWrongOffset() throws IOException {\n-        InputStream is = StreamUtilsTest.class.getResourceAsStream(\"/StreamUtilsTest.txt\");\n-        try {\n-            is = StreamUtils.limitedInputStream(is, 2);\n-            is.read(new byte[1], -1, 1);\n-        } finally {\n-            if (is != null) {\n-                is.close();\n+    @Test\n+    public void testReadWithWrongOffset() {\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {\n+            InputStream is = StreamUtilsTest.class.getResourceAsStream(\"/StreamUtilsTest.txt\");\n+            try {\n+                is = StreamUtils.limitedInputStream(is, 2);\n+                is.read(new byte[1], -1, 1);\n+            } finally {\n+                if (is != null) {\n+                    is.close();\n+                }\n             }\n-        }\n+        });\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/StreamUtilsTest.java",
                "sha": "7c2e6b9e21be877d82d4a5e161af644cd00df9e5",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStreamTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStreamTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 11,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStreamTest.java",
                "patch": "@@ -16,12 +16,13 @@\n  */\n package org.apache.dubbo.common.io;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class UnsafeByteArrayInputStreamTest {\n     @Test\n@@ -58,22 +59,28 @@ public void testRead() throws IOException {\n         assertThat(stream.read(), is((int) 'b'));\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testWrongLength() {\n-        UnsafeByteArrayInputStream stream = new UnsafeByteArrayInputStream(\"abc\".getBytes());\n-        stream.read(new byte[1], 0, 100);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {\n+            UnsafeByteArrayInputStream stream = new UnsafeByteArrayInputStream(\"abc\".getBytes());\n+            stream.read(new byte[1], 0, 100);\n+        });\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testWrongOffset() {\n-        UnsafeByteArrayInputStream stream = new UnsafeByteArrayInputStream(\"abc\".getBytes());\n-        stream.read(new byte[1], -1, 1);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {\n+            UnsafeByteArrayInputStream stream = new UnsafeByteArrayInputStream(\"abc\".getBytes());\n+            stream.read(new byte[1], -1, 1);\n+        });\n     }\n \n-    @Test(expected = NullPointerException.class)\n+    @Test\n     public void testReadEmptyByteArray() {\n-        UnsafeByteArrayInputStream stream = new UnsafeByteArrayInputStream(\"abc\".getBytes());\n-        stream.read(null, 0, 1);\n+        Assertions.assertThrows(NullPointerException.class, () -> {\n+            UnsafeByteArrayInputStream stream = new UnsafeByteArrayInputStream(\"abc\".getBytes());\n+            stream.read(null, 0, 1);\n+        });\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeByteArrayInputStreamTest.java",
                "sha": "bc792fa3f253a41b287a3166e4d864e7cabaf07c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStreamTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStreamTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStreamTest.java",
                "patch": "@@ -16,24 +16,25 @@\n  */\n package org.apache.dubbo.common.io;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n import java.io.IOException;\n import java.io.OutputStream;\n import java.nio.ByteBuffer;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n \n public class UnsafeByteArrayOutputStreamTest {\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testWrongSize() {\n-        new UnsafeByteArrayOutputStream(-1);\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> new UnsafeByteArrayOutputStream(-1));\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeByteArrayOutputStreamTest.java",
                "sha": "715c128e00d80dc7c15a920a4e3f6b2335a6c9cf",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringReaderTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringReaderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 6,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringReaderTest.java",
                "patch": "@@ -16,12 +16,13 @@\n  */\n package org.apache.dubbo.common.io;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class UnsafeStringReaderTest {\n     @Test\n@@ -63,10 +64,12 @@ public void testSkipTooLong() throws IOException {\n         assertThat(skip, is(0L));\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testWrongLength() throws IOException {\n-        UnsafeStringReader reader = new UnsafeStringReader(\"abc\");\n-        char[] chars = new char[1];\n-        reader.read(chars, 0, 2);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {\n+            UnsafeStringReader reader = new UnsafeStringReader(\"abc\");\n+            char[] chars = new char[1];\n+            reader.read(chars, 0, 2);\n+        });\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringReaderTest.java",
                "sha": "1ee478f71d633597ab83b4ef9305e74ac1f6d727",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringWriterTest.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringWriterTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 12,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringWriterTest.java",
                "patch": "@@ -16,12 +16,13 @@\n  */\n package org.apache.dubbo.common.io;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class UnsafeStringWriterTest {\n     @Test\n@@ -36,9 +37,11 @@ public void testWrite() {\n         assertThat(writer.toString(), is(\"abc\"));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testNegativeSize() {\n-        new UnsafeStringWriter(-1);\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            new UnsafeStringWriter(-1);\n+        });\n     }\n \n     @Test\n@@ -78,17 +81,21 @@ public void testWriteNull() throws IOException {\n         assertThat(writer.toString(), is(\"aba\"));\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testWriteCharWithWrongLength() throws IOException {\n-        UnsafeStringWriter writer = new UnsafeStringWriter();\n-        char[] chars = new char[0];\n-        writer.write(chars, 0, 1);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {\n+            UnsafeStringWriter writer = new UnsafeStringWriter();\n+            char[] chars = new char[0];\n+            writer.write(chars, 0, 1);\n+        });\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testWriteCharWithWrongCombineLength() throws IOException {\n-        UnsafeStringWriter writer = new UnsafeStringWriter();\n-        char[] chars = new char[1];\n-        writer.write(chars, 1, 1);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {\n+            UnsafeStringWriter writer = new UnsafeStringWriter();\n+            char[] chars = new char[1];\n+            writer.write(chars, 1, 1);\n+        });\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringWriterTest.java",
                "sha": "f487441f47627c12c01f980fc4deb8ed6f7661c2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONReaderTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONReaderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONReaderTest.java",
                "patch": "@@ -18,9 +18,9 @@\n \n import org.apache.dubbo.common.io.UnsafeStringReader;\n \n-import junit.framework.TestCase;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-public class JSONReaderTest extends TestCase {\n+public class JSONReaderTest  {\n     public void testMain() throws Exception {\n         String json = \"{ name: 'name', friends: [ 1, null, 3.2, ] }\";\n         JSONReader reader = new JSONReader(new UnsafeStringReader(json));",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONReaderTest.java",
                "sha": "2688fa26bfe9601aa923e78bbbfd4167315243c6",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 13,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONTest.java",
                "patch": "@@ -16,8 +16,8 @@\n  */\n package org.apache.dubbo.common.json;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.io.StringReader;\n import java.io.StringWriter;\n@@ -27,7 +27,7 @@\n import java.util.Locale;\n import java.util.Map;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n @Deprecated\n public class JSONTest {\n@@ -42,12 +42,12 @@ public void testException() throws Exception {\n         JSON.json(e, writer);\n         String json = writer.getBuffer().toString();\n         System.out.println(json);\n-        // Assert.assertEquals(\"{\\\"code\\\":\\\"001\\\",\\\"message\\\":\\\"AAAAAAAA\\\"}\", json);\n+        // Assertions.assertEquals(\"{\\\"code\\\":\\\"001\\\",\\\"message\\\":\\\"AAAAAAAA\\\"}\", json);\n \n         StringReader reader = new StringReader(json);\n         MyException result = JSON.parse(reader, MyException.class);\n-        Assert.assertEquals(\"001\", result.getCode());\n-        Assert.assertEquals(\"AAAAAAAA\", result.getMessage());\n+        Assertions.assertEquals(\"001\", result.getCode());\n+        Assertions.assertEquals(\"AAAAAAAA\", result.getMessage());\n     }\n \n     @Test\n@@ -59,11 +59,11 @@ public void testMap() throws Exception {\n         StringWriter writer = new StringWriter();\n         JSON.json(map, writer);\n         String json = writer.getBuffer().toString();\n-        Assert.assertEquals(\"{\\\"aaa\\\":\\\"bbb\\\"}\", json);\n+        Assertions.assertEquals(\"{\\\"aaa\\\":\\\"bbb\\\"}\", json);\n \n         StringReader reader = new StringReader(json);\n         Map<String, String> result = JSON.parse(reader, Map.class);\n-        Assert.assertEquals(\"bbb\", result.get(\"aaa\"));\n+        Assertions.assertEquals(\"bbb\", result.get(\"aaa\"));\n     }\n \n     @Test\n@@ -75,12 +75,12 @@ public void testMapArray() throws Exception {\n         StringWriter writer = new StringWriter();\n         JSON.json(new Object[]{map}, writer); // args\n         String json = writer.getBuffer().toString();\n-        Assert.assertEquals(\"[{\\\"aaa\\\":\\\"bbb\\\"}]\", json);\n+        Assertions.assertEquals(\"[{\\\"aaa\\\":\\\"bbb\\\"}]\", json);\n \n         StringReader reader = new StringReader(json);\n         Object[] result = JSON.parse(reader, new Class<?>[]{Map.class});\n-        Assert.assertEquals(1, result.length);\n-        Assert.assertEquals(\"bbb\", ((Map<String, String>) result[0]).get(\"aaa\"));\n+        Assertions.assertEquals(1, result.length);\n+        Assertions.assertEquals(\"bbb\", ((Map<String, String>) result[0]).get(\"aaa\"));\n     }\n \n     @Test\n@@ -92,11 +92,11 @@ public void testLinkedMap() throws Exception {\n         StringWriter writer = new StringWriter();\n         JSON.json(map, writer);\n         String json = writer.getBuffer().toString();\n-        Assert.assertEquals(\"{\\\"aaa\\\":\\\"bbb\\\"}\", json);\n+        Assertions.assertEquals(\"{\\\"aaa\\\":\\\"bbb\\\"}\", json);\n \n         StringReader reader = new StringReader(json);\n         LinkedHashMap<String, String> result = JSON.parse(reader, LinkedHashMap.class);\n-        Assert.assertEquals(\"bbb\", result.get(\"aaa\"));\n+        Assertions.assertEquals(\"bbb\", result.get(\"aaa\"));\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONTest.java",
                "sha": "0a7f9063f33c94b07f496decc7b4f11b0a8ef194",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONWriterTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONWriterTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONWriterTest.java",
                "patch": "@@ -16,11 +16,12 @@\n  */\n package org.apache.dubbo.common.json;\n \n-import junit.framework.TestCase;\n \n import java.io.StringWriter;\n \n-public class JSONWriterTest extends TestCase {\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class JSONWriterTest {\n     public void testWriteJson() throws Exception {\n         StringWriter w = new StringWriter();\n         JSONWriter writer = new JSONWriter(w);",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/json/JSONWriterTest.java",
                "sha": "0d7da710ca905e09748d3fb59f482f2a77b70414",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerAdapterTest.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerAdapterTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 31,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerAdapterTest.java",
                "patch": "@@ -26,51 +26,45 @@\n import org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter;\n import org.apache.dubbo.common.logger.slf4j.Slf4jLogger;\n import org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n \n-import java.util.Arrays;\n-import java.util.Collection;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.stream.Stream;\n \n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n-@RunWith(Parameterized.class)\n public class LoggerAdapterTest {\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return Arrays.asList(new Object[][]{\n-                {JclLoggerAdapter.class, JclLogger.class},\n-                {JdkLoggerAdapter.class, JdkLogger.class},\n-                {Log4jLoggerAdapter.class, Log4jLogger.class},\n-                {Slf4jLoggerAdapter.class, Slf4jLogger.class},\n-                {Log4j2LoggerAdapter.class, Log4j2Logger.class},\n-        });\n-    }\n-\n-    private Class loggerClass;\n-    private LoggerAdapter loggerAdapter;\n-\n-    public LoggerAdapterTest(Class<? extends LoggerAdapter> loggerAdapterClass, Class<? extends Logger> loggerClass) throws Exception {\n-        this.loggerClass = loggerClass;\n-        this.loggerAdapter = loggerAdapterClass.newInstance();\n+    static Stream<Arguments> data() {\n+        return Stream.of(\n+                Arguments.of(JclLoggerAdapter.class, JclLogger.class),\n+                Arguments.of(JdkLoggerAdapter.class, JdkLogger.class),\n+                Arguments.of(Log4jLoggerAdapter.class, Log4jLogger.class),\n+                Arguments.of(Slf4jLoggerAdapter.class, Slf4jLogger.class),\n+                Arguments.of(Log4j2LoggerAdapter.class, Log4j2Logger.class)\n+        );\n     }\n \n-    @Test\n-    public void testGetLogger() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testGetLogger(Class<? extends LoggerAdapter> loggerAdapterClass, Class<? extends Logger> loggerClass) throws IllegalAccessException, InstantiationException {\n+        LoggerAdapter loggerAdapter = loggerAdapterClass.newInstance();\n         Logger logger = loggerAdapter.getLogger(this.getClass());\n-        assertThat(logger.getClass().isAssignableFrom(this.loggerClass), is(true));\n+        assertThat(logger.getClass().isAssignableFrom(loggerClass), is(true));\n \n         logger = loggerAdapter.getLogger(this.getClass().getSimpleName());\n-        assertThat(logger.getClass().isAssignableFrom(this.loggerClass), is(true));\n+        assertThat(logger.getClass().isAssignableFrom(loggerClass), is(true));\n+\n     }\n \n-    @Test\n-    public void testLevel() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testLevel(Class<? extends LoggerAdapter> loggerAdapterClass) throws IllegalAccessException, InstantiationException {\n+        LoggerAdapter loggerAdapter = loggerAdapterClass.newInstance();\n         for (Level targetLevel : Level.values()) {\n             loggerAdapter.setLevel(targetLevel);\n-\n             assertThat(loggerAdapter.getLevel(), is(targetLevel));\n         }\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerAdapterTest.java",
                "sha": "1d6fbe77e060d89c3cb572423c6625e523a1b89e",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerFactoryTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerFactoryTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerFactoryTest.java",
                "patch": "@@ -16,13 +16,13 @@\n  */\n package org.apache.dubbo.common.logger;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.io.File;\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.nullValue;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class LoggerFactoryTest {\n     @Test\n@@ -58,4 +58,12 @@ public void testGetLogger() {\n \n         assertThat(logger1, is(logger2));\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void shouldReturnSameLogger() {\n+        Logger logger1 = LoggerFactory.getLogger(this.getClass().getName());\n+        Logger logger2 = LoggerFactory.getLogger(this.getClass().getName());\n+\n+        assertThat(logger1, is(logger2));\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerFactoryTest.java",
                "sha": "25fce0ebdfdde29b73e10ce5f47ae963c476d480",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerTest.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 25,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerTest.java",
                "patch": "@@ -19,41 +19,38 @@\n import org.apache.dubbo.common.logger.jcl.JclLoggerAdapter;\n import org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter;\n import org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter;\n+import org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter;\n import org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n \n-import java.util.Arrays;\n-import java.util.Collection;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.stream.Stream;\n \n import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.CoreMatchers.nullValue;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n \n-@RunWith(Parameterized.class)\n public class LoggerTest {\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return Arrays.asList(new Object[][]{\n-                {JclLoggerAdapter.class},\n-                {JdkLoggerAdapter.class},\n-                {Log4jLoggerAdapter.class},\n-                {Slf4jLoggerAdapter.class}\n-        });\n-    }\n \n-    private Logger logger;\n+    static Stream<Arguments> data() {\n+        return Stream.of(\n+                Arguments.of(JclLoggerAdapter.class),\n+                Arguments.of(JdkLoggerAdapter.class),\n+                Arguments.of(Log4jLoggerAdapter.class),\n+                Arguments.of(Slf4jLoggerAdapter.class),\n+                Arguments.of(Log4j2LoggerAdapter.class)\n+        );\n+    }\n \n-    public LoggerTest(Class<? extends LoggerAdapter> loggerAdapter) throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testAllLogMethod(Class<? extends LoggerAdapter> loggerAdapter) throws Exception {\n         LoggerAdapter adapter = loggerAdapter.newInstance();\n         adapter.setLevel(Level.ALL);\n-        this.logger = adapter.getLogger(this.getClass());\n-    }\n-\n-    @Test\n-    public void testAllLogMethod() {\n+        Logger logger = adapter.getLogger(this.getClass());\n         logger.error(\"error\");\n         logger.warn(\"warn\");\n         logger.info(\"info\");\n@@ -73,8 +70,12 @@ public void testAllLogMethod() {\n         logger.trace(\"trace\", new Exception(\"trace\"));\n     }\n \n-    @Test\n-    public void testLevelEnable() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testLevelEnable(Class<? extends LoggerAdapter> loggerAdapter) throws IllegalAccessException, InstantiationException {\n+        LoggerAdapter adapter = loggerAdapter.newInstance();\n+        adapter.setLevel(Level.ALL);\n+        Logger logger = adapter.getLogger(this.getClass());\n         assertThat(logger.isWarnEnabled(), not(nullValue()));\n         assertThat(logger.isTraceEnabled(), not(nullValue()));\n         assertThat(logger.isErrorEnabled(), not(nullValue()));",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerTest.java",
                "sha": "81987f782da48835bb7818a4201955dfae7df588",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java",
                "patch": "@@ -16,7 +16,7 @@\n  */\n package org.apache.dubbo.common.logger.slf4j;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.slf4j.Marker;\n import org.slf4j.spi.LocationAwareLogger;\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java",
                "sha": "d53ce2e83bf25eb02809e23b4eb6080ab6306717",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/support/FailsafeLoggerTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/logger/support/FailsafeLoggerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 6,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/logger/support/FailsafeLoggerTest.java",
                "patch": "@@ -17,7 +17,9 @@\n package org.apache.dubbo.common.logger.support;\n \n import org.apache.dubbo.common.logger.Logger;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n@@ -91,12 +93,14 @@ public void testSuccessLogger() {\n         failsafeLogger.trace(\"trace\", new Exception(\"trace\"));\n     }\n \n-    @Test(expected = RuntimeException.class)\n+    @Test\n     public void testGetLogger() {\n-        Logger failLogger = mock(Logger.class);\n-        FailsafeLogger failsafeLogger = new FailsafeLogger(failLogger);\n+        Assertions.assertThrows(RuntimeException.class, () -> {\n+            Logger failLogger = mock(Logger.class);\n+            FailsafeLogger failsafeLogger = new FailsafeLogger(failLogger);\n \n-        doThrow(new RuntimeException()).when(failLogger).error(anyString());\n-        failsafeLogger.getLogger().error(\"should get error\");\n+            doThrow(new RuntimeException()).when(failLogger).error(anyString());\n+            failsafeLogger.getLogger().error(\"should get error\");\n+        });\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/logger/support/FailsafeLoggerTest.java",
                "sha": "530c2a1d61c4b521758b531b5aba23859f05a7c0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/status/StatusTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/status/StatusTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/status/StatusTest.java",
                "patch": "@@ -17,13 +17,13 @@\n \n package org.apache.dubbo.common.status;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import static org.apache.dubbo.common.status.Status.Level.OK;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.isEmptyOrNullString;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class StatusTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/status/StatusTest.java",
                "sha": "41cad69367b065b897c035db6c8280ed8a6d7528",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/status/support/LoadStatusCheckerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/status/support/LoadStatusCheckerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/status/support/LoadStatusCheckerTest.java",
                "patch": "@@ -20,10 +20,10 @@\n import org.apache.dubbo.common.logger.Logger;\n import org.apache.dubbo.common.logger.LoggerFactory;\n import org.apache.dubbo.common.status.Status;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.Matchers.notNullValue;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class LoadStatusCheckerTest {\n     private static Logger logger = LoggerFactory.getLogger(LoadStatusCheckerTest.class);",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/status/support/LoadStatusCheckerTest.java",
                "sha": "baafdca9c0bcf0a965656e11e96b6fd044f9433d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/status/support/MemoryStatusCheckerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/status/support/MemoryStatusCheckerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/status/support/MemoryStatusCheckerTest.java",
                "patch": "@@ -20,13 +20,13 @@\n import org.apache.dubbo.common.logger.Logger;\n import org.apache.dubbo.common.logger.LoggerFactory;\n import org.apache.dubbo.common.status.Status;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import static org.apache.dubbo.common.status.Status.Level.OK;\n import static org.apache.dubbo.common.status.Status.Level.WARN;\n import static org.hamcrest.CoreMatchers.anyOf;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class MemoryStatusCheckerTest {\n     private static final Logger logger = LoggerFactory.getLogger(MemoryStatusCheckerTest.class);",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/status/support/MemoryStatusCheckerTest.java",
                "sha": "94e3b1de681a01d1abfc0f1f61bda8bf4169e4ed",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/status/support/StatusUtilsTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/status/support/StatusUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/status/support/StatusUtilsTest.java",
                "patch": "@@ -18,7 +18,7 @@\n package org.apache.dubbo.common.status.support;\n \n import org.apache.dubbo.common.status.Status;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -27,7 +27,7 @@\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.isEmptyOrNullString;\n import static org.hamcrest.Matchers.not;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class StatusUtilsTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/status/support/StatusUtilsTest.java",
                "sha": "90b9400c6b0feb17a1c6a648e57d5a3dd2d94e65",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/store/support/SimpleDataStoreTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/store/support/SimpleDataStoreTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 5,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/store/support/SimpleDataStoreTest.java",
                "patch": "@@ -16,14 +16,14 @@\n  */\n package org.apache.dubbo.common.store.support;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Map;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class SimpleDataStoreTest {\n     private SimpleDataStore dataStore = new SimpleDataStore();",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/store/support/SimpleDataStoreTest.java",
                "sha": "fc99859d477d40f04cba37529dd79070030e0df3",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 18,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalTest.java",
                "patch": "@@ -17,8 +17,8 @@\n \n package org.apache.dubbo.common.threadlocal;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Objects;\n import java.util.concurrent.CountDownLatch;\n@@ -60,45 +60,45 @@ protected Integer initialValue() throws Exception {\n     public void testRemoveAll() throws InterruptedException {\n         final InternalThreadLocal<Integer> internalThreadLocal = new InternalThreadLocal<Integer>();\n         internalThreadLocal.set(1);\n-        Assert.assertTrue(\"set failed\", internalThreadLocal.get() == 1);\n+        Assertions.assertTrue(internalThreadLocal.get() == 1, \"set failed\");\n \n         final InternalThreadLocal<String> internalThreadLocalString = new InternalThreadLocal<String>();\n         internalThreadLocalString.set(\"value\");\n-        Assert.assertTrue(\"set failed\", \"value\".equals(internalThreadLocalString.get()));\n+        Assertions.assertTrue(\"value\".equals(internalThreadLocalString.get()), \"set failed\");\n \n         InternalThreadLocal.removeAll();\n-        Assert.assertTrue(\"removeAll failed!\", internalThreadLocal.get() == null);\n-        Assert.assertTrue(\"removeAll failed!\", internalThreadLocalString.get() == null);\n+        Assertions.assertTrue(internalThreadLocal.get() == null, \"removeAll failed!\");\n+        Assertions.assertTrue(internalThreadLocalString.get() == null, \"removeAll failed!\");\n     }\n \n     @Test\n     public void testSize() throws InterruptedException {\n         final InternalThreadLocal<Integer> internalThreadLocal = new InternalThreadLocal<Integer>();\n         internalThreadLocal.set(1);\n-        Assert.assertTrue(\"size method is wrong!\", InternalThreadLocal.size() == 1);\n+        Assertions.assertTrue(InternalThreadLocal.size() == 1, \"size method is wrong!\");\n \n         final InternalThreadLocal<String> internalThreadLocalString = new InternalThreadLocal<String>();\n         internalThreadLocalString.set(\"value\");\n-        Assert.assertTrue(\"size method is wrong!\", InternalThreadLocal.size() == 2);\n+        Assertions.assertTrue(InternalThreadLocal.size() == 2, \"size method is wrong!\");\n     }\n \n     @Test\n     public void testSetAndGet() {\n         final Integer testVal = 10;\n         final InternalThreadLocal<Integer> internalThreadLocal = new InternalThreadLocal<Integer>();\n         internalThreadLocal.set(testVal);\n-        Assert.assertTrue(\"set is not equals get\",\n-                Objects.equals(testVal, internalThreadLocal.get()));\n+        Assertions.assertTrue(\n+                Objects.equals(testVal, internalThreadLocal.get()), \"set is not equals get\");\n     }\n \n     @Test\n     public void testRemove() {\n         final InternalThreadLocal<Integer> internalThreadLocal = new InternalThreadLocal<Integer>();\n         internalThreadLocal.set(1);\n-        Assert.assertTrue(\"get method false!\", internalThreadLocal.get() == 1);\n+        Assertions.assertTrue(internalThreadLocal.get() == 1, \"get method false!\");\n \n         internalThreadLocal.remove();\n-        Assert.assertTrue(\"remove failed!\", internalThreadLocal.get() == null);\n+        Assertions.assertTrue(internalThreadLocal.get() == null, \"remove failed!\");\n     }\n \n     @Test\n@@ -112,10 +112,10 @@ protected void onRemoval(Integer value) throws Exception {\n             }\n         };\n         internalThreadLocal.set(1);\n-        Assert.assertTrue(\"get method false!\", internalThreadLocal.get() == 1);\n+        Assertions.assertTrue(internalThreadLocal.get() == 1, \"get method false!\");\n \n         internalThreadLocal.remove();\n-        Assert.assertTrue(\"onRemove method failed!\", valueToRemove[0] == 2);\n+        Assertions.assertTrue(valueToRemove[0] == 2, \"onRemove method failed!\");\n     }\n \n     @Test\n@@ -129,8 +129,8 @@ public void testMultiThreadSetAndGet() throws InterruptedException {\n             public void run() {\n \n                 internalThreadLocal.set(testVal1);\n-                Assert.assertTrue(\"set is not equals get\",\n-                        Objects.equals(testVal1, internalThreadLocal.get()));\n+                Assertions.assertTrue(\n+                        Objects.equals(testVal1, internalThreadLocal.get()), \"set is not equals get\");\n                 countDownLatch.countDown();\n             }\n         });\n@@ -140,8 +140,8 @@ public void run() {\n             @Override\n             public void run() {\n                 internalThreadLocal.set(testVal2);\n-                Assert.assertTrue(\"set is not equals get\",\n-                        Objects.equals(testVal2, internalThreadLocal.get()));\n+                Assertions.assertTrue(\n+                        Objects.equals(testVal2, internalThreadLocal.get()), \"set is not equals get\");\n                 countDownLatch.countDown();\n             }\n         });",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalTest.java",
                "sha": "60067a3b737cafc99dcbcff315024d06c4204ae8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactoryTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactoryTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactoryTest.java",
                "patch": "@@ -17,8 +17,8 @@\n \n package org.apache.dubbo.common.threadlocal;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n public class NamedInternalThreadFactoryTest {\n \n@@ -31,6 +31,6 @@ public void run() {\n \n             }\n         });\n-        Assert.assertTrue(\"thread is not InternalThread\", t.getClass().equals(InternalThread.class));\n+        Assertions.assertTrue(t.getClass().equals(InternalThread.class), \"thread is not InternalThread\");\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadlocal/NamedInternalThreadFactoryTest.java",
                "sha": "7b9619f12b2ef9f09223eb0f9b99c1cf5d2c5e55",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReportTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReportTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReportTest.java",
                "patch": "@@ -18,7 +18,7 @@\n \n import org.apache.dubbo.common.URL;\n import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.concurrent.Executors;\n import java.util.concurrent.RejectedExecutionException;",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReportTest.java",
                "sha": "ed737efa11fb37e7b37565a398b385a775598f60",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPoolTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPoolTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPoolTest.java",
                "patch": "@@ -23,7 +23,7 @@\n import org.apache.dubbo.common.threadpool.ThreadPool;\n import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;\n import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.CountDownLatch;\n@@ -36,7 +36,7 @@\n import static org.hamcrest.Matchers.instanceOf;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.startsWith;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class CachedThreadPoolTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/cached/CachedThreadPoolTest.java",
                "sha": "763cd0fdfe9e39c0b2bb3682631d6c5c3676ac48",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 5,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "patch": "@@ -22,8 +22,8 @@\n import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;\n import org.apache.dubbo.common.utils.NamedThreadFactory;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.TimeUnit;\n@@ -90,17 +90,17 @@ public void run() {\n         }\n         Thread.sleep(5000);\n         // cores theads are all alive.\n-        Assert.assertTrue(\"more than cores threads alive!\", executor.getPoolSize() == cores);\n+        Assertions.assertTrue(executor.getPoolSize() == cores, \"more than cores threads alive!\");\n     }\n \n     @Test\n     public void testSPI() {\n         ExecutorService executorService = (ExecutorService) ExtensionLoader.getExtensionLoader(ThreadPool.class)\n                 .getExtension(\"eager\")\n                 .getExecutor(URL);\n-        Assert.assertTrue(\"test spi fail!\",\n+        Assertions.assertTrue(\n                 executorService.getClass()\n                         .getSimpleName()\n-                        .equals(\"EagerThreadPoolExecutor\"));\n+                        .equals(\"EagerThreadPoolExecutor\"), \"test spi fail!\");\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "sha": "ddbe8a0580c4f9bea55881532a3de8310088fefe",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolTest.java",
                "patch": "@@ -23,7 +23,7 @@\n import org.apache.dubbo.common.threadpool.ThreadPool;\n import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;\n import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.CountDownLatch;\n@@ -34,7 +34,7 @@\n import static org.hamcrest.Matchers.instanceOf;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.startsWith;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class EagerThreadPoolTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/EagerThreadPoolTest.java",
                "sha": "2884c73e8cdfd6fb2e9c0e28c874478fe9a15c88",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/TaskQueueTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/TaskQueueTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 11,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/TaskQueueTest.java",
                "patch": "@@ -17,22 +17,25 @@\n \n package org.apache.dubbo.common.threadpool.support.eager;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.TimeUnit;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n import static org.mockito.Mockito.mock;\n \n public class TaskQueueTest {\n \n-    @Test(expected = RejectedExecutionException.class)\n+    @Test\n     public void testOffer1() throws Exception {\n-        TaskQueue<Runnable> queue = new TaskQueue<Runnable>(1);\n-        queue.offer(mock(Runnable.class));\n+        Assertions.assertThrows(RejectedExecutionException.class, () -> {\n+            TaskQueue<Runnable> queue = new TaskQueue<Runnable>(1);\n+            queue.offer(mock(Runnable.class));\n+        });\n     }\n \n     @Test\n@@ -67,13 +70,15 @@ public void testOffer4() throws Exception {\n         assertThat(queue.offer(mock(Runnable.class)), is(true));\n     }\n \n-    @Test(expected = RejectedExecutionException.class)\n+    @Test\n     public void testRetryOffer1() throws Exception {\n-        TaskQueue<Runnable> queue = new TaskQueue<Runnable>(1);\n-        EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);\n-        Mockito.when(executor.isShutdown()).thenReturn(true);\n-        queue.setExecutor(executor);\n-        queue.retryOffer(mock(Runnable.class), 1000, TimeUnit.MILLISECONDS);\n+        Assertions.assertThrows(RejectedExecutionException.class, () -> {\n+            TaskQueue<Runnable> queue = new TaskQueue<Runnable>(1);\n+            EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);\n+            Mockito.when(executor.isShutdown()).thenReturn(true);\n+            queue.setExecutor(executor);\n+            queue.retryOffer(mock(Runnable.class), 1000, TimeUnit.MILLISECONDS);\n+        });\n     }\n \n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/eager/TaskQueueTest.java",
                "sha": "dc4a8bfa775289437af23ebfe564666bae0b0c5b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/fixed/FixedThreadPoolTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/fixed/FixedThreadPoolTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/fixed/FixedThreadPoolTest.java",
                "patch": "@@ -24,7 +24,7 @@\n import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;\n import org.apache.dubbo.common.threadpool.support.limited.LimitedThreadPool;\n import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.CountDownLatch;\n@@ -37,7 +37,7 @@\n import static org.hamcrest.Matchers.instanceOf;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.startsWith;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class FixedThreadPoolTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/fixed/FixedThreadPoolTest.java",
                "sha": "f1324b18d890ffd75364f6e360c91da2fd745c2f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/limited/LimitedThreadPoolTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/limited/LimitedThreadPoolTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/limited/LimitedThreadPoolTest.java",
                "patch": "@@ -23,7 +23,7 @@\n import org.apache.dubbo.common.threadpool.ThreadPool;\n import org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport;\n import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.CountDownLatch;\n@@ -36,7 +36,7 @@\n import static org.hamcrest.Matchers.instanceOf;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.startsWith;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class LimitedThreadPoolTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/limited/LimitedThreadPoolTest.java",
                "sha": "bb1465773b76ec076d722e72a7be39794865a049",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/timer/HashedWheelTimerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/timer/HashedWheelTimerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/timer/HashedWheelTimerTest.java",
                "patch": "@@ -18,7 +18,7 @@\n package org.apache.dubbo.common.timer;\n \n import org.apache.dubbo.common.utils.NamedThreadFactory;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/timer/HashedWheelTimerTest.java",
                "sha": "022351462b7bd5e7471b936502009913f5ae7863",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ArrayUtilsTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ArrayUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ArrayUtilsTest.java",
                "patch": "@@ -17,10 +17,10 @@\n \n package org.apache.dubbo.common.utils;\n \n-import static junit.framework.TestCase.assertFalse;\n-import static junit.framework.TestCase.assertTrue;\n+import org.junit.jupiter.api.Test;\n \n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class ArrayUtilsTest {\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ArrayUtilsTest.java",
                "sha": "9d19f18b1d61d71d398891221041cbaafe641e8b",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/AssertTest.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/AssertTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 15,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/AssertTest.java",
                "patch": "@@ -17,43 +17,45 @@\n \n package org.apache.dubbo.common.utils;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n-import static org.apache.dubbo.common.utils.Assert.notNull;\n import static org.apache.dubbo.common.utils.Assert.notEmptyString;\n+import static org.apache.dubbo.common.utils.Assert.notNull;\n \n public class AssertTest {\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testNotNull1() throws Exception {\n-        notNull(null, \"null object\");\n+    @Test\n+    public void testNotNull1() {\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> notNull(null, \"null object\"));\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testNotNull2() throws Exception {\n-        notNull(null, new IllegalStateException(\"null object\"));\n+    @Test\n+    public void testNotNull2() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> notNull(null, new IllegalStateException(\"null object\")));\n     }\n \n     @Test\n     public void testNotNullWhenInputNotNull1() {\n-        notNull(new Object(),\"null object\");\n+        notNull(new Object(), \"null object\");\n     }\n \n     @Test\n     public void testNotNullWhenInputNotNull2() {\n-        notNull(new Object(),new IllegalStateException(\"null object\"));\n+        notNull(new Object(), new IllegalStateException(\"null object\"));\n     }\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n     public void testNotNullString() {\n-        notEmptyString(null,\"Message can't be null\");\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> notEmptyString(null, \"Message can't be null\"));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testNotEmptyString() {\n-        notEmptyString(\"\",\"Message can't be null or empty\");\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> notEmptyString(\"\", \"Message can't be null or empty\"));\n     }\n \n     @Test\n     public void testNotNullNotEmptyString() {\n-        notEmptyString(\"abcd\",\"Message can'be null or empty\");\n+        notEmptyString(\"abcd\", \"Message can'be null or empty\");\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/AssertTest.java",
                "sha": "bea94885222c054736b40295578bceb478adfbe8",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/AtomicPositiveIntegerTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/AtomicPositiveIntegerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 12,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/AtomicPositiveIntegerTest.java",
                "patch": "@@ -16,15 +16,16 @@\n  */\n package org.apache.dubbo.common.utils;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.CoreMatchers.allOf;\n import static org.hamcrest.CoreMatchers.containsString;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.fail;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class AtomicPositiveIntegerTest {\n     private AtomicPositiveInteger i1 = new AtomicPositiveInteger();\n@@ -159,24 +160,28 @@ public void testAddAndGet() throws Exception {\n         assertEquals(2, i3.get());\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testCompareAndSet1() throws Exception {\n-        i1.compareAndSet(i1.get(), -1);\n+    @Test\n+    public void testCompareAndSet1() {\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            i1.compareAndSet(i1.get(), -1);\n+        });\n     }\n \n     @Test\n-    public void testCompareAndSet2() throws Exception {\n+    public void testCompareAndSet2() {\n         assertThat(i1.compareAndSet(i1.get(), 2), is(true));\n         assertThat(i1.get(), is(2));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWeakCompareAndSet1() throws Exception {\n-        i1.weakCompareAndSet(i1.get(), -1);\n+    @Test\n+    public void testWeakCompareAndSet1() {\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n+            i1.weakCompareAndSet(i1.get(), -1);\n+        });\n     }\n \n     @Test\n-    public void testWeakCompareAndSet2() throws Exception {\n+    public void testWeakCompareAndSet2() {\n         assertThat(i1.weakCompareAndSet(i1.get(), 2), is(true));\n         assertThat(i1.get(), is(2));\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/AtomicPositiveIntegerTest.java",
                "sha": "f57b943a658ef98f291e2a6f013ca7cfbc55916f",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CIDRUtilsTest.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CIDRUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/CIDRUtilsTest.java",
                "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.common.utils;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.net.UnknownHostException;\n+\n+/**\n+ * @author cvictory ON 2019-02-28\n+ */\n+public class CIDRUtilsTest {\n+\n+    @Test\n+    public void testIpv4() throws UnknownHostException {\n+        CIDRUtils cidrUtils = new CIDRUtils(\"192.168.1.0/26\");\n+        Assertions.assertTrue(cidrUtils.isInRange(\"192.168.1.63\"));\n+        Assertions.assertFalse(cidrUtils.isInRange(\"192.168.1.65\"));\n+\n+        cidrUtils = new CIDRUtils(\"192.168.1.192/26\");\n+        Assertions.assertTrue(cidrUtils.isInRange(\"192.168.1.199\"));\n+        Assertions.assertFalse(cidrUtils.isInRange(\"192.168.1.190\"));\n+    }\n+\n+    @Test\n+    public void testIpv6() throws UnknownHostException {\n+        CIDRUtils cidrUtils = new CIDRUtils(\"234e:0:4567::3d/64\");\n+        Assertions.assertTrue(cidrUtils.isInRange(\"234e:0:4567::3e\"));\n+        Assertions.assertTrue(cidrUtils.isInRange(\"234e:0:4567::ffff:3e\"));\n+        Assertions.assertFalse(cidrUtils.isInRange(\"234e:1:4567::3d\"));\n+        Assertions.assertFalse(cidrUtils.isInRange(\"234e:0:4567:1::3d\"));\n+\n+        cidrUtils = new CIDRUtils(\"3FFE:FFFF:0:CC00::/54\");\n+        Assertions.assertTrue(cidrUtils.isInRange(\"3FFE:FFFF:0:CC00::dd\"));\n+        Assertions.assertTrue(cidrUtils.isInRange(\"3FFE:FFFF:0:CC00:0000:eeee:0909:dd\"));\n+        Assertions.assertTrue(cidrUtils.isInRange(\"3FFE:FFFF:0:CC0F:0000:eeee:0909:dd\"));\n+\n+        Assertions.assertFalse(cidrUtils.isInRange(\"3EFE:FFFE:0:C107::dd\"));\n+        Assertions.assertFalse(cidrUtils.isInRange(\"1FFE:FFFE:0:CC00::dd\"));\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CIDRUtilsTest.java",
                "sha": "d0c627d174b8e7ab1461b8e5defb6509f28aa2c6",
                "status": "added"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ClassHelperTest.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ClassHelperTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ClassHelperTest.java",
                "patch": "@@ -17,19 +17,20 @@\n \n package org.apache.dubbo.common.utils;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n import static org.apache.dubbo.common.utils.ClassHelper.forName;\n import static org.apache.dubbo.common.utils.ClassHelper.getCallerClassLoader;\n import static org.apache.dubbo.common.utils.ClassHelper.getClassLoader;\n import static org.apache.dubbo.common.utils.ClassHelper.resolvePrimitiveClassName;\n import static org.apache.dubbo.common.utils.ClassHelper.toShortString;\n+import static org.apache.dubbo.common.utils.ClassHelper.convertPrimitive;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.sameInstance;\n import static org.hamcrest.Matchers.startsWith;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Mockito.verify;\n \n public class ClassHelperTest {\n@@ -118,4 +119,43 @@ public void testToShortString() throws Exception {\n         assertThat(toShortString(null), equalTo(\"null\"));\n         assertThat(toShortString(new ClassHelperTest()), startsWith(\"ClassHelperTest@\"));\n     }\n+\n+    @Test\n+    public void testConvertPrimitive() throws Exception {\n+\n+        assertThat(convertPrimitive(char.class, \"\"), equalTo('\\0'));\n+        assertThat(convertPrimitive(char.class, null), equalTo(null));\n+        assertThat(convertPrimitive(char.class, \"6\"), equalTo('6'));\n+\n+        assertThat(convertPrimitive(boolean.class, \"\"), equalTo(Boolean.FALSE));\n+        assertThat(convertPrimitive(boolean.class, null), equalTo(null));\n+        assertThat(convertPrimitive(boolean.class, \"true\"), equalTo(Boolean.TRUE));\n+\n+\n+        assertThat(convertPrimitive(byte.class, \"\"), equalTo(null));\n+        assertThat(convertPrimitive(byte.class, null), equalTo(null));\n+        assertThat(convertPrimitive(byte.class, \"127\"), equalTo(Byte.MAX_VALUE));\n+\n+\n+        assertThat(convertPrimitive(short.class, \"\"), equalTo(null));\n+        assertThat(convertPrimitive(short.class, null), equalTo(null));\n+        assertThat(convertPrimitive(short.class, \"32767\"), equalTo(Short.MAX_VALUE));\n+\n+        assertThat(convertPrimitive(int.class, \"\"), equalTo(null));\n+        assertThat(convertPrimitive(int.class, null), equalTo(null));\n+        assertThat(convertPrimitive(int.class, \"6\"), equalTo(6));\n+\n+        assertThat(convertPrimitive(long.class, \"\"), equalTo(null));\n+        assertThat(convertPrimitive(long.class, null), equalTo(null));\n+        assertThat(convertPrimitive(long.class, \"6\"), equalTo(new Long(6)));\n+\n+        assertThat(convertPrimitive(float.class, \"\"), equalTo(null));\n+        assertThat(convertPrimitive(float.class, null), equalTo(null));\n+        assertThat(convertPrimitive(float.class, \"1.1\"), equalTo(new Float(1.1)));\n+\n+        assertThat(convertPrimitive(double.class, \"\"), equalTo(null));\n+        assertThat(convertPrimitive(double.class, null), equalTo(null));\n+        assertThat(convertPrimitive(double.class, \"10.1\"), equalTo(new Double(10.1)));\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ClassHelperTest.java",
                "sha": "470e58709a16e0a40f1fce6d13c2af0e080a7ba3",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CollectionUtilsTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CollectionUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 10,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/CollectionUtilsTest.java",
                "patch": "@@ -16,7 +16,8 @@\n  */\n package org.apache.dubbo.common.utils;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -34,11 +35,11 @@\n import static java.util.Collections.singleton;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class CollectionUtilsTest {\n     @Test\n@@ -161,9 +162,9 @@ public void testStringMap1() throws Exception {\n         assertThat(toStringMap(\"key\", \"value\"), equalTo(Collections.singletonMap(\"key\", \"value\")));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testStringMap2() throws Exception {\n-        toStringMap(\"key\", \"value\", \"odd\");\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> toStringMap(\"key\", \"value\", \"odd\"));\n     }\n \n     @Test\n@@ -178,9 +179,9 @@ public void testToMap1() throws Exception {\n         assertEquals(expected, CollectionUtils.toMap(\"a\", 1, \"b\", 2, \"c\", 3));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testToMap2() throws Exception {\n-        toMap(\"a\", \"b\", \"c\");\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> toMap(\"a\", \"b\", \"c\"));\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CollectionUtilsTest.java",
                "sha": "22d8d923bb1fb17719adf4aae44c8b751674f199",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CompatibleTypeUtilsTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CompatibleTypeUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 5,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/CompatibleTypeUtilsTest.java",
                "patch": "@@ -16,7 +16,7 @@\n  */\r\n package org.apache.dubbo.common.utils;\r\n \r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.math.BigDecimal;\r\n import java.math.BigInteger;\r\n@@ -28,10 +28,10 @@\n import java.util.Set;\r\n import java.util.concurrent.CopyOnWriteArrayList;\r\n \r\n-import static org.junit.Assert.assertEquals;\r\n-import static org.junit.Assert.assertNull;\r\n-import static org.junit.Assert.assertSame;\r\n-import static org.junit.Assert.assertTrue;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertNull;\r\n+import static org.junit.jupiter.api.Assertions.assertSame;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n \r\n public class CompatibleTypeUtilsTest {\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CompatibleTypeUtilsTest.java",
                "sha": "ff1ebd58cd745e5d75b07a10af84c71b5fc027b4",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ConfigUtilsTest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ConfigUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 11,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ConfigUtilsTest.java",
                "patch": "@@ -18,11 +18,11 @@\n \n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.threadpool.ThreadPool;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Collections;\n import java.util.List;\n@@ -33,16 +33,16 @@\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.greaterThan;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class ConfigUtilsTest {\n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         ConfigUtils.setProperties(null);\n     }\n \n-    @After\n+    @AfterEach\n     public void tearDown() throws Exception {\n         ConfigUtils.setProperties(null);\n     }\n@@ -228,12 +228,12 @@ public void testLoadPropertiesOneFileNotRootPath() throws Exception {\n     }\n \n \n-    @Ignore(\"see http://code.alibabatech.com/jira/browse/DUBBO-133\")\n+    @Disabled(\"see http://code.alibabatech.com/jira/browse/DUBBO-133\")\n     @Test\n     public void testLoadPropertiesMultiFileNotRootPathException() throws Exception {\n         try {\n             ConfigUtils.loadProperties(\"META-INF/services/org.apache.dubbo.common.status.StatusChecker\", false);\n-            Assert.fail();\n+            Assertions.fail();\n         } catch (IllegalStateException expected) {\n             assertThat(expected.getMessage(), containsString(\"only 1 META-INF/services/org.apache.dubbo.common.status.StatusChecker file is expected, but 2 dubbo.properties files found on class path:\"));\n         }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ConfigUtilsTest.java",
                "sha": "7e9a49047782631152b046b4bf996254d196b66a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/DubboAppenderTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/DubboAppenderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 6,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/DubboAppenderTest.java",
                "patch": "@@ -20,20 +20,20 @@\n import org.apache.log4j.Category;\n import org.apache.log4j.Level;\n import org.apache.log4j.spi.LoggingEvent;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasSize;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class DubboAppenderTest {\n     private LoggingEvent event;\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         Level level = Mockito.mock(Level.class);\n         Category category = Mockito.mock(Category.class);\n@@ -44,7 +44,7 @@ public void setUp() throws Exception {\n         Mockito.when(event.getMessage()).thenReturn(\"message\");\n     }\n \n-    @After\n+    @AfterEach\n     public void tearDown() throws Exception {\n         DubboAppender.clear();\n         DubboAppender.doStop();",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/DubboAppenderTest.java",
                "sha": "018e3b7c676a89f7018f7ff1f5765ad0d0ddf86d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ExecutorUtilTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ExecutorUtilTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ExecutorUtilTest.java",
                "patch": "@@ -19,7 +19,7 @@\n \n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.URL;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n import java.util.concurrent.Executor;\n@@ -28,7 +28,7 @@\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Mockito.atLeast;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ExecutorUtilTest.java",
                "sha": "2ef0f4a2a4082d1231ef931949675f3835f9d930",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/HolderTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/HolderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/HolderTest.java",
                "patch": "@@ -17,10 +17,10 @@\n \n package org.apache.dubbo.common.utils;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class HolderTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/HolderTest.java",
                "sha": "0534712d98cc7d7d07c08547dc9b445cc41224e4",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/IOUtilsTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/IOUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 14,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/IOUtilsTest.java",
                "patch": "@@ -17,11 +17,11 @@\n \n package org.apache.dubbo.common.utils;\n \n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n@@ -32,29 +32,28 @@\n import java.io.StringReader;\n import java.io.StringWriter;\n import java.io.Writer;\n+import java.nio.file.Path;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n-import static org.junit.Assert.assertThat;\n \n public class IOUtilsTest {\n-    @Rule\n-    public TemporaryFolder tmpDir = new TemporaryFolder();\n \n     private static String TEXT = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\";\n     private InputStream is;\n     private OutputStream os;\n     private Reader reader;\n     private Writer writer;\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         is = new ByteArrayInputStream(TEXT.getBytes(\"UTF-8\"));\n         os = new ByteArrayOutputStream();\n         reader = new StringReader(TEXT);\n         writer = new StringWriter();\n     }\n \n-    @After\n+    @AfterEach\n     public void tearDown() throws Exception {\n         is.close();\n         os.close();\n@@ -88,12 +87,13 @@ public void testWrite5() throws Exception {\n     }\n \n     @Test\n-    public void testLines() throws Exception {\n-        File file = tmpDir.newFile();\n+    public void testLines(@TempDir Path tmpDir) throws Exception {\n+        File file = tmpDir.getFileName().toAbsolutePath().toFile();\n         IOUtils.writeLines(file, new String[]{TEXT});\n         String[] lines = IOUtils.readLines(file);\n         assertThat(lines.length, equalTo(1));\n         assertThat(lines[0], equalTo(TEXT));\n+        tmpDir.getFileName().toAbsolutePath().toFile().delete();\n     }\n \n     @Test\n@@ -116,13 +116,14 @@ public void testRead() throws Exception {\n     }\n \n     @Test\n-    public void testAppendLines() throws Exception {\n-        File file = tmpDir.newFile();\n+    public void testAppendLines(@TempDir Path tmpDir) throws Exception {\n+        File file = tmpDir.getFileName().toAbsolutePath().toFile();\n         IOUtils.appendLines(file, new String[]{\"a\", \"b\", \"c\"});\n         String[] lines = IOUtils.readLines(file);\n         assertThat(lines.length, equalTo(3));\n         assertThat(lines[0], equalTo(\"a\"));\n         assertThat(lines[1], equalTo(\"b\"));\n         assertThat(lines[2], equalTo(\"c\"));\n+        tmpDir.getFileName().toAbsolutePath().toFile().delete();\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/IOUtilsTest.java",
                "sha": "3b5743d2b4039e3f88f17ba850f519537a546162",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LRUCacheTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LRUCacheTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/LRUCacheTest.java",
                "patch": "@@ -17,12 +17,12 @@\n \n package org.apache.dubbo.common.utils;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.Matchers.equalTo;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class LRUCacheTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LRUCacheTest.java",
                "sha": "a52685d08dc978cc2fbd9c3e43402d960920d1c4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogHelperTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogHelperTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogHelperTest.java",
                "patch": "@@ -18,7 +18,7 @@\n package org.apache.dubbo.common.utils;\n \n import org.apache.dubbo.common.logger.Logger;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n import static org.mockito.Mockito.verify;",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogHelperTest.java",
                "sha": "78de5f812f58af238655b0e94c6d0d000c29da79",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogTest.java",
                "patch": "@@ -18,11 +18,11 @@\n package org.apache.dubbo.common.utils;\n \n import org.apache.log4j.Level;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class LogTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogTest.java",
                "sha": "203cadb547f466719d8aed2ceb2c059cc143e3f1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogUtilTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogUtilTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogUtilTest.java",
                "patch": "@@ -18,17 +18,17 @@\n package org.apache.dubbo.common.utils;\n \n import org.apache.log4j.Level;\n-import org.junit.After;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n public class LogUtilTest {\n-    @After\n+    @AfterEach\n     public void tearDown() throws Exception {\n         DubboAppender.logList.clear();\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/LogUtilTest.java",
                "sha": "aec7cc7f95bcfa689de2bac75c95ca1273d22fe9",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/NamedThreadFactoryTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/NamedThreadFactoryTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 5,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/NamedThreadFactoryTest.java",
                "patch": "@@ -17,15 +17,15 @@\n \n package org.apache.dubbo.common.utils;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n import static org.hamcrest.Matchers.allOf;\n import static org.hamcrest.Matchers.containsString;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class NamedThreadFactoryTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/NamedThreadFactoryTest.java",
                "sha": "ece611194bde01ea972ac3d095c9c38fcfd2871a",
                "status": "modified"
            },
            {
                "additions": 106,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/NetUtilsTest.java",
                "changes": 123,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/NetUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 17,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/NetUtilsTest.java",
                "patch": "@@ -17,22 +17,24 @@\n package org.apache.dubbo.common.utils;\r\n \r\n \r\n-import org.junit.Ignore;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Disabled;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.net.Inet6Address;\r\n import java.net.InetAddress;\r\n import java.net.InetSocketAddress;\r\n+import java.net.UnknownHostException;\r\n \r\n-import static junit.framework.TestCase.assertFalse;\r\n-import static junit.framework.TestCase.assertTrue;\r\n+import static org.hamcrest.MatcherAssert.assertThat;\r\n import static org.hamcrest.Matchers.equalTo;\r\n import static org.hamcrest.Matchers.greaterThan;\r\n import static org.hamcrest.Matchers.greaterThanOrEqualTo;\r\n-import static org.junit.Assert.assertEquals;\r\n-import static org.junit.Assert.assertNotNull;\r\n-import static org.junit.Assert.assertNull;\r\n-import static org.junit.Assert.assertThat;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertFalse;\r\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\r\n+import static org.junit.jupiter.api.Assertions.assertNull;\r\n+import static org.junit.jupiter.api.Assertions.assertThrows;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n import static org.mockito.Mockito.mock;\r\n import static org.mockito.Mockito.when;\r\n \r\n@@ -104,22 +106,21 @@ public void testGetLocalSocketAddress() throws Exception {\n \r\n     @Test\r\n     public void testIsValidAddress() throws Exception {\r\n-        assertFalse(NetUtils.isValidAddress((InetAddress) null));\r\n         InetAddress address = mock(InetAddress.class);\r\n         when(address.isLoopbackAddress()).thenReturn(true);\r\n-        assertFalse(NetUtils.isValidAddress(address));\r\n+        assertFalse(NetUtils.isValidV4Address(address));\r\n         address = mock(InetAddress.class);\r\n         when(address.getHostAddress()).thenReturn(\"localhost\");\r\n-        assertFalse(NetUtils.isValidAddress(address));\r\n+        assertFalse(NetUtils.isValidV4Address(address));\r\n         address = mock(InetAddress.class);\r\n         when(address.getHostAddress()).thenReturn(\"0.0.0.0\");\r\n-        assertFalse(NetUtils.isValidAddress(address));\r\n+        assertFalse(NetUtils.isValidV4Address(address));\r\n         address = mock(InetAddress.class);\r\n         when(address.getHostAddress()).thenReturn(\"127.0.0.1\");\r\n-        assertFalse(NetUtils.isValidAddress(address));\r\n+        assertFalse(NetUtils.isValidV4Address(address));\r\n         address = mock(InetAddress.class);\r\n         when(address.getHostAddress()).thenReturn(\"1.2.3.4\");\r\n-        assertTrue(NetUtils.isValidAddress(address));\r\n+        assertTrue(NetUtils.isValidV4Address(address));\r\n     }\r\n \r\n     @Test\r\n@@ -131,7 +132,6 @@ public void testGetLocalHost() throws Exception {\n     public void testGetLocalAddress() throws Exception {\r\n         InetAddress address = NetUtils.getLocalAddress();\r\n         assertNotNull(address);\r\n-        assertTrue(NetUtils.isValidLocalHost(address.getHostAddress()));\r\n     }\r\n \r\n     @Test\r\n@@ -200,7 +200,7 @@ public void testIsValidV6Address() {\n      * But enable it will cause other UT to fail.\r\n      * Therefore currently disabling this UT.\r\n      */\r\n-    @Ignore\r\n+    @Disabled\r\n     @Test\r\n     public void testNormalizeV6Address() {\r\n         Inet6Address address = mock(Inet6Address.class);\r\n@@ -209,4 +209,93 @@ public void testNormalizeV6Address() {\n         InetAddress normalized = NetUtils.normalizeV6Address(address);\r\n         assertThat(normalized.getHostAddress(), equalTo(\"fe80:0:0:0:894:aeec:f37d:23e1%5\"));\r\n     }\r\n-}\n\\ No newline at end of file\n+\r\n+    @Test\r\n+    public void testMatchIpRangeMatchWhenIpv4() throws UnknownHostException {\r\n+        assertTrue(NetUtils.matchIpRange(\"*.*.*.*\", \"192.168.1.63\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"192.168.1.*\", \"192.168.1.63\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"192.168.1.63\", \"192.168.1.63\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"192.168.1.1-65\", \"192.168.1.63\", 90));\r\n+        assertFalse(NetUtils.matchIpRange(\"192.168.1.1-61\", \"192.168.1.63\", 90));\r\n+        assertFalse(NetUtils.matchIpRange(\"192.168.1.62\", \"192.168.1.63\", 90));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testMatchIpRangeMatchWhenIpv6() throws UnknownHostException {\r\n+        assertTrue(NetUtils.matchIpRange(\"*.*.*.*\", \"192.168.1.63\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"234e:0:4567:0:0:0:3d:*\", \"234e:0:4567::3d:ff\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"234e:0:4567:0:0:0:3d:ee\", \"234e:0:4567::3d:ee\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"234e:0:4567::3d:ee\", \"234e:0:4567::3d:ee\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"234e:0:4567:0:0:0:3d:0-ff\", \"234e:0:4567::3d:ee\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"234e:0:4567:0:0:0:3d:0-ee\", \"234e:0:4567::3d:ee\", 90));\r\n+\r\n+        assertFalse(NetUtils.matchIpRange(\"234e:0:4567:0:0:0:3d:ff\", \"234e:0:4567::3d:ee\", 90));\r\n+        assertFalse(NetUtils.matchIpRange(\"234e:0:4567:0:0:0:3d:0-ea\", \"234e:0:4567::3d:ee\", 90));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testMatchIpRangeMatchWhenIpv6Exception() throws UnknownHostException {\r\n+        IllegalArgumentException thrown =\r\n+                assertThrows(IllegalArgumentException.class, () ->\r\n+                        NetUtils.matchIpRange(\"234e:0:4567::3d:*\", \"234e:0:4567::3d:ff\", 90));\r\n+        assertTrue(thrown.getMessage().contains(\"If you config ip expression that contains '*'\"));\r\n+\r\n+        thrown = assertThrows(IllegalArgumentException.class, () ->\r\n+                        NetUtils.matchIpRange(\"234e:0:4567:3d\", \"234e:0:4567::3d:ff\", 90));\r\n+        assertTrue(thrown.getMessage().contains(\"The host is ipv6, but the pattern is not ipv6 pattern\"));\r\n+\r\n+        thrown =\r\n+                assertThrows(IllegalArgumentException.class, () ->\r\n+                        NetUtils.matchIpRange(\"192.168.1.1-65-3\", \"192.168.1.63\", 90));\r\n+        assertTrue(thrown.getMessage().contains(\"There is wrong format of ip Address\"));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testMatchIpRangeMatchWhenIpWrongException() throws UnknownHostException {\r\n+        UnknownHostException thrown =\r\n+                assertThrows(UnknownHostException.class, () ->\r\n+                        NetUtils.matchIpRange(\"192.168.1.63\", \"192.168.1.ff\", 90));\r\n+        assertTrue(thrown.getMessage().contains(\"192.168.1.ff\"));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testMatchIpMatch() throws UnknownHostException {\r\n+        assertTrue(NetUtils.matchIpExpression(\"192.168.1.*\", \"192.168.1.63\", 90));\r\n+        assertTrue(NetUtils.matchIpExpression(\"192.168.1.192/26\", \"192.168.1.199\", 90));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testMatchIpv6WithIpPort() throws UnknownHostException {\r\n+        assertTrue(NetUtils.matchIpRange(\"[234e:0:4567::3d:ee]\", \"234e:0:4567::3d:ee\", 8090));\r\n+        assertTrue(NetUtils.matchIpRange(\"[234e:0:4567:0:0:0:3d:ee]\", \"234e:0:4567::3d:ee\", 8090));\r\n+        assertTrue(NetUtils.matchIpRange(\"[234e:0:4567:0:0:0:3d:ee]:8090\", \"234e:0:4567::3d:ee\", 8090));\r\n+        assertTrue(NetUtils.matchIpRange(\"[234e:0:4567:0:0:0:3d:0-ee]:8090\", \"234e:0:4567::3d:ee\", 8090));\r\n+        assertTrue(NetUtils.matchIpRange(\"[234e:0:4567:0:0:0:3d:ee-ff]:8090\", \"234e:0:4567::3d:ee\", 8090));\r\n+        assertTrue(NetUtils.matchIpRange(\"[234e:0:4567:0:0:0:3d:*]:90\", \"234e:0:4567::3d:ff\", 90));\r\n+\r\n+        assertFalse(NetUtils.matchIpRange(\"[234e:0:4567:0:0:0:3d:ee]:7289\", \"234e:0:4567::3d:ee\", 8090));\r\n+        assertFalse(NetUtils.matchIpRange(\"[234e:0:4567:0:0:0:3d:ee-ff]:8090\", \"234e:0:4567::3d:ee\", 9090));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testMatchIpv4WithIpPort() throws UnknownHostException {\r\n+        NumberFormatException thrown =\r\n+                assertThrows(NumberFormatException.class, () ->NetUtils.matchIpExpression(\"192.168.1.192/26:90\", \"192.168.1.199\", 90));\r\n+        assertTrue(thrown instanceof NumberFormatException);\r\n+\r\n+        assertTrue(NetUtils.matchIpRange(\"*.*.*.*:90\", \"192.168.1.63\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"192.168.1.*:90\", \"192.168.1.63\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"192.168.1.63:90\", \"192.168.1.63\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"192.168.1.63-65:90\", \"192.168.1.63\", 90));\r\n+        assertTrue(NetUtils.matchIpRange(\"192.168.1.1-63:90\", \"192.168.1.63\", 90));\r\n+\r\n+        assertFalse(NetUtils.matchIpRange(\"*.*.*.*:80\", \"192.168.1.63\", 90));\r\n+        assertFalse(NetUtils.matchIpRange(\"192.168.1.*:80\", \"192.168.1.63\", 90));\r\n+        assertFalse(NetUtils.matchIpRange(\"192.168.1.63:80\", \"192.168.1.63\", 90));\r\n+        assertFalse(NetUtils.matchIpRange(\"192.168.1.63-65:80\", \"192.168.1.63\", 90));\r\n+        assertFalse(NetUtils.matchIpRange(\"192.168.1.1-63:80\", \"192.168.1.63\", 90));\r\n+\r\n+        assertFalse(NetUtils.matchIpRange(\"192.168.1.1-61:90\", \"192.168.1.62\", 90));\r\n+        assertFalse(NetUtils.matchIpRange(\"192.168.1.62:90\", \"192.168.1.63\", 90));\r\n+    }\r\n+}\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/NetUtilsTest.java",
                "sha": "2fe0a63681594a7e36b02c2730d83c1e3fffcda0",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ParametersTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ParametersTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ParametersTest.java",
                "patch": "@@ -16,12 +16,12 @@\n  */\n package org.apache.dubbo.common.utils;\n \n-import junit.framework.TestCase;\n-\n import java.util.HashMap;\n import java.util.Map;\n \n-public class ParametersTest extends TestCase {\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class ParametersTest {\n     final String ServiceName = \"org.apache.dubbo.rpc.service.GenericService\";\n     final String ServiceVersion = \"1.0.15\";\n     final String LoadBalance = \"lcr\";",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ParametersTest.java",
                "sha": "1b86110a75a365e0eaba017ca74f7ac293912cdb",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 32,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java",
                "patch": "@@ -23,8 +23,8 @@\n import org.apache.dubbo.common.model.person.PersonInfo;\r\n import org.apache.dubbo.common.model.person.PersonStatus;\r\n import org.apache.dubbo.common.model.person.Phone;\r\n-import org.junit.Assert;\r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.lang.reflect.Method;\r\n import java.lang.reflect.Type;\r\n@@ -40,13 +40,13 @@\n import java.util.UUID;\r\n \r\n import static org.hamcrest.Matchers.equalTo;\r\n-import static org.junit.Assert.assertArrayEquals;\r\n-import static org.junit.Assert.assertEquals;\r\n-import static org.junit.Assert.assertFalse;\r\n-import static org.junit.Assert.assertNotNull;\r\n-import static org.junit.Assert.assertSame;\r\n-import static org.junit.Assert.assertThat;\r\n-import static org.junit.Assert.assertTrue;\r\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertFalse;\r\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\r\n+import static org.junit.jupiter.api.Assertions.assertSame;\r\n+import static org.hamcrest.MatcherAssert.assertThat;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n \r\n public class PojoUtilsTest {\r\n \r\n@@ -533,11 +533,11 @@ public void testPublicField() throws Exception {\n         child.setParent(parent);\r\n         Object obj = PojoUtils.generalize(parent);\r\n         Parent realizedParent = (Parent) PojoUtils.realize(obj, Parent.class);\r\n-        Assert.assertEquals(parent.gender, realizedParent.gender);\r\n-        Assert.assertEquals(child.gender, parent.getChild().gender);\r\n-        Assert.assertEquals(child.age, realizedParent.getChild().getAge());\r\n-        Assert.assertEquals(parent.getEmail(), realizedParent.getEmail());\r\n-        Assert.assertNull(realizedParent.email);\r\n+        Assertions.assertEquals(parent.gender, realizedParent.gender);\r\n+        Assertions.assertEquals(child.gender, parent.getChild().gender);\r\n+        Assertions.assertEquals(child.age, realizedParent.getChild().getAge());\r\n+        Assertions.assertEquals(parent.getEmail(), realizedParent.getEmail());\r\n+        Assertions.assertNull(realizedParent.email);\r\n     }\r\n \r\n     @Test\r\n@@ -553,24 +553,24 @@ public void testMapField() throws Exception {\n         data.setList(Arrays.asList(newChild(\"forth\", 4)));\r\n \r\n         Object obj = PojoUtils.generalize(data);\r\n-        Assert.assertEquals(3, data.getChildren().size());\r\n+        Assertions.assertEquals(3, data.getChildren().size());\r\n         assertTrue(data.getChildren().get(\"first\").getClass() == Child.class);\r\n-        Assert.assertEquals(1, data.getList().size());\r\n+        Assertions.assertEquals(1, data.getList().size());\r\n         assertTrue(data.getList().get(0).getClass() == Child.class);\r\n \r\n         TestData realizadData = (TestData) PojoUtils.realize(obj, TestData.class);\r\n-        Assert.assertEquals(data.getChildren().size(), realizadData.getChildren().size());\r\n-        Assert.assertEquals(data.getChildren().keySet(), realizadData.getChildren().keySet());\r\n+        Assertions.assertEquals(data.getChildren().size(), realizadData.getChildren().size());\r\n+        Assertions.assertEquals(data.getChildren().keySet(), realizadData.getChildren().keySet());\r\n         for (Map.Entry<String, Child> entry : data.getChildren().entrySet()) {\r\n             Child c = realizadData.getChildren().get(entry.getKey());\r\n-            Assert.assertNotNull(c);\r\n-            Assert.assertEquals(entry.getValue().getName(), c.getName());\r\n-            Assert.assertEquals(entry.getValue().getAge(), c.getAge());\r\n+            Assertions.assertNotNull(c);\r\n+            Assertions.assertEquals(entry.getValue().getName(), c.getName());\r\n+            Assertions.assertEquals(entry.getValue().getAge(), c.getAge());\r\n         }\r\n \r\n-        Assert.assertEquals(1, realizadData.getList().size());\r\n-        Assert.assertEquals(data.getList().get(0).getName(), realizadData.getList().get(0).getName());\r\n-        Assert.assertEquals(data.getList().get(0).getAge(), realizadData.getList().get(0).getAge());\r\n+        Assertions.assertEquals(1, realizadData.getList().size());\r\n+        Assertions.assertEquals(data.getList().get(0).getName(), realizadData.getList().get(0).getName());\r\n+        Assertions.assertEquals(data.getList().get(0).getAge(), realizadData.getList().get(0).getAge());\r\n     }\r\n \r\n     @Test\r\n@@ -617,8 +617,8 @@ public void testPojoList() throws Exception {\n         assertTrue(l.size() == 1);\r\n         assertTrue(l.get(0) instanceof Parent);\r\n         Parent realizeParent = (Parent) l.get(0);\r\n-        Assert.assertEquals(parent.getName(), realizeParent.getName());\r\n-        Assert.assertEquals(parent.getAge(), realizeParent.getAge());\r\n+        Assertions.assertEquals(parent.getName(), realizeParent.getName());\r\n+        Assertions.assertEquals(parent.getAge(), realizeParent.getAge());\r\n     }\r\n \r\n     @Test\r\n@@ -638,14 +638,14 @@ public void testListPojoListPojo() throws Exception {\n         assertTrue(realizeObject instanceof ListResult);\r\n         ListResult realizeList = (ListResult) realizeObject;\r\n         List realizeInnerList = realizeList.getResult();\r\n-        Assert.assertEquals(1, realizeInnerList.size());\r\n+        Assertions.assertEquals(1, realizeInnerList.size());\r\n         assertTrue(realizeInnerList.get(0) instanceof InnerPojo);\r\n         InnerPojo realizeParentList = (InnerPojo) realizeInnerList.get(0);\r\n-        Assert.assertEquals(1, realizeParentList.getList().size());\r\n+        Assertions.assertEquals(1, realizeParentList.getList().size());\r\n         assertTrue(realizeParentList.getList().get(0) instanceof Parent);\r\n         Parent realizeParent = (Parent) realizeParentList.getList().get(0);\r\n-        Assert.assertEquals(parent.getName(), realizeParent.getName());\r\n-        Assert.assertEquals(parent.getAge(), realizeParent.getAge());\r\n+        Assertions.assertEquals(parent.getName(), realizeParent.getName());\r\n+        Assertions.assertEquals(parent.getAge(), realizeParent.getAge());\r\n     }\r\n \r\n     @Test\r\n@@ -774,7 +774,7 @@ public void setParent(Parent parent) {\n         }\r\n \r\n         public void setList(List<Child> list) {\r\n-            if (list != null && !list.isEmpty()) {\r\n+            if (CollectionUtils.isNotEmpty(list)) {\r\n                 this.list.addAll(list);\r\n             }\r\n         }\r\n@@ -784,7 +784,7 @@ public void setList(List<Child> list) {\n         }\r\n \r\n         public void setChildren(Map<String, Child> children) {\r\n-            if (children != null && !children.isEmpty()) {\r\n+            if (CollectionUtils.isNotEmptyMap(children)) {\r\n                 this.children.putAll(children);\r\n             }\r\n         }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/PojoUtilsTest.java",
                "sha": "ecc3f46ee3889beacb0a0a851531eff5b503a2aa",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ReflectUtilsTest.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ReflectUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 14,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ReflectUtilsTest.java",
                "patch": "@@ -16,7 +16,8 @@\n  */\n package org.apache.dubbo.common.utils;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n@@ -28,18 +29,18 @@\n import java.util.Map;\n import java.util.Set;\n \n-import static junit.framework.TestCase.assertEquals;\n-import static junit.framework.TestCase.assertNotNull;\n-import static junit.framework.TestCase.assertNull;\n-import static junit.framework.TestCase.assertTrue;\n-import static junit.framework.TestCase.fail;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.containsString;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasKey;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.sameInstance;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class ReflectUtilsTest {\n     @Test\n@@ -189,9 +190,12 @@ public void testFindMethodByMethodName1() throws Exception {\n         assertNotNull(ReflectUtils.findMethodByMethodName(Foo.class, \"hello\"));\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testFindMethodByMethodName2() throws Exception {\n-        ReflectUtils.findMethodByMethodName(Foo2.class, \"hello\");\n+    @Test\n+    public void testFindMethodByMethodName2() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            ReflectUtils.findMethodByMethodName(Foo2.class, \"hello\");\n+        });\n+\n     }\n \n     @Test\n@@ -390,9 +394,11 @@ public void testForName1() throws Exception {\n         assertThat(ReflectUtils.forName(ReflectUtils.class.getName()), sameInstance(ReflectUtils.class));\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testForName2() throws Exception {\n-        ReflectUtils.forName(\"a.c.d.e.F\");\n+    @Test\n+    public void testForName2() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            ReflectUtils.forName(\"a.c.d.e.F\");\n+        });\n     }\n \n     public static class EmptyClass {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/ReflectUtilsTest.java",
                "sha": "f46235daaa1b80d21be6d634283dbab9a3edf0a8",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/StackTest.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/StackTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 17,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/StackTest.java",
                "patch": "@@ -17,13 +17,14 @@\n \n package org.apache.dubbo.common.utils;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.EmptyStackException;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class StackTest {\n     @Test\n@@ -57,33 +58,43 @@ public void testClear() throws Exception {\n         assertThat(stack.isEmpty(), is(true));\n     }\n \n-    @Test(expected = EmptyStackException.class)\n+    @Test\n     public void testIllegalPop() throws Exception {\n-        Stack<String> stack = new Stack<String>();\n-        stack.pop();\n+        Assertions.assertThrows(EmptyStackException.class, () -> {\n+            Stack<String> stack = new Stack<String>();\n+            stack.pop();\n+        });\n     }\n \n-    @Test(expected = EmptyStackException.class)\n+    @Test\n     public void testIllegalPeek() throws Exception {\n-        Stack<String> stack = new Stack<String>();\n-        stack.peek();\n+        Assertions.assertThrows(EmptyStackException.class, () -> {\n+            Stack<String> stack = new Stack<String>();\n+            stack.peek();\n+        });\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testIllegalGet() throws Exception {\n-        Stack<String> stack = new Stack<String>();\n-        stack.get(1);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Stack<String> stack = new Stack<String>();\n+            stack.get(1);\n+        });\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testIllegalSet() throws Exception {\n-        Stack<String> stack = new Stack<String>();\n-        stack.set(1, \"illegal\");\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Stack<String> stack = new Stack<String>();\n+            stack.set(1, \"illegal\");\n+        });\n     }\n \n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n     public void testIllegalRemove() throws Exception {\n-        Stack<String> stack = new Stack<String>();\n-        stack.remove(1);\n+        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Stack<String> stack = new Stack<String>();\n+            stack.remove(1);\n+        });\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/StackTest.java",
                "sha": "4b113e8303bc0400e0f736a44b0ce0dcd1db867a",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/StringUtilsTest.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/StringUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 9,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/StringUtilsTest.java",
                "patch": "@@ -17,24 +17,24 @@\n package org.apache.dubbo.common.utils;\n \n import org.apache.dubbo.common.Constants;\n-import org.hamcrest.Matchers;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n \n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import static junit.framework.TestCase.assertEquals;\n-import static junit.framework.TestCase.assertFalse;\n-import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.containsString;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.isEmptyOrNullString;\n import static org.hamcrest.Matchers.nullValue;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class StringUtilsTest {\n     @Test\n@@ -240,9 +240,22 @@ public void testIsContains() throws Exception {\n \n     @Test\n     public void testIsNumeric() throws Exception {\n-        assertThat(StringUtils.isNumeric(\"123\"), is(true));\n-        assertThat(StringUtils.isNumeric(\"1a3\"), is(false));\n-        assertThat(StringUtils.isNumeric(null), is(false));\n+        assertThat(StringUtils.isNumeric(\"123\", false), is(true));\n+        assertThat(StringUtils.isNumeric(\"1a3\", false), is(false));\n+        assertThat(StringUtils.isNumeric(null, false), is(false));\n+\n+        assertThat(StringUtils.isNumeric(\"0\", true), is(true));\n+        assertThat(StringUtils.isNumeric(\"0.1\", true), is(true));\n+        assertThat(StringUtils.isNumeric(\"DUBBO\", true), is(false));\n+        assertThat(StringUtils.isNumeric(\"\", true), is(false));\n+        assertThat(StringUtils.isNumeric(\" \", true), is(false));\n+        assertThat(StringUtils.isNumeric(\"   \", true), is(false));\n+\n+        assertThat(StringUtils.isNumeric(\"123.3.3\", true), is(false));\n+        assertThat(StringUtils.isNumeric(\"123.\", true), is(true));\n+        assertThat(StringUtils.isNumeric(\".123\", true), is(true));\n+        assertThat(StringUtils.isNumeric(\"..123\", true), is(false));\n+\n     }\n \n     @Test\n@@ -274,4 +287,12 @@ public void testToArgumentString() throws Exception {\n         assertThat(s, containsString(\"0,\"));\n         assertThat(s, containsString(\"{\\\"enabled\\\":true}\"));\n     }\n+\n+    @Test\n+    public void testTrim() {\n+        assertEquals(\"left blank\", StringUtils.trim(\" left blank\"));\n+        assertEquals(\"right blank\", StringUtils.trim(\"right blank \"));\n+        assertEquals(\"bi-side blank\", StringUtils.trim(\" bi-side blank \"));\n+\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/StringUtilsTest.java",
                "sha": "384c957bb23699b869eb2ae8150f7fdc6f56fe6a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/UrlUtilsTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/utils/UrlUtilsTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 6,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/UrlUtilsTest.java",
                "patch": "@@ -19,7 +19,7 @@\n import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.common.URL;\r\n \r\n-import org.junit.Test;\r\n+import org.junit.jupiter.api.Test;\r\n \r\n import java.util.ArrayList;\r\n import java.util.HashMap;\r\n@@ -29,11 +29,11 @@\n import java.util.Set;\r\n \r\n import static org.hamcrest.Matchers.equalTo;\r\n-import static org.junit.Assert.assertEquals;\r\n-import static org.junit.Assert.assertFalse;\r\n-import static org.junit.Assert.assertNull;\r\n-import static org.junit.Assert.assertThat;\r\n-import static org.junit.Assert.assertTrue;\r\n+import static org.junit.jupiter.api.Assertions.assertEquals;\r\n+import static org.junit.jupiter.api.Assertions.assertFalse;\r\n+import static org.junit.jupiter.api.Assertions.assertNull;\r\n+import static org.hamcrest.MatcherAssert.assertThat;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n \r\n public class UrlUtilsTest {\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/utils/UrlUtilsTest.java",
                "sha": "2da27fea7601dc565dd7478d2b18bc5368bb5633",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/version/VersionTest.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/java/org/apache/dubbo/common/version/VersionTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 22,
                "filename": "dubbo-common/src/test/java/org/apache/dubbo/common/version/VersionTest.java",
                "patch": "@@ -19,48 +19,48 @@\n \n import org.apache.dubbo.common.Version;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n public class VersionTest {\n \n     @Test\n     public void testGetProtocolVersion() {\n-        Assert.assertEquals(Version.getProtocolVersion(), Version.DEFAULT_DUBBO_PROTOCOL_VERSION);\n+        Assertions.assertEquals(Version.getProtocolVersion(), Version.DEFAULT_DUBBO_PROTOCOL_VERSION);\n     }\n \n     @Test\n     public void testSupportResponseAttachment() {\n-        Assert.assertTrue(Version.isSupportResponseAttachment(\"2.0.2\"));\n-        Assert.assertTrue(Version.isSupportResponseAttachment(\"2.0.3\"));\n-        Assert.assertFalse(Version.isSupportResponseAttachment(\"2.0.0\"));\n+        Assertions.assertTrue(Version.isSupportResponseAttachment(\"2.0.2\"));\n+        Assertions.assertTrue(Version.isSupportResponseAttachment(\"2.0.3\"));\n+        Assertions.assertFalse(Version.isSupportResponseAttachment(\"2.0.0\"));\n     }\n \n     @Test\n     public void testGetIntVersion() {\n-        Assert.assertEquals(2060100, Version.getIntVersion(\"2.6.1\"));\n-        Assert.assertEquals(2060101, Version.getIntVersion(\"2.6.1.1\"));\n-        Assert.assertEquals(2070001, Version.getIntVersion(\"2.7.0.1\"));\n-        Assert.assertEquals(2070000, Version.getIntVersion(\"2.7.0\"));\n+        Assertions.assertEquals(2060100, Version.getIntVersion(\"2.6.1\"));\n+        Assertions.assertEquals(2060101, Version.getIntVersion(\"2.6.1.1\"));\n+        Assertions.assertEquals(2070001, Version.getIntVersion(\"2.7.0.1\"));\n+        Assertions.assertEquals(2070000, Version.getIntVersion(\"2.7.0\"));\n     }\n \n     @Test\n     public void testIsFramework270OrHigher() {\n-        Assert.assertTrue(Version.isRelease270OrHigher(\"2.7.0\"));\n-        Assert.assertTrue(Version.isRelease270OrHigher(\"2.7.0.1\"));\n-        Assert.assertTrue(Version.isRelease270OrHigher(\"2.7.0.2\"));\n-        Assert.assertTrue(Version.isRelease270OrHigher(\"2.8.0\"));\n-        Assert.assertFalse(Version.isRelease270OrHigher(\"2.6.3\"));\n-        Assert.assertFalse(Version.isRelease270OrHigher(\"2.6.3.1\"));\n+        Assertions.assertTrue(Version.isRelease270OrHigher(\"2.7.0\"));\n+        Assertions.assertTrue(Version.isRelease270OrHigher(\"2.7.0.1\"));\n+        Assertions.assertTrue(Version.isRelease270OrHigher(\"2.7.0.2\"));\n+        Assertions.assertTrue(Version.isRelease270OrHigher(\"2.8.0\"));\n+        Assertions.assertFalse(Version.isRelease270OrHigher(\"2.6.3\"));\n+        Assertions.assertFalse(Version.isRelease270OrHigher(\"2.6.3.1\"));\n     }\n \n     @Test\n     public void testIsFramework263OrHigher() {\n-        Assert.assertTrue(Version.isRelease263OrHigher(\"2.7.0\"));\n-        Assert.assertTrue(Version.isRelease263OrHigher(\"2.7.0.1\"));\n-        Assert.assertTrue(Version.isRelease263OrHigher(\"2.6.4\"));\n-        Assert.assertFalse(Version.isRelease263OrHigher(\"2.6.2\"));\n-        Assert.assertFalse(Version.isRelease263OrHigher(\"2.6.1.1\"));\n-        Assert.assertTrue(Version.isRelease263OrHigher(\"2.6.3\"));\n+        Assertions.assertTrue(Version.isRelease263OrHigher(\"2.7.0\"));\n+        Assertions.assertTrue(Version.isRelease263OrHigher(\"2.7.0.1\"));\n+        Assertions.assertTrue(Version.isRelease263OrHigher(\"2.6.4\"));\n+        Assertions.assertFalse(Version.isRelease263OrHigher(\"2.6.2\"));\n+        Assertions.assertFalse(Version.isRelease263OrHigher(\"2.6.1.1\"));\n+        Assertions.assertTrue(Version.isRelease263OrHigher(\"2.6.3\"));\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/java/org/apache/dubbo/common/version/VersionTest.java",
                "sha": "10da6f047ade6d684b5a6d66c76290d97d071778",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/resources/log4j.xml",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/test/resources/log4j.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 13,
                "filename": "dubbo-common/src/test/resources/log4j.xml",
                "patch": "@@ -1,25 +1,27 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <!--\r\n- - Copyright 1999-2011 Alibaba Group.\r\n- -  \r\n- - Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- - you may not use this file except in compliance with the License.\r\n- - You may obtain a copy of the License at\r\n- -  \r\n- -      http://www.apache.org/licenses/LICENSE-2.0\r\n- -  \r\n- - Unless required by applicable law or agreed to in writing, software\r\n- - distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- - See the License for the specific language governing permissions and\r\n- - limitations under the License.\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n -->\r\n <!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\r\n <log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r\n     <!-- ===================================================================== -->\r\n     <!-- \u4ee5\u4e0b\u662fappender\u7684\u5b9a\u4e49 -->\r\n     <!-- ===================================================================== -->\r\n     <appender name=\"dubbo\" class=\"org.apache.dubbo.common.utils.DubboAppender\">\r\n+        <param name=\"File\" value=\"../dubbo.log\"/>\r\n         <param name=\"encoding\" value=\"GBK\"/>\r\n         <layout class=\"org.apache.log4j.PatternLayout\">\r\n             <param name=\"ConversionPattern\" value=\"%d %p [%c:%M] - %m%n\"/>\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-common/src/test/resources/log4j.xml",
                "sha": "bfb523c0cc3c1f7925fd6d906b8224c35c67da44",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/pom.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-compatible/pom.xml",
                "patch": "@@ -20,7 +20,7 @@\n     <parent>\n         <groupId>org.apache.dubbo</groupId>\n         <artifactId>dubbo-parent</artifactId>\n-        <version>2.7.0-SNAPSHOT</version>\n+        <version>2.7.1-SNAPSHOT</version>\n     </parent>\n     <artifactId>dubbo-compatible</artifactId>\n     <packaging>jar</packaging>",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/pom.xml",
                "sha": "43d14f951045bc079b5da75dba19e3ebdbb0d80a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "patch": "@@ -18,6 +18,7 @@\n package com.alibaba.dubbo.common;\n \n import org.apache.dubbo.common.utils.CollectionUtils;\n+import org.apache.dubbo.common.utils.StringUtils;\n \n import java.net.InetSocketAddress;\n import java.util.Collection;\n@@ -26,6 +27,10 @@\n @Deprecated\n public class URL extends org.apache.dubbo.common.URL {\n \n+    protected URL() {\n+        super();\n+    }\n+\n     public URL(org.apache.dubbo.common.URL url) {\n         super(url.getProtocol(), url.getUsername(), url.getPassword(), url.getHost(), url.getPort(), url.getPath(), url.getParameters());\n     }\n@@ -403,7 +408,7 @@ public boolean isAnyHost() {\n \n     @Override\n     public URL addParameterAndEncoded(String key, String value) {\n-        if (value == null || value.length() == 0) {\n+        if (StringUtils.isEmpty(value)) {\n             return this;\n         }\n         return addParameter(key, encode(value));",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/common/URL.java",
                "sha": "42bab29301816ebce3b8c8675a47727d1f950607",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/config/annotation/Reference.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/config/annotation/Reference.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/config/annotation/Reference.java",
                "patch": "@@ -43,7 +43,7 @@\n \n     boolean generic() default false;\n \n-    boolean injvm() default false;\n+    boolean injvm() default true;\n \n     boolean check() default true;\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/config/annotation/Reference.java",
                "sha": "c8f25b3b423bb003bf23de2afe3bd63366186924",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 6,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java",
                "patch": "@@ -17,18 +17,25 @@\n \n package com.alibaba.dubbo.rpc;\n \n-import org.apache.dubbo.common.URL;\n+import com.alibaba.dubbo.common.URL;\n \n @Deprecated\n public interface Invoker<T> extends org.apache.dubbo.rpc.Invoker<T> {\n \n-    @Override\n-    Result invoke(org.apache.dubbo.rpc.Invocation invocation) throws RpcException;\n+    Result invoke(Invocation invocation) throws RpcException;\n+\n+    URL getUrl();\n \n     default org.apache.dubbo.rpc.Invoker<T> getOriginal() {\n         return null;\n     }\n \n+    // This method will never be called for a legacy invoker.\n+    @Override\n+    default org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation invocation) throws org.apache.dubbo.rpc.RpcException {\n+        return null;\n+    }\n+\n     class CompatibleInvoker<T> implements Invoker<T> {\n \n         private org.apache.dubbo.rpc.Invoker<T> invoker;\n@@ -43,13 +50,13 @@ public CompatibleInvoker(org.apache.dubbo.rpc.Invoker<T> invoker) {\n         }\n \n         @Override\n-        public Result invoke(org.apache.dubbo.rpc.Invocation invocation) throws RpcException {\n-            return new Result.CompatibleResult(invoker.invoke(((Invocation) invocation).getOriginal()));\n+        public Result invoke(Invocation invocation) throws RpcException {\n+            return new Result.CompatibleResult(invoker.invoke(invocation.getOriginal()));\n         }\n \n         @Override\n         public URL getUrl() {\n-            return invoker.getUrl();\n+            return new URL(invoker.getUrl());\n         }\n \n         @Override",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Invoker.java",
                "sha": "8811f59f797a2aee53511cd4fd3ec667674c58ae",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Protocol.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Protocol.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Protocol.java",
                "patch": "@@ -17,6 +17,22 @@\n \n package com.alibaba.dubbo.rpc;\n \n+import com.alibaba.dubbo.common.URL;\n+\n @Deprecated\n public interface Protocol extends org.apache.dubbo.rpc.Protocol {\n+\n+    <T> Exporter<T> export(Invoker<T> invoker) throws RpcException;\n+\n+    <T> Invoker<T> refer(Class<T> aClass, URL url) throws RpcException;\n+\n+    @Override\n+    default <T> org.apache.dubbo.rpc.Exporter<T> export(org.apache.dubbo.rpc.Invoker<T> invoker) throws RpcException {\n+        return this.export(new Invoker.CompatibleInvoker<>(invoker));\n+    }\n+\n+    @Override\n+    default <T> org.apache.dubbo.rpc.Invoker<T> refer(Class<T> aClass, org.apache.dubbo.common.URL url) throws RpcException {\n+        return this.refer(aClass, new URL(url));\n+    }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/Protocol.java",
                "sha": "18035416da24fc318e7959e3b2f9c0d7348b305d",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Router.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Router.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Router.java",
                "patch": "@@ -26,7 +26,7 @@\n import java.util.stream.Collectors;\n \n @Deprecated\n-public interface Router extends org.apache.dubbo.rpc.cluster.Router {\n+public interface Router extends org.apache.dubbo.rpc.cluster.Router{\n \n     @Override\n     com.alibaba.dubbo.common.URL getUrl();\n@@ -36,7 +36,7 @@\n                                                      com.alibaba.dubbo.rpc.Invocation invocation)\n             throws com.alibaba.dubbo.rpc.RpcException;\n \n-    int compareTo(com.alibaba.dubbo.rpc.cluster.Router o);\n+    int compareTo(Router o);\n \n     // Add since 2.7.0\n     @Override\n@@ -65,7 +65,11 @@ default int getPriority() {\n     }\n \n     @Override\n-    default int compareTo(org.apache.dubbo.rpc.cluster.Router o) {\n-        return compareTo((Router) o);\n+    default int compareTo (org.apache.dubbo.rpc.cluster.Router o) {\n+        if (!(o instanceof Router)) {\n+            return 1;\n+        }\n+\n+        return this.compareTo((Router)o);\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/cluster/Router.java",
                "sha": "d8822bcd86e691ab1ecea7e1e14c205b0202d311",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleReferenceBeanBuilder.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleReferenceBeanBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 19,
                "filename": "dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleReferenceBeanBuilder.java",
                "patch": "@@ -16,23 +16,23 @@\n  */\n package org.apache.dubbo.config.spring.beans.factory.annotation;\n \n+import com.alibaba.dubbo.config.annotation.Reference;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n import org.apache.dubbo.config.ConsumerConfig;\n import org.apache.dubbo.config.spring.ReferenceBean;\n-import org.apache.dubbo.config.spring.convert.converter.StringArrayToMapConverter;\n-import org.apache.dubbo.config.spring.convert.converter.StringArrayToStringConverter;\n-\n-import com.alibaba.dubbo.config.annotation.Reference;\n-\n+import org.springframework.beans.propertyeditors.StringTrimmerEditor;\n import org.springframework.context.ApplicationContext;\n-import org.springframework.core.convert.ConversionService;\n-import org.springframework.core.convert.support.DefaultConversionService;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.StringUtils;\n import org.springframework.validation.DataBinder;\n \n+import java.beans.PropertyEditorSupport;\n+import java.util.Map;\n+\n import static org.apache.dubbo.config.spring.util.BeanFactoryUtils.getOptionalBean;\n import static org.apache.dubbo.config.spring.util.ObjectUtils.of;\n+import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;\n \n /**\n  * {@link ReferenceBean} Builder\n@@ -43,6 +43,9 @@\n class CompatibleReferenceBeanBuilder extends AbstractAnnotationConfigBeanBuilder<Reference, ReferenceBean> {\n \n \n+    // Ignore those fields\n+    static final String[] IGNORE_FIELD_NAMES = of(\"application\", \"module\", \"consumer\", \"monitor\", \"registry\");\n+\n     private CompatibleReferenceBeanBuilder(Reference annotation, ClassLoader classLoader, ApplicationContext applicationContext) {\n         super(annotation, classLoader, applicationContext);\n     }\n@@ -96,20 +99,30 @@ protected ReferenceBean doBuild() {\n     protected void preConfigureBean(Reference reference, ReferenceBean referenceBean) {\n         Assert.notNull(interfaceClass, \"The interface class must set first!\");\n         DataBinder dataBinder = new DataBinder(referenceBean);\n-        // Set ConversionService\n-        dataBinder.setConversionService(getConversionService());\n-        // Ignore those fields\n-        String[] ignoreAttributeNames = of(\"application\", \"module\", \"consumer\", \"monitor\", \"registry\");\n-//        dataBinder.setDisallowedFields(ignoreAttributeNames);\n+        // Register CustomEditors for special fields\n+        dataBinder.registerCustomEditor(String.class, \"filter\", new StringTrimmerEditor(true));\n+        dataBinder.registerCustomEditor(String.class, \"listener\", new StringTrimmerEditor(true));\n+        dataBinder.registerCustomEditor(Map.class, \"parameters\", new PropertyEditorSupport() {\n+            @Override\n+            public void setAsText(String text) throws java.lang.IllegalArgumentException {\n+                // Trim all whitespace\n+                String content = StringUtils.trimAllWhitespace(text);\n+                if (!StringUtils.hasText(content)) { // No content , ignore directly\n+                    return;\n+                }\n+                // replace \"=\" to \",\"\n+                content = StringUtils.replace(content, \"=\", \",\");\n+                // replace \":\" to \",\"\n+                content = StringUtils.replace(content, \":\", \",\");\n+                // String[] to Map\n+                Map<String, String> parameters = CollectionUtils.toStringMap(commaDelimitedListToStringArray(content));\n+                setValue(parameters);\n+            }\n+        });\n+\n         // Bind annotation attributes\n-        dataBinder.bind(new AnnotationPropertyValuesAdapter(reference, applicationContext.getEnvironment(), ignoreAttributeNames));\n-    }\n+        dataBinder.bind(new AnnotationPropertyValuesAdapter(reference, applicationContext.getEnvironment(), IGNORE_FIELD_NAMES));\n \n-    private ConversionService getConversionService() {\n-        DefaultConversionService conversionService = new DefaultConversionService();\n-        conversionService.addConverter(new StringArrayToStringConverter());\n-        conversionService.addConverter(new StringArrayToMapConverter());\n-        return conversionService;\n     }\n \n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/CompatibleReferenceBeanBuilder.java",
                "sha": "16013b37e2fa72e7517e0617c845177c71d864ea",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/schema/CompatibleAnnotationBeanDefinitionParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/schema/CompatibleAnnotationBeanDefinitionParser.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/schema/CompatibleAnnotationBeanDefinitionParser.java",
                "patch": "@@ -16,11 +16,9 @@\n  */\n package org.apache.dubbo.config.spring.schema;\n \n-import org.apache.dubbo.config.spring.AnnotationBean;\n import org.apache.dubbo.config.spring.beans.factory.annotation.CompatibleReferenceAnnotationBeanPostProcessor;\n import org.apache.dubbo.config.spring.beans.factory.annotation.CompatibleServiceAnnotationBeanPostProcessor;\n import org.apache.dubbo.config.spring.util.BeanRegistrar;\n-\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n@@ -34,7 +32,7 @@\n import static org.springframework.util.StringUtils.trimArrayElements;\n \n /**\n- * {@link AnnotationBean} {@link BeanDefinitionParser}\n+ * {@link BeanDefinitionParser}\n  *\n  * @see CompatibleServiceAnnotationBeanPostProcessor\n  * @see CompatibleReferenceAnnotationBeanPostProcessor",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/main/java/org/apache/dubbo/config/spring/schema/CompatibleAnnotationBeanDefinitionParser.java",
                "sha": "1172591190a521b0e9dcc291d698598f26eadb19",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/cache/CacheTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/cache/CacheTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/cache/CacheTest.java",
                "patch": "@@ -25,8 +25,8 @@\n import com.alibaba.dubbo.rpc.Invocation;\n import com.alibaba.dubbo.rpc.Invoker;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Map;\n \n@@ -45,7 +45,7 @@ public void testCacheFactory() {\n         org.apache.dubbo.rpc.Invocation inv = new RpcInvocation();\n         org.apache.dubbo.cache.Cache c = factory.getCache(u, inv);\n         String v = (String) c.get(\"testKey\");\n-        Assert.assertEquals(\"testValue\", v);\n+        Assertions.assertEquals(\"testValue\", v);\n     }\n \n     static class NullInvocation implements Invocation {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/cache/CacheTest.java",
                "sha": "b4305ced025cea429b2d042a1ef75a6d362f5a51",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/common/extension/ExtensionTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/common/extension/ExtensionTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 8,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/common/extension/ExtensionTest.java",
                "patch": "@@ -17,24 +17,24 @@\n \n package org.apache.dubbo.common.extension;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class ExtensionTest {\n \n     @Test\n     public void testExtensionFactory() {\n         try {\n             ExtensionFactory factory = ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getExtension(\"myfactory\");\n-            Assert.assertTrue(factory instanceof ExtensionFactory);\n-            Assert.assertTrue(factory instanceof com.alibaba.dubbo.common.extension.ExtensionFactory);\n-            Assert.assertTrue(factory instanceof MyExtensionFactory);\n+            Assertions.assertTrue(factory instanceof ExtensionFactory);\n+            Assertions.assertTrue(factory instanceof com.alibaba.dubbo.common.extension.ExtensionFactory);\n+            Assertions.assertTrue(factory instanceof MyExtensionFactory);\n \n             ExtensionFactory spring = ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getExtension(\"spring\");\n-            Assert.assertTrue(spring instanceof ExtensionFactory);\n-            Assert.assertFalse(spring instanceof com.alibaba.dubbo.common.extension.ExtensionFactory);\n+            Assertions.assertTrue(spring instanceof ExtensionFactory);\n+            Assertions.assertFalse(spring instanceof com.alibaba.dubbo.common.extension.ExtensionFactory);\n         } catch (IllegalArgumentException expected) {\n             fail();\n         }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/common/extension/ExtensionTest.java",
                "sha": "2b7a5c86be8e7ddbd626be04374cbd73f1b8aa87",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/common/extension/MockDispatcher.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/common/extension/MockDispatcher.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/common/extension/MockDispatcher.java",
                "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.dubbo.common.extension;\n+\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.remoting.ChannelHandler;\n+import org.apache.dubbo.remoting.Dispatcher;\n+\n+public class MockDispatcher implements Dispatcher {\n+    @Override\n+    public ChannelHandler dispatch(ChannelHandler handler, URL url) {\n+        return null;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/common/extension/MockDispatcher.java",
                "sha": "732f333c08208dac97864110412f4d539444d349",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 5,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java",
                "patch": "@@ -22,7 +22,8 @@\n import com.alibaba.dubbo.config.MonitorConfig;\n import com.alibaba.dubbo.config.RegistryConfig;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n@@ -34,7 +35,7 @@\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.sameInstance;\n import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class ApplicationConfigTest {\n     @Test\n@@ -91,10 +92,12 @@ public void testEnvironment1() throws Exception {\n         assertThat(application.getEnvironment(), equalTo(\"product\"));\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testEnvironment2() throws Exception {\n-        ApplicationConfig application = new ApplicationConfig(\"app\");\n-        application.setEnvironment(\"illegal-env\");\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            ApplicationConfig application = new ApplicationConfig(\"app\");\n+            application.setEnvironment(\"illegal-env\");\n+        });\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java",
                "sha": "49966db9e054d76ca12cc006b0f6d1d795e7f340",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java",
                "patch": "@@ -19,15 +19,15 @@\n \n import com.alibaba.dubbo.config.ArgumentConfig;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasEntry;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class ArgumentConfigTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java",
                "sha": "e23b27639c957d71efb2d562b9116fefec326ee7",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ConfigTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/ConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 7,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/ConfigTest.java",
                "patch": "@@ -24,21 +24,21 @@\n import com.alibaba.dubbo.config.ReferenceConfig;\n import com.alibaba.dubbo.config.ServiceConfig;\n \n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class ConfigTest {\n     private com.alibaba.dubbo.config.ApplicationConfig applicationConfig = new com.alibaba.dubbo.config.ApplicationConfig(\"first-dubbo-test\");\n     private com.alibaba.dubbo.config.RegistryConfig registryConfig = new com.alibaba.dubbo.config.RegistryConfig(\"multicast://224.5.6.7:1234\");\n \n-    @After\n+    @AfterEach\n     public void tearDown() {\n         ConfigManager.getInstance().clear();\n     }\n \n-    @Before\n+    @BeforeEach\n     public void setup() {\n         // In IDE env, make sure adding the following argument to VM options\n         System.setProperty(\"java.net.preferIPv4Stack\", \"true\");\n@@ -60,6 +60,6 @@ public void testConfig() {\n         reference.setInterface(DemoService.class);\n         DemoService demoService = reference.get();\n         String message = demoService.sayHello(\"dubbo\");\n-        Assert.assertEquals(\"hello dubbo\", message);\n+        Assertions.assertEquals(\"hello dubbo\", message);\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ConfigTest.java",
                "sha": "4aadd60cf126a5786fd6d33a134e3ecbe7a7b9e1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java",
                "patch": "@@ -19,11 +19,11 @@\n \n import com.alibaba.dubbo.config.ConsumerConfig;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class ConsumerConfigTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java",
                "sha": "5a3569f2308c196713a63b2647eec64e30baa1de",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 3,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "patch": "@@ -25,7 +25,7 @@\n import com.alibaba.dubbo.config.MethodConfig;\n \n import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n@@ -37,8 +37,8 @@\n import static org.hamcrest.Matchers.hasKey;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.not;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class MethodConfigTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "sha": "075c55480857ef824a6ace7fdc5b1ffc2d43a5e1",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 6,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java",
                "patch": "@@ -21,7 +21,8 @@\n import com.alibaba.dubbo.config.RegistryConfig;\n \n import org.hamcrest.Matchers;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n@@ -32,14 +33,16 @@\n import static org.hamcrest.Matchers.hasEntry;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.sameInstance;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class ModuleConfigTest {\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testName1() throws Exception {\n-        ModuleConfig module = new ModuleConfig();\n-        Map<String, String> parameters = new HashMap<String, String>();\n-        ModuleConfig.appendParameters(parameters, module);\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n+            ModuleConfig module = new ModuleConfig();\n+            Map<String, String> parameters = new HashMap<String, String>();\n+            ModuleConfig.appendParameters(parameters, module);\n+        });\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java",
                "sha": "4dc72dad90fee1488b39aa7f8a9a697e2974e39d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java",
                "patch": "@@ -19,7 +19,7 @@\n \n import com.alibaba.dubbo.config.ProtocolConfig;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n@@ -28,7 +28,7 @@\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.hasEntry;\n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class ProtocolConfigTest {\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java",
                "sha": "5cadde7ee423f1a3963a9e424bd553e23dfe40c6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java",
                "patch": "@@ -19,7 +19,7 @@\n \n import com.alibaba.dubbo.config.ProviderConfig;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -29,7 +29,7 @@\n import static org.hamcrest.Matchers.hasKey;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.not;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class ProviderConfigTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java",
                "sha": "b26e26e31e98703b1a1caa847934762ea9098c34",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 5,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java",
                "patch": "@@ -27,21 +27,21 @@\n import com.alibaba.dubbo.config.RegistryConfig;\n import com.alibaba.dubbo.config.ServiceConfig;\n \n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n public class ReferenceConfigTest {\n     private ApplicationConfig application = new ApplicationConfig();\n     private RegistryConfig registry = new RegistryConfig();\n     private ProtocolConfig protocol = new ProtocolConfig();\n \n-    @Before\n+    @BeforeEach\n     public void setUp() {\n         ConfigManager.getInstance().clear();\n     }\n \n-    @After\n+    @AfterEach\n     public void tearDown() {\n         ConfigManager.getInstance().clear();\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java",
                "sha": "a7139ed61b9e33c8f8c9b26ab0412efc9d9c9705",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java",
                "patch": "@@ -20,7 +20,7 @@\n import com.alibaba.dubbo.common.Constants;\n import com.alibaba.dubbo.config.RegistryConfig;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n \n import java.util.Collections;\n import java.util.HashMap;\n@@ -31,7 +31,7 @@\n import static org.hamcrest.Matchers.hasEntry;\n import static org.hamcrest.Matchers.hasKey;\n import static org.hamcrest.Matchers.not;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n \n public class RegistryConfigTest {\n     @Test",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java",
                "sha": "3b66191b17b0d882ad8dbccb97926477c05cdcea",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/echo/EchoServiceTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/echo/EchoServiceTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/echo/EchoServiceTest.java",
                "patch": "@@ -28,8 +28,8 @@\n \n import com.alibaba.dubbo.rpc.service.EchoService;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n public class EchoServiceTest {\n \n@@ -43,11 +43,11 @@ public void testEcho() {\n         Invoker<DemoService> invoker = protocol.refer(DemoService.class, url);\n         EchoService client = (EchoService) proxyFactory.getProxy(invoker);\n         Object result = client.$echo(\"haha\");\n-        Assert.assertEquals(\"haha\", result);\n+        Assertions.assertEquals(\"haha\", result);\n \n         org.apache.dubbo.rpc.service.EchoService newClient = (org.apache.dubbo.rpc.service.EchoService) proxyFactory.getProxy(invoker);\n         Object res = newClient.$echo(\"hehe\");\n-        Assert.assertEquals(\"hehe\", res);\n+        Assertions.assertEquals(\"hehe\", res);\n         invoker.destroy();\n         exporter.unexport();\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/echo/EchoServiceTest.java",
                "sha": "24cbfa291a40a6cc71c4559fb5a69274c274bde6",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/filter/FilterTest.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/filter/FilterTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 16,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/filter/FilterTest.java",
                "patch": "@@ -17,18 +17,17 @@\n \n package org.apache.dubbo.filter;\n \n-import org.apache.dubbo.rpc.Filter;\n-import org.apache.dubbo.rpc.Invocation;\n-import org.apache.dubbo.rpc.Invoker;\n-import org.apache.dubbo.rpc.Result;\n import org.apache.dubbo.rpc.RpcException;\n-import org.apache.dubbo.service.MockInvocation;\n \n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Test;\n+import com.alibaba.dubbo.rpc.Filter;\n+import com.alibaba.dubbo.rpc.Invocation;\n+import com.alibaba.dubbo.rpc.Invoker;\n+import com.alibaba.dubbo.rpc.Result;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class FilterTest {\n \n@@ -37,25 +36,25 @@\n     @Test\n     public void testInvokeException() {\n         try {\n-            Invoker<FilterTest> invoker = new MyInvoker<FilterTest>(null);\n-            Invocation invocation = new MockInvocation(\"aa\");\n+            Invoker<FilterTest> invoker = new LegacyInvoker<FilterTest>(null);\n+            Invocation invocation = new LegacyInvocation(\"aa\");\n             myFilter.invoke(invoker, invocation);\n             fail();\n         } catch (RpcException e) {\n-            Assert.assertTrue(e.getMessage().contains(\"arg0 illegal\"));\n+            Assertions.assertTrue(e.getMessage().contains(\"arg0 illegal\"));\n         }\n     }\n \n     @Test\n     public void testDefault() {\n-        Invoker<FilterTest> invoker = new MyInvoker<FilterTest>(null);\n-        Invocation invocation = new MockInvocation(\"bbb\");\n+        Invoker<FilterTest> invoker = new LegacyInvoker<FilterTest>(null);\n+        Invocation invocation = new LegacyInvocation(\"bbb\");\n         Result res = myFilter.invoke(invoker, invocation);\n         System.out.println(res);\n     }\n \n-    @AfterClass\n+    @AfterAll\n     public static void tear() {\n-        Assert.assertEquals(2, MyFilter.count);\n+        Assertions.assertEquals(2, MyFilter.count);\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/filter/FilterTest.java",
                "sha": "5463b58c8c119ac30880b5073d3212edec5d82ca",
                "status": "modified"
            },
            {
                "additions": 88,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvocation.java",
                "changes": 88,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvocation.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvocation.java",
                "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.filter;\n+\n+import org.apache.dubbo.common.Constants;\n+\n+import com.alibaba.dubbo.rpc.Invocation;\n+import com.alibaba.dubbo.rpc.Invoker;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * MockInvocation.java\n+ */\n+public class LegacyInvocation implements Invocation {\n+\n+    private String arg0;\n+\n+    public LegacyInvocation(String arg0) {\n+        this.arg0 = arg0;\n+    }\n+\n+    public String getMethodName() {\n+        return \"echo\";\n+    }\n+\n+    public Class<?>[] getParameterTypes() {\n+        return new Class[]{String.class};\n+    }\n+\n+    public Object[] getArguments() {\n+        return new Object[]{arg0};\n+    }\n+\n+    public Map<String, String> getAttachments() {\n+        Map<String, String> attachments = new HashMap<String, String>();\n+        attachments.put(Constants.PATH_KEY, \"dubbo\");\n+        attachments.put(Constants.GROUP_KEY, \"dubbo\");\n+        attachments.put(Constants.VERSION_KEY, \"1.0.0\");\n+        attachments.put(Constants.DUBBO_VERSION_KEY, \"1.0.0\");\n+        attachments.put(Constants.TOKEN_KEY, \"sfag\");\n+        attachments.put(Constants.TIMEOUT_KEY, \"1000\");\n+        return attachments;\n+    }\n+\n+    public Invoker<?> getInvoker() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object put(Object key, Object value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object get(Object key) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<Object, Object> getAttributes() {\n+        return null;\n+    }\n+\n+    public String getAttachment(String key) {\n+        return getAttachments().get(key);\n+    }\n+\n+    public String getAttachment(String key, String defaultValue) {\n+        return getAttachments().get(key);\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvocation.java",
                "sha": "c1e87923928a1b8042a0138b268d0710f6cc06e8",
                "status": "added"
            },
            {
                "additions": 74,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvoker.java",
                "changes": 148,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvoker.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 74,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvoker.java",
                "patch": "@@ -1,74 +1,74 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.dubbo.filter;\r\n-\r\n-import org.apache.dubbo.common.URL;\r\n-import org.apache.dubbo.rpc.Invocation;\r\n-import org.apache.dubbo.rpc.Invoker;\r\n-import org.apache.dubbo.rpc.Result;\r\n-import org.apache.dubbo.rpc.RpcException;\r\n-import org.apache.dubbo.rpc.RpcResult;\r\n-import org.apache.dubbo.service.DemoService;\r\n-\r\n-public class MyInvoker<T> implements Invoker<T> {\r\n-\r\n-    URL url;\r\n-    Class<T> type;\r\n-    boolean hasException = false;\r\n-\r\n-    public MyInvoker(URL url) {\r\n-        this.url = url;\r\n-        type = (Class<T>) DemoService.class;\r\n-    }\r\n-\r\n-    public MyInvoker(URL url, boolean hasException) {\r\n-        this.url = url;\r\n-        type = (Class<T>) DemoService.class;\r\n-        this.hasException = hasException;\r\n-    }\r\n-\r\n-    @Override\r\n-    public Class<T> getInterface() {\r\n-        return type;\r\n-    }\r\n-\r\n-    public URL getUrl() {\r\n-        return url;\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean isAvailable() {\r\n-        return false;\r\n-    }\r\n-\r\n-    public Result invoke(Invocation invocation) throws RpcException {\r\n-        RpcResult result = new RpcResult();\r\n-        if (hasException == false) {\r\n-            result.setValue(\"alibaba\");\r\n-            return result;\r\n-        } else {\r\n-            result.setException(new RuntimeException(\"mocked exception\"));\r\n-            return result;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    @Override\r\n-    public void destroy() {\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.filter;\n+\n+\n+import org.apache.dubbo.rpc.RpcResult;\n+import org.apache.dubbo.service.DemoService;\n+\n+import com.alibaba.dubbo.common.URL;\n+import com.alibaba.dubbo.rpc.Invocation;\n+import com.alibaba.dubbo.rpc.Invoker;\n+import com.alibaba.dubbo.rpc.Result;\n+import com.alibaba.dubbo.rpc.RpcException;\n+\n+public class LegacyInvoker<T> implements Invoker<T> {\n+\n+    URL url;\n+    Class<T> type;\n+    boolean hasException = false;\n+\n+    public LegacyInvoker(URL url) {\n+        this.url = url;\n+        type = (Class<T>) DemoService.class;\n+    }\n+\n+    public LegacyInvoker(URL url, boolean hasException) {\n+        this.url = url;\n+        type = (Class<T>) DemoService.class;\n+        this.hasException = hasException;\n+    }\n+\n+    @Override\n+    public Class<T> getInterface() {\n+        return type;\n+    }\n+\n+    public URL getUrl() {\n+        return url;\n+    }\n+\n+    @Override\n+    public boolean isAvailable() {\n+        return false;\n+    }\n+\n+    public Result invoke(Invocation invocation) throws RpcException {\n+        RpcResult result = new RpcResult();\n+        if (hasException == false) {\n+            result.setValue(\"alibaba\");\n+        } else {\n+            result.setException(new RuntimeException(\"mocked exception\"));\n+        }\n+        return new Result.CompatibleResult(result);\n+    }\n+\n+    @Override\n+    public void destroy() {\n+    }\n+\n+}",
                "previous_filename": "dubbo-compatible/src/test/java/org/apache/dubbo/filter/MyInvoker.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/filter/LegacyInvoker.java",
                "sha": "ee1288affffd510d810ea9454d95fe48400f79cb",
                "status": "renamed"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/generic/GenericServiceTest.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/generic/GenericServiceTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 34,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/generic/GenericServiceTest.java",
                "patch": "@@ -35,15 +35,14 @@\n \n import com.alibaba.fastjson.JSON;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n \n public class GenericServiceTest {\n \n@@ -58,11 +57,11 @@ public void testGeneric() {\n \n         GenericService client = (GenericService) proxyFactory.getProxy(invoker, true);\n         Object result = client.$invoke(\"sayHello\", new String[]{\"java.lang.String\"}, new Object[]{\"haha\"});\n-        Assert.assertEquals(\"hello haha\", result);\n+        Assertions.assertEquals(\"hello haha\", result);\n \n         org.apache.dubbo.rpc.service.GenericService newClient = (org.apache.dubbo.rpc.service.GenericService) proxyFactory.getProxy(invoker, true);\n         Object res = newClient.$invoke(\"sayHello\", new String[]{\"java.lang.String\"}, new Object[]{\"hehe\"});\n-        Assert.assertEquals(\"hello hehe\", res);\n+        Assertions.assertEquals(\"hello hehe\", res);\n         invoker.destroy();\n         exporter.unexport();\n     }\n@@ -78,13 +77,13 @@ public void testGeneric2() {\n \n         GenericService client = proxyFactory.getProxy(invoker, true);\n         Object result = client.$invoke(\"sayHello\", new String[]{\"java.lang.String\"}, new Object[]{\"haha\"});\n-        Assert.assertEquals(\"hello haha\", result);\n+        Assertions.assertEquals(\"hello haha\", result);\n \n         Invoker<DemoService> invoker2 = protocol.refer(DemoService.class, url);\n \n         GenericService client2 = (GenericService) proxyFactory.getProxy(invoker2, true);\n         Object result2 = client2.$invoke(\"sayHello\", new String[]{\"java.lang.String\"}, new Object[]{\"haha\"});\n-        Assert.assertEquals(\"hello haha\", result2);\n+        Assertions.assertEquals(\"hello haha\", result2);\n \n         invoker.destroy();\n         exporter.unexport();\n@@ -108,21 +107,21 @@ public void testGenericComplexCompute4FullServiceMetadata() {\n \n         FullServiceDefinition fullServiceDefinition = ServiceDefinitionBuilder.buildFullDefinition(DemoService.class);\n         MethodDefinition methodDefinition = getMethod(\"complexCompute\", fullServiceDefinition.getMethods());\n-        Map parm2= createComplextObject(fullServiceDefinition,var1, var2, l, var3, var4, testEnum);\n-        ComplexObject complexObject = map2bean(parm2);\n+        Map mapObject = createComplexObject(fullServiceDefinition,var1, var2, l, var3, var4, testEnum);\n+        ComplexObject complexObject = map2bean(mapObject);\n \n         Invoker<GenericService> invoker = protocol.refer(GenericService.class, url);\n \n \n         GenericService client = proxyFactory.getProxy(invoker, true);\n-        Object result = client.$invoke(methodDefinition.getName(), methodDefinition.getParameterTypes(), new Object[]{\"haha\", parm2});\n-        Assert.assertEquals(\"haha###\" + complexObject.toString(), result);\n+        Object result = client.$invoke(methodDefinition.getName(), methodDefinition.getParameterTypes(), new Object[]{\"haha\", mapObject});\n+        Assertions.assertEquals(\"haha###\" + complexObject.toString(), result);\n \n \n         Invoker<DemoService> invoker2 = protocol.refer(DemoService.class, url);\n         GenericService client2 = (GenericService) proxyFactory.getProxy(invoker2, true);\n-        Object result2 = client2.$invoke(\"complexCompute\", methodDefinition.getParameterTypes(), new Object[]{\"haha2\", parm2});\n-        Assert.assertEquals(\"haha2###\" + complexObject.toString(), result2);\n+        Object result2 = client2.$invoke(\"complexCompute\", methodDefinition.getParameterTypes(), new Object[]{\"haha2\", mapObject});\n+        Assertions.assertEquals(\"haha2###\" + complexObject.toString(), result2);\n \n         invoker.destroy();\n         exporter.unexport();\n@@ -150,9 +149,9 @@ public void testGenericFindComplexObject4FullServiceMetadata() {\n         GenericService client = proxyFactory.getProxy(invoker, true);\n         Object result = client.$invoke(\"findComplexObject\", new String[]{\"java.lang.String\", \"int\", \"long\", \"java.lang.String[]\", \"java.util.List\", \"org.apache.dubbo.service.ComplexObject$TestEnum\"},\n                 new Object[]{var1, var2, l, var3, var4, testEnum});\n-        Assert.assertNotNull(result);\n+        Assertions.assertNotNull(result);\n         ComplexObject r = map2bean((Map) result);\n-        Assert.assertEquals(r, createComplexObject(var1, var2, l, var3, var4, testEnum));\n+        Assertions.assertEquals(r, createComplexObject(var1, var2, l, var3, var4, testEnum));\n \n         invoker.destroy();\n         exporter.unexport();\n@@ -167,7 +166,7 @@ MethodDefinition getMethod(String methodName, List<MethodDefinition> list) {\n         return null;\n     }\n \n-    Map<String, Object> createComplextObject(FullServiceDefinition fullServiceDefinition, String var1, int var2, long l, String[] var3, List<Integer> var4, ComplexObject.TestEnum testEnum) {\n+    Map<String, Object> createComplexObject(FullServiceDefinition fullServiceDefinition, String var1, int var2, long l, String[] var3, List<Integer> var4, ComplexObject.TestEnum testEnum) {\n         List<TypeDefinition> typeDefinitions = fullServiceDefinition.getTypes();\n         TypeDefinition topTypeDefinition = null;\n         TypeDefinition innerTypeDefinition = null;\n@@ -184,22 +183,22 @@ MethodDefinition getMethod(String methodName, List<MethodDefinition> list) {\n                 inner3TypeDefinition = typeDefinition;\n             }\n         }\n-        Assert.assertEquals(topTypeDefinition.getProperties().get(\"v\").getType(), \"long\");\n-        Assert.assertEquals(topTypeDefinition.getProperties().get(\"maps\").getType(), \"java.util.Map<java.lang.String, java.lang.String>\");\n-        Assert.assertEquals(topTypeDefinition.getProperties().get(\"innerObject\").getType(), \"org.apache.dubbo.service.ComplexObject$InnerObject\");\n-        Assert.assertEquals(topTypeDefinition.getProperties().get(\"intList\").getType(), \"java.util.List<java.lang.Integer>\");\n-        Assert.assertEquals(topTypeDefinition.getProperties().get(\"strArrays\").getType(), \"java.lang.String[]\");\n-        Assert.assertEquals(topTypeDefinition.getProperties().get(\"innerObject3\").getType(), \"org.apache.dubbo.service.ComplexObject.InnerObject3[]\");\n-        Assert.assertEquals(topTypeDefinition.getProperties().get(\"testEnum\").getType(), \"org.apache.dubbo.service.ComplexObject.TestEnum\");\n-        Assert.assertEquals(topTypeDefinition.getProperties().get(\"innerObject2\").getType(), \"java.util.Set<org.apache.dubbo.service.ComplexObject$InnerObject2>\");\n+        Assertions.assertEquals(topTypeDefinition.getProperties().get(\"v\").getType(), \"long\");\n+        Assertions.assertEquals(topTypeDefinition.getProperties().get(\"maps\").getType(), \"java.util.Map<java.lang.String, java.lang.String>\");\n+        Assertions.assertEquals(topTypeDefinition.getProperties().get(\"innerObject\").getType(), \"org.apache.dubbo.service.ComplexObject$InnerObject\");\n+        Assertions.assertEquals(topTypeDefinition.getProperties().get(\"intList\").getType(), \"java.util.List<java.lang.Integer>\");\n+        Assertions.assertEquals(topTypeDefinition.getProperties().get(\"strArrays\").getType(), \"java.lang.String[]\");\n+        Assertions.assertEquals(topTypeDefinition.getProperties().get(\"innerObject3\").getType(), \"org.apache.dubbo.service.ComplexObject.InnerObject3[]\");\n+        Assertions.assertEquals(topTypeDefinition.getProperties().get(\"testEnum\").getType(), \"org.apache.dubbo.service.ComplexObject.TestEnum\");\n+        Assertions.assertEquals(topTypeDefinition.getProperties().get(\"innerObject2\").getType(), \"java.util.List<org.apache.dubbo.service.ComplexObject$InnerObject2>\");\n \n-        Assert.assertSame(innerTypeDefinition.getProperties().get(\"innerA\").getType(), \"java.lang.String\");\n-        Assert.assertSame(innerTypeDefinition.getProperties().get(\"innerB\").getType(), \"int\");\n+        Assertions.assertSame(innerTypeDefinition.getProperties().get(\"innerA\").getType(), \"java.lang.String\");\n+        Assertions.assertSame(innerTypeDefinition.getProperties().get(\"innerB\").getType(), \"int\");\n \n-        Assert.assertSame(inner2TypeDefinition.getProperties().get(\"innerA2\").getType(), \"java.lang.String\");\n-        Assert.assertSame(inner2TypeDefinition.getProperties().get(\"innerB2\").getType(), \"int\");\n+        Assertions.assertSame(inner2TypeDefinition.getProperties().get(\"innerA2\").getType(), \"java.lang.String\");\n+        Assertions.assertSame(inner2TypeDefinition.getProperties().get(\"innerB2\").getType(), \"int\");\n \n-        Assert.assertSame(inner3TypeDefinition.getProperties().get(\"innerA3\").getType(), \"java.lang.String\");\n+        Assertions.assertSame(inner3TypeDefinition.getProperties().get(\"innerA3\").getType(), \"java.lang.String\");\n \n         Map<String, Object> result = new HashMap<>();\n         result.put(\"v\", l);\n@@ -216,16 +215,16 @@ MethodDefinition getMethod(String methodName, List<MethodDefinition> list) {\n         innerObjectMap.put(\"innerA\", var1);\n         innerObjectMap.put(\"innerB\", var2);\n \n-        Set<Map> innerObject2Set = new HashSet<>(4);\n-        result.put(\"innerObject2\", innerObject2Set);\n+        List<Map> innerObject2List = new ArrayList<>();\n+        result.put(\"innerObject2\", innerObject2List);\n         Map innerObject2Tmp1 = new HashMap<>(4);\n         innerObject2Tmp1.put(\"innerA2\", var1 + \"_21\");\n         innerObject2Tmp1.put(\"innerB2\", var2 + 100000);\n         Map innerObject2Tmp2 = new HashMap<>(4);\n         innerObject2Tmp2.put(\"innerA2\", var1 + \"_22\");\n         innerObject2Tmp2.put(\"innerB2\", var2 + 200000);\n-        innerObject2Set.add(innerObject2Tmp1);\n-        innerObject2Set.add(innerObject2Tmp2);\n+        innerObject2List.add(innerObject2Tmp1);\n+        innerObject2List.add(innerObject2Tmp2);\n \n         Map innerObject3Tmp1 = new HashMap<>(4);\n         innerObject3Tmp1.put(\"innerA3\", var1 + \"_31\");",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/generic/GenericServiceTest.java",
                "sha": "09d62cc067c859509f7372d74bb87cd8a3e636f4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter.java",
                "patch": "@@ -28,6 +28,7 @@\n  *\n  */\n public class CompatibleRouter implements Router {\n+\n     @Override\n     public URL getUrl() {\n         return null;",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter.java",
                "sha": "2351b2144094614217fc1e375d05f85ba6f0e8b7",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter2.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter2.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 12,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter2.java",
                "patch": "@@ -14,26 +14,32 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.dubbo.config.spring.convert.converter;\n+package org.apache.dubbo.rpc.cluster;\n \n-import org.apache.dubbo.common.utils.CollectionUtils;\n+import com.alibaba.dubbo.common.URL;\n+import com.alibaba.dubbo.rpc.Invocation;\n+import com.alibaba.dubbo.rpc.Invoker;\n+import com.alibaba.dubbo.rpc.RpcException;\n+import com.alibaba.dubbo.rpc.cluster.Router;\n \n-import org.springframework.core.convert.converter.Converter;\n-import org.springframework.util.ObjectUtils;\n-\n-import java.util.Map;\n+import java.util.List;\n \n /**\n- * {@link String}[] to {@link Map} {@link Converter}\n  *\n- * @see CollectionUtils#toStringMap(String[])\n- * @since 2.5.11\n  */\n-public class StringArrayToMapConverter implements Converter<String[], Map<String, String>> {\n+public class CompatibleRouter2 implements Router {\n+    @Override\n+    public URL getUrl() {\n+        return null;\n+    }\n \n     @Override\n-    public Map<String, String> convert(String[] source) {\n-        return ObjectUtils.isEmpty(source) ? null : CollectionUtils.toStringMap(source);\n+    public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n+        return null;\n     }\n \n+    @Override\n+    public int compareTo(Router o) {\n+        return 0;\n+    }\n }",
                "previous_filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/convert/converter/StringArrayToMapConverter.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/CompatibleRouter2.java",
                "sha": "13350d4572fe4907da3603600f8cf99b57703ed1",
                "status": "renamed"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/NewRouter.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/NewRouter.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/NewRouter.java",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster;\n+\n+import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.rpc.Invocation;\n+import org.apache.dubbo.rpc.Invoker;\n+import org.apache.dubbo.rpc.RpcException;\n+\n+import java.util.List;\n+\n+/**\n+ *\n+ */\n+public class NewRouter implements Router {\n+    @Override\n+    public URL getUrl() {\n+        return null;\n+    }\n+\n+    @Override\n+    public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isRuntime() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isForce() {\n+        return false;\n+    }\n+\n+    @Override\n+    public int getPriority() {\n+        return 0;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/NewRouter.java",
                "sha": "86269062e0a5416a09232ea5d79f72ac58364bd9",
                "status": "added"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/RouterTest.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/RouterTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/RouterTest.java",
                "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.rpc.cluster;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ *\n+ */\n+public class RouterTest {\n+\n+    private static List<Router> routers = new ArrayList<>();\n+\n+    @BeforeAll\n+    public static void setUp () {\n+        CompatibleRouter compatibleRouter = new CompatibleRouter();\n+        routers.add(compatibleRouter);\n+        CompatibleRouter2 compatibleRouter2 = new CompatibleRouter2();\n+        routers.add(compatibleRouter2);\n+        NewRouter newRouter = new NewRouter();\n+        routers.add(newRouter);\n+    }\n+\n+    @Test\n+    public void testCompareTo () {\n+        try {\n+            Collections.sort(routers);\n+            Assertions.assertTrue(true);\n+        } catch (Exception e) {\n+            Assertions.assertFalse(false);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/rpc/cluster/RouterTest.java",
                "sha": "5288c53a2316f86a190fa75b7e8a3c77d2061ae7",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/serialization/SerializationTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/serialization/SerializationTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/serialization/SerializationTest.java",
                "patch": "@@ -22,8 +22,8 @@\n \n import org.hamcrest.CoreMatchers;\n import org.hamcrest.Matchers;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n@@ -32,7 +32,7 @@\n import java.io.OutputStream;\n \n import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.mockito.Mockito.mock;\n \n public class SerializationTest {\n@@ -44,7 +44,7 @@\n     private ByteArrayOutputStream byteArrayOutputStream;\n     private ByteArrayInputStream byteArrayInputStream;\n \n-    @Before\n+    @BeforeEach\n     public void setUp() throws Exception {\n         this.mySerialization = new MySerialization();\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/serialization/SerializationTest.java",
                "sha": "8957950a92efa8c916e51cd986cd250f5f98a76a",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/service/ComplexObject.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/java/org/apache/dubbo/service/ComplexObject.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 8,
                "filename": "dubbo-compatible/src/test/java/org/apache/dubbo/service/ComplexObject.java",
                "patch": "@@ -16,13 +16,12 @@\n  */\n package org.apache.dubbo.service;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n-import java.util.Set;\n \n /**\n  * ON 2018/11/5\n@@ -46,7 +45,7 @@ public ComplexObject(String var1, int var2, long l, String[] var3, List<Integer>\n         InnerObject2 io22 = new InnerObject2();\n         io22.setInnerA2(var1 + \"_22\");\n         io22.setInnerB2(var2 + 200000);\n-        this.setInnerObject2(new HashSet<InnerObject2>(Arrays.asList(io21, io22)));\n+        this.setInnerObject2(new ArrayList<>(Arrays.asList(io21, io22)));\n \n         InnerObject3 io31 = new InnerObject3();\n         io31.setInnerA3(var1 + \"_31\");\n@@ -61,7 +60,7 @@ public ComplexObject(String var1, int var2, long l, String[] var3, List<Integer>\n     }\n \n     private InnerObject innerObject;\n-    private Set<InnerObject2> innerObject2;\n+    private List<InnerObject2> innerObject2;\n     private InnerObject3[] innerObject3;\n     private String[] strArrays;\n     private List<Integer> intList;\n@@ -109,11 +108,11 @@ public void setTestEnum(TestEnum testEnum) {\n         this.testEnum = testEnum;\n     }\n \n-    public Set<InnerObject2> getInnerObject2() {\n+    public List<InnerObject2> getInnerObject2() {\n         return innerObject2;\n     }\n \n-    public void setInnerObject2(Set<InnerObject2> innerObject2) {\n+    public void setInnerObject2(List<InnerObject2> innerObject2) {\n         this.innerObject2 = innerObject2;\n     }\n \n@@ -225,15 +224,15 @@ public String getInnerA2() {\n             return innerA2;\n         }\n \n-        public void setInnerA2(String innerA) {\n+        public void setInnerA2(String innerA2) {\n             this.innerA2 = innerA2;\n         }\n \n         public int getInnerB2() {\n             return innerB2;\n         }\n \n-        public void setInnerB2(int innerB) {\n+        public void setInnerB2(int innerB2) {\n             this.innerB2 = innerB2;\n         }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/java/org/apache/dubbo/service/ComplexObject.java",
                "sha": "3657a03a289a1fbcd809f22e8fa3b647e7d0d9d9",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/resources/META-INF/services/org.apache.dubbo.remoting.Dispatcher",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-compatible/src/test/resources/META-INF/services/org.apache.dubbo.remoting.Dispatcher?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-compatible/src/test/resources/META-INF/services/org.apache.dubbo.remoting.Dispatcher",
                "patch": "@@ -0,0 +1,18 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+mockdispatcher=org.apache.dubbo.common.extension.MockDispatcher\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-compatible/src/test/resources/META-INF/services/org.apache.dubbo.remoting.Dispatcher",
                "sha": "eba5810fcc9fc69f2f0b4d411600671ec9918a83",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/pom.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/pom.xml",
                "patch": "@@ -19,7 +19,7 @@\n     <parent>\n         <groupId>org.apache.dubbo</groupId>\n         <artifactId>dubbo-config</artifactId>\n-        <version>2.7.0-SNAPSHOT</version>\n+        <version>2.7.1-SNAPSHOT</version>\n     </parent>\n     <artifactId>dubbo-config-api</artifactId>\n     <packaging>jar</packaging>",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/pom.xml",
                "sha": "19c7aca7bb70d226c436777b250057aa03e5fdb5",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 10,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "patch": "@@ -304,9 +304,9 @@ protected static void checkExtension(Class<?> type, String property, String valu\n      * Check whether there is a <code>Extension</code> who's name (property) is <code>value</code> (special treatment is\n      * required)\n      *\n-     * @param type The Extension type\n+     * @param type     The Extension type\n      * @param property The extension key\n-     * @param value The Extension name\n+     * @param value    The Extension name\n      */\n     protected static void checkMultiExtension(Class<?> type, String property, String value) {\n         checkMultiName(property, value);\n@@ -359,7 +359,7 @@ protected static void checkMethodName(String property, String value) {\n     }\n \n     protected static void checkParameterName(Map<String, String> parameters) {\n-        if (parameters == null || parameters.size() == 0) {\n+        if (CollectionUtils.isEmptyMap(parameters)) {\n             return;\n         }\n         for (Map.Entry<String, String> entry : parameters.entrySet()) {\n@@ -485,12 +485,7 @@ protected void appendAnnotation(Class<?> annotationClass, Object annotation) {\n         for (Method method : methods) {\n             try {\n                 String name = method.getName();\n-                if ((name.startsWith(\"get\") || name.startsWith(\"is\"))\n-                        && !name.equals(\"get\")\n-                        && !\"getClass\".equals(name)\n-                        && Modifier.isPublic(method.getModifiers())\n-                        && method.getParameterTypes().length == 0\n-                        && ClassHelper.isPrimitive(method.getReturnType())) {\n+                if (isMetaMethod(method)) {\n                     String prop = calculateAttributeFromGetter(name);\n                     String key;\n                     Parameter parameter = method.getAnnotation(Parameter.class);\n@@ -562,7 +557,7 @@ public void refresh() {\n             for (Method method : methods) {\n                 if (ClassHelper.isSetter(method)) {\n                     try {\n-                        String value = compositeConfiguration.getString(extractPropertyName(getClass(), method));\n+                        String value = StringUtils.trim(compositeConfiguration.getString(extractPropertyName(getClass(), method)));\n                         // isTypeMatch() is called to avoid duplicate and incorrect update, for example, we have two 'setGeneric' methods in ReferenceConfig.\n                         if (StringUtils.isNotEmpty(value) && ClassHelper.isTypeMatch(method.getParameterTypes()[0], value)) {\n                             method.invoke(this, ClassHelper.convertPrimitive(method.getParameterTypes()[0], value));\n@@ -620,6 +615,29 @@ public boolean isValid() {\n         return true;\n     }\n \n+    private boolean isMetaMethod(Method method) {\n+        String name = method.getName();\n+        if (!(name.startsWith(\"get\") || name.startsWith(\"is\"))) {\n+            return false;\n+        }\n+        if (\"get\".equals(name)) {\n+            return false;\n+        }\n+        if (\"getClass\".equals(name)) {\n+            return false;\n+        }\n+        if (!Modifier.isPublic(method.getModifiers())) {\n+            return false;\n+        }\n+        if (method.getParameterTypes().length != 0) {\n+            return false;\n+        }\n+        if (!ClassHelper.isPrimitive(method.getReturnType())) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n     @Override\n     public boolean equals(Object obj) {\n         if (obj == null || !(obj.getClass().getName().equals(this.getClass().getName()))) {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "sha": "a40bfc3a2e549a1a6601adc9aa3612c3960267ce",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 21,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.dubbo.common.Constants;\n import org.apache.dubbo.common.URL;\n+import org.apache.dubbo.common.URLBuilder;\n import org.apache.dubbo.common.Version;\n import org.apache.dubbo.common.config.Environment;\n import org.apache.dubbo.common.extension.ExtensionLoader;\n@@ -90,7 +91,7 @@\n     protected String cluster;\n \n     /**\n-     * The {@link Filter} when the provicer side exposed a service or the customer side references a remote service used,\n+     * The {@link Filter} when the provider side exposed a service or the customer side references a remote service used,\n      * if there are more than one, you can use commas to separate them\n      */\n     protected String filter;\n@@ -102,7 +103,7 @@\n     protected String listener;\n \n     /**\n-     * The owner of zhe service providers\n+     * The owner of the service providers\n      */\n     protected String owner;\n \n@@ -286,7 +287,7 @@ private DynamicConfiguration getDynamicConfiguration(URL url) {\n     protected List<URL> loadRegistries(boolean provider) {\n         // check && override if necessary\n         List<URL> registryList = new ArrayList<URL>();\n-        if (registries != null && !registries.isEmpty()) {\n+        if (CollectionUtils.isNotEmpty(registries)) {\n             for (RegistryConfig config : registries) {\n                 String address = config.getAddress();\n                 if (StringUtils.isEmpty(address)) {\n@@ -296,16 +297,18 @@ private DynamicConfiguration getDynamicConfiguration(URL url) {\n                     Map<String, String> map = new HashMap<String, String>();\n                     appendParameters(map, application);\n                     appendParameters(map, config);\n-                    map.put(\"path\", RegistryService.class.getName());\n+                    map.put(Constants.PATH_KEY, RegistryService.class.getName());\n                     appendRuntimeParameters(map);\n-                    if (!map.containsKey(\"protocol\")) {\n-                        map.put(\"protocol\", \"dubbo\");\n+                    if (!map.containsKey(Constants.PROTOCOL_KEY)) {\n+                        map.put(Constants.PROTOCOL_KEY, Constants.DUBBO_PROTOCOL);\n                     }\n                     List<URL> urls = UrlUtils.parseURLs(address, map);\n \n                     for (URL url : urls) {\n-                        url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol());\n-                        url = url.setProtocol(Constants.REGISTRY_PROTOCOL);\n+                        url = URLBuilder.from(url)\n+                                .addParameter(Constants.REGISTRY_KEY, url.getProtocol())\n+                                .setProtocol(Constants.REGISTRY_PROTOCOL)\n+                                .build();\n                         if ((provider && url.getParameter(Constants.REGISTER_KEY, true))\n                                 || (!provider && url.getParameter(Constants.SUBSCRIBE_KEY, true))) {\n                             registryList.add(url);\n@@ -331,11 +334,8 @@ protected URL loadMonitor(URL registryURL) {\n         appendRuntimeParameters(map);\n         //set ip\n         String hostToRegistry = ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY);\n-        if (hostToRegistry == null || hostToRegistry.length() == 0) {\n+        if (StringUtils.isEmpty(hostToRegistry)) {\n             hostToRegistry = NetUtils.getLocalHost();\n-        } else if (NetUtils.isInvalidLocalHost(hostToRegistry)) {\n-            throw new IllegalArgumentException(\"Specified invalid registry ip from property:\" +\n-                    Constants.DUBBO_IP_TO_REGISTRY + \", value:\" + hostToRegistry);\n         }\n         map.put(Constants.REGISTER_IP_KEY, hostToRegistry);\n         appendParameters(map, monitor);\n@@ -350,12 +350,16 @@ protected URL loadMonitor(URL registryURL) {\n                 if (getExtensionLoader(MonitorFactory.class).hasExtension(\"logstat\")) {\n                     map.put(Constants.PROTOCOL_KEY, \"logstat\");\n                 } else {\n-                    map.put(Constants.PROTOCOL_KEY, Constants.DOBBO_PROTOCOL);\n+                    map.put(Constants.PROTOCOL_KEY, Constants.DUBBO_PROTOCOL);\n                 }\n             }\n             return UrlUtils.parseURL(address, map);\n         } else if (Constants.REGISTRY_PROTOCOL.equals(monitor.getProtocol()) && registryURL != null) {\n-          return registryURL.setProtocol(Constants.DOBBO_PROTOCOL).addParameter(Constants.PROTOCOL_KEY, Constants.REGISTRY_PROTOCOL).addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map));\n+            return URLBuilder.from(registryURL)\n+                    .setProtocol(Constants.DUBBO_PROTOCOL)\n+                    .addParameter(Constants.PROTOCOL_KEY, Constants.REGISTRY_PROTOCOL)\n+                    .addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map))\n+                    .build();\n         }\n         return null;\n     }\n@@ -371,7 +375,7 @@ static void appendRuntimeParameters(Map<String, String> map) {\n \n     private URL loadMetadataReporterURL() {\n         String address = metadataReportConfig.getAddress();\n-        if (address == null || address.length() == 0) {\n+        if (StringUtils.isEmpty(address)) {\n             return null;\n         }\n         Map<String, String> map = new HashMap<String, String>();\n@@ -403,13 +407,13 @@ protected void checkInterfaceAndMethods(Class<?> interfaceClass, List<MethodConf\n             throw new IllegalStateException(\"The interface class \" + interfaceClass + \" is not a interface!\");\n         }\n         // check if methods exist in the remote service interface\n-        if (methods != null && !methods.isEmpty()) {\n+        if (CollectionUtils.isNotEmpty(methods)) {\n             for (MethodConfig methodBean : methods) {\n                 methodBean.setService(interfaceClass.getName());\n                 methodBean.setServiceId(this.getId());\n                 methodBean.refresh();\n                 String methodName = methodBean.getName();\n-                if (methodName == null || methodName.length() == 0) {\n+                if (StringUtils.isEmpty(methodName)) {\n                     throw new IllegalStateException(\"<dubbo:method> name attribute is required! Please check: \" +\n                             \"<dubbo:service interface=\\\"\" + interfaceClass.getName() + \"\\\" ... >\" +\n                             \"<dubbo:method name=\\\"\\\" ... /></<dubbo:reference>\");\n@@ -489,7 +493,7 @@ private void verify(Class<?> interfaceClass, Class<?> localClass) {\n         }\n \n         try {\n-            //Check if the localClass a contructor with parameter who's type is interfaceClass\n+            //Check if the localClass a constructor with parameter who's type is interfaceClass\n             ReflectUtils.findConstructor(localClass, interfaceClass);\n         } catch (NoSuchMethodException e) {\n             throw new IllegalStateException(\"No such constructor \\\"public \" + localClass.getSimpleName() +\n@@ -601,7 +605,7 @@ public void setLocal(Boolean local) {\n         if (local == null) {\n             setLocal((String) null);\n         } else {\n-            setLocal(String.valueOf(local));\n+            setLocal(local.toString());\n         }\n     }\n \n@@ -623,7 +627,7 @@ public void setStub(Boolean stub) {\n         if (stub == null) {\n             setStub((String) null);\n         } else {\n-            setStub(String.valueOf(stub));\n+            setStub(stub.toString());\n         }\n     }\n \n@@ -722,7 +726,7 @@ public void setModule(ModuleConfig module) {\n     }\n \n     public RegistryConfig getRegistry() {\n-        return registries == null || registries.isEmpty() ? null : registries.get(0);\n+        return CollectionUtils.isEmpty(registries) ? null : registries.get(0);\n     }\n \n     public void setRegistry(RegistryConfig registry) {",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractInterfaceConfig.java",
                "sha": "4269924c6094d3f26adc50e0d69bc5629f5959e9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractMethodConfig.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractMethodConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractMethodConfig.java",
                "patch": "@@ -178,7 +178,7 @@ public void setMock(Boolean mock) {\n         if (mock == null) {\r\n             setMock((String) null);\r\n         } else {\r\n-            setMock(String.valueOf(mock));\r\n+            setMock(mock.toString());\r\n         }\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractMethodConfig.java",
                "sha": "fd751d7515c4fe188f410c03c3e5e936af2d35df",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java",
                "patch": "@@ -56,11 +56,11 @@\n     /**\r\n      * Lazy create connection\r\n      */\r\n-    protected Boolean lazy;\r\n+    protected Boolean lazy = false;\r\n \r\n     protected String reconnect;\r\n \r\n-    protected Boolean sticky;\r\n+    protected Boolean sticky = false;\r\n \r\n     /**\r\n      * Whether to support event in stub.\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractReferenceConfig.java",
                "sha": "cf490ed407963fd545a92f458149f0b8d6ccb74e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java",
                "patch": "@@ -18,6 +18,7 @@\n \r\n import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.config.context.ConfigManager;\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n import org.apache.dubbo.config.support.Parameter;\r\n import org.apache.dubbo.rpc.ExporterListener;\r\n \r\n@@ -46,7 +47,7 @@\n     /**\r\n      * whether the service is deprecated\r\n      */\r\n-    protected Boolean deprecated;\r\n+    protected Boolean deprecated = false;\r\n \r\n     /**\r\n      * The time delay register service (milliseconds)\r\n@@ -73,7 +74,7 @@\n      * after the service registered,and it needs to be enabled manually; if you want to disable the service, you also need\r\n      * manual processing\r\n      */\r\n-    protected Boolean dynamic;\r\n+    protected Boolean dynamic = false;\r\n \r\n     /**\r\n      * Whether to use token\r\n@@ -98,7 +99,7 @@\n     /**\r\n      * Whether to register\r\n      */\r\n-    private Boolean register;\r\n+    private Boolean register = true;\r\n \r\n     /**\r\n      * Warm up period\r\n@@ -205,7 +206,7 @@ public void setProtocols(List<? extends ProtocolConfig> protocols) {\n     }\r\n \r\n     public ProtocolConfig getProtocol() {\r\n-        return protocols == null || protocols.isEmpty() ? null : protocols.get(0);\r\n+        return CollectionUtils.isEmpty(protocols) ? null : protocols.get(0);\r\n     }\r\n \r\n     public void setProtocol(ProtocolConfig protocol) {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractServiceConfig.java",
                "sha": "ba7f129355f6ab1192559c5a15ad9bcd991b2403",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ApplicationConfig.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ApplicationConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ApplicationConfig.java",
                "patch": "@@ -19,6 +19,7 @@\n import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.common.compiler.support.AdaptiveCompiler;\r\n import org.apache.dubbo.common.logger.LoggerFactory;\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n import org.apache.dubbo.config.support.Parameter;\r\n \r\n@@ -202,7 +203,7 @@ public void setEnvironment(String environment) {\n     }\r\n \r\n     public RegistryConfig getRegistry() {\r\n-        return registries == null || registries.isEmpty() ? null : registries.get(0);\r\n+        return CollectionUtils.isEmpty(registries) ? null : registries.get(0);\r\n     }\r\n \r\n     public void setRegistry(RegistryConfig registry) {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ApplicationConfig.java",
                "sha": "d73e3e209e15e0953995890193c2c4f15dde431c",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ArgumentConfig.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ArgumentConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ArgumentConfig.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.dubbo.config;\n \n+import org.apache.dubbo.config.annotation.Argument;\n import org.apache.dubbo.config.support.Parameter;\n \n import java.io.Serializable;\n@@ -44,6 +45,15 @@\n      */\n     private Boolean callback;\n \n+    public ArgumentConfig() {\n+    }\n+\n+    public ArgumentConfig(Argument argument) {\n+        this.index = argument.index();\n+        this.type = argument.type();\n+        this.callback = argument.callback();\n+    }\n+\n     @Parameter(excluded = true)\n     public Integer getIndex() {\n         return index;\n@@ -70,4 +80,4 @@ public Boolean isCallback() {\n         return callback;\n     }\n \n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ArgumentConfig.java",
                "sha": "74d906cf2ec2758f8223c4c21b1eb76ff1635f05",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 9,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java",
                "patch": "@@ -27,7 +27,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n \n /**\n- *\n+ * ConfigCenterConfig\n  */\n public class ConfigCenterConfig extends AbstractConfig {\n     private AtomicBoolean inited = new AtomicBoolean(false);\n@@ -95,7 +95,7 @@ public void setAddress(String address) {\n         this.address = address;\n     }\n \n-    @Parameter(key = Constants.CONFIG_CLUSTER_KEY, useKeyAsProperty = false)\n+    @Parameter(key = Constants.CONFIG_CLUSTER_KEY)\n     public String getCluster() {\n         return cluster;\n     }\n@@ -104,7 +104,7 @@ public void setCluster(String cluster) {\n         this.cluster = cluster;\n     }\n \n-    @Parameter(key = Constants.CONFIG_NAMESPACE_KEY, useKeyAsProperty = false)\n+    @Parameter(key = Constants.CONFIG_NAMESPACE_KEY)\n     public String getNamespace() {\n         return namespace;\n     }\n@@ -113,7 +113,7 @@ public void setNamespace(String namespace) {\n         this.namespace = namespace;\n     }\n \n-    @Parameter(key = Constants.CONFIG_GROUP_KEY, useKeyAsProperty = false)\n+    @Parameter(key = Constants.CONFIG_GROUP_KEY)\n     public String getGroup() {\n         return group;\n     }\n@@ -122,7 +122,7 @@ public void setGroup(String group) {\n         this.group = group;\n     }\n \n-    @Parameter(key = Constants.CONFIG_CHECK_KEY, useKeyAsProperty = false)\n+    @Parameter(key = Constants.CONFIG_CHECK_KEY)\n     public Boolean isCheck() {\n         return check;\n     }\n@@ -131,7 +131,7 @@ public void setCheck(Boolean check) {\n         this.check = check;\n     }\n \n-    @Parameter(key = Constants.CONFIG_ENABLE_KEY, useKeyAsProperty = false)\n+    @Parameter(key = Constants.CONFIG_ENABLE_KEY)\n     public Boolean isHighestPriority() {\n         return highestPriority;\n     }\n@@ -156,7 +156,7 @@ public void setPassword(String password) {\n         this.password = password;\n     }\n \n-    @Parameter(key = Constants.CONFIG_TIMEOUT_KEY, useKeyAsProperty = false)\n+    @Parameter(key = Constants.CONFIG_TIMEOUT_KEY)\n     public Long getTimeout() {\n         return timeout;\n     }\n@@ -165,7 +165,7 @@ public void setTimeout(Long timeout) {\n         this.timeout = timeout;\n     }\n \n-    @Parameter(key = Constants.CONFIG_CONFIGFILE_KEY, useKeyAsProperty = false)\n+    @Parameter(key = Constants.CONFIG_CONFIGFILE_KEY)\n     public String getConfigFile() {\n         return configFile;\n     }\n@@ -183,7 +183,7 @@ public void setAppConfigFile(String appConfigFile) {\n         this.appConfigFile = appConfigFile;\n     }\n \n-    @Parameter(key = Constants.CONFIG_APPNAME_KEY, useKeyAsProperty = false)\n+    @Parameter(key = Constants.CONFIG_APPNAME_KEY)\n     public String getAppName() {\n         return appName;\n     }",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConfigCenterConfig.java",
                "sha": "4b88702018e65adb90d10eb6c0c851d2ad929b6b",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConsumerConfig.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConsumerConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConsumerConfig.java",
                "patch": "@@ -19,7 +19,7 @@\n import org.apache.dubbo.common.utils.StringUtils;\r\n \r\n /**\r\n- * The service consumer default confuguration\r\n+ * The service consumer default configuration\r\n  *\r\n  * @export\r\n  */\r\n@@ -57,6 +57,12 @@\n      */\r\n     private Integer queues;\r\n \r\n+    /**\r\n+     * By default, a TCP long-connection communication is shared between the consumer process and the provider process.\r\n+     * This property can be set to share multiple TCP long-connection communications. Note that only the dubbo protocol takes effect.\r\n+     */\r\n+    private Integer shareconnections;\r\n+\r\n     @Override\r\n     public void setTimeout(Integer timeout) {\r\n         super.setTimeout(timeout);\r\n@@ -118,4 +124,12 @@ public Integer getQueues() {\n     public void setQueues(Integer queues) {\r\n         this.queues = queues;\r\n     }\r\n+\r\n+    public Integer getShareconnections() {\r\n+        return shareconnections;\r\n+    }\r\n+\r\n+    public void setShareconnections(Integer shareconnections) {\r\n+        this.shareconnections = shareconnections;\r\n+    }\r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ConsumerConfig.java",
                "sha": "afbd4c485af7ea054fe0a1ceeb318d8ff77507bd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java",
                "patch": "@@ -25,7 +25,7 @@\n import static org.apache.dubbo.common.Constants.PROPERTIES_CHAR_SEPERATOR;\n \n /**\n- * RegistryConfig\n+ * MetadataReportConfig\n  *\n  * @export\n  */",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MetadataReportConfig.java",
                "sha": "e7add0a0e81e907adcc9fc850c6b7dae911a428c",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MethodConfig.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MethodConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MethodConfig.java",
                "patch": "@@ -18,8 +18,11 @@\n \r\n import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n+import org.apache.dubbo.config.annotation.Method;\r\n import org.apache.dubbo.config.support.Parameter;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n import java.util.List;\r\n \r\n /**\r\n@@ -117,6 +120,46 @@ public String getName() {\n         return name;\r\n     }\r\n \r\n+    public MethodConfig() {\r\n+    }\r\n+\r\n+    public MethodConfig(Method method) {\r\n+        appendAnnotation(Method.class, method);\r\n+\r\n+        this.setReturn(method.isReturn());\r\n+\r\n+        if(!\"\".equals(method.oninvoke())){\r\n+            this.setOninvoke(method.oninvoke());\r\n+        }\r\n+        if(!\"\".equals(method.onreturn())){\r\n+            this.setOnreturn(method.onreturn());\r\n+        }\r\n+        if(!\"\".equals(method.onthrow())){\r\n+            this.setOnthrow(method.onthrow());\r\n+        }\r\n+\r\n+        if (method.arguments() != null && method.arguments().length != 0) {\r\n+            List<ArgumentConfig> argumentConfigs = new ArrayList<ArgumentConfig>(method.arguments().length);\r\n+            this.setArguments(argumentConfigs);\r\n+            for (int i = 0; i < method.arguments().length; i++) {\r\n+                ArgumentConfig argumentConfig = new ArgumentConfig(method.arguments()[i]);\r\n+                argumentConfigs.add(argumentConfig);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public static List<MethodConfig> constructMethodConfig(Method[] methods) {\r\n+        if (methods != null && methods.length != 0) {\r\n+            List<MethodConfig> methodConfigs = new ArrayList<MethodConfig>(methods.length);\r\n+            for (int i = 0; i < methods.length; i++) {\r\n+                MethodConfig methodConfig = new MethodConfig(methods[i]);\r\n+                methodConfigs.add(methodConfig);\r\n+            }\r\n+            return methodConfigs;\r\n+        }\r\n+        return Collections.emptyList();\r\n+    }\r\n+\r\n     public void setName(String name) {\r\n         checkMethodName(\"name\", name);\r\n         this.name = name;\r\n@@ -279,4 +322,4 @@ public String getPrefix() {\n                 + (StringUtils.isEmpty(serviceId) ? \"\" : (\".\" + serviceId))\r\n                 + \".\" + getName();\r\n     }\r\n-}\n\\ No newline at end of file\n+}\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/MethodConfig.java",
                "sha": "c9478d45caef9eb2812e00a829670517beff5654",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ModuleConfig.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ModuleConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ModuleConfig.java",
                "patch": "@@ -17,6 +17,8 @@\n package org.apache.dubbo.config;\r\n \r\n import org.apache.dubbo.common.Constants;\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n+import org.apache.dubbo.common.utils.StringUtils;\r\n import org.apache.dubbo.config.support.Parameter;\r\n \r\n import java.util.ArrayList;\r\n@@ -81,7 +83,7 @@ public String getName() {\n     public void setName(String name) {\r\n         checkName(Constants.NAME, name);\r\n         this.name = name;\r\n-        if (id == null || id.length() == 0) {\r\n+        if (StringUtils.isEmpty(id)) {\r\n             id = name;\r\n         }\r\n     }\r\n@@ -114,7 +116,7 @@ public void setOrganization(String organization) {\n     }\r\n \r\n     public RegistryConfig getRegistry() {\r\n-        return registries == null || registries.isEmpty() ? null : registries.get(0);\r\n+        return CollectionUtils.isEmpty(registries) ? null : registries.get(0);\r\n     }\r\n \r\n     public void setRegistry(RegistryConfig registry) {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ModuleConfig.java",
                "sha": "b47c35c479fe7c717710cae7b958727927cb9b26",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProtocolConfig.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProtocolConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 4,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProtocolConfig.java",
                "patch": "@@ -317,7 +317,7 @@ public String getCodec() {\n     }\r\n \r\n     public void setCodec(String codec) {\r\n-        if (Constants.DOBBO_PROTOCOL.equals(name)) {\r\n+        if (Constants.DUBBO_PROTOCOL.equals(name)) {\r\n             checkMultiExtension(Codec.class, Constants.CODEC_KEY, codec);\r\n         }\r\n         this.codec = codec;\r\n@@ -328,7 +328,7 @@ public String getSerialization() {\n     }\r\n \r\n     public void setSerialization(String serialization) {\r\n-        if (Constants.DOBBO_PROTOCOL.equals(name)) {\r\n+        if (Constants.DUBBO_PROTOCOL.equals(name)) {\r\n             checkMultiExtension(Serialization.class, Constants.SERIALIZATION_KEY, serialization);\r\n         }\r\n         this.serialization = serialization;\r\n@@ -371,7 +371,7 @@ public String getServer() {\n     }\r\n \r\n     public void setServer(String server) {\r\n-        if (Constants.DOBBO_PROTOCOL.equals(name)) {\r\n+        if (Constants.DUBBO_PROTOCOL.equals(name)) {\r\n             checkMultiExtension(Transporter.class, Constants.SERVER_KEY, server);\r\n         }\r\n         this.server = server;\r\n@@ -382,7 +382,7 @@ public String getClient() {\n     }\r\n \r\n     public void setClient(String client) {\r\n-        if (Constants.DOBBO_PROTOCOL.equals(name)) {\r\n+        if (Constants.DUBBO_PROTOCOL.equals(name)) {\r\n             checkMultiExtension(Transporter.class, Constants.CLIENT_KEY, client);\r\n         }\r\n         this.client = client;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProtocolConfig.java",
                "sha": "008f7bf03fbf9ba2f4168e6eb5ae5f8a224706d8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProviderConfig.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProviderConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProviderConfig.java",
                "patch": "@@ -405,8 +405,8 @@ public String getDispatcher() {\n     }\r\n \r\n     public void setDispatcher(String dispatcher) {\r\n-        checkExtension(Dispatcher.class, Constants.DISPATCHER_KEY, exchanger);\r\n-        checkExtension(Dispatcher.class, \"dispather\", exchanger);\r\n+        checkExtension(Dispatcher.class, Constants.DISPATCHER_KEY, dispatcher);\r\n+        checkExtension(Dispatcher.class, \"dispather\", dispatcher);\r\n         this.dispatcher = dispatcher;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ProviderConfig.java",
                "sha": "e6540c083e81940cddb41de67b08d6f767c27b8b",
                "status": "modified"
            },
            {
                "additions": 76,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "changes": 143,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 67,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "patch": "@@ -21,6 +21,8 @@\n import org.apache.dubbo.common.Version;\r\n import org.apache.dubbo.common.bytecode.Wrapper;\r\n import org.apache.dubbo.common.extension.ExtensionLoader;\r\n+import org.apache.dubbo.common.utils.ClassHelper;\r\n+import org.apache.dubbo.common.utils.CollectionUtils;\r\n import org.apache.dubbo.common.utils.ConfigUtils;\r\n import org.apache.dubbo.common.utils.NetUtils;\r\n import org.apache.dubbo.common.utils.StringUtils;\r\n@@ -53,7 +55,6 @@\n import java.util.Map;\r\n import java.util.Properties;\r\n \r\n-import static org.apache.dubbo.common.utils.NetUtils.isInvalidLocalHost;\r\n \r\n /**\r\n  * ReferenceConfig\r\n@@ -74,7 +75,7 @@\n      *\r\n      * <li>when the url is dubbo://224.5.6.7:1234/org.apache.dubbo.config.api.DemoService?application=dubbo-sample, then\r\n      * the protocol is <b>DubboProtocol</b></li>\r\n-     * <p>\r\n+     *\r\n      * Actually\uff0cwhen the {@link ExtensionLoader} init the {@link Protocol} instants,it will automatically wraps two\r\n      * layers, and eventually will get a <b>ProtocolFilterWrapper</b> or <b>ProtocolListenerWrapper</b>\r\n      */\r\n@@ -106,7 +107,10 @@\n      * The interface class of the reference service\r\n      */\r\n     private Class<?> interfaceClass;\r\n-    // client type\r\n+\r\n+    /**\r\n+     * client type\r\n+     */\r\n     private String client;\r\n \r\n     /**\r\n@@ -174,6 +178,7 @@ public ReferenceConfig() {\n \r\n     public ReferenceConfig(Reference reference) {\r\n         appendAnnotation(Reference.class, reference);\r\n+        setMethods(MethodConfig.constructMethodConfig(reference.methods()));\r\n     }\r\n \r\n     public URL toUrl() {\r\n@@ -189,7 +194,7 @@ public URL toUrl() {\n      * Check each config modules are created properly and override their properties if necessary.\r\n      */\r\n     public void checkAndUpdateSubConfigs() {\r\n-        if (interfaceName == null || interfaceName.length() == 0) {\r\n+        if (StringUtils.isEmpty(interfaceName)) {\r\n             throw new IllegalStateException(\"<dubbo:reference interface=\\\"\\\" /> interface not allow null!\");\r\n         }\r\n         completeCompoundConfigs();\r\n@@ -227,7 +232,7 @@ public synchronized T get() {\n         checkAndUpdateSubConfigs();\r\n \r\n         if (destroyed) {\r\n-            throw new IllegalStateException(\"Already destroyed!\");\r\n+            throw new IllegalStateException(\"The invoker of ReferenceConfig(\" + url + \") has already destroyed!\");\r\n         }\r\n         if (ref == null) {\r\n             init();\r\n@@ -246,7 +251,7 @@ public synchronized void destroy() {\n         try {\r\n             invoker.destroy();\r\n         } catch (Throwable t) {\r\n-            logger.warn(\"Unexpected err when destroy invoker of ReferenceConfig(\" + url + \").\", t);\r\n+            logger.warn(\"Unexpected error occured when destroy invoker of ReferenceConfig(\" + url + \").\", t);\r\n         }\r\n         invoker = null;\r\n         ref = null;\r\n@@ -261,7 +266,7 @@ private void init() {\n         checkMock(interfaceClass);\r\n \r\n         ConsumerModel consumerModel = new ConsumerModel(interfaceName, group, version, interfaceClass);\r\n-        ApplicationModel.initConsumerModel(getUniqueServiceName(), consumerModel);\r\n+        ApplicationModel.initConsumerModel(URL.buildKey(interfaceName, group, version), consumerModel);\r\n \r\n         Map<String, String> map = new HashMap<String, String>();\r\n \r\n@@ -275,7 +280,7 @@ private void init() {\n \r\n             String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();\r\n             if (methods.length == 0) {\r\n-                logger.warn(\"NO method found in service interface \" + interfaceClass.getName());\r\n+                logger.warn(\"No method found in service interface \" + interfaceClass.getName());\r\n                 map.put(\"methods\", Constants.ANY_VALUE);\r\n             } else {\r\n                 map.put(\"methods\", StringUtils.join(new HashSet<String>(Arrays.asList(methods)), \",\"));\r\n@@ -287,7 +292,7 @@ private void init() {\n         appendParameters(map, consumer, Constants.DEFAULT_KEY);\r\n         appendParameters(map, this);\r\n         Map<String, Object> attributes = null;\r\n-        if (methods != null && !methods.isEmpty()) {\r\n+        if (CollectionUtils.isNotEmpty(methods)) {\r\n             attributes = new HashMap<String, Object>();\r\n             for (MethodConfig methodConfig : methods) {\r\n                 appendParameters(map, methodConfig, methodConfig.getName());\r\n@@ -306,10 +311,8 @@ private void init() {\n         }\r\n \r\n         String hostToRegistry = ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY);\r\n-        if (hostToRegistry == null || hostToRegistry.length() == 0) {\r\n+        if (StringUtils.isEmpty(hostToRegistry)) {\r\n             hostToRegistry = NetUtils.getLocalHost();\r\n-        } else if (isInvalidLocalHost(hostToRegistry)) {\r\n-            throw new IllegalArgumentException(\"Specified invalid registry ip from property:\" + Constants.DUBBO_IP_TO_REGISTRY + \", value:\" + hostToRegistry);\r\n         }\r\n         map.put(Constants.REGISTER_IP_KEY, hostToRegistry);\r\n \r\n@@ -320,21 +323,8 @@ private void init() {\n \r\n     @SuppressWarnings({\"unchecked\", \"rawtypes\", \"deprecation\"})\r\n     private T createProxy(Map<String, String> map) {\r\n-        URL tmpUrl = new URL(\"temp\", \"localhost\", 0, map);\r\n-        final boolean isJvmRefer;\r\n-        if (isInjvm() == null) {\r\n-            if (url != null && url.length() > 0) { // if a url is specified, don't do local reference\r\n-                isJvmRefer = false;\r\n-            } else {\r\n-                // by default, reference local service if there is\r\n-                isJvmRefer = InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl);\r\n-            }\r\n-        } else {\r\n-            isJvmRefer = isInjvm();\r\n-        }\r\n-\r\n-        if (isJvmRefer) {\r\n-            URL url = new URL(Constants.LOCAL_PROTOCOL, NetUtils.LOCALHOST, 0, interfaceClass.getName()).addParameters(map);\r\n+        if (shouldJvmRefer(map)) {\r\n+            URL url = new URL(Constants.LOCAL_PROTOCOL, Constants.LOCALHOST_VALUE, 0, interfaceClass.getName()).addParameters(map);\r\n             invoker = refprotocol.refer(interfaceClass, url);\r\n             if (logger.isInfoEnabled()) {\r\n                 logger.info(\"Using injvm service \" + interfaceClass.getName());\r\n@@ -345,7 +335,7 @@ private T createProxy(Map<String, String> map) {\n                 if (us != null && us.length > 0) {\r\n                     for (String u : us) {\r\n                         URL url = URL.valueOf(u);\r\n-                        if (url.getPath() == null || url.getPath().length() == 0) {\r\n+                        if (StringUtils.isEmpty(url.getPath())) {\r\n                             url = url.setPath(interfaceName);\r\n                         }\r\n                         if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {\r\n@@ -358,7 +348,7 @@ private T createProxy(Map<String, String> map) {\n             } else { // assemble URL from register center's configuration\r\n                 checkRegistry();\r\n                 List<URL> us = loadRegistries(false);\r\n-                if (us != null && !us.isEmpty()) {\r\n+                if (CollectionUtils.isNotEmpty(us)) {\r\n                     for (URL u : us) {\r\n                         URL monitorUrl = loadMonitor(u);\r\n                         if (monitorUrl != null) {\r\n@@ -394,14 +384,7 @@ private T createProxy(Map<String, String> map) {\n             }\r\n         }\r\n \r\n-        Boolean c = check;\r\n-        if (c == null && consumer != null) {\r\n-            c = consumer.isCheck();\r\n-        }\r\n-        if (c == null) {\r\n-            c = true; // default true\r\n-        }\r\n-        if (c && !invoker.isAvailable()) {\r\n+        if (shouldCheck() && !invoker.isAvailable()) {\r\n             // make it possible for consumer to retry later if provider is temporarily unavailable\r\n             initialized = false;\r\n             throw new IllegalStateException(\"Failed to check the status of the service \" + interfaceName + \". No provider available for the service \" + (group == null ? \"\" : group + \"/\") + interfaceName + (version == null ? \"\" : \":\" + version) + \" from the url \" + invoker.getUrl() + \" to the consumer \" + NetUtils.getLocalHost() + \" use dubbo version \" + Version.getVersion());\r\n@@ -422,6 +405,55 @@ private T createProxy(Map<String, String> map) {\n         return (T) proxyFactory.getProxy(invoker);\r\n     }\r\n \r\n+    /**\r\n+     * Figure out should refer the service in the same JVM from configurations. The default behavior is true\r\n+     * 1. if injvm is specified, then use it\r\n+     * 2. then if a url is specified, then assume it's a remote call\r\n+     * 3. otherwise, check scope parameter\r\n+     * 4. if scope is not specified but the target service is provided in the same JVM, then prefer to make the local\r\n+     * call, which is the default behavior\r\n+     */\r\n+    protected boolean shouldJvmRefer(Map<String, String> map) {\r\n+        URL tmpUrl = new URL(\"temp\", \"localhost\", 0, map);\r\n+        boolean isJvmRefer;\r\n+        if (isInjvm() == null) {\r\n+            // if a url is specified, don't do local reference\r\n+            if (url != null && url.length() > 0) {\r\n+                isJvmRefer = false;\r\n+            } else {\r\n+                // by default, reference local service if there is\r\n+                isJvmRefer = InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl);\r\n+            }\r\n+        } else {\r\n+            isJvmRefer = isInjvm();\r\n+        }\r\n+        return isJvmRefer;\r\n+    }\r\n+\r\n+    protected boolean shouldCheck() {\r\n+        Boolean shouldCheck = isCheck();\r\n+        if (shouldCheck == null && getConsumer()!= null) {\r\n+            shouldCheck = getConsumer().isCheck();\r\n+        }\r\n+        if (shouldCheck == null) {\r\n+            // default true\r\n+            shouldCheck = true;\r\n+        }\r\n+        return shouldCheck;\r\n+    }\r\n+\r\n+    protected boolean shouldInit() {\r\n+        Boolean shouldInit = isInit();\r\n+        if (shouldInit == null && getConsumer() != null) {\r\n+            shouldInit = getConsumer().isInit();\r\n+        }\r\n+        if (shouldInit == null) {\r\n+            // default is false\r\n+            return false;\r\n+        }\r\n+        return shouldInit;\r\n+    }\r\n+\r\n     private void checkDefault() {\r\n         createConsumerIfAbsent();\r\n     }\r\n@@ -484,8 +516,7 @@ private void completeCompoundConfigs() {\n         }\r\n         try {\r\n             if (interfaceName != null && interfaceName.length() > 0) {\r\n-                this.interfaceClass = Class.forName(interfaceName, true, Thread.currentThread()\r\n-                        .getContextClassLoader());\r\n+                this.interfaceClass = Class.forName(interfaceName, true, ClassHelper.getClassLoader());\r\n             }\r\n         } catch (ClassNotFoundException t) {\r\n             throw new IllegalStateException(t.getMessage(), t);\r\n@@ -509,7 +540,7 @@ public String getInterface() {\n \r\n     public void setInterface(String interfaceName) {\r\n         this.interfaceName = interfaceName;\r\n-        if (id == null || id.length() == 0) {\r\n+        if (StringUtils.isEmpty(id)) {\r\n             id = interfaceName;\r\n         }\r\n     }\r\n@@ -571,19 +602,6 @@ public void setProtocol(String protocol) {\n         return invoker;\r\n     }\r\n \r\n-    @Parameter(excluded = true)\r\n-    public String getUniqueServiceName() {\r\n-        StringBuilder buf = new StringBuilder();\r\n-        if (group != null && group.length() > 0) {\r\n-            buf.append(group).append(\"/\");\r\n-        }\r\n-        buf.append(interfaceName);\r\n-        if (version != null && version.length() > 0) {\r\n-            buf.append(\":\").append(version);\r\n-        }\r\n-        return buf.toString();\r\n-    }\r\n-\r\n     @Override\r\n     @Parameter(excluded = true)\r\n     public String getPrefix() {\r\n@@ -593,31 +611,22 @@ public String getPrefix() {\n     private void resolveFile() {\r\n         String resolve = System.getProperty(interfaceName);\r\n         String resolveFile = null;\r\n-        if (resolve == null || resolve.length() == 0) {\r\n+        if (StringUtils.isEmpty(resolve)) {\r\n             resolveFile = System.getProperty(\"dubbo.resolve.file\");\r\n-            if (resolveFile == null || resolveFile.length() == 0) {\r\n+            if (StringUtils.isEmpty(resolveFile)) {\r\n                 File userResolveFile = new File(new File(System.getProperty(\"user.home\")), \"dubbo-resolve.properties\");\r\n                 if (userResolveFile.exists()) {\r\n                     resolveFile = userResolveFile.getAbsolutePath();\r\n                 }\r\n             }\r\n             if (resolveFile != null && resolveFile.length() > 0) {\r\n                 Properties properties = new Properties();\r\n-                FileInputStream fis = null;\r\n-                try {\r\n-                    fis = new FileInputStream(new File(resolveFile));\r\n+                try (FileInputStream fis = new FileInputStream(new File(resolveFile))) {\r\n                     properties.load(fis);\r\n                 } catch (IOException e) {\r\n-                    throw new IllegalStateException(\"Unload \" + resolveFile + \", cause: \" + e.getMessage(), e);\r\n-                } finally {\r\n-                    try {\r\n-                        if (null != fis) {\r\n-                            fis.close();\r\n-                        }\r\n-                    } catch (IOException e) {\r\n-                        logger.warn(e.getMessage(), e);\r\n-                    }\r\n+                    throw new IllegalStateException(\"Failed to load \" + resolveFile + \", cause: \" + e.getMessage(), e);\r\n                 }\r\n+\r\n                 resolve = properties.getProperty(interfaceName);\r\n             }\r\n         }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ReferenceConfig.java",
                "sha": "d5cc678d3f6969b0d74a08dfb2a51f6723d30151",
                "status": "modified"
            },
            {
                "additions": 88,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "changes": 189,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 101,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "patch": "@@ -18,6 +18,7 @@\n \r\n import org.apache.dubbo.common.Constants;\r\n import org.apache.dubbo.common.URL;\r\n+import org.apache.dubbo.common.URLBuilder;\r\n import org.apache.dubbo.common.Version;\r\n import org.apache.dubbo.common.bytecode.Wrapper;\r\n import org.apache.dubbo.common.config.Environment;\r\n@@ -43,26 +44,24 @@\n import org.apache.dubbo.rpc.support.ProtocolUtils;\r\n \r\n import java.lang.reflect.Method;\r\n-import java.net.InetAddress;\r\n import java.net.InetSocketAddress;\r\n import java.net.Socket;\r\n import java.net.SocketAddress;\r\n-import java.net.UnknownHostException;\r\n import java.util.ArrayList;\r\n import java.util.Arrays;\r\n import java.util.HashMap;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Map;\r\n+import java.util.Optional;\r\n import java.util.UUID;\r\n import java.util.concurrent.Executors;\r\n import java.util.concurrent.ScheduledExecutorService;\r\n import java.util.concurrent.TimeUnit;\r\n \r\n-import static org.apache.dubbo.common.utils.NetUtils.LOCALHOST;\r\n+import static org.apache.dubbo.common.Constants.LOCALHOST_VALUE;\r\n import static org.apache.dubbo.common.utils.NetUtils.getAvailablePort;\r\n import static org.apache.dubbo.common.utils.NetUtils.getLocalHost;\r\n-import static org.apache.dubbo.common.utils.NetUtils.isInvalidLocalHost;\r\n import static org.apache.dubbo.common.utils.NetUtils.isInvalidPort;\r\n \r\n /**\r\n@@ -84,7 +83,7 @@\n      *\r\n      * <li>when the url is dubbo://224.5.6.7:1234/org.apache.dubbo.config.api.DemoService?application=dubbo-sample, then\r\n      * the protocol is <b>DubboProtocol</b></li>\r\n-     * <p>\r\n+     *\r\n      * Actually\uff0cwhen the {@link ExtensionLoader} init the {@link Protocol} instants,it will automatically wraps two\r\n      * layers, and eventually will get a <b>ProtocolFilterWrapper</b> or <b>ProtocolListenerWrapper</b>\r\n      */\r\n@@ -171,11 +170,12 @@ public ServiceConfig() {\n \r\n     public ServiceConfig(Service service) {\r\n         appendAnnotation(Service.class, service);\r\n+        setMethods(MethodConfig.constructMethodConfig(service.methods()));\r\n     }\r\n \r\n     @Deprecated\r\n     private static List<ProtocolConfig> convertProviderToProtocol(List<ProviderConfig> providers) {\r\n-        if (providers == null || providers.isEmpty()) {\r\n+        if (CollectionUtils.isEmpty(providers)) {\r\n             return null;\r\n         }\r\n         List<ProtocolConfig> protocols = new ArrayList<ProtocolConfig>(providers.size());\r\n@@ -187,7 +187,7 @@ public ServiceConfig(Service service) {\n \r\n     @Deprecated\r\n     private static List<ProviderConfig> convertProtocolToProvider(List<ProtocolConfig> protocols) {\r\n-        if (protocols == null || protocols.isEmpty()) {\r\n+        if (CollectionUtils.isEmpty(protocols)) {\r\n             return null;\r\n         }\r\n         List<ProviderConfig> providers = new ArrayList<ProviderConfig>(protocols.size());\r\n@@ -272,7 +272,7 @@ public void checkAndUpdateSubConfigs() {\n         this.refresh();\r\n         checkMetadataReport();\r\n \r\n-        if (interfaceName == null || interfaceName.length() == 0) {\r\n+        if (StringUtils.isEmpty(interfaceName)) {\r\n             throw new IllegalStateException(\"<dubbo:service interface=\\\"\\\" /> interface not allow null!\");\r\n         }\r\n \r\n@@ -334,39 +334,53 @@ private void appendParameters() {\n     public synchronized void export() {\r\n         checkAndUpdateSubConfigs();\r\n \r\n-        if (provider != null) {\r\n-            if (export == null) {\r\n-                export = provider.getExport();\r\n-            }\r\n-            if (delay == null) {\r\n-                delay = provider.getDelay();\r\n-            }\r\n-        }\r\n-        if (export != null && !export) {\r\n+        if (!shouldExport()) {\r\n             return;\r\n         }\r\n \r\n-        if (delay != null && delay > 0) {\r\n+        if (shouldDelay()) {\r\n             delayExportExecutor.schedule(this::doExport, delay, TimeUnit.MILLISECONDS);\r\n         } else {\r\n             doExport();\r\n         }\r\n     }\r\n \r\n+    private boolean shouldExport() {\r\n+        Boolean shouldExport = getExport();\r\n+        if (shouldExport == null && provider != null) {\r\n+            shouldExport = provider.getExport();\r\n+        }\r\n+\r\n+        // default value is true\r\n+        if (shouldExport == null) {\r\n+            return true;\r\n+        }\r\n+\r\n+        return shouldExport;\r\n+    }\r\n+\r\n+    private boolean shouldDelay() {\r\n+        Integer delay = getDelay();\r\n+        if (delay == null && provider != null) {\r\n+            delay = provider.getDelay();\r\n+        }\r\n+        return delay != null && delay > 0;\r\n+    }\r\n+\r\n     protected synchronized void doExport() {\r\n         if (unexported) {\r\n-            throw new IllegalStateException(\"Already unexported!\");\r\n+            throw new IllegalStateException(\"The service \" + interfaceClass.getName() + \" has already unexported!\");\r\n         }\r\n         if (exported) {\r\n             return;\r\n         }\r\n         exported = true;\r\n \r\n-        if (path == null || path.length() == 0) {\r\n+        if (StringUtils.isEmpty(path)) {\r\n             path = interfaceName;\r\n         }\r\n         ProviderModel providerModel = new ProviderModel(interfaceName, group, version, ref, interfaceClass);\r\n-        ApplicationModel.initProviderModel(getUniqueServiceName(), providerModel);\r\n+        ApplicationModel.initProviderModel(URL.buildKey(interfaceName, group, version), providerModel);\r\n         doExportUrls();\r\n     }\r\n \r\n@@ -394,7 +408,7 @@ public synchronized void unexport() {\n                 try {\r\n                     exporter.unexport();\r\n                 } catch (Throwable t) {\r\n-                    logger.warn(\"unexpected err when unexport\" + exporter, t);\r\n+                    logger.warn(\"Unexpected error occured when unexport \" + exporter, t);\r\n                 }\r\n             }\r\n             exporters.clear();\r\n@@ -412,7 +426,7 @@ private void doExportUrls() {\n \r\n     private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs) {\r\n         String name = protocolConfig.getName();\r\n-        if (name == null || name.length() == 0) {\r\n+        if (StringUtils.isEmpty(name)) {\r\n             name = Constants.DUBBO;\r\n         }\r\n \r\n@@ -424,7 +438,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r\n         appendParameters(map, provider, Constants.DEFAULT_KEY);\r\n         appendParameters(map, protocolConfig);\r\n         appendParameters(map, this);\r\n-        if (methods != null && !methods.isEmpty()) {\r\n+        if (CollectionUtils.isNotEmpty(methods)) {\r\n             for (MethodConfig method : methods) {\r\n                 appendParameters(map, method, method.getName());\r\n                 String retryKey = method.getName() + \".retry\";\r\n@@ -435,7 +449,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r\n                     }\r\n                 }\r\n                 List<ArgumentConfig> arguments = method.getArguments();\r\n-                if (arguments != null && !arguments.isEmpty()) {\r\n+                if (CollectionUtils.isNotEmpty(arguments)) {\r\n                     for (ArgumentConfig argument : arguments) {\r\n                         // convert argument type\r\n                         if (argument.getType() != null && argument.getType().length() > 0) {\r\n@@ -452,7 +466,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r\n                                             if (argtypes[argument.getIndex()].getName().equals(argument.getType())) {\r\n                                                 appendParameters(map, argument, method.getName() + \".\" + argument.getIndex());\r\n                                             } else {\r\n-                                                throw new IllegalArgumentException(\"argument config error : the index attribute and type attribute not match :index :\" + argument.getIndex() + \", type:\" + argument.getType());\r\n+                                                throw new IllegalArgumentException(\"Argument config error : the index attribute and type attribute not match :index :\" + argument.getIndex() + \", type:\" + argument.getType());\r\n                                             }\r\n                                         } else {\r\n                                             // multiple callbacks in the method\r\n@@ -461,7 +475,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r\n                                                 if (argclazz.getName().equals(argument.getType())) {\r\n                                                     appendParameters(map, argument, method.getName() + \".\" + j);\r\n                                                     if (argument.getIndex() != -1 && argument.getIndex() != j) {\r\n-                                                        throw new IllegalArgumentException(\"argument config error : the index attribute and type attribute not match :index :\" + argument.getIndex() + \", type:\" + argument.getType());\r\n+                                                        throw new IllegalArgumentException(\"Argument config error : the index attribute and type attribute not match :index :\" + argument.getIndex() + \", type:\" + argument.getType());\r\n                                                     }\r\n                                                 }\r\n                                             }\r\n@@ -472,7 +486,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r\n                         } else if (argument.getIndex() != -1) {\r\n                             appendParameters(map, argument, method.getName() + \".\" + argument.getIndex());\r\n                         } else {\r\n-                            throw new IllegalArgumentException(\"argument config must set index or type attribute.eg: <dubbo:argument index='0' .../> or <dubbo:argument type=xxx .../>\");\r\n+                            throw new IllegalArgumentException(\"Argument config must set index or type attribute.eg: <dubbo:argument index='0' .../> or <dubbo:argument type=xxx .../>\");\r\n                         }\r\n \r\n                     }\r\n@@ -491,7 +505,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r\n \r\n             String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();\r\n             if (methods.length == 0) {\r\n-                logger.warn(\"NO method found in service interface \" + interfaceClass.getName());\r\n+                logger.warn(\"No method found in service interface \" + interfaceClass.getName());\r\n                 map.put(Constants.METHODS_KEY, Constants.ANY_VALUE);\r\n             } else {\r\n                 map.put(Constants.METHODS_KEY, StringUtils.join(new HashSet<String>(Arrays.asList(methods)), \",\"));\r\n@@ -504,19 +518,10 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r\n                 map.put(Constants.TOKEN_KEY, token);\r\n             }\r\n         }\r\n-        if (Constants.LOCAL_PROTOCOL.equals(protocolConfig.getName())) {\r\n-            protocolConfig.setRegister(false);\r\n-            map.put(\"notify\", \"false\");\r\n-        }\r\n         // export service\r\n-        String contextPath = protocolConfig.getContextpath();\r\n-        if ((contextPath == null || contextPath.length() == 0) && provider != null) {\r\n-            contextPath = provider.getContextpath();\r\n-        }\r\n-\r\n         String host = this.findConfigedHosts(protocolConfig, registryURLs, map);\r\n         Integer port = this.findConfigedPorts(protocolConfig, name, map);\r\n-        URL url = new URL(name, host, port, (contextPath == null || contextPath.length() == 0 ? \"\" : contextPath + \"/\") + path, map);\r\n+        URL url = new URL(name, host, port, getContextPath(protocolConfig).map(p -> p + \"/\" + path).orElse(path), map);\r\n \r\n         if (ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)\r\n                 .hasExtension(url.getProtocol())) {\r\n@@ -537,7 +542,7 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r\n                 if (logger.isInfoEnabled()) {\r\n                     logger.info(\"Export dubbo service \" + interfaceClass.getName() + \" to url \" + url);\r\n                 }\r\n-                if (registryURLs != null && !registryURLs.isEmpty()) {\r\n+                if (CollectionUtils.isNotEmpty(registryURLs)) {\r\n                     for (URL registryURL : registryURLs) {\r\n                         url = url.addParameterIfAbsent(Constants.DYNAMIC_KEY, registryURL.getParameter(Constants.DYNAMIC_KEY));\r\n                         URL monitorUrl = loadMonitor(registryURL);\r\n@@ -583,17 +588,26 @@ private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> r\n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\r\n     private void exportLocal(URL url) {\r\n         if (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {\r\n-            URL local = URL.valueOf(url.toFullString())\r\n+            URL local = URLBuilder.from(url)\r\n                     .setProtocol(Constants.LOCAL_PROTOCOL)\r\n-                    .setHost(LOCALHOST)\r\n-                    .setPort(0);\r\n+                    .setHost(LOCALHOST_VALUE)\r\n+                    .setPort(0)\r\n+                    .build();\r\n             Exporter<?> exporter = protocol.export(\r\n                     proxyFactory.getInvoker(ref, (Class) interfaceClass, local));\r\n             exporters.add(exporter);\r\n             logger.info(\"Export dubbo service \" + interfaceClass.getName() + \" to local registry\");\r\n         }\r\n     }\r\n \r\n+    private Optional<String> getContextPath(ProtocolConfig protocolConfig) {\r\n+        String contextPath = protocolConfig.getContextpath();\r\n+        if (StringUtils.isEmpty(contextPath) && provider != null) {\r\n+            contextPath = provider.getContextpath();\r\n+        }\r\n+        return Optional.ofNullable(contextPath);\r\n+    }\r\n+\r\n     protected Class getServiceClass(T ref) {\r\n         return ref.getClass();\r\n     }\r\n@@ -612,51 +626,20 @@ private String findConfigedHosts(ProtocolConfig protocolConfig, List<URL> regist\n         boolean anyhost = false;\r\n \r\n         String hostToBind = getValueFromConfig(protocolConfig, Constants.DUBBO_IP_TO_BIND);\r\n-        if (hostToBind != null && hostToBind.length() > 0 && isInvalidLocalHost(hostToBind)) {\r\n-            throw new IllegalArgumentException(\"Specified invalid bind ip from property:\" + Constants.DUBBO_IP_TO_BIND + \", value:\" + hostToBind);\r\n-        }\r\n \r\n         // if bind ip is not found in environment, keep looking up\r\n-        if (hostToBind == null || hostToBind.length() == 0) {\r\n+        if (StringUtils.isEmpty(hostToBind)) {\r\n             hostToBind = protocolConfig.getHost();\r\n-            if (provider != null && (hostToBind == null || hostToBind.length() == 0)) {\r\n+            if (provider != null && StringUtils.isEmpty(hostToBind)) {\r\n                 hostToBind = provider.getHost();\r\n             }\r\n-            if (isInvalidLocalHost(hostToBind)) {\r\n+\r\n+            if (StringUtils.isEmpty(hostToBind)) {\r\n                 anyhost = true;\r\n-                try {\r\n-                    hostToBind = InetAddress.getLocalHost().getHostAddress();\r\n-                } catch (UnknownHostException e) {\r\n-                    logger.warn(e.getMessage(), e);\r\n-                }\r\n-                if (isInvalidLocalHost(hostToBind)) {\r\n-                    if (registryURLs != null && !registryURLs.isEmpty()) {\r\n-                        for (URL registryURL : registryURLs) {\r\n-                            if (Constants.MULTICAST.equalsIgnoreCase(registryURL.getParameter(\"registry\"))) {\r\n-                                // skip multicast registry since we cannot connect to it via Socket\r\n-                                continue;\r\n-                            }\r\n-                            try {\r\n-                                Socket socket = new Socket();\r\n-                                try {\r\n-                                    SocketAddress addr = new InetSocketAddress(registryURL.getHost(), registryURL.getPort());\r\n-                                    socket.connect(addr, 1000);\r\n-                                    hostToBind = socket.getLocalAddress().getHostAddress();\r\n-                                    break;\r\n-                                } finally {\r\n-                                    try {\r\n-                                        socket.close();\r\n-                                    } catch (Throwable e) {\r\n-                                    }\r\n-                                }\r\n-                            } catch (Exception e) {\r\n-                                logger.warn(e.getMessage(), e);\r\n-                            }\r\n-                        }\r\n-                    }\r\n-                    if (isInvalidLocalHost(hostToBind)) {\r\n-                        hostToBind = getLocalHost();\r\n-                    }\r\n+                hostToBind = getLocalHost();\r\n+\r\n+                if (StringUtils.isEmpty(hostToBind)) {\r\n+                    hostToBind = findHostToBindByConnectRegistries(registryURLs);\r\n                 }\r\n             }\r\n         }\r\n@@ -665,9 +648,7 @@ private String findConfigedHosts(ProtocolConfig protocolConfig, List<URL> regist\n \r\n         // registry ip is not used for bind ip by default\r\n         String hostToRegistry = getValueFromConfig(protocolConfig, Constants.DUBBO_IP_TO_REGISTRY);\r\n-        if (hostToRegistry != null && hostToRegistry.length() > 0 && isInvalidLocalHost(hostToRegistry)) {\r\n-            throw new IllegalArgumentException(\"Specified invalid registry ip from property:\" + Constants.DUBBO_IP_TO_REGISTRY + \", value:\" + hostToRegistry);\r\n-        } else if (hostToRegistry == null || hostToRegistry.length() == 0) {\r\n+        if (StringUtils.isEmpty(hostToRegistry)) {\r\n             // bind ip is used as registry ip by default\r\n             hostToRegistry = hostToBind;\r\n         }\r\n@@ -677,6 +658,25 @@ private String findConfigedHosts(ProtocolConfig protocolConfig, List<URL> regist\n         return hostToRegistry;\r\n     }\r\n \r\n+    private String findHostToBindByConnectRegistries(List<URL> registryURLs) {\r\n+        if (CollectionUtils.isNotEmpty(registryURLs)) {\r\n+            for (URL registryURL : registryURLs) {\r\n+                if (Constants.MULTICAST.equalsIgnoreCase(registryURL.getParameter(\"registry\"))) {\r\n+                    // skip multicast registry since we cannot connect to it via Socket\r\n+                    continue;\r\n+                }\r\n+                try (Socket socket = new Socket()) {\r\n+                    SocketAddress addr = new InetSocketAddress(registryURL.getHost(), registryURL.getPort());\r\n+                    socket.connect(addr, 1000);\r\n+                    return socket.getLocalAddress().getHostAddress();\r\n+                } catch (Exception e) {\r\n+                    logger.warn(e.getMessage(), e);\r\n+                }\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n     /**\r\n      * Register port and bind port for the provider, can be configured separately\r\n      * Configuration priority: environment variable -> java system properties -> port property in protocol config file\r\n@@ -744,7 +744,7 @@ private Integer parsePort(String configPort) {\n     private String getValueFromConfig(ProtocolConfig protocolConfig, String key) {\r\n         String protocolPrefix = protocolConfig.getName().toUpperCase() + \"_\";\r\n         String port = ConfigUtils.getSystemProperty(protocolPrefix + key);\r\n-        if (port == null || port.length() == 0) {\r\n+        if (StringUtils.isEmpty(port)) {\r\n             port = ConfigUtils.getSystemProperty(key);\r\n         }\r\n         return port;\r\n@@ -809,7 +809,7 @@ private void createProviderIfAbsent() {\n     }\r\n \r\n     private void checkProtocol() {\r\n-        if ((protocols == null || protocols.isEmpty()) && provider != null) {\r\n+        if (CollectionUtils.isEmpty(protocols) && provider != null) {\r\n             setProtocols(provider.getProtocols());\r\n         }\r\n         convertProtocolIdsToProtocols();\r\n@@ -900,7 +900,7 @@ public void setInterface(Class<?> interfaceClass) {\n \r\n     public void setInterface(String interfaceName) {\r\n         this.interfaceName = interfaceName;\r\n-        if (id == null || id.length() == 0) {\r\n+        if (StringUtils.isEmpty(id)) {\r\n             id = interfaceName;\r\n         }\r\n     }\r\n@@ -997,19 +997,6 @@ public void setProviders(List<ProviderConfig> providers) {\n         this.protocols = convertProviderToProtocol(providers);\r\n     }\r\n \r\n-    @Parameter(excluded = true)\r\n-    public String getUniqueServiceName() {\r\n-        StringBuilder buf = new StringBuilder();\r\n-        if (group != null && group.length() > 0) {\r\n-            buf.append(group).append(\"/\");\r\n-        }\r\n-        buf.append(StringUtils.isNotEmpty(path) ? path : interfaceName);\r\n-        if (version != null && version.length() > 0) {\r\n-            buf.append(\":\").append(version);\r\n-        }\r\n-        return buf.toString();\r\n-    }\r\n-\r\n     @Override\r\n     @Parameter(excluded = true)\r\n     public String getPrefix() {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "sha": "3513c6d8cf325aa58dcf00e89d15c559b3d70a08",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Argument.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Argument.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 20,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Argument.java",
                "patch": "@@ -14,29 +14,31 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.dubbo.metrics;\n+package org.apache.dubbo.config.annotation;\n \n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n \n /**\n- * <pre>\n- * A gauge metric is an instantaneous reading of a particular value. To instrument a queue's depth,\n- * for example:\n+ * @since 2.6.5\n  *\n- * final Queue&lt;String&gt; queue = new ConcurrentLinkedQueue&lt;String&gt;();\n- * final Gauge&lt;Integer&gt; queueDepth = new Gauge&lt;Integer&gt;() {\n- *     public Integer getValue() {\n- *         return queue.size();\n- *     }\n- * };\n- * </pre>\n- *\n- * @param <T> the type of the metric's value\n+ * 2018/9/29\n  */\n-public interface Gauge<T> extends Metric {\n-    /**\n-     * Returns the metric's current value.\n-     *\n-     * @return the metric's current value\n-     */\n-    T getValue();\n+@Documented\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.ANNOTATION_TYPE})\n+@Inherited\n+public @interface Argument {\n+    //argument: index -1 represents not set\n+    int index() default -1;\n+\n+    //argument type\n+    String type() default \"\";\n+\n+    //callback interface\n+    boolean callback() default false;\n }",
                "previous_filename": "dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/Gauge.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Argument.java",
                "sha": "6a0da8ea8d9532763f9a354703b05818d823a08e",
                "status": "renamed"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Method.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Method.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Method.java",
                "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.annotation;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * @since 2.6.5\n+ *  *\n+ *  * 2018/9/29\n+ */\n+@Documented\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.ANNOTATION_TYPE})\n+@Inherited\n+public @interface Method {\n+    String name();\n+\n+    int timeout() default -1;\n+\n+    int retries() default -1;\n+\n+    String loadbalance() default \"\";\n+\n+    boolean async() default false;\n+\n+    boolean sent() default true;\n+\n+    int actives() default 0;\n+\n+    int executes() default 0;\n+\n+    boolean deprecated() default false;\n+\n+    boolean sticky() default false;\n+\n+    boolean isReturn() default true;\n+\n+    String oninvoke() default \"\";\n+\n+    String onreturn() default \"\";\n+\n+    String onthrow() default \"\";\n+\n+    String cache() default \"\";\n+\n+    String validation() default \"\";\n+\n+    Argument[] arguments() default {};\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Method.java",
                "sha": "0cdc97cf81495f1424f7009d3e7dbd48fa3123f2",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 2,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java",
                "patch": "@@ -71,9 +71,9 @@\n     boolean generic() default false;\r\n \r\n     /**\r\n-     * When enable, prefer to call local service in the same JVM if it's present, default value is false\r\n+     * When enable, prefer to call local service in the same JVM if it's present, default value is true\r\n      */\r\n-    boolean injvm() default false;\r\n+    boolean injvm() default true;\r\n \r\n     /**\r\n      * Check if service provider is available during boot up, default value is true\r\n@@ -256,4 +256,10 @@\n      * Protocol spring bean names\r\n      */\r\n     String protocol() default \"\";\r\n+\r\n+    /**\r\n+     * methods support\r\n+     * @return\r\n+     */\r\n+    Method[] methods() default {};\r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java",
                "sha": "bdbbd356cb4fae19f0b2561ea55c80f9760ff3a2",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Service.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Service.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Service.java",
                "patch": "@@ -268,4 +268,10 @@\n      * Service tag name\r\n      */\r\n     String tag() default \"\";\r\n+\r\n+    /**\r\n+     * methods support\r\n+     * @return\r\n+     */\r\n+    Method[] methods() default {};\r\n }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Service.java",
                "sha": "2e6f9b684a7f9e43f1c0ee0d15d693822fe58f83",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractBuilder.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractBuilder.java",
                "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.config.AbstractConfig;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * AbstractBuilder\n+ *\n+ * @since 2.7\n+ */\n+public abstract class AbstractBuilder<T extends AbstractConfig, B extends AbstractBuilder> {\n+    /**\n+     * The config id\n+     */\n+    protected String id;\n+    protected String prefix;\n+\n+    protected B id(String id) {\n+        this.id = id;\n+        return getThis();\n+    }\n+\n+    protected B prefix(String prefix) {\n+        this.prefix = prefix;\n+        return getThis();\n+    }\n+\n+    protected abstract B getThis();\n+\n+    protected static Map<String, String> appendParameter(Map<String, String> parameters, String key, String value) {\n+        if (parameters == null) {\n+            parameters = new HashMap<>();\n+        }\n+        parameters.put(key, value);\n+        return parameters;\n+    }\n+\n+    protected static Map<String, String> appendParameters(Map<String, String> parameters, Map<String, String> appendParameters) {\n+        if (parameters == null) {\n+            parameters = new HashMap<>();\n+        }\n+        parameters.putAll(appendParameters);\n+        return parameters;\n+    }\n+\n+    protected void build(T instance) {\n+        if (!StringUtils.isEmpty(id)) instance.setId(id);\n+        if (!StringUtils.isEmpty(prefix)) instance.setPrefix(prefix);\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractBuilder.java",
                "sha": "404483e9afa1291cce91ba4df843c815d2b310c5",
                "status": "added"
            },
            {
                "additions": 294,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractInterfaceBuilder.java",
                "changes": 294,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractInterfaceBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractInterfaceBuilder.java",
                "patch": "@@ -0,0 +1,294 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.config.AbstractInterfaceConfig;\n+import org.apache.dubbo.config.ApplicationConfig;\n+import org.apache.dubbo.config.ConfigCenterConfig;\n+import org.apache.dubbo.config.MetadataReportConfig;\n+import org.apache.dubbo.config.ModuleConfig;\n+import org.apache.dubbo.config.MonitorConfig;\n+import org.apache.dubbo.config.RegistryConfig;\n+import org.apache.dubbo.rpc.Filter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AbstractBuilder\n+ *\n+ * @since 2.7\n+ */\n+public abstract class AbstractInterfaceBuilder<T extends AbstractInterfaceConfig, B extends AbstractInterfaceBuilder<T, B>>\n+        extends AbstractMethodBuilder<T, B> {\n+    /**\n+     * Local impl class name for the service interface\n+     */\n+    protected String local;\n+\n+    /**\n+     * Local stub class name for the service interface\n+     */\n+    protected String stub;\n+\n+    /**\n+     * Service monitor\n+     */\n+    protected MonitorConfig monitor;\n+\n+    /**\n+     * Strategies for generating dynamic agents\uff0cthere are two strategies can be choosed: jdk and javassist\n+     */\n+    protected String proxy;\n+\n+    /**\n+     * Cluster type\n+     */\n+    protected String cluster;\n+\n+    /**\n+     * The {@link Filter} when the provider side exposed a service or the customer side references a remote service used,\n+     * if there are more than one, you can use commas to separate them\n+     */\n+    protected String filter;\n+\n+    /**\n+     * The Listener when the provider side exposes a service or the customer side references a remote service used\n+     * if there are more than one, you can use commas to separate them\n+     */\n+    protected String listener;\n+\n+    /**\n+     * The owner of the service providers\n+     */\n+    protected String owner;\n+\n+    /**\n+     * Connection limits, 0 means shared connection, otherwise it defines the connections delegated to the current service\n+     */\n+    protected Integer connections;\n+\n+    /**\n+     * The layer of service providers\n+     */\n+    protected String layer;\n+\n+    /**\n+     * The application info\n+     */\n+    protected ApplicationConfig application;\n+\n+    /**\n+     * The module info\n+     */\n+    protected ModuleConfig module;\n+\n+    /**\n+     * Registry centers\n+     */\n+    protected List<RegistryConfig> registries;\n+\n+    protected String registryIds;\n+\n+    // connection events\n+    protected String onconnect;\n+\n+    /**\n+     * Disconnection events\n+     */\n+    protected String ondisconnect;\n+    protected MetadataReportConfig metadataReportConfig;\n+\n+    protected ConfigCenterConfig configCenter;\n+\n+    // callback limits\n+    private Integer callbacks;\n+    // the scope for referring/exporting a service, if it's local, it means searching in current JVM only.\n+    private String scope;\n+\n+    /**\n+     * @param local\n+     * @see org.apache.dubbo.config.builders.AbstractInterfaceBuilder#stub(String)\n+     * @deprecated Replace to <code>stub(String)</code>\n+     */\n+    @Deprecated\n+    public B local(String local) {\n+        this.local = local;\n+        return getThis();\n+    }\n+\n+    /**\n+     * @param local\n+     * @see org.apache.dubbo.config.builders.AbstractInterfaceBuilder#stub(Boolean)\n+     * @deprecated Replace to <code>stub(Boolean)</code>\n+     */\n+    @Deprecated\n+    public B local(Boolean local) {\n+        if (local != null) {\n+            this.local = local.toString();\n+        } else {\n+            this.local = null;\n+        }\n+        return getThis();\n+    }\n+\n+    public B stub(String stub) {\n+        this.stub = stub;\n+        return getThis();\n+    }\n+\n+    public B stub(Boolean stub) {\n+        if (stub != null) {\n+            this.stub = stub.toString();\n+        } else {\n+            this.stub = null;\n+        }\n+        return getThis();\n+    }\n+\n+    public B monitor(MonitorConfig monitor) {\n+        this.monitor = monitor;\n+        return getThis();\n+    }\n+\n+    public B monitor(String monitor) {\n+        this.monitor = new MonitorConfig(monitor);\n+        return getThis();\n+    }\n+\n+    public B proxy(String proxy) {\n+        this.proxy = proxy;\n+        return getThis();\n+    }\n+\n+    public B cluster(String cluster) {\n+        this.cluster = cluster;\n+        return getThis();\n+    }\n+\n+    public B filter(String filter) {\n+        this.filter = filter;\n+        return getThis();\n+    }\n+\n+    public B listener(String listener) {\n+        this.listener = listener;\n+        return getThis();\n+    }\n+\n+    public B owner(String owner) {\n+        this.owner = owner;\n+        return getThis();\n+    }\n+\n+    public B connections(Integer connections) {\n+        this.connections = connections;\n+        return getThis();\n+    }\n+\n+    public B layer(String layer) {\n+        this.layer = layer;\n+        return getThis();\n+    }\n+\n+    public B application(ApplicationConfig application) {\n+        this.application = application;\n+        return getThis();\n+    }\n+\n+    public B module(ModuleConfig module) {\n+        this.module = module;\n+        return getThis();\n+    }\n+\n+    public B addRegistries(List<RegistryConfig> registries) {\n+        if (this.registries == null) {\n+            this.registries = new ArrayList<>();\n+        }\n+        this.registries.addAll(registries);\n+        return getThis();\n+    }\n+\n+    public B addRegistry(RegistryConfig registry) {\n+        if (this.registries == null) {\n+            this.registries = new ArrayList<>();\n+        }\n+        this.registries.add(registry);\n+        return getThis();\n+    }\n+\n+    public B registryIds(String registryIds) {\n+        this.registryIds = registryIds;\n+        return getThis();\n+    }\n+\n+    public B onconnect(String onconnect) {\n+        this.onconnect = onconnect;\n+        return getThis();\n+    }\n+\n+    public B ondisconnect(String ondisconnect) {\n+        this.ondisconnect = ondisconnect;\n+        return getThis();\n+    }\n+\n+    public B metadataReportConfig(MetadataReportConfig metadataReportConfig) {\n+        this.metadataReportConfig = metadataReportConfig;\n+        return getThis();\n+    }\n+\n+    public B configCenter(ConfigCenterConfig configCenter) {\n+        this.configCenter = configCenter;\n+        return getThis();\n+    }\n+\n+    public B callbacks(Integer callbacks) {\n+        this.callbacks = callbacks;\n+        return getThis();\n+    }\n+\n+    public B scope(String scope) {\n+        this.scope = scope;\n+        return getThis();\n+    }\n+\n+    public void build(T instance) {\n+        super.build(instance);\n+\n+        if (!StringUtils.isEmpty(local)) instance.setLocal(local);\n+        if (!StringUtils.isEmpty(stub)) instance.setStub(stub);\n+        if (monitor != null) instance.setMonitor(monitor);\n+        if (!StringUtils.isEmpty(proxy)) instance.setProxy(proxy);\n+        if (!StringUtils.isEmpty(cluster)) instance.setCluster(cluster);\n+        if (!StringUtils.isEmpty(filter)) instance.setFilter(filter);\n+        if (!StringUtils.isEmpty(listener)) instance.setListener(listener);\n+        if (!StringUtils.isEmpty(owner)) instance.setOwner(owner);\n+        if (connections != null) instance.setConnections(connections);\n+        if (!StringUtils.isEmpty(layer)) instance.setLayer(layer);\n+        if (application != null) instance.setApplication(application);\n+        if (module != null) instance.setModule(module);\n+        if (registries != null) instance.setRegistries(registries);\n+        if (!StringUtils.isEmpty(registryIds)) instance.setRegistryIds(registryIds);\n+        if (!StringUtils.isEmpty(onconnect)) instance.setOnconnect(onconnect);\n+        if (!StringUtils.isEmpty(ondisconnect)) instance.setOndisconnect(ondisconnect);\n+        if (metadataReportConfig != null) instance.setMetadataReportConfig(metadataReportConfig);\n+        if (configCenter != null) instance.setConfigCenter(configCenter);\n+        if (callbacks != null) instance.setCallbacks(callbacks);\n+        if (!StringUtils.isEmpty(scope)) instance.setScope(scope);\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractInterfaceBuilder.java",
                "sha": "af97b5b795bb584b8cb0710905b5adcfc0fef8f4",
                "status": "added"
            },
            {
                "additions": 188,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractMethodBuilder.java",
                "changes": 188,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractMethodBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractMethodBuilder.java",
                "patch": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.config.AbstractMethodConfig;\n+\n+import java.util.Map;\n+\n+/**\n+ * AbstractBuilder\n+ *\n+ * @since 2.7\n+ */\n+public abstract class AbstractMethodBuilder<T extends AbstractMethodConfig, B extends AbstractMethodBuilder<T, B>>\n+        extends AbstractBuilder<T, B>{\n+    /**\n+     * The timeout for remote invocation in milliseconds\n+     */\n+    protected Integer timeout;\n+\n+    /**\n+     * The retry times\n+     */\n+    protected Integer retries;\n+\n+    /**\n+     * max concurrent invocations\n+     */\n+    protected Integer actives;\n+\n+    /**\n+     * The load balance\n+     */\n+    protected String loadbalance;\n+\n+    /**\n+     * Whether to async\n+     * note that: it is an unreliable asynchronism that ignores return values and does not block threads.\n+     */\n+    protected Boolean async;\n+\n+    /**\n+     * Whether to ack async-sent\n+     */\n+    protected Boolean sent;\n+\n+    /**\n+     * The name of mock class which gets called when a service fails to execute\n+     *\n+     * note that: the mock doesn't support on the provider side\uff0cand the mock is executed when a non-business exception\n+     * occurs after a remote service call\n+     */\n+    protected String mock;\n+\n+    /**\n+     * Merger\n+     */\n+    protected String merger;\n+\n+    /**\n+     * Cache the return result with the call parameter as key, the following options are available: lru, threadlocal,\n+     * jcache, etc.\n+     */\n+    protected String cache;\n+\n+    /**\n+     * Whether JSR303 standard annotation validation is enabled or not, if enabled, annotations on method parameters will\n+     * be validated\n+     */\n+    protected String validation;\n+\n+    /**\n+     * The customized parameters\n+     */\n+    protected Map<String, String> parameters;\n+\n+    /**\n+     * Forks for forking cluster\n+     */\n+    protected Integer forks;\n+\n+    public B timeout(Integer timeout) {\n+        this.timeout = timeout;\n+        return getThis();\n+    }\n+\n+    public B retries(Integer retries) {\n+        this.retries = retries;\n+        return getThis();\n+    }\n+\n+    public B actives(Integer actives) {\n+        this.actives = actives;\n+        return getThis();\n+    }\n+\n+    public B loadbalance(String loadbalance) {\n+        this.loadbalance = loadbalance;\n+        return getThis();\n+    }\n+\n+    public B async(Boolean async) {\n+        this.async = async;\n+        return getThis();\n+    }\n+\n+    public B sent(Boolean sent) {\n+        this.sent = sent;\n+        return getThis();\n+    }\n+\n+    public B mock(String mock) {\n+        this.mock = mock;\n+        return getThis();\n+    }\n+\n+    public B mock(Boolean mock) {\n+        if (mock != null) {\n+            this.mock = mock.toString();\n+        } else {\n+            this.mock = null;\n+        }\n+        return getThis();\n+    }\n+\n+    public B merger(String merger) {\n+        this.merger = merger;\n+        return getThis();\n+    }\n+\n+    public B cache(String cache) {\n+        this.cache = cache;\n+        return getThis();\n+    }\n+\n+    public B validation(String validation) {\n+        this.validation = validation;\n+        return getThis();\n+    }\n+\n+    public B appendParameters(Map<String, String> appendParameters) {\n+        this.parameters = appendParameters(parameters, appendParameters);\n+        return getThis();\n+    }\n+\n+    public B appendParameter(String key, String value) {\n+        this.parameters = appendParameter(parameters, key, value);\n+        return getThis();\n+    }\n+\n+    public B forks(Integer forks) {\n+        this.forks = forks;\n+        return getThis();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void build(T instance) {\n+        super.build(instance);\n+\n+        if (actives != null) instance.setActives(actives);\n+        if (async != null) instance.setAsync(async);\n+        if (!StringUtils.isEmpty(cache)) instance.setCache(cache);\n+        if (forks != null) instance.setForks(forks);\n+        if (!StringUtils.isEmpty(loadbalance)) instance.setLoadbalance(loadbalance);\n+        if (!StringUtils.isEmpty(merger)) instance.setMerger(merger);\n+        if(!StringUtils.isEmpty(mock)) instance.setMock(mock);\n+        if (retries != null) instance.setRetries(retries);\n+        if (sent != null) instance.setSent(sent);\n+        if (timeout != null) instance.setTimeout(timeout);\n+        if (!StringUtils.isEmpty(validation)) instance.setValidation(validation);\n+        if (parameters != null) instance.setParameters(parameters);\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractMethodBuilder.java",
                "sha": "bdd0933d9df6c1f457da76570fdbcbc9e8076b2f",
                "status": "added"
            },
            {
                "additions": 142,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractReferenceBuilder.java",
                "changes": 142,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractReferenceBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractReferenceBuilder.java",
                "patch": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.config.AbstractReferenceConfig;\n+\n+/**\n+ * AbstractBuilder\n+ *\n+ * @since 2.7\n+ */\n+public abstract class AbstractReferenceBuilder<T extends AbstractReferenceConfig, B extends AbstractReferenceBuilder<T, B>>\n+        extends AbstractInterfaceBuilder<T, B> {\n+\n+    /**\n+     * Check if service provider exists, if not exists, it will be fast fail\n+     */\n+    protected Boolean check;\n+\n+    /**\n+     * Whether to eagle-init\n+     */\n+    protected Boolean init;\n+\n+    /**\n+     * Whether to use generic interface\n+     */\n+    protected String generic;\n+\n+    /**\n+     * Whether to find reference's instance from the current JVM\n+     */\n+    protected Boolean injvm;\n+\n+    /**\n+     * Lazy create connection\n+     */\n+    protected Boolean lazy;\n+\n+    protected String reconnect;\n+\n+    protected Boolean sticky;\n+\n+    /**\n+     * The remote service version the customer side will reference\n+     */\n+    protected String version;\n+\n+    /**\n+     * The remote service group the customer side will reference\n+     */\n+    protected String group;\n+\n+    public B check(Boolean check) {\n+        this.check = check;\n+        return getThis();\n+    }\n+\n+    public B init(Boolean init) {\n+        this.init = init;\n+        return getThis();\n+    }\n+\n+    public B generic(String generic) {\n+        this.generic = generic;\n+        return getThis();\n+    }\n+\n+    public B generic(Boolean generic) {\n+        if (generic != null) {\n+            this.generic = generic.toString();\n+        } else {\n+            this.generic = null;\n+        }\n+        return getThis();\n+    }\n+\n+    /**\n+     * @param injvm\n+     * @see org.apache.dubbo.config.builders.AbstractInterfaceBuilder#scope(String)\n+     * @deprecated instead, use the parameter <b>scope</b> to judge if it's in jvm, scope=local\n+     */\n+    @Deprecated\n+    public B injvm(Boolean injvm) {\n+        this.injvm = injvm;\n+        return getThis();\n+    }\n+\n+    public B lazy(Boolean lazy) {\n+        this.lazy = lazy;\n+        return getThis();\n+    }\n+\n+    public B reconnect(String reconnect) {\n+        this.reconnect = reconnect;\n+        return getThis();\n+    }\n+\n+    public B sticky(Boolean sticky) {\n+        this.sticky = sticky;\n+        return getThis();\n+    }\n+\n+    public B version(String version) {\n+        this.version = version;\n+        return getThis();\n+    }\n+\n+    public B group(String group) {\n+        this.group = group;\n+        return getThis();\n+    }\n+\n+    public void build(T instance) {\n+        super.build(instance);\n+\n+        if (check != null) instance.setCheck(check);\n+        if (init != null) instance.setInit(init);\n+        if (!StringUtils.isEmpty(generic)) instance.setGeneric(generic);\n+        if (injvm != null) instance.setInjvm(injvm);\n+        if (lazy != null) instance.setLazy(lazy);\n+        if (!StringUtils.isEmpty(reconnect)) instance.setReconnect(reconnect);\n+        if (sticky != null) instance.setSticky(sticky);\n+        if (!StringUtils.isEmpty(version)) instance.setVersion(version);\n+        if (!StringUtils.isEmpty(group)) instance.setGroup(group);\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractReferenceBuilder.java",
                "sha": "7748317a74a4f991578627c01e1bbe969917e929",
                "status": "added"
            },
            {
                "additions": 246,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractServiceBuilder.java",
                "changes": 246,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractServiceBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractServiceBuilder.java",
                "patch": "@@ -0,0 +1,246 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.config.AbstractServiceConfig;\n+import org.apache.dubbo.config.ProtocolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AbstractBuilder\n+ *\n+ * @since 2.7\n+ */\n+public abstract class AbstractServiceBuilder<T extends AbstractServiceConfig, B extends AbstractServiceBuilder<T, B>>\n+        extends AbstractInterfaceBuilder<T, B> {\n+\n+    /**\n+     * The service version\n+     */\n+    protected String version;\n+\n+    /**\n+     * The service group\n+     */\n+    protected String group;\n+\n+    /**\n+     * whether the service is deprecated\n+     */\n+    protected Boolean deprecated;\n+\n+    /**\n+     * The time delay register service (milliseconds)\n+     */\n+    protected Integer delay;\n+\n+    /**\n+     * Whether to export the service\n+     */\n+    protected Boolean export;\n+\n+    /**\n+     * The service weight\n+     */\n+    protected Integer weight;\n+\n+    /**\n+     * Document center\n+     */\n+    protected String document;\n+\n+    /**\n+     * Whether to register as a dynamic service or not on register center, it the value is false, the status will be disabled\n+     * after the service registered,and it needs to be enabled manually; if you want to disable the service, you also need\n+     * manual processing\n+     */\n+    protected Boolean dynamic;\n+\n+    /**\n+     * Whether to use token\n+     */\n+    protected String token;\n+\n+    /**\n+     * Whether to export access logs to logs\n+     */\n+    protected String accesslog;\n+\n+    /**\n+     * The protocol list the service will export with\n+     */\n+    protected List<ProtocolConfig> protocols;\n+    protected String protocolIds;\n+    // provider tag\n+    protected String tag;\n+    // max allowed execute times\n+    private Integer executes;\n+\n+    /**\n+     * Whether to register\n+     */\n+    private Boolean register;\n+\n+    /**\n+     * Warm up period\n+     */\n+    private Integer warmup;\n+\n+    /**\n+     * The serialization type\n+     */\n+    private String serialization;\n+\n+    public B version(String version) {\n+        this.version = version;\n+        return getThis();\n+    }\n+\n+    public B group(String group) {\n+        this.group = group;\n+        return getThis();\n+    }\n+\n+    public B deprecated(Boolean deprecated) {\n+        this.deprecated = deprecated;\n+        return getThis();\n+    }\n+\n+    public B delay(Integer delay) {\n+        this.delay = delay;\n+        return getThis();\n+    }\n+\n+    public B export(Boolean export) {\n+        this.export = export;\n+        return getThis();\n+    }\n+\n+    public B weight(Integer weight) {\n+        this.weight = weight;\n+        return getThis();\n+    }\n+\n+    public B document(String document) {\n+        this.document = document;\n+        return getThis();\n+    }\n+\n+    public B dynamic(Boolean dynamic) {\n+        this.dynamic = dynamic;\n+        return getThis();\n+    }\n+\n+    public B token(String token) {\n+        this.token = token;\n+        return getThis();\n+    }\n+\n+    public B token(Boolean token) {\n+        if (token != null) {\n+            this.token = token.toString();\n+        } else {\n+            this.token = null;\n+        }\n+        return getThis();\n+    }\n+\n+    public B accesslog(String accesslog) {\n+        this.accesslog = accesslog;\n+        return getThis();\n+    }\n+\n+    public B accesslog(Boolean accesslog) {\n+        if (accesslog != null) {\n+            this.accesslog = accesslog.toString();\n+        } else {\n+            this.accesslog = null;\n+        }\n+        return getThis();\n+    }\n+\n+    public B addProtocols(List<ProtocolConfig> protocols) {\n+        if (this.protocols == null) {\n+            this.protocols = new ArrayList<>();\n+        }\n+        this.protocols.addAll(protocols);\n+        return getThis();\n+    }\n+\n+    public B addProtocol(ProtocolConfig protocol) {\n+        if (this.protocols == null) {\n+            this.protocols = new ArrayList<>();\n+        }\n+        this.protocols.add(protocol);\n+        return getThis();\n+    }\n+\n+    public B protocolIds(String protocolIds) {\n+        this.protocolIds = protocolIds;\n+        return getThis();\n+    }\n+\n+    public B tag(String tag) {\n+        this.tag = tag;\n+        return getThis();\n+    }\n+\n+    public B executes(Integer executes) {\n+        this.executes = executes;\n+        return getThis();\n+    }\n+\n+    public B register(Boolean register) {\n+        this.register = register;\n+        return getThis();\n+    }\n+\n+    public B warmup(Integer warmup) {\n+        this.warmup = warmup;\n+        return getThis();\n+    }\n+\n+    public  B serialization(String serialization) {\n+        this.serialization = serialization;\n+        return getThis();\n+    }\n+\n+    public void build(T instance) {\n+        super.build(instance);\n+\n+        if (!StringUtils.isEmpty(version)) instance.setVersion(version);\n+        if (!StringUtils.isEmpty(group)) instance.setGroup(group);\n+        if (deprecated != null) instance.setDeprecated(deprecated);\n+        if (delay != null) instance.setDelay(delay);\n+        if (export != null) instance.setExport(export);\n+        if (weight != null) instance.setWeight(weight);\n+        if (!StringUtils.isEmpty(document)) instance.setDocument(document);\n+        if (dynamic != null) instance.setDynamic(dynamic);\n+        if (!StringUtils.isEmpty(token)) instance.setToken(token);\n+        if (!StringUtils.isEmpty(accesslog)) instance.setAccesslog(accesslog);\n+        if (protocols != null) instance.setProtocols(protocols);\n+        if (!StringUtils.isEmpty(protocolIds)) instance.setProtocolIds(protocolIds);\n+        if (tag != null) instance.setTag(tag);\n+        if (executes != null) instance.setExecutes(executes);\n+        if (register != null)  instance.setRegister(register);\n+        if (warmup != null) instance.setWarmup(warmup);\n+        if (!StringUtils.isEmpty(serialization)) instance.setSerialization(serialization);\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/AbstractServiceBuilder.java",
                "sha": "fce73884f69b3d075c0a8b619daf34bb1fe541f4",
                "status": "added"
            },
            {
                "additions": 193,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ApplicationBuilder.java",
                "changes": 193,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ApplicationBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ApplicationBuilder.java",
                "patch": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.dubbo.common.Constants;\n+import org.apache.dubbo.common.utils.StringUtils;\n+import org.apache.dubbo.config.ApplicationConfig;\n+import org.apache.dubbo.config.MonitorConfig;\n+import org.apache.dubbo.config.RegistryConfig;\n+\n+/**\n+ * This is a builder for build {@link ApplicationConfig}.\n+ * @since 2.7\n+ */\n+public class ApplicationBuilder extends AbstractBuilder<ApplicationConfig, ApplicationBuilder> {\n+    private String name;\n+    private String version;\n+    private String owner;\n+    private String organization;\n+    private String architecture;\n+    private String environment = Constants.PRODUCTION_ENVIRONMENT;\n+    private String compiler;\n+    private String logger;\n+    private List<RegistryConfig> registries;\n+    private String registryIds;\n+    private MonitorConfig monitor;\n+    private Boolean isDefault;\n+    private String dumpDirectory;\n+    private Boolean qosEnable;\n+    private Integer qosPort;\n+    private Boolean qosAcceptForeignIp;\n+    private Map<String, String> parameters;\n+    private String shutwait;\n+\n+    public ApplicationBuilder name(String name) {\n+        this.name = name;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder version(String version) {\n+        this.version = version;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder owner(String owner) {\n+        this.owner = owner;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder organization(String organization) {\n+        this.organization = organization;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder architecture(String architecture) {\n+        this.architecture = architecture;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder environment(String environment) {\n+        this.environment = environment;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder compiler(String compiler) {\n+        this.compiler = compiler;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder logger(String logger) {\n+        this.logger = logger;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder addRegistry(RegistryConfig registry) {\n+        if (this.registries == null) {\n+            this.registries = new ArrayList<>();\n+        }\n+        this.registries.add(registry);\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder addRegistries(List<? extends RegistryConfig> registries) {\n+        if (this.registries == null) {\n+            this.registries = new ArrayList<>();\n+        }\n+        this.registries.addAll(registries);\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder registryIds(String registryIds) {\n+        this.registryIds = registryIds;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder monitor(MonitorConfig monitor) {\n+        this.monitor = monitor;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder monitor(String monitor) {\n+        this.monitor = new MonitorConfig(monitor);\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder isDefault(Boolean isDefault) {\n+        this.isDefault = isDefault;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder dumpDirectory(String dumpDirectory) {\n+        this.dumpDirectory = dumpDirectory;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder qosEnable(Boolean qosEnable) {\n+        this.qosEnable = qosEnable;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder qosPort(Integer qosPort) {\n+        this.qosPort = qosPort;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder qosAcceptForeignIp(Boolean qosAcceptForeignIp) {\n+        this.qosAcceptForeignIp = qosAcceptForeignIp;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder shutwait(String shutwait) {\n+        this.shutwait = shutwait;\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder appendParameter(String key, String value) {\n+        this.parameters = appendParameter(parameters, key, value);\n+        return getThis();\n+    }\n+\n+    public ApplicationBuilder appendParameters(Map<String, String> appendParameters) {\n+        this.parameters = appendParameters(parameters, appendParameters);\n+        return getThis();\n+    }\n+\n+    public ApplicationConfig build() {\n+        ApplicationConfig config = new ApplicationConfig();\n+        super.build(config);\n+\n+        config.setName(name);\n+        config.setVersion(this.version);\n+        config.setOwner(this.owner);\n+        config.setOrganization(this.organization);\n+        config.setArchitecture(this.architecture);\n+        config.setEnvironment(this.environment);\n+        config.setCompiler(this.compiler);\n+        config.setLogger(this.logger);\n+        config.setRegistries(this.registries);\n+        config.setRegistryIds(this.registryIds);\n+        config.setMonitor(this.monitor);\n+        config.setDefault(this.isDefault);\n+        config.setDumpDirectory(this.dumpDirectory);\n+        config.setQosEnable(this.qosEnable);\n+        config.setQosPort(this.qosPort);\n+        config.setQosAcceptForeignIp(this.qosAcceptForeignIp);\n+        config.setParameters(this.parameters);\n+        if (!StringUtils.isEmpty(shutwait)) config.setShutwait(shutwait);\n+        return config;\n+    }\n+\n+    @Override\n+    protected ApplicationBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ApplicationBuilder.java",
                "sha": "b843a4d5dd5b4004101da5505b299dbfc6e41509",
                "status": "added"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ArgumentBuilder.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ArgumentBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ArgumentBuilder.java",
                "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.config.ArgumentConfig;\n+\n+/**\n+ * This is a builder for build {@link ArgumentConfig}.\n+ * @since 2.7\n+ */\n+public class ArgumentBuilder {\n+    /**\n+     * The argument index: index -1 represents not set\n+     */\n+    private Integer index = -1;\n+\n+    /**\n+     * Argument type\n+     */\n+    private String type;\n+\n+    /**\n+     * Whether the argument is the callback interface\n+     */\n+    private Boolean callback;\n+\n+    public ArgumentBuilder index(Integer index) {\n+        this.index = index;\n+        return this;\n+    }\n+\n+    public ArgumentBuilder type(String type) {\n+        this.type = type;\n+        return this;\n+    }\n+\n+    public ArgumentBuilder callback(Boolean callback) {\n+        this.callback = callback;\n+        return this;\n+    }\n+\n+    public ArgumentConfig build() {\n+        ArgumentConfig argumentConfig = new ArgumentConfig();\n+        argumentConfig.setIndex(index);\n+        argumentConfig.setType(type);\n+        argumentConfig.setCallback(callback);\n+        return argumentConfig;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ArgumentBuilder.java",
                "sha": "03b1df25c09c30a524917f78cb531116e30111ef",
                "status": "added"
            },
            {
                "additions": 148,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConfigCenterBuilder.java",
                "changes": 148,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConfigCenterBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConfigCenterBuilder.java",
                "patch": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.config.ConfigCenterConfig;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is a builder for build {@link ConfigCenterConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class ConfigCenterBuilder extends AbstractBuilder<ConfigCenterConfig, ConfigCenterBuilder> {\n+\n+    private String protocol;\n+    private String address;\n+    private String cluster;\n+    private String namespace = \"dubbo\";\n+    private String group = \"dubbo\";\n+    private String username;\n+    private String password;\n+    private Long timeout = 3000L;\n+    private Boolean highestPriority = true;\n+    private Boolean check = true;\n+\n+    private String appName;\n+    private String configFile = \"dubbo.properties\";\n+    private String appConfigFile;\n+\n+    private Map<String, String> parameters;\n+\n+    public ConfigCenterBuilder protocol(String protocol) {\n+        this.protocol = protocol;\n+        return getThis();\n+    }\n+\n+\tpublic ConfigCenterBuilder address(String address) {\n+        this.address = address;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder cluster(String cluster) {\n+        this.cluster = cluster;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder namespace(String namespace) {\n+        this.namespace = namespace;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder group(String group) {\n+        this.group = group;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder username(String username) {\n+        this.username = username;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder password(String password) {\n+        this.password = password;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder timeout(Long timeout) {\n+        this.timeout = timeout;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder highestPriority(Boolean highestPriority) {\n+        this.highestPriority = highestPriority;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder check(Boolean check) {\n+        this.check = check;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder appName(String appName) {\n+        this.appName = appName;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder configFile(String configFile) {\n+        this.configFile = configFile;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder appConfigFile(String appConfigFile) {\n+        this.appConfigFile = appConfigFile;\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder appendParameters(Map<String, String> appendParameters) {\n+        this.parameters = appendParameters(this.parameters, appendParameters);\n+        return getThis();\n+    }\n+\n+    public ConfigCenterBuilder appendParameter(String key, String value) {\n+        this.parameters = appendParameter(this.parameters, key, value);\n+        return getThis();\n+    }\n+\n+    public ConfigCenterConfig build() {\n+        ConfigCenterConfig configCenter = new ConfigCenterConfig();\n+        super.build(configCenter);\n+\n+        configCenter.setProtocol(protocol);\n+        configCenter.setAddress(address);\n+        configCenter.setCluster(cluster);\n+        configCenter.setNamespace(namespace);\n+        configCenter.setGroup(group);\n+        configCenter.setUsername(username);\n+        configCenter.setPassword(password);\n+        configCenter.setTimeout(timeout);\n+        configCenter.setHighestPriority(highestPriority);\n+        configCenter.setCheck(check);\n+        configCenter.setAppName(appName);\n+        configCenter.setConfigFile(configFile);\n+        configCenter.setAppConfigFile(appConfigFile);\n+        configCenter.setParameters(parameters);\n+\n+        return configCenter;\n+    }\n+\n+    @Override\n+    protected ConfigCenterBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConfigCenterBuilder.java",
                "sha": "44110e1797d19386f2b365a2d3f39159de96b71a",
                "status": "added"
            },
            {
                "additions": 118,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConsumerBuilder.java",
                "changes": 118,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConsumerBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConsumerBuilder.java",
                "patch": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.config.ConsumerConfig;\n+\n+/**\n+ * This is a builder for build {@link ConsumerConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class ConsumerBuilder extends AbstractReferenceBuilder<ConsumerConfig, ConsumerBuilder> {\n+\n+    /**\n+     * Whether to use the default protocol\n+     */\n+    private Boolean isDefault;\n+\n+    /**\n+     * Networking framework client uses: netty, mina, etc.\n+     */\n+    private String client;\n+\n+    /**\n+     * Consumer thread pool type: cached, fixed, limit, eager\n+     */\n+    private String threadpool;\n+\n+    /**\n+     * Consumer threadpool core thread size\n+     */\n+    private Integer corethreads;\n+\n+    /**\n+     * Consumer threadpool thread size\n+     */\n+    private Integer threads;\n+\n+    /**\n+     * Consumer threadpool queue size\n+     */\n+    private Integer queues;\n+\n+    /**\n+     * By default, a TCP long-connection communication is shared between the consumer process and the provider process.\n+     * This property can be set to share multiple TCP long-connection communications. Note that only the dubbo protocol takes effect.\n+     */\n+    private Integer shareconnections;\n+\n+    public ConsumerBuilder isDefault(Boolean isDefault) {\n+        this.isDefault = isDefault;\n+        return getThis();\n+    }\n+\n+    public ConsumerBuilder client(String client) {\n+        this.client = client;\n+        return getThis();\n+    }\n+\n+    public ConsumerBuilder threadPool(String threadPool) {\n+        this.threadpool = threadPool;\n+        return getThis();\n+    }\n+\n+    public ConsumerBuilder coreThreads(Integer coreThreads) {\n+        this.corethreads = coreThreads;\n+        return getThis();\n+    }\n+\n+    public ConsumerBuilder threads(Integer threads) {\n+        this.threads = threads;\n+        return getThis();\n+    }\n+\n+    public ConsumerBuilder queues(Integer queues) {\n+        this.queues = queues;\n+        return getThis();\n+    }\n+\n+    public ConsumerBuilder shareConnections(Integer shareConnections) {\n+        this.shareconnections = shareConnections;\n+        return getThis();\n+    }\n+\n+    public ConsumerConfig build() {\n+        ConsumerConfig consumer = new ConsumerConfig();\n+        super.build(consumer);\n+\n+        consumer.setDefault(isDefault);\n+        consumer.setClient(client);\n+        consumer.setThreadpool(threadpool);\n+        consumer.setCorethreads(corethreads);\n+        consumer.setThreads(threads);\n+        consumer.setQueues(queues);\n+        consumer.setShareconnections(shareconnections);\n+\n+        return consumer;\n+    }\n+\n+    @Override\n+    protected ConsumerBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ConsumerBuilder.java",
                "sha": "992d0eaa2504b881c367be177f77ff2da9c36bf1",
                "status": "added"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/DubboBuilders.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/DubboBuilders.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/DubboBuilders.java",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+/**\n+ * The tools for creat builder\n+ *\n+ * @since 2.7\n+ */\n+public class DubboBuilders {\n+    public static <T> ServiceBuilder<T> serviceBuilder() {\n+        return new ServiceBuilder<>();\n+    }\n+\n+    public static ApplicationBuilder applicationBuilder() {\n+        return new ApplicationBuilder();\n+    }\n+\n+    public static ConfigCenterBuilder configCenterBuilder() {\n+        return new ConfigCenterBuilder();\n+    }\n+\n+    public static ConsumerBuilder consumerBuilder() {\n+        return new ConsumerBuilder();\n+    }\n+\n+    public static MetadataReportBuilder metadataReportBuilder() {\n+        return new MetadataReportBuilder();\n+    }\n+\n+    public static MethodBuilder methodBuilder() {\n+        return new MethodBuilder();\n+    }\n+\n+    public static MonitorBuilder monitorBuilder() {\n+        return new MonitorBuilder();\n+    }\n+\n+    public static ProviderBuilder providerBuilder() {\n+        return new ProviderBuilder();\n+    }\n+\n+    public static ProtocolBuilder protocolBuilder() {\n+        return new ProtocolBuilder();\n+    }\n+\n+    public static <T> ReferenceBuilder<T> referenceBuilder() {\n+        return new ReferenceBuilder<T>();\n+    }\n+\n+    public static RegistryBuilder registryBuilder() {\n+        return new RegistryBuilder();\n+    }\n+\n+    public static ArgumentBuilder argumentBuilder() {\n+        return new ArgumentBuilder();\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/DubboBuilders.java",
                "sha": "145e0ce50a0bde657e9a8dc52831e8fbd93d6047",
                "status": "added"
            },
            {
                "additions": 140,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MetadataReportBuilder.java",
                "changes": 140,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MetadataReportBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MetadataReportBuilder.java",
                "patch": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.config.MetadataReportConfig;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is a builder for build {@link MetadataReportConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class MetadataReportBuilder extends AbstractBuilder<MetadataReportConfig, MetadataReportBuilder> {\n+\n+    // Register center address\n+    private String address;\n+\n+    // Username to login register center\n+    private String username;\n+\n+    // Password to login register center\n+    private String password;\n+\n+    // Request timeout in milliseconds for register center\n+    private Integer timeout;\n+\n+    /**\n+     * The group the metadata in . It is the same as registry\n+     */\n+    private String group;\n+\n+    // Customized parameters\n+    private Map<String, String> parameters;\n+\n+    private Integer retryTimes;\n+\n+    private Integer retryPeriod;\n+    /**\n+     * By default the metadatastore will store full metadata repeatly every day .\n+     */\n+    private Boolean cycleReport;\n+\n+    /**\n+     * Sync report, default async\n+     */\n+    private Boolean syncReport;\n+\n+    public MetadataReportBuilder address(String address) {\n+        this.address = address;\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder username(String username) {\n+        this.username = username;\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder password(String password) {\n+        this.password = password;\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder timeout(Integer timeout) {\n+        this.timeout = timeout;\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder group(String group) {\n+        this.group = group;\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder appendParameters(Map<String, String> appendParameters) {\n+        this.parameters = appendParameters(this.parameters, appendParameters);\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder appendParameter(String key, String value) {\n+        this.parameters = appendParameter(this.parameters, key, value);\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder retryTimes(Integer retryTimes) {\n+        this.retryTimes = retryTimes;\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder retryPeriod(Integer retryPeriod) {\n+        this.retryPeriod = retryPeriod;\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder cycleReport(Boolean cycleReport) {\n+        this.cycleReport = cycleReport;\n+        return getThis();\n+    }\n+\n+    public MetadataReportBuilder syncReport(Boolean syncReport) {\n+        this.syncReport = syncReport;\n+        return getThis();\n+    }\n+\n+    public MetadataReportConfig build() {\n+        MetadataReportConfig metadataReport = new MetadataReportConfig();\n+        super.build(metadataReport);\n+\n+        metadataReport.setAddress(address);\n+        metadataReport.setUsername(username);\n+        metadataReport.setPassword(password);\n+        metadataReport.setTimeout(timeout);\n+        metadataReport.setGroup(group);\n+        metadataReport.setParameters(parameters);\n+        metadataReport.setRetryTimes(retryTimes);\n+        metadataReport.setRetryPeriod(retryPeriod);\n+        metadataReport.setCycleReport(cycleReport);\n+        metadataReport.setSyncReport(syncReport);\n+\n+        return metadataReport;\n+    }\n+\n+    @Override\n+    protected MetadataReportBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MetadataReportBuilder.java",
                "sha": "140ea137907acef3757af9e39190d60f27dc100f",
                "status": "added"
            },
            {
                "additions": 237,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MethodBuilder.java",
                "changes": 237,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MethodBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MethodBuilder.java",
                "patch": "@@ -0,0 +1,237 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.config.ArgumentConfig;\n+import org.apache.dubbo.config.MethodConfig;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This is a builder for build {@link MethodConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class MethodBuilder extends AbstractMethodBuilder<MethodConfig, MethodBuilder> {\n+    /**\n+     * The method name\n+     */\n+    private String name;\n+\n+    /**\n+     * Stat\n+     */\n+    private Integer stat;\n+\n+    /**\n+     * Whether to retry\n+     */\n+    private Boolean retry;\n+\n+    /**\n+     * If it's reliable\n+     */\n+    private Boolean reliable;\n+\n+    /**\n+     * Thread limits for method invocations\n+     */\n+    private Integer executes;\n+\n+    /**\n+     * If it's deprecated\n+     */\n+    private Boolean deprecated;\n+\n+    /**\n+     * Whether to enable sticky\n+     */\n+    private Boolean sticky;\n+\n+    /**\n+     * Whether need to return\n+     */\n+    private Boolean isReturn;\n+\n+    /**\n+     * Callback instance when async-call is invoked\n+     */\n+    private Object oninvoke;\n+\n+    /**\n+     * Callback method when async-call is invoked\n+     */\n+    private String oninvokeMethod;\n+\n+    /**\n+     * Callback instance when async-call is returned\n+     */\n+    private Object onreturn;\n+\n+    /**\n+     * Callback method when async-call is returned\n+     */\n+    private String onreturnMethod;\n+\n+    /**\n+     * Callback instance when async-call has exception thrown\n+     */\n+    private Object onthrow;\n+\n+    /**\n+     * Callback method when async-call has exception thrown\n+     */\n+    private String onthrowMethod;\n+\n+    /**\n+     * The method arguments\n+     */\n+    private List<ArgumentConfig> arguments;\n+\n+    /**\n+     * These properties come from MethodConfig's parent Config module, they will neither be collected directly from xml or API nor be delivered to url\n+     */\n+    private String service;\n+    private String serviceId;\n+\n+    public MethodBuilder name(String name) {\n+        this.name = name;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder stat(Integer stat) {\n+        this.stat = stat;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder retry(Boolean retry) {\n+        this.retry = retry;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder reliable(Boolean reliable) {\n+        this.reliable = reliable;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder executes(Integer executes) {\n+        this.executes = executes;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder deprecated(Boolean deprecated) {\n+        this.deprecated = deprecated;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder sticky(Boolean sticky) {\n+        this.sticky = sticky;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder isReturn(Boolean isReturn) {\n+        this.isReturn = isReturn;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder oninvoke(Object oninvoke) {\n+        this.oninvoke = oninvoke;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder oninvokeMethod(String oninvokeMethod) {\n+        this.oninvokeMethod = oninvokeMethod;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder onreturn(Object onreturn) {\n+        this.onreturn = onreturn;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder onreturnMethod(String onreturnMethod) {\n+        this.onreturnMethod = onreturnMethod;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder onthrow(Object onthrow) {\n+        this.onthrow = onthrow;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder onthrowMethod(String onthrowMethod) {\n+        this.onthrowMethod = onthrowMethod;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder addArguments(List<? extends ArgumentConfig> arguments) {\n+        if (this.arguments == null) {\n+            this.arguments = new ArrayList<>();\n+        }\n+        this.arguments.addAll(arguments);\n+        return getThis();\n+    }\n+\n+    public MethodBuilder addArgument(ArgumentConfig argument) {\n+        if (this.arguments == null) {\n+            this.arguments = new ArrayList<>();\n+        }\n+        this.arguments.add(argument);\n+        return getThis();\n+    }\n+\n+    public MethodBuilder service(String service) {\n+        this.service = service;\n+        return getThis();\n+    }\n+\n+    public MethodBuilder serviceId(String serviceId) {\n+        this.serviceId = serviceId;\n+        return getThis();\n+    }\n+\n+    public MethodConfig build() {\n+        MethodConfig methodConfig = new MethodConfig();\n+        super.build(methodConfig);\n+\n+        methodConfig.setArguments(arguments);\n+        methodConfig.setDeprecated(deprecated);\n+        methodConfig.setExecutes(executes);\n+        methodConfig.setName(name);\n+        methodConfig.setOninvoke(oninvoke);\n+        methodConfig.setOninvokeMethod(oninvokeMethod);\n+        methodConfig.setOnreturn(onreturn);\n+        methodConfig.setOnreturnMethod(onreturnMethod);\n+        methodConfig.setOnthrow(onthrow);\n+        methodConfig.setOnthrowMethod(onthrowMethod);\n+        methodConfig.setReturn(isReturn);\n+        methodConfig.setService(service);\n+        methodConfig.setServiceId(serviceId);\n+        methodConfig.setSticky(sticky);\n+        methodConfig.setReliable(reliable);\n+        methodConfig.setStat(stat);\n+        methodConfig.setRetry(retry);\n+\n+        return methodConfig;\n+    }\n+\n+    @Override\n+    protected MethodBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MethodBuilder.java",
                "sha": "41bcd629ac5066902ae6684c50e1d3831a983c0c",
                "status": "added"
            },
            {
                "additions": 132,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ModuleBuilder.java",
                "changes": 132,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ModuleBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ModuleBuilder.java",
                "patch": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.config.ModuleConfig;\n+import org.apache.dubbo.config.MonitorConfig;\n+import org.apache.dubbo.config.RegistryConfig;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This is a builder for build {@link ModuleConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class ModuleBuilder extends AbstractBuilder<ModuleConfig, ModuleBuilder> {\n+    /**\n+     * Module name\n+     */\n+    private String name;\n+\n+    /**\n+     * Module version\n+     */\n+    private String version;\n+\n+    /**\n+     * Module owner\n+     */\n+    private String owner;\n+\n+    /**\n+     * Module's organization\n+     */\n+    private String organization;\n+\n+    /**\n+     * Registry centers\n+     */\n+    private List<RegistryConfig> registries;\n+\n+    /**\n+     * Monitor center\n+     */\n+    private MonitorConfig monitor;\n+\n+    /**\n+     * If it's default\n+     */\n+    private Boolean isDefault;\n+\n+    public ModuleBuilder name(String name) {\n+        this.name = name;\n+        return getThis();\n+    }\n+\n+    public ModuleBuilder version(String version) {\n+        this.version = version;\n+        return getThis();\n+    }\n+\n+    public ModuleBuilder owner(String owner) {\n+        this.owner = owner;\n+        return getThis();\n+    }\n+\n+    public ModuleBuilder organization(String organization) {\n+        this.organization = organization;\n+        return getThis();\n+    }\n+\n+    public ModuleBuilder addRegistries(List<? extends RegistryConfig> registries) {\n+        if (this.registries == null) {\n+            this.registries = new ArrayList<>();\n+        }\n+        this.registries.addAll(registries);\n+        return getThis();\n+    }\n+\n+    public ModuleBuilder addRegistry(RegistryConfig registry) {\n+        if (this.registries == null) {\n+            this.registries = new ArrayList<>();\n+        }\n+        this.registries.add(registry);\n+        return getThis();\n+    }\n+\n+    public ModuleBuilder monitor(MonitorConfig monitor) {\n+        this.monitor = monitor;\n+        return getThis();\n+    }\n+\n+    public ModuleBuilder isDefault(Boolean isDefault) {\n+        this.isDefault = isDefault;\n+        return getThis();\n+    }\n+\n+    public ModuleConfig build() {\n+        ModuleConfig moduleConfig = new ModuleConfig();\n+        super.build(moduleConfig);\n+\n+        moduleConfig.setDefault(isDefault);\n+        moduleConfig.setMonitor(monitor);\n+        moduleConfig.setName(name);\n+        moduleConfig.setOrganization(organization);\n+        moduleConfig.setOwner(owner);\n+        moduleConfig.setRegistries(registries);\n+        moduleConfig.setVersion(version);\n+\n+        return moduleConfig;\n+    }\n+\n+    @Override\n+    protected ModuleBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ModuleBuilder.java",
                "sha": "3e4653683bb3f2e7fb8b7d37ee9245cc0180fbd1",
                "status": "added"
            },
            {
                "additions": 137,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MonitorBuilder.java",
                "changes": 137,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MonitorBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MonitorBuilder.java",
                "patch": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import java.util.Map;\n+\n+import org.apache.dubbo.config.MonitorConfig;\n+\n+/**\n+ * This is a builder for build {@link MonitorConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class MonitorBuilder extends AbstractBuilder<MonitorConfig, MonitorBuilder> {\n+    /**\n+     * The protocol of the monitor, if the value is registry, it will search the monitor address from the registry center,\n+     * otherwise, it will directly connect to the monitor center\n+     */\n+    private String protocol;\n+\n+    /**\n+     * The monitor address\n+     */\n+    private String address;\n+\n+    /**\n+     * The monitor user name\n+     */\n+    private String username;\n+\n+    /**\n+     * The password\n+     */\n+    private String password;\n+\n+    private String group;\n+\n+    private String version;\n+\n+    private String interval;\n+\n+    /**\n+     * customized parameters\n+     */\n+    private Map<String, String> parameters;\n+\n+    /**\n+     * If it's default\n+     */\n+    private Boolean isDefault;\n+\n+    public MonitorBuilder protocol(String protocol) {\n+        this.protocol = protocol;\n+        return getThis();\n+    }\n+\n+    public MonitorBuilder address(String address) {\n+        this.address = address;\n+        return getThis();\n+    }\n+\n+    public MonitorBuilder username(String username) {\n+        this.username = username;\n+        return getThis();\n+    }\n+\n+    public MonitorBuilder password(String password) {\n+        this.password = password;\n+        return getThis();\n+    }\n+\n+    public MonitorBuilder group(String group) {\n+        this.group = group;\n+        return getThis();\n+    }\n+\n+    public MonitorBuilder version(String version) {\n+        this.version = version;\n+        return getThis();\n+    }\n+\n+    public MonitorBuilder interval(String interval) {\n+        this.interval = interval;\n+        return getThis();\n+    }\n+\n+    public MonitorBuilder isDefault(Boolean isDefault) {\n+        this.isDefault = isDefault;\n+        return getThis();\n+    }\n+\n+    public MonitorBuilder appendParameter(String key, String value) {\n+        this.parameters = appendParameter(parameters, key, value);\n+        return getThis();\n+    }\n+\n+    public MonitorBuilder appendParameters(Map<String, String> appendParameters) {\n+        this.parameters = appendParameters(parameters, appendParameters);\n+        return getThis();\n+    }\n+\n+    public MonitorConfig build() {\n+        MonitorConfig monitorConfig = new MonitorConfig();\n+        super.build(monitorConfig);\n+\n+        monitorConfig.setProtocol(protocol);\n+        monitorConfig.setAddress(address);\n+        monitorConfig.setUsername(username);\n+        monitorConfig.setPassword(password);\n+        monitorConfig.setGroup(group);\n+        monitorConfig.setVersion(version);\n+        monitorConfig.setInterval(interval);\n+        monitorConfig.setParameters(parameters);\n+        monitorConfig.setDefault(isDefault);\n+\n+        return monitorConfig;\n+    }\n+\n+    @Override\n+    protected MonitorBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/MonitorBuilder.java",
                "sha": "cfe48eacdd2e1a8e7f727f3937ac4118ff053354",
                "status": "added"
            },
            {
                "additions": 419,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProtocolBuilder.java",
                "changes": 419,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProtocolBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProtocolBuilder.java",
                "patch": "@@ -0,0 +1,419 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.config.ProtocolConfig;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is a builder for build {@link ProtocolConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class ProtocolBuilder extends AbstractBuilder<ProtocolConfig, ProtocolBuilder> {\n+    /**\n+     * Protocol name\n+     */\n+    private String name;\n+\n+    /**\n+     * Service ip address (when there are multiple network cards available)\n+     */\n+    private String host;\n+\n+    /**\n+     * Service port\n+     */\n+    private Integer port;\n+\n+    /**\n+     * Context path\n+     */\n+    private String contextpath;\n+\n+    /**\n+     * Thread pool\n+     */\n+    private String threadpool;\n+\n+    /**\n+     * Thread pool core thread size\n+     */\n+    private Integer corethreads;\n+\n+    /**\n+     * Thread pool size (fixed size)\n+     */\n+    private Integer threads;\n+\n+    /**\n+     * IO thread pool size (fixed size)\n+     */\n+    private Integer iothreads;\n+\n+    /**\n+     * Thread pool's queue length\n+     */\n+    private Integer queues;\n+\n+    /**\n+     * Max acceptable connections\n+     */\n+    private Integer accepts;\n+\n+    /**\n+     * Protocol codec\n+     */\n+    private String codec;\n+\n+    /**\n+     * Serialization\n+     */\n+    private String serialization;\n+\n+    /**\n+     * Charset\n+     */\n+    private String charset;\n+\n+    /**\n+     * Payload max length\n+     */\n+    private Integer payload;\n+\n+    /**\n+     * Buffer size\n+     */\n+    private Integer buffer;\n+\n+    /**\n+     * Heartbeat interval\n+     */\n+    private Integer heartbeat;\n+\n+    /**\n+     * Access log\n+     */\n+    private String accesslog;\n+\n+    /**\n+     * Transfort\n+     */\n+    private String transporter;\n+\n+    /**\n+     * How information is exchanged\n+     */\n+    private String exchanger;\n+\n+    /**\n+     * Thread dispatch mode\n+     */\n+    private String dispatcher;\n+\n+    /**\n+     * Networker\n+     */\n+    private String networker;\n+\n+    /**\n+     * Sever impl\n+     */\n+    private String server;\n+\n+    /**\n+     * Client impl\n+     */\n+    private String client;\n+\n+    /**\n+     * Supported telnet commands, separated with comma.\n+     */\n+    private String telnet;\n+\n+    /**\n+     * Command line prompt\n+     */\n+    private String prompt;\n+\n+    /**\n+     * Status check\n+     */\n+    private String status;\n+\n+    /**\n+     * Whether to register\n+     */\n+    private Boolean register;\n+\n+    /**\n+     * whether it is a persistent connection\n+     */\n+    //TODO add this to provider config\n+    private Boolean keepAlive;\n+\n+    // TODO add this to provider config\n+    private String optimizer;\n+\n+    /**\n+     * The extension\n+     */\n+    private String extension;\n+\n+    /**\n+     * The customized parameters\n+     */\n+    private Map<String, String> parameters;\n+\n+    /**\n+     * If it's default\n+     */\n+    private Boolean isDefault;\n+\n+    public ProtocolBuilder name(String name) {\n+        this.name = name;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder host(String host) {\n+        this.host = host;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder port(Integer port) {\n+        this.port = port;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder contextpath(String contextpath) {\n+        this.contextpath = contextpath;\n+        return getThis();\n+    }\n+\n+    /**\n+     * @see org.apache.dubbo.config.builders.ProtocolBuilder#contextpath(String)\n+     * @param path\n+     * @return ProtocolBuilder\n+     */\n+    @Deprecated\n+    public ProtocolBuilder path(String path) {\n+        this.contextpath = path;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder threadpool(String threadpool) {\n+        this.threadpool = threadpool;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder corethreads(Integer corethreads) {\n+        this.corethreads = corethreads;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder threads(Integer threads) {\n+        this.threads = threads;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder iothreads(Integer iothreads) {\n+        this.iothreads = iothreads;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder queues(Integer queues) {\n+        this.queues = queues;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder accepts(Integer accepts) {\n+        this.accepts = accepts;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder codec(String codec) {\n+        this.codec = codec;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder serialization(String serialization) {\n+        this.serialization = serialization;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder charset(String charset) {\n+        this.charset = charset;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder payload(Integer payload) {\n+        this.payload = payload;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder buffer(Integer buffer) {\n+        this.buffer = buffer;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder heartbeat(Integer heartbeat) {\n+        this.heartbeat = heartbeat;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder accesslog(String accesslog) {\n+        this.accesslog = accesslog;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder transporter(String transporter) {\n+        this.transporter = transporter;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder exchanger(String exchanger) {\n+        this.exchanger = exchanger;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder dispatcher(String dispatcher) {\n+        this.dispatcher = dispatcher;\n+        return getThis();\n+    }\n+\n+    /**\n+     * @see org.apache.dubbo.config.builders.ProtocolBuilder#dispatcher(String)\n+     * @param dispather\n+     * @return ProtocolBuilder\n+     */\n+    @Deprecated\n+    public ProtocolBuilder dispather(String dispather) {\n+        this.dispatcher = dispather;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder networker(String networker) {\n+        this.networker = networker;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder server(String server) {\n+        this.server = server;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder client(String client) {\n+        this.client = client;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder telnet(String telnet) {\n+        this.telnet = telnet;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder prompt(String prompt) {\n+        this.prompt = prompt;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder status(String status) {\n+        this.status = status;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder register(Boolean register) {\n+        this.register = register;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder keepAlive(Boolean keepAlive) {\n+        this.keepAlive = keepAlive;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder optimizer(String optimizer) {\n+        this.optimizer = optimizer;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder extension(String extension) {\n+        this.extension = extension;\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder appendParameter(String key, String value) {\n+        this.parameters = appendParameter(parameters, key, value);\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder appendParameters(Map<String, String> appendParameters) {\n+        this.parameters = appendParameters(parameters, appendParameters);\n+        return getThis();\n+    }\n+\n+    public ProtocolBuilder isDefault(Boolean isDefault) {\n+        this.isDefault = isDefault;\n+        return getThis();\n+    }\n+\n+    public ProtocolConfig build() {\n+        ProtocolConfig protocolConfig = new ProtocolConfig();\n+        super.build(protocolConfig);\n+\n+        protocolConfig.setAccepts(accepts);\n+        protocolConfig.setAccesslog(accesslog);\n+        protocolConfig.setBuffer(buffer);\n+        protocolConfig.setCharset(charset);\n+        protocolConfig.setClient(client);\n+        protocolConfig.setCodec(codec);\n+        protocolConfig.setContextpath(contextpath);\n+        protocolConfig.setCorethreads(corethreads);\n+        protocolConfig.setDefault(isDefault);\n+        protocolConfig.setDispatcher(dispatcher);\n+        protocolConfig.setExchanger(exchanger);\n+        protocolConfig.setExtension(extension);\n+        protocolConfig.setHeartbeat(heartbeat);\n+        protocolConfig.setHost(host);\n+        protocolConfig.setIothreads(iothreads);\n+        protocolConfig.setKeepAlive(keepAlive);\n+        protocolConfig.setName(name);\n+        protocolConfig.setNetworker(networker);\n+        protocolConfig.setOptimizer(optimizer);\n+        protocolConfig.setParameters(parameters);\n+        protocolConfig.setPayload(payload);\n+        protocolConfig.setPort(port);\n+        protocolConfig.setPrompt(prompt);\n+        protocolConfig.setQueues(queues);\n+        protocolConfig.setRegister(register);\n+        protocolConfig.setSerialization(serialization);\n+        protocolConfig.setServer(server);\n+        protocolConfig.setStatus(status);\n+        protocolConfig.setTelnet(telnet);\n+        protocolConfig.setThreadpool(threadpool);\n+        protocolConfig.setThreads(threads);\n+        protocolConfig.setTransporter(transporter);\n+\n+        return protocolConfig;\n+    }\n+\n+    @Override\n+    protected ProtocolBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProtocolBuilder.java",
                "sha": "42e55503ea79b094c1b0ab246e5b8e0e8032371b",
                "status": "added"
            },
            {
                "additions": 293,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProviderBuilder.java",
                "changes": 293,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProviderBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProviderBuilder.java",
                "patch": "@@ -0,0 +1,293 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.config.ProviderConfig;\n+\n+/**\n+ * This is a builder for build {@link ProviderConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class ProviderBuilder extends AbstractServiceBuilder<ProviderConfig, ProviderBuilder> {\n+\n+    /**\n+     * Service ip addresses (used when there are multiple network cards available)\n+     */\n+    private String host;\n+\n+    /**\n+     * Service port\n+     */\n+    private Integer port;\n+\n+    /**\n+     * Context path\n+     */\n+    private String contextpath;\n+\n+    /**\n+     * Thread pool\n+     */\n+    private String threadpool;\n+\n+    /**\n+     * Thread pool size (fixed size)\n+     */\n+    private Integer threads;\n+\n+    /**\n+     * IO thread pool size (fixed size)\n+     */\n+    private Integer iothreads;\n+\n+    /**\n+     * Thread pool queue length\n+     */\n+    private Integer queues;\n+\n+    /**\n+     * Max acceptable connections\n+     */\n+    private Integer accepts;\n+\n+    /**\n+     * Protocol codec\n+     */\n+    private String codec;\n+\n+    /**\n+     * The serialization charset\n+     */\n+    private String charset;\n+\n+    /**\n+     * Payload max length\n+     */\n+    private Integer payload;\n+\n+    /**\n+     * The network io buffer size\n+     */\n+    private Integer buffer;\n+\n+    /**\n+     * Transporter\n+     */\n+    private String transporter;\n+\n+    /**\n+     * How information gets exchanged\n+     */\n+    private String exchanger;\n+\n+    /**\n+     * Thread dispatching mode\n+     */\n+    private String dispatcher;\n+\n+    /**\n+     * Networker\n+     */\n+    private String networker;\n+\n+    /**\n+     * The server-side implementation model of the protocol\n+     */\n+    private String server;\n+\n+    /**\n+     * The client-side implementation model of the protocol\n+     */\n+    private String client;\n+\n+    /**\n+     * Supported telnet commands, separated with comma.\n+     */\n+    private String telnet;\n+\n+    /**\n+     * Command line prompt\n+     */\n+    private String prompt;\n+\n+    /**\n+     * Status check\n+     */\n+    private String status;\n+\n+    /**\n+     * Wait time when stop\n+     */\n+    private Integer wait;\n+\n+    /**\n+     * Whether to use the default protocol\n+     */\n+    private Boolean isDefault;\n+\n+    public ProviderBuilder host(String host) {\n+        this.host = host;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder port(Integer port) {\n+        this.port = port;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder contextPath(String contextPath) {\n+        this.contextpath = contextPath;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder threadPool(String threadPool) {\n+        this.threadpool = threadPool;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder threads(Integer threads) {\n+        this.threads = threads;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder ioThreads(Integer ioThreads) {\n+        this.iothreads = ioThreads;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder queues(Integer queues) {\n+        this.queues = queues;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder accepts(Integer accepts) {\n+        this.accepts = accepts;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder codec(String codec) {\n+        this.codec = codec;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder charset(String charset) {\n+        this.charset = charset;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder payload(Integer payload) {\n+        this.payload = payload;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder buffer(Integer buffer) {\n+        this.buffer = buffer;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder transporter(String transporter) {\n+        this.transporter = transporter;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder exchanger(String exchanger) {\n+        this.exchanger = exchanger;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder dispatcher(String dispatcher) {\n+        this.dispatcher = dispatcher;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder networker(String networker) {\n+        this.networker = networker;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder server(String server) {\n+        this.server = server;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder client(String client) {\n+        this.client = client;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder telnet(String telnet) {\n+        this.telnet = telnet;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder prompt(String prompt) {\n+        this.prompt = prompt;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder status(String status) {\n+        this.status = status;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder wait(Integer wait) {\n+        this.wait = wait;\n+        return getThis();\n+    }\n+\n+    public ProviderBuilder isDefault(Boolean isDefault) {\n+        this.isDefault = isDefault;\n+        return getThis();\n+    }\n+\n+    public ProviderConfig build() {\n+        ProviderConfig provider = new ProviderConfig();\n+        super.build(provider);\n+\n+        provider.setHost(host);\n+        provider.setPort(port);\n+        provider.setContextpath(contextpath);\n+        provider.setThreadpool(threadpool);\n+        provider.setThreads(threads);\n+        provider.setIothreads(iothreads);\n+        provider.setQueues(queues);\n+        provider.setAccepts(accepts);\n+        provider.setCodec(codec);\n+        provider.setPayload(payload);\n+        provider.setCharset(charset);\n+        provider.setBuffer(buffer);\n+        provider.setTransporter(transporter);\n+        provider.setExchanger(exchanger);\n+        provider.setDispatcher(dispatcher);\n+        provider.setNetworker(networker);\n+        provider.setServer(server);\n+        provider.setClient(client);\n+        provider.setTelnet(telnet);\n+        provider.setPrompt(prompt);\n+        provider.setStatus(status);\n+        provider.setWait(wait);\n+        provider.setDefault(isDefault);\n+\n+        return provider;\n+    }\n+\n+    @Override\n+    protected ProviderBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ProviderBuilder.java",
                "sha": "8a6e2213dc4c3138c60fc09df6d2cdfac62b05bd",
                "status": "added"
            },
            {
                "additions": 134,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ReferenceBuilder.java",
                "changes": 134,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ReferenceBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ReferenceBuilder.java",
                "patch": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import org.apache.dubbo.config.ConsumerConfig;\n+import org.apache.dubbo.config.MethodConfig;\n+import org.apache.dubbo.config.ReferenceConfig;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This is a builder for build {@link ReferenceConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class ReferenceBuilder<T> extends AbstractReferenceBuilder<ReferenceConfig, ReferenceBuilder<T>> {\n+    /**\n+     * The interface name of the reference service\n+     */\n+    private String interfaceName;\n+\n+    /**\n+     * The interface class of the reference service\n+     */\n+    private Class<?> interfaceClass;\n+\n+    /**\n+     * client type\n+     */\n+    private String client;\n+\n+    /**\n+     * The url for peer-to-peer invocation\n+     */\n+    private String url;\n+\n+    /**\n+     * The method configs\n+     */\n+    private List<MethodConfig> methods;\n+\n+    /**\n+     * The consumer config (default)\n+     */\n+    private ConsumerConfig consumer;\n+\n+    /**\n+     * Only the service provider of the specified protocol is invoked, and other protocols are ignored.\n+     */\n+    private String protocol;\n+\n+    public ReferenceBuilder<T> interfaceName(String interfaceName) {\n+        this.interfaceName = interfaceName;\n+        return getThis();\n+    }\n+\n+    public ReferenceBuilder<T> interfaceClass(Class<?> interfaceClass) {\n+        this.interfaceClass = interfaceClass;\n+        return getThis();\n+    }\n+\n+    public ReferenceBuilder<T> client(String client) {\n+        this.client = client;\n+        return getThis();\n+    }\n+\n+    public ReferenceBuilder<T> url(String url) {\n+        this.url = url;\n+        return getThis();\n+    }\n+\n+    public ReferenceBuilder<T> addMethods(List<MethodConfig> methods) {\n+        if (this.methods == null) {\n+            this.methods = new ArrayList<>();\n+        }\n+        this.methods.addAll(methods);\n+        return getThis();\n+    }\n+\n+    public ReferenceBuilder<T> addMethod(MethodConfig method) {\n+        if (this.methods == null) {\n+            this.methods = new ArrayList<>();\n+        }\n+        this.methods.add(method);\n+        return getThis();\n+    }\n+\n+    public ReferenceBuilder<T> consumer(ConsumerConfig consumer) {\n+        this.consumer = consumer;\n+        return getThis();\n+    }\n+\n+    public ReferenceBuilder<T> protocol(String protocol) {\n+        this.protocol = protocol;\n+        return getThis();\n+    }\n+\n+    public ReferenceConfig<T> build() {\n+        ReferenceConfig<T> reference = new ReferenceConfig<>();\n+        super.build(reference);\n+\n+        reference.setInterface(interfaceName);\n+        if (interfaceClass != null) {\n+            reference.setInterface(interfaceClass);\n+        }\n+        reference.setClient(client);\n+        reference.setUrl(url);\n+        reference.setMethods(methods);\n+        reference.setConsumer(consumer);\n+        reference.setProtocol(protocol);\n+\n+        return reference;\n+    }\n+\n+    @Override\n+    protected ReferenceBuilder<T> getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ReferenceBuilder.java",
                "sha": "d0df60208e51d0bf4b1d149e93afe093b0ebf47d",
                "status": "added"
            },
            {
                "additions": 309,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/RegistryBuilder.java",
                "changes": 309,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/RegistryBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/RegistryBuilder.java",
                "patch": "@@ -0,0 +1,309 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import java.util.Map;\n+\n+import org.apache.dubbo.config.RegistryConfig;\n+\n+/**\n+ * This is a builder for build {@link RegistryConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class RegistryBuilder extends AbstractBuilder<RegistryConfig, RegistryBuilder> {\n+    /**\n+     * Register center address\n+     */\n+    private String address;\n+\n+    /**\n+     * Username to login register center\n+     */\n+    private String username;\n+\n+    /**\n+     * Password to login register center\n+     */\n+    private String password;\n+\n+    /**\n+     * Default port for register center\n+     */\n+    private Integer port;\n+\n+    /**\n+     * Protocol for register center\n+     */\n+    private String protocol;\n+\n+    /**\n+     * Network transmission type\n+     */\n+    private String transporter;\n+\n+    private String server;\n+\n+    private String client;\n+\n+    private String cluster;\n+\n+    /**\n+     * The group the services registry in\n+     */\n+    private String group;\n+\n+    private String version;\n+\n+    /**\n+     * Request timeout in milliseconds for register center\n+     */\n+    private Integer timeout;\n+\n+    /**\n+     * Session timeout in milliseconds for register center\n+     */\n+    private Integer session;\n+\n+    /**\n+     * File for saving register center dynamic list\n+     */\n+    private String file;\n+\n+    /**\n+     * Wait time before stop\n+     */\n+    private Integer wait;\n+\n+    /**\n+     * Whether to check if register center is available when boot up\n+     */\n+    private Boolean check;\n+\n+    /**\n+     * Whether to allow dynamic service to register on the register center\n+     */\n+    private Boolean dynamic;\n+\n+    /**\n+     * Whether to export service on the register center\n+     */\n+    private Boolean register;\n+\n+    /**\n+     * Whether allow to subscribe service on the register center\n+     */\n+    private Boolean subscribe;\n+\n+    /**\n+     * The customized parameters\n+     */\n+    private Map<String, String> parameters;\n+\n+    /**\n+     * Whether it's default\n+     */\n+    private Boolean isDefault;\n+\n+    /**\n+     * Simple the registry. both useful for provider and consumer\n+     *\n+     * @since 2.7.0\n+     */\n+    private Boolean simplified;\n+    /**\n+     * After simplify the registry, should add some paramter individually. just for provider.\n+     * <p>\n+     * such as: extra-keys = A,b,c,d\n+     *\n+     * @since 2.7.0\n+     */\n+    private String extraKeys;\n+\n+    public RegistryBuilder address(String address) {\n+        this.address = address;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder username(String username) {\n+        this.username = username;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder password(String password) {\n+        this.password = password;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder port(Integer port) {\n+        this.port = port;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder protocol(String protocol) {\n+        this.protocol = protocol;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder transporter(String transporter) {\n+        this.transporter = transporter;\n+        return getThis();\n+    }\n+\n+    /**\n+     * @param transport\n+     * @see #transporter(String)\n+     * @deprecated\n+     */\n+    @Deprecated\n+    public RegistryBuilder transport(String transport) {\n+        this.transporter = transport;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder server(String server) {\n+        this.server = server;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder client(String client) {\n+        this.client = client;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder cluster(String cluster) {\n+        this.cluster = cluster;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder group(String group) {\n+        this.group = group;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder version(String version) {\n+        this.version = version;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder timeout(Integer timeout) {\n+        this.timeout = timeout;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder session(Integer session) {\n+        this.session = session;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder file(String file) {\n+        this.file = file;\n+        return getThis();\n+    }\n+\n+    /**\n+     * @param wait\n+     * @see org.apache.dubbo.config.builders.ProviderBuilder#wait(Integer)\n+     * @deprecated\n+     */\n+    @Deprecated\n+    public RegistryBuilder wait(Integer wait) {\n+        this.wait = wait;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder isCheck(Boolean check) {\n+        this.check = check;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder isDynamic(Boolean dynamic) {\n+        this.dynamic = dynamic;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder register(Boolean register) {\n+        this.register = register;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder subscribe(Boolean subscribe) {\n+        this.subscribe = subscribe;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder appendParameter(String key, String value) {\n+        this.parameters = appendParameter(parameters, key, value);\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder appendParameters(Map<String, String> appendParameters) {\n+        this.parameters = appendParameters(parameters, appendParameters);\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder isDefault(Boolean isDefault) {\n+        this.isDefault = isDefault;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder simplified(Boolean simplified) {\n+        this.simplified = simplified;\n+        return getThis();\n+    }\n+\n+    public RegistryBuilder extraKeys(String extraKeys) {\n+        this.extraKeys = extraKeys;\n+        return getThis();\n+    }\n+\n+    public RegistryConfig build() {\n+        RegistryConfig registry = new RegistryConfig();\n+        super.build(registry);\n+\n+        registry.setAddress(address);\n+        registry.setCheck(check);\n+        registry.setClient(client);\n+        registry.setCluster(cluster);\n+        registry.setDefault(isDefault);\n+        registry.setDynamic(dynamic);\n+        registry.setExtraKeys(extraKeys);\n+        registry.setFile(file);\n+        registry.setGroup(group);\n+        registry.setParameters(parameters);\n+        registry.setPassword(password);\n+        registry.setPort(port);\n+        registry.setProtocol(protocol);\n+        registry.setRegister(register);\n+        registry.setServer(server);\n+        registry.setSession(session);\n+        registry.setSimplified(simplified);\n+        registry.setSubscribe(subscribe);\n+        registry.setTimeout(timeout);\n+        registry.setTransporter(transporter);\n+        registry.setUsername(username);\n+        registry.setVersion(version);\n+        registry.setWait(wait);\n+\n+        return registry;\n+    }\n+\n+    @Override\n+    protected RegistryBuilder getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/RegistryBuilder.java",
                "sha": "f64e595f37dfc41ba66b323996482473eecf8d60",
                "status": "added"
            },
            {
                "additions": 152,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ServiceBuilder.java",
                "changes": 152,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ServiceBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ServiceBuilder.java",
                "patch": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.builders;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.dubbo.config.MethodConfig;\n+import org.apache.dubbo.config.ProviderConfig;\n+import org.apache.dubbo.config.ServiceConfig;\n+\n+/**\n+ * This is a builder for build {@link ServiceConfig}.\n+ *\n+ * @since 2.7\n+ */\n+public class ServiceBuilder<U> extends AbstractServiceBuilder<ServiceConfig, ServiceBuilder<U>> {\n+    /**\n+     * The interface name of the exported service\n+     */\n+    private String interfaceName;\n+\n+    /**\n+     * The interface class of the exported service\n+     */\n+    private Class<?> interfaceClass;\n+\n+    /**\n+     * The reference of the interface implementation\n+     */\n+    private U ref;\n+\n+    /**\n+     * The service name\n+     */\n+    private String path;\n+\n+    /**\n+     * The method configuration\n+     */\n+    private List<MethodConfig> methods;\n+\n+    /**\n+     * The provider configuration\n+     */\n+    private ProviderConfig provider;\n+\n+    /**\n+     * The providerIds\n+     */\n+    private String providerIds;\n+    /**\n+     * whether it is a GenericService\n+     */\n+    private String generic;\n+\n+    public ServiceBuilder<U> interfaceName(String interfaceName) {\n+        this.interfaceName = interfaceName;\n+        return getThis();\n+    }\n+\n+    public ServiceBuilder<U> interfaceClass(Class<?> interfaceClass) {\n+        this.interfaceClass = interfaceClass;\n+        return getThis();\n+    }\n+\n+    public ServiceBuilder<U> ref(U ref) {\n+        this.ref = ref;\n+        return getThis();\n+    }\n+\n+    public ServiceBuilder<U> path(String path) {\n+        this.path = path;\n+        return getThis();\n+    }\n+\n+    public ServiceBuilder<U> addMethod(MethodConfig method) {\n+        if (this.methods == null) {\n+            this.methods = new ArrayList<>();\n+        }\n+        this.methods.add(method);\n+        return getThis();\n+    }\n+\n+    public ServiceBuilder<U> addMethods(List<? extends MethodConfig> methods) {\n+        if (this.methods == null) {\n+            this.methods = new ArrayList<>();\n+        }\n+        this.methods.addAll(methods);\n+        return getThis();\n+    }\n+\n+    public ServiceBuilder<U> provider(ProviderConfig provider) {\n+        this.provider = provider;\n+        return getThis();\n+    }\n+\n+    public ServiceBuilder<U> providerIds(String providerIds) {\n+        this.providerIds = providerIds;\n+        return getThis();\n+    }\n+\n+    public ServiceBuilder<U> generic(String generic) {\n+        this.generic = generic;\n+        return getThis();\n+    }\n+\n+    @Override\n+    public ServiceBuilder<U> mock(String mock) {\n+        throw new IllegalArgumentException(\"mock doesn't support on provider side\");\n+    }\n+\n+    @Override\n+    public ServiceBuilder<U> mock(Boolean mock) {\n+        throw new IllegalArgumentException(\"mock doesn't support on provider side\");\n+    }\n+\n+    public ServiceConfig<U> build() {\n+        ServiceConfig<U> serviceConfig = new ServiceConfig<>();\n+        super.build(serviceConfig);\n+\n+        serviceConfig.setInterface(interfaceName);\n+        serviceConfig.setInterface(interfaceClass);\n+        serviceConfig.setRef(ref);\n+        serviceConfig.setPath(path);\n+        serviceConfig.setMethods(methods);\n+        serviceConfig.setProvider(provider);\n+        serviceConfig.setProviderIds(providerIds);\n+        serviceConfig.setGeneric(generic);\n+\n+        return serviceConfig;\n+    }\n+\n+    @Override\n+    protected ServiceBuilder<U> getThis() {\n+        return this;\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/builders/ServiceBuilder.java",
                "sha": "6628d3aba5975347a1475c711ce1d9eb540d8d6a",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/utils/ReferenceConfigCache.java",
                "sha": "09f12dadeca5092c9b9cf357ca30948049a19dd6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractConfigTest.java",
                "sha": "2d40cc369fd8e2f6a6b2eb9720ec5a10924957ce",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractInterfaceConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractInterfaceConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractInterfaceConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractInterfaceConfigTest.java",
                "sha": "6f30581b875465b8ca28b76fbcfe2c08eabbbc27",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractMethodConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractMethodConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractMethodConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractMethodConfigTest.java",
                "sha": "dde506a809372c32bb32939ef230cebf6d77bbed",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractReferenceConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractReferenceConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractReferenceConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractReferenceConfigTest.java",
                "sha": "c77d3fde823c22e69cb2381c1bb82d36347dcfd6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractServiceConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractServiceConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractServiceConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/AbstractServiceConfigTest.java",
                "sha": "f015975eab03bbcc18f58138d2a7194765d94f03",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ApplicationConfigTest.java",
                "sha": "d560921de4b9f6314a6494a74f1c33c73e022bdb",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ArgumentConfigTest.java",
                "sha": "1d9b08fe794e906f44f6ede86a6525e2e8269a03",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConfigCenterConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConfigCenterConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConfigCenterConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConfigCenterConfigTest.java",
                "sha": "96e55825d747102c03674ff73f575136b56a761a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ConsumerConfigTest.java",
                "sha": "503349210d677734fae36ec84ee286f7ccb9265c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MethodConfigTest.java",
                "sha": "1d976d7e4ee5032d756ffd074ac50a59e2cf5fda",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ModuleConfigTest.java",
                "sha": "176d6fca183887f24fe678d214f2b2aafa016fa4",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MonitorConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MonitorConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MonitorConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/MonitorConfigTest.java",
                "sha": "7a43de16b5a71e85e3dc7026b61b611618081475",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProtocolConfigTest.java",
                "sha": "ecbd153c4d0ddd36a40636f5ad6cb007743b334a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ProviderConfigTest.java",
                "sha": "6dfe92646a447c5f1b1ca2f11f2a1b75dfc4bc7b",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java",
                "sha": "8a5cf100ea6f8d7f001416053c63972ef93524dd",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/RegistryConfigTest.java",
                "sha": "bb52242bf1090a08ddb0e2b67e357f785f0189ff",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ServiceConfigTest.java",
                "sha": "296538cbd94ee643473ca9187fc262c1afc078f0",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractBuilderTest.java",
                "sha": "dfbd74a29e5dce120c7c84df8d37d7d97f3dfff3",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractInterfaceBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractInterfaceBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractInterfaceBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractInterfaceBuilderTest.java",
                "sha": "149d0304709cc6989f0775885de813031e5f98d7",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractMethodBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractMethodBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractMethodBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractMethodBuilderTest.java",
                "sha": "0d1fd08da2368cb19f337b8f0efee77a1f5adbde",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractReferenceBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractReferenceBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractReferenceBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractReferenceBuilderTest.java",
                "sha": "2a5f697684d22742a6edbb3a6522bdb4e02cbc3f",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractServiceBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractServiceBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractServiceBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/AbstractServiceBuilderTest.java",
                "sha": "59dee6e652539cd880051957edc163a865174b33",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ApplicationBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ApplicationBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ApplicationBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ApplicationBuilderTest.java",
                "sha": "87d5693f2223cdb0a526cbf017093086867bd31e",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ArgumentBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ArgumentBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ArgumentBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ArgumentBuilderTest.java",
                "sha": "bfaff92a9f02333ca4f2e0cf63bacccb05d42c55",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ConfigCenterBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ConfigCenterBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ConfigCenterBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ConfigCenterBuilderTest.java",
                "sha": "daf1fa817ee3d1d117bb55bbd5eb1ef1afbfdab0",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ConsumerBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ConsumerBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ConsumerBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ConsumerBuilderTest.java",
                "sha": "e054bedc63d290ec4666f82ed03811b3d9ea60ca",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MetadataReportBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MetadataReportBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MetadataReportBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MetadataReportBuilderTest.java",
                "sha": "2e9ee789ea7fc754cf64cd035b9ca4968bc7613e",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MethodBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MethodBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MethodBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MethodBuilderTest.java",
                "sha": "5bf0beeb1f88985abd637484bb3e7e3b0939a5d3",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ModuleBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ModuleBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ModuleBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ModuleBuilderTest.java",
                "sha": "8bad86a9682554ae86b7206a6457906c5e39ecef",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MonitorBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MonitorBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MonitorBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/MonitorBuilderTest.java",
                "sha": "71fc43e2a152af0d16ac0c6d3cc8c4563ac93e98",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ProtocolBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ProtocolBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ProtocolBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ProtocolBuilderTest.java",
                "sha": "df3c8c7fdbd7d85d77fbd8239f27c9ad6fee81a2",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ProviderBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ProviderBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ProviderBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ProviderBuilderTest.java",
                "sha": "9d3dfb152f9fd83d888248c6510fff2518bf6c9b",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ReferenceBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ReferenceBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ReferenceBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ReferenceBuilderTest.java",
                "sha": "0a8ec039bc1af53bc1781985770eba7d937579de",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/RegistryBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/RegistryBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/RegistryBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/RegistryBuilderTest.java",
                "sha": "c676b1d2f025b742ad1b64c154f7531391588863",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ServiceBuilderTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ServiceBuilderTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ServiceBuilderTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/builders/ServiceBuilderTest.java",
                "sha": "fb1a4cdfd390ec4e76de86ed686dd0515ed40ca9",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/cache/CacheTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/cache/CacheTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/cache/CacheTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/cache/CacheTest.java",
                "sha": "b9b5c45d435c044912bed718335b0c117618eafa",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/invoker/DelegateProviderMetaDataInvokerTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/invoker/DelegateProviderMetaDataInvokerTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/invoker/DelegateProviderMetaDataInvokerTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/invoker/DelegateProviderMetaDataInvokerTest.java",
                "sha": "56cc05486e25d8354afb7ab4aa2feee933474843",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/ExporterSideConfigUrlTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/ExporterSideConfigUrlTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/ExporterSideConfigUrlTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/ExporterSideConfigUrlTest.java",
                "sha": "16122908c851933cac5e98d942b0a96a4ca34771",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/InvokerSideConfigUrlTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/InvokerSideConfigUrlTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/InvokerSideConfigUrlTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/InvokerSideConfigUrlTest.java",
                "sha": "da0f60717762d2b67d9d64895b0b5e4de3269d36",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/UrlTestBase.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/UrlTestBase.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/UrlTestBase.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/url/UrlTestBase.java",
                "sha": "f5a1a73ed224abee55820d6de8701de33d6b6301",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ReferenceConfigCacheTest.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ReferenceConfigCacheTest.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ReferenceConfigCacheTest.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/utils/ReferenceConfigCacheTest.java",
                "sha": "2af6da720ecf0e7b1ffe7d10e582a6975d395bdf",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/pom.xml",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/pom.xml?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/pom.xml",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/pom.xml",
                "sha": "988715baf4fe950b715d783f8d28a1211c74ca88",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/02cca0976f68db240867c7016d1a58b35cfd4a4b/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/AnnotationBean.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/AnnotationBean.java?ref=02cca0976f68db240867c7016d1a58b35cfd4a4b",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/AnnotationBean.java",
                "raw_url": "https://github.com/apache/dubbo/raw/02cca0976f68db240867c7016d1a58b35cfd4a4b/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/AnnotationBean.java",
                "sha": "9af02a1e16c9ef8b78b2a1055d50bb6658e36076",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ReferenceBean.java",
                "sha": "3daec132ac5c29cef6f0c86a3b2d346bbe72e415",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/ServiceBean.java",
                "sha": "7c216a64a972d16db3cb585fdc171f2c7636c062",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AbstractAnnotationConfigBeanBuilder.java",
                "sha": "7f7afd98d66f55e66af1185004c24eeee799af7f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationInjectedBeanPostProcessor.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationInjectedBeanPostProcessor.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationInjectedBeanPostProcessor.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationInjectedBeanPostProcessor.java",
                "sha": "30592a1a7cb9c320e5b461430914b2bef0382360",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessor.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessor.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessor.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/DubboConfigBindingBeanPostProcessor.java",
                "sha": "96c4d3885b0a275b05f9b4141c52fdacf8b14790",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "sha": "82fb9b25eb0a8febb8cc180c904b6801ca0b2dc6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilder.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilder.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilder.java",
                "sha": "d4aef6a37ecbc19fad77a438666719da2770e68d",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceAnnotationBeanPostProcessor.java",
                "sha": "22fa70422d5942037776c16b30f22024092dd3c8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceBeanNameBuilder.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceBeanNameBuilder.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceBeanNameBuilder.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ServiceBeanNameBuilder.java",
                "sha": "6cd712408be7d0c7c74134e72db383dd28217817",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigBindingRegistrar.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigBindingRegistrar.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigBindingRegistrar.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigBindingRegistrar.java",
                "sha": "e797e5585ec302f3ef87e188e6e52bb73ab1b28f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfiguration.java",
                "sha": "3c5a43f02277ebdf48b59e63ef804c069489eb41",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
                "previous_filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationSelector.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
                "sha": "cc5f4f8c722f1a6c807e994bf33265ed7d4e0aea",
                "status": "renamed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java",
                "sha": "47bafa53b54262897dc445a5b60a914ec2b1fc78",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigBinding.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigBinding.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigBinding.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigBinding.java",
                "sha": "54fc3373eacd958063cacdd60e0cad0f64c5d9e7",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/dubbo/blob/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/event/ServiceBeanExportedEvent.java",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/event/ServiceBeanExportedEvent.java?ref=897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/event/ServiceBeanExportedEvent.java",
                "previous_filename": "dubbo-metrics/dubbo-metrics-api/src/main/java/org/apache/dubbo/metrics/Counter.java",
                "raw_url": "https://github.com/apache/dubbo/raw/897b80de3840c0bc9d9928dc1fb3f28ca8d78cc7/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/event/ServiceBeanExportedEvent.java",
                "sha": "93c950dfcdea5c0b44e96f3fe3a7c9819a832901",
                "status": "renamed"
            }
        ],
        "message": "Merge master branch to 3.x dev branch (#3718)\n\n* Release resource after use in ConfigParserTest (#3127)\r\n\r\nRelease resource after use in ConfigParserTest\r\n\r\n* add javadoc for registry and some code (#3140)\r\n\r\nadd javadoc for registry and optimize code\r\n\r\n* Correct spelling error (#3146)\r\n\r\n* Code optimization (#3118)\r\n\r\n* code optimization\r\n* useless import\r\n* optimization\r\n\r\n* Code rule (#3016)\r\n\r\n* code optimization (#3167)\r\n\r\ncode optimization\r\n\r\n* Add javadoc for dubbo-serialization module(#3002). (#3004)\r\n\r\nAdd javadoc for dubbo-serialization module(#3002).\r\n\r\n* optimize ReconnectTimerTask's log output (#3162)\r\n\r\n* optimize log output\r\n\r\n* Separate logs for reconnect and close\r\n\r\n* remove reconnect exception log\r\n\r\n* add some small optimize (#3171)\r\n\r\n* modify some log describe\r\n\r\n* use java8 lambda expression\r\n\r\n* fix telnet trace times is always 1 (#3038)\r\n\r\n* fix telnet trace times is always 1\r\n\r\n* use StringUtils determine if the string is empty\r\n\r\n* Fix 3105 , make invoke command with Json string parameter without \"class\" key\r\n\r\n* Fix 3105 \uff0cKeep the class key to support overloaded methods\r\n\r\n* optimize InvokerTelnetHandlerTest\r\n\r\n* Upgrade junt to junit5 (#3149)\r\n\r\n* upgrade junit to junit5\r\n\r\n* modify test\r\n\r\n* \u6279\u91cf\u4fee\u6539upgrade_junt_to_junit5\r\n\r\n* \u5220\u9664\u591a\u4f59\u7684\u6587\u4ef6\r\n\r\n* fi test case\r\n\r\n* Disabled soem test case temporarily\r\n\r\n* upgrade junit to junit5 and batch modify test case\r\n\r\n* copy some code from jupiter5.4.0.M1 for some issues\r\n\r\n* \u4fee\u6539rat\u798f\u6cfd\r\n\r\n* update rat path\r\n\r\n* revert case\r\n\r\n* add junit-platform-surefire-provider to maven-surefire-plugin\r\n\r\n* update dependency\r\n\r\n* fix coverage issue (#1)\r\n\r\n* use jupiter 5.4.0-M1 and remove junit5 source code\r\n\r\n* Format change.\r\n\r\n* fix wrong word spelling (#3217)\r\n\r\n*  Fix provicer --> provider (#3222)\r\n\r\n* Optimize the code:  use logger instead of printStackTrace(). (#3202)\r\n\r\n* Optimize code: remove unnecessary judgment code. (#3196)\r\n\r\n* Optimize the code: fix CallbackServiceCodec.java exportOrunexportCallbackService method issue. (#3199)\r\n\r\n* Optimize the code: fix url to null, NullPointerException, change private variable to camel mode.\r\n* Optimize the code: exportOrUnexportCallbackService method camel mode.\r\n* Optimize the code: fix method:encodeInvocationArgument private callbackStatus is camel writing.\r\n* Optimize the code: fix name issue\r\n* Exporter is a noun, we should use a verb here, like Export.\r\n* The generics that can be inferred automatically are also deleted.\r\n\r\n* Refactor telnet invoke command (#3210)\r\n\r\n* refactor telnet invoke command\r\n\r\n* add select command for telnet\r\n\r\n* fix test case\r\n\r\n* Remove deprecated AnnotationBean, please refer #1485 for the new method to replace. (#3232)\r\n\r\n* [Dubbo-3231]keep TagRouter consistent with 2.6.x (#3233)\r\n\r\n* keep TagRouter consistent with 2.6.x\r\n\r\n* refactor filterUsingStaticTag using lambda in tagRouter\r\n\r\n* Modified to lower camel case (#3003)\r\n\r\n* wrong event setting (#3043)\r\n\r\n* wrong event setting\r\n\r\n* modify event seeting\r\n\r\n* modify\r\n\r\n* call the util method (#3230)\r\n\r\n* Code optimization, call the util method\r\n\r\n* mofidy\r\n\r\n* modify *\r\n\r\n* import package\r\n\r\n* Qos heart (#3170)\r\n\r\n* qos heart question fix #3165\r\n\r\n* modify\r\n\r\n* judge if it's a IdleStateEvent\r\n\r\n* add UT\r\n\r\n* modify\r\n\r\n* Merge pull request #3246 from cvictory:2.7.0-release remove gson from dubbo.jar in shading mode , and change to dependency way.\r\n\r\n* just for modify comments and imports\r\n\r\n* remove gson from dubbo.jar in shading mode, add dependency\r\n\r\n* Extract compareTo impl to Router interface and concrete Router only responsible for provide priority. (#3240)\r\n\r\nsomething is waiting for us to disscuss:\r\n1. Every Route implement should set a priority?\r\n2.https://github.com/apache/incubator-dubbo/issues/3249\r\n\r\n* Protocol compatibility (#3254)\r\n\r\nadd default method into Protocol .\r\n\r\n* remove getContext() (#3235)\r\n\r\n* modify some typos (#3257)\r\n\r\n* modify some typos\r\n\r\n* fix some other addionalParameterKeys and paramter typos\r\n\r\n* Merge 2.6.6 source code into 2.7 (#3241)\r\n\r\n* Merge 2.6.6 source code into 2.7\r\n\r\n* Fixed logging level for https://github.com/apache/incubator-dubbo/pull/3241#discussion_r248195964\r\n\r\n* Change the implementation for apache/incubator-dubbo#3241\r\n\r\n* Remove the implementation Ordered, because it does not work in Spring Framework : apache/incubator-dubbo#3241\r\n\r\n* Remove the implementation Ordered, because it does not work in Spring Framework : apache/incubator-dubbo#3241\r\n\r\n* Only Optimize Imports\r\n\r\n* Add activation for the release profile\r\n\r\n* Update the Java SE link to Java 8.\r\n\r\n* Move the doclint configuration to correct position.\r\n\r\n* Deactivate maven release profile.\r\n\r\n* Fix final name.\r\n\r\n* Optimize the Apollo extension of Config-Center SPI\r\n\r\n* must shutdown thread pool when no in use (#3255)\r\n\r\n* must shutdown thread pool when no in use\r\n\r\n* Update 2.7.0 release notes\r\n\r\n* Igonre .patch file.\r\n\r\n* [maven-release-plugin] prepare release dubbo-2.7.0\r\n\r\n* [maven-release-plugin] prepare for next development iteration\r\n\r\n* [maven-release-plugin] prepare release dubbo-2.7.0\r\n\r\n* [maven-release-plugin] prepare for next development iteration\r\n\r\n* Bring back redis auth UT (#3278)\r\n\r\n* Optimize code: Fix Constructor to determine illegal logic problems (#3197)\r\n\r\n* fix return type (#3284)\r\n\r\n* use standardcharset.utf-8 instead of literal (#3285)\r\n\r\n* use standardcharset.utf-8 instead of literal\r\n\r\n* remove unused import\r\n\r\n* Move the iteration of methods of a service config to the if block of the class have method declared not by Object; remove some useless parameter type (#3282)\r\n\r\n* Add shutdown command for telnet (#3280)\r\n\r\n* telnet add shutdown command\r\n\r\n* refactor rename shutDown to shutdown\r\n\r\n* remove unregister  in doDestroy\r\n\r\n* unregister the ShutdownHook when the shutdown command invoked\r\n\r\n* Ignore mvn wrapper binary files.\r\n\r\n* [maven-release-plugin] prepare release dubbo-2.7.0\r\n\r\n* [maven-release-plugin] prepare for next development iteration\r\n\r\n* Fix typo (#3293)\r\n\r\n* Improve/heartbeat (#3276)\r\n\r\n* add the notice of code style\r\n\r\n* modify the pic\r\n\r\n* del teh faq.md, move to dubbo admin\r\n\r\n* improve:remove the heartbeat on server side\r\n\r\n* improve:change the scope of timer to static\r\n\r\n* code optimization (#3297)\r\n\r\n* further enhancement for pull request #3297, also fix an issue introduced in this pull request (#3303)\r\n\r\n* further enhancement for pull request #3297, also fix an issue introduced\r\nin this pull request\r\n\r\n* rename the variable\r\n\r\n* enhance the readability\r\n\r\n* Fix UT conflicts of merging 2.7.0-release\r\n\r\n* Remove usage of classes in Junit 4\r\n\r\n* Remove usage of classes in Junit 4\r\n\r\n* Remove usage of classes in Junit 4\r\n\r\n* Remove usage of classes in Junit 4\r\n\r\n* Remove usage of classes in Junit 4\r\n\r\n* remove not used import (#3309)\r\n\r\n* remove unused import (#3311)\r\n\r\n* remove not used import\r\n\r\n* remove unused import\r\n\r\n* Degrade some UTs in dubbo-config-spring to use junit 4.\r\n\r\n* use beforeEach and afterEach\r\n\r\n* Merge pull request #3295, unregister consumer url when client destroyed (referenceconfig#destroy).\r\n\r\n* fix client reconnect offline provider.\r\n\r\n* refactor cancel future.\r\n\r\n* fix client reconnect offline provider.\r\n\r\n* refactor cancel future.\r\n\r\n* fix client reconnect offline provider.\r\n\r\n* refactor cancel future.\r\n\r\n* fix unregister when client destroyed\r\n\r\n* Optimize heartbeat (#3299)\r\n\r\n* Optimize heartbeat.\r\nWe should cancel the timeout when the client or server is close.\r\n\r\n* change the hashedWheelTimer's ticks\r\n\r\n* Optimize tasks keeper.\r\n\r\n* fix timeout cancel to task cancel.\r\nkeep task directly.\r\n\r\n* simply telnet command enabled check logic (#3316)\r\n\r\n* simply telnet command enabled check\r\n\r\n* Add comments, manually merge #3181.\r\n\r\n* Fix for loop reference test pass on protostuff (#3252)\r\n\r\n* Fix maven compile warning (#3322)\r\n\r\n* Merge pull request #3174, make timeout filter not work in async way.\r\n\r\n* Merge pull request #3323, fix double-checked locking.\r\n\r\n* Merge pull request #2959, fix a bug of service config.\r\n\r\n* Fix random ut falling in DubboMonitorTest (#3327)\r\n\r\n* Merge pull request #3017, fixes #2981, refresh invocation's attachments in each invoke.\r\n\r\nFixes #2981.\r\n\r\n* Merge pull request #3141, optimize outbound event and some code formatting.\r\n\r\n* Merge pull request #3333, add @Override for sub-class method.\r\n\r\n* Fix thrift protocol, use path to locate exporter. (#3331)\r\n\r\n* Fix thrift protocol, use path to locate exporter.\r\n\r\n* Fix UT\r\n\r\n* fix #2842. remove duplicate SPI definitions for 2.7.x (#3340)\r\n\r\nremove duplicate SPI definitions for 2.7.x\r\n\r\n* fix org.apache.dubbo replace com.alibaba.dubbo (#3338)\r\n\r\norg.apache.dubbo replace com.alibaba.dubbo\r\n\r\n* fix the typo of notification mail list address (#3335)\r\n\r\nfix the typo of notification mail list address\r\n\r\n* Review code of TypeDefinitionBuilder (#3064)\r\n\r\n* Review code of TypeDefinitionBuilder\r\n1. use init method to init builds' list\r\n\r\n* use single list for all builders.\r\nSeems like the builder is thread-safe, we can keep them static and final.\r\n\r\n* clean code.\r\n\r\n* [Dubbo-3339] Remove futility check code (#3346)\r\n\r\n* Remove futility check code\r\n\r\n* add no-argument constructor method to URL.java fix #3342 (#3350)\r\n\r\n* Fix NullPointerException when Hessian instantiate URL with JavaDeserializer\r\n\r\n* Enable ZookeeperMetadataReportTest (#3360)\r\n\r\n* Package name error (#3354)\r\n\r\n* some optimize on ExtensionLoader (#3307)\r\n\r\n* some optimize on ExtensionLoader\r\n* make ci rerun\r\n* fix compile error\r\n* fix ci failure\r\n\r\n* Fix some unit test failure (#3337)\r\n\r\n* Fix compilation error fix #3365 (#3366)\r\n\r\n* [Dubbo-900] Fix \u901a\u8fc7 override \u4fee\u6539 hessian\u534f\u8bae\u7684\u63d0\u4f9b\u8005\u7684\u914d\u7f6e \u4e0d\u751f\u6548 #900 (#3363)\r\n\r\n* reExport fail fix#900\r\n\r\n* modify\r\n\r\n* use Objects.equals\r\n\r\n* compare URL for all proxy protocol\r\n\r\n* delete useless judgment (#3326)\r\n\r\n* Fix self assignment (#3301)\r\n\r\n* Fix self assignment\r\n* Replace set with list to insure item order\r\n* Minor tweak of codestyle\r\n\r\n* [Dubbo-2423] Multicast demo fails with message \"Can't assign requested address\". (#3317)\r\n\r\n* Fix #2423, Multicast demo fails with message \"Can't assign requested address\"\r\n\r\n* temporarily disable ipv6 test\r\n\r\n* simplify map empty judgment (#3376)\r\n\r\n* \u5e94\u8be5\u662f\u975e\u7a7a\u624d\u5faa\u73af\uff0c\u4e0d\u7136\u4f1a\u5bfc\u81f4\u5728\u4f7f\u7528redis\u6ce8\u518c\u4e2d\u5fc3\u65f6\u6d88\u8d39\u8005\u5f15\u7528\u4e0d\u5230\u670d\u52a1 (#3291)\r\n\r\n* enhance unit test and logging (#3374)\r\n\r\n* enhance unit test and logging\r\n\r\n* enhance logging message\r\n\r\n* fix unit test\r\n\r\n* make code clean\r\n\r\n* follow up for #3291 (#3378)\r\n\r\n* correct typos,eg: occured -> occurred (#3380)\r\n\r\nLGTM\r\n\r\n* follow up for #3376 (#3377)\r\n\r\n* [Dubbo-3347] Update package name in README file  fix#3347 (#3362)\r\n\r\n* [Enhancement] Replace explicit resource management with try-with-resource (#3281)\r\n\r\n* first pull request (#3396)\r\n\r\n* [Dubbo-3361] Make DubboAppender extends from FileAppender (#3383)\r\n\r\n* Modify deprecated class to updated class in some comments (#3402)\r\n\r\n* Merge pull request #3341, start to use IdleStateHandler in Netty4.\r\n\r\n* Enhancement/logger factory (#3389)\r\n\r\n* polishing LoggerFactory\r\n* polishing code using map.computeIfAbsent\r\n* fix ci failure\r\n* remove unnecessary break in switch\r\n* call overloaded method\r\n* update as requested\r\n* add unit test\r\n\r\n* move construction of ConfigChangeEvent outside the lambda expression (#3398)\r\n\r\n* make ConfigChangeEvent immutable (#3403)\r\n\r\n* Fix license issues (#3382)\r\n\r\n* Fix license issues\r\n\r\n* revert change to Netty's copyright\r\n\r\n* [Dubbo-936]fix The nc command is unstable in the dubbo startup script #936 (#3375)\r\n\r\n* fix dubbo\u542f\u52a8\u811a\u672c\u4e2dnc\u547d\u4ee4\u4e0d\u7a33\u5b9a #936\r\n\r\n* modify\r\n\r\n* refactor ScriptRouter: (#3404)\r\n\r\n1, remove priority field, the same as super class\r\n2, remove getUrl method, the same as super class\r\n3, refactor constructor, extract method: getRule, getEngine\r\n4, refactor route, extract method: createBindings, getRoutedInvokers\r\n\r\n* Clean pom.xml file #3186 (#3211)\r\n\r\n* update as requested\r\n* add meta space size arguments\r\n\r\n* [Enhancement] Use ThreadLocalRandom and try-with-resource (#3239)\r\n\r\n* polish\r\n\r\n* fix code reviews\r\n\r\n* empty\r\n\r\n* polish pom.xml (remove test profile and jvm permSize args) (#3407)\r\n\r\n* update dubbo samples' link (#3413)\r\n\r\n* Acesslog dateformat enhancemnet (#3274)\r\n\r\n* #3026 Access log related changed\r\n\r\n* Reviwe comment incorporated given by @satansk and removed unuded method\r\n\r\n* Incorporated @beiwei30 review comment, incorporated common-lang3 time package modified version\r\n\r\n* Added rat entry for common lang3 FastDateFormat related java files\r\n\r\n* switch back to jdk's dateformatter\r\n\r\n* refactor loadClass method (#3410)\r\n\r\n* refactor: expression is always true, remove it\r\n(names != null && names.length > 0)\r\n\r\n* Update dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java\r\n\r\nCo-Authored-By: wanghbxxxx <wanghbxxxx@gmail.com>\r\n\r\n* Update ExtensionLoader.java\r\n\r\n* Update ExtensionLoader.java\r\n\r\n* Update ExtensionLoader.java\r\n\r\n* Update ExtensionLoader.java\r\n\r\n* implement pull request #3412 on master branch (#3418)\r\n\r\n* event of response fix#3244 (#3247)\r\n\r\n* [Dubbo-3069]Use regular expressions to judge fix #3069 (#3093)\r\n\r\n* Use regular expressions to judge fix #3069\r\n\r\n*  moved into Constants class\r\n\r\n* modify\r\n\r\n* Unused import\r\n\r\n* modify\r\n\r\n* can not put it in front\r\n\r\n* catch NumberFormatException and return 'null' if necessary\r\n\r\n* remove recursive call\r\n\r\n* support .1 and 1.\r\n\r\n* modify\r\n\r\n* Support multiple shared links (#2457)\r\n\r\n* make dubbo support multiple shared links, upgrading RPC throughput\r\n\r\n* Fix compilation error\r\n\r\n* Fix compilation error\r\n\r\n* opti import\r\n\r\n* if add {}\r\n\r\n* checkstyle fail\r\n\r\n* fix getSharedClient referenceCount calculation error bug\r\n\r\n* \u4f18\u5316 import\r\n\r\n* Fix the problem that the getSharedClient thread is not safe\r\n\r\n* Fix the problem that the getSharedClient thread is not safe\r\n\r\n* Try fixing ci error, https://travis-ci.org/apache/incubator-dubbo/jobs/453185295\r\n\r\n* \u5c06DEFAULT_CONNECTIONS_KEY\u4fee\u6539\u6210SERVICE_CONNECTIONS_KEY\r\n\r\n* dubbo.xsd add shareconnections attribute,\r\n\r\n* Optimize code format\r\n\r\n* Fix mult connect ghost connect  problem\r\n\r\n* format code\r\n\r\n* Remove the concept of ghostClientMap and ghost connection. In fact, ghostClient is LazyConnectExchangeClient. At present, the LazyConnectExchangeClient object is added directly in ReferenceCountExchangeClient to realize the mapping relationship with ReferenceCountExchangeClient. The relationship between previous ghostClient and url mapping is not applicable to the current new share. Multiple connections.\r\n\r\n* Optimize the ReferenceCountExchangeClient and remove the reference to the lazyConnectExchangeClient because it doesn't make much sense; add locks in the close operation of the AbstractClient, because connect, disconnect, and close should not be done at the same time.\r\n\r\n* format code\r\n\r\n* try remove close lock\r\n\r\n* Restore close method\r\n\r\n* Restore ReferenceCountExchangeClient reference to LazyConnectExchangeClient object\r\n\r\n* Optimize the logic of using the LazyConnectExchangeClient inside the ReferenceCountExchangeClient; Supplemental shared multi-connected unit test\r\n\r\n* remove useless catch exception (#3421)\r\n\r\n* remove duplicated import (#3440)\r\n\r\n* Update junit to 5.4.0 release version (#3441)\r\n\r\n* update junit to 5.4.0 release version\r\n* remove uesles config\r\n\r\n* remove duplicated unused method and move unit test (#3446)\r\n\r\n* Add checkstyle rule for redundant import (#3444)\r\n\r\n* add checkstyle for redundant import and fix all issue in repo\r\n\r\n* fix git diff issue\r\n\r\n* Enhance the java doc of dubbo-container module (#3437)\r\n\r\nFixes #2994\r\n\r\n* refactor adaptive extension class code creation: extract class AdaptiveClassCodeGenerator (#3419)\r\n\r\n* refactor adaptive extension class code creation:\r\nextract createAdaptiveExtensionClassCode to class\r\nAdaptiveClassCodeGenerator\r\n\r\n* add some comment\r\n\r\n* add license and comment\r\n\r\n* remove main method\r\n\r\n* refactor javassist compiler: extract class CtClassBuilder (#3424)\r\n\r\n* refactor JavassistCompiler\r\n\r\n* rename variable names\r\n\r\n* reformat code\r\n\r\n* refactor: prepend modifier of constructor, field and method outside the\r\nJavassistClassInfo\r\n\r\n* add null for ClassUtils.getSimpleClassName\r\n\r\n* rename JavassistClassInfo to CtClassBuilder\r\n\r\n* fix #2619: is there a problem in NettyBackedChannelBuffer.setBytes(...)? (#3448)\r\n\r\n* Bugfix/timeout queue full (#3451)\r\n\r\nreplace ArrayBlockingQueue with LinkedBlockingQueue and remove capacity.\r\n\r\n* extract 2 methods: (#3453)\r\n\r\nisSetter: test if a method is a setter\r\ngetSetterProperty: get property for setter, for instance setVersion\r\nreturn \"version\"\r\n\r\n* Add delay export  test case (#3447)\r\n\r\n* [Dubbo-3237]fix connectionMonitor in RestProtocol seems not work #3237 (#3455)\r\n\r\n* extract method to cache default extension name (#3456)\r\n\r\n* possibly bug fix (#3460)\r\n\r\n* Merge pull request #3470, Apache parent pom version is updated to 21.\r\n\r\n* A follow up of 6058846, update apache pom version to 21\r\n\r\n* Class comment error (#3481)\r\n\r\n* enhancement: extract duplicated method calls to variable (#3482)\r\n\r\nextract duplicated method calls to variable\r\n\r\n* [Enhancement]: language level migration (#3485)\r\n\r\n* use java7 diamond operator\r\n\r\n* replace Collections.sort with List.sort\r\n\r\n* extract duplicated code blocks\r\n\r\n* use StandardCharsets.UTF_8\r\n\r\n* use try-with-resources\r\n\r\n* use java7 diamond operator\r\n\r\n* enhance log message\r\n\r\n* fix unit tests failures\r\n\r\n* Branch refactor version (#3471)\r\n\r\n* fix typo (#3491)\r\n\r\n* [Enhancement]: RestProtocol (#3480)\r\n\r\n* Merge pull request #3466, Condition is not properly used.\r\n\r\nfixes #1917\r\n\r\n* fix issue#1293: A question for ReferenceConfigCache. (#3505)\r\n\r\n* [Enhancement]: refactor categorizing with Collectors.groupingBy (#3490)\r\n\r\n* Fix invocation of toString on an array (#3507)\r\n\r\nFix invocation of toString on an array\r\n\r\n* Fix inefficient use of keySet iterator instead of entrySet iterator (#3508)\r\n\r\nFix inefficient use of keySet iterator instead of entrySet iterator\r\n\r\n* Boolean class use method toString() instead of String.valueof() (#3495)\r\n\r\n* Merge pull request #3515, add metadataFactory SPI config for all-in-one shade jar.\r\n\r\nFixes #3514, missing redis metadata SPI extension in dubbo.jar.\r\n\r\n* Merge pull request  #3513, bump up hessian-lite version\r\n\r\nFixes #3423.\r\n\r\n* [Dubbo-3106]Make getRegistered return unmodifiable collection. #3106 (#3425)\r\n\r\n* make getRegistered return unmodifiable collection. #3106\r\n\r\n* fix ci failure\r\n\r\n* Merge pull request #3527 Bricks-Man/incubator-dubbo, fix accidentally check exchanger in setDispatcher\r\n\r\nfixes #3518\r\n\r\n* Fix UT error following PR #3527\r\n\r\n* Cache CompiledScript #390 (#3524)\r\n\r\n* Merge pull request #3532 from beiwei30:use-concurrent-map, avoid using synchronized.\r\n\r\n* Fix context filter's bug (#3526)\r\n\r\n* Modify MetadataReportRetry ThreadName (#3550)\r\n\r\n* fix: rename the thread name from DubboRegistryFailedRetryTimer to DubboMetadataReportRetryTimer in MetadataReportRetry\r\n\r\n* fix issue #3533 (#3548)\r\n\r\n* fix issue #195: @Reference check=false\u4e0d\u751f\u6548 (#3530)\r\n\r\n* Merge pull request #3528, fixes #208, setOnreturn does not work with generic invocation.\r\n\r\n* fix issue #274: monitor\u7684cluster\u4e00\u5b9a\u662ffailsafe\u7684\uff0c\u800c\u4e14\u65e0\u6cd5\u4fee\u6539 (#3523)\r\n\r\n* fix issue #274: monitor\u7684cluster\u4e00\u5b9a\u662ffailsafe\u7684\uff0c\u800c\u4e14\u65e0\u6cd5\u4fee\u6539\r\n\r\n* remove unused import\r\n\r\n* Merge pull request #3520, fix #538 polish the process of deciding the ip to bind.\r\n\r\n* Fix npe when package is null. (#3557)\r\n\r\n* a more elegant way (#3567)\r\n\r\n* Correct security report link.\r\n\r\n* Add go implementation link.\r\n\r\n* fix DubboCodec re-implements Codec2 #2977 (#3547)\r\n\r\n* Merge pull request #3566, optimize compareTo of Router to guarantee consistent behaviour.\r\n\r\n* Merge pull request #3577, rmi support generic.\r\n\r\nFixes #2779\r\n\r\n* Fixes #3367, fail to parse config text with white space (#3589)\r\n\r\n* [DUBBO-3476]: NullPointerException happened when using SpringContainer.getContext() (#3600)\r\n\r\n*     #3476: NullPointerException happened when using SpringContainer.getContext()\r\n\r\n* rollback change for DEFAULT_SPRING_CONFIG\r\n\r\n* replace magic string \"dubbo\" with constants (#3602)\r\n\r\n* dubbo-parent\u662f\u5934\u6587\u4ef6\u4e0d\u5305\u542b\u4f9d\u8d56\u3002\u66ff\u6362\u6210dubbo, \u540c\u65f6\u589e\u52a0zk\u8fde\u63a5\u7684\u4f9d\u8d56\u3002\u56e0\u4e3acurator-framework\u5728dubbo-dependencies\u5f53\u4e2d\u53bb\u9664\u6389\u4e86zookeeper\u7684\u5305\uff0c\u6240\u4ee5\u5916\u90e8\u4f7f\u7528\u7684\u65f6\u5019\u9700\u8981\u989d\u5916\u914d\u7f6e. (#3516)\r\n\r\n* Merge pul request #3607, introduce dubbo-dependencies-zookeeper.\r\n\r\n* Merge RestProtocolTest.java (#3597)\r\n\r\n* [DUBBO-3494]: Refactor URL to URLBuilder (#3500)\r\n\r\n* refactor URL to URLBuilder. #3494\r\n\r\n* remove unrelated changes\r\n\r\n* replace more with URLBuilder\r\n\r\n* fix ci failure\r\n\r\n* remove unnecessary comment\r\n\r\n* Dubbo-3473 Fix Not Properly Closed Resources (#3474)\r\n\r\n* Dump TagRouterRule (#3536)\r\n\r\nDump TagRouterRule since the TagRouterRule can be changed to `null` by ConfigCenter\r\n\r\n* Merge pull request #3578, fixes #3289, enhance tagRoute:  support ip expression match.\r\n\r\n* Merge pull request #2614, follow up for issue #195.\r\n\r\n* [Dubbo-3367] Fail to parse config text with white space (#3590)\r\n\r\n* Merge pull request #3558, check if remoteGroup is empty or not.\r\n\r\nFixes  #3555.\r\n\r\n* Fluent style builder API support(#3431) (#3549)\r\n\r\n* Update maven central badge.\r\n\r\n* Merge pull request #3593, Consul support for Registry and Metadata.\r\n\r\n* [Dubbo-808] Support etcd registry (#3605)\r\n\r\n* Merge https://github.com/dubbo/dubbo-registry-etcd into incubator-dubbo\r\n\r\n* Add UT to ConfigurationUtilsTest\r\n\r\n* rename dubbo-ops to dubbo-admin (#3628)\r\n\r\n* typo for AccessLogFilter (#3633)\r\n\r\n* Fix some etcd3 registry bugs. (#3632)\r\n\r\n* fix some bugs.\r\n* fix typo\r\n* cancel keep alive if recovery failed.\r\n* remove duplicate license header.\r\n\r\n* [Dubbo-3570] repackage compatible enhancement. (#3622)\r\n\r\n* Fixes #3570, NoSuchMethodError are thrown when add custorm Filter using dubbo2.6.5 and JDK1.6 and upgrade to dubbo2.7.0\r\n* Add compatible UT\r\n* fix UT\r\n\r\n* Replace RpcStatus to count (#2984) (#3636)\r\n\r\n* Fix when qos is disable,log will print every time. (#3397)\r\n\r\n* fix when qos is disable,log will print every time.\r\n\r\n* change qos server boos thread number 1\r\n\r\n* add openjdk to travis (#3300)\r\n\r\n* add openjdk to travis\r\n\r\n* add openjdk to travis\r\n\r\n* Merge pull request #3647, workaround to fix #3646.\r\n\r\n* add metrics integration #3598 (#3643)\r\n\r\n* add metrics integration\r\n\r\n* add license\r\n\r\n* Merge pull request #3639, Add equivalent annotation support for MethodConfig.\r\n\r\nFixes #2045\r\n\r\n* Fixes #3478, #3477 and #3445\r\n\r\n* fix heartbeat internal (#3579)\r\n\r\n* Merge pull request #3603, configcenter share zookeeper connection with registry.\r\n\r\nFixes #3288\r\n\r\n* correct spelling error (#3645)\r\n\r\n* make snakeyaml transitive, governance rule relies on this dependency to work. (#3659)\r\n\r\n* check null for path before call rest server (#3665)\r\n\r\n* [Dubbo-3653] etcd as config center (#3663)\r\n\r\n* Minor refactor, no functinoal change.\r\n\r\n* Separate ConnectionStateListener\r\n\r\n* Simplify code\r\n\r\n* Fix typo\r\n\r\n* Support get external config from etcd config center\r\n\r\n* Polish diamond operator\r\n\r\n* Initial etcd support as config center\r\n\r\n* Add a put interface for JEtcdClient\r\n\r\n* Enhanced Etcd config center support with the ability to watch and cancel watch\r\n\r\n* Polish code\r\n\r\n* Distinguish modification event and delete event\r\n\r\n* Add etcd registry and configcenter to dubbo-all\r\n\r\n* Watch again when connection is re-established\r\n\r\n* Polish code and fix some documentation errors (#3655)\r\n\r\n* [Dubbo-3657] Fix junit test failed (#3658)\r\n\r\n* Improve the checking of lease id. #3684 (#3692)\r\n\r\nIt looks good.\r\n\r\n* Optimize DefaultTpsLimiter (#3654)\r\n\r\n* Correct @Parameter config of field of ConfigCenterConfig (#3688)\r\n\r\n* fix-3678 (#3681)\r\n\r\n* Add unit test for unpack and stick pack of dubbo and telent (#3703)\r\n\r\n* fix compile error after merged master branch\r\n\r\n* remove useless imports\r\n\r\n* add AddressListener into RegistryDirectory",
        "parent": "https://github.com/apache/dubbo/commit/02cca0976f68db240867c7016d1a58b35cfd4a4b",
        "patched_files": [
            "SimpleDataStore.java",
            "AbstractReferenceConfig.java",
            "Log.java",
            "JSON.java",
            "ConsumerConfig.java",
            "Ext6Impl1.java",
            "UnsafeStringReader.java",
            "IOUtils.java",
            "ServiceAnnotationBeanPostProcessor.java",
            "NamedInternalThreadFactory.java",
            "DubboConfigConfigurationRegistrar.java",
            "StringUtils.java",
            "EnableDubboConfigBinding.java",
            "CompatibleTypeUtils.java",
            "ReferenceBuilder.java",
            "ConfigParser.java",
            "Yylex.java",
            "AnnotationInjectedBeanPostProcessor.java",
            "ArgumentConfig.java",
            "ConditionRouter.java",
            "JSONReader.java",
            "ServiceBeanNameBuilder.java",
            "ProtocolConfig.java",
            "LICENSE",
            "Assert.java",
            "AbstractServiceConfig.java",
            "AbstractClusterInvoker.java",
            "EagerThreadPool.java",
            "JavaBeanSerializeUtil.java",
            "Serialization.java",
            "Service.java",
            "ReferenceBeanBuilder.java",
            "ExecutionList.java",
            "Extension.java",
            "FailoverClusterInvoker.java",
            "AbsentConfigurator.java",
            "TaskQueue.java",
            "FailsafeLogger.java",
            "JSONWriter.java",
            "LRUCache.java",
            "OverrideConfiguratorFactory.java",
            "ConsistentHashLoadBalance.java",
            "MethodBuilder.java",
            "URLBuilder.java",
            "ServiceBean.java",
            "StatusUtils.java",
            "LegacyInvocation.java",
            "Holder.java",
            "AtomicPositiveInteger.java",
            "ClusterUtils.java",
            "MethodConfig.java",
            "Configurator.java",
            "MergeableClusterInvoker.java",
            "GenericService.java",
            "ServiceConfig.java",
            "ConfigCenterBuilder.java",
            "Constants.java",
            "CompatibleRouter2.java",
            "FailfastClusterInvoker.java",
            "RoundRobinLoadBalance.java",
            "ListenableRouter.java",
            "NewRouter.java",
            "CompatibleAnnotationBeanDefinitionParser.java",
            "ArrayUtils.java",
            "checkstyle.xml",
            "ClassHelper.java",
            "Method.java",
            "Status.java",
            "MonitorBuilder.java",
            "FileRouterFactory.java",
            "UrlUtils.java",
            "README.md",
            "AbstractBuilder.java",
            "MockDispatcher.java",
            "JavassistCompiler.java",
            "TagRouter.java",
            "ReferenceConfig.java",
            "CtClassBuilder.java",
            "Resetable.java",
            "ServiceBeanExportedEvent.java",
            "AbstractConfig.java",
            "ProviderConfig.java",
            "ServiceRouter.java",
            "AbortPolicyWithReport.java",
            "ClassGenerator.java",
            "ForkingClusterInvoker.java",
            "AbstractAnnotationConfigBeanBuilder.java",
            "LogUtil.java",
            "AbstractInterfaceConfig.java",
            "StaticDirectory.java",
            "LogHelper.java",
            "Protocol.java",
            "LoadStatusChecker.java",
            "AbstractRouter.java",
            "UnsafeStringWriter.java",
            "Bytes.java",
            "CollectionUtils.java",
            "MockClusterInvoker.java",
            "DubboAppender.java",
            "ApplicationBuilder.java",
            "AnnotationBean.java",
            "Parameters.java",
            "RegistryBuilder.java",
            "StreamUtils.java",
            "AdaptiveClassCodeGenerator.java",
            "Proxy.java",
            "DubboBuilders.java",
            "DubboConfigBindingRegistrar.java",
            "CONTRIBUTING.md",
            "HashedWheelTimer.java",
            "Argument.java",
            "ReflectUtils.java",
            "ConfigUtils.java",
            "InternalThreadLocal.java",
            "DubboConfigBindingBeanPostProcessor.java",
            "AbstractInterfaceBuilder.java",
            "ComplexObject.java",
            "ReferenceBean.java",
            ".travis.yml",
            "AppRouter.java",
            "AdaptiveCompiler.java",
            "PropertiesConfiguration.java",
            "DubboConfigConfiguration.java",
            "Cache.java",
            "Wrapper.java",
            "ActivateComparator.java",
            "ConfigurationUtils.java",
            "LimitedThreadPool.java",
            "Logger.java",
            "MetadataReportConfig.java",
            "MemoryStatusChecker.java",
            "ScriptRouter.java",
            "Version.java",
            "MonitorConfig.java",
            "ReferenceAnnotationBeanPostProcessor.java",
            "ConfigCenterConfig.java",
            "CompatibleReferenceBeanBuilder.java",
            "Reference.java",
            "RegistryConfig.java",
            "AbstractReferenceBuilder.java",
            "ReferenceConfigCache.java",
            "Slf4jLogger.java",
            "FixedThreadPool.java",
            "ExtensionLoader.java",
            "ApplicationConfig.java",
            "Invoker.java",
            "CompatibleRouter.java",
            "LoggerAdapter.java",
            "ModuleConfig.java",
            "org.apache.dubbo.remoting.Dispatcher",
            "AbstractMethodConfig.java",
            "OverrideConfigurator.java",
            "ModuleBuilder.java",
            "FailbackClusterInvoker.java",
            "CHANGES.md",
            "PojoUtils.java",
            "MockInvokersSelector.java",
            "ClassUtils.java",
            "DelegateProviderMetaDataInvoker.java",
            "JavaBeanAccessor.java",
            "EnableDubboConfig.java",
            "Stack.java",
            "Filter.java",
            "ExecutorUtil.java",
            "NamedThreadFactory.java",
            "JdkCompiler.java",
            "CachedThreadPool.java",
            "MetadataReportBuilder.java",
            "ProviderBuilder.java",
            "log4j.xml",
            "Mixin.java",
            "AbstractServiceBuilder.java",
            "ConsumerBuilder.java",
            "AbstractMethodBuilder.java",
            "URL.java",
            "AbstractLoadBalance.java",
            "LoggerFactory.java",
            "NetUtils.java",
            "Router.java",
            "ServiceBuilder.java",
            "UrlTestBase.java",
            "EagerThreadPoolExecutor.java",
            "RandomLoadBalance.java",
            "ArgumentBuilder.java",
            "pom.xml",
            "UnsafeByteArrayOutputStream.java",
            "ProtocolBuilder.java",
            "LegacyInvoker.java",
            "UnsafeByteArrayInputStream.java",
            "EchoService.java",
            "CIDRUtils.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "ServiceBeanNameBuilderTest.java",
            "UnsafeByteArrayOutputStreamTest.java",
            "ProtocolBuilderTest.java",
            "ServiceBeanTest.java",
            "URLBuilderTest.java",
            "AbstractBuilderTest.java",
            "NamedThreadFactoryTest.java",
            "RegistryBuilderTest.java",
            "LoadBalanceBaseTest.java",
            "ConsistentHashLoadBalanceTest.java",
            "LeastActiveBalanceTest.java",
            "LRUCacheTest.java",
            "ArrayUtilsTest.java",
            "AbstractInterfaceConfigTest.java",
            "DubboConfigConfigurationTest.java",
            "JSONReaderTest.java",
            "FailoverClusterInvokerTest.java",
            "LogTest.java",
            "UnsafeStringReaderTest.java",
            "JSONWriterTest.java",
            "ApplicationConfigTest.java",
            "ProviderBuilderTest.java",
            "StickyTest.java",
            "CollectionUtilsTest.java",
            "ClassGeneratorTest.java",
            "ConsumerConfigTest.java",
            "JavassistCompilerTest.java",
            "FilterTest.java",
            "IOUtilsTest.java",
            "AbstractMethodConfigTest.java",
            "FailfastClusterInvokerTest.java",
            "CacheTest.java",
            "CompatibleTypeUtilsTest.java",
            "ConfigCenterConfigTest.java",
            "MethodBuilderTest.java",
            "RoundRobinLoadBalanceTest.java",
            "StringUtilsTest.java",
            "BytesTest.java",
            "MergeableClusterInvokerTest.java",
            "AbstractClusterInvokerTest.java",
            "DubboConfigBindingRegistrarTest.java",
            "FixedThreadPoolTest.java",
            "ReflectUtilsTest.java",
            "FailSafeClusterInvokerTest.java",
            "AtomicPositiveIntegerTest.java",
            "UrlUtilsTest.java",
            "ClusterUtilsTest.java",
            "LoggerAdapterTest.java",
            "ProviderConfigTest.java",
            "ExtensionLoader_Adaptive_UseJdkCompiler_Test.java",
            "ServiceAnnotationBeanPostProcessorTest.java",
            "ReferenceConfigCacheTest.java",
            "MonitorConfigTest.java",
            "ConfigCenterBuilderTest.java",
            "TagRouterTest.java",
            "JSONTest.java",
            "ClassHelperTest.java",
            "ReferenceAnnotationBeanPostProcessorTest.java",
            "ModuleBuilderTest.java",
            "AbstractReferenceConfigTest.java",
            "ConfigUtilsTest.java",
            "RouterTest.java",
            "ProtocolConfigTest.java",
            "LoadStatusCheckerTest.java",
            "FileRouterEngineTest.java",
            "EnableDubboConfigTest.java",
            "EagerThreadPoolTest.java",
            "DubboAppenderTest.java",
            "LoggerFactoryTest.java",
            "ProtocolTest.java",
            "Slf4jLoggerTest.java",
            "ClassUtilsTest.java",
            "ExecutorUtilTest.java",
            "ConfigParserTest.java",
            "OverrideConfiguratorTest.java",
            "StatusUtilsTest.java",
            "ArgumentConfigTest.java",
            "MemoryStatusCheckerTest.java",
            "ModuleConfigTest.java",
            "JavaBeanSerializeUtilTest.java",
            "ExtensionLoader_Adaptive_Test.java",
            "StackTest.java",
            "EagerThreadPoolExecutorTest.java",
            "NetUtilsTest.java",
            "InternalThreadLocalTest.java",
            "ExtensionLoaderTest.java",
            "ConfigTest.java",
            "TestService.java",
            "AbstractInterfaceBuilderTest.java",
            "AbstractServiceConfigTest.java",
            "PojoUtilsTest.java",
            "ReferenceBuilderTest.java",
            "SimpleDataStoreTest.java",
            "JdkCompilerTest.java",
            "ConfigConditionRouterTest.java",
            "ExtensionTest.java",
            "AdaptiveCompilerTest.java",
            "WrapperTest.java",
            "ParametersTest.java",
            "CompletableFutureTaskTest.java",
            "ResultMergerTest.java",
            "CachedThreadPoolTest.java",
            "PropertiesConfigurationTest.java",
            "CIDRUtilsTest.java",
            "StreamUtilsTest.java",
            "RegistryConfigTest.java",
            "NamedInternalThreadFactoryTest.java",
            "MonitorBuilderTest.java",
            "ConsumerBuilderTest.java",
            "AbstractServiceBuilderTest.java",
            "URLTest.java",
            "ServiceBuilderTest.java",
            "InvokerSideConfigUrlTest.java",
            "LoggerTest.java",
            "AbstractConfigTest.java",
            "AssertTest.java",
            "AbstractReferenceBuilderTest.java",
            "ReferenceConfigTest.java",
            "ConditionRouterTest.java",
            "ExecutionListTest.java",
            "TaskQueueTest.java",
            "SerializationTest.java",
            "ForkingClusterInvokerTest.java",
            "ActivateComparatorTest.java",
            "ReferenceBeanBuilderTest.java",
            "UnsafeByteArrayInputStreamTest.java",
            "ExtensionLoader_Compatible_Test.java",
            "MethodConfigTest.java",
            "StaticDirectoryTest.java",
            "FailbackClusterInvokerTest.java",
            "JavaBeanAccessorTest.java",
            "MockClusterInvokerTest.java",
            "HashedWheelTimerTest.java",
            "ApplicationBuilderTest.java",
            "UnsafeStringWriterTest.java",
            "LimitedThreadPoolTest.java",
            "RandomLoadBalanceTest.java",
            "MixinTest.java",
            "LogHelperTest.java",
            "HolderTest.java",
            "GenericServiceTest.java",
            "AbortPolicyWithReportTest.java",
            "MetadataReportBuilderTest.java",
            "ProxyTest.java",
            "VersionTest.java",
            "FailsafeLoggerTest.java",
            "ServiceConfigTest.java",
            "LogUtilTest.java",
            "ArgumentBuilderTest.java",
            "DubboConfigBindingBeanPostProcessorTest.java",
            "AbstractMethodBuilderTest.java",
            "StatusTest.java",
            "ExporterSideConfigUrlTest.java",
            "ConfigurationUtilsTest.java",
            "EchoServiceTest.java",
            "AbsentConfiguratorTest.java",
            "DelegateProviderMetaDataInvokerTest.java",
            "ScriptRouterTest.java"
        ]
    },
    "dubbo_a6c8835": {
        "bug_id": "dubbo_a6c8835",
        "commit": "https://github.com/apache/dubbo/commit/a6c88357cfdc9816bc34bf3c18e263894996779e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/a6c88357cfdc9816bc34bf3c18e263894996779e/dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutput.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutput.java?ref=a6c88357cfdc9816bc34bf3c18e263894996779e",
                "deletions": 1,
                "filename": "dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutput.java",
                "patch": "@@ -47,7 +47,7 @@ public void writeObject(Object obj) throws IOException {\n         byte[] classNameBytes;\n \n         try {\n-            if (WrapperUtils.needWrapper(obj)) {\n+            if (obj == null || WrapperUtils.needWrapper(obj)) {\n                 Schema<Wrapper> schema = RuntimeSchema.getSchema(Wrapper.class);\n                 Wrapper wrapper = new Wrapper(obj);\n                 bytes = GraphIOUtil.toByteArray(wrapper, schema, buffer);",
                "raw_url": "https://github.com/apache/dubbo/raw/a6c88357cfdc9816bc34bf3c18e263894996779e/dubbo-serialization/dubbo-serialization-protostuff/src/main/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutput.java",
                "sha": "ab94d3ba8df3a8ef224f08195597bdb692f2bbf8",
                "status": "modified"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/dubbo/blob/a6c88357cfdc9816bc34bf3c18e263894996779e/dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutputTest.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutputTest.java?ref=a6c88357cfdc9816bc34bf3c18e263894996779e",
                "deletions": 0,
                "filename": "dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutputTest.java",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.common.serialize.protostuff;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class ProtostuffObjectOutputTest {\n+\n+    private ByteArrayOutputStream byteArrayOutputStream;\n+    private ProtostuffObjectOutput protostuffObjectOutput;\n+    private ProtostuffObjectInput protostuffObjectInput;\n+    private ByteArrayInputStream byteArrayInputStream;\n+\n+    @BeforeEach\n+    public void setUp() throws Exception {\n+        this.byteArrayOutputStream = new ByteArrayOutputStream();\n+        this.protostuffObjectOutput = new ProtostuffObjectOutput(byteArrayOutputStream);\n+    }\n+\n+    @Test\n+    public void testWriteObjectNull() throws IOException, ClassNotFoundException {\n+        this.protostuffObjectOutput.writeObject(null);\n+        this.flushToInput();\n+\n+        assertThat(protostuffObjectInput.readObject(), nullValue());\n+    }\n+\n+    private void flushToInput() throws IOException {\n+        this.protostuffObjectOutput.flushBuffer();\n+        this.byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n+        this.protostuffObjectInput = new ProtostuffObjectInput(byteArrayInputStream);\n+    }\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/a6c88357cfdc9816bc34bf3c18e263894996779e/dubbo-serialization/dubbo-serialization-test/src/test/java/org/apache/dubbo/common/serialize/protostuff/ProtostuffObjectOutputTest.java",
                "sha": "bb28386271dfe01805e8eb83185504b3b2e3fee0",
                "status": "added"
            }
        ],
        "message": "[Dubbo-3727] Fix NullPointerException when protocoluff protocol serializes an empty object (#3734)\n\n* fix: #3727\r\n\r\n* style: code tidy up\r\n\r\n* style: add apache license",
        "parent": "https://github.com/apache/dubbo/commit/7126efe5b588840818f70be2a1aedc1836a0f5c6",
        "patched_files": [
            "ProtostuffObjectOutput.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "ProtostuffObjectOutputTest.java"
        ]
    },
    "dubbo_a6d8f1c": {
        "bug_id": "dubbo_a6d8f1c",
        "commit": "https://github.com/apache/dubbo/commit/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java?ref=a6d8f1c5b20d30b3fe3206332d56bc6de1baa282",
                "deletions": 1,
                "filename": "dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java",
                "patch": "@@ -52,7 +52,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n                     return new RpcResult(value);\r\n                 }\r\n                 Result result = invoker.invoke(invocation);\r\n-                if (!result.hasException()) {\r\n+                if (!result.hasException() && result.getValue() != null) {\r\n                     cache.put(key, result.getValue());\r\n                 }\r\n                 return result;\r",
                "raw_url": "https://github.com/apache/dubbo/raw/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java",
                "sha": "e034cbbc96d5479d77b7aafa8d4fe021a606ac55",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/dubbo/blob/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java?ref=a6d8f1c5b20d30b3fe3206332d56bc6de1baa282",
                "deletions": 0,
                "filename": "dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java",
                "patch": "@@ -44,6 +44,8 @@\n     private Invoker<?> invoker = mock(Invoker.class);\n     private Invoker<?> invoker1 = mock(Invoker.class);\n     private Invoker<?> invoker2 = mock(Invoker.class);\n+    private Invoker<?> invoker3 = mock(Invoker.class);\n+    private Invoker<?> invoker4 = mock(Invoker.class);\n     private String cacheType;\n     private CacheFactory cacheFactory;\n \n@@ -77,6 +79,11 @@ public void setUp() throws Exception {\n         given(invoker2.invoke(invocation)).willReturn(new RpcResult(\"value2\"));\n         given(invoker2.getUrl()).willReturn(url);\n \n+        given(invoker3.invoke(invocation)).willReturn(new RpcResult(new RuntimeException()));\n+        given(invoker3.getUrl()).willReturn(url);\n+\n+        given(invoker4.invoke(invocation)).willReturn(new RpcResult());\n+        given(invoker4.getUrl()).willReturn(url);\n     }\n \n     @Test\n@@ -89,6 +96,7 @@ public void testNonArgsMethod() {\n         RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n         RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n         Assert.assertEquals(rpcResult1.getValue(), rpcResult2.getValue());\n+        Assert.assertEquals(rpcResult1.getValue(), \"value\");\n     }\n \n     @Test\n@@ -101,5 +109,30 @@ public void testMethodWithArgs() {\n         RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n         RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n         Assert.assertEquals(rpcResult1.getValue(), rpcResult2.getValue());\n+        Assert.assertEquals(rpcResult1.getValue(), \"value\");\n+    }\n+\n+    @Test\n+    public void testException() {\n+        invocation.setMethodName(\"echo1\");\n+        invocation.setParameterTypes(new Class<?>[]{String.class});\n+        invocation.setArguments(new Object[]{\"arg2\"});\n+\n+        cacheFilter.invoke(invoker3, invocation);\n+        RpcResult rpcResult = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n+        Assert.assertEquals(rpcResult.getValue(), \"value2\");\n+    }\n+\n+    @Test\n+    public void testNull() {\n+        invocation.setMethodName(\"echo1\");\n+        invocation.setParameterTypes(new Class<?>[]{String.class});\n+        invocation.setArguments(new Object[]{\"arg3\"});\n+\n+        cacheFilter.invoke(invoker4, invocation);\n+        RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n+        RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n+        Assert.assertEquals(rpcResult1.getValue(), \"value1\");\n+        Assert.assertEquals(rpcResult2.getValue(), \"value1\");\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java",
                "sha": "760605c9ab60495e77125bcb2dab6d0ca040b700",
                "status": "modified"
            }
        ],
        "message": "    #1597: CacheFilter,when value is null,it will throw NPE(if use ehcache for jcache),why not check null here (#1828)",
        "parent": "https://github.com/apache/dubbo/commit/d03ff27bd0c2e77689bfe11f16f5e9276dc62081",
        "patched_files": [
            "CacheFilter.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "CacheFilterTest.java"
        ]
    },
    "dubbo_b013e7b": {
        "bug_id": "dubbo_b013e7b",
        "commit": "https://github.com/apache/dubbo/commit/b013e7bdf87bca5244b6602854ff7acf4820f4c4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/b013e7bdf87bca5244b6602854ff7acf4820f4c4/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java?ref=b013e7bdf87bca5244b6602854ff7acf4820f4c4",
                "deletions": 1,
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "patch": "@@ -880,7 +880,7 @@ public String toParameterString(String... parameters) {\n \t}\r\n \t\r\n \tprivate void buildParameters(StringBuilder buf, boolean concat, String[] parameters) {\r\n-\t    if (getParameters().size() > 0) {\r\n+\t    if (getParameters() !=null && getParameters().size() > 0) {\r\n             List<String> includes = (parameters == null || parameters.length == 0 ? null : Arrays.asList(parameters));\r\n             boolean first = true;\r\n             for (Map.Entry<String, String> entry : new TreeMap<String, String>(getParameters()).entrySet()) {\r",
                "raw_url": "https://github.com/apache/dubbo/raw/b013e7bdf87bca5244b6602854ff7acf4820f4c4/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "sha": "f48005f0720bba68a7ccbb3c0bc219ee187e47aa",
                "status": "modified"
            }
        ],
        "message": "\u6dfb\u52a0null\u5224\u65ad\uff0c\u907f\u514dNPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@260 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "parent": "https://github.com/apache/dubbo/commit/6dbfb5c37e640a549e25a7b6fd2df9698bad5474",
        "patched_files": [
            "URL.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "URLTest.java"
        ]
    },
    "dubbo_b2ce7b2": {
        "bug_id": "dubbo_b2ce7b2",
        "commit": "https://github.com/apache/dubbo/commit/b2ce7b2c10d57d232582a185d0877cc404b352ea",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/dubbo/blob/b2ce7b2c10d57d232582a185d0877cc404b352ea/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokeTelnetHandler.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokeTelnetHandler.java?ref=b2ce7b2c10d57d232582a185d0877cc404b352ea",
                "deletions": 0,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokeTelnetHandler.java",
                "patch": "@@ -60,6 +60,19 @@ private static boolean isMatch(Class<?>[] types, List<Object> args) {\n         for (int i = 0; i < types.length; i++) {\n             Class<?> type = types[i];\n             Object arg = args.get(i);\n+\n+            if (arg == null) {\n+                // if the type is primitive, the method to invoke will cause NullPointerException definitely\n+                // so we can offer a specified error message to the invoker in advance and avoid unnecessary invoking\n+                if (type.isPrimitive()) {\n+                    throw new NullPointerException(String.format(\n+                            \"The type of No.%d parameter is primitive(%s), but the value passed is null.\", i + 1, type.getName()));\n+                }\n+\n+                // if the type is not primitive, we choose to believe what the invoker want is a null value\n+                continue;\n+            }\n+\n             if (ReflectUtils.isPrimitive(arg.getClass())) {\n                 if (!ReflectUtils.isPrimitive(type)) {\n                     return false;",
                "raw_url": "https://github.com/apache/dubbo/raw/b2ce7b2c10d57d232582a185d0877cc404b352ea/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokeTelnetHandler.java",
                "sha": "d149a50e45895762aeeaa5ee3290f54778b064bf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/b2ce7b2c10d57d232582a185d0877cc404b352ea/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoService.java?ref=b2ce7b2c10d57d232582a185d0877cc404b352ea",
                "deletions": 0,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoService.java",
                "patch": "@@ -57,4 +57,6 @@\n \n     NonSerialized returnNonSerialized();\n \n+    long add(int a, long b);\n+\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/b2ce7b2c10d57d232582a185d0877cc404b352ea/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoService.java",
                "sha": "357b0321d360f7f6290c3210a4837d7306c1687a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/dubbo/blob/b2ce7b2c10d57d232582a185d0877cc404b352ea/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoServiceImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoServiceImpl.java?ref=b2ce7b2c10d57d232582a185d0877cc404b352ea",
                "deletions": 1,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoServiceImpl.java",
                "patch": "@@ -24,7 +24,6 @@\n /**\n  * DemoServiceImpl\n  */\n-\n public class DemoServiceImpl implements DemoService {\n     public DemoServiceImpl() {\n         super();\n@@ -103,4 +102,9 @@ public void nonSerializedParameter(NonSerialized ns) {\n     public NonSerialized returnNonSerialized() {\n         return new NonSerialized();\n     }\n+\n+    public long add(int a, long b) {\n+        return a + b;\n+    }\n+\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/dubbo/raw/b2ce7b2c10d57d232582a185d0877cc404b352ea/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/support/DemoServiceImpl.java",
                "sha": "e404af0e46cfb3372edd57455eb650b6b4052a12",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/dubbo/blob/b2ce7b2c10d57d232582a185d0877cc404b352ea/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokerTelnetHandlerTest.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokerTelnetHandlerTest.java?ref=b2ce7b2c10d57d232582a185d0877cc404b352ea",
                "deletions": 0,
                "filename": "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokerTelnetHandlerTest.java",
                "patch": "@@ -33,6 +33,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n@@ -68,6 +69,45 @@ public void testInvokeDefaultSService() throws RemotingException {\n         assertTrue(result.contains(\"Use default service org.apache.dubbo.rpc.protocol.dubbo.support.DemoService.\\r\\n\\\"ok\\\"\\r\\n\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testInvokeByPassingNullValue() throws RemotingException {\n+        mockInvoker = mock(Invoker.class);\n+        given(mockInvoker.getInterface()).willReturn(DemoService.class);\n+        given(mockInvoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:20883/demo\"));\n+        given(mockInvoker.invoke(any(Invocation.class))).willReturn(new RpcResult(\"ok\"));\n+        mockChannel = mock(Channel.class);\n+        given(mockChannel.getAttribute(\"telnet.service\")).willReturn(\"org.apache.dubbo.rpc.protocol.dubbo.support.DemoService\");\n+        given(mockChannel.getLocalAddress()).willReturn(NetUtils.toAddress(\"127.0.0.1:5555\"));\n+        given(mockChannel.getRemoteAddress()).willReturn(NetUtils.toAddress(\"127.0.0.1:20883\"));\n+\n+        DubboProtocol.getDubboProtocol().export(mockInvoker);\n+\n+        // pass null value to parameter of primitive type\n+        try {\n+            invoke.telnet(mockChannel, \"DemoService.add(null, 2)\");\n+            fail(\"It should cause a NullPointerException by the above code.\");\n+        } catch (NullPointerException ex) {\n+            String message = ex.getMessage();\n+            assertEquals(\"The type of No.1 parameter is primitive(int), but the value passed is null.\", message);\n+        }\n+\n+        try {\n+            invoke.telnet(mockChannel, \"DemoService.add(1, null)\");\n+            fail(\"It should cause a NullPointerException by the above code.\");\n+        } catch (NullPointerException ex) {\n+            String message = ex.getMessage();\n+            assertEquals(\"The type of No.2 parameter is primitive(long), but the value passed is null.\", message);\n+        }\n+\n+        // pass null value to parameter of object type\n+        try {\n+            invoke.telnet(mockChannel, \"DemoService.sayHello(null)\");\n+        } catch (NullPointerException ex) {\n+            fail(\"It shouldn't cause a NullPointerException by the above code.\");\n+        }\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     @Test\n     public void testInvokeAutoFindMethod() throws RemotingException {",
                "raw_url": "https://github.com/apache/dubbo/raw/b2ce7b2c10d57d232582a185d0877cc404b352ea/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/InvokerTelnetHandlerTest.java",
                "sha": "6b1ffe2ec20eee6e5cdabaa5d0889ad59730507e",
                "status": "modified"
            }
        ],
        "message": "fix telnet invoke NPE #2218 (#2273)\n\n* fix issue #2218\r\n* add some unit tests",
        "parent": "https://github.com/apache/dubbo/commit/e22ac38158becc11c4543ff9ff0bf930f79217d0",
        "patched_files": [
            "InvokeTelnetHandler.java",
            "DemoServiceImpl.java",
            "DemoService.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "InvokerTelnetHandlerTest.java"
        ]
    },
    "dubbo_bce2f44": {
        "bug_id": "dubbo_bce2f44",
        "commit": "https://github.com/apache/dubbo/commit/bce2f44ae3854cdc540556f7181af78ba53687d8",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "patch": "@@ -32,6 +32,7 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.Collection;\n@@ -155,7 +156,18 @@ private ReferenceBeanInvocationHandler(ReferenceBean referenceBean) {\n \n         @Override\n         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-            return method.invoke(bean, args);\n+            Object result = null;\n+            try {\n+                if (bean == null) { // If the bean is not initialized, invoke init()\n+                    // issue: https://github.com/apache/incubator-dubbo/issues/3429\n+                    init();\n+                }\n+                result = method.invoke(bean, args);\n+            } catch (InvocationTargetException e) {\n+                // re-throws the actual Exception.\n+                throw e.getTargetException();\n+            }\n+            return result;\n         }\n \n         private void init() {",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "sha": "e02c1e10cc52d8e5a36c76b0db4952c2910868f5",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 3,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
                "patch": "@@ -44,10 +44,11 @@ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, B\n \n         boolean multiple = attributes.getBoolean(\"multiple\");\n \n-        if (multiple) {\n+        // Single Config Bindings\n+        registerBeans(registry, DubboConfigConfiguration.Single.class);\n+\n+        if (multiple) { // Since 2.6.6 https://github.com/apache/incubator-dubbo/issues/3193\n             registerBeans(registry, DubboConfigConfiguration.Multiple.class);\n-        } else {\n-            registerBeans(registry, DubboConfigConfiguration.Single.class);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/DubboConfigConfigurationRegistrar.java",
                "sha": "d01dd398ee0d5e697d1ecf3acd50d5e61b634375",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java",
                "patch": "@@ -76,6 +76,6 @@\n      * @see EnableDubboConfig#multiple()\n      */\n     @AliasFor(annotation = EnableDubboConfig.class, attribute = \"multiple\")\n-    boolean multipleConfig() default false;\n+    boolean multipleConfig() default true;\n \n }",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubbo.java",
                "sha": "706e288597eca642851f00dc59bcfabb0fc1f3cf",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 2,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java",
                "patch": "@@ -59,7 +59,7 @@\n  *\n  * @see EnableDubboConfigBinding\n  * @see DubboConfigConfiguration\n- * @see DubboConfigConfigurationSelector\n+ * @see DubboConfigConfigurationRegistrar\n  * @since 2.5.8\n  */\n @Target({ElementType.TYPE})\n@@ -75,6 +75,6 @@\n      * @return the default value is <code>false</code>\n      * @revised 2.5.9\n      */\n-    boolean multiple() default false;\n+    boolean multiple() default true;\n \n }",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfig.java",
                "sha": "314f2e93d6bdef9d64c6ec9ddc30f1f06c96b7a1",
                "status": "modified"
            },
            {
                "additions": 101,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java",
                "changes": 195,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 94,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java",
                "patch": "@@ -1,94 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.dubbo.config.spring.status;\r\n-\r\n-import org.apache.dubbo.common.extension.Activate;\r\n-import org.apache.dubbo.common.logger.Logger;\r\n-import org.apache.dubbo.common.logger.LoggerFactory;\r\n-import org.apache.dubbo.common.status.Status;\r\n-import org.apache.dubbo.common.status.StatusChecker;\r\n-import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;\r\n-\r\n-import org.springframework.context.ApplicationContext;\r\n-import org.springframework.context.Lifecycle;\r\n-\r\n-import java.lang.reflect.Method;\r\n-\r\n-/**\r\n- * SpringStatusChecker\r\n- */\r\n-@Activate\r\n-public class SpringStatusChecker implements StatusChecker {\r\n-\r\n-    private static final Logger logger = LoggerFactory.getLogger(SpringStatusChecker.class);\r\n-\r\n-    @Override\r\n-    public Status check() {\r\n-        ApplicationContext context = null;\r\n-        for (ApplicationContext c : SpringExtensionFactory.getContexts()) {\r\n-            if (c != null) {\r\n-                context = c;\r\n-                break;\r\n-            }\r\n-        }\r\n-\r\n-        if (context == null) {\r\n-            return new Status(Status.Level.UNKNOWN);\r\n-        }\r\n-\r\n-        Status.Level level = Status.Level.OK;\r\n-        if (context instanceof Lifecycle) {\r\n-            if (((Lifecycle) context).isRunning()) {\r\n-                level = Status.Level.OK;\r\n-            } else {\r\n-                level = Status.Level.ERROR;\r\n-            }\r\n-        } else {\r\n-            level = Status.Level.UNKNOWN;\r\n-        }\r\n-        StringBuilder buf = new StringBuilder();\r\n-        try {\r\n-            Class<?> cls = context.getClass();\r\n-            Method method = null;\r\n-            while (cls != null && method == null) {\r\n-                try {\r\n-                    method = cls.getDeclaredMethod(\"getConfigLocations\", new Class<?>[0]);\r\n-                } catch (NoSuchMethodException t) {\r\n-                    cls = cls.getSuperclass();\r\n-                }\r\n-            }\r\n-            if (method != null) {\r\n-                if (!method.isAccessible()) {\r\n-                    method.setAccessible(true);\r\n-                }\r\n-                String[] configs = (String[]) method.invoke(context, new Object[0]);\r\n-                if (configs != null && configs.length > 0) {\r\n-                    for (String config : configs) {\r\n-                        if (buf.length() > 0) {\r\n-                            buf.append(\",\");\r\n-                        }\r\n-                        buf.append(config);\r\n-                    }\r\n-                }\r\n-            }\r\n-        } catch (Throwable t) {\r\n-            logger.warn(t.getMessage(), t);\r\n-        }\r\n-        return new Status(level, buf.toString());\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.dubbo.config.spring.status;\n+\n+import org.apache.dubbo.common.extension.Activate;\n+import org.apache.dubbo.common.logger.Logger;\n+import org.apache.dubbo.common.logger.LoggerFactory;\n+import org.apache.dubbo.common.status.Status;\n+import org.apache.dubbo.common.status.StatusChecker;\n+import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;\n+\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.Lifecycle;\n+import org.springframework.web.context.support.GenericWebApplicationContext;\n+\n+import java.lang.reflect.Method;\n+\n+/**\n+ * SpringStatusChecker\n+ */\n+@Activate\n+public class SpringStatusChecker implements StatusChecker {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(SpringStatusChecker.class);\n+\n+    @Override\n+    public Status check() {\n+        ApplicationContext context = null;\n+        for (ApplicationContext c : SpringExtensionFactory.getContexts()) {\n+            // [Issue] SpringStatusChecker execute errors on non-XML Spring configuration\n+            // issue : https://github.com/apache/incubator-dubbo/issues/3615\n+            if(c instanceof GenericWebApplicationContext) { // ignore GenericXmlApplicationContext\n+                continue;\n+            }\n+\n+            if (c != null) {\n+                context = c;\n+                break;\n+            }\n+        }\n+\n+        if (context == null) {\n+            return new Status(Status.Level.UNKNOWN);\n+        }\n+\n+        Status.Level level = Status.Level.OK;\n+        if (context instanceof Lifecycle) {\n+            if (((Lifecycle) context).isRunning()) {\n+                level = Status.Level.OK;\n+            } else {\n+                level = Status.Level.ERROR;\n+            }\n+        } else {\n+            level = Status.Level.UNKNOWN;\n+        }\n+        StringBuilder buf = new StringBuilder();\n+        try {\n+            Class<?> cls = context.getClass();\n+            Method method = null;\n+            while (cls != null && method == null) {\n+                try {\n+                    method = cls.getDeclaredMethod(\"getConfigLocations\", new Class<?>[0]);\n+                } catch (NoSuchMethodException t) {\n+                    cls = cls.getSuperclass();\n+                }\n+            }\n+            if (method != null) {\n+                if (!method.isAccessible()) {\n+                    method.setAccessible(true);\n+                }\n+                String[] configs = (String[]) method.invoke(context, new Object[0]);\n+                if (configs != null && configs.length > 0) {\n+                    for (String config : configs) {\n+                        if (buf.length() > 0) {\n+                            buf.append(\",\");\n+                        }\n+                        buf.append(config);\n+                    }\n+                }\n+            }\n+        } catch (Throwable t) {\n+            logger.warn(t.getMessage(), t);\n+        }\n+        return new Status(level, buf.toString());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/status/SpringStatusChecker.java",
                "sha": "63517c6e52af3185aebf975ce5652e7cdcbfc661",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java",
                "patch": "@@ -96,7 +96,7 @@ public String convert(String[] source) {\n         Assert.assertEquals(\"dubbo://localhost:12345\", referenceBean.getUrl());\n         Assert.assertEquals(\"client\", referenceBean.getClient());\n         Assert.assertEquals(true, referenceBean.isGeneric());\n-        Assert.assertEquals(true, referenceBean.isInjvm());\n+        Assert.assertNull(referenceBean.isInjvm());\n         Assert.assertEquals(false, referenceBean.isCheck());\n         Assert.assertEquals(true, referenceBean.isInit());\n         Assert.assertEquals(true, referenceBean.getLazy());",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java",
                "sha": "5c0570e4ffc501219d0130f2fb7dd63e6af512f6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java",
                "patch": "@@ -81,7 +81,7 @@ public void testBuild() throws Exception {\n         Assert.assertEquals(\"dubbo://localhost:12345\", referenceBean.getUrl());\n         Assert.assertEquals(\"client\", referenceBean.getClient());\n         Assert.assertEquals(true, referenceBean.isGeneric());\n-        Assert.assertEquals(true, referenceBean.isInjvm());\n+        Assert.assertNull(referenceBean.isInjvm());\n         Assert.assertEquals(false, referenceBean.isCheck());\n         Assert.assertEquals(null, referenceBean.isInit());\n         Assert.assertEquals(true, referenceBean.getLazy());",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java",
                "sha": "7dd12663d89286f568713a2eb595479778d91fca",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 3,
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java",
                "patch": "@@ -26,7 +26,6 @@\n \n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n-\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.PropertySource;\n \n@@ -95,13 +94,13 @@ public void testMultiple() {\n \n     }\n \n-    @EnableDubboConfig(multiple = true)\n+    @EnableDubboConfig\n     @PropertySource(\"META-INF/config.properties\")\n     private static class TestMultipleConfig {\n \n     }\n \n-    @EnableDubboConfig\n+    @EnableDubboConfig(multiple = false)\n     @PropertySource(\"META-INF/config.properties\")\n     private static class TestConfig {\n ",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/EnableDubboConfigTest.java",
                "sha": "077c8b29e7e8d821858e9983b23b584f8c4d7454",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 6,
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
                "patch": "@@ -45,11 +45,6 @@ public String sayName(String name) {\n \n     @Override\n     public Box getBox() {\n-        return new Box() {\n-            @Override\n-            public String getName() {\n-                return \"MyBox\";\n-            }\n-        };\n+        throw new UnsupportedOperationException(\"For Purposes!\");\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
                "sha": "3aa1e86f4e6996b31a82c065d95c924e507c535b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/dubbo/blob/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java?ref=bce2f44ae3854cdc540556f7181af78ba53687d8",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java",
                "patch": "@@ -20,14 +20,15 @@\n import org.apache.dubbo.config.spring.ServiceBean;\n import org.apache.dubbo.config.spring.extension.SpringExtensionFactory;\n \n+import org.junit.Assert;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.Lifecycle;\n+import org.springframework.web.context.support.GenericWebApplicationContext;\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n@@ -90,4 +91,14 @@ public void testWithoutLifeCycleRunning() {\n     interface ApplicationLifeCycle extends Lifecycle, ApplicationContext {\n         String[] getConfigLocations();\n     }\n+\n+    @Test\n+    public void testGenericWebApplicationContext() {\n+        SpringExtensionFactory.clearContexts();\n+        GenericWebApplicationContext context = new GenericWebApplicationContext();\n+        SpringExtensionFactory.addApplicationContext(context);\n+        SpringStatusChecker checker = new SpringStatusChecker();\n+        Status status = checker.check();\n+        Assert.assertEquals(Status.Level.UNKNOWN, status.getLevel());\n+    }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/bce2f44ae3854cdc540556f7181af78ba53687d8/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/status/SpringStatusCheckerTest.java",
                "sha": "e3386e2588de7ae6fbf90094b2b751d47c236369",
                "status": "modified"
            }
        ],
        "message": "Enhancement and Bugfix in 2.7.1 ( Part 1 ) (#3670)\n\n* Polish /apache/incubator-dubbo#3429 : Fix The NPE issue\r\n\r\n* Polish /apache/incubator-dubbo#3615 : SpringStatusChecker execute errors on non-XML Spring configuration\r\n\r\n* Polish /apache/incubator-dubbo#3193 : Change the default behavior of @EnableDubboConfig.multiple()",
        "parent": "https://github.com/apache/dubbo/commit/cb11ce0b77983fe26d760ca39c5333747202a366",
        "patched_files": [
            "EnableDubbo.java",
            "DubboConfigConfigurationRegistrar.java",
            "DemoServiceImpl.java",
            "ReferenceAnnotationBeanPostProcessor.java",
            "ReferenceBeanBuilder.java",
            "AnnotationPropertyValuesAdapter.java",
            "SpringStatusChecker.java",
            "EnableDubboConfig.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "SpringStatusCheckerTest.java",
            "EnableDubboConfigTest.java",
            "AnnotationPropertyValuesAdapterTest.java",
            "ReferenceBeanBuilderTest.java",
            "ReferenceAnnotationBeanPostProcessorTest.java",
            "EnableDubboTest.java"
        ]
    },
    "dubbo_bdfc500": {
        "bug_id": "dubbo_bdfc500",
        "commit": "https://github.com/apache/dubbo/commit/bdfc5007fa5cad80d22b5c0422e55c1fcb745dc4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/bdfc5007fa5cad80d22b5c0422e55c1fcb745dc4/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java?ref=bdfc5007fa5cad80d22b5c0422e55c1fcb745dc4",
                "deletions": 1,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "patch": "@@ -57,7 +57,7 @@\n     private TagRouterRule tagRouterRule;\n     private String application;\n \n-    private AtomicBoolean isInited;\n+    private AtomicBoolean isInited = new AtomicBoolean(false);\n \n     public TagRouter(URL url) {\n         this(ExtensionLoader.getExtensionLoader(DynamicConfigurationFactory.class).getAdaptiveExtension().getDynamicConfiguration(url), url);",
                "raw_url": "https://github.com/apache/dubbo/raw/bdfc5007fa5cad80d22b5c0422e55c1fcb745dc4/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/router/tag/TagRouter.java",
                "sha": "7f2ad735858ef88768b37807196ad96af97b69ee",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in TagRouter",
        "parent": "https://github.com/apache/dubbo/commit/b7e8b1e02a11c4743de5ddd43550bf117ad0d34d",
        "patched_files": [
            "TagRouter.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "TagRouterTest.java"
        ]
    },
    "dubbo_c18b1cf": {
        "bug_id": "dubbo_c18b1cf",
        "commit": "https://github.com/apache/dubbo/commit/c18b1cfb465181b0a446eb37cb12e5a4eab1d617",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/dubbo/blob/c18b1cfb465181b0a446eb37cb12e5a4eab1d617/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java?ref=c18b1cfb465181b0a446eb37cb12e5a4eab1d617",
                "deletions": 6,
                "filename": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "patch": "@@ -18,6 +18,7 @@\n \n import org.apache.dubbo.common.URL;\n import org.apache.dubbo.common.extension.ExtensionLoader;\n+import org.apache.dubbo.common.utils.CollectionUtils;\n import org.apache.dubbo.rpc.Invocation;\n import org.apache.dubbo.rpc.Invoker;\n \n@@ -79,12 +80,11 @@ public void addRouter(Router router) {\n      * @param routers routers from 'router://' rules in 2.6.x or before.\n      */\n     public void addRouters(List<Router> routers) {\n-        // FIXME will sort cause concurrent problem? since it's kind of a write operation.\n         List<Router> newRouters = new CopyOnWriteArrayList<>();\n         newRouters.addAll(builtinRouters);\n         newRouters.addAll(routers);\n+        CollectionUtils.sort(routers);\n         this.routers = newRouters;\n-        this.sort();\n     }\n \n     private void sort() {\n@@ -110,9 +110,7 @@ private void sort() {\n      * Notify whenever addresses in registry change.\n      */\n     public void setInvokers(List<Invoker<T>> invokers) {\n-        if (invokers != null) {\n-            this.invokers = invokers;\n-            routers.forEach(router -> router.notify(invokers));\n-        }\n+        this.invokers = (invokers == null ? Collections.emptyList() : invokers);\n+        routers.forEach(router -> router.notify(this.invokers));\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/c18b1cfb465181b0a446eb37cb12e5a4eab1d617/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/RouterChain.java",
                "sha": "ca6e98f359bc9b02130e3729d853a31fa1c3b1d8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/c18b1cfb465181b0a446eb37cb12e5a4eab1d617/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java?ref=c18b1cfb465181b0a446eb37cb12e5a4eab1d617",
                "deletions": 36,
                "filename": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "patch": "@@ -227,7 +227,7 @@ private void refreshInvoker(List<URL> invokerUrls) {\n                 .get(0)\r\n                 .getProtocol())) {\r\n             this.forbidden = true; // Forbid to access\r\n-            this.invokers = null;\r\n+            this.invokers = Collections.emptyList();\r\n             routerChain.setInvokers(this.invokers);\r\n             destroyAllInvokers(); // Close all invokers\r\n         } else {\r\n@@ -295,41 +295,6 @@ private void refreshInvoker(List<URL> invokerUrls) {\n         return mergedInvokers;\r\n     }\r\n \r\n-    /*private Map<String, List<Invoker<T>>> toMergeMethodInvokerMap(Map<String, List<Invoker<T>>> methodMap) {\r\n-        Map<String, List<Invoker<T>>> result = new HashMap<String, List<Invoker<T>>>();\r\n-        for (Map.Entry<String, List<Invoker<T>>> entry : methodMap.entrySet()) {\r\n-            String method = entry.getKey();\r\n-            List<Invoker<T>> invokers = entry.getValue();\r\n-            Map<String, List<Invoker<T>>> groupMap = new HashMap<String, List<Invoker<T>>>();\r\n-            for (Invoker<T> invoker : invokers) {\r\n-                String group = invoker.getUrl().getParameter(Constants.GROUP_KEY, \"\");\r\n-                List<Invoker<T>> groupInvokers = groupMap.get(group);\r\n-                if (groupInvokers == null) {\r\n-                    groupInvokers = new ArrayList<Invoker<T>>();\r\n-                    groupMap.put(group, groupInvokers);\r\n-                }\r\n-                groupInvokers.add(invoker);\r\n-            }\r\n-            if (groupMap.size() == 1) {\r\n-                result.put(method, groupMap.values().iterator().next());\r\n-            } else if (groupMap.size() > 1) {\r\n-                List<Invoker<T>> groupInvokers = new ArrayList<Invoker<T>>();\r\n-                for (List<Invoker<T>> groupList : groupMap.values()) {\r\n-                    StaticDirectory<T> staticDirectory = new StaticDirectory<>(groupList);\r\n-                    Map<String, List<Invoker<T>>> methodGroupInvokers = new HashMap<>();\r\n-                    methodGroupInvokers.put(method, groupList);\r\n-                    staticDirectory.buildRouterChain(methodGroupInvokers, dynamicConfiguration);\r\n-                    groupInvokers.add(cluster.join(staticDirectory));\r\n-                }\r\n-                result.put(method, groupInvokers);\r\n-            } else {\r\n-                result.put(method, invokers);\r\n-            }\r\n-        }\r\n-        return result;\r\n-    }\r\n-*/\r\n-\r\n     /**\r\n      * @param urls\r\n      * @return null : no routers ,do nothing\r",
                "raw_url": "https://github.com/apache/dubbo/raw/c18b1cfb465181b0a446eb37cb12e5a4eab1d617/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/integration/RegistryDirectory.java",
                "sha": "e886d139274fe2ec0af68d7581d78e4d67adb422",
                "status": "modified"
            }
        ],
        "message": "Revert code to avoid NPE in RPC wire after providers are cleared.",
        "parent": "https://github.com/apache/dubbo/commit/0282a4203b3ad02923b1977e38b5f1d6bfb019c8",
        "patched_files": [
            "RegistryDirectory.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "RegistryDirectoryTest.java"
        ]
    },
    "dubbo_d962113": {
        "bug_id": "dubbo_d962113",
        "commit": "https://github.com/apache/dubbo/commit/d962113622f0a4db5d6a0fa06cfb3055ba92805d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/dubbo/blob/d962113622f0a4db5d6a0fa06cfb3055ba92805d/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java?ref=d962113622f0a4db5d6a0fa06cfb3055ba92805d",
                "deletions": 2,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "patch": "@@ -364,14 +364,14 @@ private static String extractPropertyName(Class<?> clazz, Method setter) throws\n         Method getter = null;\r\n         try {\r\n             getter = clazz.getMethod(\"get\" + propertyName);\r\n-            propertyName = propertyName.substring(3, 4).toLowerCase() + propertyName.substring(4);\r\n         } catch (NoSuchMethodException e) {\r\n             getter = clazz.getMethod(\"is\" + propertyName);\r\n-            propertyName = propertyName.substring(2, 3).toLowerCase() + propertyName.substring(3);\r\n         }\r\n         Parameter parameter = getter.getAnnotation(Parameter.class);\r\n         if (parameter != null && StringUtils.isNotEmpty(parameter.key()) && parameter.useKeyAsProperty()) {\r\n             propertyName = parameter.key();\r\n+        } else {\r\n+            propertyName = propertyName.substring(0, 1).toLowerCase() + propertyName.substring(1);\r\n         }\r\n         return propertyName;\r\n     }\r",
                "raw_url": "https://github.com/apache/dubbo/raw/d962113622f0a4db5d6a0fa06cfb3055ba92805d/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java",
                "sha": "f4abaf385bd22b0f0a88be7db46bdfe960b74d3c",
                "status": "modified"
            }
        ],
        "message": "fix NPE",
        "parent": "https://github.com/apache/dubbo/commit/fdc9202f9732292bd4661442df240f881118411d",
        "patched_files": [
            "AbstractConfig.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "AbstractConfigTest.java"
        ]
    },
    "dubbo_e2f3346": {
        "bug_id": "dubbo_e2f3346",
        "commit": "https://github.com/apache/dubbo/commit/e2f3346d9d1dff2bf6bf3ac2802e83d46b9923c0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/e2f3346d9d1dff2bf6bf3ac2802e83d46b9923c0/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java?ref=e2f3346d9d1dff2bf6bf3ac2802e83d46b9923c0",
                "deletions": 0,
                "filename": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "patch": "@@ -360,6 +360,7 @@ private boolean shouldDelay() {\n         if (delay == null && provider != null) {\r\n             delay = provider.getDelay();\r\n         }\r\n+        this.delay = delay;\r\n         return delay != null && delay > 0;\r\n     }\r\n \r",
                "raw_url": "https://github.com/apache/dubbo/raw/e2f3346d9d1dff2bf6bf3ac2802e83d46b9923c0/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/ServiceConfig.java",
                "sha": "e540dc0b6e234279717dc265cbf4dca98c80a93d",
                "status": "modified"
            }
        ],
        "message": "fixed provider set delay NullPointerException (#3957)\n\n* fixed provider set delay NullPointerException\r\n\r\n* add getActualDelay method\r\n\r\n* simple",
        "parent": "https://github.com/apache/dubbo/commit/e18904832791e878e7e3362a1d7280a7c0481f0f",
        "patched_files": [
            "ServiceConfig.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "ServiceConfigTest.java"
        ]
    },
    "dubbo_e402e38": {
        "bug_id": "dubbo_e402e38",
        "commit": "https://github.com/apache/dubbo/commit/e402e38ba947a0f9796c23f91c49d783ad94d93a",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/dubbo/blob/e402e38ba947a0f9796c23f91c49d783ad94d93a/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java?ref=e402e38ba947a0f9796c23f91c49d783ad94d93a",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "patch": "@@ -32,6 +32,7 @@\n \n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.Collection;\n@@ -155,7 +156,18 @@ private ReferenceBeanInvocationHandler(ReferenceBean referenceBean) {\n \n         @Override\n         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-            return method.invoke(bean, args);\n+            Object result = null;\n+            try {\n+                if (bean == null) { // If the bean is not initialized, invoke init()\n+                    // issue: https://github.com/apache/incubator-dubbo/issues/3429\n+                    init();\n+                }\n+                result = method.invoke(bean, args);\n+            } catch (InvocationTargetException e) {\n+                // re-throws the actual Exception.\n+                throw e.getTargetException();\n+            }\n+            return result;\n         }\n \n         private void init() {",
                "raw_url": "https://github.com/apache/dubbo/raw/e402e38ba947a0f9796c23f91c49d783ad94d93a/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
                "sha": "e02c1e10cc52d8e5a36c76b0db4952c2910868f5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/e402e38ba947a0f9796c23f91c49d783ad94d93a/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java?ref=e402e38ba947a0f9796c23f91c49d783ad94d93a",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java",
                "patch": "@@ -96,7 +96,7 @@ public String convert(String[] source) {\n         Assert.assertEquals(\"dubbo://localhost:12345\", referenceBean.getUrl());\n         Assert.assertEquals(\"client\", referenceBean.getClient());\n         Assert.assertEquals(true, referenceBean.isGeneric());\n-        Assert.assertEquals(true, referenceBean.isInjvm());\n+        Assert.assertNull(referenceBean.isInjvm());\n         Assert.assertEquals(false, referenceBean.isCheck());\n         Assert.assertEquals(true, referenceBean.isInit());\n         Assert.assertEquals(true, referenceBean.getLazy());",
                "raw_url": "https://github.com/apache/dubbo/raw/e402e38ba947a0f9796c23f91c49d783ad94d93a/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/AnnotationPropertyValuesAdapterTest.java",
                "sha": "5c0570e4ffc501219d0130f2fb7dd63e6af512f6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/e402e38ba947a0f9796c23f91c49d783ad94d93a/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java?ref=e402e38ba947a0f9796c23f91c49d783ad94d93a",
                "deletions": 1,
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java",
                "patch": "@@ -81,7 +81,7 @@ public void testBuild() throws Exception {\n         Assert.assertEquals(\"dubbo://localhost:12345\", referenceBean.getUrl());\n         Assert.assertEquals(\"client\", referenceBean.getClient());\n         Assert.assertEquals(true, referenceBean.isGeneric());\n-        Assert.assertEquals(true, referenceBean.isInjvm());\n+        Assert.assertNull(referenceBean.isInjvm());\n         Assert.assertEquals(false, referenceBean.isCheck());\n         Assert.assertEquals(null, referenceBean.isInit());\n         Assert.assertEquals(true, referenceBean.getLazy());",
                "raw_url": "https://github.com/apache/dubbo/raw/e402e38ba947a0f9796c23f91c49d783ad94d93a/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceBeanBuilderTest.java",
                "sha": "7dd12663d89286f568713a2eb595479778d91fca",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/dubbo/blob/e402e38ba947a0f9796c23f91c49d783ad94d93a/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/dubbo/contents/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java?ref=e402e38ba947a0f9796c23f91c49d783ad94d93a",
                "deletions": 6,
                "filename": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
                "patch": "@@ -45,11 +45,6 @@ public String sayName(String name) {\n \n     @Override\n     public Box getBox() {\n-        return new Box() {\n-            @Override\n-            public String getName() {\n-                return \"MyBox\";\n-            }\n-        };\n+        throw new UnsupportedOperationException(\"For Purposes!\");\n     }\n }",
                "raw_url": "https://github.com/apache/dubbo/raw/e402e38ba947a0f9796c23f91c49d783ad94d93a/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/annotation/provider/DemoServiceImpl.java",
                "sha": "3aa1e86f4e6996b31a82c065d95c924e507c535b",
                "status": "modified"
            }
        ],
        "message": "Polish /apache/incubator-dubbo#3429 : Fix The NPE issue",
        "parent": "https://github.com/apache/dubbo/commit/1d6845c0fbb582461ce98e78875f31264156a468",
        "patched_files": [
            "ReferenceAnnotationBeanPostProcessor.java",
            "ReferenceBeanBuilder.java",
            "AnnotationPropertyValuesAdapter.java",
            "DemoServiceImpl.java"
        ],
        "repo": "dubbo",
        "unit_tests": [
            "ReferenceBeanBuilderTest.java",
            "ReferenceAnnotationBeanPostProcessorTest.java",
            "AnnotationPropertyValuesAdapterTest.java"
        ]
    }
}