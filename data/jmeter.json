{
    "jmeter_188a6f2": {
        "bug_id": "jmeter_188a6f2",
        "commit": "https://github.com/apache/jmeter/commit/188a6f2f376582fe93900dfb19d3a7dbcf868a53",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/188a6f2f376582fe93900dfb19d3a7dbcf868a53/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=188a6f2f376582fe93900dfb19d3a7dbcf868a53",
                "deletions": 1,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -708,7 +708,9 @@ protected HTTPSampleResult sample(URL url, String method,\n     private void saveProxyAuth(\n             MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n             HttpContext localContext) {\n-        triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n+        if (triple != null) {\n+            triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jmeter/raw/188a6f2f376582fe93900dfb19d3a7dbcf868a53/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "4f732fdfdcb533cad9c8382674289d5c1f2de452",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on saving proxy auth state\n\nRelates to #397\nBugzilla Id: 62672\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1859989 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4b801c8a6c6b8ec912cdccb409757caaac7c9803",
        "parent": "https://github.com/apache/jmeter/commit/497140d7e0eb663f5d2dbfd436043279a2190592",
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_1d207d1": {
        "bug_id": "jmeter_1d207d1",
        "commit": "https://github.com/apache/jmeter/commit/1d207d1c899f67d8605b368aef92ba0cc10124de",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/1d207d1c899f67d8605b368aef92ba0cc10124de/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java?ref=1d207d1c899f67d8605b368aef92ba0cc10124de",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "patch": "@@ -308,6 +308,7 @@ protected Collection normalizeList(Collection coll) {\n \t\t\t\t\tnewColl = (Collection) coll.getClass().newInstance();\n \t\t\t\t} catch (Exception e) {\n \t\t\t\t\tlog.error(\"Bad collection\", e);\n+\t\t\t\t\treturn coll;\n \t\t\t\t}\n \t\t\t}\n \t\t\tnewColl.add(convertObject(item));\n@@ -335,6 +336,7 @@ protected Map normalizeMap(Map coll) {\n \t\t\t\t\tnewColl = (Map) coll.getClass().newInstance();\n \t\t\t\t} catch (Exception e) {\n \t\t\t\t\tlog.error(\"Bad collection\", e);\n+\t\t\t\t\treturn coll;\n \t\t\t\t}\n \t\t\t}\n \t\t\tnewColl.put(item, convertObject(prop));",
                "raw_url": "https://github.com/apache/jmeter/raw/1d207d1c899f67d8605b368aef92ba0cc10124de/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "sha": "21d07154918cbdaa9df9a803ece46239d28982a7",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@653147 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: fcdb6ed4aedd63ffe15bf79b5db316af6637cfc0",
        "parent": "https://github.com/apache/jmeter/commit/de6eb4b4df98e0e260a45c9c03b702b056c83905",
        "repo": "jmeter",
        "unit_tests": [
            "AbstractPropertyTest.java"
        ]
    },
    "jmeter_319cdc8": {
        "bug_id": "jmeter_319cdc8",
        "commit": "https://github.com/apache/jmeter/commit/319cdc8ac3146364f3451f4877619dd1453805fb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/319cdc8ac3146364f3451f4877619dd1453805fb/src/core/org/apache/jmeter/report/core/CsvSampleReader.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/CsvSampleReader.java?ref=319cdc8ac3146364f3451f4877619dd1453805fb",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/report/core/CsvSampleReader.java",
                "patch": "@@ -123,7 +123,9 @@ private SampleMetadata readMetadata(char separator, boolean useSaveSampleCfg) {\n             SampleMetadata metadata;\n             // Read first line\n             String line = reader.readLine();\n-\n+            if(line == null) {\n+                throw new IllegalArgumentException(\"File is empty\");\n+            }\n             // When we can use sample save config and there is no header in csv\n             // file\n             if (useSaveSampleCfg",
                "raw_url": "https://github.com/apache/jmeter/raw/319cdc8ac3146364f3451f4877619dd1453805fb/src/core/org/apache/jmeter/report/core/CsvSampleReader.java",
                "sha": "8a36cf39c6d22d6edf5fa2a7c65691c36d47d4ab",
                "status": "modified"
            }
        ],
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1719589 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 112fa9adb98fd5d43b6bcf079a7b6572649cc220",
        "parent": "https://github.com/apache/jmeter/commit/3d810b643ad06466b125d77395ac1dcfa98ddc54",
        "repo": "jmeter",
        "unit_tests": [
            "CsvSampleReaderTest.java"
        ]
    },
    "jmeter_36d4ff6": {
        "bug_id": "jmeter_36d4ff6",
        "commit": "https://github.com/apache/jmeter/commit/36d4ff61610e82ed640a73359230d1f6e449830d",
        "file": [
            {
                "additions": 97,
                "blob_url": "https://github.com/apache/jmeter/blob/36d4ff61610e82ed640a73359230d1f6e449830d/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java",
                "changes": 155,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java?ref=36d4ff61610e82ed640a73359230d1f6e449830d",
                "deletions": 58,
                "filename": "src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java",
                "patch": "@@ -19,19 +19,24 @@\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n+import java.util.Enumeration;\n import java.util.Properties;\n \n import javax.mail.Address;\n import javax.mail.BodyPart;\n import javax.mail.Flags;\n import javax.mail.Folder;\n+import javax.mail.Header;\n import javax.mail.Message;\n import javax.mail.MessagingException;\n import javax.mail.Session;\n import javax.mail.Store;\n import javax.mail.internet.MimeMultipart;\n+import javax.mail.internet.MimeUtility;\n \n+import org.apache.commons.io.IOUtils;\n import org.apache.jmeter.samplers.AbstractSampler;\n import org.apache.jmeter.samplers.Entry;\n import org.apache.jmeter.samplers.SampleResult;\n@@ -86,12 +91,10 @@ public SampleResult sample(Entry e) {\n         boolean deleteMessages = getDeleteMessages();\n \n         parent.setSampleLabel(getName());\n-        int port=getPortAsInt();\n-        if (port > 0){\n-            parent.setSamplerData(getServerType() + \"://\" + getUserName() + \"@\" + getServer()+ \":\" + port);\n-        } else {\n-            parent.setSamplerData(getServerType() + \"://\" + getUserName() + \"@\" + getServer());\n-        }\n+        \n+        String samplerString = toString();\n+        parent.setSamplerData(samplerString);\n+\n         /*\n          * Perform the sampling\n          */\n@@ -105,11 +108,7 @@ public SampleResult sample(Entry e) {\n \n             // Get the store\n             Store store = session.getStore(getServerType());\n-            if (port > 0){\n-                store.connect(getServer(), port, getUserName(), getPassword());\n-            } else {\n-                store.connect(getServer(), getUserName(), getPassword());\n-            }\n+            store.connect(getServer(), getPortAsInt(), getUserName(), getPassword());\n \n             // Get folder\n             Folder folder = store.getFolder(getFolder());\n@@ -121,47 +120,66 @@ public SampleResult sample(Entry e) {\n \n             // Get directory\n             Message messages[] = folder.getMessages();\n-            Message message;\n             StringBuilder pdata = new StringBuilder();\n             pdata.append(messages.length);\n             pdata.append(\" messages found\\n\");\n+            parent.setResponseData(pdata.toString(),null);\n+            parent.setDataType(SampleResult.TEXT);\n+            parent.setContentType(\"text/plain\"); // $NON-NLS-1$\n \n             int n = getNumMessages();\n             if (n == ALL_MESSAGES || n > messages.length) {\n                 n = messages.length;\n             }\n \n+            parent.setSampleCount(n); // TODO is this sensible?\n+            \n             for (int i = 0; i < n; i++) {\n                 StringBuilder cdata = new StringBuilder();\n                 SampleResult child = new SampleResult();\n                 child.sampleStart();\n-                message = messages[i];\n-\n-                //if (i == 0)\n-                { // Assumes all the messaged have the same type ...\n-                    child.setContentType(message.getContentType());\n-                }\n-\n+                Message message = messages[i];\n+                \n                 cdata.append(\"Message \"); // $NON-NLS-1$\n                 cdata.append(message.getMessageNumber());\n                 child.setSampleLabel(cdata.toString());\n                 child.setSamplerData(cdata.toString());\n                 cdata.setLength(0);\n \n+                final String contentType = message.getContentType();\n+                child.setContentType(contentType);// Store the content-type\n+\n                 if (isStoreMimeMessage()) {\n-                    appendMessageAsMime(cdata, message);\n+                    // Don't save headers - they are already in the raw message\n+                    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+                    message.writeTo(bout);\n+                    child.setResponseData(bout.toByteArray()); // Save raw message\n+                    child.setDataType(SampleResult.TEXT);\n+                    child.setDataEncoding(\"iso-8859-1\"); // RFC 822 uses ascii\n+                    child.setEncodingAndType(contentType);// Parse the content-type\n                 } else {\n-                    appendMessageData(cdata, message);\n+                    child.setEncodingAndType(contentType);// Parse the content-type\n+                    @SuppressWarnings(\"unchecked\") // Javadoc for the API says this is OK\n+                    Enumeration<Header> hdrs = message.getAllHeaders();\n+                    while(hdrs.hasMoreElements()){\n+                        Header hdr = hdrs.nextElement();\n+                        String value = hdr.getValue();\n+                        try {\n+                            value = MimeUtility.decodeText(value);\n+                        } catch (UnsupportedEncodingException uce) {\n+                            // ignored\n+                        }\n+                        cdata.append(hdr.getName()).append(\": \").append(value).append(\"\\n\");\n+                    }\n+                    child.setResponseHeaders(cdata.toString());\n+                    cdata.setLength(0);\n+                    appendMessageData(child, message);\n                 }\n \n                 if (deleteMessages) {\n                     message.setFlag(Flags.Flag.DELETED, true);\n                 }\n-                child.setResponseData(cdata.toString().getBytes());\n-                child.setDataType(SampleResult.TEXT);\n-                child.setResponseCodeOK();\n-                child.setResponseMessage(\"OK\"); // $NON-NLS-1$\n-                child.setSuccessful(true);\n+                child.setResponseOK();\n                 child.sampleEnd();\n                 parent.addSubResult(child);\n             }\n@@ -170,15 +188,8 @@ public SampleResult sample(Entry e) {\n             folder.close(true);\n             store.close();\n \n-            /*\n-             * Set up the sample result details\n-             */\n-            parent.setResponseData(pdata.toString().getBytes());\n-            parent.setDataType(SampleResult.TEXT);\n-            parent.setContentType(\"text/plain\"); // $NON-NLS-1$\n-\n             parent.setResponseCodeOK();\n-            parent.setResponseMessage(\"OK\"); // $NON-NLS-1$\n+            parent.setResponseMessageOK();\n             isOK = true;\n         } catch (NoClassDefFoundError ex) {\n             log.debug(\"\",ex);// No need to log normally, as we set the status\n@@ -201,15 +212,16 @@ public SampleResult sample(Entry e) {\n         return parent;\n     }\n \n-    private void appendMessageData(StringBuilder cdata, Message message)\n+    private void appendMessageData(SampleResult child, Message message)\n             throws MessagingException, IOException {\n+        StringBuilder cdata = new StringBuilder();\n         cdata.append(\"Date: \"); // $NON-NLS-1$\n         cdata.append(message.getSentDate());// TODO - use a different format here?\n         cdata.append(NEW_LINE);\n \n         cdata.append(\"To: \"); // $NON-NLS-1$\n-        Address[] recips = message.getAllRecipients();\n-        for (int j = 0; j < recips.length; j++) {\n+        Address[] recips = message.getAllRecipients(); // may be null\n+        for (int j = 0; recips != null && j < recips.length; j++) {\n             cdata.append(recips[j].toString());\n             if (j < recips.length - 1) {\n                 cdata.append(\"; \"); // $NON-NLS-1$\n@@ -218,8 +230,8 @@ private void appendMessageData(StringBuilder cdata, Message message)\n         cdata.append(NEW_LINE);\n \n         cdata.append(\"From: \"); // $NON-NLS-1$\n-        Address[] from = message.getFrom();\n-        for (int j = 0; j < from.length; j++) {\n+        Address[] from = message.getFrom(); // may be null\n+        for (int j = 0; from != null && j < from.length; j++) {\n             cdata.append(from[j].toString());\n             if (j < from.length - 1) {\n                 cdata.append(\"; \"); // $NON-NLS-1$\n@@ -235,33 +247,40 @@ private void appendMessageData(StringBuilder cdata, Message message)\n         Object content = message.getContent();\n         if (content instanceof MimeMultipart) {\n             MimeMultipart mmp = (MimeMultipart) content;\n+            String preamble = mmp.getPreamble();\n+            if (preamble != null ){\n+                cdata.append(preamble);\n+            }\n+            child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());\n             int count = mmp.getCount();\n-            cdata.append(\"Multipart. Count: \");\n-            cdata.append(count);\n-            cdata.append(NEW_LINE);\n             for (int j=0; j<count;j++){\n                 BodyPart bodyPart = mmp.getBodyPart(j);\n-                cdata.append(\"Type: \");\n-                cdata.append(bodyPart.getContentType());\n-                cdata.append(NEW_LINE);\n-                try {\n-                    cdata.append(bodyPart.getContent());\n-                } catch (UnsupportedEncodingException ex){\n-                    cdata.append(ex.getLocalizedMessage());\n+                final Object bodyPartContent = bodyPart.getContent();\n+                final String contentType = bodyPart.getContentType();\n+                SampleResult sr = new SampleResult();\n+                sr.setSampleLabel(\"Part: \"+j);\n+                sr.setContentType(contentType);\n+                sr.setEncodingAndType(contentType);\n+                sr.setResponseHeaders(bodyPart.getClass().getName());// TODO\n+                if (bodyPartContent instanceof InputStream){\n+                    sr.setResponseData(IOUtils.toByteArray((InputStream) bodyPartContent));\n+                } else {\n+                    sr.setResponseData(bodyPartContent.toString(),sr.getDataEncodingNoDefault());\n                 }\n+                sr.setResponseOK();\n+                sr.sampleEnd();\n+                child.addSubResult(sr);\n             }\n         } else {\n-            cdata.append(content);\n+            if (content instanceof InputStream){\n+                child.setResponseData(IOUtils.toByteArray((InputStream) content));\n+            } else {\n+                cdata.append(content);\n+                child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());\n+            }\n         }\n     }\n \n-    private void appendMessageAsMime(StringBuilder cdata, Message message)\n-            throws MessagingException, IOException {\n-        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n-        message.writeTo(bout);\n-        cdata.append(bout);\n-    }\n-\n     /**\n      * Sets the type of protocol to use when talking with the remote mail\n      * server. Either MailReaderSampler.TYPE_IMAP[S] or\n@@ -304,7 +323,7 @@ public String getPort() {\n     }\n \n     private int getPortAsInt() {\n-        return getPropertyAsInt(PORT);\n+        return getPropertyAsInt(PORT, -1);\n     }\n \n     public void setPort(String port) {\n@@ -421,4 +440,24 @@ public boolean isStoreMimeMessage() {\n     public void setStoreMimeMessage(boolean storeMimeMessage) {\n         setProperty(STORE_MIME_MESSAGE, storeMimeMessage, false);\n     }\n+    \n+    @Override\n+    public String toString(){\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getServerType());\n+        sb.append(\"://\");\n+        sb.append(getUserName());\n+        sb.append(\"@\");\n+        sb.append(getServer());\n+        int port=getPortAsInt();\n+        if (port != -1){\n+            sb.append(\":\").append(port);\n+        }\n+        sb.append(\"/\");\n+        sb.append(getFolder());\n+        sb.append(\"[\");\n+        sb.append(getNumMessages());\n+        sb.append(\"]\");\n+        return sb.toString();\n+    }\n }",
                "raw_url": "https://github.com/apache/jmeter/raw/36d4ff61610e82ed640a73359230d1f6e449830d/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java",
                "sha": "47f8d17a5e3b7d8b3f5279795c219fc6d8ebc336",
                "status": "modified"
            }
        ],
        "message": "Add support for multipart messages\nAvoid possible NPEs in To: and From: processing\nStore Response Headers if not using store as MIME\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@910812 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bdcbd6fcd4f6642415f1c6b75d45e6e094aefa74",
        "parent": "https://github.com/apache/jmeter/commit/d8baecd9cafc593fb5d68e32b858c105865bf6f8",
        "repo": "jmeter",
        "unit_tests": [
            "TestMailReaderSampler.java"
        ]
    },
    "jmeter_3790d83": {
        "bug_id": "jmeter_3790d83",
        "commit": "https://github.com/apache/jmeter/commit/3790d83956c3786a216d3e025b907ba4b81018bb",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jmeter/blob/3790d83956c3786a216d3e025b907ba4b81018bb/src/core/org/apache/jmeter/JMeter.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=3790d83956c3786a216d3e025b907ba4b81018bb",
                "deletions": 5,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -203,9 +203,10 @@ public void startGui(CLOption testFile) {\n \t\tComponentUtil.centerComponentInWindow(main, 80);\n \t\tmain.show();\n \t\tActionRouter.getInstance().actionPerformed(new ActionEvent(main, 1, ActionNames.ADD_ALL));\n-\t\tif (testFile != null) {\n+        String arg; \n+\t\tif (testFile != null && (arg = testFile.getArgument()) != null) {\n \t\t\ttry {\n-\t\t\t\tFile f = new File(testFile.getArgument());\n+                File f = new File(arg);\n \t\t\t\tlog.info(\"Loading file: \" + f);\n \t\t\t\tFileInputStream reader = new FileInputStream(f);\n \t\t\t\tHashTree tree = SaveService.loadTree(reader);\n@@ -492,10 +493,14 @@ public void startNonGui(CLOption testFile, CLOption logFile, CLOption remoteStar\n \t\tif (testFile == null) {\n \t\t\tthrow new IllegalUserActionException();\n \t\t}\n-\t\tif (logFile == null) {\n-\t\t\tdriver.run(testFile.getArgument(), null, remoteStart != null);\n+\t\tString argument = testFile.getArgument();\n+        if (argument == null) {\n+            throw new IllegalUserActionException();\n+        }\n+        if (logFile == null) {\n+\t\t\tdriver.run(argument, null, remoteStart != null);\n \t\t} else {\n-\t\t\tdriver.run(testFile.getArgument(), logFile.getArgument(), remoteStart != null);\n+\t\t\tdriver.run(argument, logFile.getArgument(), remoteStart != null);\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/3790d83956c3786a216d3e025b907ba4b81018bb/src/core/org/apache/jmeter/JMeter.java",
                "sha": "610af440fadd77f5b5a1a77547943eb937af4cbe",
                "status": "modified"
            }
        ],
        "message": "Protect against NPE with empty filename\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@399906 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8f1772df3833c81e71300b29df2f58eba080536f",
        "parent": "https://github.com/apache/jmeter/commit/f3132ba8df4c035df7cf977afb52ce477a29bd74",
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_4582f7b": {
        "bug_id": "jmeter_4582f7b",
        "commit": "https://github.com/apache/jmeter/commit/4582f7b46cf7877d40fe4ea9695bb5e686986cf3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/4582f7b46cf7877d40fe4ea9695bb5e686986cf3/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleResult.java?ref=4582f7b46cf7877d40fe4ea9695bb5e686986cf3",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/samplers/SampleResult.java",
                "patch": "@@ -121,14 +121,15 @@ public SampleSaveConfiguration getSaveConfig() {\n \n \tprivate List subResults;\n \n-\tprivate String dataType;\n+\tprivate String dataType=\"\"; // Don't return null if not set\n \n \tprivate boolean success;\n \n \tprivate Set files;\n \n \tprivate String dataEncoding;// (is this really the character set?) e.g.\n \t\t\t\t\t\t\t\t// ISO-8895-1, UTF-8\n+\t// If null, then DEFAULT_ENCODING is returned by getDataEncoding()\n \n \tprivate long time = 0;\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/4582f7b46cf7877d40fe4ea9695bb5e686986cf3/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "sha": "6add4cf4705975675c42da85e53eba953ab68866",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE in XStream - ensure dataType does not default to null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@325825 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 0ffe310f266e52fa5a7fb8044faf391a18c1b34c",
        "parent": "https://github.com/apache/jmeter/commit/3bee981f62ce2378ff421de8f497500d84bca67b",
        "repo": "jmeter",
        "unit_tests": [
            "TestSampleResult.java"
        ]
    },
    "jmeter_4677baf": {
        "bug_id": "jmeter_4677baf",
        "commit": "https://github.com/apache/jmeter/commit/4677bafc1674b3388715ba408bfb77d038262631",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jmeter/blob/4677bafc1674b3388715ba408bfb77d038262631/src/core/org/apache/jmeter/JMeter.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=4677bafc1674b3388715ba408bfb77d038262631",
                "deletions": 7,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -362,14 +362,11 @@ private void startGui(String testFile) {\n      * @param args The arguments for JMeter\n      */\n     public void start(String[] args) {\n-        \n-        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"jmeter_as_ascii_art.txt\"));\n-        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n-        System.out.println(JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n-        System.out.println(getClass().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n         try (InputStream inputStream = JMeter.class.getResourceAsStream(\"jmeter_as_ascii_art.txt\")) {\n-            String text = IOUtils.toString(inputStream);\n-            System.out.println(text);\n+            if(inputStream != null) {\n+                String text = IOUtils.toString(inputStream);\n+                System.out.println(text);\n+            }\n         } catch (IOException e1) {\n             // NOP\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/4677bafc1674b3388715ba408bfb77d038262631/src/core/org/apache/jmeter/JMeter.java",
                "sha": "8f15602757f5b846ad5bf4241b3954bba9e219c1",
                "status": "modified"
            }
        ],
        "message": "Fix NPE try 4 : Avoid failing to see what Jars contain\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737316 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e4dbbd7934eabba1076652697c9c99a3d68ff696",
        "parent": "https://github.com/apache/jmeter/commit/7b1081bb077e45de9aaf04893574c945c65df0f6",
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_5838efe": {
        "bug_id": "jmeter_5838efe",
        "commit": "https://github.com/apache/jmeter/commit/5838efe389c3bab0de0c2d635aac394bc4f52545",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/5838efe389c3bab0de0c2d635aac394bc4f52545/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/ResponseAssertion.java?ref=5838efe389c3bab0de0c2d635aac394bc4f52545",
                "deletions": 2,
                "filename": "src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "patch": "@@ -201,8 +201,7 @@ public AssertionResult getResult(SampleResult response)\n       {\n          result = new AssertionResult();\n          result.setError(true);\n-         result.setFailureMessage(\n-            new String((byte[]) response.getResponseData()));\n+         result.setFailureMessage(response.responseDatatoString());\n          return result;\n       }\n       result = evaluateResponse(response);",
                "raw_url": "https://github.com/apache/jmeter/raw/5838efe389c3bab0de0c2d635aac394bc4f52545/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "sha": "c4d054a98b78172720ab231e7e79b4eaaadd95e6",
                "status": "modified"
            }
        ],
        "message": "Ensure null responseData does not cause NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323463 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: a6aaa882cd5a13c0458fb381c4e1e9210b57af5a",
        "parent": "https://github.com/apache/jmeter/commit/7a9cca4b0eedcf9f089c13ca8f9e9188cae7f463",
        "repo": "jmeter",
        "unit_tests": [
            "ResponseAssertionTest.java"
        ]
    },
    "jmeter_5a11e55": {
        "bug_id": "jmeter_5a11e55",
        "commit": "https://github.com/apache/jmeter/commit/5a11e552215dc7cc68d0b2a3682cc429df656447",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jmeter/blob/5a11e552215dc7cc68d0b2a3682cc429df656447/src/functions/org/apache/jmeter/functions/FileRowColContainer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/FileRowColContainer.java?ref=5a11e552215dc7cc68d0b2a3682cc429df656447",
                "deletions": 1,
                "filename": "src/functions/org/apache/jmeter/functions/FileRowColContainer.java",
                "patch": "@@ -109,9 +109,12 @@ private void load()\n         {\n         \tfileData = null;\n \t\t\tlog.warn(e.toString());\n-\t\t\tmyBread.close();\n             throw e;\n         }\n+        finally\n+        {\n+\t\t\tif (myBread != null) myBread.close();\n+        }\n \t}\n \n     /**",
                "raw_url": "https://github.com/apache/jmeter/raw/5a11e552215dc7cc68d0b2a3682cc429df656447/src/functions/org/apache/jmeter/functions/FileRowColContainer.java",
                "sha": "a5bd4077eb185e41f24c92f174bfbfbba72d68e8",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE and failure to close file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324318 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 84218b52587917a333c7402270c825928b103bae",
        "parent": "https://github.com/apache/jmeter/commit/2975406ff22ec824be29d9f679ede7eb62c11f6b",
        "repo": "jmeter",
        "unit_tests": [
            "TestFileRowColContainer.java"
        ]
    },
    "jmeter_5aab820": {
        "bug_id": "jmeter_5aab820",
        "commit": "https://github.com/apache/jmeter/commit/5aab820e539bbef191e397ae366b6e3636fb0743",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jmeter/blob/5aab820e539bbef191e397ae366b6e3636fb0743/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/RegexFunction.java?ref=5aab820e539bbef191e397ae366b6e3636fb0743",
                "deletions": 0,
                "filename": "src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "patch": "@@ -127,6 +127,10 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS\n         // Relatively expensive operation, so do it once\n         JMeterVariables vars = getVariables();\n \n+        if (vars == null){// Can happen if called during test closedown\n+            return defaultValue;\n+        }\n+\n         if (name.length() > 0) {\n             vars.put(name, defaultValue);\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/5aab820e539bbef191e397ae366b6e3636fb0743/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "sha": "22fe516b363e9084f6bd28ca279256553c243487",
                "status": "modified"
            }
        ],
        "message": "Protect against possible NPE if called during shutdown\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@732427 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 45acdd06762fb1399f01d025f3898acec8e3f610",
        "parent": "https://github.com/apache/jmeter/commit/60b6a02093665c25bb439cd0582545dcce8f9f40",
        "repo": "jmeter",
        "unit_tests": [
            "TestRegexFunction.java"
        ]
    },
    "jmeter_6185600": {
        "bug_id": "jmeter_6185600",
        "commit": "https://github.com/apache/jmeter/commit/618560069ba20d2ab31d3d1c4f807b2a0028a154",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/618560069ba20d2ab31d3d1c4f807b2a0028a154/src/core/org/apache/jmeter/reporters/ResultSaver.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/reporters/ResultSaver.java?ref=618560069ba20d2ab31d3d1c4f807b2a0028a154",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/reporters/ResultSaver.java",
                "patch": "@@ -227,6 +227,9 @@ private boolean ignoreSampler(SampleResult s) {\n      * @param parentFile\n      */\n     private void createFoldersIfNeeded(File parentFile) {\n+        if(parentFile == null) {\n+            return;\n+        }\n         if (!parentFile.exists()) {\n             log.debug(\"Creating path hierarchy for folder {}\", parentFile.getAbsolutePath());\n             if(!parentFile.mkdirs()) {",
                "raw_url": "https://github.com/apache/jmeter/raw/618560069ba20d2ab31d3d1c4f807b2a0028a154/src/core/org/apache/jmeter/reporters/ResultSaver.java",
                "sha": "455348e249dbde898829cc04baa442f68eda3a2c",
                "status": "modified"
            }
        ],
        "message": "[Bug 62195] Save Responses to a file : Improve component and UI\nFix NPE\nBugzilla Id: 62195\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1827350 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ce1d8f87532a874db382622fc2872f7ce2639c7f",
        "parent": "https://github.com/apache/jmeter/commit/d08c03f68b9d84d61d3d24e7461cbeeea8e0a550",
        "repo": "jmeter",
        "unit_tests": [
            "TestResultSaver.java"
        ]
    },
    "jmeter_6676493": {
        "bug_id": "jmeter_6676493",
        "commit": "https://github.com/apache/jmeter/commit/6676493d8fdbea544e7030c7b0189e4760688af4",
        "file": [
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/jmeter/blob/6676493d8fdbea544e7030c7b0189e4760688af4/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "changes": 110,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java?ref=6676493d8fdbea544e7030c7b0189e4760688af4",
                "deletions": 50,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "patch": "@@ -985,23 +985,25 @@ private void addTimers(JMeterTreeModel model, JMeterTreeNode node, long deltaT)\n         variables.addParameter(\"T\", Long.toString(deltaT)); // $NON-NLS-1$\n         ValueReplacer replacer = new ValueReplacer(variables);\n         JMeterTreeNode mySelf = model.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> children = mySelf.children();\n-        while (children.hasMoreElements()) {\n-            JMeterTreeNode templateNode = children.nextElement();\n-            if (templateNode.isEnabled()) {\n-                TestElement template = templateNode.getTestElement();\n-                if (template instanceof Timer) {\n-                    TestElement timer = (TestElement) template.clone();\n-                    try {\n-                        timer.setComment(\"Recorded:\"+Long.toString(deltaT)+\"ms\");\n-                        replacer.undoReverseReplace(timer);\n-                        model.addComponent(timer, node);\n-                    } catch (InvalidVariableException\n-                            | IllegalUserActionException e) {\n-                        // Not 100% sure, but I believe this can't happen, so\n-                        // I'll log and throw an error:\n-                        log.error(\"Program error\", e);\n-                        throw new Error(e);\n+        if(mySelf != null) {\n+            Enumeration<JMeterTreeNode> children = mySelf.children();\n+            while (children.hasMoreElements()) {\n+                JMeterTreeNode templateNode = children.nextElement();\n+                if (templateNode.isEnabled()) {\n+                    TestElement template = templateNode.getTestElement();\n+                    if (template instanceof Timer) {\n+                        TestElement timer = (TestElement) template.clone();\n+                        try {\n+                            timer.setComment(\"Recorded:\"+Long.toString(deltaT)+\"ms\");\n+                            replacer.undoReverseReplace(timer);\n+                            model.addComponent(timer, node);\n+                        } catch (InvalidVariableException\n+                                | IllegalUserActionException e) {\n+                            // Not 100% sure, but I believe this can't happen, so\n+                            // I'll log and throw an error:\n+                            log.error(\"Program error adding timers\", e);\n+                            throw new Error(e);\n+                        }\n                     }\n                 }\n             }\n@@ -1088,25 +1090,27 @@ public JMeterTreeNode findTargetControllerNode() {\n         LinkedList<TestElement> elements = new LinkedList<>();\n \n         // Look for elements directly within the HTTP proxy:\n-        Enumeration<?> kids = treeModel.getNodeOf(this).children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement element = (TestElement) subNode.getUserObject();\n-                if (myClass.isInstance(element)) {\n-                    if (ascending) {\n-                        elements.addFirst(element);\n-                    } else {\n-                        elements.add(element);\n+        JMeterTreeNode node = treeModel.getNodeOf(this);\n+        if(node != null) {\n+            Enumeration<?> kids = node.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement element = (TestElement) subNode.getUserObject();\n+                    if (myClass.isInstance(element)) {\n+                        if (ascending) {\n+                            elements.addFirst(element);\n+                        } else {\n+                            elements.add(element);\n+                        }\n                     }\n                 }\n             }\n         }\n-\n         // Look for arguments elements in the target controller or higher up:\n         for (JMeterTreeNode controller = myTarget; controller != null; controller = (JMeterTreeNode) controller\n                 .getParent()) {\n-            kids = controller.children();\n+            Enumeration<?> kids = controller.children();\n             while (kids.hasMoreElements()) {\n                 JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();\n                 if (subNode.isEnabled()) {\n@@ -1360,13 +1364,15 @@ private void replaceValues(TestElement sampler, TestElement[] configs, Collectio\n     private void notifySampleListeners(SampleEvent event) {\n         JMeterTreeModel treeModel = getJmeterTreeModel();\n         JMeterTreeNode myNode = treeModel.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> kids = myNode.children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement testElement = subNode.getTestElement();\n-                if (testElement instanceof SampleListener) {\n-                    ((SampleListener) testElement).sampleOccurred(event);\n+        if(myNode != null) {\n+            Enumeration<JMeterTreeNode> kids = myNode.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement testElement = subNode.getTestElement();\n+                    if (testElement instanceof SampleListener) {\n+                        ((SampleListener) testElement).sampleOccurred(event);\n+                    }\n                 }\n             }\n         }\n@@ -1379,13 +1385,15 @@ private void notifySampleListeners(SampleEvent event) {\n     private void notifyTestListenersOfStart() {\n         JMeterTreeModel treeModel = getJmeterTreeModel();\n         JMeterTreeNode myNode = treeModel.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> kids = myNode.children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement testElement = subNode.getTestElement();\n-                if (testElement instanceof TestStateListener) {\n-                    ((TestStateListener) testElement).testStarted();\n+        if(myNode != null) {\n+            Enumeration<JMeterTreeNode> kids = myNode.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement testElement = subNode.getTestElement();\n+                    if (testElement instanceof TestStateListener) {\n+                        ((TestStateListener) testElement).testStarted();\n+                    }\n                 }\n             }\n         }\n@@ -1398,13 +1406,15 @@ private void notifyTestListenersOfStart() {\n     private void notifyTestListenersOfEnd() {\n         JMeterTreeModel treeModel = getJmeterTreeModel();\n         JMeterTreeNode myNode = treeModel.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> kids = myNode.children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement testElement = subNode.getTestElement();\n-                if (testElement instanceof TestStateListener) { // TL - TE\n-                    ((TestStateListener) testElement).testEnded();\n+        if(myNode != null) {\n+            Enumeration<JMeterTreeNode> kids = myNode.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement testElement = subNode.getTestElement();\n+                    if (testElement instanceof TestStateListener) { // TL - TE\n+                        ((TestStateListener) testElement).testEnded();\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/6676493d8fdbea544e7030c7b0189e4760688af4/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "sha": "abac91193653308e2372c08d4bdfc40258bab248",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1807339 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bcd84e6d09e26039a13a0d771d86c2900f4ff6fb",
        "parent": "https://github.com/apache/jmeter/commit/96574f079949575ea51c8763e98f91a90b560458",
        "repo": "jmeter",
        "unit_tests": [
            "TestProxyControl.java"
        ]
    },
    "jmeter_6dcc29a": {
        "bug_id": "jmeter_6dcc29a",
        "commit": "https://github.com/apache/jmeter/commit/6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java?ref=6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8",
                "deletions": 1,
                "filename": "src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java",
                "patch": "@@ -90,7 +90,7 @@ public void write(OutputStream os, InputStream is) {\n      * )\n      */\n     public String read(InputStream is) {\n-        byte[] msg = null;\n+        byte[] msg = new byte[0];\n         int msgLen = 0;\n         try {\n             byte[] lengthBuffer = new byte[lengthPrefixLen];",
                "raw_url": "https://github.com/apache/jmeter/raw/6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java",
                "sha": "b3df93d03545f486295067aa0d2529e7d717e2a5",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@711629 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4350581ccf13746f245af110d56fcfbef6a04237",
        "parent": "https://github.com/apache/jmeter/commit/94dd949ce24d399165b462038dc041d2c9aa6a35",
        "repo": "jmeter",
        "unit_tests": [
            "LengthPrefixedBinaryTCPClientImplTest.java"
        ]
    },
    "jmeter_6e9c33e": {
        "bug_id": "jmeter_6e9c33e",
        "commit": "https://github.com/apache/jmeter/commit/6e9c33e74537075ea0ab892f319b422b624c4262",
        "file": [
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/jmeter/blob/6e9c33e74537075ea0ab892f319b422b624c4262/src/core/org/apache/jmeter/save/SaveService.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/SaveService.java?ref=6e9c33e74537075ea0ab892f319b422b624c4262",
                "deletions": 25,
                "filename": "src/core/org/apache/jmeter/save/SaveService.java",
                "patch": "@@ -505,6 +505,24 @@ public static void loadTestResults(InputStream reader, ResultCollectorHelper res\n         inputStreamReader.close();\n     }\n \n+    /**\n+     * Load a Test tree (JMX file)\n+     * @param file the JMX file\n+     * @return the loaded tree or null if an error occurs\n+     * @throws IOException if there is a problem reading the file or processing it\n+     * @deprecated use {@link SaveService}{@link #loadTree(File)}\n+     */\n+    public static HashTree loadTree(InputStream reader) throws IOException {\n+        try {\n+            return readTree(reader, null);\n+        } catch(IllegalArgumentException e) {\n+            log.error(\"Problem loading XML, message:\"+e.getMessage(), e);\n+            return null;\n+        } finally {\n+            JOrphanUtils.closeQuietly(reader);\n+        }\n+    }\n+    \n     /**\n      * Load a Test tree (JMX file)\n      * @param file the JMX file\n@@ -516,38 +534,62 @@ public static HashTree loadTree(File file) throws IOException {\n         InputStream reader = null;\n         try {\n             reader = new FileInputStream(file);\n-            if (!reader.markSupported()) {\n-                reader = new BufferedInputStream(reader);\n+            return readTree(reader, file);\n+        } finally {\n+            JOrphanUtils.closeQuietly(reader);\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @param reader {@link InputStream} \n+     * @param file the JMX file used only for debug, can be null\n+     * @return the loaded tree\n+     * @throws IOException if there is a problem reading the file or processing it\n+     */\n+    private static final HashTree readTree(InputStream reader, File file) throws IOException {\n+        if (!reader.markSupported()) {\n+            reader = new BufferedInputStream(reader);\n+        }\n+        reader.mark(Integer.MAX_VALUE);\n+        ScriptWrapper wrapper = null;\n+        try {\n+            // Get the InputReader to use\n+            InputStreamReader inputStreamReader = getInputStreamReader(reader);\n+            wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n+            inputStreamReader.close();\n+            if (wrapper == null){\n+                log.error(\"Problem loading XML: see above.\");\n+                return null;\n             }\n-            reader.mark(Integer.MAX_VALUE);\n-            ScriptWrapper wrapper = null;\n-            try {\n-                // Get the InputReader to use\n-                InputStreamReader inputStreamReader = getInputStreamReader(reader);\n-                wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n-                inputStreamReader.close();\n-                if (wrapper == null){\n-                    log.error(\"Problem loading XML: see above.\");\n-                    return null;\n-                }\n-                return wrapper.testPlan;\n-            } catch (CannotResolveClassException e) {\n-                if (e.getMessage().startsWith(\"node\")) {\n-                    log.info(\"Problem loading XML, trying Avalon format\");\n-                    reader.reset();\n-                    return OldSaveService.loadSubTree(reader);                \n-                }\n+            return wrapper.testPlan;\n+        } catch (CannotResolveClassException e) {\n+            // FIXME We switching to JAVA7, use Multi-Catch Exceptions\n+            if (e.getMessage().startsWith(\"node\")) {\n+                log.info(\"Problem loading XML, trying Avalon format\");\n+                reader.reset();\n+                return OldSaveService.loadSubTree(reader);                \n+            }\n+            if(file != null) {\n                 throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', cannot determine class for element: \" + e, e);\n-            } catch (NoClassDefFoundError e) {\n+            } else {\n+                throw new IllegalArgumentException(\"Problem loading XML, cannot determine class for element: \" + e, e);\n+            }\n+        } catch (NoClassDefFoundError e) {\n+            if(file != null) {\n                 throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', missing class \"+e , e);\n-            } catch (ConversionException e) {\n+            } else {\n+                throw new IllegalArgumentException(\"Problem loading XML, missing class \"+e , e);\n+            }\n+        } catch (ConversionException e) {\n+            if(file != null) {\n                 throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', conversion error \"+e , e);\n+            } else {\n+                throw new IllegalArgumentException(\"Problem loading XML, conversion error \"+e , e);\n             }\n-        } finally {\n-            JOrphanUtils.closeQuietly(reader);\n         }\n-    }\n \n+    }\n     private static InputStreamReader getInputStreamReader(InputStream inStream) {\n         // Check if we have a encoding to use from properties\n         Charset charset = getFileEncodingCharset();",
                "raw_url": "https://github.com/apache/jmeter/raw/6e9c33e74537075ea0ab892f319b422b624c4262/src/core/org/apache/jmeter/save/SaveService.java",
                "sha": "2ee41efad4a0d024beac062022c6c7bba4110d6c",
                "status": "modified"
            }
        ],
        "message": "[Bug 57605] When there is an error loading Test Plan, SaveService.loadTree returns null leading to NPE in callers\nRetain backward compatibility as per sebb note\nBugzilla Id: 57605\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1661763 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4cfdbcd88ee56564748eb0b3bebd476030bec186",
        "parent": "https://github.com/apache/jmeter/commit/04bfc032adec91e040826804a254a3cfca6e5600",
        "repo": "jmeter",
        "unit_tests": [
            "TestSaveService.java"
        ]
    },
    "jmeter_7af21a4": {
        "bug_id": "jmeter_7af21a4",
        "commit": "https://github.com/apache/jmeter/commit/7af21a4fc4d242ad0a17378d028dd2a2e94be985",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/7af21a4fc4d242ad0a17378d028dd2a2e94be985/src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java?ref=7af21a4fc4d242ad0a17378d028dd2a2e94be985",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java",
                "patch": "@@ -318,7 +318,7 @@\n \t\t\t_formatter = null;\n \t\t}\n \n-\t\t_timestamp = !_timeStampFormat.equalsIgnoreCase(NONE);\n+\t\t_timestamp = !NONE.equalsIgnoreCase(_timeStampFormat);// reversed compare allows for null\n \n \t\t_saveAssertionResultsFailureMessage = TRUE.equalsIgnoreCase(props.getProperty(\n \t\t\t\tASSERTION_RESULTS_FAILURE_MESSAGE_PROP, FALSE));",
                "raw_url": "https://github.com/apache/jmeter/raw/7af21a4fc4d242ad0a17378d028dd2a2e94be985/src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java",
                "sha": "c0c7827a952504414d633b929c8f2952e58b5425",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@463051 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: b618649f8e24f7733d8deb47efcd03e549568095",
        "parent": "https://github.com/apache/jmeter/commit/3e554df3ca1e3e4552076b37f5fd312eeff368fb",
        "repo": "jmeter",
        "unit_tests": [
            "TestSampleSaveConfiguration.java"
        ]
    },
    "jmeter_7b1081b": {
        "bug_id": "jmeter_7b1081b",
        "commit": "https://github.com/apache/jmeter/commit/7b1081bb077e45de9aaf04893574c945c65df0f6",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jmeter/blob/7b1081bb077e45de9aaf04893574c945c65df0f6/src/core/org/apache/jmeter/JMeter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=7b1081bb077e45de9aaf04893574c945c65df0f6",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -363,6 +363,10 @@ private void startGui(String testFile) {\n      */\n     public void start(String[] args) {\n         \n+        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"jmeter_as_ascii_art.txt\"));\n+        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n+        System.out.println(JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n+        System.out.println(getClass().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n         try (InputStream inputStream = JMeter.class.getResourceAsStream(\"jmeter_as_ascii_art.txt\")) {\n             String text = IOUtils.toString(inputStream);\n             System.out.println(text);",
                "raw_url": "https://github.com/apache/jmeter/raw/7b1081bb077e45de9aaf04893574c945c65df0f6/src/core/org/apache/jmeter/JMeter.java",
                "sha": "1b05ccbd56a24c1a70a636e9e28b1e9a9d873b36",
                "status": "modified"
            }
        ],
        "message": "Fix NPE try 3\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737314 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 47c4e89d2de5e58182c0c152c678988deeb7f7a3",
        "parent": "https://github.com/apache/jmeter/commit/c3fb27cf17025a86b9318614127431afaf0f97c0",
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_81cd2e8": {
        "bug_id": "jmeter_81cd2e8",
        "commit": "https://github.com/apache/jmeter/commit/81cd2e804898cb278c9573e8e8d8b83344bb3e19",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/jmeter/blob/81cd2e804898cb278c9573e8e8d8b83344bb3e19/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=81cd2e804898cb278c9573e8e8d8b83344bb3e19",
                "deletions": 12,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -883,20 +883,23 @@ protected void setConnectionHeaders(HttpRequestBase request, URL url, HeaderMana\n      * @return the headers as a string\n      */\n     private String getConnectionHeaders(HttpRequest method) {\n-        // Get all the request headers\n-        StringBuilder hdrs = new StringBuilder(100);\n-        Header[] requestHeaders = method.getAllHeaders();\n-        for(int i = 0; i < requestHeaders.length; i++) {\n-            // Exclude the COOKIE header, since cookie is reported separately in the sample\n-            if(!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(requestHeaders[i].getName())) {\n-                hdrs.append(requestHeaders[i].getName());\n-                hdrs.append(\": \"); // $NON-NLS-1$\n-                hdrs.append(requestHeaders[i].getValue());\n-                hdrs.append(\"\\n\"); // $NON-NLS-1$\n+        if(method != null) {\n+            // Get all the request headers\n+            StringBuilder hdrs = new StringBuilder(100);\n+            Header[] requestHeaders = method.getAllHeaders();\n+            for(int i = 0; i < requestHeaders.length; i++) {\n+                // Exclude the COOKIE header, since cookie is reported separately in the sample\n+                if(!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(requestHeaders[i].getName())) {\n+                    hdrs.append(requestHeaders[i].getName());\n+                    hdrs.append(\": \"); // $NON-NLS-1$\n+                    hdrs.append(requestHeaders[i].getValue());\n+                    hdrs.append(\"\\n\"); // $NON-NLS-1$\n+                }\n             }\n+    \n+            return hdrs.toString();\n         }\n-\n-        return hdrs.toString();\n+        return \"\"; ////$NON-NLS-1$\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jmeter/raw/81cd2e804898cb278c9573e8e8d8b83344bb3e19/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "10e7a7becb48d1d69271b42ea944477324473e1b",
                "status": "modified"
            }
        ],
        "message": "When HTTP Request contains an empty host, we get a NPE instead of a clear message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1634990 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 7a72f496684e16ffc3f5abb5dddf697519256e6b",
        "parent": "https://github.com/apache/jmeter/commit/77b8fd6a6c384338d0f4c068527a650f7c7f6691",
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_89e25ec": {
        "bug_id": "jmeter_89e25ec",
        "commit": "https://github.com/apache/jmeter/commit/89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jmeter/blob/89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/ResponseAssertion.java?ref=89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e",
                "deletions": 8,
                "filename": "src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "patch": "@@ -57,7 +57,6 @@\n import java.util.*;\n import java.io.Serializable;\n import org.apache.jmeter.samplers.SampleResult;\n-import org.apache.jmeter.config.ConfigElement;\n import org.apache.jmeter.testelement.AbstractTestElement;\n \n import org.apache.oro.text.PatternCacheLRU;\n@@ -92,15 +91,15 @@\n \tpublic final static int CONTAINS = 1 << 1;\n \tpublic final static int NOT = 1 << 2;\n \n-\tprivate transient static ThreadLocal matcher =\n+\tprivate static ThreadLocal matcher =\n \t    new ThreadLocal()\n \t    {\n-\t\tprotected Object initialValue()\n-\t\t{\n-\t\t    return new Perl5Matcher();\n-\t\t}\n+\t\t\tprotected Object initialValue()\n+\t\t\t{\n+\t\t\t    return new Perl5Matcher();\n+\t\t\t}\n \t    };\n-\tprivate transient PatternCacheLRU patternCache =\n+\tprivate static PatternCacheLRU patternCache =\n \t\tnew PatternCacheLRU(1000, new Perl5Compiler());\n \n \t/************************************************************\n@@ -314,7 +313,7 @@ private AssertionResult evaluateResponse(SampleResult response)\n \t    while (iter.hasNext())\n \t    {\n \t\tString stringPattern= (String) iter.next();\n-\t\tPattern pattern = patternCache.getPattern(stringPattern);\n+\t\tPattern pattern = patternCache.getPattern(stringPattern, Perl5Compiler.READ_ONLY_MASK);\n \t\tboolean found;\n \t\tif ((CONTAINS & getTestType()) > 0)\n \t\t{",
                "raw_url": "https://github.com/apache/jmeter/raw/89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "sha": "1ddbddb5210fc9ae0e79821dc397fd854a40ca9c",
                "status": "modified"
            }
        ],
        "message": "Made PatternCache static and used READ_ONLY patterns - this fixes a NPE that occurs in remote sessions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@322961 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 91e6618d82d1004105217598cb56b40e38abdc2c",
        "parent": "https://github.com/apache/jmeter/commit/48d04fab42006267ae4faea80ffad25c2ea550b1",
        "repo": "jmeter",
        "unit_tests": [
            "ResponseAssertionTest.java"
        ]
    },
    "jmeter_a0b7d07": {
        "bug_id": "jmeter_a0b7d07",
        "commit": "https://github.com/apache/jmeter/commit/a0b7d075658b468c239544cd2a71f609e79d4d55",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jmeter/blob/a0b7d075658b468c239544cd2a71f609e79d4d55/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/JMeterUtils.java?ref=a0b7d075658b468c239544cd2a71f609e79d4d55",
                "deletions": 2,
                "filename": "src/core/org/apache/jmeter/util/JMeterUtils.java",
                "patch": "@@ -832,9 +832,12 @@ public static long getPropDefault(String propName, long defaultVal) {\n      * @return The PropDefault value\n      */\n     public static String getPropDefault(String propName, String defaultVal) {\n-        String ans;\n+        String ans = defaultVal;\n         try {\n-            ans = appProperties.getProperty(propName, defaultVal).trim();\n+            String value = appProperties.getProperty(propName, defaultVal);\n+            if(value != null) {\n+                ans = value.trim();\n+            }\n         } catch (Exception e) {\n             ans = defaultVal;\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/a0b7d075658b468c239544cd2a71f609e79d4d55/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "sha": "db4ba9f5c52625b2316c0a5a04db261ad576c7f8",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when defaultVal is also null (13 times at JMeter startup)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1294527 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: c738b79725b9860e7bdfbd0db150f6ace6eb350e",
        "parent": "https://github.com/apache/jmeter/commit/571ecd698ab57f32b6b31aadcfdb595f35d2908c",
        "repo": "jmeter",
        "unit_tests": [
            "TestJMeterUtils.java"
        ]
    },
    "jmeter_a0cdb57": {
        "bug_id": "jmeter_a0cdb57",
        "commit": "https://github.com/apache/jmeter/commit/a0cdb57308eeeda1b7eb5c30b1ec0056125b0879",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/jmeter/blob/a0cdb57308eeeda1b7eb5c30b1ec0056125b0879/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=a0cdb57308eeeda1b7eb5c30b1ec0056125b0879",
                "deletions": 2,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -122,6 +122,7 @@\n import org.apache.jmeter.testelement.property.JMeterProperty;\n import org.apache.jmeter.testelement.property.PropertyIterator;\n import org.apache.jmeter.threads.JMeterContextService;\n+import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n import org.apache.jmeter.util.JsseSSLManager;\n import org.apache.jmeter.util.SSLManager;\n@@ -450,7 +451,11 @@ private final void extractClientContextAfterSample(HttpContext localContext) {\n             if(log.isDebugEnabled()) {\n                 log.debug(\"Extracted from HttpContext user token:\"+userToken+\", storing it as JMeter variable:\"+USER_TOKEN);\n             }\n-            JMeterContextService.getContext().getVariables().putObject(USER_TOKEN, userToken); \n+            // During recording JMeterContextService.getContext().getVariables() is null\n+            JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();\n+            if (jMeterVariables != null) {\n+                jMeterVariables.putObject(USER_TOKEN, userToken); \n+            }\n         }\n     }\n \n@@ -460,7 +465,12 @@ private final void extractClientContextAfterSample(HttpContext localContext) {\n      * @param localContext {@link HttpContext}\n      */\n     private final void setupClientContextBeforeSample(HttpContext localContext) {\n-        Object userToken = JMeterContextService.getContext().getVariables().getObject(USER_TOKEN);\n+        Object userToken = null;\n+        // During recording JMeterContextService.getContext().getVariables() is null\n+        JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();\n+        if(jMeterVariables != null) {\n+            userToken = jMeterVariables.getObject(USER_TOKEN);            \n+        }\n         if(userToken != null) {\n             if(log.isDebugEnabled()) {\n                 log.debug(\"Found user token:\"+userToken+\" as JMeter variable:\"+USER_TOKEN+\", storing it in HttpContext\");",
                "raw_url": "https://github.com/apache/jmeter/raw/a0cdb57308eeeda1b7eb5c30b1ec0056125b0879/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "42da01f8f692727e21c69ebcd49c1f2e4fc4baf5",
                "status": "modified"
            }
        ],
        "message": "Fix NPE during recording\nBugzilla Id: 57804\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1722352 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 862a4b8a1264b5d2d35b8bf5f9b3d953fa495d59",
        "parent": "https://github.com/apache/jmeter/commit/c06a7c680bf5aec9520102503d594b4003fee3b4",
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_a5c5ec9": {
        "bug_id": "jmeter_a5c5ec9",
        "commit": "https://github.com/apache/jmeter/commit/a5c5ec98e0d766f1a6a02a932e5162878a2819e4",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jmeter/blob/a5c5ec98e0d766f1a6a02a932e5162878a2819e4/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/XPathExtractor.java?ref=a5c5ec98e0d766f1a6a02a932e5162878a2819e4",
                "deletions": 3,
                "filename": "src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "patch": "@@ -195,9 +195,13 @@ private void getValuesForXPath(Document d,String query, JMeterVariables vars, St\n \t        for (int i = 0 ; i < length; i++) {\n \t            Node match = matches.item(i);\n \t\t\t\tif ( match instanceof Element){\n-\t\t\t\t   // elements have empty nodeValue, but we are usually\n-\t\t\t\t   // interested in their content\n-\t\t\t\t   val = match.getFirstChild().getNodeValue();\n+\t\t\t\t// elements have empty nodeValue, but we are usually interested in their content\n+\t\t\t\t   final Node firstChild = match.getFirstChild();\n+\t\t\t\t   if (firstChild != null) {\n+\t\t\t\t\t   val = firstChild.getNodeValue();\n+\t\t\t\t   } else {\n+\t\t\t\t\t   val = match.getNodeValue(); // TODO is this correct?\n+\t\t\t\t   }\n \t\t\t\t} else {\t\t\t\t\n \t\t\t\t   val = match.getNodeValue();\n \t\t\t\t}",
                "raw_url": "https://github.com/apache/jmeter/raw/a5c5ec98e0d766f1a6a02a932e5162878a2819e4/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "sha": "78e577b192171086e8781d288ea448242c336625",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if node has no childred\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@545777 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 3339b2e5edda9f622ea50838d25523fef2a94c02",
        "parent": "https://github.com/apache/jmeter/commit/1a9a6afc1ebfc6c880b8a3c9499717ae43d5ac52",
        "repo": "jmeter",
        "unit_tests": [
            "TestXPathExtractor.java"
        ]
    },
    "jmeter_bd4cdbe": {
        "bug_id": "jmeter_bd4cdbe",
        "commit": "https://github.com/apache/jmeter/commit/bd4cdbe39a98e7d12bc5b7057035327f074c8bb2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/bd4cdbe39a98e7d12bc5b7057035327f074c8bb2/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleResult.java?ref=bd4cdbe39a98e7d12bc5b7057035327f074c8bb2",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/samplers/SampleResult.java",
                "patch": "@@ -97,7 +97,7 @@ public SampleSaveConfiguration getSaveConfig() {\n \n \tprivate String samplerData;\n \n-\tprivate String threadName;\n+\tprivate String threadName = \"\"; // Never return null\n \n \tprivate String responseMessage = \"\";\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/bd4cdbe39a98e7d12bc5b7057035327f074c8bb2/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "sha": "f35ec15f05698d2b08a2589e90fa4597e2036644",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when writing JTL if threadName does not get set\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@387618 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5ff9aa620dc9f823735196e60da220fd367137bc",
        "parent": "https://github.com/apache/jmeter/commit/dc62c0f93509335762dd6237d4da30bb78569c83",
        "repo": "jmeter",
        "unit_tests": [
            "TestSampleResult.java"
        ]
    },
    "jmeter_c376008": {
        "bug_id": "jmeter_c376008",
        "commit": "https://github.com/apache/jmeter/commit/c3760081b200c6efa170bbb87e3389b8a35b5504",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/c3760081b200c6efa170bbb87e3389b8a35b5504/src/core/org/apache/jmeter/report/core/SampleMetadata.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/SampleMetadata.java?ref=c3760081b200c6efa170bbb87e3389b8a35b5504",
                "deletions": 4,
                "filename": "src/core/org/apache/jmeter/report/core/SampleMetadata.java",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.TreeMap;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.samplers.SampleSaveConfiguration;\n import org.apache.jmeter.save.CSVSaveService;\n \n@@ -52,12 +53,10 @@\n      * @param separator\n      *            The character used for column separation\n      * @param columns\n-     *            The list of columns names\n+     *            The list of columns names (must not be {@code null})\n      */\n     public SampleMetadata(char separator, String... columns) {\n-        if (columns == null) {\n-            throw new ArgumentNullException(\"columns\");\n-        }\n+        Validate.notNull(columns, \"columns must not be null\");\n         initialize(separator, Arrays.asList(columns));\n     }\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/c3760081b200c6efa170bbb87e3389b8a35b5504/src/core/org/apache/jmeter/report/core/SampleMetadata.java",
                "sha": "2e45d7df14f13561d0ad1db6c9652754f32ae9c7",
                "status": "modified"
            }
        ],
        "message": "Change ArgumentNullException to NPE and document the need for non null parameter\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721383 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 7e4ffc80651c2fdd3420cd9bb6b355dd26cf7368",
        "parent": "https://github.com/apache/jmeter/commit/a62ecf05a523100a50ff6e9488bf30d2edc3006e",
        "repo": "jmeter",
        "unit_tests": [
            "SampleMetadataTest.java"
        ]
    },
    "jmeter_c3bb466": {
        "bug_id": "jmeter_c3bb466",
        "commit": "https://github.com/apache/jmeter/commit/c3bb466df52d628c01a6ff2ee1f7299436b191e5",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/c3bb466df52d628c01a6ff2ee1f7299436b191e5/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/threads/JMeterThread.java?ref=c3bb466df52d628c01a6ff2ee1f7299436b191e5",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/threads/JMeterThread.java",
                "patch": "@@ -328,7 +328,8 @@ private void triggerEndOfLoopOnParentControllers(Sampler sam, JMeterContext thre\n \n         Sampler realSampler = findRealSampler(sam);\n         if(realSampler == null) {\n-            throw new IllegalStateException(\"Got null subSampler calling findRealSampler for:\"+sam.getName()+\", sam:\"+sam);\n+            throw new IllegalStateException(\"Got null subSampler calling findRealSampler for:\"+\n+                    (sam != null ? sam.getName(): \"null\")+\", sam:\"+sam);\n         }\n         // Find parent controllers of current sampler\n         FindTestElementsUpToRootTraverser pathToRootTraverser = new FindTestElementsUpToRootTraverser(realSampler);",
                "raw_url": "https://github.com/apache/jmeter/raw/c3bb466df52d628c01a6ff2ee1f7299436b191e5/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "sha": "03203ca37e21206f4fc8e932776337fe8f7a434c",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1783593 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f1c69ea60bea1abe91a6d7c8aa361f79e0a32e37",
        "parent": "https://github.com/apache/jmeter/commit/0467684c88493b0c424be584723bf1a1f9cfbe6a",
        "repo": "jmeter",
        "unit_tests": [
            "TestJMeterThread.java"
        ]
    },
    "jmeter_c3fb27c": {
        "bug_id": "jmeter_c3fb27c",
        "commit": "https://github.com/apache/jmeter/commit/c3fb27cf17025a86b9318614127431afaf0f97c0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/c3fb27cf17025a86b9318614127431afaf0f97c0/src/core/org/apache/jmeter/JMeter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=c3fb27cf17025a86b9318614127431afaf0f97c0",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -363,7 +363,7 @@ private void startGui(String testFile) {\n      */\n     public void start(String[] args) {\n         \n-        try (InputStream inputStream = JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\")) {\n+        try (InputStream inputStream = JMeter.class.getResourceAsStream(\"jmeter_as_ascii_art.txt\")) {\n             String text = IOUtils.toString(inputStream);\n             System.out.println(text);\n         } catch (IOException e1) {",
                "raw_url": "https://github.com/apache/jmeter/raw/c3fb27cf17025a86b9318614127431afaf0f97c0/src/core/org/apache/jmeter/JMeter.java",
                "sha": "417af711ccfa9f946ebe594b11cc7b86fba272a5",
                "status": "modified"
            }
        ],
        "message": "Fix NPE try 2\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737313 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8f82b3d3afc705a276f39d4f5cc694cbf1acc66f",
        "parent": "https://github.com/apache/jmeter/commit/d2ca0b9dcf20931fca99d664748cf03f94e4d89a",
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_d675190": {
        "bug_id": "jmeter_d675190",
        "commit": "https://github.com/apache/jmeter/commit/d67519025e9bfe0da3ee85cc87d76a59a230eb2e",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/jmeter/blob/d67519025e9bfe0da3ee85cc87d76a59a230eb2e/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java?ref=d67519025e9bfe0da3ee85cc87d76a59a230eb2e",
                "deletions": 37,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "patch": "@@ -28,8 +28,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import javax.swing.SwingUtilities;\n-\n import org.apache.jmeter.assertions.ResponseAssertion;\n import org.apache.jmeter.assertions.gui.AssertionGui;\n import org.apache.jmeter.config.Arguments;\n@@ -396,42 +394,30 @@ public void setTarget(JMeterTreeNode target) {\n      * server's response while recording. A future consideration.\n      */\n     public synchronized void deliverSampler(final HTTPSamplerBase sampler, final TestElement[] subConfigs, final SampleResult result) {\n-        try {\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                public void run() {\n-                    if (filterContentType(result) && filterUrl(sampler)) {\n-                        JMeterTreeNode myTarget = findTargetControllerNode();\n-                        @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n-                        Collection<ConfigTestElement> defaultConfigurations = (Collection<ConfigTestElement>) findApplicableElements(myTarget, ConfigTestElement.class, false);\n-                        @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n-                        Collection<Arguments> userDefinedVariables = (Collection<Arguments>) findApplicableElements(myTarget, Arguments.class, true);\n-\n-                        removeValuesFromSampler(sampler, defaultConfigurations);\n-                        replaceValues(sampler, subConfigs, userDefinedVariables);\n-                        sampler.setAutoRedirects(samplerRedirectAutomatically);\n-                        sampler.setFollowRedirects(samplerFollowRedirects);\n-                        sampler.setUseKeepAlive(useKeepAlive);\n-                        sampler.setImageParser(samplerDownloadImages);\n-\n-                        placeSampler(sampler, subConfigs, myTarget);\n-                    }\n-                    else {\n-                        if(log.isDebugEnabled()) {\n-                            log.debug(\"Sample excluded based on url or content-type: \" + result.getUrlAsString() + \" - \" + result.getContentType());\n-                        }\n-                        result.setSampleLabel(\"[\"+result.getSampleLabel()+\"]\");\n-                    }\n-                    // SampleEvent is not passed JMeterVariables, because they don't make sense for Proxy Recording\n-                    notifySampleListeners(new SampleEvent(result, \"WorkBench\")); // TODO - is this the correct threadgroup name?\n-                }\n-            });\n-        } catch (InterruptedException e) {\n-            log.error(\"Program error\", e);\n-            throw new Error(e);\n-        } catch (InvocationTargetException e) {\n-            log.error(\"Program error\", e);\n-            throw new Error(e);\n+        if (filterContentType(result) && filterUrl(sampler)) {\n+            JMeterTreeNode myTarget = findTargetControllerNode();\n+            @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n+            Collection<ConfigTestElement> defaultConfigurations = (Collection<ConfigTestElement>) findApplicableElements(myTarget, ConfigTestElement.class, false);\n+            @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n+            Collection<Arguments> userDefinedVariables = (Collection<Arguments>) findApplicableElements(myTarget, Arguments.class, true);\n+\n+            removeValuesFromSampler(sampler, defaultConfigurations);\n+            replaceValues(sampler, subConfigs, userDefinedVariables);\n+            sampler.setAutoRedirects(samplerRedirectAutomatically);\n+            sampler.setFollowRedirects(samplerFollowRedirects);\n+            sampler.setUseKeepAlive(useKeepAlive);\n+            sampler.setImageParser(samplerDownloadImages);\n+\n+            placeSampler(sampler, subConfigs, myTarget);\n+        }\n+        else {\n+            if(log.isDebugEnabled()) {\n+                log.debug(\"Sample excluded based on url or content-type: \" + result.getUrlAsString() + \" - \" + result.getContentType());\n+            }\n+            result.setSampleLabel(\"[\"+result.getSampleLabel()+\"]\");\n         }\n+        // SampleEvent is not passed JMeterVariables, because they don't make sense for Proxy Recording\n+        notifySampleListeners(new SampleEvent(result, \"WorkBench\")); // TODO - is this the correct threadgroup name?\n     }\n \n     public void stopProxy() {",
                "raw_url": "https://github.com/apache/jmeter/raw/d67519025e9bfe0da3ee85cc87d76a59a230eb2e/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "sha": "d7c2d434cd11a39bf14205add3ba69f042b76a50",
                "status": "modified"
            }
        ],
        "message": "Revert back invokeLater as we must wait for sample to occur before delivering otherwise a NPE will occurs in ResultCollector\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1294195 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ffed87786446f8a9710d3b80320eeb8862b23e86",
        "parent": "https://github.com/apache/jmeter/commit/ded56a6a606b8cd74e9dae302bc25faf7c74b5aa",
        "repo": "jmeter",
        "unit_tests": [
            "TestProxyControl.java"
        ]
    },
    "jmeter_d763e53": {
        "bug_id": "jmeter_d763e53",
        "commit": "https://github.com/apache/jmeter/commit/d763e53d5c230502b65addb96b758460c8126280",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/d763e53d5c230502b65addb96b758460c8126280/src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java?ref=d763e53d5c230502b65addb96b758460c8126280",
                "deletions": 1,
                "filename": "src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java",
                "patch": "@@ -68,7 +68,7 @@ public String getResponseCode() {\n      * @return the response message, 'none' if the code is empty\n      */\n     public String getResponseMessage() {\n-        if (responseMessage.isEmpty()) {\n+        if (responseMessage == null || responseMessage.isEmpty()) {\n             return \"None\";\n         } else {\n             return responseMessage.trim();",
                "raw_url": "https://github.com/apache/jmeter/raw/d763e53d5c230502b65addb96b758460c8126280/src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java",
                "sha": "48e02e8dacbdc44dc1d0881b39799a568260e7c5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/d763e53d5c230502b65addb96b758460c8126280/src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java?ref=d763e53d5c230502b65addb96b758460c8126280",
                "deletions": 1,
                "filename": "src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java",
                "patch": "@@ -1582,7 +1582,7 @@ public void setIgnore() {\n     }\n \n     /**\n-     * @return String first non null assertion failure message\n+     * @return String first non null assertion failure message if assertionResults is not null, null otherwise\n      */\n     public String getFirstAssertionFailureMessage() {\n         String message = null;",
                "raw_url": "https://github.com/apache/jmeter/raw/d763e53d5c230502b65addb96b758460c8126280/src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java",
                "sha": "397a7b7387665c95b1f13b4f7a6535781ffd2afd",
                "status": "modified"
            }
        ],
        "message": "ErrorMetric: test for nullity of responseMessage as it may be null\n\nThis resolves Bug 63906 - NPE for InfluxDB backend listener during\nfailover testing",
        "parent": "https://github.com/apache/jmeter/commit/d2224af264bb8fd941dd07f5a3628f446bb05bd3",
        "repo": "jmeter",
        "unit_tests": [
            "TestSampleResult.java"
        ]
    },
    "jmeter_daca37d": {
        "bug_id": "jmeter_daca37d",
        "commit": "https://github.com/apache/jmeter/commit/daca37df3212ca4d462a5826ec566225f1e98390",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jmeter/blob/daca37df3212ca4d462a5826ec566225f1e98390/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/JMeterUtils.java?ref=daca37df3212ca4d462a5826ec566225f1e98390",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/util/JMeterUtils.java",
                "patch": "@@ -540,7 +540,11 @@ private static String getResStringDefault(String key, String defaultValue, Local\n      */\n     public static String getParsedLabel(String key) {\n         String value = JMeterUtils.getResString(key);\n-        return value.replaceFirst(\"(?m)\\\\s*?:\\\\s*$\", \"\"); // $NON-NLS-1$ $NON-NLS-2$\n+        if(value != null) {\n+            return value.replaceFirst(\"(?m)\\\\s*?:\\\\s*$\", \"\"); // $NON-NLS-1$ $NON-NLS-2$\n+        } else {\n+            return null;\n+        }\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/jmeter/raw/daca37df3212ca4d462a5826ec566225f1e98390/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "sha": "da0e2ffd60fe742375e97a47f6ae38c41156f9ed",
                "status": "modified"
            }
        ],
        "message": "Fix NPE sonar\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1783484 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 29c65bafda9bb5aec6d517d33a81cc46d41533b7",
        "parent": "https://github.com/apache/jmeter/commit/a43aaf43fe496f4eb31e91640a2260827323f9da",
        "repo": "jmeter",
        "unit_tests": [
            "TestJMeterUtils.java"
        ]
    },
    "jmeter_f9eff90": {
        "bug_id": "jmeter_f9eff90",
        "commit": "https://github.com/apache/jmeter/commit/f9eff90317ab5876f6bbde9fde853584bc6875bc",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/jmeter/blob/f9eff90317ab5876f6bbde9fde853584bc6875bc/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=f9eff90317ab5876f6bbde9fde853584bc6875bc",
                "deletions": 26,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -180,7 +180,10 @@\n     \n     static final String CONTEXT_ATTRIBUTE_SAMPLER_RESULT = \"__jmeter.S_R__\"; //$NON-NLS-1$\n     \n-    private static final String CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN = \"__jmeter.H_T__\";\n+    /**\n+     * Holds data used by HTTP request if Embedded resource download is enabled\n+     */\n+    private static final String CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE = \"__jmeter.H_T__\";\n \n     private static final String CONTEXT_ATTRIBUTE_CLIENT_KEY = \"__jmeter.C_K__\";\n \n@@ -548,13 +551,8 @@ protected HTTPSampleResult sample(URL url, String method,\n         HttpClientKey key = createHttpClientKey(url);\n         MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple;\n         try {\n-            httpClient = setupClient(key, jMeterVariables, clientContext);\n-            // Cache triple for further use\n-            Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> \n-                mapHttpClientPerHttpClientKey =\n-                    HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();\n-            triple =\n-                    mapHttpClientPerHttpClientKey.get(key);\n+            triple = setupClient(key, jMeterVariables, clientContext);\n+            httpClient = triple.getLeft();\n             URI uri = url.toURI();\n             httpRequest = createHttpRequest(uri, method, areFollowingRedirect);\n             setupRequest(url, httpRequest, res); // can throw IOException\n@@ -695,7 +693,7 @@ protected HTTPSampleResult sample(URL url, String method,\n         } finally {\n             JOrphanUtils.closeQuietly(httpResponse);\n             currentRequest = null;\n-            JMeterContextService.getContext().getSamplerContext().remove(CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN);\n+            JMeterContextService.getContext().getSamplerContext().remove(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE);\n         }\n         return res;\n     }\n@@ -708,21 +706,19 @@ protected HTTPSampleResult sample(URL url, String method,\n     private void saveProxyAuth(\n             MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n             HttpContext localContext) {\n-        if (triple != null) {\n-            triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n-        }\n+        triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n     }\n \n     /**\n      * Store in localContext Proxy auth state of triple \n-     * @param triple {@link MutableTriple}\n+     * @param triple {@link MutableTriple} May be null if first request\n      * @param localContext {@link HttpContext}\n      */\n-    private void setupProxyAuth(MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n+    private void setupProxyAuthState(MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n                                 HttpContext localContext) {\n         if (triple != null) {\n-            AuthState proxy = triple.getMiddle();\n-            localContext.setAttribute(HttpClientContext.PROXY_AUTH_STATE, proxy);\n+            AuthState proxyAuthState = triple.getMiddle();\n+            localContext.setAttribute(HttpClientContext.PROXY_AUTH_STATE, proxyAuthState);\n         }\n     }\n \n@@ -993,22 +989,27 @@ public String toString() {\n         }\n     }\n \n-    private CloseableHttpClient setupClient(HttpClientKey key, JMeterVariables jMeterVariables,\n+    private MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> setupClient(HttpClientKey key, JMeterVariables jMeterVariables,\n             HttpClientContext clientContext) throws GeneralSecurityException {\n         Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> mapHttpClientPerHttpClientKey =\n                 HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();\n         clientContext.setAttribute(CONTEXT_ATTRIBUTE_CLIENT_KEY, key);\n         CloseableHttpClient httpClient = null;\n+        MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple = null;\n         boolean concurrentDwn = this.testElement.isConcurrentDwn();\n+        Map<String, Object> samplerContext = JMeterContextService.getContext().getSamplerContext();\n         if(concurrentDwn) {\n-            httpClient = (CloseableHttpClient) JMeterContextService.getContext().getSamplerContext().get(CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN);\n+            triple = (MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>) \n+                    samplerContext.get(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE);\n+        }\n+        if (triple == null) {\n+            triple = mapHttpClientPerHttpClientKey.get(key);\n         }\n-        MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple = \n-                mapHttpClientPerHttpClientKey.get(key);\n-        if (httpClient == null) {\n-            httpClient = triple != null ? triple.getLeft() : null;\n+        \n+        if(triple != null) {\n+            httpClient = triple.getLeft();\n         }\n-        setupProxyAuth(triple, clientContext);\n+        setupProxyAuthState(triple, clientContext);\n         resetStateIfNeeded(triple, jMeterVariables, clientContext, mapHttpClientPerHttpClientKey);\n \n         if (httpClient == null) { // One-time init for this client\n@@ -1096,17 +1097,18 @@ private CloseableHttpClient setupClient(HttpClientKey key, JMeterVariables jMete\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Created new HttpClient: @{} {}\", Integer.valueOf(System.identityHashCode(httpClient)), key);\n             }\n-            mapHttpClientPerHttpClientKey.put(key, MutableTriple.of(httpClient, null, pHCCM)); // save the agent for next time round\n+            triple = MutableTriple.of(httpClient, null, pHCCM);\n+            mapHttpClientPerHttpClientKey.put(key, triple); // save the agent for next time round\n         } else {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Reusing the HttpClient: @{} {}\", Integer.valueOf(System.identityHashCode(httpClient)),key);\n             }\n         }\n \n         if(concurrentDwn) {\n-            JMeterContextService.getContext().getSamplerContext().put(CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN, httpClient);\n+            samplerContext.put(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE, triple);\n         }\n-        return httpClient;\n+        return triple;\n     }\n \n     protected AuthenticationStrategy getProxyAuthStrategy() {",
                "raw_url": "https://github.com/apache/jmeter/raw/f9eff90317ab5876f6bbde9fde853584bc6875bc/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "843c47112d585ee0c6182ac389f6356d22c515fa",
                "status": "modified"
            }
        ],
        "message": "Bug 62672 - HTTP Request send double requests when configure proxy with authentication\n\nFix NPE\nBugzilla Id: 62672\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1860065 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: b0fe4cdcb2a0485abb539973fce2db1aabfd53b5",
        "parent": "https://github.com/apache/jmeter/commit/18c6c45a7a28b5a8328be5699101773953b7ffe6",
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_fa39c74": {
        "bug_id": "jmeter_fa39c74",
        "commit": "https://github.com/apache/jmeter/commit/fa39c74107de23696a3ac4489760ca3000870b18",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java?ref=fa39c74107de23696a3ac4489760ca3000870b18",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java",
                "patch": "@@ -26,6 +26,7 @@\n import java.io.UnsupportedEncodingException;\n import java.io.Writer;\n \n+import org.apache.commons.lang3.Validate;\n import org.apache.jorphan.util.JOrphanUtils;\n \n /**",
                "raw_url": "https://github.com/apache/jmeter/raw/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java",
                "sha": "6497821a444e121a46591a61d2d4c61563b44f3c",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/jmeter/blob/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java?ref=fa39c74107de23696a3ac4489760ca3000870b18",
                "deletions": 22,
                "filename": "src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "patch": "@@ -114,29 +114,27 @@ public void writeHeader() {\n \n     @Override\n     public long write(Sample sample) {\n-        try {\n-            row.setLength(0);\n-            char[] specials = new char[] { separator,\n-                    CSVSaveService.QUOTING_CHAR, CharUtils.CR, CharUtils.LF };\n-            for (int i = 0; i < columnCount; i++) {\n-                String data = sample.getString(i);\n-                row.append(CSVSaveService.quoteDelimiters(data, specials))\n-                        .append(separator);\n-            }\n-            int rowLength = row.length() - 1;\n-            row.setLength(rowLength);\n-            writer.println(row.toString());\n-            sampleCount++;\n-        } catch (NullPointerException npe) {\n-            if (writer == null) {\n-                throw new IllegalStateException(\n-                        \"No writer set ! Call setWriter() first !\", npe);\n-            } else if (sample == null) {\n-                throw new ArgumentNullException(\"sample\");\n-            } else {\n-                throw npe;\n-            }\n+        if (sample == null) {\n+            throw new ArgumentNullException(\"sample\");\n+        }\n+        if (writer == null) {\n+            throw new IllegalStateException(\n+                    \"No writer set! Call setWriter() first!\");\n         }\n+\n+        row.setLength(0);\n+        char[] specials = new char[] { separator,\n+                CSVSaveService.QUOTING_CHAR, CharUtils.CR, CharUtils.LF };\n+        for (int i = 0; i < columnCount; i++) {\n+            String data = sample.getString(i);\n+            row.append(CSVSaveService.quoteDelimiters(data, specials))\n+                    .append(separator);\n+        }\n+        int rowLength = row.length() - 1;\n+        row.setLength(rowLength);\n+        writer.println(row.toString());\n+        sampleCount++;\n+\n         return sampleCount;\n     }\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "sha": "855d0567d3bac714454a4694f0421e7e45e7279b",
                "status": "modified"
            }
        ],
        "message": "Check for not-null first, instead of waiting for the npe to happen. After\nthat, there is no need to catch a npe just to throw it again.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1719793 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4a799f6d91546bec4e3826e1cc4f7e4c80d8e607",
        "parent": "https://github.com/apache/jmeter/commit/e2fbe6671c0a507266efbf4bc8888d656c479a33",
        "repo": "jmeter",
        "unit_tests": [
            "TestCsvSampleWriter.java"
        ]
    }
}