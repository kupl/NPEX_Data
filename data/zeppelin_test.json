{
    "zeppelin_008a0d4": {
        "bug_id": "zeppelin_008a0d4",
        "commit": "https://github.com/apache/zeppelin/commit/008a0d498a7acea3b93099a7479d78008d31dbcb",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/zeppelin/blob/008a0d498a7acea3b93099a7479d78008d31dbcb/zeppelin-zengine/src/main/java/com/nflabs/zeppelin/notebook/Notebook.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/com/nflabs/zeppelin/notebook/Notebook.java?ref=008a0d498a7acea3b93099a7479d78008d31dbcb",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/com/nflabs/zeppelin/notebook/Notebook.java",
                "patch": "@@ -93,10 +93,23 @@ private void loadAllNotes() throws IOException{\n \tpublic List<Note> getAllNotes(){\n \t\tsynchronized(notes){\n             List<Note> noteList = new ArrayList<Note>(notes.values());\n+            logger.info(\"\"+noteList.size());\n             Collections.sort(noteList, new Comparator() {\n                 @Override\n                 public int compare(Object one, Object two) {\n-                    return ((Note) one).getName().compareTo(((Note) two).getName());\n+                    Note note1 = (Note) one;\n+                    Note note2 = (Note) two;\n+\n+                    String name1 = note1.id();\n+                    if (note1.getName() != null) {\n+                        name1 = note1.getName();\n+                    }\n+                    String name2 = note2.id();\n+                    if (note2.getName() != null) {\n+                        name2 = note2.getName();\n+                    }\n+                    ((Note) one).getName();\n+                    return name1.compareTo(name2);\n                 }\n             });\n             return noteList;",
                "raw_url": "https://github.com/apache/zeppelin/raw/008a0d498a7acea3b93099a7479d78008d31dbcb/zeppelin-zengine/src/main/java/com/nflabs/zeppelin/notebook/Notebook.java",
                "sha": "0960eb88f290fbaf869cb18984c91aa0b763f04a",
                "status": "modified"
            }
        ],
        "message": "fix npe",
        "parent": "https://github.com/apache/zeppelin/commit/f117aba3cf4f82fd84fdb1425e094b58c19fd9c2",
        "patched_files": [
            "Notebook.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookTest.java"
        ]
    },
    "zeppelin_034fdc6": {
        "bug_id": "zeppelin_034fdc6",
        "commit": "https://github.com/apache/zeppelin/commit/034fdc6735e075c89f727bb6bc6fddbc89b639c4",
        "file": [
            {
                "additions": 238,
                "blob_url": "https://github.com/apache/zeppelin/blob/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "changes": 319,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java?ref=034fdc6735e075c89f727bb6bc6fddbc89b639c4",
                "deletions": 81,
                "filename": "python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "patch": "@@ -16,14 +16,16 @@\n */\n package org.apache.zeppelin.python;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.zeppelin.interpreter.*;\n+import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n+import org.apache.zeppelin.interpreter.InterpreterResult.Type;\n import org.apache.zeppelin.scheduler.Scheduler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.*;\n-import java.util.HashMap;\n-import java.util.Properties;\n+import java.util.*;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -36,11 +38,17 @@\n   public static final String CONDA_PYTHON_PATH = \"/bin/python\";\n   public static final String DEFAULT_ZEPPELIN_PYTHON = \"python\";\n \n-  Pattern condaEnvListPattern = Pattern.compile(\"([^\\\\s]*)[\\\\s*]*\\\\s(.*)\");\n-  Pattern listPattern = Pattern.compile(\"env\\\\s*list\\\\s?\");\n-  Pattern activatePattern = Pattern.compile(\"activate\\\\s*(.*)\");\n-  Pattern deactivatePattern = Pattern.compile(\"deactivate\");\n-  Pattern helpPattern = Pattern.compile(\"help\");\n+  public static final Pattern PATTERN_OUTPUT_ENV_LIST = Pattern.compile(\"([^\\\\s]*)[\\\\s*]*\\\\s(.*)\");\n+  public static final Pattern PATTERN_COMMAND_ENV_LIST = Pattern.compile(\"env\\\\s*list\\\\s?\");\n+  public static final Pattern PATTERN_COMMAND_ENV = Pattern.compile(\"env\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_LIST = Pattern.compile(\"list\");\n+  public static final Pattern PATTERN_COMMAND_CREATE = Pattern.compile(\"create\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_ACTIVATE = Pattern.compile(\"activate\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_DEACTIVATE = Pattern.compile(\"deactivate\");\n+  public static final Pattern PATTERN_COMMAND_INSTALL = Pattern.compile(\"install\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_UNINSTALL = Pattern.compile(\"uninstall\\\\s*(.*)\");\n+  public static final Pattern PATTERN_COMMAND_HELP = Pattern.compile(\"help\");\n+  public static final Pattern PATTERN_COMMAND_INFO = Pattern.compile(\"info\");\n \n   public PythonCondaInterpreter(Properties property) {\n     super(property);\n@@ -59,33 +67,53 @@ public void close() {\n   @Override\n   public InterpreterResult interpret(String st, InterpreterContext context) {\n     InterpreterOutput out = context.out;\n+    Matcher activateMatcher = PATTERN_COMMAND_ACTIVATE.matcher(st);\n+    Matcher createMatcher = PATTERN_COMMAND_CREATE.matcher(st);\n+    Matcher installMatcher = PATTERN_COMMAND_INSTALL.matcher(st);\n+    Matcher uninstallMatcher = PATTERN_COMMAND_UNINSTALL.matcher(st);\n+    Matcher envMatcher = PATTERN_COMMAND_ENV.matcher(st);\n \n-    Matcher listMatcher = listPattern.matcher(st);\n-    Matcher activateMatcher = activatePattern.matcher(st);\n-    Matcher deactivateMatcher = deactivatePattern.matcher(st);\n-    Matcher helpMatcher = helpPattern.matcher(st);\n-\n-    if (st == null || st.isEmpty() || listMatcher.matches()) {\n-      listEnv(out, getCondaEnvs());\n-      return new InterpreterResult(InterpreterResult.Code.SUCCESS);\n-    } else if (activateMatcher.matches()) {\n-      String envName = activateMatcher.group(1);\n-      changePythonEnvironment(envName);\n-      restartPythonProcess();\n-      return new InterpreterResult(InterpreterResult.Code.SUCCESS, \"\\\"\" + envName + \"\\\" activated\");\n-    } else if (deactivateMatcher.matches()) {\n-      changePythonEnvironment(null);\n-      restartPythonProcess();\n-      return new InterpreterResult(InterpreterResult.Code.SUCCESS, \"Deactivated\");\n-    } else if (helpMatcher.matches()) {\n-      printUsage(out);\n-      return new InterpreterResult(InterpreterResult.Code.SUCCESS);\n-    } else {\n-      return new InterpreterResult(InterpreterResult.Code.ERROR, \"Not supported command: \" + st);\n+    try {\n+      if (PATTERN_COMMAND_ENV_LIST.matcher(st).matches()) {\n+        String result = runCondaEnvList();\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (envMatcher.matches()) {\n+        // `envMatcher` should be used after `listEnvMatcher`\n+        String result = runCondaEnv(getRestArgsFromMatcher(envMatcher));\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (PATTERN_COMMAND_LIST.matcher(st).matches()) {\n+        String result = runCondaList();\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (createMatcher.matches()) {\n+        String result = runCondaCreate(getRestArgsFromMatcher(createMatcher));\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (activateMatcher.matches()) {\n+        String envName = activateMatcher.group(1).trim();\n+        return runCondaActivate(envName);\n+      } else if (PATTERN_COMMAND_DEACTIVATE.matcher(st).matches()) {\n+        return runCondaDeactivate();\n+      } else if (installMatcher.matches()) {\n+        String result = runCondaInstall(getRestArgsFromMatcher(installMatcher));\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (uninstallMatcher.matches()) {\n+        String result = runCondaUninstall(getRestArgsFromMatcher(uninstallMatcher));\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else if (st == null || PATTERN_COMMAND_HELP.matcher(st).matches()) {\n+        runCondaHelp(out);\n+        return new InterpreterResult(Code.SUCCESS);\n+      } else if (PATTERN_COMMAND_INFO.matcher(st).matches()) {\n+        String result = runCondaInfo();\n+        return new InterpreterResult(Code.SUCCESS, Type.HTML, result);\n+      } else {\n+        return new InterpreterResult(Code.ERROR, \"Not supported command: \" + st);\n+      }\n+    } catch (RuntimeException | IOException | InterruptedException e) {\n+      throw new InterpreterException(e);\n     }\n   }\n \n-  private void changePythonEnvironment(String envName) {\n+  private void changePythonEnvironment(String envName)\n+      throws IOException, InterruptedException {\n     PythonInterpreter python = getPythonInterpreter();\n     String binPath = null;\n     if (envName == null) {\n@@ -94,7 +122,7 @@ private void changePythonEnvironment(String envName) {\n         binPath = DEFAULT_ZEPPELIN_PYTHON;\n       }\n     } else {\n-      HashMap<String, String> envList = getCondaEnvs();\n+      Map<String, String> envList = getCondaEnvs();\n       for (String name : envList.keySet()) {\n         if (envName.equals(name)) {\n           binPath = envList.get(name) + CONDA_PYTHON_PATH;\n@@ -114,7 +142,8 @@ private void restartPythonProcess() {\n   protected PythonInterpreter getPythonInterpreter() {\n     LazyOpenInterpreter lazy = null;\n     PythonInterpreter python = null;\n-    Interpreter p = getInterpreterInTheSameSessionByClassName(PythonInterpreter.class.getName());\n+    Interpreter p =\n+        getInterpreterInTheSameSessionByClassName(PythonInterpreter.class.getName());\n \n     while (p instanceof WrappedInterpreter) {\n       if (p instanceof LazyOpenInterpreter) {\n@@ -130,59 +159,75 @@ protected PythonInterpreter getPythonInterpreter() {\n     return python;\n   }\n \n-  private HashMap getCondaEnvs() {\n-    HashMap envList = null;\n+  public static String runCondaCommandForTextOutput(String title, List<String> commands)\n+      throws IOException, InterruptedException {\n \n-    StringBuilder sb = createStringBuilder();\n-    try {\n-      int exit = runCommand(sb, \"conda\", \"env\", \"list\");\n-      if (exit == 0) {\n-        envList = new HashMap();\n-        String[] lines = sb.toString().split(\"\\n\");\n-        for (String s : lines) {\n-          if (s == null || s.isEmpty() || s.startsWith(\"#\")) {\n-            continue;\n-          }\n-          Matcher match = condaEnvListPattern.matcher(s);\n-\n-          if (!match.matches()) {\n-            continue;\n-          }\n-          envList.put(match.group(1), match.group(2));\n-        }\n-      }\n-    } catch (IOException | InterruptedException e) {\n-      throw new InterpreterException(e);\n-    }\n+    String result = runCommand(commands);\n+    return wrapCondaBasicOutputStyle(title, result);\n+  }\n+\n+  private String runCondaCommandForTableOutput(String title, List<String> commands)\n+      throws IOException, InterruptedException {\n+\n+    StringBuilder sb = new StringBuilder();\n+    String result = runCommand(commands);\n+\n+    // use table output for pretty output\n+    Map<String, String> envPerName = parseCondaCommonStdout(result);\n+    return wrapCondaTableOutputStyle(title, envPerName);\n+  }\n+\n+  protected Map<String, String> getCondaEnvs()\n+      throws IOException, InterruptedException {\n+    String result = runCommand(\"conda\", \"env\", \"list\");\n+    Map<String, String> envList = parseCondaCommonStdout(result);\n     return envList;\n   }\n \n-  private void listEnv(InterpreterOutput out, HashMap<String, String> envList) {\n-    try {\n-      out.setType(InterpreterResult.Type.HTML);\n-      out.write(\"<h4>Conda environments</h4>\\n\");\n-      // start table\n-      out.write(\"<div style=\\\"display:table\\\">\\n\");\n+  private String runCondaEnvList() throws IOException, InterruptedException {\n+    return wrapCondaTableOutputStyle(\"Environment List\", getCondaEnvs());\n+  }\n \n-      for (String name : envList.keySet()) {\n-        String path = envList.get(name);\n+  private String runCondaEnv(List<String> restArgs)\n+      throws IOException, InterruptedException {\n \n-        out.write(String.format(\"<div style=\\\"display:table-row\\\">\" +\n-            \"<div style=\\\"display:table-cell;width:150px\\\">%s</div>\" +\n-            \"<div style=\\\"display:table-cell;\\\">%s</div>\" +\n-            \"</div>\\n\",\n-          name, path));\n-      }\n-      // end table\n-      out.write(\"</div><br />\\n\");\n-      out.write(\"<small><code>%python.conda help</code> for the usage</small>\\n\");\n-    } catch  (IOException e) {\n-      throw new InterpreterException(e);\n+    restArgs.add(0, \"conda\");\n+    restArgs.add(1, \"env\");\n+    restArgs.add(3, \"--yes\"); // --yes should be inserted after command\n+\n+    return runCondaCommandForTextOutput(null, restArgs);\n+  }\n+\n+  private InterpreterResult runCondaActivate(String envName)\n+      throws IOException, InterruptedException {\n+\n+    if (null == envName || envName.isEmpty()) {\n+      return new InterpreterResult(Code.ERROR, \"Env name should be specified\");\n     }\n+\n+    changePythonEnvironment(envName);\n+    restartPythonProcess();\n+\n+    return new InterpreterResult(Code.SUCCESS, \"'\" + envName + \"' is activated\");\n   }\n \n+  private InterpreterResult runCondaDeactivate()\n+      throws IOException, InterruptedException {\n \n-  private void printUsage(InterpreterOutput out) {\n+    changePythonEnvironment(null);\n+    restartPythonProcess();\n+    return new InterpreterResult(Code.SUCCESS, \"Deactivated\");\n+  }\n+\n+  private String runCondaList() throws IOException, InterruptedException {\n+    List<String> commands = new ArrayList<String>();\n+    commands.add(\"conda\");\n+    commands.add(\"list\");\n+\n+    return runCondaCommandForTableOutput(\"Installed Package List\", commands);\n+  }\n+\n+  private void runCondaHelp(InterpreterOutput out) {\n     try {\n       out.setType(InterpreterResult.Type.HTML);\n       out.writeResource(\"output_templates/conda_usage.html\");\n@@ -191,6 +236,98 @@ private void printUsage(InterpreterOutput out) {\n     }\n   }\n \n+  private String runCondaInfo() throws IOException, InterruptedException {\n+    List<String> commands = new ArrayList<String>();\n+    commands.add(\"conda\");\n+    commands.add(\"info\");\n+\n+    return runCondaCommandForTextOutput(\"Conda Information\", commands);\n+  }\n+\n+  private String runCondaCreate(List<String> restArgs)\n+      throws IOException, InterruptedException {\n+    restArgs.add(0, \"conda\");\n+    restArgs.add(1, \"create\");\n+    restArgs.add(2, \"--yes\");\n+\n+    return runCondaCommandForTextOutput(\"Environment Creation\", restArgs);\n+  }\n+\n+  private String runCondaInstall(List<String> restArgs)\n+      throws IOException, InterruptedException {\n+\n+    restArgs.add(0, \"conda\");\n+    restArgs.add(1, \"install\");\n+    restArgs.add(2, \"--yes\");\n+\n+    return runCondaCommandForTextOutput(\"Package Installation\", restArgs);\n+  }\n+\n+  private String runCondaUninstall(List<String> restArgs)\n+      throws IOException, InterruptedException {\n+\n+    restArgs.add(0, \"conda\");\n+    restArgs.add(1, \"uninstall\");\n+    restArgs.add(2, \"--yes\");\n+\n+    return runCondaCommandForTextOutput(\"Package Uninstallation\", restArgs);\n+  }\n+\n+  public static String wrapCondaBasicOutputStyle(String title, String content) {\n+    StringBuilder sb = new StringBuilder();\n+    if (null != title && !title.isEmpty()) {\n+      sb.append(\"<h4>\").append(title).append(\"</h4>\\n\")\n+          .append(\"</div><br />\\n\");\n+    }\n+    sb.append(\"<div style=\\\"white-space:pre-wrap;\\\">\\n\")\n+        .append(content)\n+        .append(\"</div>\");\n+\n+    return sb.toString();\n+  }\n+\n+  public static String wrapCondaTableOutputStyle(String title, Map<String, String> kv) {\n+    StringBuilder sb = new StringBuilder();\n+\n+    if (null != title && !title.isEmpty()) {\n+      sb.append(\"<h4>\").append(title).append(\"</h4>\\n\");\n+    }\n+\n+    sb.append(\"<div style=\\\"display:table;white-space:pre-wrap;\\\">\\n\");\n+    for (String name : kv.keySet()) {\n+      String path = kv.get(name);\n+\n+      sb.append(String.format(\"<div style=\\\"display:table-row\\\">\" +\n+              \"<div style=\\\"display:table-cell;width:150px\\\">%s</div>\" +\n+              \"<div style=\\\"display:table-cell;\\\">%s</div>\" +\n+              \"</div>\\n\",\n+          name, path));\n+    }\n+    sb.append(\"</div>\\n\");\n+\n+    return sb.toString();\n+  }\n+\n+  public static Map<String, String> parseCondaCommonStdout(String out)\n+      throws IOException, InterruptedException {\n+\n+    Map<String, String> kv = new LinkedHashMap<String, String>();\n+    String[] lines = out.split(\"\\n\");\n+    for (String s : lines) {\n+      if (s == null || s.isEmpty() || s.startsWith(\"#\")) {\n+        continue;\n+      }\n+      Matcher match = PATTERN_OUTPUT_ENV_LIST.matcher(s);\n+\n+      if (!match.matches()) {\n+        continue;\n+      }\n+      kv.put(match.group(1), match.group(2));\n+    }\n+\n+    return kv;\n+  }\n+\n   @Override\n   public void cancel(InterpreterContext context) {\n \n@@ -206,7 +343,6 @@ public int getProgress(InterpreterContext context) {\n     return 0;\n   }\n \n-\n   /**\n    * Use python interpreter's scheduler.\n    * To make sure %python.conda paragraph and %python paragraph runs sequentially\n@@ -221,9 +357,12 @@ public Scheduler getScheduler() {\n     }\n   }\n \n-  protected int runCommand(StringBuilder sb, String ... command)\n+  public static String runCommand(List<String> commands)\n       throws IOException, InterruptedException {\n-    ProcessBuilder builder = new ProcessBuilder(command);\n+\n+    StringBuilder sb = new StringBuilder();\n+\n+    ProcessBuilder builder = new ProcessBuilder(commands);\n     builder.redirectErrorStream(true);\n     Process process = builder.start();\n     InputStream stdout = process.getInputStream();\n@@ -234,10 +373,28 @@ protected int runCommand(StringBuilder sb, String ... command)\n       sb.append(\"\\n\");\n     }\n     int r = process.waitFor(); // Let the process finish.\n-    return r;\n+\n+    if (r != 0) {\n+      throw new RuntimeException(\"Failed to execute `\" +\n+          StringUtils.join(commands, \" \") + \"` exited with \" + r);\n+    }\n+\n+    return sb.toString();\n+  }\n+\n+  public static String runCommand(String ... command)\n+      throws IOException, InterruptedException {\n+\n+    List<String> list = new ArrayList<>(command.length);\n+    for (String arg : command) {\n+      list.add(arg);\n+    }\n+\n+    return runCommand(list);\n   }\n \n-  protected StringBuilder createStringBuilder() {\n-    return new StringBuilder();\n+  public static List<String> getRestArgsFromMatcher(Matcher m) {\n+    // Arrays.asList just returns fixed-size, so we should use ctor instead of\n+    return new ArrayList<>(Arrays.asList(m.group(1).split(\" \")));\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java",
                "sha": "455d786695742a242d36378441e6ee139c3f127b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/java/org/apache/zeppelin/python/PythonProcess.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/java/org/apache/zeppelin/python/PythonProcess.java?ref=034fdc6735e075c89f727bb6bc6fddbc89b639c4",
                "deletions": 1,
                "filename": "python/src/main/java/org/apache/zeppelin/python/PythonProcess.java",
                "patch": "@@ -110,10 +110,13 @@ public String sendAndGetResult(String cmd) throws IOException {\n     writer.println(\"\\\"\" + STATEMENT_END + \"\\\"\");\n     StringBuilder output = new StringBuilder();\n     String line = null;\n-    while (!(line = reader.readLine()).contains(STATEMENT_END)) {\n+\n+    while ((line = reader.readLine()) != null &&\n+        !line.contains(STATEMENT_END)) {\n       logger.debug(\"Read line from python shell : \" + line);\n       output.append(line + \"\\n\");\n     }\n+\n     return output.toString();\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/java/org/apache/zeppelin/python/PythonProcess.java",
                "sha": "578ffeb8f990c1f2c1aa2cf7f1976d5a9810f7d1",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/zeppelin/blob/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/resources/output_templates/conda_usage.html",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/resources/output_templates/conda_usage.html?ref=034fdc6735e075c89f727bb6bc6fddbc89b639c4",
                "deletions": 3,
                "filename": "python/src/main/resources/output_templates/conda_usage.html",
                "patch": "@@ -12,6 +12,18 @@\n limitations under the License.\n -->\n <h4>Usage</h4>\n+<div>\n+  Get the Conda Infomation\n+  <pre>%python.conda info</pre>\n+</div>\n+<div>\n+  List the Conda environments\n+  <pre>%python.conda env list</pre>\n+</div>\n+<div>\n+  Create a conda enviornment\n+  <pre>%python.conda create --name [ENV NAME]</pre>\n+</div>\n <div>\n   Activate an environment (python interpreter will be restarted)\n   <pre>%python.conda activate [ENV NAME]</pre>\n@@ -21,7 +33,14 @@ <h4>Usage</h4>\n   <pre>%python.conda deactivate</pre>\n </div>\n <div>\n-  List the Conda environments\n-  <pre>%python.conda</pre>\n+  Get installed package list inside the current environment\n+  <pre>%python.conda list</pre>\n+</div>\n+<div>\n+  Install Package\n+  <pre>%python.conda install [PACKAGE NAME]</pre>\n+</div>\n+<div>\n+  Uninstall Package\n+  <pre>%python.conda uninstall [PACKAGE NAME]</pre>\n </div>\n-",
                "raw_url": "https://github.com/apache/zeppelin/raw/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/main/resources/output_templates/conda_usage.html",
                "sha": "e1146fcf396961d9033d67886f6abceecb0e0185",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/zeppelin/blob/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java?ref=034fdc6735e075c89f727bb6bc6fddbc89b639c4",
                "deletions": 20,
                "filename": "python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java",
                "patch": "@@ -23,13 +23,11 @@\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Properties;\n+import java.util.*;\n+import java.util.regex.Matcher;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-import static org.mockito.Matchers.*;\n import static org.mockito.Mockito.*;\n \n public class PythonCondaInterpreterTest {\n@@ -49,35 +47,32 @@ public void setUp() {\n     doReturn(python).when(conda).getPythonInterpreter();\n   }\n \n-  private void setCondaEnvs() throws IOException, InterruptedException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"#comment\\n\\nenv1   *  /path1\\nenv2\\t/path2\\n\");\n-\n-    doReturn(sb).when(conda).createStringBuilder();\n-    doReturn(0).when(conda)\n-      .runCommand(any(StringBuilder.class), anyString(), anyString(), anyString());\n+  private void setMockCondaEnvList() throws IOException, InterruptedException {\n+    Map<String, String> envList = new LinkedHashMap<String, String>();\n+    envList.put(\"env1\", \"/path1\");\n+    envList.put(\"env2\", \"/path2\");\n+    doReturn(envList).when(conda).getCondaEnvs();\n   }\n \n   @Test\n   public void testListEnv() throws IOException, InterruptedException {\n-    setCondaEnvs();\n+    setMockCondaEnvList();\n \n     // list available env\n     InterpreterContext context = getInterpreterContext();\n-    InterpreterResult result = conda.interpret(\"\", context);\n+    InterpreterResult result = conda.interpret(\"env list\", context);\n     assertEquals(InterpreterResult.Code.SUCCESS, result.code());\n \n-    context.out.flush();\n-    String out = new String(context.out.toByteArray());\n-    assertTrue(out.contains(\">env1<\"));\n-    assertTrue(out.contains(\">/path1<\"));\n-    assertTrue(out.contains(\">env2<\"));\n-    assertTrue(out.contains(\">/path2<\"));\n+    assertTrue(result.toString().contains(\">env1<\"));\n+    assertTrue(result.toString().contains(\"/path1<\"));\n+    assertTrue(result.toString().contains(\">env2<\"));\n+    assertTrue(result.toString().contains(\"/path2<\"));\n   }\n \n   @Test\n   public void testActivateEnv() throws IOException, InterruptedException {\n-    setCondaEnvs();\n+    setMockCondaEnvList();\n+\n     InterpreterContext context = getInterpreterContext();\n     conda.interpret(\"activate env1\", context);\n     verify(python, times(1)).open();\n@@ -94,6 +89,34 @@ public void testDeactivate() {\n     verify(python).setPythonCommand(\"python\");\n   }\n \n+  @Test\n+  public void testParseCondaCommonStdout()\n+      throws IOException, InterruptedException {\n+\n+    StringBuilder sb = new StringBuilder()\n+        .append(\"# comment1\\n\")\n+        .append(\"# comment2\\n\")\n+        .append(\"env1     /location1\\n\")\n+        .append(\"env2     /location2\\n\");\n+\n+    Map<String, String> locationPerEnv =\n+        PythonCondaInterpreter.parseCondaCommonStdout(sb.toString());\n+\n+    assertEquals(\"/location1\", locationPerEnv.get(\"env1\"));\n+    assertEquals(\"/location2\", locationPerEnv.get(\"env2\"));\n+  }\n+\n+  @Test\n+  public void testGetRestArgsFromMatcher() {\n+    Matcher m =\n+        PythonCondaInterpreter.PATTERN_COMMAND_ENV.matcher(\"env remove --name test --yes\");\n+    m.matches();\n+\n+    List<String> restArgs = PythonCondaInterpreter.getRestArgsFromMatcher(m);\n+    List<String> expected = Arrays.asList(new String[]{\"remove\", \"--name\", \"test\", \"--yes\"});\n+    assertEquals(expected, restArgs);\n+  }\n+\n   private InterpreterContext getInterpreterContext() {\n     return new InterpreterContext(\n         \"noteId\",",
                "raw_url": "https://github.com/apache/zeppelin/raw/034fdc6735e075c89f727bb6bc6fddbc89b639c4/python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java",
                "sha": "c6d2a84886b95a2aaa20a82fd371c9be126803d0",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1917] Improve python.conda interpreter\n\n### What is this PR for?\n\nAdd missing commands to the `python.conda` interpreter\n\n- `conda info`\n- `conda list`\n- `conda create`\n- `conda install`\n- `conda uninstall (alias of remove)`\n- `conda env *`\n\n#### Implementation Detail\n\nThe reason I modified `PythonProcess` is due to NPE\n\n```java\n// https://github.com/apache/zeppelin/blob/master/python/src/main/java/org/apache/zeppelin/python/PythonProcess.java#L107-L118\n\n  public String sendAndGetResult(String cmd) throws IOException {\n    writer.println(cmd);\n    writer.println();\n    writer.println(\"\\\"\" + STATEMENT_END + \"\\\"\");\n    StringBuilder output = new StringBuilder();\n    String line = null;\n\n    // NPE when line is null\n    while (!(line = reader.readLine()).contains(STATEMENT_END)) {\n      logger.debug(\"Read line from python shell : \" + line);\n      output.append(line + \"\\n\");\n    }\n    return output.toString();\n  }\n```\n\n```\njava.lang.NullPointerException\nat org.apache.zeppelin.python.PythonProcess.sendAndGetResult(PythonProcess.java:113)\nat org.apache.zeppelin.python.PythonInterpreter.sendCommandToPython(PythonInterpreter.java:250)\nat org.apache.zeppelin.python.PythonInterpreter.bootStrapInterpreter(PythonInterpreter.java:272)\nat org.apache.zeppelin.python.PythonInterpreter.open(PythonInterpreter.java:100)\nat org.apache.zeppelin.python.PythonCondaInterpreter.restartPythonProcess(PythonCondaInterpreter.java:139)\nat org.apache.zeppelin.python.PythonCondaInterpreter.interpret(PythonCondaInterpreter.java:88)\nat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:94)\nat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:494)\nat org.apache.zeppelin.scheduler.Job.run(Job.java:175)\nat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\nat java.util.concurrent.FutureTask.run(FutureTask.java:262)\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\nat java.lang.Thread.run(Thread.java:745)\n```\n\n### What type of PR is it?\n[Improvement | Refactoring]\n\n### Todos\n* [x] - info\n* [x] - list\n* [x] - create\n* [x] - install\n* [x] - uninstall (= remove)\n* [x] - env *\n\n### What is the Jira issue?\n\n[ZEPPELIN-1917](https://issues.apache.org/jira/browse/ZEPPELIN-1917)\n\n### How should this be tested?\n\n1. Install [miniconda](http://conda.pydata.org/miniconda.html)\n2. Make sure that your python interpreter can use `conda` (check the Interpreter Binding page)\n3. Remove `test` conda env since we will create in the following section\n\n```sh\n$ conda env remove --yes --name test\n```\n\n4. Run these commands with `%python.conda`\n\n```\n%python.conda info\n%python.conda env list\n%python.conda create --name test\n\n# you should be able to see `test` in the list\n%python.conda env list\n%python.conda activate pymysql\n%python.conda install pymysql\n\n# you should be able to import\n%python\nimport pymysql.cursors\n\n%python.conda uninstall pymysql\n%python.conda deactivate pymysql\n\n# you should be able to see `No module named pymysql.cursor` since we deactivated\n%python\nimport pymysql.cursors\n```\n\n### Screenshots (if appropriate)\n\n![conda-screenshot](https://cloud.githubusercontent.com/assets/4968473/21747565/98c0e366-d5ad-11e6-8000-e293996089fa.gif)\n\n### Questions:\n* Does the licenses files need update? - NO\n* Is there breaking changes for older versions? - NO\n* Does this needs documentation? - NO\n\nAuthor: 1ambda <1amb4a@gmail.com>\n\nCloses #1868 from 1ambda/ZEPPELIN-1917/improve-conda-interpreter and squashes the following commits:\n\n3ba171a [1ambda] fix: Wrap output style\n292ed6d [1ambda] refactor: Throw exception in runCommand\n2d4aa7d [1ambda] test: Add some tests\n49a4a11 [1ambda] feat: Supports other env commands\n6eb7e92 [1ambda] fix: NPE in PythonProcess\n9c5dd86 [1ambda] refactor: Activate, Deactivate\nf955889 [1ambda] fix: minor\n935cb89 [1ambda] refactor: Abstract commands\nb1c4c9f [1ambda] feat: Add conda remove (uninstall)\ne539c42 [1ambda] feat: Add conda install\n4f58fa2 [1ambda] feat: Add conda create\n7da132d [1ambda] docs: Add missing conda list description\n929ca8a [1ambda] feat: Make conda output beautiful\n0c6ebb4 [1ambda] feat: Add list conda command\n017c76f [1ambda] refactor: Import InterpreterResult.{Code, Type} to short codes\nb8a5154 [1ambda] refactor: Simplify exception flow so private funcs don't need care exceptions\n64d4bef [1ambda] style: Rename some funcs\nafc456d [1ambda] refactor: Add private to member vars\nf36fc74 [1ambda] feat: Add info command\n2eb9bf5 [1ambda] style: Remove useless newlines\nbd2564e [1ambda] refactor: PythonCondaInterpreter.interpret\nf0d69bc [1ambda] fix: Use specific command for env list in conda",
        "parent": "https://github.com/apache/zeppelin/commit/2b0e2a41cb7e0d7fc160d5c9193413ffe4d94f68",
        "patched_files": [
            "PythonCondaInterpreter.java",
            "conda_usage.html",
            "PythonProcess.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "PythonCondaInterpreterTest.java"
        ]
    },
    "zeppelin_124d334": {
        "bug_id": "zeppelin_124d334",
        "commit": "https://github.com/apache/zeppelin/commit/124d3342a1f24ca89b3759985e83cc3ee73b2a56",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/124d3342a1f24ca89b3759985e83cc3ee73b2a56/zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/remote/RemoteInterpreterServer.java?ref=124d3342a1f24ca89b3759985e83cc3ee73b2a56",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "patch": "@@ -25,6 +25,7 @@\n import com.nflabs.zeppelin.interpreter.InterpreterException;\n import com.nflabs.zeppelin.interpreter.InterpreterGroup;\n import com.nflabs.zeppelin.interpreter.InterpreterResult;\n+import com.nflabs.zeppelin.interpreter.LazyOpenInterpreter;\n import com.nflabs.zeppelin.interpreter.thrift.RemoteInterpreterContext;\n import com.nflabs.zeppelin.interpreter.thrift.RemoteInterpreterResult;\n import com.nflabs.zeppelin.interpreter.thrift.RemoteInterpreterService;\n@@ -112,7 +113,7 @@ public void createInterpreter(String className, Map<String, String> properties)\n       repl.setClassloaderUrls(new URL[]{});\n \n       synchronized (interpreterGroup) {\n-        interpreterGroup.add(new ClassloaderInterpreter(repl, cl));\n+        interpreterGroup.add(new LazyOpenInterpreter((new ClassloaderInterpreter(repl, cl))));\n       }\n \n       logger.info(\"Instantiate interpreter {}\", className);",
                "raw_url": "https://github.com/apache/zeppelin/raw/124d3342a1f24ca89b3759985e83cc3ee73b2a56/zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "sha": "4b7dd7d4272174bb202d7a0c789681b62c3185b7",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when %sql is called before %spark",
        "parent": "https://github.com/apache/zeppelin/commit/1012fb46988f1f06d3e5342b8fbd144766fcbd13",
        "patched_files": [
            "RemoteInterpreterServer.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "RemoteInterpreterServerTest.java"
        ]
    },
    "zeppelin_1b5c3a3": {
        "bug_id": "zeppelin_1b5c3a3",
        "commit": "https://github.com/apache/zeppelin/commit/1b5c3a3f37c36f62a049cb3bdf2228d320e250d4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/1b5c3a3f37c36f62a049cb3bdf2228d320e250d4/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java?ref=1b5c3a3f37c36f62a049cb3bdf2228d320e250d4",
                "deletions": 1,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "patch": "@@ -193,7 +193,8 @@ public void onMessage(NotebookSocket conn, String msg) {\n       }\n \n       String ticket = TicketContainer.instance.getTicket(messagereceived.principal);\n-      if (ticket != null && !ticket.equals(messagereceived.ticket)) {\n+      if (ticket != null &&\n+          (messagereceived.ticket == null || !ticket.equals(messagereceived.ticket))) {\n         /* not to pollute logs, log instead of exception */\n         if (StringUtils.isEmpty(messagereceived.ticket)) {\n           LOG.debug(\"{} message: invalid ticket {} != {}\", messagereceived.op,",
                "raw_url": "https://github.com/apache/zeppelin/raw/1b5c3a3f37c36f62a049cb3bdf2228d320e250d4/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "sha": "128d59d85be27d7716d42263984c7ceaecc4c4ab",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-2282] NPE on NotebookServer.java when client send null ticket.\n\n### What is this PR for?\nWhen client (zeppelin-web) send message with null ticket, NotebookServer does not handle and throw NPE.\n\n### What type of PR is it?\nBug Fix\n\n### Todos\n* [x] - Null check\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-2282\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Lee moon soo <moon@apache.org>\n\nCloses #2153 from Leemoonsoo/ZEPPELIN-2282 and squashes the following commits:\n\n1a05bed [Lee moon soo] prevent NPE",
        "parent": "https://github.com/apache/zeppelin/commit/2463731ede1698a8235cb03edb30c5e39d4f7402",
        "patched_files": [
            "NotebookServer.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookServerTest.java"
        ]
    },
    "zeppelin_230d890": {
        "bug_id": "zeppelin_230d890",
        "commit": "https://github.com/apache/zeppelin/commit/230d890142f2346c48a32ad6b98a4598fdfce1b7",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/zeppelin/blob/230d890142f2346c48a32ad6b98a4598fdfce1b7/docs/interpreter/python.md",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/interpreter/python.md?ref=230d890142f2346c48a32ad6b98a4598fdfce1b7",
                "deletions": 6,
                "filename": "docs/interpreter/python.md",
                "patch": "@@ -44,7 +44,7 @@ To access the help, type **help()**\n ## Python modules\n The interpreter can use all modules already installed (with pip, easy_install...)\n \n-## Apply Zeppelin Dynamic Forms\n+## Use Zeppelin Dynamic Forms\n You can leverage [Zeppelin Dynamic Form]({{BASE_PATH}}/manual/dynamicform.html) inside your Python code.\n \n **Zeppelin Dynamic Form can only be used if py4j Python library is installed in your system. If not, you can install it with `pip install py4j`.**\n@@ -65,36 +65,47 @@ print(\"\".join(z.checkbox(\"f3\", [(\"o1\",\"1\"), (\"o2\",\"2\")],[\"1\"])))\n \n \n \n-\n ## Zeppelin features not fully supported by the Python Interpreter\n \n * Interrupt a paragraph execution (`cancel()` method) is currently only supported in Linux and MacOs. If interpreter runs in another operating system (for instance MS Windows) , interrupt a paragraph will close the whole interpreter. A JIRA ticket ([ZEPPELIN-893](https://issues.apache.org/jira/browse/ZEPPELIN-893)) is opened to implement this feature in a next release of the interpreter.\n * Progression bar in webUI  (`getProgress()` method) is currently not implemented.\n * Code-completion is currently not implemented.\n \n ## Matplotlib integration\n- The python interpreter can display matplotlib graph with the function `zeppelin_show()`.\n+ The python interpreter can display matplotlib graph with the function `z.show()`.\n  You need to have matplotlib module installed and a XServer running to use this functionality !\n  \n  ```python\n %python\n import matplotlib.pyplot as plt\n plt.figure()\n (.. ..)\n-zeppelin_show(plt)\n+z.show(plt)\n plt.close()\n ```\n zeppelin_show function can take optional parameters to adapt graph width and height\n \n  ```python\n %python\n-zeppelin_show(plt,width='50px')\n-zeppelin_show(plt,height='150px')\n+z.show(plt, width='50px')\n+z.show(plt, height='150px')\n ```\n \n [![pythonmatplotlib](../interpreter/screenshots/pythonMatplotlib.png)](/docs/interpreter/screenshots/pythonMatplotlib.png)\n \n \n+## Pandas integration\n+[Zeppelin Display System]({{BASE_PATH}}/displaysystem/basicdisplaysystem.html#table) provides simple API to visualize data in Pandas DataFrames, same as in Matplotlib.\n+\n+Example:\n+\n+```python\n+import pandas as pd\n+rates = pd.read_csv(\"bank.csv\", sep=\";\")\n+z.show(rates)\n+```\n+\n+\n ## Technical description\n \n For in-depth technical details on current implementation plese reffer [python/README.md](https://github.com/apache/zeppelin/blob/master/python/README.md)",
                "raw_url": "https://github.com/apache/zeppelin/raw/230d890142f2346c48a32ad6b98a4598fdfce1b7/docs/interpreter/python.md",
                "sha": "822488fe3a35a7ab6410f1cd440f5c771f080df9",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/zeppelin/blob/230d890142f2346c48a32ad6b98a4598fdfce1b7/notebook/2BQA35CJZ/note.json",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/notebook/2BQA35CJZ/note.json?ref=230d890142f2346c48a32ad6b98a4598fdfce1b7",
                "deletions": 33,
                "filename": "notebook/2BQA35CJZ/note.json",
                "patch": "@@ -1,8 +1,8 @@\n {\n   \"paragraphs\": [\n     {\n-      \"text\": \"%md\\n\\n### Pre-requests\\nnumpy, matplotlib are installed\\n\\n### os x\\nmake sure locale is set, to avoid `ValueError: unknown locale: UTF-8`\\n\\n### virtualenv\\nIn case you want to use virtualenv:\\n - configure python interpreter property -\\u003e `absolute/path/to/venv/bin/python`\\n - see *Working with Matplotlib in Virtual environments* in the [Matplotlib FAQ](http://matplotlib.org/faq/virtualenv_faq.html)\",\n-      \"dateUpdated\": \"Jun 17, 2016 2:23:28 PM\",\n+      \"text\": \"%md\\n\\n### Pre-requests\\nnumpy, matplotlib are installed \\n\\n### os x\\nmake sure locale is set, to avoid `ValueError: unknown locale: UTF-8`\\n\\n### virtualenv\\nIn case you want to use virtualenv:\\n - configure python interpreter property -\\u003e `absolute/path/to/venv/bin/python`\\n - see *Working with Matplotlib in Virtual environments* in the [Matplotlib FAQ](http://matplotlib.org/faq/virtualenv_faq.html)\",\n+      \"dateUpdated\": \"Jun 22, 2016 5:31:34 PM\",\n       \"config\": {\n         \"colWidth\": 12.0,\n         \"graph\": {\n@@ -31,14 +31,14 @@\n         \"msg\": \"\\u003ch3\\u003ePre-requests\\u003c/h3\\u003e\\n\\u003cp\\u003enumpy, matplotlib are installed\\u003c/p\\u003e\\n\\u003ch3\\u003eos x\\u003c/h3\\u003e\\n\\u003cp\\u003emake sure locale is set, to avoid \\u003ccode\\u003eValueError: unknown locale: UTF-8\\u003c/code\\u003e\\u003c/p\\u003e\\n\\u003ch3\\u003evirtualenv\\u003c/h3\\u003e\\n\\u003cp\\u003eIn case you want to use virtualenv:\\u003c/p\\u003e\\n\\u003cul\\u003e\\n\\u003cli\\u003econfigure python interpreter property -\\u003e \\u003ccode\\u003eabsolute/path/to/venv/bin/python\\u003c/code\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003esee \\u003cem\\u003eWorking with Matplotlib in Virtual environments\\u003c/em\\u003e in the \\u003ca href\\u003d\\\"http://matplotlib.org/faq/virtualenv_faq.html\\\"\\u003eMatplotlib FAQ\\u003c/a\\u003e\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\"\n       },\n       \"dateCreated\": \"Jun 14, 2016 5:46:57 PM\",\n-      \"dateStarted\": \"Jun 17, 2016 2:23:26 PM\",\n-      \"dateFinished\": \"Jun 17, 2016 2:23:26 PM\",\n+      \"dateStarted\": \"Jun 22, 2016 5:31:34 PM\",\n+      \"dateFinished\": \"Jun 22, 2016 5:31:34 PM\",\n       \"status\": \"FINISHED\",\n       \"progressUpdateIntervalMs\": 500\n     },\n     {\n       \"text\": \"%python\\nimport numpy as np\\nimport matplotlib.pyplot as plt\",\n-      \"dateUpdated\": \"Jun 17, 2016 2:11:24 PM\",\n+      \"dateUpdated\": \"Jun 22, 2016 5:31:34 PM\",\n       \"config\": {\n         \"colWidth\": 12.0,\n         \"graph\": {\n@@ -65,14 +65,14 @@\n         \"msg\": \"\"\n       },\n       \"dateCreated\": \"Jun 17, 2016 12:21:31 AM\",\n-      \"dateStarted\": \"Jun 17, 2016 2:11:24 PM\",\n-      \"dateFinished\": \"Jun 17, 2016 2:11:24 PM\",\n+      \"dateStarted\": \"Jun 22, 2016 5:31:34 PM\",\n+      \"dateFinished\": \"Jun 22, 2016 5:31:35 PM\",\n       \"status\": \"FINISHED\",\n       \"progressUpdateIntervalMs\": 500\n     },\n     {\n       \"text\": \"%python\\ndef f(x):\\n  return np.cos(1/x)\\n\\nx \\u003d np.linspace(-2, 2, 1000)\",\n-      \"dateUpdated\": \"Jun 17, 2016 2:29:52 PM\",\n+      \"dateUpdated\": \"Jun 22, 2016 5:31:34 PM\",\n       \"config\": {\n         \"colWidth\": 12.0,\n         \"graph\": {\n@@ -101,14 +101,14 @@\n         \"msg\": \"\"\n       },\n       \"dateCreated\": \"Jun 14, 2016 5:44:21 PM\",\n-      \"dateStarted\": \"Jun 17, 2016 2:29:52 PM\",\n-      \"dateFinished\": \"Jun 17, 2016 2:29:52 PM\",\n+      \"dateStarted\": \"Jun 22, 2016 5:31:35 PM\",\n+      \"dateFinished\": \"Jun 22, 2016 5:31:35 PM\",\n       \"status\": \"FINISHED\",\n       \"progressUpdateIntervalMs\": 500\n     },\n     {\n-      \"text\": \"%python\\n\\nplt.figure()\\nplt.plot(x, f(x), lw\\u003d2)\\nzeppelin_show(plt, width\\u003d\\u0027500px\\u0027)\\nplt.close()\",\n-      \"dateUpdated\": \"Jun 17, 2016 2:30:03 PM\",\n+      \"text\": \"%python\\n\\nplt.figure()\\nplt.plot(x, f(x), lw\\u003d2)\\nz.show(plt, width\\u003d\\u0027500px\\u0027)\\nplt.close()\",\n+      \"dateUpdated\": \"Jun 22, 2016 5:31:34 PM\",\n       \"config\": {\n         \"colWidth\": 12.0,\n         \"graph\": {\n@@ -124,30 +124,32 @@\n         \"editorMode\": \"ace/mode/scala\"\n       },\n       \"settings\": {\n-        \"params\": {},\n+        \"params\": {\n+          \"f1\": \"defaultValue\"\n+        },\n         \"forms\": {}\n       },\n       \"jobName\": \"paragraph_1466088587936_-914466845\",\n       \"id\": \"20160616-234947_579056637\",\n       \"result\": {\n         \"code\": \"SUCCESS\",\n         \"type\": \"HTML\",\n-        \"msg\": \"\\u003cdiv style\\u003d\\u0027width:500px\\u0027\\u003e\\u003c?xml version\\u003d\\\"1.0\\\" encoding\\u003d\\\"utf-8\\\" standalone\\u003d\\\"no\\\"?\\u003e\\n\\r\\u003c!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\"\\n\\r  \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\"\\u003e\\n\\r\\u003c!-- Created with matplotlib (http://matplotlib.org/) --\\u003e\\n\\r\\u003csvg height\\u003d\\\"432pt\\\" version\\u003d\\\"1.1\\\" viewBox\\u003d\\\"0 0 576 432\\\" width\\u003d\\\"576pt\\\" xmlns\\u003d\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink\\u003d\\\"http://www.w3.org/1999/xlink\\\"\\u003e\\n\\r \\u003cdefs\\u003e\\n\\r  \\u003cstyle type\\u003d\\\"text/css\\\"\\u003e\\n\\r*{stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:100000;}\\n\\r  \\u003c/style\\u003e\\n\\r \\u003c/defs\\u003e\\n\\r \\u003cg id\\u003d\\\"figure_1\\\"\\u003e\\n\\r  \\u003cg id\\u003d\\\"patch_1\\\"\\u003e\\n\\r   \\u003cpath d\\u003d\\\"M 0 432 \\n\\rL 576 432 \\n\\rL 576 0 \\n\\rL 0 0 \\n\\rz\\n\\r\\\" style\\u003d\\\"fill:#ffffff;\\\"/\\u003e\\n\\r  \\u003c/g\\u003e\\n\\r  \\u003cg id\\u003d\\\"axes_1\\\"\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_2\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 388.8 \\n\\rL 518.4 388.8 \\n\\rL 518.4 43.2 \\n\\rL 72 43.2 \\n\\rz\\n\\r\\\" style\\u003d\\\"fill:#ffffff;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"line2d_1\\\"\\u003e\\n\\r    \\u003cpath clip-path\\u003d\\\"url(#p29ea61f8b5)\\\" d\\u003d\\\"M 72 64.353733 \\n\\rL 81.383784 66.208006 \\n\\rL 89.873874 68.102082 \\n\\rL 97.917117 70.118515 \\n\\rL 105.513514 72.253983 \\n\\rL 112.663063 74.501874 \\n\\rL 119.365766 76.851708 \\n\\rL 125.621622 79.288583 \\n\\rL 131.430631 81.792703 \\n\\rL 136.792793 84.33905 \\n\\rL 142.154955 87.14138 \\n\\rL 147.07027 89.964621 \\n\\rL 151.538739 92.769201 \\n\\rL 156.007207 95.828137 \\n\\rL 160.475676 99.172274 \\n\\rL 164.497297 102.455067 \\n\\rL 168.518919 106.027174 \\n\\rL 172.540541 109.922371 \\n\\rL 176.115315 113.687089 \\n\\rL 179.69009 117.76831 \\n\\rL 183.264865 122.200833 \\n\\rL 186.83964 127.024032 \\n\\rL 189.967568 131.599727 \\n\\rL 193.095495 136.542179 \\n\\rL 196.223423 141.888876 \\n\\rL 199.351351 147.681647 \\n\\rL 202.479279 153.967119 \\n\\rL 205.607207 160.797174 \\n\\rL 208.735135 168.229361 \\n\\rL 211.863063 176.327214 \\n\\rL 214.544144 183.850661 \\n\\rL 217.225225 191.961516 \\n\\rL 219.906306 200.70986 \\n\\rL 222.587387 210.147822 \\n\\rL 225.268468 220.328242 \\n\\rL 227.94955 231.302469 \\n\\rL 230.630631 243.116823 \\n\\rL 233.758559 258.00883 \\n\\rL 236.886486 274.114509 \\n\\rL 240.014414 291.390828 \\n\\rL 243.589189 312.360386 \\n\\rL 252.079279 362.998329 \\n\\rL 253.866667 372.223666 \\n\\rL 255.207207 378.258931 \\n\\rL 256.547748 383.242279 \\n\\rL 257.441441 385.820429 \\n\\rL 258.335135 387.672064 \\n\\rL 258.781982 388.285652 \\n\\rL 259.228829 388.667872 \\n\\rL 259.675676 388.799999 \\n\\rL 260.122523 388.66222 \\n\\rL 260.569369 388.233607 \\n\\rL 261.016216 387.4921 \\n\\rL 261.463063 386.414495 \\n\\rL 261.90991 384.976449 \\n\\rL 262.803604 380.916087 \\n\\rL 263.697297 375.09463 \\n\\rL 264.590991 367.280889 \\n\\rL 265.484685 357.233455 \\n\\rL 266.378378 344.70846 \\n\\rL 267.272072 329.471815 \\n\\rL 268.165766 311.317715 \\n\\rL 269.506306 278.31162 \\n\\rL 270.846847 238.369968 \\n\\rL 272.634234 176.074757 \\n\\rL 275.315315 80.644271 \\n\\rL 276.209009 57.296088 \\n\\rL 276.655856 49.237132 \\n\\rL 277.102703 44.371691 \\n\\rL 277.54955 43.335468 \\n\\rL 277.996396 46.77714 \\n\\rL 278.443243 55.323403 \\n\\rL 278.89009 69.528308 \\n\\rL 279.336937 89.803055 \\n\\rL 280.230631 148.906277 \\n\\rL 281.124324 228.877168 \\n\\rL 282.464865 352.338838 \\n\\rL 282.911712 378.736731 \\n\\rL 283.358559 388.799995 \\n\\rL 283.805405 377.147391 \\n\\rL 284.252252 340.163226 \\n\\rL 284.699099 278.151058 \\n\\rL 286.03964 55.748432 \\n\\rL 286.486486 48.207233 \\n\\rL 286.933333 113.197709 \\n\\rL 287.827027 361.331139 \\n\\rL 288.273874 374.824982 \\n\\rL 289.167568 53.650098 \\n\\rL 289.614414 142.342594 \\n\\rL 290.061261 382.365259 \\n\\rL 290.508108 177.65454 \\n\\rL 290.954955 146.476843 \\n\\rL 291.401802 293.143963 \\n\\rL 291.848649 269.253145 \\n\\rL 292.295495 86.540778 \\n\\rL 292.742342 191.202268 \\n\\rL 293.189189 129.82011 \\n\\rL 293.636036 323.483468 \\n\\rL 294.082883 76.471144 \\n\\rL 294.52973 388.798319 \\n\\rL 295.87027 388.798319 \\n\\rL 296.317117 76.471144 \\n\\rL 296.763964 323.483468 \\n\\rL 297.210811 129.82011 \\n\\rL 297.657658 191.202268 \\n\\rL 298.104505 86.540778 \\n\\rL 298.551351 269.253145 \\n\\rL 298.998198 293.143963 \\n\\rL 299.445045 146.476843 \\n\\rL 299.891892 177.65454 \\n\\rL 300.338739 382.365259 \\n\\rL 300.785586 142.342594 \\n\\rL 301.232432 53.650098 \\n\\rL 302.126126 374.824982 \\n\\rL 302.572973 361.331139 \\n\\rL 303.466667 113.197709 \\n\\rL 303.913514 48.207233 \\n\\rL 304.36036 55.748432 \\n\\rL 304.807207 115.49803 \\n\\rL 305.700901 278.151058 \\n\\rL 306.147748 340.163226 \\n\\rL 306.594595 377.147391 \\n\\rL 307.041441 388.799995 \\n\\rL 307.488288 378.736731 \\n\\rL 307.935135 352.338838 \\n\\rL 308.828829 272.73672 \\n\\rL 310.169369 148.906277 \\n\\rL 311.063063 89.803055 \\n\\rL 311.50991 69.528308 \\n\\rL 311.956757 55.323403 \\n\\rL 312.403604 46.77714 \\n\\rL 312.85045 43.335468 \\n\\rL 313.297297 44.371691 \\n\\rL 313.744144 49.237132 \\n\\rL 314.190991 57.296088 \\n\\rL 315.084685 80.644271 \\n\\rL 316.425225 126.342632 \\n\\rL 319.553153 238.369968 \\n\\rL 320.893694 278.31162 \\n\\rL 322.234234 311.317715 \\n\\rL 323.574775 337.442889 \\n\\rL 324.468468 351.295694 \\n\\rL 325.362162 362.551685 \\n\\rL 326.255856 371.451716 \\n\\rL 327.14955 378.239639 \\n\\rL 328.043243 383.152497 \\n\\rL 328.936937 386.414495 \\n\\rL 329.383784 387.4921 \\n\\rL 329.830631 388.233607 \\n\\rL 330.277477 388.66222 \\n\\rL 330.724324 388.799999 \\n\\rL 331.171171 388.667872 \\n\\rL 331.618018 388.285652 \\n\\rL 332.064865 387.672064 \\n\\rL 332.958559 385.820429 \\n\\rL 333.852252 383.242279 \\n\\rL 334.745946 380.051849 \\n\\rL 336.086486 374.334557 \\n\\rL 337.873874 365.40576 \\n\\rL 340.108108 352.878733 \\n\\rL 344.12973 328.640229 \\n\\rL 349.491892 296.523995 \\n\\rL 353.066667 276.51302 \\n\\rL 356.194595 260.235459 \\n\\rL 359.322523 245.170296 \\n\\rL 362.45045 231.302469 \\n\\rL 365.578378 218.577728 \\n\\rL 368.259459 208.524692 \\n\\rL 370.940541 199.205338 \\n\\rL 374.068468 189.18959 \\n\\rL 377.196396 180.018538 \\n\\rL 380.324324 171.614438 \\n\\rL 383.452252 163.905101 \\n\\rL 386.58018 156.82438 \\n\\rL 389.708108 150.31219 \\n\\rL 392.836036 144.314267 \\n\\rL 395.963964 138.781787 \\n\\rL 399.091892 133.67092 \\n\\rL 402.21982 128.942374 \\n\\rL 405.794595 123.961476 \\n\\rL 409.369369 119.387329 \\n\\rL 412.944144 115.178681 \\n\\rL 416.518919 111.299086 \\n\\rL 420.540541 107.287874 \\n\\rL 424.562162 103.612047 \\n\\rL 428.583784 100.2363 \\n\\rL 432.605405 97.129692 \\n\\rL 437.073874 93.96062 \\n\\rL 441.542342 91.057732 \\n\\rL 446.457658 88.138219 \\n\\rL 451.372973 85.473707 \\n\\rL 456.735135 82.824584 \\n\\rL 462.097297 80.413522 \\n\\rL 467.906306 78.038628 \\n\\rL 474.162162 75.72371 \\n\\rL 480.864865 73.487761 \\n\\rL 488.014414 71.345238 \\n\\rL 495.610811 69.306473 \\n\\rL 503.654054 67.378168 \\n\\rL 512.590991 65.474102 \\n\\rL 518.4 64.353733 \\n\\rL 518.4 64.353733 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#0000ff;stroke-linecap:square;stroke-width:2.0;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_3\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 43.2 \\n\\rL 518.4 43.2 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_4\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 518.4 388.8 \\n\\rL 518.4 43.2 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_5\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 388.8 \\n\\rL 518.4 388.8 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_6\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 388.8 \\n\\rL 72 43.2 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"matplotlib.axis_1\\\"\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_1\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_2\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL 0 -4 \\n\\r\\\" id\\u003d\\\"m31afe6147a\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m31afe6147a\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_3\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL 0 4 \\n\\r\\\" id\\u003d\\\"m7618f5d89a\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m7618f5d89a\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_1\\\"\\u003e\\n\\r      \\u003c!-- \u22122.0 --\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 10.59375 35.5 \\n\\rL 73.1875 35.5 \\n\\rL 73.1875 27.203125 \\n\\rL 10.59375 27.203125 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 19.1875 8.296875 \\n\\rL 53.609375 8.296875 \\n\\rL 53.609375 0 \\n\\rL 7.328125 0 \\n\\rL 7.328125 8.296875 \\n\\rQ 12.9375 14.109375 22.625 23.890625 \\n\\rQ 32.328125 33.6875 34.8125 36.53125 \\n\\rQ 39.546875 41.84375 41.421875 45.53125 \\n\\rQ 43.3125 49.21875 43.3125 52.78125 \\n\\rQ 43.3125 58.59375 39.234375 62.25 \\n\\rQ 35.15625 65.921875 28.609375 65.921875 \\n\\rQ 23.96875 65.921875 18.8125 64.3125 \\n\\rQ 13.671875 62.703125 7.8125 59.421875 \\n\\rL 7.8125 69.390625 \\n\\rQ 13.765625 71.78125 18.9375 73 \\n\\rQ 24.125 74.21875 28.421875 74.21875 \\n\\rQ 39.75 74.21875 46.484375 68.546875 \\n\\rQ 53.21875 62.890625 53.21875 53.421875 \\n\\rQ 53.21875 48.921875 51.53125 44.890625 \\n\\rQ 49.859375 40.875 45.40625 35.40625 \\n\\rQ 44.1875 33.984375 37.640625 27.21875 \\n\\rQ 31.109375 20.453125 19.1875 8.296875 \\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-32\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 31.78125 66.40625 \\n\\rQ 24.171875 66.40625 20.328125 58.90625 \\n\\rQ 16.5 51.421875 16.5 36.375 \\n\\rQ 16.5 21.390625 20.328125 13.890625 \\n\\rQ 24.171875 6.390625 31.78125 6.390625 \\n\\rQ 39.453125 6.390625 43.28125 13.890625 \\n\\rQ 47.125 21.390625 47.125 36.375 \\n\\rQ 47.125 51.421875 43.28125 58.90625 \\n\\rQ 39.453125 66.40625 31.78125 66.40625 \\n\\rM 31.78125 74.21875 \\n\\rQ 44.046875 74.21875 50.515625 64.515625 \\n\\rQ 56.984375 54.828125 56.984375 36.375 \\n\\rQ 56.984375 17.96875 50.515625 8.265625 \\n\\rQ 44.046875 -1.421875 31.78125 -1.421875 \\n\\rQ 19.53125 -1.421875 13.0625 8.265625 \\n\\rQ 6.59375 17.96875 6.59375 36.375 \\n\\rQ 6.59375 54.828125 13.0625 64.515625 \\n\\rQ 19.53125 74.21875 31.78125 74.21875 \\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 10.6875 12.40625 \\n\\rL 21 12.40625 \\n\\rL 21 0 \\n\\rL 10.6875 0 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(57.4303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-32\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_2\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_4\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"127.8\\\" xlink:href\\u003d\\\"#m31afe6147a\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_5\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"127.8\\\" xlink:href\\u003d\\\"#m7618f5d89a\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_2\\\"\\u003e\\n\\r      \\u003c!-- \u22121.5 --\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 12.40625 8.296875 \\n\\rL 28.515625 8.296875 \\n\\rL 28.515625 63.921875 \\n\\rL 10.984375 60.40625 \\n\\rL 10.984375 69.390625 \\n\\rL 28.421875 72.90625 \\n\\rL 38.28125 72.90625 \\n\\rL 38.28125 8.296875 \\n\\rL 54.390625 8.296875 \\n\\rL 54.390625 0 \\n\\rL 12.40625 0 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 10.796875 72.90625 \\n\\rL 49.515625 72.90625 \\n\\rL 49.515625 64.59375 \\n\\rL 19.828125 64.59375 \\n\\rL 19.828125 46.734375 \\n\\rQ 21.96875 47.46875 24.109375 47.828125 \\n\\rQ 26.265625 48.1875 28.421875 48.1875 \\n\\rQ 40.625 48.1875 47.75 41.5 \\n\\rQ 54.890625 34.8125 54.890625 23.390625 \\n\\rQ 54.890625 11.625 47.5625 5.09375 \\n\\rQ 40.234375 -1.421875 26.90625 -1.421875 \\n\\rQ 22.3125 -1.421875 17.546875 -0.640625 \\n\\rQ 12.796875 0.140625 7.71875 1.703125 \\n\\rL 7.71875 11.625 \\n\\rQ 12.109375 9.234375 16.796875 8.0625 \\n\\rQ 21.484375 6.890625 26.703125 6.890625 \\n\\rQ 35.15625 6.890625 40.078125 11.328125 \\n\\rQ 45.015625 15.765625 45.015625 23.390625 \\n\\rQ 45.015625 31 40.078125 35.4375 \\n\\rQ 35.15625 39.890625 26.703125 39.890625 \\n\\rQ 22.75 39.890625 18.8125 39.015625 \\n\\rQ 14.890625 38.140625 10.796875 36.28125 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(113.2303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_3\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_6\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"183.6\\\" xlink:href\\u003d\\\"#m31afe6147a\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_7\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"183.6\\\" xlink:href\\u003d\\\"#m7618f5d89a\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_3\\\"\\u003e\\n\\r      \\u003c!-- \u22121.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(169.0303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_4\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_8\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"239.4\\\" xlink:href\\u003d\\\"#m31afe6147a\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_9\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"239.4\\\" xlink:href\\u003d\\\"#m7618f5d89a\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_4\\\"\\u003e\\n\\r      \\u003c!-- \u22120.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(224.8303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_5\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_10\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"295.2\\\" xlink:href\\u003d\\\"#m31afe6147a\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_11\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"295.2\\\" xlink:href\\u003d\\\"#m7618f5d89a\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_5\\\"\\u003e\\n\\r      \\u003c!-- 0.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(285.658125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_6\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_12\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"351.0\\\" xlink:href\\u003d\\\"#m31afe6147a\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_13\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"351.0\\\" xlink:href\\u003d\\\"#m7618f5d89a\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_6\\\"\\u003e\\n\\r      \\u003c!-- 0.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(341.458125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_7\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_14\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"406.8\\\" xlink:href\\u003d\\\"#m31afe6147a\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_15\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"406.8\\\" xlink:href\\u003d\\\"#m7618f5d89a\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_7\\\"\\u003e\\n\\r      \\u003c!-- 1.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(397.258125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_8\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_16\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"462.6\\\" xlink:href\\u003d\\\"#m31afe6147a\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_17\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"462.6\\\" xlink:href\\u003d\\\"#m7618f5d89a\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_8\\\"\\u003e\\n\\r      \\u003c!-- 1.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(453.058125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_9\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_18\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m31afe6147a\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_19\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m7618f5d89a\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_9\\\"\\u003e\\n\\r      \\u003c!-- 2.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(508.858125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-32\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"matplotlib.axis_2\\\"\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_1\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_20\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL 4 0 \\n\\r\\\" id\\u003d\\\"m92b2122708\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m92b2122708\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_21\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL -4 0 \\n\\r\\\" id\\u003d\\\"m7b4a0d6ec9\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m7b4a0d6ec9\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_10\\\"\\u003e\\n\\r      \\u003c!-- \u22121.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(38.860625 392.11125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_2\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_22\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m92b2122708\\\" y\\u003d\\\"302.4\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_23\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m7b4a0d6ec9\\\" y\\u003d\\\"302.4\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_11\\\"\\u003e\\n\\r      \\u003c!-- \u22120.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(38.860625 305.71125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_3\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_24\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m92b2122708\\\" y\\u003d\\\"216.0\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_25\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m7b4a0d6ec9\\\" y\\u003d\\\"216.0\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_12\\\"\\u003e\\n\\r      \\u003c!-- 0.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(48.91625 219.31125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_4\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_26\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m92b2122708\\\" y\\u003d\\\"129.6\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_27\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m7b4a0d6ec9\\\" y\\u003d\\\"129.6\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_13\\\"\\u003e\\n\\r      \\u003c!-- 0.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(48.91625 132.91125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_5\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_28\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m92b2122708\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_29\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m7b4a0d6ec9\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_14\\\"\\u003e\\n\\r      \\u003c!-- 1.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(48.91625 46.51125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r  \\u003c/g\\u003e\\n\\r \\u003c/g\\u003e\\n\\r \\u003cdefs\\u003e\\n\\r  \\u003cclipPath id\\u003d\\\"p29ea61f8b5\\\"\\u003e\\n\\r   \\u003crect height\\u003d\\\"345.6\\\" width\\u003d\\\"446.4\\\" x\\u003d\\\"72.0\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r  \\u003c/clipPath\\u003e\\n\\r \\u003c/defs\\u003e\\n\\r\\u003c/svg\\u003e\\n\\r\\u003cdiv\\u003e\"\n+        \"msg\": \"\\u003cdiv style\\u003d\\u0027width:500px\\u0027\\u003e\\u003c?xml version\\u003d\\\"1.0\\\" encoding\\u003d\\\"utf-8\\\" standalone\\u003d\\\"no\\\"?\\u003e\\n\\r\\u003c!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\"\\n\\r  \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\"\\u003e\\n\\r\\u003c!-- Created with matplotlib (http://matplotlib.org/) --\\u003e\\n\\r\\u003csvg height\\u003d\\\"432pt\\\" version\\u003d\\\"1.1\\\" viewBox\\u003d\\\"0 0 576 432\\\" width\\u003d\\\"576pt\\\" xmlns\\u003d\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink\\u003d\\\"http://www.w3.org/1999/xlink\\\"\\u003e\\n\\r \\u003cdefs\\u003e\\n\\r  \\u003cstyle type\\u003d\\\"text/css\\\"\\u003e\\n\\r*{stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:100000;}\\n\\r  \\u003c/style\\u003e\\n\\r \\u003c/defs\\u003e\\n\\r \\u003cg id\\u003d\\\"figure_1\\\"\\u003e\\n\\r  \\u003cg id\\u003d\\\"patch_1\\\"\\u003e\\n\\r   \\u003cpath d\\u003d\\\"M 0 432 \\n\\rL 576 432 \\n\\rL 576 0 \\n\\rL 0 0 \\n\\rz\\n\\r\\\" style\\u003d\\\"fill:#ffffff;\\\"/\\u003e\\n\\r  \\u003c/g\\u003e\\n\\r  \\u003cg id\\u003d\\\"axes_1\\\"\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_2\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 388.8 \\n\\rL 518.4 388.8 \\n\\rL 518.4 43.2 \\n\\rL 72 43.2 \\n\\rz\\n\\r\\\" style\\u003d\\\"fill:#ffffff;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"line2d_1\\\"\\u003e\\n\\r    \\u003cpath clip-path\\u003d\\\"url(#p8d9001317b)\\\" d\\u003d\\\"M 72 64.353733 \\n\\rL 81.383784 66.208006 \\n\\rL 89.873874 68.102082 \\n\\rL 97.917117 70.118515 \\n\\rL 105.513514 72.253983 \\n\\rL 112.663063 74.501874 \\n\\rL 119.365766 76.851708 \\n\\rL 125.621622 79.288583 \\n\\rL 131.430631 81.792703 \\n\\rL 136.792793 84.33905 \\n\\rL 142.154955 87.14138 \\n\\rL 147.07027 89.964621 \\n\\rL 151.538739 92.769201 \\n\\rL 156.007207 95.828137 \\n\\rL 160.475676 99.172274 \\n\\rL 164.497297 102.455067 \\n\\rL 168.518919 106.027174 \\n\\rL 172.540541 109.922371 \\n\\rL 176.115315 113.687089 \\n\\rL 179.69009 117.76831 \\n\\rL 183.264865 122.200833 \\n\\rL 186.83964 127.024032 \\n\\rL 189.967568 131.599727 \\n\\rL 193.095495 136.542179 \\n\\rL 196.223423 141.888876 \\n\\rL 199.351351 147.681647 \\n\\rL 202.479279 153.967119 \\n\\rL 205.607207 160.797174 \\n\\rL 208.735135 168.229361 \\n\\rL 211.863063 176.327214 \\n\\rL 214.544144 183.850661 \\n\\rL 217.225225 191.961516 \\n\\rL 219.906306 200.70986 \\n\\rL 222.587387 210.147822 \\n\\rL 225.268468 220.328242 \\n\\rL 227.94955 231.302469 \\n\\rL 230.630631 243.116823 \\n\\rL 233.758559 258.00883 \\n\\rL 236.886486 274.114509 \\n\\rL 240.014414 291.390828 \\n\\rL 243.589189 312.360386 \\n\\rL 252.079279 362.998329 \\n\\rL 253.866667 372.223666 \\n\\rL 255.207207 378.258931 \\n\\rL 256.547748 383.242279 \\n\\rL 257.441441 385.820429 \\n\\rL 258.335135 387.672064 \\n\\rL 258.781982 388.285652 \\n\\rL 259.228829 388.667872 \\n\\rL 259.675676 388.799999 \\n\\rL 260.122523 388.66222 \\n\\rL 260.569369 388.233607 \\n\\rL 261.016216 387.4921 \\n\\rL 261.463063 386.414495 \\n\\rL 261.90991 384.976449 \\n\\rL 262.803604 380.916087 \\n\\rL 263.697297 375.09463 \\n\\rL 264.590991 367.280889 \\n\\rL 265.484685 357.233455 \\n\\rL 266.378378 344.70846 \\n\\rL 267.272072 329.471815 \\n\\rL 268.165766 311.317715 \\n\\rL 269.506306 278.31162 \\n\\rL 270.846847 238.369968 \\n\\rL 272.634234 176.074757 \\n\\rL 275.315315 80.644271 \\n\\rL 276.209009 57.296088 \\n\\rL 276.655856 49.237132 \\n\\rL 277.102703 44.371691 \\n\\rL 277.54955 43.335468 \\n\\rL 277.996396 46.77714 \\n\\rL 278.443243 55.323403 \\n\\rL 278.89009 69.528308 \\n\\rL 279.336937 89.803055 \\n\\rL 280.230631 148.906277 \\n\\rL 281.124324 228.877168 \\n\\rL 282.464865 352.338838 \\n\\rL 282.911712 378.736731 \\n\\rL 283.358559 388.799995 \\n\\rL 283.805405 377.147391 \\n\\rL 284.252252 340.163226 \\n\\rL 284.699099 278.151058 \\n\\rL 286.03964 55.748432 \\n\\rL 286.486486 48.207233 \\n\\rL 286.933333 113.197709 \\n\\rL 287.827027 361.331139 \\n\\rL 288.273874 374.824982 \\n\\rL 289.167568 53.650098 \\n\\rL 289.614414 142.342594 \\n\\rL 290.061261 382.365259 \\n\\rL 290.508108 177.65454 \\n\\rL 290.954955 146.476843 \\n\\rL 291.401802 293.143963 \\n\\rL 291.848649 269.253145 \\n\\rL 292.295495 86.540778 \\n\\rL 292.742342 191.202268 \\n\\rL 293.189189 129.82011 \\n\\rL 293.636036 323.483468 \\n\\rL 294.082883 76.471144 \\n\\rL 294.52973 388.798319 \\n\\rL 295.87027 388.798319 \\n\\rL 296.317117 76.471144 \\n\\rL 296.763964 323.483468 \\n\\rL 297.210811 129.82011 \\n\\rL 297.657658 191.202268 \\n\\rL 298.104505 86.540778 \\n\\rL 298.551351 269.253145 \\n\\rL 298.998198 293.143963 \\n\\rL 299.445045 146.476843 \\n\\rL 299.891892 177.65454 \\n\\rL 300.338739 382.365259 \\n\\rL 300.785586 142.342594 \\n\\rL 301.232432 53.650098 \\n\\rL 302.126126 374.824982 \\n\\rL 302.572973 361.331139 \\n\\rL 303.466667 113.197709 \\n\\rL 303.913514 48.207233 \\n\\rL 304.36036 55.748432 \\n\\rL 304.807207 115.49803 \\n\\rL 305.700901 278.151058 \\n\\rL 306.147748 340.163226 \\n\\rL 306.594595 377.147391 \\n\\rL 307.041441 388.799995 \\n\\rL 307.488288 378.736731 \\n\\rL 307.935135 352.338838 \\n\\rL 308.828829 272.73672 \\n\\rL 310.169369 148.906277 \\n\\rL 311.063063 89.803055 \\n\\rL 311.50991 69.528308 \\n\\rL 311.956757 55.323403 \\n\\rL 312.403604 46.77714 \\n\\rL 312.85045 43.335468 \\n\\rL 313.297297 44.371691 \\n\\rL 313.744144 49.237132 \\n\\rL 314.190991 57.296088 \\n\\rL 315.084685 80.644271 \\n\\rL 316.425225 126.342632 \\n\\rL 319.553153 238.369968 \\n\\rL 320.893694 278.31162 \\n\\rL 322.234234 311.317715 \\n\\rL 323.574775 337.442889 \\n\\rL 324.468468 351.295694 \\n\\rL 325.362162 362.551685 \\n\\rL 326.255856 371.451716 \\n\\rL 327.14955 378.239639 \\n\\rL 328.043243 383.152497 \\n\\rL 328.936937 386.414495 \\n\\rL 329.383784 387.4921 \\n\\rL 329.830631 388.233607 \\n\\rL 330.277477 388.66222 \\n\\rL 330.724324 388.799999 \\n\\rL 331.171171 388.667872 \\n\\rL 331.618018 388.285652 \\n\\rL 332.064865 387.672064 \\n\\rL 332.958559 385.820429 \\n\\rL 333.852252 383.242279 \\n\\rL 334.745946 380.051849 \\n\\rL 336.086486 374.334557 \\n\\rL 337.873874 365.40576 \\n\\rL 340.108108 352.878733 \\n\\rL 344.12973 328.640229 \\n\\rL 349.491892 296.523995 \\n\\rL 353.066667 276.51302 \\n\\rL 356.194595 260.235459 \\n\\rL 359.322523 245.170296 \\n\\rL 362.45045 231.302469 \\n\\rL 365.578378 218.577728 \\n\\rL 368.259459 208.524692 \\n\\rL 370.940541 199.205338 \\n\\rL 374.068468 189.18959 \\n\\rL 377.196396 180.018538 \\n\\rL 380.324324 171.614438 \\n\\rL 383.452252 163.905101 \\n\\rL 386.58018 156.82438 \\n\\rL 389.708108 150.31219 \\n\\rL 392.836036 144.314267 \\n\\rL 395.963964 138.781787 \\n\\rL 399.091892 133.67092 \\n\\rL 402.21982 128.942374 \\n\\rL 405.794595 123.961476 \\n\\rL 409.369369 119.387329 \\n\\rL 412.944144 115.178681 \\n\\rL 416.518919 111.299086 \\n\\rL 420.540541 107.287874 \\n\\rL 424.562162 103.612047 \\n\\rL 428.583784 100.2363 \\n\\rL 432.605405 97.129692 \\n\\rL 437.073874 93.96062 \\n\\rL 441.542342 91.057732 \\n\\rL 446.457658 88.138219 \\n\\rL 451.372973 85.473707 \\n\\rL 456.735135 82.824584 \\n\\rL 462.097297 80.413522 \\n\\rL 467.906306 78.038628 \\n\\rL 474.162162 75.72371 \\n\\rL 480.864865 73.487761 \\n\\rL 488.014414 71.345238 \\n\\rL 495.610811 69.306473 \\n\\rL 503.654054 67.378168 \\n\\rL 512.590991 65.474102 \\n\\rL 518.4 64.353733 \\n\\rL 518.4 64.353733 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#0000ff;stroke-linecap:square;stroke-width:2.0;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_3\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 43.2 \\n\\rL 518.4 43.2 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_4\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 518.4 388.8 \\n\\rL 518.4 43.2 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_5\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 388.8 \\n\\rL 518.4 388.8 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_6\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 388.8 \\n\\rL 72 43.2 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"matplotlib.axis_1\\\"\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_1\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_2\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL 0 -4 \\n\\r\\\" id\\u003d\\\"m1b33711152\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_3\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL 0 4 \\n\\r\\\" id\\u003d\\\"m5ced6e031b\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_1\\\"\\u003e\\n\\r      \\u003c!-- \u22122.0 --\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 10.59375 35.5 \\n\\rL 73.1875 35.5 \\n\\rL 73.1875 27.203125 \\n\\rL 10.59375 27.203125 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 19.1875 8.296875 \\n\\rL 53.609375 8.296875 \\n\\rL 53.609375 0 \\n\\rL 7.328125 0 \\n\\rL 7.328125 8.296875 \\n\\rQ 12.9375 14.109375 22.625 23.890625 \\n\\rQ 32.328125 33.6875 34.8125 36.53125 \\n\\rQ 39.546875 41.84375 41.421875 45.53125 \\n\\rQ 43.3125 49.21875 43.3125 52.78125 \\n\\rQ 43.3125 58.59375 39.234375 62.25 \\n\\rQ 35.15625 65.921875 28.609375 65.921875 \\n\\rQ 23.96875 65.921875 18.8125 64.3125 \\n\\rQ 13.671875 62.703125 7.8125 59.421875 \\n\\rL 7.8125 69.390625 \\n\\rQ 13.765625 71.78125 18.9375 73 \\n\\rQ 24.125 74.21875 28.421875 74.21875 \\n\\rQ 39.75 74.21875 46.484375 68.546875 \\n\\rQ 53.21875 62.890625 53.21875 53.421875 \\n\\rQ 53.21875 48.921875 51.53125 44.890625 \\n\\rQ 49.859375 40.875 45.40625 35.40625 \\n\\rQ 44.1875 33.984375 37.640625 27.21875 \\n\\rQ 31.109375 20.453125 19.1875 8.296875 \\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-32\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 31.78125 66.40625 \\n\\rQ 24.171875 66.40625 20.328125 58.90625 \\n\\rQ 16.5 51.421875 16.5 36.375 \\n\\rQ 16.5 21.390625 20.328125 13.890625 \\n\\rQ 24.171875 6.390625 31.78125 6.390625 \\n\\rQ 39.453125 6.390625 43.28125 13.890625 \\n\\rQ 47.125 21.390625 47.125 36.375 \\n\\rQ 47.125 51.421875 43.28125 58.90625 \\n\\rQ 39.453125 66.40625 31.78125 66.40625 \\n\\rM 31.78125 74.21875 \\n\\rQ 44.046875 74.21875 50.515625 64.515625 \\n\\rQ 56.984375 54.828125 56.984375 36.375 \\n\\rQ 56.984375 17.96875 50.515625 8.265625 \\n\\rQ 44.046875 -1.421875 31.78125 -1.421875 \\n\\rQ 19.53125 -1.421875 13.0625 8.265625 \\n\\rQ 6.59375 17.96875 6.59375 36.375 \\n\\rQ 6.59375 54.828125 13.0625 64.515625 \\n\\rQ 19.53125 74.21875 31.78125 74.21875 \\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 10.6875 12.40625 \\n\\rL 21 12.40625 \\n\\rL 21 0 \\n\\rL 10.6875 0 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(57.4303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-32\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_2\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_4\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"127.8\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_5\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"127.8\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_2\\\"\\u003e\\n\\r      \\u003c!-- \u22121.5 --\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 12.40625 8.296875 \\n\\rL 28.515625 8.296875 \\n\\rL 28.515625 63.921875 \\n\\rL 10.984375 60.40625 \\n\\rL 10.984375 69.390625 \\n\\rL 28.421875 72.90625 \\n\\rL 38.28125 72.90625 \\n\\rL 38.28125 8.296875 \\n\\rL 54.390625 8.296875 \\n\\rL 54.390625 0 \\n\\rL 12.40625 0 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 10.796875 72.90625 \\n\\rL 49.515625 72.90625 \\n\\rL 49.515625 64.59375 \\n\\rL 19.828125 64.59375 \\n\\rL 19.828125 46.734375 \\n\\rQ 21.96875 47.46875 24.109375 47.828125 \\n\\rQ 26.265625 48.1875 28.421875 48.1875 \\n\\rQ 40.625 48.1875 47.75 41.5 \\n\\rQ 54.890625 34.8125 54.890625 23.390625 \\n\\rQ 54.890625 11.625 47.5625 5.09375 \\n\\rQ 40.234375 -1.421875 26.90625 -1.421875 \\n\\rQ 22.3125 -1.421875 17.546875 -0.640625 \\n\\rQ 12.796875 0.140625 7.71875 1.703125 \\n\\rL 7.71875 11.625 \\n\\rQ 12.109375 9.234375 16.796875 8.0625 \\n\\rQ 21.484375 6.890625 26.703125 6.890625 \\n\\rQ 35.15625 6.890625 40.078125 11.328125 \\n\\rQ 45.015625 15.765625 45.015625 23.390625 \\n\\rQ 45.015625 31 40.078125 35.4375 \\n\\rQ 35.15625 39.890625 26.703125 39.890625 \\n\\rQ 22.75 39.890625 18.8125 39.015625 \\n\\rQ 14.890625 38.140625 10.796875 36.28125 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(113.2303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_3\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_6\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"183.6\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_7\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"183.6\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_3\\\"\\u003e\\n\\r      \\u003c!-- \u22121.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(169.0303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_4\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_8\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"239.4\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_9\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"239.4\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_4\\\"\\u003e\\n\\r      \\u003c!-- \u22120.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(224.8303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_5\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_10\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"295.2\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_11\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"295.2\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_5\\\"\\u003e\\n\\r      \\u003c!-- 0.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(285.658125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_6\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_12\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"351.0\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_13\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"351.0\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_6\\\"\\u003e\\n\\r      \\u003c!-- 0.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(341.458125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_7\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_14\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"406.8\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_15\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"406.8\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_7\\\"\\u003e\\n\\r      \\u003c!-- 1.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(397.258125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_8\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_16\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"462.6\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_17\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"462.6\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_8\\\"\\u003e\\n\\r      \\u003c!-- 1.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(453.058125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_9\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_18\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_19\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_9\\\"\\u003e\\n\\r      \\u003c!-- 2.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(508.858125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-32\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"matplotlib.axis_2\\\"\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_1\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_20\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL 4 0 \\n\\r\\\" id\\u003d\\\"m3c39fe74d7\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_21\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL -4 0 \\n\\r\\\" id\\u003d\\\"m4564b9459b\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_10\\\"\\u003e\\n\\r      \\u003c!-- \u22121.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(38.860625 392.11125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_2\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_22\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"302.4\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_23\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"302.4\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_11\\\"\\u003e\\n\\r      \\u003c!-- \u22120.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(38.860625 305.71125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_3\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_24\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"216.0\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_25\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"216.0\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_12\\\"\\u003e\\n\\r      \\u003c!-- 0.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(48.91625 219.31125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_4\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_26\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"129.6\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_27\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"129.6\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_13\\\"\\u003e\\n\\r      \\u003c!-- 0.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(48.91625 132.91125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_5\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_28\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_29\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_14\\\"\\u003e\\n\\r      \\u003c!-- 1.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(48.91625 46.51125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r  \\u003c/g\\u003e\\n\\r \\u003c/g\\u003e\\n\\r \\u003cdefs\\u003e\\n\\r  \\u003cclipPath id\\u003d\\\"p8d9001317b\\\"\\u003e\\n\\r   \\u003crect height\\u003d\\\"345.6\\\" width\\u003d\\\"446.4\\\" x\\u003d\\\"72.0\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r  \\u003c/clipPath\\u003e\\n\\r \\u003c/defs\\u003e\\n\\r\\u003c/svg\\u003e\\n\\r\\u003cdiv\\u003e\"\n       },\n       \"dateCreated\": \"Jun 16, 2016 11:49:47 PM\",\n-      \"dateStarted\": \"Jun 17, 2016 2:30:03 PM\",\n-      \"dateFinished\": \"Jun 17, 2016 2:30:03 PM\",\n+      \"dateStarted\": \"Jun 22, 2016 5:31:36 PM\",\n+      \"dateFinished\": \"Jun 22, 2016 5:31:36 PM\",\n       \"status\": \"FINISHED\",\n       \"progressUpdateIntervalMs\": 500\n     },\n     {\n-      \"text\": \"%python\\n\\n#something\",\n-      \"dateUpdated\": \"Jun 17, 2016 2:26:41 PM\",\n+      \"text\": \"%python\\n\\n# something else\",\n+      \"dateUpdated\": \"Jun 22, 2016 5:50:47 PM\",\n       \"config\": {\n         \"colWidth\": 12.0,\n         \"graph\": {\n           \"mode\": \"table\",\n-          \"height\": 300.0,\n+          \"height\": 394.0,\n           \"optionOpen\": false,\n           \"keys\": [],\n           \"values\": [],\n@@ -169,15 +171,15 @@\n         \"msg\": \"\"\n       },\n       \"dateCreated\": \"Jun 17, 2016 2:04:39 PM\",\n-      \"dateStarted\": \"Jun 17, 2016 2:26:28 PM\",\n-      \"dateFinished\": \"Jun 17, 2016 2:26:28 PM\",\n+      \"dateStarted\": \"Jun 22, 2016 5:50:47 PM\",\n+      \"dateFinished\": \"Jun 22, 2016 5:50:47 PM\",\n       \"status\": \"FINISHED\",\n       \"progressUpdateIntervalMs\": 500\n     },\n     {\n       \"title\": \"Further help using build-in command\",\n       \"text\": \"help()\",\n-      \"dateUpdated\": \"Jun 17, 2016 1:58:05 PM\",\n+      \"dateUpdated\": \"Jun 22, 2016 5:31:35 PM\",\n       \"config\": {\n         \"colWidth\": 12.0,\n         \"graph\": {\n@@ -203,17 +205,17 @@\n       \"result\": {\n         \"code\": \"SUCCESS\",\n         \"type\": \"HTML\",\n-        \"msg\": \"\\r\\u003ch2\\u003ePython Interpreter help\\u003c/h2\\u003e\\n\\r\\u003ch3\\u003ePython 2 \\u0026 3 comptability\\u003c/h3\\u003e\\n\\r\\u003cp\\u003eThe interpreter is compatible with Python 2 \\u0026 3.\\u003cbr/\\u003e\\n\\rTo change Python version, \\n\\rchange in the interpreter configuration the python to the \\n\\rdesired version (example : python\\u003d/usr/bin/python3)\\u003c/p\\u003e\\n\\r\\u003ch3\\u003ePython modules\\u003c/h3\\u003e\\n\\r\\u003cp\\u003eThe interpreter can use all modules already installed \\n\\r(with pip, easy_install, etc)\\u003c/p\\u003e\\n\\r\\u003ch3\\u003eForms\\u003c/h3\\u003e\\n\\rYou must install py4j in order to use the form feature (pip install py4j)\\n\\r\\u003ch4\\u003eInput form\\u003c/h4\\u003e\\n\\r\\u003cpre\\u003eprint (z.input(\\\"f1\\\",\\\"defaultValue\\\"))\\u003c/pre\\u003e\\n\\r\\u003ch4\\u003eSelection form\\u003c/h4\\u003e\\n\\r\\u003cpre\\u003eprint(z.select(\\\"f2\\\", [(\\\"o1\\\",\\\"1\\\"), (\\\"o2\\\",\\\"2\\\")],2))\\u003c/pre\\u003e\\n\\r\\u003ch4\\u003eCheckbox form\\u003c/h4\\u003e\\n\\r\\u003cpre\\u003e print(\\\"\\\".join(z.checkbox(\\\"f3\\\", [(\\\"o1\\\",\\\"1\\\"), (\\\"o2\\\",\\\"2\\\")],[\\\"1\\\"])))\\u003c/pre\\u003e\\n\\r\\u003ch3\\u003eMatplotlib graph\\u003c/h3\\u003e\\n\\r\\u003cdiv\\u003eThe interpreter can display matplotlib graph with \\n\\rthe function zeppelin_show()\\u003c/div\\u003e\\n\\r\\u003cdiv\\u003e You need to already have matplotlib module installed \\n\\rto use this functionality !\\u003c/div\\u003e\\u003cbr/\\u003e\\n\\r\\u003cpre\\u003eimport matplotlib.pyplot as plt\\n\\rplt.figure()\\n\\r(.. ..)\\n\\rzeppelin_show(plt)\\n\\rplt.close()\\n\\r\\u003c/pre\\u003e\\n\\r\\u003cdiv\\u003e\\u003cbr/\\u003e zeppelin_show function can take optional parameters \\n\\rto adapt graph width and height\\u003c/div\\u003e\\n\\r\\u003cdiv\\u003e\\u003cb\\u003eexample \\u003c/b\\u003e:\\n\\r\\u003cpre\\u003ezeppelin_show(plt,width\\u003d\\u002750px\\u0027)\\n\\rzeppelin_show(plt,height\\u003d\\u0027150px\\u0027) \\u003c/pre\\u003e\\u003c/div\\u003e\"\n+        \"msg\": \"\\r\\u003ch2\\u003ePython Interpreter help\\u003c/h2\\u003e\\n\\r\\u003ch3\\u003ePython 2 \\u0026 3 comptability\\u003c/h3\\u003e\\n\\r\\u003cp\\u003eThe interpreter is compatible with Python 2 \\u0026 3.\\u003cbr/\\u003e\\n\\rTo change Python version, \\n\\rchange in the interpreter configuration the python to the \\n\\rdesired version (example : python\\u003d/usr/bin/python3)\\u003c/p\\u003e\\n\\r\\u003ch3\\u003ePython modules\\u003c/h3\\u003e\\n\\r\\u003cp\\u003eThe interpreter can use all modules already installed \\n\\r(with pip, easy_install, etc)\\u003c/p\\u003e\\n\\r\\u003ch3\\u003eForms\\u003c/h3\\u003e\\n\\rYou must install py4j in order to use the form feature (pip install py4j)\\n\\r\\u003ch4\\u003eInput form\\u003c/h4\\u003e\\n\\r\\u003cpre\\u003eprint (z.input(\\\"f1\\\",\\\"defaultValue\\\"))\\u003c/pre\\u003e\\n\\r\\u003ch4\\u003eSelection form\\u003c/h4\\u003e\\n\\r\\u003cpre\\u003eprint(z.select(\\\"f2\\\", [(\\\"o1\\\",\\\"1\\\"), (\\\"o2\\\",\\\"2\\\")],2))\\u003c/pre\\u003e\\n\\r\\u003ch4\\u003eCheckbox form\\u003c/h4\\u003e\\n\\r\\u003cpre\\u003e print(\\\"\\\".join(z.checkbox(\\\"f3\\\", [(\\\"o1\\\",\\\"1\\\"), (\\\"o2\\\",\\\"2\\\")],[\\\"1\\\"])))\\u003c/pre\\u003e\\n\\r\\u003ch3\\u003eMatplotlib graph\\u003c/h3\\u003e\\n\\r\\u003cdiv\\u003eThe interpreter can display matplotlib graph with \\n\\rthe function z.show()\\u003c/div\\u003e\\n\\r\\u003cdiv\\u003e You need to already have matplotlib module installed \\n\\rto use this functionality !\\u003c/div\\u003e\\u003cbr/\\u003e\\n\\r\\u003cpre\\u003eimport matplotlib.pyplot as plt\\n\\rplt.figure()\\n\\r(.. ..)\\n\\rz.show(plt)\\n\\rplt.close()\\n\\r\\u003c/pre\\u003e\\n\\r\\u003cdiv\\u003e\\u003cbr/\\u003e z.show function can take optional parameters \\n\\rto adapt graph width and height\\u003c/div\\u003e\\n\\r\\u003cdiv\\u003e\\u003cb\\u003eexample \\u003c/b\\u003e:\\n\\r\\u003cpre\\u003ez.show(plt,width\\u003d\\u002750px\\u0027)\\n\\rz.show(plt,height\\u003d\\u0027150px\\u0027) \\u003c/pre\\u003e\\u003c/div\\u003e\"\n       },\n       \"dateCreated\": \"Jun 14, 2016 5:45:31 PM\",\n-      \"dateStarted\": \"Jun 17, 2016 1:58:07 PM\",\n-      \"dateFinished\": \"Jun 17, 2016 1:58:07 PM\",\n+      \"dateStarted\": \"Jun 22, 2016 5:31:36 PM\",\n+      \"dateFinished\": \"Jun 22, 2016 5:31:36 PM\",\n       \"status\": \"FINISHED\",\n       \"progressUpdateIntervalMs\": 500\n     },\n     {\n       \"text\": \"\",\n-      \"dateUpdated\": \"Jun 17, 2016 1:58:05 PM\",\n+      \"dateUpdated\": \"Jun 22, 2016 5:31:35 PM\",\n       \"config\": {\n         \"colWidth\": 12.0,\n         \"graph\": {\n@@ -240,20 +242,20 @@\n         \"msg\": \"\"\n       },\n       \"dateCreated\": \"Jun 16, 2016 11:03:38 AM\",\n-      \"dateStarted\": \"Jun 17, 2016 1:58:07 PM\",\n-      \"dateFinished\": \"Jun 17, 2016 1:58:07 PM\",\n+      \"dateStarted\": \"Jun 22, 2016 5:31:36 PM\",\n+      \"dateFinished\": \"Jun 22, 2016 5:31:36 PM\",\n       \"status\": \"FINISHED\",\n       \"progressUpdateIntervalMs\": 500\n     }\n   ],\n   \"name\": \"Zeppelin Tutorial: Python - matplotlib basic\",\n   \"id\": \"2BQA35CJZ\",\n+  \"lastReplName\": {\n+    \"value\": \"python\"\n+  },\n   \"angularObjects\": {\n-    \"2BF85N7NW:shared_process\": [],\n-    \"2BGHU9722:shared_process\": [],\n-    \"2BKHK8EY7:shared_process\": [],\n-    \"2BF5T5XA9:shared_process\": [],\n-    \"2BF44TSFC:shared_process\": []\n+    \"2BMX349MY:shared_process\": [],\n+    \"2BN9WB6KT:shared_process\": []\n   },\n   \"config\": {\n     \"looknfeel\": \"default\"",
                "raw_url": "https://github.com/apache/zeppelin/raw/230d890142f2346c48a32ad6b98a4598fdfce1b7/notebook/2BQA35CJZ/note.json",
                "sha": "d9ffc9b4a5c587c6304c955adc3c304c922818f5",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/230d890142f2346c48a32ad6b98a4598fdfce1b7/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java?ref=230d890142f2346c48a32ad6b98a4598fdfce1b7",
                "deletions": 2,
                "filename": "python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "patch": "@@ -123,7 +123,9 @@ public void close() {\n   @Override\n   public InterpreterResult interpret(String cmd, InterpreterContext contextInterpreter) {\n     this.context = contextInterpreter;\n-\n+    if (cmd == null || cmd.isEmpty()) {\n+      return new InterpreterResult(Code.SUCCESS, \"\");\n+    }\n     String output = sendCommandToPython(cmd);\n     return new InterpreterResult(Code.SUCCESS, output.replaceAll(\">>>\", \"\")\n         .replaceAll(\"\\\\.\\\\.\\\\.\", \"\").trim());\n@@ -182,12 +184,13 @@ private Job getRunningJob(String paragraphId) {\n \n   private String sendCommandToPython(String cmd) {\n     String output = \"\";\n-    logger.info(\"Sending : \\n\" + (cmd.length() > 200 ? cmd.substring(0, 120) + \"...\" : cmd));\n+    logger.info(\"Sending : \\n\" + (cmd.length() > 200 ? cmd.substring(0, 200) + \"...\" : cmd));\n     try {\n       output = process.sendAndGetResult(cmd);\n     } catch (IOException e) {\n       logger.error(\"Error when sending commands to python process\", e);\n     }\n+    //logger.info(\"Got : \\n\" + output);\n     return output;\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/230d890142f2346c48a32ad6b98a4598fdfce1b7/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "sha": "08bb944721c8cd39427bb46371e13840c72826c6",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/230d890142f2346c48a32ad6b98a4598fdfce1b7/python/src/main/resources/__init__.py",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/resources/__init__.py?ref=230d890142f2346c48a32ad6b98a4598fdfce1b7",
                "deletions": 0,
                "filename": "python/src/main/resources/__init__.py",
                "raw_url": "https://github.com/apache/zeppelin/raw/230d890142f2346c48a32ad6b98a4598fdfce1b7/python/src/main/resources/__init__.py",
                "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
                "status": "added"
            },
            {
                "additions": 77,
                "blob_url": "https://github.com/apache/zeppelin/blob/230d890142f2346c48a32ad6b98a4598fdfce1b7/python/src/main/resources/bootstrap.py",
                "changes": 99,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/resources/bootstrap.py?ref=230d890142f2346c48a32ad6b98a4598fdfce1b7",
                "deletions": 22,
                "filename": "python/src/main/resources/bootstrap.py",
                "patch": "@@ -33,6 +33,7 @@ def intHandler(signum, frame):  # Set the signal handler\n \n signal.signal(signal.SIGINT, intHandler)\n \n+\n def help():\n     print ('%html')\n     print ('<h2>Python Interpreter help</h2>')\n@@ -56,47 +57,101 @@ def help():\n            '(\"o2\",\"2\")],[\"1\"])))</pre>')\n     print ('<h3>Matplotlib graph</h3>')\n     print ('<div>The interpreter can display matplotlib graph with ')\n-    print ('the function zeppelin_show()</div>')\n+    print ('the function z.show()</div>')\n     print ('<div> You need to already have matplotlib module installed ')\n     print ('to use this functionality !</div><br/>')\n     print ('''<pre>import matplotlib.pyplot as plt\n plt.figure()\n (.. ..)\n-zeppelin_show(plt)\n+z.show(plt)\n plt.close()\n </pre>''')\n-    print ('<div><br/> zeppelin_show function can take optional parameters ')\n+    print ('<div><br/> z.show function can take optional parameters ')\n     print ('to adapt graph width and height</div>')\n     print (\"<div><b>example </b>:\")\n-    print('''<pre>zeppelin_show(plt,width='50px')\n-zeppelin_show(plt,height='150px') </pre></div>''')\n-\n-# Matplotlib show function\n-def zeppelin_show(p, width=\"0\", height=\"0\"):\n-    img = io.StringIO()\n-    p.savefig(img, format='svg')\n-    img.seek(0)\n-    style = \"\"\n-    if(width != \"0\"):\n-        style += 'width:'+width\n-    if(height != \"0\"):\n-        if(len(style) != 0):\n-            style += \",\"\n-            style += 'height:'+height\n-    print(\"%html <div style='\" + style + \"'>\" + img.read() + \"<div>\")\n+    print ('''<pre>z.show(plt,width='50px')\n+z.show(plt,height='150px') </pre></div>''')\n+    print ('<h3>Pandas DataFrame</h3>')\n+    print \"\"\"\n+<div>The interpreter can visualize Pandas DataFrame\n+with the function z.show()\n+<pre>\n+import pandas as pd\n+df = pd.read_csv(\"bank.csv\", sep=\";\")\n+z.show(df)\n+</pre></div>\n+\"\"\"\n \n-# If py4j is detected, these class will be override\n-# with the implementation in bootstrap_input.py\n-class PyZeppelinContext():\n+class PyZeppelinContext(object):\n+    \"\"\" If py4j is detected, these class will be override\n+        with the implementation in bootstrap_input.py\n+    \"\"\"\n     errorMsg = \"You must install py4j Python module \" \\\n                \"(pip install py4j) to use Zeppelin dynamic forms features\"\n+    \n     def __init__(self, zc):\n         self.z = zc\n+        self.max_result = 1000\n+    \n     def input(self, name, defaultValue=\"\"):\n         print (self.errorMsg)\n+    \n     def select(self, name, options, defaultValue=\"\"):\n         print (self.errorMsg)\n+    \n     def checkbox(self, name, options, defaultChecked=[]):\n         print (self.errorMsg)\n+    \n+    def show(self, p, **kwargs):\n+        if hasattr(p, '__name__') and p.__name__ == \"matplotlib.pyplot\":\n+            self.show_matplotlib(p, **kwargs)\n+        elif type(p).__name__ == \"DataFrame\": # does not play well with sub-classes\n+            # `isinstance(p, DataFrame)` would req `import pandas.core.frame.DataFrame`\n+            # and so a dependency on pandas\n+            self.show_dataframe(p, **kwargs)\n+    \n+    def show_dataframe(self, df, **kwargs):\n+        \"\"\"Pretty prints DF using Table Display System\n+        \"\"\"\n+        limit = len(df) > self.max_result\n+        header_buf = io.StringIO(\"\")\n+        header_buf.write(df.columns[0])\n+        for col in df.columns[1:]:\n+            header_buf.write(\"\\t\")\n+            header_buf.write(col)\n+        header_buf.write(\"\\n\")\n+        \n+        body_buf = io.StringIO(\"\")\n+        rows = df.head(self.max_result).values if limit else df.values\n+        for row in rows:\n+            body_buf.write(row[0])\n+            for cell in row[1:]:\n+                body_buf.write(\"\\t\")\n+                body_buf.write(cell)\n+            body_buf.write(\"\\n\")\n+        body_buf.seek(0); header_buf.seek(0)\n+        #TODO(bzz): fix it, so it shows red notice, as in Spark\n+        print(\"%table \" + header_buf.read() + body_buf.read()) # +\n+        #      (\"\\n<font color=red>Results are limited by {}.</font>\" \\\n+        #          .format(self.max_result) if limit else \"\")\n+        #)\n+        body_buf.close(); header_buf.close()\n+    \n+    def show_matplotlib(self, p, width=\"0\", height=\"0\", **kwargs):\n+        \"\"\"Matplotlib show function\n+        \"\"\"\n+        img = io.StringIO()\n+        p.savefig(img, format='svg')\n+        img.seek(0)\n+        style = \"\"\n+        if (width != \"0\"):\n+            style += 'width:' + width\n+        if (height != \"0\"):\n+            if (len(style) != 0):\n+                style += \",\"\n+                style += 'height:' + height\n+        print(\"%html <div style='\" + style + \"'>\" + img.read() + \"<div>\")\n+        img.close()\n+\n \n z = PyZeppelinContext(\"\")",
                "raw_url": "https://github.com/apache/zeppelin/raw/230d890142f2346c48a32ad6b98a4598fdfce1b7/python/src/main/resources/bootstrap.py",
                "sha": "73658b3ba1a3229f87b862c88f07e59ceebd23df",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/zeppelin/blob/230d890142f2346c48a32ad6b98a4598fdfce1b7/python/src/main/resources/bootstrap_input.py",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/resources/bootstrap_input.py?ref=230d890142f2346c48a32ad6b98a4598fdfce1b7",
                "deletions": 8,
                "filename": "python/src/main/resources/bootstrap_input.py",
                "patch": "@@ -16,28 +16,32 @@\n from py4j.java_gateway import JavaGateway\n from py4j.java_gateway import java_import, JavaGateway, GatewayClient\n \n+\n client = GatewayClient(port=%PORT%)\n gateway = JavaGateway(client)\n java_import(gateway.jvm, \"org.apache.zeppelin.display.Input\")\n \n-class PyZeppelinContext():\n-    paramOption = gateway.jvm.org.apache.zeppelin.display.Input.ParamOption\n-    javaList = gateway.jvm.java.util.ArrayList\n \n+class Py4jZeppelinContext(PyZeppelinContext):\n+    \"\"\"A context impl that uses Py4j to communicate to JVM\n+    \"\"\"\n     def __init__(self, zc):\n-        self.z = zc\n-\n+        super(Py4jZeppelinContext, self).__init__(zc)\n+        self.paramOption = gateway.jvm.org.apache.zeppelin.display.Input.ParamOption\n+        self.javaList = gateway.jvm.java.util.ArrayList\n+        self.max_result = 1000 #TODO(bzz): read `zeppelin.python.maxResult` from JVM\n+    \n     def input(self, name, defaultValue=\"\"):\n         return self.z.getGui().input(name, defaultValue)\n-\n+    \n     def select(self, name, options, defaultValue=\"\"):\n         javaOptions = gateway.new_array(self.paramOption, len(options))\n         i = 0\n         for tuple in options:\n             javaOptions[i] = self.paramOption(tuple[0], tuple[1])\n             i += 1\n         return self.z.getGui().select(name, defaultValue, javaOptions)\n-\n+    \n     def checkbox(self, name, options, defaultChecked=[]):\n         javaOptions = gateway.new_array(self.paramOption, len(options))\n         i = 0\n@@ -49,4 +53,5 @@ def checkbox(self, name, options, defaultChecked=[]):\n             javaDefaultCheck.append(check)\n         return self.z.getGui().checkbox(name, javaDefaultCheck, javaOptions)\n \n-z = PyZeppelinContext(gateway.entry_point)\n+\n+z = Py4jZeppelinContext(gateway.entry_point)",
                "raw_url": "https://github.com/apache/zeppelin/raw/230d890142f2346c48a32ad6b98a4598fdfce1b7/python/src/main/resources/bootstrap_input.py",
                "sha": "d15b93ad8c739dce7ee436791af14b4e0f0e3d26",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-1048: Pandas support for python interpreter\n\n### What is this PR for?\nDisplay Pandas DataFrame using Zeppelin's Table Display system.\n\n### What type of PR is it?\nFeature\n\n### Todos\n* [x] fix NPE in logs on empty paragraph execution\n* [x] matplotlib: refactor `zeppelin_show(plt)` -> `z.show(plt)`\n* [x] pandas: support `z.show(df)`\n* [x] update docs\n\n### What is the Jira issue?\n[ZEPPELIN-1048](https://issues.apache.org/jira/browse/ZEPPELIN-1048)\n\n### How should this be tested?\n\"Zeppelin Tutorial: Python - matplotlib basic\" should work, and\n\n```python\nimport pandas as pd\nrates = pd.read_csv(\"bank.csv\", sep=\";\")\nz.show(rates)\n```\n### Screenshots (if appropriate)\n![screen shot 2016-06-23 at 10 29 00](https://cloud.githubusercontent.com/assets/5582506/16289133/85f0ddbc-392d-11e6-86a3-28d10e73f68d.png)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? Yes\n\nAuthor: Alexander Bezzubov <bzz@apache.org>\n\nCloses #1067 from bzz/python/pandas-support and squashes the following commits:\n\n3b1ad36 [Alexander Bezzubov] Python: update docs to reffer new API\nee6668b [Alexander Bezzubov] Python: update docs, add Pandas integration\n71be418 [Alexander Bezzubov] Python: limit 1000 for table display system on DataFrame\n52e787d [Alexander Bezzubov] Python: pandas DataFrame using Table display system\nbc91b86 [Alexander Bezzubov] Python: skip interpreting empty paragraphs\na7248cd [Alexander Bezzubov] Python: draft of pandas support\n15646a1 [Alexander Bezzubov] Python: refactoring to z.show()",
        "parent": "https://github.com/apache/zeppelin/commit/ff4973d4354583fa39f7c90149f1e50bb6beebc7",
        "patched_files": [
            "__init__.py",
            "note.json",
            "bootstrap.py",
            "bootstrap_input.py",
            "PythonInterpreter.java",
            "python.md"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "PythonInterpreterTest.java"
        ]
    },
    "zeppelin_2cc10d0": {
        "bug_id": "zeppelin_2cc10d0",
        "commit": "https://github.com/apache/zeppelin/commit/2cc10d0ba78362b3c4d351a6e3044b73dc5404eb",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/2cc10d0ba78362b3c4d351a6e3044b73dc5404eb/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java?ref=2cc10d0ba78362b3c4d351a6e3044b73dc5404eb",
                "deletions": 24,
                "filename": "spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java",
                "patch": "@@ -19,7 +19,7 @@\n \n import static org.junit.Assert.assertEquals;\n \n-import java.io.File;\n+import java.io.IOException;\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.Properties;\n@@ -31,28 +31,27 @@\n import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n public class DepInterpreterTest {\n+\n+  @Rule\n+  public TemporaryFolder tmpDir = new TemporaryFolder();\n+\n   private DepInterpreter dep;\n   private InterpreterContext context;\n-  private File tmpDir;\n-  private SparkInterpreter repl;\n \n-  private Properties getTestProperties() {\n+  private Properties getTestProperties() throws IOException {\n     Properties p = new Properties();\n-    p.setProperty(\"zeppelin.dep.localrepo\", \"local-repo\");\n+    p.setProperty(\"zeppelin.dep.localrepo\", tmpDir.newFolder().getAbsolutePath());\n     p.setProperty(\"zeppelin.dep.additionalRemoteRepository\", \"spark-packages,http://dl.bintray.com/spark-packages/maven,false;\");\n     return p;\n   }\n \n   @Before\n   public void setUp() throws Exception {\n-    tmpDir = new File(System.getProperty(\"java.io.tmpdir\") + \"/ZeppelinLTest_\" + System.currentTimeMillis());\n-    System.setProperty(\"zeppelin.dep.localrepo\", tmpDir.getAbsolutePath() + \"/local-repo\");\n-\n-    tmpDir.mkdirs();\n-\n     Properties p = getTestProperties();\n \n     dep = new DepInterpreter(p);\n@@ -74,20 +73,6 @@ public void setUp() throws Exception {\n   @After\n   public void tearDown() throws Exception {\n     dep.close();\n-    delete(tmpDir);\n-  }\n-\n-  private void delete(File file) {\n-    if (file.isFile()) file.delete();\n-    else if (file.isDirectory()) {\n-      File[] files = file.listFiles();\n-      if (files != null && files.length > 0) {\n-        for (File f : files) {\n-          delete(f);\n-        }\n-      }\n-      file.delete();\n-    }\n   }\n \n   @Test",
                "raw_url": "https://github.com/apache/zeppelin/raw/2cc10d0ba78362b3c4d351a6e3044b73dc5404eb/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java",
                "sha": "608807cd032f4eaa68a9a59494fd4c1fbf2469b6",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1837] Fix possible reason of DepInterpreterTest failure\n\n### What is this PR for?\nFix possible reason of DepInterpreterTest failure\n\n### What type of PR is it?\n[Bug Fix]\n\n### What is the Jira issue?\n[ZEPPELIN-1837](https://issues.apache.org/jira/browse/ZEPPELIN-1837)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nDepInterpreterTest will use random temporary folder for repo\n\n`DefaultRepositorySystem.resolveDependencies` throws NPE at line 352\nif `ArtifactResolutionException` is thrown during `collectDependencies`.\nArtifact is found but it is impossible to download it (for example folder\ncan't be created)\n\nI think the reason is that several tests use \"local-repo\" folder for repository.\nWhile one test tries to download artifact, another deletes repository\n(or some another distructive thing)\n\nAuthor: Igor Drozdov <igor_drozdov@epam.com>\n\nCloses #1782 from DrIgor/ZEPPELIN-1837 and squashes the following commits:\n\na2af135 [Igor Drozdov] Fix possible reason of DepInterpreterTest failure",
        "parent": "https://github.com/apache/zeppelin/commit/61aeeaf10f340879337b6f19c5a9b3aaaa4eca9e",
        "patched_files": [
            "DepInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "DepInterpreterTest.java"
        ]
    },
    "zeppelin_31f584c": {
        "bug_id": "zeppelin_31f584c",
        "commit": "https://github.com/apache/zeppelin/commit/31f584cfee41598aab16da8d84752e69b80b083c",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/bin/interpreter.sh",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/bin/interpreter.sh?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 3,
                "filename": "bin/interpreter.sh",
                "patch": "@@ -23,7 +23,7 @@ function usage() {\n     echo \"usage) $0 -p <port> -d <interpreter dir to load> -l <local interpreter repo dir to load>\"\n }\n \n-while getopts \"hp:d:l:v\" o; do\n+while getopts \"hp:d:l:v:u:\" o; do\n     case ${o} in\n         h)\n             usage\n@@ -42,6 +42,14 @@ while getopts \"hp:d:l:v\" o; do\n             . \"${bin}/common.sh\"\n             getZeppelinVersion\n             ;;\n+        u)\n+            ZEPPELIN_IMPERSONATE_USER=\"${OPTARG}\"\n+            if [[ -z \"$ZEPPELIN_IMPERSONATE_CMD\" ]]; then\n+              ZEPPELIN_IMPERSONATE_RUN_CMD=`echo \"ssh ${ZEPPELIN_IMPERSONATE_USER}@localhost\" `\n+            else\n+              ZEPPELIN_IMPERSONATE_RUN_CMD=$(eval \"echo ${ZEPPELIN_IMPERSONATE_CMD} \")\n+            fi\n+            ;;\n         esac\n done\n \n@@ -178,9 +186,9 @@ addJarInDirForIntp \"${LOCAL_INTERPRETER_REPO}\"\n CLASSPATH+=\":${ZEPPELIN_INTP_CLASSPATH}\"\n \n if [[ -n \"${SPARK_SUBMIT}\" ]]; then\n-    ${SPARK_SUBMIT} --class ${ZEPPELIN_SERVER} --driver-class-path \"${ZEPPELIN_INTP_CLASSPATH_OVERRIDES}:${CLASSPATH}\" --driver-java-options \"${JAVA_INTP_OPTS}\" ${SPARK_SUBMIT_OPTIONS} ${SPARK_APP_JAR} ${PORT} &\n+    ${ZEPPELIN_IMPERSONATE_RUN_CMD} `${SPARK_SUBMIT} --class ${ZEPPELIN_SERVER} --driver-class-path \"${ZEPPELIN_INTP_CLASSPATH_OVERRIDES}:${CLASSPATH}\" --driver-java-options \"${JAVA_INTP_OPTS}\" ${SPARK_SUBMIT_OPTIONS} ${SPARK_APP_JAR} ${PORT} &`\n else\n-    ${ZEPPELIN_RUNNER} ${JAVA_INTP_OPTS} ${ZEPPELIN_INTP_MEM} -cp ${ZEPPELIN_INTP_CLASSPATH_OVERRIDES}:${CLASSPATH} ${ZEPPELIN_SERVER} ${PORT} &\n+    ${ZEPPELIN_IMPERSONATE_RUN_CMD} ${ZEPPELIN_RUNNER} ${JAVA_INTP_OPTS} ${ZEPPELIN_INTP_MEM} -cp ${ZEPPELIN_INTP_CLASSPATH_OVERRIDES}:${CLASSPATH} ${ZEPPELIN_SERVER} ${PORT} &\n fi\n \n pid=$!",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/bin/interpreter.sh",
                "sha": "b1e1a157cb054a742e445e0d898a6299240d2964",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/conf/zeppelin-env.sh.template",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/conf/zeppelin-env.sh.template?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 0,
                "filename": "conf/zeppelin-env.sh.template",
                "patch": "@@ -79,3 +79,4 @@\n # export ZEPPELINHUB_API_ADDRESS\t\t# Refers to the address of the ZeppelinHub service in use\n # export ZEPPELINHUB_API_TOKEN\t\t\t# Refers to the Zeppelin instance token of the user\n # export ZEPPELINHUB_USER_KEY\t\t\t# Optional, when using Zeppelin with authentication.\n+# export ZEPPELIN_IMPERSONATE_CMD       # Optional, when user want to run interpreter as end web user. eg) 'sudo -u ${ZEPPELIN_IMPERSONATE_USER}'",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/conf/zeppelin-env.sh.template",
                "sha": "a35adba663cc5fec0b2d0a244cebafc7bb009eea",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/docs/_includes/themes/zeppelin/_navigation.html",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/_includes/themes/zeppelin/_navigation.html?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 0,
                "filename": "docs/_includes/themes/zeppelin/_navigation.html",
                "patch": "@@ -46,6 +46,7 @@\n                 <li><a href=\"{{BASE_PATH}}/manual/interpreterinstallation.html\">Interpreter Installation</a></li>\n                 <!--<li><a href=\"{{BASE_PATH}}/manual/dynamicinterpreterload.html\">Dynamic Interpreter Loading</a></li>-->\n                 <li><a href=\"{{BASE_PATH}}/manual/dependencymanagement.html\">Interpreter Dependency Management</a></li>\n+                <li><a href=\"{{BASE_PATH}}/manual/userimpersonation.html\">Interpreter User Impersonation</a></li>\n                 <li role=\"separator\" class=\"divider\"></li>\n                 <li class=\"title\"><span><b>Available Interpreters</b><span></li>\n                 <li><a href=\"{{BASE_PATH}}/interpreter/alluxio.html\">Alluxio</a></li>",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/docs/_includes/themes/zeppelin/_navigation.html",
                "sha": "6ed8d5ae801d74d1b60b95e12b1aaf39baeef470",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/docs/assets/themes/zeppelin/img/screenshots/user-impersonation.gif",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/assets/themes/zeppelin/img/screenshots/user-impersonation.gif?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 0,
                "filename": "docs/assets/themes/zeppelin/img/screenshots/user-impersonation.gif",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/docs/assets/themes/zeppelin/img/screenshots/user-impersonation.gif",
                "sha": "eb39bc8dac8d095164347f71a696733f9fa018e1",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/docs/index.md",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/index.md?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 0,
                "filename": "docs/index.md",
                "patch": "@@ -142,6 +142,7 @@ Join to our [Mailing list](https://zeppelin.apache.org/community.html) and repor\n * Usage\n   * [Interpreter Installation](./manual/interpreterinstallation.html): Install not only community managed interpreters but also 3rd party interpreters\n   * [Interpreter Dependency Management](./manual/dependencymanagement.html) when you include external libraries to interpreter\n+  * [Interpreter User Impersonation](./manual/userimpersonation.html) when you want to run interpreter as end user\n * Available Interpreters: currently, about 20 interpreters are available in Apache Zeppelin.\n \n ####Display System",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/docs/index.md",
                "sha": "db5931e5abd3c5bde92ecef0f0f6cdd69b92bc76",
                "status": "modified"
            },
            {
                "additions": 66,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/docs/manual/processenduser.md",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/manual/processenduser.md?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 0,
                "filename": "docs/manual/processenduser.md",
                "patch": "@@ -0,0 +1,66 @@\n+---\n+layout: page\n+title: \"Run zeppelin interpreter process as web front end user\"\n+description: \"Set up zeppelin interpreter process as web front end user.\"\n+group: manual\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+{% include JB/setup %}\n+\n+## Run zeppelin interpreter process as web front end user\n+\n+ * Enable shiro auth in shiro.ini\n+\n+```\n+[users]\n+user1 = password1, role1\n+user2 = password2, role2\n+```\n+\n+ * Enable password-less ssh for the user you want to impersonate (say user1).\n+\n+```\n+adduser user1\n+#ssh-keygen (optional if you don't already have generated ssh-key.\n+ssh user1@localhost mkdir -p .ssh\n+cat ~/.ssh/id_rsa.pub | ssh user1@localhost 'cat >> .ssh/authorized_keys'\n+```\n+\n+ * Start zeppelin server.\n+ \n+<hr>\n+<div class=\"row\">\n+  <div class=\"col-md-12\">\n+         <b> Screenshot </b>\n+         <br /><br />\n+  </div>\n+  <div class=\"col-md-12\" >\n+      <a data-lightbox=\"compiler\" href=\"../assets/themes/zeppelin/img/screenshots/user-impersonation.gif\">\n+        <img class=\"img-responsive\" src=\"../assets/themes/zeppelin/img/screenshots/user-impersonation.gif\" />\n+      </a>\n+    \n+  </div>\n+</div>\n+<hr>\n+ \n+ * Go to interpreter setting page, and enable \"User Impersonate\" in any of the interpreter (in my example its shell interpreter)\n+ \n+ * Test with a simple paragraph\n+\n+```\n+%sh\n+whoami\n+```\n+",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/docs/manual/processenduser.md",
                "sha": "363c62dbc534a52d20e62a2fd5e72f23562f766d",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "patch": "@@ -37,6 +37,7 @@\n   boolean isExistingProcess;\n   boolean setPermission;\n   List<String> users;\n+  boolean isUserImpersonate;\n \n   public boolean isExistingProcess() {\n     return isExistingProcess;\n@@ -66,6 +67,14 @@ public void setUserPermission(boolean setPermission) {\n     return users;\n   }\n \n+  public boolean isUserImpersonate() {\n+    return isUserImpersonate;\n+  }\n+\n+  public void setUserImpersonate(boolean userImpersonate) {\n+    isUserImpersonate = userImpersonate;\n+  }\n+\n   public InterpreterOption() {\n     this(false);\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "sha": "3e789babf313081dade67c40b46953b7305bae68",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 4,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "patch": "@@ -59,6 +59,8 @@\n   private int maxPoolSize;\n   private String host;\n   private int port;\n+  private String userName;\n+  private Boolean isUserImpersonate;\n \n   /**\n    * Remote interpreter and manage interpreter process\n@@ -72,7 +74,9 @@ public RemoteInterpreter(Properties property,\n                            int connectTimeout,\n                            int maxPoolSize,\n                            RemoteInterpreterProcessListener remoteInterpreterProcessListener,\n-                           ApplicationEventListener appListener) {\n+                           ApplicationEventListener appListener,\n+                           String userName,\n+                           Boolean isUserImpersonate) {\n     super(property);\n     this.noteId = noteId;\n     this.className = className;\n@@ -85,6 +89,8 @@ public RemoteInterpreter(Properties property,\n     this.maxPoolSize = maxPoolSize;\n     this.remoteInterpreterProcessListener = remoteInterpreterProcessListener;\n     this.applicationEventListener = appListener;\n+    this.userName = userName;\n+    this.isUserImpersonate = isUserImpersonate;\n   }\n \n \n@@ -100,7 +106,9 @@ public RemoteInterpreter(\n       int connectTimeout,\n       int maxPoolSize,\n       RemoteInterpreterProcessListener remoteInterpreterProcessListener,\n-      ApplicationEventListener appListener) {\n+      ApplicationEventListener appListener,\n+      String userName,\n+      Boolean isUserImpersonate) {\n     super(property);\n     this.noteId = noteId;\n     this.className = className;\n@@ -111,6 +119,8 @@ public RemoteInterpreter(\n     this.maxPoolSize = maxPoolSize;\n     this.remoteInterpreterProcessListener = remoteInterpreterProcessListener;\n     this.applicationEventListener = appListener;\n+    this.userName = userName;\n+    this.isUserImpersonate = isUserImpersonate;\n   }\n \n \n@@ -125,7 +135,9 @@ public RemoteInterpreter(\n       Map<String, String> env,\n       int connectTimeout,\n       RemoteInterpreterProcessListener remoteInterpreterProcessListener,\n-      ApplicationEventListener appListener) {\n+      ApplicationEventListener appListener,\n+      String userName,\n+      Boolean isUserImpersonate) {\n     super(property);\n     this.className = className;\n     this.noteId = noteId;\n@@ -138,6 +150,8 @@ public RemoteInterpreter(\n     this.maxPoolSize = 10;\n     this.remoteInterpreterProcessListener = remoteInterpreterProcessListener;\n     this.applicationEventListener = appListener;\n+    this.userName = userName;\n+    this.isUserImpersonate = isUserImpersonate;\n   }\n \n   private Map<String, String> getEnvFromInterpreterProperty(Properties property) {\n@@ -205,7 +219,7 @@ public synchronized void init() {\n     RemoteInterpreterProcess interpreterProcess = getInterpreterProcess();\n \n     final InterpreterGroup interpreterGroup = getInterpreterGroup();\n-    interpreterProcess.reference(interpreterGroup);\n+    interpreterProcess.reference(interpreterGroup, userName, isUserImpersonate);\n     interpreterProcess.setMaxPoolSize(\n         Math.max(this.maxPoolSize, interpreterProcess.getMaxPoolSize()));\n     String groupId = interpreterGroup.getId();",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "sha": "b2a4fbef53456ebd4b300bad6746eddd3f6ab446",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "patch": "@@ -88,7 +88,7 @@ public int getPort() {\n   }\n \n   @Override\n-  public void start() {\n+  public void start(String userName, Boolean isUserImpersonate) {\n     // start server process\n     try {\n       port = RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces();\n@@ -101,6 +101,10 @@ public void start() {\n     cmdLine.addArgument(interpreterDir, false);\n     cmdLine.addArgument(\"-p\", false);\n     cmdLine.addArgument(Integer.toString(port), false);\n+    if (isUserImpersonate && !userName.equals(\"anonymous\")) {\n+      cmdLine.addArgument(\"-u\", false);\n+      cmdLine.addArgument(userName, false);\n+    }\n     cmdLine.addArgument(\"-l\", false);\n     cmdLine.addArgument(localRepoDir, false);\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java",
                "sha": "f3d5f91485268619e5e4f485d40116b03840ae54",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 3,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "patch": "@@ -63,18 +63,19 @@ public RemoteInterpreterProcess(\n \n   public abstract String getHost();\n   public abstract int getPort();\n-  public abstract void start();\n+  public abstract void start(String userName, Boolean isUserImpersonate);\n   public abstract void stop();\n   public abstract boolean isRunning();\n \n   public int getConnectTimeout() {\n     return connectTimeout;\n   }\n \n-  public int reference(InterpreterGroup interpreterGroup) {\n+  public int reference(InterpreterGroup interpreterGroup, String userName,\n+                       Boolean isUserImpersonate) {\n     synchronized (referenceCount) {\n       if (!isRunning()) {\n-        start();\n+        start(userName, isUserImpersonate);\n       }\n \n       if (clientPool == null) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "sha": "c7b2205226dce0ca27beda707d731e0b09b46479",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "patch": "@@ -51,7 +51,7 @@ public int getPort() {\n   }\n \n   @Override\n-  public void start() {\n+  public void start(String userName, Boolean isUserImpersonate) {\n     // assume process is externally managed. nothing to do\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java",
                "sha": "bb176bea590c322f57ea1d6179d7578de5473841",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java",
                "patch": "@@ -74,7 +74,9 @@ public void setUp() throws Exception {\n         env,\n         10 * 1000,\n         null,\n-        null\n+        null,\n+        \"anonymous\",\n+        false\n     );\n \n     intpGroup.put(\"note\", new LinkedList<Interpreter>());",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java",
                "sha": "e876ef9316810dbe4ce7ecc4ec50e0c76c63aafa",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "patch": "@@ -72,7 +72,9 @@ private RemoteInterpreter createMockInterpreter() {\n         env,\n         10 * 1000,\n         this,\n-        null);\n+        null,\n+        \"anonymous\",\n+        false);\n \n     intpGroup.get(\"note\").add(intp);\n     intp.setInterpreterGroup(intpGroup);",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "sha": "95a34b9acf7c7a2b468f805c1f2fc05da6a45dd7",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessTest.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 4,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessTest.java",
                "patch": "@@ -46,8 +46,8 @@ public void testStartStop() {\n         10 * 1000, null, null);\n     assertFalse(rip.isRunning());\n     assertEquals(0, rip.referenceCount());\n-    assertEquals(1, rip.reference(intpGroup));\n-    assertEquals(2, rip.reference(intpGroup));\n+    assertEquals(1, rip.reference(intpGroup, \"anonymous\", false));\n+    assertEquals(2, rip.reference(intpGroup, \"anonymous\", false));\n     assertEquals(true, rip.isRunning());\n     assertEquals(1, rip.dereference());\n     assertEquals(true, rip.isRunning());\n@@ -61,7 +61,7 @@ public void testClientFactory() throws Exception {\n     RemoteInterpreterManagedProcess rip = new RemoteInterpreterManagedProcess(\n         INTERPRETER_SCRIPT, \"nonexists\", \"fakeRepo\", new HashMap<String, String>(),\n         mock(RemoteInterpreterEventPoller.class), 10 * 1000);\n-    rip.reference(intpGroup);\n+    rip.reference(intpGroup, \"anonymous\", false);\n     assertEquals(0, rip.getNumActiveClient());\n     assertEquals(0, rip.getNumIdleClient());\n \n@@ -106,7 +106,7 @@ public void testStartStopRemoteInterpreter() throws TException, InterruptedExcep\n         , 10 * 1000);\n     assertFalse(rip.isRunning());\n     assertEquals(0, rip.referenceCount());\n-    assertEquals(1, rip.reference(intpGroup));\n+    assertEquals(1, rip.reference(intpGroup, \"anonymous\", false));\n     assertEquals(true, rip.isRunning());\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessTest.java",
                "sha": "99ab63b34a71563298645b55c5c880e4eca6084c",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 6,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java",
                "patch": "@@ -90,7 +90,9 @@ private RemoteInterpreter createMockInterpreterA(Properties p, String noteId) {\n             env,\n             10 * 1000,\n             null,\n-            null);\n+            null,\n+        \"anonymous\",\n+        false);\n   }\n \n   private RemoteInterpreter createMockInterpreterB(Properties p) {\n@@ -108,7 +110,9 @@ private RemoteInterpreter createMockInterpreterB(Properties p, String noteId) {\n             env,\n             10 * 1000,\n             null,\n-            null);\n+            null,\n+        \"anonymous\",\n+        false);\n   }\n \n   @Test\n@@ -207,7 +211,9 @@ public void testRemoteSchedulerSharing() throws TTransportException, IOException\n         env,\n         10 * 1000,\n         null,\n-        null);\n+        null,\n+        \"anonymous\",\n+        false);\n \n \n     intpGroup.get(\"note\").add(intpA);\n@@ -223,7 +229,9 @@ public void testRemoteSchedulerSharing() throws TTransportException, IOException\n         env,\n         10 * 1000,\n         null,\n-        null);\n+        null,\n+        \"anonymous\",\n+        false);\n \n     intpGroup.get(\"note\").add(intpB);\n     intpB.setInterpreterGroup(intpGroup);\n@@ -687,7 +695,8 @@ public void should_push_local_angular_repo_to_remote() throws Exception {\n     //Given\n     final Client client = Mockito.mock(Client.class);\n     final RemoteInterpreter intr = new RemoteInterpreter(new Properties(), \"noteId\",\n-            MockInterpreterA.class.getName(), \"runner\", \"path\",\"localRepo\", env, 10 * 1000, null, null);\n+        MockInterpreterA.class.getName(), \"runner\", \"path\", \"localRepo\", env, 10 * 1000, null,\n+        null, \"anonymous\", false);\n     final AngularObjectRegistry registry = new AngularObjectRegistry(\"spark\", null);\n     registry.add(\"name\", \"DuyHai DOAN\", \"nodeId\", \"paragraphId\");\n     final InterpreterGroup interpreterGroup = new InterpreterGroup(\"groupId\");\n@@ -733,7 +742,9 @@ public void testEnvronmentAndPropertySet() {\n         env,\n         10 * 1000,\n         null,\n-        null);\n+        null,\n+        \"anonymous\",\n+        false);\n \n     intpGroup.put(\"note\", new LinkedList<Interpreter>());\n     intpGroup.get(\"note\").add(intp);",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java",
                "sha": "ec7c02a8d4cb324a4293c0f181fe37b3744ad885",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 2,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java",
                "patch": "@@ -70,7 +70,9 @@ public void setUp() throws Exception {\n         env,\n         10 * 1000,\n         null,\n-        null\n+        null,\n+        \"anonymous\",\n+        false\n     );\n \n     intpGroup1 = new InterpreterGroup(\"intpGroup1\");\n@@ -88,7 +90,9 @@ public void setUp() throws Exception {\n         env,\n         10 * 1000,\n         null,\n-        null\n+        null,\n+        \"anonymous\",\n+        false\n     );\n \n     intpGroup2 = new InterpreterGroup(\"intpGroup2\");",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java",
                "sha": "b76f06350749640ffcd8c03a14cd59038616cce1",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 2,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "patch": "@@ -81,7 +81,9 @@ public void test() throws Exception {\n         env,\n         10 * 1000,\n         this,\n-        null);\n+        null,\n+        \"anonymous\",\n+        false);\n \n     intpGroup.put(\"note\", new LinkedList<Interpreter>());\n     intpGroup.get(\"note\").add(intpA);\n@@ -170,7 +172,9 @@ public void testAbortOnPending() throws Exception {\n         env,\n         10 * 1000,\n         this,\n-        null);\n+        null,\n+        \"anonymous\",\n+        false);\n \n     intpGroup.put(\"note\", new LinkedList<Interpreter>());\n     intpGroup.get(\"note\").add(intpA);",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "sha": "c67211c5f8b41951306b4266b909cf1d1a28af47",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 1,
                "filename": "zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html",
                "patch": "@@ -196,7 +196,20 @@ <h5>Option</h5>\n             </div>\n           </div>\n         </div>\n-        <div class=\"row interpreter\" style=\"margin-top: 5px;\">\n+        <div class=\"row interpreter\" style=\"margin-top: 5px;\"\n+             ng-show=\"getInterpreterRunningOption(setting.id)=='Per User' && getPerUserOption(setting.id)=='isolated'\">\n+          <div class=\"col-md-12\">\n+            <div class=\"checkbox remove-margin-top-bottom\">\n+          <span class=\"input-group\" style=\"line-height:30px;\">\n+            <label>\n+              <input type=\"checkbox\" style=\"width:20px\" ng-model=\"setting.option.isUserImpersonate\" />\n+                User Impersonate\n+            </label>\n+          </span>\n+            </div>\n+          </div>\n+        </div>\n+        <div class=\"row interpreter\">\n           <div class=\"col-md-12\">\n             <div class=\"checkbox remove-margin-top-bottom\">\n           <span class=\"input-group\" style=\"line-height:30px;\">",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html",
                "sha": "bae234a2408d0c28e0606ec88f06d69e42a7cb4c",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter.controller.js?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "patch": "@@ -327,6 +327,13 @@\n             if (setting.option.setPermission === undefined) {\n               setting.option.setPermission = false;\n             }\n+            if (setting.option.isUserImpersonate === undefined) {\n+              setting.option.isUserImpersonate = false;\n+            }\n+            if (!($scope.getInterpreterRunningOption(settingId) === 'Per User' &&\n+                $scope.getPerUserOption(settingId) === 'isolated')) {\n+              setting.option.isUserImpersonate = false;\n+            }\n             if (setting.option.remote === undefined) {\n               // remote always true for now\n               setting.option.remote = true;",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "sha": "ed5a45c9c5e15c640b5d92b3226667865e15b21f",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-web/src/app/interpreter/interpreter.html",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter.html?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 1,
                "filename": "zeppelin-web/src/app/interpreter/interpreter.html",
                "patch": "@@ -313,7 +313,23 @@ <h5>Option</h5>\n         </div>\n       </div>\n     </div>\n-    <div class=\"row interpreter\" style=\"margin-top: 5px;\">\n+\n+    <div class=\"row interpreter\" style=\"margin-top: 5px;\"\n+         ng-show=\"getInterpreterRunningOption(setting.id)=='Per User' && getPerUserOption(setting.id)=='isolated'\">\n+      <div class=\"col-md-12\">\n+        <div class=\"checkbox remove-margin-top-bottom\">\n+          <span class=\"input-group\" style=\"line-height:30px;\">\n+            <label>\n+              <input type=\"checkbox\" style=\"width:20px\"\n+                     ng-model=\"setting.option.isUserImpersonate\"\n+                     ng-disabled=\"!valueform.$visible\" />\n+            User Impersonate\n+            </label>\n+          </span>\n+        </div>\n+      </div>\n+    </div>\n+    <div class=\"row interpreter\">\n       <div class=\"col-md-12\">\n         <div class=\"checkbox remove-margin-top-bottom\">\n           <span class=\"input-group\" style=\"line-height:30px;\">",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-web/src/app/interpreter/interpreter.html",
                "sha": "e91dabe214f84b53978fdd2e1e30667561c69ee0",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 7,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "patch": "@@ -776,10 +776,10 @@ public void createInterpretersForNote(InterpreterSetting interpreterSetting, Str\n         if (option.isExistingProcess()) {\n           interpreter =\n               connectToRemoteRepl(noteId, info.getClassName(), option.getHost(), option.getPort(),\n-                  properties);\n+                  properties, user, option.isUserImpersonate);\n         } else {\n           interpreter = createRemoteRepl(path, key, info.getClassName(), properties,\n-              interpreterSetting.getId());\n+              interpreterSetting.getId(), user, option.isUserImpersonate());\n         }\n       } else {\n         interpreter = createRepl(interpreterSetting.getPath(), info.getClassName(), properties);\n@@ -1100,25 +1100,26 @@ private Interpreter createRepl(String dirName, String className, Properties prop\n   }\n \n   private Interpreter connectToRemoteRepl(String noteId, String className, String host, int port,\n-      Properties property) {\n+      Properties property, String userName, Boolean isUserImpersonate) {\n     int connectTimeout = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);\n     int maxPoolSize = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_MAX_POOL_SIZE);\n     LazyOpenInterpreter intp = new LazyOpenInterpreter(\n         new RemoteInterpreter(property, noteId, className, host, port, connectTimeout, maxPoolSize,\n-            remoteInterpreterProcessListener, appEventListener));\n+            remoteInterpreterProcessListener, appEventListener, userName, isUserImpersonate));\n     return intp;\n   }\n \n   private Interpreter createRemoteRepl(String interpreterPath, String noteId, String className,\n-      Properties property, String interpreterSettingId) {\n+      Properties property, String interpreterSettingId, String userName,\n+      Boolean isUserImpersonate) {\n     int connectTimeout = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);\n     String localRepoPath = conf.getInterpreterLocalRepoPath() + \"/\" + interpreterSettingId;\n     int maxPoolSize = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_MAX_POOL_SIZE);\n \n     RemoteInterpreter remoteInterpreter =\n         new RemoteInterpreter(property, noteId, className, conf.getInterpreterRemoteRunnerPath(),\n             interpreterPath, localRepoPath, connectTimeout, maxPoolSize,\n-            remoteInterpreterProcessListener, appEventListener);\n+            remoteInterpreterProcessListener, appEventListener, userName, isUserImpersonate);\n     remoteInterpreter.addEnv(env);\n \n     return new LazyOpenInterpreter(remoteInterpreter);\n@@ -1414,7 +1415,7 @@ private Interpreter getDevInterpreter() {\n       InterpreterGroup interpreterGroup = createInterpreterGroup(\"dev\", option);\n \n       devInterpreter = connectToRemoteRepl(\"dev\", DevInterpreter.class.getName(), \"localhost\",\n-          ZeppelinDevServer.DEFAULT_TEST_INTERPRETER_PORT, new Properties());\n+          ZeppelinDevServer.DEFAULT_TEST_INTERPRETER_PORT, new Properties(), \"anonymous\", false);\n \n       LinkedList<Interpreter> intpList = new LinkedList<>();\n       intpList.add(devInterpreter);",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "sha": "1b46ca4a3b1d43af2cf0d51b170cfadebfa3aa30",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java?ref=31f584cfee41598aab16da8d84752e69b80b083c",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "patch": "@@ -589,7 +589,7 @@ public String getMagic() {\n   }\n \n   private boolean isValidInterpreter(String replName) {\n-    return factory.getInterpreter(\"\",\n+    return factory.getInterpreter(user,\n         note.getId(), replName) != null;\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/31f584cfee41598aab16da8d84752e69b80b083c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "sha": "a536978db49d45b74e985f0651a61634b1096b2a",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1320] Run zeppelin interpreter process as web front end user\n\nHave recreated this from https://github.com/apache/zeppelin/pull/1322\n### What is this PR for?\n\nWhile running a Notebook using shell, spark, python uses same user as which zeppelin server is running. Which means these interprets have same permission on file system as zeppelin server.\nIMO users should be able to impersonate themselves as a complete security system.\n### What type of PR is it?\n\n[Improvement]\n### Todos\n- [x] - Update doc\n- [x] - FIX NPEs\n- [x] - FIX CI\n### What is the Jira issue?\n- [ZEPPELIN-1320](https://issues.apache.org/jira/browse/ZEPPELIN-1320)\n### How should this be tested?\n- Enable shiro auth in shiro.ini\n- Add ssh key for the same user you want to try and impersonate (say user1).\n\n```\nadduser user1\nssh-keygen\nssh user1localhost mkdir -p .ssh\ncat ~/.ssh/id_rsa.pub | ssh user1localhost 'cat >> .ssh/authorized_keys'\n```\n- Start zeppelin server, try and run following in paragraph in a notebook\n- Go to interpreter setting page, and enable \"User Impersonate\" in any of the interpreter (in my example its shell interpreter)\n\n```\n%sh\nwhoami\n```\n\nCheck that it should run as new user, i.e. \"user1\"\n### Screenshots (if appropriate)\n\n![user impersonate](https://cloud.githubusercontent.com/assets/674497/20213127/f32fdc52-a82c-11e6-8e33-aebd6a943c5f.gif)\n\n### Questions:\n- Does the licenses files need update? no\n- Is there breaking changes for older versions? no\n- Does this needs documentation? yes\n\nAuthor: Prabhjyot Singh <prabhjyotsingh@gmail.org>\n\nCloses #1554 from prabhjyotsingh/ZEPPELIN-1320-2 and squashes the following commits:\n\ndc69c9d [Prabhjyot Singh] @Leemoonsoo review comment: making ZEPPELIN_SSH_COMMAND configurable\n1b26cc0 [Prabhjyot Singh] add doc\n5a76839 [Prabhjyot Singh] show User Impersonate only when interpreter setting is \"per user\" and \"isolated\"\n02c3084 [Prabhjyot Singh] Merge remote-tracking branch 'origin/master' into ZEPPELIN-1320-2\n03b2f20 [Prabhjyot Singh] use user instead of \"\"\n0ff80ec [Prabhjyot Singh] Merge remote-tracking branch 'origin/master' into ZEPPELIN-1320-2\ndd0731d [Prabhjyot Singh] fix missing test cases\naff1bf0 [Prabhjyot Singh] user should have option to run these interpreters as different user.",
        "parent": "https://github.com/apache/zeppelin/commit/f28c2b308e063fcc92b7bd1e56c4e743fd20f18f",
        "patched_files": [
            "user-impersonation.gif",
            "interpreter-create.html",
            "_navigation.html",
            "RemoteInterpreterRunningProcess.java",
            "index.md",
            "interpreter.controller.js",
            "InterpreterFactory.java",
            "processenduser.md",
            "Paragraph.java",
            "interpreter.sh",
            "RemoteAngularObject.java",
            "RemoteScheduler.java",
            "RemoteInterpreterManagedProcess.java",
            "InterpreterOption.java",
            "RemoteInterpreterProcess.java",
            "zeppelin-env.sh.template",
            "RemoteInterpreter.java",
            "interpreter.html",
            "DistributedResourcePool.java",
            "RemoteInterpreterOutputTestStream.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterFactoryTest.java",
            "RemoteSchedulerTest.java",
            "RemoteInterpreterProcessTest.java",
            "DistributedResourcePoolTest.java",
            "ParagraphTest.java",
            "RemoteAngularObjectTest.java",
            "RemoteInterpreterTest.java"
        ]
    },
    "zeppelin_3a12f30": {
        "bug_id": "zeppelin_3a12f30",
        "commit": "https://github.com/apache/zeppelin/commit/3a12f3032666334cba931ab152b60b969c8f3541",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/zeppelin/blob/3a12f3032666334cba931ab152b60b969c8f3541/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java?ref=3a12f3032666334cba931ab152b60b969c8f3541",
                "deletions": 5,
                "filename": "jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "patch": "@@ -80,7 +80,7 @@\n   static final String JDBC_DEFAULT_PASSWORD_KEY = \"default.password\";\n   static final String COMMON_KEY = \"common\";\n   static final String MAX_LINE_KEY = \"max_count\";\n-  static final String MAX_LINE_DEFAULT = \"1000\";\n+  static final int MAX_LINE_DEFAULT = 1000;\n \n   static final String DEFAULT_KEY = \"default\";\n   static final String DRIVER_KEY = \"driver\";\n@@ -121,12 +121,14 @@ public InterpreterCompletion apply(CharSequence seq) {\n       };\n \n   private static final List<InterpreterCompletion> NO_COMPLETION = new ArrayList<>();\n+  private int maxLineResults;\n \n   public JDBCInterpreter(Properties property) {\n     super(property);\n     jdbcUserConfigurationsMap = new HashMap<>();\n     propertyKeySqlCompleterMap = new HashMap<>();\n     basePropretiesMap = new HashMap<>();\n+    maxLineResults = MAX_LINE_DEFAULT;\n   }\n \n   public HashMap<String, Properties> getPropertiesMap() {\n@@ -146,9 +148,9 @@ public void open() {\n           prefixProperties = basePropretiesMap.get(keyValue[0]);\n         } else {\n           prefixProperties = new Properties();\n-          basePropretiesMap.put(keyValue[0], prefixProperties);\n+          basePropretiesMap.put(keyValue[0].trim(), prefixProperties);\n         }\n-        prefixProperties.put(keyValue[1], property.getProperty(propertyKey));\n+        prefixProperties.put(keyValue[1].trim(), property.getProperty(propertyKey));\n       }\n     }\n \n@@ -175,6 +177,14 @@ public void open() {\n     for (String propertyKey : basePropretiesMap.keySet()) {\n       propertyKeySqlCompleterMap.put(propertyKey, createSqlCompleter(null));\n     }\n+    setMaxLineResults();\n+  }\n+\n+  private void setMaxLineResults() {\n+    if (basePropretiesMap.containsKey(COMMON_KEY) &&\n+        basePropretiesMap.get(COMMON_KEY).containsKey(MAX_LINE_KEY)) {\n+      maxLineResults = Integer.valueOf(basePropretiesMap.get(COMMON_KEY).getProperty(MAX_LINE_KEY));\n+    }\n   }\n \n   private SqlCompleter createSqlCompleter(Connection jdbcConnection) {\n@@ -600,8 +610,7 @@ public Scheduler getScheduler() {\n   }\n \n   public int getMaxResult() {\n-    return Integer.valueOf(\n-        basePropretiesMap.get(COMMON_KEY).getProperty(MAX_LINE_KEY, MAX_LINE_DEFAULT));\n+    return maxLineResults;\n   }\n \n   boolean isConcurrentExecution() {",
                "raw_url": "https://github.com/apache/zeppelin/raw/3a12f3032666334cba931ab152b60b969c8f3541/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "sha": "aaf4fc7e778e292166d3897e2738b620feb74f18",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1884] Prevent NullPointerException when JDBC query.\n\n### What is this PR for?\nSometimes users don't want to set the properties which they don't want to care about and `common.max_count` of JDBC interpreter is one of that property.\nIf it does not set the `common.max_count`, NullPointerException will occur.\n\n### What type of PR is it?\nBug Fix\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-1884\n\n### How should this be tested?\n - Set properties like as following image and run select query.\n![image](https://cloud.githubusercontent.com/assets/3348133/21585284/02c433ee-d072-11e6-8ca1-d120617bb7f1.png)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: astroshim <hsshim@zepl.com>\n\nCloses #1832 from astroshim/ZEPPELIN-1884 and squashes the following commits:\n\n9c20a02 [astroshim] move maxline to open()\nf1efda7 [astroshim] add checking commonkey exists",
        "parent": "https://github.com/apache/zeppelin/commit/bdc0c8ac99e3b4f2ed2a99fe3ad60c19d924a25e",
        "patched_files": [
            "JDBCInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "JDBCInterpreterTest.java"
        ]
    },
    "zeppelin_3a57fc2": {
        "bug_id": "zeppelin_3a57fc2",
        "commit": "https://github.com/apache/zeppelin/commit/3a57fc2933eef0bcbec1679f06acc3c659d62dff",
        "file": [
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/zeppelin/blob/3a57fc2933eef0bcbec1679f06acc3c659d62dff/cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java",
                "changes": 100,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java?ref=3a57fc2933eef0bcbec1679f06acc3c659d62dff",
                "deletions": 29,
                "filename": "cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java",
                "patch": "@@ -17,23 +17,28 @@\n package org.apache.zeppelin.cassandra;\n \n import com.datastax.driver.core.Cluster;\n+import com.datastax.driver.core.JdkSSLOptions;\n import com.datastax.driver.core.ProtocolOptions.Compression;\n import com.datastax.driver.core.Session;\n import org.apache.zeppelin.interpreter.Interpreter;\n import org.apache.zeppelin.interpreter.InterpreterContext;\n-import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;\n import org.apache.zeppelin.interpreter.InterpreterResult;\n import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;\n import org.apache.zeppelin.scheduler.Scheduler;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.KeyStore;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Properties;\n \n-import static com.datastax.driver.core.ProtocolOptions.DEFAULT_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS;\n import static java.lang.Integer.parseInt;\n \n /**\n@@ -43,8 +48,8 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(CassandraInterpreter.class);\n \n-  public static final String CASSANDRA_INTERPRETER_PARALLELISM = \"cassandra.interpreter\" +\n-      \".parallelism\";\n+  public static final String CASSANDRA_INTERPRETER_PARALLELISM =\n+          \"cassandra.interpreter.parallelism\";\n   public static final String CASSANDRA_HOSTS = \"cassandra.hosts\";\n   public static final String CASSANDRA_PORT = \"cassandra.native.port\";\n   public static final String CASSANDRA_PROTOCOL_VERSION = \"cassandra.protocol.version\";\n@@ -59,21 +64,21 @@\n   public static final String CASSANDRA_SPECULATIVE_EXECUTION_POLICY =\n           \"cassandra.speculative.execution.policy\";\n   public static final String CASSANDRA_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS =\n-        \"cassandra.max.schema.agreement.wait.second\";\n+          \"cassandra.max.schema.agreement.wait.second\";\n   public static final String CASSANDRA_POOLING_NEW_CONNECTION_THRESHOLD_LOCAL =\n-        \"cassandra.pooling.new.connection.threshold.local\";\n+          \"cassandra.pooling.new.connection.threshold.local\";\n   public static final String CASSANDRA_POOLING_NEW_CONNECTION_THRESHOLD_REMOTE =\n-        \"cassandra.pooling.new.connection.threshold.remote\";\n+          \"cassandra.pooling.new.connection.threshold.remote\";\n   public static final String CASSANDRA_POOLING_MAX_CONNECTION_PER_HOST_LOCAL =\n-        \"cassandra.pooling.max.connection.per.host.local\";\n+          \"cassandra.pooling.max.connection.per.host.local\";\n   public static final String CASSANDRA_POOLING_MAX_CONNECTION_PER_HOST_REMOTE =\n-        \"cassandra.pooling.max.connection.per.host.remote\";\n+          \"cassandra.pooling.max.connection.per.host.remote\";\n   public static final String CASSANDRA_POOLING_CORE_CONNECTION_PER_HOST_LOCAL =\n           \"cassandra.pooling.core.connection.per.host.local\";\n   public static final String CASSANDRA_POOLING_CORE_CONNECTION_PER_HOST_REMOTE =\n           \"cassandra.pooling.core.connection.per.host.remote\";\n   public static final String CASSANDRA_POOLING_MAX_REQUESTS_PER_CONNECTION_LOCAL =\n-        \"cassandra.pooling.max.request.per.connection.local\";\n+          \"cassandra.pooling.max.request.per.connection.local\";\n   public static final String CASSANDRA_POOLING_MAX_REQUESTS_PER_CONNECTION_REMOTE =\n           \"cassandra.pooling.max.request.per.connection.remote\";\n   public static final String CASSANDRA_POOLING_IDLE_TIMEOUT_SECONDS =\n@@ -106,6 +111,13 @@\n           \"cassandra.socket.soLinger\";\n   public static final String CASSANDRA_SOCKET_TCP_NO_DELAY =\n           \"cassandra.socket.tcp.no_delay\";\n+  public static final String CASSANDRA_WITH_SSL =\n+          \"cassandra.ssl.enabled\";\n+  public static final String CASSANDRA_TRUSTSTORE_PATH =\n+          \"cassandra.ssl.truststore.path\";\n+  public static final String CASSANDRA_TRUSTSTORE_PASSWORD =\n+          \"cassandra.ssl.truststore.password\";\n+\n \n   public static final String DEFAULT_HOST = \"localhost\";\n   public static final String DEFAULT_PORT = \"9042\";\n@@ -143,6 +155,7 @@\n   public static final List NO_COMPLETION = new ArrayList<>();\n \n   InterpreterLogic helper;\n+  Cluster.Builder clusterBuilder;\n   Cluster cluster;\n   Session session;\n   private JavaDriverConfig driverConfig = new JavaDriverConfig();\n@@ -162,29 +175,58 @@ public void open() {\n     }\n \n     LOGGER.info(\"Bootstrapping Cassandra Java Driver to connect to \" + hosts.toString() +\n-                  \"on port \" + port);\n+            \"on port \" + port);\n \n     Compression compression = driverConfig.getCompressionProtocol(this);\n \n-    cluster  = Cluster.builder()\n-      .addContactPoints(addresses)\n-      .withPort(port)\n-      .withProtocolVersion(driverConfig.getProtocolVersion(this))\n-      .withClusterName(getProperty(CASSANDRA_CLUSTER_NAME))\n-      .withCompression(compression)\n-      .withCredentials(getProperty(CASSANDRA_CREDENTIALS_USERNAME),\n-              getProperty(CASSANDRA_CREDENTIALS_PASSWORD))\n-      .withLoadBalancingPolicy(driverConfig.getLoadBalancingPolicy(this))\n-      .withRetryPolicy(driverConfig.getRetryPolicy(this))\n-      .withReconnectionPolicy(driverConfig.getReconnectionPolicy(this))\n-      .withSpeculativeExecutionPolicy(driverConfig.getSpeculativeExecutionPolicy(this))\n-      .withMaxSchemaAgreementWaitSeconds(\n-              parseInt(getProperty(CASSANDRA_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS)))\n-      .withPoolingOptions(driverConfig.getPoolingOptions(this))\n-      .withQueryOptions(driverConfig.getQueryOptions(this))\n-      .withSocketOptions(driverConfig.getSocketOptions(this))\n-      .build();\n+    clusterBuilder = Cluster.builder()\n+            .addContactPoints(addresses)\n+            .withPort(port)\n+            .withProtocolVersion(driverConfig.getProtocolVersion(this))\n+            .withClusterName(getProperty(CASSANDRA_CLUSTER_NAME))\n+            .withCompression(compression)\n+            .withCredentials(getProperty(CASSANDRA_CREDENTIALS_USERNAME),\n+                    getProperty(CASSANDRA_CREDENTIALS_PASSWORD))\n+            .withLoadBalancingPolicy(driverConfig.getLoadBalancingPolicy(this))\n+            .withRetryPolicy(driverConfig.getRetryPolicy(this))\n+            .withReconnectionPolicy(driverConfig.getReconnectionPolicy(this))\n+            .withSpeculativeExecutionPolicy(driverConfig.getSpeculativeExecutionPolicy(this))\n+            .withMaxSchemaAgreementWaitSeconds(\n+                    parseInt(getProperty(CASSANDRA_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS)))\n+            .withPoolingOptions(driverConfig.getPoolingOptions(this))\n+            .withQueryOptions(driverConfig.getQueryOptions(this))\n+            .withSocketOptions(driverConfig.getSocketOptions(this));\n+\n+    final String runWithSSL = getProperty(CASSANDRA_WITH_SSL);\n+    if (runWithSSL != null && runWithSSL.equals(\"true\")) {\n+      LOGGER.debug(\"Cassandra Interpreter: Using SSL\");\n+\n+      try {\n+        final SSLContext sslContext;\n+        {\n+          final KeyStore trustStore = KeyStore.getInstance(\"JKS\");\n+          final InputStream stream = Files.newInputStream(Paths.get(\n+                  getProperty(CASSANDRA_TRUSTSTORE_PATH)));\n+          trustStore.load(stream, getProperty(CASSANDRA_TRUSTSTORE_PASSWORD).toCharArray());\n+\n+          final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\n+                  TrustManagerFactory.getDefaultAlgorithm());\n+          trustManagerFactory.init(trustStore);\n+\n+          sslContext = SSLContext.getInstance(\"TLS\");\n+          sslContext.init(null, trustManagerFactory.getTrustManagers(), null);\n+        }\n+        clusterBuilder = clusterBuilder.withSSL(JdkSSLOptions.builder()\n+                .withSSLContext(sslContext)\n+                .build());\n+      } catch (Exception e) {\n+        LOGGER.error(e.toString());\n+      }\n+    } else {\n+      LOGGER.debug(\"Cassandra Interpreter: Not using SSL\");\n+    }\n \n+    cluster = clusterBuilder.build();\n     session = cluster.connect();\n     helper = new InterpreterLogic(session);\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/3a57fc2933eef0bcbec1679f06acc3c659d62dff/cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java",
                "sha": "0f986be3189589c2643ecb5b5212ffe5783cbba3",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/zeppelin/blob/3a57fc2933eef0bcbec1679f06acc3c659d62dff/cassandra/src/main/resources/interpreter-setting.json",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/cassandra/src/main/resources/interpreter-setting.json?ref=3a57fc2933eef0bcbec1679f06acc3c659d62dff",
                "deletions": 0,
                "filename": "cassandra/src/main/resources/interpreter-setting.json",
                "patch": "@@ -220,6 +220,27 @@\n         \"defaultValue\": true,\n         \"description\": \"Cassandra socket TCP no delay. Default = true\",\n         \"type\": \"checkbox\"\n+      },\n+      \"cassandra.ssl.enabled\": {\n+        \"envName\": null,\n+        \"propertyName\": \"cassandra.ssl.enabled\",\n+        \"defaultValue\": \"false\",\n+        \"description\": \"Cassandra SSL\",\n+        \"type\": \"checkbox\"\n+      },\n+      \"cassandra.ssl.truststore.path\": {\n+        \"envName\": null,\n+        \"propertyName\": \"cassandra.ssl.truststore.path\",\n+        \"defaultValue\": \"none\",\n+        \"description\": \"Cassandra truststore path. Default = none\",\n+        \"type\": \"string\"\n+      },\n+      \"cassandra.ssl.truststore.password\": {\n+        \"envName\": null,\n+        \"propertyName\": \"cassandra.ssl.truststore.password\",\n+        \"defaultValue\": \"none\",\n+        \"description\": \"Cassandra truststore password. Default = none\",\n+        \"type\": \"password\"\n       }\n     },\n     \"editor\": {",
                "raw_url": "https://github.com/apache/zeppelin/raw/3a57fc2933eef0bcbec1679f06acc3c659d62dff/cassandra/src/main/resources/interpreter-setting.json",
                "sha": "407de9cdff3e16e1bf52cdb65a1d7386977c6415",
                "status": "modified"
            }
        ],
        "message": "0.7.1 with ssl\n\nThe Cassandra Interpreter does not support talking to clusters that use SSL/client to node encryption. It does not have the properties needed to configure the SSL Context. This PR adds the properties to the driver config and sets up the SSL options when they are requested.\n\nFeature\n\n[ZEPPELIN-1501](https://issues.apache.org/jira/browse/ZEPPELIN-1501)\n\nUsing Cassandra/CQL interpreter connect to a Cassandra cluster that uses a client to node encryption, i.e:\n\n```\n%cassandra\ndescribe keyspaces;\n```\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? Yes.\n    The new SSL-related properties should be added to the list (cassandra.ssl.enabled, cassandra.ssl.truststore.path and cassandra.ssl.truststore.password).\n\nAuthor: Alex Lourie <djay.il@gmail.com>\nAuthor: Robert Marshall <robertmarshall@Instaclustrs-MacBook-Pro.local>\n\nCloses #2238 from alourie/0.7.1-withSSL and squashes the following commits:\n\n2a6eee6 [Alex Lourie] Handle potential NPE in properties parsing\ne9b4769 [Alex Lourie] Fix formatting for CI to pass\n521b2d9 [Robert Marshall] Add SSL support to Cassandra interpreter\n\n(cherry picked from commit 53ea135ce2de6be792aba6ebd9f67fb4d0996f7b)\nSigned-off-by: Lee moon soo <moon@apache.org>",
        "parent": "https://github.com/apache/zeppelin/commit/6bd6c70881e8515a5b0679e5a8d6c235cfb1adf6",
        "patched_files": [
            "CassandraInterpreter.java",
            "interpreter-setting.json"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "CassandraInterpreterTest.java"
        ]
    },
    "zeppelin_41c74f5": {
        "bug_id": "zeppelin_41c74f5",
        "commit": "https://github.com/apache/zeppelin/commit/41c74f59a25bcf0bb5bceac2fad4c723db2165f4",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/41c74f59a25bcf0bb5bceac2fad4c723db2165f4/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java?ref=41c74f59a25bcf0bb5bceac2fad4c723db2165f4",
                "deletions": 4,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "patch": "@@ -212,8 +212,11 @@ public boolean accept(Path entry) throws IOException {\n           if (null != infos) {\n             Properties p = new Properties();\n             for (RegisteredInterpreter info : infos) {\n-              for (String key : info.getProperties().keySet()) {\n-                p.put(key, info.getProperties().get(key).getValue());\n+              Map<String, InterpreterProperty> interpreterProperties = info.getProperties();\n+              if (null != interpreterProperties) {\n+                for (String key : info.getProperties().keySet()) {\n+                  p.put(key, info.getProperties().get(key).getValue());\n+                }\n               }\n             }\n             add(groupName, groupName, new LinkedList<Dependency>(), defaultOption, p);\n@@ -224,8 +227,11 @@ public boolean accept(Path entry) throws IOException {\n           List<RegisteredInterpreter> infos = groupClassNameMap.get(groupName);\n           Properties p = new Properties();\n           for (RegisteredInterpreter info : infos) {\n-            for (String key : info.getProperties().keySet()) {\n-              p.put(key, info.getProperties().get(key).getValue());\n+            Map<String, InterpreterProperty> interpreterProperties = info.getProperties();\n+            if (null != interpreterProperties) {\n+              for (String key : info.getProperties().keySet()) {\n+                p.put(key, info.getProperties().get(key).getValue());\n+              }\n             }\n           }\n           add(groupName, groupName, new LinkedList<Dependency>(), defaultOption, p);",
                "raw_url": "https://github.com/apache/zeppelin/raw/41c74f59a25bcf0bb5bceac2fad4c723db2165f4/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "sha": "a691628cb029af111985ca16f4dfcbe37c456cc0",
                "status": "modified"
            }
        ],
        "message": "[HOTFIX] NPE when there's no properties field in interpreter-setting.json\n\n### What is this PR for?\nFixing NPE while initializing interpreters from interpreter-setting.json\n\n### What type of PR is it?\n[Bug Fix | Hot Fix]\n\n### Todos\n* [x] - Fix NPE\n\n### What is the Jira issue?\nN/A\n\n### How should this be tested?\n1. delete `properties` in one of `interpreter-setting.json`\n1. Build and run\n1. Got error\n1. Apply this PR\n1. Build and run\n1. Run it successfully\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Jongyoul Lee <jongyoul@gmail.com>\n\nCloses #1128 from jongyoul/hotfix/interpreter-properties-is-null and squashes the following commits:\n\n1dcf562 [Jongyoul Lee] Fixed NPE when there's no properties field in interpreter-setting.json",
        "parent": "https://github.com/apache/zeppelin/commit/a29fe14735e54d812a377b457922bd9039953da5",
        "patched_files": [
            "InterpreterFactory.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterFactoryTest.java"
        ]
    },
    "zeppelin_427d9d4": {
        "bug_id": "zeppelin_427d9d4",
        "commit": "https://github.com/apache/zeppelin/commit/427d9d494d286ef7161224b7c0a23bd2066591ce",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/427d9d494d286ef7161224b7c0a23bd2066591ce/.travis.yml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/.travis.yml?ref=427d9d494d286ef7161224b7c0a23bd2066591ce",
                "deletions": 2,
                "filename": ".travis.yml",
                "patch": "@@ -49,10 +49,9 @@ matrix:\n     #\n     # Several tests were excluded from this configuration due to the following issues:\n     # HeliumApplicationFactoryTest - https://issues.apache.org/jira/browse/ZEPPELIN-2470\n-    # ZeppelinRestApiTest          - https://issues.apache.org/jira/browse/ZEPPELIN-2473\n     # After issues are fixed these tests need to be included back by removing them from the \"-Dtests.to.exclude\" property\n     - jdk: \"oraclejdk7\"\n-      env: SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pscalding -Phelium-dev -Pexamples -Pscala-2.11\" BUILD_FLAG=\"package -Pbuild-distr -DskipRat\" TEST_FLAG=\"verify -Pusing-packaged-distr -DskipRat\" MODULES=\"-pl ${INTERPRETERS}\" TEST_PROJECTS=\"-Dtests.to.exclude=**/ZeppelinSparkClusterTest.java,**/org.apache.zeppelin.spark.*,**/HeliumApplicationFactoryTest.java,**/ZeppelinRestApiTest.java -DfailIfNoTests=false\"\n+      env: SCALA_VER=\"2.11\" SPARK_VER=\"2.1.0\" HADOOP_VER=\"2.6\" PROFILE=\"-Pweb-ci -Pscalding -Phelium-dev -Pexamples -Pscala-2.11\" BUILD_FLAG=\"package -Pbuild-distr -DskipRat\" TEST_FLAG=\"verify -Pusing-packaged-distr -DskipRat\" MODULES=\"-pl ${INTERPRETERS}\" TEST_PROJECTS=\"-Dtests.to.exclude=**/ZeppelinSparkClusterTest.java,**/org.apache.zeppelin.spark.*,**/HeliumApplicationFactoryTest.java -DfailIfNoTests=false\"\n \n     # Test selenium with spark module for 1.6.3\n     - jdk: \"oraclejdk7\"",
                "raw_url": "https://github.com/apache/zeppelin/raw/427d9d494d286ef7161224b7c0a23bd2066591ce/.travis.yml",
                "sha": "5a728f72e26b07d46d61d5345b56cd7d08f4dd9e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/427d9d494d286ef7161224b7c0a23bd2066591ce/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java?ref=427d9d494d286ef7161224b7c0a23bd2066591ce",
                "deletions": 1,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "patch": "@@ -167,7 +167,7 @@ public void testNoteCreateWithParagraphs() throws IOException {\n         assertEquals(\"paragraph col width check failed\", 9.0, p.getConfig().get(\"colWidth\"));\n         assertTrue(\"paragraph show title check failed\", ((boolean) p.getConfig().get(\"title\")));\n         Map graph = ((List<Map>)p.getConfig().get(\"results\")).get(0);\n-        String mode = graph.get(\"mode\").toString();\n+        String mode = ((Map)graph.get(\"graph\")).get(\"mode\").toString();\n         assertEquals(\"paragraph graph mode check failed\", \"pieChart\", mode);\n       }\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/427d9d494d286ef7161224b7c0a23bd2066591ce/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "sha": "5093cb838fffa38c0c47ac97c8f3dc0aec09de35",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-2473] ZeppelinRestApiTest fails on travis\n\n### What is this PR for?\nThe test `testNoteCreateWithParagraphs`  fails with a `java.lang.NullPointerException`. The error occurs while getting the value of 'mode' from the Map graph. Added a fix to get the value correctly.\n\n### What type of PR is it?\n[Bug Fix]\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-2473\n\n### How should this be tested?\nTests should pass on the CI\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: pravin-dsilva <pravind@us.ibm.com>\n\nCloses #2400 from pravin-dsilva/ZEPPELIN-2473 and squashes the following commits:\n\nc8ce19c [pravin-dsilva] ZEPPELIN-2473 - ZeppelinRestApiTest fails on travis\n803d5ce [pravin-dsilva] Update .travis.yml to include ZeppelinRestApiTest",
        "parent": "https://github.com/apache/zeppelin/commit/32d8afafffa98838376f427d533b0a0368020aad",
        "patched_files": [
            ".travis.yml",
            "ZeppelinRestApi.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "ZeppelinRestApiTest.java"
        ]
    },
    "zeppelin_438dbca": {
        "bug_id": "zeppelin_438dbca",
        "commit": "https://github.com/apache/zeppelin/commit/438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/.gitignore",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/.gitignore?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 1,
                "filename": ".gitignore",
                "patch": "@@ -1,12 +1,14 @@\n *.class\n+*.pyc\n \n # Package Files #\n *.jar\n *.war\n *.ear\n \n # interpreter\n-/interpreter/\n+/interpreter/*\n+!/interpreter/lib\n \n # interpreter temp files\n spark/derby.log",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/.gitignore",
                "sha": "6352f7b88d09a3f19519169b8ab311eecc180a2d",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/docs/assets/themes/zeppelin/img/docs-img/matplotlibAngularExample.gif",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/assets/themes/zeppelin/img/docs-img/matplotlibAngularExample.gif?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 0,
                "filename": "docs/assets/themes/zeppelin/img/docs-img/matplotlibAngularExample.gif",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/docs/assets/themes/zeppelin/img/docs-img/matplotlibAngularExample.gif",
                "sha": "4696bcf52bc7153f2b6e048a158684da17aebcf3",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/docs/interpreter/python.md",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/interpreter/python.md?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 2,
                "filename": "docs/interpreter/python.md",
                "patch": "@@ -86,9 +86,26 @@ print(\"\".join(z.checkbox(\"f3\", [(\"o1\",\"1\"), (\"o2\",\"2\")],[\"1\"])))\n * Code-completion is currently not implemented.\n \n ## Matplotlib integration\n- The python interpreter can display matplotlib graph with the function `z.show()`.\n- You need to have matplotlib module installed and a XServer running to use this functionality!\n+\n+ The python interpreter can display matplotlib figures inline automatically using the `pyplot` module:\n  \n+```python\n+%python\n+import matplotlib.pyplot as plt\n+plt.plot([1, 2, 3])\n+```\n+This is the recommended method for using matplotlib from within a Zeppelin notebook. The output of this command will by default be converted to HTML by implicitly making use of the `%html` magic. Additional configuration can be achieved using the builtin `z.configure_mpl()` method. For example, \n+\n+```python\n+z.configure_mpl(width=400, height=300, fmt='svg')\n+plt.plot([1, 2, 3])\n+```\n+\n+Will produce a 400x300 image in SVG format, which by default are normally 600x400 and PNG respectively. In the future, another option called `angular` can be used to make it possible to update a plot produced from one paragraph directly from another (the output will be `%angular` instead of `%html`). However, this feature is already available in the `pyspark` interpreter. More details can be found in the included \"Zeppelin Tutorial: Python - matplotlib basic\" tutorial notebook. \n+\n+If Zeppelin cannot find the matplotlib backend files (which should usually be found in `$ZEPPELIN_HOME/interpreter/lib/python`) in your `PYTHONPATH`, then the backend will automatically be set to agg, and the (otherwise deprecated) instructions below can be used for more limited inline plotting.\n+\n+If you are unable to load the inline backend, use `z.show(plt)`:\n  ```python\n %python\n import matplotlib.pyplot as plt",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/docs/interpreter/python.md",
                "sha": "01199be1016fb2fae8123884595575bc102f3a2d",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/docs/interpreter/spark.md",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/interpreter/spark.md?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 0,
                "filename": "docs/interpreter/spark.md",
                "patch": "@@ -363,6 +363,11 @@ select * from ${table=defaultTableName} where text like '%${search}%'\n To learn more about dynamic form, checkout [Dynamic Form](../manual/dynamicform.html).\n \n \n+## Matplotlib Integration (pyspark)\n+Both the `python` and `pyspark` interpreters have built-in support for inline visualization using `matplotlib`, a popular plotting library for python. More details can be found in the [python interpreter documentation](../interpreter/python.html), since matplotlib support is identical. More advanced interactive plotting can be done with pyspark through utilizing Zeppelin's built-in [Angular Display System](../displaysystem/back-end-angular.html), as shown below:\n+\n+<img class=\"img-responsive\" src=\"../assets/themes/zeppelin/img/docs-img/matplotlibAngularExample.gif\" />\n+\n ## Interpreter setting option\n \n You can choose one of `shared`, `scoped` and `isolated` options wheh you configure Spark interpreter. Spark interpreter creates separated Scala compiler per each notebook but share a single SparkContext in `scoped` mode (experimental). It creates separated SparkContext per each notebook in `isolated` mode.",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/docs/interpreter/spark.md",
                "sha": "44ef4f41814ccd0ad7bef94c89c1590c4168df44",
                "status": "modified"
            },
            {
                "additions": 312,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/interpreter/lib/python/backend_zinline.py",
                "changes": 312,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/interpreter/lib/python/backend_zinline.py?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 0,
                "filename": "interpreter/lib/python/backend_zinline.py",
                "patch": "@@ -0,0 +1,312 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+# This file provides a static (non-interactive) matplotlib plotting backend\n+# for zeppelin notebooks for use with the python/pyspark interpreters\n+\n+from __future__ import print_function\n+\n+import uuid\n+import warnings\n+import base64\n+from io import BytesIO\n+try:\n+    from StringIO import StringIO\n+except ImportError:\n+    from io import StringIO\n+\n+import mpl_config\n+import matplotlib\n+from matplotlib._pylab_helpers import Gcf\n+from matplotlib.backends.backend_agg import new_figure_manager, FigureCanvasAgg\n+from matplotlib.backend_bases import ShowBase, FigureManagerBase\n+from matplotlib.figure import Figure\n+\n+########################################################################\n+#\n+# The following functions and classes are for pylab and implement\n+# window/figure managers, etc...\n+#\n+########################################################################\n+\n+class Show(ShowBase):\n+    \"\"\"\n+    A callable object that displays the figures to the screen. Valid kwargs\n+    include figure width and height (in units supported by the div tag), block\n+    (allows users to override blocking behavior regardless of whether or not\n+    interactive mode is enabled, currently unused) and close (Implicitly call\n+    matplotlib.pyplot.close('all') with each call to show()).\n+    \"\"\"\n+    def __call__(self, close=None, block=None, **kwargs):\n+        if close is None:\n+            close = mpl_config.get('close')\n+        try:\n+            managers = Gcf.get_all_fig_managers()\n+            if not managers:\n+                return\n+\n+            # Tell zeppelin that the output will be html using the %html magic\n+            # We want to do this only once to avoid seeing \"%html\" printed\n+            # directly to the outout when multiple figures are displayed from\n+            # one paragraph.\n+            if mpl_config.get('angular'):\n+                print('%angular')\n+            else:\n+                print('%html')\n+\n+            # Show all open figures\n+            for manager in managers:\n+                manager.show(**kwargs)\n+        finally:\n+            # This closes all the figures if close is set to True.\n+            if close and Gcf.get_all_fig_managers():\n+                Gcf.destroy_all()\n+\n+\n+class FigureCanvasZInline(FigureCanvasAgg):\n+    \"\"\"\n+    The canvas the figure renders into. Calls the draw and print fig\n+    methods, creates the renderers, etc...\n+    \"\"\"\n+    def get_bytes(self, **kwargs):\n+        \"\"\"\n+        Get the byte representation of the figure.\n+        Should only be used with jpg/png formats.\n+        \"\"\"\n+        # Make sure format is correct\n+        fmt = kwargs.get('format', mpl_config.get('format'))\n+        if fmt == 'svg':\n+            raise ValueError(\"get_bytes() does not support svg, use png or jpg\")\n+        \n+        # Express the image as bytes\n+        buf = BytesIO()\n+        self.print_figure(buf, **kwargs)\n+        byte_str = b\"data:image/%s;base64,\" %fmt\n+        byte_str += base64.b64encode(buf.getvalue())\n+            \n+        # Python3 forces all strings to default to unicode, but for raster image\n+        # formats (eg png, jpg), we want to work with bytes. Thus this step is\n+        # needed to ensure compatability for all python versions.\n+        byte_str = byte_str.decode('ascii')\n+        buf.close()\n+        return byte_str\n+\n+    def get_svg(self, **kwargs):\n+        \"\"\"\n+        Get the svg representation of the figure.\n+        Should only be used with svg format.\n+        \"\"\"\n+        # Make sure format is correct\n+        fmt = kwargs.get('format', mpl_config.get('format'))\n+        if fmt != 'svg':\n+            raise ValueError(\"get_svg() does not support png or jpg, use svg\")\n+        \n+        # For SVG the data string has to be unicode, not bytes\n+        buf = StringIO()\n+        self.print_figure(buf, **kwargs)\n+        svg_str = buf.getvalue()\n+        buf.close()\n+        return svg_str\n+    \n+    def draw_idle(self, *args, **kwargs):\n+        \"\"\"\n+        Called when the figure gets updated (eg through a plotting command).\n+        This is overriden to allow open figures to be reshown after they\n+        are updated when mpl_config.get('close') is False.\n+        \"\"\"\n+        if not self._is_idle_drawing:\n+            with self._idle_draw_cntx():\n+                self.draw(*args, **kwargs)\n+                draw_if_interactive()\n+                \n+\n+class FigureManagerZInline(FigureManagerBase):\n+    \"\"\"\n+    Wrap everything up into a window for the pylab interface\n+    \"\"\"\n+    def __init__(self, canvas, num):\n+        FigureManagerBase.__init__(self, canvas, num)\n+        self.fig_id = \"figure_{0}\".format(uuid.uuid4().hex)\n+        self._shown = False\n+\n+    def angular_bind(self, **kwargs):\n+        \"\"\"\n+        Bind figure data to Zeppelin's Angular Object Registry.\n+        If mpl_config(\"angular\") is True and PY4J is supported, this allows\n+        for the possibility to interactively update a figure from a separate\n+        paragraph without having to display it multiple times.\n+        \"\"\"\n+        # This doesn't work for SVG so make sure it's not our format\n+        fmt = kwargs.get('format', mpl_config.get('format'))\n+        if fmt == 'svg':\n+            return\n+        \n+        # Get the figure data as a byte array\n+        src = self.canvas.get_bytes(**kwargs)\n+        \n+        # Flag to determine whether or not to use\n+        # zeppelin's angular display system\n+        angular = mpl_config.get('angular')\n+        \n+        # ZeppelinContext instance (requires PY4J)\n+        context = mpl_config.get('context')\n+        \n+        # Finally we must ensure that automatic closing is set to False,\n+        # as otherwise using the angular display system is pointless\n+        close = mpl_config.get('close')\n+        \n+        # If above conditions are met, bind the figure data to\n+        # the Angular Object Registry.\n+        if not close and angular:\n+            if hasattr(context, 'angularBind'):\n+                # Binding is performed through figure ID to ensure this works\n+                # if multiple figures are open\n+                context.angularBind(self.fig_id, src)\n+                \n+                # Zeppelin will automatically replace this value even if it\n+                # is updated from another pargraph thanks to the {{}} notation\n+                src = \"{{%s}}\" %self.fig_id\n+            else:\n+                warnings.warn(\"Cannot bind figure to Angular Object Registry. \"\n+                              \"Check if PY4J is installed.\")\n+        return src\n+    \n+    def angular_unbind(self):\n+        \"\"\"\n+        Unbind figure from angular display system.\n+        \"\"\"\n+        context = mpl_config.get('context')\n+        if hasattr(context, 'angularUnbind'):\n+            context.angularUnbind(self.fig_id)\n+                \n+    def destroy(self):\n+        \"\"\"\n+        Called when close=True or implicitly by pyplot.close().\n+        Overriden to automatically clean up the angular object registry.\n+        \"\"\"\n+        self.angular_unbind()\n+\n+    def show(self, **kwargs):\n+        if not self._shown:\n+            zdisplay(self.canvas.figure, **kwargs)\n+        else:\n+            self.canvas.draw_idle()\n+            self.angular_bind(**kwargs)\n+            \n+        self._shown = True\n+\n+\n+def draw_if_interactive():\n+    \"\"\"\n+    If interactive mode is on, this allows for updating properties of\n+    the figure when each new plotting command is called.\n+    \"\"\"\n+    manager = Gcf.get_active()\n+    interactive = matplotlib.is_interactive()\n+    angular = mpl_config.get('angular')\n+    \n+    # Don't bother continuing if we aren't in interactive mode\n+    # or if there are no active figures. Also pointless to continue\n+    # in angular mode as we don't want to reshow the figure.\n+    if not interactive or angular or manager is None:\n+        return\n+        \n+    # Allow for figure to be reshown if close is false since\n+    # this function call implies that it has been updated\n+    if not mpl_config.get('close'):\n+        manager._shown = False\n+        \n+\n+def new_figure_manager(num, *args, **kwargs):\n+    \"\"\"\n+    Create a new figure manager instance\n+    \"\"\"\n+    # if a main-level app must be created, this (and\n+    # new_figure_manager_given_figure) is the usual place to\n+    # do it -- see backend_wx, backend_wxagg and backend_tkagg for\n+    # examples.  Not all GUIs require explicit instantiation of a\n+    # main-level app (egg backend_gtk, backend_gtkagg) for pylab\n+    FigureClass = kwargs.pop('FigureClass', Figure)\n+    thisFig = FigureClass(*args, **kwargs)\n+    return new_figure_manager_given_figure(num, thisFig)\n+\n+\n+def new_figure_manager_given_figure(num, figure):\n+    \"\"\"\n+    Create a new figure manager instance for the given figure.\n+    \"\"\"\n+    canvas = FigureCanvasZInline(figure)\n+    manager = FigureManagerZInline(canvas, num)\n+    return manager\n+\n+\n+########################################################################\n+#\n+# Backend specific functions\n+#\n+########################################################################\n+            \n+def zdisplay(fig, **kwargs):\n+    \"\"\"\n+    Publishes a matplotlib figure to the notebook paragraph output.\n+    \"\"\"\n+    # kwargs can be width or height (in units supported by div tag)\n+    width = kwargs.pop('width', 'auto')\n+    height = kwargs.pop('height', 'auto')\n+    fmt = kwargs.get('format', mpl_config.get('format'))\n+\n+    # Check if format is supported\n+    supported_formats = mpl_config.get('supported_formats')\n+    if fmt not in supported_formats:\n+        raise ValueError(\"Unsupported format %s\" %fmt)\n+    \n+    # For SVG the data string has to be unicode, not bytes\n+    if fmt == 'svg':\n+        img = fig.canvas.get_svg(**kwargs)\n+        \n+        # This is needed to ensure the SVG image is the correct size.\n+        # We should find a better way to do this...\n+        width = '{}px'.format(mpl_config.get('width'))\n+        height = '{}px'.format(mpl_config.get('height'))\n+    else:\n+        # Express the image as bytes\n+        src = fig.canvas.manager.angular_bind(**kwargs)\n+        img = \"<img src={src} style='width={width};height:{height}'>\"\n+        img = img.format(src=src, width=width, height=height)\n+    \n+    # Print the image to the notebook paragraph via the %html magic\n+    html = \"<div style='width:{width};height:{height}'>{img}<div>\"\n+    print(html.format(width=width, height=height, img=img))\n+\n+def displayhook():\n+    \"\"\"\n+    Called post paragraph execution if interactive mode is on\n+    \"\"\"\n+    if matplotlib.is_interactive():\n+        show()\n+\n+########################################################################\n+#\n+# Now just provide the standard names that backend.__init__ is expecting\n+#\n+########################################################################\n+\n+# Create a reference to the show function we are using. This is what actually\n+# gets called by matplotlib.pyplot.show().\n+show = Show()\n+\n+# Default FigureCanvas and FigureManager classes to use from the backend\n+FigureCanvas = FigureCanvasZInline\n+FigureManager = FigureManagerZInline",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/interpreter/lib/python/backend_zinline.py",
                "sha": "c69e805a2c3002f6eaa7b3f37668cb87cf90ccfb",
                "status": "added"
            },
            {
                "additions": 95,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/interpreter/lib/python/mpl_config.py",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/interpreter/lib/python/mpl_config.py?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 0,
                "filename": "interpreter/lib/python/mpl_config.py",
                "patch": "@@ -0,0 +1,95 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+# This module provides utitlites for users to configure the inline plotting\n+# backend through a PyZeppelinContext instance (eg, through z.configure_mpl())\n+\n+import matplotlib\n+\n+def configure(**kwargs):\n+    \"\"\"\n+    Generic configure function.\n+    Usage: configure(prop1='foo', prop2='bar', ...)\n+    Currently supported zeppelin-specific properties are:\n+        interactive - If true show all figures without explicit call to show()\n+                      via a post-execute hook.\n+        angular - If true, bind figures to angular display system.\n+        close - If true, close all figures once shown.\n+        width, height - Default width / height of the figure in pixels.\n+        fontsize - Font size.\n+        dpi - dpi of the figure.\n+        fmt - Figure format\n+        supported_formats - Supported Figure formats ()\n+        context - ZeppelinContext instance (requires PY4J)\n+    \"\"\"\n+    _config.update(**kwargs)\n+        \n+    # Broadcast relevant changes to matplotlib RC\n+    _on_config_change()\n+\n+\n+def get(key):\n+    \"\"\"\n+    Get the configuration info given a key\n+    \"\"\"\n+    return _config[key]\n+\n+\n+def _on_config_change():\n+    # dpi\n+    dpi = _config['dpi']\n+    matplotlib.rcParams['savefig.dpi'] = dpi\n+    matplotlib.rcParams['figure.dpi'] = dpi\n+    \n+    # Width and height\n+    width = float(_config['width']) / dpi\n+    height = float(_config['height']) / dpi\n+    matplotlib.rcParams['figure.figsize'] = (width, height)\n+    \n+    # Font size\n+    fontsize = _config['fontsize']\n+    matplotlib.rcParams['font.size'] = fontsize\n+    \n+    # Default Figure Format\n+    fmt = _config['format']\n+    supported_formats = _config['supported_formats']\n+    if fmt not in supported_formats:\n+        raise ValueError(\"Unsupported format %s\" %fmt)\n+    matplotlib.rcParams['savefig.format'] = fmt\n+    \n+    # Interactive mode\n+    interactive = _config['interactive']\n+    matplotlib.interactive(interactive)\n+    \n+    \n+def _init_config():\n+    dpi = matplotlib.rcParams['savefig.dpi']\n+    fmt = matplotlib.rcParams['savefig.format']\n+    width, height = matplotlib.rcParams['figure.figsize']\n+    fontsize = matplotlib.rcParams['font.size']\n+    _config['dpi'] = dpi\n+    _config['format'] = fmt\n+    _config['width'] = width*dpi\n+    _config['height'] = height*dpi\n+    _config['fontsize'] = fontsize\n+    _config['close'] = True\n+    _config['interactive'] = matplotlib.is_interactive()\n+    _config['angular'] = False\n+    _config['supported_formats'] = ['png', 'jpg', 'svg']\n+    _config['context'] = None\n+\n+\n+_config = {}\n+_init_config()",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/interpreter/lib/python/mpl_config.py",
                "sha": "14aa60d4c227742b76a56c6bdbbe3676a077e327",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/34621717df173749f677d02ace334870d06f529d/notebook/2BQA35CJZ/note.json",
                "changes": 271,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/notebook/2BQA35CJZ/note.json?ref=34621717df173749f677d02ace334870d06f529d",
                "deletions": 271,
                "filename": "notebook/2BQA35CJZ/note.json",
                "patch": "@@ -1,271 +0,0 @@\n-{\n-  \"paragraphs\": [\n-    {\n-      \"text\": \"%md\\n\\n### Pre-requests\\nnumpy, matplotlib are installed \\n\\n### os x\\nmake sure locale is set, to avoid `ValueError: unknown locale: UTF-8`\\n\\n### virtualenv\\nIn case you want to use virtualenv:\\n - configure python interpreter property -\\u003e `absolute/path/to/venv/bin/python`\\n - see *Working with Matplotlib in Virtual environments* in the [Matplotlib FAQ](http://matplotlib.org/faq/virtualenv_faq.html)\",\n-      \"dateUpdated\": \"Jun 22, 2016 5:31:34 AM\",\n-      \"config\": {\n-        \"colWidth\": 12.0,\n-        \"graph\": {\n-          \"mode\": \"table\",\n-          \"height\": 300.0,\n-          \"optionOpen\": false,\n-          \"keys\": [],\n-          \"values\": [],\n-          \"groups\": [],\n-          \"scatter\": {}\n-        },\n-        \"enabled\": true,\n-        \"editorMode\": \"ace/mode/markdown\",\n-        \"editorHide\": true,\n-        \"tableHide\": false\n-      },\n-      \"settings\": {\n-        \"params\": {},\n-        \"forms\": {}\n-      },\n-      \"apps\": [],\n-      \"jobName\": \"paragraph_1465894017761_505669129\",\n-      \"id\": \"20160614-174657_1772993700\",\n-      \"result\": {\n-        \"code\": \"SUCCESS\",\n-        \"type\": \"HTML\",\n-        \"msg\": \"\\u003ch3\\u003ePre-requests\\u003c/h3\\u003e\\n\\u003cp\\u003enumpy, matplotlib are installed\\u003c/p\\u003e\\n\\u003ch3\\u003eos x\\u003c/h3\\u003e\\n\\u003cp\\u003emake sure locale is set, to avoid \\u003ccode\\u003eValueError: unknown locale: UTF-8\\u003c/code\\u003e\\u003c/p\\u003e\\n\\u003ch3\\u003evirtualenv\\u003c/h3\\u003e\\n\\u003cp\\u003eIn case you want to use virtualenv:\\u003c/p\\u003e\\n\\u003cul\\u003e\\n\\u003cli\\u003econfigure python interpreter property -\\u003e \\u003ccode\\u003eabsolute/path/to/venv/bin/python\\u003c/code\\u003e\\u003c/li\\u003e\\n\\u003cli\\u003esee \\u003cem\\u003eWorking with Matplotlib in Virtual environments\\u003c/em\\u003e in the \\u003ca href\\u003d\\\"http://matplotlib.org/faq/virtualenv_faq.html\\\"\\u003eMatplotlib FAQ\\u003c/a\\u003e\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\"\n-      },\n-      \"dateCreated\": \"Jun 14, 2016 5:46:57 AM\",\n-      \"dateStarted\": \"Jun 22, 2016 5:31:34 AM\",\n-      \"dateFinished\": \"Jun 22, 2016 5:31:34 AM\",\n-      \"status\": \"FINISHED\",\n-      \"progressUpdateIntervalMs\": 500\n-    },\n-    {\n-      \"text\": \"%python\\nimport numpy as np\\nimport matplotlib.pyplot as plt\",\n-      \"dateUpdated\": \"Jun 22, 2016 5:31:34 AM\",\n-      \"config\": {\n-        \"colWidth\": 12.0,\n-        \"graph\": {\n-          \"mode\": \"table\",\n-          \"height\": 300.0,\n-          \"optionOpen\": false,\n-          \"keys\": [],\n-          \"values\": [],\n-          \"groups\": [],\n-          \"scatter\": {}\n-        },\n-        \"enabled\": true,\n-        \"editorMode\": \"ace/mode/scala\"\n-      },\n-      \"settings\": {\n-        \"params\": {},\n-        \"forms\": {}\n-      },\n-      \"apps\": [],\n-      \"jobName\": \"paragraph_1466090491493_2078041104\",\n-      \"id\": \"20160617-002131_1552178409\",\n-      \"result\": {\n-        \"code\": \"SUCCESS\",\n-        \"type\": \"TEXT\",\n-        \"msg\": \"\"\n-      },\n-      \"dateCreated\": \"Jun 17, 2016 12:21:31 PM\",\n-      \"dateStarted\": \"Jun 22, 2016 5:31:34 AM\",\n-      \"dateFinished\": \"Jun 22, 2016 5:31:35 AM\",\n-      \"status\": \"FINISHED\",\n-      \"progressUpdateIntervalMs\": 500\n-    },\n-    {\n-      \"text\": \"%python\\ndef f(x):\\n  return np.cos(1/x)\\n\\nx \\u003d np.linspace(-2, 2, 1000)\",\n-      \"dateUpdated\": \"Jun 22, 2016 5:31:34 AM\",\n-      \"config\": {\n-        \"colWidth\": 12.0,\n-        \"graph\": {\n-          \"mode\": \"table\",\n-          \"height\": 300.0,\n-          \"optionOpen\": false,\n-          \"keys\": [],\n-          \"values\": [],\n-          \"groups\": [],\n-          \"scatter\": {}\n-        },\n-        \"enabled\": true,\n-        \"editorMode\": \"ace/mode/scala\",\n-        \"editorHide\": false,\n-        \"tableHide\": false\n-      },\n-      \"settings\": {\n-        \"params\": {},\n-        \"forms\": {}\n-      },\n-      \"apps\": [],\n-      \"jobName\": \"paragraph_1465893861414_-1641861313\",\n-      \"id\": \"20160614-174421_274483707\",\n-      \"result\": {\n-        \"code\": \"SUCCESS\",\n-        \"type\": \"TEXT\",\n-        \"msg\": \"\"\n-      },\n-      \"dateCreated\": \"Jun 14, 2016 5:44:21 AM\",\n-      \"dateStarted\": \"Jun 22, 2016 5:31:35 AM\",\n-      \"dateFinished\": \"Jun 22, 2016 5:31:35 AM\",\n-      \"status\": \"FINISHED\",\n-      \"progressUpdateIntervalMs\": 500\n-    },\n-    {\n-      \"text\": \"%python\\n\\nplt.figure()\\nplt.plot(x, f(x), lw\\u003d2)\\nz.show(plt, width\\u003d\\u0027500px\\u0027)\\nplt.close()\",\n-      \"dateUpdated\": \"Jun 22, 2016 5:31:34 AM\",\n-      \"config\": {\n-        \"colWidth\": 12.0,\n-        \"graph\": {\n-          \"mode\": \"table\",\n-          \"height\": 300.0,\n-          \"optionOpen\": false,\n-          \"keys\": [],\n-          \"values\": [],\n-          \"groups\": [],\n-          \"scatter\": {}\n-        },\n-        \"enabled\": true,\n-        \"editorMode\": \"ace/mode/scala\"\n-      },\n-      \"settings\": {\n-        \"params\": {\n-          \"f1\": \"defaultValue\"\n-        },\n-        \"forms\": {}\n-      },\n-      \"apps\": [],\n-      \"jobName\": \"paragraph_1466088587936_-914466845\",\n-      \"id\": \"20160616-234947_579056637\",\n-      \"result\": {\n-        \"code\": \"SUCCESS\",\n-        \"type\": \"HTML\",\n-        \"msg\": \"\\u003cdiv style\\u003d\\u0027width:500px\\u0027\\u003e\\u003c?xml version\\u003d\\\"1.0\\\" encoding\\u003d\\\"utf-8\\\" standalone\\u003d\\\"no\\\"?\\u003e\\n\\r\\u003c!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\"\\n\\r  \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\"\\u003e\\n\\r\\u003c!-- Created with matplotlib (http://matplotlib.org/) --\\u003e\\n\\r\\u003csvg height\\u003d\\\"432pt\\\" version\\u003d\\\"1.1\\\" viewBox\\u003d\\\"0 0 576 432\\\" width\\u003d\\\"576pt\\\" xmlns\\u003d\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink\\u003d\\\"http://www.w3.org/1999/xlink\\\"\\u003e\\n\\r \\u003cdefs\\u003e\\n\\r  \\u003cstyle type\\u003d\\\"text/css\\\"\\u003e\\n\\r*{stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:100000;}\\n\\r  \\u003c/style\\u003e\\n\\r \\u003c/defs\\u003e\\n\\r \\u003cg id\\u003d\\\"figure_1\\\"\\u003e\\n\\r  \\u003cg id\\u003d\\\"patch_1\\\"\\u003e\\n\\r   \\u003cpath d\\u003d\\\"M 0 432 \\n\\rL 576 432 \\n\\rL 576 0 \\n\\rL 0 0 \\n\\rz\\n\\r\\\" style\\u003d\\\"fill:#ffffff;\\\"/\\u003e\\n\\r  \\u003c/g\\u003e\\n\\r  \\u003cg id\\u003d\\\"axes_1\\\"\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_2\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 388.8 \\n\\rL 518.4 388.8 \\n\\rL 518.4 43.2 \\n\\rL 72 43.2 \\n\\rz\\n\\r\\\" style\\u003d\\\"fill:#ffffff;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"line2d_1\\\"\\u003e\\n\\r    \\u003cpath clip-path\\u003d\\\"url(#p8d9001317b)\\\" d\\u003d\\\"M 72 64.353733 \\n\\rL 81.383784 66.208006 \\n\\rL 89.873874 68.102082 \\n\\rL 97.917117 70.118515 \\n\\rL 105.513514 72.253983 \\n\\rL 112.663063 74.501874 \\n\\rL 119.365766 76.851708 \\n\\rL 125.621622 79.288583 \\n\\rL 131.430631 81.792703 \\n\\rL 136.792793 84.33905 \\n\\rL 142.154955 87.14138 \\n\\rL 147.07027 89.964621 \\n\\rL 151.538739 92.769201 \\n\\rL 156.007207 95.828137 \\n\\rL 160.475676 99.172274 \\n\\rL 164.497297 102.455067 \\n\\rL 168.518919 106.027174 \\n\\rL 172.540541 109.922371 \\n\\rL 176.115315 113.687089 \\n\\rL 179.69009 117.76831 \\n\\rL 183.264865 122.200833 \\n\\rL 186.83964 127.024032 \\n\\rL 189.967568 131.599727 \\n\\rL 193.095495 136.542179 \\n\\rL 196.223423 141.888876 \\n\\rL 199.351351 147.681647 \\n\\rL 202.479279 153.967119 \\n\\rL 205.607207 160.797174 \\n\\rL 208.735135 168.229361 \\n\\rL 211.863063 176.327214 \\n\\rL 214.544144 183.850661 \\n\\rL 217.225225 191.961516 \\n\\rL 219.906306 200.70986 \\n\\rL 222.587387 210.147822 \\n\\rL 225.268468 220.328242 \\n\\rL 227.94955 231.302469 \\n\\rL 230.630631 243.116823 \\n\\rL 233.758559 258.00883 \\n\\rL 236.886486 274.114509 \\n\\rL 240.014414 291.390828 \\n\\rL 243.589189 312.360386 \\n\\rL 252.079279 362.998329 \\n\\rL 253.866667 372.223666 \\n\\rL 255.207207 378.258931 \\n\\rL 256.547748 383.242279 \\n\\rL 257.441441 385.820429 \\n\\rL 258.335135 387.672064 \\n\\rL 258.781982 388.285652 \\n\\rL 259.228829 388.667872 \\n\\rL 259.675676 388.799999 \\n\\rL 260.122523 388.66222 \\n\\rL 260.569369 388.233607 \\n\\rL 261.016216 387.4921 \\n\\rL 261.463063 386.414495 \\n\\rL 261.90991 384.976449 \\n\\rL 262.803604 380.916087 \\n\\rL 263.697297 375.09463 \\n\\rL 264.590991 367.280889 \\n\\rL 265.484685 357.233455 \\n\\rL 266.378378 344.70846 \\n\\rL 267.272072 329.471815 \\n\\rL 268.165766 311.317715 \\n\\rL 269.506306 278.31162 \\n\\rL 270.846847 238.369968 \\n\\rL 272.634234 176.074757 \\n\\rL 275.315315 80.644271 \\n\\rL 276.209009 57.296088 \\n\\rL 276.655856 49.237132 \\n\\rL 277.102703 44.371691 \\n\\rL 277.54955 43.335468 \\n\\rL 277.996396 46.77714 \\n\\rL 278.443243 55.323403 \\n\\rL 278.89009 69.528308 \\n\\rL 279.336937 89.803055 \\n\\rL 280.230631 148.906277 \\n\\rL 281.124324 228.877168 \\n\\rL 282.464865 352.338838 \\n\\rL 282.911712 378.736731 \\n\\rL 283.358559 388.799995 \\n\\rL 283.805405 377.147391 \\n\\rL 284.252252 340.163226 \\n\\rL 284.699099 278.151058 \\n\\rL 286.03964 55.748432 \\n\\rL 286.486486 48.207233 \\n\\rL 286.933333 113.197709 \\n\\rL 287.827027 361.331139 \\n\\rL 288.273874 374.824982 \\n\\rL 289.167568 53.650098 \\n\\rL 289.614414 142.342594 \\n\\rL 290.061261 382.365259 \\n\\rL 290.508108 177.65454 \\n\\rL 290.954955 146.476843 \\n\\rL 291.401802 293.143963 \\n\\rL 291.848649 269.253145 \\n\\rL 292.295495 86.540778 \\n\\rL 292.742342 191.202268 \\n\\rL 293.189189 129.82011 \\n\\rL 293.636036 323.483468 \\n\\rL 294.082883 76.471144 \\n\\rL 294.52973 388.798319 \\n\\rL 295.87027 388.798319 \\n\\rL 296.317117 76.471144 \\n\\rL 296.763964 323.483468 \\n\\rL 297.210811 129.82011 \\n\\rL 297.657658 191.202268 \\n\\rL 298.104505 86.540778 \\n\\rL 298.551351 269.253145 \\n\\rL 298.998198 293.143963 \\n\\rL 299.445045 146.476843 \\n\\rL 299.891892 177.65454 \\n\\rL 300.338739 382.365259 \\n\\rL 300.785586 142.342594 \\n\\rL 301.232432 53.650098 \\n\\rL 302.126126 374.824982 \\n\\rL 302.572973 361.331139 \\n\\rL 303.466667 113.197709 \\n\\rL 303.913514 48.207233 \\n\\rL 304.36036 55.748432 \\n\\rL 304.807207 115.49803 \\n\\rL 305.700901 278.151058 \\n\\rL 306.147748 340.163226 \\n\\rL 306.594595 377.147391 \\n\\rL 307.041441 388.799995 \\n\\rL 307.488288 378.736731 \\n\\rL 307.935135 352.338838 \\n\\rL 308.828829 272.73672 \\n\\rL 310.169369 148.906277 \\n\\rL 311.063063 89.803055 \\n\\rL 311.50991 69.528308 \\n\\rL 311.956757 55.323403 \\n\\rL 312.403604 46.77714 \\n\\rL 312.85045 43.335468 \\n\\rL 313.297297 44.371691 \\n\\rL 313.744144 49.237132 \\n\\rL 314.190991 57.296088 \\n\\rL 315.084685 80.644271 \\n\\rL 316.425225 126.342632 \\n\\rL 319.553153 238.369968 \\n\\rL 320.893694 278.31162 \\n\\rL 322.234234 311.317715 \\n\\rL 323.574775 337.442889 \\n\\rL 324.468468 351.295694 \\n\\rL 325.362162 362.551685 \\n\\rL 326.255856 371.451716 \\n\\rL 327.14955 378.239639 \\n\\rL 328.043243 383.152497 \\n\\rL 328.936937 386.414495 \\n\\rL 329.383784 387.4921 \\n\\rL 329.830631 388.233607 \\n\\rL 330.277477 388.66222 \\n\\rL 330.724324 388.799999 \\n\\rL 331.171171 388.667872 \\n\\rL 331.618018 388.285652 \\n\\rL 332.064865 387.672064 \\n\\rL 332.958559 385.820429 \\n\\rL 333.852252 383.242279 \\n\\rL 334.745946 380.051849 \\n\\rL 336.086486 374.334557 \\n\\rL 337.873874 365.40576 \\n\\rL 340.108108 352.878733 \\n\\rL 344.12973 328.640229 \\n\\rL 349.491892 296.523995 \\n\\rL 353.066667 276.51302 \\n\\rL 356.194595 260.235459 \\n\\rL 359.322523 245.170296 \\n\\rL 362.45045 231.302469 \\n\\rL 365.578378 218.577728 \\n\\rL 368.259459 208.524692 \\n\\rL 370.940541 199.205338 \\n\\rL 374.068468 189.18959 \\n\\rL 377.196396 180.018538 \\n\\rL 380.324324 171.614438 \\n\\rL 383.452252 163.905101 \\n\\rL 386.58018 156.82438 \\n\\rL 389.708108 150.31219 \\n\\rL 392.836036 144.314267 \\n\\rL 395.963964 138.781787 \\n\\rL 399.091892 133.67092 \\n\\rL 402.21982 128.942374 \\n\\rL 405.794595 123.961476 \\n\\rL 409.369369 119.387329 \\n\\rL 412.944144 115.178681 \\n\\rL 416.518919 111.299086 \\n\\rL 420.540541 107.287874 \\n\\rL 424.562162 103.612047 \\n\\rL 428.583784 100.2363 \\n\\rL 432.605405 97.129692 \\n\\rL 437.073874 93.96062 \\n\\rL 441.542342 91.057732 \\n\\rL 446.457658 88.138219 \\n\\rL 451.372973 85.473707 \\n\\rL 456.735135 82.824584 \\n\\rL 462.097297 80.413522 \\n\\rL 467.906306 78.038628 \\n\\rL 474.162162 75.72371 \\n\\rL 480.864865 73.487761 \\n\\rL 488.014414 71.345238 \\n\\rL 495.610811 69.306473 \\n\\rL 503.654054 67.378168 \\n\\rL 512.590991 65.474102 \\n\\rL 518.4 64.353733 \\n\\rL 518.4 64.353733 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#0000ff;stroke-linecap:square;stroke-width:2.0;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_3\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 43.2 \\n\\rL 518.4 43.2 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_4\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 518.4 388.8 \\n\\rL 518.4 43.2 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_5\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 388.8 \\n\\rL 518.4 388.8 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"patch_6\\\"\\u003e\\n\\r    \\u003cpath d\\u003d\\\"M 72 388.8 \\n\\rL 72 43.2 \\n\\r\\\" style\\u003d\\\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;\\\"/\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"matplotlib.axis_1\\\"\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_1\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_2\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL 0 -4 \\n\\r\\\" id\\u003d\\\"m1b33711152\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_3\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL 0 4 \\n\\r\\\" id\\u003d\\\"m5ced6e031b\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_1\\\"\\u003e\\n\\r      \\u003c!-- \u22122.0 --\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 10.59375 35.5 \\n\\rL 73.1875 35.5 \\n\\rL 73.1875 27.203125 \\n\\rL 10.59375 27.203125 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 19.1875 8.296875 \\n\\rL 53.609375 8.296875 \\n\\rL 53.609375 0 \\n\\rL 7.328125 0 \\n\\rL 7.328125 8.296875 \\n\\rQ 12.9375 14.109375 22.625 23.890625 \\n\\rQ 32.328125 33.6875 34.8125 36.53125 \\n\\rQ 39.546875 41.84375 41.421875 45.53125 \\n\\rQ 43.3125 49.21875 43.3125 52.78125 \\n\\rQ 43.3125 58.59375 39.234375 62.25 \\n\\rQ 35.15625 65.921875 28.609375 65.921875 \\n\\rQ 23.96875 65.921875 18.8125 64.3125 \\n\\rQ 13.671875 62.703125 7.8125 59.421875 \\n\\rL 7.8125 69.390625 \\n\\rQ 13.765625 71.78125 18.9375 73 \\n\\rQ 24.125 74.21875 28.421875 74.21875 \\n\\rQ 39.75 74.21875 46.484375 68.546875 \\n\\rQ 53.21875 62.890625 53.21875 53.421875 \\n\\rQ 53.21875 48.921875 51.53125 44.890625 \\n\\rQ 49.859375 40.875 45.40625 35.40625 \\n\\rQ 44.1875 33.984375 37.640625 27.21875 \\n\\rQ 31.109375 20.453125 19.1875 8.296875 \\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-32\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 31.78125 66.40625 \\n\\rQ 24.171875 66.40625 20.328125 58.90625 \\n\\rQ 16.5 51.421875 16.5 36.375 \\n\\rQ 16.5 21.390625 20.328125 13.890625 \\n\\rQ 24.171875 6.390625 31.78125 6.390625 \\n\\rQ 39.453125 6.390625 43.28125 13.890625 \\n\\rQ 47.125 21.390625 47.125 36.375 \\n\\rQ 47.125 51.421875 43.28125 58.90625 \\n\\rQ 39.453125 66.40625 31.78125 66.40625 \\n\\rM 31.78125 74.21875 \\n\\rQ 44.046875 74.21875 50.515625 64.515625 \\n\\rQ 56.984375 54.828125 56.984375 36.375 \\n\\rQ 56.984375 17.96875 50.515625 8.265625 \\n\\rQ 44.046875 -1.421875 31.78125 -1.421875 \\n\\rQ 19.53125 -1.421875 13.0625 8.265625 \\n\\rQ 6.59375 17.96875 6.59375 36.375 \\n\\rQ 6.59375 54.828125 13.0625 64.515625 \\n\\rQ 19.53125 74.21875 31.78125 74.21875 \\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 10.6875 12.40625 \\n\\rL 21 12.40625 \\n\\rL 21 0 \\n\\rL 10.6875 0 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(57.4303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-32\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_2\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_4\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"127.8\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_5\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"127.8\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_2\\\"\\u003e\\n\\r      \\u003c!-- \u22121.5 --\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 12.40625 8.296875 \\n\\rL 28.515625 8.296875 \\n\\rL 28.515625 63.921875 \\n\\rL 10.984375 60.40625 \\n\\rL 10.984375 69.390625 \\n\\rL 28.421875 72.90625 \\n\\rL 38.28125 72.90625 \\n\\rL 38.28125 8.296875 \\n\\rL 54.390625 8.296875 \\n\\rL 54.390625 0 \\n\\rL 12.40625 0 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 10.796875 72.90625 \\n\\rL 49.515625 72.90625 \\n\\rL 49.515625 64.59375 \\n\\rL 19.828125 64.59375 \\n\\rL 19.828125 46.734375 \\n\\rQ 21.96875 47.46875 24.109375 47.828125 \\n\\rQ 26.265625 48.1875 28.421875 48.1875 \\n\\rQ 40.625 48.1875 47.75 41.5 \\n\\rQ 54.890625 34.8125 54.890625 23.390625 \\n\\rQ 54.890625 11.625 47.5625 5.09375 \\n\\rQ 40.234375 -1.421875 26.90625 -1.421875 \\n\\rQ 22.3125 -1.421875 17.546875 -0.640625 \\n\\rQ 12.796875 0.140625 7.71875 1.703125 \\n\\rL 7.71875 11.625 \\n\\rQ 12.109375 9.234375 16.796875 8.0625 \\n\\rQ 21.484375 6.890625 26.703125 6.890625 \\n\\rQ 35.15625 6.890625 40.078125 11.328125 \\n\\rQ 45.015625 15.765625 45.015625 23.390625 \\n\\rQ 45.015625 31 40.078125 35.4375 \\n\\rQ 35.15625 39.890625 26.703125 39.890625 \\n\\rQ 22.75 39.890625 18.8125 39.015625 \\n\\rQ 14.890625 38.140625 10.796875 36.28125 \\n\\rz\\n\\r\\\" id\\u003d\\\"BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(113.2303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_3\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_6\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"183.6\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_7\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"183.6\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_3\\\"\\u003e\\n\\r      \\u003c!-- \u22121.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(169.0303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_4\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_8\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"239.4\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_9\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"239.4\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_4\\\"\\u003e\\n\\r      \\u003c!-- \u22120.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(224.8303125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_5\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_10\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"295.2\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_11\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"295.2\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_5\\\"\\u003e\\n\\r      \\u003c!-- 0.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(285.658125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_6\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_12\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"351.0\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_13\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"351.0\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_6\\\"\\u003e\\n\\r      \\u003c!-- 0.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(341.458125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_7\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_14\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"406.8\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_15\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"406.8\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_7\\\"\\u003e\\n\\r      \\u003c!-- 1.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(397.258125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_8\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_16\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"462.6\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_17\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"462.6\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_8\\\"\\u003e\\n\\r      \\u003c!-- 1.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(453.058125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"xtick_9\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_18\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m1b33711152\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_19\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m5ced6e031b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_9\\\"\\u003e\\n\\r      \\u003c!-- 2.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(508.858125 401.918125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-32\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r   \\u003cg id\\u003d\\\"matplotlib.axis_2\\\"\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_1\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_20\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL 4 0 \\n\\r\\\" id\\u003d\\\"m3c39fe74d7\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_21\\\"\\u003e\\n\\r      \\u003cdefs\\u003e\\n\\r       \\u003cpath d\\u003d\\\"M 0 0 \\n\\rL -4 0 \\n\\r\\\" id\\u003d\\\"m4564b9459b\\\" style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\"/\\u003e\\n\\r      \\u003c/defs\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"388.8\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_10\\\"\\u003e\\n\\r      \\u003c!-- \u22121.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(38.860625 392.11125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_2\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_22\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"302.4\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_23\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"302.4\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_11\\\"\\u003e\\n\\r      \\u003c!-- \u22120.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(38.860625 305.71125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2212\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"83.7890625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"147.412109375\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"179.19921875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_3\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_24\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"216.0\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_25\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"216.0\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_12\\\"\\u003e\\n\\r      \\u003c!-- 0.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(48.91625 219.31125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_4\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_26\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"129.6\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_27\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"129.6\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_13\\\"\\u003e\\n\\r      \\u003c!-- 0.5 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(48.91625 132.91125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-35\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r    \\u003cg id\\u003d\\\"ytick_5\\\"\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_28\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"72.0\\\" xlink:href\\u003d\\\"#m3c39fe74d7\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"line2d_29\\\"\\u003e\\n\\r      \\u003cg\\u003e\\n\\r       \\u003cuse style\\u003d\\\"stroke:#000000;stroke-width:0.5;\\\" x\\u003d\\\"518.4\\\" xlink:href\\u003d\\\"#m4564b9459b\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r     \\u003cg id\\u003d\\\"text_14\\\"\\u003e\\n\\r      \\u003c!-- 1.0 --\\u003e\\n\\r      \\u003cg transform\\u003d\\\"translate(48.91625 46.51125)scale(0.12 -0.12)\\\"\\u003e\\n\\r       \\u003cuse xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-31\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"63.623046875\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-2e\\\"/\\u003e\\n\\r       \\u003cuse x\\u003d\\\"95.41015625\\\" xlink:href\\u003d\\\"#BitstreamVeraSans-Roman-30\\\"/\\u003e\\n\\r      \\u003c/g\\u003e\\n\\r     \\u003c/g\\u003e\\n\\r    \\u003c/g\\u003e\\n\\r   \\u003c/g\\u003e\\n\\r  \\u003c/g\\u003e\\n\\r \\u003c/g\\u003e\\n\\r \\u003cdefs\\u003e\\n\\r  \\u003cclipPath id\\u003d\\\"p8d9001317b\\\"\\u003e\\n\\r   \\u003crect height\\u003d\\\"345.6\\\" width\\u003d\\\"446.4\\\" x\\u003d\\\"72.0\\\" y\\u003d\\\"43.2\\\"/\\u003e\\n\\r  \\u003c/clipPath\\u003e\\n\\r \\u003c/defs\\u003e\\n\\r\\u003c/svg\\u003e\\n\\r\\u003cdiv\\u003e\"\n-      },\n-      \"dateCreated\": \"Jun 16, 2016 11:49:47 AM\",\n-      \"dateStarted\": \"Jun 22, 2016 5:31:36 AM\",\n-      \"dateFinished\": \"Jun 22, 2016 5:31:36 AM\",\n-      \"status\": \"FINISHED\",\n-      \"progressUpdateIntervalMs\": 500\n-    },\n-    {\n-      \"text\": \"%python\\n\\n# something else\",\n-      \"dateUpdated\": \"Jun 22, 2016 5:50:47 AM\",\n-      \"config\": {\n-        \"colWidth\": 12.0,\n-        \"graph\": {\n-          \"mode\": \"table\",\n-          \"height\": 394.0,\n-          \"optionOpen\": false,\n-          \"keys\": [],\n-          \"values\": [],\n-          \"groups\": [],\n-          \"scatter\": {}\n-        },\n-        \"enabled\": true,\n-        \"editorMode\": \"ace/mode/python\"\n-      },\n-      \"settings\": {\n-        \"params\": {},\n-        \"forms\": {}\n-      },\n-      \"apps\": [],\n-      \"jobName\": \"paragraph_1466139879415_1937425297\",\n-      \"id\": \"20160617-140439_1111727405\",\n-      \"result\": {\n-        \"code\": \"SUCCESS\",\n-        \"type\": \"TEXT\",\n-        \"msg\": \"\"\n-      },\n-      \"dateCreated\": \"Jun 17, 2016 2:04:39 AM\",\n-      \"dateStarted\": \"Jun 22, 2016 5:50:47 AM\",\n-      \"dateFinished\": \"Jun 22, 2016 5:50:47 AM\",\n-      \"status\": \"FINISHED\",\n-      \"progressUpdateIntervalMs\": 500\n-    },\n-    {\n-      \"title\": \"Further help using build-in command\",\n-      \"text\": \"%python\\nhelp()\",\n-      \"dateUpdated\": \"Jul 11, 2016 11:35:39 PM\",\n-      \"config\": {\n-        \"colWidth\": 12.0,\n-        \"graph\": {\n-          \"mode\": \"table\",\n-          \"height\": 300.0,\n-          \"optionOpen\": false,\n-          \"keys\": [],\n-          \"values\": [],\n-          \"groups\": [],\n-          \"scatter\": {}\n-        },\n-        \"enabled\": true,\n-        \"editorMode\": \"ace/mode/scala\",\n-        \"tableHide\": false,\n-        \"title\": true\n-      },\n-      \"settings\": {\n-        \"params\": {},\n-        \"forms\": {}\n-      },\n-      \"apps\": [],\n-      \"jobName\": \"paragraph_1465893931031_1683462133\",\n-      \"id\": \"20160614-174531_1529734563\",\n-      \"result\": {\n-        \"code\": \"SUCCESS\",\n-        \"type\": \"HTML\",\n-        \"msg\": \"\\r\\u003ch2\\u003ePython Interpreter help\\u003c/h2\\u003e\\n\\r\\u003ch3\\u003ePython 2 \\u0026 3 compatibility\\u003c/h3\\u003e\\n\\r\\u003cp\\u003eThe interpreter is compatible with Python 2 \\u0026 3.\\u003cbr/\\u003e\\n\\rTo change Python version, \\n\\rchange in the interpreter configuration the python to the \\n\\rdesired version (example : python\\u003d/usr/bin/python3)\\u003c/p\\u003e\\n\\r\\u003ch3\\u003ePython modules\\u003c/h3\\u003e\\n\\r\\u003cp\\u003eThe interpreter can use all modules already installed \\n\\r(with pip, easy_install, etc)\\u003c/p\\u003e\\n\\r\\u003ch3\\u003eForms\\u003c/h3\\u003e\\n\\rYou must install py4j in order to use the form feature (pip install py4j)\\n\\r\\u003ch4\\u003eInput form\\u003c/h4\\u003e\\n\\r\\u003cpre\\u003eprint (z.input(\\\"f1\\\",\\\"defaultValue\\\"))\\u003c/pre\\u003e\\n\\r\\u003ch4\\u003eSelection form\\u003c/h4\\u003e\\n\\r\\u003cpre\\u003eprint(z.select(\\\"f2\\\", [(\\\"o1\\\",\\\"1\\\"), (\\\"o2\\\",\\\"2\\\")],2))\\u003c/pre\\u003e\\n\\r\\u003ch4\\u003eCheckbox form\\u003c/h4\\u003e\\n\\r\\u003cpre\\u003e print(\\\"\\\".join(z.checkbox(\\\"f3\\\", [(\\\"o1\\\",\\\"1\\\"), (\\\"o2\\\",\\\"2\\\")],[\\\"1\\\"])))\\u003c/pre\\u003e\\n\\r\\u003ch3\\u003eMatplotlib graph\\u003c/h3\\u003e\\n\\r\\u003cdiv\\u003eThe interpreter can display matplotlib graph with \\n\\rthe function z.show()\\u003c/div\\u003e\\n\\r\\u003cdiv\\u003e You need to already have matplotlib module installed \\n\\rto use this functionality !\\u003c/div\\u003e\\u003cbr/\\u003e\\n\\r\\u003cpre\\u003eimport matplotlib.pyplot as plt\\n\\rplt.figure()\\n\\r(.. ..)\\n\\rz.show(plt)\\n\\rplt.close()\\n\\r\\u003c/pre\\u003e\\n\\r\\u003cdiv\\u003e\\u003cbr/\\u003e z.show function can take optional parameters \\n\\rto adapt graph width and height\\u003c/div\\u003e\\n\\r\\u003cdiv\\u003e\\u003cb\\u003eexample \\u003c/b\\u003e:\\n\\r\\u003cpre\\u003ez.show(plt,width\\u003d\\u002750px\\u0027)\\n\\rz.show(plt,height\\u003d\\u0027150px\\u0027) \\u003c/pre\\u003e\\u003c/div\\u003e\\n\\r\\u003ch3\\u003ePandas DataFrame\\u003c/h3\\u003e\\n\\r\\u003cdiv\\u003e You need to have Pandas module installed \\n\\rto use this functionality (pip install pandas) !\\u003c/div\\u003e\\u003cbr/\\u003e\\n\\r\\n\\r\\u003cdiv\\u003eThe interpreter can visualize Pandas DataFrame\\n\\rwith the function z.show()\\n\\r\\u003cpre\\u003e\\n\\rimport pandas as pd\\n\\rdf \\u003d pd.read_csv(\\\"bank.csv\\\", sep\\u003d\\\";\\\")\\n\\rz.show(df)\\n\\r\\u003c/pre\\u003e\\u003c/div\\u003e\\n\\r\\n\\r\\u003ch3\\u003eSQL over Pandas DataFrame\\u003c/h3\\u003e\\n\\r\\u003cdiv\\u003e You need to have Pandas\\u0026Pandasql modules installed \\n\\rto use this functionality (pip install pandas pandasql) !\\u003c/div\\u003e\\u003cbr/\\u003e\\n\\r\\n\\r\\u003cdiv\\u003ePython interpreter group includes %sql interpreter that can query \\n\\rPandas DataFrame using SQL and visualize results using Table Display System\\n\\r\\n\\r\\u003cpre\\u003e\\n\\r%python\\n\\rimport pandas as pd\\n\\rdf \\u003d pd.read_csv(\\\"bank.csv\\\", sep\\u003d\\\";\\\")\\n\\r\\u003c/pre\\u003e\\n\\r\\u003cbr /\\u003e\\n\\r\\n\\r\\u003cpre\\u003e\\n\\r%python.sql\\n\\r%sql\\n\\rSELECT * from df LIMIT 5\\n\\r\\u003c/pre\\u003e\\u003c/div\\u003e\"\n-      },\n-      \"dateCreated\": \"Jun 14, 2016 5:45:31 AM\",\n-      \"dateStarted\": \"Jul 11, 2016 11:35:39 PM\",\n-      \"dateFinished\": \"Jul 11, 2016 11:35:40 PM\",\n-      \"status\": \"FINISHED\",\n-      \"progressUpdateIntervalMs\": 500\n-    },\n-    {\n-      \"text\": \"\",\n-      \"dateUpdated\": \"Jun 22, 2016 5:31:35 AM\",\n-      \"config\": {\n-        \"colWidth\": 12.0,\n-        \"graph\": {\n-          \"mode\": \"table\",\n-          \"height\": 300.0,\n-          \"optionOpen\": false,\n-          \"keys\": [],\n-          \"values\": [],\n-          \"groups\": [],\n-          \"scatter\": {}\n-        },\n-        \"enabled\": true,\n-        \"editorMode\": \"ace/mode/scala\"\n-      },\n-      \"settings\": {\n-        \"params\": {},\n-        \"forms\": {}\n-      },\n-      \"apps\": [],\n-      \"jobName\": \"paragraph_1466042618008_-234893992\",\n-      \"id\": \"20160616-110338_941394720\",\n-      \"result\": {\n-        \"code\": \"SUCCESS\",\n-        \"type\": \"TEXT\",\n-        \"msg\": \"\"\n-      },\n-      \"dateCreated\": \"Jun 16, 2016 11:03:38 AM\",\n-      \"dateStarted\": \"Jun 22, 2016 5:31:36 AM\",\n-      \"dateFinished\": \"Jun 22, 2016 5:31:36 AM\",\n-      \"status\": \"FINISHED\",\n-      \"progressUpdateIntervalMs\": 500\n-    }\n-  ],\n-  \"name\": \"Zeppelin Tutorial: Python - matplotlib basic\",\n-  \"id\": \"2BQA35CJZ\",\n-  \"lastReplName\": {\n-    \"value\": \"python\"\n-  },\n-  \"angularObjects\": {\n-    \"2BMX349MY:shared_process\": [],\n-    \"2BN9WB6KT:shared_process\": []\n-  },\n-  \"config\": {\n-    \"looknfeel\": \"default\"\n-  },\n-  \"info\": {}\n-}",
                "raw_url": "https://github.com/apache/zeppelin/raw/34621717df173749f677d02ace334870d06f529d/notebook/2BQA35CJZ/note.json",
                "sha": "5c6e75183f0e1d7661650b2375c946facf4758da",
                "status": "removed"
            },
            {
                "additions": 696,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/notebook/2C2AUG798/note.json",
                "changes": 696,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/notebook/2C2AUG798/note.json?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 0,
                "filename": "notebook/2C2AUG798/note.json",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/notebook/2C2AUG798/note.json",
                "sha": "f58dee898bd873890aba298b4afd595b3bdeb2c9",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/pom.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/pom.xml?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 0,
                "filename": "pom.xml",
                "patch": "@@ -460,6 +460,9 @@\n               <fileset>\n                 <directory>interpreter</directory>\n                 <followSymlinks>false</followSymlinks>\n+                <excludes>\n+                  <exclude>lib/**</exclude>\n+                </excludes>\n               </fileset>\n             </filesets>\n           </configuration>",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/pom.xml",
                "sha": "c9b4e0214a2b489f0734efb883896d1b60a1699c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/README.md",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/README.md?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 2,
                "filename": "python/README.md",
                "patch": "@@ -47,6 +47,6 @@ mvn -Dpython.test.exclude='' test -pl python -am\n \n  * JavaBuilder can't send SIGINT signal to interrupt paragraph execution. Therefore interpreter directly  send a `kill SIGINT PID` to python process to interrupt execution. Python process catch SIGINT signal with some code defined in bootstrap.py\n \n- * Matplotlib display feature is made with SVG export (in string) and then displays it with html code.\n+ * Matplotlib figures are displayed inline with the notebook automatically using a built-in backend for zeppelin in conjunction with a post-execute hook.\n \n- * `%python.sql` support for Pandas DataFrames is optional and provided using https://github.com/yhat/pandasql if user have one installed\n\\ No newline at end of file\n+ * `%python.sql` support for Pandas DataFrames is optional and provided using https://github.com/yhat/pandasql if user have one installed",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/README.md",
                "sha": "cd8a0ca1c724d8173ff8f33c327cb2b4a90ff401",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/pom.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/pom.xml?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 1,
                "filename": "python/pom.xml",
                "patch": "@@ -36,7 +36,8 @@\n     <py4j.version>0.9.2</py4j.version>\n     <python.test.exclude>\n         **/PythonInterpreterWithPythonInstalledTest.java,\n-        **/PythonInterpreterPandasSqlTest.java\n+        **/PythonInterpreterPandasSqlTest.java,\n+        **/PythonInterpreterMatplotlibTest.java\n     </python.test.exclude>\n   </properties>\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/pom.xml",
                "sha": "00fba6eac772f1c1d85cfc91b8cf8af81ff8b128",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 0,
                "filename": "python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "patch": "@@ -32,6 +32,8 @@\n import org.apache.zeppelin.interpreter.InterpreterContext;\n import org.apache.zeppelin.interpreter.InterpreterResult;\n import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n+import org.apache.zeppelin.interpreter.InterpreterHookRegistry.HookType;\n+import org.apache.zeppelin.interpreter.InterpreterGroup;\n import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;\n import org.apache.zeppelin.scheduler.Job;\n import org.apache.zeppelin.scheduler.Scheduler;\n@@ -68,6 +70,12 @@ public PythonInterpreter(Properties property) {\n \n   @Override\n   public void open() {\n+    // Add matplotlib display hook\n+    InterpreterGroup intpGroup = getInterpreterGroup();\n+    if (intpGroup != null && intpGroup.getInterpreterHookRegistry() != null) {\n+      registerHook(HookType.POST_EXEC_DEV, \"z._displayhook()\");\n+    }\n+    \n     LOG.info(\"Starting Python interpreter ---->\");\n     LOG.info(\"Python path is set to:\" + property.getProperty(ZEPPELIN_PYTHON));\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "sha": "e2fb999db292e79bfd7d2740d21cc01e1bf5e96f",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/src/main/resources/bootstrap.py",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/resources/bootstrap.py?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 2,
                "filename": "python/src/main/resources/bootstrap.py",
                "patch": "@@ -16,10 +16,11 @@\n # PYTHON 2 / 3 compatibility :\n # bootstrap.py must be runnable with Python 2 or 3\n \n-# Remove interactive mode displayhook\n+import os\n import sys\n import signal\n import base64\n+import warnings\n from io import BytesIO\n try:\n     from StringIO import StringIO\n@@ -117,6 +118,7 @@ class PyZeppelinContext(object):\n     \n     def __init__(self):\n         self.max_result = 1000\n+        self._displayhook = lambda *args: None\n     \n     def input(self, name, defaultValue=\"\"):\n         print(self.errorMsg)\n@@ -164,7 +166,7 @@ def show_dataframe(self, df, **kwargs):\n         #)\n         body_buf.close(); header_buf.close()\n     \n-    def show_matplotlib(self, p, fmt=\"png\", width=\"auto\", height=\"auto\", \n+    def show_matplotlib(self, p, fmt=\"png\", width=\"auto\", height=\"auto\",\n                         **kwargs):\n         \"\"\"Matplotlib show function\n         \"\"\"\n@@ -187,6 +189,39 @@ def show_matplotlib(self, p, fmt=\"png\", width=\"auto\", height=\"auto\",\n         html = \"%html <div style='width:{width};height:{height}'>{img}<div>\"\n         print(html.format(width=width, height=height, img=img_str))\n         img.close()\n+    \n+    def configure_mpl(self, **kwargs):\n+        import mpl_config\n+        mpl_config.configure(**kwargs)\n+    \n+    def _setup_matplotlib(self):\n+        # If we don't have matplotlib installed don't bother continuing\n+        try:\n+            import matplotlib\n+        except ImportError:\n+            pass\n+        # Make sure custom backends are available in the PYTHONPATH\n+        rootdir = os.environ.get('ZEPPELIN_HOME', os.getcwd())\n+        mpl_path = os.path.join(rootdir, 'interpreter', 'lib', 'python')\n+        if mpl_path not in sys.path:\n+            sys.path.append(mpl_path)\n+        \n+        # Finally check if backend exists, and if so configure as appropriate\n+        try:\n+            matplotlib.use('module://backend_zinline')\n+            import backend_zinline\n+      \n+            # Everything looks good so make config assuming that we are using\n+            # an inline backend\n+            self._displayhook = backend_zinline.displayhook\n+            self.configure_mpl(width=600, height=400, dpi=72,\n+                               fontsize=10, interactive=True, format='png')\n+        except ImportError:\n+            # Fall back to Agg if no custom backend installed\n+            matplotlib.use('Agg')\n+            warnings.warn(\"Unable to load inline matplotlib backend, \"\n+                          \"falling back to Agg\")\n \n \n z = PyZeppelinContext()\n+z._setup_matplotlib()",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/src/main/resources/bootstrap.py",
                "sha": "fc5869372825205ffeed0383858efd8408ab1404",
                "status": "modified"
            },
            {
                "additions": 169,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/src/test/java/org/apache/zeppelin/python/PythonInterpreterMatplotlibTest.java",
                "changes": 169,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/test/java/org/apache/zeppelin/python/PythonInterpreterMatplotlibTest.java?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 0,
                "filename": "python/src/test/java/org/apache/zeppelin/python/PythonInterpreterMatplotlibTest.java",
                "patch": "@@ -0,0 +1,169 @@\n+\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*  http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.apache.zeppelin.python;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.*;\n+\n+import org.apache.zeppelin.display.AngularObjectRegistry;\n+import org.apache.zeppelin.display.GUI;\n+import org.apache.zeppelin.interpreter.Interpreter;\n+import org.apache.zeppelin.interpreter.InterpreterContext;\n+import org.apache.zeppelin.interpreter.InterpreterContextRunner;\n+import org.apache.zeppelin.interpreter.InterpreterGroup;\n+import org.apache.zeppelin.interpreter.InterpreterOutput;\n+import org.apache.zeppelin.interpreter.InterpreterOutputListener;\n+import org.apache.zeppelin.interpreter.InterpreterResult;\n+import org.apache.zeppelin.interpreter.InterpreterResult.Type;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * In order for this test to work, test env must have installed:\n+ * <ol>\n+ *  - <li>Python</li>\n+ *  - <li>Matplotlib</li>\n+ * <ol>\n+ *\n+ * Your PYTHONPATH should also contain the directory of the Matplotlib\n+ * backend files. Usually these can be found in $ZEPPELIN_HOME/interpreter/lib/python.\n+ *\n+ * To run manually on such environment, use:\n+ * <code>\n+ *   mvn -Dpython.test.exclude='' test -pl python -am\n+ * </code>\n+ */\n+public class PythonInterpreterMatplotlibTest {\n+\n+  private InterpreterGroup intpGroup;\n+  private PythonInterpreter python;\n+\n+  private InterpreterContext context;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    Properties p = new Properties();\n+    p.setProperty(\"zeppelin.python\", \"python\");\n+    p.setProperty(\"zeppelin.python.maxResult\", \"100\");\n+\n+    intpGroup = new InterpreterGroup();\n+\n+    python = new PythonInterpreter(p);\n+    python.setInterpreterGroup(intpGroup);\n+    python.open();\n+\n+    List<Interpreter> interpreters = new LinkedList<>();\n+    interpreters.add(python);\n+    intpGroup.put(\"note\", interpreters);\n+\n+    context = new InterpreterContext(\"note\", \"id\", \"title\", \"text\", new AuthenticationInfo(),\n+        new HashMap<String, Object>(), new GUI(),\n+        new AngularObjectRegistry(intpGroup.getId(), null), null,\n+        new LinkedList<InterpreterContextRunner>(), new InterpreterOutput(\n+            new InterpreterOutputListener() {\n+              @Override public void onAppend(InterpreterOutput out, byte[] line) {}\n+              @Override public void onUpdate(InterpreterOutput out, byte[] output) {}\n+            }));\n+  }\n+\n+  @Test\n+  public void dependenciesAreInstalled() {\n+    // matplotlib\n+    InterpreterResult ret = python.interpret(\"import matplotlib\", context);\n+    assertEquals(ret.message(), InterpreterResult.Code.SUCCESS, ret.code());\n+    \n+    // inline backend\n+    ret = python.interpret(\"import backend_zinline\", context);\n+    assertEquals(ret.message(), InterpreterResult.Code.SUCCESS, ret.code());\n+  }\n+\n+  @Test\n+  public void showPlot() {\n+    // Simple plot test\n+    InterpreterResult ret;\n+    ret = python.interpret(\"import matplotlib.pyplot as plt\", context);\n+    ret = python.interpret(\"z.configure_mpl(interactive=False)\", context);\n+    ret = python.interpret(\"plt.plot([1, 2, 3])\", context);\n+    ret = python.interpret(\"plt.show()\", context);\n+\n+    assertEquals(ret.message(), InterpreterResult.Code.SUCCESS, ret.code());\n+    assertEquals(ret.message(), Type.HTML, ret.type());\n+    assertTrue(ret.message().contains(\"data:image/png;base64\"));\n+    assertTrue(ret.message().contains(\"<div>\"));\n+  }\n+\n+  @Test\n+  // Test for when configuration is set to auto-close figures after show().\n+  public void testClose() {\n+    InterpreterResult ret;\n+    InterpreterResult ret1;\n+    InterpreterResult ret2;\n+    ret = python.interpret(\"import matplotlib.pyplot as plt\", context);\n+    ret = python.interpret(\"z.configure_mpl(interactive=False)\", context);\n+    ret = python.interpret(\"plt.plot([1, 2, 3])\", context);\n+    ret1 = python.interpret(\"plt.show()\", context);\n+    \n+    // Second call to show() should print nothing, and Type should be TEXT.\n+    // This is because when close=True, there should be no living instances\n+    // of FigureManager, causing show() to return before setting the output\n+    // type to HTML.\n+    ret = python.interpret(\"plt.show()\", context);\n+    assertEquals(ret.message(), InterpreterResult.Code.SUCCESS, ret.code());\n+    assertEquals(ret.message(), Type.TEXT, ret.type());\n+    assertTrue(ret.message().equals(\"\"));\n+    \n+    // Now test that new plot is drawn. It should be identical to the\n+    // previous one.\n+    ret = python.interpret(\"plt.plot([1, 2, 3])\", context);\n+    ret2 = python.interpret(\"plt.show()\", context);\n+    assertTrue(ret1.message().equals(ret2.message()));\n+  }\n+  \n+  @Test\n+  // Test for when configuration is set to not auto-close figures after show().\n+  public void testNoClose() {\n+    InterpreterResult ret;\n+    InterpreterResult ret1;\n+    InterpreterResult ret2;\n+    ret = python.interpret(\"import matplotlib.pyplot as plt\", context);\n+    ret = python.interpret(\"z.configure_mpl(interactive=False, close=False)\", context);\n+    ret = python.interpret(\"plt.plot([1, 2, 3])\", context);\n+    ret1 = python.interpret(\"plt.show()\", context);\n+    \n+    // Second call to show() should print nothing, and Type should be HTML.\n+    // This is because when close=False, there should be living instances\n+    // of FigureManager, causing show() to set the output\n+    // type to HTML even though the figure is inactive.\n+    ret = python.interpret(\"plt.show()\", context);\n+    assertEquals(ret.message(), InterpreterResult.Code.SUCCESS, ret.code());\n+    assertEquals(ret.message(), Type.HTML, ret.type());\n+    assertTrue(ret.message().equals(\"\"));\n+    \n+    // Now test that plot can be reshown if it is updated. It should be\n+    // different from the previous one because it will plot the same line\n+    // again but in a different color.\n+    ret = python.interpret(\"plt.plot([1, 2, 3])\", context);\n+    ret2 = python.interpret(\"plt.show()\", context);\n+    assertTrue(!ret1.message().equals(ret2.message()));\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/python/src/test/java/org/apache/zeppelin/python/PythonInterpreterMatplotlibTest.java",
                "sha": "7ee4c2d9b5bde2fc8876f64dc832908bbefb4bd5",
                "status": "added"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 0,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "patch": "@@ -48,7 +48,9 @@\n import org.apache.zeppelin.interpreter.Interpreter;\n import org.apache.zeppelin.interpreter.InterpreterContext;\n import org.apache.zeppelin.interpreter.InterpreterException;\n+import org.apache.zeppelin.interpreter.InterpreterGroup;\n import org.apache.zeppelin.interpreter.InterpreterResult;\n+import org.apache.zeppelin.interpreter.InterpreterHookRegistry.HookType;\n import org.apache.zeppelin.interpreter.LazyOpenInterpreter;\n import org.apache.zeppelin.interpreter.WrappedInterpreter;\n import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n@@ -111,6 +113,11 @@ private void createPythonScript() {\n \n   @Override\n   public void open() {\n+    // Add matplotlib display hook\n+    InterpreterGroup intpGroup = getInterpreterGroup();\n+    if (intpGroup != null && intpGroup.getInterpreterHookRegistry() != null) {\n+      registerHook(HookType.POST_EXEC_DEV, \"z._displayhook()\");\n+    }\n     DepInterpreter depInterpreter = getDepInterpreter();\n \n     // load libraries from Dependency Interpreter",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "sha": "6a76bfbd0bd227b012ad5daaa1c4342749e14b41",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/spark/src/main/resources/python/zeppelin_pyspark.py",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/resources/python/zeppelin_pyspark.py?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 2,
                "filename": "spark/src/main/resources/python/zeppelin_pyspark.py",
                "patch": "@@ -15,7 +15,7 @@\n # limitations under the License.\n #\n \n-import sys, getopt, traceback, json, re\n+import os, sys, getopt, traceback, json, re\n \n from py4j.java_gateway import java_import, JavaGateway, GatewayClient\n from py4j.protocol import Py4JJavaError\n@@ -50,6 +50,7 @@ def flush(self):\n class PyZeppelinContext(dict):\n   def __init__(self, zc):\n     self.z = zc\n+    self._displayhook = lambda *args: None\n \n   def show(self, obj):\n     from pyspark.sql import DataFrame\n@@ -116,6 +117,39 @@ def getHook(self, event, replName=None):\n       return self.z.getHook(event)\n     return self.z.getHook(event, replName)\n \n+  def _setup_matplotlib(self):\n+    # If we don't have matplotlib installed don't bother continuing\n+    try:\n+      import matplotlib\n+    except ImportError:\n+      return\n+    \n+    # Make sure custom backends are available in the PYTHONPATH\n+    rootdir = os.environ.get('ZEPPELIN_HOME', os.getcwd())\n+    mpl_path = os.path.join(rootdir, 'interpreter', 'lib', 'python')\n+    if mpl_path not in sys.path:\n+      sys.path.append(mpl_path)\n+    \n+    # Finally check if backend exists, and if so configure as appropriate\n+    try:\n+      matplotlib.use('module://backend_zinline')\n+      import backend_zinline\n+      \n+      # Everything looks good so make config assuming that we are using\n+      # an inline backend\n+      self._displayhook = backend_zinline.displayhook\n+      self.configure_mpl(width=600, height=400, dpi=72, fontsize=10,\n+                         interactive=True, format='png', context=self.z)\n+    except ImportError:\n+      # Fall back to Agg if no custom backend installed\n+      matplotlib.use('Agg')\n+      warnings.warn(\"Unable to load inline matplotlib backend, \"\n+                    \"falling back to Agg\")\n+\n+  def configure_mpl(self, **kwargs):\n+    import mpl_config\n+    mpl_config.configure(**kwargs)\n+\n   def __tupleToScalaTuple2(self, tuple):\n     if (len(tuple) == 2):\n       return gateway.jvm.scala.Tuple2(tuple[0], tuple[1])\n@@ -244,13 +278,30 @@ def getCompletion(self, text_value):\n \n completion = PySparkCompletion(intp)\n z = PyZeppelinContext(intp.getZeppelinContext())\n+z._setup_matplotlib()\n \n while True :\n   req = intp.getStatements()\n   try:\n     stmts = req.statements().split(\"\\n\")\n     jobGroup = req.jobGroup()\n     final_code = []\n+    \n+    # Get post-execute hooks\n+    try:\n+      global_hook = intp.getHook('post_exec_dev')\n+    except:\n+      global_hook = None\n+      \n+    try:\n+      user_hook = z.getHook('post_exec')\n+    except:\n+      user_hook = None\n+      \n+    nhooks = 0\n+    for hook in (global_hook, user_hook):\n+      if hook:\n+        nhooks += 1\n \n     for s in stmts:\n       if s == None:\n@@ -268,7 +319,9 @@ def getCompletion(self, text_value):\n       # so that the last statement's evaluation will be printed to stdout\n       sc.setJobGroup(jobGroup, \"Zeppelin\")\n       code = compile('\\n'.join(final_code), '<stdin>', 'exec', ast.PyCF_ONLY_AST, 1)\n-      to_run_exec, to_run_single = code.body[:-1], code.body[-1:]\n+      to_run_hooks = code.body[-nhooks:]\n+      to_run_exec, to_run_single = (code.body[:-(nhooks + 1)],\n+                                    [code.body[-(nhooks + 1)]])\n \n       try:\n         for node in to_run_exec:\n@@ -280,6 +333,11 @@ def getCompletion(self, text_value):\n           mod = ast.Interactive([node])\n           code = compile(mod, '<stdin>', 'single')\n           exec(code)\n+          \n+        for node in to_run_hooks:\n+          mod = ast.Module([node])\n+          code = compile(mod, '<stdin>', 'exec')\n+          exec(code)\n       except:\n         raise Exception(traceback.format_exc())\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/spark/src/main/resources/python/zeppelin_pyspark.py",
                "sha": "3bccd496a08e95560c8a24eed6eac7131f3d1fa4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/zeppelin-distribution/src/assemble/distribution.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-distribution/src/assemble/distribution.xml?ref=438dbca6868f2c65a4683f1e6f6cd4dd1582967f",
                "deletions": 2,
                "filename": "zeppelin-distribution/src/assemble/distribution.xml",
                "patch": "@@ -29,7 +29,7 @@\n  \n   <dependencySets>\n     <dependencySet>\n-      <!-- Enable access to all projects in the current multimodule build! \n+      <!-- Enable access to all projects in the current multimodule build!\n       <useAllReactorProjects>true</useAllReactorProjects> -->\n       <!-- Now, select which projects to include in this module-set. -->\n       <includes>\n@@ -92,4 +92,3 @@\n   </fileSets>-->\n \n </assembly>\n-",
                "raw_url": "https://github.com/apache/zeppelin/raw/438dbca6868f2c65a4683f1e6f6cd4dd1582967f/zeppelin-distribution/src/assemble/distribution.xml",
                "sha": "4035cfdf6f18112692b43dc5f6a40ed1f175d8e3",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-1345 - Create a custom matplotlib backend that natively supports inline plotting in a python interpreter cell\n\n### What is this PR for?\n\nThis PR is the first of two major steps needed to improve matplotlib integration in Zeppelin (ZEPPELIN-1344). The latter, which is a plotting backend with fully interactive tools enabled, will be done afterwards in a separate PR. This PR specifically for automatically displaying output from calls to matplotlib plotting functions inline with each paragraph. Thanks to the addition of post-execute hooks (ZEPPELIN-1423), there is no need to call any `show()` function to display an inline plot, just like in Jupyter.\n### What type of PR is it?\n\nImprovement\n### Todos\n\nThe main code has been written and anyone who reads this is encouraged to test it, but there are a few minor todos:\n- [x] - Add unit tests\n- [x] - Add documentation\n- [x] - Add screenshot showing iterative plotting with angular mode\n### What is the Jira issue?\n\n[ZEPPELIN-1345](https://issues.apache.org/jira/browse/ZEPPELIN-1345)\n### How should this be tested?\n\nIn a pyspark or python paragraph, enter and run\n\n``` python\nimport matplotlib.pyplot as plt\nplt.plot([1, 2, 3])\n```\n\nThe plot should be displayed automatically without calling any `show()` function whatsoever. A special method called `configure_mpl()` can also be used to modify the inline plotting behavior. For example,\n\n``` python\nz.configure_mpl(close=False, angular=True)\nplt.plot([1, 2, 3])\n```\n\nallows for iterative updates to the plot provided you have PY4J installed for your python installation (which of course is always the case if you use pypsark). To clarify, this feature only currently works with pyspark (not python as there are no `angularBind()` and `angularUnbind()` methods yet). Doing something like:\n\n```\nplt.plot([3, 2, 1])\n```\n\nwill update the plot that was generated by the previous paragraph by leveraging Zeppelin's Angular Display System. However, by setting `close=False`, matplotlib will no longer automatically close figures so it is now up to the user to explicitly close each figure instance they create. There's quite a bit more options for `z.configure_mpl()`, but I will save that discussion for the documentation.\n### Screenshots (if appropriate)\n![img](http://i.imgur.com/e1xHKnV.gif)\n\n### Questions:\n- Does the licenses files need update? No\n- Is there breaking changes for older versions? No\n- Does this needs documentation? Yes\n\nAuthor: Alex Goodman <agoodm@users.noreply.github.com>\n\nCloses #1534 from agoodm/ZEPPELIN-1345 and squashes the following commits:\n\n9ef6ff7 [Alex Goodman] Move mpl backend files to /interpreter\n24f89c6 [Alex Goodman] Catch potential NullPointerExceptions from hook registry\nbdb584e [Alex Goodman] Make sure expressions are printed when no plots are shown\n22b6fe4 [Alex Goodman] Remove unused variable\nd3d1aa0 [Alex Goodman] Fix CI test failure\nc90d204 [Alex Goodman] Update spark.md\nbcf0bf3 [Alex Goodman] Update python.md for new matplotlib integration\nc9b65a5 [Alex Goodman] Add iterative plotting example image\n8029a05 [Alex Goodman] Update python/README.md\nf2d9e86 [Alex Goodman] Exclude tests are excluded in python/pom.xml\n86b1c90 [Alex Goodman] Fix tutorial notebook not loading\nc37b00f [Alex Goodman] Fix legend in tutorial notebook\na321d79 [Alex Goodman] Update python.md\n82350e3 [Alex Goodman] Update matplotlib tutorial notebook\n9792f97 [Alex Goodman] Add unit tests\n8b9b973 [Alex Goodman] Fix NullPointerExceptions in unit tests\n82135ad [Alex Goodman] Removed unused variable\nf9c9498 [Alex Goodman] Added support for Angular Display System\nedf750a [Alex Goodman] Add new matplotlib backend for python/pyspark interpreters",
        "parent": "https://github.com/apache/zeppelin/commit/34621717df173749f677d02ace334870d06f529d",
        "patched_files": [
            "spark.md",
            "pom.xml",
            "note.json",
            "bootstrap.py",
            "distribution.xml",
            "matplotlibAngularExample.gif",
            "backend_zinline.py",
            "mpl_config.py",
            "zeppelin_pyspark.py",
            "PySparkInterpreter.java",
            ".gitignore",
            "PythonInterpreter.java",
            "python.md",
            "README.md"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "PythonInterpreterMatplotlibTest.java",
            "PySparkInterpreterTest.java",
            "PythonInterpreterTest.java"
        ]
    },
    "zeppelin_47ac1d4": {
        "bug_id": "zeppelin_47ac1d4",
        "commit": "https://github.com/apache/zeppelin/commit/47ac1d41e7ec18a16c6144460fbbc35877d71a11",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/zeppelin/blob/47ac1d41e7ec18a16c6144460fbbc35877d71a11/docs/rest-api/rest-interpreter.md",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/rest-api/rest-interpreter.md?ref=47ac1d41e7ec18a16c6144460fbbc35877d71a11",
                "deletions": 5,
                "filename": "docs/rest-api/rest-interpreter.md",
                "patch": "@@ -198,7 +198,10 @@ The role of registered interpreters, settings and interpreters group are describ\n     </tr>\n     <tr>\n       <td>Fail code</td>\n-      <td> 500 </td>\n+      <td>\n+          400 if the input json is empty <br/>\n+          500 for any other errors\n+      </td>\n     </tr>\n     <tr>\n       <td>Sample JSON input</td>\n@@ -219,7 +222,9 @@ The role of registered interpreters, settings and interpreters group are describ\n   \"dependencies\": [\n     {\n       \"groupArtifactVersion\": \"groupId:artifactId:version\",\n-      \"exclusions\": \"groupId:artifactId\"\n+      \"exclusions\": [\n+        \"groupId:artifactId\"\n+      ]\n     }\n   ]\n }\n@@ -249,7 +254,9 @@ The role of registered interpreters, settings and interpreters group are describ\n     \"dependencies\": [\n       {\n         \"groupArtifactVersion\": \"groupId:artifactId:version\",\n-        \"exclusions\": \"groupId:artifactId\"\n+        \"exclusions\": [\n+          \"groupId:artifactId\"\n+        ]\n       }\n     ]\n   }\n@@ -298,7 +305,9 @@ The role of registered interpreters, settings and interpreters group are describ\n   \"dependencies\": [\n     {\n       \"groupArtifactVersion\": \"groupId:artifactId:version\",\n-      \"exclusions\": \"groupId:artifactId\"\n+      \"exclusions\": [\n+        \"groupId:artifactId\"\n+      ]\n     }\n   ]\n }\n@@ -328,7 +337,9 @@ The role of registered interpreters, settings and interpreters group are describ\n     \"dependencies\": [\n       {\n         \"groupArtifactVersion\": \"groupId:artifactId:version\",\n-        \"exclusions\": \"groupId:artifactId\"\n+        \"exclusions\": [\n+          \"groupId:artifactId\"\n+        ]\n       }\n     ]\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/47ac1d41e7ec18a16c6144460fbbc35877d71a11/docs/rest-api/rest-interpreter.md",
                "sha": "75b0d90763e8fe474c8f8e9c091591dd2d18e552",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/47ac1d41e7ec18a16c6144460fbbc35877d71a11/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java?ref=47ac1d41e7ec18a16c6144460fbbc35877d71a11",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "patch": "@@ -90,6 +90,9 @@ public Response newSettings(String message) {\n     try {\n       NewInterpreterSettingRequest request =\n           gson.fromJson(message, NewInterpreterSettingRequest.class);\n+      if (request == null) {\n+        return new JsonResponse<>(Status.BAD_REQUEST).build();\n+      }\n       Properties p = new Properties();\n       p.putAll(request.getProperties());\n       InterpreterSetting interpreterSetting = interpreterFactory",
                "raw_url": "https://github.com/apache/zeppelin/raw/47ac1d41e7ec18a16c6144460fbbc35877d71a11/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "sha": "6025b52c7f1d6c22d2e2c507e53287a59515f362",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/47ac1d41e7ec18a16c6144460fbbc35877d71a11/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java?ref=47ac1d41e7ec18a16c6144460fbbc35877d71a11",
                "deletions": 0,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "patch": "@@ -119,6 +119,15 @@ public void testSettingsCRUD() throws IOException {\n     delete.releaseConnection();\n   }\n \n+  @Test\n+  public void testSettingsCreateWithEmptyJson() throws IOException {\n+    // Call Create Setting REST API\n+    PostMethod post = httpPost(\"/interpreter/setting/\", \"\");\n+    LOG.info(\"testSettingCRUD create response\\n\" + post.getResponseBodyAsString());\n+    assertThat(\"test create method:\", post, isBadRequest());\n+    post.releaseConnection();\n+  }\n+\n   @Test\n   public void testInterpreterAutoBinding() throws IOException {\n     // create note",
                "raw_url": "https://github.com/apache/zeppelin/raw/47ac1d41e7ec18a16c6144460fbbc35877d71a11/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "sha": "1ed3567b5f0d5b2b652303a9138eda6a42c3da64",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-728] Can't POST interpreter setting (CorsFilter?)\n\n### What is this PR for?\nThis handles the NPE when the input json is empty for the interpreter setting POST request.\n\n### What type of PR is it?\nBug Fix\n\n### Todos\nNA\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-728\n\n### How should this be tested?\nWhen empty json is sent for interpreter setting POST request, 400 status code should be returned.\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Kavin <kavin.kumar@imaginea.com>\nAuthor: Kavin Kumar <junokavin@gmail.com>\n\nCloses #1345 from kavinkumarks/zeppelin-728-fix-NPE-intepreter-setting-post and squashes the following commits:\n\n7ab1117 [Kavin] Updated the error codes in the REST API doc.\n3397fb0 [Kavin Kumar] Handled NPE when the json is empty for interpreter setting POST request and corrected the json in the REST API doc.",
        "parent": "https://github.com/apache/zeppelin/commit/88c257a0971a4440b3a90a98d42a51f28d8c9233",
        "patched_files": [
            "rest-interpreter.md",
            "InterpreterRestApi.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterRestApiTest.java"
        ]
    },
    "zeppelin_4fe32f5": {
        "bug_id": "zeppelin_4fe32f5",
        "commit": "https://github.com/apache/zeppelin/commit/4fe32f5174f39dc630e08f8f444325e78afe3e1f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/4fe32f5174f39dc630e08f8f444325e78afe3e1f/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java?ref=4fe32f5174f39dc630e08f8f444325e78afe3e1f",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java",
                "patch": "@@ -85,7 +85,7 @@ public void cancel(InterpreterContext context) throws InterpreterException {\n \n   @Override\n   public FormType getFormType() throws InterpreterException {\n-    return null;\n+    return FormType.NATIVE;\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/zeppelin/raw/4fe32f5174f39dc630e08f8f444325e78afe3e1f/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java",
                "sha": "137ebed5001eda31bf2de6b6812ff5d40091fdb9",
                "status": "modified"
            }
        ],
        "message": "[hotfix] FIX NPE in ConfInterpreter",
        "parent": "https://github.com/apache/zeppelin/commit/44a49fdf68ecc8d048f1cf026df4a74c792da7ad",
        "patched_files": [
            "ConfInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "ConfInterpreterTest.java"
        ]
    },
    "zeppelin_549bce6": {
        "bug_id": "zeppelin_549bce6",
        "commit": "https://github.com/apache/zeppelin/commit/549bce6738ffd7f460867d3f5ee00a9e2ec14125",
        "file": [
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/zeppelin/blob/549bce6738ffd7f460867d3f5ee00a9e2ec14125/kylin/src/main/java/org/apache/zeppelin/kylin/KylinErrorResponse.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/kylin/src/main/java/org/apache/zeppelin/kylin/KylinErrorResponse.java?ref=549bce6738ffd7f460867d3f5ee00a9e2ec14125",
                "deletions": 0,
                "filename": "kylin/src/main/java/org/apache/zeppelin/kylin/KylinErrorResponse.java",
                "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zeppelin.kylin;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import org.apache.zeppelin.common.JsonSerializable;\n+\n+/**\n+ * class for Kylin Error Response.\n+ */\n+class KylinErrorResponse implements JsonSerializable {\n+  private static final Gson gson = new Gson();\n+\n+  private String stacktrace;\n+  private String exception;\n+  private String url;\n+  private String code;\n+  private Object data;\n+  private String msg;\n+\n+  public KylinErrorResponse(String stacktrace, String exception, String url,\n+      String code, Object data, String msg) {\n+    this.stacktrace = stacktrace;\n+    this.exception = exception;\n+    this.url = url;\n+    this.code = code;\n+    this.data = data;\n+    this.msg = msg;\n+  }\n+\n+  public String getException() {\n+    return exception;\n+  }\n+\n+  public String toJson() {\n+    return gson.toJson(this);\n+  }\n+\n+  public static KylinErrorResponse fromJson(String json) {\n+    try {\n+      return gson.fromJson(json, KylinErrorResponse.class);\n+    } catch (JsonSyntaxException ex) {\n+      return null;\n+    }\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/549bce6738ffd7f460867d3f5ee00a9e2ec14125/kylin/src/main/java/org/apache/zeppelin/kylin/KylinErrorResponse.java",
                "sha": "00439e8c62605448ed952812154c9f487b0f6399",
                "status": "added"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/zeppelin/blob/549bce6738ffd7f460867d3f5ee00a9e2ec14125/kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java?ref=549bce6738ffd7f460867d3f5ee00a9e2ec14125",
                "deletions": 28,
                "filename": "kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.zeppelin.kylin;\n \n import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.io.IOUtils;\n import org.apache.http.HttpResponse;\n import org.apache.http.client.HttpClient;\n import org.apache.http.client.methods.HttpPost;\n@@ -30,9 +31,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.BufferedReader;\n import java.io.IOException;\n-import java.io.InputStreamReader;\n import java.util.List;\n import java.util.Properties;\n import java.util.regex.Matcher;\n@@ -166,28 +165,42 @@ public String getSQL(String cmd) {\n   }\n \n   private InterpreterResult executeQuery(String sql) throws IOException {\n-\n     HttpResponse response = prepareRequest(sql);\n+    String result;\n \n-    if (response.getStatusLine().getStatusCode() != 200) {\n-      logger.error(\"failed to execute query: \" + response.getEntity().getContent().toString());\n-      return new InterpreterResult(InterpreterResult.Code.ERROR,\n-          \"Failed : HTTP error code \" + response.getStatusLine().getStatusCode());\n-    }\n-\n-    BufferedReader br = new BufferedReader(\n-        new InputStreamReader((response.getEntity().getContent())));\n-    StringBuilder sb = new StringBuilder();\n+    try {\n+      int code = response.getStatusLine().getStatusCode();\n+      result = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n+\n+      if (code != 200) {\n+        StringBuilder errorMessage = new StringBuilder(\"Failed : HTTP error code \" + code + \" .\");\n+        logger.error(\"Failed to execute query: \" + result);\n+\n+        KylinErrorResponse kylinErrorResponse = KylinErrorResponse.fromJson(result);\n+        if (kylinErrorResponse == null) {\n+          logger.error(\"Cannot get json from string: \" + result);\n+          // when code is 401, the response is html, not json\n+          if (code == 401) {\n+            errorMessage.append(\" Error message: Unauthorized. This request requires \"\n+                + \"HTTP authentication. Please make sure your have set your credentials \"\n+                + \"correctly.\");\n+          } else {\n+            errorMessage.append(\" Error message: \" + result + \" .\");\n+          }\n+        } else {\n+          String exception = kylinErrorResponse.getException();\n+          logger.error(\"The exception is \" + exception);\n+          errorMessage.append(\" Error message: \" + exception + \" .\");\n+        }\n \n-    String output;\n-    logger.info(\"Output from Server .... \\n\");\n-    while ((output = br.readLine()) != null) {\n-      logger.info(output);\n-      sb.append(output).append('\\n');\n+        return new InterpreterResult(InterpreterResult.Code.ERROR, errorMessage.toString());\n+      }\n+    } catch (NullPointerException | IOException e) {\n+      throw new IOException(e);\n     }\n-    InterpreterResult rett = new InterpreterResult(InterpreterResult.Code.SUCCESS, \n-        formatResult(sb.toString()));\n-    return rett;\n+\n+    return new InterpreterResult(InterpreterResult.Code.SUCCESS,\n+        formatResult(result));\n   }\n \n   String formatResult(String msg) {\n@@ -205,16 +218,18 @@ String formatResult(String msg) {\n       table = mr.group(1);\n     }\n \n-    String[] row = table.split(\"],\\\\[\");\n-    for (int i = 0; i < row.length; i++) {\n-      String[] col = row[i].split(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\", -1);\n-      for (int j = 0; j < col.length; j++) {\n-        if (col[j] != null) {\n-          col[j] = col[j].replaceAll(\"^\\\"|\\\"$\", \"\");\n+    if (table != null && !table.isEmpty()) {\n+      String[] row = table.split(\"],\\\\[\");\n+      for (int i = 0; i < row.length; i++) {\n+        String[] col = row[i].split(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\", -1);\n+        for (int j = 0; j < col.length; j++) {\n+          if (col[j] != null) {\n+            col[j] = col[j].replaceAll(\"^\\\"|\\\"$\", \"\");\n+          }\n+          res.append(col[j] + \" \\t\");\n         }\n-        res.append(col[j] + \" \\t\");\n+        res.append(\" \\n\");\n       }\n-      res.append(\" \\n\");\n     }\n     return res.toString();\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/549bce6738ffd7f460867d3f5ee00a9e2ec14125/kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java",
                "sha": "c7cd689a74525579d77936bd229b0079ed95bd37",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/zeppelin/blob/549bce6738ffd7f460867d3f5ee00a9e2ec14125/kylin/src/test/java/org/apache/zeppelin/kylin/KylinInterpreterTest.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/kylin/src/test/java/org/apache/zeppelin/kylin/KylinInterpreterTest.java?ref=549bce6738ffd7f460867d3f5ee00a9e2ec14125",
                "deletions": 0,
                "filename": "kylin/src/test/java/org/apache/zeppelin/kylin/KylinInterpreterTest.java",
                "patch": "@@ -108,6 +108,30 @@ public void testParseResult() {\n     Assert.assertEquals(expected, actual);\n   }\n \n+  @Test\n+  public void testParseEmptyResult() {\n+    String msg = \"{\\\"columnMetas\\\":[{\\\"isNullable\\\":1,\\\"displaySize\\\":256,\\\"label\\\":\\\"COUNTRY\\\",\\\"name\\\":\\\"COUNTRY\\\",\"\n+        + \"\\\"schemaName\\\":\\\"DEFAULT\\\",\\\"catelogName\\\":null,\\\"tableName\\\":\\\"SALES_TABLE\\\",\\\"precision\\\":256,\"\n+        + \"\\\"scale\\\":0,\\\"columnType\\\":12,\\\"columnTypeName\\\":\\\"VARCHAR\\\",\\\"writable\\\":false,\\\"readOnly\\\":true,\"\n+        + \"\\\"definitelyWritable\\\":false,\\\"autoIncrement\\\":false,\\\"caseSensitive\\\":true,\\\"searchable\\\":false,\"\n+        + \"\\\"currency\\\":false,\\\"signed\\\":true},{\\\"isNullable\\\":1,\\\"displaySize\\\":256,\\\"label\\\":\\\"CURRENCY\\\",\"\n+        + \"\\\"name\\\":\\\"CURRENCY\\\",\\\"schemaName\\\":\\\"DEFAULT\\\",\\\"catelogName\\\":null,\\\"tableName\\\":\\\"SALES_TABLE\\\",\"\n+        + \"\\\"precision\\\":256,\\\"scale\\\":0,\\\"columnType\\\":12,\\\"columnTypeName\\\":\\\"VARCHAR\\\",\\\"writable\\\":false,\"\n+        + \"\\\"readOnly\\\":true,\\\"definitelyWritable\\\":false,\\\"autoIncrement\\\":false,\\\"caseSensitive\\\":true,\"\n+        + \"\\\"searchable\\\":false,\\\"currency\\\":false,\\\"signed\\\":true},{\\\"isNullable\\\":0,\\\"displaySize\\\":19,\"\n+        + \"\\\"label\\\":\\\"COUNT__\\\",\\\"name\\\":\\\"COUNT__\\\",\\\"schemaName\\\":\\\"DEFAULT\\\",\\\"catelogName\\\":null,\"\n+        + \"\\\"tableName\\\":\\\"SALES_TABLE\\\",\\\"precision\\\":19,\\\"scale\\\":0,\\\"columnType\\\":-5,\\\"columnTypeName\\\":\"\n+        + \"\\\"BIGINT\\\",\\\"writable\\\":false,\\\"readOnly\\\":true,\\\"definitelyWritable\\\":false,\\\"autoIncrement\\\":false,\"\n+        + \"\\\"caseSensitive\\\":true,\\\"searchable\\\":false,\\\"currency\\\":false,\\\"signed\\\":true}],\\\"results\\\":\"\n+        + \"[],\" + \"\\\"cube\\\":\\\"Sample_Cube\\\",\\\"affectedRowCount\\\":0,\\\"isException\\\":false,\\\"exceptionMessage\\\":null,\"\n+        + \"\\\"duration\\\":134,\\\"totalScanCount\\\":1,\\\"hitExceptionCache\\\":false,\\\"storageCacheUsed\\\":false,\"\n+        + \"\\\"partial\\\":false}\";\n+    String expected=\"%table COUNTRY \\tCURRENCY \\tCOUNT__ \\t \\n\";\n+    KylinInterpreter t = new MockKylinInterpreter(getDefaultProperties());\n+    String actual = t.formatResult(msg);\n+    Assert.assertEquals(expected, actual);\n+  }\n+\n   private Properties getDefaultProperties() {\n     Properties prop = new Properties();\n     prop.put(\"kylin.api.username\", \"ADMIN\");",
                "raw_url": "https://github.com/apache/zeppelin/raw/549bce6738ffd7f460867d3f5ee00a9e2ec14125/kylin/src/test/java/org/apache/zeppelin/kylin/KylinInterpreterTest.java",
                "sha": "35f0f3c2ebb35818716d96c6eee8bb373d717430",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-3014] NPE bug fix and Error message enhancement with Kylin Interpreter\n\n### What is this PR for?\nA few sentences describing the overall goals of the pull request's commits.\nFirst time? Check out the contributing guide - https://zeppelin.apache.org/contribution/contributions.html\n\n### What type of PR is it?\nBug Fix\n\n### Todos\n* [ ] - Task\n\n### What is the Jira issue?\n* https://issues.apache.org/jira/browse/ZEPPELIN-3014\n\n### How should this be tested?\n*  Setup Travis CI as described on https://zeppelin.apache.org/contribution/contributions.html#continuous-integration\n* Use existing unit tests in kylin module.\n\n### Screenshots (if appropriate)\n\n#### before: NPE when result set is empty\n![image](https://user-images.githubusercontent.com/18542573/32154048-f1b8ba58-bcfb-11e7-98cc-98cdf484f2d5.png)\n#### after: no NPE when result set is empty, just an empty table\n![image](https://user-images.githubusercontent.com/18542573/32154069-110215d0-bcfc-11e7-87e9-cc049001f1c7.png)\n\n#### before: when query fails, only error code is returned, no error message\n![image](https://user-images.githubusercontent.com/18542573/32154088-29651938-bcfc-11e7-9e66-cd2cfccba054.png)\n#### after: when query fails, both error code and error message are displayed to users\n![image](https://user-images.githubusercontent.com/18542573/32154096-3d3ab01c-bcfc-11e7-8cf3-d710d96b8c5a.png)\n\n### Questions:\n* Does the licenses files need update? No.\n* Is there breaking changes for older versions? No.\n* Does this needs documentation? No.\n\nAuthor: Liu <jinxliu@ebay.com>\n\nCloses #2645 from jinxliu/kylin-intp-new and squashes the following commits:\n\nd5692bf [Liu] refactor\n85b6424 [Liu] add test for empty result set\n4596470 [Liu] ZEPPELIN-3014: NPE bug fix and Error message enhancement with Kylin Interpreter",
        "parent": "https://github.com/apache/zeppelin/commit/3505625c26a45df14d6412b73da0b33aac68e908",
        "patched_files": [
            "KylinErrorResponse.java",
            "KylinInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "KylinInterpreterTest.java"
        ]
    },
    "zeppelin_5d09a7f": {
        "bug_id": "zeppelin_5d09a7f",
        "commit": "https://github.com/apache/zeppelin/commit/5d09a7f836ebaddd40e644ef82d80320570364aa",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/5d09a7f836ebaddd40e644ef82d80320570364aa/markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java?ref=5d09a7f836ebaddd40e644ef82d80320570364aa",
                "deletions": 2,
                "filename": "markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java",
                "patch": "@@ -41,8 +41,10 @@ public PegdownParser() {\n   @Override\n   public String render(String markdownText) {\n     String html = \"\";\n-    String parsed = processor.markdownToHtml(markdownText);\n-\n+    String parsed;\n+    synchronized (processor) {\n+      parsed = processor.markdownToHtml(markdownText);\n+    }\n     if (null == parsed) {\n       throw new RuntimeException(\"Cannot parse markdown text to HTML using pegdown\");\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/5d09a7f836ebaddd40e644ef82d80320570364aa/markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java",
                "sha": "fb99f0510e481387a141868efea46e758d9c8ecf",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/zeppelin/blob/5d09a7f836ebaddd40e644ef82d80320570364aa/markdown/src/test/java/org/apache/zeppelin/markdown/PegdownParserTest.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/markdown/src/test/java/org/apache/zeppelin/markdown/PegdownParserTest.java?ref=5d09a7f836ebaddd40e644ef82d80320570364aa",
                "deletions": 4,
                "filename": "markdown/src/test/java/org/apache/zeppelin/markdown/PegdownParserTest.java",
                "patch": "@@ -19,24 +19,26 @@\n \n import static org.junit.Assert.assertEquals;\n \n+import java.util.ArrayList;\n import java.util.Properties;\n import org.apache.zeppelin.interpreter.InterpreterResult;\n \n import static org.apache.zeppelin.markdown.PegdownParser.wrapWithMarkdownClassDiv;\n import static org.junit.Assert.assertThat;\n \n import org.hamcrest.CoreMatchers;\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.*;\n+import org.junit.rules.ErrorCollector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class PegdownParserTest {\n   Logger logger = LoggerFactory.getLogger(PegdownParserTest.class);\n   Markdown md;\n \n+  @Rule\n+  public ErrorCollector collector = new ErrorCollector();\n+\n   @Before\n   public void setUp() throws Exception {\n     Properties props = new Properties();\n@@ -50,6 +52,35 @@ public void tearDown() throws Exception {\n     md.close();\n   }\n \n+  @Test\n+  public void testMultipleThread() {\n+    ArrayList<Thread> arrThreads = new ArrayList<Thread>();\n+    for (int i = 0; i < 10; i++) {\n+      Thread t = new Thread() {\n+        public void run() {\n+          String r1 = null;\n+          try {\n+            r1 = md.interpret(\"# H1\", null).code().name();\n+          } catch (Exception e) {\n+            logger.error(\"testTestMultipleThread failed to interpret\", e);\n+          }\n+          collector.checkThat(\"SUCCESS\",\n+              CoreMatchers.containsString(r1));\n+        }\n+      };\n+      t.start();\n+      arrThreads.add(t);\n+    }\n+\n+    for (int i = 0; i < 10; i++) {\n+      try {\n+        arrThreads.get(i).join();\n+      } catch (InterruptedException e) {\n+        logger.error(\"testTestMultipleThread failed to join threads\", e);\n+      }\n+    }\n+  }\n+\n   @Test\n   public void testHeader() {\n     InterpreterResult r1 = md.interpret(\"# H1\", null);",
                "raw_url": "https://github.com/apache/zeppelin/raw/5d09a7f836ebaddd40e644ef82d80320570364aa/markdown/src/test/java/org/apache/zeppelin/markdown/PegdownParserTest.java",
                "sha": "2e1d85750e8bf5dbf192b85b1903164d0693f2ee",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-3112: Markdown interpreter fails with NPE\n\n### What is this PR for?\nSince pegdown-parser is not thread-safe while trying to run multiple MarkDown paragraphs at once, sometimes it fails to render HTML.\nRef: https://github.com/sirthias/pegdown/blob/master/src/main/java/org/pegdown/PegDownProcessor.java#L32\n\n### What type of PR is it?\n[Improvement]\n\n### What is the Jira issue?\n* [ZEPPELIN-3112](https://issues.apache.org/jira/browse/ZEPPELIN-3112)\n\n### How should this be tested?\n* This happens rarely, when you try to run all paragraph from UI which has more the 5-6 `%md` paragraph. This is hard to reproduce in 0.8.0, but can easily be done via 0.7.3. Also, have added a sample [notebook](https://issues.apache.org/jira/secure/attachment/12903037/Test%20MD%20fail.json) in the parent JIRA\n\n* Have added test case to verify.\n\n### Questions:\n* Does the licenses files need update? N/A\n* Is there breaking changes for older versions? N/A\n* Does this needs documentation? N/A\n\nAuthor: Prabhjyot Singh <prabhjyotsingh@gmail.com>\n\nCloses #2711 from prabhjyotsingh/ZEPPELIN-3112 and squashes the following commits:\n\ne796e52cd [Prabhjyot Singh] ZEPPELIN-3112: call markdownToHtml in synchronized block",
        "parent": "https://github.com/apache/zeppelin/commit/6caf587e17fb6858e769fb2121b8cd66090ff759",
        "patched_files": [
            "PegdownParser.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "PegdownParserTest.java"
        ]
    },
    "zeppelin_623b4ac": {
        "bug_id": "zeppelin_623b4ac",
        "commit": "https://github.com/apache/zeppelin/commit/623b4ace9e5c8f1667bd34c21b944b9d4636a2bd",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/623b4ace9e5c8f1667bd34c21b944b9d4636a2bd/jdbc/src/main/java/org/apache/zeppelin/jdbc/SqlCompleter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/jdbc/src/main/java/org/apache/zeppelin/jdbc/SqlCompleter.java?ref=623b4ace9e5c8f1667bd34c21b944b9d4636a2bd",
                "deletions": 0,
                "filename": "jdbc/src/main/java/org/apache/zeppelin/jdbc/SqlCompleter.java",
                "patch": "@@ -111,6 +111,8 @@ public int complete(String buffer, int cursor, List<CharSequence> candidates) {\n       try {\n         while (schemas.next()) {\n           String schemaName = schemas.getString(\"TABLE_SCHEM\");\n+          if (schemaName == null)\n+            schemaName = \"\";\n           if (schemaFilter.equals(\"\") || schemaFilter == null || schemaName.matches(\n                   schemaFilter.replace(\"_\", \".\").replace(\"%\", \".*?\"))) {\n             res.add(schemaName);",
                "raw_url": "https://github.com/apache/zeppelin/raw/623b4ace9e5c8f1667bd34c21b944b9d4636a2bd/jdbc/src/main/java/org/apache/zeppelin/jdbc/SqlCompleter.java",
                "sha": "bf2a25ea3a9cbdeedf2e8ffd2a225d938380f729",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-2241: JDBC interpreter throws npe on connecting to any db that has a schema with \"null\" name\n\n### What is this PR for?\nA few sentences describing the overall goals of the pull request's commits.\nFirst time? Check out the contributing guide - https://zeppelin.apache.org/contribution/contributions.html\n\nPrevents JDBC interpreter from throwing a stacktrace when the database has a schema with no name (null).\n\n### What type of PR is it?\n[Bug Fix]\n\n### Todos\n* [ ] - Task\n\n### What is the Jira issue?\n* Open an issue on Jira https://issues.apache.org/jira/browse/ZEPPELIN/\n* Put link here, and add [ZEPPELIN-*Jira number*] in PR title, eg. [ZEPPELIN-533]\n\nhttps://issues.apache.org/jira/browse/ZEPPELIN-2241\n\n### How should this be tested?\nOutline the steps to test the PR here.\n\nUse JDBC interpreter to connect to any database that has a schema without a name. Apache Phoenix in particular has such a schema by default.\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update?\n\nNo\n\n* Is there breaking changes for older versions?\n\nNo\n\n* Does this needs documentation?\n\nNo\n\nAuthor: Randy Gelhausen <rgelhau@gmail.com>\n\nCloses #2117 from randerzander/master and squashes the following commits:\n\n49d33f9 [Randy Gelhausen] Removing comment per feedback\n79d8a23 [Randy Gelhausen] Added comment to the change\n0101296 [Randy Gelhausen] ZEPPELIN-2241: JDBC interpreter throws npe on connecting to any db that has a schema with \"null\" name",
        "parent": "https://github.com/apache/zeppelin/commit/1ec6e1265338976d2bb928a8450de5fd8cd0f56d",
        "patched_files": [
            "SqlCompleter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "SqlCompleterTest.java"
        ]
    },
    "zeppelin_6854bdd": {
        "bug_id": "zeppelin_6854bdd",
        "commit": "https://github.com/apache/zeppelin/commit/6854bdd7d31d5b0c4edd7a5b8dfc4c99dc26f3dc",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/6854bdd7d31d5b0c4edd7a5b8dfc4c99dc26f3dc/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java?ref=6854bdd7d31d5b0c4edd7a5b8dfc4c99dc26f3dc",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "patch": "@@ -518,8 +518,10 @@ private ResourceSet getAllResourcesExcept(String interpreterGroupExcludsion) {\n                 return client.resourcePoolGetAll();\n               }\n             });\n-        for (String res : resourceList) {\n-          resourceSet.add(Resource.fromJson(res));\n+        if (resourceList != null) {\n+          for (String res : resourceList) {\n+            resourceSet.add(Resource.fromJson(res));\n+          }\n         }\n       }\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/6854bdd7d31d5b0c4edd7a5b8dfc4c99dc26f3dc/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "sha": "d730db4b40a6ed7b01db051bd168f89a5baf7354",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-3726] Fix NPE for resourceList function \"getAllResourcesExcept\".\n\n### What is this PR for?\nTrivial fix for exclude NPE in org.apache.zeppelin.interpreter.InterpreterSettingManager#getAllResourcesExcept\n\n### What type of PR is it?\nBug Fix\n\n### What is the Jira issue?\n[[ZEPPELIN-3726]](https://issues.apache.org/jira/browse/ZEPPELIN-3726)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Maxim Belousov <mebelousov@ya.ru>\n\nCloses #3147 from mebelousov/DW-17923 and squashes the following commits:\n\nfa1b799c8 [Maxim Belousov] Merge branch 'master' of https://github.com/apache/zeppelin\n60a6d040a [Maxim Belousov] Fix possible NPE for resourceList function \"getAllResourcesExcept\".",
        "parent": "https://github.com/apache/zeppelin/commit/041c8d37782cf05a6a8ddb1103f3f741166111ec",
        "patched_files": [
            "InterpreterSettingManager.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterSettingManagerTest.java"
        ]
    },
    "zeppelin_685eb92": {
        "bug_id": "zeppelin_685eb92",
        "commit": "https://github.com/apache/zeppelin/commit/685eb9249d1c1d821ce57f1ed0559f1539dfbe69",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/685eb9249d1c1d821ce57f1ed0559f1539dfbe69/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java?ref=685eb9249d1c1d821ce57f1ed0559f1539dfbe69",
                "deletions": 2,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "patch": "@@ -53,7 +53,7 @@\n   private static final HashSet<String> EMPTY_HASHSET = Sets.newHashSet();\n   private static boolean isEnabled = false;\n   private static final Logger log = LoggerFactory.getLogger(SecurityUtils.class);\n-  \n+\n   public static void setIsEnabled(boolean value) {\n     isEnabled = value;\n   }\n@@ -147,7 +147,9 @@ public static Collection getRealmsList() {\n                     new SimplePrincipalCollection(subject.getPrincipal(), realm.getName()),\n                     ((LdapRealm) realm).getContextFactory()\n             );\n-            roles = new HashSet<>(auth.getRoles());\n+            if (auth != null) {\n+              roles = new HashSet<>(auth.getRoles());\n+            }\n           } catch (NamingException e) {\n             log.error(\"Can't fetch roles\", e);\n           }",
                "raw_url": "https://github.com/apache/zeppelin/raw/685eb9249d1c1d821ce57f1ed0559f1539dfbe69/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "sha": "f9f5f228ff02d6dad3010c0b019150179f9b2f7f",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-3332 Zeppelin login fails with NPE if ldapRealm.authorizationEnabled is not set true\n\n### What is this PR for?\nSimply fixes NPE by checking for null\n\n### What type of PR is it?\nBug Fix\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-3332\n\n### Questions:\nDoes the licenses files need update? No\nIs there breaking changes for older versions? No\nDoes this needs documentation? No\n\nAuthor: bag_of_tricks <falbani@hortonworks.com>\n\nCloses #2911 from felixalbani/ZEPPELIN-3332 and squashes the following commits:\n\nc6ccf4189 [bag_of_tricks] ZEPPELIN-3332\n622333eb9 [bag_of_tricks] Revert \"ZEPPELIN-3332\"\ndd7d37dac [bag_of_tricks] ZEPPELIN-3332",
        "parent": "https://github.com/apache/zeppelin/commit/7a9572d67e4f02c6ad49ac091d6bc542732c19fc",
        "patched_files": [
            "SecurityUtils.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "SecurityUtilsTest.java"
        ]
    },
    "zeppelin_6bd3cd0": {
        "bug_id": "zeppelin_6bd3cd0",
        "commit": "https://github.com/apache/zeppelin/commit/6bd3cd01ba05e2d43baf1330295c4217abf32f92",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/6bd3cd01ba05e2d43baf1330295c4217abf32f92/zeppelin-zengine/src/main/java/com/nflabs/zeppelin/driver/ZeppelinDriverFactory.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/com/nflabs/zeppelin/driver/ZeppelinDriverFactory.java?ref=6bd3cd01ba05e2d43baf1330295c4217abf32f92",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/com/nflabs/zeppelin/driver/ZeppelinDriverFactory.java",
                "patch": "@@ -56,6 +56,7 @@ public ZeppelinDriverFactory(String driverRootDir, URI [] uriList) throws Zeppel\n \t\t}\n \t\t\n \t\tFile root = new File(driverRootDir);\n+\t\tlogger.info(\"Driver directory \"+root.getAbsolutePath());\n \t\tFile[] drivers = root.listFiles();\n \t\tif (drivers!=null) {\n \t\t\tfor (File d : drivers) {\n@@ -67,6 +68,7 @@ public ZeppelinDriverFactory(String driverRootDir, URI [] uriList) throws Zeppel\n \t\tif (uriList!=null) {\n \t\t\tfor (URI uri : uriList) {\n \t\t\t\turis.put(uri.getScheme(), uri.getSchemeSpecificPart());\n+\t\t\t\tlogger.info(\"Add configuration name=\"+uri.getScheme()+\", connectionUrl=\"+uri.getSchemeSpecificPart());\n \t\t\t\tif (defaultDriverName == null) {\n \t\t\t\t\tdefaultDriverName = uri.getScheme();\n \t\t\t\t}\n@@ -130,7 +132,7 @@ private URLClassLoader loadLibrary(File path){\n \t\t\tReflections reflections = new Reflections(packages);\n \t\t\tSet<Class<? extends ZeppelinDriver>> driverClasses = reflections.getSubTypesOf(ZeppelinDriver.class);\n \t\t\tfor(Class c : driverClasses){\n-\t\t\t\tif(MockDriver.class.isAssignableFrom(c)==false){\n+\t\t\t\tif(c!=null && MockDriver.class.isAssignableFrom(c)==false){\n \t\t\t\t\tlogger.info(\"Found driver \"+c.getName()+\" cl=\"+cl);\n \t\t\t\t\tConstructor<ZeppelinDriver> constructor = c.getConstructor(new Class []{});\n \t\t\t\t\tZeppelinDriver driver = constructor.newInstance();\n@@ -191,6 +193,9 @@ private URLClassLoader loadLibrary(File path){\n \t */\n \tpublic ZeppelinDriver getDriver(String name) throws ZeppelinDriverException{\n \t\tString uri = uris.get(name);\n+\t\tif(uri==null) {\n+\t\t\tthrow new ZeppelinDriverException(\"Can't find uri from name \"+name);\n+\t\t}\n \t\ttry {\n \t\t\treturn getDriverByUrl(uri);\n \t\t} catch (Exception e) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/6bd3cd01ba05e2d43baf1330295c4217abf32f92/zeppelin-zengine/src/main/java/com/nflabs/zeppelin/driver/ZeppelinDriverFactory.java",
                "sha": "ff43eb91f1dd71ed53d86d7fa435fcc15adca5d8",
                "status": "modified"
            }
        ],
        "message": "Handle NPE",
        "parent": "https://github.com/apache/zeppelin/commit/b2a302f67e901de0b22f6b39a71fd8ac24c5521e",
        "patched_files": [
            "ZeppelinDriverFactory.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "ZeppelinDriverFactoryTest.java"
        ]
    },
    "zeppelin_6caf587": {
        "bug_id": "zeppelin_6caf587",
        "commit": "https://github.com/apache/zeppelin/commit/6caf587e17fb6858e769fb2121b8cd66090ff759",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/LICENSE",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/LICENSE?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "LICENSE",
                "patch": "@@ -257,6 +257,7 @@ The text of each license is also included at licenses/LICENSE-[project]-[version\n     (Apache 2.0) Software under ./bigquery/*  was developed at Google (http://www.google.com/). Licensed under the Apache v2.0 License.\n     (Apache 2.0) Roboto Font (https://github.com/google/roboto/)\n     (Apache 2.0) Gson extra (https://github.com/DanySK/gson-extras)\n+    (Apache 2.0) Nimbus JOSE+JWT (https://bitbucket.org/connect2id/nimbus-jose-jwt/wiki/Home)\n \n ========================================================================\n BSD 3-Clause licenses",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/LICENSE",
                "sha": "f42b12c78e2035484d21eee5d2c14783f16043ff",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/conf/shiro.ini.template",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/conf/shiro.ini.template?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "conf/shiro.ini.template",
                "patch": "@@ -56,6 +56,19 @@ user3 = password4, role2\n #zeppelinHubRealm.zeppelinhubUrl = https://www.zeppelinhub.com\n #securityManager.realms = $zeppelinHubRealm\n \n+## A same for configuring Knox SSO Realm\n+#knoxJwtRealm = org.apache.zeppelin.realm.jwt.KnoxJwtRealm\n+#knoxJwtRealm.providerUrl = https://domain.example.com/\n+#knoxJwtRealm.login = gateway/knoxsso/knoxauth/login.html\n+#knoxJwtRealm.logout = gateway/knoxssout/api/v1/webssout\n+#knoxJwtRealm.redirectParam = originalUrl\n+#knoxJwtRealm.cookieName = hadoop-jwt\n+#knoxJwtRealm.publicKeyPath = /etc/zeppelin/conf/knox-sso.pem\n+#\n+#knoxJwtRealm.groupPrincipalMapping = group.principal.mapping\n+#knoxJwtRealm.principalMapping = principal.mapping\n+#authc = org.apache.zeppelin.realm.jwt.KnoxAuthenticationFilter\n+\n sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager\n \n ### If caching of user is required then uncomment below lines",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/conf/shiro.ini.template",
                "sha": "81b31a2b9d8950b8a97f3816fc0a602a45494841",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/docs/setup/security/shiro_authentication.md",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/setup/security/shiro_authentication.md?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "docs/setup/security/shiro_authentication.md",
                "patch": "@@ -210,6 +210,30 @@ securityManager.realms = $zeppelinHubRealm\n \n > Note: ZeppelinHub is not releated to Apache Zeppelin project.\n \n+### Knox SSO\n+[KnoxSSO](https://knox.apache.org/books/knox-0-13-0/dev-guide.html#KnoxSSO+Integration) provides an abstraction for integrating any number of authentication systems and SSO solutions and enables participating web applications to scale to those solutions more easily. Without the token exchange capabilities offered by KnoxSSO each component UI would need to integrate with each desired solution on its own.\n+\n+To enable this, apply the following change in `conf/shiro.ini` under `[main]` section.\n+\n+```\n+### A sample for configuring Knox JWT Realm\n+knoxJwtRealm = org.apache.zeppelin.realm.jwt.KnoxJwtRealm\n+## Domain of Knox SSO\n+knoxJwtRealm.providerUrl = https://domain.example.com/\n+## Url for login\n+knoxJwtRealm.login = gateway/knoxsso/knoxauth/login.html\n+## Url for logout\n+knoxJwtRealm.logout = gateway/knoxssout/api/v1/webssout\n+knoxJwtRealm.redirectParam = originalUrl\n+knoxJwtRealm.cookieName = hadoop-jwt\n+knoxJwtRealm.publicKeyPath = /etc/zeppelin/conf/knox-sso.pem\n+knoxJwtRealm.groupPrincipalMapping = group.principal.mapping\n+knoxJwtRealm.principalMapping = principal.mapping\n+# This is required if KNOX SSO is enabled, to check if \"knoxJwtRealm.cookieName\" cookie was expired/deleted.  \n+authc = org.apache.zeppelin.realm.jwt.KnoxAuthenticationFilter\n+```\n+\n+\n ## Secure Cookie for Zeppelin Sessions (optional)\n Zeppelin can be configured to set `HttpOnly` flag in the session cookie. With this configuration, Zeppelin cookies can \n not be accessed via client side scripts thus preventing majority of Cross-site scripting (XSS) attacks.",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/docs/setup/security/shiro_authentication.md",
                "sha": "a51f77e7098f6e135c79973c54d6f3e448497423",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/pom.xml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/pom.xml?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 1,
                "filename": "zeppelin-server/pom.xml",
                "patch": "@@ -37,7 +37,6 @@\n     <!--library versions-->\n     <commons.httpclient.version>4.3.6</commons.httpclient.version>\n     <jersey.version>2.22.2</jersey.version>\n-    <hadoop-common.version>2.6.0</hadoop-common.version>\n     <quartz.scheduler.version>2.2.1</quartz.scheduler.version>\n     <jersey.servlet.version>1.13</jersey.servlet.version>\n     <javax.ws.rsapi.version>2.0.1</javax.ws.rsapi.version>\n@@ -214,6 +213,12 @@\n       <artifactId>gson</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>nimbus-jose-jwt</artifactId>\n+      <version>4.41.2</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.quartz-scheduler</groupId>\n       <artifactId>quartz</artifactId>",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/pom.xml",
                "sha": "296d58f01fdcffa1bac17267d9aac056b91d8ef3",
                "status": "modified"
            },
            {
                "additions": 59,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/JWTAuthenticationToken.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/JWTAuthenticationToken.java?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/JWTAuthenticationToken.java",
                "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.realm.jwt;\n+\n+import org.apache.shiro.authc.AuthenticationToken;\n+\n+/**\n+ * Created for org.apache.zeppelin.server\n+ */\n+public class JWTAuthenticationToken implements AuthenticationToken {\n+\n+  private Object userId;\n+  private String token;\n+\n+  public JWTAuthenticationToken(Object userId, String token) {\n+    this.userId = userId;\n+    this.token = token;\n+  }\n+\n+  @Override\n+  public Object getPrincipal() {\n+    return getUserId();\n+  }\n+\n+  @Override\n+  public Object getCredentials() {\n+    return getToken();\n+  }\n+\n+  public Object getUserId() {\n+    return userId;\n+  }\n+\n+  public void setUserId(long userId) {\n+    this.userId = userId;\n+  }\n+\n+  public String getToken() {\n+    return token;\n+  }\n+\n+  public void setToken(String token) {\n+    this.token = token;\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/JWTAuthenticationToken.java",
                "sha": "2214125c7c55da7760fd3de2bd31b1bdaa34862c",
                "status": "added"
            },
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxAuthenticationFilter.java",
                "changes": 71,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxAuthenticationFilter.java?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxAuthenticationFilter.java",
                "patch": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.realm.jwt;\n+\n+import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;\n+import org.apache.shiro.web.servlet.ShiroHttpServletRequest;\n+import org.apache.zeppelin.utils.SecurityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.Cookie;\n+\n+/**\n+ * Created for org.apache.zeppelin.server\n+ */\n+public class KnoxAuthenticationFilter extends FormAuthenticationFilter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(KnoxAuthenticationFilter.class);\n+\n+  protected boolean isAccessAllowed(ServletRequest request,\n+                                    ServletResponse response, Object mappedValue) {\n+\n+    //Check with existing shiro authentication logic\n+    //https://github.com/apache/shiro/blob/shiro-root-1.3.2/web/src/main/java/org/apache/shiro/\n+    // web/filter/authc/AuthenticatingFilter.java#L123-L124\n+    Boolean accessAllowed = super.isAccessAllowed(request, response, mappedValue) ||\n+      !isLoginRequest(request, response) && isPermissive(mappedValue);\n+\n+    if (accessAllowed) {\n+      accessAllowed = false;\n+      KnoxJwtRealm knoxJwtRealm = null;\n+      for (Object realm : SecurityUtils.getRealmsList()) {\n+        if (realm instanceof KnoxJwtRealm) {\n+          knoxJwtRealm = (KnoxJwtRealm) realm;\n+          break;\n+        }\n+      }\n+      if (knoxJwtRealm != null) {\n+        for (Cookie cookie : ((ShiroHttpServletRequest) request).getCookies()) {\n+          if (cookie.getName().equals(knoxJwtRealm.getCookieName())) {\n+            if (knoxJwtRealm.validateToken(cookie.getValue())) {\n+              accessAllowed = true;\n+            }\n+            break;\n+          }\n+        }\n+      } else {\n+        LOGGER.error(\"Looks like this filter is enabled without enabling KnoxJwtRealm, please refer\"\n+            + \" to https://zeppelin.apache.org/docs/latest/security/shiroauthentication.html\"\n+            + \"#knox-sso\");\n+      }\n+    }\n+    return accessAllowed;\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxAuthenticationFilter.java",
                "sha": "de19664f8882f8858d6083bc0e5b48e6218e8d1b",
                "status": "added"
            },
            {
                "additions": 289,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxJwtRealm.java",
                "changes": 289,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxJwtRealm.java?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxJwtRealm.java",
                "patch": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.realm.jwt;\n+\n+import com.nimbusds.jose.JWSObject;\n+import com.nimbusds.jose.JWSVerifier;\n+import com.nimbusds.jose.crypto.RSASSAVerifier;\n+import com.nimbusds.jwt.SignedJWT;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.PublicKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+import java.text.ParseException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.servlet.ServletException;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.security.Groups;\n+import org.apache.shiro.authc.AuthenticationInfo;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authc.SimpleAccount;\n+import org.apache.shiro.authz.AuthorizationInfo;\n+import org.apache.shiro.authz.SimpleAuthorizationInfo;\n+import org.apache.shiro.realm.AuthorizingRealm;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Created for org.apache.zeppelin.server\n+ */\n+public class KnoxJwtRealm extends AuthorizingRealm {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(KnoxJwtRealm.class);\n+\n+  private String providerUrl;\n+  private String redirectParam;\n+  private String cookieName;\n+  private String publicKeyPath;\n+  private String login;\n+  private String logout;\n+\n+  private String principalMapping;\n+  private String groupPrincipalMapping;\n+\n+  private SimplePrincipalMapper mapper = new SimplePrincipalMapper();\n+  /**\n+   * Configuration object needed by for hadoop classes\n+   */\n+  private Configuration hadoopConfig;\n+\n+  /**\n+   * Hadoop Groups implementation.\n+   */\n+  private Groups hadoopGroups;\n+\n+  @Override\n+  protected void onInit() {\n+    super.onInit();\n+    if (principalMapping != null && !principalMapping.isEmpty()\n+        || groupPrincipalMapping != null && !groupPrincipalMapping.isEmpty()) {\n+      try {\n+        mapper.loadMappingTable(principalMapping, groupPrincipalMapping);\n+      } catch (PrincipalMappingException e) {\n+        LOGGER.error(\"PrincipalMappingException in onInit\", e);\n+      }\n+    }\n+\n+    try {\n+      hadoopConfig = new Configuration();\n+      hadoopGroups = new Groups(hadoopConfig);\n+    } catch (final Exception e) {\n+      LOGGER.error(\"Exception in onInit\", e);\n+    }\n+\n+  }\n+\n+  @Override\n+  public boolean supports(AuthenticationToken token) {\n+    return token != null && token instanceof JWTAuthenticationToken;\n+  }\n+\n+\n+  @Override\n+  protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) {\n+    JWTAuthenticationToken upToken = (JWTAuthenticationToken) token;\n+\n+    if (validateToken(upToken.getToken())) {\n+      try {\n+        SimpleAccount account = new SimpleAccount(getName(upToken), upToken.getToken(), getName());\n+        account.addRole(mapGroupPrincipals(getName(upToken)));\n+        return account;\n+      } catch (ParseException e) {\n+        LOGGER.error(\"ParseException in doGetAuthenticationInfo\", e);\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private String getName(JWTAuthenticationToken upToken) throws ParseException {\n+    SignedJWT signed = SignedJWT.parse(upToken.getToken());\n+    String userName = signed.getJWTClaimsSet().getSubject();\n+    return userName;\n+  }\n+\n+  protected boolean validateToken(String token) {\n+    try {\n+      SignedJWT signed = SignedJWT.parse(token);\n+      return validateSignature(signed);\n+    } catch (ParseException ex) {\n+      LOGGER.info(\"ParseException in validateToken\", ex);\n+      return false;\n+    }\n+  }\n+\n+  public static RSAPublicKey parseRSAPublicKey(String pem)\n+      throws IOException, ServletException {\n+    String PEM_HEADER = \"-----BEGIN CERTIFICATE-----\\n\";\n+    String PEM_FOOTER = \"\\n-----END CERTIFICATE-----\";\n+    String fullPem = PEM_HEADER + pem + PEM_FOOTER;\n+    PublicKey key = null;\n+    try {\n+      CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\n+      ByteArrayInputStream is = new ByteArrayInputStream(\n+          FileUtils.readFileToString(new File(pem)).getBytes(\"UTF8\"));\n+      X509Certificate cer = (X509Certificate) fact.generateCertificate(is);\n+      key = cer.getPublicKey();\n+    } catch (CertificateException ce) {\n+      String message = null;\n+      if (pem.startsWith(PEM_HEADER)) {\n+        message = \"CertificateException - be sure not to include PEM header \"\n+            + \"and footer in the PEM configuration element.\";\n+      } else {\n+        message = \"CertificateException - PEM may be corrupt\";\n+      }\n+      throw new ServletException(message, ce);\n+    } catch (UnsupportedEncodingException uee) {\n+      throw new ServletException(uee);\n+    } catch (IOException e) {\n+      throw new IOException(e);\n+    }\n+    return (RSAPublicKey) key;\n+  }\n+\n+  protected boolean validateSignature(SignedJWT jwtToken) {\n+    boolean valid = false;\n+    if (JWSObject.State.SIGNED == jwtToken.getState()) {\n+\n+      if (jwtToken.getSignature() != null) {\n+\n+        try {\n+          RSAPublicKey publicKey = parseRSAPublicKey(publicKeyPath);\n+          JWSVerifier verifier = new RSASSAVerifier(publicKey);\n+          if (verifier != null && jwtToken.verify(verifier)) {\n+            valid = true;\n+          }\n+        } catch (Exception e) {\n+          LOGGER.info(\"Exception in validateSignature\", e);\n+        }\n+      }\n+    }\n+    return valid;\n+  }\n+\n+  @Override\n+  protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n+    Set<String> roles = mapGroupPrincipals(principals.toString());\n+    return new SimpleAuthorizationInfo(roles);\n+  }\n+\n+  /**\n+   * Query the Hadoop implementation of {@link Groups} to retrieve groups for\n+   * provided user.\n+   */\n+  public Set<String> mapGroupPrincipals(final String mappedPrincipalName) {\n+    /* return the groups as seen by Hadoop */\n+    Set<String> groups = null;\n+    try {\n+      hadoopGroups.refresh();\n+      final List<String> groupList = hadoopGroups\n+          .getGroups(mappedPrincipalName);\n+\n+      if (LOGGER.isDebugEnabled()) {\n+        LOGGER.debug(String.format(\"group found %s, %s\",\n+            mappedPrincipalName, groupList.toString()));\n+      }\n+\n+      groups = new HashSet<>(groupList);\n+\n+    } catch (final IOException e) {\n+      if (e.toString().contains(\"No groups found for user\")) {\n+        /* no groups found move on */\n+        LOGGER.info(String.format(\"No groups found for user %s\", mappedPrincipalName));\n+\n+      } else {\n+        /* Log the error and return empty group */\n+        LOGGER.info(String.format(\"errorGettingUserGroups for %s\", mappedPrincipalName));\n+      }\n+      groups = new HashSet();\n+    }\n+    return groups;\n+  }\n+\n+  public String getProviderUrl() {\n+    return providerUrl;\n+  }\n+\n+  public void setProviderUrl(String providerUrl) {\n+    this.providerUrl = providerUrl;\n+  }\n+\n+  public String getRedirectParam() {\n+    return redirectParam;\n+  }\n+\n+  public void setRedirectParam(String redirectParam) {\n+    this.redirectParam = redirectParam;\n+  }\n+\n+  public String getCookieName() {\n+    return cookieName;\n+  }\n+\n+  public void setCookieName(String cookieName) {\n+    this.cookieName = cookieName;\n+  }\n+\n+  public String getPublicKeyPath() {\n+    return publicKeyPath;\n+  }\n+\n+  public void setPublicKeyPath(String publicKeyPath) {\n+    this.publicKeyPath = publicKeyPath;\n+  }\n+\n+  public String getLogin() {\n+    return login;\n+  }\n+\n+  public void setLogin(String login) {\n+    this.login = login;\n+  }\n+\n+  public String getLogout() {\n+    return logout;\n+  }\n+\n+  public void setLogout(String logout) {\n+    this.logout = logout;\n+  }\n+\n+  public String getPrincipalMapping() {\n+    return principalMapping;\n+  }\n+\n+  public void setPrincipalMapping(String principalMapping) {\n+    this.principalMapping = principalMapping;\n+  }\n+\n+  public String getGroupPrincipalMapping() {\n+    return groupPrincipalMapping;\n+  }\n+\n+  public void setGroupPrincipalMapping(String groupPrincipalMapping) {\n+    this.groupPrincipalMapping = groupPrincipalMapping;\n+  }\n+}\n+",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/KnoxJwtRealm.java",
                "sha": "c3e9b77cc880e2342a572b39ae4f0ce5219bf468",
                "status": "added"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMapper.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMapper.java?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMapper.java",
                "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.realm.jwt;\n+\n+/***\n+ * \n+ */\n+public interface PrincipalMapper {\n+\n+  /**\n+   * Load the internal principal mapping table from the provided\n+   * string value which conforms to the following semicolon delimited format:\n+   * actual[,another-actual]=mapped;...\n+   * @param principalMapping\n+   */\n+  public abstract void loadMappingTable(String principalMapping, String groupMapping)\n+      throws PrincipalMappingException;\n+\n+  /**\n+   * Acquire a mapped principal name from the mapping table\n+   * as appropriate. Otherwise, the provided principalName\n+   * will be used.\n+   * @param principalName\n+   * @return principal name to be used in the assertion\n+   */\n+  public abstract String mapUserPrincipal(String principalName);\n+\n+  /**\n+   * Acquire array of group principal names from the mapping table\n+   * as appropriate. Otherwise, return null.\n+   * @param principalName\n+   * @return group principal names to be used in the assertion\n+   */\n+  public abstract String[] mapGroupPrincipal(String principalName);\n+}\n+",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMapper.java",
                "sha": "d96efa4660211a00ee789038628f6cf5482b5b18",
                "status": "added"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMappingException.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMappingException.java?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMappingException.java",
                "patch": "@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.realm.jwt;\n+\n+/***\n+ * {@link System}\n+ */\n+public class PrincipalMappingException extends Exception {\n+\n+  public PrincipalMappingException(String message) {\n+    super(message);\n+  }\n+\n+  public PrincipalMappingException(String message, Exception e) {\n+    super(message, e);\n+  }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/PrincipalMappingException.java",
                "sha": "c3ca02f7431bb84f4988a8c9ace3493d3eada926",
                "status": "added"
            },
            {
                "additions": 126,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/SimplePrincipalMapper.java",
                "changes": 126,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/SimplePrincipalMapper.java?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/SimplePrincipalMapper.java",
                "patch": "@@ -0,0 +1,126 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.realm.jwt;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.StringTokenizer;\n+\n+\n+/***\n+ * \n+ */\n+public class SimplePrincipalMapper implements PrincipalMapper {\n+\n+  public HashMap<String, String[]> principalMappings = null;\n+  public HashMap<String, String[]> groupMappings = null;\n+\n+  public SimplePrincipalMapper() {\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.hadoop.gateway.filter.PrincipalMapper#loadMappingTable(java.lang.String)\n+   */\n+  @Override\n+  public void loadMappingTable(String principalMapping, String groupMapping)\n+      throws PrincipalMappingException {\n+    if (principalMapping != null) {\n+      principalMappings = parseMapping(principalMapping);\n+      groupMappings = parseMapping(groupMapping);\n+    }\n+  }\n+\n+  private HashMap<String, String[]> parseMapping(String mappings)\n+      throws PrincipalMappingException {\n+    if (mappings == null) {\n+      return null;\n+    }\n+    HashMap<String, String[]> table = new HashMap<>();\n+    try {\n+      StringTokenizer t = new StringTokenizer(mappings, \";\");\n+      if (t.hasMoreTokens()) {\n+        do {\n+          String mapping = t.nextToken();\n+          String principals = mapping.substring(0, mapping.indexOf('='));\n+          String value = mapping.substring(mapping.indexOf('=') + 1);\n+          String[] v = value.split(\",\");\n+          String[] p = principals.split(\",\");\n+          for (int i = 0; i < p.length; i++) {\n+            table.put(p[i], v);\n+          }\n+        } while (t.hasMoreTokens());\n+      }\n+      return table;\n+    } catch (Exception e) {\n+      // do not leave table in an unknown state - clear it instead\n+      // no principal mapping will occur\n+      table.clear();\n+      throw new PrincipalMappingException(\n+          \"Unable to load mappings from provided string: \" + mappings\n+              + \" - no principal mapping will be provided.\", e);\n+    }\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.hadoop.gateway.filter.PrincipalMapper#mapPrincipal(java.lang.String)\n+   */\n+  @Override\n+  public String mapUserPrincipal(String principalName) {\n+    String[] p = null;\n+    if (principalMappings != null) {\n+      p = principalMappings.get(principalName);\n+    }\n+    if (p == null) {\n+      return principalName;\n+    }\n+\n+    return p[0];\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.hadoop.gateway.filter.PrincipalMapper#mapPrincipal(java.lang.String)\n+   */\n+  @Override\n+  public String[] mapGroupPrincipal(String principalName) {\n+    String[] groups = null;\n+    String[] wildCardGroups = null;\n+\n+    if (groupMappings != null) {\n+      groups = groupMappings.get(principalName);\n+      wildCardGroups = groupMappings.get(\"*\");\n+      if (groups != null && wildCardGroups != null) {\n+        groups = concat(groups, wildCardGroups);\n+      } else if (wildCardGroups != null) {\n+        return wildCardGroups;\n+      }\n+    }\n+\n+    return groups;\n+  }\n+\n+  /**\n+   * @param groups\n+   * @param wildCardGroups\n+   * @return\n+   */\n+  public static <T> T[] concat(T[] groups, T[] wildCardGroups) {\n+    T[] result = Arrays.copyOf(groups, groups.length + wildCardGroups.length);\n+    System.arraycopy(wildCardGroups, 0, result, groups.length, wildCardGroups.length);\n+    return result;\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/SimplePrincipalMapper.java",
                "sha": "b1948102e6046109b8ee7680d97944dfb3bb97b3",
                "status": "added"
            },
            {
                "additions": 145,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java",
                "changes": 195,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 50,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java",
                "patch": "@@ -16,32 +16,47 @@\n  */\n package org.apache.zeppelin.rest;\n \n-import org.apache.shiro.authc.*;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Cookie;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authc.IncorrectCredentialsException;\n+import org.apache.shiro.authc.LockedAccountException;\n+import org.apache.shiro.authc.UnknownAccountException;\n+import org.apache.shiro.authc.UsernamePasswordToken;\n+import org.apache.shiro.realm.Realm;\n import org.apache.shiro.subject.Subject;\n import org.apache.zeppelin.annotation.ZeppelinApi;\n import org.apache.zeppelin.notebook.NotebookAuthorization;\n+import org.apache.zeppelin.realm.jwt.JWTAuthenticationToken;\n+import org.apache.zeppelin.realm.jwt.KnoxJwtRealm;\n import org.apache.zeppelin.server.JsonResponse;\n import org.apache.zeppelin.ticket.TicketContainer;\n import org.apache.zeppelin.utils.SecurityUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.ws.rs.FormParam;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.Response;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-\n /**\n  * Created for org.apache.zeppelin.rest.message on 17/03/16.\n  */\n \n @Path(\"/login\")\n @Produces(\"application/json\")\n public class LoginRestApi {\n+\n   private static final Logger LOG = LoggerFactory.getLogger(LoginRestApi.class);\n \n   /**\n@@ -52,6 +67,104 @@ public LoginRestApi() {\n   }\n \n \n+  @GET\n+  @ZeppelinApi\n+  public Response getLogin(@Context HttpHeaders headers) {\n+    JsonResponse response = null;\n+    if (isKnoxSSOEnabled()) {\n+      KnoxJwtRealm knoxJwtRealm = getJTWRealm();\n+      Cookie cookie = headers.getCookies().get(knoxJwtRealm.getCookieName());\n+      if (cookie != null && cookie.getValue() != null) {\n+        Subject currentUser = org.apache.shiro.SecurityUtils.getSubject();\n+        if (!currentUser.isAuthenticated()) {\n+          JWTAuthenticationToken token = new JWTAuthenticationToken(null, cookie.getValue());\n+          response = procedeToLogin(currentUser, token);\n+        }\n+      }\n+      if (response == null) {\n+        Map<String, String> data = new HashMap<>();\n+        data.put(\"redirectURL\", constructKnoxUrl(knoxJwtRealm, knoxJwtRealm.getLogin()));\n+        response = new JsonResponse(Status.OK, \"\", data);\n+      }\n+      return response.build();\n+    }\n+    return new JsonResponse(Status.METHOD_NOT_ALLOWED).build();\n+  }\n+\n+  private KnoxJwtRealm getJTWRealm() {\n+    Collection realmsList = SecurityUtils.getRealmsList();\n+    if (realmsList != null) {\n+      for (Iterator<Realm> iterator = realmsList.iterator(); iterator.hasNext(); ) {\n+        Realm realm = iterator.next();\n+        String name = realm.getClass().getName();\n+\n+        LOG.debug(\"RealmClass.getName: \" + name);\n+\n+        if (name.equals(\"org.apache.zeppelin.realm.jwt.KnoxJwtRealm\")) {\n+          return (KnoxJwtRealm) realm;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private boolean isKnoxSSOEnabled() {\n+    Collection realmsList = SecurityUtils.getRealmsList();\n+    if (realmsList != null) {\n+      for (Iterator<Realm> iterator = realmsList.iterator(); iterator.hasNext(); ) {\n+        Realm realm = iterator.next();\n+        String name = realm.getClass().getName();\n+        LOG.debug(\"RealmClass.getName: \" + name);\n+        if (name.equals(\"org.apache.zeppelin.realm.jwt.KnoxJwtRealm\")) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private JsonResponse procedeToLogin(Subject currentUser, AuthenticationToken token) {\n+    JsonResponse response = null;\n+    try {\n+      currentUser.getSession().stop();\n+      currentUser.getSession(true);\n+      currentUser.login(token);\n+\n+      HashSet<String> roles = SecurityUtils.getRoles();\n+      String principal = SecurityUtils.getPrincipal();\n+      String ticket;\n+      if (\"anonymous\".equals(principal)) {\n+        ticket = \"anonymous\";\n+      } else {\n+        ticket = TicketContainer.instance.getTicket(principal);\n+      }\n+\n+      Map<String, String> data = new HashMap<>();\n+      data.put(\"principal\", principal);\n+      data.put(\"roles\", roles.toString());\n+      data.put(\"ticket\", ticket);\n+\n+      response = new JsonResponse(Response.Status.OK, \"\", data);\n+      //if no exception, that's it, we're done!\n+\n+      //set roles for user in NotebookAuthorization module\n+      NotebookAuthorization.getInstance().setRoles(principal, roles);\n+    } catch (UnknownAccountException uae) {\n+      //username wasn't in the system, show them an error message?\n+      LOG.error(\"Exception in login: \", uae);\n+    } catch (IncorrectCredentialsException ice) {\n+      //password didn't match, try again?\n+      LOG.error(\"Exception in login: \", ice);\n+    } catch (LockedAccountException lae) {\n+      //account for that username is locked - can't login.  Show them a message?\n+      LOG.error(\"Exception in login: \", lae);\n+    } catch (AuthenticationException ae) {\n+      //unexpected condition - error?\n+      LOG.error(\"Exception in login: \", ae);\n+    }\n+    return response;\n+  }\n+\n   /**\n    * Post Login\n    * Returns userName & password\n@@ -63,53 +176,18 @@ public LoginRestApi() {\n   @POST\n   @ZeppelinApi\n   public Response postLogin(@FormParam(\"userName\") String userName,\n-                            @FormParam(\"password\") String password) {\n+      @FormParam(\"password\") String password) {\n     JsonResponse response = null;\n     // ticket set to anonymous for anonymous user. Simplify testing.\n     Subject currentUser = org.apache.shiro.SecurityUtils.getSubject();\n     if (currentUser.isAuthenticated()) {\n       currentUser.logout();\n     }\n     if (!currentUser.isAuthenticated()) {\n-      try {\n-        UsernamePasswordToken token = new UsernamePasswordToken(userName, password);\n-        //      token.setRememberMe(true);\n-\n-        currentUser.getSession().stop();\n-        currentUser.getSession(true);\n-        currentUser.login(token);\n-\n-        HashSet<String> roles = SecurityUtils.getRoles();\n-        String principal = SecurityUtils.getPrincipal();\n-        String ticket;\n-        if (\"anonymous\".equals(principal))\n-          ticket = \"anonymous\";\n-        else\n-          ticket = TicketContainer.instance.getTicket(principal);\n \n-        Map<String, String> data = new HashMap<>();\n-        data.put(\"principal\", principal);\n-        data.put(\"roles\", roles.toString());\n-        data.put(\"ticket\", ticket);\n-\n-        response = new JsonResponse(Response.Status.OK, \"\", data);\n-        //if no exception, that's it, we're done!\n-        \n-        //set roles for user in NotebookAuthorization module\n-        NotebookAuthorization.getInstance().setRoles(principal, roles);\n-      } catch (UnknownAccountException uae) {\n-        //username wasn't in the system, show them an error message?\n-        LOG.error(\"Exception in login: \", uae);\n-      } catch (IncorrectCredentialsException ice) {\n-        //password didn't match, try again?\n-        LOG.error(\"Exception in login: \", ice);\n-      } catch (LockedAccountException lae) {\n-        //account for that username is locked - can't login.  Show them a message?\n-        LOG.error(\"Exception in login: \", lae);\n-      } catch (AuthenticationException ae) {\n-        //unexpected condition - error?\n-        LOG.error(\"Exception in login: \", ae);\n-      }\n+      UsernamePasswordToken token = new UsernamePasswordToken(userName, password);\n+\n+      response = procedeToLogin(currentUser, token);\n     }\n \n     if (response == null) {\n@@ -129,9 +207,26 @@ public Response logout() {\n     TicketContainer.instance.removeTicket(SecurityUtils.getPrincipal());\n     currentUser.getSession().stop();\n     currentUser.logout();\n-    response = new JsonResponse(Response.Status.UNAUTHORIZED, \"\", \"\");\n+    if (isKnoxSSOEnabled()) {\n+      KnoxJwtRealm knoxJwtRealm = getJTWRealm();\n+      Map<String, String> data = new HashMap<>();\n+      data.put(\"redirectURL\", constructKnoxUrl(knoxJwtRealm, knoxJwtRealm.getLogout()));\n+      response = new JsonResponse(Status.UNAUTHORIZED, \"\", data);\n+    } else {\n+      response = new JsonResponse(Status.UNAUTHORIZED, \"\", \"\");\n+\n+    }\n     LOG.warn(response.toString());\n     return response.build();\n   }\n \n+  private String constructKnoxUrl(KnoxJwtRealm knoxJwtRealm, String path) {\n+    StringBuilder redirectURL = new StringBuilder(knoxJwtRealm.getProviderUrl());\n+    redirectURL.append(path);\n+    if (knoxJwtRealm.getRedirectParam() != null) {\n+      redirectURL.append(\"?\").append(knoxJwtRealm.getRedirectParam()).append(\"=\");\n+    }\n+    return redirectURL.toString();\n+  }\n+\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java",
                "sha": "3a084cf9e4b79e093d2dc5a9e644178c892e0e42",
                "status": "modified"
            },
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 9,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java",
                "patch": "@@ -17,6 +17,9 @@\n \n package org.apache.zeppelin.rest;\n \n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n import java.io.File;\n import java.io.IOException;\n import java.lang.ref.WeakReference;\n@@ -27,7 +30,6 @@\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.regex.Pattern;\n-\n import org.apache.commons.exec.CommandLine;\n import org.apache.commons.exec.DefaultExecutor;\n import org.apache.commons.exec.PumpStreamHandler;\n@@ -54,10 +56,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.JsonParser;\n-\n public abstract class AbstractTestRestApi {\n \n   protected static final Logger LOG = LoggerFactory.getLogger(AbstractTestRestApi.class);\n@@ -90,6 +88,48 @@\n       \"/api/version = anon\\n\" +\n       \"/** = authc\";\n \n+  private static String zeppelinShiroKnox =\n+      \"[users]\\n\" +\n+      \"admin = password1, admin\\n\" +\n+      \"user1 = password2, role1, role2\\n\" +\n+      \"[main]\\n\" +\n+      \"knoxJwtRealm = org.apache.zeppelin.realm.jwt.KnoxJwtRealm\\n\" +\n+      \"knoxJwtRealm.providerUrl = https://domain.example.com/\\n\" +\n+      \"knoxJwtRealm.login = gateway/knoxsso/knoxauth/login.html\\n\" +\n+      \"knoxJwtRealm.logout = gateway/knoxssout/api/v1/webssout\\n\" +\n+      \"knoxJwtRealm.redirectParam = originalUrl\\n\" +\n+      \"knoxJwtRealm.cookieName = hadoop-jwt\\n\" +\n+      \"knoxJwtRealm.publicKeyPath = knox-sso.pem\\n\" +\n+      \"authc = org.apache.zeppelin.realm.jwt.KnoxAuthenticationFilter\\n\" +\n+      \"sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager\\n\" +\n+      \"securityManager.sessionManager = $sessionManager\\n\" +\n+      \"securityManager.sessionManager.globalSessionTimeout = 86400000\\n\" +\n+      \"shiro.loginUrl = /api/login\\n\" +\n+      \"[roles]\\n\" +\n+      \"admin = *\\n\" +\n+      \"[urls]\\n\" +\n+      \"/api/version = anon\\n\" +\n+      \"/** = authc\";\n+\n+  private static File knoxSsoPem = null;\n+  private static String KNOX_SSO_PEM =\n+      \"-----BEGIN CERTIFICATE-----\\n\"\n+      + \"MIIChjCCAe+gAwIBAgIJALYrdDEXKwcqMA0GCSqGSIb3DQEBBQUAMIGEMQswCQYD\\n\"\n+      + \"VQQGEwJVUzENMAsGA1UECBMEVGVzdDENMAsGA1UEBxMEVGVzdDEPMA0GA1UEChMG\\n\"\n+      + \"SGFkb29wMQ0wCwYDVQQLEwRUZXN0MTcwNQYDVQQDEy5jdHItZTEzNS0xNTEyMDY5\\n\"\n+      + \"MDMyOTc1LTU0NDctMDEtMDAwMDAyLmh3eC5zaXRlMB4XDTE3MTIwNDA5NTIwMFoX\\n\"\n+      + \"DTE4MTIwNDA5NTIwMFowgYQxCzAJBgNVBAYTAlVTMQ0wCwYDVQQIEwRUZXN0MQ0w\\n\"\n+      + \"CwYDVQQHEwRUZXN0MQ8wDQYDVQQKEwZIYWRvb3AxDTALBgNVBAsTBFRlc3QxNzA1\\n\"\n+      + \"BgNVBAMTLmN0ci1lMTM1LTE1MTIwNjkwMzI5NzUtNTQ0Ny0wMS0wMDAwMDIuaHd4\\n\"\n+      + \"LnNpdGUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAILFoXdz3yCy2INncYM2\\n\"\n+      + \"y72fYrONoQIxeeIzeJIibXLTuowSju90Q6aThSyUsQ6NEia2flnlKiCgINTNAodh\\n\"\n+      + \"UPUVGyGT+NMrqJzzpXAll2UUa6gIUPnXYEzYNkMIpbQOAo5BAg7YamaidbPPiT3W\\n\"\n+      + \"wAD1rWo3AMUY+nZJrAi4dEH5AgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAB0R07/lo\\n\"\n+      + \"4hD+WeDEeyLTnsbFnPNXxBT1APMUmmuCjcky/19ZB8OphqTKIITONdOK/XHdjZHG\\n\"\n+      + \"JDOfhBkVknL42lSi45ahUAPS2PZOlQL08MbS8xajP1faterm+aHcdwJVK9dK76RB\\n\"\n+      + \"/bA8TFNPblPxavIOcd+R+RfFmT1YKfYIhco=\\n\"\n+      + \"-----END CERTIFICATE-----\";\n+\n   protected static File zeppelinHome;\n   protected static File confDir;\n \n@@ -127,7 +167,7 @@ public void run() {\n     }\n   };\n \n-  private static void start(boolean withAuth, String testClassName) throws Exception {\n+  private static void start(boolean withAuth, String testClassName, boolean withKnox) throws Exception {\n     if (!wasRunning) {\n       // copy the resources files to a temp folder\n       zeppelinHome = new File(\"..\");\n@@ -156,7 +196,18 @@ private static void start(boolean withAuth, String testClassName) throws Excepti\n         if (!shiroIni.exists()) {\n           shiroIni.createNewFile();\n         }\n-        FileUtils.writeStringToFile(shiroIni, zeppelinShiro);\n+        if (withKnox) {\n+          FileUtils.writeStringToFile(shiroIni,\n+              zeppelinShiroKnox.replaceAll(\"knox-sso.pem\", confDir + \"/knox-sso.pem\"));\n+          knoxSsoPem = new File(confDir, \"knox-sso.pem\");\n+          if (!knoxSsoPem.exists()) {\n+            knoxSsoPem.createNewFile();\n+          }\n+          FileUtils.writeStringToFile(knoxSsoPem, KNOX_SSO_PEM);\n+        } else {\n+          FileUtils.writeStringToFile(shiroIni, zeppelinShiro);\n+        }\n+\n       }\n \n       // exclude org.apache.zeppelin.rinterpreter.* for scala 2.11 test\n@@ -254,13 +305,17 @@ private static void start(boolean withAuth, String testClassName) throws Excepti\n       }\n     }\n   }\n+\n+  protected static void startUpWithKnoxEnable(String testClassName) throws Exception {\n+    start(true, testClassName, true);\n+  }\n   \n   protected static void startUpWithAuthenticationEnable(String testClassName) throws Exception {\n-    start(true, testClassName);\n+    start(true, testClassName, false);\n   }\n   \n   protected static void startUp(String testClassName) throws Exception {\n-    start(false, testClassName);\n+    start(false, testClassName, false);\n   }\n \n   private static String getHostname() {\n@@ -383,13 +438,20 @@ protected static GetMethod httpGet(String path) throws IOException {\n   }\n   \n   protected static GetMethod httpGet(String path, String user, String pwd) throws IOException {\n+    return httpGet(path, user, pwd, StringUtils.EMPTY);\n+  }\n+\n+  protected static GetMethod httpGet(String path, String user, String pwd, String cookies) throws IOException {\n     LOG.info(\"Connecting to {}\", url + path);\n     HttpClient httpClient = new HttpClient();\n     GetMethod getMethod = new GetMethod(url + path);\n     getMethod.addRequestHeader(\"Origin\", url);\n     if (userAndPasswordAreNotBlank(user, pwd)) {\n       getMethod.setRequestHeader(\"Cookie\", \"JSESSIONID=\"+ getCookie(user, pwd));\n     }\n+    if (!StringUtils.isBlank(cookies)) {\n+      getMethod.setRequestHeader(\"Cookie\", getMethod.getResponseHeader(\"Cookie\") + \";\" + cookies);\n+    }\n     httpClient.executeMethod(getMethod);\n     LOG.info(\"{} - {}\", getMethod.getStatusCode(), getMethod.getStatusText());\n     return getMethod;",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java",
                "sha": "ad0e1fd11a237a8409350388160d929d4af3a039",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/test/java/org/apache/zeppelin/rest/KnoxRestApiTest.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/KnoxRestApiTest.java?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 0,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/KnoxRestApiTest.java",
                "patch": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.rest;\n+\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.apache.commons.httpclient.methods.GetMethod;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ErrorCollector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KnoxRestApiTest extends AbstractTestRestApi {\n+\n+  private String KNOX_COOKIE = \"hadoop-jwt=eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlzcyI6IktOT1hTU08iLCJleHAiOjE1MTM3NDU1MDd9.E2cWQo2sq75h0G_9fc9nWkL0SFMI5x_-Z0Zzr0NzQ86X4jfxliWYjr0M17Bm9GfPHRRR66s7YuYXa6DLbB4fHE0cyOoQnkfJFpU_vr1xhy0_0URc5v-Gb829b9rxuQfjKe-37hqbUdkwww2q6QQETVMvzp0rQKprUClZujyDvh0;\";\n+\n+  @Rule\n+  public ErrorCollector collector = new ErrorCollector();\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(KnoxRestApiTest.class);\n+\n+  Gson gson = new Gson();\n+\n+  @BeforeClass\n+  public static void init() throws Exception {\n+    AbstractTestRestApi.startUpWithKnoxEnable(KnoxRestApiTest.class.getSimpleName());\n+  }\n+\n+  @AfterClass\n+  public static void destroy() throws Exception {\n+    AbstractTestRestApi.shutDown();\n+  }\n+\n+  @Before\n+  public void setUp() {\n+  }\n+\n+\n+  @Test\n+  public void testThatOtherUserCanAccessNoteIfPermissionNotSet() throws IOException {\n+    GetMethod loginWithoutCookie = httpGet(\"/api/security/ticket\");\n+    Map result = gson.fromJson(loginWithoutCookie.getResponseBodyAsString(), Map.class);\n+    collector.checkThat(\"Path is redirected to /login\", loginWithoutCookie.getPath(),\n+        CoreMatchers.containsString(\"login\"));\n+\n+    collector.checkThat(\"Path is redirected to /login\", loginWithoutCookie.getPath(),\n+        CoreMatchers.containsString(\"login\"));\n+\n+    collector.checkThat(\"response contains redirect URL\",\n+        ((Map) result.get(\"body\")).get(\"redirectURL\").toString(), CoreMatchers.equalTo(\n+            \"https://domain.example.com/gateway/knoxsso/knoxauth/login.html?originalUrl=\"));\n+\n+    GetMethod loginWithCookie = httpGet(\"/api/security/ticket\", \"\", \"\", KNOX_COOKIE);\n+    result = gson.fromJson(loginWithCookie.getResponseBodyAsString(), Map.class);\n+\n+    collector.checkThat(\"User logged in as admin\",\n+        ((Map) result.get(\"body\")).get(\"principal\").toString(), CoreMatchers.equalTo(\"admin\"));\n+\n+    System.out.println(result);\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-server/src/test/java/org/apache/zeppelin/rest/KnoxRestApiTest.java",
                "sha": "e3034e4dbd7d27cdbccb3db1aa6fd373ab7b880a",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-web/src/app/app.js",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/app.js?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 6,
                "filename": "zeppelin-web/src/app/app.js",
                "patch": "@@ -183,12 +183,16 @@ function auth () {\n   let config = (process.env.PROD) ? {headers: { 'X-Requested-With': 'XMLHttpRequest' }} : {}\n   return $http.get(baseUrlSrv.getRestApiBase() + '/security/ticket', config).then(function (response) {\n     zeppelinWebApp.run(function ($rootScope) {\n-      $rootScope.ticket = angular.fromJson(response.data).body\n-\n-      $rootScope.ticket.screenUsername = $rootScope.ticket.principal\n-      if ($rootScope.ticket.principal.indexOf('#Pac4j') === 0) {\n-        let re = ', name=(.*?),'\n-        $rootScope.ticket.screenUsername = $rootScope.ticket.principal.match(re)[1]\n+      let res = angular.fromJson(response.data).body\n+      if (res['redirectURL']) {\n+        window.location.href = res['redirectURL'] + window.location.href\n+      } else {\n+        $rootScope.ticket = res\n+        $rootScope.ticket.screenUsername = $rootScope.ticket.principal\n+        if ($rootScope.ticket.principal.indexOf('#Pac4j') === 0) {\n+          let re = ', name=(.*?),'\n+          $rootScope.ticket.screenUsername = $rootScope.ticket.principal.match(re)[1]\n+        }\n       }\n     })\n   }, function (errorResponse) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-web/src/app/app.js",
                "sha": "ed89dd8abe9e2c344f14d210b236cd4c945520bb",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-web/src/components/navbar/navbar.controller.js",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/components/navbar/navbar.controller.js?ref=6caf587e17fb6858e769fb2121b8cd66090ff759",
                "deletions": 2,
                "filename": "zeppelin-web/src/components/navbar/navbar.controller.js",
                "patch": "@@ -86,12 +86,19 @@ function NavCtrl ($scope, $rootScope, $http, $routeParams, $location,\n     websocketMsgSrv.getHomeNote()\n   }\n \n-  function logout () {\n+  function logout() {\n     let logoutURL = baseUrlSrv.getRestApiBase() + '/login/logout'\n \n     // for firefox and safari\n     logoutURL = logoutURL.replace('//', '//false:false@')\n-    $http.post(logoutURL).error(function () {\n+\n+    $http.post(logoutURL).then(function () {}, function (response) {\n+      if (response.data) {\n+        let res = angular.fromJson(response.data).body\n+        if (res['redirectURL']) {\n+          window.location.href = res['redirectURL'] + window.location.href\n+        }\n+      }\n       // force authcBasic (if configured) to logout\n       $http.post(logoutURL).error(function () {\n         $rootScope.userName = ''",
                "raw_url": "https://github.com/apache/zeppelin/raw/6caf587e17fb6858e769fb2121b8cd66090ff759/zeppelin-web/src/components/navbar/navbar.controller.js",
                "sha": "6f2974edbb586dfe6e94e60fd0446c58279f69bf",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-3090] Support KnoxSSO Authentication\n\n### What is this PR for?\nZeppelin to support KnoxSSO Authentication method.\n\n### What type of PR is it?\n[Bug Fix | Improvement]\n\n### What is the Jira issue?\n* [https://issues.apache.org/jira/browse/ZEPPELIN-3090](https://issues.apache.org/jira/browse/ZEPPELIN-3090)\n\n### How should this be tested?\nThis will require new shiro conf\n```\nknoxJwtRealm = org.apache.zeppelin.realm.jwt.KnoxJwtRealm\nknoxJwtRealm.providerUrl = https://domain.example.com/\nknoxJwtRealm.login = gateway/knoxsso/knoxauth/login.html\nknoxJwtRealm.logout = gateway/knoxssout/api/v1/webssout\nknoxJwtRealm.redirectParam = originalUrl\nknoxJwtRealm.cookieName = hadoop-jwt\nknoxJwtRealm.publicKeyPath = /etc/zeppelin/conf/knox-sso.pem\nknoxJwtRealm.groupPrincipalMapping = group.principal.mapping\nknoxJwtRealm.principalMapping = principal.mapping\n```\nRefer screenshot section for demo\n\n### Screenshots (if appropriate)\n![after](https://user-images.githubusercontent.com/674497/33554955-ae8d1874-d924-11e7-88fa-0f06a1b28519.gif)\n\n### Questions:\n* Does the licenses files need update? yes\n* Is there breaking changes for older versions? no\n* Does this needs documentation? yes\n\nAuthor: Prabhjyot Singh <prabhjyotsingh@gmail.com>\nAuthor: prabhjyotsingh <prabhjyotsingh@gmail.com>\n\nCloses #2694 from prabhjyotsingh/KNOX_SSO and squashes the following commits:\n\n05ed844ac [Prabhjyot Singh] Add unit test case\n187b5678f [Prabhjyot Singh] fix failing \"  PersonalizeActionsIT.testGraphAction:263 The output of graph mode is not changed\" test.\n51f13521c [Prabhjyot Singh] Merge remote-tracking branch 'origin/master' into KNOX_SSO\n153176450 [Prabhjyot Singh] Add more validation to KnoxAuthenticationFilter.\n123349fc5 [Prabhjyot Singh] remove System.out.println, and some of the redundent lines, added more comment\nc79979acf [Prabhjyot Singh] Check for expired/deleted SSO cookie\nc9a137f76 [Prabhjyot Singh] Merge remote-tracking branch 'origin/master' into KNOX_SSO\ndbca0107a [Prabhjyot Singh] Add documentation for KNOX SSO\n99541765d [Prabhjyot Singh] use default config\n547c7b391 [Prabhjyot Singh] updating LICENSE\n067a3e620 [prabhjyotsingh] fix \"javax.servlet.ServletException: java.lang.NullPointerException\"\n564005ff5 [Prabhjyot Singh] remove \"hadoop-common.version\" dependency\n355b475c5 [Prabhjyot Singh] knox sso",
        "parent": "https://github.com/apache/zeppelin/commit/ed468003323b984b0249d40d88c2378cc65950de",
        "patched_files": [
            "pom.xml",
            "SimplePrincipalMapper.java",
            "KnoxJwtRealm.java",
            "JWTAuthenticationToken.java",
            "PrincipalMappingException.java",
            "LoginRestApi.java",
            "navbar.controller.js",
            "AbstractTestRestApi.java",
            "LICENSE",
            "shiro.ini.template",
            "app.js",
            "KnoxAuthenticationFilter.java",
            "shiro_authentication.md",
            "PrincipalMapper.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "KnoxRestApiTest.java"
        ]
    },
    "zeppelin_6e3a1d2": {
        "bug_id": "zeppelin_6e3a1d2",
        "commit": "https://github.com/apache/zeppelin/commit/6e3a1d26ffc3e9bae355df3533430791cdcfd5e4",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/6e3a1d26ffc3e9bae355df3533430791cdcfd5e4/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java?ref=6e3a1d26ffc3e9bae355df3533430791cdcfd5e4",
                "deletions": 4,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java",
                "patch": "@@ -186,7 +186,8 @@ void sync(int sourceRepoIndex, int destRepoIndex, AuthenticationInfo subject) th\n     List <NoteInfo> srcNotes = auth.filterByUser(allSrcNotes, subject);\n     List <NoteInfo> dstNotes = dstRepo.list(subject);\n \n-    Map<String, List<String>> noteIDs = notesCheckDiff(srcNotes, srcRepo, dstNotes, dstRepo);\n+    Map<String, List<String>> noteIDs = notesCheckDiff(srcNotes, srcRepo, dstNotes, dstRepo,\n+        subject);\n     List<String> pushNoteIDs = noteIDs.get(pushKey);\n     List<String> pullNoteIDs = noteIDs.get(pullKey);\n     List<String> delDstNoteIDs = noteIDs.get(delDstKey);\n@@ -263,7 +264,8 @@ NotebookRepo getRepo(int repoIndex) throws IOException {\n   }\n \n   private Map<String, List<String>> notesCheckDiff(List<NoteInfo> sourceNotes,\n-      NotebookRepo sourceRepo, List<NoteInfo> destNotes, NotebookRepo destRepo)\n+      NotebookRepo sourceRepo, List<NoteInfo> destNotes, NotebookRepo destRepo,\n+      AuthenticationInfo subject)\n       throws IOException {\n     List <String> pushIDs = new ArrayList<String>();\n     List <String> pullIDs = new ArrayList<String>();\n@@ -275,8 +277,8 @@ NotebookRepo getRepo(int repoIndex) throws IOException {\n       dnote = containsID(destNotes, snote.getId());\n       if (dnote != null) {\n         /* note exists in source and destination storage systems */\n-        sdate = lastModificationDate(sourceRepo.get(snote.getId(), null));\n-        ddate = lastModificationDate(destRepo.get(dnote.getId(), null));\n+        sdate = lastModificationDate(sourceRepo.get(snote.getId(), subject));\n+        ddate = lastModificationDate(destRepo.get(dnote.getId(), subject));\n \n         if (sdate.compareTo(ddate) != 0) {\n           if (sdate.after(ddate) || oneWaySync) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/6e3a1d26ffc3e9bae355df3533430791cdcfd5e4/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java",
                "sha": "fdf7e782653bfc55e88975c9250e52804c922d2f",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1487] Resolve possible NPEs in storage sync mechanism\n\n### What is this PR for?\nThis is to resolve possible NPEs in storage mechanism related to empty subject\n\n### What type of PR is it?\nBug Fix\n\n### Todos\n* [x] - pass `subject` instead of `null`\n\n### What is the Jira issue?\n[ZEPPELIN-1487](https://issues.apache.org/jira/browse/ZEPPELIN-1487)\n\n### How should this be tested?\nstorage tests pass, CI green\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Khalid Huseynov <khalidhnv@gmail.com>\n\nCloses #1459 from khalidhuseynov/fix/storage-npe and squashes the following commits:\n\n1f2dcd3 [Khalid Huseynov] pass subject to get method in sync",
        "parent": "https://github.com/apache/zeppelin/commit/b77f9ea8d7bb2b4e8a5a7a15fa828fcd33abf0d5",
        "patched_files": [
            "NotebookRepoSync.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookRepoSyncTest.java"
        ]
    },
    "zeppelin_722ed82": {
        "bug_id": "zeppelin_722ed82",
        "commit": "https://github.com/apache/zeppelin/commit/722ed823193ed49d4e42ef17be2241cf6d48cd97",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/722ed823193ed49d4e42ef17be2241cf6d48cd97/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java?ref=722ed823193ed49d4e42ef17be2241cf6d48cd97",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java",
                "patch": "@@ -462,8 +462,10 @@ public boolean accept(File dir, String name) {\n     };\n \n     File[] localModuleCaches = yarnCacheDir.listFiles(filter);\n-    for (File f : localModuleCaches) {\n-      FileUtils.deleteQuietly(f);\n+    if (localModuleCaches != null) {\n+      for (File f : localModuleCaches) {\n+        FileUtils.deleteQuietly(f);\n+      }\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/722ed823193ed49d4e42ef17be2241cf6d48cd97/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java",
                "sha": "bf2804e4ee2e60d79c21401374d1d26aa07bdb6a",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE on delete local module cache\n\n### What is this PR for?\nPrevent NPE on delete local module cache in HeliumBundleFactory\n\n```\nCaused by: java.lang.NullPointerException\n\tat org.apache.zeppelin.helium.HeliumBundleFactory.deleteYarnCache(HeliumBundleFactory.java:465)\n\tat org.apache.zeppelin.helium.HeliumBundleFactory.copyFrameworkModulesToInstallPath(HeliumBundleFactory.java:487)\n\tat org.apache.zeppelin.helium.HeliumBundleFactory.buildPackage(HeliumBundleFactory.java:403)\n\tat org.apache.zeppelin.helium.Helium.enable(Helium.java:314)\n\tat org.apache.zeppelin.rest.HeliumRestApi.enablePackage(HeliumRestApi.java:193)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180)\n\tat org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n\t... 50 more\n```\n\n### What type of PR is it?\nBug Fix\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Lee moon soo <moon@apache.org>\n\nCloses #2259 from Leemoonsoo/prevent_npe_helium_bundle_factory and squashes the following commits:\n\n0934af8 [Lee moon soo] Prevent NPE on delete local module cache",
        "parent": "https://github.com/apache/zeppelin/commit/7b585c7399f29492c308f83e342cac29b0c7ca07",
        "patched_files": [
            "HeliumBundleFactory.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "HeliumBundleFactoryTest.java"
        ]
    },
    "zeppelin_767a50b": {
        "bug_id": "zeppelin_767a50b",
        "commit": "https://github.com/apache/zeppelin/commit/767a50b4164ef323ef18160485d226c013c7c00d",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/767a50b4164ef323ef18160485d226c013c7c00d/spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java?ref=767a50b4164ef323ef18160485d226c013c7c00d",
                "deletions": 43,
                "filename": "spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java",
                "patch": "@@ -81,7 +81,6 @@ public void open() throws InterpreterException {\n     try {\n       String scalaVersion = extractScalaVersion();\n       LOGGER.info(\"Using Scala Version: \" + scalaVersion);\n-      setupConfForPySpark();\n       SparkConf conf = new SparkConf();\n       for (Map.Entry<Object, Object> entry : getProperties().entrySet()) {\n         if (!StringUtils.isBlank(entry.getValue().toString())) {\n@@ -126,48 +125,6 @@ public void open() throws InterpreterException {\n     }\n   }\n \n-  private void setupConfForPySpark() {\n-    String sparkHome = getProperty(\"SPARK_HOME\");\n-    File pysparkFolder = null;\n-    if (sparkHome == null) {\n-      String zeppelinHome =\n-          new DefaultInterpreterProperty(\"ZEPPELIN_HOME\", \"zeppelin.home\", \"../../\")\n-              .getValue().toString();\n-      pysparkFolder = new File(zeppelinHome,\n-          \"interpreter\" + File.separator + \"spark\" + File.separator + \"pyspark\");\n-    } else {\n-      pysparkFolder = new File(sparkHome, \"python\" + File.separator + \"lib\");\n-    }\n-\n-    ArrayList<String> pysparkPackages = new ArrayList<>();\n-    for (File file : pysparkFolder.listFiles()) {\n-      if (file.getName().equals(\"pyspark.zip\")) {\n-        pysparkPackages.add(file.getAbsolutePath());\n-      }\n-      if (file.getName().startsWith(\"py4j-\")) {\n-        pysparkPackages.add(file.getAbsolutePath());\n-      }\n-    }\n-\n-    if (pysparkPackages.size() != 2) {\n-      throw new RuntimeException(\"Not correct number of pyspark packages: \" +\n-          StringUtils.join(pysparkPackages, \",\"));\n-    }\n-    // Distribute two libraries(pyspark.zip and py4j-*.zip) to workers\n-    System.setProperty(\"spark.files\", mergeProperty(System.getProperty(\"spark.files\", \"\"),\n-        StringUtils.join(pysparkPackages, \",\")));\n-    System.setProperty(\"spark.submit.pyFiles\", mergeProperty(\n-        System.getProperty(\"spark.submit.pyFiles\", \"\"), StringUtils.join(pysparkPackages, \",\")));\n-\n-  }\n-\n-  private String mergeProperty(String originalValue, String appendedValue) {\n-    if (StringUtils.isBlank(originalValue)) {\n-      return appendedValue;\n-    }\n-    return originalValue + \",\" + appendedValue;\n-  }\n-\n   @Override\n   public void close() {\n     LOGGER.info(\"Close SparkInterpreter\");",
                "raw_url": "https://github.com/apache/zeppelin/raw/767a50b4164ef323ef18160485d226c013c7c00d/spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java",
                "sha": "fcfee277cea5df8c3c358bb395beb973b8d90dfc",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-3531. Don't look for py4j in NewSparkInterpreter\n\n### What is this PR for?\nJust remove setupConfForPySpark in NewSparkInterpreter as it is not necessary and will cause NPE when the node launch spark interpreter doesn't have spark installed in yarn cluster mode.\n\n### What type of PR is it?\n[Bug Fix]\n\n### Todos\n* [ ] - Task\n\n### What is the Jira issue?\n* https://issues.apache.org/jira/browse/ZEPPELIN-3531\n\n### How should this be tested?\n* CI pass & Manually tested in a 3 node cluster\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Jeff Zhang <zjffdu@apache.org>\n\nCloses #3008 from zjffdu/ZEPPELIN-3531 and squashes the following commits:\n\ne8b2969e9 [Jeff Zhang] ZEPPELIN-3531. Don't look for py4j in NewSparkInterpreter",
        "parent": "https://github.com/apache/zeppelin/commit/6fc3057d529691e697361ef9a67e21cac75e21ed",
        "patched_files": [
            "NewSparkInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NewSparkInterpreterTest.java"
        ]
    },
    "zeppelin_7954d80": {
        "bug_id": "zeppelin_7954d80",
        "commit": "https://github.com/apache/zeppelin/commit/7954d8071f2b1c46259c449983825f26afce6d6d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/7954d8071f2b1c46259c449983825f26afce6d6d/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=7954d8071f2b1c46259c449983825f26afce6d6d",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -195,6 +195,10 @@ public void setPath(String path) {\n   }\n \n   public String getDefaultInterpreterGroup() {\n+    if (defaultInterpreterGroup == null) {\n+      defaultInterpreterGroup = ZeppelinConfiguration.create()\n+          .getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_DEFAULT);\n+    }\n     return defaultInterpreterGroup;\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/7954d8071f2b1c46259c449983825f26afce6d6d/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "74b08b25ca8efe9240609ce5f0a2a5b145d3226b",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-3794. NPE when running paragraph without interpreter specified\n\n### What is this PR for?\nThis issue happens for the old note where no defaultInterpreterGroup is specified in note.json.\n\n### What type of PR is it?\n[Bug Fix]\n\n### Todos\n* [ ] - Task\n\n### What is the Jira issue?\n* https://issues.apache.org/jira/browse/ZEPPELIN-3794\n\n### How should this be tested?\n* CI pass\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Jeff Zhang <zjffdu@apache.org>\n\nCloses #3191 from zjffdu/ZEPPELIN-3794 and squashes the following commits:\n\na8a469fa0 [Jeff Zhang] ZEPPELIN-3794. NPE when running paragraph without interpreter specified",
        "parent": "https://github.com/apache/zeppelin/commit/f28e9631737da554a0a12323f6c00ccae3ec6282",
        "patched_files": [
            "Note.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NoteTest.java"
        ]
    },
    "zeppelin_79ace93": {
        "bug_id": "zeppelin_79ace93",
        "commit": "https://github.com/apache/zeppelin/commit/79ace932a9d7de247f7cb0f932cd146d459e617b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/79ace932a9d7de247f7cb0f932cd146d459e617b/docs/interpreter/jdbc.md",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/interpreter/jdbc.md?ref=79ace932a9d7de247f7cb0f932cd146d459e617b",
                "deletions": 0,
                "filename": "docs/interpreter/jdbc.md",
                "patch": "@@ -427,8 +427,13 @@ Here are some examples you can refer to. Including the below connectors, you can\n     <td>default.password</td>\n     <td>hive_password</td>\n   </tr>\n+  <tr>\n+    <td>hive.proxy.user</td>\n+    <td>true or false</td>\n </table>\n \n+Connection to Hive JDBC with a proxy user can be disabled with `hive.proxy.user` property (set to true by default)\n+\n [Apache Hive 1 JDBC Driver Docs](https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients#HiveServer2Clients-JDBC)\n [Apache Hive 2 JDBC Driver Docs](https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients#HiveServer2Clients-JDBC)\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/79ace932a9d7de247f7cb0f932cd146d459e617b/docs/interpreter/jdbc.md",
                "sha": "75da51fd1a9f08880add3b3552e62750b265f3b3",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/79ace932a9d7de247f7cb0f932cd146d459e617b/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java?ref=79ace932a9d7de247f7cb0f932cd146d459e617b",
                "deletions": 5,
                "filename": "jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "patch": "@@ -378,16 +378,20 @@ public Connection getConnection(String propertyKey, InterpreterContext interpret\n                 if (lastIndexOfUrl == -1) {\n                   lastIndexOfUrl = connectionUrl.length();\n                 }\n-                connectionUrl.insert(lastIndexOfUrl, \";hive.server2.proxy.user=\" + user + \";\");\n+                boolean hasProxyUser = property.containsKey(\"hive.proxy.user\");\n+                if (!hasProxyUser || !property.getProperty(\"hive.proxy.user\").equals(\"false\")){\n+                  logger.debug(\"Using hive proxy user\");\n+                  connectionUrl.insert(lastIndexOfUrl, \";hive.server2.proxy.user=\" + user + \";\");\n+                }\n                 connection = getConnectionFromPool(connectionUrl.toString(),\n-                    user, propertyKey, properties);\n+                        user, propertyKey, properties);\n               } else {\n                 UserGroupInformation ugi = null;\n                 try {\n-                  ugi = UserGroupInformation.createProxyUser(user,\n-                    UserGroupInformation.getCurrentUser());\n+                  ugi = UserGroupInformation.createProxyUser(\n+                          user, UserGroupInformation.getCurrentUser());\n                 } catch (Exception e) {\n-                  logger.error(\"Error in createProxyUser\", e);\n+                  logger.error(\"Error in getCurrentUser\", e);\n                   StringBuilder stringBuilder = new StringBuilder();\n                   stringBuilder.append(e.getMessage()).append(\"\\n\");\n                   stringBuilder.append(e.getCause());",
                "raw_url": "https://github.com/apache/zeppelin/raw/79ace932a9d7de247f7cb0f932cd146d459e617b/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "sha": "0b25a23fcd3bb8f04f2a5239a086f8a111a0fccb",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1968] Added property to disable hive user impersonation\n\n### What is this PR for?\n\nAdded new property \"hive.proxy.user\"  to disable hive impersonation (on some clusters, this option is disabled) in order to make Hive Interpreter even without this\n\n### What type of PR is it?\nFeature\n\n### Todos\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-1968\n\n### How should this be tested?\nSet \"hive.proxy.user\" to true in the jdbc interpreter setttings, and you should see \"Using hive proxy user\" in the jdbc logs.\n\nIf \"hive.proxy.user\" has another value, this is not mentionned in the logs\n\nYou can also test with the appropriate hive configuration, but this could take longer :)\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? Yes\n\nAuthor: Paolo Genissel <paolo.genissel-monsallier@1000mercis.com>\n\nCloses #2051 from gfalcone/hive_impersonation and squashes the following commits:\n\na39d11c [Paolo Genissel] Fixed last NPE\n1f7f685 [Paolo Genissel] Fixed NPE when getting hive.proxy.user property\n433eefb [Paolo Genissel] Added documentation for feature\nd6f0c62 [Paolo Genissel] Added property to disable hive user impersonation",
        "parent": "https://github.com/apache/zeppelin/commit/89386342fdf0c94fc5f12da1a6320b97e89610af",
        "patched_files": [
            "JDBCInterpreter.java",
            "jdbc.md"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "JDBCInterpreterTest.java"
        ]
    },
    "zeppelin_79fd3a0": {
        "bug_id": "zeppelin_79fd3a0",
        "commit": "https://github.com/apache/zeppelin/commit/79fd3a0242df9f7324410cfc5d987850ee3de405",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/docs/assets/themes/zeppelin/img/docs-img/interpreter-add-repo2.png",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/assets/themes/zeppelin/img/docs-img/interpreter-add-repo2.png?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 0,
                "filename": "docs/assets/themes/zeppelin/img/docs-img/interpreter-add-repo2.png",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/docs/assets/themes/zeppelin/img/docs-img/interpreter-add-repo2.png",
                "sha": "62708c600018982b774e5a408d6b579fcf026ed9",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/docs/manual/dependencymanagement.md",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/manual/dependencymanagement.md?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 0,
                "filename": "docs/manual/dependencymanagement.md",
                "patch": "@@ -68,6 +68,7 @@ When your code requires external library, instead of doing download/copy/restart\n       <li> If you need to resolve dependencies from other than central maven repository or\n   \t   local ~/.m2 repository, hit <i class=\"fa fa-plus\"></i> icon next to repository lists. </li>\n       <li> Fill out the form and click 'Add' button, then you will be able to see that new repository is added. </li>\n+      <li> Optionally, if you are behind a corporate firewall, you can specify also all proxy settings so that Zeppelin can download the dependencies using the given credentials</li>\n     </ol>\n   </div>\n </div>",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/docs/manual/dependencymanagement.md",
                "sha": "44068dae1fd324e678319dd262e06adb84511956",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/AbstractDependencyResolver.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/AbstractDependencyResolver.java?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/AbstractDependencyResolver.java",
                "patch": "@@ -72,7 +72,7 @@ public void addRepo(String id, String url, boolean snapshot) {\n     }\n   }\n \n-  public void addRepo(String id, String url, boolean snapshot, Authentication auth) {\n+  public void addRepo(String id, String url, boolean snapshot, Authentication auth, Proxy proxy) {\n     synchronized (repos) {\n       delRepo(id);\n       RemoteRepository rr = new RemoteRepository(id, \"default\", url);\n@@ -81,6 +81,7 @@ public void addRepo(String id, String url, boolean snapshot, Authentication auth\n           RepositoryPolicy.UPDATE_POLICY_DAILY,\n           RepositoryPolicy.CHECKSUM_POLICY_WARN));\n       rr.setAuthentication(auth);\n+      rr.setProxy(proxy);\n       repos.add(rr);\n     }\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/AbstractDependencyResolver.java",
                "sha": "da3d0c02b4f3337076b6d5cfeb800862df3d1d97",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 4,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.sonatype.aether.RepositoryException;\n import org.sonatype.aether.artifact.Artifact;\n import org.sonatype.aether.collection.CollectRequest;\n+import org.sonatype.aether.collection.DependencyCollectionException;\n import org.sonatype.aether.graph.Dependency;\n import org.sonatype.aether.graph.DependencyFilter;\n import org.sonatype.aether.repository.RemoteRepository;\n@@ -42,6 +43,7 @@\n import org.sonatype.aether.util.artifact.JavaScopes;\n import org.sonatype.aether.util.filter.DependencyFilterUtils;\n import org.sonatype.aether.util.filter.PatternExclusionsDependencyFilter;\n+import org.sonatype.aether.util.graph.DefaultDependencyNode;\n \n \n /**\n@@ -157,11 +159,11 @@ public synchronized void copyLocalDependency(String srcPath, File destPath)\n    */\n   @Override\n   public List<ArtifactResult> getArtifactsWithDep(String dependency,\n-      Collection<String> excludes) throws RepositoryException {\n+    Collection<String> excludes) throws RepositoryException {\n     Artifact artifact = new DefaultArtifact(dependency);\n     DependencyFilter classpathFilter = DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE);\n     PatternExclusionsDependencyFilter exclusionFilter =\n-        new PatternExclusionsDependencyFilter(excludes);\n+            new PatternExclusionsDependencyFilter(excludes);\n \n     CollectRequest collectRequest = new CollectRequest();\n     collectRequest.setRoot(new Dependency(artifact, JavaScopes.COMPILE));\n@@ -172,7 +174,11 @@ public synchronized void copyLocalDependency(String srcPath, File destPath)\n       }\n     }\n     DependencyRequest dependencyRequest = new DependencyRequest(collectRequest,\n-        DependencyFilterUtils.andFilter(exclusionFilter, classpathFilter));\n-    return system.resolveDependencies(session, dependencyRequest).getArtifactResults();\n+            DependencyFilterUtils.andFilter(exclusionFilter, classpathFilter));\n+    try {\n+      return system.resolveDependencies(session, dependencyRequest).getArtifactResults();\n+    } catch (NullPointerException ex) {\n+      throw new RepositoryException(String.format(\"Cannot fetch dependencies for %s\", dependency));\n+    }\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java",
                "sha": "7ca4a4d173d2215ab806e35afeedc607ef3feec8",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Repository.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Repository.java?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Repository.java",
                "patch": "@@ -16,7 +16,11 @@\n  */\n \n package org.apache.zeppelin.dep;\n+import static org.apache.commons.lang3.StringUtils.isNotBlank;\n+\n import org.sonatype.aether.repository.Authentication;\n+import org.sonatype.aether.repository.Proxy;\n+\n /**\n  *\n  *\n@@ -27,6 +31,11 @@\n   private String url;\n   private String username = null;\n   private String password = null;\n+  private String proxyProtocol = \"HTTP\";\n+  private String proxyHost = null;\n+  private Integer proxyPort = null;\n+  private String proxyLogin = null;\n+  private String proxyPassword = null;\n \n   public Repository(String id){\n     this.id = id;\n@@ -77,4 +86,16 @@ public Authentication getAuthentication() {\n     }\n     return auth;\n   }\n+\n+  public Proxy getProxy() {\n+    if (isNotBlank(proxyHost) && proxyPort != null) {\n+      if (isNotBlank(proxyLogin)) {\n+        return new Proxy(proxyProtocol, proxyHost, proxyPort,\n+                new Authentication(proxyLogin, proxyPassword));\n+      } else {\n+        return new Proxy(proxyProtocol, proxyHost, proxyPort, null);\n+      }\n+    }\n+    return null;\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Repository.java",
                "sha": "34fe4f05478be2afe9cf9d49d7d4ebf4c2f10cae",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import static org.junit.Assert.assertEquals;\n \n import java.io.File;\n+import java.io.FileNotFoundException;\n import java.util.Collections;\n \n import org.apache.commons.io.FileUtils;\n@@ -36,6 +37,9 @@\n   private static File testCopyPath;\n   private static File tmpDir;\n \n+  @Rule\n+  public ExpectedException expectedException = ExpectedException.none();\n+\n   @BeforeClass\n   public static void setUp() throws Exception {\n     tmpDir = new File(System.getProperty(\"java.io.tmpdir\")+\"/ZeppelinLTest_\"+System.currentTimeMillis());\n@@ -90,4 +94,13 @@ public void testLoad() throws Exception {\n     exception.expect(RepositoryException.class);\n     resolver.load(\"com.agimatec:agimatec-validation:0.9.3\", testCopyPath);\n   }\n+\n+  @Test\n+  public void should_throw_exception_if_dependency_not_found() throws Exception {\n+    expectedException.expectMessage(\"Source 'one.two:1.0' does not exist\");\n+    expectedException.expect(FileNotFoundException.class);\n+\n+    resolver.load(\"one.two:1.0\", testCopyPath);\n+  }\n+\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java",
                "sha": "876e8e7c88c5291d88408b6bd466658f40af7e76",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 5,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "patch": "@@ -35,7 +35,6 @@\n import org.apache.commons.lang.exception.ExceptionUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.sonatype.aether.RepositoryException;\n import org.sonatype.aether.repository.RemoteRepository;\n \n import org.apache.zeppelin.annotation.ZeppelinApi;\n@@ -73,9 +72,7 @@ public InterpreterRestApi(InterpreterFactory interpreterFactory) {\n   @Path(\"setting\")\n   @ZeppelinApi\n   public Response listSettings() {\n-    List<InterpreterSetting> interpreterSettings;\n-    interpreterSettings = interpreterFactory.get();\n-    return new JsonResponse<>(Status.OK, \"\", interpreterSettings).build();\n+    return new JsonResponse<>(Status.OK, \"\", interpreterFactory.get()).build();\n   }\n \n   /**\n@@ -202,7 +199,7 @@ public Response addRepository(String message) {\n     try {\n       Repository request = gson.fromJson(message, Repository.class);\n       interpreterFactory.addRepository(request.getId(), request.getUrl(), request.isSnapshot(),\n-          request.getAuthentication());\n+        request.getAuthentication(), request.getProxy());\n       logger.info(\"New repository {} added\", request.getId());\n     } catch (Exception e) {\n       logger.error(\"Exception in InterpreterRestApi while adding repository \", e);",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "sha": "5b1773b584f5059e8b05eef8bd085dc9b2007277",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/app.js",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/app.js?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/app.js",
                "patch": "@@ -90,6 +90,7 @@\n           ngToastProvider.configure({\n             dismissButton: true,\n             dismissOnClick: false,\n+            combineDuplications: true,\n             timeout: 6000\n           });\n         });",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/app.js",
                "sha": "603171f10a6d026f01d9efad1695e4365aa9db1a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/configuration/configuration.controller.js",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/configuration/configuration.controller.js?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/configuration/configuration.controller.js",
                "patch": "@@ -21,6 +21,7 @@\n   function ConfigurationCtrl($scope, $rootScope, $http, baseUrlSrv, ngToast) {\n     $scope.configrations = [];\n     $scope._ = _;\n+    ngToast.dismiss();\n \n     var getConfigurations = function() {\n       $http.get(baseUrlSrv.getRestApiBase() + '/configurations/all').",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/configuration/configuration.controller.js",
                "sha": "8960ca55f50b6831baf3962f5c6c6244c2981d03",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/credential/credential.controller.js",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/credential/credential.controller.js?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/credential/credential.controller.js",
                "patch": "@@ -20,6 +20,7 @@\n \n   function CredentialCtrl($scope, $rootScope, $http, baseUrlSrv, ngToast) {\n     $scope._ = _;\n+    ngToast.dismiss();\n \n     $scope.credentialInfo = [];\n     $scope.showAddNewCredentialInfo = false;",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/credential/credential.controller.js",
                "sha": "7145299f70845d7b2daf844db83460ca11fc91d2",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/home/home.controller.js",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/home/home.controller.js?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 2,
                "filename": "zeppelin-web/src/app/home/home.controller.js",
                "patch": "@@ -21,10 +21,12 @@\n     'notebookListDataFactory',\n     'websocketMsgSrv',\n     '$rootScope',\n-    'arrayOrderingSrv'\n+    'arrayOrderingSrv',\n+    'ngToast'\n   ];\n \n-  function HomeCtrl($scope, notebookListDataFactory, websocketMsgSrv, $rootScope, arrayOrderingSrv) {\n+  function HomeCtrl($scope, notebookListDataFactory, websocketMsgSrv, $rootScope, arrayOrderingSrv, ngToast) {\n+    ngToast.dismiss();\n     var vm = this;\n     vm.notes = notebookListDataFactory;\n     vm.websocketMsgSrv = websocketMsgSrv;",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/home/home.controller.js",
                "sha": "9063e33e48276a4c1971d0e63af1b104e783d324",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter.controller.js?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 5,
                "filename": "zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "patch": "@@ -25,6 +25,7 @@\n     $scope.showAddNewSetting = false;\n     $scope.showRepositoryInfo = false;\n     $scope._ = _;\n+    ngToast.dismiss();\n \n     $scope.openPermissions = function() {\n       $scope.showInterpreterAuth = true;\n@@ -108,12 +109,19 @@\n \n     var checkDownloadingDependencies = function() {\n       var isDownloading = false;\n-      for (var setting = 0; setting < $scope.interpreterSettings.length; setting++) {\n-        if ($scope.interpreterSettings[setting].status === 'DOWNLOADING_DEPENDENCIES') {\n+      for (var index = 0; index < $scope.interpreterSettings.length; index++) {\n+        var setting = $scope.interpreterSettings[index];\n+        if (setting.status === 'DOWNLOADING_DEPENDENCIES') {\n           isDownloading = true;\n-          break;\n+        }\n+\n+        if (setting.status === 'ERROR' || setting.errorReason) {\n+          ngToast.danger({content: 'Error setting properties for interpreter \\'' +\n+            setting.group + '.' + setting.name + '\\': ' + setting.errorReason,\n+            verticalPosition: 'top', dismissOnTimeout: false});\n         }\n       }\n+\n       if (isDownloading) {\n         $timeout(function() {\n           if ($route.current.$$route.originalPath === '/interpreter') {\n@@ -236,7 +244,6 @@\n                 $scope.interpreterSettings[index] = data.body;\n                 removeTMPSettings(index);\n                 thisConfirm.close();\n-                checkDownloadingDependencies();\n                 $route.reload();\n               })\n               .error(function(data, status, headers, config) {\n@@ -508,7 +515,12 @@\n         url: '',\n         snapshot: false,\n         username: '',\n-        password: ''\n+        password: '',\n+        proxyProtocol: 'HTTP',\n+        proxyHost: '',\n+        proxyPort: null,\n+        proxyLogin: '',\n+        proxyPassword: ''\n       };\n     };\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "sha": "3fe355fe1b8f6e622057dff32b68b027af26ba88",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/interpreter/interpreter.html",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter.html?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 1,
                "filename": "zeppelin-web/src/app/interpreter/interpreter.html",
                "patch": "@@ -65,7 +65,9 @@ <h4>Repositories</h4>\n              popover-html-unsafe=\"<label>URL: </label>\n                {{repo.url}}<br>\n                <label>Username: </label>\n-               {{repo.authentication.username}}\">\n+               {{repo.authentication.username}}<br>\n+               <label>Proxy host: </label>\n+               {{repo.proxy.host}}\">\n             <span class=\"fa fa-database\"></span>\n             {{repo.id}}&nbsp;\n             <span ng-if=\"!isDefaultRepository(repo.id)\" class=\"fa fa-close blackOpc\"",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/interpreter/interpreter.html",
                "sha": "57b305ee67c815c5e021c8ffaf93f5b81f5766ac",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/jobmanager/jobmanager.controller.js",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/jobmanager/jobmanager.controller.js?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 2,
                "filename": "zeppelin-web/src/app/jobmanager/jobmanager.controller.js",
                "patch": "@@ -16,9 +16,10 @@\n \n   angular.module('zeppelinWebApp').controller('JobmanagerCtrl', JobmanagerCtrl);\n \n-  JobmanagerCtrl.$inject = ['$scope', 'websocketMsgSrv', '$interval'];\n+  JobmanagerCtrl.$inject = ['$scope', 'websocketMsgSrv', '$interval', 'ngToast'];\n \n-  function JobmanagerCtrl($scope, websocketMsgSrv, $interval) {\n+  function JobmanagerCtrl($scope, websocketMsgSrv, $interval, ngToast) {\n+    ngToast.dismiss();\n     $scope.filterValueToName = function(filterValue) {\n       var index = _.findIndex($scope.ACTIVE_INTERPRETERS, {value: filterValue});\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/jobmanager/jobmanager.controller.js",
                "sha": "d28b374ec9d34886c7cfd4ca8e0628cc64347761",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/notebook/notebook.controller.js",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/notebook/notebook.controller.js?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 2,
                "filename": "zeppelin-web/src/app/notebook/notebook.controller.js",
                "patch": "@@ -26,11 +26,16 @@\n     'websocketMsgSrv',\n     'baseUrlSrv',\n     '$timeout',\n-    'saveAsService'\n+    'saveAsService',\n+    'ngToast'\n   ];\n \n   function NotebookCtrl($scope, $route, $routeParams, $location, $rootScope,\n-                        $http, websocketMsgSrv, baseUrlSrv, $timeout, saveAsService) {\n+                        $http, websocketMsgSrv, baseUrlSrv, $timeout, saveAsService,\n+                        ngToast) {\n+\n+    ngToast.dismiss();\n+\n     $scope.note = null;\n     $scope.moment = moment;\n     $scope.editorToggled = false;",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/app/notebook/notebook.controller.js",
                "sha": "f2aa67d2e86acc27a1d4ff1c9a4c545848f7ed3c",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/components/repository-create/repository-dialog.html",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/components/repository-create/repository-dialog.html?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 0,
                "filename": "zeppelin-web/src/components/repository-create/repository-dialog.html",
                "patch": "@@ -62,6 +62,44 @@ <h4 class=\"modal-title\">Add New Repository</h4>\n                 <input type=\"password\" class=\"form-control\" id=\"repoPassword\" ng-model=\"newRepoSetting.password\" />\n               </div>\n             </div>\n+            <hr/>\n+            <div class=\"center-block\"><h4>Proxy Settings (optional)</h4></div>\n+            <br/>\n+            <div class=\"form-group\">\n+              <div class=\"col-sm-10\">\n+                <label class=\"control-label col-sm-2\" for=\"proxyProtocol1\">Protocol</label>\n+                <label class=\"radio-inline\">\n+                    <input type=\"radio\" name=\"proxyProtocol\" id=\"proxyProtocol1\" value=\"HTTP\" ng-model=\"newRepoSetting.proxyProtocol\"/> HTTP\n+                </label>\n+                <label class=\"radio-inline\">\n+                    <input type=\"radio\" name=\"proxyProtocol\" id=\"proxyProtocol2\" value=\"HTTPS\" ng-model=\"newRepoSetting.proxyProtocol\"/> HTTPS\n+                </label>\n+              </div>\n+            </div>\n+            <div class=\"form-group\">\n+              <label class=\"control-label col-sm-2\" for=\"proxyHost\">Host</label>\n+              <div class=\"col-sm-10\">\n+                <input type=\"text\" class=\"form-control\" id=\"proxyHost\" ng-model=\"newRepoSetting.proxyHost\" />\n+              </div>\n+            </div>\n+            <div class=\"form-group\">\n+              <label class=\"control-label col-sm-2\" for=\"proxyPort\">Port</label>\n+              <div class=\"col-sm-10\">\n+                <input type=\"text\" class=\"form-control\" id=\"proxyPort\" ng-model=\"newRepoSetting.proxyPort\" />\n+              </div>\n+            </div>\n+            <div class=\"form-group\">\n+                <label class=\"control-label col-sm-2\" for=\"proxyLogin\">Login</label>\n+                <div class=\"col-sm-10\">\n+                    <input type=\"text\" class=\"form-control\" id=\"proxyLogin\" ng-model=\"newRepoSetting.proxyLogin\" />\n+                </div>\n+            </div>\n+            <div class=\"form-group\">\n+                <label class=\"control-label col-sm-2\" for=\"proxyPassword\">Password</label>\n+                <div class=\"col-sm-10\">\n+                    <input type=\"text\" class=\"form-control\" id=\"proxyPassword\" ng-model=\"newRepoSetting.proxyPassword\" />\n+                </div>\n+            </div>\n         </div>\n         <div class=\"modal-footer\">\n           <button type=\"submit\"",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-web/src/components/repository-create/repository-dialog.html",
                "sha": "ab678b767e0f1421b108a29d6215998a19186a97",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java?ref=79fd3a0242df9f7324410cfc5d987850ee3de405",
                "deletions": 5,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "patch": "@@ -62,6 +62,7 @@\n import org.slf4j.LoggerFactory;\n import org.sonatype.aether.RepositoryException;\n import org.sonatype.aether.repository.Authentication;\n+import org.sonatype.aether.repository.Proxy;\n import org.sonatype.aether.repository.RemoteRepository;\n \n import org.apache.zeppelin.conf.ZeppelinConfiguration;\n@@ -432,6 +433,7 @@ private void loadFromFile() throws IOException {\n \n   private void loadInterpreterDependencies(final InterpreterSetting setting) {\n     setting.setStatus(InterpreterSetting.Status.DOWNLOADING_DEPENDENCIES);\n+    setting.setErrorReason(null);\n     interpreterSettings.put(setting.getId(), setting);\n     synchronized (interpreterSettings) {\n       final Thread t = new Thread() {\n@@ -460,11 +462,12 @@ public void run() {\n             }\n \n             setting.setStatus(InterpreterSetting.Status.READY);\n+            setting.setErrorReason(null);\n           } catch (Exception e) {\n             logger.error(String.format(\"Error while downloading repos for interpreter group : %s,\" +\n                     \" go to interpreter setting page click on edit and save it again to make \" +\n-                    \"this interpreter work properly.\",\n-                setting.getGroup()), e);\n+                    \"this interpreter work properly. : %s\",\n+                setting.getGroup(), e.getLocalizedMessage()), e);\n             setting.setErrorReason(e.getLocalizedMessage());\n             setting.setStatus(InterpreterSetting.Status.ERROR);\n           } finally {\n@@ -1307,9 +1310,9 @@ public Interpreter getInterpreter(String noteId, String replName) {\n     return this.interpreterRepositories;\n   }\n \n-  public void addRepository(String id, String url, boolean snapshot, Authentication auth)\n-      throws IOException {\n-    depResolver.addRepo(id, url, snapshot, auth);\n+  public void addRepository(String id, String url, boolean snapshot, Authentication auth,\n+      Proxy proxy) throws IOException {\n+    depResolver.addRepo(id, url, snapshot, auth, proxy);\n     saveToFile();\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/79fd3a0242df9f7324410cfc5d987850ee3de405/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "sha": "494361b304f8300e7fc9925c713c9fa4779b189d",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1376] Add proxy credentials for dependency repo for corporate firewall use-cases\n\n### What is this PR for?\nWhen using Zeppelin behind corporate firewall, sometimes the dependencies download just fails silently. This PR has 2 objectives:\n\n* add proxy credentials information for dependencies repo\n* raise clear error message in case of dependencies download failure\n\nThere are 3 commits.\n\nThe first one add extra inputs in the form for adding new repository\n\n![add_repo](https://cloud.githubusercontent.com/assets/1532977/18017489/0b486fda-6bd2-11e6-90c7-ceda18c53575.png)\n\nThe second commit fixes some issues and display a clear and explicit error message when download of dependencies fail.\n\nBefore that, when the download fails, we can see the below behaviour\n\n![irrelevant_double_error_message](https://cloud.githubusercontent.com/assets/1532977/18017541/3cf0de1e-6bd2-11e6-8285-af03f222e8d2.gif)\n\n* the error message is displayed twice because the call twice the method `checkDownloadingDependencies();`. One in the success callback of:\n\n```javascript\n $scope.updateInterpreterSetting = function(form, settingId) {\n              ...\n            $http.put(baseUrlSrv.getRestApiBase() + '/interpreter/setting/' + settingId, request)\n              .success(function(data, status, headers, config) {\n                $scope.interpreterSettings[index] = data.body;\n                removeTMPSettings(index);\n                thisConfirm.close();\n                checkDownloadingDependencies();\n                $route.reload();\n              })\n              .error(function(data, status, headers, config) {\n             ...\n    };\n```\n\nAnother call is inside success callback of `getInterpreterSettings()`\n\n```javascript\nvar getInterpreterSettings = function() {\n      $http.get(baseUrlSrv.getRestApiBase() + '/interpreter/setting')\n      .success(function(data, status, headers, config) {\n        $scope.interpreterSettings = data.body;\n        checkDownloadingDependencies();\n      }).error(function(data, status, headers, config) {\n      ....\n```\n\nThe problem is that `$route.reload();` in the success callback of `updateInterpreterSetting()` will trigger `init()` then `getInterpreterSettings()` so `checkDownloadingDependencies()` is called twice.\n\nI remove the call to `checkDownloadingDependencies()` from success callback of `updateInterpreterSetting()`\n\nThe second modification is on class `DependencyResolver`. In the screen capture above, we get a **cryptic** NullPointerException coming from `DefaultRepositorySystem`. I now catch this NPE to wrap it into a more sensible and clearer exception:\n\n```java\n\n  public List<ArtifactResult> getArtifactsWithDep(String dependency,\n    Collection<String> excludes) throws RepositoryException {\n    Artifact artifact = new DefaultArtifact(dependency);\n    DependencyFilter classpathFilter = DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE);\n    PatternExclusionsDependencyFilter exclusionFilter =\n            new PatternExclusionsDependencyFilter(excludes);\n\n    CollectRequest collectRequest = new CollectRequest();\n    collectRequest.setRoot(new Dependency(artifact, JavaScopes.COMPILE));\n\n    synchronized (repos) {\n      for (RemoteRepository repo : repos) {\n        collectRequest.addRepository(repo);\n      }\n    }\n    DependencyRequest dependencyRequest = new DependencyRequest(collectRequest,\n            DependencyFilterUtils.andFilter(exclusionFilter, classpathFilter));\n\n //Catch NPE thrown by aether and give a proper error message\n    try {\n      return system.resolveDependencies(session, dependencyRequest).getArtifactResults();\n    } catch (NullPointerException ex) {\n      throw new RepositoryException(String.format(\"Cannot fetch dependencies for %s\", dependency));\n    }\n  }\n```\n\nThe result is much more cleaner\n\n![dependencies_download_error_popup](https://cloud.githubusercontent.com/assets/1532977/18033855/1be5fe9a-6d2e-11e6-91f9-2f5ea66cab26.gif)\n\nThe last commit is just doc update\n\n![updated_docs](https://cloud.githubusercontent.com/assets/1532977/18017797/97302f14-6bd3-11e6-97cc-77bd52f25cde.png)\n\n### What type of PR is it?\n[Improvement]\n\n### Todos\n* [ ] - Code Review\n* [ ] - Simple test with no Internet connection\n* [ ] - Test within a corporate firewall env with a third-party dependency, requiring download\n\n### What is the Jira issue?\n**[ZEPPELIN-1376]**\n\n### How should this be tested?\n\n##### Simple test\n* `git fetch origin pull/1369/head:WebProxy`\n* `git checkout WebProxy`\n* `mvn clean package -DskipTests`\n* `bin/zeppelin-daemon.sh restart`\n* disconnect from the Internet (pull out the cable, shutdown wifi ...)\n* add a random dependency to the Spark interpreter (take `info.archinnov:achilles-core:4.2.2` for example)\n* validate the change, you should see an error popup on the top-right corner saying that Zeppelin cannot download the dependency\n\n##### Corporate firewall test\n* follow the steps above for simple test\n* create a new repository (see how to **[here]**) and set the proxy information\n* retry the steps above to ensure that the download is successful\n\n### Screenshots (if appropriate)\nSee above\n\n### Questions:\n* Does the licenses files need update? --> **NO**\n* Is there breaking changes for older versions? --> **NO**\n* Does this needs documentation?  --> **YES, DONE**\n\n[ZEPPELIN-1376]: https://issues.apache.org/jira/browse/ZEPPELIN-1376\n[here]: http://localhost:4000/manual/dependencymanagement.html\n\nAuthor: DuyHai DOAN <doanduyhai@gmail.com>\nAuthor: doanduyhai <doanduyhai@apache.org>\n\nCloses #1369 from doanduyhai/ZEPPELIN-1376 and squashes the following commits:\n\nb8d44e7 [doanduyhai] [ZEPPELIN-1376] Improve error popup display\n177fbd3 [DuyHai DOAN] [ZEPPELIN-1376] Fixes JS bug to display error popup for other interpreters\n9f76ef4 [DuyHai DOAN] [ZEPPELIN-1376] Do not repeat the same error popup multiple times\nb264193 [DuyHai DOAN] [ZEPPELIN-1376] Add unit test and fix impl for DependencyResolver to catch NPE\n1913a0a [DuyHai DOAN] [ZEPPELIN-1376] Update documentation\nf01be9b [DuyHai DOAN] [ZEPPELIN-1376] Raise clear error message in case of dependencies download failure\n6f2b6f8 [DuyHai DOAN] [ZEPPELIN-1376] Add proxy credentials information for dependencies repo",
        "parent": "https://github.com/apache/zeppelin/commit/821b61bb6bdc8ed0622aad04b3c6918ee73f52c5",
        "patched_files": [
            "interpreter-add-repo2.png",
            "interpreter.controller.js",
            "jobmanager.controller.js",
            "home.controller.js",
            "Repository.java",
            "credential.controller.js",
            "InterpreterRestApi.java",
            "configuration.controller.js",
            "interpreter.html",
            "DependencyResolver.java",
            "AbstractDependencyResolver.java",
            "notebook.controller.js",
            "app.js",
            "InterpreterFactory.java",
            "repository-dialog.html",
            "dependencymanagement.md"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterRestApiTest.java",
            "InterpreterFactoryTest.java",
            "DependencyResolverTest.java"
        ]
    },
    "zeppelin_7ddf810": {
        "bug_id": "zeppelin_7ddf810",
        "commit": "https://github.com/apache/zeppelin/commit/7ddf810ef802cc449c1f5cd6e9664883f1a5477e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/7ddf810ef802cc449c1f5cd6e9664883f1a5477e/zeppelin-web/test/karma.conf.js",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/test/karma.conf.js?ref=7ddf810ef802cc449c1f5cd6e9664883f1a5477e",
                "deletions": 1,
                "filename": "zeppelin-web/test/karma.conf.js",
                "patch": "@@ -35,9 +35,10 @@ module.exports = function(config) {\n       'bower_components/ace-builds/src-noconflict/mode-scala.js',\n       'bower_components/ace-builds/src-noconflict/mode-sql.js',\n       'bower_components/ace-builds/src-noconflict/mode-markdown.js',\n+      'bower_components/ace-builds/src-noconflict/mode-sh.js',\n       'bower_components/ace-builds/src-noconflict/keybinding-emacs.js',\n       'bower_components/ace-builds/src-noconflict/ext-language_tools.js',\n-      'bower_components/ace-builds/src-noconflict/theme-github.js',\n+      'bower_components/ace-builds/src-noconflict/theme-chrome.js',\n       'bower_components/angular-ui-ace/ui-ace.js',\n       'bower_components/jquery.scrollTo/jquery.scrollTo.js',\n       'bower_components/d3/d3.js',",
                "raw_url": "https://github.com/apache/zeppelin/raw/7ddf810ef802cc449c1f5cd6e9664883f1a5477e/zeppelin-web/test/karma.conf.js",
                "sha": "ffbc99699bb82af0758b64f21fbc5b01433c4268",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/zeppelin/blob/7ddf810ef802cc449c1f5cd6e9664883f1a5477e/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java?ref=7ddf810ef802cc449c1f5cd6e9664883f1a5477e",
                "deletions": 4,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "patch": "@@ -41,6 +41,7 @@\n import java.util.Set;\n \n import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.NullArgumentException;\n import org.apache.zeppelin.conf.ZeppelinConfiguration;\n import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;\n import org.apache.zeppelin.display.AngularObjectRegistry;\n@@ -314,9 +315,11 @@ private RegisteredInterpreter getRegisteredReplInfoFromClassName(String clsName)\n     List<RegisteredInterpreter> registeredInterpreters = new LinkedList<RegisteredInterpreter>();\n \n     for (String className : interpreterClassList) {\n-      registeredInterpreters.add(Interpreter.findRegisteredInterpreterByClassName(className));\n+      RegisteredInterpreter ri = Interpreter.findRegisteredInterpreterByClassName(className);\n+      if (ri != null) {\n+        registeredInterpreters.add(ri);\n+      }\n     }\n-\n     return registeredInterpreters;\n   }\n \n@@ -353,7 +356,14 @@ private InterpreterGroup createInterpreterGroup(String id,\n       String groupName,\n       InterpreterOption option,\n       Properties properties)\n-      throws InterpreterException {\n+      throws InterpreterException , NullArgumentException {\n+\n+    //When called from REST API without option we receive NPE\n+    if (option == null )\n+      throw new NullArgumentException(\"option\");\n+    //When called from REST API without option we receive NPE\n+    if (properties == null )\n+      throw new NullArgumentException(\"properties\");\n \n     AngularObjectRegistry angularObjectRegistry;\n \n@@ -589,7 +599,7 @@ private Interpreter createRepl(String dirName, String className,\n           separateCL = false;\n         }\n       } catch (Exception e) {\n-        // nothing to do.\n+        logger.error(\"exception checking server classloader driver\" , e);\n       }\n \n       URLClassLoader cl;",
                "raw_url": "https://github.com/apache/zeppelin/raw/7ddf810ef802cc449c1f5cd6e9664883f1a5477e/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "sha": "8a1d6ff2752b611bfa246de6a419fb4e88de237f",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/zeppelin/blob/7ddf810ef802cc449c1f5cd6e9664883f1a5477e/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java?ref=7ddf810ef802cc449c1f5cd6e9664883f1a5477e",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "patch": "@@ -27,6 +27,7 @@\n import java.util.List;\n import java.util.Properties;\n \n+import org.apache.commons.lang.NullArgumentException;\n import org.apache.zeppelin.conf.ZeppelinConfiguration;\n import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;\n import org.apache.zeppelin.interpreter.mock.MockInterpreter1;\n@@ -97,7 +98,7 @@ public void testBasic() {\n \t}\n \n   @Test\n-  public void testFactoryDefaultList() throws InterpreterException, IOException {\n+  public void testFactoryDefaultList() throws IOException {\n     // get default list from default setting\n     List<String> all = factory.getDefaultInterpreterSettingList();\n     assertEquals(2, all.size());\n@@ -111,6 +112,23 @@ public void testFactoryDefaultList() throws InterpreterException, IOException {\n     assertEquals(\"a mock\", factory.get(all.get(1)).getName());\n   }\n \n+  @Test\n+  public void testExceptions() throws IOException {\n+    List<String> all = factory.getDefaultInterpreterSettingList();\n+    // add setting with null option & properties expected nullArgumentException.class\n+    try {\n+      factory.add(\"a mock\", \"mock2\", null, new Properties());\n+    } catch(NullArgumentException e) {\n+        assertEquals(\"Test null option\" , e.getMessage(),new NullArgumentException(\"option\").getMessage());\n+      }\n+    try {\n+      factory.add(\"a mock\" , \"mock2\" , new InterpreterOption(false),null);\n+    } catch (NullArgumentException e){\n+      assertEquals(\"Test null properties\" , e.getMessage(),new NullArgumentException(\"properties\").getMessage());\n+    }\n+  }\n+\n+\n   @Test\n   public void testSaveLoad() throws InterpreterException, IOException {\n     // interpreter settings",
                "raw_url": "https://github.com/apache/zeppelin/raw/7ddf810ef802cc449c1f5cd6e9664883f1a5477e/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "sha": "6a69b83b2e9f214c1bfa57c875f21edb56ce9f8c",
                "status": "modified"
            }
        ],
        "message": "Add argument check for option and properties to protect from NPE\n\nHere is the repro steps:\n    1) run zeppelin\n    2) using some REST client call the update settings with the following JSON\n    {\"id\":\"2AVJY1M6F\",\"name\":\"md\",\"group\":\"md\",\"properties\":{\"propname\":\"propvalue\"},\"interpreterGroup\":[{\"class\":\"org.apache.zeppelin.markdown.Markdown\",\"name\":\"md\"}]}\n    - NOTE that I intentionally omitted the option part\n    3) Now look at the log file:\n    INFO [2015-08-19 09:14:13,106] ({qtp2095490653-44}\n    InterpreterRestApi.java[updateSetting]:111) - Update interpreterSetting\n    2AVGGNEKP\n     WARN [2015-08-19 09:14:13,121] ({qtp2095490653-44}\n    LogUtils.java[doLog]:452) - Application {\n    http://rest.zeppelin.apache.org/}NotebookRestApi has thrown exception,\n    unwinding now\n    org.apache.cxf.interceptor.Fault\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:162)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:128)\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:192)\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:100)\n    at\n    org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:57)\n    at\n    org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)\n    at\n    org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)\n    at\n    org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)\n    at\n    org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:239)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:248)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:222)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:153)\n    at\n    org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:167)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:286)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPut(AbstractHTTPServlet.java:223)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:598)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:262)\n    at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:684)\n    at\n    org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1496)\n    at org.apache.zeppelin.server.CorsFilter.doFilter(CorsFilter.java:53)\n    at\n    org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1467)\n    at\n    org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:499)\n    at\n    org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:229)\n    at\n    org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1086)\n    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:428)\n    at\n    org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n    at\n    org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1020)\n    at\n    org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n    at\n    org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n    at\n    org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n    at org.eclipse.jetty.server.Server.handle(Server.java:370)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:494)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:982)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1043)\n    at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:865)\n    at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)\n    at\n    org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n    at\n    org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:667)\n    at\n    org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n    at\n    org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n    at\n    org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n    at java.lang.Thread.run(Thread.java:745)\n    Caused by: java.lang.NullPointerException\n    at\n    org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup(InterpreterFactory.java:361)\n    at\n    org.apache.zeppelin.interpreter.InterpreterFactory.setPropertyAndRestart(InterpreterFactory.java:515)\n    at\n    org.apache.zeppelin.rest.InterpreterRestApi.updateSetting(InterpreterRestApi.java:116)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\n    sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at\n    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n    ... 40 more\n     WARN [2015-08-19 09:14:13,239] ({qtp2095490653-44}\n    PhaseInterceptorChain.java[unwind]:444) - Exception in handleFault on\n    interceptor\n    org.apache.cxf.binding.xml.interceptor.XMLFaultOutInterceptor51637100\n    org.apache.cxf.interceptor.Fault\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:162)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:128)\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:192)\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:100)\n    at\n    org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:57)\n    at\n    org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)\n    at\n    org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)\n    at\n    org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)\n    at\n    org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:239)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:248)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:222)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:153)\n    at\n    org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:167)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:286)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPut(AbstractHTTPServlet.java:223)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:598)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:262)\n    at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:684)\n    at\n    org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1496)\n    at org.apache.zeppelin.server.CorsFilter.doFilter(CorsFilter.java:53)\n    at\n    org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1467)\n    at\n    org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:499)\n    at\n    org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:229)\n    at\n    org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1086)\n    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:428)\n    at\n    org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n    at\n    org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1020)\n    at\n    org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n    at\n    org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n    at\n    org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n    at org.eclipse.jetty.server.Server.handle(Server.java:370)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:494)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:982)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1043)\n    at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:865)\n    at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)\n    at\n    org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n    at\n    org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:667)\n    at\n    org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n    at\n    org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n    at\n    org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n    at java.lang.Thread.run(Thread.java:745)\n    Caused by: java.lang.NullPointerException\n    at\n    org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup(InterpreterFactory.java:361)\n    at\n    org.apache.zeppelin.interpreter.InterpreterFactory.setPropertyAndRestart(InterpreterFactory.java:515)\n    at\n    org.apache.zeppelin.rest.InterpreterRestApi.updateSetting(InterpreterRestApi.java:116)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\n    sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at\n    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n    ... 40 more\n    ERROR [2015-08-19 09:14:13,242] ({qtp2095490653-44}\n    AbstractFaultChainInitiatorObserver.java[onMessage]:115) - Error occurred\n    during error handling, give up!\n    org.apache.cxf.interceptor.Fault\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:162)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:128)\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:192)\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:100)\n    at\n    org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:57)\n    at\n    org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)\n    at\n    org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)\n    at\n    org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)\n    at\n    org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:239)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:248)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:222)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:153)\n    at\n    org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:167)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:286)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPut(AbstractHTTPServlet.java:223)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:598)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:262)\n    at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:684)\n    at\n    org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1496)\n    at org.apache.zeppelin.server.CorsFilter.doFilter(CorsFilter.java:53)\n    at\n    org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1467)\n    at\n    org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:499)\n    at\n    org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:229)\n    at\n    org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1086)\n    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:428)\n    at\n    org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n    at\n    org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1020)\n    at\n    org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n    at\n    org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n    at\n    org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n    at org.eclipse.jetty.server.Server.handle(Server.java:370)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:494)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:982)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1043)\n    at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:865)\n    at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)\n    at\n    org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n    at\n    org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:667)\n    at\n    org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n    at\n    org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n    at\n    org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n    at java.lang.Thread.run(Thread.java:745)\n    Caused by: java.lang.NullPointerException\n    at\n    org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup(InterpreterFactory.java:361)\n    at\n    org.apache.zeppelin.interpreter.InterpreterFactory.setPropertyAndRestart(InterpreterFactory.java:515)\n    at\n    org.apache.zeppelin.rest.InterpreterRestApi.updateSetting(InterpreterRestApi.java:116)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\n    sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at\n    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n    ... 40 more\n     WARN [2015-08-19 09:14:13,245] ({qtp2095490653-44}\n    ServletHandler.java[doHandle]:561) - /api/interpreter/setting/2AVGGNEKP\n    java.lang.RuntimeException: org.apache.cxf.interceptor.Fault\n    at\n    org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:116)\n    at\n    org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:333)\n    at\n    org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)\n    at\n    org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:239)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:248)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:222)\n    at\n    org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:153)\n    at\n    org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:167)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:286)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPut(AbstractHTTPServlet.java:223)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:598)\n    at\n    org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:262)\n    at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:684)\n    at\n    org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1496)\n    at org.apache.zeppelin.server.CorsFilter.doFilter(CorsFilter.java:53)\n    at\n    org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1467)\n    at\n    org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:499)\n    at\n    org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:229)\n    at\n    org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1086)\n    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:428)\n    at\n    org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n    at\n    org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1020)\n    at\n    org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n    at\n    org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n    at\n    org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n    at org.eclipse.jetty.server.Server.handle(Server.java:370)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:494)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:982)\n    at\n    org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1043)\n    at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:865)\n    at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)\n    at\n    org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n    at\n    org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:667)\n    at\n    org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n    at\n    org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n    at\n    org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n    at java.lang.Thread.run(Thread.java:745)\n    Caused by: org.apache.cxf.interceptor.Fault\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:162)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:128)\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:192)\n    at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:100)\n    at\n    org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:57)\n    at\n    org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)\n    at\n    org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:272)\n    ... 35 more\n    Caused by:* java.lang.NullPointerException*\n    at\n    org.apache.zeppelin.interpreter.InterpreterFactory.createInterpreterGroup(InterpreterFactory.java:361)\n    at\n    org.apache.zeppelin.interpreter.InterpreterFactory.setPropertyAndRestart(InterpreterFactory.java:515)\n    at\n    org.apache.zeppelin.rest.InterpreterRestApi.updateSetting(InterpreterRestApi.java:116)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\n    sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at\n    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180)\n    at\n    org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n    ... 40 more\n\n    This is because we are trying to access the option variable when it is NULL\nThis PR fixes that and add test to check it.\nThis replace PR 223.\nReady for review\n\nAuthor: eranwitkon <goi.cto@gmail.com>\n\nCloses #241 from eranwitkon/255 and squashes the following commits:\n\nb463100 [eranwitkon] Remove unit test\n6075a66 [eranwitkon] fix CI problem\n1aa806f [eranwitkon] Fix CI problem\nda0717f [eranwitkon] Fix getRegisteredInterpreterList, avoid adding null to the list when class name from config is not registered (only interpreters available on the disk (has interpreter folder) are registered. findRegisteredInterpreterByClassName return null when class name not found. (cherry picked from commit 6724e54)\nf863871 [eranwitkon] Add argument check for option and properties to protect from NPE (cherry picked from commit 39ac2c1)",
        "parent": "https://github.com/apache/zeppelin/commit/7ba743eec77819397460c91b6fa49dfa4604c5de",
        "patched_files": [
            "karma.conf.js",
            "InterpreterFactory.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterFactoryTest.java"
        ]
    },
    "zeppelin_7f6f739": {
        "bug_id": "zeppelin_7f6f739",
        "commit": "https://github.com/apache/zeppelin/commit/7f6f739ae396e07de573bea4ef16a388c54e77b8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/7f6f739ae396e07de573bea4ef16a388c54e77b8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java?ref=7f6f739ae396e07de573bea4ef16a388c54e77b8",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "patch": "@@ -1382,9 +1382,9 @@ public void setEnv(Map<String, String> env) {\n   public Map<String, Object> getEditorSetting(String user, String noteId, String replName) {\n     Interpreter intp = getInterpreter(user, noteId, replName);\n     Map<String, Object> editor = DEFAULT_EDITOR;\n-    String defaultSettingName = getDefaultInterpreterSetting(noteId).getName();\n     String group = StringUtils.EMPTY;\n     try {\n+      String defaultSettingName = getDefaultInterpreterSetting(noteId).getName();\n       List<InterpreterSetting> intpSettings = getInterpreterSettings(noteId);\n       for (InterpreterSetting intpSetting : intpSettings) {\n         String[] replNameSplit = replName.split(\"\\\\.\");",
                "raw_url": "https://github.com/apache/zeppelin/raw/7f6f739ae396e07de573bea4ef16a388c54e77b8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "sha": "4564e3a518d1c36c0522a5b4ff662d8392bd9727",
                "status": "modified"
            }
        ],
        "message": "HOT FIX: Fix NPE while getting default interpreter setting\n\n### What is this PR for?\nNPE while starting Zeppelin for the first time without interpreter settings\n\n### What type of PR is it?\nHot Fix\n\n### What is the Jira issue?\nn/a\n\n### How should this be tested?\nremove conf/interpreter.json and start Zeppelin\n\n### Logs\n**Before**\n`\njava.lang.NullPointerException\n        at org.apache.zeppelin.interpreter.InterpreterFactory.getEditorSetting(InterpreterFactory.java:1385)\n        at org.apache.zeppelin.socket.NotebookServer.getEditorSetting(NotebookServer.java:1796)\n        at org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:290)\n        at org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n        at org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:128)\n        at org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n        at org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\n        at org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:122)\n        at org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:161)\n        at org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)\n        at org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)\n        at org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)\n        at org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)\n        at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:632)\n        at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:480)\n        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n        at java.lang.Thread.run(Thread.java:745)\n`\n\n**After**\n`\n WARN [2016-11-22 18:52:16,890] ({qtp1702660825-60} InterpreterFactory.java[getEditorSetting]:1405) - Couldn't get interpreter editor setting\n`\n\n### Questions:\n* Does the licenses files need update? n/a\n* Is there breaking changes for older versions? n/a\n* Does this needs documentation? n/a\n\nAuthor: Renjith Kamath <renjith.kamath@gmail.com>\n\nCloses #1669 from r-kamath/npe-interpreter-setting and squashes the following commits:\n\ne162689 [Renjith Kamath] Fix NPE while getting default interpreter setting",
        "parent": "https://github.com/apache/zeppelin/commit/4dd36bfa312285a13347fb15beadcb0baa30ed23",
        "patched_files": [
            "InterpreterFactory.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterFactoryTest.java"
        ]
    },
    "zeppelin_7f733ff": {
        "bug_id": "zeppelin_7f733ff",
        "commit": "https://github.com/apache/zeppelin/commit/7f733ffb2ef5bfe30418028f696d267046dba833",
        "file": [
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/zeppelin/blob/7f733ffb2ef5bfe30418028f696d267046dba833/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java?ref=7f733ffb2ef5bfe30418028f696d267046dba833",
                "deletions": 6,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java",
                "patch": "@@ -33,6 +33,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableMap;\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n \n@@ -191,20 +193,45 @@ public void close() {\n   @Override\n   public Revision checkpoint(String noteId, String checkpointMsg, AuthenticationInfo subject)\n       throws IOException {\n-    // Auto-generated method stub\n-    return null;\n+    if (StringUtils.isBlank(noteId)) {\n+      return null;\n+    }\n+    String endpoint = Joiner.on(\"/\").join(noteId, \"checkpoint\");\n+    String content = GSON.toJson(ImmutableMap.of(\"message\", checkpointMsg));\n+    String response = restApiClient.asyncPutWithResponseBody(endpoint, content);\n+    \n+    return GSON.fromJson(response, Revision.class);\n   }\n \n   @Override\n   public Note get(String noteId, String revId, AuthenticationInfo subject) throws IOException {\n-    // Auto-generated method stub\n-    return null;\n+    if (StringUtils.isBlank(noteId) || StringUtils.isBlank(revId)) {\n+      return EMPTY_NOTE;\n+    }\n+    String endpoint = Joiner.on(\"/\").join(noteId, \"checkpoint\", revId);\n+    String response = restApiClient.asyncGet(endpoint);\n+    Note note = GSON.fromJson(response, Note.class);\n+    if (note == null) {\n+      return EMPTY_NOTE;\n+    }\n+    LOG.info(\"ZeppelinHub REST API get note {} revision {}\", noteId, revId);\n+    return note;\n   }\n \n   @Override\n   public List<Revision> revisionHistory(String noteId, AuthenticationInfo subject) {\n-    // Auto-generated method stub\n-    return null;\n+    if (StringUtils.isBlank(noteId)) {\n+      return Collections.emptyList();\n+    }\n+    String endpoint = Joiner.on(\"/\").join(noteId, \"checkpoint\");\n+    List<Revision> history = Collections.emptyList();\n+    try {\n+      String response = restApiClient.asyncGet(endpoint);\n+      history = GSON.fromJson(response, new TypeToken<List<Revision>>(){}.getType());\n+    } catch (IOException e) {\n+      LOG.error(\"Cannot get note history\", e);\n+    }\n+    return history;\n   }\n \n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/7f733ffb2ef5bfe30418028f696d267046dba833/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java",
                "sha": "960bcde5aeb6af1fca0aebf670790d88829fbdce",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/zeppelin/blob/7f733ffb2ef5bfe30418028f696d267046dba833/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/rest/ZeppelinhubRestApiHandler.java",
                "changes": 118,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/rest/ZeppelinhubRestApiHandler.java?ref=7f733ffb2ef5bfe30418028f696d267046dba833",
                "deletions": 71,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/rest/ZeppelinhubRestApiHandler.java",
                "patch": "@@ -25,9 +25,8 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang.StringUtils;\n import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n import org.eclipse.jetty.client.api.Response;\n-import org.eclipse.jetty.client.api.Result;\n-import org.eclipse.jetty.client.util.BufferingResponseListener;\n import org.eclipse.jetty.client.util.InputStreamResponseListener;\n import org.eclipse.jetty.client.util.StringContentProvider;\n import org.eclipse.jetty.http.HttpMethod;\n@@ -115,89 +114,66 @@ private HttpClient getAsyncClient() {\n   }\n \n   public String asyncGet(String argument) throws IOException {\n-    String note = StringUtils.EMPTY;\n+    return sendToZeppelinHub(HttpMethod.GET, zepelinhubUrl + argument);\n+  }\n+  \n+  public String asyncPutWithResponseBody(String url, String json) throws IOException {\n+    if (StringUtils.isBlank(url) || StringUtils.isBlank(json)) {\n+      LOG.error(\"Empty note, cannot send it to zeppelinHub\");\n+      throw new IOException(\"Cannot send emtpy note to zeppelinHub\");\n+    }\n+    return sendToZeppelinHub(HttpMethod.PUT, zepelinhubUrl + url, json);\n+  }\n+  \n+  public void asyncPut(String jsonNote) throws IOException {\n+    if (StringUtils.isBlank(jsonNote)) {\n+      LOG.error(\"Cannot save empty note/string to ZeppelinHub\");\n+      return;\n+    }\n+    sendToZeppelinHub(HttpMethod.PUT, zepelinhubUrl, jsonNote);\n+  }\n \n+  public void asyncDel(String argument) throws IOException {\n+    if (StringUtils.isBlank(argument)) {\n+      LOG.error(\"Cannot delete empty note from ZeppelinHub\");\n+      return;\n+    }\n+    sendToZeppelinHub(HttpMethod.DELETE, zepelinhubUrl + argument);\n+  }\n+  \n+  private String sendToZeppelinHub(HttpMethod method, String url) throws IOException {\n+    return sendToZeppelinHub(method, url, StringUtils.EMPTY);\n+  }\n+  \n+  private String sendToZeppelinHub(HttpMethod method, String url, String json) throws IOException {\n     InputStreamResponseListener listener = new InputStreamResponseListener();\n-    client.newRequest(zepelinhubUrl + argument)\n-          .header(ZEPPELIN_TOKEN_HEADER, token)\n-          .send(listener);\n-\n-    // Wait for the response headers to arrive\n     Response response;\n+    String data;\n+\n+    Request request = client.newRequest(url).method(method).header(ZEPPELIN_TOKEN_HEADER, token);\n+    if ((method.equals(HttpMethod.PUT) || method.equals(HttpMethod.POST)) &&\n+        !StringUtils.isBlank(json)) {\n+      request.content(new StringContentProvider(json, \"UTF-8\"), \"application/json;charset=UTF-8\");\n+    }\n+    request.send(listener);\n+\n     try {\n       response = listener.get(30, TimeUnit.SECONDS);\n     } catch (InterruptedException | TimeoutException | ExecutionException e) {\n-      LOG.error(\"Cannot perform Get request to ZeppelinHub\", e);\n-      throw new IOException(\"Cannot load note from ZeppelinHub\", e);\n+      LOG.error(\"Cannot perform {} request to ZeppelinHub\", method, e);\n+      throw new IOException(\"Cannot perform \" + method + \" request to ZeppelinHub\", e);\n     }\n \n     int code = response.getStatus();\n     if (code == 200) {\n       try (InputStream responseContent = listener.getInputStream()) {\n-        note = IOUtils.toString(responseContent, \"UTF-8\");\n+        data = IOUtils.toString(responseContent, \"UTF-8\");\n       }\n     } else {\n-      LOG.error(\"ZeppelinHub Get {} returned with status {} \", zepelinhubUrl + argument, code);\n-      throw new IOException(\"Cannot load note from ZeppelinHub\");\n-    }\n-    return note;\n-  }\n-\n-  public void asyncPut(String jsonNote) throws IOException {\n-    if (StringUtils.isBlank(jsonNote)) {\n-      LOG.error(\"Cannot save empty note/string to ZeppelinHub\");\n-      return;\n-    }\n-\n-    client.newRequest(zepelinhubUrl).method(HttpMethod.PUT)\n-        .header(ZEPPELIN_TOKEN_HEADER, token)\n-        .content(new StringContentProvider(jsonNote, \"UTF-8\"), \"application/json;charset=UTF-8\")\n-        .send(new BufferingResponseListener() {\n-\n-          @Override\n-          public void onComplete(Result res) {\n-            if (!res.isFailed() && res.getResponse().getStatus() == 200) {\n-              LOG.info(\"Successfully saved note to ZeppelinHub with {}\",\n-                  res.getResponse().getStatus());\n-            } else {\n-              LOG.warn(\"Failed to save note to ZeppelinHub with HttpStatus {}\",\n-                  res.getResponse().getStatus());\n-            }\n-          }\n-\n-          @Override\n-          public void onFailure(Response response, Throwable failure) {\n-            LOG.error(\"Failed to save note to ZeppelinHub: {}\", response.getReason(), failure);\n-          }\n-        });\n-  }\n-\n-  public void asyncDel(String argument) {\n-    if (StringUtils.isBlank(argument)) {\n-      LOG.error(\"Cannot delete empty note from ZeppelinHub\");\n-      return;\n+      LOG.error(\"ZeppelinHub {} {} returned with status {} \", method, url, code);\n+      throw new IOException(\"Cannot perform \" + method + \" request to ZeppelinHub\");\n     }\n-    client.newRequest(zepelinhubUrl + argument)\n-        .method(HttpMethod.DELETE)\n-        .header(ZEPPELIN_TOKEN_HEADER, token)\n-        .send(new BufferingResponseListener() {\n-\n-          @Override\n-          public void onComplete(Result res) {\n-            if (!res.isFailed() && res.getResponse().getStatus() == 200) {\n-              LOG.info(\"Successfully removed note from ZeppelinHub with {}\",\n-                  res.getResponse().getStatus());\n-            } else {\n-              LOG.warn(\"Failed to remove note from ZeppelinHub with HttpStatus {}\",\n-                  res.getResponse().getStatus());\n-            }\n-          }\n-\n-          @Override\n-          public void onFailure(Response response, Throwable failure) {\n-            LOG.error(\"Failed to remove note from ZeppelinHub: {}\", response.getReason(), failure);\n-          }\n-        });\n+    return data;\n   }\n \n   public void close() {",
                "raw_url": "https://github.com/apache/zeppelin/raw/7f733ffb2ef5bfe30418028f696d267046dba833/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/rest/ZeppelinhubRestApiHandler.java",
                "sha": "82159fc68ec62cfe76401a9db71c328eddd77fd8",
                "status": "modified"
            }
        ],
        "message": "Zeppelin 1307 - Implement notebook revision in Zeppelinhub repo\n\n### What is this PR for?\nImplement versioning in ZeppelinHub notebook storage.\n\n### What type of PR is it?\nImprovement\n\n### Todos\n* [x] - Implement Versioning API\n\n### What is the Jira issue?\n * [ZEPPELIN-1307](https://issues.apache.org/jira/browse/ZEPPELIN-1307)\n\n### How should this be tested?\nEdit `zeppelin-env.sh` and add `org.apache.zeppelin.notebook.repo.zeppelinhub.ZeppelinHubRepo` in `ZEPPELIN_NOTEBOOK_STORAGE`.\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? NO\n* Is there breaking changes for older versions? NO\n* Does this needs documentation? NO\n\nAuthor: Anthony Corbacho <corbacho.anthony@gmail.com>\n\nCloses #1338 from anthonycorbacho/ZEPPELIN-1307 and squashes the following commits:\n\ndd57e7f [Anthony Corbacho] Fix NPE\naef5cf3 [Anthony Corbacho] cleanup code\n6cd9251 [Anthony Corbacho] revert change to try ressource stmnt\n3b919a9 [Anthony Corbacho] Rework log trace\n74a0cdb [Anthony Corbacho] change asyncPutWithResponseBody to accpet url instead of noteId\n2395a6e [Anthony Corbacho] Light refactor of ZeppelinHubRestapiHandler and extract api call to a single method\n5d4b54b [Anthony Corbacho] Implement checkpoint method\n3942a78 [Anthony Corbacho] Implement get revision\n9bd0946 [Anthony Corbacho] Close InputStream in asyncGet",
        "parent": "https://github.com/apache/zeppelin/commit/d028b3820f29d2c91ee5ab1b46100a87554df02b",
        "patched_files": [
            "ZeppelinHubRepo.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "ZeppelinHubRepoTest.java"
        ]
    },
    "zeppelin_803116f": {
        "bug_id": "zeppelin_803116f",
        "commit": "https://github.com/apache/zeppelin/commit/803116fd0d4ad5baaf3d85b7c903d75fd04b2030",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/803116fd0d4ad5baaf3d85b7c903d75fd04b2030/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=803116fd0d4ad5baaf3d85b7c903d75fd04b2030",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -362,7 +362,7 @@ public Paragraph addNewParagraph(AuthenticationInfo authenticationInfo) {\n    *\n    * @param srcParagraph source paragraph\n    */\n-  void addCloneParagraph(Paragraph srcParagraph) {\n+  void addCloneParagraph(Paragraph srcParagraph, AuthenticationInfo subject) {\n \n     // Keep paragraph original ID\n     final Paragraph newParagraph = new Paragraph(srcParagraph.getId(), this, this, factory);\n@@ -371,11 +371,17 @@ void addCloneParagraph(Paragraph srcParagraph) {\n     Map<String, Object> param = srcParagraph.settings.getParams();\n     LinkedHashMap<String, Input> form = srcParagraph.settings.getForms();\n \n+    logger.debug(\"srcParagraph user: \" + srcParagraph.getUser());\n+    \n+    newParagraph.setAuthenticationInfo(subject);\n     newParagraph.setConfig(config);\n     newParagraph.settings.setParams(param);\n     newParagraph.settings.setForms(form);\n     newParagraph.setText(srcParagraph.getText());\n     newParagraph.setTitle(srcParagraph.getTitle());\n+    \n+    logger.debug(\"newParagraph user: \" + newParagraph.getUser());\n+\n \n     try {\n       Gson gson = new Gson();",
                "raw_url": "https://github.com/apache/zeppelin/raw/803116fd0d4ad5baaf3d85b7c903d75fd04b2030/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "fc70c706ab7af4efd89da1175ae5c2a99d291cb3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/803116fd0d4ad5baaf3d85b7c903d75fd04b2030/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=803116fd0d4ad5baaf3d85b7c903d75fd04b2030",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -211,7 +211,7 @@ public Note importNote(String sourceJson, String noteName, AuthenticationInfo su\n       newNote.setCronSupported(getConf());\n       List<Paragraph> paragraphs = oldNote.getParagraphs();\n       for (Paragraph p : paragraphs) {\n-        newNote.addCloneParagraph(p);\n+        newNote.addCloneParagraph(p, subject);\n       }\n \n       notebookAuthorization.setNewNotePermissions(newNote.getId(), subject);\n@@ -252,7 +252,7 @@ public Note cloneNote(String sourceNoteId, String newNoteName, AuthenticationInf\n \n     List<Paragraph> paragraphs = sourceNote.getParagraphs();\n     for (Paragraph p : paragraphs) {\n-      newNote.addCloneParagraph(p);\n+      newNote.addCloneParagraph(p, subject);\n     }\n \n     noteSearchService.addIndexDoc(newNote);",
                "raw_url": "https://github.com/apache/zeppelin/raw/803116fd0d4ad5baaf3d85b7c903d75fd04b2030/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "7467e315cded876f68dac91d1babacd622becd6f",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/zeppelin/blob/803116fd0d4ad5baaf3d85b7c903d75fd04b2030/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java?ref=803116fd0d4ad5baaf3d85b7c903d75fd04b2030",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "patch": "@@ -1233,7 +1233,7 @@ public void onParagraphStatusChange(Paragraph p, Status status) {\n     Paragraph p1 = note1.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n     assertEquals(1, onParagraphCreate.get());\n \n-    note1.addCloneParagraph(p1);\n+    note1.addCloneParagraph(p1, AuthenticationInfo.ANONYMOUS);\n     assertEquals(2, onParagraphCreate.get());\n \n     note1.removeParagraph(anonymous.getUser(), p1.getId());\n@@ -1401,6 +1401,27 @@ public void testPublicPrivateNewNote() throws IOException, SchedulerException {\n     System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC.getVarName(), \"true\");\n     ZeppelinConfiguration.create();\n   }\n+  \n+  @Test\n+  public void testCloneImportCheck() throws IOException {\n+    Note sourceNote = notebook.createNote(new AuthenticationInfo(\"user\"));\n+    sourceNote.setName(\"TestNote\");\n+    \n+    assertEquals(\"TestNote\",sourceNote.getName());\n+\n+    Paragraph sourceParagraph = sourceNote.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n+    assertEquals(\"anonymous\", sourceParagraph.getUser());\n+\n+    Note destNote = notebook.createNote(new AuthenticationInfo(\"user\"));\n+    destNote.setName(\"ClonedNote\");\n+    assertEquals(\"ClonedNote\",destNote.getName());\n+\n+    List<Paragraph> paragraphs = sourceNote.getParagraphs();\n+    for (Paragraph p : paragraphs) {\n+    \t  destNote.addCloneParagraph(p, AuthenticationInfo.ANONYMOUS);\n+      assertEquals(\"anonymous\", p.getUser());\n+    }\n+  }\n \n   private void delete(File file){\n     if(file.isFile()) file.delete();",
                "raw_url": "https://github.com/apache/zeppelin/raw/803116fd0d4ad5baaf3d85b7c903d75fd04b2030/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "sha": "cfb2e1660ce529fee6a3c7cc0aba166994af49b9",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-3309. Import/Clone user not set in Paragraph causes NPE.\n\nWhat is this PR for?\nDuring Import/Clone Paragraph set \"user\" to eliminate NPEs thrown in Helium and other functions leaving unusable notebooks.\n\nWhat type of PR is it?\n[Bug Fix]\n\nTodos\n\nWhat is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-3309\n\nHow should this be tested?\nManually tested using Import/Clone of Notebooks and attempt to adjust bound interpreters\n\nScreenshots (if appropriate)\n\nQuestions:\nDoes the licenses files need update? No\nIs there breaking changes for older versions? No\nDoes this needs documentation? No\nAuthor: Greg Senia gseniaapache.org\n\nAuthor: gss2002 <greg@senia.org>\n\nCloses #2855 from gss2002/ZEPPELIN-3309 and squashes the following commits:\n\nb8c35c9 [gss2002] ZEPPELIN-3309. Import/Clone user not set in Paragraph causes NPE.",
        "parent": "https://github.com/apache/zeppelin/commit/f4a798b6230b4f2389ad7ea9b41818b15d9ab5a7",
        "patched_files": [
            "Notebook.java",
            "Note.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookTest.java",
            "NoteTest.java"
        ]
    },
    "zeppelin_82de508": {
        "bug_id": "zeppelin_82de508",
        "commit": "https://github.com/apache/zeppelin/commit/82de508d727761a9d95ce506a23e39b372f82a93",
        "file": [
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/docs/rest-api/rest-notebook.md",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/rest-api/rest-notebook.md?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "docs/rest-api/rest-notebook.md",
                "patch": "@@ -556,4 +556,33 @@ limitations under the License.\n       <td><pre>{\"status\":\"OK\",\"body\":\"* * * * * ?\"}</pre></td>\n     </tr>\n   </table>\n+\n+  <table class=\"table-configuration\">\n+    <col width=\"200\">\n+    <tr>\n+      <th>Full-text search through the paragraphs in all notebooks</th>\n+      <th></th>\n+    </tr>\n+    <tr>\n+      <td>Description</td>\n+      <td>```GET``` request will return list of matching paragraphs\n+      </td>\n+    </tr>\n+    <tr>\n+      <td>URL</td>\n+      <td>```http://[zeppelin-server]:[zeppelin-port]/api/notebook/search?q=[query]```</td>\n+    </tr>\n+    <tr>\n+      <td>Success code</td>\n+      <td>200</td>\n+    </tr>\n+    <tr>\n+      <td>Fail code</td>\n+      <td> 500 </td>\n+    </tr>\n+    <tr>\n+      <td>Sample JSON response </td>\n+      <td><pre>{\"status\":\"OK\", body: [{\"id\":\"<noteId>/paragraph/<paragraphId>\", \"name\":\"Notebook Name\", \"snippet\":\"\", \"text\":\"\"}]}</pre></td>\n+    </tr>\n+  </table>\n   ",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/docs/rest-api/rest-notebook.md",
                "sha": "fade802c5b4ff0ec2a5416881d41cf506bce2de8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-distribution/src/bin_license/LICENSE",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-distribution/src/bin_license/LICENSE?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 1,
                "filename": "zeppelin-distribution/src/bin_license/LICENSE",
                "patch": "@@ -44,6 +44,7 @@ The following components are provided under Apache License.\n     (Apache 2.0) Apache Tajo (http://tajo.apache.org/)\n     (Apache 2.0) Apache Flink (http://flink.apache.org/)\n     (Apache 2.0) Apache Thrift (http://thrift.apache.org/)\n+    (Apache 2.0) Apache Lucene (https://lucene.apache.org/)\n     (Apache 2.0) Apache Zookeeper (org.apache.zookeeper:zookeeper:jar:3.4.5 - http://zookeeper.apache.org/)\n     (Apache 2.0) Chill (com.twitter:chill-java:jar:0.5.0 - https://github.com/twitter/chill/)\n     (Apache 2.0) Codehaus Plexus (org.codehaus.plexus:plexus:jar:1.5.6 - https://codehaus-plexus.github.io/)\n@@ -129,10 +130,10 @@ The following components are provided under the MIT License.\n     (The MIT License) Objenesis (org.objenesis:objenesis:2.1 - https://github.com/easymock/objenesis) - Copyright (c) 2006-2015 the original author and authors\n     (The MIT License) JCL 1.1.1 implemented over SLF4J (org.slf4j:jcl-over-slf4j:1.7.5 - http://www.slf4j.org)    \n     (The MIT License) JUL to SLF4J bridge (org.slf4j:jul-to-slf4j:1.7.5 - http://www.slf4j.org)\n+    (The MIT License) angular-resource (angular-resource - https://github.com/angular/angular.js/tree/master/src/ngResource)\n     (The MIT License) minimal-json (com.eclipsesource.minimal-json:minimal-json:0.9.4 - https://github.com/ralfstx/minimal-json)\n \n \n-\n ========================================================================\n BSD-style licenses\n ========================================================================",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-distribution/src/bin_license/LICENSE",
                "sha": "52ce3ebc7f2799138972e0fd928cddc68fc50c99",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "patch": "@@ -37,7 +37,6 @@\n  *  and saving/loading jobs from disk.\n  *  Changing/adding/deleting non transitive field name need consideration of that.\n  *\n- *  @author Leemoonsoo\n  */\n public abstract class Job {\n   /**",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "sha": "c803d78f26f3fb5b05e231bc04be16f1c3e5c107",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/pom.xml",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/pom.xml?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 17,
                "filename": "zeppelin-server/pom.xml",
                "patch": "@@ -197,6 +197,22 @@\n       <version>2.2.1</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.sun.jersey</groupId>\n+      <artifactId>jersey-servlet</artifactId>\n+      <version>1.13</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>javax.ws.rs</groupId>\n+      <artifactId>javax.ws.rs-api</artifactId>\n+      <version>2.0-m10</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.scala-lang</groupId>\n+      <artifactId>scala-library</artifactId>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.seleniumhq.selenium</groupId>\n@@ -240,23 +256,6 @@\n       <scope>test</scope>\n     </dependency>\n \n-    <dependency>\n-      <groupId>com.sun.jersey</groupId>\n-      <artifactId>jersey-servlet</artifactId>\n-      <version>1.13</version>\n-    </dependency>\n-\n-    <dependency>\n-      <groupId>javax.ws.rs</groupId>\n-      <artifactId>javax.ws.rs-api</artifactId>\n-      <version>2.0-m10</version>\n-    </dependency>\n-\n-    <dependency>\n-      <groupId>org.scala-lang</groupId>\n-      <artifactId>scala-library</artifactId>\n-    </dependency>\n-\n     <dependency>\n       <groupId>org.scalatest</groupId>\n       <artifactId>scalatest_2.10</artifactId>\n@@ -268,6 +267,7 @@\n       <groupId>org.mockito</groupId>\n       <artifactId>mockito-all</artifactId>\n       <version>1.9.0</version>\n+      <scope>test</scope>\n     </dependency>\n   </dependencies>\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/pom.xml",
                "sha": "e77ee6ca38d3435a7a6c5e379eab1682cd95f0fb",
                "status": "modified"
            },
            {
                "additions": 71,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "changes": 116,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 45,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "patch": "@@ -22,19 +22,29 @@\n import java.util.List;\n import java.util.Map;\n \n-import javax.ws.rs.*;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.Status;\n \n import org.apache.commons.lang3.StringUtils;\n-import org.apache.zeppelin.display.Input;\n import org.apache.zeppelin.interpreter.InterpreterSetting;\n import org.apache.zeppelin.notebook.Note;\n import org.apache.zeppelin.notebook.Notebook;\n import org.apache.zeppelin.notebook.Paragraph;\n-import org.apache.zeppelin.rest.message.*;\n+import org.apache.zeppelin.rest.message.CronRequest;\n+import org.apache.zeppelin.rest.message.InterpreterSettingListForNoteBind;\n+import org.apache.zeppelin.rest.message.NewNotebookRequest;\n+import org.apache.zeppelin.rest.message.NewParagraphRequest;\n+import org.apache.zeppelin.rest.message.RunParagraphWithParametersRequest;\n+import org.apache.zeppelin.search.SearchService;\n import org.apache.zeppelin.server.JsonResponse;\n-import org.apache.zeppelin.server.ZeppelinServer;\n import org.apache.zeppelin.socket.NotebookServer;\n import org.quartz.CronExpression;\n import org.slf4j.Logger;\n@@ -49,17 +59,18 @@\n @Path(\"/notebook\")\n @Produces(\"application/json\")\n public class NotebookRestApi {\n-  Logger logger = LoggerFactory.getLogger(NotebookRestApi.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(NotebookRestApi.class);\n   Gson gson = new Gson();\n   private Notebook notebook;\n   private NotebookServer notebookServer;\n+  private SearchService notebookIndex;\n \n   public NotebookRestApi() {}\n \n-  public NotebookRestApi(Notebook notebook, NotebookServer notebookServer) {\n-\n+  public NotebookRestApi(Notebook notebook, NotebookServer notebookServer, SearchService search) {\n     this.notebook = notebook;\n     this.notebookServer = notebookServer;\n+    this.notebookIndex = search;\n   }\n \n   /**\n@@ -71,7 +82,7 @@ public NotebookRestApi(Notebook notebook, NotebookServer notebookServer) {\n   public Response bind(@PathParam(\"noteId\") String noteId, String req) throws IOException {\n     List<String> settingIdList = gson.fromJson(req, new TypeToken<List<String>>(){}.getType());\n     notebook.bindInterpretersToNote(noteId, settingIdList);\n-    return new JsonResponse(Status.OK).build();\n+    return new JsonResponse<>(Status.OK).build();\n   }\n \n   /**\n@@ -114,25 +125,25 @@ public Response bind(@PathParam(\"noteId\") String noteId) {\n         );\n       }\n     }\n-    return new JsonResponse(Status.OK, \"\", settingList).build();\n+    return new JsonResponse<>(Status.OK, \"\", settingList).build();\n   }\n \n   @GET\n   @Path(\"/\")\n   public Response getNotebookList() throws IOException {\n     List<Map<String, String>> notesInfo = notebookServer.generateNotebooksInfo();\n-    return new JsonResponse(Status.OK, \"\", notesInfo ).build();\n+    return new JsonResponse<>(Status.OK, \"\", notesInfo ).build();\n   }\n \n   @GET\n   @Path(\"{notebookId}\")\n   public Response getNotebook(@PathParam(\"notebookId\") String notebookId) throws IOException {\n     Note note = notebook.getNote(notebookId);\n     if (note == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"note not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"note not found.\").build();\n     }\n \n-    return new JsonResponse(Status.OK, \"\", note).build();\n+    return new JsonResponse<>(Status.OK, \"\", note).build();\n   }\n \n   /**\n@@ -144,7 +155,7 @@ public Response getNotebook(@PathParam(\"notebookId\") String notebookId) throws I\n   @POST\n   @Path(\"/\")\n   public Response createNote(String message) throws IOException {\n-    logger.info(\"Create new notebook by JSON {}\" , message);\n+    LOG.info(\"Create new notebook by JSON {}\" , message);\n     NewNotebookRequest request = gson.fromJson(message,\n         NewNotebookRequest.class);\n     Note note = notebook.createNote();\n@@ -165,7 +176,7 @@ public Response createNote(String message) throws IOException {\n     note.persist();\n     notebookServer.broadcastNote(note);\n     notebookServer.broadcastNoteList();\n-    return new JsonResponse(Status.CREATED, \"\", note.getId() ).build();\n+    return new JsonResponse<>(Status.CREATED, \"\", note.getId() ).build();\n   }\n \n   /**\n@@ -177,15 +188,15 @@ public Response createNote(String message) throws IOException {\n   @DELETE\n   @Path(\"{notebookId}\")\n   public Response deleteNote(@PathParam(\"notebookId\") String notebookId) throws IOException {\n-    logger.info(\"Delete notebook {} \", notebookId);\n+    LOG.info(\"Delete notebook {} \", notebookId);\n     if (!(notebookId.isEmpty())) {\n       Note note = notebook.getNote(notebookId);\n       if (note != null) {\n         notebook.removeNote(notebookId);\n       }\n     }\n     notebookServer.broadcastNoteList();\n-    return new JsonResponse(Status.OK, \"\").build();\n+    return new JsonResponse<>(Status.OK, \"\").build();\n   }\n   \n   /**\n@@ -198,14 +209,14 @@ public Response deleteNote(@PathParam(\"notebookId\") String notebookId) throws IO\n   @Path(\"{notebookId}\")\n   public Response cloneNote(@PathParam(\"notebookId\") String notebookId, String message) throws\n       IOException, CloneNotSupportedException, IllegalArgumentException {\n-    logger.info(\"clone notebook by JSON {}\" , message);\n+    LOG.info(\"clone notebook by JSON {}\" , message);\n     NewNotebookRequest request = gson.fromJson(message,\n         NewNotebookRequest.class);\n     String newNoteName = request.getName();\n     Note newNote = notebook.cloneNote(notebookId, newNoteName);\n     notebookServer.broadcastNote(newNote);\n     notebookServer.broadcastNoteList();\n-    return new JsonResponse(Status.CREATED, \"\", newNote.getId()).build();\n+    return new JsonResponse<>(Status.CREATED, \"\", newNote.getId()).build();\n   }\n   \n   /**\n@@ -218,14 +229,14 @@ public Response cloneNote(@PathParam(\"notebookId\") String notebookId, String mes\n   @Path(\"job/{notebookId}\")\n   public Response runNoteJobs(@PathParam(\"notebookId\") String notebookId) throws\n       IOException, IllegalArgumentException {\n-    logger.info(\"run notebook jobs {} \", notebookId);\n+    LOG.info(\"run notebook jobs {} \", notebookId);\n     Note note = notebook.getNote(notebookId);\n     if (note == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"note not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"note not found.\").build();\n     }\n     \n     note.runAll();\n-    return new JsonResponse(Status.OK).build();\n+    return new JsonResponse<>(Status.OK).build();\n   }\n \n   /**\n@@ -238,18 +249,18 @@ public Response runNoteJobs(@PathParam(\"notebookId\") String notebookId) throws\n   @Path(\"job/{notebookId}\")\n   public Response stopNoteJobs(@PathParam(\"notebookId\") String notebookId) throws\n       IOException, IllegalArgumentException {\n-    logger.info(\"stop notebook jobs {} \", notebookId);\n+    LOG.info(\"stop notebook jobs {} \", notebookId);\n     Note note = notebook.getNote(notebookId);\n     if (note == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"note not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"note not found.\").build();\n     }\n \n     for (Paragraph p : note.getParagraphs()) {\n       if (!p.isTerminated()) {\n         p.abort();\n       }\n     }\n-    return new JsonResponse(Status.OK).build();\n+    return new JsonResponse<>(Status.OK).build();\n   }\n   \n   /**\n@@ -262,19 +273,21 @@ public Response stopNoteJobs(@PathParam(\"notebookId\") String notebookId) throws\n   @Path(\"job/{notebookId}\")\n   public Response getNoteJobStatus(@PathParam(\"notebookId\") String notebookId) throws\n       IOException, IllegalArgumentException {\n-    logger.info(\"get notebook job status.\");\n+    LOG.info(\"get notebook job status.\");\n     Note note = notebook.getNote(notebookId);\n     if (note == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"note not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"note not found.\").build();\n     }\n \n-    return new JsonResponse(Status.OK, null, note.generateParagraphsInfo()).build();\n+    return new JsonResponse<>(Status.OK, null, note.generateParagraphsInfo()).build();\n   }\n   \n   /**\n    * Run paragraph job REST API\n+   * \n    * @param message - JSON with params if user wants to update dynamic form's value\n    *                null, empty string, empty json if user doesn't want to update\n+   *\n    * @return JSON with status.OK\n    * @throws IOException, IllegalArgumentException\n    */\n@@ -284,16 +297,16 @@ public Response runParagraph(@PathParam(\"notebookId\") String notebookId,\n                                @PathParam(\"paragraphId\") String paragraphId,\n                                String message) throws\n                                IOException, IllegalArgumentException {\n-    logger.info(\"run paragraph job {} {} {}\", notebookId, paragraphId, message);\n+    LOG.info(\"run paragraph job {} {} {}\", notebookId, paragraphId, message);\n \n     Note note = notebook.getNote(notebookId);\n     if (note == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"note not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"note not found.\").build();\n     }\n \n     Paragraph paragraph = note.getParagraph(paragraphId);\n     if (paragraph == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"paragraph not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"paragraph not found.\").build();\n     }\n \n     // handle params if presented\n@@ -308,7 +321,7 @@ public Response runParagraph(@PathParam(\"notebookId\") String notebookId,\n     }\n \n     note.run(paragraph.getId());\n-    return new JsonResponse(Status.OK).build();\n+    return new JsonResponse<>(Status.OK).build();\n   }\n \n   /**\n@@ -322,18 +335,18 @@ public Response runParagraph(@PathParam(\"notebookId\") String notebookId,\n   public Response stopParagraph(@PathParam(\"notebookId\") String notebookId, \n                                 @PathParam(\"paragraphId\") String paragraphId) throws\n                                 IOException, IllegalArgumentException {\n-    logger.info(\"stop paragraph job {} \", notebookId);\n+    LOG.info(\"stop paragraph job {} \", notebookId);\n     Note note = notebook.getNote(notebookId);\n     if (note == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"note not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"note not found.\").build();\n     }\n \n     Paragraph p = note.getParagraph(paragraphId);\n     if (p == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"paragraph not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"paragraph not found.\").build();\n     }\n     p.abort();\n-    return new JsonResponse(Status.OK).build();\n+    return new JsonResponse<>(Status.OK).build();\n   }\n     \n   /**\n@@ -346,26 +359,26 @@ public Response stopParagraph(@PathParam(\"notebookId\") String notebookId,\n   @Path(\"cron/{notebookId}\")\n   public Response registerCronJob(@PathParam(\"notebookId\") String notebookId, String message) throws\n       IOException, IllegalArgumentException {\n-    logger.info(\"Register cron job note={} request cron msg={}\", notebookId, message);\n+    LOG.info(\"Register cron job note={} request cron msg={}\", notebookId, message);\n \n     CronRequest request = gson.fromJson(message,\n                           CronRequest.class);\n     \n     Note note = notebook.getNote(notebookId);\n     if (note == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"note not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"note not found.\").build();\n     }\n     \n     if (!CronExpression.isValidExpression(request.getCronString())) {\n-      return new JsonResponse(Status.BAD_REQUEST, \"wrong cron expressions.\").build();\n+      return new JsonResponse<>(Status.BAD_REQUEST, \"wrong cron expressions.\").build();\n     }\n \n     Map<String, Object> config = note.getConfig();\n     config.put(\"cron\", request.getCronString());\n     note.setConfig(config);\n     notebook.refreshCron(note.id());\n     \n-    return new JsonResponse(Status.OK).build();\n+    return new JsonResponse<>(Status.OK).build();\n   }\n   \n   /**\n@@ -378,19 +391,19 @@ public Response registerCronJob(@PathParam(\"notebookId\") String notebookId, Stri\n   @Path(\"cron/{notebookId}\")\n   public Response removeCronJob(@PathParam(\"notebookId\") String notebookId) throws\n       IOException, IllegalArgumentException {\n-    logger.info(\"Remove cron job note {}\", notebookId);\n+    LOG.info(\"Remove cron job note {}\", notebookId);\n \n     Note note = notebook.getNote(notebookId);\n     if (note == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"note not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"note not found.\").build();\n     }\n     \n     Map<String, Object> config = note.getConfig();\n     config.put(\"cron\", null);\n     note.setConfig(config);\n     notebook.refreshCron(note.id());\n     \n-    return new JsonResponse(Status.OK).build();\n+    return new JsonResponse<>(Status.OK).build();\n   }  \n   \n   /**\n@@ -403,13 +416,26 @@ public Response removeCronJob(@PathParam(\"notebookId\") String notebookId) throws\n   @Path(\"cron/{notebookId}\")\n   public Response getCronJob(@PathParam(\"notebookId\") String notebookId) throws\n       IOException, IllegalArgumentException {\n-    logger.info(\"Get cron job note {}\", notebookId);\n+    LOG.info(\"Get cron job note {}\", notebookId);\n \n     Note note = notebook.getNote(notebookId);\n     if (note == null) {\n-      return new JsonResponse(Status.NOT_FOUND, \"note not found.\").build();\n+      return new JsonResponse<>(Status.NOT_FOUND, \"note not found.\").build();\n     }\n     \n-    return new JsonResponse(Status.OK, note.getConfig().get(\"cron\")).build();\n+    return new JsonResponse<>(Status.OK, note.getConfig().get(\"cron\")).build();\n   }  \n+\n+  /**\n+   * Search for a Notes\n+   */\n+  @GET\n+  @Path(\"search\")\n+  public Response search(@QueryParam(\"q\") String queryTerm) {\n+    LOG.info(\"Searching notebooks for: {}\", queryTerm);\n+    List<Map<String, String>> notebooksFound = notebookIndex.query(queryTerm);\n+    LOG.info(\"{} notbooks found\", notebooksFound.size());\n+    return new JsonResponse<>(Status.OK, notebooksFound).build();\n+  }\n+\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "sha": "fb4e99473a75c1e88af77134ac68e9160892701a",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/main/java/org/apache/zeppelin/rest/ZeppelinRestApi.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/ZeppelinRestApi.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 1,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/ZeppelinRestApi.java",
                "patch": "@@ -24,7 +24,6 @@\n /**\n  * Zeppelin root rest api endpoint.\n  *\n- * @author anthonycorbacho\n  * @since 0.3.4\n  */\n @Path(\"/\")",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/main/java/org/apache/zeppelin/rest/ZeppelinRestApi.java",
                "sha": "9a0b883e79b31521b0d7bda6c44cf9cbab8a9bed",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 4,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "patch": "@@ -38,6 +38,8 @@\n import org.apache.zeppelin.rest.NotebookRestApi;\n import org.apache.zeppelin.rest.ZeppelinRestApi;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n+import org.apache.zeppelin.search.SearchService;\n+import org.apache.zeppelin.search.LuceneSearch;\n import org.apache.zeppelin.socket.NotebookServer;\n import org.eclipse.jetty.server.AbstractConnector;\n import org.eclipse.jetty.server.Handler;\n@@ -69,17 +71,18 @@\n   private SchedulerFactory schedulerFactory;\n   private InterpreterFactory replFactory;\n   private NotebookRepo notebookRepo;\n+  private SearchService notebookIndex;\n \n   public ZeppelinServer() throws Exception {\n-    LOG.info(\"Constructor starteds\");\n     ZeppelinConfiguration conf = ZeppelinConfiguration.create();\n \n     this.schedulerFactory = new SchedulerFactory();\n     this.replFactory = new InterpreterFactory(conf, notebookWsServer);\n     this.notebookRepo = new NotebookRepoSync(conf);\n+    this.notebookIndex = new LuceneSearch();\n \n-    notebook = new Notebook(conf, notebookRepo, schedulerFactory, replFactory, notebookWsServer);\n-    LOG.info(\"Constructor finished\");\n+    notebook = new Notebook(conf, \n+        notebookRepo, schedulerFactory, replFactory, notebookWsServer, notebookIndex);\n   }\n \n   public static void main(String[] args) throws InterruptedException {\n@@ -264,7 +267,7 @@ private static WebAppContext setupWebAppContext(\n     ZeppelinRestApi root = new ZeppelinRestApi();\n     singletons.add(root);\n \n-    NotebookRestApi notebookApi = new NotebookRestApi(notebook, notebookWsServer);\n+    NotebookRestApi notebookApi = new NotebookRestApi(notebook, notebookWsServer, notebookIndex);\n     singletons.add(notebookApi);\n \n     InterpreterRestApi interpreterApi = new InterpreterRestApi(replFactory);",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "sha": "fd115ee18cb9e0c31d6a9afd94cd720d5409557f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 4,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "patch": "@@ -15,6 +15,7 @@\n  * limitations under the License.\n  */\n package org.apache.zeppelin.socket;\n+\n import java.io.IOException;\n import java.net.URISyntaxException;\n import java.net.UnknownHostException;\n@@ -49,32 +50,31 @@\n \n import com.google.common.base.Strings;\n import com.google.gson.Gson;\n+\n /**\n  * Zeppelin websocket service.\n  *\n  */\n public class NotebookServer extends WebSocketServlet implements\n         NotebookSocketListener, JobListenerFactory, AngularObjectRegistryListener {\n-  private static final Logger LOG = LoggerFactory\n-          .getLogger(NotebookServer.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(NotebookServer.class);\n   Gson gson = new Gson();\n   final Map<String, List<NotebookSocket>> noteSocketMap = new HashMap<>();\n   final Queue<NotebookSocket> connectedSockets = new ConcurrentLinkedQueue<>();\n \n   private Notebook notebook() {\n     return ZeppelinServer.notebook;\n   }\n+\n   @Override\n   public boolean checkOrigin(HttpServletRequest request, String origin) {\n-\n     try {\n       return SecurityUtils.isValidOrigin(origin, ZeppelinConfiguration.create());\n     } catch (UnknownHostException e) {\n       e.printStackTrace();\n     } catch (URISyntaxException e) {\n       e.printStackTrace();\n     }\n-\n     return false;\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "sha": "554f68cf07304535db479015b0a054d629c8f59d",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 9,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "patch": "@@ -17,9 +17,13 @@\n \n package org.apache.zeppelin.rest;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -28,13 +32,10 @@\n import org.apache.commons.httpclient.methods.PostMethod;\n import org.apache.commons.httpclient.methods.PutMethod;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.zeppelin.conf.ZeppelinConfiguration;\n import org.apache.zeppelin.interpreter.InterpreterSetting;\n import org.apache.zeppelin.notebook.Note;\n import org.apache.zeppelin.notebook.Paragraph;\n-import org.apache.zeppelin.rest.message.NewParagraphRequest;\n import org.apache.zeppelin.scheduler.Job.Status;\n-import org.apache.zeppelin.server.JsonResponse;\n import org.apache.zeppelin.server.ZeppelinServer;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n@@ -45,13 +46,9 @@\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n \n-import static org.junit.Assert.*;\n-\n /**\n  * BASIC Zeppelin rest api tests\n  *\n- * @author anthonycorbacho\n- *\n  */\n @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n public class ZeppelinRestApiTest extends AbstractTestRestApi {",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "sha": "2bca9c0859302957b9ba6c6760e2ea050cd413f6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/bower.json",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/bower.json?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-web/bower.json",
                "patch": "@@ -11,6 +11,7 @@\n     \"angular-animate\": \"1.3.8\",\n     \"angular-touch\": \"1.3.8\",\n     \"angular-route\": \"1.3.8\",\n+    \"angular-resource\": \"1.3.8\",\n     \"angular-bootstrap\": \"~0.13.0\",\n     \"angular-websocket\": \"~1.0.13\",\n     \"ace-builds\": \"1.1.9\",",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/bower.json",
                "sha": "ee9ea466f2eb3cb720583520255b4347adc52c22",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/app.js",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/app.js?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 1,
                "filename": "zeppelin-web/src/app/app.js",
                "patch": "@@ -32,7 +32,8 @@ angular.module('zeppelinWebApp', [\n     'puElasticInput',\n     'xeditable',\n     'ngToast',\n-    'focus-if'\n+    'focus-if',\n+    'ngResource'\n   ])\n   .filter('breakFilter', function() {\n     return function (text) {\n@@ -50,6 +51,10 @@ angular.module('zeppelinWebApp', [\n         templateUrl: 'app/notebook/notebook.html',\n         controller: 'NotebookCtrl'\n       })\n+      .when('/notebook/:noteId/paragraph?=:paragraphId', {\n+        templateUrl: 'app/notebook/notebook.html',\n+        controller: 'NotebookCtrl'\n+      })\n       .when('/notebook/:noteId/paragraph/:paragraphId?', {\n         templateUrl: 'app/notebook/notebook.html',\n         controller: 'NotebookCtrl'\n@@ -58,6 +63,10 @@ angular.module('zeppelinWebApp', [\n         templateUrl: 'app/interpreter/interpreter.html',\n         controller: 'InterpreterCtrl'\n       })\n+      .when('/search/:searchTerm', {\n+        templateUrl: 'app/search/result-list.html',\n+        controller: 'SearchResultCtrl'\n+      })\n       .otherwise({\n         redirectTo: '/'\n       });",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/app.js",
                "sha": "92e7345db0517f4947c76478882c37a0d8e91aa4",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/notebook/notebook.controller.js",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/notebook/notebook.controller.js?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 3,
                "filename": "zeppelin-web/src/app/notebook/notebook.controller.js",
                "patch": "@@ -1,4 +1,5 @@\n /* jshint loopfunc: true */\n+/* global $: false */\n /*\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -14,9 +15,9 @@\n  */\n 'use strict';\n \n-angular.module('zeppelinWebApp').controller('NotebookCtrl', function($scope, $route, $routeParams, $location,\n-                                                                     $rootScope, $http, websocketMsgSrv, baseUrlSrv,\n-                                                                     $timeout, SaveAsService) {\n+angular.module('zeppelinWebApp').controller('NotebookCtrl',\n+  function($scope, $route, $routeParams, $location, $rootScope, $http,\n+    websocketMsgSrv, baseUrlSrv, $timeout, SaveAsService) {\n   $scope.note = null;\n   $scope.showEditor = false;\n   $scope.editorToggled = false;\n@@ -66,6 +67,26 @@ angular.module('zeppelinWebApp').controller('NotebookCtrl', function($scope, $ro\n   /** Init the new controller */\n   var initNotebook = function() {\n     websocketMsgSrv.getNotebook($routeParams.noteId);\n+\n+    var currentRoute = $route.current;\n+\n+    if (currentRoute) {\n+\n+      setTimeout(\n+        function() {\n+          var routeParams = currentRoute.params;\n+          var $id = $('#' + routeParams.paragraph + '_container');\n+\n+          if ($id.length > 0) {\n+            // adjust for navbar\n+            var top = $id.offset().top - 103;\n+            $('html, body').scrollTo({top: top, left: 0});\n+          }\n+\n+        },\n+        1000\n+      );\n+    }\n   };\n \n   initNotebook();",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/notebook/notebook.controller.js",
                "sha": "55384ff3b0aa931c0997889bd1317b9a0736239c",
                "status": "modified"
            },
            {
                "additions": 119,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/search/result-list.controller.js",
                "changes": 119,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/search/result-list.controller.js?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/search/result-list.controller.js",
                "patch": "@@ -0,0 +1,119 @@\n+/* jshint loopfunc: true */\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the 'License');\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an 'AS IS' BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+angular\n+  .module('zeppelinWebApp')\n+  .controller('SearchResultCtrl', function($scope, $routeParams, searchService) {\n+\n+  var results = searchService.search({'q': $routeParams.searchTerm}).query();\n+\n+  results.$promise.then(function(result) {\n+    $scope.notes = result.body.map(function(note) {\n+      // redirect to notebook when search result is a notebook itself,\n+      // not a paragraph\n+      if (!/\\/paragraph\\//.test(note.id)) {\n+        return note;\n+      }\n+\n+      note.id = note.id.replace('paragraph/', '?paragraph=') +\n+        '&term=' +\n+        $routeParams.searchTerm;\n+\n+      return note;\n+    });\n+  });\n+\n+  $scope.page = 0;\n+  $scope.allResults = false;\n+\n+  $scope.highlightSearchResults = function(note) {\n+    return function(_editor) {\n+      function getEditorMode(text) {\n+        var editorModes = {\n+          'ace/mode/scala': /^%spark/,\n+          'ace/mode/sql': /^%(\\w*\\.)?\\wql/,\n+          'ace/mode/markdown': /^%md/,\n+          'ace/mode/sh': /^%sh/\n+        };\n+\n+        return Object.keys(editorModes).reduce(function(res, mode) {\n+          return editorModes[mode].test(text)? mode : res;\n+        }, 'ace/mode/scala');\n+      }\n+\n+      var Range = ace.require('ace/range').Range;\n+\n+      _editor.setOption('highlightActiveLine', false);\n+      _editor.$blockScrolling = Infinity;\n+      _editor.setReadOnly(true);\n+      _editor.renderer.setShowGutter(false);\n+      _editor.setTheme('ace/theme/chrome');\n+      _editor.getSession().setMode(getEditorMode(note.text));\n+\n+      function getIndeces(term) {\n+        return function(str) {\n+          var indeces = [];\n+          var i = -1;\n+          while((i = str.indexOf(term, i + 1)) >= 0) {\n+            indeces.push(i);\n+          }\n+          return indeces;\n+        };\n+      }\n+\n+      var lines = note.snippet\n+        .split('\\n')\n+        .map(function(line, row) {\n+          var match = line.match(/<B>(.+?)<\\/B>/);\n+\n+        // return early if nothing to highlight\n+          if (!match) {\n+            return line;\n+          }\n+\n+          var term = match[1];\n+          var __line = line\n+            .replace(/<B>/g, '')\n+            .replace(/<\\/B>/g, '');\n+\n+          var indeces = getIndeces(term)(__line);\n+\n+          indeces.forEach(function(start) {\n+            var end = start + term.length;\n+            _editor\n+              .getSession()\n+              .addMarker(\n+                new Range(row, start, row, end),\n+                'search-results-highlight',\n+                'line'\n+              );\n+          });\n+\n+          return __line;\n+        });\n+\n+      // resize editor based on content length\n+      _editor.setOption(\n+        'maxLines',\n+        lines.reduce(function(len, line) {return len + line.length;}, 0)\n+      );\n+\n+      _editor.getSession().setValue(lines.join('\\n'));\n+\n+    };\n+  };\n+\n+});",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/search/result-list.controller.js",
                "sha": "0d55442e525a30924bf3382b42da48a81cea7b41",
                "status": "added"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/search/result-list.html",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/search/result-list.html?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/search/result-list.html",
                "patch": "@@ -0,0 +1,42 @@\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+<div ng-controller=\"SearchResultCtrl\" class=\"searchResults\">\n+  <div class=\"row\">\n+    <div class=\"col-sm-8\" style=\"margin: 0 auto; float: none\">\n+      <ul class=\"search-results\">\n+        <li class=\"panel panel-default\" ng-repeat=\"note in notes\">\n+          <div class=\"panel-heading\">\n+            <h4>\n+              <i style=\"font-size: 10px;\" class=\"icon-doc\"></i>\n+              <a class=\"search-results-header\"\n+                 href=\"#/notebook/{{note.id}}\">\n+                  {{note.name || 'Note ' + note.id}}\n+              </a>\n+            </h4>\n+          </div>\n+          <div class=\"panel-body\">\n+          <div\n+            class=\"search-result\"\n+            ui-ace=\"{\n+              onLoad: highlightSearchResults(note),\n+              require: ['ace/ext/language_tools']\n+            }\"\n+            ng-model=\"_\"\n+          >\n+          </div>\n+          </div>\n+       </li>\n+    </div>\n+  </div>\n+</div>",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/search/result-list.html",
                "sha": "2d2b6cfc510e5826fa6080147916ffdf5c57ef29",
                "status": "added"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/search/search.css",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/search/search.css?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/search/search.css",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+.search-results {\n+  list-style-type: none;\n+  margin: 10% auto 0;\n+  padding: 0;\n+}\n+\n+.search-result {\n+  height: 200px;\n+}\n+\n+.search-results-header {\n+  text-decoration: none;\n+}\n+\n+.search-results-highlight {\n+  background-color: yellow;\n+  position: absolute;\n+}\n+\n+/* remove error highlighting */\n+.search-results .ace_invalid {\n+  background: none !important;\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/app/search/search.css",
                "sha": "e89c765f39342786a886f960f9bb8b7ac7cc3860",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/components/navbar/navbar.controller.js",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/components/navbar/navbar.controller.js?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 2,
                "filename": "zeppelin-web/src/components/navbar/navbar.controller.js",
                "patch": "@@ -15,8 +15,7 @@\n 'use strict';\n \n angular.module('zeppelinWebApp').controller('NavCtrl', function($scope, $rootScope, $routeParams,\n-                                                                notebookListDataFactory, websocketMsgSrv,\n-                                                                arrayOrderingSrv) {\n+    $location, notebookListDataFactory, websocketMsgSrv, arrayOrderingSrv) {\n   /** Current list of notes (ids) */\n \n   var vm = this;\n@@ -35,6 +34,19 @@ angular.module('zeppelinWebApp').controller('NavCtrl', function($scope, $rootSco\n     vm.connected = param;\n   });\n \n+  $rootScope.$on('$locationChangeSuccess', function () {\n+    var path = $location.path();\n+    // hacky solution to clear search bar\n+    // TODO(felizbear): figure out how to make ng-click work in navbar\n+    if (path === '/') {\n+      $scope.searchTerm = '';\n+    }\n+  });\n+\n+  $scope.search = function() {\n+    $location.url(/search/ + $scope.searchTerm);\n+  };\n+\n   function loadNotes() {\n     websocketMsgSrv.getNotebookList();\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/components/navbar/navbar.controller.js",
                "sha": "30e6ac278921f0b0b4b2e8ad0700698697419a2a",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/components/navbar/navbar.html",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/components/navbar/navbar.html?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-web/src/components/navbar/navbar.html",
                "patch": "@@ -43,7 +43,34 @@\n           <a href=\"#/interpreter\">Interpreter</a>\n         </li>\n       </ul>\n+\n+\n       <ul class=\"nav navbar-nav navbar-right\" style=\"margin-top:10px; margin-right:5px;\">\n+        <li>\n+        <!--TODO(bzz): move to Typeahead https://angular-ui.github.io/bootstrap  -->\n+          <form role=\"search\"\n+            style=\"width: 300px; display: inline-block; margin: 0 10px\"\n+             ng-submit=\"search()\">\n+            <div class=\"input-group\">\n+              <input\n+                type=\"text\"\n+                ng-model=\"searchTerm\"\n+                ng-disabled=\"!navbar.connected\"\n+                class=\"form-control\"\n+                placeholder=\"Search in your notebooks\"\n+              />\n+              <span class=\"input-group-btn\">\n+                <button\n+                  type=\"submit\"\n+                  class=\"btn btn-default\"\n+                  ng-disabled=\"!navbar.connected\"\n+                >\n+                  <i class=\"glyphicon glyphicon-search\"></i>\n+                </button>\n+              </span>\n+            </div>\n+          </form>\n+        </li>\n         <li class=\"server-status\">\n           <i class=\"fa fa-circle\" ng-class=\"{'server-connected':navbar.connected, 'server-disconnected':!navbar.connected}\"></i>\n           <span ng-show=\"navbar.connected\">Connected</span>",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/components/navbar/navbar.html",
                "sha": "86a85122add550703da9285a62e166f3a1e4c586",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/components/searchService/search.service.js",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/components/searchService/search.service.js?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-web/src/components/searchService/search.service.js",
                "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+angular.module('zeppelinWebApp').service('searchService', function($resource, baseUrlSrv) {\n+\n+  this.search = function(term) {\n+     console.log('Searching for: %o', term.q);\n+    if (!term.q) { //TODO(bzz): empty string check\n+      return;\n+    }\n+    var encQuery = window.encodeURIComponent(term.q);\n+    return $resource(baseUrlSrv.getRestApiBase()+'/notebook/search?q='+encQuery, {}, {\n+      query: {method:'GET'}\n+    });\n+  };\n+\n+});",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/components/searchService/search.service.js",
                "sha": "920b5e08a52e611f20fc90943beab9793e77b7d4",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/index.html",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/index.html?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-web/src/index.html",
                "patch": "@@ -49,6 +49,7 @@\n     <!-- endbuild -->\n     <!-- build:css(.tmp) styles/main.css -->\n     <link rel=\"stylesheet\" href=\"app/home/home.css\">\n+    <link rel=\"stylesheet\" href=\"app/search/search.css\">\n     <link rel=\"stylesheet\" href=\"app/notebook/notebook.css\">\n     <link rel=\"stylesheet\" href=\"app/notebook/paragraph/paragraph.css\">\n     <link rel=\"stylesheet\" href=\"app/interpreter/interpreter.css\">\n@@ -95,6 +96,7 @@\n     <script src=\"bower_components/angular-animate/angular-animate.js\"></script>\n     <script src=\"bower_components/angular-touch/angular-touch.js\"></script>\n     <script src=\"bower_components/angular-route/angular-route.js\"></script>\n+    <script src=\"bower_components/angular-resource/angular-resource.js\"></script>\n     <script src=\"bower_components/angular-bootstrap/ui-bootstrap-tpls.js\"></script>\n     <script src=\"bower_components/angular-websocket/angular-websocket.min.js\"></script>\n     <script src=\"bower_components/ace-builds/src-noconflict/ace.js\"></script>\n@@ -131,6 +133,7 @@\n     <script src=\"app/notebook/notebook.controller.js\"></script>\n     <script src=\"app/interpreter/interpreter.controller.js\"></script>\n     <script src=\"app/notebook/paragraph/paragraph.controller.js\"></script>\n+    <script src=\"app/search/result-list.controller.js\"></script>\n     <script src=\"components/arrayOrderingSrv/arrayOrdering.service.js\"></script>\n     <script src=\"components/navbar/navbar.controller.js\"></script>\n     <script src=\"components/ngescape/ngescape.directive.js\"></script>\n@@ -147,6 +150,7 @@\n     <script src=\"components/baseUrl/baseUrl.service.js\"></script>\n     <script src=\"components/browser-detect/browserDetect.service.js\"></script>\n     <script src=\"components/saveAs/saveAs.service.js\"></script>\n+    <script src=\"components/searchService/search.service.js\"></script>\n     <!-- endbuild -->\n   </body>\n </html>",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/src/index.html",
                "sha": "2b114654355fb7fa4e18052239c6c8d7995e2a21",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/test/karma.conf.js",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/test/karma.conf.js?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-web/test/karma.conf.js",
                "patch": "@@ -29,6 +29,7 @@ module.exports = function(config) {\n       'bower_components/angular-animate/angular-animate.js',\n       'bower_components/angular-touch/angular-touch.js',\n       'bower_components/angular-route/angular-route.js',\n+      'bower_components/angular-resource/angular-resource.js',\n       'bower_components/angular-bootstrap/ui-bootstrap-tpls.js',\n       'bower_components/angular-websocket/angular-websocket.min.js',\n       'bower_components/ace-builds/src-noconflict/ace.js',",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-web/test/karma.conf.js",
                "sha": "34895b4d481c994854c02c55a748ba9233c5254c",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/pom.xml",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/pom.xml?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-zengine/pom.xml",
                "patch": "@@ -123,6 +123,36 @@\n       <artifactId>guava</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.apache.lucene</groupId>\n+      <artifactId>lucene-core</artifactId>\n+      <version>5.3.1</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.lucene</groupId>\n+      <artifactId>lucene-analyzers-common</artifactId>\n+      <version>5.3.1</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.lucene</groupId>\n+      <artifactId>lucene-queryparser</artifactId>\n+      <version>5.3.1</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.lucene</groupId>\n+      <artifactId>lucene-highlighter</artifactId>\n+      <version>5.3.1</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.reflections</groupId>\n       <artifactId>reflections</artifactId>",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/pom.xml",
                "sha": "0ef60bf3a69d57a242eef8e24962572cc43f77e0",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 27,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -20,12 +20,12 @@\n import java.io.IOException;\n import java.io.Serializable;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Random;\n \n-import org.apache.zeppelin.conf.ZeppelinConfiguration;\n import org.apache.zeppelin.display.AngularObject;\n import org.apache.zeppelin.display.AngularObjectRegistry;\n import org.apache.zeppelin.display.Input;\n@@ -39,6 +39,7 @@\n import org.apache.zeppelin.scheduler.Job;\n import org.apache.zeppelin.scheduler.Job.Status;\n import org.apache.zeppelin.scheduler.JobListener;\n+import org.apache.zeppelin.search.SearchService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -49,40 +50,43 @@\n  */\n public class Note implements Serializable, JobListener {\n   transient Logger logger = LoggerFactory.getLogger(Note.class);\n-  List<Paragraph> paragraphs = new LinkedList<Paragraph>();\n-  private String name;\n+  private static final long serialVersionUID = 7920699076577612429L;\n+\n+  List<Paragraph> paragraphs = new LinkedList<>();\n+  private String name = \"\";\n   private String id;\n \n-  Map<String, List<AngularObject>> angularObjects = new HashMap<String, List<AngularObject>>();\n+  @SuppressWarnings(\"rawtypes\")\n+  Map<String, List<AngularObject>> angularObjects = new HashMap<>();\n \n   private transient NoteInterpreterLoader replLoader;\n-  private transient ZeppelinConfiguration conf;\n   private transient JobListenerFactory jobListenerFactory;\n   private transient NotebookRepo repo;\n+  private transient SearchService index;\n \n   /**\n    * note configurations.\n    *\n    * - looknfeel - cron\n    */\n-  private Map<String, Object> config = new HashMap<String, Object>();\n+  private Map<String, Object> config = new HashMap<>();\n \n   /**\n    * note information.\n    *\n    * - cron : cron expression validity.\n    */\n-  private Map<String, Object> info = new HashMap<String, Object>();\n+  private Map<String, Object> info = new HashMap<>();\n \n \n   public Note() {}\n \n-  public Note(NotebookRepo repo,\n-      NoteInterpreterLoader replLoader,\n-      JobListenerFactory jobListenerFactory) {\n+  public Note(NotebookRepo repo, NoteInterpreterLoader replLoader,\n+      JobListenerFactory jlFactory, SearchService noteIndex) {\n     this.repo = repo;\n     this.replLoader = replLoader;\n-    this.jobListenerFactory = jobListenerFactory;\n+    this.jobListenerFactory = jlFactory;\n+    this.index = noteIndex;\n     generateId();\n   }\n \n@@ -130,6 +134,11 @@ public void setNotebookRepo(NotebookRepo repo) {\n     this.repo = repo;\n   }\n \n+  public void setIndex(SearchService index) {\n+    this.index = index;\n+  }\n+\n+  @SuppressWarnings(\"rawtypes\")\n   public Map<String, List<AngularObject>> getAngularObjects() {\n     return angularObjects;\n   }\n@@ -193,14 +202,16 @@ public Paragraph insertParagraph(int index) {\n    * Remove paragraph by id.\n    *\n    * @param paragraphId\n-   * @return\n+   * @return a paragraph that was deleted, or <code>null</code> otherwise\n    */\n   public Paragraph removeParagraph(String paragraphId) {\n     synchronized (paragraphs) {\n-      for (int i = 0; i < paragraphs.size(); i++) {\n-        Paragraph p = paragraphs.get(i);\n+      Iterator<Paragraph> i = paragraphs.iterator();\n+      while (i.hasNext()) {\n+        Paragraph p = i.next();\n         if (p.getId().equals(paragraphId)) {\n-          paragraphs.remove(i);\n+          index.deleteIndexDoc(this, p);\n+          i.remove();\n           return p;\n         }\n       }\n@@ -293,7 +304,7 @@ public Paragraph getLastParagraph() {\n       return paragraphs.get(paragraphs.size() - 1);\n     }\n   }\n-  \n+\n   public List<Map<String, String>> generateParagraphsInfo (){\n     List<Map<String, String>> paragraphsInfo = new LinkedList<>();\n     synchronized (paragraphs) {\n@@ -307,7 +318,7 @@ public Paragraph getLastParagraph() {\n       }\n     }\n     return paragraphsInfo;\n-  }  \n+  }\n \n   /**\n    * Run all paragraphs sequentially.\n@@ -357,7 +368,7 @@ public void run(String paragraphId) {\n   }\n \n   private void snapshotAngularObjectRegistry() {\n-    angularObjects = new HashMap<String, List<AngularObject>>();\n+    angularObjects = new HashMap<>();\n \n     List<InterpreterSetting> settings = replLoader.getInterpreterSettings();\n     if (settings == null || settings.size() == 0) {\n@@ -373,6 +384,7 @@ private void snapshotAngularObjectRegistry() {\n \n   public void persist() throws IOException {\n     snapshotAngularObjectRegistry();\n+    index.updateIndexDoc(this);\n     repo.save(this);\n   }\n \n@@ -382,7 +394,7 @@ public void unpersist() throws IOException {\n \n   public Map<String, Object> getConfig() {\n     if (config == null) {\n-      config = new HashMap<String, Object>();\n+      config = new HashMap<>();\n     }\n     return config;\n   }\n@@ -393,7 +405,7 @@ public void setConfig(Map<String, Object> config) {\n \n   public Map<String, Object> getInfo() {\n     if (info == null) {\n-      info = new HashMap<String, Object>();\n+      info = new HashMap<>();\n     }\n     return info;\n   }\n@@ -404,17 +416,10 @@ public void setInfo(Map<String, Object> info) {\n \n   @Override\n   public void beforeStatusChange(Job job, Status before, Status after) {\n-    Paragraph p = (Paragraph) job;\n   }\n \n   @Override\n   public void afterStatusChange(Job job, Status before, Status after) {\n-    Paragraph p = (Paragraph) job;\n-  }\n-\n-  private static Logger logger() {\n-    Logger logger = LoggerFactory.getLogger(Note.class);\n-    return logger;\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "6a3074f5889a5c14a1fe7790448a33099195645c",
                "status": "modified"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 86,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 29,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -27,6 +27,7 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.zeppelin.conf.ZeppelinConfiguration;\n import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;\n@@ -38,6 +39,7 @@\n import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;\n import org.apache.zeppelin.notebook.repo.NotebookRepo;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n+import org.apache.zeppelin.search.SearchService;\n import org.quartz.CronScheduleBuilder;\n import org.quartz.CronTrigger;\n import org.quartz.JobBuilder;\n@@ -56,7 +58,10 @@\n  */\n public class Notebook {\n   Logger logger = LoggerFactory.getLogger(Notebook.class);\n+\n+  @SuppressWarnings(\"unused\") @Deprecated //TODO(bzz): remove unused\n   private SchedulerFactory schedulerFactory;\n+\n   private InterpreterFactory replFactory;\n   /** Keep the order. */\n   Map<String, Note> notes = new LinkedHashMap<String, Note>();\n@@ -65,22 +70,45 @@\n   private org.quartz.Scheduler quartzSched;\n   private JobListenerFactory jobListenerFactory;\n   private NotebookRepo notebookRepo;\n+  private SearchService notebookIndex;\n \n+  /**\n+   * Main constructor \\w manual Dependency Injection\n+   *\n+   * @param conf\n+   * @param notebookRepo\n+   * @param schedulerFactory\n+   * @param replFactory\n+   * @param jobListenerFactory\n+   * @param notebookIndex - (nullable) for indexing all notebooks on creating.\n+   *\n+   * @throws IOException\n+   * @throws SchedulerException\n+   */\n   public Notebook(ZeppelinConfiguration conf, NotebookRepo notebookRepo,\n       SchedulerFactory schedulerFactory,\n-      InterpreterFactory replFactory, JobListenerFactory jobListenerFactory) throws IOException,\n-      SchedulerException {\n+      InterpreterFactory replFactory, JobListenerFactory jobListenerFactory,\n+      SearchService notebookIndex) throws IOException, SchedulerException {\n     this.conf = conf;\n     this.notebookRepo = notebookRepo;\n     this.schedulerFactory = schedulerFactory;\n     this.replFactory = replFactory;\n     this.jobListenerFactory = jobListenerFactory;\n+    this.notebookIndex = notebookIndex;\n     quertzSchedFact = new org.quartz.impl.StdSchedulerFactory();\n     quartzSched = quertzSchedFact.getScheduler();\n     quartzSched.start();\n     CronJob.notebook = this;\n \n     loadAllNotes();\n+    if (this.notebookIndex != null) {\n+      long start = System.nanoTime();\n+      logger.info(\"Notebook indexing started...\");\n+      notebookIndex.addIndexDocs(notes.values());\n+      logger.info(\"Notebook indexing finished: {} indexed in {}s\", notes.size(),\n+          TimeUnit.NANOSECONDS.toSeconds(start - System.nanoTime()));\n+    }\n+\n   }\n \n   /**\n@@ -90,11 +118,14 @@ public Notebook(ZeppelinConfiguration conf, NotebookRepo notebookRepo,\n    * @throws IOException\n    */\n   public Note createNote() throws IOException {\n+    Note note;\n     if (conf.getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING)) {\n-      return createNote(replFactory.getDefaultInterpreterSettingList());\n+      note = createNote(replFactory.getDefaultInterpreterSettingList());\n     } else {\n-      return createNote(null);\n+      note = createNote(null);\n     }\n+    notebookIndex.addIndexDoc(note);\n+    return note;\n   }\n \n   /**\n@@ -105,7 +136,7 @@ public Note createNote() throws IOException {\n    */\n   public Note createNote(List<String> interpreterIds) throws IOException {\n     NoteInterpreterLoader intpLoader = new NoteInterpreterLoader(replFactory);\n-    Note note = new Note(notebookRepo, intpLoader, jobListenerFactory);\n+    Note note = new Note(notebookRepo, intpLoader, jobListenerFactory, notebookIndex);\n     intpLoader.setNoteId(note.id());\n     synchronized (notes) {\n       notes.put(note.id(), note);\n@@ -114,6 +145,7 @@ public Note createNote(List<String> interpreterIds) throws IOException {\n       bindInterpretersToNote(note.id(), interpreterIds);\n     }\n \n+    notebookIndex.addIndexDoc(note);\n     note.persist();\n     return note;\n   }\n@@ -144,6 +176,8 @@ public Note cloneNote(String sourceNoteID, String newNoteName) throws\n     for (Paragraph p : paragraphs) {\n       newNote.addCloneParagraph(p);\n     }\n+\n+    notebookIndex.addIndexDoc(newNote);\n     newNote.persist();\n     return newNote;\n   }\n@@ -183,9 +217,11 @@ public Note getNote(String id) {\n \n   public void removeNote(String id) {\n     Note note;\n+\n     synchronized (notes) {\n       note = notes.remove(id);\n     }\n+    notebookIndex.deleteIndexDocs(note);\n \n     // remove from all interpreter instance's angular object registry\n     for (InterpreterSetting settings : replFactory.get()) {\n@@ -204,6 +240,7 @@ public void removeNote(String id) {\n     }\n   }\n \n+  @SuppressWarnings(\"rawtypes\")\n   private Note loadNoteFromRepo(String id) {\n     Note note = null;\n     try {\n@@ -215,20 +252,17 @@ private Note loadNoteFromRepo(String id) {\n       return null;\n     }\n \n-    // set NoteInterpreterLoader\n-    NoteInterpreterLoader noteInterpreterLoader = new NoteInterpreterLoader(\n-        replFactory);\n-    note.setReplLoader(noteInterpreterLoader);\n-    noteInterpreterLoader.setNoteId(note.id());\n+    //Manually inject ALL dependencies, as DI constructor was NOT used\n+    note.setIndex(this.notebookIndex);\n \n-    // set JobListenerFactory\n-    note.setJobListenerFactory(jobListenerFactory);\n+    NoteInterpreterLoader replLoader = new NoteInterpreterLoader(replFactory);\n+    note.setReplLoader(replLoader);\n+    replLoader.setNoteId(note.id());\n \n-    // set notebookRepo\n+    note.setJobListenerFactory(jobListenerFactory);\n     note.setNotebookRepo(notebookRepo);\n \n-    Map<String, SnapshotAngularObject> angularObjectSnapshot =\n-        new HashMap<String, SnapshotAngularObject>();\n+    Map<String, SnapshotAngularObject> angularObjectSnapshot = new HashMap<>();\n \n     // restore angular object --------------\n     Date lastUpdatedDate = new Date(0);\n@@ -246,15 +280,11 @@ private Note loadNoteFromRepo(String id) {\n       for (String intpGroupName : savedObjects.keySet()) {\n         List<AngularObject> objectList = savedObjects.get(intpGroupName);\n \n-        for (AngularObject savedObject : objectList) {\n-          SnapshotAngularObject snapshot = angularObjectSnapshot.get(savedObject.getName());\n+        for (AngularObject object : objectList) {\n+          SnapshotAngularObject snapshot = angularObjectSnapshot.get(object.getName());\n           if (snapshot == null || snapshot.getLastUpdate().before(lastUpdatedDate)) {\n-            angularObjectSnapshot.put(\n-                savedObject.getName(),\n-                new SnapshotAngularObject(\n-                    intpGroupName,\n-                    savedObject,\n-                    lastUpdatedDate));\n+            angularObjectSnapshot.put(object.getName(),\n+                new SnapshotAngularObject(intpGroupName, object, lastUpdatedDate));\n           }\n         }\n       }\n@@ -310,6 +340,7 @@ private void reloadAllNotes() throws IOException {\n     }\n   }\n \n+  @SuppressWarnings(\"rawtypes\")\n   class SnapshotAngularObject {\n     String intpGroupId;\n     AngularObject angularObject;\n@@ -344,12 +375,9 @@ public Date getLastUpdate() {\n     }\n     synchronized (notes) {\n       List<Note> noteList = new ArrayList<Note>(notes.values());\n-      Collections.sort(noteList, new Comparator() {\n+      Collections.sort(noteList, new Comparator<Note>() {\n         @Override\n-        public int compare(Object one, Object two) {\n-          Note note1 = (Note) one;\n-          Note note2 = (Note) two;\n-\n+        public int compare(Note note1, Note note2) {\n           String name1 = note1.id();\n           if (note1.getName() != null) {\n             name1 = note1.getName();\n@@ -358,7 +386,6 @@ public int compare(Object one, Object two) {\n           if (note2.getName() != null) {\n             name2 = note2.getName();\n           }\n-          ((Note) one).getName();\n           return name1.compareTo(name2);\n         }\n       });\n@@ -459,6 +486,7 @@ public ZeppelinConfiguration getConf() {\n \n   public void close() {\n     this.notebookRepo.close();\n+    this.notebookIndex.close();\n   }\n \n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "c98f2fb3fabe372ff1f4bce09d3cf113ac5be4e1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 3,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "patch": "@@ -23,7 +23,6 @@\n import org.apache.zeppelin.interpreter.*;\n import org.apache.zeppelin.interpreter.Interpreter.FormType;\n import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n-import org.apache.zeppelin.interpreter.InterpreterResult.Type;\n import org.apache.zeppelin.scheduler.Job;\n import org.apache.zeppelin.scheduler.JobListener;\n import org.slf4j.Logger;\n@@ -35,10 +34,10 @@\n /**\n  * Paragraph is a representation of an execution unit.\n  *\n- * @author Leemoonsoo\n  */\n public class Paragraph extends Job implements Serializable, Cloneable {\n-  private static final transient long serialVersionUID = -6328572073497992016L;\n+  private static final long serialVersionUID = -6328572073497992016L;\n+\n   private transient NoteInterpreterLoader replLoader;\n   private transient Note note;\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "sha": "433095b379cc93d368089bdc7dadd495e5583f7c",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 13,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java",
                "patch": "@@ -46,11 +46,11 @@\n   private List<NotebookRepo> repos = new ArrayList<NotebookRepo>();\n \n   /**\n+   * @param noteIndex\n    * @param (conf)\n    * @throws - Exception\n    */\n   public NotebookRepoSync(ZeppelinConfiguration conf) throws Exception {\n-\n     config = conf;\n \n     String allStorageClassNames = conf.getString(ConfVars.ZEPPELIN_NOTEBOOK_STORAGE).trim();\n@@ -134,28 +134,26 @@ public void remove(String noteId) throws IOException {\n   }\n \n   /**\n-   * copy new/updated notes from source to destination storage\n+   * Copies new/updated notes from source to destination storage\n+   *\n    * @throws IOException\n    */\n   void sync(int sourceRepoIndex, int destRepoIndex) throws IOException {\n     LOG.info(\"Sync started\");\n-    NotebookRepo sourceRepo = getRepo(sourceRepoIndex);\n-    NotebookRepo destRepo = getRepo(destRepoIndex);\n-    List <NoteInfo> sourceNotes = sourceRepo.list();\n-    List <NoteInfo> destNotes = destRepo.list();\n-\n-    Map<String, List<String>> noteIDs = notesCheckDiff(sourceNotes,\n-                                                       sourceRepo,\n-                                                       destNotes,\n-                                                       destRepo);\n+    NotebookRepo srcRepo = getRepo(sourceRepoIndex);\n+    NotebookRepo dstRepo = getRepo(destRepoIndex);\n+    List <NoteInfo> srcNotes = srcRepo.list();\n+    List <NoteInfo> dstNotes = dstRepo.list();\n+\n+    Map<String, List<String>> noteIDs = notesCheckDiff(srcNotes, srcRepo, dstNotes, dstRepo);\n     List<String> pushNoteIDs = noteIDs.get(pushKey);\n     List<String> pullNoteIDs = noteIDs.get(pullKey);\n     if (!pushNoteIDs.isEmpty()) {\n       LOG.info(\"Notes with the following IDs will be pushed\");\n       for (String id : pushNoteIDs) {\n         LOG.info(\"ID : \" + id);\n       }\n-      pushNotes(pushNoteIDs, sourceRepo, destRepo);\n+      pushNotes(pushNoteIDs, srcRepo, dstRepo);\n     } else {\n       LOG.info(\"Nothing to push\");\n     }\n@@ -165,7 +163,7 @@ void sync(int sourceRepoIndex, int destRepoIndex) throws IOException {\n       for (String id : pullNoteIDs) {\n         LOG.info(\"ID : \" + id);\n       }\n-      pushNotes(pullNoteIDs, destRepo, sourceRepo);\n+      pushNotes(pullNoteIDs, dstRepo, srcRepo);\n     } else {\n       LOG.info(\"Nothing to pull\");\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java",
                "sha": "a5bf6b3dfddec5d0da12da41130ea33325f37910",
                "status": "modified"
            },
            {
                "additions": 391,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/search/LuceneSearch.java",
                "changes": 391,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/search/LuceneSearch.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/search/LuceneSearch.java",
                "patch": "@@ -0,0 +1,391 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.search;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.analysis.Analyzer;\n+import org.apache.lucene.analysis.TokenStream;\n+import org.apache.lucene.analysis.standard.StandardAnalyzer;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.Field;\n+import org.apache.lucene.document.LongField;\n+import org.apache.lucene.document.StringField;\n+import org.apache.lucene.document.TextField;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.queryparser.classic.ParseException;\n+import org.apache.lucene.queryparser.classic.QueryParser;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.ScoreDoc;\n+import org.apache.lucene.search.WildcardQuery;\n+import org.apache.lucene.search.highlight.Highlighter;\n+import org.apache.lucene.search.highlight.InvalidTokenOffsetsException;\n+import org.apache.lucene.search.highlight.QueryScorer;\n+import org.apache.lucene.search.highlight.SimpleHTMLFormatter;\n+import org.apache.lucene.search.highlight.TextFragment;\n+import org.apache.lucene.search.highlight.TokenSources;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.RAMDirectory;\n+import org.apache.zeppelin.notebook.Note;\n+import org.apache.zeppelin.notebook.Paragraph;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Search (both, indexing and query) the notebooks using Lucene.\n+ *\n+ * Query is thread-safe, as creates new IndexReader every time.\n+ * Index is thread-safe, as re-uses single IndexWriter, which is thread-safe.\n+ */\n+public class LuceneSearch implements SearchService {\n+  private static final Logger LOG = LoggerFactory.getLogger(LuceneSearch.class);\n+\n+  private static final String SEARCH_FIELD = \"contents\";\n+  static final String PARAGRAPH = \"paragraph\";\n+  static final String ID_FIELD = \"id\";\n+\n+  Directory ramDirectory;\n+  Analyzer analyzer;\n+  IndexWriterConfig iwc;\n+  IndexWriter writer;\n+\n+  public LuceneSearch() {\n+    ramDirectory = new RAMDirectory();\n+    analyzer = new StandardAnalyzer();\n+    iwc = new IndexWriterConfig(analyzer);\n+    try {\n+      writer = new IndexWriter(ramDirectory, iwc);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to reate new IndexWriter\", e);\n+    }\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.zeppelin.search.Search#query(java.lang.String)\n+   */\n+  @Override\n+  public List<Map<String, String>> query(String queryStr) {\n+    if (null == ramDirectory) {\n+      throw new IllegalStateException(\n+          \"Something went wrong on instance creation time, index dir is null\");\n+    }\n+    List<Map<String, String>> result = Collections.emptyList();\n+    try (IndexReader indexReader = DirectoryReader.open(ramDirectory)) {\n+      IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n+      Analyzer analyzer = new StandardAnalyzer();\n+      QueryParser parser = new QueryParser(SEARCH_FIELD, analyzer);\n+\n+      Query query = parser.parse(queryStr);\n+      LOG.debug(\"Searching for: \" + query.toString(SEARCH_FIELD));\n+\n+      SimpleHTMLFormatter htmlFormatter = new SimpleHTMLFormatter();\n+      Highlighter highlighter = new Highlighter(htmlFormatter, new QueryScorer(query));\n+\n+      result = doSearch(indexSearcher, query, analyzer, highlighter);\n+      indexReader.close();\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to open index dir {}, make sure indexing finished OK\", ramDirectory, e);\n+    } catch (ParseException e) {\n+      LOG.error(\"Failed to parse query \" + queryStr, e);\n+    }\n+    return result;\n+  }\n+\n+  private List<Map<String, String>> doSearch(IndexSearcher searcher, Query query,\n+      Analyzer analyzer, Highlighter highlighter) {\n+    List<Map<String, String>> matchingParagraphs = Lists.newArrayList();\n+    ScoreDoc[] hits;\n+    try {\n+      hits = searcher.search(query, 20).scoreDocs;\n+      for (int i = 0; i < hits.length; i++) {\n+        LOG.debug(\"doc={} score={}\", hits[i].doc, hits[i].score);\n+\n+        int id = hits[i].doc;\n+        Document doc = searcher.doc(id);\n+        String path = doc.get(ID_FIELD);\n+        if (path != null) {\n+          LOG.debug((i + 1) + \". \" + path);\n+          String title = doc.get(\"title\");\n+          if (title != null) {\n+            LOG.debug(\"   Title: {}\", doc.get(\"title\"));\n+          }\n+\n+          String text = doc.get(SEARCH_FIELD);\n+          TokenStream tokenStream = TokenSources.getTokenStream(searcher.getIndexReader(), id,\n+              SEARCH_FIELD, analyzer);\n+          TextFragment[] frag = highlighter.getBestTextFragments(tokenStream, text, true, 3);\n+          LOG.debug(\"    {} fragments found for query '{}'\", frag.length, query);\n+          for (int j = 0; j < frag.length; j++) {\n+            if ((frag[j] != null) && (frag[j].getScore() > 0)) {\n+              LOG.debug(\"    Fragment: {}\", frag[j].toString());\n+            }\n+          }\n+          String fragment = (frag != null && frag.length > 0) ? frag[0].toString() : \"\";\n+\n+          matchingParagraphs.add(ImmutableMap.of(\"id\", path, // <noteId>/paragraph/<paragraphId>\n+              \"name\", title, \"snippet\", fragment, \"text\", text));\n+        } else {\n+          LOG.info(\"{}. No {} for this document\", i + 1, ID_FIELD);\n+        }\n+      }\n+    } catch (IOException | InvalidTokenOffsetsException e) {\n+      LOG.error(\"Exception on searching for {}\", query, e);\n+    }\n+    return matchingParagraphs;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.zeppelin.search.Search#updateIndexDoc(org.apache.zeppelin.notebook.Note)\n+   */\n+  @Override\n+  public void updateIndexDoc(Note note) throws IOException {\n+    updateIndexNoteName(note);\n+    for (Paragraph p: note.getParagraphs()) {\n+      updateIndexParagraph(note, p);\n+    }\n+  }\n+\n+  private void updateIndexNoteName(Note note) throws IOException {\n+    String noteName = note.getName();\n+    String noteId = note.getId();\n+    LOG.debug(\"Indexing Notebook {}, '{}'\", noteId, noteName);\n+    if (null == noteName || noteName.isEmpty()) {\n+      LOG.debug(\"Skipping empty notebook name\");\n+      return;\n+    }\n+    updateDoc(noteId, noteName, null);\n+  }\n+\n+  private void updateIndexParagraph(Note note, Paragraph p) throws IOException {\n+    if (p.getText() == null) {\n+      LOG.debug(\"Skipping empty paragraph\");\n+      return;\n+    }\n+    updateDoc(note.getId(), note.getName(), p);\n+  }\n+\n+  /**\n+   * Updates index for the given note: either note.name or a paragraph If\n+   * paragraph is <code>null</code> - updates only for the note.name\n+   *\n+   * @param noteId\n+   * @param noteName\n+   * @param p\n+   * @throws IOException\n+   */\n+  private void updateDoc(String noteId, String noteName, Paragraph p) throws IOException {\n+    String id = formatId(noteId, p);\n+    Document doc = newDocument(id, noteName, p);\n+    try {\n+      writer.updateDocument(new Term(ID_FIELD, id), doc);\n+      writer.commit();\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to updaet index of notebook {}\", noteId, e);\n+    }\n+  }\n+\n+  /**\n+   * If paragraph is not null, id is <noteId>/paragraphs/<paragraphId>,\n+   * otherwise it's just <noteId>.\n+   */\n+  static String formatId(String noteId, Paragraph p) {\n+    String id = noteId;\n+    if (null != p) {\n+      id = Joiner.on('/').join(id, PARAGRAPH, p.getId());\n+    }\n+    return id;\n+  }\n+\n+  static String formatDeleteId(String noteId, Paragraph p) {\n+    String id = noteId;\n+    if (null != p) {\n+      id = Joiner.on('/').join(id, PARAGRAPH, p.getId());\n+    } else {\n+      id = id + \"*\";\n+    }\n+    return id;\n+  }\n+\n+  /**\n+   * If paragraph is not null, indexes code in the paragraph, otherwise indexes\n+   * the notebook name.\n+   *\n+   * @param id id of the document, different for Note name and paragraph\n+   * @param noteName name of the note\n+   * @param p paragraph\n+   * @return\n+   */\n+  private Document newDocument(String id, String noteName, Paragraph p) {\n+    Document doc = new Document();\n+\n+    Field pathField = new StringField(ID_FIELD, id, Field.Store.YES);\n+    doc.add(pathField);\n+    doc.add(new StringField(\"title\", noteName, Field.Store.YES));\n+\n+    if (null != p) {\n+      doc.add(new TextField(SEARCH_FIELD, p.getText(), Field.Store.YES));\n+      Date date = p.getDateStarted() != null ? p.getDateStarted() : p.getDateCreated();\n+      doc.add(new LongField(\"modified\", date.getTime(), Field.Store.NO));\n+    } else {\n+      doc.add(new TextField(SEARCH_FIELD, noteName, Field.Store.YES));\n+    }\n+    return doc;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.zeppelin.search.Search#addIndexDocs(java.util.Collection)\n+   */\n+  @Override\n+  public void addIndexDocs(Collection<Note> collection) {\n+    int docsIndexed = 0;\n+    long start = System.nanoTime();\n+    try {\n+      for (Note note : collection) {\n+        addIndexDocAsync(note);\n+        docsIndexed++;\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to index all Notebooks\", e);\n+    } finally {\n+      try { // save what's been indexed, even if not full collection\n+        writer.commit();\n+      } catch (IOException e) {\n+        LOG.error(\"Failed to save index\", e);\n+      }\n+      long end = System.nanoTime();\n+      LOG.info(\"Indexing {} notebooks took {}ms\", docsIndexed,\n+          TimeUnit.NANOSECONDS.toMillis(end - start));\n+    }\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.zeppelin.search.Search#addIndexDoc(org.apache.zeppelin.notebook.Note)\n+   */\n+  @Override\n+  public void addIndexDoc(Note note) {\n+    try {\n+      addIndexDocAsync(note);\n+      writer.commit();\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add note {} to index\", note, e);\n+    }\n+  }\n+\n+  /**\n+   * Indexes the given notebook, but does not commit changes.\n+   *\n+   * @param note\n+   * @throws IOException\n+   */\n+  private void addIndexDocAsync(Note note) throws IOException {\n+    indexNoteName(writer, note.getId(), note.getName());\n+    for (Paragraph doc : note.getParagraphs()) {\n+      if (doc.getText() == null) {\n+        LOG.debug(\"Skipping empty paragraph\");\n+        continue;\n+      }\n+      indexDoc(writer, note.getId(), note.getName(), doc);\n+    }\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.zeppelin.search.Search#deleteIndexDocs(org.apache.zeppelin.notebook.Note)\n+   */\n+  @Override\n+  public void deleteIndexDocs(Note note) {\n+    deleteDoc(note, null);\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.zeppelin.search.Search\n+   *  #deleteIndexDoc(org.apache.zeppelin.notebook.Note, org.apache.zeppelin.notebook.Paragraph)\n+   */\n+  @Override\n+  public void deleteIndexDoc(Note note, Paragraph p) {\n+    deleteDoc(note, p);\n+  }\n+\n+  private void deleteDoc(Note note, Paragraph p) {\n+    if (null == note) {\n+      LOG.error(\"Trying to delete note by reference to NULL\");\n+      return;\n+    }\n+    String fullNoteOrJustParagraph = formatDeleteId(note.getId(), p);\n+    LOG.debug(\"Deleting note {}, out of: {}\", note.getId(), writer.numDocs());\n+    try {\n+      writer.deleteDocuments(new WildcardQuery(new Term(ID_FIELD, fullNoteOrJustParagraph)));\n+      writer.commit();\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to delete {} from index by '{}'\", note, fullNoteOrJustParagraph, e);\n+    }\n+    LOG.debug(\"Done, index contains {} docs now\" + writer.numDocs());\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see org.apache.zeppelin.search.Search#close()\n+   */\n+  @Override\n+  public void close() {\n+    try {\n+      writer.close();\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to .close() the notebook index\", e);\n+    }\n+  }\n+\n+  /**\n+   * Indexes a notebook name\n+   *\n+   * @throws IOException\n+   */\n+  private void indexNoteName(IndexWriter w, String noteId, String noteName) throws IOException {\n+    LOG.debug(\"Indexing Notebook {}, '{}'\", noteId, noteName);\n+    if (null == noteName || noteName.isEmpty()) {\n+      LOG.debug(\"Skipping empty notebook name\");\n+      return;\n+    }\n+    indexDoc(w, noteId, noteName, null);\n+  }\n+\n+  /**\n+   * Indexes a single document:\n+   *  - code of the paragraph (if non-null)\n+   *  - or just a note name\n+   */\n+  private void indexDoc(IndexWriter w, String noteId, String noteName, Paragraph p)\n+      throws IOException {\n+    String id = formatId(noteId, p);\n+    Document doc = newDocument(id, noteName, p);\n+    w.addDocument(doc);\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/search/LuceneSearch.java",
                "sha": "7f9cbbdd9db6b729ff93150606a145548a8e3ade",
                "status": "added"
            },
            {
                "additions": 87,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/search/SearchService.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/search/SearchService.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/search/SearchService.java",
                "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.search;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.zeppelin.notebook.Note;\n+import org.apache.zeppelin.notebook.Paragraph;\n+\n+/**\n+ * Search (both, indexing and query) the notebooks.\n+ * \n+ * Intended to have multiple implementation, i.e:\n+ *  - local Lucene (in-memory, on-disk)\n+ *  - remote Elasticsearch\n+ */\n+public interface SearchService {\n+\n+  /**\n+   * Full-text search in all the notebooks\n+   *\n+   * @param queryStr a query\n+   * @return A list of matching paragraphs (id, text, snippet w/ highlight)\n+   */\n+  public List<Map<String, String>> query(String queryStr);\n+\n+  /**\n+   * Updates all documents in index for the given note:\n+   *  - name\n+   *  - all paragraphs\n+   *\n+   * @param note a Note to update index for\n+   * @throws IOException\n+   */\n+  public void updateIndexDoc(Note note) throws IOException;\n+\n+  /**\n+   * Indexes full collection of notes: all the paragraphs + Note names\n+   *\n+   * @param collection of Notes\n+   */\n+  public void addIndexDocs(Collection<Note> collection);\n+\n+  /**\n+   * Indexes the given notebook.\n+   *\n+   * @throws IOException If there is a low-level I/O error\n+   */\n+  public void addIndexDoc(Note note);\n+\n+  /**\n+   * Deletes all docs on given Note from index\n+   */\n+  public void deleteIndexDocs(Note note);\n+\n+  /**\n+   * Deletes doc for a given\n+   *\n+   * @param note\n+   * @param p\n+   * @throws IOException\n+   */\n+  public void deleteIndexDoc(Note note, Paragraph p);\n+\n+  /**\n+   * Frees the recourses used by index\n+   */\n+  public void close();\n+\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/main/java/org/apache/zeppelin/search/SearchService.java",
                "sha": "64f2b758be273f8c567ed2ce2bd36501277204ae",
                "status": "added"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n \n import java.io.File;\n import java.io.IOException;\n@@ -45,6 +46,8 @@\n import org.apache.zeppelin.scheduler.Job.Status;\n import org.apache.zeppelin.scheduler.JobListener;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n+import org.apache.zeppelin.search.SearchService;\n+import org.apache.zeppelin.search.LuceneSearch;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -84,8 +87,9 @@ public void setUp() throws Exception {\n \n     factory = new InterpreterFactory(conf, new InterpreterOption(false), null);\n \n+    SearchService search = mock(SearchService.class);\n     notebookRepo = new VFSNotebookRepo(conf);\n-    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this);\n+    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this, search);\n   }\n \n   @After\n@@ -170,7 +174,8 @@ public void testPersist() throws IOException, SchedulerException{\n     p1.setText(\"hello world\");\n     note.persist();\n \n-    Notebook notebook2 = new Notebook(conf, notebookRepo, schedulerFactory, new InterpreterFactory(conf, null), this);\n+    Notebook notebook2 = new Notebook(\n+        conf, notebookRepo, schedulerFactory, new InterpreterFactory(conf, null), this, null);\n     assertEquals(1, notebook2.getAllNotes().size());\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "sha": "e2d1aaca330bea1fb207a3d1aef0eac5a9729bbc",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n \n import java.io.File;\n import java.io.IOException;\n@@ -39,6 +40,8 @@\n import org.apache.zeppelin.scheduler.Job.Status;\n import org.apache.zeppelin.scheduler.JobListener;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n+import org.apache.zeppelin.search.SearchService;\n+import org.apache.zeppelin.search.LuceneSearch;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -86,8 +89,9 @@ public void setUp() throws Exception {\n \n     factory = new InterpreterFactory(conf, new InterpreterOption(false), null);\n     \n+    SearchService search = mock(SearchService.class);\n     notebookRepoSync = new NotebookRepoSync(conf);\n-    notebookSync = new Notebook(conf, notebookRepoSync, schedulerFactory, factory, this);\n+    notebookSync = new Notebook(conf, notebookRepoSync, schedulerFactory, factory, this, search);\n   }\n \n   @After",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java",
                "sha": "6d8c50dd1aacac4071e0872007b33fe380a12f0a",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 12,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.zeppelin.notebook.repo;\n \n import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n \n import java.io.File;\n import java.io.IOException;\n@@ -32,37 +33,35 @@\n import org.apache.zeppelin.notebook.JobListenerFactory;\n import org.apache.zeppelin.notebook.Note;\n import org.apache.zeppelin.notebook.Notebook;\n-import org.apache.zeppelin.notebook.NotebookTest;\n import org.apache.zeppelin.notebook.Paragraph;\n import org.apache.zeppelin.scheduler.JobListener;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n-import org.apache.zeppelin.scheduler.Job.Status;\n+import org.apache.zeppelin.search.SearchService;\n+import org.apache.zeppelin.search.LuceneSearch;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class VFSNotebookRepoTest implements JobListenerFactory{\n-  private static final Logger logger = LoggerFactory.getLogger(NotebookTest.class);\n-\n+public class VFSNotebookRepoTest implements JobListenerFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(VFSNotebookRepoTest.class);\n   private ZeppelinConfiguration conf;\n   private SchedulerFactory schedulerFactory;\n   private Notebook notebook;\n   private NotebookRepo notebookRepo;\n   private InterpreterFactory factory;\n \n   private File mainZepDir;\n-\n   private File mainNotebookDir;\n \n   @Before\n   public void setUp() throws Exception {\n-    String zpath = System.getProperty(\"java.io.tmpdir\")+\"/ZeppelinLTest_\"+System.currentTimeMillis();\n+    String zpath = System.getProperty(\"java.io.tmpdir\") + \"/ZeppelinLTest_\" + System.currentTimeMillis();\n     mainZepDir = new File(zpath);\n     mainZepDir.mkdirs();\n     new File(mainZepDir, \"conf\").mkdirs();\n-    String mainNotePath = zpath+\"/notebook\";\n+    String mainNotePath = zpath + \"/notebook\";\n     mainNotebookDir = new File(mainNotePath);\n     mainNotebookDir.mkdirs();\n \n@@ -79,15 +78,15 @@ public void setUp() throws Exception {\n     this.schedulerFactory = new SchedulerFactory();\n     factory = new InterpreterFactory(conf, new InterpreterOption(false), null);\n \n+    SearchService search = mock(SearchService.class);\n     notebookRepo = new VFSNotebookRepo(conf);\n-    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this);\n+    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this, search);\n   }\n \n   @After\n   public void tearDown() throws Exception {\n-    //FileUtils.deleteDirectory(mainZepDir);\n     if (!FileUtils.deleteQuietly(mainZepDir)) {\n-      logger.error(\"Failed to delete {} \", mainZepDir.getName());\n+      LOG.error(\"Failed to delete {} \", mainZepDir.getName());\n     }\n   }\n \n@@ -97,7 +96,7 @@ public void testSaveNotebook() throws IOException, InterruptedException {\n     note.getNoteReplLoader().setInterpreters(factory.getDefaultInterpreterSettingList());\n \n     Paragraph p1 = note.addParagraph();\n-    Map config = p1.getConfig();\n+    Map<String, Object> config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n     p1.setText(\"%mock1 hello world\");",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "sha": "80d1174e2f9235b35301c1ef7c00a5733fecfe13",
                "status": "modified"
            },
            {
                "additions": 259,
                "blob_url": "https://github.com/apache/zeppelin/blob/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java",
                "changes": 259,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java?ref=82de508d727761a9d95ce506a23e39b372f82a93",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java",
                "patch": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.search;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.*;\n+import static org.apache.zeppelin.search.LuceneSearch.formatId;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.zeppelin.interpreter.InterpreterSetting;\n+import org.apache.zeppelin.notebook.Note;\n+import org.apache.zeppelin.notebook.NoteInterpreterLoader;\n+import org.apache.zeppelin.notebook.Paragraph;\n+import org.apache.zeppelin.notebook.repo.NotebookRepo;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n+\n+public class LuceneSearchTest {\n+\n+  private static NoteInterpreterLoader replLoaderMock;\n+  private static NotebookRepo notebookRepoMock;\n+  private SearchService notebookIndex;\n+\n+  @BeforeClass\n+  public static void beforeStartUp() {\n+    notebookRepoMock = mock(NotebookRepo.class);\n+    replLoaderMock = mock(NoteInterpreterLoader.class);\n+\n+    when(replLoaderMock.getInterpreterSettings())\n+      .thenReturn(ImmutableList.<InterpreterSetting>of());\n+  }\n+\n+  @Before\n+  public void startUp() {\n+    notebookIndex = new LuceneSearch();\n+  }\n+\n+  @After\n+  public void shutDown() {\n+    notebookIndex.close();\n+  }\n+\n+  @Test public void canIndexNotebook() {\n+    //give\n+    Note note1 = newNoteWithParapgraph(\"Notebook1\", \"test\");\n+    Note note2 = newNoteWithParapgraph(\"Notebook2\", \"not test\");\n+    List<Note> notebook = Arrays.asList(note1, note2);\n+\n+    //when\n+    notebookIndex.addIndexDocs(notebook);\n+  }\n+\n+  @Test public void canIndexAndQuery() {\n+    //given\n+    Note note1 = newNoteWithParapgraph(\"Notebook1\", \"test\");\n+    Note note2 = newNoteWithParapgraphs(\"Notebook2\", \"not test\", \"not test at all\");\n+    notebookIndex.addIndexDocs(Arrays.asList(note1, note2));\n+\n+    //when\n+    List<Map<String, String>> results = notebookIndex.query(\"all\");\n+\n+    //then\n+    assertThat(results).isNotEmpty();\n+    assertThat(results.size()).isEqualTo(1);\n+    assertThat(results.get(0))\n+      .containsEntry(\"id\", formatId(note2.getId(), note2.getLastParagraph()));\n+  }\n+\n+  @Test public void canIndexAndQueryByNotebookName() {\n+    //given\n+    Note note1 = newNoteWithParapgraph(\"Notebook1\", \"test\");\n+    Note note2 = newNoteWithParapgraphs(\"Notebook2\", \"not test\", \"not test at all\");\n+    notebookIndex.addIndexDocs(Arrays.asList(note1, note2));\n+\n+    //when\n+    List<Map<String, String>> results = notebookIndex.query(\"Notebook1\");\n+\n+    //then\n+    assertThat(results).isNotEmpty();\n+    assertThat(results.size()).isEqualTo(1);\n+    assertThat(results.get(0)).containsEntry(\"id\", note1.getId());\n+  }\n+\n+  @Test public void indexKeyContract() throws IOException {\n+    //give\n+    Note note1 = newNoteWithParapgraph(\"Notebook1\", \"test\");\n+    //when\n+    notebookIndex.addIndexDoc(note1);\n+    //then\n+    String id = resultForQuery(\"test\").get(0).get(LuceneSearch.ID_FIELD);\n+\n+    assertThat(Splitter.on(\"/\").split(id)) //key structure <noteId>/paragraph/<paragraphId>\n+      .containsAllOf(note1.getId(), LuceneSearch.PARAGRAPH, note1.getLastParagraph().getId());\n+  }\n+\n+  @Test //(expected=IllegalStateException.class)\n+  public void canNotSearchBeforeIndexing() {\n+    //given NO notebookIndex.index() was called\n+    //when\n+    List<Map<String, String>> result = notebookIndex.query(\"anything\");\n+    //then\n+    assertThat(result).isEmpty();\n+    //assert logs were printed\n+    //\"ERROR org.apache.zeppelin.search.SearchService:97 - Failed to open index dir RAMDirectory\"\n+  }\n+\n+  @Test public void canIndexAndReIndex() throws IOException {\n+    //given\n+    Note note1 = newNoteWithParapgraph(\"Notebook1\", \"test\");\n+    Note note2 = newNoteWithParapgraphs(\"Notebook2\", \"not test\", \"not test at all\");\n+    notebookIndex.addIndexDocs(Arrays.asList(note1, note2));\n+\n+    //when\n+    Paragraph p2 = note2.getLastParagraph();\n+    p2.setText(\"test indeed\");\n+    notebookIndex.updateIndexDoc(note2);\n+\n+    //then\n+    List<Map<String, String>> results = notebookIndex.query(\"all\");\n+    assertThat(results).isEmpty();\n+\n+    results = notebookIndex.query(\"indeed\");\n+    assertThat(results).isNotEmpty();\n+  }\n+\n+  @Test public void canDeleteNull() throws IOException {\n+    //give\n+    // looks like a bug in web UI: it tries to delete a note twice (after it has just been deleted)\n+    //when\n+    notebookIndex.deleteIndexDocs(null);\n+  }\n+\n+  @Test public void canDeleteFromIndex() throws IOException {\n+    //given\n+    Note note1 = newNoteWithParapgraph(\"Notebook1\", \"test\");\n+    Note note2 = newNoteWithParapgraphs(\"Notebook2\", \"not test\", \"not test at all\");\n+    notebookIndex.addIndexDocs(Arrays.asList(note1, note2));\n+    assertThat(resultForQuery(\"Notebook2\")).isNotEmpty();\n+\n+    //when\n+    notebookIndex.deleteIndexDocs(note2);\n+\n+    //then\n+    assertThat(notebookIndex.query(\"all\")).isEmpty();\n+    assertThat(resultForQuery(\"Notebook2\")).isEmpty();\n+\n+    List<Map<String, String>> results = resultForQuery(\"test\");\n+    assertThat(results).isNotEmpty();\n+    assertThat(results.size()).isEqualTo(1);\n+  }\n+\n+  @Test public void indexParagraphUpdatedOnNoteSave() throws IOException {\n+    //given: total 2 notebooks, 3 paragraphs\n+    Note note1 = newNoteWithParapgraph(\"Notebook1\", \"test\");\n+    Note note2 = newNoteWithParapgraphs(\"Notebook2\", \"not test\", \"not test at all\");\n+    notebookIndex.addIndexDocs(Arrays.asList(note1, note2));\n+    assertThat(resultForQuery(\"test\").size()).isEqualTo(3);\n+\n+    //when\n+    Paragraph p1 = note1.getLastParagraph();\n+    p1.setText(\"no no no\");\n+    note1.persist();\n+\n+    //then\n+    assertThat(resultForQuery(\"Notebook1\").size()).isEqualTo(1);\n+\n+    List<Map<String, String>> results = resultForQuery(\"test\");\n+    assertThat(results).isNotEmpty();\n+    assertThat(results.size()).isEqualTo(2);\n+\n+    //does not include Notebook1's paragraph any more\n+    for (Map<String, String> result: results) {\n+      assertThat(result.get(\"id\").startsWith(note1.getId())).isFalse();;\n+    }\n+  }\n+\n+  @Test public void indexNoteNameUpdatedOnNoteSave() throws IOException {\n+    //given: total 2 notebooks, 3 paragraphs\n+    Note note1 = newNoteWithParapgraph(\"Notebook1\", \"test\");\n+    Note note2 = newNoteWithParapgraphs(\"Notebook2\", \"not test\", \"not test at all\");\n+    notebookIndex.addIndexDocs(Arrays.asList(note1, note2));\n+    assertThat(resultForQuery(\"test\").size()).isEqualTo(3);\n+\n+    //when\n+    note1.setName(\"NotebookN\");\n+    note1.persist();\n+\n+    //then\n+    assertThat(resultForQuery(\"Notebook1\")).isEmpty();\n+    assertThat(resultForQuery(\"NotebookN\")).isNotEmpty();\n+    assertThat(resultForQuery(\"NotebookN\").size()).isEqualTo(1);\n+  }\n+\n+  private List<Map<String, String>> resultForQuery(String q) {\n+    return notebookIndex.query(q);\n+  }\n+\n+  /**\n+   * Creates a new Note \\w given name,\n+   * adds a new paragraph \\w given text\n+   *\n+   * @param noteName name of the note\n+   * @param parText text of the paragraph\n+   * @return Note\n+   */\n+  private Note newNoteWithParapgraph(String noteName, String parText) {\n+    Note note1 = newNote(noteName);\n+    addParagraphWithText(note1, parText);\n+    return note1;\n+  }\n+\n+  /**\n+   * Creates a new Note \\w given name,\n+   * adds N paragraphs \\w given texts\n+   */\n+  private Note newNoteWithParapgraphs(String noteName, String... parTexts) {\n+    Note note1 = newNote(noteName);\n+    for (String parText : parTexts) {\n+      addParagraphWithText(note1, parText);\n+    }\n+    return note1;\n+  }\n+\n+  private Paragraph addParagraphWithText(Note note, String text) {\n+    Paragraph p = note.addParagraph();\n+    p.setText(text);\n+    return p;\n+  }\n+\n+  private Note newNote(String name) {\n+    Note note = new Note(notebookRepoMock, replLoaderMock, null, notebookIndex);\n+    note.setName(name);\n+    return note;\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/82de508d727761a9d95ce506a23e39b372f82a93/zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java",
                "sha": "f74d95eb37582a9604af670b52ace53b88e6934c",
                "status": "added"
            }
        ],
        "message": "ZEPPELIN-501 Notebook search\n\n### What is this PR for?\nThis PR has for goal to allow the user to search through the code in all the paragraphs *and notebook names* in all the notebooks\n\nIt add a simple 'search bar' to the nav-bar of Zeppelin WebApp, and an in-memory fulltext search index of paragraphs to the backend.\n\nThe search is pretty basic now, fine-tuning it for better search over all types of source code will be a subject of further work.\n\n### What type of PR is it?\nFeature\n\n### Todos\n* [x] - Fix typos :dancer: b853aa6\n* [x] - fix js issue in js console felizbear 29da337\n* [x] - update index on paragraph CRUD:\n  - [x] Read (initial work)\n  - [x] Create\\Delete 825b266\n  - [x] Update e915a69\n  - [x] Delete paragraph\n* [x] - add license to zeppelin-distribution/src/bin_license/LICENSE (backend for lucene, not sure about angular-resource as it is part of the AngularJS codebase, but will add just in case) c00b516\n* [x] - add missing Apache headers ded9c3b felizbear 29da337\n* [x] - fix CI (~~was failing RAT on zengine Too many files with unapproved license: 2~~, now flacky integration test AKA [ZEPPELIN-510](https://issues.apache.org/jira/browse/ZEPPELIN-510))\n* [x] - index notebook names e80c3e5, felizbear 29da337\n* [x] - make NotebookRepoSync.sync() package private again  5a18bc8\n* [x] - NPE on persisting changes of existing notebook\n* [x] - reduce log verbosity\n\n### Is there a relevant Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-501\n\n### How should this be tested?\nOutline the steps to test the PR here.\n\n### Screenshots (if appropriate)\n![screen shot 2015-12-15 at 19 49 18](https://cloud.githubusercontent.com/assets/5582506/11808681/34d004e8-a365-11e5-9452-ea616029073c.png)\n\n![screen shot 2015-12-15 at 19 52 03](https://cloud.githubusercontent.com/assets/5582506/11808699/5dc023ce-a365-11e5-953d-c23235446f9c.png)\n\n### Questions:\n* Does the licenses files need update? Yes, added to license files\n* Is there breaking changes for older versions? No\n* Does this needs documentation? Yes\n\nThis work is a collaboration with felizbear who contributed major parts of the frontend changes.\n\nAuthor: Alexander Bezzubov <bzz@apache.org>\nAuthor: felizbear <ilya@nflabs.com>\nAuthor: Alexander <abezzubov@nflabs.com>\n\nCloses #534 from bzz/notebook-search and squashes the following commits:\n\nc7f1d35 [Alexander Bezzubov] ZEPPELIN-501: refactoring, extract SearchService interface + Lucen-based impl\ne3af25c [Alexander Bezzubov] ZEPPELIN-501: muting more search logs info->debug\nc77d53b [Alexander Bezzubov] ZEPPELIN-501: fix + test for bug in index key structure\n78f69a3 [Alexander Bezzubov] ZEPPELIN-501: update index on paragraph delete\n73a28bb [Alexander Bezzubov] ZEPPELIN-501: fix NPE on Note creation by NotebookRepo, \\wo DI constructor\ncf44b1f [Alexander Bezzubov] ZEPPELIN-501: fix NPE on double-delete\nd2b44ac [Alexander Bezzubov] ZEPPELIN-501: stop printing whole note in logs\nf30e6c8 [Alexander Bezzubov] Merge branch 'master' into notebook-search\nda69c07 [Alexander Bezzubov] ZEPPELIN-501: validate notes before update index\n5f47890 [Alexander Bezzubov] ZEPPELIN-501: fix bug (merge artefact) that failed CI befor\ne915a69 [Alexander Bezzubov] ZEPPELIN-501: update notebooks on save + tests\n3f20904 [Alexander Bezzubov] ZEPPELIN-501: refactoring, compiler warning in Paragraph.java\n40cf9e8 [Alexander Bezzubov] ZEPPELIN-501: refactoring, cleaning compiler warnings in Notebook.java\n6a3906f [Alexander Bezzubov] Merge branch 'master' into notebook-search\n2b2f8dc [Alexander Bezzubov] Merge branch 'master' into notebook-search\n44235eb [Alexander Bezzubov] ZEPPELIN-501: refactoring, cleaning compiler warnings in Note.java\neb7878a [Alexander Bezzubov] Merge branch 'master' into notebook-search\n0ce8a92 [Alexander Bezzubov] ZEPPELIN-501: add missing logger\n6da1dc9 [Alexander Bezzubov] Merge branch 'master' into notebook-search\n8c0f29a [Alexander Bezzubov] ZEPPELIN-501: fixing NPE in tests \\w mocks\n825b266 [Alexander Bezzubov] ZEPPELIN-501: refactoring + handling index Create\\Delete\nb13d5fb [Alexander Bezzubov] Merge branch 'master' into notebook-search\n009b290 [Alexander Bezzubov] ZEPPELIN-501: muting logs back\n0efc00e [Alexander Bezzubov] Merge branch 'master' into notebook-search\nb0b2c54 [Alexander Bezzubov] ZEPPELIN-501: refactoring, renames + verbose logging ON\n36b2467 [Alexander Bezzubov] ZEPPELIN-501: add default val for Note.name\nc7ae983 [Alexander Bezzubov] Merge branch 'master' into notebook-search\nded9c3b [Alexander Bezzubov] ZEPPELIN-501: adding missing license headers\ncd2173e [Alexander Bezzubov] ZEPPELIN-501: tixing fypo in docs, again :see_no_evil:\n1952847 [Alexander Bezzubov] ZEPPELIN-501: minor test update\n6180c86 [Alexander Bezzubov] ZEPPELIN-501: mute logs, invalid notes do not fail all indexing\n29da337 [Alexander] Merge pull request #7 from felizbear/search-fix\nc00b516 [Alexander Bezzubov] ZEPPELIN-501: update LICENCE file with new deps\n5a18bc8 [Alexander Bezzubov] ZEPPELIN-501: restore NotebookRepoSync.sync() visibility + compiler warning cleanup\nfcbff3d [felizbear] add missing apache license info to a source file\n00f0315 [felizbear] handle notebooks is search results\n7d06686 [felizbear] fix search-related bug in notebook controller\ne80c3e5 [Alexander Bezzubov] ZEPPELIN-501: Indexing notebook names\nb853aa6 [Alexander Bezzubov] ZEPPELIN-501: fixing typos in docs\n82c7dd7 [Alexander Bezzubov] ZEPPELIN-501: reverting accidental changes\n71ec51f [felizbear] clear search field on navigation to home view (/)\n1e1357c [felizbear] redirect to notebook and scroll to paragraph from search view\n09d44d2 [Alexander Bezzubov] Search: re-index note on every change\nb2b93c4 [Alexander Bezzubov] Search: refatoring, move SearchService from NotebookRepoSync -> Notebook\n08fe806 [Alexander Bezzubov] Search: adding tests\n63a4e05 [Alexander Bezzubov] Search: adding search API docs\n98f4e59 [Alexander Bezzubov] Search: refactoring, rename fragment -> snippet\n5c1e3e4 [Alexander Bezzubov] Refatoring - removing old annotations\ne363ed4 [Alexander Bezzubov] Search: make jshint happy\n7aad5cf [Alexander Bezzubov] Search: make checkstyle happy\n6ccd6f1 [Alexander Bezzubov] Search: nuke compiler warnings in NotebookRestApi\naa5ddb3 [felizbear] center search results on screen\n227c6b4 [felizbear] update search results view: add panels for results\n865925c [felizbear] highlight syntax and search terms in search results\n9ca8628 [Alexander Bezzubov] Search: merge first 3 fragments + full paragraph in search result\n11127f0 [felizbear] style search widget for notebook search\ndb246fa [Alexander Bezzubov] Search: highlighting added using fragments\nc2c2a52 [Alexander Bezzubov] Search: backend indexing using Lucene added to zengine\n163a465 [Alexander Bezzubov] Search: add search/result-list and switch to\nbc2458a [Alexander Bezzubov] Get rid of compiler warnings\n3900b60 [Alexander Bezzubov] Search: disabling UI on disconnect\n7880237 [Alexander Bezzubov] Search: backend REST API scetch /notebooks/search?q=... added\nc5928f9 [Alexander Bezzubov] Search: form added to navbar in frontend",
        "parent": "https://github.com/apache/zeppelin/commit/d4396887d032d2b6595afcd66b612739c26735f0",
        "patched_files": [
            "SearchService.java",
            "LuceneSearch.java",
            "karma.conf.js",
            "notebook.controller.js",
            "rest-notebook.md",
            "NotebookRepoSync.java",
            "search.css",
            "LICENSE",
            "Notebook.java",
            "Note.java",
            "search.service.js",
            "result-list.controller.js",
            "navbar.html",
            "ZeppelinRestApi.java",
            "NotebookRestApi.java",
            "app.js",
            "Paragraph.java",
            "pom.xml",
            "result-list.html",
            "NotebookServer.java",
            "navbar.controller.js",
            "index.html",
            "ZeppelinServer.java",
            "VFSNotebookRepo.java",
            "bower.json",
            "Job.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookRepoSyncTest.java",
            "ZeppelinRestApiTest.java",
            "NotebookServerTest.java",
            "LuceneSearchTest.java",
            "ParagraphTest.java",
            "VFSNotebookRepoTest.java",
            "NotebookTest.java"
        ]
    },
    "zeppelin_83469be": {
        "bug_id": "zeppelin_83469be",
        "commit": "https://github.com/apache/zeppelin/commit/83469be5bac23dbde81f511afb5bb014fce50489",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 3,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "patch": "@@ -319,7 +319,10 @@ public Response cloneNote(@PathParam(\"notebookId\") String notebookId, String mes\n       throws IOException, CloneNotSupportedException, IllegalArgumentException {\n     LOG.info(\"clone notebook by JSON {}\", message);\n     NewNotebookRequest request = gson.fromJson(message, NewNotebookRequest.class);\n-    String newNoteName = request.getName();\n+    String newNoteName = null;\n+    if (request != null) {\n+      newNoteName = request.getName();\n+    }\n     AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());\n     Note newNote = notebook.cloneNote(notebookId, newNoteName, subject);\n     notebookServer.broadcastNote(newNote);\n@@ -669,7 +672,7 @@ public Response registerCronJob(@PathParam(\"notebookId\") String notebookId, Stri\n     Map<String, Object> config = note.getConfig();\n     config.put(\"cron\", request.getCronString());\n     note.setConfig(config);\n-    notebook.refreshCron(note.id());\n+    notebook.refreshCron(note.getId());\n \n     return new JsonResponse<>(Status.OK).build();\n   }\n@@ -697,7 +700,7 @@ public Response removeCronJob(@PathParam(\"notebookId\") String notebookId)\n     Map<String, Object> config = note.getConfig();\n     config.put(\"cron\", null);\n     note.setConfig(config);\n-    notebook.refreshCron(note.id());\n+    notebook.refreshCron(note.getId());\n \n     return new JsonResponse<>(Status.OK).build();\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "sha": "db0cbecaf890868ec46c51bfc7c0901018829fca",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 31,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "patch": "@@ -336,7 +336,7 @@ private void broadcastToNoteBindedInterpreter(String interpreterGroupId,\n       List<String> ids = notebook.getInterpreterFactory().getInterpreters(note.getId());\n       for (String id : ids) {\n         if (id.equals(interpreterGroupId)) {\n-          broadcast(note.id(), m);\n+          broadcast(note.getId(), m);\n         }\n       }\n     }\n@@ -473,11 +473,11 @@ public void getInterpreterBindings(NotebookSocket conn, Message fromMessage)\n     for (Note note : notes) {\n       Map<String, String> info = new HashMap<>();\n \n-      if (hideHomeScreenNotebookFromList && note.id().equals(homescreenNotebookId)) {\n+      if (hideHomeScreenNotebookFromList && note.getId().equals(homescreenNotebookId)) {\n         continue;\n       }\n \n-      info.put(\"id\", note.id());\n+      info.put(\"id\", note.getId());\n       info.put(\"name\", note.getName());\n       notesInfo.add(info);\n     }\n@@ -486,7 +486,7 @@ public void getInterpreterBindings(NotebookSocket conn, Message fromMessage)\n   }\n \n   public void broadcastNote(Note note) {\n-    broadcast(note.id(), new Message(OP.NOTE).put(\"note\", note));\n+    broadcast(note.getId(), new Message(OP.NOTE).put(\"note\", note));\n   }\n \n   public void broadcastInterpreterBindings(String noteId,\n@@ -544,7 +544,7 @@ private void sendNote(NotebookSocket conn, HashSet<String> userAndRoles, Noteboo\n             notebookAuthorization.getReaders(noteId));\n         return;\n       }\n-      addConnectionToNote(note.id(), conn);\n+      addConnectionToNote(note.getId(), conn);\n       conn.send(serializeMessage(new Message(OP.NOTE).put(\"note\", note)));\n       sendAllAngularObjects(note, conn);\n     } else {\n@@ -568,7 +568,7 @@ private void sendHomeNote(NotebookSocket conn, HashSet<String> userAndRoles,\n             userAndRoles, notebookAuthorization.getReaders(noteId));\n         return;\n       }\n-      addConnectionToNote(note.id(), conn);\n+      addConnectionToNote(note.getId(), conn);\n       conn.send(serializeMessage(new Message(OP.NOTE).put(\"note\", note)));\n       sendAllAngularObjects(note, conn);\n     } else {\n@@ -604,7 +604,7 @@ private void updateNote(NotebookSocket conn, HashSet<String> userAndRoles,\n       note.setName(name);\n       note.setConfig(config);\n       if (cronUpdated) {\n-        notebook.refreshCron(note.id());\n+        notebook.refreshCron(note.getId());\n       }\n \n       AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);\n@@ -643,7 +643,7 @@ private void createNote(NotebookSocket conn, HashSet<String> userAndRoles,\n     }\n \n     note.persist(subject);\n-    addConnectionToNote(note.id(), (NotebookSocket) conn);\n+    addConnectionToNote(note.getId(), (NotebookSocket) conn);\n     conn.send(serializeMessage(new Message(OP.NEW_NOTE).put(\"note\", note)));\n     broadcastNoteList(subject);\n   }\n@@ -697,7 +697,7 @@ private void updateParagraph(NotebookSocket conn, HashSet<String> userAndRoles,\n     p.setTitle((String) fromMessage.get(\"title\"));\n     p.setText((String) fromMessage.get(\"paragraph\"));\n     note.persist(subject);\n-    broadcast(note.id(), new Message(OP.PARAGRAPH).put(\"paragraph\", p));\n+    broadcast(note.getId(), new Message(OP.PARAGRAPH).put(\"paragraph\", p));\n   }\n \n   private void cloneNote(NotebookSocket conn, HashSet<String> userAndRoles,\n@@ -707,7 +707,7 @@ private void cloneNote(NotebookSocket conn, HashSet<String> userAndRoles,\n     String name = (String) fromMessage.get(\"name\");\n     Note newNote = notebook.cloneNote(noteId, name, new AuthenticationInfo(fromMessage.principal));\n     AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);\n-    addConnectionToNote(newNote.id(), (NotebookSocket) conn);\n+    addConnectionToNote(newNote.getId(), (NotebookSocket) conn);\n     conn.send(serializeMessage(new Message(OP.NEW_NOTE).put(\"note\", newNote)));\n     broadcastNoteList(subject);\n   }\n@@ -810,12 +810,12 @@ private void angularObjectUpdated(NotebookSocket conn, HashSet<String> userAndRo\n       List<InterpreterSetting> settings = notebook.getInterpreterFactory()\n           .getInterpreterSettings(note.getId());\n       for (InterpreterSetting setting : settings) {\n-        if (setting.getInterpreterGroup(note.id()) == null) {\n+        if (setting.getInterpreterGroup(note.getId()) == null) {\n           continue;\n         }\n-        if (interpreterGroupId.equals(setting.getInterpreterGroup(note.id()).getId())) {\n+        if (interpreterGroupId.equals(setting.getInterpreterGroup(note.getId()).getId())) {\n           AngularObjectRegistry angularObjectRegistry = setting\n-              .getInterpreterGroup(note.id()).getAngularObjectRegistry();\n+              .getInterpreterGroup(note.getId()).getAngularObjectRegistry();\n \n           // first trying to get local registry\n           ao = angularObjectRegistry.get(varName, noteId, paragraphId);\n@@ -852,28 +852,28 @@ private void angularObjectUpdated(NotebookSocket conn, HashSet<String> userAndRo\n         List<InterpreterSetting> settings = notebook.getInterpreterFactory()\n             .getInterpreterSettings(note.getId());\n         for (InterpreterSetting setting : settings) {\n-          if (setting.getInterpreterGroup(n.id()) == null) {\n+          if (setting.getInterpreterGroup(n.getId()) == null) {\n             continue;\n           }\n-          if (interpreterGroupId.equals(setting.getInterpreterGroup(n.id()).getId())) {\n+          if (interpreterGroupId.equals(setting.getInterpreterGroup(n.getId()).getId())) {\n             AngularObjectRegistry angularObjectRegistry = setting\n-                .getInterpreterGroup(n.id()).getAngularObjectRegistry();\n+                .getInterpreterGroup(n.getId()).getAngularObjectRegistry();\n             this.broadcastExcept(\n-                n.id(),\n+                n.getId(),\n                 new Message(OP.ANGULAR_OBJECT_UPDATE).put(\"angularObject\", ao)\n                     .put(\"interpreterGroupId\", interpreterGroupId)\n-                    .put(\"noteId\", n.id())\n+                    .put(\"noteId\", n.getId())\n                     .put(\"paragraphId\", ao.getParagraphId()),\n                 conn);\n           }\n         }\n       }\n     } else { // broadcast to all web session for the note\n       this.broadcastExcept(\n-          note.id(),\n+          note.getId(),\n           new Message(OP.ANGULAR_OBJECT_UPDATE).put(\"angularObject\", ao)\n               .put(\"interpreterGroupId\", interpreterGroupId)\n-              .put(\"noteId\", note.id())\n+              .put(\"noteId\", note.getId())\n               .put(\"paragraphId\", ao.getParagraphId()),\n           conn);\n     }\n@@ -1149,7 +1149,7 @@ private void runParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Not\n             new InterpreterResult(InterpreterResult.Code.ERROR, ex.getMessage()),\n             ex);\n         p.setStatus(Status.ERROR);\n-        broadcast(note.id(), new Message(OP.PARAGRAPH).put(\"paragraph\", p));\n+        broadcast(note.getId(), new Message(OP.PARAGRAPH).put(\"paragraph\", p));\n       }\n     }\n   }\n@@ -1309,7 +1309,7 @@ public ParagraphListenerImpl(NotebookServer notebookServer, Note note) {\n     @Override\n     public void onProgressUpdate(Job job, int progress) {\n       notebookServer.broadcast(\n-          note.id(),\n+          note.getId(),\n           new Message(OP.PROGRESS).put(\"id\", job.getId()).put(\"progress\",\n               job.progress()));\n     }\n@@ -1384,15 +1384,15 @@ private void sendAllAngularObjects(Note note, NotebookSocket conn) throws IOExce\n     }\n \n     for (InterpreterSetting intpSetting : settings) {\n-      AngularObjectRegistry registry = intpSetting.getInterpreterGroup(note.id())\n+      AngularObjectRegistry registry = intpSetting.getInterpreterGroup(note.getId())\n           .getAngularObjectRegistry();\n-      List<AngularObject> objects = registry.getAllWithGlobal(note.id());\n+      List<AngularObject> objects = registry.getAllWithGlobal(note.getId());\n       for (AngularObject object : objects) {\n         conn.send(serializeMessage(new Message(OP.ANGULAR_OBJECT_UPDATE)\n             .put(\"angularObject\", object)\n             .put(\"interpreterGroupId\",\n-                intpSetting.getInterpreterGroup(note.id()).getId())\n-            .put(\"noteId\", note.id())\n+                intpSetting.getInterpreterGroup(note.getId()).getId())\n+            .put(\"noteId\", note.getId())\n             .put(\"paragraphId\", object.getParagraphId())\n         ));\n       }\n@@ -1413,7 +1413,7 @@ public void onUpdate(String interpreterGroupId, AngularObject object) {\n \n     List<Note> notes = notebook.getAllNotes();\n     for (Note note : notes) {\n-      if (object.getNoteId() != null && !note.id().equals(object.getNoteId())) {\n+      if (object.getNoteId() != null && !note.getId().equals(object.getNoteId())) {\n         continue;\n       }\n \n@@ -1424,11 +1424,11 @@ public void onUpdate(String interpreterGroupId, AngularObject object) {\n       }\n \n       broadcast(\n-          note.id(),\n+          note.getId(),\n           new Message(OP.ANGULAR_OBJECT_UPDATE)\n               .put(\"angularObject\", object)\n               .put(\"interpreterGroupId\", interpreterGroupId)\n-              .put(\"noteId\", note.id())\n+              .put(\"noteId\", note.getId())\n               .put(\"paragraphId\", object.getParagraphId()));\n     }\n   }\n@@ -1438,15 +1438,15 @@ public void onRemove(String interpreterGroupId, String name, String noteId, Stri\n     Notebook notebook = notebook();\n     List<Note> notes = notebook.getAllNotes();\n     for (Note note : notes) {\n-      if (noteId != null && !note.id().equals(noteId)) {\n+      if (noteId != null && !note.getId().equals(noteId)) {\n         continue;\n       }\n \n       List<String> ids = notebook.getInterpreterFactory().getInterpreters(note.getId());\n       for (String id : ids) {\n         if (id.equals(interpreterGroupId)) {\n           broadcast(\n-              note.id(),\n+              note.getId(),\n               new Message(OP.ANGULAR_OBJECT_REMOVE).put(\"name\", name).put(\n                       \"noteId\", noteId).put(\"paragraphId\", paragraphId));\n         }",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "sha": "19bfba10b542c077211dc4847df0c29af58695a2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 1,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "patch": "@@ -134,7 +134,7 @@ public void testInterpreterAutoBinding() throws IOException {\n     Note note = ZeppelinServer.notebook.createNote(null);\n \n     // check interpreter is binded\n-    GetMethod get = httpGet(\"/notebook/interpreter/bind/\" + note.id());\n+    GetMethod get = httpGet(\"/notebook/interpreter/bind/\" + note.getId());\n     assertThat(get, isAllowed());\n     get.addRequestHeader(\"Origin\", \"http://localhost\");\n     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>() {",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "sha": "c767eb05786e9ca334897e7e9e1d7eacde6003d3",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 0,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.commons.httpclient.methods.PostMethod;\n import org.apache.commons.httpclient.methods.PutMethod;\n import org.apache.zeppelin.notebook.Note;\n import org.apache.zeppelin.notebook.NotebookAuthorization;\n@@ -144,6 +145,32 @@ public void testGetNoteParagraphJobStatus() throws IOException {\n     ZeppelinServer.notebook.removeNote(note1.getId(), null);\n \n   }\n+\n+  @Test\n+  public void testCloneNotebook() throws IOException {\n+    Note note1 = ZeppelinServer.notebook.createNote(null);\n+    PostMethod post = httpPost(\"/notebook/\" + note1.getId(), \"\");\n+    LOG.info(\"testCloneNotebook response\\n\" + post.getResponseBodyAsString());\n+    assertThat(post, isCreated());\n+    Map<String, Object> resp = gson.fromJson(post.getResponseBodyAsString(), new TypeToken<Map<String, Object>>() {\n+    }.getType());\n+    String clonedNotebookId = (String) resp.get(\"body\");\n+    post.releaseConnection();\n+\n+    GetMethod get = httpGet(\"/notebook/\" + clonedNotebookId);\n+    assertThat(get, isAllowed());\n+    Map<String, Object> resp2 = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>() {\n+    }.getType());\n+    Map<String, Object> resp2Body = (Map<String, Object>) resp2.get(\"body\");\n+\n+    assertEquals((String)resp2Body.get(\"name\"), \"Note \" + clonedNotebookId);\n+    get.releaseConnection();\n+\n+    //cleanup\n+    ZeppelinServer.notebook.removeNote(note1.getId(), null);\n+    ZeppelinServer.notebook.removeNote(clonedNotebookId, null);\n+\n+  }\n }\n \n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "sha": "d7f55f5474410262567f64aa35ac69cea0a6a635",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 7,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java",
                "patch": "@@ -79,7 +79,7 @@ public void basicRDDTransformationAndActionTest() throws IOException {\n         waitForFinish(p);\n         assertEquals(Status.FINISHED, p.getStatus());\n         assertEquals(\"55\", p.getResult().message());\n-        ZeppelinServer.notebook.removeNote(note.id(), null);\n+        ZeppelinServer.notebook.removeNote(note.getId(), null);\n     }\n \n     @Test\n@@ -91,7 +91,7 @@ public void sparkRTest() throws IOException {\n       if (isSparkR() && sparkVersion >= 14) {   // sparkr supported from 1.4.0\n         // restart spark interpreter\n         List<InterpreterSetting> settings =\n-          ZeppelinServer.notebook.getBindedInterpreterSettings(note.id());\n+          ZeppelinServer.notebook.getBindedInterpreterSettings(note.getId());\n \n         for (InterpreterSetting setting : settings) {\n           if (setting.getName().equals(\"spark\")) {\n@@ -118,7 +118,7 @@ public void sparkRTest() throws IOException {\n         assertEquals(Status.FINISHED, p.getStatus());\n         assertEquals(\"[1] 3\", p.getResult().message());\n       }\n-      ZeppelinServer.notebook.removeNote(note.id(), null);\n+      ZeppelinServer.notebook.removeNote(note.getId(), null);\n     }\n \n     @Test\n@@ -141,7 +141,7 @@ public void pySparkTest() throws IOException {\n             assertEquals(Status.FINISHED, p.getStatus());\n             assertEquals(\"55\\n\", p.getResult().message());\n         }\n-        ZeppelinServer.notebook.removeNote(note.id(), null);\n+        ZeppelinServer.notebook.removeNote(note.getId(), null);\n     }\n \n     @Test\n@@ -172,7 +172,7 @@ public void pySparkAutoConvertOptionTest() throws IOException {\n             assertEquals(Status.FINISHED, p.getStatus());\n             assertEquals(\"10\\n\", p.getResult().message());\n         }\n-        ZeppelinServer.notebook.removeNote(note.id(), null);\n+        ZeppelinServer.notebook.removeNote(note.getId(), null);\n     }\n \n     @Test\n@@ -204,7 +204,7 @@ public void zRunTest() throws IOException {\n         assertEquals(Status.FINISHED, p2.getStatus());\n         assertEquals(\"10\", p2.getResult().message());\n \n-        ZeppelinServer.notebook.removeNote(note.id(), null);\n+        ZeppelinServer.notebook.removeNote(note.getId(), null);\n     }\n \n     @Test\n@@ -216,7 +216,7 @@ public void pySparkDepLoaderTest() throws IOException {\n         if (isPyspark() && sparkVersionNumber >= 14) {\n             // restart spark interpreter\n             List<InterpreterSetting> settings =\n-                    ZeppelinServer.notebook.getBindedInterpreterSettings(note.id());\n+                    ZeppelinServer.notebook.getBindedInterpreterSettings(note.getId());\n \n             for (InterpreterSetting setting : settings) {\n                 if (setting.getName().equals(\"spark\")) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java",
                "sha": "1250f9ce58b36c73e305f3a19210d4ef045f6661",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 6,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -131,10 +131,6 @@ void putDefaultReplName() {\n     lastReplName.set(defaultInterpreterName);\n   }\n \n-  public String id() {\n-    return id;\n-  }\n-\n   public String getId() {\n     return id;\n   }\n@@ -292,7 +288,7 @@ private String getInterpreterName(String replName) {\n    */\n   public Paragraph removeParagraph(String paragraphId) {\n     removeAllAngularObjectInParagraph(paragraphId);\n-    ResourcePoolUtils.removeResourcesBelongsToParagraph(id(), paragraphId);\n+    ResourcePoolUtils.removeResourcesBelongsToParagraph(getId(), paragraphId);\n     synchronized (paragraphs) {\n       Iterator<Paragraph> i = paragraphs.iterator();\n       while (i.hasNext()) {\n@@ -609,7 +605,7 @@ public void persist(int maxDelaySec, AuthenticationInfo subject) {\n   }\n \n   void unpersist(AuthenticationInfo subject) throws IOException {\n-    repo.remove(id(), subject);\n+    repo.remove(getId(), subject);\n   }\n \n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "2b895242f004c6e23230b27a859d780dda6069d2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInfo.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInfo.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInfo.java",
                "patch": "@@ -36,7 +36,7 @@ public NoteInfo(String id, String name, Map<String, Object> config) {\n   }\n \n   public NoteInfo(Note note) {\n-    id = note.id();\n+    id = note.getId();\n     name = note.getName();\n     config = note.getConfig();\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInfo.java",
                "sha": "9783c7609d59b96ef71b8943b54cc5f049e95e62",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 11,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -151,10 +151,10 @@ public Note createNote(List<String> interpreterIds, AuthenticationInfo subject)\n     Note note =\n         new Note(notebookRepo, replFactory, jobListenerFactory, notebookIndex, credentials, this);\n     synchronized (notes) {\n-      notes.put(note.id(), note);\n+      notes.put(note.getId(), note);\n     }\n     if (interpreterIds != null) {\n-      bindInterpretersToNote(note.id(), interpreterIds);\n+      bindInterpretersToNote(note.getId(), interpreterIds);\n       note.putDefaultReplName();\n     }\n \n@@ -239,10 +239,12 @@ public Note cloneNote(String sourceNoteID, String newNoteName, AuthenticationInf\n     Note newNote = createNote(subject);\n     if (newNoteName != null) {\n       newNote.setName(newNoteName);\n+    } else {\n+      newNote.setName(\"Note \" + newNote.getId());\n     }\n     // Copy the interpreter bindings\n-    List<String> boundInterpreterSettingsIds = getBindedInterpreterSettingsIds(sourceNote.id());\n-    bindInterpretersToNote(newNote.id(), boundInterpreterSettingsIds);\n+    List<String> boundInterpreterSettingsIds = getBindedInterpreterSettingsIds(sourceNote.getId());\n+    bindInterpretersToNote(newNote.getId(), boundInterpreterSettingsIds);\n \n     List<Paragraph> paragraphs = sourceNote.getParagraphs();\n     for (Paragraph p : paragraphs) {\n@@ -419,15 +421,15 @@ private Note loadNoteFromRepo(String id, AuthenticationInfo subject) {\n     note.setNoteEventListener(this);\n \n     synchronized (notes) {\n-      notes.put(note.id(), note);\n-      refreshCron(note.id());\n+      notes.put(note.getId(), note);\n+      refreshCron(note.getId());\n     }\n \n     for (String name : angularObjectSnapshot.keySet()) {\n       SnapshotAngularObject snapshot = angularObjectSnapshot.get(name);\n       List<InterpreterSetting> settings = replFactory.get();\n       for (InterpreterSetting setting : settings) {\n-        InterpreterGroup intpGroup = setting.getInterpreterGroup(note.id());\n+        InterpreterGroup intpGroup = setting.getInterpreterGroup(note.getId());\n         if (intpGroup.getId().equals(snapshot.getIntpGroupId())) {\n           AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();\n           String noteId = snapshot.getAngularObject().getNoteId();\n@@ -508,11 +510,11 @@ Date getLastUpdate() {\n       Collections.sort(noteList, new Comparator<Note>() {\n         @Override\n         public int compare(Note note1, Note note2) {\n-          String name1 = note1.id();\n+          String name1 = note1.getId();\n           if (note1.getName() != null) {\n             name1 = note1.getName();\n           }\n-          String name2 = note2.id();\n+          String name2 = note2.getId();\n           if (note2.getName() != null) {\n             name2 = note2.getName();\n           }\n@@ -593,14 +595,14 @@ private long getUnixTimeLastRunParagraph(Paragraph paragraph) {\n       Map<String, Object> info = new HashMap<>();\n \n       // set notebook ID\n-      info.put(\"notebookId\", note.id());\n+      info.put(\"notebookId\", note.getId());\n \n       // set notebook Name\n       String notebookName = note.getName();\n       if (notebookName != null && !notebookName.equals(\"\")) {\n         info.put(\"notebookName\", note.getName());\n       } else {\n-        info.put(\"notebookName\", \"Note \" + note.id());\n+        info.put(\"notebookName\", \"Note \" + note.getId());\n       }\n \n       // set notebook type ( cron or normal )",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "9acb156a3a3656c3a8e2965b92d169dded8033cc",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 4,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "patch": "@@ -451,13 +451,13 @@ private InterpreterContext getInterpreterContext(InterpreterOutput output) {\n \n     if (!factory.getInterpreterSettings(note.getId()).isEmpty()) {\n       InterpreterSetting intpGroup = factory.getInterpreterSettings(note.getId()).get(0);\n-      registry = intpGroup.getInterpreterGroup(note.id()).getAngularObjectRegistry();\n-      resourcePool = intpGroup.getInterpreterGroup(note.id()).getResourcePool();\n+      registry = intpGroup.getInterpreterGroup(note.getId()).getAngularObjectRegistry();\n+      resourcePool = intpGroup.getInterpreterGroup(note.getId()).getResourcePool();\n     }\n \n     List<InterpreterContextRunner> runners = new LinkedList<InterpreterContextRunner>();\n     for (Paragraph p : note.getParagraphs()) {\n-      runners.add(new ParagraphRunner(note, note.id(), p.getId()));\n+      runners.add(new ParagraphRunner(note, note.getId(), p.getId()));\n     }\n \n     final Paragraph self = this;\n@@ -470,7 +470,7 @@ private InterpreterContext getInterpreterContext(InterpreterOutput output) {\n     }\n \n     InterpreterContext interpreterContext = new InterpreterContext(\n-            note.id(),\n+            note.getId(),\n             getId(),\n             this.getTitle(),\n             this.getText(),",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "sha": "60f31616c55c2a569a067f046e68dc8ec4496737",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java",
                "patch": "@@ -210,7 +210,7 @@ public void save(Note note, AuthenticationInfo subject) throws IOException {\n     gsonBuilder.setPrettyPrinting();\n     Gson gson = gsonBuilder.create();\n     String json = gson.toJson(note);\n-    String key = user + \"/\" + \"notebook\" + \"/\" + note.id() + \"/\" + \"note.json\";\n+    String key = user + \"/\" + \"notebook\" + \"/\" + note.getId() + \"/\" + \"note.json\";\n \n     File file = File.createTempFile(\"note\", \"json\");\n     try {",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java",
                "sha": "0163fc4b859b7cc47ee0d0ed0c263adb8f2d2050",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java",
                "patch": "@@ -226,7 +226,7 @@ public synchronized void save(Note note, AuthenticationInfo subject) throws IOEx\n \n     FileObject rootDir = getRootDir();\n \n-    FileObject noteDir = rootDir.resolveFile(note.id(), NameScope.CHILD);\n+    FileObject noteDir = rootDir.resolveFile(note.getId(), NameScope.CHILD);\n \n     if (!noteDir.exists()) {\n       noteDir.createFolder();",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java",
                "sha": "213fdf87e95991301a73628e1ad313fc5d60f3c4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java",
                "patch": "@@ -176,7 +176,7 @@ public void save(Note note, AuthenticationInfo subject) throws IOException {\n     }\n     String notebook = GSON.toJson(note);\n     restApiClient.asyncPut(notebook);\n-    LOG.info(\"ZeppelinHub REST API saving note {} \", note.id()); \n+    LOG.info(\"ZeppelinHub REST API saving note {} \", note.getId()); \n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java",
                "sha": "d1864c5c7dcd4ffc7a9b9e584f6ae9face87f203",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 6,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "patch": "@@ -176,7 +176,7 @@ public void testUnloadOnParagraphRemove() throws IOException {\n         new String[][]{});\n \n     Note note1 = notebook.createNote(null);\n-    factory.setInterpreters(note1.id(), factory.getDefaultInterpreterSettingList());\n+    factory.setInterpreters(note1.getId(), factory.getDefaultInterpreterSettingList());\n \n     Paragraph p1 = note1.addParagraph();\n \n@@ -214,7 +214,7 @@ public void testUnloadOnInterpreterUnbind() throws IOException {\n         new String[][]{});\n \n     Note note1 = notebook.createNote(null);\n-    notebook.bindInterpretersToNote(note1.id(), factory.getDefaultInterpreterSettingList());\n+    notebook.bindInterpretersToNote(note1.getId(), factory.getDefaultInterpreterSettingList());\n \n     Paragraph p1 = note1.addParagraph();\n \n@@ -231,7 +231,7 @@ public void testUnloadOnInterpreterUnbind() throws IOException {\n     }\n \n     // when unbind interpreter\n-    notebook.bindInterpretersToNote(note1.id(), new LinkedList<String>());\n+    notebook.bindInterpretersToNote(note1.getId(), new LinkedList<String>());\n \n     // then\n     assertEquals(ApplicationState.Status.UNLOADED, app.getStatus());\n@@ -255,7 +255,7 @@ public void testInterpreterUnbindOfNullReplParagraph() throws IOException {\n \n     // Unbind all interpreter from note\n     // NullPointerException shouldn't occur here\n-    notebook.bindInterpretersToNote(note1.id(), new LinkedList<String>());\n+    notebook.bindInterpretersToNote(note1.getId(), new LinkedList<String>());\n \n     // remove note\n     notebook.removeNote(note1.getId(), null);\n@@ -273,9 +273,9 @@ public void testUnloadOnInterpreterRestart() throws IOException {\n         new String[][]{});\n \n     Note note1 = notebook.createNote(null);\n-    notebook.bindInterpretersToNote(note1.id(), factory.getDefaultInterpreterSettingList());\n+    notebook.bindInterpretersToNote(note1.getId(), factory.getDefaultInterpreterSettingList());\n     String mock1IntpSettingId = null;\n-    for (InterpreterSetting setting : notebook.getBindedInterpreterSettings(note1.id())) {\n+    for (InterpreterSetting setting : notebook.getBindedInterpreterSettings(note1.getId())) {\n       if (setting.getName().equals(\"mock1\")) {\n         mock1IntpSettingId = setting.getId();\n         break;",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "sha": "b32b3d8feb25f8775971fd297977105e39460259",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 36,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "patch": "@@ -171,7 +171,7 @@ public void testReloadAllNotes() throws IOException {\n     notebook.reloadAllNotes(null);\n     notes = notebook.getAllNotes();\n     assertEquals(notes.size(), 2);\n-    assertEquals(notes.get(1).id(), copiedNote.id());\n+    assertEquals(notes.get(1).getId(), copiedNote.getId());\n     assertEquals(notes.get(1).getName(), copiedNote.getName());\n     assertEquals(notes.get(1).getParagraphs(), copiedNote.getParagraphs());\n \n@@ -283,13 +283,13 @@ public void testSchedule() throws InterruptedException, IOException{\n     config.put(\"enabled\", true);\n     config.put(\"cron\", \"* * * * * ?\");\n     note.setConfig(config);\n-    notebook.refreshCron(note.id());\n+    notebook.refreshCron(note.getId());\n     Thread.sleep(1*1000);\n \n     // remove cron scheduler.\n     config.put(\"cron\", null);\n     note.setConfig(config);\n-    notebook.refreshCron(note.id());\n+    notebook.refreshCron(note.getId());\n     Thread.sleep(1000);\n     dateFinished = p.getDateFinished();\n     assertNotNull(dateFinished);\n@@ -318,7 +318,7 @@ public void testAutoRestartInterpreterAfterSchedule() throws InterruptedExceptio\n     config.put(\"cron\", \"1/3 * * * * ?\");\n     config.put(\"releaseresource\", true);\n     note.setConfig(config);\n-    notebook.refreshCron(note.id());\n+    notebook.refreshCron(note.getId());\n \n \n     MockInterpreter1 mock1 = ((MockInterpreter1) (((ClassloaderInterpreter)\n@@ -342,7 +342,7 @@ public void testAutoRestartInterpreterAfterSchedule() throws InterruptedExceptio\n     // remove cron scheduler.\n     config.put(\"cron\", null);\n     note.setConfig(config);\n-    notebook.refreshCron(note.id());\n+    notebook.refreshCron(note.getId());\n \n     // make sure all paragraph has been executed\n     assertNotNull(p.getDateFinished());\n@@ -398,6 +398,16 @@ public void testCloneNote() throws IOException, CloneNotSupportedException,\n     assertEquals(cp.getResult().message(), p.getResult().message());\n   }\n \n+  @Test\n+  public void testCloneNoteWithNoName() throws IOException, CloneNotSupportedException,\n+      InterruptedException {\n+    Note note = notebook.createNote(null);\n+    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+\n+    Note cloneNote = notebook.cloneNote(note.getId(), null, null);\n+    assertEquals(cloneNote.getName(), \"Note \" + cloneNote.getId());\n+  }\n+\n   @Test\n   public void testCloneNoteWithExceptionResult() throws IOException, CloneNotSupportedException,\n       InterruptedException {\n@@ -445,7 +455,7 @@ public void testResourceRemovealOnParagraphNoteRemove() throws IOException {\n     assertEquals(1, ResourcePoolUtils.getAllResources().size());\n \n     // remove note\n-    notebook.removeNote(note.id(), null);\n+    notebook.removeNote(note.getId(), null);\n     assertEquals(0, ResourcePoolUtils.getAllResources().size());\n   }\n \n@@ -463,20 +473,20 @@ public void testAngularObjectRemovalOnNotebookRemove() throws InterruptedExcepti\n     Paragraph p1 = note.addParagraph();\n \n     // add paragraph scope object\n-    registry.add(\"o1\", \"object1\", note.id(), p1.getId());\n+    registry.add(\"o1\", \"object1\", note.getId(), p1.getId());\n \n     // add notebook scope object\n-    registry.add(\"o2\", \"object2\", note.id(), null);\n+    registry.add(\"o2\", \"object2\", note.getId(), null);\n \n     // add global scope object\n     registry.add(\"o3\", \"object3\", null, null);\n \n     // remove notebook\n-    notebook.removeNote(note.id(), null);\n+    notebook.removeNote(note.getId(), null);\n \n     // notebook scope or paragraph scope object should be removed\n-    assertNull(registry.get(\"o1\", note.id(), null));\n-    assertNull(registry.get(\"o2\", note.id(), p1.getId()));\n+    assertNull(registry.get(\"o1\", note.getId(), null));\n+    assertNull(registry.get(\"o2\", note.getId(), p1.getId()));\n \n     // global object sould be remained\n     assertNotNull(registry.get(\"o3\", null, null));\n@@ -496,10 +506,10 @@ public void testAngularObjectRemovalOnParagraphRemove() throws InterruptedExcept\n     Paragraph p1 = note.addParagraph();\n \n     // add paragraph scope object\n-    registry.add(\"o1\", \"object1\", note.id(), p1.getId());\n+    registry.add(\"o1\", \"object1\", note.getId(), p1.getId());\n \n     // add notebook scope object\n-    registry.add(\"o2\", \"object2\", note.id(), null);\n+    registry.add(\"o2\", \"object2\", note.getId(), null);\n \n     // add global scope object\n     registry.add(\"o3\", \"object3\", null, null);\n@@ -508,10 +518,10 @@ public void testAngularObjectRemovalOnParagraphRemove() throws InterruptedExcept\n     note.removeParagraph(p1.getId());\n \n     // paragraph scope should be removed\n-    assertNull(registry.get(\"o1\", note.id(), null));\n+    assertNull(registry.get(\"o1\", note.getId(), null));\n \n     // notebook scope and global object sould be remained\n-    assertNotNull(registry.get(\"o2\", note.id(), null));\n+    assertNotNull(registry.get(\"o2\", note.getId(), null));\n     assertNotNull(registry.get(\"o3\", null, null));\n   }\n \n@@ -527,7 +537,7 @@ public void testAngularObjectRemovalOnInterpreterRestart() throws InterruptedExc\n         .getAngularObjectRegistry();\n \n     // add local scope object\n-    registry.add(\"o1\", \"object1\", note.id(), null);\n+    registry.add(\"o1\", \"object1\", note.getId(), null);\n     // add global scope object\n     registry.add(\"o2\", \"object2\", null, null);\n \n@@ -537,9 +547,9 @@ public void testAngularObjectRemovalOnInterpreterRestart() throws InterruptedExc\n     .getAngularObjectRegistry();\n \n     // local and global scope object should be removed\n-    assertNull(registry.get(\"o1\", note.id(), null));\n+    assertNull(registry.get(\"o1\", note.getId(), null));\n     assertNull(registry.get(\"o2\", null, null));\n-    notebook.removeNote(note.id(), null);\n+    notebook.removeNote(note.getId(), null);\n   }\n \n   @Test\n@@ -548,43 +558,43 @@ public void testPermissions() throws IOException {\n     Note note = notebook.createNote(null);\n     NotebookAuthorization notebookAuthorization = notebook.getNotebookAuthorization();\n     // empty owners, readers and writers means note is public\n-    assertEquals(notebookAuthorization.isOwner(note.id(),\n+    assertEquals(notebookAuthorization.isOwner(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user2\"))), true);\n-    assertEquals(notebookAuthorization.isReader(note.id(),\n+    assertEquals(notebookAuthorization.isReader(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user2\"))), true);\n-    assertEquals(notebookAuthorization.isWriter(note.id(),\n+    assertEquals(notebookAuthorization.isWriter(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user2\"))), true);\n \n-    notebookAuthorization.setOwners(note.id(),\n+    notebookAuthorization.setOwners(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user1\")));\n-    notebookAuthorization.setReaders(note.id(),\n+    notebookAuthorization.setReaders(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user1\", \"user2\")));\n-    notebookAuthorization.setWriters(note.id(),\n+    notebookAuthorization.setWriters(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user1\")));\n \n-    assertEquals(notebookAuthorization.isOwner(note.id(),\n+    assertEquals(notebookAuthorization.isOwner(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user2\"))), false);\n-    assertEquals(notebookAuthorization.isOwner(note.id(),\n+    assertEquals(notebookAuthorization.isOwner(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user1\"))), true);\n \n-    assertEquals(notebookAuthorization.isReader(note.id(),\n+    assertEquals(notebookAuthorization.isReader(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user3\"))), false);\n-    assertEquals(notebookAuthorization.isReader(note.id(),\n+    assertEquals(notebookAuthorization.isReader(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user2\"))), true);\n \n-    assertEquals(notebookAuthorization.isWriter(note.id(),\n+    assertEquals(notebookAuthorization.isWriter(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user2\"))), false);\n-    assertEquals(notebookAuthorization.isWriter(note.id(),\n+    assertEquals(notebookAuthorization.isWriter(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user1\"))), true);\n \n     // Test clearing of permssions\n-    notebookAuthorization.setReaders(note.id(), Sets.<String>newHashSet());\n-    assertEquals(notebookAuthorization.isReader(note.id(),\n+    notebookAuthorization.setReaders(note.getId(), Sets.<String>newHashSet());\n+    assertEquals(notebookAuthorization.isReader(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user2\"))), true);\n-    assertEquals(notebookAuthorization.isReader(note.id(),\n+    assertEquals(notebookAuthorization.isReader(note.getId(),\n             new HashSet<String>(Arrays.asList(\"user3\"))), true);\n \n-    notebook.removeNote(note.id(), null);\n+    notebook.removeNote(note.getId(), null);\n   }\n \n   @Test\n@@ -777,8 +787,8 @@ public void onParagraphStatusChange(Paragraph p, Status status) {\n     note1.removeParagraph(p1.getId());\n     assertEquals(1, onParagraphRemove.get());\n \n-    List<String> settings = notebook.getBindedInterpreterSettingsIds(note1.id());\n-    notebook.bindInterpretersToNote(note1.id(), new LinkedList<String>());\n+    List<String> settings = notebook.getBindedInterpreterSettingsIds(note1.getId());\n+    notebook.bindInterpretersToNote(note1.getId(), new LinkedList<String>());\n     assertEquals(settings.size(), unbindInterpreter.get());\n \n     notebook.removeNote(note1.getId(), null);",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "sha": "648062eda2eb999828978b182457197a1c456b16",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepoTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepoTest.java?ref=83469be5bac23dbde81f511afb5bb014fce50489",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepoTest.java",
                "patch": "@@ -132,7 +132,7 @@ public void testGetAllNotes() throws IOException {\n   public void testGetNote() throws IOException {\n     Note notebook = repo.get(\"AAAAA\", null);\n     assertThat(notebook).isNotNull();\n-    assertThat(notebook.id()).isEqualTo(\"2A94M5J1Z\");\n+    assertThat(notebook.getId()).isEqualTo(\"2A94M5J1Z\");\n   }\n   \n   @Test",
                "raw_url": "https://github.com/apache/zeppelin/raw/83469be5bac23dbde81f511afb5bb014fce50489/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepoTest.java",
                "sha": "720dd702faafc12642d6b4a1bf91df47f49c5ad4",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1313] NullPointerException when using Clone notebook REST API\n\n### What is this PR for?\nThis fixes when the input json is empty for the clone notebook REST API and for this case the default name will be populated.\n\n### What type of PR is it?\nBug Fix\n\n### Todos\nNA\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-1313\n\n### How should this be tested?\nWhen the input json is empty for the clone notebook REST API, the response should be 201 with the default name populated.\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Kavin <kavin.kumar@imaginea.com>\nAuthor: Kavin Kumar <junokavin@gmail.com>\n\nCloses #1348 from kavinkumarks/zeppelin-1313-fix-NPE-clone-notebook and squashes the following commits:\n\n941e13b [Kavin] Removed note.id() and replaced the references with note.getId()\n11a2903 [Kavin Kumar] Fixed NPE when the input json is empty for clone notebook REST API and set the default name for the case.Added test cases too.",
        "parent": "https://github.com/apache/zeppelin/commit/f1a2471302ed3a6d89f70e3b85c9c20eeddf2056",
        "patched_files": [
            "ZeppelinHubRepo.java",
            "HeliumApplicationFactory.java",
            "S3NotebookRepo.java",
            "NotebookServer.java",
            "Note.java",
            "NoteInfo.java",
            "NotebookRestApi.java",
            "InterpreterRestApi.java",
            "VFSNotebookRepo.java",
            "Notebook.java",
            "Paragraph.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "ZeppelinSparkClusterTest.java",
            "HeliumApplicationFactoryTest.java",
            "NotebookServerTest.java",
            "ZeppelinHubRepoTest.java",
            "NoteTest.java",
            "ParagraphTest.java",
            "InterpreterRestApiTest.java",
            "VFSNotebookRepoTest.java",
            "NotebookTest.java",
            "NotebookRestApiTest.java"
        ]
    },
    "zeppelin_85ee2dd": {
        "bug_id": "zeppelin_85ee2dd",
        "commit": "https://github.com/apache/zeppelin/commit/85ee2ddbcb7d3a4e5839c5bad88870a3d844530c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/85ee2ddbcb7d3a4e5839c5bad88870a3d844530c/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java?ref=85ee2ddbcb7d3a4e5839c5bad88870a3d844530c",
                "deletions": 2,
                "filename": "python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "patch": "@@ -161,8 +161,8 @@ public int getProgress(InterpreterContext context) {\n \n   @Override\n   public Scheduler getScheduler() {\n-    return SchedulerFactory.singleton().createOrGetParallelScheduler(\n-        PythonInterpreter.class.getName() + this.hashCode(), 10);\n+    return SchedulerFactory.singleton().createOrGetFIFOScheduler(\n+        PythonInterpreter.class.getName() + this.hashCode());\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/zeppelin/raw/85ee2ddbcb7d3a4e5839c5bad88870a3d844530c/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "sha": "b1da98192d4de8808ef4cfc39c2b448f7db301f8",
                "status": "modified"
            }
        ],
        "message": "Python: fix for 'run all' paragraphs\n\n### What is this PR for?\nSwitch to FIFO scheduler as in current implementation `.interpret()` is not thread-safe and so in parallel one 'Run All' fails some paragraphs with NPE in logs\n\n### What type of PR is it?\nBug Fix | Improvement\n\n### How should this be tested?\n'Run All' passes without NPE in logs i.e on this [Zeppelin notebook for python](https://www.zeppelinhub.com/viewer/notebooks/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2J6ei9pbmN1YmF0b3ItemVwcGVsaW4vMTkyZjU3YjZjMGZkMjc4NzgwZDI3NDAzMGY1YmJlOTZlZThkNzdiYi9ub3RlYm9vay8yQlFBMzVDSlovbm90ZS5qc29u)\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Alexander Bezzubov <bzz@apache.org>\n\nCloses #1033 from bzz/fix/python-run-all and squashes the following commits:\n\n72e9d62 [Alexander Bezzubov] Python: switch to FIFO scheduler",
        "parent": "https://github.com/apache/zeppelin/commit/70d22d3d0a19b0d8863fbce4089913269a288a1d",
        "patched_files": [
            "PythonInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "PythonInterpreterTest.java"
        ]
    },
    "zeppelin_8744032": {
        "bug_id": "zeppelin_8744032",
        "commit": "https://github.com/apache/zeppelin/commit/8744032563718dfe9aac0c9b968254fcdca7b004",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/8744032563718dfe9aac0c9b968254fcdca7b004/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java?ref=8744032563718dfe9aac0c9b968254fcdca7b004",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "patch": "@@ -887,14 +887,18 @@ public void removeRepository(String id) throws IOException {\n     saveToFile();\n   }\n \n-  public void removeNoteInterpreterSettingBinding(String user, String noteId) {\n+  public void removeNoteInterpreterSettingBinding(String user, String noteId) throws IOException {\n     synchronized (interpreterSettings) {\n       List<String> settingIds = (interpreterBindings.containsKey(noteId) ?\n           interpreterBindings.remove(noteId) :\n           Collections.<String>emptyList());\n       for (String settingId : settingIds) {\n-        this.removeInterpretersForNote(get(settingId), user, noteId);\n+        InterpreterSetting setting = get(settingId);\n+        if (setting != null) {\n+          this.removeInterpretersForNote(setting, user, noteId);\n+        }\n       }\n+      saveToFile();\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/8744032563718dfe9aac0c9b968254fcdca7b004/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java",
                "sha": "1b05a7608acb8064972ffd3cdb2dac0f7fa6e7c3",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/8744032563718dfe9aac0c9b968254fcdca7b004/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=8744032563718dfe9aac0c9b968254fcdca7b004",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -338,7 +338,11 @@ public void removeNote(String id, AuthenticationInfo subject) {\n       note = notes.remove(id);\n       folders.removeNote(note);\n     }\n-    interpreterSettingManager.removeNoteInterpreterSettingBinding(subject.getUser(), id);\n+    try {\n+      interpreterSettingManager.removeNoteInterpreterSettingBinding(subject.getUser(), id);\n+    } catch (IOException e) {\n+      logger.error(e.toString(), e);\n+    }\n     noteSearchService.deleteIndexDocs(note);\n     notebookAuthorization.removeNote(id);\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/8744032563718dfe9aac0c9b968254fcdca7b004/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "720a3bea8215a44a7edd68b03bef6cbc5e8d92b2",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-2431] Corrected deletion of notes by incorrect interpreter.json\n\n## What is this PR for?\n\nWe sometimes can not delete a note, or we will be accompanied by an NPE for deleting a note.\n\nThis problem occurs when:\nWhen interpreter.json 's note binding is wrong, or there is a problem.\nIf you are configuring an interpreter that is not through zeppelin's user interface.\nAs a result, it happens when synchronization of notes deletion and setting retention is not normal.\nTherefore, we should add handling for note deletion and exception handling for nonexistent interpreter bindings.\nIt reduces the synchronization problem of interpreter.json.\n\n### What type of PR is it?\nBug Fix\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-2431\n\n### How should this be tested?\n1. zeppelin stop\n2. edit con/interpreter.json and `interpreterBindings`\n  fix any notes or incorrect information.\n  for example\n  ```\n    },\n  \"interpreterBindings\": {\n    \"2CFS9YSM5\": [\n      \"2CFRR1D3TINVALIDINVALIDINVALID\", <-- edit\n      \"2CFZ1JKUR\",\n      \"2CEAJK1VW\",\n      \"2CGSESWBH\",\n      \"2CERNPGW5\",\n   }\n  ```\n3. zeppelin start\n4. You can try remove invalid interpreter bind note on web. (on example = `2CFS9YSM5`)\n\nresult :\nIf the modifications to this PR are not reflected,\nIt will not be deleted or an error will appear on the server.\nAlso, the interpreterBindings information in interpreter.json does not respond to delete events.\n\n### Screenshots (if appropriate)\nproblem animation\n![cantremove](https://cloud.githubusercontent.com/assets/10525473/25327785/7031f960-2910-11e7-88c7-d322da21290c.gif)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: CloverHearts <cloverheartsdev@gmail.com>\n\nCloses #2278 from cloverhearts/fix/invalidsyncInterpreterJson and squashes the following commits:\n\n35da524c [CloverHearts] notebook interpreter binding synchronization process",
        "parent": "https://github.com/apache/zeppelin/commit/c8cd1cf5065605269cf83ebc8fe7b265337e34a2",
        "patched_files": [
            "Notebook.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookTest.java"
        ]
    },
    "zeppelin_88c5c3c": {
        "bug_id": "zeppelin_88c5c3c",
        "commit": "https://github.com/apache/zeppelin/commit/88c5c3ccd9e346d48637d3c63c8dff5ba53c8d8e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/88c5c3ccd9e346d48637d3c63c8dff5ba53c8d8e/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java?ref=88c5c3ccd9e346d48637d3c63c8dff5ba53c8d8e",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java",
                "patch": "@@ -164,9 +164,10 @@ private ProxyConfig getProxyConfig(boolean isSecure) {\n             System.getenv(\"HTTPS_PROXY\") : System.getenv(\"https_proxy\");\n \n     try {\n-      if (isSecure)\n+      if (isSecure && StringUtils.isNotBlank(httpsProxy))\n         proxies.add(generateProxy(\"secure\", new URI(httpsProxy)));\n-      else proxies.add(generateProxy(\"insecure\", new URI(httpProxy)));\n+      else if (!isSecure && StringUtils.isNotBlank(httpProxy))\n+        proxies.add(generateProxy(\"insecure\", new URI(httpProxy)));\n     } catch (Exception ex) {\n       logger.error(ex.getMessage(), ex);\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/88c5c3ccd9e346d48637d3c63c8dff5ba53c8d8e/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java",
                "sha": "52e4f6d204e774ce12bac611cdf6617da2d0fd60",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/88c5c3ccd9e346d48637d3c63c8dff5ba53c8d8e/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumOnlineRegistry.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumOnlineRegistry.java?ref=88c5c3ccd9e346d48637d3c63c8dff5ba53c8d8e",
                "deletions": 4,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumOnlineRegistry.java",
                "patch": "@@ -31,7 +31,6 @@\n \n import java.io.*;\n import java.net.URI;\n-import java.net.URISyntaxException;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n@@ -119,17 +118,18 @@ private HttpHost getProxy(String uri) {\n \n     try {\n       String scheme = new URI(uri).getScheme();\n-      if (scheme.toLowerCase().startsWith(\"https\")) {\n+      if (scheme.toLowerCase().startsWith(\"https\") && StringUtils.isNotBlank(httpsProxy)) {\n         URI httpsProxyUri = new URI(httpsProxy);\n         return new HttpHost(httpsProxyUri.getHost(),\n                 httpsProxyUri.getPort(), httpsProxyUri.getScheme());\n       }\n-      else {\n+      else if (scheme.toLowerCase().startsWith(\"http\") && StringUtils.isNotBlank(httpProxy)){\n         URI httpProxyUri = new URI(httpProxy);\n         return new HttpHost(httpProxyUri.getHost(),\n                 httpProxyUri.getPort(), httpProxyUri.getScheme());\n       }\n-    } catch (URISyntaxException ex) {\n+      else return null;\n+    } catch (Exception ex) {\n       logger.error(ex.getMessage(), ex);\n       return null;\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/88c5c3ccd9e346d48637d3c63c8dff5ba53c8d8e/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumOnlineRegistry.java",
                "sha": "1ea19827b060530d3f271add18bb1d0b7f93be88",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-2152] Fix for npe in Helium loading when no proxies are set\n\n### What is this PR for?\nEmergency fix for npe when calling Helium and with no proxies env variables set.\n\n### What type of PR is it?\nBug Fix\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-2152\n\n### How should this be tested?\n* clone new zeppelin repository\n* unset http_proxy/https_proxy env variables (if set)\n* build ` mvn clean package -DskipTests;`\n* start zeppelin instance\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Nelson Costa <nelson.costa85@gmail.com>\n\nCloses #2380 from necosta/zeppelin2152-patch and squashes the following commits:\n\ncb25cd7 [Nelson Costa] [ZEPPELIN-2152] Fix for npe in Helium loading when no proxies are set",
        "parent": "https://github.com/apache/zeppelin/commit/87480056a0b10effaf5556d000f8d0c5186848d0",
        "patched_files": [
            "HeliumBundleFactory.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "HeliumBundleFactoryTest.java"
        ]
    },
    "zeppelin_8a30f08": {
        "bug_id": "zeppelin_8a30f08",
        "commit": "https://github.com/apache/zeppelin/commit/8a30f08952acc999085d6ac57fed940179c35dfb",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/8a30f08952acc999085d6ac57fed940179c35dfb/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java?ref=8a30f08952acc999085d6ac57fed940179c35dfb",
                "deletions": 1,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "patch": "@@ -652,7 +652,10 @@ private void updateAngularObjectRegistry(NotebookSocket conn, Note note) {\n       try {\n         interpreterGroup = findInterpreterGroupForParagraph(note, paragraph.getId());\n       } catch (Exception e) {\n-        e.printStackTrace();\n+        LOG.warn(e.getMessage(), e);\n+      }\n+      if (null == interpreterGroup) {\n+        return;\n       }\n       RemoteAngularObjectRegistry registry = (RemoteAngularObjectRegistry)\n           interpreterGroup.getAngularObjectRegistry();",
                "raw_url": "https://github.com/apache/zeppelin/raw/8a30f08952acc999085d6ac57fed940179c35dfb/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "sha": "2130b9851a5c1999ec959d6e5a50e5733a118a05",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-4173] Fixed open note have wrong repl name throws NullPointerException\n\n### What is this PR for?\nWhen you open a paragraph with an wrong interpreter name, Will trigger a NullPointerException.\n\n```\njava.lang.NullPointerException\nat org.apache.zeppelin.socket.NotebookServer.updateAngularObjectRegistry(NotebookServer.java:658)\nat org.apache.zeppelin.socket.NotebookServer.access$200(NotebookServer.java:101)\nat org.apache.zeppelin.socket.NotebookServer$5.onSuccess(NotebookServer.java:640)\nat org.apache.zeppelin.socket.NotebookServer$5.onSuccess(NotebookServer.java:635)\nat org.apache.zeppelin.service.NotebookService.getNote(NotebookService.java:130)\nat org.apache.zeppelin.socket.NotebookServer.getNote(NotebookServer.java:634)\nat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:296)\nat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:58)\nat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:189)\nat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\nat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:66)\n```\n\n### What type of PR is it?\n[Bug Fix]\n\n### What is the Jira issue?\n* https://issues.apache.org/jira/browse/ZEPPELIN-4173\n\n### How should this be tested?\n* [CI Pass](https://travis-ci.org/liuxunorg/zeppelin/builds/538540857)\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update?\n* Is there breaking changes for older versions?\n* Does this needs documentation?\n\nAuthor: Xun Liu <liuxun@apache.org>\n\nCloses #3373 from liuxunorg/ZEPPELIN-4173 and squashes the following commits:\n\n7e29691ca [Xun Liu] Modify LOG level.\nf2f7808a8 [Xun Liu] [ZEPPELIN-4173] Fixed open the note with the wrong repl name throw NullPointerException",
        "parent": "https://github.com/apache/zeppelin/commit/e158a3e97a0b57e92c1f2a165433dbbdac166106",
        "patched_files": [
            "NotebookServer.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookServerTest.java"
        ]
    },
    "zeppelin_8da3e23": {
        "bug_id": "zeppelin_8da3e23",
        "commit": "https://github.com/apache/zeppelin/commit/8da3e23a97ae89ab4e5a2fc2b6a78d8ab040763b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/8da3e23a97ae89ab4e5a2fc2b6a78d8ab040763b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=8da3e23a97ae89ab4e5a2fc2b6a78d8ab040763b",
                "deletions": 3,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -160,6 +160,11 @@ public void setName(String name) {\n \n   public void setInterpreterFactory(InterpreterFactory factory) {\n     this.factory = factory;\n+    synchronized (paragraphs) {\n+      for (Paragraph p : paragraphs) {\n+        p.setInterpreterFactory(factory);\n+      }\n+    }\n   }\n \n   public JobListenerFactory getJobListenerFactory() {\n@@ -447,7 +452,6 @@ public void runAll() {\n         authenticationInfo.setUser(cronExecutingUser);\n         p.setAuthenticationInfo(authenticationInfo);\n \n-        p.setInterpreterFactory(factory);\n         p.setListener(jobListenerFactory.getParagraphJobListener(this));\n         Interpreter intp = factory.getInterpreter(getId(), p.getRequiredReplName());\n \n@@ -463,7 +467,6 @@ public void runAll() {\n    */\n   public void run(String paragraphId) {\n     Paragraph p = getParagraph(paragraphId);\n-    p.setInterpreterFactory(factory);\n     p.setListener(jobListenerFactory.getParagraphJobListener(this));\n     String requiredReplName = p.getRequiredReplName();\n     Interpreter intp = factory.getInterpreter(getId(), requiredReplName);\n@@ -501,7 +504,6 @@ public boolean isTerminated() {\n \n   public List<InterpreterCompletion> completion(String paragraphId, String buffer, int cursor) {\n     Paragraph p = getParagraph(paragraphId);\n-    p.setInterpreterFactory(factory);\n     p.setListener(jobListenerFactory.getParagraphJobListener(this));\n     List completion = p.completion(buffer, cursor);\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/8da3e23a97ae89ab4e5a2fc2b6a78d8ab040763b/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "285bcedbbe886f2da23eb4ce4459201ff69aa4d8",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/zeppelin/blob/8da3e23a97ae89ab4e5a2fc2b6a78d8ab040763b/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java?ref=8da3e23a97ae89ab4e5a2fc2b6a78d8ab040763b",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "patch": "@@ -127,6 +127,22 @@ public void testSelectingReplImplementation() throws IOException {\n     assertEquals(\"repl2: hello world\", p2.getResult().message());\n   }\n \n+  @Test\n+  public void testReloadAndSetInterpreter() throws IOException {\n+    // given a notebook\n+    File srcDir = new File(\"src/test/resources/2A94M5J1Z\");\n+    File destDir = new File(notebookDir.getAbsolutePath() + \"/2A94M5J1Z\");\n+    FileUtils.copyDirectory(srcDir, destDir);\n+\n+    // when load\n+    notebook.reloadAllNotes(null);\n+    assertEquals(1, notebook.getAllNotes().size());\n+\n+    // then interpreter factory should be injected into all the paragraphs\n+    Note note = notebook.getAllNotes().get(0);\n+    assertNull(note.getParagraphs().get(0).getRepl(null));\n+  }\n+\n   @Test\n   public void testReloadAllNotes() throws IOException {\n     File srcDir = new File(\"src/test/resources/2A94M5J1Z\");",
                "raw_url": "https://github.com/apache/zeppelin/raw/8da3e23a97ae89ab4e5a2fc2b6a78d8ab040763b/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "sha": "e67344fab237e765940907cb6dbdae39fadde1c2",
                "status": "modified"
            }
        ],
        "message": "[HOTFIX] Fix NullPointerException\tat org.apache.zeppelin.notebook.Paragraph.getRepl(Paragraph.java:204)\n\n### What is this PR for?\nWhen notebook is being loaded, following error is raised after #836\n\n```\nCaused by: java.lang.NullPointerException\n\tat org.apache.zeppelin.notebook.Paragraph.getRepl(Paragraph.java:204)\n\tat org.apache.zeppelin.notebook.Paragraph.getCurrentRepl(Paragraph.java:208)\n\tat org.apache.zeppelin.helium.Helium.suggestApp(Helium.java:138)\n\tat org.apache.zeppelin.rest.HeliumRestApi.suggest(HeliumRestApi.java:83)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180)\n\tat org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n\t... 50 more\n```\n\n### What type of PR is it?\nHotfix\n\n### Todos\n* [x] - Fix\n\n### What is the Jira issue?\nZEPPELIN-732, ZEPPELIN-1075\n\n### How should this be tested?\nRun Zeppelin and load any notebook. And see if there're unexpected exception raised.\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Lee moon soo <moon@apache.org>\n\nCloses #1150 from Leemoonsoo/fix_npe and squashes the following commits:\n\n10746f5 [Lee moon soo] adjust indentation\n0471042 [Lee moon soo] Add unittest\n3e8697b [Lee moon soo] Set interpreter factory into paragraph right after loaded",
        "parent": "https://github.com/apache/zeppelin/commit/9ca485589e915202bb6890f0529d71daee6c21d6",
        "patched_files": [
            "Notebook.java",
            "Note.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookTest.java",
            "NoteTest.java"
        ]
    },
    "zeppelin_8dde8fb": {
        "bug_id": "zeppelin_8dde8fb",
        "commit": "https://github.com/apache/zeppelin/commit/8dde8fb9af86eda91b7eb744e2c30630f8b4bf5d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/8dde8fb9af86eda91b7eb744e2c30630f8b4bf5d/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=8dde8fb9af86eda91b7eb744e2c30630f8b4bf5d",
                "deletions": 4,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -120,7 +120,8 @@ public Notebook(ZeppelinConfiguration conf, NotebookRepo notebookRepo,\n     quartzSched.start();\n     CronJob.notebook = this;\n \n-    loadAllNotes();\n+    AuthenticationInfo anonymous = AuthenticationInfo.ANONYMOUS;\n+    loadAllNotes(anonymous);\n     if (this.noteSearchService != null) {\n       long start = System.nanoTime();\n       logger.info(\"Notebook indexing started...\");\n@@ -462,11 +463,11 @@ private Note loadNoteFromRepo(String id, AuthenticationInfo subject) {\n     return note;\n   }\n \n-  private void loadAllNotes() throws IOException {\n-    List<NoteInfo> noteInfos = notebookRepo.list(null);\n+  void loadAllNotes(AuthenticationInfo subject) throws IOException {\n+    List<NoteInfo> noteInfos = notebookRepo.list(subject);\n \n     for (NoteInfo info : noteInfos) {\n-      loadNoteFromRepo(info.getId(), null);\n+      loadNoteFromRepo(info.getId(), subject);\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/8dde8fb9af86eda91b7eb744e2c30630f8b4bf5d/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "6f0f7939ccac3b16bdb96eecab823e270a0688be",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/zeppelin/blob/8dde8fb9af86eda91b7eb744e2c30630f8b4bf5d/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java?ref=8dde8fb9af86eda91b7eb744e2c30630f8b4bf5d",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "patch": "@@ -65,7 +65,7 @@\n   private DependencyResolver depResolver;\n   private NotebookAuthorization notebookAuthorization;\n   private Credentials credentials;\n-  private AuthenticationInfo anonymous = new AuthenticationInfo(\"anonymous\");\n+  private AuthenticationInfo anonymous = AuthenticationInfo.ANONYMOUS;\n \n   @Before\n   public void setUp() throws Exception {\n@@ -196,6 +196,30 @@ public void testReloadAllNotes() throws IOException {\n     assertEquals(notes.size(), 0);\n   }\n \n+  @Test\n+  public void testLoadAllNotes() {\n+    Note note;\n+    try {\n+      assertEquals(0, notebook.getAllNotes().size());\n+      note = notebook.createNote(anonymous);\n+      Paragraph p1 = note.addParagraph();\n+      Map config = p1.getConfig();\n+      config.put(\"enabled\", true);\n+      p1.setConfig(config);\n+      p1.setText(\"hello world\");\n+      note.persist(anonymous);\n+    } catch (IOException fe) {\n+      logger.warn(\"Failed to create note and paragraph. Possible problem with persisting note, safe to ignore\", fe);\n+    }\n+\n+    try {\n+      notebook.loadAllNotes(anonymous);\n+      assertEquals(1, notebook.getAllNotes().size());\n+    } catch (IOException e) {\n+      fail(\"Subject is non-emtpy anonymous, shouldn't fail\");\n+    }\n+  }\n+  \n   @Test\n   public void testPersist() throws IOException, SchedulerException, RepositoryException {\n     Note note = notebook.createNote(anonymous);",
                "raw_url": "https://github.com/apache/zeppelin/raw/8dde8fb9af86eda91b7eb744e2c30630f8b4bf5d/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "sha": "3807bd0cad7362bf9b2633b3dd771efc7d467f29",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1612] Fix NPE when initializing Notebook\n\n### What is this PR for?\nSometimes Zeppelin wasn't able to start because of empty subject when initializing Notebook class, more details in issue.\n\n### What type of PR is it?\nBug Fix\n\n### Todos\n* [x] - add anonymous subject\n* [x] - add test\n\n### What is the Jira issue?\n[ZEPPELIN-1612](https://issues.apache.org/jira/browse/ZEPPELIN-1612)\n\n### How should this be tested?\n* added test passing and no relevant CI failures\n* also can be starting Zeppelin in anonymous mode when you have notes with angular objects\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Khalid Huseynov <khalidhnv@gmail.com>\n\nCloses #1590 from khalidhuseynov/fix/loadAllNotes-npe and squashes the following commits:\n\n0d21f78 [Khalid Huseynov] strict test passing condition\n8da069b [Khalid Huseynov] add test\n3dc0a8b [Khalid Huseynov] substitute null with anonymous subject",
        "parent": "https://github.com/apache/zeppelin/commit/2ea1ce541ee4a44c42b2a8c6caf6d3d1739217b8",
        "patched_files": [
            "Notebook.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookTest.java"
        ]
    },
    "zeppelin_8df623b": {
        "bug_id": "zeppelin_8df623b",
        "commit": "https://github.com/apache/zeppelin/commit/8df623b634cc1fa23b268e2bb27931ea391a1381",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/8df623b634cc1fa23b268e2bb27931ea391a1381/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java?ref=8df623b634cc1fa23b268e2bb27931ea391a1381",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "patch": "@@ -604,6 +604,7 @@ public void onPostExecute(String script) {\n \n     @Override\n     protected Object jobRun() throws Throwable {\n+      ClassLoader currentThreadContextClassloader = Thread.currentThread().getContextClassLoader();\n       try {\n         InterpreterContext.set(context);\n \n@@ -652,6 +653,7 @@ protected Object jobRun() throws Throwable {\n         }\n         return new InterpreterResult(result.code(), resultMessages);\n       } finally {\n+        Thread.currentThread().setContextClassLoader(currentThreadContextClassloader);\n         InterpreterContext.remove();\n       }\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/8df623b634cc1fa23b268e2bb27931ea391a1381/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "sha": "d50d0ed3e2b17fee5a133035d4d25a53070b31ec",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-3209. Preserve thread context classloader when running jobs in RemoteInterpreterServer\n\n### What is this PR for?\nSpark jobs may change current thread context classloader sometimes.\n\nFor example in case of issue ZEPPELIN-2475 using Spark 2.2 and Scala 2.11.8 when you run DepInterpreter that will start SparkILoop --> ILoop which changes the current thread context classloader, from LauncherAppClassloader to ScalaClassloaderURLClassloader. This result in classloading problems when SparkInterpreter is trying to build up Spark Context, in case SparkInterpreter is started by scheduler on same thread.\n\nIn short when running subsequent paragraphs, users will get an ambiguous NullPointerException, which is hard to understand as it hides the root cause of the problem. As a safety measure to prevent such cases RemoteInterpreterServer should save & restore original thread context classloader.\n\n### What type of PR is it?\n[Bug Fix]\n\n### What is the Jira issue?\n* https://issues.apache.org/jira/browse/ZEPPELIN-3209\n\n### How should this be tested?\n* Use Spark 2.2 and Scala 2.11.8\n* create a notebook with two paragraphs\n* in first paragraph use %spark.dep interpreter and add load some dependencies\n* in second paragraph use %spark interpreter and run some spark code\n\n### Questions:\n* Does the licenses files need update?\n* Is there breaking changes for older versions?\n* Does this needs documentation?\n\nAuthor: Magyari Sandor Szilard <sancyx@gmail.com>\n\nCloses #2771 from sancyx/master-ZEPPELIN-3209 and squashes the following commits:\n\ndd3a305da [Magyari Sandor Szilard] ZEPPELIN-3209. Preserve thread context classloader when running jobs in RemoteInterpreterServer (magyari_sandor)",
        "parent": "https://github.com/apache/zeppelin/commit/3c502cd948e9b877adea9c6589ab42d126cd4fbc",
        "patched_files": [
            "RemoteInterpreterServer.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "RemoteInterpreterServerTest.java"
        ]
    },
    "zeppelin_908b2a7": {
        "bug_id": "zeppelin_908b2a7",
        "commit": "https://github.com/apache/zeppelin/commit/908b2a74ff59c231d4ba29de93812ea938f85f7f",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "patch": "@@ -33,7 +33,7 @@\n  * and InterpreterGroup will have reference to these all interpreters.\n  *\n  * Remember, list of interpreters are dedicated to a note.\n- * (when InterpreterOption.perNoteSession==true)\n+ * (when InterpreterOption.session==true)\n  * So InterpreterGroup internally manages map of [noteId, list of interpreters]\n  *\n  * A InterpreterGroup runs on interpreter process.\n@@ -203,6 +203,14 @@ public void destroy(String noteId) {\n     LOGGER.info(\"Destroy interpreter group \" + getId() + \" for note \" + noteId);\n     List<Interpreter> intpForNote = this.get(noteId);\n     destroy(intpForNote);\n+\n+    if (remoteInterpreterProcess != null) {\n+      remoteInterpreterProcess.dereference();\n+      if (remoteInterpreterProcess.referenceCount() <= 0) {\n+        remoteInterpreterProcess = null;\n+        allInterpreterGroups.remove(id);\n+      }\n+    }\n   }\n \n \n@@ -222,6 +230,7 @@ public void destroy() {\n       while (remoteInterpreterProcess.referenceCount() > 0) {\n         remoteInterpreterProcess.dereference();\n       }\n+      remoteInterpreterProcess = null;\n     }\n \n     allInterpreterGroups.remove(id);",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "sha": "f3b158c26a69011e33b631e0304268eed2075666",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "patch": "@@ -298,6 +298,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {\n     if (logger.isDebugEnabled()) {\n       logger.debug(\"st:\\n{}\", st);\n     }\n+\n     FormType form = getFormType();\n     RemoteInterpreterProcess interpreterProcess = getInterpreterProcess();\n     Client client = null;",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "sha": "e0cdaa338b1aa827a2129d76aff0a1b9a466cf83",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 2,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "patch": "@@ -177,7 +177,7 @@ public Response putNotePermissions(@PathParam(\"noteId\") String noteId, String re\n   public Response bind(@PathParam(\"noteId\") String noteId, String req) throws IOException {\n     List<String> settingIdList = gson.fromJson(req, new TypeToken<List<String>>() {\n     }.getType());\n-    notebook.bindInterpretersToNote(noteId, settingIdList);\n+    notebook.bindInterpretersToNote(SecurityUtils.getPrincipal(), noteId, settingIdList);\n     return new JsonResponse<>(Status.OK).build();\n   }\n \n@@ -458,7 +458,7 @@ public Response deleteParagraph(@PathParam(\"notebookId\") String notebookId,\n     }\n \n     AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());\n-    note.removeParagraph(paragraphId);\n+    note.removeParagraph(SecurityUtils.getPrincipal(), paragraphId);\n     note.persist(subject);\n     notebookServer.broadcastNote(note);\n \n@@ -599,6 +599,11 @@ public Response runParagraph(@PathParam(\"notebookId\") String notebookId,\n     // handle params if presented\n     handleParagraphParams(message, note, paragraph);\n \n+    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());\n+\n+    paragraph.setAuthenticationInfo(subject);\n+    note.persist(subject);\n+\n     note.run(paragraph.getId());\n     return new JsonResponse<>(Status.OK).build();\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "sha": "d9af812f1643033c697a103bb1d08431169ff2fe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 1,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "patch": "@@ -89,7 +89,7 @@ public ZeppelinServer() throws Exception {\n     this.heliumApplicationFactory = new HeliumApplicationFactory();\n     this.schedulerFactory = new SchedulerFactory();\n     this.replFactory = new InterpreterFactory(conf, notebookWsServer,\n-        notebookWsServer, heliumApplicationFactory, depResolver);\n+        notebookWsServer, heliumApplicationFactory, depResolver, SecurityUtils.isAuthenticated());\n     this.notebookRepo = new NotebookRepoSync(conf);\n     this.notebookIndex = new LuceneSearch();\n     this.notebookAuthorization = NotebookAuthorization.init(conf);",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "sha": "de02fe0f3c8e611f845ce04057e361bb74d63198",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 34,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "patch": "@@ -134,7 +134,7 @@ public void onMessage(NotebookSocket conn, String msg) {\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(\"RECEIVE MSG = \" + messagereceived);\n       }\n-      \n+\n       String ticket = TicketContainer.instance.getTicket(messagereceived.principal);\n       if (ticket != null && !ticket.equals(messagereceived.ticket)){\n         /* not to pollute logs, log instead of exception */\n@@ -472,7 +472,8 @@ public void saveInterpreterBindings(NotebookSocket conn, Message fromMessage) {\n       List<String> settingIdList = gson.fromJson(String.valueOf(\n           fromMessage.data.get(\"selectedSettingIds\")), new TypeToken<ArrayList<String>>() {\n           }.getType());\n-      notebook().bindInterpretersToNote(noteId, settingIdList);\n+      AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);\n+      notebook().bindInterpretersToNote(subject.getUser(), noteId, settingIdList);\n       broadcastInterpreterBindings(noteId,\n           InterpreterBindingUtils.getInterpreterBindings(notebook(), noteId));\n     } catch (Exception e) {\n@@ -600,6 +601,8 @@ private void sendNote(NotebookSocket conn, HashSet<String> userAndRoles, Noteboo\n       return;\n     }\n \n+    String user = fromMessage.principal;\n+\n     Note note = notebook.getNote(noteId);\n     NotebookAuthorization notebookAuthorization = notebook.getNotebookAuthorization();\n     if (note != null) {\n@@ -610,7 +613,7 @@ private void sendNote(NotebookSocket conn, HashSet<String> userAndRoles, Noteboo\n       }\n       addConnectionToNote(note.getId(), conn);\n       conn.send(serializeMessage(new Message(OP.NOTE).put(\"note\", note)));\n-      sendAllAngularObjects(note, conn);\n+      sendAllAngularObjects(note, user, conn);\n     } else {\n       conn.send(serializeMessage(new Message(OP.NOTE).put(\"note\", null)));\n     }\n@@ -619,6 +622,7 @@ private void sendNote(NotebookSocket conn, HashSet<String> userAndRoles, Noteboo\n   private void sendHomeNote(NotebookSocket conn, HashSet<String> userAndRoles,\n                             Notebook notebook, Message fromMessage) throws IOException {\n     String noteId = notebook.getConf().getString(ConfVars.ZEPPELIN_NOTEBOOK_HOMESCREEN);\n+    String user = fromMessage.principal;\n \n     Note note = null;\n     if (noteId != null) {\n@@ -634,7 +638,7 @@ private void sendHomeNote(NotebookSocket conn, HashSet<String> userAndRoles,\n       }\n       addConnectionToNote(note.getId(), conn);\n       conn.send(serializeMessage(new Message(OP.NOTE).put(\"note\", note)));\n-      sendAllAngularObjects(note, conn);\n+      sendAllAngularObjects(note, user, conn);\n     } else {\n       removeConnectionFromAllNote(conn);\n       conn.send(serializeMessage(new Message(OP.NOTE).put(\"note\", null)));\n@@ -786,6 +790,8 @@ protected Note importNote(NotebookSocket conn, HashSet<String> userAndRoles,\n       AuthenticationInfo subject = null;\n       if (fromMessage.principal != null) {\n         subject = new AuthenticationInfo(fromMessage.principal);\n+      } else {\n+        subject = new AuthenticationInfo(\"anonymous\");\n       }\n       note = notebook.importNote(noteJson, noteName, subject);\n       note.persist(subject);\n@@ -804,7 +810,7 @@ private void removeParagraph(NotebookSocket conn, HashSet<String> userAndRoles,\n     String noteId = getOpenNoteId(conn);\n     final Note note = notebook.getNote(noteId);\n     NotebookAuthorization notebookAuthorization = notebook.getNotebookAuthorization();\n-    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());\n+    AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);\n     if (!notebookAuthorization.isWriter(noteId, userAndRoles)) {\n       permissionError(conn, \"write\", fromMessage.principal,\n           userAndRoles, notebookAuthorization.getWriters(noteId));\n@@ -813,7 +819,7 @@ private void removeParagraph(NotebookSocket conn, HashSet<String> userAndRoles,\n \n     /** We dont want to remove the last paragraph */\n     if (!note.isLastParagraph(paragraphId)) {\n-      note.removeParagraph(paragraphId);\n+      note.removeParagraph(subject.getUser(), paragraphId);\n       note.persist(subject);\n       broadcastNote(note);\n     }\n@@ -869,6 +875,7 @@ private void angularObjectUpdated(NotebookSocket conn, HashSet<String> userAndRo\n     String interpreterGroupId = (String) fromMessage.get(\"interpreterGroupId\");\n     String varName = (String) fromMessage.get(\"name\");\n     Object varValue = fromMessage.get(\"value\");\n+    String user = fromMessage.principal;\n     AngularObject ao = null;\n     boolean global = false;\n     // propagate change to (Remote) AngularObjectRegistry\n@@ -877,12 +884,12 @@ private void angularObjectUpdated(NotebookSocket conn, HashSet<String> userAndRo\n       List<InterpreterSetting> settings = notebook.getInterpreterFactory()\n           .getInterpreterSettings(note.getId());\n       for (InterpreterSetting setting : settings) {\n-        if (setting.getInterpreterGroup(note.getId()) == null) {\n+        if (setting.getInterpreterGroup(user, note.getId()) == null) {\n           continue;\n         }\n-        if (interpreterGroupId.equals(setting.getInterpreterGroup(note.getId()).getId())) {\n+        if (interpreterGroupId.equals(setting.getInterpreterGroup(user, note.getId()).getId())) {\n           AngularObjectRegistry angularObjectRegistry = setting\n-              .getInterpreterGroup(note.getId()).getAngularObjectRegistry();\n+              .getInterpreterGroup(user, note.getId()).getAngularObjectRegistry();\n \n           // first trying to get local registry\n           ao = angularObjectRegistry.get(varName, noteId, paragraphId);\n@@ -919,12 +926,12 @@ private void angularObjectUpdated(NotebookSocket conn, HashSet<String> userAndRo\n         List<InterpreterSetting> settings = notebook.getInterpreterFactory()\n             .getInterpreterSettings(note.getId());\n         for (InterpreterSetting setting : settings) {\n-          if (setting.getInterpreterGroup(n.getId()) == null) {\n+          if (setting.getInterpreterGroup(user, n.getId()) == null) {\n             continue;\n           }\n-          if (interpreterGroupId.equals(setting.getInterpreterGroup(n.getId()).getId())) {\n+          if (interpreterGroupId.equals(setting.getInterpreterGroup(user, n.getId()).getId())) {\n             AngularObjectRegistry angularObjectRegistry = setting\n-                .getInterpreterGroup(n.getId()).getAngularObjectRegistry();\n+                .getInterpreterGroup(user, n.getId()).getAngularObjectRegistry();\n             this.broadcastExcept(\n                 n.getId(),\n                 new Message(OP.ANGULAR_OBJECT_UPDATE).put(\"angularObject\", ao)\n@@ -1110,7 +1117,7 @@ private void moveParagraph(NotebookSocket conn, HashSet<String> userAndRoles, No\n     String noteId = getOpenNoteId(conn);\n     final Note note = notebook.getNote(noteId);\n     NotebookAuthorization notebookAuthorization = notebook.getNotebookAuthorization();\n-    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());\n+    AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);\n     if (!notebookAuthorization.isWriter(noteId, userAndRoles)) {\n       permissionError(conn, \"write\", fromMessage.principal,\n           userAndRoles, notebookAuthorization.getWriters(noteId));\n@@ -1129,7 +1136,7 @@ private void insertParagraph(NotebookSocket conn, HashSet<String> userAndRoles,\n     String noteId = getOpenNoteId(conn);\n     final Note note = notebook.getNote(noteId);\n     NotebookAuthorization notebookAuthorization = notebook.getNotebookAuthorization();\n-    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());\n+    AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);\n     if (!notebookAuthorization.isWriter(noteId, userAndRoles)) {\n       permissionError(conn, \"write\", fromMessage.principal,\n           userAndRoles, notebookAuthorization.getWriters(noteId));\n@@ -1181,14 +1188,9 @@ private void runParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Not\n     String text = (String) fromMessage.get(\"paragraph\");\n     p.setText(text);\n     p.setTitle((String) fromMessage.get(\"title\"));\n-    if (!fromMessage.principal.equals(\"anonymous\")) {\n-      AuthenticationInfo authenticationInfo = new AuthenticationInfo(fromMessage.principal,\n-          fromMessage.ticket);\n-      p.setAuthenticationInfo(authenticationInfo);\n-\n-    } else {\n-      p.setAuthenticationInfo(new AuthenticationInfo());\n-    }\n+    AuthenticationInfo authenticationInfo =\n+        new AuthenticationInfo(fromMessage.principal, fromMessage.ticket);\n+    p.setAuthenticationInfo(authenticationInfo);\n \n     Map<String, Object> params = (Map<String, Object>) fromMessage\n        .get(\"params\");\n@@ -1513,7 +1515,7 @@ public void afterStatusChange(Job job, Status before, Status after) {\n         LOG.info(\"Job {} is finished\", job.getId());\n         try {\n           //TODO(khalid): may change interface for JobListener and pass subject from interpreter\n-          note.persist(null);\n+          note.persist(job instanceof Paragraph ? ((Paragraph) job).getAuthenticationInfo() : null);\n         } catch (IOException e) {\n           LOG.error(e.toString(), e);\n         }\n@@ -1569,25 +1571,24 @@ public NotebookEventListener getNotebookInformationListener() {\n     return new NotebookInformationListener(this);\n   }\n \n-  private void sendAllAngularObjects(Note note, NotebookSocket conn) throws IOException {\n+  private void sendAllAngularObjects(Note note, String user, NotebookSocket conn)\n+      throws IOException {\n     List<InterpreterSetting> settings =\n         notebook().getInterpreterFactory().getInterpreterSettings(note.getId());\n     if (settings == null || settings.size() == 0) {\n       return;\n     }\n \n     for (InterpreterSetting intpSetting : settings) {\n-      AngularObjectRegistry registry = intpSetting.getInterpreterGroup(note.getId())\n-          .getAngularObjectRegistry();\n+      AngularObjectRegistry registry =\n+          intpSetting.getInterpreterGroup(user, note.getId()).getAngularObjectRegistry();\n       List<AngularObject> objects = registry.getAllWithGlobal(note.getId());\n       for (AngularObject object : objects) {\n-        conn.send(serializeMessage(new Message(OP.ANGULAR_OBJECT_UPDATE)\n-            .put(\"angularObject\", object)\n-            .put(\"interpreterGroupId\",\n-                intpSetting.getInterpreterGroup(note.getId()).getId())\n-            .put(\"noteId\", note.getId())\n-            .put(\"paragraphId\", object.getParagraphId())\n-        ));\n+        conn.send(serializeMessage(\n+            new Message(OP.ANGULAR_OBJECT_UPDATE).put(\"angularObject\", object)\n+                .put(\"interpreterGroupId\",\n+                    intpSetting.getInterpreterGroup(user, note.getId()).getId())\n+                .put(\"noteId\", note.getId()).put(\"paragraphId\", object.getParagraphId())));\n       }\n     }\n   }\n@@ -1654,9 +1655,10 @@ private void getEditorSetting(NotebookSocket conn, Message fromMessage)\n     String paragraphId = (String) fromMessage.get(\"paragraphId\");\n     String replName = (String) fromMessage.get(\"magic\");\n     String noteId = getOpenNoteId(conn);\n+    String user = fromMessage.principal;\n     Message resp = new Message(OP.EDITOR_SETTING);\n     resp.put(\"paragraphId\", paragraphId);\n-    resp.put(\"editor\", notebook().getInterpreterFactory().getEditorSetting(noteId, replName));\n+    resp.put(\"editor\", notebook().getInterpreterFactory().getEditorSetting(user, noteId, replName));\n     conn.send(serializeMessage(resp));\n     return;\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "sha": "969bdf9510d8e2432f770f0f2166a4bd836fdb0f",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "patch": "@@ -119,4 +119,10 @@ public static Collection getRealmsList() {\n     return roles;\n   }\n \n+  /**\n+   * Checked if shiro enabled or not\n+   */\n+  public static boolean isAuthenticated() {\n+    return org.apache.shiro.SecurityUtils.getSubject().isAuthenticated();\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java",
                "sha": "d81d2e6150bb87b5f454938b224912d069d6b764",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/resources/log4j.properties",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/resources/log4j.properties?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/resources/log4j.properties",
                "patch": "@@ -0,0 +1,25 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+log4j.rootLogger = INFO, stdout\n+\n+log4j.appender.stdout = org.apache.log4j.ConsoleAppender\n+log4j.appender.stdout.layout = org.apache.log4j.PatternLayout\n+log4j.appender.stdout.layout.ConversionPattern=%5p [%d] ({%t} %F[%M]:%L) - %m%n\n+\n+log4j.additivity.org.apache.zeppelin.interpreter = false\n+log4j.logger.org.apache.zeppelin.interpreter = DEBUG, stdout",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/resources/log4j.properties",
                "sha": "2f644074c89b0361352f4383a3e3949c2ac82de6",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/resources/shiro.ini",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/resources/shiro.ini?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 3,
                "filename": "zeppelin-server/src/main/resources/shiro.ini",
                "patch": "@@ -18,14 +18,19 @@\n [users]\n # List of users with their password allowed to access Zeppelin.\n # To use a different strategy (LDAP / Database / ...) check the shiro doc at http://shiro.apache.org/configuration.html#Configuration-INISections\n-admin = password\n+admin = password, admin\n+user1 = user1, role1\n \n \n [urls]\n-\n # anon means the access is anonymous.\n # authcBasic means Basic Auth Security\n # To enfore security, comment the line below and uncomment the next one\n /** = anon\n-#/** = authcBasic\n+#/** = authc\n \n+[roles]\n+role1 = *\n+role2 = *\n+role3 = *\n+admin = *",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/main/resources/shiro.ini",
                "sha": "050c9d99bb596b0db2781bc0c41640aa16385318",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 6,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "patch": "@@ -30,7 +30,9 @@\n import org.apache.zeppelin.notebook.Paragraph;\n import org.apache.zeppelin.scheduler.Job.Status;\n import org.apache.zeppelin.server.ZeppelinServer;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -47,6 +49,7 @@\n @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n public class InterpreterRestApiTest extends AbstractTestRestApi {\n   Gson gson = new Gson();\n+  AuthenticationInfo anonymous;\n \n   @BeforeClass\n   public static void init() throws Exception {\n@@ -58,6 +61,11 @@ public static void destroy() throws Exception {\n     AbstractTestRestApi.shutDown();\n   }\n \n+  @Before\n+  public void setUp() {\n+    anonymous = new AuthenticationInfo(\"anonymous\");\n+  }\n+\n   @Test\n   public void getAvailableInterpreters() throws IOException {\n     // when\n@@ -90,7 +98,7 @@ public void testSettingsCRUD() throws IOException {\n     String jsonRequest = \"{\\\"name\\\":\\\"md2\\\",\\\"group\\\":\\\"md\\\",\\\"properties\\\":{\\\"propname\\\":\\\"propvalue\\\"},\" +\n         \"\\\"interpreterGroup\\\":[{\\\"class\\\":\\\"org.apache.zeppelin.markdown.Markdown\\\",\\\"name\\\":\\\"md\\\"}],\" +\n         \"\\\"dependencies\\\":[],\" +\n-        \"\\\"option\\\": { \\\"remote\\\": true, \\\"perNoteSession\\\": false }}\";\n+        \"\\\"option\\\": { \\\"remote\\\": true, \\\"session\\\": false }}\";\n     PostMethod post = httpPost(\"/interpreter/setting/\", jsonRequest);\n     LOG.info(\"testSettingCRUD create response\\n\" + post.getResponseBodyAsString());\n     assertThat(\"test create method:\", post, isCreated());\n@@ -106,7 +114,7 @@ public void testSettingsCRUD() throws IOException {\n     jsonRequest = \"{\\\"name\\\":\\\"md2\\\",\\\"group\\\":\\\"md\\\",\\\"properties\\\":{\\\"propname\\\":\\\"Otherpropvalue\\\"},\" +\n         \"\\\"interpreterGroup\\\":[{\\\"class\\\":\\\"org.apache.zeppelin.markdown.Markdown\\\",\\\"name\\\":\\\"md\\\"}],\" +\n         \"\\\"dependencies\\\":[],\" +\n-        \"\\\"option\\\": { \\\"remote\\\": true, \\\"perNoteSession\\\": false }}\";\n+        \"\\\"option\\\": { \\\"remote\\\": true, \\\"session\\\": false }}\";\n     PutMethod put = httpPut(\"/interpreter/setting/\" + newSettingId, jsonRequest);\n     LOG.info(\"testSettingCRUD update response\\n\" + put.getResponseBodyAsString());\n     assertThat(\"test update method:\", put, isAllowed());\n@@ -131,7 +139,7 @@ public void testSettingsCreateWithEmptyJson() throws IOException {\n   @Test\n   public void testInterpreterAutoBinding() throws IOException {\n     // create note\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n     // check interpreter is binded\n     GetMethod get = httpGet(\"/notebook/interpreter/bind/\" + note.getId());\n@@ -144,13 +152,13 @@ public void testInterpreterAutoBinding() throws IOException {\n \n     get.releaseConnection();\n     //cleanup\n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testInterpreterRestart() throws IOException, InterruptedException {\n     // create new note\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     note.addParagraph();\n     Paragraph p = note.getLastParagraph();\n     Map config = p.getConfig();\n@@ -159,6 +167,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {\n     // run markdown paragraph\n     p.setConfig(config);\n     p.setText(\"%md markdown\");\n+    p.setAuthenticationInfo(anonymous);\n     note.run(p.getId());\n     while (p.getStatus() != Status.FINISHED) {\n       Thread.sleep(100);\n@@ -181,13 +190,14 @@ public void testInterpreterRestart() throws IOException, InterruptedException {\n     p = note.addParagraph();\n     p.setConfig(config);\n     p.setText(\"%md markdown restarted\");\n+    p.setAuthenticationInfo(anonymous);\n     note.run(p.getId());\n     while (p.getStatus() != Status.FINISHED) {\n       Thread.sleep(100);\n     }\n     assertEquals(\"<p>markdown restarted</p>\\n\", p.getResult().message());\n     //cleanup\n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "sha": "6d4fb2c547293615aa4745edf2a6749c22e72c26",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 9,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "patch": "@@ -28,7 +28,9 @@\n import org.apache.zeppelin.notebook.NotebookAuthorization;\n import org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving;\n import org.apache.zeppelin.server.ZeppelinServer;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -49,6 +51,7 @@\n @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n public class NotebookRestApiTest extends AbstractTestRestApi {\n   Gson gson = new Gson();\n+  AuthenticationInfo anonymous;\n \n   @BeforeClass\n   public static void init() throws Exception {\n@@ -60,9 +63,14 @@ public static void destroy() throws Exception {\n     AbstractTestRestApi.shutDown();\n   }\n \n+  @Before\n+  public void setUp() {\n+    anonymous = new AuthenticationInfo(\"anonymous\");\n+  }\n+\n   @Test\n   public void testPermissions() throws IOException {\n-    Note note1 = ZeppelinServer.notebook.createNote(null);\n+    Note note1 = ZeppelinServer.notebook.createNote(anonymous);\n     // Set only readers\n     String jsonRequest = \"{\\\"readers\\\":[\\\"admin-team\\\"],\\\"owners\\\":[],\" +\n             \"\\\"writers\\\":[]}\";\n@@ -85,7 +93,7 @@ public void testPermissions() throws IOException {\n     get.releaseConnection();\n \n \n-    Note note2 = ZeppelinServer.notebook.createNote(null);\n+    Note note2 = ZeppelinServer.notebook.createNote(anonymous);\n     // Set only writers\n     jsonRequest = \"{\\\"readers\\\":[],\\\"owners\\\":[],\" +\n             \"\\\"writers\\\":[\\\"admin-team\\\"]}\";\n@@ -119,14 +127,14 @@ public void testPermissions() throws IOException {\n     assertEquals(authInfo.get(\"owners\"), Lists.newArrayList());\n     get.releaseConnection();\n     //cleanup\n-    ZeppelinServer.notebook.removeNote(note1.getId(), null);\n-    ZeppelinServer.notebook.removeNote(note2.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note1.getId(), anonymous);\n+    ZeppelinServer.notebook.removeNote(note2.getId(), anonymous);\n \n   }\n \n   @Test\n   public void testGetNoteParagraphJobStatus() throws IOException {\n-    Note note1 = ZeppelinServer.notebook.createNote(null);\n+    Note note1 = ZeppelinServer.notebook.createNote(anonymous);\n     note1.addParagraph();\n \n     String paragraphId = note1.getLastParagraph().getId();\n@@ -142,13 +150,13 @@ public void testGetNoteParagraphJobStatus() throws IOException {\n     assertEquals(paragraphStatus.get(\"status\"), \"READY\");\n \n     //cleanup\n-    ZeppelinServer.notebook.removeNote(note1.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note1.getId(), anonymous);\n \n   }\n \n   @Test\n   public void testCloneNotebook() throws IOException {\n-    Note note1 = ZeppelinServer.notebook.createNote(null);\n+    Note note1 = ZeppelinServer.notebook.createNote(anonymous);\n     PostMethod post = httpPost(\"/notebook/\" + note1.getId(), \"\");\n     LOG.info(\"testCloneNotebook response\\n\" + post.getResponseBodyAsString());\n     assertThat(post, isCreated());\n@@ -167,8 +175,8 @@ public void testCloneNotebook() throws IOException {\n     get.releaseConnection();\n \n     //cleanup\n-    ZeppelinServer.notebook.removeNote(note1.getId(), null);\n-    ZeppelinServer.notebook.removeNote(clonedNotebookId, null);\n+    ZeppelinServer.notebook.removeNote(note1.getId(), anonymous);\n+    ZeppelinServer.notebook.removeNote(clonedNotebookId, anonymous);\n \n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "sha": "9383569fae187f4f1e14eb43539dd46cc50bd131",
                "status": "modified"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "changes": 106,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 49,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.zeppelin.server.ZeppelinServer;\n import org.apache.zeppelin.user.AuthenticationInfo;\n import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -51,6 +52,7 @@\n @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n public class ZeppelinRestApiTest extends AbstractTestRestApi {\n   Gson gson = new Gson();\n+  AuthenticationInfo anonymous;\n \n   @BeforeClass\n   public static void init() throws Exception {\n@@ -62,6 +64,11 @@ public static void destroy() throws Exception {\n     AbstractTestRestApi.shutDown();\n   }\n \n+  @Before\n+  public void setUp() {\n+    anonymous = new AuthenticationInfo(\"anonymous\");\n+  }\n+\n   /***\n    * ROOT API TEST\n    ***/\n@@ -78,7 +85,7 @@ public void getApiRoot() throws IOException {\n   public void testGetNotebookInfo() throws IOException {\n     LOG.info(\"testGetNotebookInfo\");\n     // Create note to get info\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"note\");\n     Paragraph paragraph = note.addParagraph();\n@@ -87,7 +94,7 @@ public void testGetNotebookInfo() throws IOException {\n     paragraph.setConfig(config);\n     String paragraphText = \"%md This is my new paragraph in my new note\";\n     paragraph.setText(paragraphText);\n-    note.persist(null);\n+    note.persist(anonymous);\n \n     String sourceNoteID = note.getId();\n     GetMethod get = httpGet(\"/notebook/\" + sourceNoteID);\n@@ -106,7 +113,7 @@ public void testGetNotebookInfo() throws IOException {\n     assertTrue(paragraphs.size() > 0);\n     assertEquals(paragraphText, paragraphs.get(0).get(\"text\"));\n     //\n-    ZeppelinServer.notebook.removeNote(sourceNoteID, null);\n+    ZeppelinServer.notebook.removeNote(sourceNoteID, anonymous);\n   }\n \n   @Test\n@@ -156,7 +163,7 @@ public void testNotebookCreateWithParagraphs() throws IOException {\n       assertTrue(\"paragraph text check failed\", p.getText().startsWith(\"text\"));\n     }\n     // cleanup\n-    ZeppelinServer.notebook.removeNote(newNotebookId, null);\n+    ZeppelinServer.notebook.removeNote(newNotebookId, anonymous);\n     post.releaseConnection();\n   }\n \n@@ -183,7 +190,7 @@ private void testNotebookCreate(String noteName) throws IOException {\n     }\n     assertEquals(\"compare note name\", expectedNoteName, newNoteName);\n     // cleanup\n-    ZeppelinServer.notebook.removeNote(newNotebookId, null);\n+    ZeppelinServer.notebook.removeNote(newNotebookId, anonymous);\n     post.releaseConnection();\n \n   }\n@@ -192,7 +199,7 @@ private void testNotebookCreate(String noteName) throws IOException {\n   public void testDeleteNote() throws IOException {\n     LOG.info(\"testDeleteNote\");\n     //Create note and get ID\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     String noteId = note.getId();\n     testDeleteNotebook(noteId);\n   }\n@@ -208,15 +215,15 @@ public void testDeleteNoteBadId() throws IOException {\n   @Test\n   public void testExportNotebook() throws IOException {\n     LOG.info(\"testExportNotebook\");\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"source note for export\");\n     Paragraph paragraph = note.addParagraph();\n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n     paragraph.setConfig(config);\n     paragraph.setText(\"%md This is my new paragraph in my new note\");\n-    note.persist(null);\n+    note.persist(anonymous);\n     String sourceNoteID = note.getId();\n     // Call export Notebook REST API\n     GetMethod get = httpGet(\"/notebook/export/\" + sourceNoteID);\n@@ -230,7 +237,7 @@ public void testExportNotebook() throws IOException {\n     String exportJSON = (String) resp.get(\"body\");\n     assertNotNull(\"Can not find new notejson\", exportJSON);\n     LOG.info(\"export JSON:=\" + exportJSON);\n-    ZeppelinServer.notebook.removeNote(sourceNoteID, null);\n+    ZeppelinServer.notebook.removeNote(sourceNoteID, anonymous);\n     get.releaseConnection();\n \n   }\n@@ -241,15 +248,15 @@ public void testImportNotebook() throws IOException {\n     String noteName = \"source note for import\";\n     LOG.info(\"testImortNotebook\");\n     // create test notebook\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(noteName);\n     Paragraph paragraph = note.addParagraph();\n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n     paragraph.setConfig(config);\n     paragraph.setText(\"%md This is my new paragraph in my new note\");\n-    note.persist(null);\n+    note.persist(anonymous);\n     String sourceNoteID = note.getId();\n     // get note content as JSON\n     String oldJson = getNoteContent(sourceNoteID);\n@@ -267,8 +274,8 @@ public void testImportNotebook() throws IOException {\n     assertEquals(\"Compare paragraphs count\", note.getParagraphs().size(), newNote.getParagraphs()\n         .size());\n     // cleanup\n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n-    ZeppelinServer.notebook.removeNote(newNote.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n+    ZeppelinServer.notebook.removeNote(newNote.getId(), anonymous);\n     importPost.releaseConnection();\n   }\n \n@@ -303,15 +310,15 @@ private void testDeleteNotebook(String notebookId) throws IOException {\n   public void testCloneNotebook() throws IOException, CloneNotSupportedException, IllegalArgumentException {\n     LOG.info(\"testCloneNotebook\");\n     // Create note to clone\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"source note for clone\");\n     Paragraph paragraph = note.addParagraph();\n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n     paragraph.setConfig(config);\n     paragraph.setText(\"%md This is my new paragraph in my new note\");\n-    note.persist(null);\n+    note.persist(anonymous);\n     String sourceNoteID = note.getId();\n \n     String noteName = \"clone Note Name\";\n@@ -331,8 +338,8 @@ public void testCloneNotebook() throws IOException, CloneNotSupportedException,\n     assertEquals(\"Compare note names\", noteName, newNote.getName());\n     assertEquals(\"Compare paragraphs count\", note.getParagraphs().size(), newNote.getParagraphs().size());\n     //cleanup\n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n-    ZeppelinServer.notebook.removeNote(newNote.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n+    ZeppelinServer.notebook.removeNote(newNote.getId(), anonymous);\n     post.releaseConnection();\n   }\n \n@@ -354,7 +361,7 @@ public void testListNotebooks() throws IOException {\n   public void testNoteJobs() throws IOException, InterruptedException {\n     LOG.info(\"testNoteJobs\");\n     // Create note to run test.\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"note for run test\");\n     Paragraph paragraph = note.addParagraph();\n@@ -364,7 +371,7 @@ public void testNoteJobs() throws IOException, InterruptedException {\n     paragraph.setConfig(config);\n     \n     paragraph.setText(\"%md This is test paragraph.\");\n-    note.persist(null);\n+    note.persist(anonymous);\n     String noteID = note.getId();\n \n     note.runAll();\n@@ -402,14 +409,14 @@ public void testNoteJobs() throws IOException, InterruptedException {\n     Thread.sleep(1000);\n     \n     //cleanup\n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testGetNotebookJob() throws IOException, InterruptedException {\n     LOG.info(\"testGetNotebookJob\");\n     // Create note to run test.\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"note for run test\");\n     Paragraph paragraph = note.addParagraph();\n@@ -419,7 +426,8 @@ public void testGetNotebookJob() throws IOException, InterruptedException {\n     paragraph.setConfig(config);\n \n     paragraph.setText(\"%sh sleep 1\");\n-    note.persist(null);\n+    paragraph.setAuthenticationInfo(anonymous);\n+    note.persist(anonymous);\n     String noteID = note.getId();\n \n     note.runAll();\n@@ -455,14 +463,14 @@ public void testGetNotebookJob() throws IOException, InterruptedException {\n       }\n     }\n \n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testRunParagraphWithParams() throws IOException, InterruptedException {\n     LOG.info(\"testRunParagraphWithParams\");\n     // Create note to run test.\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"note for run test\");\n     Paragraph paragraph = note.addParagraph();\n@@ -472,7 +480,7 @@ public void testRunParagraphWithParams() throws IOException, InterruptedExceptio\n     paragraph.setConfig(config);\n \n     paragraph.setText(\"%spark\\nval param = z.input(\\\"param\\\").toString\\nprintln(param)\");\n-    note.persist(null);\n+    note.persist(anonymous);\n     String noteID = note.getId();\n \n     note.runAll();\n@@ -500,13 +508,13 @@ public void testRunParagraphWithParams() throws IOException, InterruptedExceptio\n     assertEquals(\"world\", params.get(\"param2\"));\n \n     //cleanup\n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n-  public void testCronJobs() throws InterruptedException, IOException{\n+  public void testJobs() throws InterruptedException, IOException{\n     // create a note and a paragraph\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n     note.setName(\"note for run test\");\n     Paragraph paragraph = note.addParagraph();\n@@ -550,18 +558,18 @@ public void testCronJobs() throws InterruptedException, IOException{\n     DeleteMethod deleteCron = httpDelete(\"/notebook/cron/\" + note.getId());\n     assertThat(\"\", deleteCron, isAllowed());\n     deleteCron.releaseConnection();\n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testRegressionZEPPELIN_527() throws IOException {\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n     note.setName(\"note for run test\");\n     Paragraph paragraph = note.addParagraph();\n     paragraph.setText(\"%spark\\nval param = z.input(\\\"param\\\").toString\\nprintln(param)\");\n \n-    note.persist(null);\n+    note.persist(anonymous);\n \n     GetMethod getNoteJobs = httpGet(\"/notebook/job/\" + note.getId());\n     assertThat(\"test notebook jobs run:\", getNoteJobs, isAllowed());\n@@ -572,12 +580,12 @@ public void testRegressionZEPPELIN_527() throws IOException {\n     assertFalse(body.get(0).containsKey(\"finished\"));\n     getNoteJobs.releaseConnection();\n \n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testInsertParagraph() throws IOException {\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n     String jsonRequest = \"{\\\"title\\\": \\\"title1\\\", \\\"text\\\": \\\"text1\\\"}\";\n     PostMethod post = httpPost(\"/notebook/\" + note.getId() + \"/paragraph\", jsonRequest);\n@@ -612,17 +620,17 @@ public void testInsertParagraph() throws IOException {\n     assertEquals(\"title2\", paragraphAtIdx0.getTitle());\n     assertEquals(\"text2\", paragraphAtIdx0.getText());\n \n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testGetParagraph() throws IOException {\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n     Paragraph p = note.addParagraph();\n     p.setTitle(\"hello\");\n     p.setText(\"world\");\n-    note.persist(null);\n+    note.persist(anonymous);\n \n     GetMethod get = httpGet(\"/notebook/\" + note.getId() + \"/paragraph/\" + p.getId());\n     LOG.info(\"testGetParagraph response\\n\" + get.getResponseBodyAsString());\n@@ -641,12 +649,12 @@ public void testGetParagraph() throws IOException {\n     assertEquals(\"hello\", body.get(\"title\"));\n     assertEquals(\"world\", body.get(\"text\"));\n \n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testMoveParagraph() throws IOException {\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n     Paragraph p = note.addParagraph();\n     p.setTitle(\"title1\");\n@@ -656,7 +664,7 @@ public void testMoveParagraph() throws IOException {\n     p2.setTitle(\"title2\");\n     p2.setText(\"text2\");\n \n-    note.persist(null);\n+    note.persist(anonymous);\n \n     PostMethod post = httpPost(\"/notebook/\" + note.getId() + \"/paragraph/\" + p2.getId() + \"/move/\" + 0, \"\");\n     assertThat(\"Test post method: \", post, isAllowed());\n@@ -673,18 +681,18 @@ public void testMoveParagraph() throws IOException {\n     assertThat(\"Test post method: \", post2, isBadRequest());\n     post.releaseConnection();\n \n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testDeleteParagraph() throws IOException {\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n     Paragraph p = note.addParagraph();\n     p.setTitle(\"title1\");\n     p.setText(\"text1\");\n \n-    note.persist(null);\n+    note.persist(anonymous);\n \n     DeleteMethod delete = httpDelete(\"/notebook/\" + note.getId() + \"/paragraph/\" + p.getId());\n     assertThat(\"Test delete method: \", delete, isAllowed());\n@@ -694,7 +702,7 @@ public void testDeleteParagraph() throws IOException {\n     Paragraph retrParagrah = retrNote.getParagraph(p.getId());\n     assertNull(\"paragraph should be deleted\", retrParagrah);\n \n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n@@ -710,12 +718,12 @@ public void testSearch() throws IOException {\n     String username = body.get(\"principal\");\n     getSecurityTicket.releaseConnection();\n \n-    Note note1 = ZeppelinServer.notebook.createNote(null);\n+    Note note1 = ZeppelinServer.notebook.createNote(anonymous);\n     String jsonRequest = \"{\\\"title\\\": \\\"title1\\\", \\\"text\\\": \\\"ThisIsToTestSearchMethodWithPermissions 1\\\"}\";\n     PostMethod postNotebookText = httpPost(\"/notebook/\" + note1.getId() + \"/paragraph\", jsonRequest);\n     postNotebookText.releaseConnection();\n \n-    Note note2 = ZeppelinServer.notebook.createNote(null);\n+    Note note2 = ZeppelinServer.notebook.createNote(anonymous);\n     jsonRequest = \"{\\\"title\\\": \\\"title1\\\", \\\"text\\\": \\\"ThisIsToTestSearchMethodWithPermissions 2\\\"}\";\n     postNotebookText = httpPost(\"/notebook/\" + note2.getId() + \"/paragraph\", jsonRequest);\n     postNotebookText.releaseConnection();\n@@ -757,13 +765,13 @@ public void testSearch() throws IOException {\n       getPermission.releaseConnection();\n     }\n     searchNotebook.releaseConnection();\n-    ZeppelinServer.notebook.removeNote(note1.getId(), null);\n-    ZeppelinServer.notebook.removeNote(note2.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note1.getId(), anonymous);\n+    ZeppelinServer.notebook.removeNote(note2.getId(), anonymous);\n   }\n \n   @Test\n   public void testTitleSearch() throws IOException {\n-    Note note = ZeppelinServer.notebook.createNote(null);\n+    Note note = ZeppelinServer.notebook.createNote(anonymous);\n     String jsonRequest = \"{\\\"title\\\": \\\"testTitleSearchOfParagraph\\\", \\\"text\\\": \\\"ThisIsToTestSearchMethodWithTitle \\\"}\";\n     PostMethod postNotebookText = httpPost(\"/notebook/\" + note.getId() + \"/paragraph\", jsonRequest);\n     postNotebookText.releaseConnection();\n@@ -784,7 +792,7 @@ public void testTitleSearch() throws IOException {\n     }\n     assertEquals(\"Paragraph title hits must be at-least one\", true, numberOfTitleHits >= 1);\n     searchNotebook.releaseConnection();\n-    ZeppelinServer.notebook.removeNote(note.getId(), null);\n+    ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }\n \n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "sha": "c2606f82494e8c655617c71ba13f917b79e9fc54",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 14,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java",
                "patch": "@@ -31,7 +31,9 @@\n import org.apache.zeppelin.notebook.Paragraph;\n import org.apache.zeppelin.scheduler.Job.Status;\n import org.apache.zeppelin.server.ZeppelinServer;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -43,6 +45,7 @@\n  */\n public class ZeppelinSparkClusterTest extends AbstractTestRestApi {\n     Gson gson = new Gson();\n+    AuthenticationInfo anonymous;\n \n     @BeforeClass\n     public static void init() throws Exception {\n@@ -54,6 +57,11 @@ public static void destroy() throws Exception {\n         AbstractTestRestApi.shutDown();\n     }\n \n+    @Before\n+    public void setUp() {\n+        anonymous = new AuthenticationInfo(\"anonymous\");\n+    }\n+\n     private void waitForFinish(Paragraph p) {\n         while (p.getStatus() != Status.FINISHED\n                 && p.getStatus() != Status.ERROR\n@@ -69,25 +77,26 @@ private void waitForFinish(Paragraph p) {\n     @Test\n     public void basicRDDTransformationAndActionTest() throws IOException {\n         // create new note\n-        Note note = ZeppelinServer.notebook.createNote(null);\n+        Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n         // run markdown paragraph, again\n         Paragraph p = note.addParagraph();\n         Map config = p.getConfig();\n         config.put(\"enabled\", true);\n         p.setConfig(config);\n         p.setText(\"%spark print(sc.parallelize(1 to 10).reduce(_ + _))\");\n+        p.setAuthenticationInfo(anonymous);\n         note.run(p.getId());\n         waitForFinish(p);\n         assertEquals(Status.FINISHED, p.getStatus());\n         assertEquals(\"55\", p.getResult().message());\n-        ZeppelinServer.notebook.removeNote(note.getId(), null);\n+        ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n     }\n \n     @Test\n     public void sparkSQLTest() throws IOException {\n         // create new note\n-        Note note = ZeppelinServer.notebook.createNote(null);\n+        Note note = ZeppelinServer.notebook.createNote(anonymous);\n         int sparkVersion = getSparkVersionNumber(note);\n         // DataFrame API is available from spark 1.3\n         if (sparkVersion >= 13) {\n@@ -98,6 +107,7 @@ public void sparkSQLTest() throws IOException {\n             p.setConfig(config);\n             p.setText(\"%spark val df=sqlContext.createDataFrame(Seq((\\\"hello\\\",20)))\\n\" +\n                     \"df.collect()\");\n+            p.setAuthenticationInfo(anonymous);\n             note.run(p.getId());\n             waitForFinish(p);\n             assertEquals(Status.FINISHED, p.getStatus());\n@@ -111,6 +121,7 @@ public void sparkSQLTest() throws IOException {\n             p.setConfig(config);\n             p.setText(\"%spark val df=sqlContext.createDataFrame(Seq((\\\"hello\\\",20)))\\n\" +\n                     \"z.show(df)\");\n+            p.setAuthenticationInfo(anonymous);\n             note.run(p.getId());\n             waitForFinish(p);\n             assertEquals(Status.FINISHED, p.getStatus());\n@@ -125,20 +136,21 @@ public void sparkSQLTest() throws IOException {\n                 p.setConfig(config);\n                 p.setText(\"%spark val ds=spark.createDataset(Seq((\\\"hello\\\",20)))\\n\" +\n                         \"z.show(ds)\");\n+                p.setAuthenticationInfo(anonymous);\n                 note.run(p.getId());\n                 waitForFinish(p);\n                 assertEquals(Status.FINISHED, p.getStatus());\n                 assertEquals(InterpreterResult.Type.TABLE, p.getResult().type());\n                 assertEquals(\"_1\\t_2\\nhello\\t20\\n\", p.getResult().message());\n             }\n-            ZeppelinServer.notebook.removeNote(note.getId(), null);\n+            ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n         }\n     }\n \n     @Test\n     public void sparkRTest() throws IOException {\n       // create new note\n-      Note note = ZeppelinServer.notebook.createNote(null);\n+      Note note = ZeppelinServer.notebook.createNote(anonymous);\n       int sparkVersion = getSparkVersionNumber(note);\n \n       if (isSparkR() && sparkVersion >= 14) {   // sparkr supported from 1.4.0\n@@ -165,19 +177,20 @@ public void sparkRTest() throws IOException {\n             \"df <- createDataFrame(\" + sqlContextName + \", localDF)\\n\" +\n             \"count(df)\"\n         );\n+        p.setAuthenticationInfo(anonymous);\n         note.run(p.getId());\n         waitForFinish(p);\n         System.err.println(\"sparkRTest=\" + p.getResult().message());\n         assertEquals(Status.FINISHED, p.getStatus());\n         assertEquals(\"[1] 3\", p.getResult().message());\n       }\n-      ZeppelinServer.notebook.removeNote(note.getId(), null);\n+      ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n     }\n \n     @Test\n     public void pySparkTest() throws IOException {\n         // create new note\n-        Note note = ZeppelinServer.notebook.createNote(null);\n+        Note note = ZeppelinServer.notebook.createNote(anonymous);\n         note.setName(\"note\");\n         int sparkVersion = getSparkVersionNumber(note);\n \n@@ -188,6 +201,7 @@ public void pySparkTest() throws IOException {\n             config.put(\"enabled\", true);\n             p.setConfig(config);\n             p.setText(\"%pyspark print(sc.parallelize(range(1, 11)).reduce(lambda a, b: a + b))\");\n+            p.setAuthenticationInfo(anonymous);\n             note.run(p.getId());\n             waitForFinish(p);\n             assertEquals(Status.FINISHED, p.getStatus());\n@@ -201,6 +215,7 @@ public void pySparkTest() throws IOException {\n                 p.setText(\"%pyspark from pyspark.sql import Row\\n\" +\n                         \"df=sqlContext.createDataFrame([Row(id=1, age=20)])\\n\" +\n                         \"df.collect()\");\n+                p.setAuthenticationInfo(anonymous);\n                 note.run(p.getId());\n                 waitForFinish(p);\n                 assertEquals(Status.FINISHED, p.getStatus());\n@@ -214,6 +229,7 @@ public void pySparkTest() throws IOException {\n                 p.setText(\"%pyspark from pyspark.sql import Row\\n\" +\n                         \"df=sqlContext.createDataFrame([Row(id=1, age=20)])\\n\" +\n                         \"z.show(df)\");\n+                p.setAuthenticationInfo(anonymous);\n                 note.run(p.getId());\n                 waitForFinish(p);\n                 assertEquals(Status.FINISHED, p.getStatus());\n@@ -228,6 +244,7 @@ public void pySparkTest() throws IOException {\n                 p.setConfig(config);\n                 p.setText(\"%pyspark sqlContext.udf.register(\\\"f1\\\", lambda x: len(x))\\n\" +\n                        \"sqlContext.sql(\\\"select f1(\\\\\\\"abc\\\\\\\") as len\\\").collect()\");\n+                p.setAuthenticationInfo(anonymous);\n                 note.run(p.getId());\n                 waitForFinish(p);\n                 assertEquals(Status.FINISHED, p.getStatus());\n@@ -242,6 +259,7 @@ public void pySparkTest() throws IOException {\n                 p.setText(\"%pyspark from pyspark.sql import Row\\n\" +\n                         \"df=sqlContext.createDataFrame([Row(id=1, age=20)])\\n\" +\n                         \"df.collect()\");\n+                p.setAuthenticationInfo(anonymous);\n                 note.run(p.getId());\n                 waitForFinish(p);\n                 assertEquals(Status.FINISHED, p.getStatus());\n@@ -255,19 +273,20 @@ public void pySparkTest() throws IOException {\n                 // use SQLContext to register UDF but use this UDF through SparkSession\n                 p.setText(\"%pyspark sqlContext.udf.register(\\\"f1\\\", lambda x: len(x))\\n\" +\n                         \"spark.sql(\\\"select f1(\\\\\\\"abc\\\\\\\") as len\\\").collect()\");\n+                p.setAuthenticationInfo(anonymous);\n                 note.run(p.getId());\n                 waitForFinish(p);\n                 assertEquals(Status.FINISHED, p.getStatus());\n                 assertEquals(\"[Row(len=u'3')]\\n\", p.getResult().message());\n             }\n         }\n-        ZeppelinServer.notebook.removeNote(note.getId(), null);\n+        ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n     }\n \n     @Test\n     public void pySparkAutoConvertOptionTest() throws IOException {\n         // create new note\n-        Note note = ZeppelinServer.notebook.createNote(null);\n+        Note note = ZeppelinServer.notebook.createNote(anonymous);\n         note.setName(\"note\");\n \n         int sparkVersionNumber = getSparkVersionNumber(note);\n@@ -286,33 +305,37 @@ public void pySparkAutoConvertOptionTest() throws IOException {\n \n             p.setText(\"%pyspark\\nfrom pyspark.sql.functions import *\\n\"\n                     + \"print(\" + sqlContextName + \".range(0, 10).withColumn('uniform', rand(seed=10) * 3.14).count())\");\n+            p.setAuthenticationInfo(anonymous);\n             note.run(p.getId());\n             waitForFinish(p);\n             assertEquals(Status.FINISHED, p.getStatus());\n             assertEquals(\"10\\n\", p.getResult().message());\n         }\n-        ZeppelinServer.notebook.removeNote(note.getId(), null);\n+        ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n     }\n \n     @Test\n     public void zRunTest() throws IOException {\n         // create new note\n-        Note note = ZeppelinServer.notebook.createNote(null);\n+        Note note = ZeppelinServer.notebook.createNote(anonymous);\n         Paragraph p0 = note.addParagraph();\n         Map config0 = p0.getConfig();\n         config0.put(\"enabled\", true);\n         p0.setConfig(config0);\n         p0.setText(\"%spark z.run(1)\");\n+        p0.setAuthenticationInfo(anonymous);\n         Paragraph p1 = note.addParagraph();\n         Map config1 = p1.getConfig();\n         config1.put(\"enabled\", true);\n         p1.setConfig(config1);\n         p1.setText(\"%spark val a=10\");\n+        p1.setAuthenticationInfo(anonymous);\n         Paragraph p2 = note.addParagraph();\n         Map config2 = p2.getConfig();\n         config2.put(\"enabled\", true);\n         p2.setConfig(config2);\n         p2.setText(\"%spark print(a)\");\n+        p2.setAuthenticationInfo(anonymous);\n \n         note.run(p0.getId());\n         waitForFinish(p0);\n@@ -323,13 +346,13 @@ public void zRunTest() throws IOException {\n         assertEquals(Status.FINISHED, p2.getStatus());\n         assertEquals(\"10\", p2.getResult().message());\n \n-        ZeppelinServer.notebook.removeNote(note.getId(), null);\n+        ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n     }\n \n     @Test\n     public void pySparkDepLoaderTest() throws IOException {\n         // create new note\n-        Note note = ZeppelinServer.notebook.createNote(null);\n+        Note note = ZeppelinServer.notebook.createNote(anonymous);\n         int sparkVersionNumber = getSparkVersionNumber(note);\n \n         if (isPyspark() && sparkVersionNumber >= 14) {\n@@ -350,6 +373,7 @@ public void pySparkDepLoaderTest() throws IOException {\n             config.put(\"enabled\", true);\n             p0.setConfig(config);\n             p0.setText(\"%dep z.load(\\\"com.databricks:spark-csv_2.11:1.2.0\\\")\");\n+            p0.setAuthenticationInfo(anonymous);\n             note.run(p0.getId());\n             waitForFinish(p0);\n             assertEquals(Status.FINISHED, p0.getStatus());\n@@ -370,13 +394,14 @@ public void pySparkDepLoaderTest() throws IOException {\n                     \"from pyspark.sql import SQLContext\\n\" +\n                     \"print(\" + sqlContextName + \".read.format('com.databricks.spark.csv')\" +\n                     \".load('\"+ tmpFile.getAbsolutePath() +\"').count())\");\n+            p1.setAuthenticationInfo(anonymous);\n             note.run(p1.getId());\n \n             waitForFinish(p1);\n             assertEquals(Status.FINISHED, p1.getStatus());\n             assertEquals(\"2\\n\", p1.getResult().message());\n         }\n-        ZeppelinServer.notebook.removeNote(note.getId(), null);\n+        ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n     }\n \n     /**\n@@ -390,6 +415,7 @@ private int getSparkVersionNumber(Note note) {\n         config.put(\"enabled\", true);\n         p.setConfig(config);\n         p.setText(\"%spark print(sc.version)\");\n+        p.setAuthenticationInfo(anonymous);\n         note.run(p.getId());\n         waitForFinish(p);\n         assertEquals(Status.FINISHED, p.getStatus());",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java",
                "sha": "740ef4066c442ff4d852eb130c32fa0c7e2f6fa4",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 4,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.zeppelin.notebook.socket.Message.OP;\n import org.apache.zeppelin.rest.AbstractTestRestApi;\n import org.apache.zeppelin.server.ZeppelinServer;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n@@ -57,6 +58,7 @@\n   private static NotebookServer notebookServer;\n   private static Gson gson;\n   private HttpServletRequest mockRequest;\n+  private AuthenticationInfo anonymous;\n \n   @BeforeClass\n   public static void init() throws Exception {\n@@ -74,6 +76,7 @@ public static void destroy() throws Exception {\n   @Before\n   public void setUp() {\n     mockRequest = mock(HttpServletRequest.class);\n+    anonymous = new AuthenticationInfo(\"anonymous\");\n   }\n \n   @Test\n@@ -94,21 +97,22 @@ public void checkInvalidOrigin(){\n   @Test\n   public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() throws IOException {\n     // create a notebook\n-    Note note1 = notebook.createNote(null);\n+    Note note1 = notebook.createNote(anonymous);\n \n     // get reference to interpreterGroup\n     InterpreterGroup interpreterGroup = null;\n     List<InterpreterSetting> settings = notebook.getInterpreterFactory().getInterpreterSettings(note1.getId());\n     for (InterpreterSetting setting : settings) {\n       if (setting.getName().equals(\"md\")) {\n-        interpreterGroup = setting.getInterpreterGroup(\"sharedProcess\");\n+        interpreterGroup = setting.getInterpreterGroup(\"anonymous\", \"sharedProcess\");\n         break;\n       }\n     }\n \n     // start interpreter process\n     Paragraph p1 = note1.addParagraph();\n     p1.setText(\"%md start remote interpreter process\");\n+    p1.setAuthenticationInfo(anonymous);\n     note1.run(p1.getId());\n \n     // add angularObject\n@@ -144,7 +148,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr\n     verify(sock1, times(0)).send(anyString());\n     verify(sock2, times(1)).send(anyString());\n \n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n   }\n \n   @Test\n@@ -167,7 +171,7 @@ public void testImportNotebook() throws IOException {\n     assertNotEquals(null, notebook.getNote(note.getId()));\n     assertEquals(\"Test Zeppelin notebook import\", notebook.getNote(note.getId()).getName());\n     assertEquals(\"Test paragraphs import\", notebook.getNote(note.getId()).getParagraphs().get(0).getText());\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java",
                "sha": "caac04349e2ef1bad1a06fba87afe58853e14ea9",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 4,
                "filename": "zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html",
                "patch": "@@ -37,23 +37,31 @@ <h4>Create new interpreter</h4>\n \n         <div>\n           <h5>Option</h5>\n+          <span class=\"checkbox input-group\">\n+            <label><input type=\"checkbox\" style=\"width:0%;height:0%\" id=\"perNote\" ng-model=\"newInterpreterSetting.option.perNote\"/>\n+            perNote </label>\n+          </span>\n+          <span class=\"checkbox input-group\">\n+            <label><input type=\"checkbox\" style=\"width:0%;height:0%\" id=\"perUser\" ng-model=\"newInterpreterSetting.option.perUser\"/>\n+            perUser</label>\n+          </span>\n           <span class=\"btn-group\">\n             <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n                     data-toggle=\"dropdown\">\n-              {{getSessionOption(setting.id)}} <span class=\"caret\"></span>\n+              {{getSessionOption(newInterpreterSetting.id)}} <span class=\"caret\"></span>\n             </button>\n             <ul class=\"dropdown-menu\" role=\"menu\">\n               <li>\n                 <a style=\"cursor:pointer\"\n                    tooltip=\"Single interpreter instance are shared across notes\"\n-                   ng-click=\"setSessionOption(setting.id, 'shared')\">\n+                   ng-click=\"setSessionOption(newInterpreterSetting.id, 'shared')\">\n                   shared\n                 </a>\n               </li>\n               <li>\n                 <a style=\"cursor:pointer\"\n                    tooltip=\"Separate Interpreter instance for each note\"\n-                   ng-click=\"setSessionOption(setting.id, 'scoped')\">\n+                   ng-click=\"setSessionOption(newInterpreterSetting.id, 'scoped')\">\n                   scoped\n                 </a>\n               </li>\n@@ -66,7 +74,6 @@ <h5>Option</h5>\n               </li>\n             </ul>\n           </span>\n-          <span>Interpreter for note</span>\n         </div>\n \n         <div class=\"row interpreter\" style=\"margin-top: 5px;\">",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html",
                "sha": "2638dd84e3ae1c2840cef414d44652fd4735e0b6",
                "status": "modified"
            },
            {
                "additions": 117,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "changes": 131,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter.controller.js?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 14,
                "filename": "zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "patch": "@@ -16,9 +16,9 @@\n \n   angular.module('zeppelinWebApp').controller('InterpreterCtrl', InterpreterCtrl);\n \n-  InterpreterCtrl.$inject = ['$scope', '$http', 'baseUrlSrv', 'ngToast', '$timeout', '$route'];\n+  InterpreterCtrl.$inject = ['$rootScope', '$scope', '$http', 'baseUrlSrv', 'ngToast', '$timeout', '$route'];\n \n-  function InterpreterCtrl($scope, $http, baseUrlSrv, ngToast, $timeout, $route) {\n+  function InterpreterCtrl($rootScope, $scope, $http, baseUrlSrv, ngToast, $timeout, $route) {\n     var interpreterSettingsTmp = [];\n     $scope.interpreterSettings = [];\n     $scope.availableInterpreters = {};\n@@ -156,7 +156,7 @@\n       interpreterSettingsTmp[index] = angular.copy($scope.interpreterSettings[index]);\n     };\n \n-    $scope.setSessionOption = function(settingId, sessionOption) {\n+    $scope.setPerNoteOption = function(settingId, sessionOption) {\n       var option;\n       if (settingId === undefined) {\n         option = $scope.newInterpreterSetting.option;\n@@ -167,18 +167,21 @@\n       }\n \n       if (sessionOption === 'isolated') {\n-        option.perNoteSession = false;\n-        option.perNoteProcess = true;\n+        option.perNote = sessionOption;\n+        option.session = false;\n+        option.process = true;\n       } else if (sessionOption === 'scoped') {\n-        option.perNoteSession = true;\n-        option.perNoteProcess = false;\n+        option.perNote = sessionOption;\n+        option.session = true;\n+        option.process = false;\n       } else {\n-        option.perNoteSession = false;\n-        option.perNoteProcess = false;\n+        option.perNote = 'shared';\n+        option.session = false;\n+        option.process = false;\n       }\n     };\n \n-    $scope.getSessionOption = function(settingId) {\n+    $scope.setPerUserOption = function(settingId, sessionOption) {\n       var option;\n       if (settingId === undefined) {\n         option = $scope.newInterpreterSetting.option;\n@@ -187,15 +190,115 @@\n         var setting = $scope.interpreterSettings[index];\n         option = setting.option;\n       }\n-      if (option.perNoteSession) {\n+\n+      if (sessionOption === 'isolated') {\n+        option.perUser = sessionOption;\n+        option.session = false;\n+        option.process = true;\n+      } else if (sessionOption === 'scoped') {\n+        option.perUser = sessionOption;\n+        option.session = true;\n+        option.process = false;\n+      } else {\n+        option.perUser = 'shared';\n+        option.session = false;\n+        option.process = false;\n+      }\n+    };\n+\n+    $scope.getPerNoteOption = function(settingId) {\n+      var option;\n+      if (settingId === undefined) {\n+        option = $scope.newInterpreterSetting.option;\n+      } else {\n+        var index = _.findIndex($scope.interpreterSettings, {'id': settingId});\n+        var setting = $scope.interpreterSettings[index];\n+        option = setting.option;\n+      }\n+\n+      if (option.perNote === 'scoped') {\n+        return 'scoped';\n+      } else if (option.perNote === 'isolated') {\n+        return 'isolated';\n+      } else {\n+        return 'shared';\n+      }\n+    };\n+\n+    $scope.getPerUserOption = function(settingId) {\n+      var option;\n+      if (settingId === undefined) {\n+        option = $scope.newInterpreterSetting.option;\n+      } else {\n+        var index = _.findIndex($scope.interpreterSettings, {'id': settingId});\n+        var setting = $scope.interpreterSettings[index];\n+        option = setting.option;\n+      }\n+\n+      if (option.perUser === 'scoped') {\n         return 'scoped';\n-      } else if (option.perNoteProcess) {\n+      } else if (option.perUser === 'isolated') {\n         return 'isolated';\n       } else {\n         return 'shared';\n       }\n     };\n \n+    $scope.getInterpreterRunningOption = function(settingId) {\n+      var sharedModeName = 'shared';\n+\n+      var globallyModeName = 'Globally';\n+      var perNoteModeName = 'Per Note';\n+      var perUserModeName = 'Per User';\n+\n+      var option;\n+      if (settingId === undefined) {\n+        option = $scope.newInterpreterSetting.option;\n+      } else {\n+        var index = _.findIndex($scope.interpreterSettings, {'id': settingId});\n+        var setting = $scope.interpreterSettings[index];\n+        option = setting.option;\n+      }\n+\n+      var perNote = option.perNote;\n+      var perUser = option.perUser;\n+\n+      // Globally == shared_perNote + shared_perUser\n+      if (perNote === sharedModeName && perUser === sharedModeName) {\n+        return globallyModeName;\n+      }\n+\n+      if ($rootScope.ticket.ticket === 'anonymous' && $rootScope.ticket.roles === '[]') {\n+        if (perNote !== undefined && typeof perNote === 'string' && perNote !== '') {\n+          return perNoteModeName;\n+        }\n+      } else if ($rootScope.ticket.ticket !== 'anonymous') {\n+        if (perNote !== undefined && typeof perNote === 'string' && perNote !== '') {\n+          if (perUser !== undefined && typeof perUser === 'string' && perUser !== '') {\n+            return perUserModeName;\n+          }\n+          return perNoteModeName;\n+        }\n+      }\n+\n+      option.perNote = sharedModeName;\n+      option.perUser = sharedModeName;\n+      return globallyModeName;\n+    };\n+\n+    $scope.setInterpreterRunningOption = function(settingId, isPerNoteMode, isPerUserMode) {\n+      var option;\n+      if (settingId === undefined) {\n+        option = $scope.newInterpreterSetting.option;\n+      } else {\n+        var index = _.findIndex($scope.interpreterSettings, {'id': settingId});\n+        var setting = $scope.interpreterSettings[index];\n+        option = setting.option;\n+      }\n+      option.perNote = isPerNoteMode;\n+      option.perUser = isPerUserMode;\n+    };\n+\n     $scope.updateInterpreterSetting = function(form, settingId) {\n       var thisConfirm = BootstrapDialog.confirm({\n         closable: false,\n@@ -402,8 +505,8 @@\n           remote: true,\n           isExistingProcess: false,\n           setPermission: false,\n-          perNoteSession: false,\n-          perNoteProcess: false\n+          session: false,\n+          process: false\n \n         }\n       };",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "sha": "0669ff8f38a6faea2b3dabe5d00b6f57f8cd2362",
                "status": "modified"
            },
            {
                "additions": 163,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-web/src/app/interpreter/interpreter.html",
                "changes": 194,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter.html?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 31,
                "filename": "zeppelin-web/src/app/interpreter/interpreter.html",
                "patch": "@@ -141,40 +141,172 @@ <h3 class=\"interpreter-title\">{{setting.name}}\n         </span>\n       </div>\n     </div>\n+\n     <div class=\"row interpreter\">\n       <div class=\"col-md-12\">\n         <h5>Option</h5>\n-        <span class=\"btn-group\">\n-          <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n-                  data-toggle=\"dropdown\"\n-                  ng-disabled=\"!valueform.$visible\">\n-            {{getSessionOption(setting.id)}} <span class=\"caret\"></span>\n-          </button>\n-          <ul class=\"dropdown-menu\" role=\"menu\">\n-            <li>\n-              <a style=\"cursor:pointer\"\n-                 tooltip=\"Single interpreter instance are shared across notes\"\n-                 ng-click=\"setSessionOption(setting.id, 'shared')\">\n-                shared\n-              </a>\n-            </li>\n-            <li>\n-              <a style=\"cursor:pointer\"\n-                 tooltip=\"Separate Interpreter instance for each note\"\n-                 ng-click=\"setSessionOption(setting.id, 'scoped')\">\n-                scoped\n-              </a>\n-            </li>\n-            <li>\n-              <a style=\"cursor:pointer\"\n-                 tooltip=\"Separate Interpreter process for each note\"\n-                 ng-click=\"setSessionOption(setting.id, 'isolated')\">\n-                isolated\n-              </a>\n-            </li>\n-          </ul>\n-        </span>\n-        <span>Interpreter for note</span>\n+        <div class=\"row interpreter\" style=\"margin-top: 5px;\">\n+          <div class=\"col-md-6\">\n+            The interpreter will be instantiated\n+            <span class=\"btn-group\">\n+              <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n+                      data-toggle=\"dropdown\"\n+                      ng-disabled=\"!valueform.$visible\">\n+                {{getInterpreterRunningOption(setting.id)}} <span class=\"caret\"></span>\n+              </button>\n+              <ul class=\"dropdown-menu\" role=\"menu\">\n+                <li>\n+                  <a style=\"cursor:pointer\"\n+                     ng-click=\"setInterpreterRunningOption(setting.id, 'shared', 'shared')\">\n+                    Globally\n+                  </a>\n+                </li>\n+                <li>\n+                  <a style=\"cursor:pointer\"\n+                     ng-click=\"setInterpreterRunningOption(setting.id, 'scoped', '')\">\n+                    Per Note\n+                  </a>\n+                </li>\n+                <li ng-if=\"ticket.ticket !== 'anonymous' && ticket.roles !== '[]'\">\n+                  <a style=\"cursor:pointer\"\n+                     ng-click=\"setInterpreterRunningOption(setting.id, 'shared', 'scoped')\">\n+                    Per User\n+                  </a>\n+                </li>\n+              </ul>\n+            </span>\n+            in\n+            <span class=\"btn-group\">\n+              <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n+                      data-toggle=\"dropdown\"\n+                      ng-disabled=\"!valueform.$visible\n+                                   || getInterpreterRunningOption(setting.id) === 'Globally'\">\n+                <span ng-if=\"getInterpreterRunningOption(setting.id) !== 'Per User'\">\n+                  {{getPerNoteOption(setting.id)}}\n+                </span>\n+                <span ng-if=\"getInterpreterRunningOption(setting.id) === 'Per User'\">\n+                  {{getPerUserOption(setting.id)}}\n+                </span>\n+                  <span class=\"caret\"></span>\n+              </button>\n+              <ul class=\"dropdown-menu\" role=\"menu\">\n+                <li\n+                  ng-if=\"getInterpreterRunningOption(setting.id) === 'Globally'\">\n+                  <a style=\"cursor:pointer\"\n+                     tooltip=\"Single interpreter instance are shared across notes\"\n+                     ng-click=\"setPerNoteOption(setting.id, 'shared')\">\n+                    shared per note\n+                  </a>\n+                </li>\n+\n+                <li>\n+                  <a style=\"cursor:pointer\"\n+                     ng-if=\"getInterpreterRunningOption(setting.id) === 'Per Note'\"\n+                     tooltip=\"Separate Interpreter instance for each note\"\n+                     ng-click=\"setPerNoteOption(setting.id, 'scoped')\">\n+                    scoped per note\n+                  </a>\n+                </li>\n+                <li>\n+                  <a style=\"cursor:pointer\"\n+                     ng-if=\"getInterpreterRunningOption(setting.id) === 'Per User'\"\n+                     tooltip=\"Separate Interpreter instance for each note\"\n+                     ng-click=\"setPerUserOption(setting.id, 'scoped')\">\n+                    scoped per user\n+                  </a>\n+                </li>\n+\n+                <li>\n+                  <a style=\"cursor:pointer\"\n+                     ng-if=\"getInterpreterRunningOption(setting.id) === 'Per Note'\"\n+                     tooltip=\"Separate Interpreter process for each note\"\n+                     ng-click=\"setPerNoteOption(setting.id, 'isolated')\">\n+                    isolated per note\n+                  </a>\n+                </li>\n+                <li>\n+                  <a style=\"cursor:pointer\"\n+                     ng-if=\"getInterpreterRunningOption(setting.id) === 'Per User'\"\n+                     tooltip=\"Separate Interpreter process for each note\"\n+                     ng-click=\"setPerUserOption(setting.id, 'isolated')\">\n+                    isolated per user\n+                  </a>\n+                </li>\n+              </ul>\n+            </span>\n+            process.\n+            <span ng-if=\"getInterpreterRunningOption(setting.id) === 'Per User' && ticket.ticket !== 'anonymous' && ticket.roles !== '[]'\">\n+              <span ng-if=\"getPerNoteOption(setting.id) === 'shared'\">\n+                <button type=\"button\" class=\"btn btn-default btn-xs\"\n+                        ng-click=\"setPerNoteOption(setting.id, 'scoped')\"\n+                        ng-disabled=\"!valueform.$visible\"\n+                        data-toggle=\"dropdown\">\n+                  <i class=\"fa fa-plus\"></i>\n+                </button>\n+              </span>\n+            </span>\n+          </div>\n+          <div class=\"col-md-6\">\n+            &nbsp;\n+          </div>\n+        </div>\n+        <div class=\"row interpreter\" style=\"margin-top: 6px;\">\n+          <div class=\"col-md-6\">\n+            <span ng-if=\"getInterpreterRunningOption(setting.id) === 'Per User' && ticket.ticket !== 'anonymous' && ticket.roles !== '[]'\">\n+              <span ng-if=\"getPerNoteOption(setting.id) !== 'shared'\">\n+                <span class=\"hidden-xs\" style=\"padding-left: 190px;\">And </span>\n+                <span class=\"visible-xs\" style=\"padding-left: 0px;\">And </span>\n+                <span class=\"btn-group\">\n+                  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n+                          data-toggle=\"dropdown\"\n+                          ng-disabled=\"true\">\n+                    <span>\n+                      Per Note\n+                    </span>\n+                    <span class=\"caret\"></span>\n+                  </button>\n+                </span>\n+                in\n+                <span class=\"btn-group\">\n+                  <button type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\"\n+                          data-toggle=\"dropdown\"\n+                          ng-disabled=\"!valueform.$visible\">\n+                    <span>\n+                      {{getPerNoteOption(setting.id)}}\n+                    </span>\n+                    <span class=\"caret\"></span>\n+                  </button>\n+                  <ul class=\"dropdown-menu\" role=\"menu\">\n+                    <li>\n+                      <a style=\"cursor:pointer\"\n+                         tooltip=\"Separate Interpreter instance for each note\"\n+                         ng-click=\"setPerNoteOption(setting.id, 'scoped')\">\n+                        scoped per note\n+                      </a>\n+                    </li>\n+                    <li>\n+                      <a style=\"cursor:pointer\"\n+                         tooltip=\"Separate Interpreter process for each note\"\n+                         ng-click=\"setPerNoteOption(setting.id, 'isolated')\">\n+                        isolated per note\n+                      </a>\n+                    </li>\n+                  </ul>\n+                </span>\n+                process.\n+                <button type=\"button\" class=\"btn btn-default btn-xs\"\n+                        ng-disabled=\"!valueform.$visible\"\n+                        ng-click=\"setPerNoteOption(setting.id, 'shared')\"\n+                        data-toggle=\"dropdown\">\n+                  <i class=\"fa fa-minus\"></i>\n+                </button>\n+              </span>\n+            </span>\n+          </div>\n+          <div class=\"col-md-6\">\n+            &nbsp;\n+          </div>\n+        </div>\n       </div>\n     </div>\n     <div class=\"row interpreter\" style=\"margin-top: 5px;\">",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-web/src/app/interpreter/interpreter.html",
                "sha": "e0e861343b9c82c32efd8d18cb3bd5c6d9c8578d",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "changes": 109,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 46,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "patch": "@@ -121,32 +121,35 @@\n \n   private DependencyResolver depResolver;\n \n+  private boolean shiroEnabled;\n+\n   private Map<String, String> env = new HashMap<>();\n \n   private Interpreter devInterpreter;\n \n   public InterpreterFactory(ZeppelinConfiguration conf,\n       AngularObjectRegistryListener angularObjectRegistryListener,\n       RemoteInterpreterProcessListener remoteInterpreterProcessListener,\n-      ApplicationEventListener appEventListener, DependencyResolver depResolver)\n-      throws InterpreterException, IOException, RepositoryException {\n+      ApplicationEventListener appEventListener, DependencyResolver depResolver,\n+      boolean shiroEnabled) throws InterpreterException, IOException, RepositoryException {\n     this(conf, new InterpreterOption(true), angularObjectRegistryListener,\n-        remoteInterpreterProcessListener, appEventListener, depResolver);\n+        remoteInterpreterProcessListener, appEventListener, depResolver, shiroEnabled);\n   }\n \n \n   public InterpreterFactory(ZeppelinConfiguration conf, InterpreterOption defaultOption,\n       AngularObjectRegistryListener angularObjectRegistryListener,\n       RemoteInterpreterProcessListener remoteInterpreterProcessListener,\n-      ApplicationEventListener appEventListener, DependencyResolver depResolver)\n-      throws InterpreterException, IOException, RepositoryException {\n+      ApplicationEventListener appEventListener, DependencyResolver depResolver,\n+      boolean shiroEnabled) throws InterpreterException, IOException, RepositoryException {\n     this.conf = conf;\n     this.defaultOption = defaultOption;\n     this.angularObjectRegistryListener = angularObjectRegistryListener;\n     this.depResolver = depResolver;\n     this.interpreterRepositories = depResolver.getRepos();\n     this.remoteInterpreterProcessListener = remoteInterpreterProcessListener;\n     this.appEventListener = appEventListener;\n+    this.shiroEnabled = shiroEnabled;\n     String replsConf = conf.getString(ConfVars.ZEPPELIN_INTERPRETERS);\n     interpreterClassList = replsConf.split(\",\");\n     String groupOrder = conf.getString(ConfVars.ZEPPELIN_INTERPRETER_GROUP_ORDER);\n@@ -157,6 +160,8 @@ public InterpreterFactory(ZeppelinConfiguration conf, InterpreterOption defaultO\n     gson = builder.create();\n \n     init();\n+\n+    logger.info(\"shiroEnabled: {}\", shiroEnabled);\n   }\n \n   private void init() throws InterpreterException, IOException, RepositoryException {\n@@ -698,26 +703,28 @@ public InterpreterGroup createInterpreterGroup(String id, InterpreterOption opti\n     return interpreterGroup;\n   }\n \n-  public void removeInterpretersForNote(InterpreterSetting interpreterSetting, String noteId) {\n-    if (interpreterSetting.getOption().isPerNoteProcess()) {\n+  public void removeInterpretersForNote(InterpreterSetting interpreterSetting, String user,\n+      String noteId) {\n+    InterpreterOption option = interpreterSetting.getOption();\n+    if (option.isProcess()) {\n       interpreterSetting.closeAndRemoveInterpreterGroup(noteId);\n-    } else if (interpreterSetting.getOption().isPerNoteSession()) {\n-      InterpreterGroup interpreterGroup = interpreterSetting.getInterpreterGroup(noteId);\n-\n-      interpreterGroup.close(noteId);\n-      interpreterGroup.destroy(noteId);\n+    } else if (option.isSession()) {\n+      InterpreterGroup interpreterGroup = interpreterSetting.getInterpreterGroup(user, noteId);\n+      String key = getInterpreterInstanceKey(user, noteId, interpreterSetting);\n+      interpreterGroup.close(key);\n+      interpreterGroup.destroy(key);\n       synchronized (interpreterGroup) {\n-        interpreterGroup.remove(noteId);\n+        interpreterGroup.remove(key);\n         interpreterGroup.notifyAll(); // notify createInterpreterForNote()\n       }\n       logger.info(\"Interpreter instance {} for note {} is removed\", interpreterSetting.getName(),\n           noteId);\n     }\n   }\n \n-  public void createInterpretersForNote(InterpreterSetting interpreterSetting, String noteId,\n-      String key) {\n-    InterpreterGroup interpreterGroup = interpreterSetting.getInterpreterGroup(noteId);\n+  public void createInterpretersForNote(InterpreterSetting interpreterSetting, String user,\n+      String noteId, String key) {\n+    InterpreterGroup interpreterGroup = interpreterSetting.getInterpreterGroup(user, noteId);\n     InterpreterOption option = interpreterSetting.getOption();\n     Properties properties = interpreterSetting.getProperties();\n     if (option.isExistingProcess) {\n@@ -861,8 +868,8 @@ public InterpreterSetting get(String name) {\n     }\n   }\n \n-  private void putNoteInterpreterSettingBinding(String noteId, List<String> settingList)\n-      throws IOException {\n+  private void putNoteInterpreterSettingBinding(String user, String noteId,\n+      List<String> settingList) throws IOException {\n     List<String> unBindedSettings = new LinkedList<>();\n \n     synchronized (interpreterSettings) {\n@@ -879,18 +886,18 @@ private void putNoteInterpreterSettingBinding(String noteId, List<String> settin\n \n       for (String settingId : unBindedSettings) {\n         InterpreterSetting setting = get(settingId);\n-        removeInterpretersForNote(setting, noteId);\n+        removeInterpretersForNote(setting, user, noteId);\n       }\n     }\n   }\n \n-  public void removeNoteInterpreterSettingBinding(String noteId) {\n+  public void removeNoteInterpreterSettingBinding(String user, String noteId) {\n     synchronized (interpreterSettings) {\n       List<String> settingIds = (interpreterBindings.containsKey(noteId) ?\n           interpreterBindings.remove(noteId) :\n           Collections.<String>emptyList());\n       for (String settingId : settingIds) {\n-        this.removeInterpretersForNote(get(settingId), noteId);\n+        this.removeInterpretersForNote(get(settingId), user, noteId);\n       }\n     }\n   }\n@@ -1093,8 +1100,8 @@ private Interpreter createRemoteRepl(String interpreterPath, String noteId, Stri\n    * @param ids    InterpreterSetting id list\n    * @throws IOException\n    */\n-  public void setInterpreters(String noteId, List<String> ids) throws IOException {\n-    putNoteInterpreterSettingBinding(noteId, ids);\n+  public void setInterpreters(String user, String noteId, List<String> ids) throws IOException {\n+    putNoteInterpreterSettingBinding(user, noteId, ids);\n   }\n \n   public List<String> getInterpreters(String noteId) {\n@@ -1119,7 +1126,7 @@ public void setInterpreters(String noteId, List<String> ids) throws IOException\n     return settings;\n   }\n \n-  public void closeNote(String noteId) {\n+  public void closeNote(String user, String noteId) {\n     // close interpreters in this note session\n     List<InterpreterSetting> settings = getInterpreterSettings(noteId);\n     if (settings == null || settings.size() == 0) {\n@@ -1128,28 +1135,37 @@ public void closeNote(String noteId) {\n \n     logger.info(\"closeNote: {}\", noteId);\n     for (InterpreterSetting setting : settings) {\n-      removeInterpretersForNote(setting, noteId);\n+      removeInterpretersForNote(setting, user, noteId);\n     }\n   }\n \n-  private String getInterpreterInstanceKey(String noteId, InterpreterSetting setting) {\n-    if (setting.getOption().isExistingProcess()) {\n-      return Constants.EXISTING_PROCESS;\n-    } else if (setting.getOption().isPerNoteSession() || setting.getOption().isPerNoteProcess()) {\n-      return noteId;\n+  private String getInterpreterInstanceKey(String user, String noteId, InterpreterSetting setting) {\n+    InterpreterOption option = setting.getOption();\n+    String key;\n+    if (option.isExistingProcess()) {\n+      key = Constants.EXISTING_PROCESS;\n+    } else if (!option.perNoteShared()) {\n+      key = noteId;\n+      if (shiroEnabled && !option.perUserShared()) {\n+        key = user + \":\" + key;\n+      }\n     } else {\n-      return SHARED_SESSION;\n+      key = SHARED_SESSION;\n     }\n+\n+    logger.debug(\"Interpreter instance key: {}\", key);\n+    return key;\n   }\n \n-  private List<Interpreter> createOrGetInterpreterList(String noteId, InterpreterSetting setting) {\n-    InterpreterGroup interpreterGroup = setting.getInterpreterGroup(noteId);\n+  private List<Interpreter> createOrGetInterpreterList(String user, String noteId,\n+      InterpreterSetting setting) {\n+    InterpreterGroup interpreterGroup = setting.getInterpreterGroup(user, noteId);\n     synchronized (interpreterGroup) {\n-      String key = getInterpreterInstanceKey(noteId, setting);\n+      String key = getInterpreterInstanceKey(user, noteId, setting);\n       if (!interpreterGroup.containsKey(key)) {\n-        createInterpretersForNote(setting, noteId, key);\n+        createInterpretersForNote(setting, user, noteId, key);\n       }\n-      return interpreterGroup.get(getInterpreterInstanceKey(noteId, setting));\n+      return interpreterGroup.get(getInterpreterInstanceKey(user, noteId, setting));\n     }\n   }\n \n@@ -1190,14 +1206,15 @@ private String getInterpreterClassFromInterpreterSetting(InterpreterSetting sett\n     return null;\n   }\n \n-  private Interpreter getInterpreter(String noteId, InterpreterSetting setting, String name) {\n+  private Interpreter getInterpreter(String user, String noteId, InterpreterSetting setting,\n+      String name) {\n     Preconditions.checkNotNull(noteId, \"noteId should be not null\");\n     Preconditions.checkNotNull(setting, \"setting should be not null\");\n     Preconditions.checkNotNull(name, \"name should be not null\");\n \n     String className;\n     if (null != (className = getInterpreterClassFromInterpreterSetting(setting, name))) {\n-      List<Interpreter> interpreterGroup = createOrGetInterpreterList(noteId, setting);\n+      List<Interpreter> interpreterGroup = createOrGetInterpreterList(user, noteId, setting);\n       for (Interpreter interpreter : interpreterGroup) {\n         if (className.equals(interpreter.getClassName())) {\n           return interpreter;\n@@ -1207,7 +1224,7 @@ private Interpreter getInterpreter(String noteId, InterpreterSetting setting, St\n     return null;\n   }\n \n-  public Interpreter getInterpreter(String noteId, String replName) {\n+  public Interpreter getInterpreter(String user, String noteId, String replName) {\n     List<InterpreterSetting> settings = getInterpreterSettings(noteId);\n     InterpreterSetting setting;\n     Interpreter interpreter;\n@@ -1220,7 +1237,7 @@ public Interpreter getInterpreter(String noteId, String replName) {\n       // get default settings (first available)\n       // TODO(jl): Fix it in case of returning null\n       InterpreterSetting defaultSettings = getDefaultInterpreterSetting(settings);\n-      return createOrGetInterpreterList(noteId, defaultSettings).get(0);\n+      return createOrGetInterpreterList(user, noteId, defaultSettings).get(0);\n     }\n \n     String[] replNameSplit = replName.split(\"\\\\.\");\n@@ -1233,7 +1250,7 @@ public Interpreter getInterpreter(String noteId, String replName) {\n       setting = getInterpreterSettingByGroup(settings, group);\n \n       if (null != setting) {\n-        interpreter = getInterpreter(noteId, setting, name);\n+        interpreter = getInterpreter(user, noteId, setting, name);\n \n         if (null != interpreter) {\n           return interpreter;\n@@ -1248,7 +1265,7 @@ public Interpreter getInterpreter(String noteId, String replName) {\n       // TODO(jl): Handle with noteId to support defaultInterpreter per note.\n       setting = getDefaultInterpreterSetting(settings);\n \n-      interpreter = getInterpreter(noteId, setting, replName);\n+      interpreter = getInterpreter(user, noteId, setting, replName);\n \n       if (null != interpreter) {\n         return interpreter;\n@@ -1259,7 +1276,7 @@ public Interpreter getInterpreter(String noteId, String replName) {\n       setting = getInterpreterSettingByGroup(settings, replName);\n \n       if (null != setting) {\n-        List<Interpreter> interpreters = createOrGetInterpreterList(noteId, setting);\n+        List<Interpreter> interpreters = createOrGetInterpreterList(user, noteId, setting);\n         if (null != interpreters) {\n           return interpreters.get(0);\n         }\n@@ -1268,7 +1285,7 @@ public Interpreter getInterpreter(String noteId, String replName) {\n       // Support the legacy way to use it\n       for (InterpreterSetting s : settings) {\n         if (s.getGroup().equals(replName)) {\n-          List<Interpreter> interpreters = createOrGetInterpreterList(noteId, s);\n+          List<Interpreter> interpreters = createOrGetInterpreterList(user, noteId, s);\n           if (null != interpreters) {\n             return interpreters.get(0);\n           }\n@@ -1330,8 +1347,8 @@ public void setEnv(Map<String, String> env) {\n     this.env = env;\n   }\n \n-  public Map<String, Object> getEditorSetting(String noteId, String replName) {\n-    Interpreter intp = getInterpreter(noteId, replName);\n+  public Map<String, Object> getEditorSetting(String user, String noteId, String replName) {\n+    Interpreter intp = getInterpreter(user, noteId, replName);\n     Map<String, Object> editor = Maps.newHashMap(\n         ImmutableMap.<String, Object>builder()\n             .put(\"language\", \"text\").build());",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "sha": "19081c9889ef8818b809238617a6aab3c313377c",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 16,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "patch": "@@ -17,18 +17,25 @@\n \n package org.apache.zeppelin.interpreter;\n \n+import com.google.common.base.Preconditions;\n+\n import java.util.List;\n \n /**\n  *\n  */\n public class InterpreterOption {\n+  public static final transient String SHARED = \"shared\";\n+  public static final transient String SCOPED = \"scoped\";\n+  public static final transient String ISOLATED = \"isolated\";\n+\n   boolean remote;\n   String host = null;\n   int port = -1;\n-  boolean perNoteSession;\n-  boolean perNoteProcess;\n-  \n+\n+  String perNote;\n+  String perUser;\n+\n   boolean isExistingProcess;\n   boolean setPermission;\n   List<String> users;\n@@ -62,11 +69,21 @@ public void setUserPermission(boolean setPermission) {\n   }\n \n   public InterpreterOption() {\n-    remote = false;\n+    this(false);\n   }\n \n   public InterpreterOption(boolean remote) {\n+    this(remote, SHARED, SHARED);\n+  }\n+\n+  public InterpreterOption(boolean remote, String perUser, String perNote) {\n+    Preconditions.checkNotNull(remote);\n+    Preconditions.checkNotNull(perUser);\n+    Preconditions.checkNotNull(perNote);\n+\n     this.remote = remote;\n+    this.perUser = perUser;\n+    this.perNote = perNote;\n   }\n \n   public boolean isRemote() {\n@@ -77,14 +94,6 @@ public void setRemote(boolean remote) {\n     this.remote = remote;\n   }\n \n-  public boolean isPerNoteSession() {\n-    return perNoteSession;\n-  }\n-\n-  public void setPerNoteSession(boolean perNoteSession) {\n-    this.perNoteSession = perNoteSession;\n-  }\n-\n   public String getHost() {\n     return host;\n   }\n@@ -93,11 +102,44 @@ public int getPort() {\n     return port;\n   }\n \n-  public boolean isPerNoteProcess() {\n-    return perNoteProcess;\n+\n+  public boolean perUserShared() {\n+    return SHARED.equals(perUser);\n+  }\n+\n+  public boolean perUserScoped() {\n+    return SCOPED.equals(perUser);\n+  }\n+\n+  public boolean perUserIsolated() {\n+    return ISOLATED.equals(perUser);\n+  }\n+\n+  public boolean perNoteShared() {\n+    return SHARED.equals(perNote);\n+  }\n+\n+  public boolean perNoteScoped() {\n+    return SCOPED.equals(perNote);\n+  }\n+\n+  public boolean perNoteIsolated() {\n+    return ISOLATED.equals(perNote);\n+  }\n+\n+  public boolean isProcess() {\n+    return perUserIsolated() || perNoteIsolated();\n+  }\n+\n+  public boolean isSession() {\n+    return perUserScoped() || perNoteScoped();\n+  }\n+\n+  public void setPerNote(String perNote) {\n+    this.perNote = perNote;\n   }\n \n-  public void setPerNoteProcess(boolean perNoteProcess) {\n-    this.perNoteProcess = perNoteProcess;\n+  public void setPerUser(String perUser) {\n+    this.perUser = perUser;\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "sha": "e5c0f51a6d0fb011bcd3a41c3c745b93bd5e3c56",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 25,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "patch": "@@ -24,8 +24,11 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n import com.google.gson.annotations.SerializedName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.zeppelin.dep.Dependency;\n \n@@ -35,6 +38,7 @@\n  * Interpreter settings\n  */\n public class InterpreterSetting {\n+  private static final Logger logger = LoggerFactory.getLogger(InterpreterSetting.class);\n   private static final String SHARED_PROCESS = \"shared_process\";\n   private String id;\n   private String name;\n@@ -51,13 +55,19 @@\n \n   @Deprecated private transient InterpreterGroupFactory interpreterGroupFactory;\n \n-  public InterpreterSetting() {\n+  private final transient ReentrantReadWriteLock.ReadLock interpreterGroupReadLock;\n+  private final transient ReentrantReadWriteLock.WriteLock interpreterGroupWriteLock;\n \n+  public InterpreterSetting() {\n+    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n+    interpreterGroupReadLock = lock.readLock();\n+    interpreterGroupWriteLock = lock.writeLock();\n   }\n \n   public InterpreterSetting(String id, String name, String group,\n       List<InterpreterInfo> interpreterInfos, Properties properties, List<Dependency> dependencies,\n       InterpreterOption option, String path) {\n+    this();\n     this.id = id;\n     this.name = name;\n     this.group = group;\n@@ -96,40 +106,59 @@ String getGroup() {\n     return group;\n   }\n \n-  private String getInterpreterProcessKey(String noteId) {\n+  private String getInterpreterProcessKey(String user, String noteId) {\n+    InterpreterOption option = getOption();\n+    String key;\n     if (getOption().isExistingProcess) {\n-      return Constants.EXISTING_PROCESS;\n-    } else if (getOption().isPerNoteProcess()) {\n-      return noteId;\n+      key = Constants.EXISTING_PROCESS;\n+    } else if (getOption().isProcess()) {\n+      key = (option.perUserIsolated() ? user : \"\") + \":\" + (option.perNoteIsolated() ? noteId : \"\");\n     } else {\n-      return SHARED_PROCESS;\n+      key = SHARED_PROCESS;\n     }\n+\n+    logger.debug(\"getInterpreterProcessKey: {}\", key);\n+    return key;\n   }\n \n-  public InterpreterGroup getInterpreterGroup(String noteId) {\n-    String key = getInterpreterProcessKey(noteId);\n-    synchronized (interpreterGroupRef) {\n-      if (!interpreterGroupRef.containsKey(key)) {\n-        String interpreterGroupId = getId() + \":\" + key;\n-        InterpreterGroup intpGroup =\n-            interpreterGroupFactory.createInterpreterGroup(interpreterGroupId, getOption());\n-        interpreterGroupRef.put(key, intpGroup);\n-      }\n+  public InterpreterGroup getInterpreterGroup(String user, String noteId) {\n+    String key = getInterpreterProcessKey(user, noteId);\n+    if (!interpreterGroupRef.containsKey(key)) {\n+      String interpreterGroupId = getId() + \":\" + key;\n+      InterpreterGroup intpGroup =\n+          interpreterGroupFactory.createInterpreterGroup(interpreterGroupId, getOption());\n+\n+      interpreterGroupWriteLock.lock();\n+      interpreterGroupRef.put(key, intpGroup);\n+      interpreterGroupWriteLock.unlock();\n+    }\n+    try {\n+      interpreterGroupReadLock.lock();\n       return interpreterGroupRef.get(key);\n+    } finally {\n+      interpreterGroupReadLock.unlock();\n     }\n   }\n \n   public Collection<InterpreterGroup> getAllInterpreterGroups() {\n-    synchronized (interpreterGroupRef) {\n+    try {\n+      interpreterGroupReadLock.lock();\n       return new LinkedList<>(interpreterGroupRef.values());\n+    } finally {\n+      interpreterGroupReadLock.unlock();\n     }\n   }\n \n   void closeAndRemoveInterpreterGroup(String noteId) {\n-    String key = getInterpreterProcessKey(noteId);\n-    InterpreterGroup groupToRemove;\n-    synchronized (interpreterGroupRef) {\n-      groupToRemove = interpreterGroupRef.remove(key);\n+    String key = getInterpreterProcessKey(\"\", noteId);\n+\n+    InterpreterGroup groupToRemove = null;\n+    for (String intpKey : new HashSet<>(interpreterGroupRef.keySet())) {\n+      if (intpKey.contains(key)) {\n+        interpreterGroupWriteLock.lock();\n+        groupToRemove = interpreterGroupRef.remove(intpKey);\n+        interpreterGroupWriteLock.unlock();\n+      }\n     }\n \n     if (groupToRemove != null) {\n@@ -139,11 +168,9 @@ void closeAndRemoveInterpreterGroup(String noteId) {\n   }\n \n   void closeAndRmoveAllInterpreterGroups() {\n-    synchronized (interpreterGroupRef) {\n-      HashSet<String> groupsToRemove = new HashSet<>(interpreterGroupRef.keySet());\n-      for (String key : groupsToRemove) {\n-        closeAndRemoveInterpreterGroup(key);\n-      }\n+    HashSet<String> groupsToRemove = new HashSet<>(interpreterGroupRef.keySet());\n+    for (String key : groupsToRemove) {\n+      closeAndRemoveInterpreterGroup(key);\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "sha": "4611559b0b73f3c4083f6d1c4d5eb9762f87aa21",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 10,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -30,6 +30,7 @@\n import java.util.concurrent.ScheduledThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n \n+import com.google.common.base.Preconditions;\n import com.google.gson.Gson;\n import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n@@ -286,8 +287,8 @@ public Paragraph insertParagraph(int index) {\n    * @param paragraphId ID of paragraph\n    * @return a paragraph that was deleted, or <code>null</code> otherwise\n    */\n-  public Paragraph removeParagraph(String paragraphId) {\n-    removeAllAngularObjectInParagraph(paragraphId);\n+  public Paragraph removeParagraph(String user, String paragraphId) {\n+    removeAllAngularObjectInParagraph(user, paragraphId);\n     ResourcePoolUtils.removeResourcesBelongsToParagraph(getId(), paragraphId);\n     synchronized (paragraphs) {\n       Iterator<Paragraph> i = paragraphs.iterator();\n@@ -350,8 +351,8 @@ public void moveParagraph(String paragraphId, int index, boolean throwWhenIndexI\n \n       if (index < 0 || index >= paragraphs.size()) {\n         if (throwWhenIndexIsOutOfBound) {\n-          throw new IndexOutOfBoundsException(\n-              \"paragraph size is \" + paragraphs.size() + \" , index is \" + index);\n+          throw new IndexOutOfBoundsException(\"paragraph size is \" + paragraphs.size() +\n+              \" , index is \" + index);\n         } else {\n           return;\n         }\n@@ -437,6 +438,8 @@ public Paragraph getLastParagraph() {\n     }\n     if (p.getStatus().isRunning()) {\n       info.put(\"progress\", String.valueOf(p.progress()));\n+    } else {\n+      info.put(\"progress\", String.valueOf(100));\n     }\n     return info;\n   }\n@@ -460,6 +463,9 @@ private void setParagraphMagic(Paragraph p, int index) {\n    */\n   public void runAll() {\n     String cronExecutingUser = (String) getConfig().get(\"cronExecutingUser\");\n+    if (null == cronExecutingUser) {\n+      cronExecutingUser = \"anonymous\";\n+    }\n     synchronized (paragraphs) {\n       for (Paragraph p : paragraphs) {\n         if (!p.isEnabled()) {\n@@ -482,7 +488,8 @@ public void run(String paragraphId) {\n     Paragraph p = getParagraph(paragraphId);\n     p.setListener(jobListenerFactory.getParagraphJobListener(this));\n     String requiredReplName = p.getRequiredReplName();\n-    Interpreter intp = factory.getInterpreter(getId(), requiredReplName);\n+    Interpreter intp = factory.getInterpreter(p.getUser(), getId(), requiredReplName);\n+\n     if (intp == null) {\n       String intpExceptionMsg =\n           p.getJobName() + \"'s Interpreter \" + requiredReplName + \" not found\";\n@@ -494,6 +501,7 @@ public void run(String paragraphId) {\n       throw intpException;\n     }\n     if (p.getConfig().get(\"enabled\") == null || (Boolean) p.getConfig().get(\"enabled\")) {\n+      p.setAuthenticationInfo(p.getAuthenticationInfo());\n       intp.getScheduler().submit(p);\n     }\n   }\n@@ -526,7 +534,7 @@ boolean isTerminated() {\n     }\n   }\n \n-  private void snapshotAngularObjectRegistry() {\n+  private void snapshotAngularObjectRegistry(String user) {\n     angularObjects = new HashMap<>();\n \n     List<InterpreterSetting> settings = factory.getInterpreterSettings(getId());\n@@ -535,13 +543,13 @@ private void snapshotAngularObjectRegistry() {\n     }\n \n     for (InterpreterSetting setting : settings) {\n-      InterpreterGroup intpGroup = setting.getInterpreterGroup(id);\n+      InterpreterGroup intpGroup = setting.getInterpreterGroup(user, id);\n       AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();\n       angularObjects.put(intpGroup.getId(), registry.getAllWithGlobal(id));\n     }\n   }\n \n-  private void removeAllAngularObjectInParagraph(String paragraphId) {\n+  private void removeAllAngularObjectInParagraph(String user, String paragraphId) {\n     angularObjects = new HashMap<>();\n \n     List<InterpreterSetting> settings = factory.getInterpreterSettings(getId());\n@@ -550,7 +558,7 @@ private void removeAllAngularObjectInParagraph(String paragraphId) {\n     }\n \n     for (InterpreterSetting setting : settings) {\n-      InterpreterGroup intpGroup = setting.getInterpreterGroup(id);\n+      InterpreterGroup intpGroup = setting.getInterpreterGroup(user, id);\n       AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();\n \n       if (registry instanceof RemoteAngularObjectRegistry) {\n@@ -580,8 +588,9 @@ private void removeAllAngularObjectInParagraph(String paragraphId) {\n   }\n \n   public void persist(AuthenticationInfo subject) throws IOException {\n+    Preconditions.checkNotNull(subject, \"AuthenticationInfo should not be null\");\n     stopDelayedPersistTimer();\n-    snapshotAngularObjectRegistry();\n+    snapshotAngularObjectRegistry(subject.getUser());\n     index.updateIndexDoc(this);\n     repo.save(this, subject);\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "7ad269701f528222160cb1b9234f343ae8c7426d",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 8,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -31,6 +31,8 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.base.Preconditions;\n import com.google.common.base.Predicate;\n import com.google.common.collect.FluentIterable;\n import com.google.common.collect.Sets;\n@@ -135,6 +137,7 @@ public Notebook(ZeppelinConfiguration conf, NotebookRepo notebookRepo,\n    * @throws IOException\n    */\n   public Note createNote(AuthenticationInfo subject) throws IOException {\n+    Preconditions.checkNotNull(subject, \"AuthenticationInfo should not be null\");\n     Note note;\n     if (conf.getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING)) {\n       note = createNote(replFactory.getDefaultInterpreterSettingList(), subject);\n@@ -158,7 +161,7 @@ public Note createNote(List<String> interpreterIds, AuthenticationInfo subject)\n       notes.put(note.getId(), note);\n     }\n     if (interpreterIds != null) {\n-      bindInterpretersToNote(note.getId(), interpreterIds);\n+      bindInterpretersToNote(subject.getUser(), note.getId(), interpreterIds);\n     }\n \n     if (subject != null && !\"anonymous\".equals(subject.getUser())) {\n@@ -252,7 +255,7 @@ public Note cloneNote(String sourceNoteID, String newNoteName, AuthenticationInf\n     }\n     // Copy the interpreter bindings\n     List<String> boundInterpreterSettingsIds = getBindedInterpreterSettingsIds(sourceNote.getId());\n-    bindInterpretersToNote(newNote.getId(), boundInterpreterSettingsIds);\n+    bindInterpretersToNote(subject.getUser(), newNote.getId(), boundInterpreterSettingsIds);\n \n     List<Paragraph> paragraphs = sourceNote.getParagraphs();\n     for (Paragraph p : paragraphs) {\n@@ -264,7 +267,7 @@ public Note cloneNote(String sourceNoteID, String newNoteName, AuthenticationInf\n     return newNote;\n   }\n \n-  public void bindInterpretersToNote(String id, List<String> interpreterSettingIds)\n+  public void bindInterpretersToNote(String user, String id, List<String> interpreterSettingIds)\n       throws IOException {\n     Note note = getNote(id);\n     if (note != null) {\n@@ -275,7 +278,7 @@ public void bindInterpretersToNote(String id, List<String> interpreterSettingIds\n         }\n       }\n \n-      replFactory.setInterpreters(note.getId(), interpreterSettingIds);\n+      replFactory.setInterpreters(user, note.getId(), interpreterSettingIds);\n       // comment out while note.getNoteReplLoader().setInterpreters(...) do the same\n       // replFactory.putNoteInterpreterSettingBinding(id, interpreterSettingIds);\n     }\n@@ -306,18 +309,21 @@ public Note getNote(String id) {\n   }\n \n   public void removeNote(String id, AuthenticationInfo subject) {\n+    Preconditions.checkNotNull(subject, \"AuthenticationInfo should not be null\");\n+\n     Note note;\n \n     synchronized (notes) {\n       note = notes.remove(id);\n     }\n-    replFactory.removeNoteInterpreterSettingBinding(id);\n+    replFactory.removeNoteInterpreterSettingBinding(subject.getUser(), id);\n     notebookIndex.deleteIndexDocs(note);\n     notebookAuthorization.removeNote(id);\n \n     // remove from all interpreter instance's angular object registry\n     for (InterpreterSetting settings : replFactory.get()) {\n-      AngularObjectRegistry registry = settings.getInterpreterGroup(id).getAngularObjectRegistry();\n+      AngularObjectRegistry registry =\n+          settings.getInterpreterGroup(subject.getUser(), id).getAngularObjectRegistry();\n       if (registry instanceof RemoteAngularObjectRegistry) {\n         // remove paragraph scope object\n         for (Paragraph p : note.getParagraphs()) {\n@@ -437,7 +443,7 @@ private Note loadNoteFromRepo(String id, AuthenticationInfo subject) {\n       SnapshotAngularObject snapshot = angularObjectSnapshot.get(name);\n       List<InterpreterSetting> settings = replFactory.get();\n       for (InterpreterSetting setting : settings) {\n-        InterpreterGroup intpGroup = setting.getInterpreterGroup(note.getId());\n+        InterpreterGroup intpGroup = setting.getInterpreterGroup(subject.getUser(), note.getId());\n         if (intpGroup.getId().equals(snapshot.getIntpGroupId())) {\n           AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();\n           String noteId = snapshot.getAngularObject().getNoteId();\n@@ -533,7 +539,7 @@ public int compare(Note note1, Note note2) {\n       return noteList;\n     }\n   }\n-  \n+\n   public List<Note> getAllNotes(AuthenticationInfo subject) {\n     final Set<String> entities = Sets.newHashSet();\n     if (subject != null) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "d996488cb61c3eb7e6915c92d6d64b619d0fca13",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 4,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "patch": "@@ -105,6 +105,10 @@ private static String generateId() {\n            + new Random(System.currentTimeMillis()).nextInt();\n   }\n \n+  public String getUser() {\n+    return user;\n+  }\n+\n   public String getText() {\n     return text;\n   }\n@@ -193,7 +197,7 @@ public static String getScriptBody(String text) {\n   }\n \n   public Interpreter getRepl(String name) {\n-    return factory.getInterpreter(note.getId(), name);\n+    return factory.getInterpreter(user, note.getId(), name);\n   }\n \n   public Interpreter getCurrentRepl() {\n@@ -442,8 +446,8 @@ private InterpreterContext getInterpreterContext(InterpreterOutput output) {\n \n     if (!factory.getInterpreterSettings(note.getId()).isEmpty()) {\n       InterpreterSetting intpGroup = factory.getInterpreterSettings(note.getId()).get(0);\n-      registry = intpGroup.getInterpreterGroup(note.getId()).getAngularObjectRegistry();\n-      resourcePool = intpGroup.getInterpreterGroup(note.getId()).getResourcePool();\n+      registry = intpGroup.getInterpreterGroup(getUser(), note.getId()).getAngularObjectRegistry();\n+      resourcePool = intpGroup.getInterpreterGroup(getUser(), note.getId()).getResourcePool();\n     }\n \n     List<InterpreterContextRunner> runners = new LinkedList<InterpreterContextRunner>();\n@@ -582,6 +586,7 @@ public String getMagic() {\n   }\n \n   private boolean isValidInterpreter(String replName) {\n-    return factory.getInterpreter(note.getId(), replName) != null;\n+    return factory.getInterpreter(\"\",\n+        note.getId(), replName) != null;\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "sha": "955ba2dd00af2758187c8bff8045a0faab6c4545",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 19,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "patch": "@@ -27,6 +27,8 @@\n import org.apache.zeppelin.scheduler.Job;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n import org.apache.zeppelin.search.SearchService;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n+import org.apache.zeppelin.user.Credentials;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -50,6 +52,7 @@\n   private VFSNotebookRepo notebookRepo;\n   private Notebook notebook;\n   private HeliumApplicationFactory heliumAppFactory;\n+  private AuthenticationInfo anonymous;\n \n   @Before\n   public void setUp() throws Exception {\n@@ -82,7 +85,7 @@ public void setUp() throws Exception {\n     heliumAppFactory = new HeliumApplicationFactory();\n     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + \"/local-repo\");\n     factory = new InterpreterFactory(conf,\n-        new InterpreterOption(true), null, null, heliumAppFactory, depResolver);\n+        new InterpreterOption(true), null, null, heliumAppFactory, depResolver, false);\n     HashMap<String, String> env = new HashMap<String, String>();\n     env.put(\"ZEPPELIN_CLASSPATH\", new File(\"./target/test-classes\").getAbsolutePath());\n     factory.setEnv(env);\n@@ -98,11 +101,13 @@ public void setUp() throws Exception {\n         this,\n         search,\n         notebookAuthorization,\n-        null);\n+        new Credentials(false, null));\n \n     heliumAppFactory.setNotebook(notebook);\n \n     notebook.addNotebookEventListener(heliumAppFactory);\n+\n+    anonymous = new AuthenticationInfo(\"anonymous\");\n   }\n \n   @After\n@@ -131,13 +136,14 @@ public void testLoadRunUnloadApplication()\n         HeliumTestApplication.class.getName(),\n         new String[][]{});\n \n-    Note note1 = notebook.createNote(null);\n-    factory.setInterpreters(note1.getId(),factory.getDefaultInterpreterSettingList());\n+    Note note1 = notebook.createNote(anonymous);\n+    factory.setInterpreters(\"user\", note1.getId(),factory.getDefaultInterpreterSettingList());\n \n     Paragraph p1 = note1.addParagraph();\n \n     // make sure interpreter process running\n     p1.setText(\"%mock1 job\");\n+    p1.setAuthenticationInfo(anonymous);\n     note1.run(p1.getId());\n     while(p1.isTerminated()==false || p1.getResult()==null) Thread.yield();\n \n@@ -162,7 +168,7 @@ public void testLoadRunUnloadApplication()\n \n     // clean\n     heliumAppFactory.unload(p1, appId);\n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n   }\n \n   @Test\n@@ -175,13 +181,14 @@ public void testUnloadOnParagraphRemove() throws IOException {\n         HeliumTestApplication.class.getName(),\n         new String[][]{});\n \n-    Note note1 = notebook.createNote(null);\n-    factory.setInterpreters(note1.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note1 = notebook.createNote(anonymous);\n+    factory.setInterpreters(\"user\", note1.getId(), factory.getDefaultInterpreterSettingList());\n \n     Paragraph p1 = note1.addParagraph();\n \n     // make sure interpreter process running\n     p1.setText(\"%mock1 job\");\n+    p1.setAuthenticationInfo(anonymous);\n     note1.run(p1.getId());\n     while(p1.isTerminated()==false || p1.getResult()==null) Thread.yield();\n \n@@ -193,13 +200,13 @@ public void testUnloadOnParagraphRemove() throws IOException {\n     }\n \n     // when remove paragraph\n-    note1.removeParagraph(p1.getId());\n+    note1.removeParagraph(\"user\", p1.getId());\n \n     // then\n     assertEquals(ApplicationState.Status.UNLOADED, app.getStatus());\n \n     // clean\n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n   }\n \n \n@@ -213,13 +220,14 @@ public void testUnloadOnInterpreterUnbind() throws IOException {\n         HeliumTestApplication.class.getName(),\n         new String[][]{});\n \n-    Note note1 = notebook.createNote(null);\n-    notebook.bindInterpretersToNote(note1.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note1 = notebook.createNote(anonymous);\n+    notebook.bindInterpretersToNote(\"user\", note1.getId(), factory.getDefaultInterpreterSettingList());\n \n     Paragraph p1 = note1.addParagraph();\n \n     // make sure interpreter process running\n     p1.setText(\"%mock1 job\");\n+    p1.setAuthenticationInfo(anonymous);\n     note1.run(p1.getId());\n     while(p1.isTerminated()==false || p1.getResult()==null) Thread.yield();\n \n@@ -231,19 +239,19 @@ public void testUnloadOnInterpreterUnbind() throws IOException {\n     }\n \n     // when unbind interpreter\n-    notebook.bindInterpretersToNote(note1.getId(), new LinkedList<String>());\n+    notebook.bindInterpretersToNote(\"user\", note1.getId(), new LinkedList<String>());\n \n     // then\n     assertEquals(ApplicationState.Status.UNLOADED, app.getStatus());\n \n     // clean\n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n   }\n \n   @Test\n   public void testInterpreterUnbindOfNullReplParagraph() throws IOException {\n     // create note\n-    Note note1 = notebook.createNote(null);\n+    Note note1 = notebook.createNote(anonymous);\n \n     // add paragraph with invalid magic\n     Paragraph p1 = note1.addParagraph();\n@@ -255,10 +263,10 @@ public void testInterpreterUnbindOfNullReplParagraph() throws IOException {\n \n     // Unbind all interpreter from note\n     // NullPointerException shouldn't occur here\n-    notebook.bindInterpretersToNote(note1.getId(), new LinkedList<String>());\n+    notebook.bindInterpretersToNote(\"user\", note1.getId(), new LinkedList<String>());\n \n     // remove note\n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n   }\n \n \n@@ -272,8 +280,8 @@ public void testUnloadOnInterpreterRestart() throws IOException {\n         HeliumTestApplication.class.getName(),\n         new String[][]{});\n \n-    Note note1 = notebook.createNote(null);\n-    notebook.bindInterpretersToNote(note1.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note1 = notebook.createNote(anonymous);\n+    notebook.bindInterpretersToNote(\"user\", note1.getId(), factory.getDefaultInterpreterSettingList());\n     String mock1IntpSettingId = null;\n     for (InterpreterSetting setting : notebook.getBindedInterpreterSettings(note1.getId())) {\n       if (setting.getName().equals(\"mock1\")) {\n@@ -286,6 +294,7 @@ public void testUnloadOnInterpreterRestart() throws IOException {\n \n     // make sure interpreter process running\n     p1.setText(\"%mock1 job\");\n+    p1.setAuthenticationInfo(anonymous);\n     note1.run(p1.getId());\n     while(p1.isTerminated()==false || p1.getResult()==null) Thread.yield();\n     assertEquals(0, p1.getAllApplicationStates().size());\n@@ -307,7 +316,7 @@ public void testUnloadOnInterpreterRestart() throws IOException {\n     assertEquals(ApplicationState.Status.UNLOADED, app.getStatus());\n \n     // clean\n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "sha": "294817c1908095d949e6d29fcd72ca31e35b2d93",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 16,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "patch": "@@ -33,6 +33,8 @@\n import org.apache.zeppelin.dep.DependencyResolver;\n import org.apache.zeppelin.interpreter.mock.MockInterpreter1;\n import org.apache.zeppelin.interpreter.mock.MockInterpreter2;\n+import org.apache.zeppelin.notebook.repo.zeppelinhub.security.Authentication;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.apache.zeppelin.interpreter.remote.RemoteInterpreter;\n import org.apache.zeppelin.notebook.JobListenerFactory;\n import org.apache.zeppelin.notebook.Note;\n@@ -87,7 +89,7 @@ public void setUp() throws Exception {\n     conf = new ZeppelinConfiguration();\n     schedulerFactory = new SchedulerFactory();\n     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + \"/local-repo\");\n-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver);\n+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver, false);\n     context = new InterpreterContext(\"note\", \"id\", \"title\", \"text\", null, null, null, null, null, null, null);\n \n     SearchService search = mock(SearchService.class);\n@@ -114,8 +116,8 @@ public void testBasic() {\n \n //    mock1Setting = factory.createNewSetting(\"mock11\", \"mock1\", new ArrayList<Dependency>(), new InterpreterOption(false), new Properties());\n \n-    InterpreterGroup interpreterGroup = mock1Setting.getInterpreterGroup(\"sharedProcess\");\n-    factory.createInterpretersForNote(mock1Setting, \"sharedProcess\", \"session\");\n+    InterpreterGroup interpreterGroup = mock1Setting.getInterpreterGroup(\"user\", \"sharedProcess\");\n+    factory.createInterpretersForNote(mock1Setting, \"user\", \"sharedProcess\", \"session\");\n \n     // get interpreter\n     assertNotNull(\"get Interpreter\", interpreterGroup.get(\"session\").get(0));\n@@ -125,12 +127,12 @@ public void testBasic() {\n \n     // restart interpreter\n     factory.restart(mock1Setting.getId());\n-    assertNull(mock1Setting.getInterpreterGroup(\"sharedProcess\").get(\"session\"));\n+    assertNull(mock1Setting.getInterpreterGroup(\"user\", \"sharedProcess\").get(\"session\"));\n   }\n \n   @Test\n   public void testRemoteRepl() throws Exception {\n-    factory = new InterpreterFactory(conf, new InterpreterOption(true), null, null, null, depResolver);\n+    factory = new InterpreterFactory(conf, new InterpreterOption(true), null, null, null, depResolver, false);\n     List<InterpreterSetting> all = factory.get();\n     InterpreterSetting mock1Setting = null;\n     for (InterpreterSetting setting : all) {\n@@ -139,8 +141,8 @@ public void testRemoteRepl() throws Exception {\n         break;\n       }\n     }\n-    InterpreterGroup interpreterGroup = mock1Setting.getInterpreterGroup(\"sharedProcess\");\n-    factory.createInterpretersForNote(mock1Setting, \"sharedProcess\", \"session\");\n+    InterpreterGroup interpreterGroup = mock1Setting.getInterpreterGroup(\"user\", \"sharedProcess\");\n+    factory.createInterpretersForNote(mock1Setting, \"user\", \"sharedProcess\", \"session\");\n     // get interpreter\n     assertNotNull(\"get Interpreter\", interpreterGroup.get(\"session\").get(0));\n     assertTrue(interpreterGroup.get(\"session\").get(0) instanceof LazyOpenInterpreter);\n@@ -186,13 +188,13 @@ public void testSaveLoad() throws IOException, RepositoryException {\n     factory.createNewSetting(\"new-mock1\", \"mock1\", new LinkedList<Dependency>(), new InterpreterOption(false), new Properties());\n     assertEquals(numInterpreters + 1, factory.get().size());\n \n-    InterpreterFactory factory2 = new InterpreterFactory(conf, null, null, null, depResolver);\n+    InterpreterFactory factory2 = new InterpreterFactory(conf, null, null, null, depResolver, false);\n     assertEquals(numInterpreters + 1, factory2.get().size());\n   }\n \n   @Test\n   public void testInterpreterAliases() throws IOException, RepositoryException {\n-    factory = new InterpreterFactory(conf, null, null, null, depResolver);\n+    factory = new InterpreterFactory(conf, null, null, null, depResolver, false);\n     final InterpreterInfo info1 = new InterpreterInfo(\"className1\", \"name1\", true, null);\n     final InterpreterInfo info2 = new InterpreterInfo(\"className2\", \"name1\", true, null);\n     factory.add(\"group1\", new ArrayList<InterpreterInfo>(){{\n@@ -205,15 +207,38 @@ public void testInterpreterAliases() throws IOException, RepositoryException {\n     final InterpreterSetting setting1 = factory.createNewSetting(\"test-group1\", \"group1\", new ArrayList<Dependency>(), new InterpreterOption(true), new Properties());\n     final InterpreterSetting setting2 = factory.createNewSetting(\"test-group2\", \"group1\", new ArrayList<Dependency>(), new InterpreterOption(true), new Properties());\n \n-    factory.setInterpreters(\"note\", new ArrayList<String>() {{\n+    factory.setInterpreters(\"user\", \"note\", new ArrayList<String>() {{\n       add(setting1.getId());\n       add(setting2.getId());\n     }});\n \n-    assertEquals(\"className1\", factory.getInterpreter(\"note\", \"test-group1\").getClassName());\n-    assertEquals(\"className1\", factory.getInterpreter(\"note\", \"group1\").getClassName());\n+    assertEquals(\"className1\", factory.getInterpreter(\"user1\", \"note\", \"test-group1\").getClassName());\n+    assertEquals(\"className1\", factory.getInterpreter(\"user1\", \"note\", \"group1\").getClassName());\n   }\n \n+  @Test\n+  public void testMultiUser() throws IOException, RepositoryException {\n+    factory = new InterpreterFactory(conf, null, null, null, depResolver, true);\n+    final InterpreterInfo info1 = new InterpreterInfo(\"className1\", \"name1\", true, null);\n+    factory.add(\"group1\", new ArrayList<InterpreterInfo>(){{\n+      add(info1);\n+    }}, new ArrayList<Dependency>(), new InterpreterOption(true), new Properties(), \"/path1\");\n+\n+    InterpreterOption perUserInterpreterOption = new InterpreterOption(true, InterpreterOption.ISOLATED, InterpreterOption.SHARED);\n+    final InterpreterSetting setting1 = factory.createNewSetting(\"test-group1\", \"group1\", new ArrayList<Dependency>(), perUserInterpreterOption, new Properties());\n+\n+    factory.setInterpreters(\"user1\", \"note\", new ArrayList<String>() {{\n+      add(setting1.getId());\n+    }});\n+\n+    factory.setInterpreters(\"user2\", \"note\", new ArrayList<String>() {{\n+      add(setting1.getId());\n+    }});\n+\n+    assertNotEquals(factory.getInterpreter(\"user1\", \"note\", \"test-group1\"), factory.getInterpreter(\"user2\", \"note\", \"test-group1\"));\n+  }\n+\n+\n   @Test\n   public void testInvalidInterpreterSettingName() {\n     try {\n@@ -233,19 +258,19 @@ public void getEditorSetting() throws IOException, RepositoryException, Schedule\n         intpIds.add(intpSetting.getId());\n       }\n     }\n-    Note note = notebook.createNote(intpIds, null);\n+    Note note = notebook.createNote(intpIds, new AuthenticationInfo(\"anonymous\"));\n \n     // get editor setting from interpreter-setting.json\n-    Map<String, Object> editor = factory.getEditorSetting(note.getId(), \"mock11\");\n+    Map<String, Object> editor = factory.getEditorSetting(\"user1\", note.getId(), \"mock11\");\n     assertEquals(\"java\", editor.get(\"language\"));\n \n     // when interpreter is not loaded via interpreter-setting.json\n     // or editor setting doesn't exit\n-    editor = factory.getEditorSetting(note.getId(), \"mock1\");\n+    editor = factory.getEditorSetting(\"user1\", note.getId(), \"mock1\");\n     assertEquals(null, editor.get(\"language\"));\n \n     // when interpreter is not bound to note\n-    editor = factory.getEditorSetting(note.getId(), \"mock2\");\n+    editor = factory.getEditorSetting(\"user1\", note.getId(), \"mock2\");\n     assertEquals(\"text\", editor.get(\"language\"));\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "sha": "a2a799ae8a0a712200479b64cf6c2da42a1cfa4f",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java",
                "changes": 88,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 44,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java",
                "patch": "@@ -60,7 +60,7 @@ public void setUp() throws Exception {\n     MockInterpreter2.register(\"mock2\", \"group2\", \"org.apache.zeppelin.interpreter.mock.MockInterpreter2\");\n \n     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + \"/local-repo\");\n-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver);\n+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver, false);\n   }\n \n   @After\n@@ -71,92 +71,92 @@ public void tearDown() throws Exception {\n \n   @Test\n   public void testGetInterpreter() throws IOException {\n-    factory.setInterpreters(\"note\", factory.getDefaultInterpreterSettingList());\n+    factory.setInterpreters(\"user\", \"note\", factory.getDefaultInterpreterSettingList());\n \n     // when there're no interpreter selection directive\n-    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"note\", null).getClassName());\n-    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"note\", \"\").getClassName());\n-    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"note\", \" \").getClassName());\n+    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"user\", \"note\", null).getClassName());\n+    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"user\", \"note\", \"\").getClassName());\n+    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"user\", \"note\", \" \").getClassName());\n \n     // when group name is omitted\n-    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter11\", factory.getInterpreter(\"note\", \"mock11\").getClassName());\n+    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter11\", factory.getInterpreter(\"user\", \"note\", \"mock11\").getClassName());\n \n     // when 'name' is ommitted\n-    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"note\", \"group1\").getClassName());\n-    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter2\", factory.getInterpreter(\"note\", \"group2\").getClassName());\n+    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"user\", \"note\", \"group1\").getClassName());\n+    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter2\", factory.getInterpreter(\"user\", \"note\", \"group2\").getClassName());\n \n     // when nothing is ommitted\n-    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"note\", \"group1.mock1\").getClassName());\n-    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter11\", factory.getInterpreter(\"note\", \"group1.mock11\").getClassName());\n-    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter2\", factory.getInterpreter(\"note\", \"group2.mock2\").getClassName());\n+    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", factory.getInterpreter(\"user\", \"note\", \"group1.mock1\").getClassName());\n+    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter11\", factory.getInterpreter(\"user\", \"note\", \"group1.mock11\").getClassName());\n+    assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter2\", factory.getInterpreter(\"user\", \"note\", \"group2.mock2\").getClassName());\n \n-    factory.closeNote(\"note\");\n+    factory.closeNote(\"user\", \"note\");\n   }\n \n   @Test\n   public void testNoteSession() throws IOException {\n-    factory.setInterpreters(\"noteA\", factory.getDefaultInterpreterSettingList());\n-    factory.getInterpreterSettings(\"noteA\").get(0).getOption().setPerNoteSession(true);\n+    factory.setInterpreters(\"user\", \"noteA\", factory.getDefaultInterpreterSettingList());\n+    factory.getInterpreterSettings(\"noteA\").get(0).getOption().setPerNote(InterpreterOption.SCOPED);\n \n-    factory.setInterpreters(\"noteB\", factory.getDefaultInterpreterSettingList());\n-    factory.getInterpreterSettings(\"noteB\").get(0).getOption().setPerNoteSession(true);\n+    factory.setInterpreters(\"user\", \"noteB\", factory.getDefaultInterpreterSettingList());\n+    factory.getInterpreterSettings(\"noteB\").get(0).getOption().setPerNote(InterpreterOption.SCOPED);\n \n     // interpreters are not created before accessing it\n-    assertNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"shared_process\").get(\"noteA\"));\n-    assertNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"shared_process\").get(\"noteB\"));\n+    assertNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"user\", \"noteA\").get(\"noteA\"));\n+    assertNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"user\", \"noteB\").get(\"noteB\"));\n \n-    factory.getInterpreter(\"noteA\", null).open();\n-    factory.getInterpreter(\"noteB\", null).open();\n+    factory.getInterpreter(\"user\", \"noteA\", null).open();\n+    factory.getInterpreter(\"user\", \"noteB\", null).open();\n \n     assertTrue(\n-        factory.getInterpreter(\"noteA\", null).getInterpreterGroup().getId().equals(\n-        factory.getInterpreter(\"noteB\", null).getInterpreterGroup().getId()));\n+        factory.getInterpreter(\"user\", \"noteA\", null).getInterpreterGroup().getId().equals(\n+        factory.getInterpreter(\"user\", \"noteB\", null).getInterpreterGroup().getId()));\n \n     // interpreters are created after accessing it\n-    assertNotNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"shared_process\").get(\"noteA\"));\n-    assertNotNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"shared_process\").get(\"noteB\"));\n+    assertNotNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"user\", \"noteA\").get(\"noteA\"));\n+    assertNotNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"user\", \"noteB\").get(\"noteB\"));\n \n     // when\n-    factory.closeNote(\"noteA\");\n-    factory.closeNote(\"noteB\");\n+    factory.closeNote(\"user\", \"noteA\");\n+    factory.closeNote(\"user\", \"noteB\");\n \n     // interpreters are destroyed after close\n-    assertNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"shared_process\").get(\"noteA\"));\n-    assertNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"shared_process\").get(\"noteB\"));\n+    assertNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"user\", \"shared_process\").get(\"noteA\"));\n+    assertNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"user\", \"shared_process\").get(\"noteB\"));\n \n   }\n \n   @Test\n   public void testNotePerInterpreterProcess() throws IOException {\n-    factory.setInterpreters(\"noteA\", factory.getDefaultInterpreterSettingList());\n-    factory.getInterpreterSettings(\"noteA\").get(0).getOption().setPerNoteProcess(true);\n+    factory.setInterpreters(\"user\", \"noteA\", factory.getDefaultInterpreterSettingList());\n+    factory.getInterpreterSettings(\"noteA\").get(0).getOption().setPerNote(InterpreterOption.ISOLATED);\n \n-    factory.setInterpreters(\"noteB\", factory.getDefaultInterpreterSettingList());\n-    factory.getInterpreterSettings(\"noteB\").get(0).getOption().setPerNoteProcess(true);\n+    factory.setInterpreters(\"user\", \"noteB\", factory.getDefaultInterpreterSettingList());\n+    factory.getInterpreterSettings(\"noteB\").get(0).getOption().setPerNote(InterpreterOption.ISOLATED);\n \n     // interpreters are not created before accessing it\n-    assertNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"noteA\").get(\"noteA\"));\n-    assertNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"noteB\").get(\"noteB\"));\n+    assertNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"user\", \"noteA\").get(\"noteA\"));\n+    assertNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"user\", \"noteB\").get(\"noteB\"));\n \n-    factory.getInterpreter(\"noteA\", null).open();\n-    factory.getInterpreter(\"noteB\", null).open();\n+    factory.getInterpreter(\"user\", \"noteA\", null).open();\n+    factory.getInterpreter(\"user\", \"noteB\", null).open();\n \n     // per note interpreter process\n     assertFalse(\n-        factory.getInterpreter(\"noteA\", null).getInterpreterGroup().getId().equals(\n-        factory.getInterpreter(\"noteB\", null).getInterpreterGroup().getId()));\n+        factory.getInterpreter(\"user\", \"noteA\", null).getInterpreterGroup().getId().equals(\n+        factory.getInterpreter(\"user\", \"noteB\", null).getInterpreterGroup().getId()));\n \n     // interpreters are created after accessing it\n-    assertNotNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"noteA\").get(\"noteA\"));\n-    assertNotNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"noteB\").get(\"noteB\"));\n+    assertNotNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"user\", \"noteA\").get(\"noteA\"));\n+    assertNotNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"user\", \"noteB\").get(\"noteB\"));\n \n     // when\n-    factory.closeNote(\"noteA\");\n-    factory.closeNote(\"noteB\");\n+    factory.closeNote(\"user\", \"noteA\");\n+    factory.closeNote(\"user\", \"noteB\");\n \n     // interpreters are destroyed after close\n-    assertNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"noteA\").get(\"noteA\"));\n-    assertNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"noteB\").get(\"noteB\"));\n+    assertNull(factory.getInterpreterSettings(\"noteA\").get(0).getInterpreterGroup(\"user\", \"noteA\").get(\"noteA\"));\n+    assertNull(factory.getInterpreterSettings(\"noteB\").get(0).getInterpreterGroup(\"user\", \"noteB\").get(\"noteB\"));\n   }\n \n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java",
                "sha": "d19ceae08e419beceeca12c948f52b71ce691aa4",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 5,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.zeppelin.notebook.repo.NotebookRepo;\n import org.apache.zeppelin.scheduler.Scheduler;\n import org.apache.zeppelin.search.SearchService;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.apache.zeppelin.user.Credentials;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -58,21 +59,24 @@\n   @Mock\n   InterpreterFactory interpreterFactory;\n \n+  private AuthenticationInfo anonymous = new AuthenticationInfo(\"anonymous\");\n+\n   @Test\n   public void runNormalTest() {\n-    when(interpreterFactory.getInterpreter(anyString(), eq(\"spark\"))).thenReturn(interpreter);\n+    when(interpreterFactory.getInterpreter(anyString(), anyString(), eq(\"spark\"))).thenReturn(interpreter);\n     when(interpreter.getScheduler()).thenReturn(scheduler);\n \n     String pText = \"%spark sc.version\";\n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n \n     Paragraph p = note.addParagraph();\n     p.setText(pText);\n+    p.setAuthenticationInfo(anonymous);\n     note.run(p.getId());\n \n     ArgumentCaptor<Paragraph> pCaptor = ArgumentCaptor.forClass(Paragraph.class);\n     verify(scheduler, only()).submit(pCaptor.capture());\n-    verify(interpreterFactory, only()).getInterpreter(anyString(), eq(\"spark\"));\n+    verify(interpreterFactory, only()).getInterpreter(anyString(), anyString(), eq(\"spark\"));\n \n     assertEquals(\"Paragraph text\", pText, pCaptor.getValue().getText());\n   }\n@@ -87,7 +91,7 @@ public void addParagraphWithEmptyReplNameTest() {\n \n   @Test\n   public void addParagraphWithLastReplNameTest() {\n-    when(interpreterFactory.getInterpreter(anyString(), eq(\"spark\"))).thenReturn(interpreter);\n+    when(interpreterFactory.getInterpreter(anyString(), anyString(), eq(\"spark\"))).thenReturn(interpreter);\n \n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n     Paragraph p1 = note.addParagraph();\n@@ -99,7 +103,7 @@ public void addParagraphWithLastReplNameTest() {\n \n   @Test\n   public void insertParagraphWithLastReplNameTest() {\n-    when(interpreterFactory.getInterpreter(anyString(), eq(\"spark\"))).thenReturn(interpreter);\n+    when(interpreterFactory.getInterpreter(anyString(), anyString(), eq(\"spark\"))).thenReturn(interpreter);\n \n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n     Paragraph p1 = note.addParagraph();\n@@ -111,7 +115,7 @@ public void insertParagraphWithLastReplNameTest() {\n \n   @Test\n   public void insertParagraphWithInvalidReplNameTest() {\n-    when(interpreterFactory.getInterpreter(anyString(), eq(\"invalid\"))).thenReturn(null);\n+    when(interpreterFactory.getInterpreter(anyString(), anyString(), eq(\"invalid\"))).thenReturn(null);\n \n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n     Paragraph p1 = note.addParagraph();",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java",
                "sha": "a07727458f2133ff6597ef32729acdbc9945b62d",
                "status": "modified"
            },
            {
                "additions": 109,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "changes": 209,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 100,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "patch": "@@ -65,6 +65,7 @@\n   private DependencyResolver depResolver;\n   private NotebookAuthorization notebookAuthorization;\n   private Credentials credentials;\n+  private AuthenticationInfo anonymous = new AuthenticationInfo(\"anonymous\");\n \n   @Before\n   public void setUp() throws Exception {\n@@ -88,7 +89,7 @@ public void setUp() throws Exception {\n     MockInterpreter2.register(\"mock2\", \"org.apache.zeppelin.interpreter.mock.MockInterpreter2\");\n \n     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + \"/local-repo\");\n-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver);\n+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver, false);\n \n     SearchService search = mock(SearchService.class);\n     notebookRepo = new VFSNotebookRepo(conf);\n@@ -106,15 +107,16 @@ public void tearDown() throws Exception {\n \n   @Test\n   public void testSelectingReplImplementation() throws IOException {\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n \n     // run with default repl\n     Paragraph p1 = note.addParagraph();\n     Map config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n     p1.setText(\"hello world\");\n+    p1.setAuthenticationInfo(anonymous);\n     note.run(p1.getId());\n     while(p1.isTerminated()==false || p1.getResult()==null) Thread.yield();\n     assertEquals(\"repl1: hello world\", p1.getResult().message());\n@@ -123,10 +125,11 @@ public void testSelectingReplImplementation() throws IOException {\n     Paragraph p2 = note.addParagraph();\n     p2.setConfig(config);\n     p2.setText(\"%mock2 hello world\");\n+    p2.setAuthenticationInfo(anonymous);\n     note.run(p2.getId());\n     while(p2.isTerminated()==false || p2.getResult()==null) Thread.yield();\n     assertEquals(\"repl2: hello world\", p2.getResult().message());\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n@@ -137,7 +140,7 @@ public void testReloadAndSetInterpreter() throws IOException {\n     FileUtils.copyDirectory(srcDir, destDir);\n \n     // when load\n-    notebook.reloadAllNotes(null);\n+    notebook.reloadAllNotes(anonymous);\n     assertEquals(1, notebook.getAllNotes().size());\n \n     // then interpreter factory should be injected into all the paragraphs\n@@ -169,8 +172,8 @@ public void testReloadAllNotes() throws IOException {\n     assertEquals(notes.size(), 0);\n \n     // load copied notebook on memory when reloadAllNotes() is called\n-    Note copiedNote = notebookRepo.get(\"2A94M5J1Z\", null);\n-    notebook.reloadAllNotes(null);\n+    Note copiedNote = notebookRepo.get(\"2A94M5J1Z\", anonymous);\n+    notebook.reloadAllNotes(anonymous);\n     notes = notebook.getAllNotes();\n     assertEquals(notes.size(), 2);\n     assertEquals(notes.get(1).getId(), copiedNote.getId());\n@@ -188,29 +191,29 @@ public void testReloadAllNotes() throws IOException {\n     assertEquals(notes.size(), 2);\n \n     // delete notebook from notebook list when reloadAllNotes() is called\n-    notebook.reloadAllNotes(null);\n+    notebook.reloadAllNotes(anonymous);\n     notes = notebook.getAllNotes();\n     assertEquals(notes.size(), 0);\n   }\n \n   @Test\n   public void testPersist() throws IOException, SchedulerException, RepositoryException {\n-    Note note = notebook.createNote(null);\n+    Note note = notebook.createNote(anonymous);\n \n     // run with default repl\n     Paragraph p1 = note.addParagraph();\n     Map config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n     p1.setText(\"hello world\");\n-    note.persist(null);\n+    note.persist(anonymous);\n \n     Notebook notebook2 = new Notebook(\n         conf, notebookRepo, schedulerFactory,\n-        new InterpreterFactory(conf, null, null, null, depResolver), this, null, null, null);\n+        new InterpreterFactory(conf, null, null, null, depResolver, false), this, null, null, null);\n \n     assertEquals(1, notebook2.getAllNotes().size());\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n@@ -223,17 +226,18 @@ public void testCreateNoteWithSubject() throws IOException, SchedulerException,\n     Set<String> owners = new HashSet<>();\n     owners.add(\"user1\");\n     assertEquals(owners, notebook.getNotebookAuthorization().getOwners(note.getId()));\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testClearParagraphOutput() throws IOException, SchedulerException{\n-    Note note = notebook.createNote(null);\n+    Note note = notebook.createNote(anonymous);\n     Paragraph p1 = note.addParagraph();\n     Map config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n     p1.setText(\"hello world\");\n+    p1.setAuthenticationInfo(anonymous);\n     note.run(p1.getId());\n \n     while(p1.isTerminated() == false || p1.getResult() == null) Thread.yield();\n@@ -242,13 +246,13 @@ public void testClearParagraphOutput() throws IOException, SchedulerException{\n     // clear paragraph output/result\n     note.clearParagraphOutput(p1.getId());\n     assertNull(p1.getResult());\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testRunAll() throws IOException {\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n     // p1\n     Paragraph p1 = note.addParagraph();\n@@ -280,14 +284,14 @@ public void testRunAll() throws IOException {\n     assertNull(p2.getResult());\n     assertEquals(\"repl1: p3\", p3.getResult().message());\n \n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testSchedule() throws InterruptedException, IOException {\n     // create a note and a paragraph\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n     Paragraph p = note.addParagraph();\n     Map config = new HashMap<String, Object>();\n@@ -313,14 +317,14 @@ public void testSchedule() throws InterruptedException, IOException {\n     assertNotNull(dateFinished);\n     Thread.sleep(1 * 1000);\n     assertEquals(dateFinished, p.getDateFinished());\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testAutoRestartInterpreterAfterSchedule() throws InterruptedException, IOException{\n     // create a note and a paragraph\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n     \n     Paragraph p = note.addParagraph();\n     Map config = new HashMap<String, Object>();\n@@ -341,11 +345,11 @@ public void testAutoRestartInterpreterAfterSchedule() throws InterruptedExceptio\n \n \n     MockInterpreter1 mock1 = ((MockInterpreter1) (((ClassloaderInterpreter)\n-        ((LazyOpenInterpreter) factory.getInterpreter(note.getId(), \"mock1\")).getInnerInterpreter())\n+        ((LazyOpenInterpreter) factory.getInterpreter(anonymous.getUser(), note.getId(), \"mock1\")).getInnerInterpreter())\n         .getInnerInterpreter()));\n \n     MockInterpreter2 mock2 = ((MockInterpreter2) (((ClassloaderInterpreter)\n-        ((LazyOpenInterpreter) factory.getInterpreter(note.getId(), \"mock2\")).getInnerInterpreter())\n+        ((LazyOpenInterpreter) factory.getInterpreter(anonymous.getUser(), note.getId(), \"mock2\")).getInnerInterpreter())\n         .getInnerInterpreter()));\n \n     // wait until interpreters are started\n@@ -366,14 +370,14 @@ public void testAutoRestartInterpreterAfterSchedule() throws InterruptedExceptio\n     // make sure all paragraph has been executed\n     assertNotNull(p.getDateFinished());\n     assertNotNull(p2.getDateFinished());\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testExportAndImportNote() throws IOException, CloneNotSupportedException,\n           InterruptedException, InterpreterException, SchedulerException, RepositoryException {\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n     final Paragraph p = note.addParagraph();\n     String simpleText = \"hello world\";\n@@ -386,7 +390,7 @@ public void testExportAndImportNote() throws IOException, CloneNotSupportedExcep\n \n     String exportedNoteJson = notebook.exportNote(note.getId());\n \n-    Note importedNote = notebook.importNote(exportedNoteJson, \"Title\", null);\n+    Note importedNote = notebook.importNote(exportedNoteJson, \"Title\", anonymous);\n \n     Paragraph p2 = importedNote.getParagraphs().get(0);\n \n@@ -403,24 +407,24 @@ public void testExportAndImportNote() throws IOException, CloneNotSupportedExcep\n     Set<String> owners = new HashSet<>();\n     owners.add(\"user1\");\n     assertEquals(owners, notebook.getNotebookAuthorization().getOwners(importedNote2.getId()));\n-    notebook.removeNote(note.getId(), null);\n-    notebook.removeNote(importedNote.getId(), null);\n-    notebook.removeNote(importedNote2.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n+    notebook.removeNote(importedNote.getId(), anonymous);\n+    notebook.removeNote(importedNote2.getId(), anonymous);\n   }\n \n   @Test\n   public void testCloneNote() throws IOException, CloneNotSupportedException,\n       InterruptedException, InterpreterException, SchedulerException, RepositoryException {\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n     final Paragraph p = note.addParagraph();\n     p.setText(\"hello world\");\n     note.runAll();\n     while(p.isTerminated()==false || p.getResult()==null) Thread.yield();\n \n     p.setStatus(Status.RUNNING);\n-    Note cloneNote = notebook.cloneNote(note.getId(), \"clone note\", null);\n+    Note cloneNote = notebook.cloneNote(note.getId(), \"clone note\", anonymous);\n     Paragraph cp = cloneNote.paragraphs.get(0);\n     assertEquals(cp.getStatus(), Status.READY);\n \n@@ -437,28 +441,28 @@ public void testCloneNote() throws IOException, CloneNotSupportedException,\n     Set<String> owners = new HashSet<>();\n     owners.add(\"user1\");\n     assertEquals(owners, notebook.getNotebookAuthorization().getOwners(cloneNote2.getId()));\n-    notebook.removeNote(note.getId(), null);\n-    notebook.removeNote(cloneNote.getId(), null);\n-    notebook.removeNote(cloneNote2.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n+    notebook.removeNote(cloneNote.getId(), anonymous);\n+    notebook.removeNote(cloneNote2.getId(), anonymous);\n   }\n \n   @Test\n   public void testCloneNoteWithNoName() throws IOException, CloneNotSupportedException,\n       InterruptedException {\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n \n-    Note cloneNote = notebook.cloneNote(note.getId(), null, null);\n+    Note cloneNote = notebook.cloneNote(note.getId(), null, anonymous);\n     assertEquals(cloneNote.getName(), \"Note \" + cloneNote.getId());\n-    notebook.removeNote(note.getId(), null);\n-    notebook.removeNote(cloneNote.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n+    notebook.removeNote(cloneNote.getId(), anonymous);\n   }\n \n   @Test\n   public void testCloneNoteWithExceptionResult() throws IOException, CloneNotSupportedException,\n       InterruptedException {\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n \n     final Paragraph p = note.addParagraph();\n     p.setText(\"hello world\");\n@@ -469,21 +473,21 @@ public void testCloneNoteWithExceptionResult() throws IOException, CloneNotSuppo\n     // Force paragraph to have String type object\n     p.setResult(\"Exception\");\n \n-    Note cloneNote = notebook.cloneNote(note.getId(), \"clone note with Exception result\", null);\n+    Note cloneNote = notebook.cloneNote(note.getId(), \"clone note with Exception result\", anonymous);\n     Paragraph cp = cloneNote.paragraphs.get(0);\n \n     // Keep same ParagraphID\n     assertEquals(cp.getId(), p.getId());\n     assertEquals(cp.text, p.text);\n     assertNull(cp.getResult());\n-    notebook.removeNote(note.getId(), null);\n-    notebook.removeNote(cloneNote.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n+    notebook.removeNote(cloneNote.getId(), anonymous);\n   }\n \n   @Test\n   public void testResourceRemovealOnParagraphNoteRemove() throws IOException {\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n     for (InterpreterGroup intpGroup : InterpreterGroup.getAll()) {\n       intpGroup.setResourcePool(new LocalResourcePool(intpGroup.getId()));\n     }\n@@ -499,23 +503,23 @@ public void testResourceRemovealOnParagraphNoteRemove() throws IOException {\n     assertEquals(2, ResourcePoolUtils.getAllResources().size());\n \n     // remove a paragraph\n-    note.removeParagraph(p1.getId());\n+    note.removeParagraph(anonymous.getUser(), p1.getId());\n     assertEquals(1, ResourcePoolUtils.getAllResources().size());\n \n     // remove note\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n     assertEquals(0, ResourcePoolUtils.getAllResources().size());\n   }\n \n   @Test\n   public void testAngularObjectRemovalOnNotebookRemove() throws InterruptedException,\n       IOException {\n     // create a note and a paragraph\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n \n     AngularObjectRegistry registry = factory\n-        .getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(\"sharedProcess\")\n+        .getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(anonymous.getUser(), \"sharedProcess\")\n         .getAngularObjectRegistry();\n \n     Paragraph p1 = note.addParagraph();\n@@ -530,7 +534,7 @@ public void testAngularObjectRemovalOnNotebookRemove() throws InterruptedExcepti\n     registry.add(\"o3\", \"object3\", null, null);\n \n     // remove notebook\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n \n     // notebook scope or paragraph scope object should be removed\n     assertNull(registry.get(\"o1\", note.getId(), null));\n@@ -544,11 +548,11 @@ public void testAngularObjectRemovalOnNotebookRemove() throws InterruptedExcepti\n   public void testAngularObjectRemovalOnParagraphRemove() throws InterruptedException,\n       IOException {\n     // create a note and a paragraph\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n \n     AngularObjectRegistry registry = factory\n-        .getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(\"sharedProcess\")\n+        .getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(anonymous.getUser(), \"sharedProcess\")\n         .getAngularObjectRegistry();\n \n     Paragraph p1 = note.addParagraph();\n@@ -563,26 +567,26 @@ public void testAngularObjectRemovalOnParagraphRemove() throws InterruptedExcept\n     registry.add(\"o3\", \"object3\", null, null);\n \n     // remove notebook\n-    note.removeParagraph(p1.getId());\n+    note.removeParagraph(anonymous.getUser(), p1.getId());\n \n     // paragraph scope should be removed\n     assertNull(registry.get(\"o1\", note.getId(), null));\n \n     // notebook scope and global object sould be remained\n     assertNotNull(registry.get(\"o2\", note.getId(), null));\n     assertNotNull(registry.get(\"o3\", null, null));\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testAngularObjectRemovalOnInterpreterRestart() throws InterruptedException,\n       IOException {\n     // create a note and a paragraph\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n \n     AngularObjectRegistry registry = factory\n-        .getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(\"sharedProcess\")\n+        .getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(anonymous.getUser(), \"sharedProcess\")\n         .getAngularObjectRegistry();\n \n     // add local scope object\n@@ -592,19 +596,19 @@ public void testAngularObjectRemovalOnInterpreterRestart() throws InterruptedExc\n \n     // restart interpreter\n     factory.restart(factory.getInterpreterSettings(note.getId()).get(0).getId());\n-    registry = factory.getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(\"sharedProcess\")\n+    registry = factory.getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(anonymous.getUser(), \"sharedProcess\")\n     .getAngularObjectRegistry();\n \n     // local and global scope object should be removed\n     assertNull(registry.get(\"o1\", note.getId(), null));\n     assertNull(registry.get(\"o2\", null, null));\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testPermissions() throws IOException {\n     // create a note and a paragraph\n-    Note note = notebook.createNote(null);\n+    Note note = notebook.createNote(anonymous);\n     NotebookAuthorization notebookAuthorization = notebook.getNotebookAuthorization();\n     // empty owners, readers or writers means note is public\n     assertEquals(notebookAuthorization.isOwner(note.getId(),\n@@ -643,14 +647,14 @@ public void testPermissions() throws IOException {\n     assertEquals(notebookAuthorization.isReader(note.getId(),\n         new HashSet<String>(Arrays.asList(\"user3\"))), true);\n \n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testAbortParagraphStatusOnInterpreterRestart() throws InterruptedException,\n       IOException {\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n \n     ArrayList<Paragraph> paragraphs = new ArrayList<>();\n     for (int i = 0; i < 100; i++) {\n@@ -681,19 +685,20 @@ public void testAbortParagraphStatusOnInterpreterRestart() throws InterruptedExc\n     }\n \n     assertTrue(isAborted);\n-    notebook.removeNote(note.getId(), null);\n+    notebook.removeNote(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testPerSessionInterpreterCloseOnNoteRemoval() throws IOException {\n     // create a notes\n-    Note note1  = notebook.createNote(null);\n+    Note note1  = notebook.createNote(anonymous);\n     Paragraph p1 = note1.addParagraph();\n     p1.setText(\"getId\");\n+    p1.setAuthenticationInfo(anonymous);\n \n-    // restart interpreter with per note session enabled\n+    // restart interpreter with per user session enabled\n     for (InterpreterSetting setting : factory.getInterpreterSettings(note1.getId())) {\n-      setting.getOption().setPerNoteSession(true);\n+      setting.getOption().setPerNote(setting.getOption().SCOPED);\n       notebook.getInterpreterFactory().restart(setting.getId());\n     }\n \n@@ -702,29 +707,32 @@ public void testPerSessionInterpreterCloseOnNoteRemoval() throws IOException {\n     InterpreterResult result = p1.getResult();\n \n     // remove note and recreate\n-    notebook.removeNote(note1.getId(), null);\n-    note1 = notebook.createNote(null);\n+    notebook.removeNote(note1.getId(), anonymous);\n+    note1 = notebook.createNote(anonymous);\n     p1 = note1.addParagraph();\n     p1.setText(\"getId\");\n+    p1.setAuthenticationInfo(anonymous);\n \n     note1.run(p1.getId());\n     while (p1.getStatus() != Status.FINISHED) Thread.yield();\n     assertNotEquals(p1.getResult().message(), result.message());\n \n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n   }\n \n   @Test\n   public void testPerSessionInterpreter() throws IOException {\n     // create two notes\n-    Note note1  = notebook.createNote(null);\n+    Note note1  = notebook.createNote(anonymous);\n     Paragraph p1 = note1.addParagraph();\n \n-    Note note2  = notebook.createNote(null);\n+    Note note2  = notebook.createNote(anonymous);\n     Paragraph p2 = note2.addParagraph();\n \n     p1.setText(\"getId\");\n+    p1.setAuthenticationInfo(anonymous);\n     p2.setText(\"getId\");\n+    p2.setAuthenticationInfo(anonymous);\n \n     // run per note session disabled\n     note1.run(p1.getId());\n@@ -738,7 +746,7 @@ public void testPerSessionInterpreter() throws IOException {\n \n     // restart interpreter with per note session enabled\n     for (InterpreterSetting setting : notebook.getInterpreterFactory().getInterpreterSettings(note1.getId())) {\n-      setting.getOption().setPerNoteSession(true);\n+      setting.getOption().setPerNote(InterpreterOption.SCOPED);\n       notebook.getInterpreterFactory().restart(setting.getId());\n     }\n \n@@ -751,20 +759,21 @@ public void testPerSessionInterpreter() throws IOException {\n \n     assertNotEquals(p1.getResult().message(), p2.getResult().message());\n \n-    notebook.removeNote(note1.getId(), null);\n-    notebook.removeNote(note2.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n+    notebook.removeNote(note2.getId(), anonymous);\n   }\n \n   @Test\n   public void testPerSessionInterpreterCloseOnUnbindInterpreterSetting() throws IOException {\n     // create a notes\n-    Note note1  = notebook.createNote(null);\n+    Note note1  = notebook.createNote(anonymous);\n     Paragraph p1 = note1.addParagraph();\n+    p1.setAuthenticationInfo(anonymous);\n     p1.setText(\"getId\");\n \n     // restart interpreter with per note session enabled\n     for (InterpreterSetting setting : factory.getInterpreterSettings(note1.getId())) {\n-      setting.getOption().setPerNoteSession(true);\n+      setting.getOption().setPerNote(InterpreterOption.SCOPED);\n       notebook.getInterpreterFactory().restart(setting.getId());\n     }\n \n@@ -775,15 +784,15 @@ public void testPerSessionInterpreterCloseOnUnbindInterpreterSetting() throws IO\n \n     // unbind, and rebind setting. that result interpreter instance close\n     List<String> bindedSettings = notebook.getBindedInterpreterSettingsIds(note1.getId());\n-    notebook.bindInterpretersToNote(note1.getId(), new LinkedList<String>());\n-    notebook.bindInterpretersToNote(note1.getId(), bindedSettings);\n+    notebook.bindInterpretersToNote(anonymous.getUser(), note1.getId(), new LinkedList<String>());\n+    notebook.bindInterpretersToNote(anonymous.getUser(), note1.getId(), bindedSettings);\n \n     note1.run(p1.getId());\n     while (p1.getStatus() != Status.FINISHED) Thread.yield();\n \n     assertNotEquals(result.message(), p1.getResult().message());\n \n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n   }\n \n   @Test\n@@ -825,7 +834,7 @@ public void onParagraphStatusChange(Paragraph p, Status status) {\n       }\n     });\n \n-    Note note1 = notebook.createNote(null);\n+    Note note1 = notebook.createNote(anonymous);\n     assertEquals(1, onNoteCreate.get());\n \n     Paragraph p1 = note1.addParagraph();\n@@ -834,22 +843,22 @@ public void onParagraphStatusChange(Paragraph p, Status status) {\n     note1.addCloneParagraph(p1);\n     assertEquals(2, onParagraphCreate.get());\n \n-    note1.removeParagraph(p1.getId());\n+    note1.removeParagraph(anonymous.getUser(), p1.getId());\n     assertEquals(1, onParagraphRemove.get());\n \n     List<String> settings = notebook.getBindedInterpreterSettingsIds(note1.getId());\n-    notebook.bindInterpretersToNote(note1.getId(), new LinkedList<String>());\n+    notebook.bindInterpretersToNote(anonymous.getUser(), note1.getId(), new LinkedList<String>());\n     assertEquals(settings.size(), unbindInterpreter.get());\n \n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n     assertEquals(1, onNoteRemove.get());\n     assertEquals(1, onParagraphRemove.get());\n   }\n \n   @Test\n   public void testNormalizeNoteName() throws IOException {\n     // create a notes\n-    Note note1  = notebook.createNote(null);\n+    Note note1  = notebook.createNote(anonymous);\n \n     note1.setName(\"MyNote\");\n     assertEquals(note1.getName(), \"MyNote\");\n@@ -869,29 +878,29 @@ public void testNormalizeNoteName() throws IOException {\n     note1.setName(\"\\\\\\\\\\\\MyNote///sub\");\n     assertEquals(note1.getName(), \"/MyNote/sub\");\n \n-    notebook.removeNote(note1.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n   }\n \n   @Test\n   public void testGetAllNotes() throws Exception {\n-    Note note1 = notebook.createNote(null);\n-    Note note2 = notebook.createNote(null);\n-    assertEquals(2, notebook.getAllNotes(new AuthenticationInfo(\"anonymous\")).size());\n+    Note note1 = notebook.createNote(anonymous);\n+    Note note2 = notebook.createNote(anonymous);\n+    assertEquals(2, notebook.getAllNotes(anonymous).size());\n \n     notebook.getNotebookAuthorization().setOwners(note1.getId(), Sets.newHashSet(\"user1\"));\n     notebook.getNotebookAuthorization().setWriters(note1.getId(), Sets.newHashSet(\"user1\"));\n     notebook.getNotebookAuthorization().setReaders(note1.getId(), Sets.newHashSet(\"user1\"));\n-    assertEquals(1, notebook.getAllNotes(new AuthenticationInfo(\"anonymous\")).size());\n+    assertEquals(1, notebook.getAllNotes(anonymous).size());\n     assertEquals(2, notebook.getAllNotes(new AuthenticationInfo(\"user1\")).size());\n \n     notebook.getNotebookAuthorization().setOwners(note2.getId(), Sets.newHashSet(\"user2\"));\n     notebook.getNotebookAuthorization().setWriters(note2.getId(), Sets.newHashSet(\"user2\"));\n     notebook.getNotebookAuthorization().setReaders(note2.getId(), Sets.newHashSet(\"user2\"));\n-    assertEquals(0, notebook.getAllNotes(new AuthenticationInfo(\"anonymous\")).size());\n+    assertEquals(0, notebook.getAllNotes(anonymous).size());\n     assertEquals(1, notebook.getAllNotes(new AuthenticationInfo(\"user1\")).size());\n     assertEquals(1, notebook.getAllNotes(new AuthenticationInfo(\"user2\")).size());\n-    notebook.removeNote(note1.getId(), null);\n-    notebook.removeNote(note2.getId(), null);\n+    notebook.removeNote(note1.getId(), anonymous);\n+    notebook.removeNote(note2.getId(), anonymous);\n   }\n \n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "sha": "d0af2c90abec2a12cb85527a541a7568f9b8b55c",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 45,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n import org.apache.zeppelin.search.SearchService;\n import org.apache.zeppelin.search.LuceneSearch;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.apache.zeppelin.user.Credentials;\n import org.junit.After;\n import org.junit.Before;\n@@ -65,6 +66,7 @@\n   private SearchService search;\n   private NotebookAuthorization notebookAuthorization;\n   private Credentials credentials;\n+  private AuthenticationInfo anonymous;\n   private static final Logger LOG = LoggerFactory.getLogger(NotebookRepoSyncTest.class);\n   \n   @Before\n@@ -95,14 +97,15 @@ public void setUp() throws Exception {\n     MockInterpreter2.register(\"mock2\", \"org.apache.zeppelin.interpreter.mock.MockInterpreter2\");\n \n     depResolver = new DependencyResolver(mainZepDir.getAbsolutePath() + \"/local-repo\");\n-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver);\n+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver, false);\n     \n     search = mock(SearchService.class);\n     notebookRepoSync = new NotebookRepoSync(conf);\n     notebookAuthorization = NotebookAuthorization.init(conf);\n     credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath());\n     notebookSync = new Notebook(conf, notebookRepoSync, schedulerFactory, factory, this, search,\n             notebookAuthorization, credentials);\n+    anonymous = new AuthenticationInfo(\"anonymous\");\n   }\n \n   @After\n@@ -119,48 +122,48 @@ public void testRepoCount() throws IOException {\n   public void testSyncOnCreate() throws IOException {\n     /* check that both storage systems are empty */\n     assertTrue(notebookRepoSync.getRepoCount() > 1);\n-    assertEquals(0, notebookRepoSync.list(0, null).size());\n-    assertEquals(0, notebookRepoSync.list(1, null).size());\n+    assertEquals(0, notebookRepoSync.list(0, anonymous).size());\n+    assertEquals(0, notebookRepoSync.list(1, anonymous).size());\n     \n     /* create note */\n-    Note note = notebookSync.createNote(null);\n+    Note note = notebookSync.createNote(anonymous);\n \n     // check that automatically saved on both storages\n-    assertEquals(1, notebookRepoSync.list(0, null).size());\n-    assertEquals(1, notebookRepoSync.list(1, null).size());\n-    assertEquals(notebookRepoSync.list(0, null).get(0).getId(),notebookRepoSync.list(1, null).get(0).getId());\n-\n-    notebookSync.removeNote(notebookRepoSync.list(0, null).get(0).getId(), null);\n+    assertEquals(1, notebookRepoSync.list(0, anonymous).size());\n+    assertEquals(1, notebookRepoSync.list(1, anonymous).size());\n+    assertEquals(notebookRepoSync.list(0, anonymous).get(0).getId(),notebookRepoSync.list(1, anonymous).get(0).getId());\n+    \n+    notebookSync.removeNote(notebookRepoSync.list(0, null).get(0).getId(), anonymous);\n   }\n \n   @Test\n   public void testSyncOnDelete() throws IOException {\n     /* create note */\n     assertTrue(notebookRepoSync.getRepoCount() > 1);\n-    assertEquals(0, notebookRepoSync.list(0, null).size());\n-    assertEquals(0, notebookRepoSync.list(1, null).size());\n+    assertEquals(0, notebookRepoSync.list(0, anonymous).size());\n+    assertEquals(0, notebookRepoSync.list(1, anonymous).size());\n     \n-    Note note = notebookSync.createNote(null);\n+    Note note = notebookSync.createNote(anonymous);\n \n     /* check that created in both storage systems */\n-    assertEquals(1, notebookRepoSync.list(0, null).size());\n-    assertEquals(1, notebookRepoSync.list(1, null).size());\n-    assertEquals(notebookRepoSync.list(0, null).get(0).getId(),notebookRepoSync.list(1, null).get(0).getId());\n+    assertEquals(1, notebookRepoSync.list(0, anonymous).size());\n+    assertEquals(1, notebookRepoSync.list(1, anonymous).size());\n+    assertEquals(notebookRepoSync.list(0, anonymous).get(0).getId(),notebookRepoSync.list(1, anonymous).get(0).getId());\n     \n     /* remove Note */\n-    notebookSync.removeNote(notebookRepoSync.list(0, null).get(0).getId(), null);\n+    notebookSync.removeNote(notebookRepoSync.list(0, anonymous).get(0).getId(), anonymous);\n     \n     /* check that deleted in both storages */\n-    assertEquals(0, notebookRepoSync.list(0, null).size());\n-    assertEquals(0, notebookRepoSync.list(1, null).size());\n+    assertEquals(0, notebookRepoSync.list(0, anonymous).size());\n+    assertEquals(0, notebookRepoSync.list(1, anonymous).size());\n     \n   }\n   \n   @Test\n   public void testSyncUpdateMain() throws IOException {\n     \n     /* create note */\n-    Note note = notebookSync.createNote(null);\n+    Note note = notebookSync.createNote(anonymous);\n     Paragraph p1 = note.addParagraph();\n     Map config = p1.getConfig();\n     config.put(\"enabled\", true);\n@@ -172,38 +175,38 @@ public void testSyncUpdateMain() throws IOException {\n     \n     /* new paragraph not yet saved into storages */\n     assertEquals(0, notebookRepoSync.get(0,\n-        notebookRepoSync.list(0, null).get(0).getId(), null).getParagraphs().size());\n+        notebookRepoSync.list(0, anonymous).get(0).getId(), anonymous).getParagraphs().size());\n     assertEquals(0, notebookRepoSync.get(1,\n-        notebookRepoSync.list(1, null).get(0).getId(), null).getParagraphs().size());\n+        notebookRepoSync.list(1, anonymous).get(0).getId(), anonymous).getParagraphs().size());\n     \n     /* save to storage under index 0 (first storage) */ \n-    notebookRepoSync.save(0, note, null);\n+    notebookRepoSync.save(0, note, anonymous);\n     \n     /* check paragraph saved to first storage */\n     assertEquals(1, notebookRepoSync.get(0,\n-        notebookRepoSync.list(0, null).get(0).getId(), null).getParagraphs().size());\n+        notebookRepoSync.list(0, anonymous).get(0).getId(), anonymous).getParagraphs().size());\n     /* check paragraph isn't saved to second storage */\n     assertEquals(0, notebookRepoSync.get(1,\n-        notebookRepoSync.list(1, null).get(0).getId(), null).getParagraphs().size());\n+        notebookRepoSync.list(1, anonymous).get(0).getId(), anonymous).getParagraphs().size());\n     /* apply sync */\n     notebookRepoSync.sync(null);\n     /* check whether added to second storage */\n     assertEquals(1, notebookRepoSync.get(1,\n-    notebookRepoSync.list(1, null).get(0).getId(), null).getParagraphs().size());\n+    notebookRepoSync.list(1, anonymous).get(0).getId(), anonymous).getParagraphs().size());\n     /* check whether same paragraph id */\n     assertEquals(p1.getId(), notebookRepoSync.get(0,\n-        notebookRepoSync.list(0, null).get(0).getId(), null).getLastParagraph().getId());\n+        notebookRepoSync.list(0, anonymous).get(0).getId(), anonymous).getLastParagraph().getId());\n     assertEquals(p1.getId(), notebookRepoSync.get(1,\n-        notebookRepoSync.list(1, null).get(0).getId(), null).getLastParagraph().getId());\n-    notebookRepoSync.remove(note.getId(), null);\n+        notebookRepoSync.list(1, anonymous).get(0).getId(), anonymous).getLastParagraph().getId());\n+    notebookRepoSync.remove(note.getId(), anonymous);\n   }\n \n   @Test\n   public void testSyncOnReloadedList() throws IOException {\n     /* check that both storage repos are empty */\n     assertTrue(notebookRepoSync.getRepoCount() > 1);\n-    assertEquals(0, notebookRepoSync.list(0, null).size());\n-    assertEquals(0, notebookRepoSync.list(1, null).size());\n+    assertEquals(0, notebookRepoSync.list(0, anonymous).size());\n+    assertEquals(0, notebookRepoSync.list(1, anonymous).size());\n \n     File srcDir = new File(\"src/test/resources/2A94M5J1Z\");\n     File destDir = new File(secNotebookDir + \"/2A94M5J1Z\");\n@@ -214,13 +217,13 @@ public void testSyncOnReloadedList() throws IOException {\n     } catch (IOException e) {\n       LOG.error(e.toString(), e);\n     }\n-    assertEquals(0, notebookRepoSync.list(0, null).size());\n-    assertEquals(1, notebookRepoSync.list(1, null).size());\n+    assertEquals(0, notebookRepoSync.list(0, anonymous).size());\n+    assertEquals(1, notebookRepoSync.list(1, anonymous).size());\n \n     // After reloading notebooks repos should be synchronized\n-    notebookSync.reloadAllNotes(null);\n-    assertEquals(1, notebookRepoSync.list(0, null).size());\n-    assertEquals(1, notebookRepoSync.list(1, null).size());\n+    notebookSync.reloadAllNotes(anonymous);\n+    assertEquals(1, notebookRepoSync.list(0, anonymous).size());\n+    assertEquals(1, notebookRepoSync.list(1, anonymous).size());\n   }\n \n   @Test\n@@ -287,15 +290,15 @@ public void testCheckpointOneStorage() throws IOException, SchedulerException {\n     GitNotebookRepo gitRepo = (GitNotebookRepo) vRepoSync.getRepo(0);\n     \n     // no notes\n-    assertThat(vRepoSync.list(null).size()).isEqualTo(0);\n+    assertThat(vRepoSync.list(anonymous).size()).isEqualTo(0);\n     // create note\n-    Note note = vNotebookSync.createNote(null);\n-    assertThat(vRepoSync.list(null).size()).isEqualTo(1);\n+    Note note = vNotebookSync.createNote(anonymous);\n+    assertThat(vRepoSync.list(anonymous).size()).isEqualTo(1);\n     \n-    String noteId = vRepoSync.list(null).get(0).getId();\n+    String noteId = vRepoSync.list(anonymous).get(0).getId();\n     // first checkpoint\n-    vRepoSync.checkpoint(noteId, \"checkpoint message\", null);\n-    int vCount = gitRepo.revisionHistory(noteId, null).size();\n+    vRepoSync.checkpoint(noteId, \"checkpoint message\", anonymous);\n+    int vCount = gitRepo.revisionHistory(noteId, anonymous).size();\n     assertThat(vCount).isEqualTo(1);\n     \n     Paragraph p = note.addParagraph();\n@@ -305,10 +308,10 @@ public void testCheckpointOneStorage() throws IOException, SchedulerException {\n     p.setText(\"%md checkpoint test\");\n     \n     // save and checkpoint again\n-    vRepoSync.save(note, null);\n-    vRepoSync.checkpoint(noteId, \"checkpoint message 2\", null);\n-    assertThat(gitRepo.revisionHistory(noteId, null).size()).isEqualTo(vCount + 1);\n-    notebookRepoSync.remove(note.getId(), null);\n+    vRepoSync.save(note, anonymous);\n+    vRepoSync.checkpoint(noteId, \"checkpoint message 2\", anonymous);\n+    assertThat(gitRepo.revisionHistory(noteId, anonymous).size()).isEqualTo(vCount + 1);\n+    notebookRepoSync.remove(note.getId(), anonymous);\n   }\n   \n   static void delete(File file){",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java",
                "sha": "43ed586135e94faa41a888282b55d2d81a29146b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 3,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "patch": "@@ -32,10 +32,12 @@\n import org.apache.zeppelin.interpreter.InterpreterOption;\n import org.apache.zeppelin.interpreter.mock.MockInterpreter1;\n import org.apache.zeppelin.notebook.*;\n+import org.apache.zeppelin.notebook.repo.zeppelinhub.security.Authentication;\n import org.apache.zeppelin.scheduler.JobListener;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n import org.apache.zeppelin.search.SearchService;\n import org.apache.zeppelin.search.LuceneSearch;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -76,7 +78,7 @@ public void setUp() throws Exception {\n \n     this.schedulerFactory = new SchedulerFactory();\n     depResolver = new DependencyResolver(mainZepDir.getAbsolutePath() + \"/local-repo\");\n-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver);\n+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver, false);\n \n     SearchService search = mock(SearchService.class);\n     notebookRepo = new VFSNotebookRepo(conf);\n@@ -106,14 +108,16 @@ public void testInvalidJsonFile() throws IOException {\n \n   @Test\n   public void testSaveNotebook() throws IOException, InterruptedException {\n-    Note note = notebook.createNote(null);\n-    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());\n+    AuthenticationInfo anonymous = new AuthenticationInfo(\"anonymous\");\n+    Note note = notebook.createNote(anonymous);\n+    factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n     Paragraph p1 = note.addParagraph();\n     Map<String, Object> config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n     p1.setText(\"%mock1 hello world\");\n+    p1.setAuthenticationInfo(anonymous);\n \n     note.run(p1.getId());\n     int timeout = 1;",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "sha": "e6236c85a217aa552e6ae9ef97394617c082d55a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java?ref=908b2a74ff59c231d4ba29de93812ea938f85f7f",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.zeppelin.notebook.Note;\n import org.apache.zeppelin.notebook.Paragraph;\n import org.apache.zeppelin.notebook.repo.NotebookRepo;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n@@ -41,6 +42,7 @@\n   private static NotebookRepo notebookRepoMock;\n   private static InterpreterFactory interpreterFactory;\n   private SearchService notebookIndex;\n+  private AuthenticationInfo anonymous;\n \n   @BeforeClass\n   public static void beforeStartUp() {\n@@ -54,6 +56,7 @@ public static void beforeStartUp() {\n   @Before\n   public void startUp() {\n     notebookIndex = new LuceneSearch();\n+    anonymous = new AuthenticationInfo(\"anonymous\");\n   }\n \n   @After\n@@ -202,7 +205,7 @@ public void canNotSearchBeforeIndexing() {\n     //when\n     Paragraph p1 = note1.getLastParagraph();\n     p1.setText(\"no no no\");\n-    note1.persist(null);\n+    note1.persist(anonymous);\n \n     //then\n     assertThat(resultForQuery(\"Notebook1\").size()).isEqualTo(1);\n@@ -226,7 +229,7 @@ public void canNotSearchBeforeIndexing() {\n \n     //when\n     note1.setName(\"NotebookN\");\n-    note1.persist(null);\n+    note1.persist(anonymous);\n \n     //then\n     assertThat(resultForQuery(\"Notebook1\")).isEmpty();",
                "raw_url": "https://github.com/apache/zeppelin/raw/908b2a74ff59c231d4ba29de93812ea938f85f7f/zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java",
                "sha": "bf4d9aa494c4a82dc736cfd3b6656f2fcb19b547",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1210] Run interpreter per user\n\n### What is this PR for?\nEnabling each user to run same interpreter.\n\n### What type of PR is it?\n[Improvement]\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-1210\n\n### How should this be tested?\n1. Enable shiro to use authentication mode\n1. Check `per user` in your interpreter tab\n1. Run different paragraphs with different users\n  1. Run `%spark sc.version`, you will see the two `res0: ...` in your paragraphs\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: CloverHearts <cloverheartsdev@gmail.com>\nAuthor: Jongyoul Lee <jongyoul@gmail.com>\n\nCloses #1265 from jongyoul/ZEPPELIN-1210 and squashes the following commits:\n\n48a0d8e [Jongyoul Lee] Fixed ZEPPELIN-1542 Fixed flaky test\ne84703d [Jongyoul Lee] Fixed ZEPPELIN-1542\nad80951 [Jongyoul Lee] Fixed some wrong logic of getInterpreterInstanceKey\ncee39f4 [Jongyoul Lee] Fixed to pass shiro information to InterpreterFactory from ZeppelinServer\n5e7da34 [Jongyoul Lee] Changed instanceKey and processKey for dealing with new UI\nd201950 [CloverHearts] fix eqeqeq issue for frontweb\nb18bff4 [CloverHearts] implement frontend for interpreter per user mode and misc mode\n1f64e52 [CloverHearts] change default value for pernote and peruser\n787a366 [CloverHearts] change Back-end test cases and member type (perNote, perUser)\n8586e1f [CloverHearts] change ui for interpreter running Per x mode\n0b5d671 [Jongyoul Lee] Fixed the style\n960bde1 [Jongyoul Lee] Removed SecurityUtils.getPrincipal Added fromMessage.principal to get right user\n01c7cf1 [Jongyoul Lee] Fixed NPE while testing ZeppelinSparkClusterTest\n1fb50ab [Jongyoul Lee] Fixed NPE while testing ZeppelinSparkClusterTest\nd1c4344 [Jongyoul Lee] Fixed getEditorSetting for having users' info\n12a27db [Jongyoul Lee] Fixed test after rebase\n510942b [Jongyoul Lee] Fixed test after rebase\ncb66946 [Jongyoul Lee] Fixed test after rebase\n18b39bd [Jongyoul Lee] Fixed test after rebase\ndaa634f [Jongyoul Lee] Fixed some tests after rebase\ned558be [Jongyoul Lee] Fixed some tests after rebase\nfa7fccb [Jongyoul Lee] Fixed destroying process of remoteInterpreterProcess\n0a73241 [Jongyoul Lee] Fixed conflict while rebasing.\ndf423d3 [Jongyoul Lee] Fixed NotebookRestApiTest\nb151366 [Jongyoul Lee] Fixed some codes after rebase\na32afd7 [Jongyoul Lee] Fixed some tests\n7b7eb78 [Jongyoul Lee] Fixed some tests\n47cc668 [Jongyoul Lee] Fixed tests to use AuthenticationInfo\n012cf99 [Jongyoul Lee] Fixed some mismatch after rebase\n9a03d40 [Jongyoul Lee] Reverted some value to default ones\n8589545 [Jongyoul Lee] Added option in UI\nccbedc1 [Jongyoul Lee] WIP\n94dfed2 [Jongyoul Lee] WIP\n6480d1d [Jongyoul Lee] resolved conflicts",
        "parent": "https://github.com/apache/zeppelin/commit/a3a2e4d340d14f9d6c4c7c85dd16425714f442b2",
        "patched_files": [
            "HeliumApplicationFactory.java",
            "log4j.properties",
            "interpreter-create.html",
            "LuceneSearch.java",
            "shiro.ini",
            "ZeppelinRestApi.java",
            "NotebookRestApi.java",
            "interpreter.controller.js",
            "InterpreterFactory.java",
            "Paragraph.java",
            "InterpreterGroup.java",
            "SecurityUtils.java",
            "NotebookServer.java",
            "InterpreterOption.java",
            "InterpreterSetting.java",
            "NotebookRepoSync.java",
            "ZeppelinServer.java",
            "RemoteInterpreter.java",
            "interpreter.html",
            "InterpreterRestApi.java",
            "VFSNotebookRepo.java",
            "Notebook.java",
            "Note.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterFactoryTest.java",
            "NotebookRepoSyncTest.java",
            "SecurityUtilsTest.java",
            "ZeppelinSparkClusterTest.java",
            "HeliumApplicationFactoryTest.java",
            "ZeppelinRestApiTest.java",
            "NotebookServerTest.java",
            "RemoteInterpreterTest.java",
            "LuceneSearchTest.java",
            "NoteTest.java",
            "ParagraphTest.java",
            "InterpreterRestApiTest.java",
            "NoteInterpreterLoaderTest.java",
            "VFSNotebookRepoTest.java",
            "NotebookTest.java",
            "NotebookRestApiTest.java"
        ]
    },
    "zeppelin_927f482": {
        "bug_id": "zeppelin_927f482",
        "commit": "https://github.com/apache/zeppelin/commit/927f482256d6da052edaf99d41ddbddf80334f7c",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/zeppelin/blob/927f482256d6da052edaf99d41ddbddf80334f7c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java?ref=927f482256d6da052edaf99d41ddbddf80334f7c",
                "deletions": 7,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "patch": "@@ -17,12 +17,6 @@\n \n package org.apache.zeppelin.rest;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n-\n import java.io.IOException;\n import java.util.List;\n import java.util.Map;\n@@ -46,6 +40,8 @@\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * BASIC Zeppelin rest api tests\n  *\n@@ -530,6 +526,28 @@ public void testCronJobs() throws InterruptedException, IOException{\n     assertThat(\"\", deleteCron, isAllowed());\n     deleteCron.releaseConnection();\n     ZeppelinServer.notebook.removeNote(note.getId());\n-  }  \n+  }\n+\n+  @Test\n+  public void testRegressionZEPPELIN_527() throws IOException {\n+    Note note = ZeppelinServer.notebook.createNote();\n+\n+    note.setName(\"note for run test\");\n+    Paragraph paragraph = note.addParagraph();\n+    paragraph.setText(\"%spark\\nval param = z.input(\\\"param\\\").toString\\nprintln(param)\");\n+\n+    note.persist();\n+\n+    GetMethod getNoteJobs = httpGet(\"/notebook/job/\" + note.getId());\n+    assertThat(\"test notebook jobs run:\", getNoteJobs, isAllowed());\n+    Map<String, Object> resp = gson.fromJson(getNoteJobs.getResponseBodyAsString(), new TypeToken<Map<String, Object>>() {\n+    }.getType());\n+    List<Map<String, String>> body = (List<Map<String, String>>) resp.get(\"body\");\n+    assertFalse(body.get(0).containsKey(\"started\"));\n+    assertFalse(body.get(0).containsKey(\"finished\"));\n+    getNoteJobs.releaseConnection();\n+\n+    ZeppelinServer.notebook.removeNote(note.getId());\n+  }\n }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/927f482256d6da052edaf99d41ddbddf80334f7c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "sha": "2db30924027a60e365ef4403695161b743df5cd1",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/927f482256d6da052edaf99d41ddbddf80334f7c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=927f482256d6da052edaf99d41ddbddf80334f7c",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -312,8 +312,12 @@ public Paragraph getLastParagraph() {\n         Map<String, String> info = new HashMap<>();\n         info.put(\"id\", p.getId());\n         info.put(\"status\", p.getStatus().toString());\n-        info.put(\"started\", p.getDateStarted().toString());\n-        info.put(\"finished\", p.getDateFinished().toString());\n+        if (p.getDateStarted() != null) {\n+          info.put(\"started\", p.getDateStarted().toString());\n+        }\n+        if (p.getDateFinished() != null) {\n+          info.put(\"finished\", p.getDateFinished().toString());\n+        }\n         paragraphsInfo.add(info);\n       }\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/927f482256d6da052edaf99d41ddbddf80334f7c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "d193ecc04f55ffb4b68966d1815b72b98ec6f9e7",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-527 Fix NPE while retrieving job status from notebook\n\n### What is this PR for?\n\nFix NPE while retrieving job status from notebook which contains \"never run\" / \"first run but not finished\".\n\n### What type of PR is it?\nBug Fix\n\n### Todos\n\n### Is there a relevant Jira issue?\n\nhttps://issues.apache.org/jira/browse/ZEPPELIN-527\n\n### How should this be tested?\n\n1. Create a new notebook (```but don't run notebook!```)\n2. Open ```http://<zeppelin host>:<zeppelin port>/api/notebook/job/<new notebook id>```\n3. You can see HTTP STATUS 500 before this PR, but you can see HTTP STATUS 200 after this PR.\n\n### Screenshots (if appropriate)\n\n![2015-12-22 1 25 36](https://cloud.githubusercontent.com/assets/1317309/11947812/87605786-a8af-11e5-9d3f-3fda7efd12da.png)\n\n### Questions:\n* Does the licenses files need update? (No)\n* Is there breaking changes for older versions? (No)\n* Does this needs documentation? (No)\n\nAuthor: Jungtaek Lim <kabhwan@gmail.com>\n\nCloses #562 from HeartSaVioR/ZEPPELIN-527 and squashes the following commits:\n\na1eacb6 [Jungtaek Lim] Merge branch 'master' into ZEPPELIN-527\ne08519e [Jungtaek Lim] ZEPPELIN-527 Don't include null value to the Map\nf296406 [Jungtaek Lim] ZEPPELIN-527 Fix NPE while retrieving job status from notebook",
        "parent": "https://github.com/apache/zeppelin/commit/ad7a6c0821840d32c8ddc87c9835c8b0cf1d33e1",
        "patched_files": [
            "Note.java",
            "ZeppelinRestApi.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "ZeppelinRestApiTest.java"
        ]
    },
    "zeppelin_9a610a7": {
        "bug_id": "zeppelin_9a610a7",
        "commit": "https://github.com/apache/zeppelin/commit/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java?ref=9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6",
                "deletions": 1,
                "filename": "jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "patch": "@@ -305,7 +305,15 @@ private InterpreterResult executeSql(String propertyKey, String sql,\n           int displayRowCount = 0;\n           while (resultSet.next() && displayRowCount < getMaxResult()) {\n             for (int i = 1; i < md.getColumnCount() + 1; i++) {\n-              msg.append(replaceReservedChars(isTableType, resultSet.getString(i)));\n+              Object resultObject;\n+              String resultValue;\n+              resultObject = resultSet.getObject(i);\n+              if (resultObject == null) {\n+                resultValue = \"null\";\n+              } else {\n+                resultValue = resultSet.getString(i);\n+              }\n+              msg.append(replaceReservedChars(isTableType, resultValue));\n               if (i != md.getColumnCount()) {\n                 msg.append(TAB);\n               }",
                "raw_url": "https://github.com/apache/zeppelin/raw/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "sha": "0c53281c27bdafcf2842f01cfd4d47691b89d0d2",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/zeppelin/blob/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6/jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java?ref=9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6",
                "deletions": 8,
                "filename": "jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
                "patch": "@@ -26,10 +26,7 @@\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.sql.Connection;\n-import java.sql.DriverManager;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n+import java.sql.*;\n import java.util.Properties;\n \n import org.apache.zeppelin.interpreter.InterpreterContext;\n@@ -64,9 +61,10 @@ public void setUp() throws Exception {\n     statement.execute(\n         \"DROP TABLE IF EXISTS test_table; \" +\n         \"CREATE TABLE test_table(id varchar(255), name varchar(255));\");\n-    statement.execute(\n-        \"insert into test_table(id, name) values ('a', 'a_name'),('b', 'b_name');\"\n-    );\n+\n+    PreparedStatement insertStatement = connection.prepareStatement(\"insert into test_table(id, name) values ('a', 'a_name'),('b', 'b_name'),('c', ?);\");\n+    insertStatement.setString(1, null);\n+    insertStatement.execute();\n   }\n \n \n@@ -139,7 +137,7 @@ public void testSelectQuery() throws SQLException, IOException {\n     JDBCInterpreter t = new JDBCInterpreter(properties);\n     t.open();\n \n-    String sqlQuery = \"select * from test_table\";\n+    String sqlQuery = \"select * from test_table WHERE ID in ('a', 'b')\";\n \n     InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null));\n \n@@ -148,6 +146,28 @@ public void testSelectQuery() throws SQLException, IOException {\n     assertEquals(\"ID\\tNAME\\na\\ta_name\\nb\\tb_name\\n\", interpreterResult.message());\n   }\n \n+  @Test\n+  public void testSelectQueryWithNull() throws SQLException, IOException {\n+    Properties properties = new Properties();\n+    properties.setProperty(\"common.max_count\", \"1000\");\n+    properties.setProperty(\"common.max_retry\", \"3\");\n+    properties.setProperty(\"default.driver\", \"org.h2.Driver\");\n+    properties.setProperty(\"default.url\", getJdbcConnection());\n+    properties.setProperty(\"default.user\", \"\");\n+    properties.setProperty(\"default.password\", \"\");\n+    JDBCInterpreter t = new JDBCInterpreter(properties);\n+    t.open();\n+\n+    String sqlQuery = \"select * from test_table WHERE ID = 'c'\";\n+\n+    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null));\n+\n+    assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());\n+    assertEquals(InterpreterResult.Type.TABLE, interpreterResult.type());\n+    assertEquals(\"ID\\tNAME\\nc\\tnull\\n\", interpreterResult.message());\n+  }\n+\n+\n   @Test\n   public void testSelectQueryMaxResult() throws SQLException, IOException {\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6/jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
                "sha": "18e8b331f2e2c8781aa1faf36616d14b5d6bef35",
                "status": "modified"
            }
        ],
        "message": "Zeppelin 639\n\n### What is this PR for?\nJDBCInterpreter should check for a null object before simply calling `getString`. This will prevent poorly implemented JDBC drivers from causing a NullPointerException.\n\n### What type of PR is it?\nImprovement\n\n### Todos\n\n### Is there a relevant Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-639\n\n### How should this be tested?\nRun the `testSelectQueryWithNull` test included with this PR.\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Chris Matta <cmatta@mapr.com>\nAuthor: vgmartinez <viktor.manuel.garcia@gmail.com>\n\nCloses #684 from cjmatta/ZEPPELIN-639 and squashes the following commits:\n\n875fdc9 [Chris Matta] Merge branch 'master' of https://github.com/apache/incubator-zeppelin into ZEPPELIN-639\n1475cb9 [Chris Matta] replacing modified note.json with master note.json\n15d3e69 [Chris Matta] Revert \"add test for parse propertyKey\"\n5d6df65 [Chris Matta] Revert \"fix parse property in interprete name\"\n901a59c [Chris Matta] Merged in upstream changes and fixed test case\n0f9737d [Chris Matta] Merge in upstream master\ned8c228 [Chris Matta] Zeppelin 639 ### What is this PR for? JDBCInterpreter should check for a null object before simply calling . This will prevent poorly implemented JDBC drivers from causing a NullPointerException.\n4247356 [Chris Matta] Added check for null in resultSet. Added tests.\n6db8d0a [Chris Matta] Merge branch 'master' into bug_628\nf228b84 [vgmartinez] add test for parse propertyKey\n0a0ad72 [vgmartinez] fix parse property in interprete name",
        "parent": "https://github.com/apache/zeppelin/commit/39417c073b6d5d6d206ea021f0d68aeb3c81f859",
        "patched_files": [
            "JDBCInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "JDBCInterpreterTest.java"
        ]
    },
    "zeppelin_9e75f5b": {
        "bug_id": "zeppelin_9e75f5b",
        "commit": "https://github.com/apache/zeppelin/commit/9e75f5b50ac1573d423fa937b801df77d6a36f3c",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 6,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "patch": "@@ -344,12 +344,12 @@ public Response createNote(String message) throws IOException {\n     List<NewParagraphRequest> initialParagraphs = request.getParagraphs();\n     if (initialParagraphs != null) {\n       for (NewParagraphRequest paragraphRequest : initialParagraphs) {\n-        Paragraph p = note.addParagraph();\n+        Paragraph p = note.addParagraph(subject);\n         p.setTitle(paragraphRequest.getTitle());\n         p.setText(paragraphRequest.getText());\n       }\n     }\n-    note.addParagraph(); // add one paragraph to the last\n+    note.addParagraph(subject); // add one paragraph to the last\n     String noteName = request.getName();\n     if (noteName.isEmpty()) {\n       noteName = \"Note \" + note.getId();\n@@ -432,18 +432,17 @@ public Response insertParagraph(@PathParam(\"noteId\") String noteId, String messa\n     checkIfUserCanWrite(noteId, \"Insufficient privileges you cannot add paragraph to this note\");\n \n     NewParagraphRequest request = gson.fromJson(message, NewParagraphRequest.class);\n-\n+    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());\n     Paragraph p;\n     Double indexDouble = request.getIndex();\n     if (indexDouble == null) {\n-      p = note.addParagraph();\n+      p = note.addParagraph(subject);\n     } else {\n-      p = note.insertParagraph(indexDouble.intValue());\n+      p = note.insertParagraph(indexDouble.intValue(), subject);\n     }\n     p.setTitle(request.getTitle());\n     p.setText(request.getText());\n \n-    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());\n     note.persist(subject);\n     notebookServer.broadcastNote(note);\n     return new JsonResponse<>(Status.CREATED, \"\", p.getId()).build();",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "sha": "64d65f4de2b04e875e9cb0dafad6a0491eeeee9c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 7,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "patch": "@@ -888,7 +888,7 @@ private void createNote(NotebookSocket conn, HashSet<String> userAndRoles, Noteb\n         note = notebook.createNote(subject);\n       }\n \n-      note.addParagraph(); // it's an empty note. so add one paragraph\n+      note.addParagraph(subject); // it's an empty note. so add one paragraph\n       if (message != null) {\n         String noteName = (String) message.get(\"name\");\n         if (StringUtils.isEmpty(noteName)) {\n@@ -1331,7 +1331,7 @@ private String insertParagraph(NotebookSocket conn, HashSet<String> userAndRoles\n       return null;\n     }\n \n-    Paragraph newPara = note.insertParagraph(index);\n+    Paragraph newPara = note.insertParagraph(index, subject);\n     note.persist(subject);\n     broadcastNewParagraph(note, newPara);\n \n@@ -1390,9 +1390,9 @@ private void runParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Not\n     String text = (String) fromMessage.get(\"paragraph\");\n     p.setText(text);\n     p.setTitle((String) fromMessage.get(\"title\"));\n-    AuthenticationInfo authenticationInfo =\n+    AuthenticationInfo subject =\n         new AuthenticationInfo(fromMessage.principal, fromMessage.ticket);\n-    p.setAuthenticationInfo(authenticationInfo);\n+    p.setAuthenticationInfo(subject);\n \n     Map<String, Object> params = (Map<String, Object>) fromMessage.get(\"params\");\n     p.settings.setParams(params);\n@@ -1402,12 +1402,10 @@ private void runParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Not\n     // if it's the last paragraph, let's add a new one\n     boolean isTheLastParagraph = note.isLastParagraph(p.getId());\n     if (isTheLastParagraph) {\n-      Paragraph newPara = note.addParagraph();\n+      Paragraph newPara = note.addParagraph(subject);\n       broadcastNewParagraph(note, newPara);\n     }\n \n-    AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);\n-\n     try {\n       note.persist(subject);\n     } catch (FileSystemException ex) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "sha": "1001961d23b5b0ca57c208ebfb3bb5dd4b76e402",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 3,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "patch": "@@ -242,7 +242,7 @@ public void testInterpreterAutoBinding() throws IOException {\n   public void testInterpreterRestart() throws IOException, InterruptedException {\n     // when: create new note\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n-    note.addParagraph();\n+    note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Paragraph p = note.getLastParagraph();\n     Map config = p.getConfig();\n     config.put(\"enabled\", true);\n@@ -269,7 +269,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {\n     }\n \n     // when: run markdown paragraph, again\n-    p = note.addParagraph();\n+    p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p.setConfig(config);\n     p.setText(\"%md markdown restarted\");\n     p.setAuthenticationInfo(anonymous);\n@@ -287,7 +287,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {\n   public void testRestartInterpreterPerNote() throws IOException, InterruptedException {\n     // when: create new note\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n-    note.addParagraph();\n+    note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Paragraph p = note.getLastParagraph();\n     Map config = p.getConfig();\n     config.put(\"enabled\", true);",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "sha": "ac0d106b9a15f07cfd702164003f34b5ebd50c7e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 6,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "patch": "@@ -72,7 +72,7 @@ public void setUp() {\n   @Test\n   public void testGetNoteParagraphJobStatus() throws IOException {\n     Note note1 = ZeppelinServer.notebook.createNote(anonymous);\n-    note1.addParagraph();\n+    note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     String paragraphId = note1.getLastParagraph().getId();\n \n@@ -94,9 +94,9 @@ public void testGetNoteParagraphJobStatus() throws IOException {\n   @Test\n   public void testRunParagraphJob() throws IOException {\n     Note note1 = ZeppelinServer.notebook.createNote(anonymous);\n-    note1.addParagraph();\n+    note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n-    Paragraph p = note1.addParagraph();\n+    Paragraph p = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     // run blank paragraph\n     PostMethod post = httpPost(\"/notebook/job/\" + note1.getId() + \"/\" + p.getId(), \"\");\n@@ -150,7 +150,7 @@ public void testCloneNote() throws IOException {\n   public void testUpdateParagraphConfig() throws IOException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n     String noteId = note.getId();\n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     assertNull(p.getConfig().get(\"colWidth\"));\n     String paragraphId = p.getId();\n     String jsonRequest = \"{\\\"colWidth\\\": 6.0}\";\n@@ -176,11 +176,11 @@ public void testUpdateParagraphConfig() throws IOException {\n   public void testClearAllParagraphOutput() throws IOException {\n     // Create note and set result explicitly\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     InterpreterResult result = new InterpreterResult(InterpreterResult.Code.SUCCESS, InterpreterResult.Type.TEXT, \"result\");\n     p1.setResult(result);\n \n-    Paragraph p2 = note.addParagraph();\n+    Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p2.setReturn(result, new Throwable());\n \n     // clear paragraph result",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "sha": "b187bfeaa8d6f9712361d941e9fbc4dc1114d494",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 13,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "patch": "@@ -88,7 +88,7 @@ public void testGetNoteInfo() throws IOException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"note\");\n-    Paragraph paragraph = note.addParagraph();\n+    Paragraph paragraph = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n     paragraph.setConfig(config);\n@@ -218,7 +218,7 @@ public void testexportNote() throws IOException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"source note for export\");\n-    Paragraph paragraph = note.addParagraph();\n+    Paragraph paragraph = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n     paragraph.setConfig(config);\n@@ -251,7 +251,7 @@ public void testImportNotebook() throws IOException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(noteName);\n-    Paragraph paragraph = note.addParagraph();\n+    Paragraph paragraph = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n     paragraph.setConfig(config);\n@@ -313,7 +313,7 @@ public void testCloneNote() throws IOException, CloneNotSupportedException, Ille\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"source note for clone\");\n-    Paragraph paragraph = note.addParagraph();\n+    Paragraph paragraph = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n     paragraph.setConfig(config);\n@@ -364,7 +364,7 @@ public void testNoteJobs() throws IOException, InterruptedException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"note for run test\");\n-    Paragraph paragraph = note.addParagraph();\n+    Paragraph paragraph = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     \n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n@@ -419,7 +419,7 @@ public void testGetNoteJob() throws IOException, InterruptedException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"note for run test\");\n-    Paragraph paragraph = note.addParagraph();\n+    Paragraph paragraph = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n@@ -473,7 +473,7 @@ public void testRunParagraphWithParams() throws IOException, InterruptedExceptio\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n     assertNotNull(\"can't create new note\", note);\n     note.setName(\"note for run test\");\n-    Paragraph paragraph = note.addParagraph();\n+    Paragraph paragraph = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     Map config = paragraph.getConfig();\n     config.put(\"enabled\", true);\n@@ -517,7 +517,7 @@ public void testJobs() throws InterruptedException, IOException{\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n     note.setName(\"note for run test\");\n-    Paragraph paragraph = note.addParagraph();\n+    Paragraph paragraph = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     paragraph.setText(\"%md This is test paragraph.\");\n     \n     Map config = paragraph.getConfig();\n@@ -566,7 +566,7 @@ public void testRegressionZEPPELIN_527() throws IOException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n     note.setName(\"note for run test\");\n-    Paragraph paragraph = note.addParagraph();\n+    Paragraph paragraph = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     paragraph.setText(\"%spark\\nval param = z.input(\\\"param\\\").toString\\nprintln(param)\");\n \n     note.persist(anonymous);\n@@ -627,7 +627,7 @@ public void testInsertParagraph() throws IOException {\n   public void testGetParagraph() throws IOException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p.setTitle(\"hello\");\n     p.setText(\"world\");\n     note.persist(anonymous);\n@@ -656,11 +656,11 @@ public void testGetParagraph() throws IOException {\n   public void testMoveParagraph() throws IOException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p.setTitle(\"title1\");\n     p.setText(\"text1\");\n \n-    Paragraph p2 = note.addParagraph();\n+    Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p2.setTitle(\"title2\");\n     p2.setText(\"text2\");\n \n@@ -688,7 +688,7 @@ public void testMoveParagraph() throws IOException {\n   public void testDeleteParagraph() throws IOException {\n     Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p.setTitle(\"title1\");\n     p.setText(\"text1\");\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "sha": "9fa6c512b541ef601bdb1418e4ff9d128220be47",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 19,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java",
                "patch": "@@ -81,7 +81,7 @@ public void basicRDDTransformationAndActionTest() throws IOException {\n         Note note = ZeppelinServer.notebook.createNote(anonymous);\n \n         // run markdown paragraph, again\n-        Paragraph p = note.addParagraph();\n+        Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n         Map config = p.getConfig();\n         config.put(\"enabled\", true);\n         p.setConfig(config);\n@@ -102,7 +102,7 @@ public void sparkSQLTest() throws IOException {\n         // DataFrame API is available from spark 1.3\n         if (sparkVersion >= 13) {\n             // test basic dataframe api\n-            Paragraph p = note.addParagraph();\n+            Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n             Map config = p.getConfig();\n             config.put(\"enabled\", true);\n             p.setConfig(config);\n@@ -116,7 +116,7 @@ public void sparkSQLTest() throws IOException {\n                     \"Array[org.apache.spark.sql.Row] = Array([hello,20])\"));\n \n             // test display DataFrame\n-            p = note.addParagraph();\n+            p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n             config = p.getConfig();\n             config.put(\"enabled\", true);\n             p.setConfig(config);\n@@ -131,7 +131,7 @@ public void sparkSQLTest() throws IOException {\n \n             // test display DataSet\n             if (sparkVersion >= 20) {\n-                p = note.addParagraph();\n+                p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n                 config = p.getConfig();\n                 config.put(\"enabled\", true);\n                 p.setConfig(config);\n@@ -170,7 +170,7 @@ public void sparkRTest() throws IOException {\n         if (sparkVersion >= 20) {\n           sqlContextName = \"spark\";\n         }\n-        Paragraph p = note.addParagraph();\n+        Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n         Map config = p.getConfig();\n         config.put(\"enabled\", true);\n         p.setConfig(config);\n@@ -197,7 +197,7 @@ public void pySparkTest() throws IOException {\n \n         if (isPyspark() && sparkVersion >= 12) {   // pyspark supported from 1.2.1\n             // run markdown paragraph, again\n-            Paragraph p = note.addParagraph();\n+            Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n             Map config = p.getConfig();\n             config.put(\"enabled\", true);\n             p.setConfig(config);\n@@ -209,7 +209,7 @@ public void pySparkTest() throws IOException {\n             assertEquals(\"55\\n\", p.getResult().message().get(0).getData());\n             if (sparkVersion >= 13) {\n                 // run sqlContext test\n-                p = note.addParagraph();\n+                p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n                 config = p.getConfig();\n                 config.put(\"enabled\", true);\n                 p.setConfig(config);\n@@ -223,7 +223,7 @@ public void pySparkTest() throws IOException {\n                 assertEquals(\"[Row(age=20, id=1)]\\n\", p.getResult().message().get(0).getData());\n \n                 // test display Dataframe\n-                p = note.addParagraph();\n+                p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n                 config = p.getConfig();\n                 config.put(\"enabled\", true);\n                 p.setConfig(config);\n@@ -239,7 +239,7 @@ public void pySparkTest() throws IOException {\n                 assertEquals(\"age\\tid\\n20\\t1\\n\", p.getResult().message().get(0).getData());\n \n                 // test udf\n-                p = note.addParagraph();\n+                p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n                 config = p.getConfig();\n                 config.put(\"enabled\", true);\n                 p.setConfig(config);\n@@ -253,7 +253,7 @@ public void pySparkTest() throws IOException {\n             }\n             if (sparkVersion >= 20) {\n                 // run SparkSession test\n-                p = note.addParagraph();\n+                p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n                 config = p.getConfig();\n                 config.put(\"enabled\", true);\n                 p.setConfig(config);\n@@ -267,7 +267,7 @@ public void pySparkTest() throws IOException {\n                 assertEquals(\"[Row(age=20, id=1)]\\n\", p.getResult().message().get(0).getData());\n \n                 // test udf\n-                p = note.addParagraph();\n+                p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n                 config = p.getConfig();\n                 config.put(\"enabled\", true);\n                 p.setConfig(config);\n@@ -294,7 +294,7 @@ public void pySparkAutoConvertOptionTest() throws IOException {\n \n         if (isPyspark() && sparkVersionNumber >= 14) {   // auto_convert enabled from spark 1.4\n             // run markdown paragraph, again\n-            Paragraph p = note.addParagraph();\n+            Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n             Map config = p.getConfig();\n             config.put(\"enabled\", true);\n             p.setConfig(config);\n@@ -319,19 +319,19 @@ public void pySparkAutoConvertOptionTest() throws IOException {\n     public void zRunTest() throws IOException {\n         // create new note\n         Note note = ZeppelinServer.notebook.createNote(anonymous);\n-        Paragraph p0 = note.addParagraph();\n+        Paragraph p0 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n         Map config0 = p0.getConfig();\n         config0.put(\"enabled\", true);\n         p0.setConfig(config0);\n         p0.setText(\"%spark z.run(1)\");\n         p0.setAuthenticationInfo(anonymous);\n-        Paragraph p1 = note.addParagraph();\n+        Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n         Map config1 = p1.getConfig();\n         config1.put(\"enabled\", true);\n         p1.setConfig(config1);\n         p1.setText(\"%spark val a=10\");\n         p1.setAuthenticationInfo(anonymous);\n-        Paragraph p2 = note.addParagraph();\n+        Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n         Map config2 = p2.getConfig();\n         config2.put(\"enabled\", true);\n         p2.setConfig(config2);\n@@ -347,7 +347,7 @@ public void zRunTest() throws IOException {\n         assertEquals(Status.FINISHED, p2.getStatus());\n         assertEquals(\"10\", p2.getResult().message().get(0).getData());\n \n-        Paragraph p3 = note.addParagraph();\n+        Paragraph p3 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n         Map config3 = p3.getConfig();\n         config3.put(\"enabled\", true);\n         p3.setConfig(config3);\n@@ -397,7 +397,7 @@ public void pySparkDepLoaderTest() throws IOException {\n             }\n \n             // load dep\n-            Paragraph p0 = note.addParagraph();\n+            Paragraph p0 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n             Map config = p0.getConfig();\n             config.put(\"enabled\", true);\n             p0.setConfig(config);\n@@ -412,7 +412,7 @@ public void pySparkDepLoaderTest() throws IOException {\n             FileUtils.write(tmpFile, \"a,b\\n1,2\");\n \n             // load data using libraries from dep loader\n-            Paragraph p1 = note.addParagraph();\n+            Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n             p1.setConfig(config);\n \n             String sqlContextName = \"sqlContext\";\n@@ -438,7 +438,7 @@ public void pySparkDepLoaderTest() throws IOException {\n      * eg. 1.1.x => 11, 1.2.x => 12, 1.3.x => 13 ...\n      */\n     private int getSparkVersionNumber(Note note) {\n-        Paragraph p = note.addParagraph();\n+        Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n         note.setName(\"note\");\n         Map config = p.getConfig();\n         config.put(\"enabled\", true);",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java",
                "sha": "52018d6bcbdcc7d63ec866a65ee5404d0a56ddbd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 1,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java",
                "patch": "@@ -110,7 +110,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr\n     }\n \n     // start interpreter process\n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"%md start remote interpreter process\");\n     p1.setAuthenticationInfo(anonymous);\n     note1.run(p1.getId());",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java",
                "sha": "9e64e4069e152ef2eb80df3d5599eac71e707285",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -271,8 +271,9 @@ public void setCredentials(Credentials credentials) {\n   /**\n    * Add paragraph last.\n    */\n-  public Paragraph addParagraph() {\n+  public Paragraph addParagraph(AuthenticationInfo authenticationInfo) {\n     Paragraph p = new Paragraph(this, this, factory);\n+    p.setAuthenticationInfo(authenticationInfo);\n     setParagraphMagic(p, paragraphs.size());\n     synchronized (paragraphs) {\n       paragraphs.add(p);\n@@ -327,8 +328,9 @@ void addCloneParagraph(Paragraph srcParagraph) {\n    *\n    * @param index index of paragraphs\n    */\n-  public Paragraph insertParagraph(int index) {\n+  public Paragraph insertParagraph(int index, AuthenticationInfo authenticationInfo) {\n     Paragraph p = new Paragraph(this, this, factory);\n+    p.setAuthenticationInfo(authenticationInfo);\n     setParagraphMagic(p, index);\n     synchronized (paragraphs) {\n       paragraphs.add(index, p);",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "855c0b43783a9436027d8d8479aa986a7affb930",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 5,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "patch": "@@ -139,7 +139,7 @@ public void testLoadRunUnloadApplication()\n     Note note1 = notebook.createNote(anonymous);\n     factory.setInterpreters(\"user\", note1.getId(),factory.getDefaultInterpreterSettingList());\n \n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     // make sure interpreter process running\n     p1.setText(\"%mock1 job\");\n@@ -184,7 +184,7 @@ public void testUnloadOnParagraphRemove() throws IOException {\n     Note note1 = notebook.createNote(anonymous);\n     factory.setInterpreters(\"user\", note1.getId(), factory.getDefaultInterpreterSettingList());\n \n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     // make sure interpreter process running\n     p1.setText(\"%mock1 job\");\n@@ -223,7 +223,7 @@ public void testUnloadOnInterpreterUnbind() throws IOException {\n     Note note1 = notebook.createNote(anonymous);\n     notebook.bindInterpretersToNote(\"user\", note1.getId(), factory.getDefaultInterpreterSettingList());\n \n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     // make sure interpreter process running\n     p1.setText(\"%mock1 job\");\n@@ -254,7 +254,7 @@ public void testInterpreterUnbindOfNullReplParagraph() throws IOException {\n     Note note1 = notebook.createNote(anonymous);\n \n     // add paragraph with invalid magic\n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"%fake \");\n \n     // make sure that p1's repl is null\n@@ -290,7 +290,7 @@ public void testUnloadOnInterpreterRestart() throws IOException {\n       }\n     }\n \n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     // make sure interpreter process running\n     p1.setText(\"%mock1 job\");",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "sha": "73c78d33fc0a71ed219d9765bda409efd9387138",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 10,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java",
                "patch": "@@ -70,7 +70,7 @@ public void runNormalTest() {\n     String pText = \"%spark sc.version\";\n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n \n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p.setText(pText);\n     p.setAuthenticationInfo(anonymous);\n     note.run(p.getId());\n@@ -86,7 +86,7 @@ public void runNormalTest() {\n   public void addParagraphWithEmptyReplNameTest() {\n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n \n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     assertNull(p.getText());\n   }\n \n@@ -95,9 +95,9 @@ public void addParagraphWithLastReplNameTest() {\n     when(interpreterFactory.getInterpreter(anyString(), anyString(), eq(\"spark\"))).thenReturn(interpreter);\n \n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"%spark \");\n-    Paragraph p2 = note.addParagraph();\n+    Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     assertEquals(\"%spark\\n\", p2.getText());\n   }\n@@ -107,9 +107,9 @@ public void insertParagraphWithLastReplNameTest() {\n     when(interpreterFactory.getInterpreter(anyString(), anyString(), eq(\"spark\"))).thenReturn(interpreter);\n \n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"%spark \");\n-    Paragraph p2 = note.insertParagraph(note.getParagraphs().size());\n+    Paragraph p2 = note.insertParagraph(note.getParagraphs().size(), AuthenticationInfo.ANONYMOUS);\n \n     assertEquals(\"%spark\\n\", p2.getText());\n   }\n@@ -119,9 +119,9 @@ public void insertParagraphWithInvalidReplNameTest() {\n     when(interpreterFactory.getInterpreter(anyString(), anyString(), eq(\"invalid\"))).thenReturn(null);\n \n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"%invalid \");\n-    Paragraph p2 = note.insertParagraph(note.getParagraphs().size());\n+    Paragraph p2 = note.insertParagraph(note.getParagraphs().size(), AuthenticationInfo.ANONYMOUS);\n \n     assertNull(p2.getText());\n   }\n@@ -132,11 +132,11 @@ public void clearAllParagraphOutputTest() {\n     when(interpreter.getScheduler()).thenReturn(scheduler);\n \n     Note note = new Note(repo, interpreterFactory, jobListenerFactory, index, credentials, noteEventListener);\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     InterpreterResult result = new InterpreterResult(InterpreterResult.Code.SUCCESS, InterpreterResult.Type.TEXT, \"result\");\n     p1.setResult(result);\n \n-    Paragraph p2 = note.addParagraph();\n+    Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p2.setReturn(result, new Throwable());\n \n     note.clearAllParagraphOutput();",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java",
                "sha": "354baaefcf57c30aa131e73458c477b19b95ded5",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 28,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "patch": "@@ -111,7 +111,7 @@ public void testSelectingReplImplementation() throws IOException {\n     factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n \n     // run with default repl\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n@@ -122,7 +122,7 @@ public void testSelectingReplImplementation() throws IOException {\n     assertEquals(\"repl1: hello world\", p1.getResult().message().get(0).getData());\n \n     // run with specific repl\n-    Paragraph p2 = note.addParagraph();\n+    Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p2.setConfig(config);\n     p2.setText(\"%mock2 hello world\");\n     p2.setAuthenticationInfo(anonymous);\n@@ -202,7 +202,7 @@ public void testLoadAllNotes() {\n     try {\n       assertEquals(0, notebook.getAllNotes().size());\n       note = notebook.createNote(anonymous);\n-      Paragraph p1 = note.addParagraph();\n+      Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n       Map config = p1.getConfig();\n       config.put(\"enabled\", true);\n       p1.setConfig(config);\n@@ -225,7 +225,7 @@ public void testPersist() throws IOException, SchedulerException, RepositoryExce\n     Note note = notebook.createNote(anonymous);\n \n     // run with default repl\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n@@ -256,7 +256,7 @@ public void testCreateNoteWithSubject() throws IOException, SchedulerException,\n   @Test\n   public void testClearParagraphOutput() throws IOException, SchedulerException{\n     Note note = notebook.createNote(anonymous);\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n@@ -276,7 +276,7 @@ public void testClearParagraphOutput() throws IOException, SchedulerException{\n   @Test\n   public void testRunBlankParagraph() throws IOException, SchedulerException, InterruptedException {\n     Note note = notebook.createNote(anonymous);\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"\");\n     p1.setAuthenticationInfo(anonymous);\n     note.run(p1.getId());\n@@ -293,21 +293,21 @@ public void testRunAll() throws IOException {\n     factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n     // p1\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config1 = p1.getConfig();\n     config1.put(\"enabled\", true);\n     p1.setConfig(config1);\n     p1.setText(\"p1\");\n \n     // p2\n-    Paragraph p2 = note.addParagraph();\n+    Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config2 = p2.getConfig();\n     config2.put(\"enabled\", false);\n     p2.setConfig(config2);\n     p2.setText(\"p2\");\n \n     // p3\n-    Paragraph p3 = note.addParagraph();\n+    Paragraph p3 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p3.setText(\"p3\");\n \n     // when\n@@ -331,7 +331,7 @@ public void testSchedule() throws InterruptedException, IOException {\n     Note note = notebook.createNote(anonymous);\n     factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = new HashMap<>();\n     p.setConfig(config);\n     p.setText(\"p1\");\n@@ -364,12 +364,12 @@ public void testAutoRestartInterpreterAfterSchedule() throws InterruptedExceptio\n     Note note = notebook.createNote(anonymous);\n     factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n     \n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = new HashMap<>();\n     p.setConfig(config);\n     p.setText(\"sleep 1000\");\n \n-    Paragraph p2 = note.addParagraph();\n+    Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p2.setConfig(config);\n     p2.setText(\"%mock2 sleep 500\");\n \n@@ -417,7 +417,7 @@ public void testExportAndImportNote() throws IOException, CloneNotSupportedExcep\n     Note note = notebook.createNote(anonymous);\n     factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n-    final Paragraph p = note.addParagraph();\n+    final Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     String simpleText = \"hello world\";\n     p.setText(simpleText);\n \n@@ -456,7 +456,7 @@ public void testCloneNote() throws IOException, CloneNotSupportedException,\n     Note note = notebook.createNote(anonymous);\n     factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n-    final Paragraph p = note.addParagraph();\n+    final Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p.setText(\"hello world\");\n     note.runAll();\n     while(p.isTerminated()==false || p.getResult()==null) Thread.yield();\n@@ -502,7 +502,7 @@ public void testCloneNoteWithExceptionResult() throws IOException, CloneNotSuppo\n     Note note = notebook.createNote(anonymous);\n     factory.setInterpreters(anonymous.getUser(), note.getId(), factory.getDefaultInterpreterSettingList());\n \n-    final Paragraph p = note.addParagraph();\n+    final Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p.setText(\"hello world\");\n     note.runAll();\n     while (p.isTerminated() == false || p.getResult() == null) {\n@@ -529,9 +529,9 @@ public void testResourceRemovealOnParagraphNoteRemove() throws IOException {\n     for (InterpreterGroup intpGroup : InterpreterGroup.getAll()) {\n       intpGroup.setResourcePool(new LocalResourcePool(intpGroup.getId()));\n     }\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"hello\");\n-    Paragraph p2 = note.addParagraph();\n+    Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p2.setText(\"%mock2 world\");\n \n     note.runAll();\n@@ -560,7 +560,7 @@ public void testAngularObjectRemovalOnNotebookRemove() throws InterruptedExcepti\n         .getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(anonymous.getUser(), \"sharedProcess\")\n         .getAngularObjectRegistry();\n \n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     // add paragraph scope object\n     registry.add(\"o1\", \"object1\", note.getId(), p1.getId());\n@@ -593,7 +593,7 @@ public void testAngularObjectRemovalOnParagraphRemove() throws InterruptedExcept\n         .getInterpreterSettings(note.getId()).get(0).getInterpreterGroup(anonymous.getUser(), \"sharedProcess\")\n         .getAngularObjectRegistry();\n \n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     // add paragraph scope object\n     registry.add(\"o1\", \"object1\", note.getId(), p1.getId());\n@@ -738,7 +738,7 @@ public void testAbortParagraphStatusOnInterpreterRestart() throws InterruptedExc\n \n     ArrayList<Paragraph> paragraphs = new ArrayList<>();\n     for (int i = 0; i < 100; i++) {\n-      Paragraph tmp = note.addParagraph();\n+      Paragraph tmp = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n       tmp.setText(\"p\" + tmp.getId());\n       paragraphs.add(tmp);\n     }\n@@ -772,7 +772,7 @@ public void testAbortParagraphStatusOnInterpreterRestart() throws InterruptedExc\n   public void testPerSessionInterpreterCloseOnNoteRemoval() throws IOException {\n     // create a notes\n     Note note1  = notebook.createNote(anonymous);\n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"getId\");\n     p1.setAuthenticationInfo(anonymous);\n \n@@ -789,7 +789,7 @@ public void testPerSessionInterpreterCloseOnNoteRemoval() throws IOException {\n     // remove note and recreate\n     notebook.removeNote(note1.getId(), anonymous);\n     note1 = notebook.createNote(anonymous);\n-    p1 = note1.addParagraph();\n+    p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"getId\");\n     p1.setAuthenticationInfo(anonymous);\n \n@@ -804,10 +804,10 @@ public void testPerSessionInterpreterCloseOnNoteRemoval() throws IOException {\n   public void testPerSessionInterpreter() throws IOException {\n     // create two notes\n     Note note1  = notebook.createNote(anonymous);\n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     Note note2  = notebook.createNote(anonymous);\n-    Paragraph p2 = note2.addParagraph();\n+    Paragraph p2 = note2.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     p1.setText(\"getId\");\n     p1.setAuthenticationInfo(anonymous);\n@@ -848,10 +848,10 @@ public void testPerSessionInterpreter() throws IOException {\n   public void testPerNoteSessionInterpreter() throws IOException {\n     // create two notes\n     Note note1  = notebook.createNote(anonymous);\n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     Note note2  = notebook.createNote(anonymous);\n-    Paragraph p2 = note2.addParagraph();\n+    Paragraph p2 = note2.addParagraph(AuthenticationInfo.ANONYMOUS);\n \n     p1.setText(\"getId\");\n     p1.setAuthenticationInfo(anonymous);\n@@ -907,7 +907,7 @@ public void testPerNoteSessionInterpreter() throws IOException {\n   public void testPerSessionInterpreterCloseOnUnbindInterpreterSetting() throws IOException {\n     // create a notes\n     Note note1  = notebook.createNote(anonymous);\n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setAuthenticationInfo(anonymous);\n     p1.setText(\"getId\");\n \n@@ -977,7 +977,7 @@ public void onParagraphStatusChange(Paragraph p, Status status) {\n     Note note1 = notebook.createNote(anonymous);\n     assertEquals(1, onNoteCreate.get());\n \n-    Paragraph p1 = note1.addParagraph();\n+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);\n     assertEquals(1, onParagraphCreate.get());\n \n     note1.addCloneParagraph(p1);",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "sha": "072503747acf63b6cecc6bbb37ebaa32ea81a4c4",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 7,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.zeppelin.notebook.NoteInfo;\n import org.apache.zeppelin.notebook.Paragraph;\n import org.apache.zeppelin.notebook.repo.NotebookRepo.Revision;\n+import org.apache.zeppelin.user.AuthenticationInfo;\n import org.eclipse.jgit.api.Git;\n import org.eclipse.jgit.api.errors.GitAPIException;\n import org.eclipse.jgit.diff.DiffEntry;\n@@ -146,7 +147,7 @@ public void showNotebookHistoryMultipleNotesTest() throws IOException {\n \n     //modify, save and checkpoint first note\n     Note note = notebookRepo.get(TEST_NOTE_ID, null);\n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map<String, Object> config = p.getConfig();\n     config.put(\"enabled\", true);\n     p.setConfig(config);\n@@ -161,7 +162,7 @@ public void showNotebookHistoryMultipleNotesTest() throws IOException {\n \n     //modify, save and checkpoint second note\n     note = notebookRepo.get(TEST_NOTE_ID2, null);\n-    p = note.addParagraph();\n+    p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     config = p.getConfig();\n     config.put(\"enabled\", false);\n     p.setConfig(config);\n@@ -187,7 +188,7 @@ public void addCheckpointTest() throws IOException {\n     \n     // add changes to note\n     Note note = notebookRepo.get(TEST_NOTE_ID, null);\n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map<String, Object> config = p.getConfig();\n     config.put(\"enabled\", true);\n     p.setConfig(config);\n@@ -226,7 +227,7 @@ public void getRevisionTest() throws IOException {\n \n     // add paragraph and save\n     Note note = notebookRepo.get(TEST_NOTE_ID, null);\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map<String, Object> config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n@@ -248,7 +249,7 @@ public void getRevisionTest() throws IOException {\n     assertThat(note.getParagraphs().size()).isEqualTo(paragraphCount_2);\n \n     // add one more paragraph and save\n-    Paragraph p2 = note.addParagraph();\n+    Paragraph p2 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     config.put(\"enabled\", false);\n     p2.setConfig(config);\n     p2.setText(\"get revision when modified note test text\");\n@@ -284,7 +285,7 @@ public void getRevisionFailTest() throws IOException {\n     assertThat(note.getParagraphs().size()).isEqualTo(paragraphCount_1);\n \n     // add one more paragraph and save\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map<String, Object> config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n@@ -326,7 +327,7 @@ public void setRevisionTest() throws IOException {\n     assertThat(notebookRepo.revisionHistory(TEST_NOTE_ID, null).size()).isEqualTo(1);\n     \n     // add one more paragraph and save\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map<String, Object> config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java",
                "sha": "4fe3dfd0c9eb6c5db50c47a38ea7622f473c905f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 3,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java",
                "patch": "@@ -168,7 +168,7 @@ public void testSyncUpdateMain() throws IOException {\n     \n     /* create note */\n     Note note = notebookSync.createNote(anonymous);\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);\n@@ -305,7 +305,7 @@ public void testCheckpointOneStorage() throws IOException, SchedulerException {\n     int vCount = gitRepo.revisionHistory(noteId, anonymous).size();\n     assertThat(vCount).isEqualTo(1);\n     \n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map<String, Object> config = p.getConfig();\n     config.put(\"enabled\", true);\n     p.setConfig(config);\n@@ -339,7 +339,7 @@ public void testSyncWithAcl() throws IOException {\n     assertEquals(0, authInfo.getWriters(note.getId()).size());\n     \n     /* update note and save on secondary storage */\n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p1.setText(\"hello world\");\n     assertEquals(1, note.getParagraphs().size());\n     notebookRepoSync.save(1, note, null);",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java",
                "sha": "0da6610a1a5925b42f86fcf72fa14332f98549fc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "patch": "@@ -120,7 +120,7 @@ public void testSaveNotebook() throws IOException, InterruptedException {\n     Note note = notebook.createNote(anonymous);\n     factory.setInterpreters(\"user\", note.getId(), factory.getDefaultInterpreterSettingList());\n \n-    Paragraph p1 = note.addParagraph();\n+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     Map<String, Object> config = p1.getConfig();\n     config.put(\"enabled\", true);\n     p1.setConfig(config);",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "sha": "99fea49556a5c9d8e33c892334bb7bbe0df7a9a5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java?ref=9e75f5b50ac1573d423fa937b801df77d6a36f3c",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java",
                "patch": "@@ -275,13 +275,13 @@ private Note newNoteWithParagraphs(String noteName, String... parTexts) {\n   }\n \n   private Paragraph addParagraphWithText(Note note, String text) {\n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p.setText(text);\n     return p;\n   }\n \n   private Paragraph addParagraphWithTextAndTitle(Note note, String text, String title) {\n-    Paragraph p = note.addParagraph();\n+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);\n     p.setText(text);\n     p.setTitle(title);\n     return p;",
                "raw_url": "https://github.com/apache/zeppelin/raw/9e75f5b50ac1573d423fa937b801df77d6a36f3c/zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java",
                "sha": "d7bf27b04e743341f2b4453678d55403c90c02e2",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1845] InterpreterFactory.createOrGetInterpreterList fails when interpreter mode is \"perUser\": \"scoped\"\n\n### What is this PR for?\nWhen trying to add a paragraph, whose default interpreter is running in mode `\"perUser\": \"scoped\"` fails with following exception\n\n```\nERROR [2016-12-22 11:52:18,784] ({qtp112466394-59} NotebookServer.java[onMessage]:318) - Can't handle message\njava.lang.NullPointerException\n\tat java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)\n\tat java.util.concurrent.ConcurrentHashMap.containsKey(ConcurrentHashMap.java:964)\n\tat org.apache.zeppelin.interpreter.InterpreterFactory.createOrGetInterpreterList(InterpreterFactory.java:1219)\n\tat org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter(InterpreterFactory.java:1333)\n\tat org.apache.zeppelin.notebook.Paragraph.isValidInterpreter(Paragraph.java:598)\n\tat org.apache.zeppelin.notebook.Paragraph.getMagic(Paragraph.java:587)\n\tat org.apache.zeppelin.notebook.Note.setParagraphMagic(Note.java:506)\n\tat org.apache.zeppelin.notebook.Note.insertParagraph(Note.java:316)\n\tat org.apache.zeppelin.socket.NotebookServer.insertParagraph(NotebookServer.java:1330)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:241)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:128)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:122)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:161)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)\n\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:632)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:480)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:745)\n```\n\n### What type of PR is it?\n[Bug Fix]\n\n### What is the Jira issue?\n* [ZEPPELIN-1845](https://issues.apache.org/jira/browse/ZEPPELIN-1845)\n\n### How should this be tested?\nOutline the steps to test the PR here.\n\n### Screenshots (if appropriate)\nBefore:\n![before](https://cloud.githubusercontent.com/assets/674497/21417398/4d7535da-c840-11e6-81aa-42290ff75617.gif)\n\nAfter:\n![after](https://cloud.githubusercontent.com/assets/674497/21417399/4d7554f2-c840-11e6-951c-44c7a23e191b.gif)\n\n### Questions:\n* Does the licenses files need update? N/A\n* Is there breaking changes for older versions? N/A\n* Does this needs documentation? N/A\n\nAuthor: Prabhjyot Singh <prabhjyotsingh@gmail.com>\n\nCloses #1790 from prabhjyotsingh/ZEPPELIN-1845 and squashes the following commits:\n\n6459318 [Prabhjyot Singh] Both insertParagraph, addParagraph should accept and set AuthenticationInfo into paragraph",
        "parent": "https://github.com/apache/zeppelin/commit/2321cde58cac43a16d12eb34b8e1e32e81606774",
        "patched_files": [
            "HeliumApplicationFactory.java",
            "GitNotebookRepo.java",
            "NotebookServer.java",
            "LuceneSearch.java",
            "NotebookRepoSync.java",
            "ZeppelinRestApi.java",
            "NotebookRestApi.java",
            "InterpreterRestApi.java",
            "VFSNotebookRepo.java",
            "Notebook.java",
            "Note.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookRepoSyncTest.java",
            "ZeppelinSparkClusterTest.java",
            "HeliumApplicationFactoryTest.java",
            "ZeppelinRestApiTest.java",
            "GitNotebookRepoTest.java",
            "NotebookServerTest.java",
            "LuceneSearchTest.java",
            "NoteTest.java",
            "InterpreterRestApiTest.java",
            "VFSNotebookRepoTest.java",
            "NotebookTest.java",
            "NotebookRestApiTest.java"
        ]
    },
    "zeppelin_a4f1914": {
        "bug_id": "zeppelin_a4f1914",
        "commit": "https://github.com/apache/zeppelin/commit/a4f19148aae1398f0d2c18ee4eb0004d8f2a4ac4",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/a4f19148aae1398f0d2c18ee4eb0004d8f2a4ac4/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java?ref=a4f19148aae1398f0d2c18ee4eb0004d8f2a4ac4",
                "deletions": 2,
                "filename": "python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "patch": "@@ -125,8 +125,12 @@ public void close() {\n \n     logger.info(\"closing Python interpreter .....\");\n     try {\n-      process.close();\n-      gatewayServer.shutdown();\n+      if (process != null) {\n+        process.close();\n+      }\n+      if (gatewayServer != null) {\n+        gatewayServer.shutdown();\n+      }\n     } catch (IOException e) {\n       logger.error(\"Can't close the interpreter\", e);\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/a4f19148aae1398f0d2c18ee4eb0004d8f2a4ac4/python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java",
                "sha": "e80548f0eaf00bd2732ecaf0d57f9603b643cbb1",
                "status": "modified"
            }
        ],
        "message": "Prevent NullPointerException if \"gatewayServer\" does not exist\n\n### What is this PR for?\nAvoiding and preventing undesired NullPointerException during re-loading python interpreter\nSince py4j is optional when PythonInterpreter starts, it should be optional too while it close.\n\n### What type of PR is it?\n[Improvement]\n\n### What is the Jira issue?\n* N/A\n\n### How should this be tested?\n\nReload PythongInterpreter on Zeppelin web \"Interpreter\" menu and check the log message if it complains NullPointerException\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Kwon, Yeong-Eon <happylogin@gmail.com>\nAuthor: Y.E. Kwon <OutOfBedlam@users.noreply.github.com>\n\nCloses #1009 from OutOfBedlam/python and squashes the following commits:\n\n5ed2413 [Y.E. Kwon] Fix code style\nccbf7ef [Kwon, Yeong-Eon] Prevent NullPointerException if \"gatewayServer\" does not exist",
        "parent": "https://github.com/apache/zeppelin/commit/5ddc1ef87e9c2e6e8ff4485c8b8031f4b05628cd",
        "patched_files": [
            "PythonInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "PythonInterpreterTest.java"
        ]
    },
    "zeppelin_ab5ce62": {
        "bug_id": "zeppelin_ab5ce62",
        "commit": "https://github.com/apache/zeppelin/commit/ab5ce6256f15ce70ef165a62d21fda0c677e96d9",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/ab5ce6256f15ce70ef165a62d21fda0c677e96d9/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java?ref=ab5ce6256f15ce70ef165a62d21fda0c677e96d9",
                "deletions": 5,
                "filename": "jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "patch": "@@ -31,6 +31,7 @@\n import java.util.Properties;\n import java.util.Set;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.zeppelin.interpreter.Interpreter;\n import org.apache.zeppelin.interpreter.InterpreterContext;\n import org.apache.zeppelin.interpreter.InterpreterResult;\n@@ -361,12 +362,11 @@ private InterpreterResult executeSql(String propertyKey, String sql,\n \n       return new InterpreterResult(Code.SUCCESS, msg.toString());\n \n-    } catch (SQLException ex) {\n-      logger.error(\"Cannot run \" + sql, ex);\n-      return new InterpreterResult(Code.ERROR, ex.getMessage());\n-    } catch (ClassNotFoundException e) {\n+    } catch (Exception e) {\n       logger.error(\"Cannot run \" + sql, e);\n-      return new InterpreterResult(Code.ERROR, e.getMessage());\n+      StringBuilder stringBuilder = new StringBuilder(e.getClass().toString()).append(\"\\n\");\n+      stringBuilder.append(StringUtils.join(e.getStackTrace(), \"\\n\"));\n+      return new InterpreterResult(Code.ERROR, stringBuilder.toString());\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ab5ce6256f15ce70ef165a62d21fda0c677e96d9/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "sha": "6312e28fa8b32b184a152d1afcd2cdea2b737136",
                "status": "modified"
            }
        ],
        "message": "increase more logs, and return appropriate error to front-end\n\n### What is this PR for?\nIn the current implementation JDBC interpret only catches SQLException and ClassNotFoundException. However, there can be a case for example NullPointerException or for that matter anything else can be thrown.\n\n### What type of PR is it?\n[Improvement]\n\n### Todos\n* [x] - increase more logs, and return appropriate error to front-end\n\n### What is the Jira issue?\n* Open an issue on Jira https://issues.apache.org/jira/browse/ZEPPELIN/\n* Put link here, and add [ZEPPELIN-*Jira number*] in PR title, eg. [ZEPPELIN-533]\n\n### How should this be tested?\nAs an example for hive2.\n\n#### Properties\n\n|name|\tvalue|\n| ------------- |:-------------:|\n|default.driver|\torg.apache.hive.jdbc.HiveDriver|\n|default.url\t|jdbc:hive2://hive-machine:2181/;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2|\n\n#### Dependencies\n\n|artifact\t|exclude|\n| ------------- |:-------------:|\n|org.apache.hive:hive-jdbc:1.2.1\t||\n|org.apache.hadoop:hadoop-common:2.7.2||\n\nWith the above setting used on an older driver for hive2 it shows exception in log, but on the front-end paragraph shows error, and no logs.\n\n```\nERROR [2016-06-19 14:47:46,186] ({pool-2-thread-2} Job.java[run]:182) - Job failed\njava.lang.NullPointerException\n        at org.apache.thrift.transport.TSocket.open(TSocket.java:168)\n        at org.apache.thrift.transport.TSaslTransport.open(TSaslTransport.java:248)\n        at org.apache.thrift.transport.TSaslClientTransport.open(TSaslClientTransport.java:37)\n        at org.apache.hive.jdbc.HiveConnection.openTransport(HiveConnection.java:190)\n        at org.apache.hive.jdbc.HiveConnection.<init>(HiveConnection.java:163)\n        at org.apache.hive.jdbc.HiveDriver.connect(HiveDriver.java:105)\n        at java.sql.DriverManager.getConnection(DriverManager.java:571)\n        at java.sql.DriverManager.getConnection(DriverManager.java:187)\n        at org.apache.zeppelin.jdbc.JDBCInterpreter.getConnection(JDBCInterpreter.java:218)\n        at org.apache.zeppelin.jdbc.JDBCInterpreter.getStatement(JDBCInterpreter.java:229)\n        at org.apache.zeppelin.jdbc.JDBCInterpreter.executeSql(JDBCInterpreter.java:288)\n        at org.apache.zeppelin.jdbc.JDBCInterpreter.interpret(JDBCInterpreter.java:393)\n        at org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:94)\n        at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:341)\n        at org.apache.zeppelin.scheduler.Job.run(Job.java:176)\n        at org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n```\n\n### Screenshots (if appropriate)\n\nBefore:\n<img width=\"1436\" alt=\"screen shot 2016-06-20 at 5 11 59 pm\" src=\"https://cloud.githubusercontent.com/assets/674497/16192988/20ce0312-370a-11e6-967e-281e99dbb18f.png\">\n\nAfter:\n<img width=\"1435\" alt=\"screen shot 2016-06-20 at 5 10 26 pm\" src=\"https://cloud.githubusercontent.com/assets/674497/16192984/1121d222-370a-11e6-8da9-43adc80c9c15.png\">\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Prabhjyot Singh <prabhjyotsingh@gmail.com>\n\nCloses #1051 from prabhjyotsingh/ZEPPELIN-1036 and squashes the following commits:\n\n595ebc6 [Prabhjyot Singh] have e.getStackTrace() in all cases.\n2e8dc0c [Prabhjyot Singh] increase more logs, and return appropriate error to front-end",
        "parent": "https://github.com/apache/zeppelin/commit/fd715c86aef8c128e8db6ce1a4d004826e03897a",
        "patched_files": [
            "JDBCInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "JDBCInterpreterTest.java"
        ]
    },
    "zeppelin_ae05740": {
        "bug_id": "zeppelin_ae05740",
        "commit": "https://github.com/apache/zeppelin/commit/ae05740b1852a4251b66b9559486b62a85af5dd9",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/ae05740b1852a4251b66b9559486b62a85af5dd9/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java?ref=ae05740b1852a4251b66b9559486b62a85af5dd9",
                "deletions": 3,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "patch": "@@ -1742,10 +1742,10 @@ private void runParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Not\n   }\n \n   private void addNewParagraphIfLastParagraphIsExecuted(Note note, Paragraph p) {\n-    // if it's the last paragraph and empty, let's add a new one\n+    // if it's the last paragraph and not empty, let's add a new one\n     boolean isTheLastParagraph = note.isLastParagraph(p.getId());\n-    if (!(p.getText().trim().equals(p.getMagic()) ||\n-        Strings.isNullOrEmpty(p.getText())) &&\n+    if (!(Strings.isNullOrEmpty(p.getText()) ||\n+        p.getText().trim().equals(p.getMagic())) &&\n         isTheLastParagraph) {\n       Paragraph newPara = note.addNewParagraph(p.getAuthenticationInfo());\n       broadcastNewParagraph(note, newPara);",
                "raw_url": "https://github.com/apache/zeppelin/raw/ae05740b1852a4251b66b9559486b62a85af5dd9/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "sha": "64a4126cc4deee6072e5ba9ab68029d509a03cbe",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-2484] Fix NullPointerException in check for empty last paragraph\n\n### What is this PR for?\nPrevent NullPointerException during check to determine whether a new paragraph needs to added.\nThe fix is to switch order of null check and trim operation so that null check is performed before trim()\n\n### What type of PR is it?\nBug Fix\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-2484\n\n### How should this be tested?\nThis can be tested with a hive interpreter\nCreate a note and add a paragraph with some query in it.\nRun all paragraphs.\nA new paragraph is automatically added.\nRun all paragraphs again. A NullPointerException is logged in the logs.\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Benoy Antony <benoy@apache.org>\n\nCloses #2310 from benoyantony/ZEPPELIN-2484 and squashes the following commits:\n\n1cc2f8b [Benoy Antony] ZEPPELIN-2484 do a Null check before calling trim on paragraph's text",
        "parent": "https://github.com/apache/zeppelin/commit/6db9929dd3caf957e41344b2cbc65eb515fde615",
        "patched_files": [
            "NotebookServer.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookServerTest.java"
        ]
    },
    "zeppelin_b88f52e": {
        "bug_id": "zeppelin_b88f52e",
        "commit": "https://github.com/apache/zeppelin/commit/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/assets/themes/zeppelin/img/screenshots/interpreter_binding.png",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/assets/themes/zeppelin/img/screenshots/interpreter_binding.png?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 0,
                "filename": "docs/assets/themes/zeppelin/img/screenshots/interpreter_binding.png",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/assets/themes/zeppelin/img/screenshots/interpreter_binding.png",
                "sha": "8b7bb05f8fbc1177365dd101ed33974c7a80493e",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/assets/themes/zeppelin/img/screenshots/interpreter_persession.png",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/assets/themes/zeppelin/img/screenshots/interpreter_persession.png?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 0,
                "filename": "docs/assets/themes/zeppelin/img/screenshots/interpreter_persession.png",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/assets/themes/zeppelin/img/screenshots/interpreter_persession.png",
                "sha": "bb81ed3ddd74c47ae8cacc98f53e616455b9924b",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/development/writingzeppelininterpreter.md",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/development/writingzeppelininterpreter.md?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 2,
                "filename": "docs/development/writingzeppelininterpreter.md",
                "patch": "@@ -22,12 +22,16 @@ limitations under the License.\n ### What is Zeppelin Interpreter\n \n Zeppelin Interpreter is a language backend. For example to use scala code in Zeppelin, you need scala interpreter.\n-Every Interpreter belongs to an InterpreterGroup. InterpreterGroup is a unit of start/stop interpreter.\n+Every Interpreter belongs to an InterpreterGroup. \n Interpreters in the same InterpreterGroup can reference each other. For example, SparkSqlInterpreter can reference SparkInterpreter to get SparkContext from it while they're in the same group.\n \n <img class=\"img-responsive\" style=\"width:50%; border: 1px solid #ecf0f1;\" height=\"auto\" src=\"/assets/themes/zeppelin/img/interpreter.png\" />\n \n-All Interpreters in the same interpreter group are launched in a single, separate JVM process. The Interpreter communicates with Zeppelin engine via thrift.\n+InterpreterSetting is configuration of a given InterpreterGroup and a unit of start/stop interpreter.\n+All Interpreters in the same InterpreterSetting are launched in a single, separate JVM process. The Interpreter communicates with Zeppelin engine via thrift.\n+\n+In 'Separate Interpreter for each note' mode, new Interpreter instance will be created per notebook. But it still runs on the same JVM while they're in the same InterpreterSettings.\n+\n \n ### Make your own Interpreter\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/development/writingzeppelininterpreter.md",
                "sha": "d9ab84be06967ff4396ad37d8f6993f39213ba94",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/interpreter/spark.md",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/interpreter/spark.md?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 0,
                "filename": "docs/interpreter/spark.md",
                "patch": "@@ -263,6 +263,11 @@ select * from ${table=defaultTableName} where text like '%${search}%'\n \n To learn more about dynamic form, checkout [Dynamic Form](../manual/dynamicform.html).\n \n+\n+### Separate Interpreter for each note\n+\n+In 'Separate Interpreter for each note' mode, SparkInterpreter creates scala compiler per each notebook. However it still shares the single SparkContext.\n+\n ## Setting up Zeppelin with Kerberos\n Logical setup with Zeppelin, Kerberos Distribution Center (KDC), and Spark on YARN:\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/interpreter/spark.md",
                "sha": "027d4b639f6c21d011287190bfd48dd542bfeb0c",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/manual/interpreters.md",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/manual/interpreters.md?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 1,
                "filename": "docs/manual/interpreters.md",
                "patch": "@@ -32,10 +32,16 @@ When you click the ```+Create``` button in the interpreter page, the interpreter\n <img src=\"/assets/themes/zeppelin/img/screenshots/interpreter_create.png\">\n \n ## What is Zeppelin Interpreter Setting?\n-Zeppelin interpreter setting is the configuration of a given interpreter on Zeppelin server. For example, the properties are required for hive JDBC interpreter to connect to the Hive server.\n+Zeppelin interpreter setting is the configuration of a given interpreter on Zeppelin server. For example, the properties are required for hive JDBC interpreter to connect to the Hive server. \n \n <img src=\"/assets/themes/zeppelin/img/screenshots/interpreter_setting.png\">\n \n+Each notebook can be binded to multiple Interpreter Settings using setting icon on upper right corner of the notebook.\n+\n+<img src=\"/assets/themes/zeppelin/img/screenshots/interpreter_binding.png\" width=\"800px\">\n+\n+\n+\n ## What is Zeppelin Interpreter Group?\n Every Interpreter is belonged to an **Interpreter Group**. Interpreter Group is a unit of start/stop interpreter.\n By default, every interpreter is belonged to a single group, but the group might contain more interpreters. For example, Spark interpreter group is including Spark support, pySpark, SparkSQL and the dependency loader.\n@@ -44,3 +50,12 @@ Technically, Zeppelin interpreters from the same group are running in the same J\n \n Each interpreters is belonged to a single group and registered together. All of their properties are listed in the interpreter setting like below image.\n <img src=\"/assets/themes/zeppelin/img/screenshots/interpreter_setting_spark.png\">\n+\n+\n+## Interpreter binding mode\n+\n+Each Interpreter Setting can choose one of two different interpreter binding mode.\n+Shared mode (default) and 'Separate Interpreter for each note' mode. In shared mode, every notebook binded to the Interpreter Setting will share the single Interpreter instance. In 'Separate Interpreter for each note' mode, each notebook will create new Interpreter instance. Therefore each notebook will have fresh new Interpreter environment.\n+\n+<img src=\"/assets/themes/zeppelin/img/screenshots/interpreter_persession.png\" width=\"400px\">\n+",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/docs/manual/interpreters.md",
                "sha": "f23600f9962a20e29c56307973ef8d167e4c0fa9",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 13,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java",
                "patch": "@@ -299,23 +299,25 @@ private SparkInterpreter getSparkInterpreter() {\n     if (intpGroup == null) {\n       return null;\n     }\n-    synchronized (intpGroup) {\n-      for (Interpreter intp : intpGroup){\n-        if (intp.getClassName().equals(SparkInterpreter.class.getName())) {\n-          Interpreter p = intp;\n-          while (p instanceof WrappedInterpreter) {\n-            p = ((WrappedInterpreter) p).getInnerInterpreter();\n-          }\n-          return (SparkInterpreter) p;\n-        }\n-      }\n+\n+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());\n+    if (p == null) {\n+      return null;\n+    }\n+\n+    while (p instanceof WrappedInterpreter) {\n+      p = ((WrappedInterpreter) p).getInnerInterpreter();\n     }\n-    return null;\n+    return (SparkInterpreter) p;\n   }\n \n   @Override\n   public Scheduler getScheduler() {\n-    return getSparkInterpreter().getScheduler();\n+    SparkInterpreter sparkInterpreter = getSparkInterpreter();\n+    if (sparkInterpreter != null) {\n+      return getSparkInterpreter().getScheduler();\n+    } else {\n+      return null;\n+    }\n   }\n-\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java",
                "sha": "5cfa764f86ed36ca83ff35578f9835d8b3159336",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 26,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "patch": "@@ -494,23 +494,18 @@ private String getCompletionTargetString(String text, int cursor) {\n \n \n   private SparkInterpreter getSparkInterpreter() {\n-    InterpreterGroup intpGroup = getInterpreterGroup();\n     LazyOpenInterpreter lazy = null;\n     SparkInterpreter spark = null;\n-    synchronized (intpGroup) {\n-      for (Interpreter intp : getInterpreterGroup()){\n-        if (intp.getClassName().equals(SparkInterpreter.class.getName())) {\n-          Interpreter p = intp;\n-          while (p instanceof WrappedInterpreter) {\n-            if (p instanceof LazyOpenInterpreter) {\n-              lazy = (LazyOpenInterpreter) p;\n-            }\n-            p = ((WrappedInterpreter) p).getInnerInterpreter();\n-          }\n-          spark = (SparkInterpreter) p;\n-        }\n+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());\n+\n+    while (p instanceof WrappedInterpreter) {\n+      if (p instanceof LazyOpenInterpreter) {\n+        lazy = (LazyOpenInterpreter) p;\n       }\n+      p = ((WrappedInterpreter) p).getInnerInterpreter();\n     }\n+    spark = (SparkInterpreter) p;\n+\n     if (lazy != null) {\n       lazy.open();\n     }\n@@ -554,20 +549,15 @@ public SQLContext getSQLContext() {\n   }\n \n   private DepInterpreter getDepInterpreter() {\n-    InterpreterGroup intpGroup = getInterpreterGroup();\n-    if (intpGroup == null) return null;\n-    synchronized (intpGroup) {\n-      for (Interpreter intp : intpGroup) {\n-        if (intp.getClassName().equals(DepInterpreter.class.getName())) {\n-          Interpreter p = intp;\n-          while (p instanceof WrappedInterpreter) {\n-            p = ((WrappedInterpreter) p).getInnerInterpreter();\n-          }\n-          return (DepInterpreter) p;\n-        }\n-      }\n+    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());\n+    if (p == null) {\n+      return null;\n+    }\n+\n+    while (p instanceof WrappedInterpreter) {\n+      p = ((WrappedInterpreter) p).getInnerInterpreter();\n     }\n-    return null;\n+    return (DepInterpreter) p;\n   }\n \n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "sha": "152f70cf6e9d8bd82e91e671b736e1f4a62777c3",
                "status": "modified"
            },
            {
                "additions": 92,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "changes": 156,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 64,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "patch": "@@ -20,11 +20,13 @@\n import java.io.File;\n import java.io.PrintWriter;\n import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.util.*;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import com.google.common.base.Joiner;\n \n@@ -44,7 +46,6 @@\n import org.apache.zeppelin.interpreter.Interpreter;\n import org.apache.zeppelin.interpreter.InterpreterContext;\n import org.apache.zeppelin.interpreter.InterpreterException;\n-import org.apache.zeppelin.interpreter.InterpreterGroup;\n import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;\n import org.apache.zeppelin.interpreter.InterpreterResult;\n import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n@@ -57,17 +58,15 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import scala.Console;\n+import scala.*;\n import scala.Enumeration.Value;\n-import scala.None;\n-import scala.Some;\n-import scala.Tuple2;\n import scala.collection.Iterator;\n import scala.collection.JavaConversions;\n import scala.collection.JavaConverters;\n import scala.collection.Seq;\n import scala.collection.mutable.HashMap;\n import scala.collection.mutable.HashSet;\n+import scala.reflect.io.AbstractFile;\n import scala.tools.nsc.Settings;\n import scala.tools.nsc.interpreter.Completion.Candidates;\n import scala.tools.nsc.interpreter.Completion.ScalaCompleter;\n@@ -113,16 +112,19 @@\n   private ZeppelinContext z;\n   private SparkILoop interpreter;\n   private SparkIMain intp;\n-  private SparkContext sc;\n+  private static SparkContext sc;\n+  private static SQLContext sqlc;\n+  private static SparkEnv env;\n+  private static JobProgressListener sparkListener;\n+  private static AbstractFile classOutputDir;\n+  private static Integer sharedInterpreterLock = new Integer(0);\n+  private static AtomicInteger numReferenceOfSparkContext = new AtomicInteger(0);\n+\n   private SparkOutputStream out;\n-  private SQLContext sqlc;\n   private SparkDependencyResolver dep;\n   private SparkJLineCompletion completor;\n \n-  private JobProgressListener sparkListener;\n-\n   private Map<String, Object> binder;\n-  private SparkEnv env;\n   private SparkVersion sparkVersion;\n \n \n@@ -139,17 +141,21 @@ public SparkInterpreter(Properties property, SparkContext sc) {\n     sparkListener = setupListeners(this.sc);\n   }\n \n-  public synchronized SparkContext getSparkContext() {\n-    if (sc == null) {\n-      sc = createSparkContext();\n-      env = SparkEnv.get();\n-      sparkListener = setupListeners(sc);\n+  public SparkContext getSparkContext() {\n+    synchronized (sharedInterpreterLock) {\n+      if (sc == null) {\n+        sc = createSparkContext();\n+        env = SparkEnv.get();\n+        sparkListener = setupListeners(sc);\n+      }\n+      return sc;\n     }\n-    return sc;\n   }\n \n   public boolean isSparkContextInitialized() {\n-    return sc != null;\n+    synchronized (sharedInterpreterLock) {\n+      return sc != null;\n+    }\n   }\n \n   static JobProgressListener setupListeners(SparkContext context) {\n@@ -192,33 +198,34 @@ static JobProgressListener setupListeners(SparkContext context) {\n   }\n \n   private boolean useHiveContext() {\n-    return Boolean.parseBoolean(getProperty(\"zeppelin.spark.useHiveContext\"));\n+    return java.lang.Boolean.parseBoolean(getProperty(\"zeppelin.spark.useHiveContext\"));\n   }\n \n   public SQLContext getSQLContext() {\n-    if (sqlc == null) {\n-      if (useHiveContext()) {\n-        String name = \"org.apache.spark.sql.hive.HiveContext\";\n-        Constructor<?> hc;\n-        try {\n-          hc = getClass().getClassLoader().loadClass(name)\n-              .getConstructor(SparkContext.class);\n-          sqlc = (SQLContext) hc.newInstance(getSparkContext());\n-        } catch (NoSuchMethodException | SecurityException\n-            | ClassNotFoundException | InstantiationException\n-            | IllegalAccessException | IllegalArgumentException\n-            | InvocationTargetException e) {\n-          logger.warn(\"Can't create HiveContext. Fallback to SQLContext\", e);\n-          // when hive dependency is not loaded, it'll fail.\n-          // in this case SQLContext can be used.\n+    synchronized (sharedInterpreterLock) {\n+      if (sqlc == null) {\n+        if (useHiveContext()) {\n+          String name = \"org.apache.spark.sql.hive.HiveContext\";\n+          Constructor<?> hc;\n+          try {\n+            hc = getClass().getClassLoader().loadClass(name)\n+                .getConstructor(SparkContext.class);\n+            sqlc = (SQLContext) hc.newInstance(getSparkContext());\n+          } catch (NoSuchMethodException | SecurityException\n+              | ClassNotFoundException | InstantiationException\n+              | IllegalAccessException | IllegalArgumentException\n+              | InvocationTargetException e) {\n+            logger.warn(\"Can't create HiveContext. Fallback to SQLContext\", e);\n+            // when hive dependency is not loaded, it'll fail.\n+            // in this case SQLContext can be used.\n+            sqlc = new SQLContext(getSparkContext());\n+          }\n+        } else {\n           sqlc = new SQLContext(getSparkContext());\n         }\n-      } else {\n-        sqlc = new SQLContext(getSparkContext());\n       }\n+      return sqlc;\n     }\n-\n-    return sqlc;\n   }\n \n   public SparkDependencyResolver getDependencyResolver() {\n@@ -232,20 +239,15 @@ public SparkDependencyResolver getDependencyResolver() {\n   }\n \n   private DepInterpreter getDepInterpreter() {\n-    InterpreterGroup intpGroup = getInterpreterGroup();\n-    if (intpGroup == null) return null;\n-    synchronized (intpGroup) {\n-      for (Interpreter intp : intpGroup) {\n-        if (intp.getClassName().equals(DepInterpreter.class.getName())) {\n-          Interpreter p = intp;\n-          while (p instanceof WrappedInterpreter) {\n-            p = ((WrappedInterpreter) p).getInnerInterpreter();\n-          }\n-          return (DepInterpreter) p;\n-        }\n-      }\n+    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());\n+    if (p == null) {\n+      return null;\n+    }\n+\n+    while (p instanceof WrappedInterpreter) {\n+      p = ((WrappedInterpreter) p).getInnerInterpreter();\n     }\n-    return null;\n+    return (DepInterpreter) p;\n   }\n \n   public SparkContext createSparkContext() {\n@@ -477,7 +479,9 @@ public void open() {\n     b.v_$eq(true);\n     settings.scala$tools$nsc$settings$StandardScalaSettings$_setter_$usejavacp_$eq(b);\n \n-    /* spark interpreter */\n+    System.setProperty(\"scala.repl.name.line\", \"line\" + this.hashCode() + \"$\");\n+\n+    /* create scala repl */\n     this.interpreter = new SparkILoop(null, new PrintWriter(out));\n \n     interpreter.settings_$eq(settings);\n@@ -488,20 +492,38 @@ public void open() {\n     intp.setContextClassLoader();\n     intp.initializeSynchronous();\n \n-    completor = new SparkJLineCompletion(intp);\n+    synchronized (sharedInterpreterLock) {\n+      if (classOutputDir == null) {\n+        classOutputDir = settings.outputDirs().getSingleOutput().get();\n+      } else {\n+        // change SparkIMain class output dir\n+        settings.outputDirs().setSingleOutput(classOutputDir);\n+        ClassLoader cl = intp.classLoader();\n \n-    sc = getSparkContext();\n-    if (sc.getPoolForName(\"fair\").isEmpty()) {\n-      Value schedulingMode = org.apache.spark.scheduler.SchedulingMode.FAIR();\n-      int minimumShare = 0;\n-      int weight = 1;\n-      Pool pool = new Pool(\"fair\", schedulingMode, minimumShare, weight);\n-      sc.taskScheduler().rootPool().addSchedulable(pool);\n-    }\n+        try {\n+          Field rootField = cl.getClass().getSuperclass().getDeclaredField(\"root\");\n+          rootField.setAccessible(true);\n+          rootField.set(cl, classOutputDir);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+          logger.error(e.getMessage(), e);\n+        }\n+      }\n \n-    sparkVersion = SparkVersion.fromVersionString(sc.version());\n+      completor = new SparkJLineCompletion(intp);\n \n-    sqlc = getSQLContext();\n+      sc = getSparkContext();\n+      if (sc.getPoolForName(\"fair\").isEmpty()) {\n+        Value schedulingMode = org.apache.spark.scheduler.SchedulingMode.FAIR();\n+        int minimumShare = 0;\n+        int weight = 1;\n+        Pool pool = new Pool(\"fair\", schedulingMode, minimumShare, weight);\n+        sc.taskScheduler().rootPool().addSchedulable(pool);\n+      }\n+\n+      sparkVersion = SparkVersion.fromVersionString(sc.version());\n+\n+      sqlc = getSQLContext();\n+    }\n \n     dep = getDependencyResolver();\n \n@@ -594,6 +616,8 @@ public void open() {\n         }\n       }\n     }\n+\n+    numReferenceOfSparkContext.incrementAndGet();\n   }\n \n   private List<File> currentClassPath() {\n@@ -916,8 +940,12 @@ private Code getResultCode(scala.tools.nsc.interpreter.Results.Result r) {\n \n   @Override\n   public void close() {\n-    sc.stop();\n-    sc = null;\n+    logger.info(\"Close interpreter\");\n+\n+    if (numReferenceOfSparkContext.decrementAndGet() == 0) {\n+      sc.stop();\n+      sc = null;\n+    }\n \n     intp.close();\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "sha": "5a1a0fdad210e1aea43ff6d5712f84e8bb64d537",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 21,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "patch": "@@ -79,23 +79,18 @@ public void open() {\n   }\n \n   private SparkInterpreter getSparkInterpreter() {\n-    InterpreterGroup intpGroup = getInterpreterGroup();\n     LazyOpenInterpreter lazy = null;\n     SparkInterpreter spark = null;\n-    synchronized (intpGroup) {\n-      for (Interpreter intp : getInterpreterGroup()){\n-        if (intp.getClassName().equals(SparkInterpreter.class.getName())) {\n-          Interpreter p = intp;\n-          while (p instanceof WrappedInterpreter) {\n-            if (p instanceof LazyOpenInterpreter) {\n-              lazy = (LazyOpenInterpreter) p;\n-            }\n-            p = ((WrappedInterpreter) p).getInnerInterpreter();\n-          }\n-          spark = (SparkInterpreter) p;\n-        }\n+    Interpreter p = getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());\n+\n+    while (p instanceof WrappedInterpreter) {\n+      if (p instanceof LazyOpenInterpreter) {\n+        lazy = (LazyOpenInterpreter) p;\n       }\n+      p = ((WrappedInterpreter) p).getInnerInterpreter();\n     }\n+    spark = (SparkInterpreter) p;\n+\n     if (lazy != null) {\n       lazy.open();\n     }\n@@ -179,15 +174,14 @@ public Scheduler getScheduler() {\n       // It's because of scheduler is not created yet, and scheduler is created by this function.\n       // Therefore, we can still use getSparkInterpreter() here, but it's better and safe\n       // to getSparkInterpreter without opening it.\n-      for (Interpreter intp : getInterpreterGroup()) {\n-        if (intp.getClassName().equals(SparkInterpreter.class.getName())) {\n-          Interpreter p = intp;\n-          return p.getScheduler();\n-        } else {\n-          continue;\n-        }\n+\n+      Interpreter intp =\n+          getInterpreterInTheSameSessionByClassName(SparkInterpreter.class.getName());\n+      if (intp != null) {\n+        return intp.getScheduler();\n+      } else {\n+        return null;\n       }\n-      throw new InterpreterException(\"Can't find SparkInterpreter\");\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "sha": "0be7c2d9fb3db89fd92f49201234715e33ff9b1d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 2,
                "filename": "spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java",
                "patch": "@@ -52,8 +52,9 @@ public void setUp() throws Exception {\n     dep.open();\n \n     InterpreterGroup intpGroup = new InterpreterGroup();\n-    intpGroup.add(new SparkInterpreter(p));\n-    intpGroup.add(dep);\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n+    intpGroup.get(\"note\").add(new SparkInterpreter(p));\n+    intpGroup.get(\"note\").add(dep);\n     dep.setInterpreterGroup(intpGroup);\n \n     context = new InterpreterContext(\"note\", \"id\", \"title\", \"text\", new AuthenticationInfo(),",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java",
                "sha": "dc8fd4ced7c09962e480ce51b38fb19c41a51f1b",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 3,
                "filename": "spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java",
                "patch": "@@ -24,6 +24,8 @@\n import java.util.LinkedList;\n import java.util.Properties;\n \n+import org.apache.spark.HttpServer;\n+import org.apache.spark.SecurityManager;\n import org.apache.spark.SparkConf;\n import org.apache.spark.SparkContext;\n import org.apache.zeppelin.display.AngularObjectRegistry;\n@@ -42,11 +44,11 @@\n @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n public class SparkInterpreterTest {\n   public static SparkInterpreter repl;\n+  public static InterpreterGroup intpGroup;\n   private InterpreterContext context;\n   private File tmpDir;\n   public static Logger LOGGER = LoggerFactory.getLogger(SparkInterpreterTest.class);\n \n-\n   /**\n    * Get spark version number as a numerical value.\n    * eg. 1.1.x => 11, 1.2.x => 12, 1.3.x => 13 ...\n@@ -70,12 +72,14 @@ public void setUp() throws Exception {\n \n     if (repl == null) {\n       Properties p = new Properties();\n-\n+      intpGroup = new InterpreterGroup();\n+      intpGroup.put(\"note\", new LinkedList<Interpreter>());\n       repl = new SparkInterpreter(p);\n+      repl.setInterpreterGroup(intpGroup);\n+      intpGroup.get(\"note\").add(repl);\n       repl.open();\n     }\n \n-    InterpreterGroup intpGroup = new InterpreterGroup();\n     context = new InterpreterContext(\"note\", \"id\", \"title\", \"text\",\n         new AuthenticationInfo(),\n         new HashMap<String, Object>(),\n@@ -188,4 +192,21 @@ public void emptyConfigurationVariablesOnlyForNonSparkProperties() {\n       }\n     }\n   }\n+\n+  @Test\n+  public void shareSingleSparkContext() throws InterruptedException {\n+    // create another SparkInterpreter\n+    Properties p = new Properties();\n+    SparkInterpreter repl2 = new SparkInterpreter(p);\n+    repl2.setInterpreterGroup(intpGroup);\n+    intpGroup.get(\"note\").add(repl2);\n+    repl2.open();\n+\n+    assertEquals(Code.SUCCESS,\n+        repl.interpret(\"print(sc.parallelize(1 to 10).count())\", context).code());\n+    assertEquals(Code.SUCCESS,\n+        repl2.interpret(\"print(sc.parallelize(1 to 10).count())\", context).code());\n+\n+    repl2.close();\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java",
                "sha": "bb026d9904498230ca6a499b5b265a86f93d348f",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 4,
                "filename": "spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java",
                "patch": "@@ -51,17 +51,22 @@ public void setUp() throws Exception {\n \n       if (SparkInterpreterTest.repl == null) {\n         repl = new SparkInterpreter(p);\n+        intpGroup = new InterpreterGroup();\n+        repl.setInterpreterGroup(intpGroup);\n         repl.open();\n         SparkInterpreterTest.repl = repl;\n+        SparkInterpreterTest.intpGroup = intpGroup;\n       } else {\n         repl = SparkInterpreterTest.repl;\n+        intpGroup = SparkInterpreterTest.intpGroup;\n       }\n \n-    sql = new SparkSqlInterpreter(p);\n+      sql = new SparkSqlInterpreter(p);\n \n-    intpGroup = new InterpreterGroup();\n-      intpGroup.add(repl);\n-      intpGroup.add(sql);\n+      intpGroup = new InterpreterGroup();\n+      intpGroup.put(\"note\", new LinkedList<Interpreter>());\n+      intpGroup.get(\"note\").add(repl);\n+      intpGroup.get(\"note\").add(sql);\n       sql.setInterpreterGroup(intpGroup);\n       sql.open();\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java",
                "sha": "e5ea9a0e3aba02c9c7227ee6540f19426787cfb8",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 4,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "patch": "@@ -121,10 +121,6 @@ public Scheduler getScheduler() {\n    * Called when interpreter is no longer used.\n    */\n   public void destroy() {\n-    Scheduler scheduler = getScheduler();\n-    if (scheduler != null) {\n-      scheduler.stop();\n-    }\n   }\n \n   public static Logger logger = LoggerFactory.getLogger(Interpreter.class);\n@@ -193,6 +189,33 @@ public void setClassloaderUrls(URL[] classloaderUrls) {\n     this.classloaderUrls = classloaderUrls;\n   }\n \n+  public Interpreter getInterpreterInTheSameSessionByClassName(String className) {\n+    synchronized (interpreterGroup) {\n+      for (List<Interpreter> interpreters : interpreterGroup.values()) {\n+        boolean belongsToSameNoteGroup = false;\n+        Interpreter interpreterFound = null;\n+        for (Interpreter intp : interpreters) {\n+          if (intp.getClassName().equals(className)) {\n+            interpreterFound = intp;\n+          }\n+\n+          Interpreter p = intp;\n+          while (p instanceof WrappedInterpreter) {\n+            p = ((WrappedInterpreter) p).getInnerInterpreter();\n+          }\n+          if (this == p) {\n+            belongsToSameNoteGroup = true;\n+          }\n+        }\n+\n+        if (belongsToSameNoteGroup) {\n+          return interpreterFound;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n \n   /**\n    * Type of interpreter.",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java",
                "sha": "c8454786128c61e378841210eb8ba49d803cd092",
                "status": "modified"
            },
            {
                "additions": 110,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 15,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "patch": "@@ -23,13 +23,24 @@\n import org.apache.log4j.Logger;\n import org.apache.zeppelin.display.AngularObjectRegistry;\n import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;\n+import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;\n import org.apache.zeppelin.resource.ResourcePool;\n+import org.apache.zeppelin.scheduler.Scheduler;\n+import org.apache.zeppelin.scheduler.SchedulerFactory;\n \n /**\n- * InterpreterGroup is list of interpreters in the same group.\n+ * InterpreterGroup is list of interpreters in the same interpreter group.\n+ * For example spark, pyspark, sql interpreters are in the same 'spark' group\n+ * and InterpreterGroup will have reference to these all interpreters.\n+ *\n+ * Remember, list of interpreters are dedicated to a note.\n+ * (when InterpreterOption.perNoteSession==true)\n+ * So InterpreterGroup internally manages map of [noteId, list of interpreters]\n+ *\n+ * A InterpreterGroup runs on interpreter process.\n  * And unit of interpreter instantiate, restart, bind, unbind.\n  */\n-public class InterpreterGroup extends LinkedList<Interpreter>{\n+public class InterpreterGroup extends ConcurrentHashMap<String, List<Interpreter>> {\n   String id;\n \n   Logger LOGGER = Logger.getLogger(InterpreterGroup.class);\n@@ -38,22 +49,33 @@\n   RemoteInterpreterProcess remoteInterpreterProcess;    // attached remote interpreter process\n   ResourcePool resourcePool;\n \n+  // map [notebook session, Interpreters in the group], to support per note session interpreters\n+  //Map<String, List<Interpreter>> interpreters = new ConcurrentHashMap<String,\n+  // List<Interpreter>>();\n+\n   private static final Map<String, InterpreterGroup> allInterpreterGroups =\n       new ConcurrentHashMap<String, InterpreterGroup>();\n \n-  public static InterpreterGroup get(String id) {\n+  public static InterpreterGroup getByInterpreterGroupId(String id) {\n     return allInterpreterGroups.get(id);\n   }\n \n   public static Collection<InterpreterGroup> getAll() {\n     return new LinkedList(allInterpreterGroups.values());\n   }\n \n+  /**\n+   * Create InterpreterGroup with given id\n+   * @param id\n+   */\n   public InterpreterGroup(String id) {\n     this.id = id;\n     allInterpreterGroups.put(id, this);\n   }\n \n+  /**\n+   * Create InterpreterGroup with autogenerated id\n+   */\n   public InterpreterGroup() {\n     getId();\n     allInterpreterGroups.put(id, this);\n@@ -73,10 +95,22 @@ public String getId() {\n     }\n   }\n \n+  /**\n+   * Get combined property of all interpreters in this group\n+   * @return\n+   */\n   public Properties getProperty() {\n     Properties p = new Properties();\n-    for (Interpreter intp : this) {\n-      p.putAll(intp.getProperty());\n+\n+    Collection<List<Interpreter>> intpGroupForANote = this.values();\n+    if (intpGroupForANote != null && intpGroupForANote.size() > 0) {\n+      for (List<Interpreter> intpGroup : intpGroupForANote) {\n+        for (Interpreter intp : intpGroup) {\n+          p.putAll(intp.getProperty());\n+        }\n+        // it's okay to break here while every List<Interpreters> will have the same property set\n+        break;\n+      }\n     }\n     return p;\n   }\n@@ -97,13 +131,45 @@ public void setRemoteInterpreterProcess(RemoteInterpreterProcess remoteInterpret\n     this.remoteInterpreterProcess = remoteInterpreterProcess;\n   }\n \n+\n+\n+  /**\n+   * Close all interpreter instances in this group\n+   */\n   public void close() {\n+    LOGGER.info(\"Close interpreter group \" + getId());\n+    List<Interpreter> intpToClose = new LinkedList<Interpreter>();\n+    for (List<Interpreter> intpGroupForNote : this.values()) {\n+      intpToClose.addAll(intpGroupForNote);\n+    }\n+    close(intpToClose);\n+  }\n+\n+  /**\n+   * Close all interpreter instances in this group for the note\n+   * @param noteId\n+   */\n+  public void close(String noteId) {\n+    LOGGER.info(\"Close interpreter group \" + getId() + \" for note \" + noteId);\n+    List<Interpreter> intpForNote = this.get(noteId);\n+    close(intpForNote);\n+  }\n+\n+  private void close(Collection<Interpreter> intpToClose) {\n+    if (intpToClose == null) {\n+      return;\n+    }\n     List<Thread> closeThreads = new LinkedList<Thread>();\n \n-    for (final Interpreter intp : this) {\n+    for (final Interpreter intp : intpToClose) {\n       Thread t = new Thread() {\n         public void run() {\n+          Scheduler scheduler = intp.getScheduler();\n           intp.close();\n+\n+          if (scheduler != null) {\n+            SchedulerFactory.singleton().removeScheduler(scheduler.getName());\n+          }\n         }\n       };\n \n@@ -120,10 +186,46 @@ public void run() {\n     }\n   }\n \n+  /**\n+   * Destroy all interpreter instances in this group for the note\n+   * @param noteId\n+   */\n+  public void destroy(String noteId) {\n+    LOGGER.info(\"Destroy interpreter group \" + getId() + \" for note \" + noteId);\n+    List<Interpreter> intpForNote = this.get(noteId);\n+    destroy(intpForNote);\n+  }\n+\n+\n+  /**\n+   * Destroy all interpreter instances in this group\n+   */\n   public void destroy() {\n+    LOGGER.info(\"Destroy interpreter group \" + getId());\n+    List<Interpreter> intpToDestroy = new LinkedList<Interpreter>();\n+    for (List<Interpreter> intpGroupForNote : this.values()) {\n+      intpToDestroy.addAll(intpGroupForNote);\n+    }\n+    destroy(intpToDestroy);\n+\n+    // make sure remote interpreter process terminates\n+    if (remoteInterpreterProcess != null) {\n+      while (remoteInterpreterProcess.referenceCount() > 0) {\n+        remoteInterpreterProcess.dereference();\n+      }\n+    }\n+\n+    allInterpreterGroups.remove(id);\n+  }\n+\n+  private void destroy(Collection<Interpreter> intpToDestroy) {\n+    if (intpToDestroy == null) {\n+      return;\n+    }\n+\n     List<Thread> destroyThreads = new LinkedList<Thread>();\n \n-    for (final Interpreter intp : this) {\n+    for (final Interpreter intp : intpToDestroy) {\n       Thread t = new Thread() {\n         public void run() {\n           intp.destroy();\n@@ -141,16 +243,9 @@ public void run() {\n         LOGGER.error(\"Can't close interpreter\", e);\n       }\n     }\n+  }\n \n-    // make sure remote interpreter process terminates\n-    if (remoteInterpreterProcess != null) {\n-      while (remoteInterpreterProcess.referenceCount() > 0) {\n-        remoteInterpreterProcess.dereference();\n-      }\n-    }\n \n-    allInterpreterGroups.remove(id);\n-  }\n \n   public void setResourcePool(ResourcePool resourcePool) {\n     this.resourcePool = resourcePool;",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "sha": "3ed988aca2eef4e45a370884308cfec2d3f583f7",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObject.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObject.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 8,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObject.java",
                "patch": "@@ -19,20 +19,20 @@\n \n import org.apache.zeppelin.display.AngularObject;\n import org.apache.zeppelin.display.AngularObjectListener;\n+import org.apache.zeppelin.interpreter.InterpreterGroup;\n \n /**\n  * Proxy for AngularObject that exists in remote interpreter process\n  */\n public class RemoteAngularObject extends AngularObject {\n \n-  private transient RemoteInterpreterProcess remoteInterpreterProcess;\n+  private transient InterpreterGroup interpreterGroup;\n \n-  RemoteAngularObject(String name, Object o, String noteId, String paragraphId, String\n-          interpreterGroupId,\n-      AngularObjectListener listener,\n-      RemoteInterpreterProcess remoteInterpreterProcess) {\n+  RemoteAngularObject(String name, Object o, String noteId, String paragraphId,\n+      InterpreterGroup interpreterGroup,\n+      AngularObjectListener listener) {\n     super(name, o, noteId, paragraphId, listener);\n-    this.remoteInterpreterProcess = remoteInterpreterProcess;\n+    this.interpreterGroup = interpreterGroup;\n   }\n \n   @Override\n@@ -45,8 +45,9 @@ public void set(Object o, boolean emitWeb, boolean emitRemoteProcess) {\n \n     if (emitRemoteProcess) {\n       // send updated value to remote interpreter\n-      remoteInterpreterProcess.updateRemoteAngularObject(getName(), getNoteId(), getParagraphId()\n-              , o);\n+      interpreterGroup.getRemoteInterpreterProcess().\n+          updateRemoteAngularObject(\n+              getName(), getNoteId(), getParagraphId(), o);\n     }\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObject.java",
                "sha": "c1f9b94a6e96a9fb7d45127545e321f2e0552e26",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectRegistry.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectRegistry.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 20,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectRegistry.java",
                "patch": "@@ -47,19 +47,7 @@ public RemoteAngularObjectRegistry(String interpreterId,\n   }\n \n   private RemoteInterpreterProcess getRemoteInterpreterProcess() {\n-    if (interpreterGroup.size() == 0) {\n-      throw new RuntimeException(\"Can't get remoteInterpreterProcess\");\n-    }\n-    Interpreter p = interpreterGroup.get(0);\n-    while (p instanceof WrappedInterpreter) {\n-      p = ((WrappedInterpreter) p).getInnerInterpreter();\n-    }\n-\n-    if (p instanceof RemoteInterpreter) {\n-      return ((RemoteInterpreter) p).getInterpreterProcess();\n-    } else {\n-      throw new RuntimeException(\"Can't get remoteInterpreterProcess\");\n-    }\n+    return interpreterGroup.getRemoteInterpreterProcess();\n   }\n \n   /**\n@@ -141,12 +129,7 @@ public void removeAllAndNotifyRemoteProcess(String noteId, String paragraphId) {\n   @Override\n   protected AngularObject createNewAngularObject(String name, Object o, String noteId, String\n           paragraphId) {\n-    RemoteInterpreterProcess remoteInterpreterProcess = getRemoteInterpreterProcess();\n-    if (remoteInterpreterProcess == null) {\n-      throw new RuntimeException(\"Remote Interpreter process not found\");\n-    }\n-    return new RemoteAngularObject(name, o, noteId, paragraphId, getInterpreterGroupId(),\n-        getAngularObjectListener(),\n-        getRemoteInterpreterProcess());\n+    return new RemoteAngularObject(name, o, noteId, paragraphId, interpreterGroup,\n+        getAngularObjectListener());\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectRegistry.java",
                "sha": "378929269f2219d03427edfe6a1909b6b905006c",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 46,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "patch": "@@ -17,19 +17,11 @@\n \n package org.apache.zeppelin.interpreter.remote;\n \n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n+import java.util.*;\n \n import org.apache.thrift.TException;\n import org.apache.zeppelin.display.GUI;\n-import org.apache.zeppelin.interpreter.Interpreter;\n-import org.apache.zeppelin.interpreter.InterpreterContext;\n-import org.apache.zeppelin.interpreter.InterpreterContextRunner;\n-import org.apache.zeppelin.interpreter.InterpreterException;\n-import org.apache.zeppelin.interpreter.InterpreterGroup;\n-import org.apache.zeppelin.interpreter.InterpreterResult;\n+import org.apache.zeppelin.interpreter.*;\n import org.apache.zeppelin.interpreter.InterpreterResult.Type;\n import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterContext;\n import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult;\n@@ -43,7 +35,7 @@\n import com.google.gson.reflect.TypeToken;\n \n /**\n- *\n+ * Proxy for Interpreter instance that runs on separate process\n  */\n public class RemoteInterpreter extends Interpreter {\n   private final RemoteInterpreterProcessListener remoteInterpreterProcessListener;\n@@ -53,13 +45,16 @@\n   private String interpreterPath;\n   private String localRepoPath;\n   private String className;\n+  private String noteId;\n   FormType formType;\n   boolean initialized;\n   private Map<String, String> env;\n   private int connectTimeout;\n   private int maxPoolSize;\n+  private static String schedulerName;\n \n   public RemoteInterpreter(Properties property,\n+      String noteId,\n       String className,\n       String interpreterRunner,\n       String interpreterPath,\n@@ -68,6 +63,7 @@ public RemoteInterpreter(Properties property,\n       int maxPoolSize,\n       RemoteInterpreterProcessListener remoteInterpreterProcessListener) {\n     super(property);\n+    this.noteId = noteId;\n     this.className = className;\n     initialized = false;\n     this.interpreterRunner = interpreterRunner;\n@@ -80,6 +76,7 @@ public RemoteInterpreter(Properties property,\n   }\n \n   public RemoteInterpreter(Properties property,\n+      String noteId,\n       String className,\n       String interpreterRunner,\n       String interpreterPath,\n@@ -89,6 +86,7 @@ public RemoteInterpreter(Properties property,\n       RemoteInterpreterProcessListener remoteInterpreterProcessListener) {\n     super(property);\n     this.className = className;\n+    this.noteId = noteId;\n     this.interpreterRunner = interpreterRunner;\n     this.interpreterPath = interpreterPath;\n     this.localRepoPath = localRepoPath;\n@@ -123,39 +121,36 @@ public RemoteInterpreterProcess getInterpreterProcess() {\n     }\n   }\n \n-  private synchronized void init() {\n+  public synchronized void init() {\n     if (initialized == true) {\n       return;\n     }\n \n     RemoteInterpreterProcess interpreterProcess = getInterpreterProcess();\n-    int rc = interpreterProcess.reference(getInterpreterGroup());\n-    interpreterProcess.setMaxPoolSize(this.maxPoolSize);\n+\n+    interpreterProcess.reference(getInterpreterGroup());\n+    interpreterProcess.setMaxPoolSize(\n+        Math.max(this.maxPoolSize, interpreterProcess.getMaxPoolSize()));\n+\n     synchronized (interpreterProcess) {\n-      // when first process created\n-      if (rc == 1) {\n-        // create all interpreter class in this interpreter group\n-        Client client = null;\n-        try {\n-          client = interpreterProcess.getClient();\n-        } catch (Exception e1) {\n-          throw new InterpreterException(e1);\n-        }\n+      Client client = null;\n+      try {\n+        client = interpreterProcess.getClient();\n+      } catch (Exception e1) {\n+        throw new InterpreterException(e1);\n+      }\n \n-        boolean broken = false;\n-        try {\n-          for (Interpreter intp : this.getInterpreterGroup()) {\n-            logger.info(\"Create remote interpreter {}\", intp.getClassName());\n-            property.put(\"zeppelin.interpreter.localRepo\", localRepoPath);\n-            client.createInterpreter(getInterpreterGroup().getId(),\n-                    intp.getClassName(), (Map) property);\n-          }\n-        } catch (TException e) {\n-          broken = true;\n-          throw new InterpreterException(e);\n-        } finally {\n-          interpreterProcess.releaseClient(client, broken);\n-        }\n+      boolean broken = false;\n+      try {\n+        logger.info(\"Create remote interpreter {}\", getClassName());\n+        property.put(\"zeppelin.interpreter.localRepo\", localRepoPath);\n+        client.createInterpreter(getInterpreterGroup().getId(), noteId,\n+            getClassName(), (Map) property);\n+      } catch (TException e) {\n+        broken = true;\n+        throw new InterpreterException(e);\n+      } finally {\n+        interpreterProcess.releaseClient(client, broken);\n       }\n     }\n     initialized = true;\n@@ -165,19 +160,31 @@ private synchronized void init() {\n \n   @Override\n   public void open() {\n-    init();\n+    InterpreterGroup interpreterGroup = getInterpreterGroup();\n+\n+    synchronized (interpreterGroup) {\n+      // initialize all interpreters in this interpreter group\n+      List<Interpreter> interpreters = interpreterGroup.get(noteId);\n+      for (Interpreter intp : interpreters) {\n+        Interpreter p = intp;\n+        while (p instanceof WrappedInterpreter) {\n+          p = ((WrappedInterpreter) p).getInnerInterpreter();\n+        }\n+        ((RemoteInterpreter) p).init();\n+      }\n+    }\n   }\n \n   @Override\n   public void close() {\n     RemoteInterpreterProcess interpreterProcess = getInterpreterProcess();\n-    Client client = null;\n \n+    Client client = null;\n     boolean broken = false;\n     try {\n       client = interpreterProcess.getClient();\n       if (client != null) {\n-        client.close(className);\n+        client.close(noteId, className);\n       }\n     } catch (TException e) {\n       broken = true;\n@@ -219,7 +226,8 @@ public InterpreterResult interpret(String st, InterpreterContext context) {\n     boolean broken = false;\n     try {\n       GUI settings = context.getGui();\n-      RemoteInterpreterResult remoteResult = client.interpret(className, st, convert(context));\n+      RemoteInterpreterResult remoteResult = client.interpret(\n+          noteId, className, st, convert(context));\n \n       Map<String, Object> remoteConfig = (Map<String, Object>) gson.fromJson(\n           remoteResult.getConfig(), new TypeToken<Map<String, Object>>() {\n@@ -256,7 +264,7 @@ public void cancel(InterpreterContext context) {\n \n     boolean broken = false;\n     try {\n-      client.cancel(className, convert(context));\n+      client.cancel(noteId, className, convert(context));\n     } catch (TException e) {\n       broken = true;\n       throw new InterpreterException(e);\n@@ -284,7 +292,7 @@ public FormType getFormType() {\n \n     boolean broken = false;\n     try {\n-      formType = FormType.valueOf(client.getFormType(className));\n+      formType = FormType.valueOf(client.getFormType(noteId, className));\n       return formType;\n     } catch (TException e) {\n       broken = true;\n@@ -310,7 +318,7 @@ public int getProgress(InterpreterContext context) {\n \n     boolean broken = false;\n     try {\n-      return client.getProgress(className, convert(context));\n+      return client.getProgress(noteId, className, convert(context));\n     } catch (TException e) {\n       broken = true;\n       throw new InterpreterException(e);\n@@ -332,7 +340,7 @@ public int getProgress(InterpreterContext context) {\n \n     boolean broken = false;\n     try {\n-      return client.completion(className, buf, cursor);\n+      return client.completion(noteId, className, buf, cursor);\n     } catch (TException e) {\n       broken = true;\n       throw new InterpreterException(e);\n@@ -349,7 +357,9 @@ public Scheduler getScheduler() {\n       return null;\n     } else {\n       return SchedulerFactory.singleton().createOrGetRemoteScheduler(\n-          \"remoteinterpreter_\" + interpreterProcess.hashCode(), interpreterProcess,\n+          RemoteInterpreter.class.getName() + noteId + interpreterProcess.hashCode(),\n+          noteId,\n+          interpreterProcess,\n           maxConcurrency);\n     }\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "sha": "e4d4bff5d0f219d7a374c26a7c40998e4e5f55bc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "patch": "@@ -244,7 +244,8 @@ private void sendResourceResponseGet(ResourceId resourceId, Object o) {\n   }\n \n   private Object getResource(ResourceId resourceId) {\n-    InterpreterGroup intpGroup = InterpreterGroup.get(resourceId.getResourcePoolId());\n+    InterpreterGroup intpGroup = InterpreterGroup.getByInterpreterGroupId(\n+        resourceId.getResourcePoolId());\n     if (intpGroup == null) {\n       return null;\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "sha": "8600c7865cf4925d8861874b74da2a6b257efc23",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "patch": "@@ -281,6 +281,15 @@ public void setMaxPoolSize(int size) {\n       clientPool.setMaxTotal(size + 2);\n     }\n   }\n+\n+  public int getMaxPoolSize() {\n+    if (clientPool != null) {\n+      return clientPool.getMaxTotal();\n+    } else {\n+      return 0;\n+    }\n+  }\n+\n   /**\n    * Called when angular object is updated in client side to propagate\n    * change to the remote process",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "sha": "67a048ba9cc61fcfc89c4378c6456c2e39885836",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "changes": 88,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 30,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "patch": "@@ -23,11 +23,7 @@\n import java.lang.reflect.InvocationTargetException;\n import java.net.URL;\n import java.nio.ByteBuffer;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n+import java.util.*;\n \n import org.apache.thrift.TException;\n import org.apache.thrift.server.TThreadPoolServer;\n@@ -140,10 +136,9 @@ public static void main(String[] args)\n \n \n   @Override\n-  public void createInterpreter(String interpreterGroupId, String className, Map<String, String>\n-          properties)\n-      throws TException {\n-\n+  public void createInterpreter(String interpreterGroupId, String noteId, String\n+      className,\n+                                Map<String, String> properties) throws TException {\n     if (interpreterGroup == null) {\n       interpreterGroup = new InterpreterGroup(interpreterGroupId);\n       angularObjectRegistry = new AngularObjectRegistry(interpreterGroup.getId(), this);\n@@ -165,8 +160,13 @@ public void createInterpreter(String interpreterGroupId, String className, Map<S\n       repl.setClassloaderUrls(new URL[]{});\n \n       synchronized (interpreterGroup) {\n-        interpreterGroup.add(new LazyOpenInterpreter(\n-            new ClassloaderInterpreter(repl, cl)));\n+        List<Interpreter> interpreters = interpreterGroup.get(noteId);\n+        if (interpreters == null) {\n+          interpreters = new LinkedList<Interpreter>();\n+          interpreterGroup.put(noteId, interpreters);\n+        }\n+\n+        interpreters.add(new LazyOpenInterpreter(new ClassloaderInterpreter(repl, cl)));\n       }\n \n       logger.info(\"Instantiate interpreter {}\", className);\n@@ -179,9 +179,18 @@ public void createInterpreter(String interpreterGroupId, String className, Map<S\n     }\n   }\n \n-  private Interpreter getInterpreter(String className) throws TException {\n+  private Interpreter getInterpreter(String noteId, String className) throws TException {\n+    if (interpreterGroup == null) {\n+      throw new TException(\n+          new InterpreterException(\"Interpreter instance \" + className + \" not created\"));\n+    }\n     synchronized (interpreterGroup) {\n-      for (Interpreter inp : interpreterGroup) {\n+      List<Interpreter> interpreters = interpreterGroup.get(noteId);\n+      if (interpreters == null) {\n+        throw new TException(\n+            new InterpreterException(\"Interpreter \" + className + \" not initialized\"));\n+      }\n+      for (Interpreter inp : interpreters) {\n         if (inp.getClassName().equals(className)) {\n           return inp;\n         }\n@@ -192,23 +201,35 @@ private Interpreter getInterpreter(String className) throws TException {\n   }\n \n   @Override\n-  public void open(String className) throws TException {\n-    Interpreter intp = getInterpreter(className);\n+  public void open(String noteId, String className) throws TException {\n+    Interpreter intp = getInterpreter(noteId, className);\n     intp.open();\n   }\n \n   @Override\n-  public void close(String className) throws TException {\n-    Interpreter intp = getInterpreter(className);\n-    intp.close();\n+  public void close(String noteId, String className) throws TException {\n+    synchronized (interpreterGroup) {\n+      List<Interpreter> interpreters = interpreterGroup.get(noteId);\n+      if (interpreters != null) {\n+        Iterator<Interpreter> it = interpreters.iterator();\n+        while (it.hasNext()) {\n+          Interpreter inp = it.next();\n+          if (inp.getClassName().equals(className)) {\n+            inp.close();\n+            it.remove();\n+            break;\n+          }\n+        }\n+      }\n+    }\n   }\n \n \n   @Override\n-  public RemoteInterpreterResult interpret(String className, String st,\n+  public RemoteInterpreterResult interpret(String noteId, String className, String st,\n       RemoteInterpreterContext interpreterContext) throws TException {\n     logger.debug(\"st: {}\", st);\n-    Interpreter intp = getInterpreter(className);\n+    Interpreter intp = getInterpreter(noteId, className);\n     InterpreterContext context = convert(interpreterContext);\n \n     Scheduler scheduler = intp.getScheduler();\n@@ -341,10 +362,10 @@ protected boolean jobAbort() {\n \n \n   @Override\n-  public void cancel(String className, RemoteInterpreterContext interpreterContext)\n+  public void cancel(String noteId, String className, RemoteInterpreterContext interpreterContext)\n       throws TException {\n     logger.info(\"cancel {} {}\", className, interpreterContext.getParagraphId());\n-    Interpreter intp = getInterpreter(className);\n+    Interpreter intp = getInterpreter(noteId, className);\n     String jobId = interpreterContext.getParagraphId();\n     Job job = intp.getScheduler().removeFromWaitingQueue(jobId);\n \n@@ -356,22 +377,24 @@ public void cancel(String className, RemoteInterpreterContext interpreterContext\n   }\n \n   @Override\n-  public int getProgress(String className, RemoteInterpreterContext interpreterContext)\n+  public int getProgress(String noteId, String className,\n+                         RemoteInterpreterContext interpreterContext)\n       throws TException {\n-    Interpreter intp = getInterpreter(className);\n+    Interpreter intp = getInterpreter(noteId, className);\n     return intp.getProgress(convert(interpreterContext));\n   }\n \n \n   @Override\n-  public String getFormType(String className) throws TException {\n-    Interpreter intp = getInterpreter(className);\n+  public String getFormType(String noteId, String className) throws TException {\n+    Interpreter intp = getInterpreter(noteId, className);\n     return intp.getFormType().toString();\n   }\n \n   @Override\n-  public List<String> completion(String className, String buf, int cursor) throws TException {\n-    Interpreter intp = getInterpreter(className);\n+  public List<String> completion(String noteId, String className, String buf, int cursor)\n+      throws TException {\n+    Interpreter intp = getInterpreter(noteId, className);\n     return intp.completion(buf, cursor);\n   }\n \n@@ -441,14 +464,19 @@ private RemoteInterpreterResult convert(InterpreterResult result,\n   }\n \n   @Override\n-  public String getStatus(String jobId)\n+  public String getStatus(String noteId, String jobId)\n       throws TException {\n     if (interpreterGroup == null) {\n       return \"Unknown\";\n     }\n \n     synchronized (interpreterGroup) {\n-      for (Interpreter intp : interpreterGroup) {\n+      List<Interpreter> interpreters = interpreterGroup.get(noteId);\n+      if (interpreters == null) {\n+        return \"Unknown\";\n+      }\n+\n+      for (Interpreter intp : interpreters) {\n         for (Job job : intp.getScheduler().getJobsRunning()) {\n           if (jobId.equals(job.getId())) {\n             return job.getStatus().name();",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "sha": "09ef39125d3f0d8ddfada6892528d5d762764d16",
                "status": "modified"
            },
            {
                "additions": 1181,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "changes": 1381,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 200,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "sha": "6b74b40423829feb9ef1dbebcd13ad49d2311c24",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 2,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java",
                "patch": "@@ -45,14 +45,16 @@\n   boolean terminate = false;\n   private String name;\n   private int maxConcurrency;\n+  private final String noteId;\n   private RemoteInterpreterProcess interpreterProcess;\n \n-  public RemoteScheduler(String name, ExecutorService executor,\n+  public RemoteScheduler(String name, ExecutorService executor, String noteId,\n       RemoteInterpreterProcess interpreterProcess, SchedulerListener listener,\n       int maxConcurrency) {\n     this.name = name;\n     this.executor = executor;\n     this.listener = listener;\n+    this.noteId = noteId;\n     this.interpreterProcess = interpreterProcess;\n     this.maxConcurrency = maxConcurrency;\n   }\n@@ -257,7 +259,7 @@ private Status getLastStatus() {\n \n       boolean broken = false;\n       try {\n-        String statusStr = client.getStatus(job.getId());\n+        String statusStr = client.getStatus(noteId, job.getId());\n         if (\"Unknown\".equals(statusStr)) {\n           // not found this job in the remote schedulers.\n           // maybe not submitted, maybe already finished",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java",
                "sha": "33a3ca63c7530f9af94ae38fcec58f7dc697f216",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerFactory.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerFactory.java",
                "patch": "@@ -86,6 +86,7 @@ public Scheduler createOrGetParallelScheduler(String name, int maxConcurrency) {\n \n   public Scheduler createOrGetRemoteScheduler(\n       String name,\n+      String noteId,\n       RemoteInterpreterProcess interpreterProcess,\n       int maxConcurrency) {\n \n@@ -94,6 +95,7 @@ public Scheduler createOrGetRemoteScheduler(\n         Scheduler s = new RemoteScheduler(\n             name,\n             executor,\n+            noteId,\n             interpreterProcess,\n             this,\n             maxConcurrency);",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerFactory.java",
                "sha": "20b4b8aa916a85011cdfdba5cd2bf10925d68c2a",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 9,
                "filename": "zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "patch": "@@ -56,18 +56,18 @@ struct RemoteInterpreterEvent {\n }\n \n service RemoteInterpreterService {\n-  void createInterpreter(1: string intpGroupId, 2: string className, 3: map<string, string> properties);\n+  void createInterpreter(1: string intpGroupId, 2: string noteId, 3: string className, 4: map<string, string> properties);\n \n-  void open(1: string className);\n-  void close(1: string className);\n-  RemoteInterpreterResult interpret(1: string className, 2: string st, 3: RemoteInterpreterContext interpreterContext);\n-  void cancel(1: string className, 2: RemoteInterpreterContext interpreterContext);\n-  i32 getProgress(1: string className, 2: RemoteInterpreterContext interpreterContext);\n-  string getFormType(1: string className);\n-  list<string> completion(1: string className, 2: string buf, 3: i32 cursor);\n+  void open(1: string noteId, 2: string className);\n+  void close(1: string noteId, 2: string className);\n+  RemoteInterpreterResult interpret(1: string noteId, 2: string className, 3: string st, 4: RemoteInterpreterContext interpreterContext);\n+  void cancel(1: string noteId, 2: string className, 3: RemoteInterpreterContext interpreterContext);\n+  i32 getProgress(1: string noteId, 2: string className, 3: RemoteInterpreterContext interpreterContext);\n+  string getFormType(1: string noteId, 2: string className);\n+  list<string> completion(1: string noteId, 2: string className, 3: string buf, 4: i32 cursor);\n   void shutdown();\n \n-  string getStatus(1:string jobId);\n+  string getStatus(1: string noteId, 2:string jobId);\n \n   RemoteInterpreterEvent getEvent();\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "sha": "224433de5bfc522942e3be3ff40391451bb42e7a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java",
                "patch": "@@ -61,6 +61,7 @@ public void setUp() throws Exception {\n \n     intp = new RemoteInterpreter(\n         p,\n+        \"note\",\n         MockInterpreterAngular.class.getName(),\n         new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n         \"fake\",\n@@ -70,7 +71,8 @@ public void setUp() throws Exception {\n         null\n     );\n \n-    intpGroup.add(intp);\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n+    intpGroup.get(\"note\").add(intp);\n     intp.setInterpreterGroup(intpGroup);\n \n     context = new InterpreterContext(",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java",
                "sha": "84327dd6c455c1be8d7c4166a7f4117d0412c3d5",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "patch": "@@ -44,6 +44,8 @@\n   @Before\n   public void setUp() throws Exception {\n     intpGroup = new InterpreterGroup();\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n+\n     env = new HashMap<String, String>();\n     env.put(\"ZEPPELIN_CLASSPATH\", new File(\"./target/test-classes\").getAbsolutePath());\n   }\n@@ -57,6 +59,7 @@ public void tearDown() throws Exception {\n   private RemoteInterpreter createMockInterpreter() {\n     RemoteInterpreter intp = new RemoteInterpreter(\n         new Properties(),\n+        \"note\",\n         MockInterpreterOutputStream.class.getName(),\n         new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n         \"fake\",\n@@ -65,7 +68,7 @@ private RemoteInterpreter createMockInterpreter() {\n         10 * 1000,\n         this);\n \n-    intpGroup.add(intp);\n+    intpGroup.get(\"note\").add(intp);\n     intp.setInterpreterGroup(intpGroup);\n     return intp;\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "sha": "3fbf5bcc8b29ad4e93ef558c72f4b941e11feae7",
                "status": "modified"
            },
            {
                "additions": 77,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java",
                "changes": 94,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 17,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java",
                "patch": "@@ -63,8 +63,13 @@ public void tearDown() throws Exception {\n   }\n \n   private RemoteInterpreter createMockInterpreterA(Properties p) {\n+    return createMockInterpreterA(p, \"note\");\n+  }\n+\n+  private RemoteInterpreter createMockInterpreterA(Properties p, String noteId) {\n     return new RemoteInterpreter(\n             p,\n+            noteId,\n             MockInterpreterA.class.getName(),\n             new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n             \"fake\",\n@@ -75,8 +80,13 @@ private RemoteInterpreter createMockInterpreterA(Properties p) {\n   }\n \n   private RemoteInterpreter createMockInterpreterB(Properties p) {\n+    return createMockInterpreterB(p, \"note\");\n+  }\n+\n+  private RemoteInterpreter createMockInterpreterB(Properties p, String noteId) {\n     return new RemoteInterpreter(\n             p,\n+            noteId,\n             MockInterpreterB.class.getName(),\n             new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n             \"fake\",\n@@ -89,15 +99,17 @@ private RemoteInterpreter createMockInterpreterB(Properties p) {\n   @Test\n   public void testRemoteInterperterCall() throws TTransportException, IOException {\n     Properties p = new Properties();\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n \n     RemoteInterpreter intpA = createMockInterpreterA(p);\n \n-    intpGroup.add(intpA);\n+    intpGroup.get(\"note\").add(intpA);\n+\n     intpA.setInterpreterGroup(intpGroup);\n \n     RemoteInterpreter intpB = createMockInterpreterB(p);\n \n-    intpGroup.add(intpB);\n+    intpGroup.get(\"note\").add(intpB);\n     intpB.setInterpreterGroup(intpGroup);\n \n \n@@ -108,10 +120,10 @@ public void testRemoteInterperterCall() throws TTransportException, IOException\n     assertEquals(0, process.getNumIdleClient());\n     assertEquals(0, process.referenceCount());\n \n-    intpA.open();\n+    intpA.open(); // initializa all interpreters in the same group\n     assertTrue(process.isRunning());\n     assertEquals(1, process.getNumIdleClient());\n-    assertEquals(1, process.referenceCount());\n+    assertEquals(2, process.referenceCount());\n \n     intpA.interpret(\"1\",\n         new InterpreterContext(\n@@ -144,7 +156,8 @@ public void testRemoteInterperterErrorStatus() throws TTransportException, IOExc\n \n     RemoteInterpreter intpA = createMockInterpreterA(p);\n \n-    intpGroup.add(intpA);\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n+    intpGroup.get(\"note\").add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n \n     intpA.open();\n@@ -167,9 +180,11 @@ public void testRemoteInterperterErrorStatus() throws TTransportException, IOExc\n   @Test\n   public void testRemoteSchedulerSharing() throws TTransportException, IOException {\n     Properties p = new Properties();\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n \n     RemoteInterpreter intpA = new RemoteInterpreter(\n         p,\n+        \"note\",\n         MockInterpreterA.class.getName(),\n         new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n         \"fake\",\n@@ -178,11 +193,13 @@ public void testRemoteSchedulerSharing() throws TTransportException, IOException\n         10 * 1000,\n         null);\n \n-    intpGroup.add(intpA);\n+\n+    intpGroup.get(\"note\").add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n \n     RemoteInterpreter intpB = new RemoteInterpreter(\n         p,\n+        \"note\",\n         MockInterpreterB.class.getName(),\n         new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n         \"fake\",\n@@ -191,7 +208,7 @@ public void testRemoteSchedulerSharing() throws TTransportException, IOException\n         10 * 1000,\n         null);\n \n-    intpGroup.add(intpB);\n+    intpGroup.get(\"note\").add(intpB);\n     intpB.setInterpreterGroup(intpGroup);\n \n     intpA.open();\n@@ -236,15 +253,16 @@ public void testRemoteSchedulerSharing() throws TTransportException, IOException\n   @Test\n   public void testRemoteSchedulerSharingSubmit() throws TTransportException, IOException, InterruptedException {\n     Properties p = new Properties();\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n \n     final RemoteInterpreter intpA = createMockInterpreterA(p);\n \n-    intpGroup.add(intpA);\n+    intpGroup.get(\"note\").add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n \n     final RemoteInterpreter intpB = createMockInterpreterB(p);\n \n-    intpGroup.add(intpB);\n+    intpGroup.get(\"note\").add(intpB);\n     intpB.setInterpreterGroup(intpGroup);\n \n     intpA.open();\n@@ -322,13 +340,11 @@ protected boolean jobAbort() {\n \n     };\n     intpB.getScheduler().submit(jobB);\n-\n     // wait until both job finished\n     while (jobA.getStatus() != Status.FINISHED ||\n            jobB.getStatus() != Status.FINISHED) {\n       Thread.sleep(100);\n     }\n-\n     long end = System.currentTimeMillis();\n     assertTrue(end - start >= 1000);\n \n@@ -341,10 +357,11 @@ protected boolean jobAbort() {\n   @Test\n   public void testRunOrderPreserved() throws InterruptedException {\n     Properties p = new Properties();\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n \n     final RemoteInterpreter intpA = createMockInterpreterA(p);\n \n-    intpGroup.add(intpA);\n+    intpGroup.get(\"note\").add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n \n     intpA.open();\n@@ -417,10 +434,11 @@ protected boolean jobAbort() {\n   public void testRunParallel() throws InterruptedException {\n     Properties p = new Properties();\n     p.put(\"parallel\", \"true\");\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n \n     final RemoteInterpreter intpA = createMockInterpreterA(p);\n \n-    intpGroup.add(intpA);\n+    intpGroup.get(\"note\").add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n \n     intpA.open();\n@@ -507,6 +525,7 @@ public void testInterpreterGroupResetBeforeProcessStarts() {\n   @Test\n   public void testInterpreterGroupResetAfterProcessFinished() {\n     Properties p = new Properties();\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n \n     RemoteInterpreter intpA = createMockInterpreterA(p);\n \n@@ -525,10 +544,11 @@ public void testInterpreterGroupResetAfterProcessFinished() {\n   @Test\n   public void testInterpreterGroupResetDuringProcessRunning() throws InterruptedException {\n     Properties p = new Properties();\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n \n     final RemoteInterpreter intpA = createMockInterpreterA(p);\n \n-    intpGroup.add(intpA);\n+    intpGroup.get(\"note\").add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n \n     intpA.open();\n@@ -577,7 +597,12 @@ protected boolean jobAbort() {\n     // restart interpreter\n     RemoteInterpreterProcess processA = intpA.getInterpreterProcess();\n     intpA.close();\n-    intpA.setInterpreterGroup(new InterpreterGroup(intpA.getInterpreterGroup().getId()));\n+\n+    InterpreterGroup newInterpreterGroup =\n+        new InterpreterGroup(intpA.getInterpreterGroup().getId());\n+    newInterpreterGroup.put(\"note\", new LinkedList<Interpreter>());\n+\n+    intpA.setInterpreterGroup(newInterpreterGroup);\n     intpA.open();\n     RemoteInterpreterProcess processB = intpA.getInterpreterProcess();\n \n@@ -588,20 +613,55 @@ protected boolean jobAbort() {\n   @Test\n   public void testRemoteInterpreterSharesTheSameSchedulerInstanceInTheSameGroup() {\n     Properties p = new Properties();\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n \n     RemoteInterpreter intpA = createMockInterpreterA(p);\n \n-    intpGroup.add(intpA);\n+    intpGroup.get(\"note\").add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n \n     RemoteInterpreter intpB = createMockInterpreterB(p);\n \n-    intpGroup.add(intpB);\n+    intpGroup.get(\"note\").add(intpB);\n     intpB.setInterpreterGroup(intpGroup);\n \n     intpA.open();\n     intpB.open();\n \n     assertEquals(intpA.getScheduler(), intpB.getScheduler());\n   }\n+\n+  @Test\n+  public void testMultiInterpreterSession() {\n+    Properties p = new Properties();\n+    intpGroup.put(\"sessionA\", new LinkedList<Interpreter>());\n+    intpGroup.put(\"sessionB\", new LinkedList<Interpreter>());\n+\n+    RemoteInterpreter intpAsessionA = createMockInterpreterA(p, \"sessionA\");\n+    intpGroup.get(\"sessionA\").add(intpAsessionA);\n+    intpAsessionA.setInterpreterGroup(intpGroup);\n+\n+    RemoteInterpreter intpBsessionA = createMockInterpreterB(p, \"sessionA\");\n+    intpGroup.get(\"sessionA\").add(intpBsessionA);\n+    intpBsessionA.setInterpreterGroup(intpGroup);\n+\n+    intpAsessionA.open();\n+    intpBsessionA.open();\n+\n+    assertEquals(intpAsessionA.getScheduler(), intpBsessionA.getScheduler());\n+\n+    RemoteInterpreter intpAsessionB = createMockInterpreterA(p, \"sessionB\");\n+    intpGroup.get(\"sessionB\").add(intpAsessionB);\n+    intpAsessionB.setInterpreterGroup(intpGroup);\n+\n+    RemoteInterpreter intpBsessionB = createMockInterpreterB(p, \"sessionB\");\n+    intpGroup.get(\"sessionB\").add(intpBsessionB);\n+    intpBsessionB.setInterpreterGroup(intpGroup);\n+\n+    intpAsessionB.open();\n+    intpBsessionB.open();\n+\n+    assertEquals(intpAsessionB.getScheduler(), intpBsessionB.getScheduler());\n+    assertNotEquals(intpAsessionA.getScheduler(), intpAsessionB.getScheduler());\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java",
                "sha": "182b7a2a9c23e7457a38e11d67eda16d29c1eb27",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterB.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterB.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 12,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterB.java",
                "patch": "@@ -91,27 +91,41 @@ public int getProgress(InterpreterContext context) {\n \n   public MockInterpreterA getInterpreterA() {\n     InterpreterGroup interpreterGroup = getInterpreterGroup();\n-    for (Interpreter intp : interpreterGroup) {\n-      if (intp.getClassName().equals(MockInterpreterA.class.getName())) {\n-        Interpreter p = intp;\n-        while (p instanceof WrappedInterpreter) {\n-          p = ((WrappedInterpreter) p).getInnerInterpreter();\n+    synchronized (interpreterGroup) {\n+      for (List<Interpreter> interpreters : interpreterGroup.values()) {\n+        boolean belongsToSameNoteGroup = false;\n+        MockInterpreterA a = null;\n+        for (Interpreter intp : interpreters) {\n+          if (intp.getClassName().equals(MockInterpreterA.class.getName())) {\n+            Interpreter p = intp;\n+            while (p instanceof WrappedInterpreter) {\n+              p = ((WrappedInterpreter) p).getInnerInterpreter();\n+            }\n+            a = (MockInterpreterA) p;\n+          }\n+\n+          Interpreter p = intp;\n+          while (p instanceof WrappedInterpreter) {\n+            p = ((WrappedInterpreter) p).getInnerInterpreter();\n+          }\n+          if (this == p) {\n+            belongsToSameNoteGroup = true;\n+          }\n+        }\n+        if (belongsToSameNoteGroup) {\n+          return a;\n         }\n-        return (MockInterpreterA) p;\n       }\n     }\n     return null;\n   }\n \n   @Override\n   public Scheduler getScheduler() {\n-    InterpreterGroup interpreterGroup = getInterpreterGroup();\n-    for (Interpreter intp : interpreterGroup) {\n-      if (intp.getClassName().equals(MockInterpreterA.class.getName())) {\n-        return intp.getScheduler();\n-      }\n+    MockInterpreterA intpA = getInterpreterA();\n+    if (intpA != null) {\n+      return intpA.getScheduler();\n     }\n-\n     return null;\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterB.java",
                "sha": "fa6ff7e69a117c8bd647275b712f8c8f078046a8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 2,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java",
                "patch": "@@ -58,6 +58,7 @@ public void setUp() throws Exception {\n \n     intp1 = new RemoteInterpreter(\n         p,\n+        \"note\",\n         MockInterpreterResourcePool.class.getName(),\n         new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n         \"fake\",\n@@ -68,11 +69,13 @@ public void setUp() throws Exception {\n     );\n \n     intpGroup1 = new InterpreterGroup(\"intpGroup1\");\n-    intpGroup1.add(intp1);\n+    intpGroup1.put(\"note\", new LinkedList<Interpreter>());\n+    intpGroup1.get(\"note\").add(intp1);\n     intp1.setInterpreterGroup(intpGroup1);\n \n     intp2 = new RemoteInterpreter(\n         p,\n+        \"note\",\n         MockInterpreterResourcePool.class.getName(),\n         new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n         \"fake\",\n@@ -83,7 +86,8 @@ public void setUp() throws Exception {\n     );\n \n     intpGroup2 = new InterpreterGroup(\"intpGroup2\");\n-    intpGroup2.add(intp2);\n+    intpGroup2.put(\"note\", new LinkedList<Interpreter>());\n+    intpGroup2.get(\"note\").add(intp2);\n     intp2.setInterpreterGroup(intpGroup2);\n \n     context = new InterpreterContext(",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java",
                "sha": "a99fde2a4a341d4ae87171ee6d0382d7a565b80a",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 4,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.zeppelin.display.AngularObjectRegistry;\n import org.apache.zeppelin.user.AuthenticationInfo;\n import org.apache.zeppelin.display.GUI;\n+import org.apache.zeppelin.interpreter.Interpreter;\n import org.apache.zeppelin.interpreter.InterpreterContext;\n import org.apache.zeppelin.interpreter.InterpreterContextRunner;\n import org.apache.zeppelin.interpreter.InterpreterGroup;\n@@ -68,6 +69,7 @@ public void test() throws Exception {\n \n     final RemoteInterpreter intpA = new RemoteInterpreter(\n         p,\n+        \"note\",\n         MockInterpreterA.class.getName(),\n         new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n         \"fake\",\n@@ -76,12 +78,13 @@ public void test() throws Exception {\n         10 * 1000,\n         this);\n \n-    intpGroup.add(intpA);\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n+    intpGroup.get(\"note\").add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n \n     intpA.open();\n \n-    Scheduler scheduler = schedulerSvc.createOrGetRemoteScheduler(\"test\",\n+    Scheduler scheduler = schedulerSvc.createOrGetRemoteScheduler(\"test\", \"note\",\n         intpA.getInterpreterProcess(),\n         10);\n \n@@ -154,6 +157,7 @@ public void testAbortOnPending() throws Exception {\n \n     final RemoteInterpreter intpA = new RemoteInterpreter(\n         p,\n+        \"note\",\n         MockInterpreterA.class.getName(),\n         new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n         \"fake\",\n@@ -162,12 +166,13 @@ public void testAbortOnPending() throws Exception {\n         10 * 1000,\n         this);\n \n-    intpGroup.add(intpA);\n+    intpGroup.put(\"note\", new LinkedList<Interpreter>());\n+    intpGroup.get(\"note\").add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n \n     intpA.open();\n \n-    Scheduler scheduler = schedulerSvc.createOrGetRemoteScheduler(\"test\",\n+    Scheduler scheduler = schedulerSvc.createOrGetRemoteScheduler(\"test\", \"note\",\n         intpA.getInterpreterProcess(),\n         10);\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "sha": "9ce7a65a6a4c10337834b2f29fae2967b254a246",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 4,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "patch": "@@ -94,11 +94,10 @@ public Response newSettings(String message) {\n           NewInterpreterSettingRequest.class);\n       Properties p = new Properties();\n       p.putAll(request.getProperties());\n-      // Option is deprecated from API, always use remote = true\n       InterpreterGroup interpreterGroup = interpreterFactory.add(request.getName(),\n           request.getGroup(),\n           request.getDependencies(),\n-          new InterpreterOption(true),\n+          request.getOption(),\n           p);\n       InterpreterSetting setting = interpreterFactory.get(interpreterGroup.getId());\n       logger.info(\"new setting created with {}\", setting.id());\n@@ -126,9 +125,8 @@ public Response updateSetting(String message, @PathParam(\"settingId\") String set\n     try {\n       UpdateInterpreterSettingRequest request = gson.fromJson(message,\n           UpdateInterpreterSettingRequest.class);\n-      // Option is deprecated from API, always use remote = true\n       interpreterFactory.setPropertyAndRestart(settingId,\n-          new InterpreterOption(true),\n+          request.getOption(),\n           request.getProperties(),\n           request.getDependencies());\n     } catch (InterpreterException e) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "sha": "5bf42b409ad25c63523ce178dbd13505dc07601f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 2,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "patch": "@@ -165,7 +165,7 @@ public Response bind(@PathParam(\"noteId\") String noteId) {\n           setting.id(),\n           setting.getName(),\n           setting.getGroup(),\n-          setting.getInterpreterGroup(),\n+          setting.getInterpreterInfos(),\n           true)\n       );\n     }\n@@ -185,7 +185,7 @@ public Response bind(@PathParam(\"noteId\") String noteId) {\n             setting.id(),\n             setting.getName(),\n             setting.getGroup(),\n-            setting.getInterpreterGroup(),\n+            setting.getInterpreterInfos(),\n             false)\n         );\n       }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "sha": "2459af8a075fa76a3cd884f17390e3ae1a22702b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/InterpreterSettingListForNoteBind.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/InterpreterSettingListForNoteBind.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 4,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/InterpreterSettingListForNoteBind.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.List;\n \n import org.apache.zeppelin.interpreter.Interpreter;\n+import org.apache.zeppelin.interpreter.InterpreterSetting;\n \n /**\n  * InterpreterSetting information for binding\n@@ -29,10 +30,12 @@\n   String name;\n   String group;\n   private boolean selected;\n-  private List<Interpreter> interpreters;\n+  private List<InterpreterSetting.InterpreterInfo> interpreters;\n \n   public InterpreterSettingListForNoteBind(String id, String name,\n-      String group, List<Interpreter> interpreters, boolean selected) {\n+                                           String group,\n+                                           List<InterpreterSetting.InterpreterInfo> interpreters,\n+                                           boolean selected) {\n     super();\n     this.id = id;\n     this.name = name;\n@@ -65,11 +68,11 @@ public void setGroup(String group) {\n     this.group = group;\n   }\n \n-  public List<Interpreter> getInterpreterNames() {\n+  public List<InterpreterSetting.InterpreterInfo> getInterpreterNames() {\n     return interpreters;\n   }\n \n-  public void setInterpreterNames(List<Interpreter> interpreters) {\n+  public void setInterpreterNames(List<InterpreterSetting.InterpreterInfo> interpreters) {\n     this.interpreters = interpreters;\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/InterpreterSettingListForNoteBind.java",
                "sha": "e0ddacbbf92895974e46f14726b2a23766f9d2e0",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/NewInterpreterSettingRequest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/NewInterpreterSettingRequest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 1,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/NewInterpreterSettingRequest.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Map;\n \n import org.apache.zeppelin.dep.Dependency;\n+import org.apache.zeppelin.interpreter.InterpreterOption;\n \n /**\n  *  NewInterpreterSetting rest api request message\n@@ -29,9 +30,10 @@\n public class NewInterpreterSettingRequest {\n   String name;\n   String group;\n-  // option was deprecated\n+\n   Map<String, String> properties;\n   List<Dependency> dependencies;\n+  InterpreterOption option;\n \n   public NewInterpreterSettingRequest() {\n \n@@ -52,4 +54,8 @@ public String getGroup() {\n   public List<Dependency> getDependencies() {\n     return dependencies;\n   }\n+\n+  public InterpreterOption getOption() {\n+    return option;\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/NewInterpreterSettingRequest.java",
                "sha": "a559fb53e875a4bba210e0d174fccba10a9d18a0",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/UpdateInterpreterSettingRequest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/UpdateInterpreterSettingRequest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 2,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/UpdateInterpreterSettingRequest.java",
                "patch": "@@ -21,19 +21,21 @@\n import java.util.Properties;\n \n import org.apache.zeppelin.dep.Dependency;\n+import org.apache.zeppelin.interpreter.InterpreterOption;\n \n /**\n  * UpdateInterpreterSetting rest api request message\n  */\n public class UpdateInterpreterSettingRequest {\n-  // option was deprecated\n   Properties properties;\n   List<Dependency> dependencies;\n+  InterpreterOption option;\n \n   public UpdateInterpreterSettingRequest(Properties properties,\n-      List<Dependency> dependencies) {\n+      List<Dependency> dependencies, InterpreterOption option) {\n     this.properties = properties;\n     this.dependencies = dependencies;\n+    this.option = option;\n   }\n \n   public Properties getProperties() {\n@@ -43,4 +45,8 @@ public Properties getProperties() {\n   public List<Dependency> getDependencies() {\n     return dependencies;\n   }\n+\n+  public InterpreterOption getOption() {\n+    return option;\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/UpdateInterpreterSettingRequest.java",
                "sha": "c2deeff602f0cabba88cf43200b4306da1f75097",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonExclusionStrategy.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonExclusionStrategy.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 4,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonExclusionStrategy.java",
                "patch": "@@ -23,17 +23,14 @@\n \n /**\n  * Created by eranw on 8/30/15.\n- * Omit InterpreterOption from serialization\n  */\n public class JsonExclusionStrategy implements ExclusionStrategy {\n \n   public boolean shouldSkipClass(Class<?> arg0) {\n-    //exclude only InterpreterOption\n-    return InterpreterOption.class.equals(arg0);\n+    return false;\n   }\n \n   public boolean shouldSkipField(FieldAttributes f) {\n-\n     return false;\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonExclusionStrategy.java",
                "sha": "1eec8f3a905f774a2a139b3202ba541e013463b8",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonResponse.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonResponse.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 3,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonResponse.java",
                "patch": "@@ -23,10 +23,11 @@\n import javax.ws.rs.core.Response.ResponseBuilder;\n \n import org.apache.zeppelin.interpreter.Interpreter;\n-import org.apache.zeppelin.interpreter.InterpreterSerializer;\n+import org.apache.zeppelin.interpreter.InterpreterInfoSerializer;\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import org.apache.zeppelin.interpreter.InterpreterSetting;\n \n /**\n  * Json response builder.\n@@ -98,8 +99,9 @@ public JsonResponse(javax.ws.rs.core.Response.Status status, String message, T b\n \n   @Override\n   public String toString() {\n-    GsonBuilder gsonBuilder = new GsonBuilder()\n-      .registerTypeAdapter(Interpreter.class, new InterpreterSerializer());\n+    GsonBuilder gsonBuilder = new GsonBuilder().registerTypeAdapter(\n+        InterpreterSetting.InterpreterInfo.class,\n+        new InterpreterInfoSerializer());\n     if (pretty) {\n       gsonBuilder.setPrettyPrinting();\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonResponse.java",
                "sha": "887d42ac631021e758d247d045e027a8e7ec20cf",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 2,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "patch": "@@ -90,7 +90,8 @@ public void testSettingsCRUD() throws IOException {\n     // Call Create Setting REST API\n     String jsonRequest = \"{\\\"name\\\":\\\"md2\\\",\\\"group\\\":\\\"md\\\",\\\"properties\\\":{\\\"propname\\\":\\\"propvalue\\\"},\" +\n         \"\\\"interpreterGroup\\\":[{\\\"class\\\":\\\"org.apache.zeppelin.markdown.Markdown\\\",\\\"name\\\":\\\"md\\\"}],\" +\n-        \"\\\"dependencies\\\":[]}\";\n+        \"\\\"dependencies\\\":[],\" +\n+        \"\\\"option\\\": { \\\"remote\\\": true, \\\"perNoteSession\\\": false }}\";\n     PostMethod post = httpPost(\"/interpreter/setting/\", jsonRequest);\n     LOG.info(\"testSettingCRUD create response\\n\" + post.getResponseBodyAsString());\n     assertThat(\"test create method:\", post, isCreated());\n@@ -105,7 +106,8 @@ public void testSettingsCRUD() throws IOException {\n     // Call Update Setting REST API\n     jsonRequest = \"{\\\"name\\\":\\\"md2\\\",\\\"group\\\":\\\"md\\\",\\\"properties\\\":{\\\"propname\\\":\\\"Otherpropvalue\\\"},\" +\n         \"\\\"interpreterGroup\\\":[{\\\"class\\\":\\\"org.apache.zeppelin.markdown.Markdown\\\",\\\"name\\\":\\\"md\\\"}],\" +\n-        \"\\\"dependencies\\\":[]}\";\n+        \"\\\"dependencies\\\":[],\" +\n+        \"\\\"option\\\": { \\\"remote\\\": true, \\\"perNoteSession\\\": false }}\";\n     PutMethod put = httpPut(\"/interpreter/setting/\" + newSettingId, jsonRequest);\n     LOG.info(\"testSettingCRUD update response\\n\" + put.getResponseBodyAsString());\n     assertThat(\"test update method:\", put, isAllowed());",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java",
                "sha": "3862717c36d3d9d9d6f573dc8ea0a945c13bf8b4",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 5,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.zeppelin.interpreter.InterpreterSetting;\n import org.apache.zeppelin.notebook.Note;\n import org.apache.zeppelin.notebook.Notebook;\n+import org.apache.zeppelin.notebook.Paragraph;\n import org.apache.zeppelin.rest.AbstractTestRestApi;\n import org.apache.zeppelin.server.ZeppelinServer;\n import org.apache.zeppelin.socket.Message.OP;\n@@ -86,14 +87,17 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr\n     InterpreterGroup interpreterGroup = null;\n     List<InterpreterSetting> settings = note1.getNoteReplLoader().getInterpreterSettings();\n     for (InterpreterSetting setting : settings) {\n-      if (setting.getInterpreterGroup() == null) {\n-        continue;\n+      if (setting.getName().equals(\"md\")) {\n+        interpreterGroup = setting.getInterpreterGroup();\n+        break;\n       }\n-\n-      interpreterGroup = setting.getInterpreterGroup();\n-      break;\n     }\n \n+    // start interpreter process\n+    Paragraph p1 = note1.addParagraph();\n+    p1.setText(\"%md start remote interpreter process\");\n+    note1.run(p1.getId());\n+\n     // add angularObject\n     interpreterGroup.getAngularObjectRegistry().add(\"object1\", \"value1\", note1.getId(), null);\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java",
                "sha": "15d88265f2b92879da50dc42e6a46190fd1018f6",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html",
                "patch": "@@ -35,6 +35,11 @@ <h4>Create new interpreter</h4>\n           </select>\n         </div>\n \n+        <b>Option</b>\n+        <div class=\"checkbox\">\n+          <label><input type=\"checkbox\" style=\"top:-5px\" ng-model=\"newInterpreterSetting.option.perNoteSession\">Separate Interpreter for each note</input></label>\n+        </div>\n+        \n         <b>Properties</b>\n         <table class=\"table table-striped properties\">\n           <tr>",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-web/src/app/interpreter/interpreter-create/interpreter-create.html",
                "sha": "f7769b4cc4076db36de3a2054042a0704cb7422f",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter.controller.js?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 1,
                "filename": "zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "patch": "@@ -72,7 +72,17 @@ angular.module('zeppelinWebApp').controller('InterpreterCtrl', function($scope,\n         $scope.addNewInterpreterDependency(settingId);\n       }\n \n+      // add missing field of option\n+      if (!setting.option) {\n+        setting.option = {};\n+      }      \n+      if (setting.option.remote === undefined) {\n+        // remote always true for now\n+        setting.option.remote = true;\n+      }\n+\n       var request = {\n+        option: angular.copy(setting.option),\n         properties: angular.copy(setting.properties),\n         dependencies: angular.copy(setting.dependencies)\n       };\n@@ -214,7 +224,11 @@ angular.module('zeppelinWebApp').controller('InterpreterCtrl', function($scope,\n       name: undefined,\n       group: undefined,\n       properties: {},\n-      dependencies: []\n+      dependencies: [],\n+      option: {\n+        remote: true,\n+        perNoteSession: false\n+      }\n     };\n     emptyNewProperty($scope.newInterpreterSetting);\n   };",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-web/src/app/interpreter/interpreter.controller.js",
                "sha": "ab660330654bf0bc6e9a8e11b2f9068c4866bf8f",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-web/src/app/interpreter/interpreter.html",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/interpreter/interpreter.html?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/interpreter/interpreter.html",
                "patch": "@@ -109,6 +109,19 @@ <h3 class=\"interpreter-title\">{{setting.name}}\n       </div>\n     </div>\n     <div class=\"row interpreter\">\n+      <div class=\"col-md-12\">\n+        <h5>Option</h5>\n+        <div class=\"checkbox\">\n+          <label>\n+            <input type=\"checkbox\"\n+                   style=\"top:-5px\"\n+                   ng-disabled=\"!valueform.$visible\"\n+                   ng-model=\"setting.option.perNoteSession\">\n+            Separate Interpreter for each note</input>\n+          </label>\n+        </div>\n+      </div>\n+      \n       <div ng-show=\"_.isEmpty(setting.properties) && _.isEmpty(setting.dependencies) || valueform.$hidden\" class=\"col-md-12 gray40-message\">\n         <em>Currently there are no properties and dependencies set for this interpreter</em>\n       </div>",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-web/src/app/interpreter/interpreter.html",
                "sha": "c30ad612f49289e00550bce3b21158b380429429",
                "status": "modified"
            },
            {
                "additions": 127,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "changes": 170,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 43,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "patch": "@@ -51,7 +51,6 @@\n \n /**\n  * Manage interpreters.\n- *\n  */\n public class InterpreterFactory {\n   Logger logger = LoggerFactory.getLogger(InterpreterFactory.class);\n@@ -103,7 +102,8 @@ public InterpreterFactory(ZeppelinConfiguration conf, InterpreterOption defaultO\n \n     GsonBuilder builder = new GsonBuilder();\n     builder.setPrettyPrinting();\n-    builder.registerTypeAdapter(Interpreter.class, new InterpreterSerializer());\n+    builder.registerTypeAdapter(\n+        InterpreterSetting.InterpreterInfo.class, new InterpreterInfoSerializer());\n     gson = builder.create();\n \n     init();\n@@ -197,16 +197,14 @@ private void init() throws InterpreterException, IOException, RepositoryExceptio\n       InterpreterSetting setting = interpreterSettings.get(settingId);\n       logger.info(\"Interpreter setting group {} : id={}, name={}\",\n           setting.getGroup(), settingId, setting.getName());\n-      for (Interpreter interpreter : setting.getInterpreterGroup()) {\n-        logger.info(\" className = {}\", interpreter.getClassName());\n-      }\n     }\n   }\n \n   private void loadFromFile() throws IOException {\n     GsonBuilder builder = new GsonBuilder();\n     builder.setPrettyPrinting();\n-    builder.registerTypeAdapter(Interpreter.class, new InterpreterSerializer());\n+    builder.registerTypeAdapter(\n+        InterpreterSetting.InterpreterInfo.class, new InterpreterInfoSerializer());\n     Gson gson = builder.create();\n \n     File settingFile = new File(conf.getInterpreterSettingPath());\n@@ -241,14 +239,12 @@ private void loadFromFile() throws IOException {\n           setting.id(),\n           setting.getName(),\n           setting.getGroup(),\n+          setting.getInterpreterInfos(),\n+          setting.getProperties(),\n           setting.getDependencies(),\n           setting.getOption());\n \n-      InterpreterGroup interpreterGroup = createInterpreterGroup(\n-          setting.id(),\n-          setting.getGroup(),\n-          setting.getOption(),\n-          setting.getProperties());\n+      InterpreterGroup interpreterGroup = createInterpreterGroup(setting.id(), setting.getOption());\n       intpSetting.setInterpreterGroup(interpreterGroup);\n \n       interpreterSettings.put(k, intpSetting);\n@@ -380,18 +376,35 @@ public InterpreterGroup add(String name, String groupName,\n       throws InterpreterException, IOException, RepositoryException {\n     synchronized (interpreterSettings) {\n \n+      List<InterpreterSetting.InterpreterInfo> interpreterInfos =\n+          new LinkedList<InterpreterSetting.InterpreterInfo>();\n+\n+      for (RegisteredInterpreter registeredInterpreter :\n+          Interpreter.registeredInterpreters.values()) {\n+        if (registeredInterpreter.getGroup().equals(groupName)) {\n+          for (String className : interpreterClassList) {\n+            if (registeredInterpreter.getClassName().equals(className)) {\n+              interpreterInfos.add(\n+                  new InterpreterSetting.InterpreterInfo(\n+                      className, registeredInterpreter.getName()));\n+            }\n+          }\n+        }\n+      }\n+\n       InterpreterSetting intpSetting = new InterpreterSetting(\n           name,\n           groupName,\n+          interpreterInfos,\n+          properties,\n           dependencies,\n           option);\n \n       if (dependencies.size() > 0) {\n         loadInterpreterDependencies(intpSetting);\n       }\n \n-      InterpreterGroup interpreterGroup = createInterpreterGroup(\n-          intpSetting.id(), groupName, option, properties);\n+      InterpreterGroup interpreterGroup = createInterpreterGroup(intpSetting.id(), option);\n \n       intpSetting.setInterpreterGroup(interpreterGroup);\n \n@@ -401,18 +414,12 @@ public InterpreterGroup add(String name, String groupName,\n     }\n   }\n \n-  private InterpreterGroup createInterpreterGroup(String id,\n-      String groupName,\n-      InterpreterOption option,\n-      Properties properties)\n+  private InterpreterGroup createInterpreterGroup(String id, InterpreterOption option)\n       throws InterpreterException, NullArgumentException {\n \n     //When called from REST API without option we receive NPE\n     if (option == null)\n       throw new NullArgumentException(\"option\");\n-    //When called from REST API without option we receive NPE\n-    if (properties == null)\n-      throw new NullArgumentException(\"properties\");\n \n     AngularObjectRegistry angularObjectRegistry;\n \n@@ -430,19 +437,68 @@ private InterpreterGroup createInterpreterGroup(String id,\n     }\n \n     interpreterGroup.setAngularObjectRegistry(angularObjectRegistry);\n+    return interpreterGroup;\n+  }\n+\n+  public void removeInterpretersForNote(InterpreterSetting interpreterSetting,\n+                                        String noteId) {\n+    if (!interpreterSetting.getOption().isPerNoteSession()) {\n+      return;\n+    }\n+    InterpreterGroup interpreterGroup = interpreterSetting.getInterpreterGroup();\n+    interpreterGroup.close(noteId);\n+    interpreterGroup.destroy(noteId);\n+    synchronized (interpreterGroup) {\n+      interpreterGroup.remove(noteId);\n+      interpreterGroup.notifyAll(); // notify createInterpreterForNote()\n+    }\n+    logger.info(\"Interpreter instance {} for note {} is removed\",\n+        interpreterSetting.getName(),\n+        noteId);\n+  }\n+\n+  public void createInterpretersForNote(\n+      InterpreterSetting interpreterSetting,\n+      String noteId) {\n+    InterpreterGroup interpreterGroup = interpreterSetting.getInterpreterGroup();\n+    String groupName = interpreterSetting.getGroup();\n+    InterpreterOption option = interpreterSetting.getOption();\n+    Properties properties = interpreterSetting.getProperties();\n+\n+    // if interpreters are already there, wait until they're being removed\n+    synchronized (interpreterGroup) {\n+      long interpreterRemovalWaitStart = System.nanoTime();\n+      // interpreter process supposed to be terminated by RemoteInterpreterProcess.dereference()\n+      // in ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT msec. However, if termination of the process and\n+      // removal from interpreter group take too long, throw an error.\n+      long minTimeout = 10 * 1000 * 1000000; // 10 sec\n+      long interpreterRemovalWaitTimeout =\n+          Math.max(minTimeout, conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT) * 2);\n+      while (interpreterGroup.containsKey(noteId)) {\n+        if (System.nanoTime() - interpreterRemovalWaitStart > interpreterRemovalWaitTimeout) {\n+          throw new InterpreterException(\"Can not create interpreter\");\n+        }\n+        try {\n+          interpreterGroup.wait(1000);\n+        } catch (InterruptedException e) {\n+          logger.debug(e.getMessage(), e);\n+        }\n+      }\n+    }\n \n+    logger.info(\"Create interpreter instance {} for note {}\", interpreterSetting.getName(), noteId);\n \n     for (String className : interpreterClassList) {\n       Set<String> keys = Interpreter.registeredInterpreters.keySet();\n       for (String intName : keys) {\n-        RegisteredInterpreter info = Interpreter.registeredInterpreters\n-            .get(intName);\n+        RegisteredInterpreter info = Interpreter.registeredInterpreters.get(intName);\n         if (info.getClassName().equals(className)\n             && info.getGroup().equals(groupName)) {\n           Interpreter intp;\n \n           if (option.isRemote()) {\n             intp = createRemoteRepl(info.getPath(),\n+                noteId,\n                 info.getClassName(),\n                 properties,\n                 interpreterGroup.id);\n@@ -451,15 +507,25 @@ private InterpreterGroup createInterpreterGroup(String id,\n                 info.getClassName(),\n                 properties);\n           }\n-          interpreterGroup.add(intp);\n+\n+          synchronized (interpreterGroup) {\n+            List<Interpreter> interpreters = interpreterGroup.get(noteId);\n+            if (interpreters == null) {\n+              interpreters = new LinkedList<Interpreter>();\n+              interpreterGroup.put(noteId, interpreters);\n+            }\n+            interpreters.add(intp);\n+          }\n+          logger.info(\"Interpreter \" + intp.getClassName() + \" \" + intp.hashCode() + \" created\");\n           intp.setInterpreterGroup(interpreterGroup);\n           break;\n         }\n       }\n     }\n-    return interpreterGroup;\n   }\n \n+\n+\n   public void remove(String id) throws IOException {\n     synchronized (interpreterSettings) {\n       if (interpreterSettings.containsKey(id)) {\n@@ -486,7 +552,7 @@ public void remove(String id) throws IOException {\n   }\n \n   /**\n-   * Get loaded interpreters\n+   * Get interpreter settings\n    * @return\n    */\n   public List<InterpreterSetting> get() {\n@@ -508,8 +574,8 @@ public int compare(InterpreterSetting o1, InterpreterSetting o2) {\n               continue;\n             }\n           }\n+          for (InterpreterSetting.InterpreterInfo intp : setting.getInterpreterInfos()) {\n \n-          for (Interpreter intp : setting.getInterpreterGroup()) {\n             if (className.equals(intp.getClassName())) {\n               boolean alreadyAdded = false;\n               for (InterpreterSetting st : orderedSettings) {\n@@ -536,15 +602,33 @@ public InterpreterSetting get(String name) {\n \n   public void putNoteInterpreterSettingBinding(String noteId,\n       List<String> settingList) throws IOException {\n+    List<String> unBindedSettings = new LinkedList<String>();\n+\n     synchronized (interpreterSettings) {\n+      List<String> oldSettings = interpreterBindings.get(noteId);\n+      if (oldSettings != null) {\n+        for (String oldSettingId : oldSettings) {\n+          if (!settingList.contains(oldSettingId)) {\n+            unBindedSettings.add(oldSettingId);\n+          }\n+        }\n+      }\n       interpreterBindings.put(noteId, settingList);\n       saveToFile();\n+\n+      for (String settingId : unBindedSettings) {\n+        InterpreterSetting setting = get(settingId);\n+        removeInterpretersForNote(setting, noteId);\n+      }\n     }\n   }\n \n   public void removeNoteInterpreterSettingBinding(String noteId) {\n     synchronized (interpreterSettings) {\n-      interpreterBindings.remove(noteId);\n+      List<String> settingIds = interpreterBindings.remove(noteId);\n+      for (String settingId : settingIds) {\n+        this.removeInterpretersForNote(get(settingId), noteId);\n+      }\n     }\n   }\n \n@@ -582,9 +666,7 @@ public void setPropertyAndRestart(String id,\n         intpsetting.setOption(option);\n         intpsetting.setDependencies(dependencies);\n \n-        InterpreterGroup interpreterGroup = createInterpreterGroup(\n-            intpsetting.id(),\n-            intpsetting.getGroup(), option, properties);\n+        InterpreterGroup interpreterGroup = createInterpreterGroup(intpsetting.id(), option);\n         intpsetting.setInterpreterGroup(interpreterGroup);\n \n         loadInterpreterDependencies(intpsetting);\n@@ -608,7 +690,7 @@ public void restart(String id) {\n \n         InterpreterGroup interpreterGroup = createInterpreterGroup(\n             intpsetting.id(),\n-            intpsetting.getGroup(), intpsetting.getOption(), intpsetting.getProperties());\n+            intpsetting.getOption());\n         intpsetting.setInterpreterGroup(interpreterGroup);\n       } else {\n         throw new InterpreterException(\"Interpreter setting id \" + id\n@@ -619,16 +701,18 @@ public void restart(String id) {\n \n   private void stopJobAllInterpreter(InterpreterSetting intpsetting) {\n     if (intpsetting != null) {\n-      for (Interpreter intp : intpsetting.getInterpreterGroup()) {\n-        for (Job job : intp.getScheduler().getJobsRunning()) {\n-          job.abort();\n-          job.setStatus(Status.ABORT);\n-          logger.info(\"Job \" + job.getJobName() + \" aborted \");\n-        }\n-        for (Job job : intp.getScheduler().getJobsWaiting()) {\n-          job.abort();\n-          job.setStatus(Status.ABORT);\n-          logger.info(\"Job \" + job.getJobName() + \" aborted \");\n+      for (List<Interpreter> interpreters : intpsetting.getInterpreterGroup().values()) {\n+        for (Interpreter intp : interpreters) {\n+          for (Job job : intp.getScheduler().getJobsRunning()) {\n+            job.abort();\n+            job.setStatus(Status.ABORT);\n+            logger.info(\"Job \" + job.getJobName() + \" aborted \");\n+          }\n+          for (Job job : intp.getScheduler().getJobsWaiting()) {\n+            job.abort();\n+            job.setStatus(Status.ABORT);\n+            logger.info(\"Job \" + job.getJobName() + \" aborted \");\n+          }\n         }\n       }\n     }\n@@ -720,13 +804,13 @@ private Interpreter createRepl(String dirName, String className,\n   }\n \n \n-  private Interpreter createRemoteRepl(String interpreterPath, String className,\n+  private Interpreter createRemoteRepl(String interpreterPath, String noteId, String className,\n       Properties property, String interpreterId) {\n     int connectTimeout = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);\n     String localRepoPath = conf.getInterpreterLocalRepoPath() + \"/\" + interpreterId;\n     int maxPoolSize = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_MAX_POOL_SIZE);\n     LazyOpenInterpreter intp = new LazyOpenInterpreter(new RemoteInterpreter(\n-        property, className, conf.getInterpreterRemoteRunnerPath(),\n+        property, noteId, className, conf.getInterpreterRemoteRunnerPath(),\n         interpreterPath, localRepoPath, connectTimeout,\n         maxPoolSize, remoteInterpreterProcessListener));\n     return intp;",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "sha": "bf1377c5b8b8fd256dd8852844c63253c2f10740",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSerializer.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSerializer.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 11,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSerializer.java",
                "patch": "@@ -29,28 +29,30 @@\n \n \n /**\n- * Interpreter class serializer for gson\n+ * InterpreterInfo class serializer for gson\n  *\n  */\n-public class InterpreterSerializer implements JsonSerializer<Interpreter>,\n-  JsonDeserializer<Interpreter> {\n+public class InterpreterInfoSerializer\n+    implements JsonSerializer<InterpreterSetting.InterpreterInfo>,\n+    JsonDeserializer<InterpreterSetting.InterpreterInfo> {\n \n   @Override\n-  public JsonElement serialize(Interpreter interpreter, Type type,\n+  public JsonElement serialize(InterpreterSetting.InterpreterInfo interpreterInfo, Type type,\n       JsonSerializationContext context) {\n     JsonObject json = new JsonObject();\n-    json.addProperty(\"class\", interpreter.getClassName());\n-    json.addProperty(\n-        \"name\",\n-        Interpreter.findRegisteredInterpreterByClassName(\n-            interpreter.getClassName()).getName());\n+    json.addProperty(\"class\", interpreterInfo.getClassName());\n+    json.addProperty(\"name\", interpreterInfo.getName());\n     return json;\n   }\n \n   @Override\n-  public Interpreter deserialize(JsonElement json, Type typeOfT,\n+  public InterpreterSetting.InterpreterInfo deserialize(JsonElement json, Type typeOfT,\n       JsonDeserializationContext context) throws JsonParseException {\n-    return null;\n+    JsonObject jsonObject = json.getAsJsonObject();\n+    String className = jsonObject.get(\"class\").getAsString();\n+    String name = jsonObject.get(\"name\").getAsString();\n+\n+    return new InterpreterSetting.InterpreterInfo(className, name);\n   }\n \n }",
                "previous_filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSerializer.java",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSerializer.java",
                "sha": "5854983320d7c7a021aae5f2e919269d94576b46",
                "status": "renamed"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "patch": "@@ -22,6 +22,7 @@\n  */\n public class InterpreterOption {\n   boolean remote;\n+  boolean perNoteSession;\n \n   public InterpreterOption() {\n     remote = false;\n@@ -38,4 +39,12 @@ public boolean isRemote() {\n   public void setRemote(boolean remote) {\n     this.remote = remote;\n   }\n+\n+  public boolean isPerNoteSession() {\n+    return perNoteSession;\n+  }\n+\n+  public void setPerNoteSession(boolean perNoteSession) {\n+    this.perNoteSession = perNoteSession;\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java",
                "sha": "29a4748213f44ea88fbef5986b1002326ff30ed3",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 5,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "patch": "@@ -34,27 +34,59 @@\n   private String group;\n   private String description;\n   private Properties properties;\n-  private InterpreterGroup interpreterGroup;\n+\n+  // use 'interpreterGroup' as a field name to keep backward compatibility of\n+  // conf/interpreter.json file format\n+  private List<InterpreterInfo> interpreterGroup;\n+  private transient InterpreterGroup interpreterGroupRef;\n   private List<Dependency> dependencies;\n   private InterpreterOption option;\n \n   public InterpreterSetting(String id,\n       String name,\n       String group,\n+      List<InterpreterInfo> interpreterInfos,\n+      Properties properties,\n       List<Dependency> dependencies,\n       InterpreterOption option) {\n     this.id = id;\n     this.name = name;\n     this.group = group;\n+    this.interpreterGroup = interpreterInfos;\n+    this.properties = properties;\n     this.dependencies = dependencies;\n     this.option = option;\n   }\n \n   public InterpreterSetting(String name,\n       String group,\n+      List<InterpreterInfo> interpreterInfos,\n+      Properties properties,\n       List<Dependency> dependencies,\n       InterpreterOption option) {\n-    this(generateId(), name, group, dependencies, option);\n+    this(generateId(), name, group, interpreterInfos, properties, dependencies, option);\n+  }\n+\n+  /**\n+   * Information of interpreters in this interpreter setting.\n+   * this will be serialized for conf/interpreter.json and REST api response.\n+   */\n+  public static class InterpreterInfo {\n+    private final String name;\n+    private final String className;\n+\n+    public InterpreterInfo(String className, String name) {\n+      this.className = className;\n+      this.name = name;\n+    }\n+\n+    public String getName() {\n+      return name;\n+    }\n+\n+    public String getClassName() {\n+      return className;\n+    }\n   }\n \n   public String id() {\n@@ -86,12 +118,11 @@ public String getGroup() {\n   }\n \n   public InterpreterGroup getInterpreterGroup() {\n-    return interpreterGroup;\n+    return interpreterGroupRef;\n   }\n \n   public void setInterpreterGroup(InterpreterGroup interpreterGroup) {\n-    this.interpreterGroup = interpreterGroup;\n-    this.properties = interpreterGroup.getProperty();\n+    this.interpreterGroupRef = interpreterGroup;\n   }\n \n   public Properties getProperties() {\n@@ -120,4 +151,8 @@ public InterpreterOption getOption() {\n   public void setOption(InterpreterOption option) {\n     this.option = option;\n   }\n+\n+  public List<InterpreterInfo> getInterpreterInfos() {\n+    return interpreterGroup;\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "sha": "5c93e3a5bdd0137b8afc8794d9ba471bbde79aa2",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInterpreterLoader.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInterpreterLoader.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 26,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInterpreterLoader.java",
                "patch": "@@ -29,10 +29,11 @@\n import org.apache.zeppelin.interpreter.InterpreterSetting;\n \n /**\n- * Repl loader per note.\n+ * Interpreter loader per note.\n  */\n public class NoteInterpreterLoader {\n   private transient InterpreterFactory factory;\n+  private static String SHARED_SESSION = \"shared_session\";\n   String noteId;\n \n   public NoteInterpreterLoader(InterpreterFactory factory) {\n@@ -73,6 +74,37 @@ public void setInterpreters(List<String> ids) throws IOException {\n     return settings;\n   }\n \n+  private String getInterpreterGroupKey(InterpreterSetting setting) {\n+    if (!setting.getOption().isPerNoteSession()) {\n+      return SHARED_SESSION;\n+    } else {\n+      return noteId;\n+    }\n+  }\n+\n+  private List<Interpreter> createOrGetInterpreterList(InterpreterSetting setting) {\n+    InterpreterGroup interpreterGroup = setting.getInterpreterGroup();\n+    synchronized (interpreterGroup) {\n+      String key = getInterpreterGroupKey(setting);\n+      if (!interpreterGroup.containsKey(key)) {\n+        factory.createInterpretersForNote(setting, key);\n+      }\n+      return interpreterGroup.get(getInterpreterGroupKey(setting));\n+    }\n+  }\n+\n+  public void close() {\n+    // close interpreters in this note session\n+    List<InterpreterSetting> settings = this.getInterpreterSettings();\n+    if (settings == null || settings.size() == 0) {\n+      return;\n+    }\n+\n+    for (InterpreterSetting setting : settings) {\n+      factory.removeInterpretersForNote(setting, noteId);\n+    }\n+  }\n+\n   public Interpreter get(String replName) {\n     List<InterpreterSetting> settings = getInterpreterSettings();\n \n@@ -81,7 +113,9 @@ public Interpreter get(String replName) {\n     }\n \n     if (replName == null || replName.trim().length() == 0) {\n-      return settings.get(0).getInterpreterGroup().getFirst();\n+      // get default settings (first available)\n+      InterpreterSetting defaultSettings = settings.get(0);\n+      return createOrGetInterpreterList(defaultSettings).get(0);\n     }\n \n     if (Interpreter.registeredInterpreters == null) {\n@@ -104,43 +138,47 @@ public Interpreter get(String replName) {\n       String interpreterClassName = registeredInterpreter.getClassName();\n \n       for (InterpreterSetting setting : settings) {\n-        InterpreterGroup intpGroup = setting.getInterpreterGroup();\n-        for (Interpreter interpreter : intpGroup) {\n-          if (interpreterClassName.equals(interpreter.getClassName())) {\n-            return interpreter;\n+        if (registeredInterpreter.getGroup().equals(setting.getGroup())) {\n+          List<Interpreter> intpGroup = createOrGetInterpreterList(setting);\n+          for (Interpreter interpreter : intpGroup) {\n+            if (interpreterClassName.equals(interpreter.getClassName())) {\n+              return interpreter;\n+            }\n           }\n         }\n       }\n+      throw new InterpreterException(replName + \" interpreter not found\");\n     } else {\n       // first assume replName is 'name' of interpreter. ('groupName' is ommitted)\n       // search 'name' from first (default) interpreter group\n-      InterpreterGroup intpGroup = settings.get(0).getInterpreterGroup();\n-      for (Interpreter interpreter : intpGroup) {\n-        RegisteredInterpreter intp = Interpreter\n-            .findRegisteredInterpreterByClassName(interpreter.getClassName());\n-        if (intp == null) {\n-          continue;\n-        }\n+      InterpreterSetting defaultSetting = settings.get(0);\n+      Interpreter.RegisteredInterpreter registeredInterpreter =\n+          Interpreter.registeredInterpreters.get(defaultSetting.getGroup() + \".\" + replName);\n+      if (registeredInterpreter != null) {\n+        List<Interpreter> interpreters = createOrGetInterpreterList(defaultSetting);\n+        for (Interpreter interpreter : interpreters) {\n+\n+          RegisteredInterpreter intp =\n+              Interpreter.findRegisteredInterpreterByClassName(interpreter.getClassName());\n+          if (intp == null) {\n+            continue;\n+          }\n \n-        if (intp.getName().equals(replName)) {\n-          return interpreter;\n+          if (intp.getName().equals(replName)) {\n+            return interpreter;\n+          }\n         }\n-      }\n \n+        throw new InterpreterException(\n+            defaultSetting.getGroup() + \".\" + replName + \" interpreter not found\");\n+      }\n \n       // next, assume replName is 'group' of interpreter ('name' is ommitted)\n       // search interpreter group and return first interpreter.\n       for (InterpreterSetting setting : settings) {\n-        intpGroup = setting.getInterpreterGroup();\n-        Interpreter interpreter = intpGroup.get(0);\n-        RegisteredInterpreter intp = Interpreter\n-            .findRegisteredInterpreterByClassName(interpreter.getClassName());\n-        if (intp == null) {\n-          continue;\n-        }\n-\n-        if (intp.getGroup().equals(replName)) {\n-          return interpreter;\n+        if (setting.getGroup().equals(replName)) {\n+          List<Interpreter> interpreters = createOrGetInterpreterList(setting);\n+          return interpreters.get(0);\n         }\n       }\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInterpreterLoader.java",
                "sha": "4e7626b4fd9ded6ae2c7326e918b2b17096a1f7c",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -244,7 +244,8 @@ public void bindInterpretersToNote(String id,\n     Note note = getNote(id);\n     if (note != null) {\n       note.getNoteReplLoader().setInterpreters(interpreterSettingIds);\n-      replFactory.putNoteInterpreterSettingBinding(id, interpreterSettingIds);\n+      // comment out while note.getNoteReplLoader().setInterpreters(...) do the same\n+      // replFactory.putNoteInterpreterSettingBinding(id, interpreterSettingIds);\n     }\n   }\n \n@@ -278,6 +279,7 @@ public void removeNote(String id) {\n     synchronized (notes) {\n       note = notes.remove(id);\n     }\n+    replFactory.removeNoteInterpreterSettingBinding(id);\n     notebookIndex.deleteIndexDocs(note);\n \n     // remove from all interpreter instance's angular object registry",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "79482b81ad1f8389bc84c4325c62e3f950852ad5",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.zeppelin.resource.ResourcePool;\n import org.apache.zeppelin.scheduler.Job;\n import org.apache.zeppelin.scheduler.JobListener;\n+import org.apache.zeppelin.scheduler.Scheduler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -261,7 +262,17 @@ protected Object jobRun() throws Throwable {\n   @Override\n   protected boolean jobAbort() {\n     Interpreter repl = getRepl(getRequiredReplName());\n-    Job job = repl.getScheduler().removeFromWaitingQueue(getId());\n+    if (repl == null) {\n+      // when interpreters are already destroyed\n+      return true;\n+    }\n+\n+    Scheduler scheduler = repl.getScheduler();\n+    if (scheduler == null) {\n+      return true;\n+    }\n+\n+    Job job = scheduler.removeFromWaitingQueue(getId());\n     if (job != null) {\n       job.setStatus(Status.ABORT);\n     } else {",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "sha": "75d105f5ac2bc40b1583925082444231ddad421d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 14,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "patch": "@@ -22,8 +22,7 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n-import java.io.File;\n-import java.io.IOException;\n+import java.io.*;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Properties;\n@@ -87,9 +86,12 @@ else if(file.isDirectory()){\n   @Test\n   public void testBasic() {\n     List<String> all = factory.getDefaultInterpreterSettingList();\n+    InterpreterSetting setting = factory.get(all.get(0));\n+    InterpreterGroup interpreterGroup = setting.getInterpreterGroup();\n+    factory.createInterpretersForNote(setting, \"session\");\n \n     // get interpreter\n-    Interpreter repl1 = factory.get(all.get(0)).getInterpreterGroup().getFirst();\n+    Interpreter repl1 = interpreterGroup.get(\"session\").get(0);\n     assertFalse(((LazyOpenInterpreter) repl1).isOpen());\n     repl1.interpret(\"repl1\", context);\n     assertTrue(((LazyOpenInterpreter) repl1).isOpen());\n@@ -99,23 +101,14 @@ public void testBasic() {\n \n     // restart interpreter\n     factory.restart(all.get(0));\n-    repl1 = factory.get(all.get(0)).getInterpreterGroup().getFirst();\n-    assertFalse(((LazyOpenInterpreter) repl1).isOpen());\n+    assertNull(setting.getInterpreterGroup().get(\"session\"));\n   }\n \n   @Test\n   public void testFactoryDefaultList() throws IOException, RepositoryException {\n-    // get default list from default setting\n+    // get default settings\n     List<String> all = factory.getDefaultInterpreterSettingList();\n     assertEquals(2, all.size());\n-    assertEquals(factory.get(all.get(0)).getInterpreterGroup().getFirst().getClassName(), \"org.apache.zeppelin.interpreter.mock.MockInterpreter1\");\n-\n-    // add setting\n-    factory.add(\"a mock\", \"mock2\", new LinkedList<Dependency>(), new InterpreterOption(false), new Properties());\n-    all = factory.getDefaultInterpreterSettingList();\n-    assertEquals(2, all.size());\n-    assertEquals(\"mock1\", factory.get(all.get(0)).getName());\n-    assertEquals(\"a mock\", factory.get(all.get(1)).getName());\n   }\n \n   @Test",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "sha": "d215e7c41cd0eaa338007e3064a4c6d655c71eb0",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java",
                "patch": "@@ -45,7 +45,13 @@ public void close() {\n \n \t@Override\n \tpublic InterpreterResult interpret(String st, InterpreterContext context) {\n-\t\treturn new InterpreterResult(InterpreterResult.Code.SUCCESS, \"repl1: \"+st);\n+\n+\t\tif (\"getId\".equals(st)) {\n+\t\t\t// get unique id of this interpreter instance\n+\t\t\treturn new InterpreterResult(InterpreterResult.Code.SUCCESS, \"\" + this.hashCode());\n+\t\t} else {\n+\t\t\treturn new InterpreterResult(InterpreterResult.Code.SUCCESS, \"repl1: \" + st);\n+\t\t}\n \t}\n \n \t@Override",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java",
                "sha": "079846c0fe1a5d6674c145bd90e0ee7d5b942cf5",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java",
                "patch": "@@ -16,8 +16,6 @@\n  */\n package org.apache.zeppelin.notebook;\n \n-import static org.junit.Assert.assertEquals;\n-\n import java.io.File;\n import java.io.IOException;\n import java.util.Collections;\n@@ -36,6 +34,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n public class NoteInterpreterLoaderTest {\n \n   private File tmpDir;\n@@ -92,6 +92,43 @@ public void testGetInterpreter() throws IOException {\n     assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter1\", loader.get(\"group1.mock1\").getClassName());\n     assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter11\", loader.get(\"group1.mock11\").getClassName());\n     assertEquals(\"org.apache.zeppelin.interpreter.mock.MockInterpreter2\", loader.get(\"group2.mock2\").getClassName());\n+\n+    loader.close();\n+  }\n+\n+  @Test\n+  public void testNoteSession() throws IOException {\n+    NoteInterpreterLoader loaderA = new NoteInterpreterLoader(factory);\n+    loaderA.setNoteId(\"noteA\");\n+    loaderA.setInterpreters(factory.getDefaultInterpreterSettingList());\n+    loaderA.getInterpreterSettings().get(0).getOption().setPerNoteSession(true);\n+\n+    NoteInterpreterLoader loaderB = new NoteInterpreterLoader(factory);\n+    loaderB.setNoteId(\"noteB\");\n+    loaderB.setInterpreters(factory.getDefaultInterpreterSettingList());\n+    loaderB.getInterpreterSettings().get(0).getOption().setPerNoteSession(true);\n+\n+    // interpreters are not created before accessing it\n+    assertNull(loaderA.getInterpreterSettings().get(0).getInterpreterGroup().get(\"noteA\"));\n+    assertNull(loaderB.getInterpreterSettings().get(0).getInterpreterGroup().get(\"noteB\"));\n+\n+    // per note session interpreter instance in the same interpreter process\n+    assertTrue(\n+        loaderA.get(null).getInterpreterGroup().getRemoteInterpreterProcess() ==\n+        loaderB.get(null).getInterpreterGroup().getRemoteInterpreterProcess());\n+\n+    // interpreters are created after accessing it\n+    assertNotNull(loaderA.getInterpreterSettings().get(0).getInterpreterGroup().get(\"noteA\"));\n+    assertNotNull(loaderB.getInterpreterSettings().get(0).getInterpreterGroup().get(\"noteB\"));\n+\n+    // when\n+    loaderA.close();\n+    loaderB.close();\n+\n+    // interpreters are destroyed after close\n+    assertNull(loaderA.getInterpreterSettings().get(0).getInterpreterGroup().get(\"noteA\"));\n+    assertNull(loaderB.getInterpreterSettings().get(0).getInterpreterGroup().get(\"noteB\"));\n+\n   }\n \n   private void delete(File file){",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java",
                "sha": "aa98afd6db133507f0727bb416c006bf39afa65b",
                "status": "modified"
            },
            {
                "additions": 105,
                "blob_url": "https://github.com/apache/zeppelin/blob/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "changes": 116,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java?ref=b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8",
                "deletions": 11,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "patch": "@@ -26,23 +26,14 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.HashSet;\n+import java.util.*;\n \n import org.apache.commons.io.FileUtils;\n import org.apache.zeppelin.conf.ZeppelinConfiguration;\n import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;\n import org.apache.zeppelin.dep.DependencyResolver;\n import org.apache.zeppelin.display.AngularObjectRegistry;\n-import org.apache.zeppelin.interpreter.InterpreterFactory;\n-import org.apache.zeppelin.interpreter.InterpreterOption;\n-import org.apache.zeppelin.interpreter.InterpreterOutput;\n-import org.apache.zeppelin.interpreter.InterpreterSetting;\n+import org.apache.zeppelin.interpreter.*;\n import org.apache.zeppelin.interpreter.mock.MockInterpreter1;\n import org.apache.zeppelin.interpreter.mock.MockInterpreter2;\n import org.apache.zeppelin.notebook.repo.NotebookRepo;\n@@ -489,6 +480,109 @@ public void testAbortParagraphStatusOnInterpreterRestart() throws InterruptedExc\n     assertTrue(isAborted);\n   }\n \n+  @Test\n+  public void testPerSessionInterpreterCloseOnNoteRemoval() throws IOException {\n+    // create a notes\n+    Note note1  = notebook.createNote();\n+    Paragraph p1 = note1.addParagraph();\n+    p1.setText(\"getId\");\n+\n+    // restart interpreter with per note session enabled\n+    for (InterpreterSetting setting : note1.getNoteReplLoader().getInterpreterSettings()) {\n+      setting.getOption().setPerNoteSession(true);\n+      notebook.getInterpreterFactory().restart(setting.id());\n+    }\n+\n+    note1.run(p1.getId());\n+    while (p1.getStatus() != Status.FINISHED) Thread.yield();\n+    InterpreterResult result = p1.getResult();\n+\n+    // remove note and recreate\n+    notebook.removeNote(note1.getId());\n+    note1 = notebook.createNote();\n+    p1 = note1.addParagraph();\n+    p1.setText(\"getId\");\n+\n+    note1.run(p1.getId());\n+    while (p1.getStatus() != Status.FINISHED) Thread.yield();\n+    assertNotEquals(p1.getResult().message(), result.message());\n+\n+    notebook.removeNote(note1.getId());\n+  }\n+\n+  @Test\n+  public void testPerSessionInterpreter() throws IOException {\n+    // create two notes\n+    Note note1  = notebook.createNote();\n+    Paragraph p1 = note1.addParagraph();\n+\n+    Note note2  = notebook.createNote();\n+    Paragraph p2 = note2.addParagraph();\n+\n+    p1.setText(\"getId\");\n+    p2.setText(\"getId\");\n+\n+    // run per note session disabled\n+    note1.run(p1.getId());\n+    note2.run(p2.getId());\n+\n+    while (p1.getStatus() != Status.FINISHED) Thread.yield();\n+    while (p2.getStatus() != Status.FINISHED) Thread.yield();\n+\n+    assertEquals(p1.getResult().message(), p2.getResult().message());\n+\n+\n+    // restart interpreter with per note session enabled\n+    for (InterpreterSetting setting : note1.getNoteReplLoader().getInterpreterSettings()) {\n+      setting.getOption().setPerNoteSession(true);\n+      notebook.getInterpreterFactory().restart(setting.id());\n+    }\n+\n+    // run per note session enabled\n+    note1.run(p1.getId());\n+    note2.run(p2.getId());\n+\n+    while (p1.getStatus() != Status.FINISHED) Thread.yield();\n+    while (p2.getStatus() != Status.FINISHED) Thread.yield();\n+\n+    assertNotEquals(p1.getResult().message(), p2.getResult().message());\n+\n+    notebook.removeNote(note1.getId());\n+    notebook.removeNote(note2.getId());\n+  }\n+\n+  @Test\n+  public void testPerSessionInterpreterCloseOnUnbindInterpreterSetting() throws IOException {\n+    // create a notes\n+    Note note1  = notebook.createNote();\n+    Paragraph p1 = note1.addParagraph();\n+    p1.setText(\"getId\");\n+\n+    // restart interpreter with per note session enabled\n+    for (InterpreterSetting setting : note1.getNoteReplLoader().getInterpreterSettings()) {\n+      setting.getOption().setPerNoteSession(true);\n+      notebook.getInterpreterFactory().restart(setting.id());\n+    }\n+\n+    note1.run(p1.getId());\n+    while (p1.getStatus() != Status.FINISHED) Thread.yield();\n+    InterpreterResult result = p1.getResult();\n+\n+\n+    // unbind, and rebind setting. that result interpreter instance close\n+    List<String> bindedSettings = notebook.getBindedInterpreterSettingsIds(note1.getId());\n+    notebook.bindInterpretersToNote(note1.getId(), new LinkedList<String>());\n+    notebook.bindInterpretersToNote(note1.getId(), bindedSettings);\n+\n+    note1.run(p1.getId());\n+    while (p1.getStatus() != Status.FINISHED) Thread.yield();\n+\n+    assertNotEquals(result.message(), p1.getResult().message());\n+\n+    notebook.removeNote(note1.getId());\n+  }\n+\n+\n   private void delete(File file){\n     if(file.isFile()) file.delete();\n     else if(file.isDirectory()){",
                "raw_url": "https://github.com/apache/zeppelin/raw/b88f52e3cf798c46d7e3b0ed3ea9f8bbd2b6d9d8/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "sha": "db7a46618649423c29914a858a435a8883e51556",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-513] Dedicated interpreter session per notebook\n\n### What is this PR for?\n\nCurrently, all notebooks that binded to the same interpreter setting shares the same interpreter instance.\nFor example, let's say there're `spark-production` interpreter setting and all notebooks are using it.\nThen all notebooks share a single instance of SparkInterpreter, and that result all the variables are being shared across the notebook.\n\nBut sometimes isolated name space for variables per notebook is preferred. In this case we can create per notebook interpreter instance.\n\nThis PR provides generalized facility to provides per notebook interpreter instance, not only for SparkInterpreter but for any other existing interpreter without modification.\n\n**Design**\n\nIt provides toggle switch that user turn on / turn off this mode per interpreter setting.\nWhen per notebook interpreter is turned on, it still creates a single remote interpreter process per interpreter setting. But inside of the process, each notebook will have it's own interpreter instance and the instance is terminated automatically on removal of notebook or unbinding note from interpreter setting.\n\n**SparkInterpreter**\n\nBecause of the design keeps single remote interpreter process and creates multiple interpreter instance inside of it, SparkInterpreter become a problem. While multiple SparkContext can not be created on a single process. So this PR try to, create per notebook scala compiler instance, but share single SparkContext instance. In this way, each notebook can run job concurrently by leveraging fairscheduler of SparkContext without running multiple Spark application (SparkContext).\n\nAnd this approach is inspired by https://github.com/piyush-mukati/incubator-zeppelin/tree/parallel_scheduler_support_spark, this PR trying to generalize it for all other interpreters.\n\n### What type of PR is it?\nFeature\n\n### Todos\n* [x] - Per note interpreter session\n* [x] - Scala compiler instance per note and share a single SparkContext (SparkInterpreter)\n* [x] - Handle Spark class server correctly\n* [x] - Handle SparkInterpreter Progressbar correctly\n\n### Is there a relevant Jira issue?\n\nhttps://issues.apache.org/jira/browse/ZEPPELIN-513\n\n### How should this be tested?\n\nCheck \"Per note session\" of your Spark interpreter setting.\nAnd create two different notebook and check scala variables are not shared.\n\n### Screenshots (if appropriate)\n\nCheckbox to enable\n![image](https://cloud.githubusercontent.com/assets/1540981/13270280/e6db3686-da41-11e5-9408-8eaa9c2a7350.png)\n\nHow it works for SparkInterpreter\n![per_note_session](https://cloud.githubusercontent.com/assets/1540981/13135855/3c01f26c-d5c9-11e5-864b-30fc4e9f61d1.gif)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? yes\n\nAuthor: Lee moon soo <moon@apache.org>\n\nThis patch had conflicts when merged, resolved by\nCommitter: Lee moon soo <moon@apache.org>\n\nCloses #703 from Leemoonsoo/notebook_interpreter_session and squashes the following commits:\n\n222066c [Lee moon soo] Use nanoTime\n8287eb9 [Lee moon soo] Fix style\n45af2df [Lee moon soo] Prevent infinitely waiting loop\n438b212 [Lee moon soo] Fix typo on the comment\nb091b7e [Lee moon soo] Move numReferenceOfSparkContext.incrementAndGet() to the end of open() method\n4d2533f [Lee moon soo] Per note session -> Separate Interpreter for each note\n7b073f6 [Lee moon soo] Merge branch 'master' into notebook_interpreter_session\nfeabb5f [Lee moon soo] Handle NPE when closing interpreters in group spark.\n5047217 [Lee moon soo] Restore angularObject correctly\n1f03ebb [Lee moon soo] Merge branch 'master' into notebook_interpreter_session\n7730cf3 [Lee moon soo] Add document for per note session mode\ndedf93f [Lee moon soo] Nullcheck\n72b2235 [Lee moon soo] Protect SparkContext creation\nf2299d6 [Lee moon soo] Handle scheduler termination correctly when unbind, bind interpreter\n269c27d [Lee moon soo] Fix unittest\n4299b87 [Lee moon soo] Share a SparkContext across ScalaCompilers\ncc33c25 [Lee moon soo] Add more unittests\n6dd981a [Lee moon soo] update interpreter module test\n1d1638c [Lee moon soo] Fix test\n58e5f91 [Lee moon soo] Update spark interpreter\n366b651 [Lee moon soo] Don't destroy interpreter on note memove or change bindings when interpreter.option.perNoteSession is false\nfc9cb3f [Lee moon soo] interpreter session aware interpreter factory\ned1ab0d [Lee moon soo] zeppelin-interpreter note session support\n5787984 [Lee moon soo] Add option for per note session interpreter",
        "parent": "https://github.com/apache/zeppelin/commit/738c10e211f851f4ced7b4e6b2f2368b3885f734",
        "patched_files": [
            "RemoteInterpreterServer.java",
            "RemoteAngularObjectRegistry.java",
            "DepInterpreter.java",
            "UpdateInterpreterSettingRequest.java",
            "JsonExclusionStrategy.java",
            "interpreter_persession.png",
            "interpreter.controller.js",
            "InterpreterFactory.java",
            "RemoteInterpreterEventPoller.java",
            "spark.md",
            "InterpreterGroup.java",
            "NewInterpreterSettingRequest.java",
            "InterpreterOption.java",
            "RemoteInterpreterProcess.java",
            "RemoteInterpreterService.java",
            "RemoteInterpreter.java",
            "interpreter.html",
            "MockInterpreterB.java",
            "MockInterpreter1.java",
            "InterpreterRestApi.java",
            "DistributedResourcePool.java",
            "Notebook.java",
            "InterpreterSettingListForNoteBind.java",
            "JsonResponse.java",
            "InterpreterSetting.java",
            "interpreter-create.html",
            "interpreters.md",
            "InterpreterInfoSerializer.java",
            "SparkInterpreter.java",
            "NotebookRestApi.java",
            "NoteInterpreterLoader.java",
            "interpreter_binding.png",
            "SparkSqlInterpreter.java",
            "Paragraph.java",
            "RemoteAngularObject.java",
            "RemoteScheduler.java",
            "SchedulerFactory.java",
            "NotebookServer.java",
            "Interpreter.java",
            "PySparkInterpreter.java",
            "RemoteInterpreterService.thrift",
            "writingzeppelininterpreter.md",
            "RemoteInterpreterOutputTestStream.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterFactoryTest.java",
            "RemoteSchedulerTest.java",
            "SparkInterpreterTest.java",
            "DepInterpreterTest.java",
            "SparkSqlInterpreterTest.java",
            "InterpreterTest.java",
            "RemoteInterpreterProcessTest.java",
            "DistributedResourcePoolTest.java",
            "NotebookServerTest.java",
            "RemoteInterpreterServerTest.java",
            "NotebookTest.java",
            "InterpreterRestApiTest.java",
            "NoteInterpreterLoaderTest.java",
            "RemoteAngularObjectTest.java",
            "ParagraphTest.java",
            "RemoteInterpreterTest.java"
        ]
    },
    "zeppelin_baab124": {
        "bug_id": "zeppelin_baab124",
        "commit": "https://github.com/apache/zeppelin/commit/baab124cf310545cbc6cf0b4e29b4f20b54d4f48",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/baab124cf310545cbc6cf0b4e29b4f20b54d4f48/postgresql/src/main/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/postgresql/src/main/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreter.java?ref=baab124cf310545cbc6cf0b4e29b4f20b54d4f48",
                "deletions": 0,
                "filename": "postgresql/src/main/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreter.java",
                "patch": "@@ -89,6 +89,7 @@\n   static final String POSTGRESQL_SERVER_PASSWORD = \"postgresql.password\";\n   static final String POSTGRESQL_SERVER_DRIVER_NAME = \"postgresql.driver.name\";\n   static final String POSTGRESQL_SERVER_MAX_RESULT = \"postgresql.max.result\";\n+  static final String EMPTY_COLUMN_VALUE = \"\";\n \n   static {\n     Interpreter.register(\n@@ -275,6 +276,9 @@ private InterpreterResult executeSql(String sql) {\n    * For %table response replace Tab and Newline characters from the content.\n    */\n   private String replaceReservedChars(boolean isTableResponseType, String str) {\n+    if (str == null) {\n+      return EMPTY_COLUMN_VALUE;\n+    }\n     return (!isTableResponseType) ? str : str.replace(TAB, WhITESPACE).replace(NEWLINE, WhITESPACE);\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/baab124cf310545cbc6cf0b4e29b4f20b54d4f48/postgresql/src/main/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreter.java",
                "sha": "4189a747c4b136fbc2f49ee853c4f1440bd2a78a",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/zeppelin/blob/baab124cf310545cbc6cf0b4e29b4f20b54d4f48/postgresql/src/test/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreterTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/postgresql/src/test/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreterTest.java?ref=baab124cf310545cbc6cf0b4e29b4f20b54d4f48",
                "deletions": 0,
                "filename": "postgresql/src/test/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreterTest.java",
                "patch": "@@ -126,6 +126,27 @@ public void testStatementCancel() throws SQLException {\n         .getJdbcConnection().isClosed());\n   }\n \n+  @Test\n+  public void testNullColumnResult() throws SQLException {\n+\n+    when(psqlInterpreter.getMaxResult()).thenReturn(1000);\n+\n+    String sqlQuery = \"select * from t\";\n+\n+    result.addColumn(\"col1\", new String[] {\"val11\", null});\n+    result.addColumn(\"col2\", new String[] {null, \"val22\"});\n+\n+    InterpreterResult interpreterResult = psqlInterpreter.interpret(sqlQuery, null);\n+\n+    assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());\n+    assertEquals(InterpreterResult.Type.TABLE, interpreterResult.type());\n+    assertEquals(\"col1\\tcol2\\nval11\\t\\n\\tval22\\n\", interpreterResult.message());\n+\n+    verifySQLStatementExecuted(sqlQuery);\n+    verifyAllResultSetsClosed();\n+    verifyAllStatementsClosed();\n+  }\n+\n   @Test\n   public void testSelectQuery() throws SQLException {\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/baab124cf310545cbc6cf0b4e29b4f20b54d4f48/postgresql/src/test/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreterTest.java",
                "sha": "9c8eae113ebf2bcdd2bf7a44c1269e347909cc4f",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-349: Resolve NPE on null cell values\n\nWhen the query response contains null column values the following NPE is thrown:\njava.lang.NullPointerException\nat org.apache.zeppelin.postgresql.PostgreSqlInterpreter.replaceReservedChars(PostgreSqlInterpreter.java:278)\nat org.apache.zeppelin.postgresql.PostgreSqlInterpreter.executeSql(PostgreSqlInterpreter.java:235)\n\nAuthor: tzolov <christian.tzolov@gmail.com>\n\nCloses #348 from tzolov/ZEPPELIN-349 and squashes the following commits:\n\nde70c88 [tzolov] ZEPPELIN-349: Format test code\nfff3448 [tzolov] ZEPPELIN-349: Resolve NPE on null cell values",
        "parent": "https://github.com/apache/zeppelin/commit/ecc497011a9c355d26f15b919509057c04c070ae",
        "patched_files": [
            "PostgreSqlInterpreter.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "PostgreSqlInterpreterTest.java"
        ]
    },
    "zeppelin_bfb04af": {
        "bug_id": "zeppelin_bfb04af",
        "commit": "https://github.com/apache/zeppelin/commit/bfb04af395b7815c8765e709639e4b86bdd64884",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/bfb04af395b7815c8765e709639e4b86bdd64884/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java?ref=bfb04af395b7815c8765e709639e4b86bdd64884",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "patch": "@@ -728,7 +728,7 @@ public void updateRuntimeInfos(String label, String tooltip, Map<String, String>\n    * @param settingId\n    */\n   public void clearRuntimeInfo(String settingId) {\n-    if (settingId != null) {\n+    if (settingId != null && runtimeInfos != null) {\n       Set<String> keys = runtimeInfos.keySet();\n       if (keys.size() > 0) {\n         List<String> infosToRemove = new ArrayList<>();",
                "raw_url": "https://github.com/apache/zeppelin/raw/bfb04af395b7815c8765e709639e4b86bdd64884/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "sha": "76c48c844ca65559eee37b5eb9bceebd56f43e60",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-3241] fix NPE when restarting Interpreter\n\n### What is this PR for?\nWe often (but not always) face an NPE when restarting Spark interpreter. Our Spark interpreter run in scoped mode per note. The restart then is not possible, only restart of whole zeppelin daemon helps out.\n\nThis PR fixes this NPE.\n\n### What type of PR is it?\nBug Fix\n\n### Todos\n\n### What is the Jira issue?\n[https://issues.apache.org/jira/browse/ZEPPELIN-3241](https://issues.apache.org/jira/browse/ZEPPELIN-3241)\n\n### How should this be tested?\n- manual\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Andreas Weise <a.weise@avm.de>\n\nCloses #2806 from weand/ZEPPELIN-3241 and squashes the following commits:\n\n85c0448 [Andreas Weise] ZEPPELIN-3241: NPE when restarting Interpreter",
        "parent": "https://github.com/apache/zeppelin/commit/bf923dc13c6051bc1a2622724300c56458d7ca08",
        "patched_files": [
            "Paragraph.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "ParagraphTest.java"
        ]
    },
    "zeppelin_c507c59": {
        "bug_id": "zeppelin_c507c59",
        "commit": "https://github.com/apache/zeppelin/commit/c507c59b6a166a85a262673fe7f1d4a3020bd599",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/conf/zeppelin-env.sh.template",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/conf/zeppelin-env.sh.template?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 0,
                "filename": "conf/zeppelin-env.sh.template",
                "patch": "@@ -38,6 +38,7 @@\n # export ZEPPELIN_INTERPRETER_LOCALREPO         # Local repository for interpreter's additional dependency loading\n # export ZEPPELIN_NOTEBOOK_STORAGE \t\t# Refers to pluggable notebook storage class, can have two classes simultaneously with a sync between them (e.g. local and remote).\n # export ZEPPELIN_NOTEBOOK_ONE_WAY_SYNC\t# If there are multiple notebook storages, should we treat the first one as the only source of truth?\n+# export ZEPPELIN_NOTEBOOK_PUBLIC   # Make notebook public by default when created, private otherwise\n \n #### Spark interpreter configuration ####\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/conf/zeppelin-env.sh.template",
                "sha": "50af0040f06ead867e47efb9196842d3e3c61dd5",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/conf/zeppelin-site.xml.template",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/conf/zeppelin-site.xml.template?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 1,
                "filename": "conf/zeppelin-site.xml.template",
                "patch": "@@ -277,11 +277,16 @@\n   <description>Anonymous user allowed by default</description>\n </property>\n \n+<property>\n+  <name>zeppelin.notebook.public</name>\n+  <value>true</value>\n+  <description>Make notebook public by default when created, private otherwise</description>\n+</property>\n+\n <property>\n   <name>zeppelin.websocket.max.text.message.size</name>\n   <value>1024000</value>\n   <description>Size in characters of the maximum text message to be received by websocket. Defaults to 1024000</description>\n </property>\n \n </configuration>\n-",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/conf/zeppelin-site.xml.template",
                "sha": "bde66b9d92da3f14bfe5733640139bd5200f7e0e",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/docs/install/install.md",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/docs/install/install.md?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 2,
                "filename": "docs/install/install.md",
                "patch": "@@ -87,7 +87,7 @@ Congratulations, you have successfully installed Apache Zeppelin! Here are few s\n  * For an in-depth overview, head to [Explore Apache Zeppelin UI](../quickstart/explorezeppelinui.html).\n  * And then, try run [tutorial](http://localhost:8080/#/notebook/2A94M5J1Z) notebook in your Zeppelin.\n  * And see how to change [configurations](#apache-zeppelin-configuration) like port number, etc.\n- \n+\n #### Zeppelin with Apache Spark ...\n  * To know more about deep integration with [Apache Spark](http://spark.apache.org/), check [Spark Interpreter](../interpreter/spark.html).\n \n@@ -306,6 +306,12 @@ You can configure Apache Zeppelin with either **environment variables** in `conf\n     <td>false</td>\n     <td>If there are multiple notebook storage locations, should we treat the first one as the only source of truth?</td>\n   </tr>\n+  <tr>\n+    <td>ZEPPELIN_NOTEBOOK_PUBLIC</td>\n+    <td>zeppelin.notebook.public</td>\n+    <td>true</td>\n+    <td>Make notebook public (set only `owners`) by default when created/imported. If set to `false` will add `user` to `readers` and `writers` as well, making it private and invisible to other users unless permissions are granted.</td>\n+  </tr>\n   <tr>\n     <td>ZEPPELIN_INTERPRETERS</td>\n     <td>zeppelin.interpreters</td>\n@@ -377,4 +383,4 @@ exec bin/zeppelin-daemon.sh upstart\n \n ## Building from Source\n \n-If you want to build from source instead of using binary package, follow the instructions [here](./build.html).\n\\ No newline at end of file\n+If you want to build from source instead of using binary package, follow the instructions [here](./build.html).",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/docs/install/install.md",
                "sha": "bccd1295d732806bd106c7181176a5579f1edd1a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "patch": "@@ -435,6 +435,10 @@ public boolean isAnonymousAllowed() {\n     return getBoolean(ConfVars.ZEPPELIN_ANONYMOUS_ALLOWED);\n   }\n \n+  public boolean isNotebokPublic() {\n+    return getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC);\n+  }\n+  \n   public String getConfDir() {\n     return getString(ConfVars.ZEPPELIN_CONF_DIR);\n   }\n@@ -570,6 +574,8 @@ public String getWebsocketMaxTextMessageSize() {\n     ZEPPELIN_NOTEBOOK_AZURE_USER(\"zeppelin.notebook.azure.user\", \"user\"),\n     ZEPPELIN_NOTEBOOK_STORAGE(\"zeppelin.notebook.storage\", VFSNotebookRepo.class.getName()),\n     ZEPPELIN_NOTEBOOK_ONE_WAY_SYNC(\"zeppelin.notebook.one.way.sync\", false),\n+    // whether by default note is public or private\n+    ZEPPELIN_NOTEBOOK_PUBLIC(\"zeppelin.notebook.public\", true),\n     ZEPPELIN_INTERPRETER_REMOTE_RUNNER(\"zeppelin.interpreter.remoterunner\",\n         System.getProperty(\"os.name\")\n                 .startsWith(\"Windows\") ? \"bin/interpreter.cmd\" : \"bin/interpreter.sh\"),",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java",
                "sha": "368458bc26d728d7c785ec54d06a7d19a6be522d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 5,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -166,11 +166,7 @@ public Note createNote(List<String> interpreterIds, AuthenticationInfo subject)\n       bindInterpretersToNote(subject.getUser(), note.getId(), interpreterIds);\n     }\n \n-    if (subject != null && !\"anonymous\".equals(subject.getUser())) {\n-      Set<String> owners = new HashSet<>();\n-      owners.add(subject.getUser());\n-      notebookAuthorization.setOwners(note.getId(), owners);\n-    }\n+    notebookAuthorization.setNewNotePermissions(note.getId(), subject);\n     noteSearchService.addIndexDoc(note);\n     note.persist(subject);\n     fireNoteCreateEvent(note);\n@@ -225,6 +221,7 @@ public Note importNote(String sourceJson, String noteName, AuthenticationInfo su\n         newNote.addCloneParagraph(p);\n       }\n \n+      notebookAuthorization.setNewNotePermissions(newNote.getId(), subject);\n       newNote.persist(subject);\n     } catch (IOException e) {\n       logger.error(e.toString(), e);",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "c0932569af542f91d5977b70d287829e62ba6780",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "patch": "@@ -156,6 +156,10 @@ private void saveToFile() {\n       LOG.error(\"Error saving notebook authorization file: \" + e.getMessage());\n     }\n   }\n+  \n+  public boolean isPublic() {\n+    return conf.isNotebokPublic();\n+  }\n \n   private Set<String> validateUser(Set<String> users) {\n     Set<String> returnUser = new HashSet<>();\n@@ -325,4 +329,26 @@ public boolean apply(NoteInfo input) {\n       }\n     }).toList();\n   }\n+  \n+  public void setNewNotePermissions(String noteId, AuthenticationInfo subject) {\n+    if (!AuthenticationInfo.isAnonymous(subject)) {\n+      if (isPublic()) {\n+        // add current user to owners - can be public\n+        Set<String> owners = getOwners(noteId);\n+        owners.add(subject.getUser());\n+        setOwners(noteId, owners);\n+      } else {\n+        // add current user to owners, readers, writers - private note\n+        Set<String> entities = getOwners(noteId);\n+        entities.add(subject.getUser());\n+        setOwners(noteId, entities);\n+        entities = getReaders(noteId);\n+        entities.add(subject.getUser());\n+        setReaders(noteId, entities);\n+        entities = getWriters(noteId);\n+        entities.add(subject.getUser());\n+        setWriters(noteId, entities);\n+      }\n+    }\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java",
                "sha": "8fcecf43a46936286b1310167507036da86a076a",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/java/org/apache/zeppelin/conf/ZeppelinConfigurationTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/conf/ZeppelinConfigurationTest.java?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/conf/ZeppelinConfigurationTest.java",
                "patch": "@@ -24,6 +24,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.assertTrue;\n+\n import java.net.MalformedURLException;\n import java.util.List;\n \n@@ -87,4 +89,12 @@ public void getNotebookDirTest() throws ConfigurationException {\n         String notebookLocation = conf.getNotebookDir();\n         Assert.assertEquals(\"notebook\", notebookLocation);\n     }\n+    \n+    @Test\n+    public void isNotebookPublicTest() throws ConfigurationException {\n+      \n+      ZeppelinConfiguration conf  = new ZeppelinConfiguration(this.getClass().getResource(\"/zeppelin-site.xml\"));\n+      boolean isIt = conf.isNotebokPublic();\n+      assertTrue(isIt);\n+    }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/java/org/apache/zeppelin/conf/ZeppelinConfigurationTest.java",
                "sha": "3cc1022c2e787a44ba4430f862e8fde75e94c69a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.zeppelin.notebook.JobListenerFactory;\n import org.apache.zeppelin.notebook.Note;\n import org.apache.zeppelin.notebook.Notebook;\n+import org.apache.zeppelin.notebook.NotebookAuthorization;\n import org.apache.zeppelin.notebook.repo.NotebookRepo;\n import org.apache.zeppelin.notebook.repo.VFSNotebookRepo;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n@@ -66,6 +67,7 @@\n   private NotebookRepo notebookRepo;\n   private DependencyResolver depResolver;\n   private SchedulerFactory schedulerFactory;\n+  private NotebookAuthorization notebookAuthorization;\n   @Mock\n   private JobListenerFactory jobListenerFactory;\n \n@@ -97,8 +99,9 @@ public void setUp() throws Exception {\n \n     SearchService search = mock(SearchService.class);\n     notebookRepo = new VFSNotebookRepo(conf);\n+    notebookAuthorization = NotebookAuthorization.init(conf);\n     notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, jobListenerFactory, search,\n-        null, null);\n+        notebookAuthorization, null);\n   }\n \n   @After",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "sha": "c88779c87d398cdbfbbca3af296db9f360229ade",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "patch": "@@ -1062,6 +1062,69 @@ public void testGetAllNotesWithDifferentPermissions() throws IOException {\n     assertEquals(notes2.size(), 1);\n   }\n \n+  @Test\n+  public void testPublicPrivateNewNote() throws IOException, SchedulerException {\n+    HashSet<String> user1 = Sets.newHashSet(\"user1\");\n+    HashSet<String> user2 = Sets.newHashSet(\"user2\");\n+    \n+    // case of public note\n+    assertTrue(conf.isNotebokPublic());\n+    assertTrue(notebookAuthorization.isPublic());\n+    \n+    List<Note> notes1 = notebook.getAllNotes(user1);\n+    List<Note> notes2 = notebook.getAllNotes(user2);\n+    assertEquals(notes1.size(), 0);\n+    assertEquals(notes2.size(), 0);\n+    \n+    // user1 creates note\n+    Note notePublic = notebook.createNote(new AuthenticationInfo(\"user1\"));\n+    \n+    // both users have note\n+    notes1 = notebook.getAllNotes(user1);\n+    notes2 = notebook.getAllNotes(user2);\n+    assertEquals(notes1.size(), 1);\n+    assertEquals(notes2.size(), 1);\n+    assertEquals(notes1.get(0).getId(), notePublic.getId());\n+    assertEquals(notes2.get(0).getId(), notePublic.getId());\n+    \n+    // user1 is only owner\n+    assertEquals(notebookAuthorization.getOwners(notePublic.getId()).size(), 1);\n+    assertEquals(notebookAuthorization.getReaders(notePublic.getId()).size(), 0);\n+    assertEquals(notebookAuthorization.getWriters(notePublic.getId()).size(), 0);\n+    \n+    // case of private note\n+    System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC.getVarName(), \"false\");\n+    ZeppelinConfiguration conf2 = ZeppelinConfiguration.create();\n+    assertFalse(conf2.isNotebokPublic());\n+    // notebook authorization reads from conf, so no need to re-initilize\n+    assertFalse(notebookAuthorization.isPublic());\n+    \n+    // check that still 1 note per user\n+    notes1 = notebook.getAllNotes(user1);\n+    notes2 = notebook.getAllNotes(user2);\n+    assertEquals(notes1.size(), 1);\n+    assertEquals(notes2.size(), 1);\n+    \n+    // create private note\n+    Note notePrivate = notebook.createNote(new AuthenticationInfo(\"user1\"));\n+    \n+    // only user1 have notePrivate right after creation\n+    notes1 = notebook.getAllNotes(user1);\n+    notes2 = notebook.getAllNotes(user2);\n+    assertEquals(notes1.size(), 2);\n+    assertEquals(notes2.size(), 1);\n+    assertEquals(notes1.get(1).getId(), notePrivate.getId());\n+    \n+    // user1 have all rights\n+    assertEquals(notebookAuthorization.getOwners(notePrivate.getId()).size(), 1);\n+    assertEquals(notebookAuthorization.getReaders(notePrivate.getId()).size(), 1);\n+    assertEquals(notebookAuthorization.getWriters(notePrivate.getId()).size(), 1);\n+    \n+    //set back public to true\n+    System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC.getVarName(), \"true\");\n+    ZeppelinConfiguration.create();\n+  }\n+  \n   private void delete(File file){\n     if(file.isFile()) file.delete();\n     else if(file.isDirectory()){",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java",
                "sha": "d5d6bcacd0e9acad497476481e66068cf15552bc",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.zeppelin.notebook.JobListenerFactory;\n import org.apache.zeppelin.notebook.Note;\n import org.apache.zeppelin.notebook.Notebook;\n+import org.apache.zeppelin.notebook.NotebookAuthorization;\n import org.apache.zeppelin.notebook.Paragraph;\n import org.apache.zeppelin.notebook.ParagraphJobListener;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n@@ -56,6 +57,7 @@\n   private NotebookRepo notebookRepo;\n   private InterpreterFactory factory;\n   private DependencyResolver depResolver;\n+  private NotebookAuthorization notebookAuthorization;\n \n   private File mainZepDir;\n   private File mainNotebookDir;\n@@ -86,7 +88,9 @@ public void setUp() throws Exception {\n \n     SearchService search = mock(SearchService.class);\n     notebookRepo = new VFSNotebookRepo(conf);\n-    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this, search, null, null);\n+    notebookAuthorization = NotebookAuthorization.init(conf);\n+    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this, search,\n+        notebookAuthorization, null);\n   }\n \n   @After",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java",
                "sha": "c8009e7a0e9d39f5c135d54ee306189a62ce02e6",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/resources/zeppelin-site.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/resources/zeppelin-site.xml?ref=c507c59b6a166a85a262673fe7f1d4a3020bd599",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/test/resources/zeppelin-site.xml",
                "patch": "@@ -148,5 +148,11 @@\n </property>\n -->\n \n+<property>\n+  <name>zeppelin.notebook.public</name>\n+  <value>true</value>\n+  <description>Make notebook public by default when created, private otherwise</description>\n+</property>\n+\n </configuration>\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/c507c59b6a166a85a262673fe7f1d4a3020bd599/zeppelin-zengine/src/test/resources/zeppelin-site.xml",
                "sha": "a8adc24ce93c981fb96b476b4c9791e74a51887b",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1657] Private/public mode for user note creation/import\n\n### What is this PR for?\nIn multi-user environment when users create a notebook normally they would expect that notebook be listed only in their list/workbench. Currently Zeppelin creates/imports notes as public by default. There should be at least a way to pass through configuration to make this behaviour private be default. Should discuss whether it's public or private by default.\n\n### What type of PR is it?\nImprovement\n\n### Todos\n* [x] - set permissions on create/import\n* [x] - test\n* [x] - review, feedback, decide whether public/private by default\n* [x] - pass through env. config\n\n### What is the Jira issue?\n[ZEPPELIN-1657](https://issues.apache.org/jira/browse/ZEPPELIN-1657)\n\n### How should this be tested?\n1. set `zeppelin.notebook.public` property as false in `zeppelin-site.xml`\n2. login as user1 and create noteA, note should appear in your list of notes\n3. logout and login as user2, shouldn't be able to see noteA\n\n### Screenshots (if appropriate)\nTBD\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? maybe\n\nAuthor: Khalid Huseynov <khalidhnv@gmail.com>\n\nCloses #1625 from khalidhuseynov/feat/public-note-create and squashes the following commits:\n\n010c262 [Khalid Huseynov] fix test: set state back\nfc91b2f [Khalid Huseynov] add description to install config\nf862ae1 [Khalid Huseynov] fix InterpreterFactory test\n876b798 [Khalid Huseynov] fix vfs testSave npe\n1a945e8 [Khalid Huseynov] add test\n496b80c [Khalid Huseynov] read env var from conf file directly\n28abffa [Khalid Huseynov] set permissions on note create and import\n44297a4 [Khalid Huseynov] set new note permissions\n9732409 [Khalid Huseynov] add variable to ZeppelinConfiguration\n4062af0 [Khalid Huseynov] add var to env.sh\nb7f28b3 [Khalid Huseynov] add property to site.xml",
        "parent": "https://github.com/apache/zeppelin/commit/3eae4e0711924721db49b4e3b840282ca987a80c",
        "patched_files": [
            "ZeppelinConfiguration.java",
            "Notebook.java",
            "zeppelin-env.sh.template",
            "NotebookAuthorization.java",
            "zeppelin-site.xml.template",
            "InterpreterFactory.java",
            "VFSNotebookRepo.java",
            "install.md",
            "zeppelin-site.xml"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterFactoryTest.java",
            "ZeppelinConfigurationTest.java",
            "VFSNotebookRepoTest.java",
            "NotebookTest.java"
        ]
    },
    "zeppelin_d343348": {
        "bug_id": "zeppelin_d343348",
        "commit": "https://github.com/apache/zeppelin/commit/d343348bd14830238ff6964d090aec20a965c95d",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/d343348bd14830238ff6964d090aec20a965c95d/zeppelin-server/src/main/java/org/apache/zeppelin/rest/GetUserList.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/GetUserList.java?ref=d343348bd14830238ff6964d090aec20a965c95d",
                "deletions": 4,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/GetUserList.java",
                "patch": "@@ -57,10 +57,12 @@\n   public List<String> getUserList(IniRealm r) {\n     List<String> userList = new ArrayList<>();\n     Map getIniUser = r.getIni().get(\"users\");\n-    Iterator it = getIniUser.entrySet().iterator();\n-    while (it.hasNext()) {\n-      Map.Entry pair = (Map.Entry) it.next();\n-      userList.add(pair.getKey().toString().trim());\n+    if (getIniUser != null) {\n+      Iterator it = getIniUser.entrySet().iterator();\n+      while (it.hasNext()) {\n+        Map.Entry pair = (Map.Entry) it.next();\n+        userList.add(pair.getKey().toString().trim());\n+      }\n     }\n     return userList;\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/d343348bd14830238ff6964d090aec20a965c95d/zeppelin-server/src/main/java/org/apache/zeppelin/rest/GetUserList.java",
                "sha": "2727fb4a41105298e0bc942bea67180977bbec3d",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/zeppelin/blob/d343348bd14830238ff6964d090aec20a965c95d/zeppelin-server/src/main/java/org/apache/zeppelin/rest/SecurityRestApi.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/SecurityRestApi.java?ref=d343348bd14830238ff6964d090aec20a965c95d",
                "deletions": 13,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/SecurityRestApi.java",
                "patch": "@@ -101,21 +101,22 @@ public Response getUserList(@PathParam(\"searchText\") final String searchText) {\n     try {\n       GetUserList getUserListObj = new GetUserList();\n       Collection realmsList = SecurityUtils.getRealmsList();\n-      for (Iterator<Realm> iterator = realmsList.iterator(); iterator.hasNext(); ) {\n-        Realm realm = iterator.next();\n-        String name = realm.getName();\n-        if (name.equals(\"iniRealm\")) {\n-          usersList.addAll(getUserListObj.getUserList((IniRealm) realm));\n-        } else if (name.equals(\"ldapRealm\")) {\n-          usersList.addAll(getUserListObj.getUserList((JndiLdapRealm) realm, searchText));\n-        } else if (name.equals(\"activeDirectoryRealm\")) {\n-          usersList.addAll(getUserListObj.getUserList((ActiveDirectoryGroupRealm) realm,\n-              searchText));\n-        } else if (name.equals(\"jdbcRealm\")) {\n-          usersList.addAll(getUserListObj.getUserList((JdbcRealm) realm));\n+      if (realmsList != null) {\n+        for (Iterator<Realm> iterator = realmsList.iterator(); iterator.hasNext(); ) {\n+          Realm realm = iterator.next();\n+          String name = realm.getName();\n+          if (name.equals(\"iniRealm\")) {\n+            usersList.addAll(getUserListObj.getUserList((IniRealm) realm));\n+          } else if (name.equals(\"ldapRealm\")) {\n+            usersList.addAll(getUserListObj.getUserList((JndiLdapRealm) realm, searchText));\n+          } else if (name.equals(\"activeDirectoryRealm\")) {\n+            usersList.addAll(getUserListObj.getUserList((ActiveDirectoryGroupRealm) realm,\n+                searchText));\n+          } else if (name.equals(\"jdbcRealm\")) {\n+            usersList.addAll(getUserListObj.getUserList((JdbcRealm) realm));\n+          }\n         }\n       }\n-\n     } catch (Exception e) {\n       LOG.error(\"Exception in retrieving Users from realms \", e);\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/d343348bd14830238ff6964d090aec20a965c95d/zeppelin-server/src/main/java/org/apache/zeppelin/rest/SecurityRestApi.java",
                "sha": "a079a4460c9343b7c525b286272b64c8082d234e",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/zeppelin/blob/d343348bd14830238ff6964d090aec20a965c95d/zeppelin-server/src/test/java/org/apache/zeppelin/rest/SecurityRestApiTest.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/SecurityRestApiTest.java?ref=d343348bd14830238ff6964d090aec20a965c95d",
                "deletions": 2,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/SecurityRestApiTest.java",
                "patch": "@@ -20,18 +20,25 @@\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n import org.apache.commons.httpclient.methods.GetMethod;\n+import org.hamcrest.CoreMatchers;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ErrorCollector;\n \n import java.io.IOException;\n+import java.util.List;\n import java.util.Map;\n \n import static org.junit.Assert.*;\n \n public class SecurityRestApiTest extends AbstractTestRestApi {\n   Gson gson = new Gson();\n \n+  @Rule\n+  public ErrorCollector collector = new ErrorCollector();\n+\n   @BeforeClass\n   public static void init() throws Exception {\n     AbstractTestRestApi.startUp();\n@@ -49,10 +56,36 @@ public void testTicket() throws IOException {\n     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(),\n         new TypeToken<Map<String, Object>>(){}.getType());\n     Map<String, String> body = (Map<String, String>) resp.get(\"body\");\n-    assertEquals(\"anonymous\", body.get(\"principal\"));\n-    assertEquals(\"anonymous\", body.get(\"ticket\"));\n+    collector.checkThat(\"Paramater principal\", body.get(\"principal\"),\n+        CoreMatchers.equalTo(\"anonymous\"));\n+    collector.checkThat(\"Paramater ticket\", body.get(\"ticket\"),\n+        CoreMatchers.equalTo(\"anonymous\"));\n     get.releaseConnection();\n   }\n \n+  @Test\n+  public void testGetUserList() throws IOException {\n+    GetMethod get = httpGet(\"/security/userlist/admi\");\n+    get.addRequestHeader(\"Origin\", \"http://localhost\");\n+    Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(),\n+        new TypeToken<Map<String, Object>>(){}.getType());\n+    List<String> userList = (List<String>)  resp.get(\"body\");\n+    collector.checkThat(\"Search result size\", userList.size(),\n+        CoreMatchers.equalTo(1));\n+    collector.checkThat(\"Search result contains admin\", userList.contains(\"admin\"),\n+        CoreMatchers.equalTo(true));\n+    get.releaseConnection();\n+\n+    GetMethod notUser = httpGet(\"/security/userlist/randomString\");\n+    notUser.addRequestHeader(\"Origin\", \"http://localhost\");\n+    Map<String, Object> notUserResp = gson.fromJson(notUser.getResponseBodyAsString(),\n+        new TypeToken<Map<String, Object>>(){}.getType());\n+    List<String> emptyUserList = (List<String>)  notUserResp.get(\"body\");\n+    collector.checkThat(\"Search result size\", emptyUserList.size(),\n+        CoreMatchers.equalTo(0));\n+\n+    notUser.releaseConnection();\n+  }\n+\n }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/d343348bd14830238ff6964d090aec20a965c95d/zeppelin-server/src/test/java/org/apache/zeppelin/rest/SecurityRestApiTest.java",
                "sha": "54c31c1fd6ab6cb2f8ec04a9f6b878a11dcda5af",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1136] NPE in Zeppelin Logs\n\n### What is this PR for?\nAccess Zeppelin without configuring any security, Zeppelin shows anoymous user and notice the NPE in Zeppelin logs.\n\n```\nERROR [2016-07-08 17:45:17,879] ({qtp1800659519-45} SecurityRestApi.java[getUserList]:120) - Exception in retrieving Users from realms\njava.lang.NullPointerException\n\tat org.apache.zeppelin.rest.GetUserList.getUserList(GetUserList.java:60)\n\tat org.apache.zeppelin.rest.SecurityRestApi.getUserList(SecurityRestApi.java:108)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:180)\n\tat org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)\n```\n\n### What type of PR is it?\n[Bug Fix]\n\n### What is the Jira issue?\n* [ZEPPELIN-1136](https://issues.apache.org/jira/browse/ZEPPELIN-1136)\n\n### How should this be tested?\nHave shiro.ini with just following (minimal) content\n\n```\n[urls]\n/api/version = anon\n/** = anon\n#/** = authc\n```\n\nand observe in logs, there should be no error logs.\n\n### Questions:\n* Does the licenses files need update? n/a\n* Is there breaking changes for older versions? n/a\n* Does this needs documentation? n/a\n\nAuthor: Prabhjyot Singh <prabhjyotsingh@gmail.com>\n\nCloses #1154 from prabhjyotsingh/ZEPPELIN-1136 and squashes the following commits:\n\n6aa03ea [Prabhjyot Singh] add unit test for search API\naf461f0 [Prabhjyot Singh] ZEPPELIN-1136 NPE in Zeppelin Logs",
        "parent": "https://github.com/apache/zeppelin/commit/df8c36defdc85a2c618c5b654e72edd8e4b6ee3b",
        "patched_files": [
            "SecurityRestApi.java",
            "GetUserList.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "SecurityRestApiTest.java"
        ]
    },
    "zeppelin_d47418b": {
        "bug_id": "zeppelin_d47418b",
        "commit": "https://github.com/apache/zeppelin/commit/d47418bb4fecc8587da8cebd70d99cf34f6eb288",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/d47418bb4fecc8587da8cebd70d99cf34f6eb288/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java?ref=d47418bb4fecc8587da8cebd70d99cf34f6eb288",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "patch": "@@ -627,7 +627,8 @@ public void putNoteInterpreterSettingBinding(String noteId,\n \n   public void removeNoteInterpreterSettingBinding(String noteId) {\n     synchronized (interpreterSettings) {\n-      List<String> settingIds = interpreterBindings.remove(noteId);\n+      List<String> settingIds = (interpreterBindings.containsKey(noteId) ?\n+          interpreterBindings.remove(noteId) : Collections.<String>emptyList());\n       for (String settingId : settingIds) {\n         this.removeInterpretersForNote(get(settingId), noteId);\n       }",
                "raw_url": "https://github.com/apache/zeppelin/raw/d47418bb4fecc8587da8cebd70d99cf34f6eb288/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java",
                "sha": "7df7bb39e501e06d3c3f085d54a72e480c3a57e8",
                "status": "modified"
            }
        ],
        "message": "Fix removing notes without specified interpreter settings\n\n### What is this PR for?\nThis PR fixes incorrect behavior when trying to remove note without saving its interpreter binding settings.\n\n### What type of PR is it?\nBug Fix\n\n### Todos\n* [x] - don't let null return value\n\n### What is the Jira issue?\n[ZEPPELIN-765] (https://issues.apache.org/jira/browse/ZEPPELIN-765)\n\n### How should this be tested?\nTry to remove some notebook without saving its interpreter bindings when first entering it\n\n### Screenshots (if appropriate)\nBefore:\n![remove_before](https://cloud.githubusercontent.com/assets/1642088/14064278/8f1737ea-f438-11e5-978c-44cdaddfd94f.gif)\n\nAfter:\n![remove_after](https://cloud.githubusercontent.com/assets/1642088/14064281/9a034e6e-f438-11e5-999f-e4cc802b234a.gif)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Khalid Huseynov <khalidhnv@nflabs.com>\n\nCloses #798 from khalidhuseynov/fix/remove-note-binding-npe and squashes the following commits:\n\n4efb77b [Khalid Huseynov] fix warning\n71a0308 [Khalid Huseynov] dont return null for bindings",
        "parent": "https://github.com/apache/zeppelin/commit/c4917ade11c07b005af7859fc1d70dc3d2058ec2",
        "patched_files": [
            "InterpreterFactory.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "InterpreterFactoryTest.java"
        ]
    },
    "zeppelin_ddf2c89": {
        "bug_id": "zeppelin_ddf2c89",
        "commit": "https://github.com/apache/zeppelin/commit/ddf2c89ec364b28665a42145a832f6416341c771",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java",
                "patch": "@@ -40,7 +40,7 @@ public static void setUp() {\n     Properties p = new Properties();\n     flink = new FlinkInterpreter(p);\n     flink.open();\n-    context = new InterpreterContext(null, null, null, null, null, null, null, null, null);\n+    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null);\n   }\n \n   @AfterClass",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java",
                "sha": "5a915424b953a049267b062534aa538b23469043",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/hive/src/test/java/org/apache/zeppelin/hive/HiveInterpreterTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/hive/src/test/java/org/apache/zeppelin/hive/HiveInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 7,
                "filename": "hive/src/test/java/org/apache/zeppelin/hive/HiveInterpreterTest.java",
                "patch": "@@ -79,9 +79,9 @@ public void readTest() throws IOException {\n     HiveInterpreter t = new HiveInterpreter(properties);\n     t.open();\n \n-    assertTrue(t.interpret(\"show databases\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null)).message().contains(\"SCHEMA_NAME\"));\n+    assertTrue(t.interpret(\"show databases\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null)).message().contains(\"SCHEMA_NAME\"));\n     assertEquals(\"ID\\tNAME\\na\\ta_name\\nb\\tb_name\\n\",\n-        t.interpret(\"select * from test_table\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null)).message());\n+        t.interpret(\"select * from test_table\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null)).message());\n   }\n \n   @Test\n@@ -101,7 +101,7 @@ public void readTestWithConfiguration() throws IOException {\n     t.open();\n \n     assertEquals(\"ID\\tNAME\\na\\ta_name\\nb\\tb_name\\n\",\n-        t.interpret(\"(h2)\\n select * from test_table\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null)).message());\n+        t.interpret(\"(h2)\\n select * from test_table\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null)).message());\n   }\n \n   @Test\n@@ -117,13 +117,13 @@ public void jdbcRestart() throws IOException, SQLException, ClassNotFoundExcepti\n     t.open();\n \n     InterpreterResult interpreterResult =\n-        t.interpret(\"select * from test_table\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null));\n+        t.interpret(\"select * from test_table\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null));\n     assertEquals(\"ID\\tNAME\\na\\ta_name\\nb\\tb_name\\n\", interpreterResult.message());\n \n     t.getConnection(\"default\").close();\n \n     interpreterResult =\n-        t.interpret(\"select * from test_table\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null));\n+        t.interpret(\"select * from test_table\", new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null));\n     assertEquals(\"ID\\tNAME\\na\\ta_name\\nb\\tb_name\\n\", interpreterResult.message());\n   }\n \n@@ -139,7 +139,7 @@ public void test() throws IOException {\n     HiveInterpreter t = new HiveInterpreter(properties);\n     t.open();\n \n-    InterpreterContext interpreterContext = new InterpreterContext(null, \"a\", null, null, null, null, null, null, null);\n+    InterpreterContext interpreterContext = new InterpreterContext(null, \"a\", null, null, null, null, null, null, null, null);\n \n     //simple select test\n     InterpreterResult result = t.interpret(\"select * from test_table\", interpreterContext);\n@@ -193,4 +193,4 @@ public void getPropertyKey() {\n     assertEquals(\"get key of default\", \"default\", hi.getPropertyKey(testCommand));\n     hi.close();\n   }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/hive/src/test/java/org/apache/zeppelin/hive/HiveInterpreterTest.java",
                "sha": "8f1285df98ff28cf672aa4abfbb2c29bcf7c1f7a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java",
                "patch": "@@ -40,7 +40,7 @@\n   private static final String HOST = \"127.0.0.1:47500..47509\";\n \n   private static final InterpreterContext INTP_CONTEXT =\n-          new InterpreterContext(null, null, null, null, null, null, null, null, null);\n+          new InterpreterContext(null, null, null, null, null, null, null, null, null, null);\n \n   private IgniteInterpreter intp;\n   private Ignite ignite;",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java",
                "sha": "5976e217b33aed71b71b55372755c22df4994d47",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java",
                "patch": "@@ -44,7 +44,7 @@\n   private static final String HOST = \"127.0.0.1:47500..47509\";\n \n   private static final InterpreterContext INTP_CONTEXT =\n-          new InterpreterContext(null, null, null, null, null, null, null, null, null);\n+          new InterpreterContext(null, null, null, null, null, null, null, null, null, null);\n \n   private Ignite ignite;\n   private IgniteSqlInterpreter intp;",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java",
                "sha": "7f665236130d502d8918eb25263fd2d1584bf092",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 2,
                "filename": "jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
                "patch": "@@ -94,7 +94,7 @@ public void testSelectQuery() throws SQLException, IOException {\n \n     String sqlQuery = \"select * from test_table\";\n \n-    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null));\n+    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null));\n \n     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());\n     assertEquals(InterpreterResult.Type.TABLE, interpreterResult.type());\n@@ -116,7 +116,7 @@ public void testSelectQueryMaxResult() throws SQLException, IOException {\n \n     String sqlQuery = \"select * from test_table\";\n \n-    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null));\n+    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null));\n \n     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());\n     assertEquals(InterpreterResult.Type.TABLE, interpreterResult.type());",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
                "sha": "049b137055be8c67aa40d77d16d673f6f02deca3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java",
                "patch": "@@ -64,7 +64,7 @@ public void setUp() throws Exception {\n     InterpreterGroup intpGroup = new InterpreterGroup();\n     context = new InterpreterContext(\"note\", \"id\", \"title\", \"text\",\n         new HashMap<String, Object>(), new GUI(), new AngularObjectRegistry(\n-            intpGroup.getId(), null),\n+            intpGroup.getId(), null), null,\n         new LinkedList<InterpreterContextRunner>(), null);\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java",
                "sha": "1a6f2b9ce5ef9591e914d171d2e26ace9435a102",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java",
                "changes": 63,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 2,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java",
                "patch": "@@ -26,7 +26,6 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n@@ -44,15 +43,19 @@\n import org.apache.zeppelin.interpreter.InterpreterContextRunner;\n import org.apache.zeppelin.interpreter.InterpreterException;\n import org.apache.zeppelin.spark.dep.SparkDependencyResolver;\n+import org.apache.zeppelin.resource.Resource;\n+import org.apache.zeppelin.resource.ResourcePool;\n+import org.apache.zeppelin.resource.ResourceSet;\n \n import scala.Tuple2;\n import scala.Unit;\n import scala.collection.Iterable;\n+import scala.collection.JavaConversions;\n \n /**\n  * Spark context for zeppelin.\n  */\n-public class ZeppelinContext extends HashMap<String, Object> {\n+public class ZeppelinContext {\n   private SparkDependencyResolver dep;\n   private InterpreterContext interpreterContext;\n   private int maxResult;\n@@ -632,4 +635,60 @@ private void angularUnbind(String name, String noteId) {\n     AngularObjectRegistry registry = interpreterContext.getAngularObjectRegistry();\n     registry.remove(name, noteId, null);\n   }\n+\n+\n+  /**\n+   * Add object into resource pool\n+   * @param name\n+   * @param value\n+   */\n+  public void put(String name, Object value) {\n+    ResourcePool resourcePool = interpreterContext.getResourcePool();\n+    resourcePool.put(name, value);\n+  }\n+\n+  /**\n+   * Get object from resource pool\n+   * Search local process first and then the other processes\n+   * @param name\n+   * @return null if resource not found\n+   */\n+  public Object get(String name) {\n+    ResourcePool resourcePool = interpreterContext.getResourcePool();\n+    Resource resource = resourcePool.get(name);\n+    if (resource != null) {\n+      return resource.get();\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * Remove object from resourcePool\n+   * @param name\n+   */\n+  public void remove(String name) {\n+    ResourcePool resourcePool = interpreterContext.getResourcePool();\n+    resourcePool.remove(name);\n+  }\n+\n+  /**\n+   * Check if resource pool has the object\n+   * @param name\n+   * @return\n+   */\n+  public boolean containsKey(String name) {\n+    ResourcePool resourcePool = interpreterContext.getResourcePool();\n+    Resource resource = resourcePool.get(name);\n+    return resource != null;\n+  }\n+\n+  /**\n+   * Get all resources\n+   */\n+  public ResourceSet getAll() {\n+    ResourcePool resourcePool = interpreterContext.getResourcePool();\n+    return resourcePool.getAll();\n+  }\n+\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java",
                "sha": "389037bb3e112bce3574e798940314394140e0f4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java",
                "patch": "@@ -60,6 +60,7 @@ public void setUp() throws Exception {\n \n     context = new InterpreterContext(\"note\", \"id\", \"title\", \"text\", new HashMap<String, Object>(), new GUI(),\n         new AngularObjectRegistry(intpGroup.getId(), null),\n+        null,\n         new LinkedList<InterpreterContextRunner>(), null);\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java",
                "sha": "11c0beb16c69b34a5a9b4848cde46887d47829ce",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java",
                "patch": "@@ -79,6 +79,7 @@ public void setUp() throws Exception {\n             new HashMap<String, Object>(),\n             new GUI(),\n             new AngularObjectRegistry(intpGroup.getId(), null),\n+            null,\n             new LinkedList<InterpreterContextRunner>(),\n             new InterpreterOutput(new InterpreterOutputListener() {\n               @Override",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java",
                "sha": "ea08f175c0db771013531c6f9d93694012b79797",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.zeppelin.display.GUI;\n import org.apache.zeppelin.interpreter.*;\n import org.apache.zeppelin.interpreter.InterpreterResult.Type;\n+import org.apache.zeppelin.resource.LocalResourcePool;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -66,6 +67,7 @@ public void setUp() throws Exception {\n     }\n     context = new InterpreterContext(\"note\", \"id\", \"title\", \"text\", new HashMap<String, Object>(), new GUI(),\n         new AngularObjectRegistry(intpGroup.getId(), null),\n+        null,\n         new LinkedList<InterpreterContextRunner>(), new InterpreterOutput(new InterpreterOutputListener() {\n       @Override\n       public void onAppend(InterpreterOutput out, byte[] line) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java",
                "sha": "30de6d6cf0c8b0c4e51399712ae673ecbdac9fc3",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java",
                "patch": "@@ -22,6 +22,7 @@\n \n import org.apache.zeppelin.display.AngularObjectRegistry;\n import org.apache.zeppelin.display.GUI;\n+import org.apache.zeppelin.resource.ResourcePool;\n \n /**\n  * Interpreter context\n@@ -50,6 +51,7 @@ public static void remove() {\n   private final Map<String, Object> config;\n   private GUI gui;\n   private AngularObjectRegistry angularObjectRegistry;\n+  private ResourcePool resourcePool;\n   private List<InterpreterContextRunner> runners;\n \n   public InterpreterContext(String noteId,\n@@ -59,6 +61,7 @@ public InterpreterContext(String noteId,\n                             Map<String, Object> config,\n                             GUI gui,\n                             AngularObjectRegistry angularObjectRegistry,\n+                            ResourcePool resourcePool,\n                             List<InterpreterContextRunner> runners,\n                             InterpreterOutput out\n                             ) {\n@@ -69,6 +72,7 @@ public InterpreterContext(String noteId,\n     this.config = config;\n     this.gui = gui;\n     this.angularObjectRegistry = angularObjectRegistry;\n+    this.resourcePool = resourcePool;\n     this.runners = runners;\n     this.out = out;\n   }\n@@ -102,6 +106,10 @@ public AngularObjectRegistry getAngularObjectRegistry() {\n     return angularObjectRegistry;\n   }\n \n+  public ResourcePool getResourcePool() {\n+    return resourcePool;\n+  }\n+\n   public List<InterpreterContextRunner> getRunners() {\n     return runners;\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java",
                "sha": "fd76912f116173f00e70aba7ce03543755e60d9e",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 4,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "patch": "@@ -17,14 +17,13 @@\n \n package org.apache.zeppelin.interpreter;\n \n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Properties;\n-import java.util.Random;\n+import java.util.*;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.apache.log4j.Logger;\n import org.apache.zeppelin.display.AngularObjectRegistry;\n import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;\n+import org.apache.zeppelin.resource.ResourcePool;\n \n /**\n  * InterpreterGroup is list of interpreters in the same group.\n@@ -37,13 +36,27 @@\n \n   AngularObjectRegistry angularObjectRegistry;\n   RemoteInterpreterProcess remoteInterpreterProcess;    // attached remote interpreter process\n+  ResourcePool resourcePool;\n+\n+  private static final Map<String, InterpreterGroup> allInterpreterGroups =\n+      new ConcurrentHashMap<String, InterpreterGroup>();\n+\n+  public static InterpreterGroup get(String id) {\n+    return allInterpreterGroups.get(id);\n+  }\n+\n+  public static Collection<InterpreterGroup> getAll() {\n+    return new LinkedList(allInterpreterGroups.values());\n+  }\n \n   public InterpreterGroup(String id) {\n     this.id = id;\n+    allInterpreterGroups.put(id, this);\n   }\n \n   public InterpreterGroup() {\n     getId();\n+    allInterpreterGroups.put(id, this);\n   }\n \n   private static String generateId() {\n@@ -135,5 +148,15 @@ public void run() {\n         remoteInterpreterProcess.dereference();\n       }\n     }\n+\n+    allInterpreterGroups.remove(id);\n+  }\n+\n+  public void setResourcePool(ResourcePool resourcePool) {\n+    this.resourcePool = resourcePool;\n+  }\n+\n+  public ResourcePool getResourcePool() {\n+    return resourcePool;\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java",
                "sha": "4d450be15a817f30ead5f6f86b4993da31fb6989",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 3,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "patch": "@@ -147,8 +147,8 @@ private synchronized void init() {\n           for (Interpreter intp : this.getInterpreterGroup()) {\n             logger.info(\"Create remote interpreter {}\", intp.getClassName());\n             property.put(\"zeppelin.interpreter.localRepo\", localRepoPath);\n-            client.createInterpreter(intp.getClassName(), (Map) property);\n-\n+            client.createInterpreter(getInterpreterGroup().getId(),\n+                    intp.getClassName(), (Map) property);\n           }\n         } catch (TException e) {\n           broken = true;\n@@ -176,7 +176,9 @@ public void close() {\n     boolean broken = false;\n     try {\n       client = interpreterProcess.getClient();\n-      client.close(className);\n+      if (client != null) {\n+        client.close(className);\n+      }\n     } catch (TException e) {\n       broken = true;\n       throw new InterpreterException(e);\n@@ -295,6 +297,10 @@ public FormType getFormType() {\n   @Override\n   public int getProgress(InterpreterContext context) {\n     RemoteInterpreterProcess interpreterProcess = getInterpreterProcess();\n+    if (interpreterProcess == null || !interpreterProcess.isRunning()) {\n+      return 0;\n+    }\n+\n     Client client = null;\n     try {\n       client = interpreterProcess.getClient();",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java",
                "sha": "43c934f038e922b6816f52581e439649f7b5869c",
                "status": "modified"
            },
            {
                "additions": 245,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "changes": 245,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "patch": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.interpreter.remote;\n+\n+import com.google.gson.Gson;\n+import org.apache.zeppelin.display.AngularObject;\n+import org.apache.zeppelin.interpreter.InterpreterContextRunner;\n+import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterEvent;\n+import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterEventType;\n+import org.apache.zeppelin.resource.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Thread connection ZeppelinServer -> RemoteInterpreterServer does not provide\n+ * remote method invocation from RemoteInterpreterServer -> ZeppelinServer\n+ *\n+ * This class provides event send and get response from RemoteInterpreterServer to\n+ * ZeppelinServer.\n+ *\n+ * RemoteInterpreterEventPoller is counter part in ZeppelinServer\n+ */\n+public class RemoteInterpreterEventClient implements ResourcePoolConnector {\n+  private final Logger logger = LoggerFactory.getLogger(RemoteInterpreterEvent.class);\n+  private final List<RemoteInterpreterEvent> eventQueue = new LinkedList<RemoteInterpreterEvent>();\n+  private final List<ResourceSet> getAllResourceResponse = new LinkedList<ResourceSet>();\n+  private final Map<ResourceId, Object> getResourceResponse = new HashMap<ResourceId, Object>();\n+  private final Gson gson = new Gson();\n+\n+  /**\n+   * Run paragraph\n+   * @param runner\n+   */\n+  public void run(InterpreterContextRunner runner) {\n+    sendEvent(new RemoteInterpreterEvent(\n+        RemoteInterpreterEventType.RUN_INTERPRETER_CONTEXT_RUNNER,\n+        gson.toJson(runner)));\n+  }\n+\n+  /**\n+   * notify new angularObject creation\n+   * @param object\n+   */\n+  public void angularObjectAdd(AngularObject object) {\n+    sendEvent(new RemoteInterpreterEvent(\n+        RemoteInterpreterEventType.ANGULAR_OBJECT_ADD, gson.toJson(object)));\n+  }\n+\n+  /**\n+   * notify angularObject update\n+   */\n+  public void angularObjectUpdate(AngularObject object) {\n+    sendEvent(new RemoteInterpreterEvent(\n+        RemoteInterpreterEventType.ANGULAR_OBJECT_UPDATE, gson.toJson(object)));\n+  }\n+\n+  /**\n+   * notify angularObject removal\n+   */\n+  public void angularObjectRemove(String name, String noteId, String paragraphId) {\n+    Map<String, String> removeObject = new HashMap<String, String>();\n+    removeObject.put(\"name\", name);\n+    removeObject.put(\"noteId\", noteId);\n+    removeObject.put(\"paragraphId\", paragraphId);\n+\n+    sendEvent(new RemoteInterpreterEvent(\n+        RemoteInterpreterEventType.ANGULAR_OBJECT_REMOVE, gson.toJson(removeObject)));\n+  }\n+\n+\n+  /**\n+   * Get all resources except for specific resourcePool\n+   * @return\n+   */\n+  @Override\n+  public ResourceSet getAllResources() {\n+    // request\n+    sendEvent(new RemoteInterpreterEvent(RemoteInterpreterEventType.RESOURCE_POOL_GET_ALL, null));\n+\n+    synchronized (getAllResourceResponse) {\n+      while (getAllResourceResponse.isEmpty()) {\n+        try {\n+          getAllResourceResponse.wait();\n+        } catch (InterruptedException e) {\n+          logger.warn(e.getMessage(), e);\n+        }\n+      }\n+      ResourceSet resourceSet = getAllResourceResponse.remove(0);\n+      return resourceSet;\n+    }\n+  }\n+\n+  @Override\n+  public Object readResource(ResourceId resourceId) {\n+    logger.debug(\"Request Read Resource {} from ZeppelinServer\", resourceId.getName());\n+    synchronized (getResourceResponse) {\n+      // wait for previous response consumed\n+      while (getResourceResponse.containsKey(resourceId)) {\n+        try {\n+          getResourceResponse.wait();\n+        } catch (InterruptedException e) {\n+          logger.warn(e.getMessage(), e);\n+        }\n+      }\n+\n+      // send request\n+      Gson gson = new Gson();\n+      sendEvent(new RemoteInterpreterEvent(\n+          RemoteInterpreterEventType.RESOURCE_GET,\n+          gson.toJson(resourceId)));\n+\n+      // wait for response\n+      while (!getResourceResponse.containsKey(resourceId)) {\n+        try {\n+          getResourceResponse.wait();\n+        } catch (InterruptedException e) {\n+          logger.warn(e.getMessage(), e);\n+        }\n+      }\n+      Object o = getResourceResponse.remove(resourceId);\n+      getResourceResponse.notifyAll();\n+      return o;\n+    }\n+  }\n+\n+  /**\n+   * Supposed to call from RemoteInterpreterEventPoller\n+   */\n+  public void putResponseGetAllResources(List<String> resources) {\n+    logger.debug(\"ResourceSet from ZeppelinServer\");\n+    ResourceSet resourceSet = new ResourceSet();\n+\n+    for (String res : resources) {\n+      RemoteResource resource = gson.fromJson(res, RemoteResource.class);\n+      resource.setResourcePoolConnector(this);\n+      resourceSet.add(resource);\n+    }\n+\n+    synchronized (getAllResourceResponse) {\n+      getAllResourceResponse.add(resourceSet);\n+      getAllResourceResponse.notify();\n+    }\n+  }\n+\n+  /**\n+   * Supposed to call from RemoteInterpreterEventPoller\n+   * @param resourceId json serialized ResourceId\n+   * @param object java serialized of the object\n+   */\n+  public void putResponseGetResource(String resourceId, ByteBuffer object) {\n+    ResourceId rid = gson.fromJson(resourceId, ResourceId.class);\n+\n+    logger.debug(\"Response resource {} from RemoteInterpreter\", rid.getName());\n+\n+    Object o = null;\n+    try {\n+      o = Resource.deserializeObject(object);\n+    } catch (IOException e) {\n+      logger.error(e.getMessage(), e);\n+    } catch (ClassNotFoundException e) {\n+      logger.error(e.getMessage(), e);\n+    }\n+\n+    synchronized (getResourceResponse) {\n+      getResourceResponse.put(rid, o);\n+      getResourceResponse.notifyAll();\n+    }\n+  }\n+\n+\n+  /**\n+   * Supposed to call from RemoteInterpreterEventPoller\n+   * @return next available event\n+   */\n+  public RemoteInterpreterEvent pollEvent() {\n+    synchronized (eventQueue) {\n+      if (eventQueue.isEmpty()) {\n+        try {\n+          eventQueue.wait(1000);\n+        } catch (InterruptedException e) {\n+        }\n+      }\n+\n+      if (eventQueue.isEmpty()) {\n+        return new RemoteInterpreterEvent(RemoteInterpreterEventType.NO_OP, \"\");\n+      } else {\n+        RemoteInterpreterEvent event = eventQueue.remove(0);\n+        logger.debug(\"Send event {}\", event.getType());\n+        return event;\n+      }\n+    }\n+  }\n+\n+  public void onInterpreterOutputAppend(String noteId, String paragraphId, String output) {\n+    Map<String, String> appendOutput = new HashMap<String, String>();\n+    appendOutput.put(\"noteId\", noteId);\n+    appendOutput.put(\"paragraphId\", paragraphId);\n+    appendOutput.put(\"data\", output);\n+\n+    sendEvent(new RemoteInterpreterEvent(\n+        RemoteInterpreterEventType.OUTPUT_APPEND,\n+        gson.toJson(appendOutput)));\n+  }\n+\n+  public void onInterpreterOutputUpdate(String noteId, String paragraphId, String output) {\n+    Map<String, String> appendOutput = new HashMap<String, String>();\n+    appendOutput.put(\"noteId\", noteId);\n+    appendOutput.put(\"paragraphId\", paragraphId);\n+    appendOutput.put(\"data\", output);\n+\n+    sendEvent(new RemoteInterpreterEvent(\n+        RemoteInterpreterEventType.OUTPUT_UPDATE,\n+        gson.toJson(appendOutput)));\n+  }\n+\n+\n+  private void sendEvent(RemoteInterpreterEvent event) {\n+    synchronized (eventQueue) {\n+      eventQueue.add(event);\n+      eventQueue.notifyAll();\n+    }\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "sha": "158f145de45b7013c87ab3e2f53fea37d72365ce",
                "status": "added"
            },
            {
                "additions": 132,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "changes": 133,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "patch": "@@ -28,13 +28,21 @@\n import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterEvent;\n import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterEventType;\n import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService.Client;\n+import org.apache.zeppelin.resource.Resource;\n+import org.apache.zeppelin.resource.ResourceId;\n+import org.apache.zeppelin.resource.ResourcePool;\n+import org.apache.zeppelin.resource.ResourceSet;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n \n /**\n- *\n+ * Processes message from RemoteInterpreter process\n  */\n public class RemoteInterpreterEventPoller extends Thread {\n   private static final Logger logger = LoggerFactory.getLogger(RemoteInterpreterEventPoller.class);\n@@ -117,6 +125,15 @@ public void run() {\n \n           interpreterProcess.getInterpreterContextRunnerPool().run(\n               runnerFromRemote.getNoteId(), runnerFromRemote.getParagraphId());\n+        } else if (event.getType() == RemoteInterpreterEventType.RESOURCE_POOL_GET_ALL) {\n+          ResourceSet resourceSet = getAllResourcePoolExcept();\n+          sendResourcePoolResponseGetAll(resourceSet);\n+        } else if (event.getType() == RemoteInterpreterEventType.RESOURCE_GET) {\n+          String resourceIdString = event.getData();\n+          ResourceId resourceId = gson.fromJson(resourceIdString, ResourceId.class);\n+          logger.debug(\"RESOURCE_GET {} {}\", resourceId.getResourcePoolId(), resourceId.getName());\n+          Object o = getResource(resourceId);\n+          sendResourceResponseGet(resourceId, o);\n         } else if (event.getType() == RemoteInterpreterEventType.OUTPUT_APPEND) {\n           // on output append\n           Map<String, String> outputAppend = gson.fromJson(\n@@ -143,6 +160,120 @@ public void run() {\n     }\n   }\n \n+  private void sendResourcePoolResponseGetAll(ResourceSet resourceSet) {\n+    Client client = null;\n+    boolean broken = false;\n+    try {\n+      client = interpreterProcess.getClient();\n+      List<String> resourceList = new LinkedList<String>();\n+      Gson gson = new Gson();\n+      for (Resource r : resourceSet) {\n+        resourceList.add(gson.toJson(r));\n+      }\n+      client.resourcePoolResponseGetAll(resourceList);\n+    } catch (Exception e) {\n+      logger.error(e.getMessage(), e);\n+      broken = true;\n+    } finally {\n+      if (client != null) {\n+        interpreterProcess.releaseClient(client, broken);\n+      }\n+    }\n+  }\n+\n+  private ResourceSet getAllResourcePoolExcept() {\n+    ResourceSet resourceSet = new ResourceSet();\n+    for (InterpreterGroup intpGroup : InterpreterGroup.getAll()) {\n+      if (intpGroup.getId().equals(interpreterGroup.getId())) {\n+        continue;\n+      }\n+\n+      RemoteInterpreterProcess remoteInterpreterProcess = intpGroup.getRemoteInterpreterProcess();\n+      if (remoteInterpreterProcess == null) {\n+        ResourcePool localPool = intpGroup.getResourcePool();\n+        if (localPool != null) {\n+          resourceSet.addAll(localPool.getAll());\n+        }\n+      } else if (interpreterProcess.isRunning()) {\n+        Client client = null;\n+        boolean broken = false;\n+        try {\n+          client = remoteInterpreterProcess.getClient();\n+          List<String> resourceList = client.resoucePoolGetAll();\n+          Gson gson = new Gson();\n+          for (String res : resourceList) {\n+            resourceSet.add(gson.fromJson(res, Resource.class));\n+          }\n+        } catch (Exception e) {\n+          logger.error(e.getMessage(), e);\n+          broken = true;\n+        } finally {\n+          if (client != null) {\n+            intpGroup.getRemoteInterpreterProcess().releaseClient(client, broken);\n+          }\n+        }\n+      }\n+    }\n+    return resourceSet;\n+  }\n+\n+\n+\n+  private void sendResourceResponseGet(ResourceId resourceId, Object o) {\n+    Client client = null;\n+    boolean broken = false;\n+    try {\n+      client = interpreterProcess.getClient();\n+      Gson gson = new Gson();\n+      String rid = gson.toJson(resourceId);\n+      ByteBuffer obj;\n+      if (o == null) {\n+        obj = ByteBuffer.allocate(0);\n+      } else {\n+        obj = Resource.serializeObject(o);\n+      }\n+      client.resourceResponseGet(rid, obj);\n+    } catch (Exception e) {\n+      logger.error(e.getMessage(), e);\n+      broken = true;\n+    } finally {\n+      if (client != null) {\n+        interpreterProcess.releaseClient(client, broken);\n+      }\n+    }\n+  }\n+\n+  private Object getResource(ResourceId resourceId) {\n+    InterpreterGroup intpGroup = InterpreterGroup.get(resourceId.getResourcePoolId());\n+    if (intpGroup == null) {\n+      return null;\n+    }\n+    RemoteInterpreterProcess remoteInterpreterProcess = intpGroup.getRemoteInterpreterProcess();\n+    if (remoteInterpreterProcess == null) {\n+      ResourcePool localPool = intpGroup.getResourcePool();\n+      if (localPool != null) {\n+        return localPool.get(resourceId.getName());\n+      }\n+    } else if (interpreterProcess.isRunning()) {\n+      Client client = null;\n+      boolean broken = false;\n+      try {\n+        client = remoteInterpreterProcess.getClient();\n+        ByteBuffer res = client.resourceGet(resourceId.getName());\n+        Object o = Resource.deserializeObject(res);\n+        return o;\n+      } catch (Exception e) {\n+        logger.error(e.getMessage(), e);\n+        broken = true;\n+      } finally {\n+        if (client != null) {\n+          intpGroup.getRemoteInterpreterProcess().releaseClient(client, broken);\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n   private void waitQuietly() {\n     try {\n       synchronized (this) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "sha": "be28bbf1227c522aa3f780823d0002d9ca923e0a",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 2,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "patch": "@@ -149,6 +149,9 @@ public int reference(InterpreterGroup interpreterGroup) {\n   }\n \n   public Client getClient() throws Exception {\n+    if (clientPool == null || clientPool.isClosed()) {\n+      return null;\n+    }\n     return clientPool.borrowObject();\n   }\n \n@@ -191,7 +194,8 @@ public int dereference() {\n         } catch (Exception e) {\n           // safely ignore exception while client.shutdown() may terminates remote process\n           logger.info(\"Exception in RemoteInterpreterProcess while synchronized dereference, can \" +\n-              \"safely ignore exception while client.shutdown() may terminates remote process\", e);\n+              \"safely ignore exception while client.shutdown() may terminates remote process\");\n+          logger.debug(e.getMessage(), e);\n         } finally {\n           if (client != null) {\n             // no longer used\n@@ -303,8 +307,13 @@ public void updateRemoteAngularObject(String name, String noteId, String paragra\n     } catch (TException e) {\n       broken = true;\n       logger.error(\"Can't update angular object\", e);\n+    } catch (NullPointerException e) {\n+      logger.error(\"Remote interpreter process not started\", e);\n+      return;\n     } finally {\n-      releaseClient(client, broken);\n+      if (client != null) {\n+        releaseClient(client, broken);\n+      }\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java",
                "sha": "9a2d503649775f166c39c39b0d1deb29a047d282",
                "status": "modified"
            },
            {
                "additions": 93,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "changes": 163,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 70,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "patch": "@@ -18,9 +18,11 @@\n package org.apache.zeppelin.interpreter.remote;\n \n \n+import java.io.IOException;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.net.URL;\n+import java.nio.ByteBuffer;\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n@@ -39,9 +41,9 @@\n import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterContext;\n import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterEvent;\n-import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterEventType;\n import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult;\n import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;\n+import org.apache.zeppelin.resource.*;\n import org.apache.zeppelin.scheduler.Job;\n import org.apache.zeppelin.scheduler.Job.Status;\n import org.apache.zeppelin.scheduler.JobListener;\n@@ -64,20 +66,18 @@\n \n   InterpreterGroup interpreterGroup;\n   AngularObjectRegistry angularObjectRegistry;\n+  DistributedResourcePool resourcePool;\n   Gson gson = new Gson();\n \n   RemoteInterpreterService.Processor<RemoteInterpreterServer> processor;\n   RemoteInterpreterServer handler;\n   private int port;\n   private TThreadPoolServer server;\n \n-  List<RemoteInterpreterEvent> eventQueue = new LinkedList<RemoteInterpreterEvent>();\n+  RemoteInterpreterEventClient eventClient = new RemoteInterpreterEventClient();\n \n   public RemoteInterpreterServer(int port) throws TTransportException {\n     this.port = port;\n-    interpreterGroup = new InterpreterGroup();\n-    angularObjectRegistry = new AngularObjectRegistry(interpreterGroup.getId(), this);\n-    interpreterGroup.setAngularObjectRegistry(angularObjectRegistry);\n \n     processor = new RemoteInterpreterService.Processor<RemoteInterpreterServer>(this);\n     TServerSocket serverTransport = new TServerSocket(port);\n@@ -93,8 +93,10 @@ public void run() {\n \n   @Override\n   public void shutdown() throws TException {\n-    interpreterGroup.close();\n-    interpreterGroup.destroy();\n+    if (interpreterGroup != null) {\n+      interpreterGroup.close();\n+      interpreterGroup.destroy();\n+    }\n \n     server.stop();\n \n@@ -140,8 +142,18 @@ public static void main(String[] args)\n \n \n   @Override\n-  public void createInterpreter(String className, Map<String, String> properties)\n+  public void createInterpreter(String interpreterGroupId, String className, Map<String, String>\n+          properties)\n       throws TException {\n+\n+    if (interpreterGroup == null) {\n+      interpreterGroup = new InterpreterGroup(interpreterGroupId);\n+      angularObjectRegistry = new AngularObjectRegistry(interpreterGroup.getId(), this);\n+      resourcePool = new DistributedResourcePool(interpreterGroup.getId(), eventClient);\n+      interpreterGroup.setAngularObjectRegistry(angularObjectRegistry);\n+      interpreterGroup.setResourcePool(resourcePool);\n+    }\n+\n     try {\n       Class<Interpreter> replClass = (Class<Interpreter>) Object.class.forName(className);\n       Properties p = new Properties();\n@@ -240,6 +252,7 @@ public RemoteInterpreterResult interpret(String className, String st,\n         context.getGui());\n   }\n \n+\n   class InterpretJobListener implements JobListener {\n \n     @Override\n@@ -383,6 +396,7 @@ private InterpreterContext convert(RemoteInterpreterContext ric) {\n             new TypeToken<Map<String, Object>>() {}.getType()),\n         gson.fromJson(ric.getGui(), GUI.class),\n         interpreterGroup.getAngularObjectRegistry(),\n+        interpreterGroup.getResourcePool(),\n         contextRunners, createInterpreterOutput(ric.getNoteId(), ric.getParagraphId()));\n   }\n \n@@ -391,30 +405,12 @@ private InterpreterOutput createInterpreterOutput(final String noteId, final Str\n     return new InterpreterOutput(new InterpreterOutputListener() {\n       @Override\n       public void onAppend(InterpreterOutput out, byte[] line) {\n-        Map<String, String> appendOutput = new HashMap<String, String>();\n-        appendOutput.put(\"noteId\", noteId);\n-        appendOutput.put(\"paragraphId\", paragraphId);\n-        appendOutput.put(\"data\", new String(line));\n-\n-        Gson gson = new Gson();\n-\n-        sendEvent(new RemoteInterpreterEvent(\n-                RemoteInterpreterEventType.OUTPUT_APPEND,\n-                gson.toJson(appendOutput)));\n+        eventClient.onInterpreterOutputAppend(noteId, paragraphId, new String(line));\n       }\n \n       @Override\n       public void onUpdate(InterpreterOutput out, byte[] output) {\n-        Map<String, String> appendOutput = new HashMap<String, String>();\n-        appendOutput.put(\"noteId\", noteId);\n-        appendOutput.put(\"paragraphId\", paragraphId);\n-        appendOutput.put(\"data\", new String(output));\n-\n-        Gson gson = new Gson();\n-\n-        sendEvent(new RemoteInterpreterEvent(\n-                RemoteInterpreterEventType.OUTPUT_UPDATE,\n-                gson.toJson(appendOutput)));\n+        eventClient.onInterpreterOutputUpdate(noteId, paragraphId, new String(output));\n       }\n     });\n   }\n@@ -431,10 +427,7 @@ public ParagraphRunner(RemoteInterpreterServer server, String noteId, String par\n \n     @Override\n     public void run() {\n-      Gson gson = new Gson();\n-      server.sendEvent(new RemoteInterpreterEvent(\n-          RemoteInterpreterEventType.RUN_INTERPRETER_CONTEXT_RUNNER,\n-          gson.toJson(this)));\n+      server.eventClient.run(this);\n     }\n   }\n \n@@ -451,6 +444,10 @@ private RemoteInterpreterResult convert(InterpreterResult result,\n   @Override\n   public String getStatus(String jobId)\n       throws TException {\n+    if (interpreterGroup == null) {\n+      return \"Unknown\";\n+    }\n+\n     synchronized (interpreterGroup) {\n       for (Interpreter intp : interpreterGroup) {\n         for (Job job : intp.getScheduler().getJobsRunning()) {\n@@ -473,50 +470,28 @@ public String getStatus(String jobId)\n \n   @Override\n   public void onAdd(String interpreterGroupId, AngularObject object) {\n-    sendEvent(new RemoteInterpreterEvent(\n-        RemoteInterpreterEventType.ANGULAR_OBJECT_ADD, gson.toJson(object)));\n+    eventClient.angularObjectAdd(object);\n   }\n \n   @Override\n   public void onUpdate(String interpreterGroupId, AngularObject object) {\n-    sendEvent(new RemoteInterpreterEvent(\n-        RemoteInterpreterEventType.ANGULAR_OBJECT_UPDATE, gson.toJson(object)));\n+    eventClient.angularObjectUpdate(object);\n   }\n \n   @Override\n   public void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId) {\n-    Map<String, String> removeObject = new HashMap<String, String>();\n-    removeObject.put(\"name\", name);\n-    removeObject.put(\"noteId\", noteId);\n-\n-    sendEvent(new RemoteInterpreterEvent(\n-        RemoteInterpreterEventType.ANGULAR_OBJECT_REMOVE, gson.toJson(removeObject)));\n+    eventClient.angularObjectRemove(name, noteId, paragraphId);\n   }\n \n-  private void sendEvent(RemoteInterpreterEvent event) {\n-    synchronized (eventQueue) {\n-      eventQueue.add(event);\n-      eventQueue.notifyAll();\n-    }\n-  }\n \n+  /**\n+   * Poll event from RemoteInterpreterEventPoller\n+   * @return\n+   * @throws TException\n+   */\n   @Override\n   public RemoteInterpreterEvent getEvent() throws TException {\n-    synchronized (eventQueue) {\n-      if (eventQueue.isEmpty()) {\n-        try {\n-          eventQueue.wait(1000);\n-        } catch (InterruptedException e) {\n-          logger.info(\"Exception in RemoteInterpreterServer while getEvent, eventQueue.wait\", e);\n-        }\n-      }\n-\n-      if (eventQueue.isEmpty()) {\n-        return new RemoteInterpreterEvent(RemoteInterpreterEventType.NO_OP, \"\");\n-      } else {\n-        return eventQueue.remove(0);\n-      }\n-    }\n+    return eventClient.pollEvent();\n   }\n \n   /**\n@@ -534,7 +509,7 @@ public void angularObjectUpdate(String name, String noteId, String paragraphId,\n     // first try local objects\n     AngularObject ao = registry.get(name, noteId, paragraphId);\n     if (ao == null) {\n-      logger.error(\"Angular object {} not exists\", name);\n+      logger.debug(\"Angular object {} not exists\", name);\n       return;\n     }\n \n@@ -551,8 +526,8 @@ public void angularObjectUpdate(String name, String noteId, String paragraphId,\n         ao.set(value, false);\n         return;\n       } catch (Exception e) {\n-        // no luck\n-        logger.info(\"Exception in RemoteInterpreterServer while angularObjectUpdate, no luck\", e);\n+        // it's not a previous object's type. proceed to treat as a generic type\n+        logger.debug(e.getMessage(), e);\n       }\n     }\n \n@@ -563,8 +538,8 @@ public void angularObjectUpdate(String name, String noteId, String paragraphId,\n           new TypeToken<Map<String, Object>>() {\n           }.getType());\n       } catch (Exception e) {\n-        // no lock\n-        logger.info(\"Exception in RemoteInterpreterServer while angularObjectUpdate, no lock\", e);\n+        // it's not a generic json object, too. okay, proceed to threat as a string type\n+        logger.debug(e.getMessage(), e);\n       }\n     }\n \n@@ -598,8 +573,8 @@ public void angularObjectAdd(String name, String noteId, String paragraphId, Str\n           new TypeToken<Map<String, Object>>() {\n           }.getType());\n     } catch (Exception e) {\n-      // nolock\n-      logger.info(\"Exception in RemoteInterpreterServer while angularObjectAdd, nolock\", e);\n+      // it's okay. proceed to treat object as a string\n+      logger.debug(e.getMessage(), e);\n     }\n \n     // try string object type at last\n@@ -616,4 +591,52 @@ public void angularObjectRemove(String name, String noteId, String paragraphId)\n     AngularObjectRegistry registry = interpreterGroup.getAngularObjectRegistry();\n     registry.remove(name, noteId, paragraphId, false);\n   }\n+\n+  @Override\n+  public void resourcePoolResponseGetAll(List<String> resources) throws TException {\n+    eventClient.putResponseGetAllResources(resources);\n+  }\n+\n+  /**\n+   * Get payload of resource from remote\n+   * @param resourceId json serialized ResourceId\n+   * @param object java serialized of the object\n+   * @throws TException\n+   */\n+  @Override\n+  public void resourceResponseGet(String resourceId, ByteBuffer object) throws TException {\n+    eventClient.putResponseGetResource(resourceId, object);\n+  }\n+\n+  @Override\n+  public List<String> resoucePoolGetAll() throws TException {\n+    logger.debug(\"Request getAll from ZeppelinServer\");\n+\n+    ResourceSet resourceSet = resourcePool.getAll(false);\n+    List<String> result = new LinkedList<String>();\n+    Gson gson = new Gson();\n+\n+    for (Resource r : resourceSet) {\n+      result.add(gson.toJson(r));\n+    }\n+\n+    return result;\n+  }\n+\n+  @Override\n+  public ByteBuffer resourceGet(String resourceName) throws TException {\n+    logger.debug(\"Request resourceGet {} from ZeppelinServer\", resourceName);\n+    Resource resource = resourcePool.get(resourceName, false);\n+\n+    if (resource == null || resource.get() == null || !resource.isSerializable()) {\n+      return ByteBuffer.allocate(0);\n+    } else {\n+      try {\n+        return Resource.serializeObject(resource.get());\n+      } catch (IOException e) {\n+        logger.error(e.getMessage(), e);\n+        return ByteBuffer.allocate(0);\n+      }\n+    }\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java",
                "sha": "c3a0f9020e9125b3ca39428fd6c3cbd32bb721a0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "patch": "@@ -47,7 +47,8 @@ public static boolean checkIfRemoteEndpointAccessible(String host, int port) {\n       discover.close();\n       return true;\n     } catch (IOException e) {\n-      LOGGER.info(\"Exception in RemoteInterpreterUtils while checkIfRemoteEndpointAccessible\", e);\n+      // end point is not accessible\n+      LOGGER.debug(e.getMessage(), e);\n       return false;\n     }\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "sha": "a66b52ab22914429448ac314c89a78494efd3231",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java",
                "patch": "@@ -51,7 +51,7 @@\n import org.slf4j.LoggerFactory;\n \n @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2016-1-4\")\n+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2016-1-24\")\n public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {\n   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"RemoteInterpreterContext\");\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java",
                "sha": "b6a3da1e4f5b292fa059de26a486e7452dd74f5e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java",
                "patch": "@@ -51,7 +51,7 @@\n import org.slf4j.LoggerFactory;\n \n @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2016-1-4\")\n+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2016-1-24\")\n public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {\n   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"RemoteInterpreterEvent\");\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java",
                "sha": "e560ec886d95d8406390390c6370ac33c566cf1b",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 3,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java",
                "patch": "@@ -34,8 +34,10 @@\n   ANGULAR_OBJECT_UPDATE(3),\n   ANGULAR_OBJECT_REMOVE(4),\n   RUN_INTERPRETER_CONTEXT_RUNNER(5),\n-  OUTPUT_APPEND(6),\n-  OUTPUT_UPDATE(7);\n+  RESOURCE_POOL_GET_ALL(6),\n+  RESOURCE_GET(7),\n+  OUTPUT_APPEND(8),\n+  OUTPUT_UPDATE(9);\n \n   private final int value;\n \n@@ -67,8 +69,12 @@ public static RemoteInterpreterEventType findByValue(int value) {\n       case 5:\n         return RUN_INTERPRETER_CONTEXT_RUNNER;\n       case 6:\n-        return OUTPUT_APPEND;\n+        return RESOURCE_POOL_GET_ALL;\n       case 7:\n+        return RESOURCE_GET;\n+      case 8:\n+        return OUTPUT_APPEND;\n+      case 9:\n         return OUTPUT_UPDATE;\n       default:\n         return null;",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java",
                "sha": "7cb7963130f6b80fce130303324951197db391d3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java",
                "patch": "@@ -51,7 +51,7 @@\n import org.slf4j.LoggerFactory;\n \n @SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n-@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2016-1-4\")\n+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.2)\", date = \"2016-1-24\")\n public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {\n   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"RemoteInterpreterResult\");\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java",
                "sha": "6539756a645fc347dd7aca39b5d66c8413ba6dda",
                "status": "modified"
            },
            {
                "additions": 3790,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "changes": 4179,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 389,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java",
                "sha": "abf4316829ddec946eabe5a66c42ad6c3b5f6123",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ByteBufferInputStream.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ByteBufferInputStream.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ByteBufferInputStream.java",
                "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * InputStream from bytebuffer\n+ */\n+public class ByteBufferInputStream extends InputStream {\n+\n+  ByteBuffer buf;\n+\n+  public ByteBufferInputStream(ByteBuffer buf) {\n+    this.buf = buf;\n+  }\n+\n+  public int read() throws IOException {\n+    if (!buf.hasRemaining()) {\n+      return -1;\n+    }\n+    return buf.get() & 0xFF;\n+  }\n+\n+  public int read(byte[] bytes, int off, int len) throws IOException {\n+    if (!buf.hasRemaining()) {\n+      return -1;\n+    }\n+    len = Math.min(len, buf.remaining());\n+    buf.get(bytes, off, len);\n+    return len;\n+  }\n+\n+  public static InputStream get(ByteBuffer buf) {\n+    if (buf.hasArray()) {\n+      return new ByteArrayInputStream(buf.array());\n+    } else {\n+      return new ByteBufferInputStream(buf);\n+    }\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ByteBufferInputStream.java",
                "sha": "a8becb4aea102b528c95d098d41ef69b1cfedcc3",
                "status": "added"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/DistributedResourcePool.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/DistributedResourcePool.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/DistributedResourcePool.java",
                "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+/**\n+ * distributed resource pool\n+ */\n+public class DistributedResourcePool extends LocalResourcePool {\n+\n+  private final ResourcePoolConnector connector;\n+\n+  public DistributedResourcePool(String id, ResourcePoolConnector connector) {\n+    super(id);\n+    this.connector = connector;\n+  }\n+\n+  @Override\n+  public Resource get(String name) {\n+    return get(name, true);\n+  }\n+\n+  /**\n+   * get resource by name.\n+   * @param name\n+   * @param remote false only return from local resource\n+   * @return null if resource not found.\n+   */\n+  public Resource get(String name, boolean remote) {\n+    // try local first\n+    Resource resource = super.get(name);\n+    if (resource != null) {\n+      return resource;\n+    }\n+\n+    if (remote) {\n+      ResourceSet resources = connector.getAllResources().filterByName(name);\n+      if (resources.isEmpty()) {\n+        return null;\n+      } else {\n+        return resources.get(0);\n+      }\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public ResourceSet getAll() {\n+    return getAll(true);\n+  }\n+\n+  /**\n+   * Get all resource from the pool\n+   * @param remote false only return local resource\n+   * @return\n+   */\n+  public ResourceSet getAll(boolean remote) {\n+    ResourceSet all = super.getAll();\n+    if (remote) {\n+      all.addAll(connector.getAllResources());\n+    }\n+    return all;\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/DistributedResourcePool.java",
                "sha": "3f03b92609e9240ca7f3f93abe37b55536c7ba74",
                "status": "added"
            },
            {
                "additions": 77,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+import java.util.*;\n+\n+/**\n+ * ResourcePool\n+ */\n+public class LocalResourcePool implements ResourcePool {\n+  private final String resourcePoolId;\n+  private final Map<ResourceId, Resource> resources = Collections.synchronizedMap(\n+      new HashMap<ResourceId, Resource>());\n+\n+  /**\n+   * @param id unique id\n+   */\n+  public LocalResourcePool(String id) {\n+    resourcePoolId = id;\n+  }\n+\n+  /**\n+   * Get unique id of this resource pool\n+   * @return\n+   */\n+  @Override\n+  public String id() {\n+    return resourcePoolId;\n+  }\n+\n+  /**\n+   * Get resource\n+   * @return null if resource not found\n+   */\n+  @Override\n+  public Resource get(String name) {\n+    ResourceId resourceId = new ResourceId(resourcePoolId, name);\n+    return resources.get(resourceId);\n+  }\n+\n+  @Override\n+  public ResourceSet getAll() {\n+    return new ResourceSet(resources.values());\n+  }\n+\n+  /**\n+   * Put resource into the pull\n+   * @param\n+   * @param object object to put into the resource\n+   */\n+  @Override\n+  public void put(String name, Object object) {\n+    ResourceId resourceId = new ResourceId(resourcePoolId, name);\n+\n+    Resource resource = new Resource(resourceId, object);\n+    resources.put(resourceId, resource);\n+  }\n+\n+  @Override\n+  public Resource remove(String name) {\n+    return resources.remove(new ResourceId(resourcePoolId, name));\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java",
                "sha": "cc5f7e9515cb70d86bcddff83bc43b8c509b3d4b",
                "status": "added"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/RemoteResource.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/RemoteResource.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/RemoteResource.java",
                "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+/**\n+ * Resource that can retrieve data from remote\n+ */\n+public class RemoteResource extends Resource {\n+  ResourcePoolConnector resourcePoolConnector;\n+\n+  RemoteResource(ResourceId resourceId, Object r) {\n+    super(resourceId, r);\n+  }\n+\n+  RemoteResource(ResourceId resourceId, boolean serializable, String className) {\n+    super(resourceId, serializable, className);\n+  }\n+\n+  @Override\n+  public Object get() {\n+    if (isSerializable()) {\n+      Object o = resourcePoolConnector.readResource(getResourceId());\n+      return o;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public boolean isLocal() {\n+    return false;\n+  }\n+\n+  public ResourcePoolConnector getResourcePoolConnector() {\n+    return resourcePoolConnector;\n+  }\n+\n+  public void setResourcePoolConnector(ResourcePoolConnector resourcePoolConnector) {\n+    this.resourcePoolConnector = resourcePoolConnector;\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/RemoteResource.java",
                "sha": "5a8a9ea11f3341f7a71a09830115f834ae674ab1",
                "status": "added"
            },
            {
                "additions": 132,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java",
                "changes": 132,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java",
                "patch": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+import java.io.*;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Information and reference to the resource\n+ */\n+public class Resource {\n+  private final transient Object r;\n+  private final boolean serializable;\n+  private final ResourceId resourceId;\n+  private final String className;\n+\n+\n+  /**\n+   * Create local resource\n+   * @param resourceId\n+   * @param r must not be null\n+   */\n+  Resource(ResourceId resourceId, Object r) {\n+    this.r = r;\n+    this.resourceId = resourceId;\n+    this.serializable = r instanceof Serializable;\n+    this.className = r.getClass().getName();\n+  }\n+\n+  /**\n+   * Create remote object\n+   * @param resourceId\n+   */\n+  Resource(ResourceId resourceId, boolean serializable, String className) {\n+    this.r = null;\n+    this.resourceId = resourceId;\n+    this.serializable = serializable;\n+    this.className = className;\n+  }\n+\n+  public ResourceId getResourceId() {\n+    return resourceId;\n+  }\n+\n+  public String getClassName() {\n+    return className;\n+  }\n+\n+  /**\n+   *\n+   * @return null when this is remote resource and not serializable.\n+   */\n+  public Object get() {\n+    if (isLocal() || isSerializable()){\n+      return r;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public boolean isSerializable() {\n+    return serializable;\n+  }\n+\n+  /**\n+   * if it is remote object\n+   * @return\n+   */\n+  public boolean isRemote() {\n+    return !isLocal();\n+  }\n+\n+  /**\n+   * Whether it is locally accessible or not\n+   * @return\n+   */\n+  public boolean isLocal() {\n+    return true;\n+  }\n+\n+\n+\n+  public static ByteBuffer serializeObject(Object o) throws IOException {\n+    if (o == null || !(o instanceof Serializable)) {\n+      return null;\n+    }\n+\n+    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+    try {\n+      ObjectOutputStream oos;\n+      oos = new ObjectOutputStream(out);\n+      oos.writeObject(o);\n+      oos.close();\n+      out.close();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+    return ByteBuffer.wrap(out.toByteArray());\n+  }\n+\n+  public static Object deserializeObject(ByteBuffer buf)\n+      throws IOException, ClassNotFoundException {\n+    if (buf == null) {\n+      return null;\n+    }\n+    InputStream ins = ByteBufferInputStream.get(buf);\n+    ObjectInputStream oin;\n+    Object object = null;\n+\n+    oin = new ObjectInputStream(ins);\n+    object = oin.readObject();\n+    oin.close();\n+    ins.close();\n+\n+    return object;\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java",
                "sha": "6988b3ea76288f7529d76a41dc450b1efefbbf05",
                "status": "added"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceId.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceId.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceId.java",
                "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+/**\n+ * Identifying resource\n+ */\n+public class ResourceId {\n+  private final String resourcePoolId;\n+  private final String name;\n+\n+  ResourceId(String resourcePoolId, String name) {\n+    this.resourcePoolId = resourcePoolId;\n+    this.name = name;\n+  }\n+\n+  public String getResourcePoolId() {\n+    return resourcePoolId;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return (resourcePoolId + name).hashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (o instanceof ResourceId) {\n+      ResourceId r = (ResourceId) o;\n+      return (r.name.equals(name) && r.resourcePoolId.equals(resourcePoolId));\n+    } else {\n+      return false;\n+    }\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceId.java",
                "sha": "a0d55e34f62fa488f9d37b5a42a3cd243cd3cd50",
                "status": "added"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java",
                "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+/**\n+ * Interface for ResourcePool\n+ */\n+public interface ResourcePool {\n+  /**\n+   * Get unique id of the resource pool\n+   * @return\n+   */\n+  public String id();\n+\n+  /**\n+   * Get resource from name\n+   * @param name Resource name\n+   * @return null if resource not found\n+   */\n+  public Resource get(String name);\n+\n+  /**\n+   * Get all resources\n+   * @return\n+   */\n+  public ResourceSet getAll();\n+\n+  /**\n+   * Put an object into resource pool\n+   * @param name\n+   * @param object\n+   */\n+  public void put(String name, Object object);\n+\n+  /**\n+   * Remove object\n+   * @param name Resource name to remove\n+   * @return removed Resource. null if resource not found\n+   */\n+  public Resource remove(String name);\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java",
                "sha": "6328b8d88e51308ebaad4b710dccaa7dcd4c0028",
                "status": "added"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+/**\n+ * Connect resource pools running in remote process\n+ */\n+public interface ResourcePoolConnector {\n+  /**\n+   * Get list of resources from all other resource pools in remote processes\n+   * @return\n+   */\n+  public ResourceSet getAllResources();\n+\n+  /**\n+   * Read remote object\n+   * @return\n+   */\n+  public Object readResource(ResourceId id);\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java",
                "sha": "af343db6b14a2d18bae741db9f451385e4986295",
                "status": "added"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceSet.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceSet.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceSet.java",
                "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * List of resources\n+ */\n+public class ResourceSet extends LinkedList<Resource> {\n+\n+  public ResourceSet(Collection<Resource> resources) {\n+    super(resources);\n+  }\n+\n+  public ResourceSet() {\n+    super();\n+  }\n+\n+  public ResourceSet filterByNameRegex(String regex) {\n+    ResourceSet result = new ResourceSet();\n+    for (Resource r : this) {\n+      if (Pattern.matches(regex, r.getResourceId().getName())) {\n+        result.add(r);\n+      }\n+    }\n+    return result;\n+  }\n+\n+  public ResourceSet filterByName(String name) {\n+    ResourceSet result = new ResourceSet();\n+    for (Resource r : this) {\n+      if (r.getResourceId().getName().equals(name)) {\n+        result.add(r);\n+      }\n+    }\n+    return result;\n+  }\n+\n+  public ResourceSet filterByClassnameRegex(String regex) {\n+    ResourceSet result = new ResourceSet();\n+    for (Resource r : this) {\n+      if (Pattern.matches(regex, r.getClassName())) {\n+        result.add(r);\n+      }\n+    }\n+    return result;\n+  }\n+\n+  public ResourceSet filterByClassname(String className) {\n+    ResourceSet result = new ResourceSet();\n+    for (Resource r : this) {\n+      if (r.getClassName().equals(className)) {\n+        result.add(r);\n+      }\n+    }\n+    return result;\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceSet.java",
                "sha": "a03655b9f4a9168a60a455b738c229a377c95a22",
                "status": "added"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 4,
                "filename": "zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "patch": "@@ -43,8 +43,10 @@ enum RemoteInterpreterEventType {\n   ANGULAR_OBJECT_UPDATE = 3,\n   ANGULAR_OBJECT_REMOVE = 4,\n   RUN_INTERPRETER_CONTEXT_RUNNER = 5,\n-  OUTPUT_APPEND = 6,\n-  OUTPUT_UPDATE = 7\n+  RESOURCE_POOL_GET_ALL = 6,\n+  RESOURCE_GET = 7\n+  OUTPUT_APPEND = 8,\n+  OUTPUT_UPDATE = 9\n }\n \n struct RemoteInterpreterEvent {\n@@ -53,7 +55,7 @@ struct RemoteInterpreterEvent {\n }\n \n service RemoteInterpreterService {\n-  void createInterpreter(1: string className, 2: map<string, string> properties);\n+  void createInterpreter(1: string intpGroupId, 2: string className, 3: map<string, string> properties);\n \n   void open(1: string className);\n   void close(1: string className);\n@@ -67,8 +69,18 @@ service RemoteInterpreterService {\n   string getStatus(1:string jobId);\n \n   RemoteInterpreterEvent getEvent();\n+\n+  // as a response, ZeppelinServer send list of resources to Interpreter process\n+  void resourcePoolResponseGetAll(1: list<string> resources);\n+  // as a response, ZeppelinServer send serialized value of resource\n+  void resourceResponseGet(1: string resourceId, 2: binary object);\n+  // get all resources in the interpreter process\n+  list<string> resoucePoolGetAll();\n+  // get value of resource\n+  binary resourceGet(1: string resourceName);\n+\n   void angularObjectUpdate(1: string name, 2: string noteId, 3: string paragraphId, 4: string\n   object);\n   void angularObjectAdd(1: string name, 2: string noteId, 3: string paragraphId, 4: string object);\n   void angularObjectRemove(1: string name, 2: string noteId, 3: string paragraphId);\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "sha": "3d6a62e3f471a91bf1027d8ff65eeec6200767ed",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java",
                "patch": "@@ -27,7 +27,7 @@\n   public void testThreadLocal() {\n     assertNull(InterpreterContext.get());\n \n-    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null));\n+    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null, null));\n     assertNotNull(InterpreterContext.get());\n \n     InterpreterContext.remove();",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java",
                "sha": "40fd2edbfe670d364c0b20a0a47820559b8afcb4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java",
                "patch": "@@ -34,6 +34,8 @@\n import org.apache.zeppelin.interpreter.InterpreterGroup;\n import org.apache.zeppelin.interpreter.InterpreterResult;\n import org.apache.zeppelin.interpreter.remote.mock.MockInterpreterAngular;\n+import org.apache.zeppelin.resource.LocalResourcePool;\n+import org.apache.zeppelin.resource.ResourcePool;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -85,6 +87,7 @@ public void setUp() throws Exception {\n         new HashMap<String, Object>(),\n         new GUI(),\n         new AngularObjectRegistry(intpGroup.getId(), null),\n+        new LocalResourcePool(\"pool1\"),\n         new LinkedList<InterpreterContextRunner>(), null);\n \n     intp.open();\n@@ -93,7 +96,7 @@ public void setUp() throws Exception {\n   @After\n   public void tearDown() throws Exception {\n     intp.close();\n-    intpGroup.clone();\n+    intpGroup.close();\n     intpGroup.destroy();\n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java",
                "sha": "b6801e4fee2f2d11ae8d6ddc1820c7ccbf102fc9",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 8,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "patch": "@@ -71,14 +71,15 @@ private RemoteInterpreter createMockInterpreter() {\n \n   private InterpreterContext createInterpreterContext() {\n     return new InterpreterContext(\n-            \"noteId\",\n-            \"id\",\n-            \"title\",\n-            \"text\",\n-            new HashMap<String, Object>(),\n-            new GUI(),\n-            new AngularObjectRegistry(intpGroup.getId(), null),\n-            new LinkedList<InterpreterContextRunner>(), null);\n+        \"noteId\",\n+        \"id\",\n+        \"title\",\n+        \"text\",\n+        new HashMap<String, Object>(),\n+        new GUI(),\n+        new AngularObjectRegistry(intpGroup.getId(), null),\n+        null,\n+        new LinkedList<InterpreterContextRunner>(), null);\n   }\n \n   @Test",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "sha": "7ebe597b08e7d82f18106565cc173c055d41c2e3",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n import org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA;\n import org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB;\n+import org.apache.zeppelin.resource.LocalResourcePool;\n import org.apache.zeppelin.scheduler.Job;\n import org.apache.zeppelin.scheduler.Job.Status;\n import org.apache.zeppelin.scheduler.Scheduler;\n@@ -123,6 +124,7 @@ public void testRemoteInterperterCall() throws TTransportException, IOException\n             new HashMap<String, Object>(),\n             new GUI(),\n             new AngularObjectRegistry(intpGroup.getId(), null),\n+            new LocalResourcePool(\"pool1\"),\n             new LinkedList<InterpreterContextRunner>(), null));\n \n     intpB.open();\n@@ -156,6 +158,7 @@ public void testRemoteInterperterErrorStatus() throws TTransportException, IOExc\n             new HashMap<String, Object>(),\n             new GUI(),\n             new AngularObjectRegistry(intpGroup.getId(), null),\n+            new LocalResourcePool(\"pool1\"),\n             new LinkedList<InterpreterContextRunner>(), null));\n \n     assertEquals(Code.ERROR, ret.code());\n@@ -204,6 +207,7 @@ public void testRemoteSchedulerSharing() throws TTransportException, IOException\n             new HashMap<String, Object>(),\n             new GUI(),\n             new AngularObjectRegistry(intpGroup.getId(), null),\n+            new LocalResourcePool(\"pool1\"),\n             new LinkedList<InterpreterContextRunner>(), null));\n     assertEquals(\"500\", ret.message());\n \n@@ -216,6 +220,7 @@ public void testRemoteSchedulerSharing() throws TTransportException, IOException\n             new HashMap<String, Object>(),\n             new GUI(),\n             new AngularObjectRegistry(intpGroup.getId(), null),\n+            new LocalResourcePool(\"pool1\"),\n             new LinkedList<InterpreterContextRunner>(), null));\n     assertEquals(\"1000\", ret.message());\n     long end = System.currentTimeMillis();\n@@ -267,6 +272,7 @@ protected Object jobRun() throws Throwable {\n                 new HashMap<String, Object>(),\n                 new GUI(),\n                 new AngularObjectRegistry(intpGroup.getId(), null),\n+                new LocalResourcePool(\"pool1\"),\n                 new LinkedList<InterpreterContextRunner>(), null));\n       }\n \n@@ -301,6 +307,7 @@ protected Object jobRun() throws Throwable {\n                 new HashMap<String, Object>(),\n                 new GUI(),\n                 new AngularObjectRegistry(intpGroup.getId(), null),\n+                new LocalResourcePool(\"pool1\"),\n                 new LinkedList<InterpreterContextRunner>(), null));\n       }\n \n@@ -366,6 +373,7 @@ protected Object jobRun() throws Throwable {\n               new HashMap<String, Object>(),\n               new GUI(),\n               new AngularObjectRegistry(intpGroup.getId(), null),\n+              new LocalResourcePool(\"pool1\"),\n               new LinkedList<InterpreterContextRunner>(), null));\n \n           synchronized (results) {\n@@ -443,6 +451,7 @@ protected Object jobRun() throws Throwable {\n               new HashMap<String, Object>(),\n               new GUI(),\n               new AngularObjectRegistry(intpGroup.getId(), null),\n+              new LocalResourcePool(\"pool1\"),\n               new LinkedList<InterpreterContextRunner>(), null));\n \n           synchronized (results) {\n@@ -541,6 +550,7 @@ protected Object jobRun() throws Throwable {\n                 new HashMap<String, Object>(),\n                 new GUI(),\n                 new AngularObjectRegistry(intpGroup.getId(), null),\n+                new LocalResourcePool(\"pool1\"),\n                 new LinkedList<InterpreterContextRunner>(), null));\n       }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java",
                "sha": "4af9ba47620474d47bd3cc0c1ddb1e11b933745c",
                "status": "modified"
            },
            {
                "additions": 112,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterResourcePool.java",
                "changes": 112,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterResourcePool.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterResourcePool.java",
                "patch": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zeppelin.interpreter.remote.mock;\n+\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.google.gson.Gson;\n+import org.apache.zeppelin.display.AngularObjectRegistry;\n+import org.apache.zeppelin.display.AngularObjectWatcher;\n+import org.apache.zeppelin.interpreter.Interpreter;\n+import org.apache.zeppelin.interpreter.InterpreterContext;\n+import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;\n+import org.apache.zeppelin.interpreter.InterpreterResult;\n+import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n+import org.apache.zeppelin.resource.ResourcePool;\n+\n+public class MockInterpreterResourcePool extends Interpreter {\n+  static {\n+    Interpreter.register(\n+        \"resourcePoolTest\",\n+        \"resourcePool\",\n+        MockInterpreterA.class.getName(),\n+        new InterpreterPropertyBuilder()\n+            .add(\"p1\", \"v1\", \"property1\").build());\n+\n+  }\n+\n+  AtomicInteger numWatch = new AtomicInteger(0);\n+\n+  public MockInterpreterResourcePool(Properties property) {\n+    super(property);\n+  }\n+\n+  @Override\n+  public void open() {\n+  }\n+\n+  @Override\n+  public void close() {\n+\n+  }\n+\n+  @Override\n+  public InterpreterResult interpret(String st, InterpreterContext context) {\n+    String[] stmt = st.split(\" \");\n+    String cmd = stmt[0];\n+    String name = null;\n+    if (stmt.length >= 2) {\n+      name = stmt[1];\n+    }\n+    String value = null;\n+    if (stmt.length == 3) {\n+      value = stmt[2];\n+    }\n+\n+    ResourcePool resourcePool = context.getResourcePool();\n+    Object ret = null;\n+    if (cmd.equals(\"put\")) {\n+      resourcePool.put(name, value);\n+    } else if (cmd.equalsIgnoreCase(\"get\")) {\n+      ret = resourcePool.get(name).get();\n+    } else if (cmd.equals(\"remove\")) {\n+      ret = resourcePool.remove(name);\n+    } else if (cmd.equals(\"getAll\")) {\n+      ret = resourcePool.getAll();\n+    }\n+\n+    try {\n+      Thread.sleep(500); // wait for watcher executed\n+    } catch (InterruptedException e) {\n+    }\n+\n+    Gson gson = new Gson();\n+    return new InterpreterResult(Code.SUCCESS, gson.toJson(ret));\n+  }\n+\n+  @Override\n+  public void cancel(InterpreterContext context) {\n+  }\n+\n+  @Override\n+  public FormType getFormType() {\n+    return FormType.NATIVE;\n+  }\n+\n+  @Override\n+  public int getProgress(InterpreterContext context) {\n+    return 0;\n+  }\n+\n+  @Override\n+  public List<String> completion(String buf, int cursor) {\n+    return null;\n+  }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterResourcePool.java",
                "sha": "1db68ad177f7d8ba71fbc2be466c23d5cde1f1de",
                "status": "added"
            },
            {
                "additions": 201,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java",
                "changes": 201,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java",
                "patch": "@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+import com.google.gson.Gson;\n+import org.apache.zeppelin.display.GUI;\n+import org.apache.zeppelin.interpreter.InterpreterContext;\n+import org.apache.zeppelin.interpreter.InterpreterContextRunner;\n+import org.apache.zeppelin.interpreter.InterpreterGroup;\n+import org.apache.zeppelin.interpreter.InterpreterResult;\n+import org.apache.zeppelin.interpreter.remote.RemoteInterpreter;\n+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller;\n+import org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Unittest for DistributedResourcePool\n+ */\n+public class DistributedResourcePoolTest {\n+  private InterpreterGroup intpGroup1;\n+  private InterpreterGroup intpGroup2;\n+  private HashMap<String, String> env;\n+  private RemoteInterpreter intp1;\n+  private RemoteInterpreter intp2;\n+  private InterpreterContext context;\n+  private RemoteInterpreterEventPoller eventPoller1;\n+  private RemoteInterpreterEventPoller eventPoller2;\n+\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    env = new HashMap<String, String>();\n+    env.put(\"ZEPPELIN_CLASSPATH\", new File(\"./target/test-classes\").getAbsolutePath());\n+\n+    Properties p = new Properties();\n+\n+    intp1 = new RemoteInterpreter(\n+        p,\n+        MockInterpreterResourcePool.class.getName(),\n+        new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n+        \"fake\",\n+        \"fakeRepo\",\n+        env,\n+        10 * 1000,\n+        null\n+    );\n+\n+    intpGroup1 = new InterpreterGroup(\"intpGroup1\");\n+    intpGroup1.add(intp1);\n+    intp1.setInterpreterGroup(intpGroup1);\n+\n+    intp2 = new RemoteInterpreter(\n+        p,\n+        MockInterpreterResourcePool.class.getName(),\n+        new File(\"../bin/interpreter.sh\").getAbsolutePath(),\n+        \"fake\",\n+        \"fakeRepo\",        \n+        env,\n+        10 * 1000,\n+        null\n+    );\n+\n+    intpGroup2 = new InterpreterGroup(\"intpGroup2\");\n+    intpGroup2.add(intp2);\n+    intp2.setInterpreterGroup(intpGroup2);\n+\n+    context = new InterpreterContext(\n+        \"note\",\n+        \"id\",\n+        \"title\",\n+        \"text\",\n+        new HashMap<String, Object>(),\n+        new GUI(),\n+        null,\n+        null,\n+        new LinkedList<InterpreterContextRunner>(),\n+        null);\n+\n+    intp1.open();\n+    intp2.open();\n+\n+    eventPoller1 = new RemoteInterpreterEventPoller(null);\n+    eventPoller1.setInterpreterGroup(intpGroup1);\n+    eventPoller1.setInterpreterProcess(intpGroup1.getRemoteInterpreterProcess());\n+\n+    eventPoller2 = new RemoteInterpreterEventPoller(null);\n+    eventPoller2.setInterpreterGroup(intpGroup2);\n+    eventPoller2.setInterpreterProcess(intpGroup2.getRemoteInterpreterProcess());\n+\n+    eventPoller1.start();\n+    eventPoller2.start();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    eventPoller1.shutdown();\n+    intp1.close();\n+    intpGroup1.close();\n+    intpGroup1.destroy();\n+    eventPoller2.shutdown();\n+    intp2.close();\n+    intpGroup2.close();\n+    intpGroup2.destroy();\n+  }\n+\n+  @Test\n+  public void testRemoteDistributedResourcePool() {\n+    Gson gson = new Gson();\n+    InterpreterResult ret;\n+    intp1.interpret(\"put key1 value1\", context);\n+    intp2.interpret(\"put key2 value2\", context);\n+\n+    ret = intp1.interpret(\"getAll\", context);\n+    assertEquals(2, gson.fromJson(ret.message(), ResourceSet.class).size());\n+\n+    ret = intp2.interpret(\"getAll\", context);\n+    assertEquals(2, gson.fromJson(ret.message(), ResourceSet.class).size());\n+\n+    ret = intp1.interpret(\"get key1\", context);\n+    assertEquals(\"value1\", gson.fromJson(ret.message(), String.class));\n+\n+    ret = intp1.interpret(\"get key2\", context);\n+    assertEquals(\"value2\", gson.fromJson(ret.message(), String.class));\n+  }\n+\n+  @Test\n+  public void testDistributedResourcePool() {\n+    final LocalResourcePool pool2 = new LocalResourcePool(\"pool2\");\n+    final LocalResourcePool pool3 = new LocalResourcePool(\"pool3\");\n+\n+    DistributedResourcePool pool1 = new DistributedResourcePool(\"pool1\", new ResourcePoolConnector() {\n+      @Override\n+      public ResourceSet getAllResources() {\n+        ResourceSet set = pool2.getAll();\n+        set.addAll(pool3.getAll());\n+\n+        ResourceSet remoteSet = new ResourceSet();\n+        Gson gson = new Gson();\n+        for (Resource s : set) {\n+          RemoteResource remoteResource = gson.fromJson(gson.toJson(s), RemoteResource.class);\n+          remoteResource.setResourcePoolConnector(this);\n+          remoteSet.add(remoteResource);\n+        }\n+        return remoteSet;\n+      }\n+\n+      @Override\n+      public Object readResource(ResourceId id) {\n+        if (id.getResourcePoolId().equals(pool2.id())) {\n+          return pool2.get(id.getName()).get();\n+        }\n+        if (id.getResourcePoolId().equals(pool3.id())) {\n+          return pool3.get(id.getName()).get();\n+        }\n+        return null;\n+      }\n+    });\n+\n+    assertEquals(0, pool1.getAll().size());\n+\n+\n+    // test get() can get from pool\n+    pool2.put(\"object1\", \"value2\");\n+    assertEquals(1, pool1.getAll().size());\n+    assertTrue(pool1.get(\"object1\").isRemote());\n+    assertEquals(\"value2\", pool1.get(\"object1\").get());\n+\n+    // test get() is locality aware\n+    pool1.put(\"object1\", \"value1\");\n+    assertEquals(1, pool2.getAll().size());\n+    assertEquals(\"value1\", pool1.get(\"object1\").get());\n+\n+    // test getAll() is locality aware\n+    assertEquals(\"value1\", pool1.getAll().get(0).get());\n+    assertEquals(\"value2\", pool1.getAll().get(1).get());\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java",
                "sha": "bedaa021a66df5888b01c05a0ec56603fd1d57d0",
                "status": "added"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/LocalResourcePoolTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/LocalResourcePoolTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/LocalResourcePoolTest.java",
                "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Unittest for LocalResourcePool\n+ */\n+public class LocalResourcePoolTest {\n+\n+  @Test\n+  public void testGetPutResourcePool() {\n+\n+    LocalResourcePool pool = new LocalResourcePool(\"pool1\");\n+    assertEquals(\"pool1\", pool.id());\n+\n+    assertNull(pool.get(\"notExists\"));\n+    pool.put(\"item1\", \"value1\");\n+    Resource resource = pool.get(\"item1\");\n+    assertNotNull(resource);\n+    assertEquals(pool.id(), resource.getResourceId().getResourcePoolId());\n+    assertEquals(\"value1\", resource.get());\n+    assertTrue(resource.isLocal());\n+    assertTrue(resource.isSerializable());\n+\n+    assertEquals(1, pool.getAll().size());\n+\n+    assertNotNull(pool.remove(\"item1\"));\n+    assertNull(pool.remove(\"item1\"));\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/LocalResourcePoolTest.java",
                "sha": "65d284bafa6056995956b36cbd72a89ed758eb94",
                "status": "added"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/ResourceSetTest.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/ResourceSetTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/ResourceSetTest.java",
                "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Unit test for ResourceSet\n+ */\n+public class ResourceSetTest {\n+\n+  @Test\n+  public void testFilterByName() {\n+    ResourceSet set = new ResourceSet();\n+\n+    set.add(new Resource(new ResourceId(\"poo1\", \"resource1\"), \"value1\"));\n+    set.add(new Resource(new ResourceId(\"poo1\", \"resource2\"), new Integer(2)));\n+    assertEquals(2, set.filterByNameRegex(\".*\").size());\n+    assertEquals(1, set.filterByNameRegex(\"resource1\").size());\n+    assertEquals(1, set.filterByNameRegex(\"resource2\").size());\n+    assertEquals(0, set.filterByNameRegex(\"res\").size());\n+    assertEquals(2, set.filterByNameRegex(\"res.*\").size());\n+  }\n+\n+  @Test\n+  public void testFilterByClassName() {\n+    ResourceSet set = new ResourceSet();\n+\n+    set.add(new Resource(new ResourceId(\"poo1\", \"resource1\"), \"value1\"));\n+    set.add(new Resource(new ResourceId(\"poo1\", \"resource2\"), new Integer(2)));\n+\n+    assertEquals(1, set.filterByClassnameRegex(\".*String\").size());\n+    assertEquals(1, set.filterByClassnameRegex(String.class.getName()).size());\n+    assertEquals(1, set.filterByClassnameRegex(\".*Integer\").size());\n+    assertEquals(1, set.filterByClassnameRegex(Integer.class.getName()).size());\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/ResourceSetTest.java",
                "sha": "ca645250e24f70580a64b89ba70017ba9829395b",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/ResourceTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/ResourceTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/ResourceTest.java",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zeppelin.resource;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test for Resource\n+ */\n+public class ResourceTest {\n+  @Test\n+  public void testSerializeDeserialize() throws IOException, ClassNotFoundException {\n+    ByteBuffer buffer = Resource.serializeObject(\"hello\");\n+    assertEquals(\"hello\", Resource.deserializeObject(buffer));\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/ResourceTest.java",
                "sha": "fb8b27131f682988ae7f76a36253eb2db83a84ec",
                "status": "added"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 3,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "patch": "@@ -34,13 +34,15 @@\n import org.apache.zeppelin.interpreter.InterpreterContextRunner;\n import org.apache.zeppelin.interpreter.InterpreterGroup;\n import org.apache.zeppelin.interpreter.remote.RemoteInterpreter;\n+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;\n import org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA;\n+import org.apache.zeppelin.resource.LocalResourcePool;\n import org.apache.zeppelin.scheduler.Job.Status;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n-public class RemoteSchedulerTest {\n+public class RemoteSchedulerTest implements RemoteInterpreterProcessListener {\n \n   private SchedulerFactory schedulerSvc;\n   private static final int TICK_WAIT = 100;\n@@ -71,7 +73,7 @@ public void test() throws Exception {\n         \"fakeRepo\",\n         env,\n         10 * 1000,\n-        null);\n+        this);\n \n     intpGroup.add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n@@ -104,6 +106,7 @@ protected Object jobRun() throws Throwable {\n             new HashMap<String, Object>(),\n             new GUI(),\n             new AngularObjectRegistry(intpGroup.getId(), null),\n+            new LocalResourcePool(\"pool1\"),\n             new LinkedList<InterpreterContextRunner>(), null));\n         return \"1000\";\n       }\n@@ -155,7 +158,7 @@ public void testAbortOnPending() throws Exception {\n         \"fakeRepo\",\n         env,\n         10 * 1000,\n-        null);\n+        this);\n \n     intpGroup.add(intpA);\n     intpA.setInterpreterGroup(intpGroup);\n@@ -175,6 +178,7 @@ public void testAbortOnPending() throws Exception {\n           new HashMap<String, Object>(),\n           new GUI(),\n           new AngularObjectRegistry(intpGroup.getId(), null),\n+          new LocalResourcePool(\"pool1\"),\n           new LinkedList<InterpreterContextRunner>(), null);\n \n       @Override\n@@ -211,6 +215,7 @@ protected boolean jobAbort() {\n           new HashMap<String, Object>(),\n           new GUI(),\n           new AngularObjectRegistry(intpGroup.getId(), null),\n+          new LocalResourcePool(\"pool1\"),\n           new LinkedList<InterpreterContextRunner>(), null);\n \n       @Override\n@@ -270,4 +275,13 @@ protected boolean jobAbort() {\n     schedulerSvc.removeScheduler(\"test\");\n   }\n \n+  @Override\n+  public void onOutputAppend(String noteId, String paragraphId, String output) {\n+\n+  }\n+\n+  @Override\n+  public void onOutputUpdated(String noteId, String paragraphId, String output) {\n+\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "sha": "2bdcd4ffc1241efc5a05d66b9215033f8e6d8125",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 3,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -493,9 +493,12 @@ public void execute(JobExecutionContext context) throws JobExecutionException {\n       \n       boolean releaseResource = false;\n       try {\n-        releaseResource = (boolean) note.getConfig().get(\"releaseresource\");\n-      } catch (java.lang.ClassCastException e) {\n-        logger.error(e.toString(), e);\n+        Map<String, Object> config = note.getConfig();\n+        if (config != null && config.containsKey(\"releaseresource\")) {\n+          releaseResource = (boolean) note.getConfig().get(\"releaseresource\");\n+        }\n+      } catch (ClassCastException e) {\n+        logger.error(e.getMessage(), e);\n       }\n       if (releaseResource) {\n         for (InterpreterSetting setting : note.getNoteReplLoader().getInterpreterSettings()) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "df80cd01382737a9fa526e23b70e364269abb198",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.zeppelin.interpreter.*;\n import org.apache.zeppelin.interpreter.Interpreter.FormType;\n import org.apache.zeppelin.interpreter.InterpreterResult.Code;\n+import org.apache.zeppelin.resource.ResourcePool;\n import org.apache.zeppelin.scheduler.Job;\n import org.apache.zeppelin.scheduler.JobListener;\n import org.slf4j.Logger;\n@@ -256,10 +257,12 @@ protected boolean jobAbort() {\n \n   private InterpreterContext getInterpreterContext() {\n     AngularObjectRegistry registry = null;\n+    ResourcePool resourcePool = null;\n \n     if (!getNoteReplLoader().getInterpreterSettings().isEmpty()) {\n       InterpreterSetting intpGroup = getNoteReplLoader().getInterpreterSettings().get(0);\n       registry = intpGroup.getInterpreterGroup().getAngularObjectRegistry();\n+      resourcePool = intpGroup.getInterpreterGroup().getResourcePool();\n     }\n \n     List<InterpreterContextRunner> runners = new LinkedList<InterpreterContextRunner>();\n@@ -276,6 +279,7 @@ private InterpreterContext getInterpreterContext() {\n             this.getConfig(),\n             this.settings,\n             registry,\n+            resourcePool,\n             runners,\n             new InterpreterOutput(new InterpreterOutputListener() {\n               @Override",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "sha": "bf17c3580400228855c36d3f10be1e8dd3e3ef9e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java?ref=ddf2c89ec364b28665a42145a832f6416341c771",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "patch": "@@ -62,7 +62,7 @@ public void setUp() throws Exception {\n     conf = new ZeppelinConfiguration();\n     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + \"/local-repo\");\n     factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, depResolver);\n-    context = new InterpreterContext(\"note\", \"id\", \"title\", \"text\", null, null, null, null, null);\n+    context = new InterpreterContext(\"note\", \"id\", \"title\", \"text\", null, null, null, null, null, null);\n \n   }\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/ddf2c89ec364b28665a42145a832f6416341c771/zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java",
                "sha": "d9e965e82afeccfb3b063eb4e4cb1e2841ef970f",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-619] Shared Resource pool across interpreter processes\n\n### What is this PR for?\nThis is sub task of https://issues.apache.org/jira/browse/ZEPPELIN-533.\nIt provides shared resource pool to exchange data across interpreter processes.\n\n### What type of PR is it?\nFeature\n\n### Is there a relevant Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-619\n\n### How should this be tested?\ncreate two different spark interpreter settings.\ncreate two different notebooks each bind different spark interpreter setting.\n\nput an object from one notebook.\nread the object from the other notebook. (from the other interpreter process)\n\nSee screenshot\n\n### Screenshots (if appropriate)\n![resource_pool](https://cloud.githubusercontent.com/assets/1540981/12409095/db4e142e-be1b-11e5-91e2-4b91c5b39dc3.gif)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? javadoc included.\n\nAuthor: Lee moon soo <moon@apache.org>\n\nThis patch had conflicts when merged, resolved by\nCommitter: Lee moon soo <moon@apache.org>\n\nCloses #655 from Leemoonsoo/resource_pool and squashes the following commits:\n\n7b53f8b [Lee moon soo] Fix style\n27b2ac5 [Lee moon soo] connector.getAllResourceExcept(id()) -> connector.getAllResource()\nf46abd7 [Lee moon soo] Refactor get() method\n2945a90 [Lee moon soo] ConcurrentHashMap instead of Collections.synchronizedMap()\n8150466 [Lee moon soo] Remove synchronize block\n6ac84e1 [Lee moon soo] Nullcheck before access InterpreterGroup\nc96c168 [Lee moon soo] Merge branch 'master' into resource_pool\nc3cb0d6 [Lee moon soo] Handling exception\n14269d9 [Lee moon soo] Handling NPE\n0d15577 [Lee moon soo] Add license header\n0af0cd0 [Lee moon soo] null check interpreterGroup. Do not log expected exceptions\n9d288fe [Lee moon soo] update test\n263f580 [Lee moon soo] ZeppelinContext provides api for resource pool\nb85dc59 [Lee moon soo] Fix test\n2be9902 [Lee moon soo] Update test\n0f6cb98 [Lee moon soo] distributed resource pool across interpreter processes\n91f75e0 [Lee moon soo] distributed resource pool",
        "parent": "https://github.com/apache/zeppelin/commit/218a3b5bca1dcbc3746b653a6db568bebf40720e",
        "patched_files": [
            "RemoteInterpreterServer.java",
            "RemoteInterpreterEventType.java",
            "DepInterpreter.java",
            "FlinkInterpreter.java",
            "RemoteInterpreterEventPoller.java",
            "InterpreterFactory.java",
            "InterpreterGroup.java",
            "LocalResourcePool.java",
            "RemoteInterpreterProcess.java",
            "RemoteInterpreterEvent.java",
            "ZeppelinContext.java",
            "RemoteInterpreterService.java",
            "RemoteInterpreter.java",
            "RemoteInterpreterContext.java",
            "JDBCInterpreter.java",
            "HiveInterpreter.java",
            "DistributedResourcePool.java",
            "ScaldingInterpreter.java",
            "RemoteInterpreterEventClient.java",
            "Notebook.java",
            "ResourceId.java",
            "RemoteInterpreterUtils.java",
            "InterpreterContext.java",
            "RemoteInterpreterResult.java",
            "ByteBufferInputStream.java",
            "SparkInterpreter.java",
            "IgniteSqlInterpreter.java",
            "SparkSqlInterpreter.java",
            "Paragraph.java",
            "Resource.java",
            "RemoteAngularObject.java",
            "RemoteScheduler.java",
            "ResourcePool.java",
            "MockInterpreterResourcePool.java",
            "IgniteInterpreter.java",
            "ResourcePoolConnector.java",
            "ResourceSet.java",
            "RemoteResource.java",
            "RemoteInterpreterService.thrift",
            "RemoteInterpreterOutputTestStream.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "ScaldingInterpreterTest.java",
            "SparkInterpreterTest.java",
            "IgniteInterpreterTest.java",
            "ResourceTest.java",
            "RemoteInterpreterServerTest.java",
            "IgniteSqlInterpreterTest.java",
            "HiveInterpreterTest.java",
            "RemoteInterpreterTest.java",
            "InterpreterFactoryTest.java",
            "FlinkInterpreterTest.java",
            "SparkSqlInterpreterTest.java",
            "RemoteInterpreterProcessTest.java",
            "InterpreterContextTest.java",
            "RemoteInterpreterUtilsTest.java",
            "NotebookTest.java",
            "LocalResourcePoolTest.java",
            "ParagraphTest.java",
            "JDBCInterpreterTest.java",
            "RemoteAngularObjectTest.java",
            "ResourceSetTest.java",
            "RemoteSchedulerTest.java",
            "DepInterpreterTest.java",
            "DistributedResourcePoolTest.java"
        ]
    },
    "zeppelin_df5933d": {
        "bug_id": "zeppelin_df5933d",
        "commit": "https://github.com/apache/zeppelin/commit/df5933d7f99f6d647f23b8e1ed9294a8b5cb563e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/df5933d7f99f6d647f23b8e1ed9294a8b5cb563e/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java?ref=df5933d7f99f6d647f23b8e1ed9294a8b5cb563e",
                "deletions": 1,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "patch": "@@ -422,7 +422,7 @@ public void testRunWithServerRestart() throws Exception {\n       assertEquals(resp.get(\"status\"), \"OK\");\n       post2.releaseConnection();\n \n-      assertEquals(p1.getReturn().toString(), Job.Status.FINISHED, p1.getStatus());\n+      assertEquals(Job.Status.FINISHED, p1.getStatus());\n       assertEquals(p2.getReturn().toString(), Job.Status.FINISHED, p2.getStatus());\n       assertNotNull(p2.getReturn());\n       assertEquals(\"abc\\n\", p2.getReturn().message().get(0).getData());",
                "raw_url": "https://github.com/apache/zeppelin/raw/df5933d7f99f6d647f23b8e1ed9294a8b5cb563e/zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java",
                "sha": "bc3bc04bd1865186ccb87a2c3503a810f3609fe8",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-3984] Flaky test NotebookRestApiTest.testRunWithServerRestart\n\n### What is this PR for?\nThis PR trying to fix flaky test described in https://issues.apache.org/jira/browse/ZEPPELIN-3984\n\n### What type of PR is it?\nImprovement\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-3984\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Lee moon soo <moon@apache.org>\n\nCloses #3456 from Leemoonsoo/ZEPPELIN-3984 and squashes the following commits:\n\n592ad4abb [Lee moon soo] try not make NPE",
        "parent": "https://github.com/apache/zeppelin/commit/0d9239ef333e04e0788dbccfd1d00314b97a4370",
        "patched_files": [
            "NotebookRestApi.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookRestApiTest.java"
        ]
    },
    "zeppelin_e673949": {
        "bug_id": "zeppelin_e673949",
        "commit": "https://github.com/apache/zeppelin/commit/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java?ref=e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "patch": "@@ -125,6 +125,10 @@ public Job(String jobId, String jobName, JobListener listener, long progressUpda\n     setStatus(Status.READY);\n   }\n \n+  public void setId(String id) {\n+    this.id = id;\n+  }\n+\n   public String getId() {\n     return id;\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java",
                "sha": "4be6da5b161aa5acfceb05300bfff6f9e749f15f",
                "status": "modified"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/zeppelin/blob/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java?ref=e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
                "deletions": 18,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "patch": "@@ -116,7 +116,7 @@ String getKey() {\n    * is going on.\n    */\n   final Queue<NotebookSocket> watcherSockets = Queues.newConcurrentLinkedQueue();\n-  \n+\n   private Notebook notebook() {\n     return ZeppelinServer.notebook;\n   }\n@@ -196,7 +196,7 @@ public void onMessage(NotebookSocket conn, String msg) {\n       if (StringUtils.isEmpty(conn.getUser())) {\n         addUserConnection(messagereceived.principal, conn);\n       }\n-      AuthenticationInfo subject = \n+      AuthenticationInfo subject =\n           new AuthenticationInfo(messagereceived.principal, messagereceived.ticket);\n \n       /** Lets be elegant here */\n@@ -261,6 +261,9 @@ public void onMessage(NotebookSocket conn, String msg) {\n           case FOLDER_RENAME:\n             renameFolder(conn, userAndRoles, notebook, messagereceived);\n             break;\n+          case UPDATE_PERSONALIZED_MODE:\n+            updatePersonalizedMode(conn, userAndRoles, notebook, messagereceived);\n+            break;\n           case COMPLETION:\n             completion(conn, userAndRoles, notebook, messagereceived);\n             break;\n@@ -585,7 +588,21 @@ public void broadcastInterpreterBindings(String noteId, List settingList) {\n   }\n \n   public void broadcastParagraph(Note note, Paragraph p) {\n-    broadcast(note.getId(), new Message(OP.PARAGRAPH).put(\"paragraph\", p));\n+    if (note.isPersonalizedMode()) {\n+      broadcastParagraphs(p.getUserParagraphMap(), p);\n+    } else {\n+      broadcast(note.getId(), new Message(OP.PARAGRAPH).put(\"paragraph\", p));\n+    }\n+  }\n+\n+  public void broadcastParagraphs(Map<String, Paragraph> userParagraphMap,\n+      Paragraph defaultParagraph) {\n+    if (null != userParagraphMap) {\n+      for (String user : userParagraphMap.keySet()) {\n+        multicastToUser(user,\n+            new Message(OP.PARAGRAPH).put(\"paragraph\", userParagraphMap.get(user)));\n+      }\n+    }\n   }\n \n   private void broadcastNewParagraph(Note note, Paragraph para) {\n@@ -642,7 +659,7 @@ private void broadcastNoteListExcept(List<Map<String, String>> notesInfo,\n       multicastToUser(user, new Message(OP.NOTES_INFO).put(\"notes\", notesInfo));\n     }\n   }\n-  \n+\n   void permissionError(NotebookSocket conn, String op,\n                        String userName,\n                        Set<String> userAndRoles,\n@@ -680,6 +697,10 @@ private void sendNote(NotebookSocket conn, HashSet<String> userAndRoles, Noteboo\n         return;\n       }\n       addConnectionToNote(note.getId(), conn);\n+\n+      if (note.isPersonalizedMode()) {\n+        note = note.getUserNote(user);\n+      }\n       conn.send(serializeMessage(new Message(OP.NOTE).put(\"note\", note)));\n       sendAllAngularObjects(note, user, conn);\n     } else {\n@@ -753,6 +774,32 @@ private void updateNote(NotebookSocket conn, HashSet<String> userAndRoles,\n     }\n   }\n \n+  private void updatePersonalizedMode(NotebookSocket conn, HashSet<String> userAndRoles,\n+      Notebook notebook, Message fromMessage) throws SchedulerException, IOException {\n+    String noteId = (String) fromMessage.get(\"id\");\n+    String personalized = (String) fromMessage.get(\"personalized\");\n+    boolean isPersonalized = personalized.equals(\"true\") ? true : false;\n+\n+    if (noteId == null) {\n+      return;\n+    }\n+\n+    NotebookAuthorization notebookAuthorization = notebook.getNotebookAuthorization();\n+    if (!notebookAuthorization.isOwner(noteId, userAndRoles)) {\n+      permissionError(conn, \"persoanlized \", fromMessage.principal,\n+          userAndRoles, notebookAuthorization.getOwners(noteId));\n+      return;\n+    }\n+\n+    Note note = notebook.getNote(noteId);\n+    if (note != null) {\n+      note.setPersonalizedMode(isPersonalized);\n+      AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);\n+      note.persist(subject);\n+      broadcastNote(note);\n+    }\n+  }\n+\n   private void renameNote(NotebookSocket conn, HashSet<String> userAndRoles,\n                           Notebook notebook, Message fromMessage)\n       throws SchedulerException, IOException {\n@@ -898,34 +945,44 @@ private void removeNote(NotebookSocket conn, HashSet<String> userAndRoles,\n     broadcastNoteList(subject, userAndRoles);\n   }\n \n-  private void updateParagraph(NotebookSocket conn, HashSet<String> userAndRoles,\n-                               Notebook notebook, Message fromMessage) throws IOException {\n+  private void updateParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Notebook notebook,\n+      Message fromMessage) throws IOException {\n     String paragraphId = (String) fromMessage.get(\"id\");\n     if (paragraphId == null) {\n       return;\n     }\n \n-    Map<String, Object> params = (Map<String, Object>) fromMessage\n-        .get(\"params\");\n-    Map<String, Object> config = (Map<String, Object>) fromMessage\n-        .get(\"config\");\n+    Map<String, Object> params = (Map<String, Object>) fromMessage.get(\"params\");\n+    Map<String, Object> config = (Map<String, Object>) fromMessage.get(\"config\");\n     String noteId = getOpenNoteId(conn);\n     final Note note = notebook.getNote(noteId);\n     NotebookAuthorization notebookAuthorization = notebook.getNotebookAuthorization();\n     AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);\n     if (!notebookAuthorization.isWriter(noteId, userAndRoles)) {\n-      permissionError(conn, \"write\", fromMessage.principal,\n-          userAndRoles, notebookAuthorization.getWriters(noteId));\n+      permissionError(conn, \"write\", fromMessage.principal, userAndRoles,\n+          notebookAuthorization.getWriters(noteId));\n       return;\n     }\n \n     Paragraph p = note.getParagraph(paragraphId);\n+\n+    if (note.isPersonalizedMode()) {\n+      p = p.getUserParagraphMap().get(subject.getUser());\n+    }\n+\n     p.settings.setParams(params);\n     p.setConfig(config);\n     p.setTitle((String) fromMessage.get(\"title\"));\n     p.setText((String) fromMessage.get(\"paragraph\"));\n     note.persist(subject);\n-    broadcastParagraph(note, p);;\n+\n+    if (note.isPersonalizedMode()) {\n+      Map<String, Paragraph> userParagraphMap =\n+          note.getParagraph(paragraphId).getUserParagraphMap();\n+      broadcastParagraphs(userParagraphMap, p);\n+    } else {\n+      broadcastParagraph(note, p);\n+    }\n   }\n \n   private void cloneNote(NotebookSocket conn, HashSet<String> userAndRoles,\n@@ -2006,7 +2063,7 @@ private void getEditorSetting(NotebookSocket conn, Message fromMessage)\n     return;\n   }\n \n-  private void getInterpreterSettings(NotebookSocket conn, AuthenticationInfo subject) \n+  private void getInterpreterSettings(NotebookSocket conn, AuthenticationInfo subject)\n       throws IOException {\n     List<InterpreterSetting> availableSettings = notebook().getInterpreterFactory().get();\n     conn.send(serializeMessage(new Message(OP.INTERPRETER_SETTINGS)\n@@ -2019,7 +2076,7 @@ public void onMetaInfosReceived(String settingId, Map<String, String> metaInfos)\n         .get(settingId);\n     interpreterSetting.setInfos(metaInfos);\n   }\n-  \n+\n   private void switchConnectionToWatcher(NotebookSocket conn, Message messagereceived)\n       throws IOException {\n     if (!isSessionAllowedToSwitchToWatcher(conn)) {\n@@ -2033,19 +2090,19 @@ private void switchConnectionToWatcher(NotebookSocket conn, Message messagerecei\n       return;\n     }\n     watcherSockets.add(conn);\n-    \n+\n     // remove this connection from regular zeppelin ws usage.\n     removeConnectionFromAllNote(conn);\n     connectedSockets.remove(conn);\n     removeUserConnection(conn.getUser(), conn);\n   }\n-  \n+\n   private boolean isSessionAllowedToSwitchToWatcher(NotebookSocket session) {\n     String watcherSecurityKey = session.getRequest().getHeader(WatcherSecurityKey.HTTP_HEADER);\n     return !(StringUtils.isBlank(watcherSecurityKey)\n         || !watcherSecurityKey.equals(WatcherSecurityKey.getKey()));\n   }\n-  \n+\n   private void broadcastToWatchers(String noteId, String subject, Message message) {\n     synchronized (watcherSockets) {\n       if (watcherSockets.isEmpty()) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "sha": "81f466a33a75e883831bad4782ce5de4ed5d2745",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/zeppelin/blob/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/notebook/notebook-actionBar.html?ref=e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "patch": "@@ -66,6 +66,23 @@ <h3>\n               tooltip-placement=\"bottom\" tooltip=\"Export this note\">\n         <i class=\"fa fa-download\"></i>\n       </button>\n+\n+      <button type=\"button\"\n+              class=\"btn btn-primary btn-xs\"\n+              ng-if=\"ticket.principal && ticket.principal !== 'anonymous'\"\n+              ng-hide=\"viewOnly || note.config.personalizedMode !== 'true'\"\n+              ng-click=\"toggleNotePersonalizedMode()\"\n+              tooltip-placement=\"bottom\" tooltip=\"Personal mode {{isOwner ? '' : '(owner can change)'}}\">\n+        <i class=\"fa fa-user\"></i>\n+      </button>\n+      <button type=\"button\"\n+              class=\"btn btn-default btn-xs\"\n+              ng-if=\"ticket.principal && ticket.principal !== 'anonymous'\"\n+              ng-hide=\"viewOnly || note.config.personalizedMode === 'true'\"\n+              ng-click=\"toggleNotePersonalizedMode()\"\n+              tooltip-placement=\"bottom\" tooltip=\"Collaboration mode {{isOwner ? '' : '(owner can change)'}}\">\n+        <i class=\"fa fa-users\"></i>\n+      </button>\n     </span>\n \n     <span class=\"labelBtn btn-group\" role=\"group\">",
                "raw_url": "https://github.com/apache/zeppelin/raw/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-web/src/app/notebook/notebook-actionBar.html",
                "sha": "88e47b92ad8b9557722a3bdba25ded2c8363cf72",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/zeppelin/blob/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-web/src/app/notebook/notebook.controller.js",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/notebook/notebook.controller.js?ref=e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
                "deletions": 0,
                "filename": "zeppelin-web/src/app/notebook/notebook.controller.js",
                "patch": "@@ -614,6 +614,7 @@\n           minimumInputLength: 3\n         };\n \n+        $scope.setIamOwner();\n         angular.element('#selectOwners').select2(selectJson);\n         angular.element('#selectReaders').select2(selectJson);\n         angular.element('#selectWriters').select2(selectJson);\n@@ -752,6 +753,39 @@\n       }\n     };\n \n+    $scope.setIamOwner = function() {\n+      if ($scope.permissions.owners.length > 0 &&\n+          _.indexOf($scope.permissions.owners, $rootScope.ticket.principal) < 0) {\n+        $scope.isOwner = false;\n+        return false;\n+      }\n+      $scope.isOwner = true;\n+      return true;\n+    };\n+\n+    $scope.toggleNotePersonalizedMode = function() {\n+      var personalizedMode = $scope.note.config.personalizedMode;\n+      if ($scope.isOwner) {\n+        BootstrapDialog.confirm({\n+          closable: true,\n+          title: 'Setting the result display',\n+          message: function(dialog) {\n+            var modeText = $scope.note.config.personalizedMode === 'true' ? 'collaborate' : 'personalize';\n+            return 'Do you want to <span class=\"text-info\">' + modeText + '</span> your analysis?';\n+          },\n+          callback: function(result) {\n+            if (result) {\n+              if ($scope.note.config.personalizedMode === undefined) {\n+                $scope.note.config.personalizedMode = 'false';\n+              }\n+              $scope.note.config.personalizedMode = personalizedMode === 'true' ?  'false' : 'true';\n+              websocketMsgSrv.updatePersonalizedMode($scope.note.id, $scope.note.config.personalizedMode);\n+            }\n+          }\n+        });\n+      }\n+    };\n+\n     var isSettingDirty = function() {\n       if (angular.equals($scope.interpreterBindings, $scope.interpreterBindingsOrig)) {\n         return false;\n@@ -896,10 +930,16 @@\n \n       if ($scope.note === null) {\n         $scope.note = note;\n+      } else {\n+        $scope.note.config.personalizedMode = note.config.personalizedMode;\n       }\n       initializeLookAndFeel();\n       //open interpreter binding setting when there're none selected\n       getInterpreterBindings();\n+      getPermissions();\n+      var isPersonalized = $scope.note.config.personalizedMode;\n+      isPersonalized = isPersonalized === undefined ?  'false' : isPersonalized;\n+      $scope.note.config.personalizedMode = isPersonalized;\n     });\n \n     $scope.$on('$destroy', function() {",
                "raw_url": "https://github.com/apache/zeppelin/raw/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-web/src/app/notebook/notebook.controller.js",
                "sha": "a5cd83e3b887de95d10b84cabbd5b297b2f9fbaf",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js?ref=e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
                "deletions": 1,
                "filename": "zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "patch": "@@ -970,7 +970,7 @@\n               $scope.dirtyText = undefined;\n               $scope.originalText = angular.copy(data.paragraph.text);\n             } else { // if there're local update, keep it.\n-              $scope.paragraph.text = $scope.dirtyText;\n+              $scope.paragraph.text = data.paragraph.text;\n             }\n           } else {\n             $scope.paragraph.text = data.paragraph.text;",
                "raw_url": "https://github.com/apache/zeppelin/raw/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "sha": "651196c08b979ad1e7919c9e8a9ff08a53877535",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-web/src/components/websocketEvents/websocketMsg.service.js",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/components/websocketEvents/websocketMsg.service.js?ref=e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
                "deletions": 0,
                "filename": "zeppelin-web/src/components/websocketEvents/websocketMsg.service.js",
                "patch": "@@ -59,6 +59,10 @@\n         websocketEvents.sendNewEvent({op: 'NOTE_UPDATE', data: {id: noteId, name: noteName, config: noteConfig}});\n       },\n \n+      updatePersonalizedMode: function(noteId, modeValue) {\n+        websocketEvents.sendNewEvent({op: 'UPDATE_PERSONALIZED_MODE', data: {id: noteId, personalized: modeValue}});\n+      },\n+\n       renameNote: function(noteId, noteName) {\n         websocketEvents.sendNewEvent({op: 'NOTE_RENAME', data: {id: noteId, name: noteName}});\n       },",
                "raw_url": "https://github.com/apache/zeppelin/raw/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-web/src/components/websocketEvents/websocketMsg.service.js",
                "sha": "29479e879fa60cdac8c178ded0279dda1778b0f1",
                "status": "modified"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/zeppelin/blob/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -121,6 +121,21 @@ private String getDefaultInterpreterName() {\n     return null != setting ? setting.getName() : StringUtils.EMPTY;\n   }\n \n+  public boolean isPersonalizedMode() {\n+    Object v = getConfig().get(\"personalizedMode\");\n+    return null != v && \"true\".equals(v);\n+  }\n+\n+  public void setPersonalizedMode(Boolean value) {\n+    String valueString = StringUtils.EMPTY;\n+    if (value) {\n+      valueString = \"true\";\n+    } else {\n+      valueString = \"false\";\n+    }\n+    getConfig().put(\"personalizedMode\", valueString);\n+  }\n+\n   public String getId() {\n     return id;\n   }\n@@ -664,6 +679,31 @@ void unpersist(AuthenticationInfo subject) throws IOException {\n   }\n \n \n+  /**\n+   * Return new note for specific user. this inserts and replaces user paragraph which doesn't\n+   * exists in original paragraph\n+   *\n+   * @param user specific user\n+   * @return new Note for the user\n+   */\n+  public Note getUserNote(String user) {\n+    Note newNote = new Note();\n+    newNote.id = getId();\n+    newNote.config = getConfig();\n+    newNote.angularObjects = getAngularObjects();\n+\n+    Paragraph newParagraph;\n+    for (Paragraph p : paragraphs) {\n+      newParagraph = p.getUserParagraph(user);\n+      if (null == newParagraph) {\n+        newParagraph = p.cloneParagraphForUser(user);\n+      }\n+      newNote.paragraphs.add(newParagraph);\n+    }\n+\n+    return newNote;\n+  }\n+\n   private void startDelayedPersistTimer(int maxDelaySec, final AuthenticationInfo subject) {\n     synchronized (this) {\n       if (delayedPersist != null) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "3daeda0ceab37146293d252da17dbee54ac94668",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/zeppelin/blob/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java?ref=e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
                "deletions": 2,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.zeppelin.notebook;\n \n+import com.google.common.collect.Maps;\n import com.google.common.base.Strings;\n import org.apache.commons.lang.StringUtils;\n import org.apache.zeppelin.display.AngularObject;\n@@ -55,13 +56,14 @@\n   private transient InterpreterFactory factory;\n   private transient Note note;\n   private transient AuthenticationInfo authenticationInfo;\n+  private transient Map<String, Paragraph> userParagraphMap = Maps.newHashMap(); // personalized\n \n   String title;\n   String text;\n   String user;\n   Date dateUpdated;\n   private Map<String, Object> config; // paragraph configs like isOpen, colWidth, etc\n-  public final GUI settings;          // form and parameter settings\n+  public GUI settings;          // form and parameter settings\n \n   /**\n    * Applicaiton states in this paragraph\n@@ -106,6 +108,30 @@ private static String generateId() {\n            + new Random(System.currentTimeMillis()).nextInt();\n   }\n \n+  public Map<String, Paragraph> getUserParagraphMap() {\n+    return userParagraphMap;\n+  }\n+\n+  public Paragraph getUserParagraph(String user) {\n+    return userParagraphMap.get(user);\n+  }\n+\n+  public Paragraph cloneParagraphForUser(String user) {\n+    Paragraph p = new Paragraph();\n+    p.settings.setParams(Maps.newHashMap(settings.getParams()));\n+    p.settings.setForms(Maps.newHashMap(settings.getForms()));\n+    p.setConfig(Maps.newHashMap(config));\n+    p.setTitle(getTitle());\n+    p.setText(getText());\n+    p.setResult(getReturn());\n+    p.setStatus(getStatus());\n+    p.setId(getId());\n+\n+    userParagraphMap.put(user, p);\n+\n+    return p;\n+  }\n+\n   public String getUser() {\n     return user;\n   }\n@@ -347,7 +373,20 @@ protected Object jobRun() throws Throwable {\n       context.out.flush();\n       List<InterpreterResultMessage> resultMessages = context.out.toInterpreterResultMessage();\n       resultMessages.addAll(ret.message());\n-      return new InterpreterResult(ret.code(), resultMessages);\n+\n+      for (Paragraph p : userParagraphMap.values()) {\n+        p.setText(getText());\n+      }\n+\n+      InterpreterResult res = new InterpreterResult(ret.code(), resultMessages);\n+\n+      Paragraph p = userParagraphMap.get(getUser());\n+      if (null != p) {\n+        p.setResult(res);\n+        p.settings.setParams(settings.getParams());\n+      }\n+\n+      return res;\n     } finally {\n       InterpreterContext.remove();\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "sha": "7e72564331dfea5a742f176cf76ecf5d715e51ef",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java?ref=e673949c61f4f4c65289ca2d6fc426fb4e90a8b2",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "patch": "@@ -55,6 +55,9 @@\n \n     NOTE_RENAME,\n \n+    UPDATE_PERSONALIZED_MODE, // [c-s] update personalized mode (boolean)\n+                              // @param note id and boolean personalized mode value\n+\n     FOLDER_RENAME,\n \n     RUN_PARAGRAPH,    // [c-s] run paragraph",
                "raw_url": "https://github.com/apache/zeppelin/raw/e673949c61f4f4c65289ca2d6fc426fb4e90a8b2/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "sha": "6f36643e90035bda33777d317ecd4963425602c2",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1594] Support personalized mode\n\n### What is this PR for?\nEnabling \"Personalized Mode\" for specific note\n\n### What type of PR is it?\n[Feature]\n\n### Todos\n* [x] - Backend work for supporting that feature\n* [x] - Develop front-end UI\n\n### What is the Jira issue?\n* https://issues.apache.org/jira/browse/ZEPPELIN-1594\n\n### How should this be tested?\n1. config.personalizedMode = true in note.json\n1. Navigate some jobs in two different browser\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Jongyoul Lee <jl@Jongyouls-MacBook-Pro.local>\nAuthor: CloverHearts <cloverheartsdev@gmail.com>\nAuthor: CloverHearts <cloverhearts@users.noreply.github.com>\n\nCloses #1753 from jongyoul/ZEPPELIN-1594 and squashes the following commits:\n\na9d8f7e [CloverHearts] change mode name shared to collaboration and dialog message (#5)\n70f68d8 [Jongyoul Lee] Fixed dynamic forms Fixed NPE while broadcasting userParagraphsMap\n2c7bd39 [CloverHearts] broadcast bugfix\nf59d26a [CloverHearts] implement update personalized mode websocket event in backend\n9fcb7f8 [CloverHearts] implement ui\n20425e7 [CloverHearts] add toggleNotePersonalizedMode and ui\n4fabd88 [Jongyoul Lee] Fixed style\na7c91f1 [Jongyoul Lee] Fixed the bug while not using personalized mode\nf627278 [Jongyoul Lee] Supported personalized mode",
        "parent": "https://github.com/apache/zeppelin/commit/4b5bee4431ad1c935bc6ad1c75fe421950269c9f",
        "patched_files": [
            "Paragraph.java",
            "NotebookServer.java",
            "paragraph.controller.js",
            "notebook-actionBar.html",
            "notebook.controller.js",
            "websocketMsg.service.js",
            "Note.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookServerTest.java",
            "NoteTest.java",
            "ParagraphTest.java"
        ]
    },
    "zeppelin_e7e9e19": {
        "bug_id": "zeppelin_e7e9e19",
        "commit": "https://github.com/apache/zeppelin/commit/e7e9e19cf1be6ada5b5e8d56fc2a7d8809f85f79",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/e7e9e19cf1be6ada5b5e8d56fc2a7d8809f85f79/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java?ref=e7e9e19cf1be6ada5b5e8d56fc2a7d8809f85f79",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "patch": "@@ -797,6 +797,9 @@ public Response runParagraphSynchronously(@PathParam(\"noteId\") String noteId,\n       note.initializeJobListenerForParagraph(paragraph);\n     }\n \n+    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());\n+    paragraph.setAuthenticationInfo(subject);\n+\n     paragraph.run();\n \n     final InterpreterResult result = paragraph.getResult();",
                "raw_url": "https://github.com/apache/zeppelin/raw/e7e9e19cf1be6ada5b5e8d56fc2a7d8809f85f79/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "sha": "2042c4c202413fc908d09d028ae5fea27c1c4eb5",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-3189] NPE on paragraph run via API\n\n### What is this PR for?\nBugfix over NPE when running REST API command to run paragraph synchronously.\n\n### What type of PR is it?\n[Bug Fix]\n\n### Todos\n* [ ] - Task\n\n### What is the Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-3189\n\n### How should this be tested?\n1. Build Zep (mvn clean package -DskipTests)\n2. Start Zep\n3. Run curl command in shell (curl -i -X POST http://localhost:8080/api/notebook/run/{noteId}/{paragraphId}\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update? N\n* Is there breaking changes for older versions? N\n* Does this needs documentation? N\n\nAuthor: Nelson Costa <nelson.costa85@gmail.com>\n\nCloses #2745 from necosta/zeppelin3189 and squashes the following commits:\n\n9d1e2a569 [Nelson Costa] [ZEPPELIN-3189] NPE on paragraph run via API",
        "parent": "https://github.com/apache/zeppelin/commit/7fbb5985ffd13dbdb76e708fcf8f5705b2df0a54",
        "patched_files": [
            "NotebookRestApi.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookRestApiTest.java"
        ]
    },
    "zeppelin_e9caebc": {
        "bug_id": "zeppelin_e9caebc",
        "commit": "https://github.com/apache/zeppelin/commit/e9caebcfa3ca2af272f3d396363052dc27f3945c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "patch": "@@ -377,7 +377,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {\n           \"pyspark \" + sparkInterpreter.getSparkContext().version() + \" is not supported\"));\n       return new InterpreterResult(Code.ERROR, errorMessage);\n     }\n-    String jobGroup = sparkInterpreter.getJobGroup(context);\n+    String jobGroup = Utils.buildJobGroupId(context);\n     ZeppelinContext z = sparkInterpreter.getZeppelinContext();\n     z.setInterpreterContext(context);\n     z.setGui(context.getGui());",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java",
                "sha": "0679fcc7b12c431b2e4a5c4841d6998da8b228dc",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 11,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "patch": "@@ -42,6 +42,8 @@\n import org.apache.spark.scheduler.ActiveJob;\n import org.apache.spark.scheduler.DAGScheduler;\n import org.apache.spark.scheduler.Pool;\n+import org.apache.spark.scheduler.SparkListenerApplicationEnd;\n+import org.apache.spark.scheduler.SparkListenerJobStart;\n import org.apache.spark.sql.SQLContext;\n import org.apache.spark.ui.SparkUI;\n import org.apache.spark.ui.jobs.JobProgressListener;\n@@ -57,6 +59,7 @@\n import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;\n import org.apache.zeppelin.resource.ResourcePool;\n import org.apache.zeppelin.resource.WellKnownResourceName;\n+import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;\n import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;\n import org.apache.zeppelin.scheduler.Scheduler;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n@@ -112,7 +115,7 @@\n \n   private InterpreterOutputStream out;\n   private SparkDependencyResolver dep;\n-  private String sparkUrl;\n+  private static String sparkUrl;\n \n   /**\n    * completer - org.apache.spark.repl.SparkJLineCompletion (scala 2.10)\n@@ -156,7 +159,36 @@ public boolean isSparkContextInitialized() {\n   }\n \n   static JobProgressListener setupListeners(SparkContext context) {\n-    JobProgressListener pl = new JobProgressListener(context.getConf());\n+    JobProgressListener pl = new JobProgressListener(context.getConf()) {\n+      @Override\n+      public synchronized void onJobStart(SparkListenerJobStart jobStart) {\n+        super.onJobStart(jobStart);\n+        int jobId = jobStart.jobId();\n+        String jobGroupId = jobStart.properties().getProperty(\"spark.jobGroup.id\");\n+        String jobUrl = getJobUrl(jobId);\n+        String noteId = Utils.getNoteId(jobGroupId);\n+        String paragraphId = Utils.getParagraphId(jobGroupId);\n+        if (jobUrl != null && noteId != null && paragraphId != null) {\n+          RemoteEventClientWrapper eventClient = ZeppelinContext.getEventClient();\n+          Map<String, String> infos = new java.util.HashMap<>();\n+          infos.put(\"jobUrl\", jobUrl);\n+          infos.put(\"label\", \"SPARK JOB\");\n+          infos.put(\"tooltip\", \"View in Spark web UI\");\n+          if (eventClient != null) {\n+            eventClient.onParaInfosReceived(noteId, paragraphId, infos);\n+          }\n+        }\n+      }\n+\n+      private String getJobUrl(int jobId) {\n+        String jobUrl = null;\n+        if (sparkUrl != null) {\n+          jobUrl = sparkUrl + \"/jobs/job?id=\" + jobId;\n+        }\n+        return jobUrl;\n+      }\n+\n+    };\n     try {\n       Object listenerBus = context.getClass().getMethod(\"listenerBus\").invoke(context);\n \n@@ -950,7 +982,10 @@ public void open() {\n     numReferenceOfSparkContext.incrementAndGet();\n   }\n \n-  private String getSparkUIUrl() {\n+  public String getSparkUIUrl() {\n+    if (sparkUrl != null) {\n+      return sparkUrl;\n+    }\n     Option<SparkUI> sparkUiOption = (Option<SparkUI>) Utils.invokeMethod(sc, \"ui\");\n     SparkUI sparkUi = sparkUiOption.get();\n     String sparkWebUrl = sparkUi.appUIAddress();\n@@ -971,8 +1006,9 @@ public void populateSparkWebUrl(InterpreterContext ctx) {\n       Map<String, String> infos = new java.util.HashMap<>();\n       if (sparkUrl != null) {\n         infos.put(\"url\", sparkUrl);\n-        logger.info(\"Sending metainfos to Zeppelin server: {}\", infos.toString());\n         if (ctx != null && ctx.getClient() != null) {\n+          logger.info(\"Sending metainfos to Zeppelin server: {}\", infos.toString());\n+          getZeppelinContext().setEventClient(ctx.getClient());\n           ctx.getClient().onMetaInfosReceived(infos);\n         }\n       }\n@@ -1105,10 +1141,6 @@ public Object getLastObject() {\n     return obj;\n   }\n \n-  String getJobGroup(InterpreterContext context){\n-    return \"zeppelin-\" + context.getParagraphId();\n-  }\n-\n   /**\n    * Interpret a single line.\n    */\n@@ -1129,7 +1161,7 @@ public InterpreterResult interpret(String line, InterpreterContext context) {\n   public InterpreterResult interpret(String[] lines, InterpreterContext context) {\n     synchronized (this) {\n       z.setGui(context.getGui());\n-      sc.setJobGroup(getJobGroup(context), \"Zeppelin\", false);\n+      sc.setJobGroup(Utils.buildJobGroupId(context), \"Zeppelin\", false);\n       InterpreterResult r = interpretInput(lines, context);\n       sc.clearJobGroup();\n       return r;\n@@ -1252,12 +1284,12 @@ private void putLatestVarInResourcePool(InterpreterContext context) {\n \n   @Override\n   public void cancel(InterpreterContext context) {\n-    sc.cancelJobGroup(getJobGroup(context));\n+    sc.cancelJobGroup(Utils.buildJobGroupId(context));\n   }\n \n   @Override\n   public int getProgress(InterpreterContext context) {\n-    String jobGroup = getJobGroup(context);\n+    String jobGroup = Utils.buildJobGroupId(context);\n     int completedTasks = 0;\n     int totalTasks = 0;\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java",
                "sha": "3c1288e1afc6e419a7f67e25aff7c860f0e3e9c4",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 2,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "patch": "@@ -102,7 +102,12 @@ String getJobGroup(InterpreterContext context){\n   @Override\n   public InterpreterResult interpret(String lines, InterpreterContext interpreterContext) {\n \n-    getSparkInterpreter().populateSparkWebUrl(interpreterContext);\n+    SparkInterpreter sparkInterpreter = getSparkInterpreter();\n+    sparkInterpreter.populateSparkWebUrl(interpreterContext);\n+\n+    String jobGroup = Utils.buildJobGroupId(interpreterContext);\n+    sparkInterpreter.getSparkContext().setJobGroup(jobGroup, \"Zeppelin\", false);\n+\n     String imageWidth = getProperty(\"zeppelin.R.image.width\");\n \n     String[] sl = lines.split(\"\\n\");\n@@ -122,7 +127,6 @@ public InterpreterResult interpret(String lines, InterpreterContext interpreterC\n       }\n     }\n \n-    String jobGroup = getJobGroup(interpreterContext);\n     String setJobGroup = \"\";\n     // assign setJobGroup to dummy__, otherwise it would print NULL for this statement\n     if (Utils.isSpark2()) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java",
                "sha": "16b1a21144f268a35d655e72286f33e2e717e1e9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 7,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "patch": "@@ -45,10 +45,6 @@\n   Logger logger = LoggerFactory.getLogger(SparkSqlInterpreter.class);\n   AtomicInteger num = new AtomicInteger(0);\n \n-  private String getJobGroup(InterpreterContext context){\n-    return \"zeppelin-\" + context.getParagraphId();\n-  }\n-\n   private int maxResult;\n \n   public SparkSqlInterpreter(Properties property) {\n@@ -105,7 +101,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {\n       sc.setLocalProperty(\"spark.scheduler.pool\", null);\n     }\n \n-    sc.setJobGroup(getJobGroup(context), \"Zeppelin\", false);\n+    sc.setJobGroup(Utils.buildJobGroupId(context), \"Zeppelin\", false);\n     Object rdd = null;\n     try {\n       // method signature of sqlc.sql() is changed\n@@ -134,10 +130,11 @@ public InterpreterResult interpret(String st, InterpreterContext context) {\n \n   @Override\n   public void cancel(InterpreterContext context) {\n-    SQLContext sqlc = getSparkInterpreter().getSQLContext();\n+    SparkInterpreter sparkInterpreter = getSparkInterpreter();\n+    SQLContext sqlc = sparkInterpreter.getSQLContext();\n     SparkContext sc = sqlc.sparkContext();\n \n-    sc.cancelJobGroup(getJobGroup(context));\n+    sc.cancelJobGroup(Utils.buildJobGroupId(context));\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java",
                "sha": "1d5282f132e566ed7ae06b73ba9c9e3e3b5e2506",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/Utils.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/Utils.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/Utils.java",
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.zeppelin.spark;\n \n+import org.apache.zeppelin.interpreter.InterpreterContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -106,4 +107,20 @@ static boolean isSpark2() {\n       return false;\n     }\n   }\n+  \n+  public static String buildJobGroupId(InterpreterContext context) {\n+    return \"zeppelin-\" + context.getNoteId() + \"-\" + context.getParagraphId();\n+  }\n+\n+  public static String getNoteId(String jobgroupId) {\n+    int indexOf = jobgroupId.indexOf(\"-\");\n+    int secondIndex = jobgroupId.indexOf(\"-\", indexOf + 1);\n+    return jobgroupId.substring(indexOf + 1, secondIndex);\n+  }\n+\n+  public static String getParagraphId(String jobgroupId) {\n+    int indexOf = jobgroupId.indexOf(\"-\");\n+    int secondIndex = jobgroupId.indexOf(\"-\", indexOf + 1);\n+    return jobgroupId.substring(secondIndex + 1, jobgroupId.length());\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/Utils.java",
                "sha": "17edb0d325704923c3e350a559faaad8437f8f6b",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java",
                "patch": "@@ -46,6 +46,7 @@\n import org.apache.zeppelin.interpreter.InterpreterException;\n import org.apache.zeppelin.interpreter.InterpreterHookRegistry;\n import org.apache.zeppelin.interpreter.RemoteWorksController;\n+import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;\n import org.apache.zeppelin.spark.dep.SparkDependencyResolver;\n import org.apache.zeppelin.resource.Resource;\n import org.apache.zeppelin.resource.ResourcePool;\n@@ -61,6 +62,7 @@\n   // Map interpreter class name (to be used by hook registry) from\n   // given replName in parapgraph\n   private static final Map<String, String> interpreterClassMap;\n+  private static RemoteEventClientWrapper eventClient;\n   static {\n     interpreterClassMap = new HashMap<>();\n     interpreterClassMap.put(\"spark\", \"org.apache.zeppelin.spark.SparkInterpreter\");\n@@ -221,7 +223,7 @@ public static String showDF(SparkContext sc,\n       Object df, int maxResult) {\n     Object[] rows = null;\n     Method take;\n-    String jobGroup = \"zeppelin-\" + interpreterContext.getParagraphId();\n+    String jobGroup = Utils.buildJobGroupId(interpreterContext);\n     sc.setJobGroup(jobGroup, \"Zeppelin\", false);\n \n     try {\n@@ -930,4 +932,21 @@ public ResourceSet getAll() {\n     return resourcePool.getAll();\n   }\n \n+  /**\n+   * Get the event client\n+   */\n+  @ZeppelinApi\n+  public static RemoteEventClientWrapper getEventClient() {\n+    return eventClient;\n+  }\n+\n+  /**\n+   * Set event client\n+   */\n+  @ZeppelinApi\n+  public void setEventClient(RemoteEventClientWrapper eventClient) {\n+    if (ZeppelinContext.eventClient == null) {\n+      ZeppelinContext.eventClient = eventClient;\n+    }\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java",
                "sha": "d62b68e75ff0ca17c5b9822d31447a44e7721d4e",
                "status": "modified"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java",
                "patch": "@@ -23,11 +23,13 @@\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n \n import org.apache.spark.SparkConf;\n import org.apache.spark.SparkContext;\n import org.apache.zeppelin.display.AngularObjectRegistry;\n+import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;\n import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;\n import org.apache.zeppelin.resource.LocalResourcePool;\n import org.apache.zeppelin.resource.WellKnownResourceName;\n@@ -54,6 +56,8 @@\n   public static InterpreterGroup intpGroup;\n   private InterpreterContext context;\n   public static Logger LOGGER = LoggerFactory.getLogger(SparkInterpreterTest.class);\n+  private  static Map<String, Map<String, String>> paraIdToInfosMap =\n+      new HashMap<>();\n \n   /**\n    * Get spark version number as a numerical value.\n@@ -92,14 +96,40 @@ public void setUp() throws Exception {\n       repl.open();\n     }\n \n+    final RemoteEventClientWrapper remoteEventClientWrapper = new RemoteEventClientWrapper() {\n+\n+      @Override\n+      public void onParaInfosReceived(String noteId, String paragraphId,\n+          Map<String, String> infos) {\n+        if (infos != null) {\n+          paraIdToInfosMap.put(paragraphId, infos);\n+        }\n+      }\n+\n+      @Override\n+      public void onMetaInfosReceived(Map<String, String> infos) {\n+      }\n+    };\n     context = new InterpreterContext(\"note\", \"id\", null, \"title\", \"text\",\n         new AuthenticationInfo(),\n         new HashMap<String, Object>(),\n         new GUI(),\n         new AngularObjectRegistry(intpGroup.getId(), null),\n         new LocalResourcePool(\"id\"),\n         new LinkedList<InterpreterContextRunner>(),\n-        new InterpreterOutput(null));\n+        new InterpreterOutput(null)) {\n+        \n+        @Override\n+        public RemoteEventClientWrapper getClient() {\n+          return remoteEventClientWrapper;\n+        }\n+    };\n+    // The first para interpretdr will set the Eventclient wrapper\n+    //SparkInterpreter.interpret(String, InterpreterContext) ->\n+    //SparkInterpreter.populateSparkWebUrl(InterpreterContext) ->\n+    //ZeppelinContext.setEventClient(RemoteEventClientWrapper)\n+    //running a dummy to ensure that we dont have any race conditions among tests\n+    repl.interpret(\"sc\", context);\n   }\n \n   @Test\n@@ -273,4 +303,27 @@ public void testCompletion() {\n     List<InterpreterCompletion> completions = repl.completion(\"sc.\", \"sc.\".length());\n     assertTrue(completions.size() > 0);\n   }\n+\n+  @Test\n+  public void testParagraphUrls() {\n+    String paraId = \"test_para_job_url\";\n+    InterpreterContext intpCtx = new InterpreterContext(\"note\", paraId, null, \"title\", \"text\",\n+        new AuthenticationInfo(),\n+        new HashMap<String, Object>(),\n+        new GUI(),\n+        new AngularObjectRegistry(intpGroup.getId(), null),\n+        new LocalResourcePool(\"id\"),\n+        new LinkedList<InterpreterContextRunner>(),\n+        new InterpreterOutput(null));\n+    repl.interpret(\"sc.parallelize(1 to 10).map(x => {x}).collect\", intpCtx);\n+    Map<String, String> paraInfos = paraIdToInfosMap.get(intpCtx.getParagraphId());\n+    String jobUrl = null;\n+    if (paraInfos != null) {\n+      jobUrl = paraInfos.get(\"jobUrl\");\n+    }\n+    String sparkUIUrl = repl.getSparkUIUrl();\n+    assertNotNull(jobUrl);\n+    assertTrue(jobUrl.startsWith(sparkUIUrl + \"/jobs/job?id=\"));\n+\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java",
                "sha": "8c78b663b2eeb4237598fc203577ababaa569df7",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClient.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClient.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClient.java",
                "patch": "@@ -1,5 +1,6 @@\n package org.apache.zeppelin.interpreter.remote;\n \n+import java.util.HashMap;\n import java.util.Map;\n \n /**\n@@ -21,4 +22,13 @@ public void onMetaInfosReceived(Map<String, String> infos) {\n     client.onMetaInfosReceived(infos);\n   }\n \n+  @Override\n+  public void onParaInfosReceived(String noteId, String paragraphId, Map<String, String> infos) {\n+    Map<String, String> paraInfos =  new HashMap<String, String>(infos);\n+    paraInfos.put(\"noteId\", noteId);\n+    paraInfos.put(\"paraId\", paragraphId);\n+    client.onParaInfosReceived(paraInfos);\n+  }\n+\n+\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClient.java",
                "sha": "5015a3f27dfc42ef9e6173d391e5f18acefd9fac",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java",
                "patch": "@@ -12,4 +12,7 @@\n \n   public void onMetaInfosReceived(Map<String, String> infos);\n \n+  public void onParaInfosReceived(String noteId, String paragraphId,\n+                                            Map<String, String> infos);\n+\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java",
                "sha": "bf36cd6354ffd2512b4f9e3ba500110547c659ff",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "patch": "@@ -470,6 +470,10 @@ public void onMetaInfosReceived(Map<String, String> infos) {\n         gson.toJson(infos)));\n   }\n \n+  public void onParaInfosReceived(Map<String, String> infos) {\n+    sendEvent(new RemoteInterpreterEvent(RemoteInterpreterEventType.PARA_INFOS,\n+        gson.toJson(infos)));\n+  }\n   /**\n    * Wait for eventQueue becomes empty\n    */",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java",
                "sha": "4b721f5ad60fc67f89262437e96c1d3a2a43a0de",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 3,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "patch": "@@ -243,10 +243,20 @@ public void run() {\n           Map<String, String> metaInfos = gson.fromJson(event.getData(),\n               new TypeToken<Map<String, String>>() {\n               }.getType());\n-          String id = interpreterGroup.getId();\n-          int indexOfColon = id.indexOf(\":\");\n-          String settingId = id.substring(0, indexOfColon);\n+          String settingId = RemoteInterpreterUtils.\n+              getInterpreterSettingId(interpreterGroup.getId());\n           listener.onMetaInfosReceived(settingId, metaInfos);\n+        } else if (event.getType() == RemoteInterpreterEventType.PARA_INFOS) {\n+          Map<String, String> paraInfos = gson.fromJson(event.getData(),\n+              new TypeToken<Map<String, String>>() {\n+              }.getType());\n+          String noteId = paraInfos.get(\"noteId\");\n+          String paraId = paraInfos.get(\"paraId\");\n+          String settingId = RemoteInterpreterUtils.\n+              getInterpreterSettingId(interpreterGroup.getId());\n+          if (noteId != null && paraId != null && settingId != null) {\n+            listener.onParaInfosReceived(noteId, paraId, settingId, paraInfos);\n+          }\n         }\n         logger.debug(\"Event from remote process {}\", event.getType());\n       } catch (Exception e) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java",
                "sha": "f46d31af6c2042dc164cb56503e7938513cb9efa",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java",
                "patch": "@@ -40,4 +40,6 @@ public void onGetParagraphRunners(\n     public void onFinished(Object resultObject);\n     public void onError();\n   }\n+  public void onParaInfosReceived(String noteId, String paragraphId,\n+      String interpreterSettingId, Map<String, String> metaInfos);\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java",
                "sha": "0e9dc5128dc2b8b5f5c34a6f746aa03876dda3e4",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.zeppelin.interpreter.remote;\n \n+import org.apache.zeppelin.interpreter.InterpreterGroup;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -63,4 +64,13 @@ public static boolean checkIfRemoteEndpointAccessible(String host, int port) {\n       return false;\n     }\n   }\n+\n+  public static String getInterpreterSettingId(String intpGrpId) {\n+    String settingId = null;\n+    if (intpGrpId != null) {\n+      int indexOfColon = intpGrpId.indexOf(\":\");\n+      settingId = intpGrpId.substring(0, indexOfColon);\n+    }\n+    return settingId;\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java",
                "sha": "8308222d9a846deda6c791ccd570e5f797ce8cd7",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java",
                "patch": "@@ -43,7 +43,8 @@\n   APP_STATUS_UPDATE(12),\n   META_INFOS(13),\n   REMOTE_ZEPPELIN_SERVER_RESOURCE(14),\n-  RESOURCE_INVOKE_METHOD(15);\n+  RESOURCE_INVOKE_METHOD(15),\n+  PARA_INFOS(16);\n \n   private final int value;\n \n@@ -94,6 +95,8 @@ public static RemoteInterpreterEventType findByValue(int value) {\n         return REMOTE_ZEPPELIN_SERVER_RESOURCE;\n       case 15:\n         return RESOURCE_INVOKE_METHOD;\n+      case 16:\n+        return PARA_INFOS;\n       default:\n         return null;\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java",
                "sha": "9e5a0b49f07a9157f1da60fee02549a12265d91d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "patch": "@@ -56,7 +56,8 @@ enum RemoteInterpreterEventType {\n   APP_STATUS_UPDATE = 12,\n   META_INFOS = 13,\n   REMOTE_ZEPPELIN_SERVER_RESOURCE = 14,\n-  RESOURCE_INVOKE_METHOD = 15\n+  RESOURCE_INVOKE_METHOD = 15,\n+  PARA_INFOS = 16\n }\n \n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/main/thrift/RemoteInterpreterService.thrift",
                "sha": "fc09adea5d4d7fadb777b9ce0ca33fcc8b0ec938",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "patch": "@@ -182,4 +182,10 @@ public void onGetParagraphRunners(String noteId, String paragraphId, RemoteWorks\n   public void onRemoteRunParagraph(String noteId, String ParagraphID) throws Exception {\n \n   }\n+\n+  @Override\n+  public void onParaInfosReceived(String noteId, String paragraphId,\n+      String interpreterSettingId, Map<String, String> metaInfos) {\n+  }\n+\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java",
                "sha": "3f865cb370d8f92ba52728af4079b502c9b8bf56",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "patch": "@@ -355,6 +355,10 @@ public void onGetParagraphRunners(String noteId, String paragraphId, RemoteWorks\n \n   @Override\n   public void onRemoteRunParagraph(String noteId, String PsaragraphID) throws Exception {\n+  }\n \n+  @Override\n+  public void onParaInfosReceived(String noteId, String paragraphId, \n+      String interpreterSettingId, Map<String, String> metaInfos) {\n   }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java",
                "sha": "ebb51004285b8866eda15e375dc6fcf451c1f02c",
                "status": "modified"
            },
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/main/java/org/apache/zeppelin/json/NotebookTypeAdapterFactory.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/json/NotebookTypeAdapterFactory.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/json/NotebookTypeAdapterFactory.java",
                "patch": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zeppelin.json;\n+\n+import java.io.IOException;\n+\n+import org.apache.zeppelin.socket.NotebookServer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+/**\n+ * Custom adapter type factory\n+ * Modify the jsonObject before serailaization/deserialization\n+ * Check sample implementation at  {@link NotebookServer}\n+ * @param <C> the type whose json is to be customized for serialization/deserialization\n+ */\n+public class NotebookTypeAdapterFactory<C> implements TypeAdapterFactory {\n+  private final Class<C> customizedClass;\n+\n+  public NotebookTypeAdapterFactory(Class<C> customizedClass) {\n+    this.customizedClass = customizedClass;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  // we use a runtime check to guarantee that 'C' and 'T' are equal\n+  public final <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n+    return type.getRawType() == customizedClass ? (TypeAdapter<T>) customizeTypeAdapter(gson,\n+        (TypeToken<C>) type) : null;\n+  }\n+\n+  private TypeAdapter<C> customizeTypeAdapter(Gson gson, TypeToken<C> type) {\n+    final TypeAdapter<C> delegate = gson.getDelegateAdapter(this, type);\n+    final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);\n+    return new TypeAdapter<C>() {\n+      @Override\n+      public void write(JsonWriter out, C value) throws IOException {\n+        JsonElement tree = delegate.toJsonTree(value);\n+        beforeWrite(value, tree);\n+        elementAdapter.write(out, tree);\n+      }\n+\n+      @Override\n+      public C read(JsonReader in) throws IOException {\n+        JsonElement tree = elementAdapter.read(in);\n+        afterRead(tree);\n+        return delegate.fromJsonTree(tree);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Override this to change {@code toSerialize} before it is written to the\n+   * outgoing JSON stream.\n+   */\n+  protected void beforeWrite(C source, JsonElement toSerialize) {\n+  }\n+\n+  /**\n+   * Override this to change {@code deserialized} before it parsed into the\n+   * application type.\n+   */\n+  protected void afterRead(JsonElement deserialized) {\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/main/java/org/apache/zeppelin/json/NotebookTypeAdapterFactory.java",
                "sha": "a22c03b15186513050ce480b5e060de259821631",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 2,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "patch": "@@ -51,6 +51,7 @@\n import org.apache.zeppelin.rest.message.NewInterpreterSettingRequest;\n import org.apache.zeppelin.rest.message.UpdateInterpreterSettingRequest;\n import org.apache.zeppelin.server.JsonResponse;\n+import org.apache.zeppelin.socket.NotebookServer;\n \n /**\n  * Interpreter Rest API\n@@ -61,14 +62,17 @@\n   private static final Logger logger = LoggerFactory.getLogger(InterpreterRestApi.class);\n \n   private InterpreterFactory interpreterFactory;\n+  private NotebookServer notebookServer;\n \n   Gson gson = new Gson();\n \n   public InterpreterRestApi() {\n   }\n \n-  public InterpreterRestApi(InterpreterFactory interpreterFactory) {\n+  public InterpreterRestApi(InterpreterFactory interpreterFactory,\n+                                      NotebookServer notebookWsServer) {\n     this.interpreterFactory = interpreterFactory;\n+    this.notebookServer = notebookWsServer;\n   }\n \n   /**\n@@ -179,18 +183,20 @@ public Response removeSetting(@PathParam(\"settingId\") String settingId) throws I\n   @ZeppelinApi\n   public Response restartSetting(String message, @PathParam(\"settingId\") String settingId) {\n     logger.info(\"Restart interpreterSetting {}, msg={}\", settingId, message);\n+\n+    InterpreterSetting setting = interpreterFactory.get(settingId);\n     try {\n       RestartInterpreterRequest request = gson.fromJson(message, RestartInterpreterRequest.class);\n \n       String noteId = request == null ? null : request.getNoteId();\n       interpreterFactory.restart(settingId, noteId, SecurityUtils.getPrincipal());\n+      notebookServer.clearParagraphRuntimeInfo(setting);\n \n     } catch (InterpreterException e) {\n       logger.error(\"Exception in InterpreterRestApi while restartSetting \", e);\n       return new JsonResponse<>(Status.NOT_FOUND, e.getMessage(), ExceptionUtils.getStackTrace(e))\n           .build();\n     }\n-    InterpreterSetting setting = interpreterFactory.get(settingId);\n     if (setting == null) {\n       return new JsonResponse<>(Status.NOT_FOUND, \"\", settingId).build();\n     }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java",
                "sha": "57eb8514a317c76b43311d5f19131a96980b3ebe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "patch": "@@ -377,7 +377,7 @@ private static WebAppContext setupWebAppContext(ContextHandlerCollection context\n     HeliumRestApi heliumApi = new HeliumRestApi(helium, notebook);\n     singletons.add(heliumApi);\n \n-    InterpreterRestApi interpreterApi = new InterpreterRestApi(replFactory);\n+    InterpreterRestApi interpreterApi = new InterpreterRestApi(replFactory, notebookWsServer);\n     singletons.add(interpreterApi);\n \n     CredentialRestApi credentialApi = new CredentialRestApi(credentials);",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java",
                "sha": "d236214920c120825e9aea139a187839ec8c0bcf",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.net.URISyntaxException;\n import java.net.UnknownHostException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedList;\n@@ -54,6 +55,7 @@\n import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;\n import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;\n import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;\n+import org.apache.zeppelin.json.NotebookTypeAdapterFactory;\n import org.apache.zeppelin.notebook.JobListenerFactory;\n import org.apache.zeppelin.notebook.Folder;\n import org.apache.zeppelin.notebook.Note;\n@@ -62,6 +64,7 @@\n import org.apache.zeppelin.notebook.NotebookEventListener;\n import org.apache.zeppelin.notebook.Paragraph;\n import org.apache.zeppelin.notebook.ParagraphJobListener;\n+import org.apache.zeppelin.notebook.ParagraphRuntimeInfo;\n import org.apache.zeppelin.notebook.repo.NotebookRepo.Revision;\n import org.apache.zeppelin.notebook.socket.Message;\n import org.apache.zeppelin.notebook.socket.Message.OP;\n@@ -86,6 +89,10 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.Queues;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n import com.google.gson.reflect.TypeToken;\n \n /**\n@@ -113,7 +120,20 @@ String getKey() {\n \n \n   private static final Logger LOG = LoggerFactory.getLogger(NotebookServer.class);\n-  Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").create();\n+  Gson gson = new GsonBuilder()\n+      .registerTypeAdapterFactory(new NotebookTypeAdapterFactory<Paragraph>(Paragraph.class) {\n+        @Override\n+        protected void beforeWrite(Paragraph source, JsonElement toSerialize) {\n+          Map<String, ParagraphRuntimeInfo> runtimeInfos = source.getRuntimeInfos();\n+          if (runtimeInfos != null) {\n+            JsonElement jsonTree = gson.toJsonTree(runtimeInfos);\n+            if (toSerialize instanceof JsonObject) {\n+              JsonObject jsonObj = (JsonObject) toSerialize;\n+              jsonObj.add(\"runtimeInfos\", jsonTree);\n+            }\n+          }\n+        }\n+      }).setDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").create();\n   final Map<String, List<NotebookSocket>> noteSocketMap = new HashMap<>();\n   final Queue<NotebookSocket> connectedSockets = new ConcurrentLinkedQueue<>();\n   final Map<String, Queue<NotebookSocket>> userConnectedSockets = new ConcurrentHashMap<>();\n@@ -2314,4 +2334,52 @@ private void broadcastToWatchers(String noteId, String subject, Message message)\n       }\n     }\n   }\n+\n+  @Override\n+  public void onParaInfosReceived(String noteId, String paragraphId,\n+      String interpreterSettingId, Map<String, String> metaInfos) {\n+    Note note = notebook().getNote(noteId);\n+    if (note != null) {\n+      Paragraph paragraph = note.getParagraph(paragraphId);\n+      if (paragraph != null) {\n+        InterpreterSetting setting = notebook().getInterpreterFactory()\n+                                               .get(interpreterSettingId);\n+        setting.addNoteToPara(noteId, paragraphId);\n+        String label = metaInfos.get(\"label\");\n+        String tooltip = metaInfos.get(\"tooltip\");\n+        List<String> keysToRemove = Arrays.asList(\"noteId\", \"paraId\", \"label\", \"tooltip\");\n+        for (String removeKey : keysToRemove) {\n+          metaInfos.remove(removeKey);\n+        }\n+        paragraph\n+            .updateRuntimeInfos(label, tooltip, metaInfos, setting.getGroup(), setting.getId());\n+        broadcast(\n+            note.getId(),\n+            new Message(OP.PARAS_INFO).put(\"id\", paragraphId).put(\"infos\",\n+                paragraph.getRuntimeInfos()));\n+      }\n+    }\n+  }\n+\n+  public void clearParagraphRuntimeInfo(InterpreterSetting setting) {\n+    Map<String, Set<String>> noteIdAndParaMap = setting.getNoteIdAndParaMap();\n+    if (noteIdAndParaMap != null && !noteIdAndParaMap.isEmpty()) {\n+      for (String noteId : noteIdAndParaMap.keySet()) {\n+        Set<String> paraIdSet = noteIdAndParaMap.get(noteId);\n+        if (paraIdSet != null && !paraIdSet.isEmpty()) {\n+          for (String paraId : paraIdSet) {\n+            Note note = notebook().getNote(noteId);\n+            if (note != null) {\n+              Paragraph paragraph = note.getParagraph(paraId);\n+              if (paragraph != null) {\n+                paragraph.clearRuntimeInfo(setting.getId());\n+                broadcast(noteId, new Message(OP.PARAGRAPH).put(\"paragraph\", paragraph));\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    setting.clearNoteIdAndParaMap();\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java",
                "sha": "e692b12fadfaa4d74d93a0a2db41e0ee1ea0c3ae",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 2,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java",
                "patch": "@@ -64,14 +64,14 @@ protected String getParagraphXPath(int paragraphNo) {\n \n   protected boolean waitForParagraph(final int paragraphNo, final String state) {\n     By locator = By.xpath(getParagraphXPath(paragraphNo)\n-        + \"//div[contains(@class, 'control')]//span[1][contains(.,'\" + state + \"')]\");\n+        + \"//div[contains(@class, 'control')]//span[2][contains(.,'\" + state + \"')]\");\n     WebElement element = pollingWait(locator, MAX_PARAGRAPH_TIMEOUT_SEC);\n     return element.isDisplayed();\n   }\n \n   protected String getParagraphStatus(final int paragraphNo) {\n     By locator = By.xpath(getParagraphXPath(paragraphNo)\n-        + \"//div[contains(@class, 'control')]//span[1]\");\n+        + \"//div[contains(@class, 'control')]/span[2]\");\n \n     return driver.findElement(locator).getText();\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java",
                "sha": "41f4cec48415d26c3a72716549a720e89a4c27f0",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-web/src/app/notebook/paragraph/paragraph-control.html",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/notebook/paragraph/paragraph-control.html?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "zeppelin-web/src/app/notebook/paragraph/paragraph-control.html",
                "patch": "@@ -13,7 +13,27 @@\n -->\n \n <div id=\"{{paragraph.id}}_control\" class=\"control\" ng-show=\"!asIframe\">\n-\n+  <span>\n+    <span ng-show=\"paragraph.runtimeInfos.jobUrl.values.length == 1\">\n+      <a href=\"{{paragraph.runtimeInfos.jobUrl.values[0]}}\" target=\"_blank\" style=\"text-decoration: none;\"\n+         tooltip-placement=\"top\" tooltip=\"{{paragraph.runtimeInfos.jobUrl.tooltip}}\" >\n+        <span class=\"fa fa-tasks\"></span>\n+        {{paragraph.runtimeInfos.jobUrl.label}}\n+      </a>\n+    </span>\n+    <span class=\"dropdown\" ng-show=\"paragraph.runtimeInfos.jobUrl.values.length > 1\">\n+      <span style=\"cursor:pointer;color:#3071A9\" tooltip-placement=\"top\" tooltip=\"{{paragraph.runtimeInfos.jobUrl.tooltip}}\"\n+            data-toggle=\"dropdown\" type=\"button\">\n+        <span class=\"fa fa-tasks\"></span>\n+        {{paragraph.runtimeInfos.jobUrl.label}}S\n+      </span>\n+      <ul class=\"dropdown-menu\" role=\"menu\" style=\"width:200px;z-index:1002\">\n+        <li ng-class=\"{'option-disabled': !noteOperationsAllowed()}\" ng-repeat=\"url in paragraph.runtimeInfos.jobUrl.values\">\n+          <a href=\"{{url}}\" target=\"_blank\"><span class=\"fa fa-external-link-square\"></span> Jobs #{{$index}}</a>\n+        </li>\n+      </ul>\n+    </span>\n+  </span>\n   <span>\n     {{paragraph.status}}\n   </span>\n@@ -31,6 +51,20 @@\n           tooltip=\"Cancel (Ctrl+{{ (isMac ? 'Option' : 'Alt') }}+c)\"\n           ng-click=\"cancelParagraph(paragraph)\"\n           ng-show=\"paragraph.status=='RUNNING' || paragraph.status=='PENDING'\"></span>\n+    <span ng-show=\"paragraph.runtimeInfos.jobUrl.length == 1\">\n+      <a href=\"{{paragraph.runtimeInfos.jobUrl[0]}}\" target=\"_blank\"><span class=\"fa fa-tasks\"></span> Spark job </a>\n+    </span>\n+    <span class=\"dropdown\" ng-show=\"paragraph.runtimeInfos.jobUrl.length > 1\">\n+      <span class=\"fa fa-tasks\" style=\"cursor:pointer;color:#3071A9\" tooltip-placement=\"top\" tooltip=\"Run this paragraph (Shift+Enter)\"\n+          data-toggle=\"dropdown\"\n+          type=\"button\">  Spark Jobs\n+      </span>\n+      <ul class=\"dropdown-menu\" role=\"menu\" style=\"width:200px;z-index:1002\">\n+         <li ng-class=\"{'option-disabled': !noteOperationsAllowed()}\" ng-repeat=\"url in paragraph.runtimeInfos.jobUrl\">\n+           <a href=\"{{url}}\" target=\"_blank\"><span class=\"fa fa-external-link-square\"></span> Jobs #{{$index}}</a>\n+         </li>\n+      </ul>\n+    </span>\n     <span class=\"{{paragraph.config.editorHide ? 'icon-size-fullscreen' : 'icon-size-actual'}}\" style=\"cursor:pointer\" tooltip-placement=\"top\"\n           tooltip=\"{{(paragraph.config.editorHide ? 'Show' : 'Hide')}} editor (Ctrl+{{ (isMac ? 'Option' : 'Alt') }}+e)\"\n           ng-click=\"toggleEditor(paragraph)\"></span>",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-web/src/app/notebook/paragraph/paragraph-control.html",
                "sha": "5f9c4620ae01fda59c310f4674fa128dd4f361da",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 36,
                "filename": "zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "patch": "@@ -1036,6 +1036,12 @@ function ParagraphCtrl($scope, $rootScope, $route, $window, $routeParams, $locat\n     }\n   });\n \n+  $scope.$on('updateParaInfos', function(event, data) {\n+    if (data.id === $scope.paragraph.id) {\n+      $scope.paragraph.runtimeInfos = data.infos;\n+    }\n+  });\n+\n   $scope.$on('angularObjectRemove', function(event, data) {\n     var noteId = $route.current.pathParams.noteId;\n     if (!data.noteId || data.noteId === noteId) {\n@@ -1083,7 +1089,8 @@ function ParagraphCtrl($scope, $rootScope, $route, $window, $routeParams, $locat\n       isEmpty(newPara.results) !== isEmpty(oldPara.results) ||\n       newPara.errorMessage !== oldPara.errorMessage ||\n       !angular.equals(newPara.settings, oldPara.settings) ||\n-      !angular.equals(newPara.config, oldPara.config)))\n+      !angular.equals(newPara.config, oldPara.config) ||\n+      !angular.equals(newPara.runtimeInfos, oldPara.runtimeInfos)))\n   }\n \n   $scope.updateAllScopeTexts = function(oldPara, newPara) {\n@@ -1126,46 +1133,47 @@ function ParagraphCtrl($scope, $rootScope, $route, $window, $routeParams, $locat\n       $scope.paragraph.results = newPara.results;\n     }\n     $scope.paragraph.settings = newPara.settings;\n+    $scope.paragraph.runtimeInfos = newPara.runtimeInfos;\n     if ($scope.editor) {\n       $scope.editor.setReadOnly($scope.isRunning(newPara));\n     }\n \n     if (!$scope.asIframe) {\n-      $scope.paragraph.config = newPara.config;\n-      initializeDefault(newPara.config);\n-    } else {\n-      newPara.config.editorHide = true;\n-      newPara.config.tableHide = false;\n-      $scope.paragraph.config = newPara.config;\n-    }\n-  };\n-\n-  $scope.updateParagraph = function(oldPara, newPara, updateCallback) {\n-    // 1. get status, refreshed\n-    const statusChanged = (newPara.status !== oldPara.status);\n-    const resultRefreshed = (newPara.dateFinished !== oldPara.dateFinished) ||\n-      isEmpty(newPara.results) !== isEmpty(oldPara.results) ||\n-      newPara.status === 'ERROR' || (newPara.status === 'FINISHED' && statusChanged);\n-\n-    // 2. update texts managed by $scope\n-    $scope.updateAllScopeTexts(oldPara, newPara);\n-\n-    // 3. execute callback to update result\n-    updateCallback();\n-\n-    // 4. update remaining paragraph objects\n-    $scope.updateParagraphObjectWhenUpdated(newPara);\n-\n-    // 5. handle scroll down by key properly if new paragraph is added\n-    if (statusChanged || resultRefreshed) {\n-      // when last paragraph runs, zeppelin automatically appends new paragraph.\n-      // this broadcast will focus to the newly inserted paragraph\n-      const paragraphs = angular.element('div[id$=\"_paragraphColumn_main\"]');\n-      if (paragraphs.length >= 2 && paragraphs[paragraphs.length - 2].id.indexOf($scope.paragraph.id) === 0) {\n-        // rendering output can took some time. So delay scrolling event firing for sometime.\n-        setTimeout(() => { $rootScope.$broadcast('scrollToCursor'); }, 500);\n-      }\n-    }\n+       $scope.paragraph.config = newPara.config;\n+       initializeDefault(newPara.config);\n+     } else {\n+       newPara.config.editorHide = true;\n+       newPara.config.tableHide = false;\n+       $scope.paragraph.config = newPara.config;\n+     }\n+   };\n+ \n+   $scope.updateParagraph = function(oldPara, newPara, updateCallback) {\n+     // 1. get status, refreshed\n+     const statusChanged = (newPara.status !== oldPara.status);\n+     const resultRefreshed = (newPara.dateFinished !== oldPara.dateFinished) ||\n+       isEmpty(newPara.results) !== isEmpty(oldPara.results) ||\n+       newPara.status === 'ERROR' || (newPara.status === 'FINISHED' && statusChanged);\n+ \n+     // 2. update texts managed by $scope\n+     $scope.updateAllScopeTexts(oldPara, newPara);\n+ \n+     // 3. execute callback to update result\n+     updateCallback();\n+ \n+     // 4. update remaining paragraph objects\n+     $scope.updateParagraphObjectWhenUpdated(newPara);\n+ \n+     // 5. handle scroll down by key properly if new paragraph is added\n+     if (statusChanged || resultRefreshed) {\n+       // when last paragraph runs, zeppelin automatically appends new paragraph.\n+       // this broadcast will focus to the newly inserted paragraph\n+       const paragraphs = angular.element('div[id$=\"_paragraphColumn_main\"]');\n+       if (paragraphs.length >= 2 && paragraphs[paragraphs.length - 2].id.indexOf($scope.paragraph.id) === 0) {\n+         // rendering output can took some time. So delay scrolling event firing for sometime.\n+         setTimeout(() => { $rootScope.$broadcast('scrollToCursor'); }, 500);\n+       }\n+     }\n   };\n \n   $scope.$on('runParagraphUsingSpell', function(event, data) {",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-web/src/app/notebook/paragraph/paragraph.controller.js",
                "sha": "e6f3244eee43ce019f42689d92cee386c1a097ee",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-web/src/components/websocketEvents/websocketEvents.factory.js",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-web/src/components/websocketEvents/websocketEvents.factory.js?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-web/src/components/websocketEvents/websocketEvents.factory.js",
                "patch": "@@ -164,6 +164,8 @@ function websocketEvents($rootScope, $websocket, $location, baseUrlSrv) {\n       $rootScope.$broadcast('updateNote', data.name, data.config, data.info);\n     } else if (op === 'SET_NOTE_REVISION') {\n       $rootScope.$broadcast('setNoteRevisionResult', data);\n+    } else if (op === 'PARAS_INFO') {\n+      $rootScope.$broadcast('updateParaInfos', data);\n     }\n   });\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-web/src/components/websocketEvents/websocketEvents.factory.js",
                "sha": "df0ea4806fbac3fa1c17ac66a3bda422e08189bd",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Set;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n import com.google.gson.annotations.SerializedName;\n@@ -48,6 +49,10 @@\n   private String group;\n   private transient Map<String, String> infos;\n \n+  // Map of the note and paragraphs which has runtime infos generated by this interpreter setting.\n+  // This map is used to clear the infos in paragraph when the interpretersetting is restarted\n+  private transient Map<String, Set<String>> runtimeInfosToBeCleared;\n+\n   /**\n    * properties can be either Properties or Map<String, InterpreterProperty>\n    * properties should be:\n@@ -125,7 +130,7 @@ public String getName() {\n     return name;\n   }\n \n-  String getGroup() {\n+  public String getGroup() {\n     return group;\n   }\n \n@@ -401,4 +406,24 @@ public InterpreterRunner getInterpreterRunner() {\n   public void setInterpreterRunner(InterpreterRunner interpreterRunner) {\n     this.interpreterRunner = interpreterRunner;\n   }\n+\n+  public void addNoteToPara(String noteId, String paraId) {\n+    if (runtimeInfosToBeCleared == null) {\n+      runtimeInfosToBeCleared = new HashMap<>();\n+    }\n+    Set<String> paraIdSet = runtimeInfosToBeCleared.get(noteId);\n+    if (paraIdSet == null) {\n+      paraIdSet = new HashSet<>();\n+      runtimeInfosToBeCleared.put(noteId, paraIdSet);\n+    }\n+    paraIdSet.add(paraId);\n+  }\n+\n+  public Map<String, Set<String>> getNoteIdAndParaMap() {\n+    return runtimeInfosToBeCleared;\n+  }\n+\n+  public void clearNoteIdAndParaMap() {\n+    runtimeInfosToBeCleared = null;\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java",
                "sha": "74424303dafcd02677889d6f31b75e81226bbc04",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "patch": "@@ -379,6 +379,7 @@ public Paragraph clearParagraphOutput(String paragraphId) {\n       for (Paragraph p : paragraphs) {\n         if (p.getId().equals(paragraphId)) {\n           p.setReturn(null, null);\n+          p.clearRuntimeInfo(null);\n           return p;\n         }\n       }\n@@ -563,6 +564,7 @@ public void run(String paragraphId) {\n       return;\n     }\n \n+    p.clearRuntimeInfo(null);\n     String requiredReplName = p.getRequiredReplName();\n     Interpreter intp = factory.getInterpreter(p.getUser(), getId(), requiredReplName);\n ",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java",
                "sha": "224dd4b76973de74c3fd5f1bf395a23dea47113c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "patch": "@@ -480,6 +480,7 @@ public Note loadNoteFromRepo(String id, AuthenticationInfo subject) {\n       if (p.getDateFinished() != null && lastUpdatedDate.before(p.getDateFinished())) {\n         lastUpdatedDate = p.getDateFinished();\n       }\n+      p.clearRuntimeInfo(null);\n     }\n \n     Map<String, List<AngularObject>> savedObjects = note.getAngularObjects();",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java",
                "sha": "b853e070431bdcd1408f055fea7aa5a47995b1ba",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "patch": "@@ -70,9 +70,10 @@\n \n   // For backward compatibility of note.json format after ZEPPELIN-212\n   Object result;\n+  private Map<String, ParagraphRuntimeInfo> runtimeInfos;\n \n   /**\n-   * Applicaiton states in this paragraph\n+   * Application states in this paragraph\n    */\n   private final List<ApplicationState> apps = new LinkedList<>();\n \n@@ -676,4 +677,52 @@ private boolean isValidInterpreter(String replName) {\n       return false;\n     }\n   }\n+\n+  public void updateRuntimeInfos(String label, String tooltip, Map<String, String> infos,\n+      String group, String intpSettingId) {\n+    if (this.runtimeInfos == null) {\n+      this.runtimeInfos = new HashMap<String, ParagraphRuntimeInfo>();\n+    }\n+\n+    if (infos != null) {\n+      for (String key : infos.keySet()) {\n+        ParagraphRuntimeInfo info = this.runtimeInfos.get(key);\n+        if (info == null) {\n+          info = new ParagraphRuntimeInfo(key, label, tooltip,  group, intpSettingId);\n+          this.runtimeInfos.put(key, info);\n+        }\n+        info.addValue(infos.get(key));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Remove runtimeinfo taht were got from the setting with id settingId\n+   * @param settingId\n+   */\n+  public void clearRuntimeInfo(String settingId) {\n+    if (settingId != null) {\n+      Set<String> keys = runtimeInfos.keySet();\n+      if (keys.size() > 0) {\n+        List<String> infosToRemove = new ArrayList<>();\n+        for (String key : keys) {\n+          ParagraphRuntimeInfo paragraphRuntimeInfo = runtimeInfos.get(key);\n+          if (paragraphRuntimeInfo.getInterpreterSettingId().equals(settingId)) {\n+            infosToRemove.add(key);\n+          }\n+        }\n+        if (infosToRemove.size() > 0) {\n+          for (String info : infosToRemove) {\n+            runtimeInfos.remove(info);\n+          }\n+        }\n+      }\n+    } else {\n+      this.runtimeInfos = null;\n+    }\n+  }\n+\n+  public Map<String, ParagraphRuntimeInfo> getRuntimeInfos() {\n+    return runtimeInfos;\n+  }\n }",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java",
                "sha": "125019467303e650aad35685a08deb90734a0426",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ParagraphRuntimeInfo.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ParagraphRuntimeInfo.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ParagraphRuntimeInfo.java",
                "patch": "@@ -0,0 +1,39 @@\n+package org.apache.zeppelin.notebook;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Store runtime infos of each para\n+ *\n+ */\n+public class ParagraphRuntimeInfo {\n+\n+  private String propertyName;  // Name of the property\n+  private String label;         // Label to be used in UI\n+  private String tooltip;       // Tooltip text toshow in UI\n+  private String group;         // The interpretergroup from which the info was derived\n+  private List<String> values;  // values for the property\n+  private String interpreterSettingId;\n+  \n+  public ParagraphRuntimeInfo(String propertyName, String label, \n+      String tooltip, String group, String intpSettingId) {\n+    if (intpSettingId == null) {\n+      throw new IllegalArgumentException(\"Interpreter setting Id cannot be null\");\n+    }\n+    this.propertyName = propertyName;\n+    this.label = label;\n+    this.tooltip = tooltip;\n+    this.group = group;\n+    this.interpreterSettingId = intpSettingId;\n+    this.values = new ArrayList<>();\n+  }\n+\n+  public void addValue(String value) {\n+    values.add(value);\n+  }\n+  \n+  public String getInterpreterSettingId() {\n+    return interpreterSettingId;\n+  }\n+}",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ParagraphRuntimeInfo.java",
                "sha": "0042023d0b1c885090248632e57402f10126b05b",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java?ref=e9caebcfa3ca2af272f3d396363052dc27f3945c",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "patch": "@@ -174,7 +174,8 @@\n     NOTE_UPDATED,                 // [s-c] paragraph updated(name, config)\n     RUN_ALL_PARAGRAPHS,           // [c-s] run all paragraphs\n     PARAGRAPH_EXECUTED_BY_SPELL,  // [c-s] paragraph was executed by spell\n-    RUN_PARAGRAPH_USING_SPELL     // [s-c] run paragraph using spell\n+    RUN_PARAGRAPH_USING_SPELL,     // [s-c] run paragraph using spell\n+    PARAS_INFO                    // [s-c] paragraph runtime infos\n   }\n \n   public static final Message EMPTY = new Message(null);",
                "raw_url": "https://github.com/apache/zeppelin/raw/e9caebcfa3ca2af272f3d396363052dc27f3945c/zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java",
                "sha": "d40afc22ffbc9cd0a7b0e029e5d1c61a5d8a8351",
                "status": "modified"
            }
        ],
        "message": "ZEPPELIN-1692: Ability to access Spark jobs UI from the paragraph\n\n### What is this PR for?\nA paragraph execution may result in spark job(s).\nAdding ability to access the spark job UI(corresponding to the job generated by the paragraph run), directly from the paragraph.\n\n### What type of PR is it?\nImprovement\n\n### Todos\n* [x]  Write tests\n\n### What is the Jira issue?\nZEPPELIN-1692\n\n### How should this be tested?\nRun paragraphs with spark code(scala, pyspark, sql, R).\nThe paragraph will display a button on the top right corner, which on click will open up the corresponding job UI\n\n### Screenshots (if appropriate)\n![spark_jobs](https://cloud.githubusercontent.com/assets/5082742/20488337/a07fe35a-b02c-11e6-9400-db9f1c10df90.gif)\n\n### Questions:\n* Does the licenses files need update? NA\n* Is there breaking changes for older versions? NA\n* Does this needs documentation? NA\n\nAuthor: Karup <karuppayya@outlook.com>\nAuthor: karuppayya <karuppayya1990@gmail.com>\nAuthor: karuppayya <karuppayyar@qubole.com>\n\nCloses #1663 from karuppayya/ZEPPELIN-1692 and squashes the following commits:\n\n4253d0b [Karup] Fix bad rebase\nd7eb3b6 [Karup] Fix paragraph.js\n8e2cd85 [Karup] tryout: fix selenium tests based on moons suggstion\n732b0a4 [karuppayya] Fix test\n890107d [Karup] Fix test - tryout\ned4685c [Karup] Fix tooltip\nd27221d [Karup] Adding license header\n87214a7 [Karup] Fix incorrect rebase\n19513a6 [Karup] Send para runtimeinfos via websocker, but dont persist in json\n09fc0e2 [Karup] Fix compilation\nfc44d9b [Karup] Address review comments\nb837c6c [karuppayya] Fix incorrect variable used\n42d92ac [karuppayya] Fix test\nd4e54e8 [karuppayya] Address review feedbacks\n1a45284 [Karup] Fix test\n717eedf [Karup] Add tests , refactor\n25379aa [Karup] Clear job urls when we clear output\n7383c0a [Karup] Address review comments\ne2cd4db [karuppayya] Fix NPE in tests\n3d9a573 [karuppayya] Fix NPE and some refactoring\n9b3a3e2 [karuppayya] Fix checkstyle\nf16422f [karuppayya] Ability to view spark job urls in each paragraph",
        "parent": "https://github.com/apache/zeppelin/commit/cbe68d227e9ea05b8bfc02527e7409d7cfb28358",
        "patched_files": [
            "RemoteInterpreterProcessListener.java",
            "RemoteInterpreterEventType.java",
            "paragraph.controller.js",
            "RemoteInterpreterEventPoller.java",
            "Message.java",
            "ZeppelinContext.java",
            "InterpreterRestApi.java",
            "RemoteInterpreterEventClient.java",
            "Notebook.java",
            "Note.java",
            "RemoteInterpreterUtils.java",
            "InterpreterSetting.java",
            "websocketEvents.factory.js",
            "AbstractZeppelinIT.java",
            "SparkInterpreter.java",
            "RemoteEventClientWrapper.java",
            "RemoteEventClient.java",
            "paragraph-control.html",
            "SparkSqlInterpreter.java",
            "SparkRInterpreter.java",
            "Paragraph.java",
            "Utils.java",
            "ParagraphRuntimeInfo.java",
            "RemoteScheduler.java",
            "NotebookServer.java",
            "ZeppelinServer.java",
            "PySparkInterpreter.java",
            "RemoteInterpreterService.thrift",
            "NotebookTypeAdapterFactory.java",
            "RemoteInterpreterOutputTestStream.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "RemoteSchedulerTest.java",
            "SparkInterpreterTest.java",
            "SparkSqlInterpreterTest.java",
            "PySparkInterpreterTest.java",
            "NotebookServerTest.java",
            "NoteTest.java",
            "ParagraphTest.java",
            "InterpreterRestApiTest.java",
            "RemoteInterpreterUtilsTest.java",
            "NotebookTest.java"
        ]
    },
    "zeppelin_eb84aa2": {
        "bug_id": "zeppelin_eb84aa2",
        "commit": "https://github.com/apache/zeppelin/commit/eb84aa22dcb8de57dfacacfe35d8478e07dc7012",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/zeppelin/blob/eb84aa22dcb8de57dfacacfe35d8478e07dc7012/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java?ref=eb84aa22dcb8de57dfacacfe35d8478e07dc7012",
                "deletions": 1,
                "filename": "zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java",
                "patch": "@@ -445,7 +445,8 @@ public void onUnbindInterpreter(Note note, InterpreterSetting setting) {\n       Interpreter currentInterpreter = p.getCurrentRepl();\n       List<InterpreterInfo> infos = setting.getInterpreterInfos();\n       for (InterpreterInfo info : infos) {\n-        if (info.getClassName().equals(currentInterpreter.getClassName())) {\n+        if (currentInterpreter != null &&\n+            info.getClassName().equals(currentInterpreter.getClassName())) {\n           onParagraphRemove(p);\n           break;\n         }",
                "raw_url": "https://github.com/apache/zeppelin/raw/eb84aa22dcb8de57dfacacfe35d8478e07dc7012/zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java",
                "sha": "e8ebfed50619cdc07fc4c59e77a6b7eb5fbdfd72",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/zeppelin/blob/eb84aa22dcb8de57dfacacfe35d8478e07dc7012/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java?ref=eb84aa22dcb8de57dfacacfe35d8478e07dc7012",
                "deletions": 0,
                "filename": "zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "patch": "@@ -240,6 +240,27 @@ public void testUnloadOnInterpreterUnbind() throws IOException {\n     notebook.removeNote(note1.getId(), null);\n   }\n \n+  @Test\n+  public void testInterpreterUnbindOfNullReplParagraph() throws IOException {\n+    // create note\n+    Note note1 = notebook.createNote(null);\n+\n+    // add paragraph with invalid magic\n+    Paragraph p1 = note1.addParagraph();\n+    p1.setText(\"%fake \");\n+\n+    // make sure that p1's repl is null\n+    Interpreter intp = p1.getCurrentRepl();\n+    assertEquals(intp, null);\n+\n+    // Unbind all interpreter from note\n+    // NullPointerException shouldn't occur here\n+    notebook.bindInterpretersToNote(note1.id(), new LinkedList<String>());\n+\n+    // remove note\n+    notebook.removeNote(note1.getId(), null);\n+  }\n+\n \n   @Test\n   public void testUnloadOnInterpreterRestart() throws IOException {",
                "raw_url": "https://github.com/apache/zeppelin/raw/eb84aa22dcb8de57dfacacfe35d8478e07dc7012/zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java",
                "sha": "0af6aca7fbe2819c583380c23424181afa318903",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-1186] Prevent NPE when unbind interpreter\n\n### What is this PR for?\nUnbinding interpreter from note throws NPE when paragraph repl is not set.\n\n### What type of PR is it?\nBug Fix\n\n### What is the Jira issue?\n[ZEPPELIN-1186](https://issues.apache.org/jira/browse/ZEPPELIN-1186)\n\n### How should this be tested?\n1. Create notebook\n2. type '%fake ' including space at the end\n3. Unbind spark interpreter from note binding and hit save\n4. Unbind all interpreter and hit save\n5. See if you can save the interpreter bind without error\n\n### Screenshots (if appropriate)\n**Before**\n![before](https://cloud.githubusercontent.com/assets/8503346/16870039/9d44b918-4aba-11e6-9640-63c8d9e116ad.gif)\n\n**After**\n![after](https://cloud.githubusercontent.com/assets/8503346/16870050/a3cdae84-4aba-11e6-91a8-f1996436fc6c.gif)\n\n### Questions:\n* Does the licenses files need update? no\n* Is there breaking changes for older versions? no\n* Does this needs documentation? no\n\nAuthor: Mina Lee <minalee@apache.org>\n\nCloses #1191 from minahlee/ZEPPELIN-1186 and squashes the following commits:\n\nd65cd83 [Mina Lee] Prevent NPE when unbind interpreter",
        "parent": "https://github.com/apache/zeppelin/commit/2147375745a59f3429d09e4ff3e424966f73e5c6",
        "patched_files": [
            "HeliumApplicationFactory.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "HeliumApplicationFactoryTest.java"
        ]
    },
    "zeppelin_f3f24f3": {
        "bug_id": "zeppelin_f3f24f3",
        "commit": "https://github.com/apache/zeppelin/commit/f3f24f3000274260ab413d65f15915b6050e8bd1",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/zeppelin/blob/f3f24f3000274260ab413d65f15915b6050e8bd1/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java?ref=f3f24f3000274260ab413d65f15915b6050e8bd1",
                "deletions": 6,
                "filename": "zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "patch": "@@ -332,14 +332,16 @@ public Response importNote(String req) throws IOException {\n   public Response createNote(String message) throws IOException {\n     String user = SecurityUtils.getPrincipal();\n     LOG.info(\"Create new note by JSON {}\", message);\n-    NewNoteRequest request = gson.fromJson(message, NewNoteRequest.class);\n     AuthenticationInfo subject = new AuthenticationInfo(user);\n     Note note = notebook.createNote(subject);\n-    List<NewParagraphRequest> initialParagraphs = request.getParagraphs();\n-    if (initialParagraphs != null) {\n-      for (NewParagraphRequest paragraphRequest : initialParagraphs) {\n-        Paragraph p = note.addNewParagraph(subject);\n-        initParagraph(p, paragraphRequest, user);\n+    NewNoteRequest request = gson.fromJson(message, NewNoteRequest.class);\n+    if (request != null) {\n+      List<NewParagraphRequest> initialParagraphs = request.getParagraphs();\n+      if (initialParagraphs != null) {\n+        for (NewParagraphRequest paragraphRequest : initialParagraphs) {\n+          Paragraph p = note.addNewParagraph(subject);\n+          initParagraph(p, paragraphRequest, user);\n+        }\n       }\n     }\n     note.addNewParagraph(subject); // add one paragraph to the last",
                "raw_url": "https://github.com/apache/zeppelin/raw/f3f24f3000274260ab413d65f15915b6050e8bd1/zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java",
                "sha": "e18a2e7f02985dc09ac832c9344a43b21cccc79d",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-2713] Fix NPE of notebook creat rest api  if message is nul\u2026\n\n\u2026l or empty\n\n### What is this PR for?\nNotebook create rest api will cause NPE when the message is null or empty.\n\n### What type of PR is it?\n[Bug Fix ]\n\n### Todos\n* [ ] - Task\n\n### What is the Jira issue?\n* Open an issue on Jira https://issues.apache.org/jira/browse/ZEPPELIN/\n* https://issues.apache.org/jira/projects/ZEPPELIN/issues/ZEPPELIN-2713?filter=allopenissues\n\n### How should this be tested?\nPost to rest api (api/notebook) with nothing, test if NPE\n\n### Screenshots (if appropriate)\n\n### Questions:\n* Does the licenses files need update?   No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: lichenyang <lichenyang@cmss.chinamobile.com>\n\nCloses #2457 from reminia/ZEPPELIN-2713 and squashes the following commits:\n\n36e3b46b9 [lichenyang] [ZEPPELIN-2713] Fix NPE of notebook create rest api if message is null or empty",
        "parent": "https://github.com/apache/zeppelin/commit/62d9539012031d2d6447837f8344c0540c92b7e0",
        "patched_files": [
            "NotebookRestApi.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "NotebookRestApiTest.java"
        ]
    },
    "zeppelin_f699b3c": {
        "bug_id": "zeppelin_f699b3c",
        "commit": "https://github.com/apache/zeppelin/commit/f699b3c2d71ffbdd1eea7e8de569554ae39b525c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/zeppelin/blob/f699b3c2d71ffbdd1eea7e8de569554ae39b525c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java?ref=f699b3c2d71ffbdd1eea7e8de569554ae39b525c",
                "deletions": 0,
                "filename": "zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "patch": "@@ -582,6 +582,12 @@ public void testCronDisable() throws InterruptedException, IOException{\n     postCron.releaseConnection();\n     Thread.sleep(1000);\n \n+    // remove cron job.\n+    DeleteMethod deleteCron = httpDelete(\"/notebook/cron/\" + note.getId());\n+    assertThat(\"\", deleteCron, isAllowed());\n+    deleteCron.releaseConnection();\n+    Thread.sleep(1000);\n+\n     System.clearProperty(ConfVars.ZEPPELIN_NOTEBOOK_CRON_FOLDERS.getVarName());\n     ZeppelinServer.notebook.removeNote(note.getId(), anonymous);\n   }",
                "raw_url": "https://github.com/apache/zeppelin/raw/f699b3c2d71ffbdd1eea7e8de569554ae39b525c/zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java",
                "sha": "ce867ee558b09117c1ab12025221edaf5cef7e25",
                "status": "modified"
            }
        ],
        "message": "[ZEPPELIN-3684] Remove cron job in ZeppelinRestApiTest.testCronDisable\n\n### What is this PR for?\n`testCronDisable` in `ZeppelinRestApiTest` produces error:\n```\n09:15:51,001 ERROR org.quartz.core.ErrorLogger:2425 - Job (note.2DPJCQJGP threw an exception.\norg.quartz.SchedulerException: Job threw an unhandled exception. [See nested exception: java.lang.NullPointerException]\n\tat org.quartz.core.JobRunShell.run(JobRunShell.java:213)\n\tat org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)\nCaused by: java.lang.NullPointerException\n\tat org.apache.zeppelin.notebook.Notebook$CronJob.execute(Notebook.java:925)\n\tat org.quartz.core.JobRunShell.run(JobRunShell.java:202)\n\t... 1 more\n```\nBecause cron job is not removed\n\n### What type of PR is it?\nBug Fix\n\n### What is the Jira issue?\n* issue on Jira https://issues.apache.org/jira/browse/ZEPPELIN-3684\n\n### How should this be tested?\n* Tested manually\n* [CI pass](https://travis-ci.org/TinkoffCreditSystems/zeppelin/builds/412604637)\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: egorklimov <klim.electronicmail@gmail.com>\n\nCloses #3111 from egorklimov/ZEPPELIN-3684 and squashes the following commits:\n\n5abd8fbec [egorklimov] testCronDisable fixed",
        "parent": "https://github.com/apache/zeppelin/commit/994acfeb73319dfa9c5b4b18dba94e7469aefa40",
        "patched_files": [
            "ZeppelinRestApi.java"
        ],
        "repo": "zeppelin",
        "unit_tests": [
            "ZeppelinRestApiTest.java"
        ]
    }
}