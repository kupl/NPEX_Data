[
    {
        "parent": "https://github.com/apache/zookeeper/commit/ef3649f599b4213a918c7a84cfe663d6cb1fa26e",
        "bug_id": "zookeeper_1",
        "file": [
            {
                "additions": 1,
                "sha": "05bf82e08d9b9b264da372aa226511d983e9e1fc",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/e41cac853de416026e0c2011e0429e858e5823b8/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "deletions": 3,
                "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java?ref=e41cac853de416026e0c2011e0429e858e5823b8",
                "patch": "@@ -236,7 +236,7 @@ public static void setCloseSessionTxnEnabled(boolean enabled) {\n     }\n \n     // Connection throttling\n-    private BlueThrottle connThrottle;\n+    private BlueThrottle connThrottle = new BlueThrottle();\n \n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification =\n         \"Internally the throttler has a BlockingQueue so \"\n@@ -308,8 +308,6 @@ public ZooKeeperServer(FileTxnSnapLog txnLogFactory, int tickTime, int minSessio\n \n         readResponseCache = new ResponseCache();\n \n-        connThrottle = new BlueThrottle();\n-\n         this.initialConfig = initialConfig;\n \n         this.requestPathMetricsCollector = new RequestPathMetricsCollector();",
                "changes": 4,
                "blob_url": "https://github.com/apache/zookeeper/blob/e41cac853de416026e0c2011e0429e858e5823b8/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java"
            },
            {
                "additions": 61,
                "sha": "670feaa483241d5ba1bf232b0a3f45bf667ad12c",
                "status": "added",
                "raw_url": "https://github.com/apache/zookeeper/raw/e41cac853de416026e0c2011e0429e858e5823b8/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java",
                "deletions": 0,
                "filename": "zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java?ref=e41cac853de416026e0c2011e0429e858e5823b8",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.server;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import org.apache.jute.BinaryOutputArchive;\n+import org.apache.zookeeper.proto.ConnectRequest;\n+import org.apache.zookeeper.server.persistence.FileTxnSnapLog;\n+import org.apache.zookeeper.test.ClientBase;\n+import org.junit.Test;\n+\n+public class ZooKeeperServerCreationTest {\n+\n+    /**\n+     * Test the default ZooKeeperServer and call processConnectRequest() to make sure\n+     * that all needed fields are initialized properly, etc.\n+     */\n+    @Test\n+    public void testDefaultConstructor() throws Exception {\n+        File tmpDir = ClientBase.createEmptyTestDir();\n+        FileTxnSnapLog fileTxnSnapLog = new FileTxnSnapLog(new File(tmpDir, \"data\"), new File(tmpDir, \"data_txnlog\"));\n+\n+        ZooKeeperServer zks = new ZooKeeperServer() {\n+            @Override\n+            public void submitRequest(Request si) {\n+                // NOP\n+            }\n+        };\n+        zks.setTxnLogFactory(fileTxnSnapLog);\n+        zks.setZKDatabase(new ZKDatabase(fileTxnSnapLog));\n+        zks.createSessionTracker();\n+\n+        ServerCnxnFactory cnxnFactory = ServerCnxnFactory.createFactory();\n+        ServerCnxn cnxn = new MockServerCnxn();\n+\n+        ConnectRequest connReq = new ConnectRequest();\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n+        connReq.serialize(boa, \"connect\");\n+        zks.processConnectRequest(cnxn, ByteBuffer.wrap(baos.toByteArray()));\n+    }\n+\n+}",
                "changes": 61,
                "blob_url": "https://github.com/apache/zookeeper/blob/e41cac853de416026e0c2011e0429e858e5823b8/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-3605: connThrottle needs to be assigned in alternate consructor\n\n`connThrottle` needs to be assigned in alternate consructor to avoid NPEs\n\nAuthor: randgalt <jordan@jordanzimmerman.com>\n\nReviewers: Enrico Olivelli, Andor Moln\u00e1r\n\nCloses #1132 from Randgalt/ZOOKEEPER-3605",
        "commit": "https://github.com/apache/zookeeper/commit/e41cac853de416026e0c2011e0429e858e5823b8"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/815c8f2130b8b43e11abe52b226707f707a93581",
        "bug_id": "zookeeper_2",
        "file": [
            {
                "additions": 1,
                "sha": "1c9dda772567875359245c482ea838842bbe3d20",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "deletions": 1,
                "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java?ref=01e198aec9ceae52f160ddcf2e45cd234823e505",
                "patch": "@@ -414,7 +414,7 @@ public ZooKeeperServerConf getConf() {\n             zkDb.snapLog.getSnapDir().getAbsolutePath(),\n             zkDb.snapLog.getDataDir().getAbsolutePath(),\n             getTickTime(),\n-            serverCnxnFactory.getMaxClientCnxnsPerHost(),\n+            getMaxClientCnxnsPerHost(),\n             getMinSessionTimeout(),\n             getMaxSessionTimeout(),\n             getServerId(),",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java"
            },
            {
                "additions": 16,
                "sha": "7bb7c42410a007a0d7508a1b7373bdca385995be",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java",
                "deletions": 1,
                "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java?ref=01e198aec9ceae52f160ddcf2e45cd234823e505",
                "patch": "@@ -577,7 +577,22 @@ public StatCommand() {\n         @Override\n         public CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs) {\n             CommandResponse response = super.run(zkServer, kwargs);\n-            response.put(\"connections\", zkServer.getServerCnxnFactory().getAllConnectionInfo(true));\n+\n+            final Iterable<Map<String, Object>> connections;\n+            if (zkServer.getServerCnxnFactory() != null) {\n+                connections = zkServer.getServerCnxnFactory().getAllConnectionInfo(true);\n+            } else {\n+                connections = Collections.emptyList();\n+            }\n+            response.put(\"connections\", connections);\n+\n+            final Iterable<Map<String, Object>> secureConnections;\n+            if (zkServer.getSecureServerCnxnFactory() != null) {\n+                secureConnections = zkServer.getSecureServerCnxnFactory().getAllConnectionInfo(true);\n+            } else {\n+                secureConnections = Collections.emptyList();\n+            }\n+            response.put(\"secure_connections\", secureConnections);\n             return response;\n         }\n ",
                "changes": 17,
                "blob_url": "https://github.com/apache/zookeeper/blob/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java"
            },
            {
                "additions": 32,
                "sha": "5f6879e7a207b6b1322ed8be726421eecf1868cb",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java",
                "deletions": 1,
                "filename": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java?ref=01e198aec9ceae52f160ddcf2e45cd234823e505",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.zookeeper.metrics.MetricsUtils;\n import org.apache.zookeeper.server.ServerCnxnFactory;\n import org.apache.zookeeper.server.ServerStats;\n+import org.apache.zookeeper.server.ZKDatabase;\n import org.apache.zookeeper.server.ZooKeeperServer;\n import org.apache.zookeeper.server.quorum.BufferStats;\n import org.apache.zookeeper.test.ClientBase;\n@@ -219,7 +220,14 @@ public void testSetTraceMask() throws IOException, InterruptedException {\n \n     @Test\n     public void testStat() throws IOException, InterruptedException {\n-        testCommand(\"stats\", new Field(\"version\", String.class), new Field(\"read_only\", Boolean.class), new Field(\"server_stats\", ServerStats.class), new Field(\"node_count\", Integer.class), new Field(\"connections\", Iterable.class), new Field(\"client_response\", BufferStats.class));\n+        testCommand(\"stats\",\n+                    new Field(\"version\", String.class),\n+                    new Field(\"read_only\", Boolean.class),\n+                    new Field(\"server_stats\", ServerStats.class),\n+                    new Field(\"node_count\", Integer.class),\n+                    new Field(\"connections\", Iterable.class),\n+                    new Field(\"secure_connections\", Iterable.class),\n+                    new Field(\"client_response\", BufferStats.class));\n     }\n \n     @Test\n@@ -264,4 +272,27 @@ public void testConsCommandSecureOnly() {\n         assertThat(response.toMap().containsKey(\"secure_connections\"), is(true));\n     }\n \n+    /**\n+     * testing Stat command, when only SecureClientPort is defined by the user and there is no\n+     * regular (non-SSL port) open. In this case zkServer.getServerCnxnFactory === null\n+     * see: ZOOKEEPER-3633\n+     */\n+    @Test\n+    public void testStatCommandSecureOnly() {\n+        Commands.StatCommand cmd = new Commands.StatCommand();\n+        ZooKeeperServer zkServer = mock(ZooKeeperServer.class);\n+        ServerCnxnFactory cnxnFactory = mock(ServerCnxnFactory.class);\n+        ServerStats serverStats = mock(ServerStats.class);\n+        ZKDatabase zkDatabase = mock(ZKDatabase.class);\n+        when(zkServer.getSecureServerCnxnFactory()).thenReturn(cnxnFactory);\n+        when(zkServer.serverStats()).thenReturn(serverStats);\n+        when(zkServer.getZKDatabase()).thenReturn(zkDatabase);\n+        when(zkDatabase.getNodeCount()).thenReturn(0);\n+\n+        CommandResponse response = cmd.run(zkServer, null);\n+\n+        assertThat(response.toMap().containsKey(\"connections\"), is(true));\n+        assertThat(response.toMap().containsKey(\"secure_connections\"), is(true));\n+    }\n+\n }",
                "changes": 33,
                "blob_url": "https://github.com/apache/zookeeper/blob/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-3633: AdminServer commands throw NPE when only secure client port is used\n\nWhen only secureClientPort is defined in the config and there is no regular clientPort,\nthen both the stat and the conf commands on the AdminServer result in 500 Server Error caused by\nNullPointerExceptions. The problem is that no serverCnxFactory is defined in the\nZooKeeperServer in this case, we have only secureServerCnxnFactory.\n\nIn the fix we return info about both the secure and unsecure connections.\nExample of the stat command output for secure-only configuration:\n```\n{\n  \"version\" : \"3.6.0-SNAPSHOT-8e8905069f4bff670c0492fe9e28ced0f86bca00, built on 11/29/2019 08:04 GMT\",\n  \"read_only\" : false,\n  \"server_stats\" : {\n    \"packets_sent\" : 1,\n    \"packets_received\" : 1,\n    \"fsync_threshold_exceed_count\" : 0,\n    \"client_response_stats\" : {\n      \"last_buffer_size\" : -1,\n      \"min_buffer_size\" : -1,\n      \"max_buffer_size\" : -1\n    },\n    \"data_dir_size\" : 671094270,\n    \"log_dir_size\" : 671094270,\n    \"last_processed_zxid\" : 20,\n    \"outstanding_requests\" : 0,\n    \"server_state\" : \"standalone\",\n    \"avg_latency\" : 5.0,\n    \"max_latency\" : 5,\n    \"min_latency\" : 5,\n    \"num_alive_client_connections\" : 1,\n    \"provider_null\" : false,\n    \"uptime\" : 15020\n  },\n  \"client_response\" : {\n    \"last_buffer_size\" : -1,\n    \"min_buffer_size\" : -1,\n    \"max_buffer_size\" : -1\n  },\n  \"node_count\" : 6,\n  \"connections\" : [ ],\n  \"secure_connections\" : [ {\n    \"remote_socket_address\" : \"127.0.0.1:57276\",\n    \"interest_ops\" : 1,\n    \"outstanding_requests\" : 0,\n    \"packets_received\" : 1,\n    \"packets_sent\" : 1\n  } ],\n  \"command\" : \"stats\",\n  \"error\" : null\n}\n```\n\nAuthor: Mate Szalay-Beko <szalay.beko.mate@gmail.com>\n\nReviewers: Andor Molnar <andor@apache.org>, Enrico Olivelli <eolivelli@apache.org>, Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1161 from symat/ZOOKEEPER-3633",
        "commit": "https://github.com/apache/zookeeper/commit/01e198aec9ceae52f160ddcf2e45cd234823e505"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/f9610cc80173342bbe9766889a1aab1bfd840d1e",
        "bug_id": "zookeeper_3",
        "file": [
            {
                "additions": 20,
                "sha": "e8511999c22548c03bc910835e0423f9750b9dba",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/433cf7e2b660fce3c73eb011452814f7084ff196/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java",
                "deletions": 12,
                "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java?ref=433cf7e2b660fce3c73eb011452814f7084ff196",
                "patch": "@@ -269,7 +269,7 @@ private void printTxn(byte[] bytes) throws IOException {\n     private void printTxn(byte[] bytes, String prefix) throws IOException {\n         TxnHeader hdr = new TxnHeader();\n         Record txn = SerializeUtils.deserializeTxn(bytes, hdr);\n-        String txnStr = getDataStrFromTxn(txn);\n+        String txnStr = getFormattedTxnStr(txn);\n         String txns = String.format(\"%s session 0x%s cxid 0x%s zxid 0x%s %s %s\",\n                 DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.LONG).format(new Date(hdr.getTime())),\n                 Long.toHexString(hdr.getClientId()),\n@@ -288,31 +288,31 @@ private void printTxn(byte[] bytes, String prefix) throws IOException {\n     }\n \n     /**\n-     * get transaction log data string with node's data as a string\n-     * @param txn\n-     * @return\n+     * get the formatted string from the txn.\n+     * @param txn transaction log data\n+     * @return the formatted string\n      */\n-    private static String getDataStrFromTxn(Record txn) {\n+    private static String getFormattedTxnStr(Record txn) throws IOException {\n         StringBuilder txnData = new StringBuilder();\n         if (txn == null) {\n             return txnData.toString();\n         }\n         if (txn instanceof CreateTxn) {\n             CreateTxn createTxn = ((CreateTxn) txn);\n-            txnData.append(createTxn.getPath() + \",\" + new String(createTxn.getData()))\n+            txnData.append(createTxn.getPath() + \",\" + checkNullToEmpty(createTxn.getData()))\n                    .append(\",\" + createTxn.getAcl() + \",\" + createTxn.getEphemeral())\n                    .append(\",\" + createTxn.getParentCVersion());\n         } else if (txn instanceof SetDataTxn) {\n             SetDataTxn setDataTxn = ((SetDataTxn) txn);\n-            txnData.append(setDataTxn.getPath() + \",\" + new String(setDataTxn.getData()))\n+            txnData.append(setDataTxn.getPath() + \",\" + checkNullToEmpty(setDataTxn.getData()))\n                    .append(\",\" + setDataTxn.getVersion());\n         } else if (txn instanceof CreateContainerTxn) {\n             CreateContainerTxn createContainerTxn = ((CreateContainerTxn) txn);\n-            txnData.append(createContainerTxn.getPath() + \",\" + new String(createContainerTxn.getData()))\n+            txnData.append(createContainerTxn.getPath() + \",\" + checkNullToEmpty(createContainerTxn.getData()))\n                    .append(\",\" + createContainerTxn.getAcl() + \",\" + createContainerTxn.getParentCVersion());\n         } else if (txn instanceof CreateTTLTxn) {\n             CreateTTLTxn createTTLTxn = ((CreateTTLTxn) txn);\n-            txnData.append(createTTLTxn.getPath() + \",\" + new String(createTTLTxn.getData()))\n+            txnData.append(createTTLTxn.getPath() + \",\" + checkNullToEmpty(createTTLTxn.getData()))\n                    .append(\",\" + createTTLTxn.getAcl() + \",\" + createTTLTxn.getParentCVersion())\n                    .append(\",\" + createTTLTxn.getTtl());\n         } else if (txn instanceof MultiTxn) {\n@@ -321,9 +321,9 @@ private static String getDataStrFromTxn(Record txn) {\n             for (int i = 0; i < txnList.size(); i++ ) {\n                 Txn t = txnList.get(i);\n                 if (i == 0) {\n-                    txnData.append(TraceFormatter.op2String(t.getType()) + \":\" + new String(t.getData()));\n+                    txnData.append(TraceFormatter.op2String(t.getType()) + \":\" + checkNullToEmpty(t.getData()));\n                 } else {\n-                    txnData.append(\";\" + TraceFormatter.op2String(t.getType()) + \":\" + new String(t.getData()));\n+                    txnData.append(\";\" + TraceFormatter.op2String(t.getType()) + \":\" + checkNullToEmpty(t.getData()));\n                 }\n             }\n         } else {\n@@ -332,7 +332,15 @@ private static String getDataStrFromTxn(Record txn) {\n \n         return txnData.toString();\n     }\n-    \n+\n+    private static String checkNullToEmpty(byte[] data) throws IOException {\n+        if (data == null || data.length == 0) {\n+            return \"\";\n+        }\n+\n+        return new String(data, \"UTF8\");\n+    }\n+\n     private void openTxnLogFile() throws FileNotFoundException {\n         txnFis = new FileInputStream(txnLogFile);\n         logStream = BinaryInputArchive.getArchive(txnFis);",
                "changes": 32,
                "blob_url": "https://github.com/apache/zookeeper/blob/433cf7e2b660fce3c73eb011452814f7084ff196/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-3410: zkTxnLogToolkit.sh will throw the NPE and stop the process of formatting txn logs due to the data's content is null\n\n- the data can be null,but the other fileds(`acl`,`version`,`ttl`)  cannot be `null`.  I also make the `printTxn` method more safer , surrounding it with `try-catch` in case of other unexpected NPEs.\n- some test cases were included in the [JIRA](https://issues.apache.org/jira/browse/ZOOKEEPER-3410).\n- more details in the [ZOOKEEPER-3410](https://issues.apache.org/jira/browse/ZOOKEEPER-3410)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: eolivelli@apache.org, andor@apache.org\n\nCloses #975 from maoling/ZOOKEEPER-3410 and squashes the following commits:\n\n22405c636 [maoling] revert the logic about try-catch the printTxn() method\na84c37406 [maoling] set the charset:UTF8 & e.printStackTrace()\n8cc034e2e [maoling] ZOOKEEPER-3410:./zkTxnLogToolkit.sh will throw the NPE and stop the process of formatting txn logs due to the data's content is null",
        "commit": "https://github.com/apache/zookeeper/commit/433cf7e2b660fce3c73eb011452814f7084ff196"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/563f892da0e03e23715bddf236b10582bd51e429",
        "bug_id": "zookeeper_4",
        "file": [
            {
                "additions": 33,
                "sha": "93bc8fcd3905af80becf4e11bd433b49e10dcd38",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/ef8b751c491bbc57b628ea9685a774fe40ba43dc/src/java/main/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java",
                "deletions": 13,
                "filename": "src/java/main/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java?ref=ef8b751c491bbc57b628ea9685a774fe40ba43dc",
                "patch": "@@ -27,6 +27,7 @@\n \n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.common.ZKConfig;\n+import org.apache.zookeeper.common.X509Exception;\n import org.apache.zookeeper.common.X509Exception.KeyManagerException;\n import org.apache.zookeeper.common.X509Exception.TrustManagerException;\n import org.apache.zookeeper.common.X509Util;\n@@ -64,33 +65,52 @@\n      * <br/><code>zookeeper.ssl.keyStore.password</code>\n      * <br/><code>zookeeper.ssl.trustStore.password</code>\n      */\n-    public X509AuthenticationProvider() {\n+    public X509AuthenticationProvider() throws X509Exception {\n         String keyStoreLocationProp = System.getProperty(\n                 ZKConfig.SSL_KEYSTORE_LOCATION);\n         String keyStorePasswordProp = System.getProperty(\n                 ZKConfig.SSL_KEYSTORE_PASSWD);\n \n         X509KeyManager km = null;\n         X509TrustManager tm = null;\n-        try {\n-            km = X509Util.createKeyManager(\n-                    keyStoreLocationProp, keyStorePasswordProp);\n-        } catch (KeyManagerException e) {\n-            LOG.error(\"Failed to create key manager\", e);\n+        if (keyStoreLocationProp == null && keyStorePasswordProp == null) {\n+            LOG.warn(\"keystore not specified for client connection\");\n+        } else {\n+            if (keyStoreLocationProp == null) {\n+                throw new X509Exception(\"keystore location not specified for client connection\");\n+            }\n+            if (keyStorePasswordProp == null) {\n+                throw new X509Exception(\"keystore password not specified for client connection\");\n+            }\n+            try {\n+                km = X509Util.createKeyManager(\n+                        keyStoreLocationProp, keyStorePasswordProp);\n+            } catch (KeyManagerException e) {\n+                LOG.error(\"Failed to create key manager\", e);\n+            }\n         }\n-\n+        \n         String trustStoreLocationProp = System.getProperty(\n                 ZKConfig.SSL_TRUSTSTORE_LOCATION);\n         String trustStorePasswordProp = System.getProperty(\n                 ZKConfig.SSL_TRUSTSTORE_PASSWD);\n \n-        try {\n-            tm = X509Util.createTrustManager(\n-                    trustStoreLocationProp, trustStorePasswordProp);\n-        } catch (TrustManagerException e) {\n-            LOG.error(\"Failed to create trust manager\", e);\n+        if (trustStoreLocationProp == null && trustStorePasswordProp == null) {\n+            LOG.warn(\"Truststore not specified for client connection\");\n+        } else {\n+            if (trustStoreLocationProp == null) {\n+                throw new X509Exception(\"Truststore location not specified for client connection\");\n+            }\n+            if (trustStorePasswordProp == null) {\n+                throw new X509Exception(\"Truststore password not specified for client connection\");\n+            }\n+            try {\n+                tm = X509Util.createTrustManager(\n+                        trustStoreLocationProp, trustStorePasswordProp);\n+            } catch (TrustManagerException e) {\n+                LOG.error(\"Failed to create trust manager\", e);\n+            }\n         }\n-\n         this.keyManager = km;\n         this.trustManager = tm;\n     }",
                "changes": 46,
                "blob_url": "https://github.com/apache/zookeeper/blob/ef8b751c491bbc57b628ea9685a774fe40ba43dc/src/java/main/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2581: Not handled NullPointerException while creating key manager and trustManager\n\n- when **zookeeper.ssl.keyStore.password**    is null,**keyStorePasswordProp** is **null** ,then **keyStorePassword.toCharArray()** is called,it will throw a NPE. we should handle this NPE gracefully\n- I just follow an example from [createSSLContext](https://github.com/apache/zookeeper/blob/master/src/java/main/org/apache/zookeeper/common/X509Util.java#L87)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Michael Han <hanm@apache.org>\n\nCloses #339 from maoling/ZOOKEEPER-2581",
        "commit": "https://github.com/apache/zookeeper/commit/ef8b751c491bbc57b628ea9685a774fe40ba43dc"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/79627c6e07a901150709896f7c22597164badfc5",
        "bug_id": "zookeeper_5",
        "file": [
            {
                "additions": 3,
                "sha": "384d23ab041c60538f45e4dcea021c2844f30c9d",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/2c0168ad37b529447ac8cb1bf866d014f8a97981/src/java/main/org/apache/zookeeper/server/ReferenceCountedACLCache.java",
                "deletions": 0,
                "filename": "src/java/main/org/apache/zookeeper/server/ReferenceCountedACLCache.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/ReferenceCountedACLCache.java?ref=2c0168ad37b529447ac8cb1bf866d014f8a97981",
                "patch": "@@ -109,6 +109,9 @@ public synchronized void deserialize(InputArchive ia) throws IOException {\n             }\n             List<ACL> aclList = new ArrayList<ACL>();\n             Index j = ia.startVector(\"acls\");\n+            if (j == null) {\n+                throw new RuntimeException(\"Incorrent format of InputArchive when deserialize DataTree - missing acls\");\n+            }\n             while (!j.done()) {\n                 ACL acl = new ACL();\n                 acl.deserialize(ia, \"acl\");",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/2c0168ad37b529447ac8cb1bf866d014f8a97981/src/java/main/org/apache/zookeeper/server/ReferenceCountedACLCache.java"
            },
            {
                "additions": 28,
                "sha": "795472f1429a702dc642db1b73de89d9c6bc114e",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/2c0168ad37b529447ac8cb1bf866d014f8a97981/src/java/test/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java",
                "deletions": 1,
                "filename": "src/java/test/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java?ref=2c0168ad37b529447ac8cb1bf866d014f8a97981",
                "patch": "@@ -20,6 +20,8 @@\n \n import org.apache.jute.BinaryInputArchive;\n import org.apache.jute.BinaryOutputArchive;\n+import org.apache.jute.InputArchive;\n+import org.apache.jute.OutputArchive;\n import org.apache.zookeeper.ZooDefs;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.data.Id;\n@@ -188,10 +190,35 @@ public void testSerializeDeserialize() throws IOException {\n         callAddUsageNTimes(deserializedCache, aclId3, 3);\n         callAddUsageNTimes(deserializedCache, aclId4, 4);\n         callAddUsageNTimes(deserializedCache, aclId5, 5);\n-\n         assertCachesEqual(cache, deserializedCache);\n     }\n \n+    @Test\n+    public void testNPEInDeserialize() throws IOException {\n+        ReferenceCountedACLCache serializeCache = new ReferenceCountedACLCache(){\n+            @Override\n+            public synchronized void serialize(OutputArchive oa) throws IOException {\n+                oa.writeInt(1, \"map\");\n+                oa.writeLong(1, \"long\");\n+                oa.startVector(null, \"acls\");\n+                oa.endVector(null, \"acls\");\n+            }\n+        };\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        BinaryOutputArchive archive = BinaryOutputArchive.getArchive(baos);\n+        serializeCache.serialize(archive);\n+        BinaryInputArchive inArchive = BinaryInputArchive.getArchive(new ByteArrayInputStream(baos.toByteArray()));\n+        ReferenceCountedACLCache deserializedCache = new ReferenceCountedACLCache();\n+        try {\n+            deserializedCache.deserialize(inArchive);\n+        } catch (NullPointerException e){\n+            fail(\"should not throw NPE while do deserialized\");\n+        } catch (RuntimeException e) {\n+            // do nothing.\n+        }\n+    }\n+\n+\n     private void assertCachesEqual(ReferenceCountedACLCache expected, ReferenceCountedACLCache actual){\n         assertEquals(expected.aclIndex, actual.aclIndex);\n         assertEquals(expected.aclKeyMap, actual.aclKeyMap);",
                "changes": 29,
                "blob_url": "https://github.com/apache/zookeeper/blob/2c0168ad37b529447ac8cb1bf866d014f8a97981/src/java/test/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-3007: Potential NPE in ReferenceCountedACLCache#deserialize\n\nLJ1043041006 found a potential NPE in ZK\n\nAuthor: gongleigl.gong <gongleigl.gong@qunar.com>\nAuthor: brettkk <1099446733@qq.com>\n\nReviewers: phunt@apache.org\n\nCloses #495 from brettKK/master and squashes the following commits:\n\n7eb9e1c9b [gongleigl.gong] fix RTE message in ReferenceCountedACLCache class\n0b858826d [gongleigl.gong] del logger error and fix error message\na12b13ff7 [brettkk] fix format\nf7da9b9fa [brettkk] change ZOOK3007 to compare with apache master\ncf9fb5f9a [brettkk] recover code\nc4db5e25d [brettkk] recover zookeeper master same with apache:master\n700dfb7f4 [gongleigl.gong] fix NPE bug\n7d8d5230c [gongleigl.gong] d\n\nChange-Id: I012c242e8566fcd54c1ebde1a30ec785b6aa31b0",
        "commit": "https://github.com/apache/zookeeper/commit/2c0168ad37b529447ac8cb1bf866d014f8a97981"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/f78061aafb19b102c37cb6d744ec6258d5f5b66e",
        "bug_id": "zookeeper_6",
        "file": [
            {
                "additions": 3,
                "sha": "4dc5fd8dd3c99204739b56ca4e474fa765aa22cd",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/422058c222a8a31ec7cfd4113fbdc036181f751d/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=422058c222a8a31ec7cfd4113fbdc036181f751d",
                "patch": "@@ -397,6 +397,9 @@ BUGFIXES:\n   ZOOKEEPER-2611: zoo_remove_watchers - can remove the wrong watch\n   (Eyal Leshmem via rgs)\n \n+  ZOOKEEPER-2467: NullPointerException when redo Command is passed negative value\n+ (Rakesh Kumar Singh via rakeshr)\n+\n IMPROVEMENTS:\n   ZOOKEEPER-2024 Major throughput improvement with mixed workloads (Kfir Lev-Ari via shralex)\n ",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/422058c222a8a31ec7cfd4113fbdc036181f751d/CHANGES.txt"
            },
            {
                "additions": 1,
                "sha": "c39395a380b7a85bad4be89d3d4827425daa19a1",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/422058c222a8a31ec7cfd4113fbdc036181f751d/src/java/main/org/apache/zookeeper/ZooKeeperMain.java",
                "deletions": 1,
                "filename": "src/java/main/org/apache/zookeeper/ZooKeeperMain.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/ZooKeeperMain.java?ref=422058c222a8a31ec7cfd4113fbdc036181f751d",
                "patch": "@@ -616,7 +616,7 @@ protected boolean processZKCmd(MyCommandOptions co) throws CliException, IOExcep\n             System.exit(exitCode);\n         } else if (cmd.equals(\"redo\") && args.length >= 2) {\n             Integer i = Integer.decode(args[1]);\n-            if (commandCount <= i) { // don't allow redoing this redo\n+            if (commandCount <= i || i < 0) { // don't allow redoing this redo\n                 throw new MalformedCommandException(\"Command index out of range\");\n             }\n             cl.parseCommand(history.get(i));",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/422058c222a8a31ec7cfd4113fbdc036181f751d/src/java/main/org/apache/zookeeper/ZooKeeperMain.java"
            },
            {
                "additions": 22,
                "sha": "dd610dd828aee677d728690f100ee0603e7b0b85",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/422058c222a8a31ec7cfd4113fbdc036181f751d/src/java/test/org/apache/zookeeper/ZooKeeperTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/ZooKeeperTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/ZooKeeperTest.java?ref=422058c222a8a31ec7cfd4113fbdc036181f751d",
                "patch": "@@ -433,6 +433,28 @@ public void testCliCommandsNotEchoingUsage() throws Exception {\n         }\n     }\n \n+    // ZOOKEEPER-2467 : Testing negative number for redo command\n+    @Test\n+    public void testRedoWithNegativeCmdNumber() throws Exception {\n+        final ZooKeeper zk = createClient();\n+        ZooKeeperMain zkMain = new ZooKeeperMain(zk);\n+        String cmd1 = \"redo -1\";\n+\n+        // setup redirect out/err streams to get System.in/err, use this\n+        // judiciously!\n+        final PrintStream systemErr = System.err; // get current err\n+        final ByteArrayOutputStream errContent = new ByteArrayOutputStream();\n+        System.setErr(new PrintStream(errContent));\n+        try {\n+            zkMain.executeLine(cmd1);\n+            Assert.assertEquals(\"Command index out of range\", errContent\n+                    .toString().trim());\n+        } finally {\n+            // revert redirect of out/err streams - important step!\n+            System.setErr(systemErr);\n+        }\n+    }\n+\n     private static void runCommandExpect(CliCommand command, List<String> expectedResults)\n             throws Exception {\n         // call command and put result in byteStream",
                "changes": 22,
                "blob_url": "https://github.com/apache/zookeeper/blob/422058c222a8a31ec7cfd4113fbdc036181f751d/src/java/test/org/apache/zookeeper/ZooKeeperTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2467: NullPointerException when redo Command is passed negative value (Rakesh Kumar Singh via rakeshr)",
        "commit": "https://github.com/apache/zookeeper/commit/422058c222a8a31ec7cfd4113fbdc036181f751d"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/d6490d590725345638b5973a97e6e8d8bee67d22",
        "bug_id": "zookeeper_7",
        "file": [
            {
                "additions": 4,
                "sha": "e343bc0f5287bc153d5b143f51bdd466848a70e2",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/13dd5d0db7a5c4fa926d1e44fc2047c24d5d012c/src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java",
                "deletions": 1,
                "filename": "src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java?ref=13dd5d0db7a5c4fa926d1e44fc2047c24d5d012c",
                "patch": "@@ -815,8 +815,11 @@ public void touchCnxn(NIOServerCnxn cnxn) {\n         cnxnExpiryQueue.update(cnxn, cnxn.getSessionTimeout());\n     }\n \n-    private void addCnxn(NIOServerCnxn cnxn) {\n+    private void addCnxn(NIOServerCnxn cnxn) throws IOException {\n         InetAddress addr = cnxn.getSocketAddress();\n+        if (addr == null) {\n+            throw new IOException(\"Socket of \" + cnxn + \" has been closed\");\n+        }\n         Set<NIOServerCnxn> set = ipMap.get(addr);\n         if (set == null) {\n             // in general we will see 1 connection from each",
                "changes": 5,
                "blob_url": "https://github.com/apache/zookeeper/blob/13dd5d0db7a5c4fa926d1e44fc2047c24d5d012c/src/java/main/org/apache/zookeeper/server/NIOServerCnxnFactory.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-3009: Potential NPE in NIOServerCnxnFactory\n\nWe have developed a static analysis tool [NPEDetector](https://github.com/lujiefsi/NPEDetector) to find some potential NPE. Our analysis shows that NPE reason can be simple:some callees may return null directly in corner case(e.g. node crash , IO exception), some of their callers have  !=null check but some do not have.\n### Bug:\nCallee getSocketAddress can return null, may caused by node crash, network exception....\n<pre>\n    public InetAddress getSocketAddress() {\n        if (sock.isOpen() == false) {\n            return null;\n        }\n        return sock.socket().getInetAddress();\n    }\n</pre>\ngetSocketAddress has two callers:  removeCnxn and removeCnxn\n\ncaller removeCnxn has null check\n<pre>\n public boolean removeCnxn(NIOServerCnxn cnxn) {\n        //other code\n        InetAddress addr = cnxn.getSocketAddress();\n        if (addr != null) {\n            Set<NIOServerCnxn> set = ipMap.get(addr);\n            //other code\n        }\n     //other code\n    }\n</pre>\n\nbut caller addCnxn has the similar code, but don't have the null check:\n<pre>\n     private void addCnxn(NIOServerCnxn cnxn) {\n         InetAddress addr = cnxn.getSocketAddress();\n         Set<NIOServerCnxn> set = ipMap.get(addr);\n        //other code\n      }\n</pre>\nI commit a patch to fix it: adding an null checker in addCnxn, and throws a semantics IOException rather than the ugly NPE.  I think the IOException  is ok, because the caller of addCnxn has the handler code:\n<pre>\n  private void processAcceptedConnections() {\n               //other code\n               try {\n                    addCnxn(cnxn);\n               } catch (IOException e) {\n                    // register, createConnection\n                    cleanupSelectionKey(key);\n                    fastCloseSock(accepted);\n               }\n             }\n</pre>\nMaybe i am wrong, please point out my error.\n\nAuthor: LJ1043041006 <1239497420@qq.com>\n\nReviewers: Patrick Hunt <phunt@apache.org>, Allan Lyu <fangmin@apache.org>, Michael Han <hanm@apache.org>\n\nCloses #525 from lujiefsi/ZOOKEEPER-3009",
        "commit": "https://github.com/apache/zookeeper/commit/13dd5d0db7a5c4fa926d1e44fc2047c24d5d012c"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/13c9f899ff62be6a2eacb28e522d06703f1dab08",
        "bug_id": "zookeeper_8",
        "file": [
            {
                "additions": 5,
                "sha": "7b00715ac0cd242d021b8b2df91167876f37394e",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/fbd21329d32f185d198344f2d394175c92a82f9e/src/java/main/org/apache/zookeeper/server/ZKDatabase.java",
                "deletions": 1,
                "filename": "src/java/main/org/apache/zookeeper/server/ZKDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/ZKDatabase.java?ref=fbd21329d32f185d198344f2d394175c92a82f9e",
                "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.zookeeper.server;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.util.Collection;\n@@ -302,7 +303,10 @@ public boolean isTxnLogSyncEnabled() {\n     public long calculateTxnLogSizeLimit() {\n         long snapSize = 0;\n         try {\n-            snapSize = snapLog.findMostRecentSnapshot().length();\n+            File snapFile = snapLog.findMostRecentSnapshot();\n+            if (snapFile != null) {\n+                snapSize = snapFile.length();\n+            }\n         } catch (IOException e) {\n             LOG.error(\"Unable to get size of most recent snapshot\");\n         }",
                "changes": 6,
                "blob_url": "https://github.com/apache/zookeeper/blob/fbd21329d32f185d198344f2d394175c92a82f9e/src/java/main/org/apache/zookeeper/server/ZKDatabase.java"
            },
            {
                "additions": 13,
                "sha": "c757fc3ea317882d35ce825f4362da6862fbfe97",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/fbd21329d32f185d198344f2d394175c92a82f9e/src/java/test/org/apache/zookeeper/test/ZkDatabaseCorruptionTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/test/ZkDatabaseCorruptionTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/ZkDatabaseCorruptionTest.java?ref=fbd21329d32f185d198344f2d394175c92a82f9e",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.zookeeper.ZooDefs;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.server.SyncRequestProcessor;\n+import org.apache.zookeeper.server.ZKDatabase;\n import org.apache.zookeeper.server.persistence.FileTxnSnapLog;\n import org.apache.zookeeper.server.quorum.QuorumPeer;\n import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;\n@@ -39,6 +40,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.assertEquals;\n+\n public class ZkDatabaseCorruptionTest extends ZKTestCase {\n     protected static final Logger LOG = LoggerFactory.getLogger(ZkDatabaseCorruptionTest.class);\n     public static final long CONNECTION_TIMEOUT = ClientTest.CONNECTION_TIMEOUT;\n@@ -153,5 +156,15 @@ public void testCorruption() throws Exception {\n         if (leaderSid != 5)QuorumBase.shutdown(qb.s5);\n     }\n \n+    @Test\n+    public void testAbsentRecentSnapshot() throws IOException {\n+        ZKDatabase zkDatabase = new ZKDatabase(new FileTxnSnapLog(new File(\"foo\"), new File(\"bar\")){\n+            @Override\n+            public File findMostRecentSnapshot() throws IOException {\n+                return null;\n+            }\n+        });\n+        assertEquals(0, zkDatabase.calculateTxnLogSizeLimit());\n+    }\n \n }",
                "changes": 13,
                "blob_url": "https://github.com/apache/zookeeper/blob/fbd21329d32f185d198344f2d394175c92a82f9e/src/java/test/org/apache/zookeeper/test/ZkDatabaseCorruptionTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-3006: Potential NPE in ZKDatabase#calculateTxnLogSizeLimit\n\nLJ1043041006 found a potential NPE in ZKDatabase#calculateTxnLogSizeLimit: https://issues.apache.org/jira/browse/ZOOKEEPER-3006\n\n```\n//ZKDatabase\npublic long calculateTxnLogSizeLimit() {\n    long snapSize = 0;\n    try {\n        snapSize = snapLog.findMostRecentSnapshot().length();\n     } catch (IOException e) {\n        LOG.error(\"Unable to get size of most recent snapshot\");\n    }\n    return (long) (snapSize * snapshotSizeFactor);\n}\n```\n\n in FileTxnSnapLog#findMostRecentSnapshot(), it will return the result of  FileSnap#findMostRecentSnapshot:\n\n```\n// called by FileTxnSnapLog#findMostRecentSnapshot()\npublic File findMostRecentSnapshot() throws IOException {\n        List<File> files = findNValidSnapshots(1);\n        if (files.size() == 0) {\n            return null;\n        }\n        return files.get(0);\n}\n```\n\nSo it will return null when the files sizes is 0, but ZKDatabase#calculateTxnLogSizeLimit has no null checker.\n\nAuthor: Edward Ribeiro <edward.ribeiro@gmail.com>\n\nReviewers: Andor Moln\u00e1r <andor@cloudera.com>, Michael Han <hanm@apache.org>, maoling <maoling199210191@sina.com>\n\nCloses #493 from edwardoliveira/zk-3006-potential-npe",
        "commit": "https://github.com/apache/zookeeper/commit/fbd21329d32f185d198344f2d394175c92a82f9e"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/181de25c0dc703eaff77dd6415b676f09564277a",
        "bug_id": "zookeeper_9",
        "file": [
            {
                "additions": 4,
                "sha": "2c9e5e7151fe758cb382b0c6f3ad962ef898206e",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/4ad2341c18020ecb08e7e26b79cacc3569b9d31e/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java",
                "deletions": 0,
                "filename": "src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java?ref=4ad2341c18020ecb08e7e26b79cacc3569b9d31e",
                "patch": "@@ -869,6 +869,10 @@ public ServerCnxnFactory getServerCnxnFactory() {\n         return serverCnxnFactory;\n     }\n \n+    public ServerCnxnFactory getSecureServerCnxnFactory() {\n+        return secureServerCnxnFactory;\n+    }\n+\n     public void setSecureServerCnxnFactory(ServerCnxnFactory factory) {\n         secureServerCnxnFactory = factory;\n     }",
                "changes": 4,
                "blob_url": "https://github.com/apache/zookeeper/blob/4ad2341c18020ecb08e7e26b79cacc3569b9d31e/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java"
            },
            {
                "additions": 15,
                "sha": "3f37246d4861a330e8e51497cf128f3a885188fd",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/4ad2341c18020ecb08e7e26b79cacc3569b9d31e/src/java/main/org/apache/zookeeper/server/admin/Commands.java",
                "deletions": 1,
                "filename": "src/java/main/org/apache/zookeeper/server/admin/Commands.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/admin/Commands.java?ref=4ad2341c18020ecb08e7e26b79cacc3569b9d31e",
                "patch": "@@ -18,7 +18,9 @@\n \n package org.apache.zookeeper.server.admin;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -29,6 +31,7 @@\n import org.apache.zookeeper.Environment.Entry;\n import org.apache.zookeeper.Version;\n import org.apache.zookeeper.server.DataTree;\n+import org.apache.zookeeper.server.ServerCnxnFactory;\n import org.apache.zookeeper.server.ServerStats;\n import org.apache.zookeeper.server.ZKDatabase;\n import org.apache.zookeeper.server.ZooKeeperServer;\n@@ -174,7 +177,18 @@ public ConsCommand() {\n         @Override\n         public CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs) {\n             CommandResponse response = initializeResponse();\n-            response.put(\"connections\", zkServer.getServerCnxnFactory().getAllConnectionInfo(false));\n+            ServerCnxnFactory serverCnxnFactory = zkServer.getServerCnxnFactory();\n+            if (serverCnxnFactory != null) {\n+                response.put(\"connections\", serverCnxnFactory.getAllConnectionInfo(false));\n+            } else {\n+                response.put(\"connections\", Collections.emptyList());\n+            }\n+            ServerCnxnFactory secureServerCnxnFactory = zkServer.getSecureServerCnxnFactory();\n+            if (secureServerCnxnFactory != null) {\n+                response.put(\"secure_connections\", secureServerCnxnFactory.getAllConnectionInfo(false));\n+            } else {\n+                response.put(\"secure_connections\", Collections.emptyList());\n+            }\n             return response;\n         }\n     }",
                "changes": 16,
                "blob_url": "https://github.com/apache/zookeeper/blob/4ad2341c18020ecb08e7e26b79cacc3569b9d31e/src/java/main/org/apache/zookeeper/server/admin/Commands.java"
            },
            {
                "additions": 23,
                "sha": "762547ffcda516544b16966cce78089b604a7654",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/4ad2341c18020ecb08e7e26b79cacc3569b9d31e/src/java/test/org/apache/zookeeper/server/admin/CommandsTest.java",
                "deletions": 2,
                "filename": "src/java/test/org/apache/zookeeper/server/admin/CommandsTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/admin/CommandsTest.java?ref=4ad2341c18020ecb08e7e26b79cacc3569b9d31e",
                "patch": "@@ -18,15 +18,19 @@\n \n package org.apache.zookeeper.server.admin;\n \n+import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import java.io.IOException;\n-import java.nio.Buffer;\n import java.util.HashMap;\n import java.util.Map;\n \n+import org.apache.zookeeper.server.ServerCnxnFactory;\n import org.apache.zookeeper.server.ServerStats;\n import org.apache.zookeeper.server.ZooKeeperServer;\n import org.apache.zookeeper.server.quorum.BufferStats;\n@@ -108,7 +112,9 @@ public void testConfiguration() throws IOException, InterruptedException {\n     @Test\n     public void testConnections() throws IOException, InterruptedException {\n         testCommand(\"connections\",\n-                    new Field(\"connections\", Iterable.class));\n+                    new Field(\"connections\", Iterable.class),\n+                    new Field(\"secure_connections\", Iterable.class)\n+                );\n     }\n \n     @Test\n@@ -240,4 +246,19 @@ public void testWatchSummary() throws IOException, InterruptedException {\n                     new Field(\"num_total_watches\", Integer.class));\n     }\n \n+    @Test\n+    public void testConsCommandSecureOnly() {\n+        // Arrange\n+        Commands.ConsCommand cmd = new Commands.ConsCommand();\n+        ZooKeeperServer zkServer = mock(ZooKeeperServer.class);\n+        ServerCnxnFactory cnxnFactory = mock(ServerCnxnFactory.class);\n+        when(zkServer.getSecureServerCnxnFactory()).thenReturn(cnxnFactory);\n+\n+        // Act\n+        CommandResponse response = cmd.run(zkServer, null);\n+\n+        // Assert\n+        assertThat(response.toMap().containsKey(\"connections\"), is(true));\n+        assertThat(response.toMap().containsKey(\"secure_connections\"), is(true));\n+    }\n }",
                "changes": 25,
                "blob_url": "https://github.com/apache/zookeeper/blob/4ad2341c18020ecb08e7e26b79cacc3569b9d31e/src/java/test/org/apache/zookeeper/server/admin/CommandsTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2261: When only secureClientPort is configured connections, configuration, connection_stat_reset, and stats admin commands throw NullPointerException\n\nRoot cause of the issue is that property getter returns the non-secure ServerCnxnFactory instance always. When Quorum SSL is enabled, we set a separate field which is the secure instance.\n\nProperty getter should detect the scenario and return the proper instance.\n\nFirst commit contains some refactoring: shuffling the existing ZooKeeperServer tests to relevant places.\nSecond commit is the actual fix + new unit tests.\n\nSorry about indentation changes, but `FileTxnLogTest.java` was indented by 2 spaces instead of 4.\n\nAuthor: Andor Molnar <andor@apache.org>\nAuthor: Andor Molnar <andor@cloudera.com>\n\nReviewers: breed, hanm, nkalmar\n\nCloses #545 from anmolnar/ZOOKEEPER-2261",
        "commit": "https://github.com/apache/zookeeper/commit/4ad2341c18020ecb08e7e26b79cacc3569b9d31e"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/5c96887643b2465caabbfd4763c7ebb3cd1aa024",
        "bug_id": "zookeeper_10",
        "file": [
            {
                "additions": 20,
                "sha": "1bd0fbf5b23961a9e890e0dc0bf254cb935e8ca7",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/2022766ec907f63b1b43fc5455e9e7761cd332f6/src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java",
                "deletions": 5,
                "filename": "src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java?ref=2022766ec907f63b1b43fc5455e9e7761cd332f6",
                "patch": "@@ -22,7 +22,6 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.Map;\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.TimeUnit;\n@@ -322,7 +321,7 @@ public void run() {\n                          * If it is from a non-voting server (such as an observer or\n                          * a non-voting follower), respond right away.\n                          */\n-                        if(!self.getCurrentAndNextConfigVoters().contains(response.sid)) {\n+                        if(!validVoter(response.sid)) {\n                             Vote current = self.getCurrentVote();\n                             QuorumVerifier qv = self.getQuorumVerifier();\n                             ToSend notmsg = new ToSend(ToSend.mType.notification,\n@@ -927,10 +926,10 @@ public Vote lookForLeader() throws InterruptedException {\n                             tmpTimeOut : maxNotificationInterval);\n                     LOG.info(\"Notification time out: \" + notTimeout);\n                 } \n-                else if (self.getCurrentAndNextConfigVoters().contains(n.sid)) {\n+                else if (validVoter(n.sid) && validVoter(n.leader)) {\n                     /*\n                      * Only proceed if the vote comes from a replica in the current or next\n-                     * voting view.\n+                     * voting view for a replica in the current or next voting view.\n                      */\n                     switch (n.state) {\n                     case LOOKING:\n@@ -1064,7 +1063,12 @@ else if (self.getCurrentAndNextConfigVoters().contains(n.sid)) {\n                         break;\n                     }\n                 } else {\n-                    LOG.warn(\"Ignoring notification from non-cluster member \" + n.sid);\n+                    if (!validVoter(n.leader)) {\n+                        LOG.warn(\"Ignoring notification for non-cluster member sid {} from sid {}\", n.leader, n.sid);\n+                    }\n+                    if (!validVoter(n.sid)) {\n+                        LOG.warn(\"Ignoring notification for sid {} from non-quorum member sid {}\", n.leader, n.sid);\n+                    }\n                 }\n             }\n             return null;\n@@ -1082,4 +1086,15 @@ else if (self.getCurrentAndNextConfigVoters().contains(n.sid)) {\n                     manager.getConnectionThreadCount());\n         }\n     }\n+\n+    /**\n+     * Check if a given sid is represented in either the current or\n+     * the next voting view\n+     *\n+     * @param sid     Server identifier\n+     * @return boolean\n+     */\n+    private boolean validVoter(long sid) {\n+        return self.getCurrentAndNextConfigVoters().contains(sid);\n+    }\n }",
                "changes": 25,
                "blob_url": "https://github.com/apache/zookeeper/blob/2022766ec907f63b1b43fc5455e9e7761cd332f6/src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java"
            },
            {
                "additions": 120,
                "sha": "9bf3e9fb9c1965f24ed7b31ed1f0b7d10690089c",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/2022766ec907f63b1b43fc5455e9e7761cd332f6/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java",
                "deletions": 16,
                "filename": "src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java?ref=2022766ec907f63b1b43fc5455e9e7761cd332f6",
                "patch": "@@ -29,9 +29,9 @@\n import java.nio.channels.SocketChannel;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.TimeoutException;\n import java.util.regex.Pattern;\n \n-import org.apache.log4j.Layout;\n import org.apache.log4j.Level;\n import org.apache.log4j.Logger;\n import org.apache.log4j.PatternLayout;\n@@ -342,9 +342,7 @@ public void testHighestZxidJoinLate() throws Exception {\n     public void testElectionFraud() throws IOException, InterruptedException {\n         // capture QuorumPeer logging\n         ByteArrayOutputStream os = new ByteArrayOutputStream();\n-        String loggingPattern = ((PatternLayout) Logger.getRootLogger().getAppender(\"CONSOLE\").getLayout()).getConversionPattern();\n-        WriterAppender appender = new WriterAppender(new PatternLayout(loggingPattern), os);\n-        appender.setThreshold(Level.INFO);\n+        WriterAppender appender = getConsoleAppender(os, Level.INFO);\n         Logger qlogger = Logger.getLogger(QuorumPeer.class);\n         qlogger.addAppender(appender);\n \n@@ -540,11 +538,8 @@ public void testBadPeerAddressInQuorum() throws Exception {\n         ClientBase.setupTestEnv();\n \n         // setup the logger to capture all logs\n-        Layout layout =\n-                Logger.getRootLogger().getAppender(\"CONSOLE\").getLayout();\n         ByteArrayOutputStream os = new ByteArrayOutputStream();\n-        WriterAppender appender = new WriterAppender(layout, os);\n-        appender.setThreshold(Level.WARN);\n+        WriterAppender appender = getConsoleAppender(os, Level.WARN);\n         Logger qlogger = Logger.getLogger(\"org.apache.zookeeper.server.quorum\");\n         qlogger.addAppender(appender);\n \n@@ -599,11 +594,8 @@ public void testInconsistentPeerType() throws Exception {\n         ClientBase.setupTestEnv();\n \n         // setup the logger to capture all logs\n-        Layout layout =\n-                Logger.getRootLogger().getAppender(\"CONSOLE\").getLayout();\n         ByteArrayOutputStream os = new ByteArrayOutputStream();\n-        WriterAppender appender = new WriterAppender(layout, os);\n-        appender.setThreshold(Level.INFO);\n+        WriterAppender appender = getConsoleAppender(os, Level.INFO);\n         Logger qlogger = Logger.getLogger(\"org.apache.zookeeper.server.quorum\");\n         qlogger.addAppender(appender);\n \n@@ -742,12 +734,9 @@ public void testQuorumDefaults() throws Exception {\n         ClientBase.setupTestEnv();\n \n         // setup the logger to capture all logs\n-        Layout layout =\n-                Logger.getRootLogger().getAppender(\"CONSOLE\").getLayout();\n         ByteArrayOutputStream os = new ByteArrayOutputStream();\n-        WriterAppender appender = new WriterAppender(layout, os);\n+        WriterAppender appender = getConsoleAppender(os, Level.INFO);\n         appender.setImmediateFlush(true);\n-        appender.setThreshold(Level.INFO);\n         Logger zlogger = Logger.getLogger(\"org.apache.zookeeper\");\n         zlogger.addAppender(appender);\n \n@@ -1012,4 +1001,119 @@ public void testFailedTxnAsPartOfQuorumLoss() throws Exception {\n             Assert.assertNull(\"server \" + i + \" should not have /zk\" + leader, servers.zk[i].exists(\"/zk\" + leader, false));\n         }\n     }\n+\n+    /**\n+     * Verify that a node without the leader in its view will not attempt to connect to the leader.\n+     */\n+    @Test\n+    public void testLeaderOutOfView() throws Exception {\n+        ClientBase.setupTestEnv();\n+\n+        int numServers = 3;\n+\n+        // used for assertions later\n+        boolean foundLeading = false;\n+        boolean foundFollowing = false;\n+\n+        // capture QuorumPeer logging\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        WriterAppender appender = getConsoleAppender(os, Level.DEBUG);\n+        Logger qlogger = Logger.getLogger(\"org.apache.zookeeper.server.quorum\");\n+        qlogger.addAppender(appender);\n+\n+        try {\n+            Servers svrs = new Servers();\n+            svrs.clientPorts = new int[numServers];\n+            for (int i = 0; i < numServers; i++) {\n+                svrs.clientPorts[i] = PortAssignment.unique();\n+            }\n+\n+            String quorumCfgIncomplete = getUniquePortCfgForId(1) + \"\\n\" + getUniquePortCfgForId(2);\n+            String quorumCfgComplete = quorumCfgIncomplete + \"\\n\" + getUniquePortCfgForId(3);\n+            svrs.mt = new MainThread[3];\n+\n+            // Node 1 is started without the leader (3) in its config view\n+            svrs.mt[0] = new MainThread(1, svrs.clientPorts[0], quorumCfgIncomplete);\n+            for (int i = 1; i < numServers; i++) {\n+                svrs.mt[i] = new MainThread(i + 1, svrs.clientPorts[i], quorumCfgComplete);\n+            }\n+\n+            // Node 1 must be started first, before quorum is formed, to trigger the attempted invalid connection to 3\n+            svrs.mt[0].start();\n+            QuorumPeer quorumPeer1 = waitForQuorumPeer(svrs.mt[0], CONNECTION_TIMEOUT);\n+            Assert.assertTrue(quorumPeer1.getPeerState() == QuorumPeer.ServerState.LOOKING);\n+\n+            // Node 3 started second to avoid 1 and 2 forming a quorum before 3 starts up\n+            int highestServerIndex = numServers - 1;\n+            svrs.mt[highestServerIndex].start();\n+            QuorumPeer quorumPeer3 = waitForQuorumPeer(svrs.mt[highestServerIndex], CONNECTION_TIMEOUT);\n+            Assert.assertTrue(quorumPeer3.getPeerState() == QuorumPeer.ServerState.LOOKING);\n+\n+            // Node 2 started last, kicks off leader election\n+            for (int i = 1; i < highestServerIndex; i++) {\n+                svrs.mt[i].start();\n+            }\n+\n+            // Nodes 2 and 3 now form quorum and fully start. 1 attempts to vote for 3, fails, returns to LOOKING state\n+            for (int i = 1; i < numServers; i++) {\n+                Assert.assertTrue(\"waiting for server to start\",\n+                        ClientBase.waitForServerUp(\"127.0.0.1:\" + svrs.clientPorts[i], CONNECTION_TIMEOUT));\n+            }\n+\n+            Assert.assertTrue(svrs.mt[0].getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LOOKING);\n+            Assert.assertTrue(svrs.mt[highestServerIndex].getQuorumPeer().getPeerState() == QuorumPeer.ServerState.LEADING);\n+            for (int i = 1; i < highestServerIndex; i++) {\n+                Assert.assertTrue(svrs.mt[i].getQuorumPeer().getPeerState() == QuorumPeer.ServerState.FOLLOWING);\n+            }\n+\n+            // Look through the logs for output that indicates Node 1 is LEADING or FOLLOWING\n+            LineNumberReader r = new LineNumberReader(new StringReader(os.toString()));\n+            Pattern leading = Pattern.compile(\".*myid=1.*QuorumPeer.*LEADING.*\");\n+            Pattern following = Pattern.compile(\".*myid=1.*QuorumPeer.*FOLLOWING.*\");\n+\n+            String line;\n+            while ((line = r.readLine()) != null && !foundLeading && !foundFollowing) {\n+                foundLeading = leading.matcher(line).matches();\n+                foundFollowing = following.matcher(line).matches();\n+            }\n+\n+        } finally {\n+            qlogger.removeAppender(appender);\n+        }\n+\n+        Assert.assertFalse(\"Corrupt peer should never become leader\", foundLeading);\n+        Assert.assertFalse(\"Corrupt peer should not attempt connection to out of view leader\", foundFollowing);\n+    }\n+\n+    private WriterAppender getConsoleAppender(ByteArrayOutputStream os, Level level) {\n+        String loggingPattern = ((PatternLayout) Logger.getRootLogger().getAppender(\"CONSOLE\").getLayout()).getConversionPattern();\n+        WriterAppender appender = new WriterAppender(new PatternLayout(loggingPattern), os);\n+        appender.setThreshold(level);\n+        return appender;\n+    }\n+\n+    private String getUniquePortCfgForId(int id) {\n+        return String.format(\"server.%d=127.0.0.1:%d:%d\", id, PortAssignment.unique(), PortAssignment.unique());\n+    }\n+\n+    private QuorumPeer waitForQuorumPeer(MainThread mainThread, int timeout) throws TimeoutException {\n+        long start = Time.currentElapsedTime();\n+        while (true) {\n+            QuorumPeer quorumPeer = mainThread.isAlive() ? mainThread.getQuorumPeer() : null;\n+            if (quorumPeer != null) {\n+                return quorumPeer;\n+            }\n+\n+            if (Time.currentElapsedTime() > start + timeout) {\n+                LOG.error(\"Timed out while waiting for QuorumPeer\");\n+                throw new TimeoutException();\n+            }\n+\n+            try {\n+                Thread.sleep(250);\n+            } catch (InterruptedException e) {\n+                // ignore\n+            }\n+        }\n+    }\n }",
                "changes": 136,
                "blob_url": "https://github.com/apache/zookeeper/blob/2022766ec907f63b1b43fc5455e9e7761cd332f6/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2988: NPE triggered if server receives a vote for a server \u2026\n\n\u2026id not in their voting view\n\nAuthor: Brian Nixon <nixon@fb.com>\n\nReviewers: Abraham Fine <afine@apache.org>, Michael Han <hanm@apache.org>, Edward Ribeiro <edward.ribeiro@gmail.com>\n\nCloses #476 from enixon/ZOOKEEPER-2988",
        "commit": "https://github.com/apache/zookeeper/commit/2022766ec907f63b1b43fc5455e9e7761cd332f6"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/5bcdb84bda57b06d0d4a38ce587ab91cd010e9a2",
        "bug_id": "zookeeper_11",
        "file": [
            {
                "additions": 3,
                "sha": "74a12e181ffb464570e8123e888a09a7cccc7b86",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/8d11ef90f71733a59b28828ee84e9955f297d1e2/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=8d11ef90f71733a59b28828ee84e9955f297d1e2",
                "patch": "@@ -232,6 +232,9 @@ BUGFIXES:\n   ZOOKEEPER-2301: QuorumPeer does not listen on passed client IP in the constructor\n   (Arshad Mohammad via rgs)\n \n+  ZOOKEEPER-2299: NullPointerException in LocalPeerBean for ClientAddress\n+  (Arshad Mohammad via rgs)\n+\n IMPROVEMENTS:\n   ZOOKEEPER-1660 Documentation for Dynamic Reconfiguration (Reed Wanderman-Milne via shralex)  \n ",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/8d11ef90f71733a59b28828ee84e9955f297d1e2/CHANGES.txt"
            },
            {
                "additions": 7,
                "sha": "361eb9473c734dfdd83e860fa9f4026435156121",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/8d11ef90f71733a59b28828ee84e9955f297d1e2/src/java/main/org/apache/zookeeper/server/quorum/LocalPeerBean.java",
                "deletions": 2,
                "filename": "src/java/main/org/apache/zookeeper/server/quorum/LocalPeerBean.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/quorum/LocalPeerBean.java?ref=8d11ef90f71733a59b28828ee84e9955f297d1e2",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.zookeeper.server.quorum;\n \n \n+\n /**\n  * Implementation of the local peer MBean interface.\n  */\n@@ -83,8 +84,12 @@ public String getElectionAddress() {\n     }\n \n     public String getClientAddress() {\n-        return peer.getClientAddress().getHostString() + \":\" +\n-            peer.getClientAddress().getPort();\n+        if (null != peer.cnxnFactory) {\n+            return String.format(\"%s:%d\", peer.cnxnFactory.getLocalAddress()\n+                    .getHostString(), peer.getClientPort());\n+        } else {\n+            return \"\";\n+        }\n     }\n \n     public String getLearnerType(){",
                "changes": 9,
                "blob_url": "https://github.com/apache/zookeeper/blob/8d11ef90f71733a59b28828ee84e9955f297d1e2/src/java/main/org/apache/zookeeper/server/quorum/LocalPeerBean.java"
            },
            {
                "additions": 81,
                "sha": "3cecfbcb4c7b473e249f47f308e2c78a128e8616",
                "status": "added",
                "raw_url": "https://github.com/apache/zookeeper/raw/8d11ef90f71733a59b28828ee84e9955f297d1e2/src/java/test/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java?ref=8d11ef90f71733a59b28828ee84e9955f297d1e2",
                "patch": "@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.server.quorum;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+import org.apache.zookeeper.server.ServerCnxnFactory;\n+import org.junit.Test;\n+\n+public class LocalPeerBeanTest {\n+\n+    /**\n+     * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2299\n+     */\n+    @Test\n+    public void testClientAddress() throws Exception {\n+        QuorumPeer quorumPeer = new QuorumPeer();\n+        LocalPeerBean remotePeerBean = new LocalPeerBean(quorumPeer);\n+\n+        /**\n+         * Case 1: When cnxnFactory is null\n+         */\n+        String result = remotePeerBean.getClientAddress();\n+        assertNotNull(result);\n+        assertEquals(0, result.length());\n+\n+        /**\n+         * Case 2: When only client port is configured\n+         */\n+        ServerCnxnFactory cnxnFactory = ServerCnxnFactory.createFactory();\n+        int clientPort = 2181;\n+        InetSocketAddress address = new InetSocketAddress(clientPort);\n+        cnxnFactory.configure(address, 5, false);\n+        quorumPeer.setCnxnFactory(cnxnFactory);\n+\n+        result = remotePeerBean.getClientAddress();\n+        String ipv4 = \"0.0.0.0:\" + clientPort;\n+        String ipv6 = \"0:0:0:0:0:0:0:0:\" + clientPort;\n+        assertTrue(result.equals(ipv4) || result.equals(ipv6));\n+        // cleanup\n+        cnxnFactory.shutdown();\n+\n+        /**\n+         * Case 3: When both client port and client address is configured\n+         */\n+        InetAddress clientIP = InetAddress.getByAddress(new byte[] { 127, 0, 0,\n+                2 });\n+        address = new InetSocketAddress(clientIP, clientPort);\n+        cnxnFactory = ServerCnxnFactory.createFactory();\n+        cnxnFactory.configure(address, 5, false);\n+        quorumPeer.setCnxnFactory(cnxnFactory);\n+\n+        result = remotePeerBean.getClientAddress();\n+        String expectedResult = \"127.0.0.2:\" + clientPort;\n+        assertEquals(expectedResult, result);\n+        // cleanup\n+        cnxnFactory.shutdown();\n+    }\n+\n+}",
                "changes": 81,
                "blob_url": "https://github.com/apache/zookeeper/blob/8d11ef90f71733a59b28828ee84e9955f297d1e2/src/java/test/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2299: NullPointerException in LocalPeerBean for ClientAddress\n(Arshad Mohammad via rgs)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1718253 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/8d11ef90f71733a59b28828ee84e9955f297d1e2"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/fee4876cd568feac318cc44518aa1fd9a2cc9c31",
        "bug_id": "zookeeper_12",
        "file": [
            {
                "additions": 3,
                "sha": "69a5f1456289665a0f3d13ef266da28ec01d8c52",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/239556e2344f75626b5c6c3f656508e797093011/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=239556e2344f75626b5c6c3f656508e797093011",
                "patch": "@@ -167,6 +167,9 @@ BUGFIXES:\n   ZOOKEEPER-2264: Wrong error message when secureClientPortAddress is\n   configured but secureClientPort is not configured (Arshad Mohammad via rakeshr)\n \n+  ZOOKEEPER-2269: NullPointerException in RemotePeerBean\n+  (Arshad Mohammad via rgs)\n+\n IMPROVEMENTS:\n   ZOOKEEPER-1660 Documentation for Dynamic Reconfiguration (Reed Wanderman-Milne via shralex)  \n ",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/239556e2344f75626b5c6c3f656508e797093011/CHANGES.txt"
            },
            {
                "additions": 5,
                "sha": "dcf56848bf6f8ef9c50610ecb8947e8cff8ceaed",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/239556e2344f75626b5c6c3f656508e797093011/src/java/main/org/apache/zookeeper/server/quorum/RemotePeerBean.java",
                "deletions": 1,
                "filename": "src/java/main/org/apache/zookeeper/server/quorum/RemotePeerBean.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/quorum/RemotePeerBean.java?ref=239556e2344f75626b5c6c3f656508e797093011",
                "patch": "@@ -51,7 +51,11 @@ public String getElectionAddress() {\n     }\n \n     public String getClientAddress() {\n-        return peer.clientAddr.getHostString() + \":\" + peer.clientAddr.getPort();\n+        if (null == peer.clientAddr) {\n+            return \"\";\n+        }\n+        return peer.clientAddr.getHostString() + \":\"\n+                + peer.clientAddr.getPort();\n     }\n \n     public String getLearnerType() {",
                "changes": 6,
                "blob_url": "https://github.com/apache/zookeeper/blob/239556e2344f75626b5c6c3f656508e797093011/src/java/main/org/apache/zookeeper/server/quorum/RemotePeerBean.java"
            },
            {
                "additions": 45,
                "sha": "b99b07dc40fa65b5eb9847d95262779cc5f44af7",
                "status": "added",
                "raw_url": "https://github.com/apache/zookeeper/raw/239556e2344f75626b5c6c3f656508e797093011/src/java/test/org/apache/zookeeper/server/quorum/TestRemotePeerBean.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/server/quorum/TestRemotePeerBean.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/quorum/TestRemotePeerBean.java?ref=239556e2344f75626b5c6c3f656508e797093011",
                "patch": "@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.server.quorum;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;\n+import org.junit.Test;\n+\n+public class TestRemotePeerBean {\n+\n+    /**\n+     * Test case for https://issues.apache.org/jira/browse/ZOOKEEPER-2269\n+     */\n+    @Test\n+    public void testGetClientAddressShouldReturnEmptyStringWhenClientAddressIsNull() {\n+        InetSocketAddress peerCommunicationAddress = null;\n+        // Here peerCommunicationAddress is null, also clientAddr is null\n+        QuorumServer peer = new QuorumServer(1, peerCommunicationAddress);\n+        RemotePeerBean remotePeerBean = new RemotePeerBean(peer);\n+        String clientAddress = remotePeerBean.getClientAddress();\n+        assertNotNull(clientAddress);\n+        assertEquals(0, clientAddress.length());\n+    }\n+\n+}",
                "changes": 45,
                "blob_url": "https://github.com/apache/zookeeper/blob/239556e2344f75626b5c6c3f656508e797093011/src/java/test/org/apache/zookeeper/server/quorum/TestRemotePeerBean.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2269: NullPointerException in RemotePeerBean\n(Arshad Mohammad via rgs)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1702163 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/239556e2344f75626b5c6c3f656508e797093011"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/f6db73a0374f756043ad3b99b994c61cdbd30152",
        "bug_id": "zookeeper_13",
        "file": [
            {
                "additions": 3,
                "sha": "7ec1d3a7b5ab7f42fd76121a3229bacec9414689",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/7033e577a54e1df2a766e1cd59836c7c837e6e74/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=7033e577a54e1df2a766e1cd59836c7c837e6e74",
                "patch": "@@ -400,6 +400,9 @@ BUGFIXES:\n   ZOOKEEPER-1655. Make jline dependency optional in maven pom\n   (Thomas Weise via phunt)\n \n+  ZOOKEEPER-1770. NullPointerException in SnapshotFormatter\n+  (Germ\u00e1n Blanco via phunt)\n+\n IMPROVEMENTS:\n \n   ZOOKEEPER-1170. Fix compiler (eclipse) warnings: unused imports,",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/7033e577a54e1df2a766e1cd59836c7c837e6e74/CHANGES.txt"
            },
            {
                "additions": 5,
                "sha": "0ecab73d051914078b772b75ccc8872ece3d8773",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/7033e577a54e1df2a766e1cd59836c7c837e6e74/src/java/main/org/apache/zookeeper/server/SnapshotFormatter.java",
                "deletions": 1,
                "filename": "src/java/main/org/apache/zookeeper/server/SnapshotFormatter.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/SnapshotFormatter.java?ref=7033e577a54e1df2a766e1cd59836c7c837e6e74",
                "patch": "@@ -87,7 +87,11 @@ private void printZnode(DataTree dataTree, String name) {\n         synchronized(n) { // keep findbugs happy\r\n             System.out.println(name);\r\n             printStat(n.stat);\r\n-            System.out.println(\"  dataLength = \" + n.data.length);\r\n+            if (n.data != null) {\r\n+                System.out.println(\"  dataLength = \" + n.data.length);\r\n+            } else {\r\n+                System.out.println(\"  no data\");\r\n+            }\r\n             children = n.getChildren();\r\n         }\r\n         if (children != null) {\r",
                "changes": 6,
                "blob_url": "https://github.com/apache/zookeeper/blob/7033e577a54e1df2a766e1cd59836c7c837e6e74/src/java/main/org/apache/zookeeper/server/SnapshotFormatter.java"
            },
            {
                "additions": 0,
                "sha": "3146f5656633f739c241b2f921e9e54213a19134",
                "status": "added",
                "raw_url": "https://github.com/apache/zookeeper/raw/7033e577a54e1df2a766e1cd59836c7c837e6e74/src/java/test/data/invalidsnap/version-2/snapshot.273",
                "deletions": 0,
                "filename": "src/java/test/data/invalidsnap/version-2/snapshot.273",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/data/invalidsnap/version-2/snapshot.273?ref=7033e577a54e1df2a766e1cd59836c7c837e6e74",
                "changes": 0,
                "blob_url": "https://github.com/apache/zookeeper/blob/7033e577a54e1df2a766e1cd59836c7c837e6e74/src/java/test/data/invalidsnap/version-2/snapshot.273"
            },
            {
                "additions": 11,
                "sha": "4bf4fb19fcc19416996ef7b70acb148ac088a4e6",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/7033e577a54e1df2a766e1cd59836c7c837e6e74/src/java/test/org/apache/zookeeper/test/InvalidSnapshotTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/test/InvalidSnapshotTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/InvalidSnapshotTest.java?ref=7033e577a54e1df2a766e1cd59836c7c837e6e74",
                "patch": "@@ -70,6 +70,17 @@ public void testSnapshotFormatter() throws Exception {\n         SnapshotFormatter.main(args);\n     }\n     \n+    /**\n+     * Verify the SnapshotFormatter by running it on a known file with one null data.\n+     */\n+    @Test\n+    public void testSnapshotFormatterWithNull() throws Exception {\n+        File snapDir = new File(testData, \"invalidsnap\");\n+        File snapfile = new File(new File(snapDir, \"version-2\"), \"snapshot.273\");\n+        String[] args = {snapfile.getCanonicalFile().toString()};\n+        SnapshotFormatter.main(args);\n+    }\n+    \n     /**\n      * test the snapshot\n      * @throws Exception an exception could be expected",
                "changes": 11,
                "blob_url": "https://github.com/apache/zookeeper/blob/7033e577a54e1df2a766e1cd59836c7c837e6e74/src/java/test/org/apache/zookeeper/test/InvalidSnapshotTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-1770. NullPointerException in SnapshotFormatter (Germ\u00e1n Blanco via phunt)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1528271 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/7033e577a54e1df2a766e1cd59836c7c837e6e74"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/9b1f7faa7902f0f3f5d8aa457b4c53ecb9155343",
        "bug_id": "zookeeper_14",
        "file": [
            {
                "additions": 4,
                "sha": "4a9fbff32dd4a2017d5db8218601cb9dc2140d5c",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/9f7759d73f44901226873cdf2da685877fa06f62/CHANGES.txt",
                "deletions": 1,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=9f7759d73f44901226873cdf2da685877fa06f62",
                "patch": "@@ -51,7 +51,10 @@ BUGFIXES:\n   (patrick hunt via mahadev)\n \n   ZOOKEEPER-245. update readme/quickstart to be release tar, rather than\n-source, based (patrick hunt via mahadev)\n+  source, based (patrick hunt via mahadev)\n+\n+  ZOOKEEPER-251. NullPointerException stopping and starting Zookeeper servers\n+  (mahadev via phunt)\n   \n IMPROVEMENTS:\n    ",
                "changes": 5,
                "blob_url": "https://github.com/apache/zookeeper/blob/9f7759d73f44901226873cdf2da685877fa06f62/CHANGES.txt"
            },
            {
                "additions": 3,
                "sha": "93bfd0b3daf7398f46c1946cd62df17492e40273",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/9f7759d73f44901226873cdf2da685877fa06f62/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java",
                "deletions": 1,
                "filename": "src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java?ref=9f7759d73f44901226873cdf2da685877fa06f62",
                "patch": "@@ -355,7 +355,8 @@ else if (Util.getZxidFromName(f.getName(), \"log\") < zxid) {\n             if (!next())\n                 return;\n             while (hdr.getZxid() < zxid) {\n-                next();\n+                if (!next())\n+                    return;\n             }\n         }\n         \n@@ -446,6 +447,7 @@ public boolean next() throws IOException {\n                 LOG.debug(\"EOF excepton \" + e);\n                 inputStream.close();\n                 inputStream = null;\n+                ia = null;\n                 // thsi means that the file has ended \n                 // we shoud go to the next file\n                 if (!goToNextLog()) {",
                "changes": 4,
                "blob_url": "https://github.com/apache/zookeeper/blob/9f7759d73f44901226873cdf2da685877fa06f62/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java"
            },
            {
                "additions": 18,
                "sha": "697442b34a3358e8c0722961c5df94e28fa8ac5e",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/9f7759d73f44901226873cdf2da685877fa06f62/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                "deletions": 0,
                "filename": "src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java?ref=9f7759d73f44901226873cdf2da685877fa06f62",
                "patch": "@@ -84,6 +84,24 @@ public FileTxnSnapLog(File dataDir, File snapDir) {\n         snapLog = new FileSnap(this.snapDir);\n     }\n     \n+    /**\n+     * get the datadir used by this filetxn\n+     * snap log\n+     * @return the data dir\n+     */\n+    public File getDataDir() {\n+        return this.dataDir;\n+    }\n+    \n+    /**\n+     * get the snap dir used by this \n+     * filetxn snap log\n+     * @return the snap dir\n+     */\n+    public File getSnapDir() {\n+        return this.snapDir;\n+    }\n+    \n     /**\n      * this function restors the server \n      * database after reading from the ",
                "changes": 18,
                "blob_url": "https://github.com/apache/zookeeper/blob/9f7759d73f44901226873cdf2da685877fa06f62/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java"
            },
            {
                "additions": 1,
                "sha": "4a87e5b689c098aa6d280004c3c5af9fa0094710",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/9f7759d73f44901226873cdf2da685877fa06f62/src/java/test/org/apache/zookeeper/test/QuorumTest.java",
                "deletions": 1,
                "filename": "src/java/test/org/apache/zookeeper/test/QuorumTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/QuorumTest.java?ref=9f7759d73f44901226873cdf2da685877fa06f62",
                "patch": "@@ -127,7 +127,7 @@ protected void tearDown() throws Exception {\n         LOG.info(\"FINISHED \" + getName());\n     }\n \n-    private void shutdown(QuorumPeer qp) {\n+    protected void shutdown(QuorumPeer qp) {\n         try {\n             qp.shutdown();\n             qp.join(30000);",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/9f7759d73f44901226873cdf2da685877fa06f62/src/java/test/org/apache/zookeeper/test/QuorumTest.java"
            },
            {
                "additions": 75,
                "sha": "ddc7f7e3b32415e91d2ddb29d2fd97cad834cbe7",
                "status": "added",
                "raw_url": "https://github.com/apache/zookeeper/raw/9f7759d73f44901226873cdf2da685877fa06f62/src/java/test/org/apache/zookeeper/test/RepeatStartupTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/test/RepeatStartupTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/RepeatStartupTest.java?ref=9f7759d73f44901226873cdf2da685877fa06f62",
                "patch": "@@ -0,0 +1,75 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.test;\n+\n+import java.io.IOException;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.server.NIOServerCnxn;\n+import org.apache.zookeeper.server.ZooKeeperServer;\n+import org.apache.zookeeper.server.quorum.QuorumPeer;\n+\n+/**\n+ * this test fails quorum peers \n+ * and then brings up one of the\n+ * node as a standalone server\n+ */\n+public class RepeatStartupTest extends TestCase {\n+    \n+    /** bring up 5 quorum peers and then shut them down\n+     * and then bring one of the nodes as server\n+     * @throws Exception\n+     */\n+    public void testFail() throws Exception {\n+        QuorumTest qt = new QuorumTest();\n+        qt.setUp();\n+        System.out.println(\"Comment: the servers are at \" + qt.hostPort);\n+        ZooKeeper zk = qt.createClient();\n+        zk.create(\"/test\", null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        zk.close();\n+        qt.shutdown(qt.s1);\n+        qt.shutdown(qt.s2);\n+        qt.shutdown(qt.s3);\n+        qt.shutdown(qt.s4);\n+        qt.shutdown(qt.s5);\n+        String hp = qt.hostPort.split(\",\")[0];\n+        ZooKeeperServer zks = new ZooKeeperServer(qt.s1.getTxnFactory().getSnapDir(), \n+                qt.s1.getTxnFactory().getDataDir(), 3000);\n+        final int PORT = Integer.parseInt(hp.split(\":\")[1]);\n+        NIOServerCnxn.Factory factory = null;\n+        if (factory == null) {\n+            factory = new NIOServerCnxn.Factory(PORT);\n+        }\n+        \n+        factory.startup(zks);\n+        System.out.println(\"Comment: starting factory\");\n+        assertTrue(\"waiting for server up\",\n+                   ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,\n+                           QuorumTest.CONNECTION_TIMEOUT));\n+        factory.shutdown();\n+        assertTrue(\"waiting for server down\",\n+                   ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,\n+                                                QuorumTest.CONNECTION_TIMEOUT));\n+        System.out.println(\"Comment: shutting doen standalone\");\n+    }\n+}\n\\ No newline at end of file",
                "changes": 75,
                "blob_url": "https://github.com/apache/zookeeper/blob/9f7759d73f44901226873cdf2da685877fa06f62/src/java/test/org/apache/zookeeper/test/RepeatStartupTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-251. NullPointerException stopping and starting Zookeeper servers\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@725454 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/9f7759d73f44901226873cdf2da685877fa06f62"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/a1c481ceca909e32ec49ff9738b5355eb1c367a7",
        "bug_id": "zookeeper_15",
        "file": [
            {
                "additions": 1,
                "sha": "5bc083cef8acaf2f103c731fd6cdfe6d3d96df15",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/18a282789c4723e3c2a41960174ea55594e43d7a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java",
                "deletions": 1,
                "filename": "zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java?ref=18a282789c4723e3c2a41960174ea55594e43d7a",
                "patch": "@@ -264,7 +264,7 @@ public void run() {\n                     int type = bb.getInt();\n                     bb = bb.slice();\n                     leader.zk.submitRequest(null, sessionId, type, cxid, bb,\n-                            null);\n+                            qp.getAuthinfo());\n                     break;\n                 default:\n                 }",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/18a282789c4723e3c2a41960174ea55594e43d7a/zookeeper/java/src/com/yahoo/zookeeper/server/quorum/FollowerHandler.java"
            }
        ],
        "repo": "zookeeper",
        "message": "Fixed NullPointerException when authInfo was used\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@670804 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/18a282789c4723e3c2a41960174ea55594e43d7a"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/84bbf894673f23cf9aa0ab745cf3a42e7509b3ef",
        "bug_id": "zookeeper_16",
        "file": [
            {
                "additions": 3,
                "sha": "65a1af7930398bc433e264fbe438f759ed9a9e2e",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/d8c783d6def783b3208c73a83a09febbb719eefc/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=d8c783d6def783b3208c73a83a09febbb719eefc",
                "patch": "@@ -370,6 +370,9 @@ BUGFIXES:\n   creating temporary file with some junk folder name for\n   zookeeper_server.pid (Rakesh Kumar Singh via phunt)\n \n+  ZOOKEEPER-2539: Throwing nullpointerException when run the command\n+  \"config -c\" when client port is mentioned as separate and not like\n+  new style (Rakesh Kumar Singh via phunt)\n \n IMPROVEMENTS:\n   ZOOKEEPER-2024 Major throughput improvement with mixed workloads (Kfir Lev-Ari via shralex)",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/d8c783d6def783b3208c73a83a09febbb719eefc/CHANGES.txt"
            },
            {
                "additions": 9,
                "sha": "1ca37d1f86486ddfa5020b097f9784a76fbda709",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/d8c783d6def783b3208c73a83a09febbb719eefc/src/java/main/org/apache/zookeeper/server/util/ConfigUtils.java",
                "deletions": 6,
                "filename": "src/java/main/org/apache/zookeeper/server/util/ConfigUtils.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/util/ConfigUtils.java?ref=d8c783d6def783b3208c73a83a09febbb719eefc",
                "patch": "@@ -28,11 +28,11 @@\n \n \n public class ConfigUtils {\n-\tstatic public String getClientConfigStr(String configData) {\n-        Properties props = new Properties();    \t\n+    static public String getClientConfigStr(String configData) {\n+        Properties props = new Properties();        \n         try {\n           props.load(new StringReader(configData));\n-\t\t} catch (IOException e) {\n+        } catch (IOException e) {\n             e.printStackTrace();\n             return \"\";\n         }\n@@ -43,17 +43,20 @@ static public String getClientConfigStr(String configData) {\n              String key = entry.getKey().toString().trim();\n              String value = entry.getValue().toString().trim();\n              if (key.equals(\"version\")) version = value;\n-             if (!key.startsWith(\"server.\")) continue;\t         \n+             if (!key.startsWith(\"server.\")) continue;           \n              QuorumPeer.QuorumServer qs;\n              try {\n                qs = new QuorumPeer.QuorumServer(-1, value);\n-             } catch (ConfigException e) {\t\t\t\t\n+             } catch (ConfigException e) {              \n                     e.printStackTrace();\n                     continue;\n              }\n              if (!first) sb.append(\",\");\n              else first = false;\n-             sb.append(qs.clientAddr.getHostString() + \":\" + qs.clientAddr.getPort());\n+             if (null != qs.clientAddr) {\n+                 sb.append(qs.clientAddr.getHostString()\n+                         + \":\" + qs.clientAddr.getPort());\n+             }\n         }\n         return version + \" \" + sb.toString();\n     }",
                "changes": 15,
                "blob_url": "https://github.com/apache/zookeeper/blob/d8c783d6def783b3208c73a83a09febbb719eefc/src/java/main/org/apache/zookeeper/server/util/ConfigUtils.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2539: Throwing nullpointerException when run the command config -c\" when client port is mentioned as separate and not like new style (Rakesh Kumar Singh via phunt)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1759835 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/d8c783d6def783b3208c73a83a09febbb719eefc"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/4f7354c9b4412f955f1ff0a6c7add414df3ffef7",
        "bug_id": "zookeeper_17",
        "file": [
            {
                "additions": 3,
                "sha": "c7b0adfdf7d3b9ffb074700b9342ec95b7cca2a2",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/aa4a217ca85966ee135adb27804992e97ec18cbc/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=aa4a217ca85966ee135adb27804992e97ec18cbc",
                "patch": "@@ -314,6 +314,9 @@ BUGFIXES:\n   ZOOKEEPER-2137: Make testPortChange() less flaky\n   (Michael Han via phunt)\n \n+  ZOOKEEPER-2297: NPE is thrown while creating \"key manager\" and \"trust manager\"\n+  (Arshad Mohammad via fpj)\n+\n IMPROVEMENTS:\n   ZOOKEEPER-2024 Major throughput improvement with mixed workloads (Kfir Lev-Ari via shralex)\n ",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/aa4a217ca85966ee135adb27804992e97ec18cbc/CHANGES.txt"
            },
            {
                "additions": 0,
                "sha": "406015f84a51e6afcfe704b881f8494bdd687a25",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/aa4a217ca85966ee135adb27804992e97ec18cbc/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java",
                "deletions": 2,
                "filename": "src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java?ref=aa4a217ca85966ee135adb27804992e97ec18cbc",
                "patch": "@@ -39,10 +39,8 @@ public static void initialize() {\n                 return;\n             IPAuthenticationProvider ipp = new IPAuthenticationProvider();\n             DigestAuthenticationProvider digp = new DigestAuthenticationProvider();\n-            X509AuthenticationProvider x509p = new X509AuthenticationProvider();\n             authenticationProviders.put(ipp.getScheme(), ipp);\n             authenticationProviders.put(digp.getScheme(), digp);\n-            authenticationProviders.put(x509p.getScheme(), x509p);\n             Enumeration<Object> en = System.getProperties().keys();\n             while (en.hasMoreElements()) {\n                 String k = (String) en.nextElement();",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/aa4a217ca85966ee135adb27804992e97ec18cbc/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java"
            },
            {
                "additions": 24,
                "sha": "e772fa801e6485c90af28351ea7f93342fba96d2",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/aa4a217ca85966ee135adb27804992e97ec18cbc/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                "deletions": 0,
                "filename": "src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java?ref=aa4a217ca85966ee135adb27804992e97ec18cbc",
                "patch": "@@ -37,6 +37,7 @@\n import java.util.Map.Entry;\n \n import org.apache.zookeeper.common.StringUtils;\n+import org.apache.zookeeper.common.ZKConfig;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.slf4j.MDC;\n@@ -330,6 +331,9 @@ public void parseProperties(Properties zkProp)\n             this.secureClientPortAddress = new InetSocketAddress(secureClientPort);\n             LOG.info(\"secureClientPortAddress is {}\", this.secureClientPortAddress.toString());\n         }\n+        if (this.secureClientPortAddress != null) {\n+            configureSSLAuth();\n+        }\n \n         if (tickTime == 0) {\n             throw new IllegalArgumentException(\"tickTime is not set\");\n@@ -354,6 +358,26 @@ public void parseProperties(Properties zkProp)\n         }\n     }\n \n+    /**\n+     * Configure SSL authentication only if it is not configured.\n+     * \n+     * @throws ConfigException\n+     *             If authentication scheme is configured but authentication\n+     *             provider is not configured.\n+     */\n+    private void configureSSLAuth() throws ConfigException {\n+        String sslAuthProp = \"zookeeper.authProvider.\" + System.getProperty(ZKConfig.SSL_AUTHPROVIDER, \"x509\");\n+        if (System.getProperty(sslAuthProp) == null) {\n+            if (\"zookeeper.authProvider.x509\".equals(sslAuthProp)) {\n+                System.setProperty(\"zookeeper.authProvider.x509\",\n+                        \"org.apache.zookeeper.server.auth.X509AuthenticationProvider\");\n+            } else {\n+                throw new ConfigException(\"No auth provider configured for the SSL authentication scheme '\"\n+                        + System.getProperty(ZKConfig.SSL_AUTHPROVIDER) + \"'.\");\n+            }\n+        }\n+    }\n+\n     /**\n      * Backward compatibility -- It would backup static config file on bootup\n      * if users write dynamic configuration in \"zoo.cfg\".",
                "changes": 24,
                "blob_url": "https://github.com/apache/zookeeper/blob/aa4a217ca85966ee135adb27804992e97ec18cbc/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java"
            },
            {
                "additions": 36,
                "sha": "b9cdce8461d80a95d803034708f3f0c57a6b07c6",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/aa4a217ca85966ee135adb27804992e97ec18cbc/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java?ref=aa4a217ca85966ee135adb27804992e97ec18cbc",
                "patch": "@@ -19,12 +19,14 @@\n package org.apache.zookeeper.server.quorum;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n \n import java.io.File;\n import java.io.IOException;\n import java.util.Properties;\n \n+import org.apache.zookeeper.common.ZKConfig;\n import org.apache.zookeeper.server.quorum.QuorumPeerConfig.ConfigException;\n import org.junit.Test;\n \n@@ -67,6 +69,40 @@ public void testErrorMessageWhenclientPortNotSetButclientPortAddressSet()\n         }\n     }\n \n+    /**\n+     * https://issues.apache.org/jira/browse/ZOOKEEPER-2297\n+     */\n+    @Test\n+    public void testConfigureSSLAuthGetsConfiguredIfSecurePortConfigured()\n+            throws IOException, ConfigException {\n+        String sslAuthProp = \"zookeeper.authProvider.x509\";\n+        QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig();\n+        Properties zkProp = getDefaultZKProperties();\n+        zkProp.setProperty(\"secureClientPort\", \"12345\");\n+        quorumPeerConfig.parseProperties(zkProp);\n+        String expected = \"org.apache.zookeeper.server.auth.X509AuthenticationProvider\";\n+        String result = System.getProperty(sslAuthProp);\n+        assertEquals(expected, result); \n+    }\n+\n+    /**\n+     * https://issues.apache.org/jira/browse/ZOOKEEPER-2297\n+     */\n+    @Test\n+    public void testCustomSSLAuth()\n+            throws IOException{\n+        System.setProperty(ZKConfig.SSL_AUTHPROVIDER, \"y509\");\n+        QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig();\n+        try {\n+            Properties zkProp = getDefaultZKProperties();\n+            zkProp.setProperty(\"secureClientPort\", \"12345\");\n+            quorumPeerConfig.parseProperties(zkProp);\n+            fail(\"ConfigException is expected\");\n+        } catch (ConfigException e) {\n+            assertNotNull(e.getMessage());\n+        }\n+    }\n+\n     private Properties getDefaultZKProperties() {\n         Properties zkProp = new Properties();\n         zkProp.setProperty(\"dataDir\", new File(\"myDataDir\").getAbsolutePath());",
                "changes": 36,
                "blob_url": "https://github.com/apache/zookeeper/blob/aa4a217ca85966ee135adb27804992e97ec18cbc/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java"
            },
            {
                "additions": 2,
                "sha": "337c8f7df6c01c6d6cb84955062110406a20cf90",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/aa4a217ca85966ee135adb27804992e97ec18cbc/src/java/test/org/apache/zookeeper/test/SSLAuthTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/test/SSLAuthTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/SSLAuthTest.java?ref=aa4a217ca85966ee135adb27804992e97ec18cbc",
                "patch": "@@ -43,6 +43,7 @@ public void setUp() throws Exception {\n         System.setProperty(ZKConfig.SSL_TRUSTSTORE_LOCATION, testDataPath + \"/ssl/testTrustStore.jks\");\n         System.setProperty(ZKConfig.SSL_TRUSTSTORE_PASSWD, \"testpass\");\n         System.setProperty(\"javax.net.debug\", \"ssl\");\n+        System.setProperty(\"zookeeper.authProvider.x509\", \"org.apache.zookeeper.server.auth.X509AuthenticationProvider\");\n \n         String host = \"localhost\";\n         int port = PortAssignment.unique();\n@@ -65,6 +66,7 @@ public void teardown() throws Exception {\n         System.clearProperty(ZKConfig.SSL_TRUSTSTORE_LOCATION);\n         System.clearProperty(ZKConfig.SSL_TRUSTSTORE_PASSWD);\n         System.clearProperty(\"javax.net.debug\");\n+        System.clearProperty(\"zookeeper.authProvider.x509\");\n     }\n \n     @Test",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/aa4a217ca85966ee135adb27804992e97ec18cbc/src/java/test/org/apache/zookeeper/test/SSLAuthTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2297: NPE is thrown while creating \"key manager\" and \"trust manager\" (Arshad Mohammad via fpj)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1749951 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/aa4a217ca85966ee135adb27804992e97ec18cbc"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/750bd2a92efdf178f60394ca736ab12c7401c55e",
        "bug_id": "zookeeper_18",
        "file": [
            {
                "additions": 3,
                "sha": "04af8bcf767419d495d8066a9b118de42a582598",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/b286cccd5a56aed88a7d74cffff87a09790ac97d/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=b286cccd5a56aed88a7d74cffff87a09790ac97d",
                "patch": "@@ -249,6 +249,9 @@ BUGFIXES:\n \n   ZOOKEEPER-412: checkstyle target fails trunk build (Akihiro Suda via cnauroth)\n \n+  ZOOKEEPER-2297: NPE is thrown while creating \"key manager\" and \"trust manager\"\n+  (Arshad Mohammad via rakeshr)\n+\n IMPROVEMENTS:\n   ZOOKEEPER-1660 Documentation for Dynamic Reconfiguration (Reed Wanderman-Milne via shralex)  \n ",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/b286cccd5a56aed88a7d74cffff87a09790ac97d/CHANGES.txt"
            },
            {
                "additions": 0,
                "sha": "406015f84a51e6afcfe704b881f8494bdd687a25",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/b286cccd5a56aed88a7d74cffff87a09790ac97d/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java",
                "deletions": 2,
                "filename": "src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java?ref=b286cccd5a56aed88a7d74cffff87a09790ac97d",
                "patch": "@@ -39,10 +39,8 @@ public static void initialize() {\n                 return;\n             IPAuthenticationProvider ipp = new IPAuthenticationProvider();\n             DigestAuthenticationProvider digp = new DigestAuthenticationProvider();\n-            X509AuthenticationProvider x509p = new X509AuthenticationProvider();\n             authenticationProviders.put(ipp.getScheme(), ipp);\n             authenticationProviders.put(digp.getScheme(), digp);\n-            authenticationProviders.put(x509p.getScheme(), x509p);\n             Enumeration<Object> en = System.getProperties().keys();\n             while (en.hasMoreElements()) {\n                 String k = (String) en.nextElement();",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/b286cccd5a56aed88a7d74cffff87a09790ac97d/src/java/main/org/apache/zookeeper/server/auth/ProviderRegistry.java"
            },
            {
                "additions": 1,
                "sha": "3b026fef70e4cb26125e9f13345b026756dde57a",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/b286cccd5a56aed88a7d74cffff87a09790ac97d/src/java/test/org/apache/zookeeper/test/SSLAuthTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/test/SSLAuthTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/SSLAuthTest.java?ref=b286cccd5a56aed88a7d74cffff87a09790ac97d",
                "patch": "@@ -43,6 +43,7 @@ public void setUp() throws Exception {\n         System.setProperty(X509Util.SSL_TRUSTSTORE_LOCATION, testDataPath + \"/ssl/testTrustStore.jks\");\n         System.setProperty(X509Util.SSL_TRUSTSTORE_PASSWD, \"testpass\");\n         System.setProperty(\"javax.net.debug\", \"ssl\");\n+        System.setProperty(\"zookeeper.authProvider.x509\", \"org.apache.zookeeper.server.auth.X509AuthenticationProvider\");\n \n         String host = \"localhost\";\n         int port = PortAssignment.unique();",
                "changes": 1,
                "blob_url": "https://github.com/apache/zookeeper/blob/b286cccd5a56aed88a7d74cffff87a09790ac97d/src/java/test/org/apache/zookeeper/test/SSLAuthTest.java"
            },
            {
                "additions": 1,
                "sha": "ad7ec8afeac93b97f977f6242455b423f16d8294",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/b286cccd5a56aed88a7d74cffff87a09790ac97d/src/java/test/org/apache/zookeeper/test/SSLTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/test/SSLTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/SSLTest.java?ref=b286cccd5a56aed88a7d74cffff87a09790ac97d",
                "patch": "@@ -50,6 +50,7 @@ public void setup() {\n         System.setProperty(X509Util.SSL_KEYSTORE_PASSWD, \"testpass\");\n         System.setProperty(X509Util.SSL_TRUSTSTORE_LOCATION, testDataPath + \"/ssl/testTrustStore.jks\");\n         System.setProperty(X509Util.SSL_TRUSTSTORE_PASSWD, \"testpass\");\n+        System.setProperty(\"zookeeper.authProvider.x509\", \"org.apache.zookeeper.server.auth.X509AuthenticationProvider\");\n     }\n \n     @After",
                "changes": 1,
                "blob_url": "https://github.com/apache/zookeeper/blob/b286cccd5a56aed88a7d74cffff87a09790ac97d/src/java/test/org/apache/zookeeper/test/SSLTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2297: NPE is thrown while creating \"key manager\" and \"trust manager\" (Arshad Mohammad via rakeshr)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1725872 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/b286cccd5a56aed88a7d74cffff87a09790ac97d"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/bb10cb36bf9d8eb10f6418a6ebc9a84580f60d93",
        "bug_id": "zookeeper_19",
        "file": [
            {
                "additions": 3,
                "sha": "7c995177fe291815fabb71270a69379ff88d8f0f",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/afd85358e0e3c32c93e33081d2904ad86f1f6ecb/zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java",
                "deletions": 3,
                "filename": "zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java?ref=afd85358e0e3c32c93e33081d2904ad86f1f6ecb",
                "patch": "@@ -103,7 +103,7 @@\n  * \n  */\n public class ZooKeeper {\n-    Watcher watcher;\n+    volatile Watcher watcher;\n \n     public enum States {\n         CONNECTING, ASSOCIATING, CONNECTED, CLOSED, AUTH_FAILED;\n@@ -119,16 +119,16 @@ public boolean isAlive() {\n \n     public ZooKeeper(String host, int sessionTimeout, Watcher watcher)\n             throws KeeperException, IOException {\n-        cnxn = new ClientCnxn(host, sessionTimeout, this);\n         this.watcher = watcher;\n+        cnxn = new ClientCnxn(host, sessionTimeout, this);\n     }\n \n     public ZooKeeper(String host, int sessionTimeout, Watcher watcher,\n             long sessionId, byte[] sessionPasswd) throws KeeperException,\n             IOException {\n+        this.watcher = watcher;\n         cnxn = new ClientCnxn(host, sessionTimeout, this, sessionId,\n                 sessionPasswd);\n-        this.watcher = watcher;\n     }\n \n     public long getSessionId() {",
                "changes": 6,
                "blob_url": "https://github.com/apache/zookeeper/blob/afd85358e0e3c32c93e33081d2904ad86f1f6ecb/zookeeper/java/src/com/yahoo/zookeeper/ZooKeeper.java"
            }
        ],
        "repo": "zookeeper",
        "message": "[ 1958361 ] Patch to fix NPE upon access to watcher\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@670943 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/afd85358e0e3c32c93e33081d2904ad86f1f6ecb"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/a6b0e9efbfacb954cf03a7e6ea55920a3e1ab2e2",
        "bug_id": "zookeeper_20",
        "file": [
            {
                "additions": 3,
                "sha": "272ba0a8361a8bb3b1adab3622be900477955dc8",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/892e10f6a45cca0464dae4089265511b7d0b9a38/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=892e10f6a45cca0464dae4089265511b7d0b9a38",
                "patch": "@@ -729,6 +729,9 @@ BUGFIXES:\n   ZOOKEEPER-1984. testLeaderTimesoutOnNewQuorum is a flakey test\n   (Alex Shraer via phunt)\n \n+  ZOOKEEPER-1789. 3.4.x observer causes NPE on 3.5.0 (trunk)\n+  participants (Alex Shraer via phunt)\n+\n IMPROVEMENTS:\n \n   ZOOKEEPER-1170. Fix compiler (eclipse) warnings: unused imports,",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/892e10f6a45cca0464dae4089265511b7d0b9a38/CHANGES.txt"
            },
            {
                "additions": 9,
                "sha": "9f2a0326a0f81c6dc26d0f594d1275fdcf9abc8c",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/892e10f6a45cca0464dae4089265511b7d0b9a38/src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java",
                "deletions": 7,
                "filename": "src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java?ref=892e10f6a45cca0464dae4089265511b7d0b9a38",
                "patch": "@@ -231,13 +231,12 @@ public boolean initiateConnection(Socket sock, Long sid) {\n      */\n     public boolean receiveConnection(Socket sock) {\n         Long sid = null, protocolVersion = null;\n-        InetSocketAddress electionAddr;\n+        InetSocketAddress electionAddr = null;\n         try {\n             DataInputStream din = new DataInputStream(sock.getInputStream());\n             protocolVersion = din.readLong();\n             if (protocolVersion >= 0) { // this is a server id and not a protocol version\n-               sid = protocolVersion;  \n-                electionAddr = self.getVotingView().get(sid).electionAddr;\n+                sid = protocolVersion;\n             } else {\n                 sid = din.readLong();\n                 int num_remaining_bytes = din.readInt();\n@@ -250,11 +249,9 @@ public boolean receiveConnection(Socket sock) {\n                         electionAddr = new InetSocketAddress(host_port[0], Integer.parseInt(host_port[1]));                   \n                     } else {\n                         LOG.error(\"Got urecognized protocol version \" + protocolVersion + \" from \" + sid);\n-                        electionAddr = null;\n                     }\n                 } else {\n-                   LOG.error(\"Read only \" + num_read + \" bytes out of \" + num_remaining_bytes + \" sent by server \" + sid);\n-                   electionAddr = null;                \n+                   LOG.error(\"Read only \" + num_read + \" bytes out of \" + num_remaining_bytes + \" sent by server \" + sid);          \n                 }\n             } \n             if (sid == QuorumPeer.OBSERVER_ID) {\n@@ -289,7 +286,12 @@ public boolean receiveConnection(Socket sock) {\n              */\n             LOG.debug(\"Create new connection to server: \" + sid);\n             closeSocket(sock);\n-            connectOne(sid, electionAddr);\n+\n+            if (electionAddr != null) {\n+                connectOne(sid, electionAddr);\n+            } else {\n+                connectOne(sid);\n+            }\n \n             // Otherwise start worker threads to receive data.\n         } else {",
                "changes": 16,
                "blob_url": "https://github.com/apache/zookeeper/blob/892e10f6a45cca0464dae4089265511b7d0b9a38/src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java"
            },
            {
                "additions": 55,
                "sha": "563c77c41c86c692edfd95ea48d397bc25154d26",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/892e10f6a45cca0464dae4089265511b7d0b9a38/src/java/test/org/apache/zookeeper/test/CnxManagerTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/test/CnxManagerTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/CnxManagerTest.java?ref=892e10f6a45cca0464dae4089265511b7d0b9a38",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.zookeeper.server.quorum.QuorumCnxManager;\n import org.apache.zookeeper.server.quorum.QuorumCnxManager.Message;\n import org.apache.zookeeper.server.quorum.QuorumPeer;\n+import org.apache.zookeeper.server.quorum.QuorumPeer.LearnerType;\n import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;\n import org.apache.zookeeper.server.quorum.QuorumPeer.ServerState;\n import org.junit.Assert;\n@@ -274,6 +275,60 @@ public void testCnxManagerSpinLock() throws Exception {\n         Assert.assertFalse(cnxManager.listener.isAlive());\n     }\n \n+    /**\n+     * Tests a bug in QuorumCnxManager that causes a NPE when a 3.4.6\n+     * observer connects to a 3.5.0 server. \n+     * {@link https://issues.apache.org/jira/browse/ZOOKEEPER-1789}\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testCnxManagerNPE() throws Exception {\n+        // the connecting peer (id = 2) is a 3.4.6 observer\n+        peers.get(2L).type = LearnerType.OBSERVER;\n+        QuorumPeer peer = new QuorumPeer(peers, peerTmpdir[1], peerTmpdir[1],\n+                peerClientPort[1], 3, 1, 1000, 2, 2);\n+        QuorumCnxManager cnxManager = new QuorumCnxManager(peer);\n+        QuorumCnxManager.Listener listener = cnxManager.listener;\n+        if (listener != null) {\n+            listener.start();\n+        } else {\n+            LOG.error(\"Null listener when initializing cnx manager\");\n+        }\n+        int port = peers.get(peer.getId()).electionAddr.getPort();\n+        LOG.info(\"Election port: \" + port);\n+\n+        Thread.sleep(1000);\n+\n+        SocketChannel sc = SocketChannel.open();\n+        sc.socket().connect(peers.get(1L).electionAddr, 5000);\n+\n+        /*\n+         * Write id (3.4.6 protocol). This previously caused a NPE in\n+         * QuorumCnxManager.\n+         */\n+        byte[] msgBytes = new byte[8];\n+        ByteBuffer msgBuffer = ByteBuffer.wrap(msgBytes);\n+        msgBuffer.putLong(2L);\n+        msgBuffer.position(0);\n+        sc.write(msgBuffer);\n+\n+        msgBuffer = ByteBuffer.wrap(new byte[8]);\n+        // write length of message\n+        msgBuffer.putInt(4);\n+        // write message\n+        msgBuffer.putInt(5);\n+        msgBuffer.position(0);\n+        sc.write(msgBuffer);\n+\n+        Message m = cnxManager.pollRecvQueue(1000, TimeUnit.MILLISECONDS);\n+        Assert.assertNotNull(m);\n+\n+        peer.shutdown();\n+        cnxManager.halt();\n+        Assert.assertFalse(cnxManager.listener.isAlive());\n+    }\n+\n     /*\n      * Test if a receiveConnection is able to timeout on socket errors\n      */",
                "changes": 55,
                "blob_url": "https://github.com/apache/zookeeper/blob/892e10f6a45cca0464dae4089265511b7d0b9a38/src/java/test/org/apache/zookeeper/test/CnxManagerTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-1789. 3.4.x observer causes NPE on 3.5.0 (trunk) participants (Alex Shraer via phunt)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1612885 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/892e10f6a45cca0464dae4089265511b7d0b9a38"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/c7c937566ab5c16ef2ef4f1f7b841c334148952c",
        "bug_id": "zookeeper_21",
        "file": [
            {
                "additions": 3,
                "sha": "57f7d0cc288ad6f9aa9f45b202c0a6ba2ea012d4",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/9a97169a433b6eff5c58ff563bbb783c17248fb5/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=9a97169a433b6eff5c58ff563bbb783c17248fb5",
                "patch": "@@ -696,6 +696,9 @@ BUGFIXES:\n \n   ZOOKEEPER-1966. VS and line breaks (Orion Hodson via fpj)\n \n+  ZOOKEEPER-1683. ZooKeeper client NPE when updating server list on disconnected\n+  client (shralex via michim)\n+\n IMPROVEMENTS:\n \n   ZOOKEEPER-1170. Fix compiler (eclipse) warnings: unused imports,",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/9a97169a433b6eff5c58ff563bbb783c17248fb5/CHANGES.txt"
            },
            {
                "additions": 4,
                "sha": "056eb5696281c6f210684f0ddeca81aa2c388cd2",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/9a97169a433b6eff5c58ff563bbb783c17248fb5/src/c/tests/TestReconfig.cc",
                "deletions": 2,
                "filename": "src/c/tests/TestReconfig.cc",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/c/tests/TestReconfig.cc?ref=9a97169a433b6eff5c58ff563bbb783c17248fb5",
                "patch": "@@ -470,11 +470,13 @@ class Zookeeper_reconfig : public CPPUNIT_NS::TestFixture\n \n             // Assert next server is in the 'new' list\n             size_t found = newComing.find(next);\n-            CPPUNIT_ASSERT(found != string::npos);\n+            CPPUNIT_ASSERT_MESSAGE(next + \" not in newComing list\",\n+                                   found != string::npos);\n \n             // Assert not in seen list then append\n             found = seen.find(next);\n-            CPPUNIT_ASSERT(found == string::npos);\n+            CPPUNIT_ASSERT_MESSAGE(next + \" in seen list\",\n+                                   found == string::npos);\n             seen += found + \", \";\n         }\n ",
                "changes": 6,
                "blob_url": "https://github.com/apache/zookeeper/blob/9a97169a433b6eff5c58ff563bbb783c17248fb5/src/c/tests/TestReconfig.cc"
            },
            {
                "additions": 6,
                "sha": "adb27ee843cd7ba310807dd777376a3c244ca30f",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/9a97169a433b6eff5c58ff563bbb783c17248fb5/src/java/main/org/apache/zookeeper/ClientCnxnSocketNIO.java",
                "deletions": 1,
                "filename": "src/java/main/org/apache/zookeeper/ClientCnxnSocketNIO.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/ClientCnxnSocketNIO.java?ref=9a97169a433b6eff5c58ff563bbb783c17248fb5",
                "patch": "@@ -377,7 +377,12 @@ void doTransport(int waitTimeOut, List<Packet> pendingQueue, LinkedList<Packet>\n     @Override\n     void testableCloseSocket() throws IOException {\n         LOG.info(\"testableCloseSocket() called\");\n-        ((SocketChannel) sockKey.channel()).socket().close();\n+        // sockKey may be concurrently accessed by multiple\n+        // threads. We use tmp here to avoid a race condition\n+        SelectionKey tmp = sockKey;\n+        if (tmp!=null) {\n+           ((SocketChannel) tmp.channel()).socket().close();\n+        }\n     }\n \n     @Override",
                "changes": 7,
                "blob_url": "https://github.com/apache/zookeeper/blob/9a97169a433b6eff5c58ff563bbb783c17248fb5/src/java/main/org/apache/zookeeper/ClientCnxnSocketNIO.java"
            },
            {
                "additions": 95,
                "sha": "4e0301848c9f0141894a03ccd65c428a71fad609",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/9a97169a433b6eff5c58ff563bbb783c17248fb5/src/java/main/org/apache/zookeeper/client/StaticHostProvider.java",
                "deletions": 59,
                "filename": "src/java/main/org/apache/zookeeper/client/StaticHostProvider.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/client/StaticHostProvider.java?ref=9a97169a433b6eff5c58ff563bbb783c17248fb5",
                "patch": "@@ -152,8 +152,9 @@ public StaticHostProvider(Collection<InetSocketAddress> serverAddresses,\n \n \n     @Override\n-    public boolean updateServerList(Collection<InetSocketAddress> serverAddresses, \n-        InetSocketAddress currentHost) {\n+    public synchronized boolean updateServerList(\n+            Collection<InetSocketAddress> serverAddresses,\n+            InetSocketAddress currentHost) {\n         // Resolve server addresses and shuffle them\n         List<InetSocketAddress> resolvedList = resolveAndShuffle(serverAddresses);\n         if (resolvedList.isEmpty()) {\n@@ -162,74 +163,106 @@ public boolean updateServerList(Collection<InetSocketAddress> serverAddresses,\n         }\n         // Check if client's current server is in the new list of servers\n         boolean myServerInNewConfig = false;\n+\n+        InetSocketAddress myServer = currentHost;\n+\n+        // choose \"current\" server according to the client rebalancing algorithm\n+        if (reconfigMode) {\n+            myServer = next(0);\n+        }\n+\n+        // if the client is not currently connected to any server\n+        if (myServer == null) {\n+            // reconfigMode = false (next shouldn't return null).\n+            if (lastIndex >= 0) {\n+                // take the last server to which we were connected\n+                myServer = this.serverAddresses.get(lastIndex);\n+            } else {\n+                // take the first server on the list\n+                myServer = this.serverAddresses.get(0);\n+            }\n+        }\n+\n         for (InetSocketAddress addr : resolvedList) {\n-            if (addr.getPort() == currentHost.getPort() &&\n-                    ((addr.getAddress()!=null && currentHost.getAddress()!=null &&\n-                      addr.getAddress().equals(currentHost.getAddress()))\n-                     || addr.getHostName().equals(currentHost.getHostName()))) {\n-                   myServerInNewConfig = true;\n-                   break;\n-               }\n+            if (addr.getPort() == myServer.getPort()\n+                    && ((addr.getAddress() != null\n+                            && myServer.getAddress() != null && addr\n+                            .getAddress().equals(myServer.getAddress())) || addr\n+                            .getHostName().equals(myServer.getHostName()))) {\n+                myServerInNewConfig = true;\n+                break;\n+            }\n         }\n \n-        synchronized(this) {\n-            reconfigMode = true;\n-\n-            newServers.clear();\n-            oldServers.clear();\n-            // Divide the new servers into oldServers that were in the previous list\n-            // and newServers that were not in the previous list\n-            for (InetSocketAddress resolvedAddress : resolvedList) {                \n-                if (this.serverAddresses.contains(resolvedAddress)) {\n-                    oldServers.add(resolvedAddress);\n-                } else {\n-                    newServers.add(resolvedAddress);\n-                }\n-            }        \n+        reconfigMode = true;\n+\n+        newServers.clear();\n+        oldServers.clear();\n+        // Divide the new servers into oldServers that were in the previous list\n+        // and newServers that were not in the previous list\n+        for (InetSocketAddress resolvedAddress : resolvedList) {\n+            if (this.serverAddresses.contains(resolvedAddress)) {\n+                oldServers.add(resolvedAddress);\n+            } else {\n+                newServers.add(resolvedAddress);\n+            }\n+        }\n \n-            int numOld = oldServers.size();\n-            int numNew = newServers.size();                        \n-\n-            // number of servers increased\n-            if (numOld + numNew > this.serverAddresses.size()) {\n-                if (myServerInNewConfig) {\n-                    // my server is in new config, but load should be decreased.\n-                    // Need to decide if this client\n-                    // is moving to one of the new servers\n-                    if (sourceOfRandomness.nextFloat() <= (1 - ((float) this.serverAddresses\n-                            .size()) / (numOld + numNew))) {\n-                        pNew = 1;\n-                        pOld = 0;\n-                    } else {\n-                        // do nothing special - stay with the current server\n-                        reconfigMode = false;\n-                    }\n-                } else {\n-                    // my server is not in new config, and load on old servers must\n-                    // be decreased, so connect to\n-                    // one of the new servers\n+        int numOld = oldServers.size();\n+        int numNew = newServers.size();\n+\n+        // number of servers increased\n+        if (numOld + numNew > this.serverAddresses.size()) {\n+            if (myServerInNewConfig) {\n+                // my server is in new config, but load should be decreased.\n+                // Need to decide if this client\n+                // is moving to one of the new servers\n+                if (sourceOfRandomness.nextFloat() <= (1 - ((float) this.serverAddresses\n+                        .size()) / (numOld + numNew))) {\n                     pNew = 1;\n                     pOld = 0;\n-                }\n-            } else { // number of servers stayed the same or decreased\n-                if (myServerInNewConfig) {\n-                    // my server is in new config, and load should be increased, so\n-                    // stay with this server and do nothing special\n-                    reconfigMode = false;\n                 } else {\n-                    pOld = ((float) (numOld * (this.serverAddresses.size() - (numOld + numNew))))\n-                            / ((numOld + numNew) * (this.serverAddresses.size() - numOld));\n-                    pNew = 1 - pOld;\n+                    // do nothing special - stay with the current server\n+                    reconfigMode = false;\n                 }\n+            } else {\n+                // my server is not in new config, and load on old servers must\n+                // be decreased, so connect to\n+                // one of the new servers\n+                pNew = 1;\n+                pOld = 0;\n+            }\n+        } else { // number of servers stayed the same or decreased\n+            if (myServerInNewConfig) {\n+                // my server is in new config, and load should be increased, so\n+                // stay with this server and do nothing special\n+                reconfigMode = false;\n+            } else {\n+                pOld = ((float) (numOld * (this.serverAddresses.size() - (numOld + numNew))))\n+                        / ((numOld + numNew) * (this.serverAddresses.size() - numOld));\n+                pNew = 1 - pOld;\n             }\n+        }\n \n-            this.serverAddresses = resolvedList;    \n-            currentIndexOld = -1;\n-            currentIndexNew = -1; \n+        if (!reconfigMode) {\n+            currentIndex = resolvedList.indexOf(getServerAtCurrentIndex());\n+        } else {\n             currentIndex = -1;\n-            lastIndex = -1;                \n-            return reconfigMode;\n         }\n+        this.serverAddresses = resolvedList;\n+        currentIndexOld = -1;\n+        currentIndexNew = -1;\n+        lastIndex = currentIndex;\n+        return reconfigMode;\n+    }\n+\n+    public synchronized InetSocketAddress getServerAtIndex(int i) {\n+    \tif (i < 0 || i >= serverAddresses.size()) return null;\n+    \treturn serverAddresses.get(i);\n+    }\n+    \n+    public synchronized InetSocketAddress getServerAtCurrentIndex() {\n+    \treturn getServerAtIndex(currentIndex);\n     }\n \n     public synchronized int size() {\n@@ -279,7 +312,10 @@ public InetSocketAddress next(long spinDelay) {\n         synchronized(this) {\n             if (reconfigMode) {\n                 addr = nextHostInReconfigMode();\n-                if (addr != null) return addr;                \n+                if (addr != null) {\n+                \tcurrentIndex = serverAddresses.indexOf(addr);\n+                \treturn addr;                \n+                }\n                 //tried all servers and couldn't connect\n                 reconfigMode = false;\n                 needToSleep = (spinDelay > 0);",
                "changes": 154,
                "blob_url": "https://github.com/apache/zookeeper/blob/9a97169a433b6eff5c58ff563bbb783c17248fb5/src/java/main/org/apache/zookeeper/client/StaticHostProvider.java"
            },
            {
                "additions": 136,
                "sha": "bf1dcef7fbca91fee6128096e8413013fa11e0e0",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/9a97169a433b6eff5c58ff563bbb783c17248fb5/src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java",
                "deletions": 1,
                "filename": "src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java?ref=9a97169a433b6eff5c58ff563bbb783c17248fb5",
                "patch": "@@ -123,21 +123,25 @@ public void testUpdateClientMigrateOrNot() throws UnknownHostException {\n         // Number of machines becomes smaller, my server is in the new cluster\n         boolean disconnectRequired = hostProvider.updateServerList(newList, myServer);\n         assertTrue(!disconnectRequired);\n-\n+        hostProvider.onConnected();\n+        \n         // Number of machines stayed the same, my server is in the new cluster\n         disconnectRequired = hostProvider.updateServerList(newList, myServer);\n         assertTrue(!disconnectRequired);\n+        hostProvider.onConnected();\n \n         // Number of machines became smaller, my server is not in the new\n         // cluster\n         newList = getServerAddresses((byte) 2); // 10.10.10.2:1236, 10.10.10.1:1235\n         disconnectRequired = hostProvider.updateServerList(newList, myServer);\n         assertTrue(disconnectRequired);\n+        hostProvider.onConnected();\n \n         // Number of machines stayed the same, my server is not in the new\n         // cluster\n         disconnectRequired = hostProvider.updateServerList(newList, myServer);\n         assertTrue(disconnectRequired);\n+        hostProvider.onConnected();\n \n         // Number of machines increased, my server is not in the new cluster\n         newList = new ArrayList<InetSocketAddress>(3);\n@@ -147,6 +151,7 @@ public void testUpdateClientMigrateOrNot() throws UnknownHostException {\n         myServer = new InetSocketAddress(InetAddress.getByAddress(new byte[]{10, 10, 10, 1}), 1235);\n         disconnectRequired = hostProvider.updateServerList(newList, myServer);\n         assertTrue(disconnectRequired);\n+        hostProvider.onConnected();\n \n         // Number of machines increased, my server is in the new cluster\n         // Here whether to move or not depends on the difference of cluster\n@@ -162,6 +167,7 @@ public void testUpdateClientMigrateOrNot() throws UnknownHostException {\n             if (disconnectRequired)\n                 numDisconnects++;\n         }\n+        hostProvider.onConnected();\n \n        // should be numClients/10 in expectation, we test that its numClients/10 +- slackPercent \n         assertTrue(numDisconnects < upperboundCPS(numClients, 10));\n@@ -227,6 +233,7 @@ public void testUpdateMigrationGoesRound() throws UnknownHostException {\n         }\n \n         assertEquals(first, hostProvider.next(0));\n+        hostProvider.onConnected();\n     }\n \n     @Test\n@@ -242,6 +249,7 @@ public void testUpdateLoadBalancing() throws UnknownHostException {\n             hostProviderArray[i] = getHostProvider((byte) 9);\n             curHostForEachClient[i] = hostProviderArray[i].next(0);\n             numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n+            hostProviderArray[i].onConnected();\n         }\n \n         for (int i = 0; i < 9; i++) {\n@@ -257,6 +265,7 @@ public void testUpdateLoadBalancing() throws UnknownHostException {\n             disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n             if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n             numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n+            hostProviderArray[i].onConnected();\n         }\n \n         for (int i = 0; i < 8; i++) {\n@@ -273,6 +282,7 @@ public void testUpdateLoadBalancing() throws UnknownHostException {\n             disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n             if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n             numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n+            hostProviderArray[i].onConnected();\n         }\n \n         for (int i = 0; i < 6; i++) {\n@@ -295,6 +305,7 @@ public void testUpdateLoadBalancing() throws UnknownHostException {\n             disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n             if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n             numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n+            hostProviderArray[i].onConnected();\n         }\n \n         assertTrue(numClientsPerHost[0] == 0);\n@@ -312,6 +323,130 @@ public void testUpdateLoadBalancing() throws UnknownHostException {\n             disconnectRequired = hostProviderArray[i].updateServerList(newList, curHostForEachClient[i]);\n             if (disconnectRequired) curHostForEachClient[i] = hostProviderArray[i].next(0);\n             numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n+            hostProviderArray[i].onConnected();\n+        }\n+\n+        for (int i = 0; i < 9; i++) {\n+            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 9));\n+            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 9));\n+        }\n+    }\n+\n+    @Test\n+    public void testNoCurrentHostDuringNormalMode() throws UnknownHostException {\n+        // Start with 9 servers and 10000 clients\n+        boolean disconnectRequired;\n+        StaticHostProvider[] hostProviderArray = new StaticHostProvider[numClients];\n+        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n+        int[] numClientsPerHost = new int[9];\n+\n+        // initialization\n+        for (int i = 0; i < numClients; i++) {\n+            hostProviderArray[i] = getHostProvider((byte) 9);\n+            if (i >= (numClients / 2)) {\n+                curHostForEachClient[i] = hostProviderArray[i].next(0);\n+            } else {\n+                // its supposed to be the first server on serverList.\n+                // we'll set it later, see below (*)\n+                curHostForEachClient[i] = null;\n+            }\n+        }\n+\n+        // remove hosts 7 and 8 (the last two in a list of 9 hosts)\n+        Collection<InetSocketAddress> newList = getServerAddresses((byte) 7);\n+\n+        for (int i = 0; i < numClients; i++) {\n+            // tests the case currentHost == null && lastIndex == -1\n+            // calls next for clients with index < numClients/2\n+            disconnectRequired = hostProviderArray[i].updateServerList(newList,\n+                    curHostForEachClient[i]);\n+            if (disconnectRequired)\n+                curHostForEachClient[i] = hostProviderArray[i].next(0);\n+            else if (curHostForEachClient[i] == null) {\n+                // (*) setting it to what it should be\n+                curHostForEachClient[i] = hostProviderArray[i]\n+                        .getServerAtIndex(0);\n+            }\n+            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n+            // sets lastIndex, resets reconfigMode\n+            hostProviderArray[i].onConnected();\n+        }\n+\n+        for (int i = 0; i < 7; i++) {\n+            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 7));\n+            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 7));\n+            numClientsPerHost[i] = 0; // prepare for next test\n+        }\n+        assertTrue(numClientsPerHost[7] == 0);\n+        assertTrue(numClientsPerHost[8] == 0);\n+\n+        // add back server 7\n+        newList = getServerAddresses((byte) 8);\n+\n+        for (int i = 0; i < numClients; i++) {\n+            InetSocketAddress myServer = (i < (numClients / 2)) ? null\n+                    : curHostForEachClient[i];\n+            // tests the case currentHost == null && lastIndex >= 0\n+            disconnectRequired = hostProviderArray[i].updateServerList(newList,\n+                    myServer);\n+            if (disconnectRequired)\n+                curHostForEachClient[i] = hostProviderArray[i].next(0);\n+            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n+            hostProviderArray[i].onConnected();\n+        }\n+\n+        for (int i = 0; i < 8; i++) {\n+            assertTrue(numClientsPerHost[i] <= upperboundCPS(numClients, 8));\n+            assertTrue(numClientsPerHost[i] >= lowerboundCPS(numClients, 8));\n+        }\n+    }\n+\n+    @Test\n+    public void testReconfigDuringReconfigMode() throws UnknownHostException {\n+        // Start with 9 servers and 10000 clients\n+        boolean disconnectRequired;\n+        StaticHostProvider[] hostProviderArray = new StaticHostProvider[numClients];\n+        InetSocketAddress[] curHostForEachClient = new InetSocketAddress[numClients];\n+        int[] numClientsPerHost = new int[9];\n+\n+        // initialization\n+        for (int i = 0; i < numClients; i++) {\n+            hostProviderArray[i] = getHostProvider((byte) 9);\n+            curHostForEachClient[i] = hostProviderArray[i].next(0);\n+        }\n+\n+        // remove hosts 7 and 8 (the last two in a list of 9 hosts)\n+        Collection<InetSocketAddress> newList = getServerAddresses((byte) 7);\n+\n+        for (int i = 0; i < numClients; i++) {\n+            // sets reconfigMode\n+            hostProviderArray[i].updateServerList(newList,\n+                    curHostForEachClient[i]);\n+        }\n+\n+        // add back servers 7 and 8 while still in reconfigMode (we didn't call\n+        // next)\n+        newList = getServerAddresses((byte) 9);\n+\n+        for (int i = 0; i < numClients; i++) {\n+            InetSocketAddress myServer = (i < (numClients / 2)) ? null\n+                    : curHostForEachClient[i];\n+            // for i < (numClients/2) this tests the case currentHost == null &&\n+            // reconfigMode = true\n+            // for i >= (numClients/2) this tests the case currentHost!=null &&\n+            // reconfigMode = true\n+            disconnectRequired = hostProviderArray[i].updateServerList(newList,\n+                    myServer);\n+            if (disconnectRequired)\n+                curHostForEachClient[i] = hostProviderArray[i].next(0);\n+            else {\n+                // currentIndex was set by the call to updateServerList, which\n+                // called next\n+                curHostForEachClient[i] = hostProviderArray[i]\n+                        .getServerAtCurrentIndex();\n+            }\n+            numClientsPerHost[curHostForEachClient[i].getPort() - 1235]++;\n+            hostProviderArray[i].onConnected();\n         }\n \n         for (int i = 0; i < 9; i++) {",
                "changes": 137,
                "blob_url": "https://github.com/apache/zookeeper/blob/9a97169a433b6eff5c58ff563bbb783c17248fb5/src/java/test/org/apache/zookeeper/test/StaticHostProviderTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-1683. ZooKeeper client NPE when updating server list on disconnected client (shralex via michim)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1611474 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/9a97169a433b6eff5c58ff563bbb783c17248fb5"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/d88a04ffdfa37cb80f4a8adf2d205d9a36b27840",
        "bug_id": "zookeeper_22",
        "file": [
            {
                "additions": 2,
                "sha": "cec9371b78f976b88dd30aa35356889cf806550a",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/6aaa3b23f708fbbd1c04f58646ba27cb70831e27/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=6aaa3b23f708fbbd1c04f58646ba27cb70831e27",
                "patch": "@@ -558,6 +558,8 @@ BUGFIXES:\n   ZOOKEEPER-1861. ConcurrentHashMap isn't used properly in QuorumCnxManager \n   (Ted Yu via camille)\n \n+  ZOOKEEPER-1755. Concurrent operations of four letter 'dump' ephemeral \n+  command and killSession causing NPE (Rakesh R via camille)\n IMPROVEMENTS:\n \n   ZOOKEEPER-1170. Fix compiler (eclipse) warnings: unused imports,",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/6aaa3b23f708fbbd1c04f58646ba27cb70831e27/CHANGES.txt"
            },
            {
                "additions": 5,
                "sha": "24cc8ff5c4c8bc14ffeab08c200d8909ac9c1147",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/6aaa3b23f708fbbd1c04f58646ba27cb70831e27/src/java/main/org/apache/zookeeper/server/DataTree.java",
                "deletions": 3,
                "filename": "src/java/main/org/apache/zookeeper/server/DataTree.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/DataTree.java?ref=6aaa3b23f708fbbd1c04f58646ba27cb70831e27",
                "patch": "@@ -1275,9 +1275,11 @@ public void dumpEphemerals(PrintWriter pwriter) {\n             pwriter.print(\"0x\" + Long.toHexString(k));\n             pwriter.println(\":\");\n             HashSet<String> tmp = ephemerals.get(k);\n-            synchronized (tmp) {\n-                for (String path : tmp) {\n-                    pwriter.println(\"\\t\" + path);\n+            if (tmp != null) {\n+                synchronized (tmp) {\n+                    for (String path : tmp) {\n+                        pwriter.println(\"\\t\" + path);\n+                    }\n                 }\n             }\n         }",
                "changes": 8,
                "blob_url": "https://github.com/apache/zookeeper/blob/6aaa3b23f708fbbd1c04f58646ba27cb70831e27/src/java/main/org/apache/zookeeper/server/DataTree.java"
            },
            {
                "additions": 62,
                "sha": "ebc2fca0cd532622e492c168cab4a8114c76a2ff",
                "status": "renamed",
                "raw_url": "https://github.com/apache/zookeeper/raw/6aaa3b23f708fbbd1c04f58646ba27cb70831e27/src/java/test/org/apache/zookeeper/server/DataTreeTest.java",
                "previous_filename": "src/java/test/org/apache/zookeeper/test/DataTreeTest.java",
                "deletions": 5,
                "filename": "src/java/test/org/apache/zookeeper/server/DataTreeTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/DataTreeTest.java?ref=6aaa3b23f708fbbd1c04f58646ba27cb70831e27",
                "patch": "@@ -16,10 +16,12 @@\n  * limitations under the License.\n  */\n \n-package org.apache.zookeeper.test;\n+package org.apache.zookeeper.server;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.zookeeper.KeeperException.NoNodeException;\n+import org.apache.zookeeper.KeeperException.NodeExistsException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZKTestCase;\n@@ -30,14 +32,17 @@\n import org.junit.Before;\n import org.junit.Test;\n import org.apache.zookeeper.server.DataNode;\n-import java.io.IOException;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n import org.apache.zookeeper.Quotas;\n import org.apache.jute.BinaryInputArchive;\n import org.apache.jute.BinaryOutputArchive;\n import org.apache.zookeeper.common.PathTrie;\n import java.lang.reflect.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n public class DataTreeTest extends ZKTestCase {\n     protected static final Logger LOG = LoggerFactory.getLogger(DataTreeTest.class);\n@@ -54,7 +59,59 @@ public void tearDown() throws Exception {\n         dt=null;\n     }\n \n-    @Test\n+    /**\n+     * For ZOOKEEPER-1755 - Test race condition when taking dumpEphemerals and\n+     * removing the session related ephemerals from DataTree structure\n+     */\n+    @Test(timeout = 60000)\n+    public void testDumpEphemerals() throws Exception {\n+        int count = 1000;\n+        long session = 1000;\n+        long zxid = 2000;\n+        final DataTree dataTree = new DataTree();\n+        LOG.info(\"Create {} zkclient sessions and its ephemeral nodes\", count);\n+        createEphemeralNode(session, dataTree, count);\n+        final AtomicBoolean exceptionDuringDumpEphemerals = new AtomicBoolean(\n+                false);\n+        final AtomicBoolean running = new AtomicBoolean(true);\n+        Thread thread = new Thread() {\n+            public void run() {\n+                PrintWriter pwriter = new PrintWriter(new StringWriter());\n+                try {\n+                    while (running.get()) {\n+                        dataTree.dumpEphemerals(pwriter);\n+                    }\n+                } catch (Exception e) {\n+                    LOG.error(\"Received exception while dumpEphemerals!\", e);\n+                    exceptionDuringDumpEphemerals.set(true);\n+                }\n+            };\n+        };\n+        thread.start();\n+        LOG.debug(\"Killing {} zkclient sessions and its ephemeral nodes\", count);\n+        killZkClientSession(session, zxid, dataTree, count);\n+        running.set(false);\n+        thread.join();\n+        Assert.assertFalse(\"Should have got exception while dumpEphemerals!\",\n+                exceptionDuringDumpEphemerals.get());\n+    }\n+\n+    private void killZkClientSession(long session, long zxid,\n+            final DataTree dataTree, int count) {\n+        for (int i = 0; i < count; i++) {\n+            dataTree.killSession(session + i, zxid);\n+        }\n+    }\n+\n+    private void createEphemeralNode(long session, final DataTree dataTree,\n+            int count) throws NoNodeException, NodeExistsException {\n+        for (int i = 0; i < count; i++) {\n+            dataTree.createNode(\"/test\" + i, new byte[0], null, session + i,\n+                    dataTree.getNode(\"/\").stat.getCversion() + 1, 1, 1);\n+        }\n+    }\n+    \n+    @Test(timeout = 60000)\n     public void testRootWatchTriggered() throws Exception {\n         class MyWatcher implements Watcher{\n             boolean fired=false;\n@@ -74,7 +131,7 @@ public void process(WatchedEvent event) {\n     /**\n      * For ZOOKEEPER-1046 test if cversion is getting incremented correctly.\n      */\n-    @Test\n+    @Test(timeout = 60000)\n     public void testIncrementCversion() throws Exception {\n         dt.createNode(\"/test\", new byte[0], null, 0, dt.getNode(\"/\").stat.getCversion()+1, 1, 1);\n         DataNode zk = dt.getNode(\"/test\");\n@@ -89,7 +146,7 @@ public void testIncrementCversion() throws Exception {\n                 (newCversion == prevCversion + 1 && newPzxid == prevPzxid + 1));\n     }\n    \n-    @Test\n+    @Test(timeout = 60000)\n     public void testPathTrieClearOnDeserialize() throws Exception {\n \n         //Create a DataTree with quota nodes so PathTrie get updated",
                "changes": 67,
                "blob_url": "https://github.com/apache/zookeeper/blob/6aaa3b23f708fbbd1c04f58646ba27cb70831e27/src/java/test/org/apache/zookeeper/server/DataTreeTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": " ZOOKEEPER-1755. Concurrent operations of four letter 'dump' ephemeral \n  command and killSession causing NPE (Rakesh R via camille)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1569590 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/6aaa3b23f708fbbd1c04f58646ba27cb70831e27"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/62dcea67c7a3d12bdb5fa014936f465fadb1e3df",
        "bug_id": "zookeeper_23",
        "file": [
            {
                "additions": 3,
                "sha": "b84e5c63cc46c6cfbe30486733995a64f7c866c7",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/12878387483a4084c5a3beafbfae0172a44e5dcf/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=12878387483a4084c5a3beafbfae0172a44e5dcf",
                "patch": "@@ -557,6 +557,9 @@ IMPROVEMENTS:\n \n   ZOOKEEPER-1679. c client: use -Wdeclaration-after-statement (michi via fpj)\n \n+  ZOOKEEPER-1750 Race condition producing NPE in NIOServerCnxn.toString\n+  (Rakesh R via michim)\n+\n Release 3.4.0 - \n \n Non-backward compatible changes:",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/12878387483a4084c5a3beafbfae0172a44e5dcf/CHANGES.txt"
            },
            {
                "additions": 7,
                "sha": "96529adf4d7b07dd301af41c42b8d1320076bfc6",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/12878387483a4084c5a3beafbfae0172a44e5dcf/src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java",
                "deletions": 9,
                "filename": "src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java?ref=12878387483a4084c5a3beafbfae0172a44e5dcf",
                "patch": "@@ -31,7 +31,6 @@\n import java.nio.channels.SocketChannel;\n import java.util.List;\n import java.util.Queue;\n-import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.LinkedBlockingQueue;\n@@ -63,7 +62,7 @@\n \n     private final NIOServerCnxnFactory factory;\n \n-    private SocketChannel sock;\n+    private final SocketChannel sock;\n \n     private final SelectorThread selectorThread;\n \n@@ -139,7 +138,7 @@ void sendBufferSync(ByteBuffer bb) {\n             * a tight while loop\n             */\n            if (bb != ServerCnxnFactory.closeConn) {\n-               if (sock != null) {\n+               if (sock.isOpen()) {\n                    sock.configureBlocking(true);\n                    sock.write(bb);\n                }\n@@ -307,7 +306,7 @@ void handleWrite(SelectionKey k) throws IOException, CloseRequestException {\n      */\n     void doIO(SelectionKey k) throws InterruptedException {\n         try {\n-            if (sock == null) {\n+            if (sock.isOpen() == false) {\n                 LOG.warn(\"trying to do i/o on a null socket for session:0x\"\n                          + Long.toHexString(sessionId));\n \n@@ -993,7 +992,7 @@ public void close() {\n      * Close resources associated with the sock of this cnxn.\n      */\n     private void closeSock() {\n-        if (sock == null) {\n+        if (sock.isOpen() == false) {\n             return;\n         }\n \n@@ -1003,14 +1002,13 @@ private void closeSock() {\n                         \" which had sessionid 0x\" + Long.toHexString(sessionId) :\n                         \" (no session established for client)\"));\n         closeSock(sock);\n-        sock = null;\n     }\n \n     /**\n      * Close resources associated with a sock.\n      */\n     public static void closeSock(SocketChannel sock) {\n-        if (sock == null) {\n+        if (sock.isOpen() == false) {\n             return;\n         }\n \n@@ -1152,14 +1150,14 @@ public int getInterestOps() {\n \n     @Override\n     public InetSocketAddress getRemoteSocketAddress() {\n-        if (sock == null) {\n+        if (sock.isOpen() == false) {\n             return null;\n         }\n         return (InetSocketAddress) sock.socket().getRemoteSocketAddress();\n     }\n \n     public InetAddress getSocketAddress() {\n-        if (sock == null) {\n+        if (sock.isOpen() == false) {\n             return null;\n         }\n         return sock.socket().getInetAddress();",
                "changes": 16,
                "blob_url": "https://github.com/apache/zookeeper/blob/12878387483a4084c5a3beafbfae0172a44e5dcf/src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java"
            },
            {
                "additions": 64,
                "sha": "da61e36956365cdb076313cebb43cbcc8298d757",
                "status": "added",
                "raw_url": "https://github.com/apache/zookeeper/raw/12878387483a4084c5a3beafbfae0172a44e5dcf/src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java?ref=12878387483a4084c5a3beafbfae0172a44e5dcf",
                "patch": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.zookeeper.server;\n+\n+import java.io.IOException;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.test.ClientBase;\n+import org.junit.Test;\n+\n+public class NIOServerCnxnTest extends ClientBase {\n+\n+    /**\n+     * Test operations on ServerCnxn after socket closure.\n+     */\n+    @Test(timeout = 60000)\n+    public void testOperationsAfterCnxnClose() throws IOException,\n+            InterruptedException, KeeperException {\n+        final ZooKeeper zk = createClient();\n+\n+        final String path = \"/a\";\n+        try {\n+            // make sure zkclient works\n+            zk.create(path, \"test\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n+                    CreateMode.PERSISTENT);\n+            Assert.assertNotNull(\"Didn't create znode:\" + path,\n+                    zk.exists(path, false));\n+            // Defaults ServerCnxnFactory would be instantiated with\n+            // NIOServerCnxnFactory\n+            Assert.assertTrue(\n+                    \"Didn't instantiate ServerCnxnFactory with NIOServerCnxnFactory!\",\n+                    serverFactory instanceof NIOServerCnxnFactory);\n+            Iterable<ServerCnxn> connections = serverFactory.getConnections();\n+            for (ServerCnxn serverCnxn : connections) {\n+                String cnxnStr = serverCnxn.toString();\n+                serverCnxn.close();\n+                Assert.assertEquals(\"Connection mismatches!\", cnxnStr,\n+                        serverCnxn.toString());\n+            }\n+        } finally {\n+            zk.close();\n+        }\n+    }\n+}",
                "changes": 64,
                "blob_url": "https://github.com/apache/zookeeper/blob/12878387483a4084c5a3beafbfae0172a44e5dcf/src/java/test/org/apache/zookeeper/server/NIOServerCnxnTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-1750 Race condition producing NPE in NIOServerCnxn.toString\n(Rakesh R via michim)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1521308 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/12878387483a4084c5a3beafbfae0172a44e5dcf"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/3c906d668041a13fc6ff4ccf5ab7b9a6c85eda0f",
        "bug_id": "zookeeper_24",
        "file": [
            {
                "additions": 2,
                "sha": "e9c08d94a7266949f55ae09b00797dbaa94db1c1",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/0679a863ae20345c3b928743a9b42dfbf14a0738/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=0679a863ae20345c3b928743a9b42dfbf14a0738",
                "patch": "@@ -218,6 +218,8 @@ BUGFIXES:\n     completion callback if zookeeper_close has been called\n     (Michi Mutsuzaki via phunt and mahadev)\n \n+  ZOOKEEPER-1522. intermittent failures in Zab test due to NPE in\n+    recursiveDelete test function (phunt via flavio)\n \n IMPROVEMENTS:\n ",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/0679a863ae20345c3b928743a9b42dfbf14a0738/CHANGES.txt"
            },
            {
                "additions": 27,
                "sha": "42207e1bc72f4116ced56c0e38037386f3448be6",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/0679a863ae20345c3b928743a9b42dfbf14a0738/src/java/test/org/apache/zookeeper/server/quorum/Zab1_0Test.java",
                "deletions": 13,
                "filename": "src/java/test/org/apache/zookeeper/server/quorum/Zab1_0Test.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/quorum/Zab1_0Test.java?ref=0679a863ae20345c3b928743a9b42dfbf14a0738",
                "patch": "@@ -48,8 +48,6 @@\n import org.apache.zookeeper.server.ZKDatabase;\n import org.apache.zookeeper.server.ZooKeeperServer;\n import org.apache.zookeeper.server.persistence.FileTxnSnapLog;\n-import org.apache.zookeeper.server.quorum.Leader;\n-import org.apache.zookeeper.server.quorum.QuorumPeer;\n import org.apache.zookeeper.server.quorum.QuorumPeer.QuorumServer;\n import org.apache.zookeeper.server.quorum.flexible.QuorumMaj;\n import org.apache.zookeeper.server.util.ZxidUtils;\n@@ -59,8 +57,12 @@\n import org.apache.zookeeper.txn.TxnHeader;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class Zab1_0Test {\n+    private static final Logger LOG = LoggerFactory.getLogger(Zab1_0Test.class);\n+\n     private static final class LeadThread extends Thread {\n         private final Leader leader;\n \n@@ -71,8 +73,10 @@ private LeadThread(Leader leader) {\n         public void run() {\n             try {\n                 leader.lead();\n+            } catch (InterruptedException e) {\n+                LOG.info(\"Leader thread interrupted\", e);\n             } catch (Exception e) {\n-                e.printStackTrace();\n+                LOG.warn(\"Unexpected exception in leader thread\", e);\n             } finally {\n                 leader.shutdown(\"lead ended\");\n             }\n@@ -160,10 +164,10 @@ public void testLeaderInConnectingFollowers() throws Exception {\n             \tAssert.fail(\"leader timed out in getEpochToPropose\");\n             }\n         } finally {\n-            recursiveDelete(tmpDir);\n             if (leader != null) {\n                 leader.shutdown(\"end of test\");\n             }\n+            recursiveDelete(tmpDir);\n         }\n     }\n     \n@@ -208,10 +212,14 @@ public void testLastAcceptedEpoch() throws Exception {\n             }\n             \n         } finally {\n-            recursiveDelete(tmpDir);\n             if (leader != null) {\n                 leader.shutdown(\"end of test\");\n             }\n+            if (leadThread != null) {\n+                leadThread.interrupt();\n+                leadThread.join();\n+            }\n+            recursiveDelete(tmpDir);\n         }\n     }\n     \n@@ -245,10 +253,10 @@ public void testLeaderInElectingFollowers() throws Exception {\n             Assert.assertTrue(f1.msg + \" without waiting for leader\", f1.msg == null);            \n             Assert.assertTrue(f2.msg + \" without waiting for leader\", f2.msg == null);\n         } finally {\n-            recursiveDelete(tmpDir);\n             if (leader != null) {\n                 leader.shutdown(\"end of test\");\n             }\n+            recursiveDelete(tmpDir);\n         }\n     }\n \n@@ -347,14 +355,14 @@ public void testLeaderConversation(LeaderConversation conversation) throws Excep\n \n             conversation.converseWithLeader(ia, oa, leader);\n         } finally {\n-            recursiveDelete(tmpDir);\n             if (leader != null) {\n                 leader.shutdown(\"end of test\");\n             }\n             if (leadThread != null) {\n                 leadThread.interrupt();\n                 leadThread.join();\n             }\n+            recursiveDelete(tmpDir);\n         }\n     }\n     \n@@ -416,14 +424,14 @@ public void testPopulatedLeaderConversation(PopulatedLeaderConversation conversa\n \n             conversation.converseWithLeader(ia, oa, leader, zxid);\n         } finally {\n-            recursiveDelete(tmpDir);\n             if (leader != null) {\n                 leader.shutdown(\"end of test\");\n             }\n             if (leadThread != null) {\n                 leadThread.interrupt();\n                 leadThread.join();\n             }\n+            recursiveDelete(tmpDir);\n         }\n     }\n     \n@@ -449,8 +457,10 @@ public void testFollowerConversation(FollowerConversation conversation) throws E\n                 public void run() {\n                     try {\n                         followerForThread.followLeader();\n-                    } catch(Exception e) {\n-                        e.printStackTrace();\n+                    } catch (InterruptedException e) {\n+                        LOG.info(\"Follower thread interrupted\", e);\n+                    } catch (Exception e) {\n+                        LOG.warn(\"Unexpected exception in follower thread\", e);\n                     }\n                 }\n             };\n@@ -750,7 +760,7 @@ public void converseWithFollower(InputArchive ia, OutputArchive oa,\n                     // Make sure the data was recorded in the filesystem ok\n                     ZKDatabase zkDb2 = new ZKDatabase(new FileTxnSnapLog(logDir, snapDir));\n                     zkDb2.loadDataBase();\n-                    System.out.println(zkDb2.getSessions());\n+                    LOG.info(\"zkdb2 sessions:\" + zkDb2.getSessions());\n                     Assert.assertNotNull(zkDb2.getSessionWithTimeOuts().get(4L));\n                 } finally {\n                     recursiveDelete(tmpDir);\n@@ -914,8 +924,12 @@ private void recursiveDelete(File file) {\n         if (file.isFile()) {\n             file.delete();\n         } else {\n-            for(File c: file.listFiles()) {\n-                recursiveDelete(c);\n+            // might return null if deleted out from under us...\n+            File[] files = file.listFiles();\n+            if (files != null) {\n+                for(File c: files) {\n+                    recursiveDelete(c);\n+                }\n             }\n             file.delete();\n         }",
                "changes": 40,
                "blob_url": "https://github.com/apache/zookeeper/blob/0679a863ae20345c3b928743a9b42dfbf14a0738/src/java/test/org/apache/zookeeper/server/quorum/Zab1_0Test.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-1522. intermittent failures in Zab test due to NPE in recursiveDelete test function (phunt via flavio)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1368072 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/0679a863ae20345c3b928743a9b42dfbf14a0738"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/854c41926c9bb2c1281c3873008b9113ea021720",
        "bug_id": "zookeeper_25",
        "file": [
            {
                "additions": 3,
                "sha": "b7db74ea43f3f680781800fed3b0720e3bc79e63",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/c85f61aee240e03fdebb31ce094f5b7c07619e34/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=c85f61aee240e03fdebb31ce094f5b7c07619e34",
                "patch": "@@ -81,6 +81,9 @@ BUGFIXES:\n \n   ZOOKEEPER-1323. c client doesn't compile on freebsd\n   (michi mutsuzaki via phunt)\n+\n+  ZOOKEEPER-1333. NPE in FileTxnSnapLog when restarting a cluster.\n+  (Patrick Hunt via mahadev)\n  \n IMPROVEMENTS:\n ",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/c85f61aee240e03fdebb31ce094f5b7c07619e34/CHANGES.txt"
            },
            {
                "additions": 11,
                "sha": "208d4bf6a8987f8b613a966642755a62a53551f8",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/c85f61aee240e03fdebb31ce094f5b7c07619e34/src/java/main/org/apache/zookeeper/server/DataTree.java",
                "deletions": 9,
                "filename": "src/java/main/org/apache/zookeeper/server/DataTree.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/DataTree.java?ref=c85f61aee240e03fdebb31ce094f5b7c07619e34",
                "patch": "@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.io.PrintWriter;\n+import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -30,21 +31,17 @@\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n \n-import java.nio.ByteBuffer;\n-\n import org.apache.jute.Index;\n import org.apache.jute.InputArchive;\n import org.apache.jute.OutputArchive;\n import org.apache.jute.Record;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.KeeperException.NoNodeException;\n import org.apache.zookeeper.Quotas;\n import org.apache.zookeeper.StatsTrack;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.KeeperException.Code;\n-import org.apache.zookeeper.KeeperException.NoNodeException;\n import org.apache.zookeeper.Watcher.Event;\n import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.Watcher.Event.KeeperState;\n@@ -54,15 +51,17 @@\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.data.StatPersisted;\n+import org.apache.zookeeper.txn.CheckVersionTxn;\n import org.apache.zookeeper.txn.CreateTxn;\n import org.apache.zookeeper.txn.DeleteTxn;\n import org.apache.zookeeper.txn.ErrorTxn;\n+import org.apache.zookeeper.txn.MultiTxn;\n import org.apache.zookeeper.txn.SetACLTxn;\n import org.apache.zookeeper.txn.SetDataTxn;\n-import org.apache.zookeeper.txn.CheckVersionTxn;\n import org.apache.zookeeper.txn.Txn;\n-import org.apache.zookeeper.txn.MultiTxn;\n import org.apache.zookeeper.txn.TxnHeader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This class maintains the tree data structure. It doesn't have any networking\n@@ -757,6 +756,7 @@ public ProcessTxnResult processTxn(TxnHeader header, Record txn)\n                     debug = \"Set data transaction for \"\n                             + setDataTxn.getPath()\n                             + \" to new value=\" + Arrays.toString(setDataTxn.getData());\n+                    rc.path = setDataTxn.getPath();\n                     rc.stat = setData(setDataTxn.getPath(), setDataTxn\n                             .getData(), setDataTxn.getVersion(), header\n                             .getZxid(), header.getTime());\n@@ -765,6 +765,7 @@ public ProcessTxnResult processTxn(TxnHeader header, Record txn)\n                     SetACLTxn setACLTxn = (SetACLTxn) txn;\n                     debug = \"Set ACL transaction for \"\n                             + setACLTxn.getPath();\n+                    rc.path = setACLTxn.getPath();\n                     rc.stat = setACL(setACLTxn.getPath(), setACLTxn.getAcl(),\n                             setACLTxn.getVersion());\n                     break;\n@@ -870,7 +871,8 @@ public ProcessTxnResult processTxn(TxnHeader header, Record txn)\n         if (rc.zxid > lastProcessedZxid) {\n             lastProcessedZxid = rc.zxid;\n         }\n-        /**\n+\n+        /*\n          * Snapshots are taken lazily. It can happen that the child\n          * znodes of a parent are created after the parent\n          * is serialized. Therefore, while replaying logs during restore, a",
                "changes": 20,
                "blob_url": "https://github.com/apache/zookeeper/blob/c85f61aee240e03fdebb31ce094f5b7c07619e34/src/java/main/org/apache/zookeeper/server/DataTree.java"
            },
            {
                "additions": 12,
                "sha": "77ee021d46b76fe45d0f02fc74cc369adf1457df",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/c85f61aee240e03fdebb31ce094f5b7c07619e34/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                "deletions": 11,
                "filename": "src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java?ref=c85f61aee240e03fdebb31ce094f5b7c07619e34",
                "patch": "@@ -34,7 +34,6 @@\n import org.apache.zookeeper.server.ZooTrace;\n import org.apache.zookeeper.server.persistence.TxnLog.TxnIterator;\n import org.apache.zookeeper.txn.CreateSessionTxn;\n-import org.apache.zookeeper.txn.CreateTxn;\n import org.apache.zookeeper.txn.TxnHeader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -150,7 +149,7 @@ public long restore(DataTree dt, Map<Long, Integer> sessions,\n                 processTransaction(hdr,dt,sessions, itr.getTxn());\n             } catch(KeeperException.NoNodeException e) {\n                throw new IOException(\"Failed to process transaction type: \" +\n-                     hdr.getType() + \" error: \" + e.getMessage());\n+                     hdr.getType() + \" error: \" + e.getMessage(), e);\n             }\n             listener.onTxnLoaded(hdr, itr.getTxn());\n             if (!itr.next())\n@@ -197,20 +196,22 @@ public void processTransaction(TxnHeader hdr,DataTree dt,\n             rc = dt.processTxn(hdr, txn);\n         }\n \n-              \n-        if(rc.err !=  Code.OK.intValue()) {          \n-            if(rc.err == Code.NONODE.intValue()) {\n+        /**\n+         * This should never happen. A NONODE can never show up in the \n+         * transaction logs. This is more indicative of a corrupt transaction\n+         * log. Refer ZOOKEEPER-1333 for more info.\n+         */\n+        if (rc.err != Code.OK.intValue()) {          \n+            if (hdr.getType() == OpCode.create && rc.err == Code.NONODE.intValue()) {\n                 int lastSlash = rc.path.lastIndexOf('/');\n                 String parentName = rc.path.substring(0, lastSlash);\n-                LOG.error(\"Failed to set parent cversion for: \" +\n-                        parentName);\n-                  throw new KeeperException.NoNodeException(parentName);\n-            }\n-            else {\n+                LOG.error(\"Parent {} missing for {}\", parentName, rc.path);\n+                throw new KeeperException.NoNodeException(parentName);\n+            } else {\n                 LOG.debug(\"Ignoring processTxn failure hdr: \" + hdr.getType() +\n                         \" : error: \" + rc.err);\n             }\n-        }      \n+        }\n     }\n \n     /**",
                "changes": 23,
                "blob_url": "https://github.com/apache/zookeeper/blob/c85f61aee240e03fdebb31ce094f5b7c07619e34/src/java/main/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java"
            },
            {
                "additions": 86,
                "sha": "8e0b0eb80dd384620acc0ae455e360e5325bd32a",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/c85f61aee240e03fdebb31ce094f5b7c07619e34/src/java/test/org/apache/zookeeper/test/LoadFromLogTest.java",
                "deletions": 20,
                "filename": "src/java/test/org/apache/zookeeper/test/LoadFromLogTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/LoadFromLogTest.java?ref=c85f61aee240e03fdebb31ce094f5b7c07619e34",
                "patch": "@@ -20,42 +20,41 @@\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.jute.BinaryInputArchive;\n+import org.apache.jute.BinaryOutputArchive;\n+import org.apache.jute.Record;\n import org.apache.zookeeper.CreateMode;\n-import org.apache.zookeeper.MultiTransactionRecord;\n+import org.apache.zookeeper.KeeperException.NoNodeException;\n import org.apache.zookeeper.PortAssignment;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZKTestCase;\n-import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooDefs.OpCode;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.server.DataNode;\n+import org.apache.zookeeper.server.DataTree;\n import org.apache.zookeeper.server.ServerCnxnFactory;\n import org.apache.zookeeper.server.SyncRequestProcessor;\n import org.apache.zookeeper.server.ZooKeeperServer;\n-import org.apache.zookeeper.server.persistence.FileTxnSnapLog;\n+import org.apache.zookeeper.server.persistence.FileHeader;\n import org.apache.zookeeper.server.persistence.FileTxnLog;\n+import org.apache.zookeeper.server.persistence.FileTxnSnapLog;\n import org.apache.zookeeper.server.persistence.TxnLog.TxnIterator;\n-import org.apache.zookeeper.txn.TxnHeader;\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.apache.zookeeper.server.DataTree;\n-import org.apache.zookeeper.server.DataNode;\n import org.apache.zookeeper.txn.CreateTxn;\n import org.apache.zookeeper.txn.DeleteTxn;\n import org.apache.zookeeper.txn.MultiTxn;\n import org.apache.zookeeper.txn.Txn;\n-import org.apache.zookeeper.ZooDefs.OpCode;\n-import org.apache.jute.BinaryOutputArchive;\n-import org.apache.jute.Record;\n-import java.io.FileInputStream;\n-import java.nio.ByteBuffer;\n-\n-import org.apache.jute.BinaryInputArchive;\n-import org.apache.zookeeper.server.persistence.FileHeader;\n+import org.apache.zookeeper.txn.TxnHeader;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class LoadFromLogTest extends ZKTestCase implements  Watcher {\n     private static String HOSTPORT = \"127.0.0.1:\" + PortAssignment.unique();\n@@ -100,8 +99,8 @@ public void testLoad() throws Exception {\n                 ClientBase.waitForServerDown(HOSTPORT, CONNECTION_TIMEOUT));\n \n         // now verify that the FileTxnLog reads every transaction only once\n-\tFile logDir = new File(tmpDir, FileTxnSnapLog.version + FileTxnSnapLog.VERSION);\n-\tFileTxnLog txnLog = new FileTxnLog(logDir);\n+        File logDir = new File(tmpDir, FileTxnSnapLog.version + FileTxnSnapLog.VERSION);\n+        FileTxnLog txnLog = new FileTxnLog(logDir);\n \n         TxnIterator itr = txnLog.read(0);\n         long expectedZxid = 0;\n@@ -368,4 +367,71 @@ public void testRestore() throws Exception {\n \t\t\t\t(children.length == NUM_MESSAGES));\n \t\tf.shutdown();\n \t}\n+    \n+    /**\n+     * Test we can restore a snapshot that has errors and data ahead of the zxid\n+     * of the snapshot file. \n+     */\n+    @Test\n+    public void testRestoreWithTransactionErrors() throws Exception {\n+        // setup a single server cluster\n+        File tmpDir = ClientBase.createTmpDir();\n+        ClientBase.setupTestEnv();\n+        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n+        SyncRequestProcessor.setSnapCount(10000);\n+        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n+        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n+        f.startup(zks);\n+        Assert.assertTrue(\"waiting for server being up \", ClientBase\n+                .waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n+        ZooKeeper zk = new ZooKeeper(HOSTPORT, CONNECTION_TIMEOUT, this);\n+\n+        long start = System.currentTimeMillis();\n+        while (!connected) {\n+            long end = System.currentTimeMillis();\n+            if (end - start > 5000) {\n+                Assert.assertTrue(\"Could not connect with server in 5 seconds\",\n+                        false);\n+            }\n+            try {\n+                Thread.sleep(200);\n+            } catch (Exception e) {\n+                LOG.warn(\"Intrrupted\");\n+            }\n+\n+        }\n+        // generate some transactions\n+        try {\n+            for (int i = 0; i < NUM_MESSAGES; i++) {\n+                try {\n+                    zk.create(\"/invaliddir/test-\", new byte[0],\n+                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n+                } catch(NoNodeException e) {\n+                    //Expected\n+                }\n+            }\n+        } finally {\n+            zk.close();\n+        }\n+\n+        // force the zxid to be behind the content\n+        zks.getZKDatabase().setlastProcessedZxid(\n+                zks.getZKDatabase().getDataTreeLastProcessedZxid() - 10);\n+        LOG.info(\"Set lastProcessedZxid to \"\n+                + zks.getZKDatabase().getDataTreeLastProcessedZxid());\n+        \n+        // Force snapshot and restore\n+        zks.takeSnapshot();\n+        zks.shutdown();\n+        f.shutdown();\n+\n+        zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n+        SyncRequestProcessor.setSnapCount(10000);\n+        f = ServerCnxnFactory.createFactory(PORT, -1);\n+        f.startup(zks);\n+        Assert.assertTrue(\"waiting for server being up \", ClientBase\n+                .waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));\n+        \n+        f.shutdown();\n+    }\n }\n\\ No newline at end of file",
                "changes": 106,
                "blob_url": "https://github.com/apache/zookeeper/blob/c85f61aee240e03fdebb31ce094f5b7c07619e34/src/java/test/org/apache/zookeeper/test/LoadFromLogTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-1333. NPE in FileTxnSnapLog when restarting a cluster. (Patrick Hunt via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1221868 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/c85f61aee240e03fdebb31ce094f5b7c07619e34"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/59ac9fa78963ca746d21a62a27fde497fd4c4d58",
        "bug_id": "zookeeper_26",
        "file": [
            {
                "additions": 2,
                "sha": "de8e48612d7771141623cb549dc84f22c81af536",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/7f64942ba8e5ce00948f6e7b23271de0556b668f/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=7f64942ba8e5ce00948f6e7b23271de0556b668f",
                "patch": "@@ -211,6 +211,8 @@ BUGFIXES:\n \n   ZOOKEEPER-1061. Zookeeper stop fails if start called twice. (Ted Dunning via mahadev)\n \n+  ZOOKEEPER-1059. stat command isses on non-existing node causes NPE. (Bhallamudi Kamesh via mahadev)\n+\n IMPROVEMENTS:\n   ZOOKEEPER-724. Improve junit test integration - log harness information \n   (phunt via mahadev)",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/7f64942ba8e5ce00948f6e7b23271de0556b668f/CHANGES.txt"
            },
            {
                "additions": 4,
                "sha": "4827bc9ff17e4841927e22e88ca9e03f308177dc",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/7f64942ba8e5ce00948f6e7b23271de0556b668f/src/java/main/org/apache/zookeeper/ZooKeeperMain.java",
                "deletions": 1,
                "filename": "src/java/main/org/apache/zookeeper/ZooKeeperMain.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/ZooKeeperMain.java?ref=7f64942ba8e5ce00948f6e7b23271de0556b668f",
                "patch": "@@ -147,7 +147,7 @@ private static void printStat(Stat stat) {\n      * A storage class for both command line options and shell commands.\n      *\n      */\n-    static private class MyCommandOptions {\n+    static class MyCommandOptions {\n \n         private Map<String,String> options = new HashMap<String,String>();\n         private List<String> cmdArgs = null;\n@@ -724,6 +724,9 @@ protected boolean processZKCmd(MyCommandOptions co)\n         } else if (cmd.equals(\"stat\") && args.length >= 2) {\n             path = args[1];\n             stat = zk.exists(path, watch);\n+            if (stat == null) {\n+              throw new KeeperException.NoNodeException(path);\t\n+            }\n             printStat(stat);\n         } else if (cmd.equals(\"listquota\") && args.length >= 2) {\n             path = args[1];",
                "changes": 5,
                "blob_url": "https://github.com/apache/zookeeper/blob/7f64942ba8e5ce00948f6e7b23271de0556b668f/src/java/main/org/apache/zookeeper/ZooKeeperMain.java"
            },
            {
                "additions": 15,
                "sha": "82fcd6994e5233a07af5a00a643699b0e6b9cb52",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/7f64942ba8e5ce00948f6e7b23271de0556b668f/src/java/test/org/apache/zookeeper/ZooKeeperTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/ZooKeeperTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/ZooKeeperTest.java?ref=7f64942ba8e5ce00948f6e7b23271de0556b668f",
                "patch": "@@ -122,4 +122,19 @@ public void processResult(int rc, String path, Object ctx) {\n         }\n         Assert.assertEquals(4, ((AtomicInteger) ctx).get());\n     }\n+    \n+    @Test\n+    public void testStatWhenPathDoesNotExist() throws IOException,\n+    \t\tInterruptedException {\n+    \tfinal ZooKeeper zk = createClient();\n+    \tZooKeeperMain main = new ZooKeeperMain(zk);\n+    \tString cmdstring = \"stat /invalidPath\";\n+    \tmain.cl.parseCommand(cmdstring);\n+    \ttry {\n+    \t\tmain.processZKCmd(main.cl);\n+    \t\tAssert.fail(\"As Node does not exist, command should fail by throwing No Node Exception.\");\n+    \t} catch (KeeperException e) {\n+    \t\tAssert.assertEquals(\"KeeperErrorCode = NoNode for /invalidPath\", e.getMessage());\n+    \t}\n+    }\n }",
                "changes": 15,
                "blob_url": "https://github.com/apache/zookeeper/blob/7f64942ba8e5ce00948f6e7b23271de0556b668f/src/java/test/org/apache/zookeeper/ZooKeeperTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-1059. stat command isses on non-existing node causes NPE. (Bhallamudi Kamesh via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/trunk@1103811 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/7f64942ba8e5ce00948f6e7b23271de0556b668f"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/892c491e49f8f2333308f10a6fb4367772625b07",
        "bug_id": "zookeeper_27",
        "file": [
            {
                "additions": 3,
                "sha": "dceb7848288295cb1f8fecbb14fce09890b14c6e",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/df20416c08fa0079d96f6327d10c6f102ebabd85/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=df20416c08fa0079d96f6327d10c6f102ebabd85",
                "patch": "@@ -264,6 +264,9 @@ BUGFIXES:\n   ZOOKEEPER-693. TestObserver stuck in tight notification loop in FLE\n   (flavio via phunt)\n \n+  ZOOKEEPER-696. NPE in the hudson logs, seems nioservercnxn closed twice \n+  (phunt via mahadev)\n+\n IMPROVEMENTS:\n   ZOOKEEPER-473. cleanup junit tests to eliminate false positives due to\n   \"socket reuse\" and failure to close client (phunt via mahadev)",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/df20416c08fa0079d96f6327d10c6f102ebabd85/CHANGES.txt"
            },
            {
                "additions": 23,
                "sha": "a8596a006528b25aa8d4c286949939eb6248c3d4",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/df20416c08fa0079d96f6327d10c6f102ebabd85/src/java/main/org/apache/zookeeper/server/ConnectionBean.java",
                "deletions": 9,
                "filename": "src/java/main/org/apache/zookeeper/server/ConnectionBean.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/ConnectionBean.java?ref=df20416c08fa0079d96f6327d10c6f102ebabd85",
                "patch": "@@ -41,30 +41,44 @@\n     private final CnxnStats stats;\n \n     private final ZooKeeperServer zk;\n+    \n+    private final String remoteIP;\n+    private final long sessionId;\n \n     public ConnectionBean(ServerCnxn connection,ZooKeeperServer zk){\n         this.connection = connection;\n         this.stats = (CnxnStats)connection.getStats();\n         this.zk = zk;\n+        \n+        InetSocketAddress sockAddr = connection.getRemoteAddress();\n+        if (sockAddr == null) {\n+            remoteIP = \"Unknown\";\n+        } else {\n+            InetAddress addr = sockAddr.getAddress();\n+            if (addr instanceof Inet6Address) {\n+                remoteIP = ObjectName.quote(addr.getHostAddress());\n+            } else {\n+                remoteIP = addr.getHostAddress();\n+            }\n+        }\n+        sessionId = connection.getSessionId();\n     }\n     \n     public String getSessionId() {\n-        return \"0x\" + Long.toHexString(connection.getSessionId());\n+        return \"0x\" + Long.toHexString(sessionId);\n     }\n \n     public String getSourceIP() {\n         InetSocketAddress sockAddr = connection.getRemoteAddress();\n+        if (sockAddr == null) {\n+            return null;\n+        }\n         return sockAddr.getAddress().getHostAddress()\n             + \":\" + sockAddr.getPort();\n     }\n \n     public String getName() {\n-        InetAddress addr = connection.getRemoteAddress().getAddress();\n-        String ip = addr.getHostAddress();\n-        if (addr instanceof Inet6Address) {\n-            ip = ObjectName.quote(ip);\n-        }\n-        return MBeanRegistry.getInstance().makeFullPath(\"Connections\", ip,\n+        return MBeanRegistry.getInstance().makeFullPath(\"Connections\", remoteIP,\n                 getSessionId());\n     }\n     \n@@ -74,7 +88,7 @@ public boolean isHidden() {\n     \n     public String[] getEphemeralNodes() {\n         if(zk.getZKDatabase()  !=null){\n-            String[] res= zk.getZKDatabase().getEphemerals(connection.getSessionId())\n+            String[] res= zk.getZKDatabase().getEphemerals(sessionId)\n                 .toArray(new String[0]);\n             Arrays.sort(res);\n             return res;\n@@ -88,7 +102,7 @@ public String getStartedTime() {\n     \n     public void terminateSession() {\n         try {\n-            zk.closeSession(connection.getSessionId());\n+            zk.closeSession(sessionId);\n         } catch (Exception e) {\n             LOG.warn(\"Unable to closeSession() for session: 0x\" \n                     + getSessionId(), e);",
                "changes": 32,
                "blob_url": "https://github.com/apache/zookeeper/blob/df20416c08fa0079d96f6327d10c6f102ebabd85/src/java/main/org/apache/zookeeper/server/ConnectionBean.java"
            },
            {
                "additions": 82,
                "sha": "53757573ee27a1525576b4b14aa8371a22dedf1f",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/df20416c08fa0079d96f6327d10c6f102ebabd85/src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java",
                "deletions": 59,
                "filename": "src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java?ref=df20416c08fa0079d96f6327d10c6f102ebabd85",
                "patch": "@@ -276,26 +276,29 @@ public void run() {\n         }\n \n         /**\n-         * clear all the connections in the selector\n+         * Clear all the connections in the selector.\n+         * \n+         * You must first close ss (the serversocketchannel) if you wish\n+         * to block any new connections from being established.\n          *\n          */\n+        @SuppressWarnings(\"unchecked\")\n         synchronized public void clear() {\n             selector.wakeup();\n-            synchronized (cnxns) {\n-                // got to clear all the connections that we have in the selector\n-                for (Iterator<NIOServerCnxn> it = cnxns.iterator(); it\n-                        .hasNext();) {\n-                    NIOServerCnxn cnxn = it.next();\n-                    it.remove();\n-                    try {\n-                        cnxn.close();\n-                    } catch (Exception e) {\n-                        LOG.warn(\"Ignoring exception closing cnxn sessionid 0x\"\n-                                + Long.toHexString(cnxn.sessionId), e);\n-                    }\n+            HashSet<NIOServerCnxn> cnxns;\n+            synchronized (this.cnxns) {\n+                cnxns = (HashSet<NIOServerCnxn>)this.cnxns.clone();\n+            }\n+            // got to clear all the connections that we have in the selector\n+            for (NIOServerCnxn cnxn: cnxns) {\n+                try {\n+                    // don't hold this.cnxns lock as deadlock may occur\n+                    cnxn.close();\n+                } catch (Exception e) {\n+                    LOG.warn(\"Ignoring exception closing cnxn sessionid 0x\"\n+                            + Long.toHexString(cnxn.sessionId), e);\n                 }\n             }\n-\n         }\n \n         public void shutdown() {\n@@ -324,21 +327,21 @@ synchronized void closeSession(long sessionId) {\n             closeSessionWithoutWakeup(sessionId);\n         }\n \n-\n+        @SuppressWarnings(\"unchecked\")\n         private void closeSessionWithoutWakeup(long sessionId) {\n-            synchronized (cnxns) {\n-                for (Iterator<NIOServerCnxn> it = cnxns.iterator(); it\n-                        .hasNext();) {\n-                    NIOServerCnxn cnxn = it.next();\n-                    if (cnxn.sessionId == sessionId) {\n-                        it.remove();\n-                        try {\n-                            cnxn.close();\n-                        } catch (Exception e) {\n-                            LOG.warn(\"exception during session close\", e);\n-                        }\n-                        break;\n+            HashSet<NIOServerCnxn> cnxns;\n+            synchronized (this.cnxns) {\n+                cnxns = (HashSet<NIOServerCnxn>)this.cnxns.clone();\n+            }\n+\n+            for (NIOServerCnxn cnxn : cnxns) {\n+                if (cnxn.sessionId == sessionId) {\n+                    try {\n+                        cnxn.close();\n+                    } catch (Exception e) {\n+                        LOG.warn(\"exception during session close\", e);\n                     }\n+                    break;\n                 }\n             }\n         }\n@@ -1202,31 +1205,58 @@ public String toString() {\n     }\n \n     /*\n-     * (non-Javadoc)\n-     *\n-     * @see org.apache.zookeeper.server.ServerCnxnIface#close()\n+     * Close the cnxn and remove it from the factory cnxns list.\n+     * \n+     * This function returns immediately if the cnxn is not on the cnxns list.\n      */\n     public void close() {\n-        // unregister from JMX\n-        try {\n-            if(jmxConnectionBean != null){\n-                MBeanRegistry.getInstance().unregister(jmxConnectionBean);\n+        synchronized(factory.cnxns){\n+            // if this is not in cnxns then it's already closed\n+            if (!factory.cnxns.remove(this)) {\n+                return;\n             }\n-        } catch (Exception e) {\n-            LOG.warn(\"Failed to unregister with JMX\", e);\n-        }\n-        jmxConnectionBean = null;\n \n-        synchronized (factory.ipMap)\n-        {\n-            Set<NIOServerCnxn> s = factory.ipMap.get(sock.socket().getInetAddress());\n-            s.remove(this);\n-        }\n-        synchronized (factory.cnxns) {\n-            factory.cnxns.remove(this);\n+            synchronized (factory.ipMap) {\n+                Set<NIOServerCnxn> s =\n+                    factory.ipMap.get(sock.socket().getInetAddress());\n+                s.remove(this);\n+            }\n+\n+            // unregister from JMX\n+            try {\n+                if(jmxConnectionBean != null){\n+                    MBeanRegistry.getInstance().unregister(jmxConnectionBean);\n+                }\n+            } catch (Exception e) {\n+                LOG.warn(\"Failed to unregister with JMX\", e);\n+            }\n+            jmxConnectionBean = null;\n+    \n+            if (zk != null) {\n+                zk.removeCnxn(this);\n+            }\n+    \n+            closeSock();\n+    \n+            if (sk != null) {\n+                try {\n+                    // need to cancel this selection key from the selector\n+                    sk.cancel();\n+                } catch (Exception e) {\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"ignoring exception during selectionkey cancel\", e);\n+                    }\n+                }\n+            }\n         }\n-        if (zk != null) {\n-            zk.removeCnxn(this);\n+    }\n+\n+    /**\n+     * Close resources associated with the sock of this cnxn. \n+     */\n+    private void closeSock() {\n+        if (sock == null) {\n+            return;\n         }\n \n         LOG.info(\"Closed socket connection for client \"\n@@ -1275,18 +1305,8 @@ public void close() {\n             }\n         }\n         sock = null;\n-        if (sk != null) {\n-            try {\n-                // need to cancel this selection key from the selector\n-                sk.cancel();\n-            } catch (Exception e) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"ignoring exception during selectionkey cancel\", e);\n-                }\n-            }\n-        }\n     }\n-\n+    \n     private final static byte fourBytes[] = new byte[4];\n \n     /*\n@@ -1419,7 +1439,10 @@ public void setSessionId(long sessionId) {\n         return authInfo;\n     }\n \n-    public InetSocketAddress getRemoteAddress() {\n+    public synchronized InetSocketAddress getRemoteAddress() {\n+        if (sock == null) {\n+            return null;\n+        }\n         return (InetSocketAddress) sock.socket().getRemoteSocketAddress();\n     }\n ",
                "changes": 141,
                "blob_url": "https://github.com/apache/zookeeper/blob/df20416c08fa0079d96f6327d10c6f102ebabd85/src/java/main/org/apache/zookeeper/server/NIOServerCnxn.java"
            },
            {
                "additions": 5,
                "sha": "bbf1ad85dc0e75bf2c33449ee31ab70e1fdad74c",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/df20416c08fa0079d96f6327d10c6f102ebabd85/src/java/main/org/apache/zookeeper/server/quorum/Leader.java",
                "deletions": 5,
                "filename": "src/java/main/org/apache/zookeeper/server/quorum/Leader.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/quorum/Leader.java?ref=df20416c08fa0079d96f6327d10c6f102ebabd85",
                "patch": "@@ -396,17 +396,17 @@ void shutdown(String reason) {\n         \n         // NIO should not accept conenctions\n         self.cnxnFactory.setZooKeeperServer(null);\n+        try {\n+            ss.close();\n+        } catch (IOException e) {\n+            LOG.warn(\"Ignoring unexpected exception during close\",e);\n+        }\n         // clear all the connections\n         self.cnxnFactory.clear();\n         // shutdown the previous zk\n         if (zk != null) {\n             zk.shutdown();\n         }\n-        try {\n-            ss.close();\n-        } catch (IOException e) {\n-            LOG.warn(\"Ignoring unexpected exception during close\",e);\n-        }\n         synchronized (learners) {\n             for (Iterator<LearnerHandler> it = learners.iterator(); it\n                     .hasNext();) {",
                "changes": 10,
                "blob_url": "https://github.com/apache/zookeeper/blob/df20416c08fa0079d96f6327d10c6f102ebabd85/src/java/main/org/apache/zookeeper/server/quorum/Leader.java"
            },
            {
                "additions": 1,
                "sha": "42ddce1b6c8ca5854775291c0e9d096cf9a46b09",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/df20416c08fa0079d96f6327d10c6f102ebabd85/src/java/test/org/apache/zookeeper/test/SessionTest.java",
                "deletions": 1,
                "filename": "src/java/test/org/apache/zookeeper/test/SessionTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/SessionTest.java?ref=df20416c08fa0079d96f6327d10c6f102ebabd85",
                "patch": "@@ -327,7 +327,7 @@ public void process(WatchedEvent event) {\n     public void process(WatchedEvent event) {\n         LOG.info(\"Event:\" + event.getState() + \" \" + event.getType() + \" \" + event.getPath());\n         if (event.getState() == KeeperState.SyncConnected\n-                && startSignal.getCount() > 0)\n+                && startSignal != null && startSignal.getCount() > 0)\n         {\n             startSignal.countDown();\n         }",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/df20416c08fa0079d96f6327d10c6f102ebabd85/src/java/test/org/apache/zookeeper/test/SessionTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-696. NPE in the hudson logs, seems nioservercnxn closed twice (phunt via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@921683 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/df20416c08fa0079d96f6327d10c6f102ebabd85"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/b6320b80a4c08958d5b5028cf065cbcc57894a86",
        "bug_id": "zookeeper_28",
        "file": [
            {
                "additions": 2,
                "sha": "2fbfab6b8aa35fbad96f16d273757197ffbbe877",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/06d451ad0c982c098458f7a40463b5034708bcfc/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=06d451ad0c982c098458f7a40463b5034708bcfc",
                "patch": "@@ -39,6 +39,8 @@ BUGFIXES:\n   ZOOKEEPER-362. Issues with FLENewEpochTest. (fix bug in Fast leader election)\n (flavio via mahadev)\n \n+  ZOOKEEPER-363. NPE when recovering ledger with no hint. (flavio via mahadev)\n+\n IMPROVEMENTS:\n   ZOOKEEPER-308. improve the atomic broadcast performance 3x.\n   (breed via mahadev)",
                "changes": 2,
                "blob_url": "https://github.com/apache/zookeeper/blob/06d451ad0c982c098458f7a40463b5034708bcfc/CHANGES.txt"
            },
            {
                "additions": 2,
                "sha": "b88f4e1f93736cb2a840bb44275c40f43d73d29e",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/06d451ad0c982c098458f7a40463b5034708bcfc/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/client/LedgerRecoveryMonitor.java",
                "deletions": 2,
                "filename": "src/contrib/bookkeeper/src/java/org/apache/bookkeeper/client/LedgerRecoveryMonitor.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/client/LedgerRecoveryMonitor.java?ref=06d451ad0c982c098458f7a40463b5034708bcfc",
                "patch": "@@ -145,8 +145,8 @@ boolean recover(byte[] passwd) throws\n         long readCounter = 0;\n         while(notLegitimate){\n             readCounter = getNextHint();\n-            if(readCounter != -1){\n-                lh.setLast(readCounter - 1);\n+            if(readCounter > -1){\n+                lh.setLast(readCounter);\n                 boolean hasMore = true;\n                 while(hasMore){\n                     hasMore = false;",
                "changes": 4,
                "blob_url": "https://github.com/apache/zookeeper/blob/06d451ad0c982c098458f7a40463b5034708bcfc/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/client/LedgerRecoveryMonitor.java"
            },
            {
                "additions": 85,
                "sha": "374d5232561c8fe01843615dacb92432a059a052",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/06d451ad0c982c098458f7a40463b5034708bcfc/src/contrib/bookkeeper/test/org/apache/bookkeeper/test/LedgerRecoveryTest.java",
                "deletions": 0,
                "filename": "src/contrib/bookkeeper/test/org/apache/bookkeeper/test/LedgerRecoveryTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/contrib/bookkeeper/test/org/apache/bookkeeper/test/LedgerRecoveryTest.java?ref=06d451ad0c982c098458f7a40463b5034708bcfc",
                "patch": "@@ -260,4 +260,89 @@ public void testLedgerRecovery(){\n         \n     }\n     \n+    @Test\n+    public void testEmptyLedgerRecovery(){\n+        /*\n+         * Instantiate BookKeeper object.\n+         */\n+        BookKeeper bk = null;\n+        try{\n+            bk = new BookKeeper(HOSTPORT);\n+        } catch (KeeperException ke){\n+            LOG.error(\"Error instantiating BookKeeper\", ke);\n+            fail(\"ZooKeeper error\");\n+        } catch (IOException ioe){\n+            LOG.error(ioe);\n+            fail(\"Failure due to IOException\");\n+        }\n+        \n+        /*\n+         * Create ledger.\n+         */\n+        LedgerHandle beforelh = null;\n+        try{\n+            beforelh = bk.createLedger(\"\".getBytes());\n+        } catch (KeeperException ke){\n+            LOG.error(\"Error creating a ledger\", ke);\n+            fail(\"ZooKeeper error\");            \n+        } catch (BKException bke){\n+            LOG.error(\"BookKeeper error\");\n+            fail(\"BookKeeper error\");\n+        } catch (InterruptedException ie) {\n+            LOG.error(ie);\n+            fail(\"Failure due to interrupted exception\");\n+        } catch (IOException ioe) {\n+            LOG.error(ioe);\n+            fail(\"Failure due to IO exception\");\n+        }\n+        \n+        /*\n+         * Write a 1 entry.\n+         */\n+        try{\n+            String tmp = \"BookKeeper is cool!\";\n+            for(int i = 0; i < 1; i++){\n+                bk.addEntry(beforelh, tmp.getBytes());\n+            }\n+        } catch(InterruptedException e){\n+            LOG.error(\"Interrupted when adding entry\", e);\n+            fail(\"Couldn't finish adding entries\");\n+        }\n+        \n+        ///*\n+        // * Sleep.\n+        // */\n+        //try{\n+        //    Thread.sleep(2000);\n+        //} catch(InterruptedException e){\n+        //    LOG.error(\"Interrupted while sleeping\", e);\n+        //    fail(\"Couldn't finish sleeping\");\n+        //}\n+        \n+        /*\n+         * Try to open ledger.\n+         */\n+        try{\n+            LedgerHandle afterlh = bk.openLedger(beforelh.getId(), \"\".getBytes());\n+            \n+            /*\n+             * Check if has recovered properly.\n+             */\n+            assertTrue(\"Has not recovered correctly: \" + afterlh.getLast(), afterlh.getLast() == 1);\n+        } catch (KeeperException e) {\n+            LOG.error(\"Error when opening ledger\", e);\n+            fail(\"Couldn't open ledger\");\n+        } catch (InterruptedException ie) {\n+            LOG.error(\"Interrupted exception\", ie);\n+            fail(\"Failure due to interrupted exception\");\n+        } catch (IOException ioe) {\n+            LOG.error(\"IO Exception\", ioe);\n+            fail(\"Failure due to IO exception\");\n+        } catch (BKException bke){\n+            LOG.error(\"BookKeeper error\", bke);\n+            fail(\"BookKeeper error\");\n+        }\n+        \n+    }\n+    \n }",
                "changes": 85,
                "blob_url": "https://github.com/apache/zookeeper/blob/06d451ad0c982c098458f7a40463b5034708bcfc/src/contrib/bookkeeper/test/org/apache/bookkeeper/test/LedgerRecoveryTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-363. NPE when recovering ledger with no hint. (flavio via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@762602 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/06d451ad0c982c098458f7a40463b5034708bcfc"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/56a1186f817bf13f7672ad07e31684bcd0f536f6",
        "bug_id": "zookeeper_29",
        "file": [
            {
                "additions": 3,
                "sha": "6860a2e19c0711af0c14fef8e41dbc3b4ab2d1ef",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/1b91bfd187f1a718fc4f596099ca08af15a17971/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=1b91bfd187f1a718fc4f596099ca08af15a17971",
                "patch": "@@ -34,6 +34,9 @@ BUGFIXES:\n   ZOOKEEPER-341.  regression in QuorumPeerMain, \n   tickTime from config is lost, cannot start quorum (phunt via mahadev)\n \n+  ZOOKEEPER-360. WeakHashMap in Bookie.java causes NPE (flavio via mahadev)\n+\n+\n IMPROVEMENTS:\n   ZOOKEEPER-308. improve the atomic broadcast performance 3x.\n   (breed via mahadev)",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/1b91bfd187f1a718fc4f596099ca08af15a17971/CHANGES.txt"
            },
            {
                "additions": 2,
                "sha": "c84eb8fe84e6de195dea8d07d02a128545844625",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/1b91bfd187f1a718fc4f596099ca08af15a17971/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/Bookie.java",
                "deletions": 5,
                "filename": "src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/Bookie.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/Bookie.java?ref=1b91bfd187f1a718fc4f596099ca08af15a17971",
                "patch": "@@ -27,7 +27,6 @@\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n import java.util.HashMap;\n-import java.util.WeakHashMap;\n import java.util.LinkedList;\n import java.util.Random;\n import java.util.concurrent.LinkedBlockingQueue;\n@@ -55,8 +54,6 @@\n \n     final File ledgerDirectories[];\n     \n-    WeakHashMap<Long, ByteBuffer> masterKeys = new WeakHashMap<Long, ByteBuffer>();\n-    \n     public static class NoLedgerException extends IOException {\n         private static final long serialVersionUID = 1L;\n         private long ledgerId;\n@@ -104,7 +101,7 @@ private LedgerDescriptor getHandle(long ledgerId, boolean readonly, byte[] maste\n             if (handle == null) {\n                 handle = createHandle(ledgerId, readonly);\n                 ledgers.put(ledgerId, handle);\n-                masterKeys.put(ledgerId, ByteBuffer.wrap(masterKey));\n+                handle.setMasterKey(ByteBuffer.wrap(masterKey));\n             } \n             handle.incRef();\n         }\n@@ -291,7 +288,7 @@ public void addEntry(ByteBuffer entry, AddCallback cb, Object ctx, byte[] master\n         long ledgerId = entry.getLong();\n         LedgerDescriptor handle = getHandle(ledgerId, false, masterKey);\n         \n-        if(!masterKeys.get(ledgerId).equals(ByteBuffer.wrap(masterKey))){\n+        if(!handle.cmpMasterKey(ByteBuffer.wrap(masterKey))){\n             throw BookieException.create(BookieException.Code.UnauthorizedAccessException);\n         }\n         try {",
                "changes": 7,
                "blob_url": "https://github.com/apache/zookeeper/blob/1b91bfd187f1a718fc4f596099ca08af15a17971/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/Bookie.java"
            },
            {
                "additions": 11,
                "sha": "9927366a6dfccc3a924e3e68f8162082ce052cdc",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/1b91bfd187f1a718fc4f596099ca08af15a17971/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java",
                "deletions": 0,
                "filename": "src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java?ref=1b91bfd187f1a718fc4f596099ca08af15a17971",
                "patch": "@@ -42,6 +42,17 @@\n         this.ledger = ledger;\n         this.ledgerIndex = ledgerIndex;\n     }\n+    \n+    private ByteBuffer masterKey = null;\n+    \n+    void setMasterKey(ByteBuffer masterKey){\n+        this.masterKey = masterKey;\n+    }\n+    \n+    boolean cmpMasterKey(ByteBuffer masterKey){\n+        return this.masterKey.equals(masterKey);\n+    }\n+    \n     private long ledgerId;\n     private FileChannel ledger;\n     private FileChannel ledgerIndex;",
                "changes": 11,
                "blob_url": "https://github.com/apache/zookeeper/blob/1b91bfd187f1a718fc4f596099ca08af15a17971/src/contrib/bookkeeper/src/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-360. WeakHashMap in Bookie.java causes NPE (flavio via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@761811 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/1b91bfd187f1a718fc4f596099ca08af15a17971"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/b17e881ff0e6fa9ce0ab5063c3a390fda782e752",
        "bug_id": "zookeeper_30",
        "file": [
            {
                "additions": 3,
                "sha": "08295e3836a97287cab63d484ae168929f5af640",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/f340e569fe7c33985298397d31b89638a397bf19/CHANGES.txt",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/CHANGES.txt?ref=f340e569fe7c33985298397d31b89638a397bf19",
                "patch": "@@ -68,6 +68,9 @@ BUGFIXES:\n \n   ZOOKEEPER-273. Zookeeper c client build should not depend on CPPUNIT. (pat\n and runping via mahadev)\n+\n+ ZOOKEEPER-268.  tostring on jute generated objects can cause NPE. (pat via\n+mahadev)\n  \n IMPROVEMENTS:\n    ",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/f340e569fe7c33985298397d31b89638a397bf19/CHANGES.txt"
            },
            {
                "additions": 16,
                "sha": "ec21c41dcdef6810ed7432f03ebc879c25dd8c08",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/f340e569fe7c33985298397d31b89638a397bf19/src/java/main/org/apache/jute/Utils.java",
                "deletions": 11,
                "filename": "src/java/main/org/apache/jute/Utils.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/jute/Utils.java?ref=f340e569fe7c33985298397d31b89638a397bf19",
                "patch": "@@ -19,20 +19,17 @@\n package org.apache.jute;\n \n import java.io.ByteArrayOutputStream;\n-import java.io.DataInput;\n-import java.io.DataOutput;\n import java.io.IOException;\n-import java.io.UnsupportedEncodingException;\n-import java.nio.charset.CharacterCodingException;\n \n /**\n- * Various utility functions for Hadooop record I/O runtime.\n+ * Various utility functions for Hadoop record I/O runtime.\n  * @author Milind Bhandarkar\n  */\n public class Utils {\n     \n     /** Cannot create a new instance of Utils */\n     private Utils() {\n+        super();\n     }\n    \n     /**\n@@ -56,16 +53,18 @@ public static boolean bufEquals(byte onearray[], byte twoarray[] ) {\n         return true;\n     }\n     \n-    public static final char[] hexchars = { '0', '1', '2', '3', '4', '5',\n+    private static final char[] hexchars = { '0', '1', '2', '3', '4', '5',\n                                             '6', '7', '8', '9', 'A', 'B',\n                                             'C', 'D', 'E', 'F' };\n     /**\n      * \n      * @param s \n      * @return \n      */\n-    static String toXMLString(String t) {\n-        String s = t.toString();\n+    static String toXMLString(String s) {\n+        if (s == null)\n+            return \"\";\n+\n         StringBuffer sb = new StringBuffer();\n         for (int idx = 0; idx < s.length(); idx++) {\n           char ch = s.charAt(idx);\n@@ -197,9 +196,12 @@ static String fromCSVString(String s) throws IOException {\n      * @return \n      */\n     static String toXMLBuffer(byte barr[]) {\n+        if (barr == null || barr.length == 0) {\n+            return \"\";\n+        }\n         StringBuffer sb = new StringBuffer(2*barr.length);\n         for (int idx = 0; idx < barr.length; idx++) {\n-            sb.append(Integer.toHexString((int)barr[idx]));\n+            sb.append(Integer.toHexString(barr[idx]));\n         }\n         return sb.toString();\n     }\n@@ -231,10 +233,13 @@ static String toXMLBuffer(byte barr[]) {\n      * @return \n      */\n     static String toCSVBuffer(byte barr[]) {\n-        StringBuffer sb = new StringBuffer(barr.length+1);\n+        if (barr == null || barr.length == 0) {\n+            return \"\";\n+        }\n+        StringBuffer sb = new StringBuffer(barr.length + 1);\n         sb.append('#');\n         for(int idx = 0; idx < barr.length; idx++) {\n-            sb.append(Integer.toHexString((int)barr[idx]));\n+            sb.append(Integer.toHexString(barr[idx]));\n         }\n         return sb.toString();\n     }",
                "changes": 27,
                "blob_url": "https://github.com/apache/zookeeper/blob/f340e569fe7c33985298397d31b89638a397bf19/src/java/main/org/apache/jute/Utils.java"
            },
            {
                "additions": 38,
                "sha": "813ec7f113fbebf6c2f463f1cd545d938011d55a",
                "status": "added",
                "raw_url": "https://github.com/apache/zookeeper/raw/f340e569fe7c33985298397d31b89638a397bf19/src/java/test/org/apache/zookeeper/server/ToStringTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/server/ToStringTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/server/ToStringTest.java?ref=f340e569fe7c33985298397d31b89638a397bf19",
                "patch": "@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.server;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.zookeeper.proto.SetDataRequest;\n+import org.junit.Test;\n+\n+/**\n+ * A misc place to verify toString methods - mainly to make sure they don't\n+ * fail.\n+ */\n+public class ToStringTest extends TestCase {\n+    /** Verify jute - which we've had particular problems with in the past \n+     * wrt null fields */\n+    @Test\n+    public void testJuteToString() {\n+        SetDataRequest req = new SetDataRequest(null, null, 0);\n+        assertNotSame(\"ERROR\", req.toString());\n+    }\n+}",
                "changes": 38,
                "blob_url": "https://github.com/apache/zookeeper/blob/f340e569fe7c33985298397d31b89638a397bf19/src/java/test/org/apache/zookeeper/server/ToStringTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-268.  tostring on jute generated objects can cause NPE. (pat via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@737784 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/f340e569fe7c33985298397d31b89638a397bf19"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/435bc0ff5db851d341c373bc515f6a618691e6c4",
        "bug_id": "zookeeper_31",
        "file": [
            {
                "additions": 3,
                "sha": "2ab88dbc30adff3e7f169e0a288d58e7b0b2e5f6",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/a07a03d70b56ab26f4a790ef1e9941a06b478b84/src/java/Changes.txt",
                "deletions": 0,
                "filename": "src/java/Changes.txt",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/Changes.txt?ref=a07a03d70b56ab26f4a790ef1e9941a06b478b84",
                "patch": "@@ -12,3 +12,6 @@ Trunk:\n \n   ZOOKEEPER-111. Significant cleanup of existing tests. (Patrick Hunt via\n   mahadev)\n+ \n+  ZOOKEEPER-122. Fix  NPE in jute's Utils.toCSVString. (Anthony Urso via\n+  mahadev)",
                "changes": 3,
                "blob_url": "https://github.com/apache/zookeeper/blob/a07a03d70b56ab26f4a790ef1e9941a06b478b84/src/java/Changes.txt"
            },
            {
                "additions": 4,
                "sha": "7dae86083c60f9c425457deeadf28636c582d06b",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/a07a03d70b56ab26f4a790ef1e9941a06b478b84/src/java/main/org/apache/jute/Utils.java",
                "deletions": 2,
                "filename": "src/java/main/org/apache/jute/Utils.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/jute/Utils.java?ref=a07a03d70b56ab26f4a790ef1e9941a06b478b84",
                "patch": "@@ -124,8 +124,10 @@ static String fromXMLString(String s) {\n      * @param s \n      * @return \n      */\n-    static String toCSVString(String t) {\n-        String s = t.toString();\n+    static String toCSVString(String s) {\n+        if (s == null)\n+            return \"\";\n+\n         StringBuffer sb = new StringBuffer(s.length()+1);\n         sb.append('\\'');\n         int len = s.length();",
                "changes": 6,
                "blob_url": "https://github.com/apache/zookeeper/blob/a07a03d70b56ab26f4a790ef1e9941a06b478b84/src/java/main/org/apache/jute/Utils.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-122. Fix  NPE in jute's Utils.toCSVString. (Anthony Urso via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/zookeeper/trunk@687111 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/zookeeper/commit/a07a03d70b56ab26f4a790ef1e9941a06b478b84"
    },
    {
        "parent": "https://github.com/apache/zookeeper/commit/0706b40afad079f19fe9f76c99bbb7ec69780dbd",
        "bug_id": "zookeeper_32",
        "file": [
            {
                "additions": 17,
                "sha": "d24404fb95dab823bbeb4d464d96ac54e0a54ee8",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/d7c192c1829cc657d3312f47ecb5b97519d1b30d/src/java/main/org/apache/zookeeper/ZooKeeper.java",
                "deletions": 9,
                "filename": "src/java/main/org/apache/zookeeper/ZooKeeper.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/ZooKeeper.java?ref=d7c192c1829cc657d3312f47ecb5b97519d1b30d",
                "patch": "@@ -1429,6 +1429,7 @@ public String create(final String path, byte data[], List<ACL> acl,\n         final String clientPath = path;\n         PathUtils.validatePath(clientPath, createMode.isSequential());\n         EphemeralType.validateTTL(createMode, -1);\n+        validateACL(acl);\n \n         final String serverPath = prependChroot(clientPath);\n \n@@ -1439,9 +1440,6 @@ public String create(final String path, byte data[], List<ACL> acl,\n         request.setData(data);\n         request.setFlags(createMode.toFlag());\n         request.setPath(serverPath);\n-        if (acl != null && acl.size() == 0) {\n-            throw new KeeperException.InvalidACLException();\n-        }\n         request.setAcl(acl);\n         ReplyHeader r = cnxn.submitRequest(h, request, response, null);\n         if (r.getErr() != 0) {\n@@ -1532,15 +1530,13 @@ public String create(final String path, byte data[], List<ACL> acl,\n         final String clientPath = path;\n         PathUtils.validatePath(clientPath, createMode.isSequential());\n         EphemeralType.validateTTL(createMode, ttl);\n+        validateACL(acl);\n \n         final String serverPath = prependChroot(clientPath);\n \n         RequestHeader h = new RequestHeader();\n         setCreateHeader(createMode, h);\n         Create2Response response = new Create2Response();\n-        if (acl != null && acl.size() == 0) {\n-            throw new KeeperException.InvalidACLException();\n-        }\n         Record record = makeCreateRecord(createMode, serverPath, data, acl, ttl);\n         ReplyHeader r = cnxn.submitRequest(h, record, response, null);\n         if (r.getErr() != 0) {\n@@ -2373,16 +2369,14 @@ public Stat setACL(final String path, List<ACL> acl, int aclVersion)\n     {\n         final String clientPath = path;\n         PathUtils.validatePath(clientPath);\n+        validateACL(acl);\n \n         final String serverPath = prependChroot(clientPath);\n \n         RequestHeader h = new RequestHeader();\n         h.setType(ZooDefs.OpCode.setACL);\n         SetACLRequest request = new SetACLRequest();\n         request.setPath(serverPath);\n-        if (acl != null && acl.size() == 0) {\n-            throw new KeeperException.InvalidACLException(clientPath);\n-        }\n         request.setAcl(acl);\n         request.setVersion(aclVersion);\n         SetACLResponse response = new SetACLResponse();\n@@ -2945,4 +2939,18 @@ private ClientCnxnSocket getClientCnxnSocket() throws IOException {\n             throw ioe;\n         }\n     }\n+\n+    /**\n+     * Validates the provided ACL list for null, empty or null value in it.\n+     * \n+     * @param acl\n+     *            ACL list\n+     * @throws InvalidACLException\n+     *             if ACL list is not valid\n+     */\n+    private void validateACL(List<ACL> acl) throws KeeperException.InvalidACLException {\n+        if (acl == null || acl.isEmpty() || acl.contains(null)) {\n+            throw new KeeperException.InvalidACLException();\n+        }\n+    }\n }",
                "changes": 26,
                "blob_url": "https://github.com/apache/zookeeper/blob/d7c192c1829cc657d3312f47ecb5b97519d1b30d/src/java/main/org/apache/zookeeper/ZooKeeper.java"
            },
            {
                "additions": 5,
                "sha": "deda6b904801cfff9938c7158f072c480eaee5ea",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/d7c192c1829cc657d3312f47ecb5b97519d1b30d/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java",
                "deletions": 3,
                "filename": "src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java?ref=d7c192c1829cc657d3312f47ecb5b97519d1b30d",
                "patch": "@@ -912,9 +912,11 @@ protected void pRequest(Request request) throws RequestProcessorException {\n     private List<ACL> removeDuplicates(List<ACL> acl) {\n \n         LinkedList<ACL> retval = new LinkedList<ACL>();\n-        for (ACL a : acl) {\n-            if (!retval.contains(a)) {\n-                retval.add(a);\n+        if (acl != null) {\n+            for (ACL a : acl) {\n+                if (!retval.contains(a)) {\n+                    retval.add(a);\n+                }\n             }\n         }\n         return retval;",
                "changes": 8,
                "blob_url": "https://github.com/apache/zookeeper/blob/d7c192c1829cc657d3312f47ecb5b97519d1b30d/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java"
            },
            {
                "additions": 90,
                "sha": "b9c2c4948aee70fadfd2defbf032bd94cb8aa03e",
                "status": "modified",
                "raw_url": "https://github.com/apache/zookeeper/raw/d7c192c1829cc657d3312f47ecb5b97519d1b30d/src/java/test/org/apache/zookeeper/test/ACLTest.java",
                "deletions": 0,
                "filename": "src/java/test/org/apache/zookeeper/test/ACLTest.java",
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/src/java/test/org/apache/zookeeper/test/ACLTest.java?ref=d7c192c1829cc657d3312f47ecb5b97519d1b30d",
                "patch": "@@ -22,11 +22,13 @@\n \n import java.io.File;\n import java.util.ArrayList;\n+import java.util.List;\n import java.util.concurrent.CountDownLatch;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException.InvalidACLException;\n import org.apache.zookeeper.PortAssignment;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -189,4 +191,92 @@ public void process(WatchedEvent event) {\n             }\n         }\n     }\n+    \n+    @Test\n+    public void testNullACL() throws Exception {\n+        File tmpDir = ClientBase.createTmpDir();\n+        ClientBase.setupTestEnv();\n+        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n+        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n+        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n+        f.startup(zks);\n+        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n+        try {\n+            // case 1 : null ACL with create\n+            try {\n+                zk.create(\"/foo\", \"foo\".getBytes(), null, CreateMode.PERSISTENT);\n+                Assert.fail(\"Expected InvalidACLException for null ACL parameter\");\n+            } catch (InvalidACLException e) {\n+                // Expected. Do nothing\n+            }\n+\n+            // case 2 : null ACL with other create API\n+            try {\n+                zk.create(\"/foo\", \"foo\".getBytes(), null, CreateMode.PERSISTENT, null);\n+                Assert.fail(\"Expected InvalidACLException for null ACL parameter\");\n+            } catch (InvalidACLException e) {\n+                // Expected. Do nothing\n+            }\n+            \n+            // case 3 : null ACL with setACL\n+            try {\n+                zk.setACL(\"/foo\", null, 0);\n+                Assert.fail(\"Expected InvalidACLException for null ACL parameter\");\n+            } catch (InvalidACLException e) {\n+                // Expected. Do nothing\n+            }\n+        } finally {\n+            zk.close();\n+            f.shutdown();\n+            zks.shutdown();\n+            Assert.assertTrue(\"waiting for server down\",\n+                    ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n+        }\n+    }\n+\n+    @Test\n+    public void testNullValueACL() throws Exception {\n+        File tmpDir = ClientBase.createTmpDir();\n+        ClientBase.setupTestEnv();\n+        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);\n+        final int PORT = Integer.parseInt(HOSTPORT.split(\":\")[1]);\n+        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);\n+        f.startup(zks);\n+        ZooKeeper zk = ClientBase.createZKClient(HOSTPORT);\n+        try {\n+\n+            List<ACL> acls = new ArrayList<ACL>();\n+            acls.add(null);\n+\n+            // case 1 : null value in ACL list with create\n+            try {\n+                zk.create(\"/foo\", \"foo\".getBytes(), acls, CreateMode.PERSISTENT);\n+                Assert.fail(\"Expected InvalidACLException for null value in ACL List\");\n+            } catch (InvalidACLException e) {\n+                // Expected. Do nothing\n+            }\n+\n+            // case 2 : null value in ACL list with other create API\n+            try {\n+                zk.create(\"/foo\", \"foo\".getBytes(), acls, CreateMode.PERSISTENT, null);\n+                Assert.fail(\"Expected InvalidACLException for null value in ACL List\");\n+            } catch (InvalidACLException e) {\n+                // Expected. Do nothing\n+            }\n+\n+            // case 3 : null value in ACL list with setACL\n+            try {\n+                zk.setACL(\"/foo\", acls, -1);\n+                Assert.fail(\"Expected InvalidACLException for null value in ACL List\");\n+            } catch (InvalidACLException e) {\n+                // Expected. Do nothing\n+            }\n+        } finally {\n+            zk.close();\n+            f.shutdown();\n+            zks.shutdown();\n+            Assert.assertTrue(\"waiting for server down\",\n+                    ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n+        }\n+    }\n }",
                "changes": 90,
                "blob_url": "https://github.com/apache/zookeeper/blob/d7c192c1829cc657d3312f47ecb5b97519d1b30d/src/java/test/org/apache/zookeeper/test/ACLTest.java"
            }
        ],
        "repo": "zookeeper",
        "message": "ZOOKEEPER-2804: Node creation fails with NPE if ACLs are null\n\n1) Handled Null case in server. Client will get InvalidACLException\n2) Handled null check in create and setACL APIs in client side as mentioned in their javadoc\nthrows KeeperException.InvalidACLException if the ACL is invalid, null, or empty\n3) Not handling any validation for async API of create and setACL in this JIRA because these API doesn't throw KeeperException explicitly. So can not throw InvalidACLExceptin from Client.  If we throw IllegalArgumentException then it will not be consistent with other sync APIs.  So Let server throw InvalidACLException for async API.\n\nPlease review and provide suggestion.\n\nAuthor: bhupendra jain <bhupendra.jain@huawei.com>\n\nReviewers: Mohammad Arshad <arshad@apache.org>, Michael Han <hanm@apache.org>\n\nCloses #279 from jainbhupendra24/ZOOKEEPER-2804-new",
        "commit": "https://github.com/apache/zookeeper/commit/d7c192c1829cc657d3312f47ecb5b97519d1b30d"
    }
]