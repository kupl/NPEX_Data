[{"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/32989eaca9de49c1e0b7df343162084c63940ccd", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a6d7bc2ab6cb6fc074400e599dc5176298701af9", "message": "NO-JIRA: Fix NPE in ClasspathQuery used in integration tests", "bug_id": "qpid-jms-amqp-0-x_1", "file": [{"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/32989eaca9de49c1e0b7df343162084c63940ccd/systests/src/main/java/org/apache/qpid/systest/core/dependency/ClasspathQuery.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/32989eaca9de49c1e0b7df343162084c63940ccd/systests/src/main/java/org/apache/qpid/systest/core/dependency/ClasspathQuery.java", "sha": "97fce1f3062234413371f440c990106ed5d30b61", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/systest/core/dependency/ClasspathQuery.java?ref=32989eaca9de49c1e0b7df343162084c63940ccd", "patch": "@@ -154,7 +154,12 @@ public String getClasspath()\n \n     private String buildClassPath(final Class<?> clientClazz, final Collection<String> gavs)\n     {\n-        List<File> classpathElements = new ArrayList<>(_classpathCache.getUnchecked(gavs));\n+        final List<File> cached = _classpathCache.getUnchecked(gavs);\n+        List<File> classpathElements = new ArrayList<>();\n+        if (cached != null)\n+        {\n+            classpathElements.addAll(cached);\n+        }\n         classpathElements.add(getLocalClasspathElement(clientClazz));\n \n         return Joiner.on(System.getProperty(\"path.separator\")).join(classpathElements);", "filename": "systests/src/main/java/org/apache/qpid/systest/core/dependency/ClasspathQuery.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ae6d79d38334127039e2d62826d9c441f60f1659", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/1fdecf3a80dfadc8d1b5d3ab42334c2154587fb6", "message": "QPID-7898: [Qpid JMS AMQP 0-x] Prevent possibilities of NPEs when 0-8 path parses a reply-to address that is not BURL formatted", "bug_id": "qpid-jms-amqp-0-x_2", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java", "sha": "d30f51608fc1fac746c11b30414cb589d5100cef", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java?ref=ae6d79d38334127039e2d62826d9c441f60f1659", "patch": "@@ -781,6 +781,7 @@ public void notifyMessage(AbstractJMSMessage jmsMessage)\n     protected void preDeliver(AbstractJMSMessage msg)\n     {\n         _session.setInRecovery(false);\n+        msg.setAMQSession(_session);\n \n         switch (_acknowledgeMode)\n         {\n@@ -793,9 +794,6 @@ protected void preDeliver(AbstractJMSMessage msg)\n                 _session.addUnacknowledgedMessage(msg.getDeliveryTag());\n                 break;\n             case Session.CLIENT_ACKNOWLEDGE:\n-                // we set the session so that when the user calls acknowledge() it can call the method on session\n-                // to send out the appropriate frame\n-                msg.setAMQSession(_session);\n                 _session.addUnacknowledgedMessage(msg.getDeliveryTag());\n                 _session.markDirty();\n                 break;", "filename": "client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java"}, {"additions": 42, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_8.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_8.java", "sha": "8a9aec8cbec926a5242b60c24eeeeee6bb67b24b", "changes": 50, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_8.java?ref=ae6d79d38334127039e2d62826d9c441f60f1659", "patch": "@@ -34,14 +34,18 @@\n import javax.jms.MessageNotWriteableException;\n import javax.jms.Queue;\n \n+import org.apache.qpid.QpidException;\n+import org.apache.qpid.client.AMQAnyDestination;\n import org.apache.qpid.client.AMQDestination;\n import org.apache.qpid.client.AMQQueue;\n import org.apache.qpid.client.AMQSession;\n import org.apache.qpid.client.AMQSession_0_8;\n import org.apache.qpid.client.AMQTopic;\n import org.apache.qpid.client.CustomJMSXProperty;\n+import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.messaging.Address;\n import org.apache.qpid.url.AMQBindingURL;\n import org.apache.qpid.url.BindingURL;\n \n@@ -297,15 +301,17 @@ public Destination getJMSReplyTo() throws JMSException\n                     else if(replyToEncoding.contains(\"/\"))\n                     {\n                         String[] parts = replyToEncoding.split(\"/\",2);\n-                        dest = new NonBURLReplyToDestination(parts[0], parts[1]);\n-\n-\n+                        dest = new NonBURLReplyToDestination(ExchangeDefaults.DIRECT_EXCHANGE_CLASS, parts[0], parts[1]);\n                     }\n                     else\n                     {\n-                        if(getAMQSession().isQueueBound(replyToEncoding, null, null))\n+                        if (getAMQSession().isQueueBound(null, replyToEncoding, null))\n                         {\n-                            dest = new NonBURLReplyToDestination(replyToEncoding, \"\");\n+                            dest = new NonBURLReplyToDestination(ExchangeDefaults.DIRECT_EXCHANGE_CLASS, \"\", replyToEncoding);\n+                        }\n+                        else if (isExchangeExist(replyToEncoding))\n+                        {\n+                            dest = new NonBURLReplyToDestination(ExchangeDefaults.DIRECT_EXCHANGE_CLASS, replyToEncoding, \"\");\n                         }\n                         else\n                         {\n@@ -322,6 +328,32 @@ else if(replyToEncoding.contains(\"/\"))\n         }\n     }\n \n+    private boolean isExchangeExist(final String replyToEncoding)\n+    {\n+        try\n+        {\n+            AMQDestination amqDestination = new AMQDestination()\n+            {\n+                @Override\n+                public String getAddressName()\n+                {\n+                    return replyToEncoding;\n+                }\n+\n+                @Override\n+                public boolean isNameRequired()\n+                {\n+                    return false;\n+                }\n+            };\n+            return getAMQSession().isExchangeExist(amqDestination, false);\n+        }\n+        catch (Exception e)\n+        {\n+            return false;\n+        }\n+    }\n+\n     public void setJMSReplyTo(Destination destination) throws JMSException\n     {\n         if (destination == null)\n@@ -660,7 +692,7 @@ boolean hasProperty(final String name)\n         public DefaultRouterDestination(final String replyToEncoding)\n         {\n             super(\"\",\n-                  \"direct\",\n+                  ExchangeDefaults.DIRECT_EXCHANGE_CLASS,\n                   replyToEncoding,\n                   replyToEncoding);\n         }\n@@ -682,10 +714,12 @@ public boolean neverDeclare()\n     {\n         private static final long serialVersionUID = 122897705932489259L;\n \n-        public NonBURLReplyToDestination(final String exchange, final String routingKey)\n+        public NonBURLReplyToDestination(final String exchangeClass,\n+                                         final String exchange,\n+                                         final String routingKey)\n         {\n             super(exchange,\n-                  null,\n+                  exchangeClass,\n                   routingKey,\n                   routingKey);\n         }", "filename": "client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_8.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java", "sha": "d2cd0076b81a8c61707d866c70ec78d153261cac", "changes": 8, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java?ref=ae6d79d38334127039e2d62826d9c441f60f1659", "patch": "@@ -34,8 +34,6 @@\n {\n \n \n-    /** If the acknowledge mode is CLIENT_ACKNOWLEDGE the session is required */\n-\n     private AMQMessageDelegate _delegate;\n     private boolean _redelivered;\n     private boolean _receivedFromServer;\n@@ -398,12 +396,6 @@ public void setReceivedFromServer()\n \n \n \n-    /**\n-     * The session is set when CLIENT_ACKNOWLEDGE mode is used so that the CHANNEL ACK can be sent when the user calls\n-     * acknowledge()\n-     *\n-     * @param s the AMQ session that delivered this message\n-     */\n     public void setAMQSession(AMQSession s)\n     {\n         _delegate.setAMQSession(s);", "filename": "client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java"}, {"additions": 68, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/test/java/org/apache/qpid/client/message/AbstractJMSMessageTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ae6d79d38334127039e2d62826d9c441f60f1659/client/src/test/java/org/apache/qpid/client/message/AbstractJMSMessageTest.java", "sha": "2bde82b671fde2ffa9b2323f112119073bde9484", "changes": 71, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/client/message/AbstractJMSMessageTest.java?ref=ae6d79d38334127039e2d62826d9c441f60f1659", "patch": "@@ -21,17 +21,49 @@\n package org.apache.qpid.client.message;\n \n \n-import org.apache.qpid.test.utils.QpidTestCase;\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.argThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Matchers.isNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.jms.JMSException;\n \n+import org.mockito.ArgumentMatcher;\n+\n+import org.apache.qpid.QpidException;\n+import org.apache.qpid.client.AMQDestination;\n+import org.apache.qpid.client.AMQSession;\n+import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.ContentBody;\n+import org.apache.qpid.framing.ContentHeaderBody;\n+import org.apache.qpid.test.utils.QpidTestCase;\n+\n public class AbstractJMSMessageTest extends QpidTestCase\n {\n \n+    private final AMQSession<?,?> _session = mock(AMQSession.class);\n+    private final MessageFactoryRegistry _messageFactoryRegistry = MessageFactoryRegistry.newDefaultRegistry(_session);\n+\n+    public void testIncoming08ReplyTo() throws Exception\n+    {\n+        when(_session.isQueueBound(isNull(String.class), eq(\"knownQueue\"), isNull(String.class))).thenReturn(true);\n+        when(_session.isExchangeExist(isDestinationWithAddress(\"knownExchange\"), anyBoolean())).thenReturn(true);\n+\n+        doReplyToTest(\"direct://amq.direct/knownQueue?routingkey='knownQueue'\", \"direct://amq.direct/knownQueue/knownQueue?routingkey='knownQueue'\");\n+        doReplyToTest(\"knownQueue\", \"direct:///knownQueue/knownQueue?routingkey='knownQueue'\");\n+        doReplyToTest(\"knownExchange\", \"direct://knownExchange//?routingkey=''\");\n+        doReplyToTest(\"news-service/sports\", \"direct://news-service/sports/sports?routingkey='sports'\");\n+    }\n+\n     public void testSetNullJMSReplyTo08() throws JMSException\n     {\n         JMSTextMessage message = new JMSTextMessage(AMQMessageDelegateFactory.FACTORY_0_8);\n-        try \n+        try\n         {\n             message.setJMSReplyTo(null);\n         }\n@@ -44,7 +76,7 @@ public void testSetNullJMSReplyTo08() throws JMSException\n     public void testSetNullJMSReplyTo10() throws JMSException\n     {\n         JMSTextMessage message = new JMSTextMessage(AMQMessageDelegateFactory.FACTORY_0_10);\n-        try \n+        try\n         {\n             message.setJMSReplyTo(null);\n         }\n@@ -54,4 +86,37 @@ public void testSetNullJMSReplyTo10() throws JMSException\n         }\n     }\n \n+    private void doReplyToTest(final String headerReplyTo, final String expectedReplyToAddress)\n+            throws QpidException, JMSException\n+    {\n+        final ContentHeaderBody contentHeader = new ContentHeaderBody(new BasicContentHeaderProperties());\n+        contentHeader.getProperties().setReplyTo(headerReplyTo);\n+\n+        final List<ContentBody> contentBodies = new ArrayList<>();\n+        final AbstractJMSMessage message = _messageFactoryRegistry.createMessage(0, false,\n+                                                                                 \"amq.direct\",\n+                                                                                 \"routingKey\",\n+                                                                                 contentHeader,\n+                                                                                 contentBodies,\n+                                                                                 null,\n+                                                                                 null,\n+                                                                                 0);\n+        message.setAMQSession(_session);\n+\n+        assertNotNull(message.getJMSReplyTo());\n+        assertEquals(expectedReplyToAddress, message.getJMSReplyTo().toString());\n+    }\n+\n+    private AMQDestination isDestinationWithAddress(final String expectedAddress)\n+    {\n+        return argThat( new ArgumentMatcher<AMQDestination>()\n+        {\n+            @Override\n+            public boolean matches(Object argument)\n+            {\n+                AMQDestination actual = (AMQDestination) argument;\n+                return actual.getAddressName().equals(expectedAddress);\n+            }\n+        });\n+    }\n }", "filename": "client/src/test/java/org/apache/qpid/client/message/AbstractJMSMessageTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/f5372967854261a87e14a31aa01a04a04f938e49", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a6617c71cd29cc151b86c8b21037d3627c514ecd", "message": "QPID-7318 : Fix NPEs on shutdown", "bug_id": "qpid-jms-amqp-0-x_3", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f5372967854261a87e14a31aa01a04a04f938e49/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f5372967854261a87e14a31aa01a04a04f938e49/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java", "sha": "4d5388d62a9e9854cbddb2f8debe53a3edc755ea", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java?ref=f5372967854261a87e14a31aa01a04a04f938e49", "patch": "@@ -2955,7 +2955,7 @@ private boolean isSystemSubject(final Subject subject)\n     private Subject getSystemSubject(Principal... principals)\n     {\n         Set<Principal> principalSet = new HashSet<>(Arrays.asList(principals));\n-        principalSet.add(_systemPrincipal);\n+        principalSet.add(getSystemPrincipal());\n         return new Subject(true,\n                            principalSet,\n                            Collections.emptySet(),", "filename": "broker-core/src/main/java/org/apache/qpid/server/model/AbstractConfiguredObject.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/b5d092b7ab9195b2724a9d2527128c80142e6c2c", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/3b898cb90c1e94ef153d0ed0eaad03a0a27de550", "message": "QPID-7352: [Java Broker] Avoid NPE in GenericPrincipal", "bug_id": "qpid-jms-amqp-0-x_4", "file": [{"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b5d092b7ab9195b2724a9d2527128c80142e6c2c/broker-core/src/main/java/org/apache/qpid/server/model/preferences/GenericPrincipal.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b5d092b7ab9195b2724a9d2527128c80142e6c2c/broker-core/src/main/java/org/apache/qpid/server/model/preferences/GenericPrincipal.java", "sha": "99660a3ad06cbd49ceb30aef5dc4eb1262d41687", "changes": 14, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/model/preferences/GenericPrincipal.java?ref=b5d092b7ab9195b2724a9d2527128c80142e6c2c", "patch": "@@ -28,6 +28,7 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.qpid.server.model.ConfiguredObject;\n import org.apache.qpid.server.security.QpidPrincipal;\n \n public class GenericPrincipal implements Principal\n@@ -42,8 +43,17 @@\n     public GenericPrincipal(final QpidPrincipal principal)\n     {\n         _name = principal.getName();\n-        _originType = principal.getOrigin().getType();\n-        _originName = principal.getOrigin().getName();\n+        ConfiguredObject<?> origin = principal.getOrigin();\n+        if (origin != null)\n+        {\n+            _originType = origin.getType();\n+            _originName = origin.getName();\n+        }\n+        else\n+        {\n+            _originType = \"UNKNOWN\";\n+            _originName = \"\";\n+        }\n     }\n \n     public GenericPrincipal(final String name)", "filename": "broker-core/src/main/java/org/apache/qpid/server/model/preferences/GenericPrincipal.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ccee0c02984d33a75e678e7dc4c73380410dd542", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/c9ed5fb9fe01f2eca49b4106560ecf7d799bce42", "message": "QPID-7531: [Java Broker] [AMQP 1.0] Prevent possibility of NPE during peer initiated connection close", "bug_id": "qpid-jms-amqp-0-x_5", "file": [{"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ccee0c02984d33a75e678e7dc4c73380410dd542/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ccee0c02984d33a75e678e7dc4c73380410dd542/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java", "sha": "a55264ecd4f30c144e7726a030fdd8ce0d3ffe4b", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java?ref=ccee0c02984d33a75e678e7dc4c73380410dd542", "patch": "@@ -336,6 +336,7 @@ public void receiveSaslChallenge(final SaslChallenge saslChallenge)\n         closeSaslWithFailure();\n     }\n \n+    @Override\n     public void receiveClose(final short channel, final Close close)\n     {\n         assertState(FrameReceivingState.ANY_FRAME);\n@@ -353,10 +354,11 @@ public void receiveClose(final short channel, final Close close)\n                 _connectionState = ConnectionState.CLOSE_RECEIVED;\n                 if(close.getError() != null)\n                 {\n-                    ErrorCondition condition = _remoteError.getCondition();\n+                    final Error error = close.getError();\n+                    ErrorCondition condition = error.getCondition();\n                     Symbol errorCondition = condition == null ? null : condition.getValue();\n                     LOGGER.info(\"{} : Connection closed with error : {} - {}\", getLogSubject(),\n-                                errorCondition, _remoteError.getDescription());\n+                                errorCondition, close.getError().getDescription());\n                 }\n                 sendClose(new Close());\n                 _connectionState = ConnectionState.CLOSED;", "filename": "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/AMQPConnection_1_0.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a47889c4137e5d89456a75f2db864767f631da61", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/973c610b7d579b489be81a55e69789690323adb9", "message": "QPID-7523: [Java Broker] UpgradeFrom7To8#getConfigVersion should guard against NPE in case cursor is null", "bug_id": "qpid-jms-amqp-0-x_6", "file": [{"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a47889c4137e5d89456a75f2db864767f631da61/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom7To8.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a47889c4137e5d89456a75f2db864767f631da61/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom7To8.java", "sha": "77e76ceeadb1c5de3b864179849a87d350001c0d", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom7To8.java?ref=a47889c4137e5d89456a75f2db864767f631da61", "patch": "@@ -258,7 +258,10 @@ private int getConfigVersion(Database configVersionDb)\n         }\n         finally\n         {\n-            cursor.close();\n+            if (cursor != null)\n+            {\n+                cursor.close();\n+            }\n         }\n     }\n ", "filename": "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom7To8.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/e84c44f82e77ec557b382eb4ea6aeb34bae71068", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/7163547faee673e30037fe6325fc904c5d74b7ca", "message": "QPID-7507: [Java Client] Prevent AMQSession_0_10#isQueueExist() failing with NPE if AMQP times-out", "bug_id": "qpid-jms-amqp-0-x_7", "file": [{"additions": 13, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/e84c44f82e77ec557b382eb4ea6aeb34bae71068/client/src/main/java/org/apache/qpid/client/AMQSession_0_10.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/e84c44f82e77ec557b382eb4ea6aeb34bae71068/client/src/main/java/org/apache/qpid/client/AMQSession_0_10.java", "sha": "00932953c597774d68520b5fe3e27cddd3fca4b1", "changes": 18, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQSession_0_10.java?ref=e84c44f82e77ec557b382eb4ea6aeb34bae71068", "patch": "@@ -1159,15 +1159,23 @@ public boolean isQueueExist(String queueName, boolean assertNode,\n         }\n         catch(SessionException e)\n         {\n-            if (e.getException().getErrorCode() == ExecutionErrorCode.RESOURCE_DELETED\n-                    || e.getException().getErrorCode() == ExecutionErrorCode.NOT_FOUND)\n+            final ExecutionException underlying = e.getException();\n+            if (underlying == null)\n             {\n-                match = false;\n+                throw new QpidException(\"Error querying queue\", e);\n             }\n             else\n             {\n-                throw new AMQException(AMQConstant.getConstant(e.getException().getErrorCode().getValue()),\n-                        \"Error querying queue\",e);\n+                if (underlying.getErrorCode() == ExecutionErrorCode.RESOURCE_DELETED\n+                    || underlying.getErrorCode() == ExecutionErrorCode.NOT_FOUND)\n+                {\n+                    match = false;\n+                }\n+                else\n+                {\n+                    throw new AMQException(AMQConstant.getConstant(underlying.getErrorCode().getValue()),\n+                                           \"Error querying queue\", e);\n+                }\n             }\n         }\n         return match;", "filename": "client/src/main/java/org/apache/qpid/client/AMQSession_0_10.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a2d06a1ff3aeda4898d42b27d3a3a480f2183c42", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/4cda641d29444858caab75da5c9100395c3a2a27", "message": "QPID-7000 : Avoid NPE when passed a null vhost name", "bug_id": "qpid-jms-amqp-0-x_8", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a2d06a1ff3aeda4898d42b27d3a3a480f2183c42/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a2d06a1ff3aeda4898d42b27d3a3a480f2183c42/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java", "sha": "afefb5dcf2f19f1c34b31b6c7f9834417768b5b2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java?ref=a2d06a1ff3aeda4898d42b27d3a3a480f2183c42", "patch": "@@ -1355,7 +1355,7 @@ public void removeAddressSpace(final String name)\n         @Override\n         public NamedAddressSpace getAddressSpace(final String name)\n         {\n-            return _systemAddressSpaces.get(name);\n+            return name == null ? null : _systemAddressSpaces.get(name);\n         }\n \n         @Override", "filename": "broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/922c04383a45ff1baaf77b0b63117320183defda", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/d54c6827a41b89da467eddb72553327d7f5bb2ba", "message": "QPID-7642 : add null check on consumer arguments to prevent NPEs", "bug_id": "qpid-jms-amqp-0-x_9", "file": [{"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/922c04383a45ff1baaf77b0b63117320183defda/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/922c04383a45ff1baaf77b0b63117320183defda/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java", "sha": "bcf295ce3413719d8deec4039b6492d6f3d1d8ec", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java?ref=922c04383a45ff1baaf77b0b63117320183defda", "patch": "@@ -137,7 +137,8 @@ public ConsumerTarget_0_10(ServerSession session,\n \n     private static boolean isPullOnly(Map<String, Object> arguments)\n     {\n-        return arguments.containsKey(PULL_ONLY_CONSUMER)\n+        return arguments != null\n+               && arguments.containsKey(PULL_ONLY_CONSUMER)\n                && Boolean.valueOf(String.valueOf(arguments.get(PULL_ONLY_CONSUMER)));\n     }\n ", "filename": "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ConsumerTarget_0_10.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/922c04383a45ff1baaf77b0b63117320183defda/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ConsumerTarget_0_8.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/922c04383a45ff1baaf77b0b63117320183defda/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ConsumerTarget_0_8.java", "sha": "f91f23518708b09c5e4bf822b9939352655d9017", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ConsumerTarget_0_8.java?ref=922c04383a45ff1baaf77b0b63117320183defda", "patch": "@@ -346,7 +346,8 @@ public ConsumerTarget_0_8(AMQChannel channel,\n \n     private static boolean isPullOnly(FieldTable arguments)\n     {\n-        return arguments.containsKey(PULL_ONLY_CONSUMER)\n+        return arguments != null\n+               && arguments.containsKey(PULL_ONLY_CONSUMER)\n                && Boolean.valueOf(String.valueOf(arguments.get(PULL_ONLY_CONSUMER)));\n     }\n ", "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/ConsumerTarget_0_8.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/d70c314bac304c5467dca35ee9369ffad61bf280", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/b71d0477534d8d68f4dff2d22acd3119ce8d7bf5", "message": "QPID-7202 : Fix NPE when writing heartbeat frames", "bug_id": "qpid-jms-amqp-0-x_10", "file": [{"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/d70c314bac304c5467dca35ee9369ffad61bf280/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/codec/FrameWriter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/d70c314bac304c5467dca35ee9369ffad61bf280/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/codec/FrameWriter.java", "sha": "f2ff4a095a12294c8b7bb8ecb94d90daa4f55d79", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/codec/FrameWriter.java?ref=d70c314bac304c5467dca35ee9369ffad61bf280", "patch": "@@ -63,7 +63,10 @@ public FrameWriter(final ValueWriter.Registry registry, final ByteBufferSender s\n         body.put((byte)2); // DOFF\n         body.put(frame.getFrameType()); // AMQP Frame Type\n         body.putShort(frame.getChannel());\n-        typeWriter.writeToBuffer(body);\n+        if(typeWriter != null)\n+        {\n+            typeWriter.writeToBuffer(body);\n+        }\n         body.flip();\n \n         _sender.send(body);", "filename": "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/codec/FrameWriter.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/64b59cf1286d165172289c707e5cab71f4e510c9", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/69a6221a988bbee7d35d19867c6511ce0897e6f9", "message": "QPID-7546: [Java Broker] Prevent messages without header section causing a NPE within Message_1_0#getExpiration", "bug_id": "qpid-jms-amqp-0-x_11", "file": [{"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/64b59cf1286d165172289c707e5cab71f4e510c9/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Message_1_0.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/64b59cf1286d165172289c707e5cab71f4e510c9/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Message_1_0.java", "sha": "4ab391fee430f55bf735ac98d7da389c85126cd7", "changes": 10, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Message_1_0.java?ref=64b59cf1286d165172289c707e5cab71f4e510c9", "patch": "@@ -81,16 +81,10 @@ private MessageMetaData_1_0 getMessageMetaData()\n         return getMessageMetaData().getMessageHeader();\n     }\n \n+    @Override\n     public long getExpiration()\n     {\n-        final MessageMetaData_1_0 metaData = getMessageMetaData();\n-        final MessageMetaData_1_0.MessageHeader_1_0 messageHeader = metaData.getMessageHeader();\n-        long expiration = messageHeader.getExpiration();\n-        if(expiration == 0L && metaData.getHeaderSection().getTtl() != null)\n-        {\n-            expiration = _arrivalTime + metaData.getHeaderSection().getTtl().longValue();\n-        }\n-        return expiration;\n+        return getMessageMetaData().getMessageHeader().getExpiration();\n     }\n \n     public long getArrivalTime()", "filename": "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Message_1_0.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/b65506a4731ebd1b5b721cff3fc6a97f6da75849", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/7e6843e2e1967bfdba477a683353dbf6287d6291", "message": "QPID-7323: [Java Client] Guard against an odd class causing a NPE", "bug_id": "qpid-jms-amqp-0-x_12", "file": [{"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b65506a4731ebd1b5b721cff3fc6a97f6da75849/client/src/main/java/org/apache/qpid/client/AMQConnection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b65506a4731ebd1b5b721cff3fc6a97f6da75849/client/src/main/java/org/apache/qpid/client/AMQConnection.java", "sha": "ab897d51bbec7e7fa901baf8638ecb3c2eb1d9a5", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQConnection.java?ref=b65506a4731ebd1b5b721cff3fc6a97f6da75849", "patch": "@@ -1983,11 +1983,16 @@ public boolean isTrusted(Class<?> clazz)\n             return true;\n         }\n \n-        while (clazz.isAnonymousClass() || clazz.isLocalClass())\n+        while (clazz != null && (clazz.isAnonymousClass() || clazz.isLocalClass()))\n         {\n             clazz = clazz.getEnclosingClass();\n         }\n \n+        if (clazz == null || clazz.getCanonicalName() == null)\n+        {\n+            return false;\n+        }\n+\n         String className = clazz.getCanonicalName();\n \n         for (String blackListedClassHierarchy : _blackListedClassHierarchies)", "filename": "client/src/main/java/org/apache/qpid/client/AMQConnection.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/29d2fbadeaf611f76cb009044772e8fa4144fb35", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/2b9b50e02a188dfbf3525c83852f1a20833a0cfb", "message": "QPID-6028: [Java Broker] ManagementNodeConsumer must take a message reference whilst it retains responsibility for the message - fixes NPE exposed by r1776037", "bug_id": "qpid-jms-amqp-0-x_13", "file": [{"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/29d2fbadeaf611f76cb009044772e8fa4144fb35/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/29d2fbadeaf611f76cb009044772e8fa4144fb35/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java", "sha": "a567235b947950dae25570a8055455972200b114", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java?ref=29d2fbadeaf611f76cb009044772e8fa4144fb35", "patch": "@@ -89,7 +89,9 @@ public MessageContainer pullMessage()\n             if (!_target.isSuspended() && _target.allocateCredit(managementResponse.getMessage()))\n             {\n                 _queue.remove(0);\n-                return new MessageContainer(managementResponse, null, false);\n+                return new MessageContainer(managementResponse,\n+                                            managementResponse.getMessageReference(),\n+                                            false);\n             }\n         }\n         return null;\n@@ -197,7 +199,7 @@ ManagementNode getManagementNode()\n         return _managementNode;\n     }\n \n-    void send(ManagementResponse responseEntry)\n+    private void send(ManagementResponse responseEntry)\n     {\n         _queue.add(responseEntry);\n         _target.notifyWork();", "filename": "broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementNodeConsumer.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/29d2fbadeaf611f76cb009044772e8fa4144fb35/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementResponse.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/29d2fbadeaf611f76cb009044772e8fa4144fb35/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementResponse.java", "sha": "bc1bd81be42bb0167d2cffea3dd5e1ad13aaa68f", "changes": 11, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementResponse.java?ref=29d2fbadeaf611f76cb009044772e8fa4144fb35", "patch": "@@ -24,6 +24,7 @@\n import org.apache.qpid.server.message.InstanceProperties;\n import org.apache.qpid.server.message.MessageInstance;\n import org.apache.qpid.server.message.MessageInstanceConsumer;\n+import org.apache.qpid.server.message.MessageReference;\n import org.apache.qpid.server.message.ServerMessage;\n import org.apache.qpid.server.message.internal.InternalMessage;\n import org.apache.qpid.server.store.MessageEnqueueRecord;\n@@ -35,16 +36,19 @@\n class ManagementResponse implements MessageInstance\n {\n     private final ManagementNodeConsumer _consumer;\n+    private final MessageReference _messageReference;\n     private int _deliveryCount;\n     private boolean _isRedelivered;\n     private boolean _isDelivered;\n     private boolean _isDeleted;\n     private InternalMessage _message;\n \n-    ManagementResponse(final ManagementNodeConsumer consumer, final InternalMessage message)\n+    ManagementResponse(final ManagementNodeConsumer consumer,\n+                       final InternalMessage message)\n     {\n         _consumer = consumer;\n         _message = message;\n+        _messageReference = _message.newReference(consumer);\n     }\n \n     @Override\n@@ -253,4 +257,9 @@ public TransactionLogResource getOwningResource()\n     {\n         return _consumer.getManagementNode();\n     }\n+\n+    public MessageReference getMessageReference()\n+    {\n+        return _messageReference;\n+    }\n }", "filename": "broker-plugins/management-amqp/src/main/java/org/apache/qpid/server/management/amqp/ManagementResponse.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/f56f17e16cb8903971dd7930b7a05ae6b09905de", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/0c7a23c7621a4982b66b125ef7c5fb0c9a80a301", "message": "QPID-5569 : NPE on getStringProperty(\"JMSXUserId\")", "bug_id": "qpid-jms-amqp-0-x_14", "file": [{"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f56f17e16cb8903971dd7930b7a05ae6b09905de/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f56f17e16cb8903971dd7930b7a05ae6b09905de/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java", "sha": "ad9a37479e15b717719b406e883f474755c5e84f", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java?ref=f56f17e16cb8903971dd7930b7a05ae6b09905de", "patch": "@@ -732,7 +732,8 @@ public String getStringProperty(String propertyName) throws JMSException\n     {\n         if (propertyName.equals(CustomJMSXProperty.JMSXUserID.toString()))\n         {\n-            return new String(_messageProps.getUserId());\n+            final byte[] userIdBytes = _messageProps.getUserId();\n+            return userIdBytes == null ? null : new String(userIdBytes);\n         }\n         else if (QpidMessageProperties.AMQP_0_10_APP_ID.equals(propertyName) &&\n                 _messageProps.getAppId() != null)", "filename": "client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/60ef745706712a0599c819542346ebdf05dc66db", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/94a1ecc0f9282da7b2a186d2146a9acb8e4425cc", "message": "Prevent NPE in QueueEntryImpl.debugIdentity", "bug_id": "qpid-jms-amqp-0-x_15", "file": [{"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/60ef745706712a0599c819542346ebdf05dc66db/broker/src/main/java/org/apache/qpid/server/queue/QueueEntryImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/60ef745706712a0599c819542346ebdf05dc66db/broker/src/main/java/org/apache/qpid/server/queue/QueueEntryImpl.java", "sha": "01b249b847a2fec0fa1d33f610483d726168ba77", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/QueueEntryImpl.java?ref=60ef745706712a0599c819542346ebdf05dc66db", "patch": "@@ -177,7 +177,15 @@ public void release()\n \n     public String debugIdentity()\n     {\n-        return getMessage().debugIdentity();\n+        AMQMessage message = getMessage();\n+        if (message == null)\n+        {\n+            return \"null\";\n+        }\n+        else\n+        {\n+            return message.debugIdentity();\n+        }\n     }\n \n ", "filename": "broker/src/main/java/org/apache/qpid/server/queue/QueueEntryImpl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/d4065ad26821564d0a6677f4026da0b05f59bcad", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/066b7e67d512b13d1d9dde4eb36aa6602a371099", "message": "QPID-6914: Prevent NPE within AESKeyFileEncrypter when a relative path is used without parent", "bug_id": "qpid-jms-amqp-0-x_16", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/d4065ad26821564d0a6677f4026da0b05f59bcad/broker-core/src/main/java/org/apache/qpid/server/security/encryption/AESKeyFileEncrypterFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/d4065ad26821564d0a6677f4026da0b05f59bcad/broker-core/src/main/java/org/apache/qpid/server/security/encryption/AESKeyFileEncrypterFactory.java", "sha": "ec14de40a22e042a25ce6f945897ee9d5aba21bb", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/security/encryption/AESKeyFileEncrypterFactory.java?ref=d4065ad26821564d0a6677f4026da0b05f59bcad", "patch": "@@ -297,7 +297,7 @@ else if(isAclFileSystem(file))\n \n     private void createEmptyKeyFile(File file) throws IOException\n     {\n-        final Path parentFilePath = file.getParentFile().toPath();\n+        final Path parentFilePath = file.getAbsoluteFile().getParentFile().toPath();\n \n         if(isPosixFileSystem(file)) {\n             Set<PosixFilePermission> ownerOnly = EnumSet.of(PosixFilePermission.OWNER_READ,", "filename": "broker-core/src/main/java/org/apache/qpid/server/security/encryption/AESKeyFileEncrypterFactory.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/299eebb3a737852d00f1c7f9238d7303fc6c72f4", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/8795208cb11b8d9d6e78e66436122b29553a5890", "message": "QPID-6873: Fix NPE in SiteSpecificTrustStoreImpl when certificate cannot be retrieved from given site", "bug_id": "qpid-jms-amqp-0-x_17", "file": [{"additions": 23, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/299eebb3a737852d00f1c7f9238d7303fc6c72f4/broker-core/src/main/java/org/apache/qpid/server/security/SiteSpecificTrustStoreImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/299eebb3a737852d00f1c7f9238d7303fc6c72f4/broker-core/src/main/java/org/apache/qpid/server/security/SiteSpecificTrustStoreImpl.java", "sha": "fe25e214f052aa8e2f5294e22536f54f606b886a", "changes": 41, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/security/SiteSpecificTrustStoreImpl.java?ref=299eebb3a737852d00f1c7f9238d7303fc6c72f4", "patch": "@@ -118,14 +118,18 @@ protected void postResolve()\n     @Override\n     public String getCertificate()\n     {\n-        try\n-        {\n-            return DatatypeConverter.printBase64Binary(_x509Certificate.getEncoded());\n-        }\n-        catch (CertificateEncodingException e)\n+        if (_x509Certificate != null)\n         {\n-            throw new IllegalConfigurationException(\"Unable to encode certificate\");\n+            try\n+            {\n+                return DatatypeConverter.printBase64Binary(_x509Certificate.getEncoded());\n+            }\n+            catch (CertificateEncodingException e)\n+            {\n+                throw new IllegalConfigurationException(\"Unable to encode certificate\");\n+            }\n         }\n+        return null;\n     }\n \n     @Override\n@@ -217,21 +221,22 @@ private void downloadCertificate()\n             SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n             sslContext.init(new KeyManager[0], new TrustManager[] {new AlwaysTrustManager()}, null);\n \n-            SSLSocket socket = (SSLSocket) sslContext.getSocketFactory().createSocket(url.getHost(), url.getPort());\n-            socket.startHandshake();\n-            final Certificate[] certificateChain =\n-                    socket.getSession().getPeerCertificates();\n-            if(certificateChain != null && certificateChain.length != 0 && certificateChain[0] instanceof X509Certificate)\n+            try(SSLSocket socket = (SSLSocket) sslContext.getSocketFactory().createSocket(url.getHost(), url.getPort()))\n             {\n-                _x509Certificate = (X509Certificate) certificateChain[0];\n+                socket.startHandshake();\n+                final Certificate[] certificateChain = socket.getSession().getPeerCertificates();\n+                if (certificateChain != null && certificateChain.length != 0 && certificateChain[0] instanceof X509Certificate)\n+                {\n+                    _x509Certificate = (X509Certificate) certificateChain[0];\n \n-                final String certificate = getCertificate();\n-                attributeSet(CERTIFICATE, certificate, certificate);\n+                    final String certificate = getCertificate();\n+                    attributeSet(CERTIFICATE, certificate, certificate);\n \n-            }\n-            else\n-            {\n-                LOGGER.info(\"No valid certificates available from \" + getSiteUrl());\n+                }\n+                else\n+                {\n+                    LOGGER.info(\"No valid certificates available from \" + getSiteUrl());\n+                }\n             }\n \n         }", "filename": "broker-core/src/main/java/org/apache/qpid/server/security/SiteSpecificTrustStoreImpl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/81ab4c894be47408ab89aaba4424fa64312c33c0", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/c48b616ac64a360287c803cd4b0b2e7d641a97e1", "message": "QPID-2002 : Fix for BrokerLoggingTest NPE.", "bug_id": "qpid-jms-amqp-0-x_18", "file": [{"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/81ab4c894be47408ab89aaba4424fa64312c33c0/systests/src/main/java/org/apache/qpid/server/logging/BrokerLoggingTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/81ab4c894be47408ab89aaba4424fa64312c33c0/systests/src/main/java/org/apache/qpid/server/logging/BrokerLoggingTest.java", "sha": "d417349c7f2c53de2d6fb75132d8b26c59990688", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/logging/BrokerLoggingTest.java?ref=81ab4c894be47408ab89aaba4424fa64312c33c0", "patch": "@@ -49,6 +49,9 @@\n {\n     public void setUp() throws Exception\n     {\n+        // We either do this here or have a null check in tearDown.\n+        // As when this test is run against profiles other than java it will NPE\n+        _monitor = new LogMonitor(_outputFile);\n         //We explicitly do not call super.setUp as starting up the broker is\n         //part of the test case.\n     }", "filename": "systests/src/main/java/org/apache/qpid/server/logging/BrokerLoggingTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ef66c4b3500b11afeaed6a81ee43661e8a84f34a", "message": "added test for exception listener; fixed NPE", "bug_id": "qpid-jms-amqp-0-x_19", "file": [{"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java", "sha": "bf1ed494924fc111edc5ef39e8919e939869b77e", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java?ref=93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a", "patch": "@@ -148,11 +148,15 @@ public void onClosed(ErrorCode errorCode, String reason, Throwable t)\n         {\n             _logger.debug(\"Received a connection close from the broker: Error code : \" + errorCode.getCode());\n         }\n-        JMSException ex = new JMSException(reason,String.valueOf(errorCode.getCode()));\n-        if (t != null)\n+        if (_conn._exceptionListener != null)\n         {\n-            ex.initCause(t);\n+            JMSException ex = new JMSException(reason,String.valueOf(errorCode.getCode()));\n+            if (t != null)\n+            {\n+                ex.initCause(t);\n+            }\n+\n+            _conn._exceptionListener.onException(ex);\n         }\n-        _conn._exceptionListener.onException(ex);\n     }\n }", "filename": "client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java"}, {"additions": 62, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/client/src/test/java/org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/client/src/test/java/org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java", "sha": "20461415d1c05853c1638a01b64f85263a24cc8a", "changes": 62, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java?ref=93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a", "patch": "@@ -0,0 +1,62 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.test.unit.client.connection;\n+\n+import org.apache.qpid.testutil.QpidTestCase;\n+\n+import org.apache.qpid.util.concurrent.Condition;\n+\n+import javax.jms.Connection;\n+import javax.jms.ExceptionListener;\n+import javax.jms.JMSException;\n+\n+/**\n+ * ExceptionListenerTest\n+ *\n+ */\n+\n+public class ExceptionListenerTest extends QpidTestCase\n+{\n+\n+    public void testBrokerDeath() throws Exception\n+    {\n+        Connection conn = getConnection(\"guest\", \"guest\");\n+\n+        conn.start();\n+\n+        final Condition fired = new Condition();\n+        conn.setExceptionListener(new ExceptionListener()\n+        {\n+            public void onException(JMSException e)\n+            {\n+                fired.set();\n+            }\n+        });\n+\n+        killBroker();\n+\n+        if (!fired.get(3000))\n+        {\n+            fail(\"exception listener was not fired\");\n+        }\n+    }\n+\n+}", "filename": "client/src/test/java/org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/client/src/test/java/org/apache/qpid/testutil/QpidTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/client/src/test/java/org/apache/qpid/testutil/QpidTestCase.java", "sha": "0ccb50dda3abfd0279656b7eda1e679ad86f6e81", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/testutil/QpidTestCase.java?ref=93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a", "patch": "@@ -122,7 +122,7 @@ public void killBroker()\n             _brokerProcess.destroy();\n             _brokerProcess = null;\n         }\n-        else   if ( ! _shel.equals(EXT_BROKER))\n+        else   if ( _shel.equals(BROKER_VM))\n         {\n             TransportConnection.killAllVMBrokers();\n         }", "filename": "client/src/test/java/org/apache/qpid/testutil/QpidTestCase.java"}, {"additions": 50, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/common/src/main/java/org/apache/qpid/util/concurrent/Condition.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/common/src/main/java/org/apache/qpid/util/concurrent/Condition.java", "sha": "bbd1722677491d96478269021afd9cf8244b8a86", "changes": 50, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/util/concurrent/Condition.java?ref=93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a", "patch": "@@ -0,0 +1,50 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.util.concurrent;\n+\n+\n+/**\n+ * Condition\n+ *\n+ */\n+\n+public class Condition\n+{\n+\n+    private boolean value = false;\n+\n+    public synchronized void set()\n+    {\n+        value = true;\n+        notifyAll();\n+    }\n+\n+    public synchronized boolean get(long timeout) throws InterruptedException\n+    {\n+        if (!value)\n+        {\n+            wait(timeout);\n+        }\n+\n+        return value;\n+    }\n+\n+}", "filename": "common/src/main/java/org/apache/qpid/util/concurrent/Condition.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/common/src/test/java/org/apache/qpidity/transport/ConnectionTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a/common/src/test/java/org/apache/qpidity/transport/ConnectionTest.java", "sha": "55d53ebaae07ce2dace8d9e1dda60a5fb88ee7aa", "changes": 23, "status": "modified", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/test/java/org/apache/qpidity/transport/ConnectionTest.java?ref=93b97c4f1285d44f5b534d56811cfcc4fcdfcd7a", "patch": "@@ -22,6 +22,8 @@\n \n import org.apache.mina.util.AvailablePortFinder;\n \n+import org.apache.qpid.util.concurrent.Condition;\n+\n import org.apache.qpidity.transport.network.mina.MinaHandler;\n import org.apache.qpidity.transport.util.Logger;\n \n@@ -63,27 +65,6 @@ public void closed() {}\n         MinaHandler.accept(\"0.0.0.0\", port, server);\n     }\n \n-    private class Condition\n-    {\n-        private boolean value = false;\n-\n-        public synchronized void set()\n-        {\n-            value = true;\n-            notifyAll();\n-        }\n-\n-        public synchronized boolean get(long timeout) throws InterruptedException\n-        {\n-            if (!value)\n-            {\n-                wait(timeout);\n-            }\n-\n-            return value;\n-        }\n-    }\n-\n     private Connection connect(final Condition closed)\n     {\n         Connection conn = MinaHandler.connect(\"0.0.0.0\", port, new ConnectionDelegate()", "filename": "common/src/test/java/org/apache/qpidity/transport/ConnectionTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a2f644ec25319b6c4736c408a58e120937dcffe7", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a6299b644733aedc951b342697f5b17f9158a0b6", "message": "QPID-6687: Fix NPE on stopping logging for Broker and VirtualHost file loggers in ERRORED state", "bug_id": "qpid-jms-amqp-0-x_20", "file": [{"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a2f644ec25319b6c4736c408a58e120937dcffe7/broker-core/src/main/java/org/apache/qpid/server/logging/BrokerFileLoggerImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a2f644ec25319b6c4736c408a58e120937dcffe7/broker-core/src/main/java/org/apache/qpid/server/logging/BrokerFileLoggerImpl.java", "sha": "36329f15c88812452fe63a7a7ce3c66cfe27cbf4", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/logging/BrokerFileLoggerImpl.java?ref=a2f644ec25319b6c4736c408a58e120937dcffe7", "patch": "@@ -192,7 +192,10 @@ public Content getAllFiles()\n     public void stopLogging()\n     {\n         super.stopLogging();\n-        _rolledPolicyExecutor.shutdown();\n+        if (_rolledPolicyExecutor != null)\n+        {\n+            _rolledPolicyExecutor.shutdown();\n+        }\n     }\n \n     @Override", "filename": "broker-core/src/main/java/org/apache/qpid/server/logging/BrokerFileLoggerImpl.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a2f644ec25319b6c4736c408a58e120937dcffe7/broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLoggerImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a2f644ec25319b6c4736c408a58e120937dcffe7/broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLoggerImpl.java", "sha": "f5eb2925275365b2476426b5e5b1d20ac26d821c", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLoggerImpl.java?ref=a2f644ec25319b6c4736c408a58e120937dcffe7", "patch": "@@ -182,7 +182,10 @@ public Content getAllFiles()\n     public void stopLogging()\n     {\n         super.stopLogging();\n-        _rolledPolicyExecutor.shutdown();\n+        if (_rolledPolicyExecutor != null)\n+        {\n+            _rolledPolicyExecutor.shutdown();\n+        }\n     }\n \n     @Override", "filename": "broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLoggerImpl.java"}, {"additions": 16, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a2f644ec25319b6c4736c408a58e120937dcffe7/broker-core/src/test/java/org/apache/qpid/server/logging/BrokerFileLoggerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a2f644ec25319b6c4736c408a58e120937dcffe7/broker-core/src/test/java/org/apache/qpid/server/logging/BrokerFileLoggerTest.java", "sha": "3cab982e42e8aef9d6118739e8858052fbd5986d", "changes": 21, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/logging/BrokerFileLoggerTest.java?ref=a2f644ec25319b6c4736c408a58e120937dcffe7", "patch": "@@ -25,8 +25,8 @@\n import static org.mockito.Mockito.when;\n \n import java.io.File;\n-import java.util.Collection;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.qpid.server.configuration.updater.TaskExecutor;\n@@ -48,6 +48,7 @@\n     private File _baseFolder;\n     private File _logFile;\n     private Broker _broker;\n+    private BrokerFileLogger<?> _logger;\n \n     @Override\n     public void setUp() throws Exception\n@@ -87,7 +88,11 @@ public void tearDown() throws Exception\n     {\n         try\n         {\n-            _broker.close();\n+            if (_logger != null)\n+            {\n+                _logger.close();\n+                _logger.stopLogging();\n+            }\n             _taskExecutor.stopImmediately();\n             if (_baseFolder != null && _baseFolder.exists())\n             {\n@@ -101,6 +106,14 @@ public void tearDown() throws Exception\n     }\n \n     public void testGetLogFilesOnResolutionErrors()\n+    {\n+        _logger = createLoggerInErroredState();\n+\n+        List<LogFileDetails> logFileDetails = _logger.getLogFiles();\n+        assertTrue(\"File details should be empty\", logFileDetails.isEmpty());\n+    }\n+\n+    private BrokerFileLogger createLoggerInErroredState()\n     {\n         Map<String, Object> attributes = new HashMap<>();\n         attributes.put(BrokerLogger.NAME, getTestName());\n@@ -112,9 +125,7 @@ public void testGetLogFilesOnResolutionErrors()\n         logger.open();\n \n         assertEquals(\"Unexpected state\", State.ERRORED, logger.getState());\n-\n-        Collection<LogFileDetails> logFileDetails = logger.getLogFiles();\n-        assertTrue(\"File details should be empty\", logFileDetails.isEmpty());\n+        return logger;\n     }\n \n }", "filename": "broker-core/src/test/java/org/apache/qpid/server/logging/BrokerFileLoggerTest.java"}, {"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a2f644ec25319b6c4736c408a58e120937dcffe7/broker-core/src/test/java/org/apache/qpid/server/logging/VirtualHostLoggerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a2f644ec25319b6c4736c408a58e120937dcffe7/broker-core/src/test/java/org/apache/qpid/server/logging/VirtualHostLoggerTest.java", "sha": "edd751ca4f8622ef4c30205d570a6256758941d3", "changes": 18, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/logging/VirtualHostLoggerTest.java?ref=a2f644ec25319b6c4736c408a58e120937dcffe7", "patch": "@@ -204,6 +204,20 @@ public void testGetLogFiles()\n     }\n \n     public void testGetLogFilesOnResolutionErrors()\n+    {\n+        VirtualHostFileLogger logger = createErrorredLogger();\n+\n+        Collection<LogFileDetails> logFileDetails = logger.getLogFiles();\n+        assertTrue(\"File details should be empty\", logFileDetails.isEmpty());\n+    }\n+\n+    public void testStopLoggingLoggerInErroredState()\n+    {\n+        VirtualHostFileLogger logger = createErrorredLogger();\n+        logger.stopLogging();\n+    }\n+\n+    private VirtualHostFileLogger createErrorredLogger()\n     {\n         Map<String, Object> attributes = new HashMap<>();\n         attributes.put(VirtualHostLogger.NAME, getTestName());\n@@ -215,9 +229,7 @@ public void testGetLogFilesOnResolutionErrors()\n         logger.open();\n \n         assertEquals(\"Unexpected state\", State.ERRORED, logger.getState());\n-\n-        Collection<LogFileDetails> logFileDetails = logger.getLogFiles();\n-        assertTrue(\"File details should be empty\", logFileDetails.isEmpty());\n+        return logger;\n     }\n \n     private VirtualHostLogger createVirtualHostLogger()", "filename": "broker-core/src/test/java/org/apache/qpid/server/logging/VirtualHostLoggerTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/c6888830df344eb707696468c14532c12f763e75", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/5ad6ffa51768c806665dd48102f4ceee2804e801", "message": "QPID-7077: [Java Client] Make access to _failoverLatch thread safe\n\n* Also added logging to better understand the sporadic NPE.", "bug_id": "qpid-jms-amqp-0-x_21", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c6888830df344eb707696468c14532c12f763e75/client/src/main/java/org/apache/qpid/client/AMQConnection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c6888830df344eb707696468c14532c12f763e75/client/src/main/java/org/apache/qpid/client/AMQConnection.java", "sha": "7b0de011cd7e7aa5477f81be59ee2644119f4113", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQConnection.java?ref=c6888830df344eb707696468c14532c12f763e75", "patch": "@@ -124,7 +124,7 @@\n      * the handler deals with this. It also deals with the initial dispatch of any protocol frames to their appropriate\n      * handler.\n      */\n-    private AMQProtocolHandler _protocolHandler;\n+    private final AMQProtocolHandler _protocolHandler;\n \n     /** Maps from session id (Integer) to AMQSession instance */\n     private final ChannelToSessionMap _sessions = new ChannelToSessionMap();", "filename": "client/src/main/java/org/apache/qpid/client/AMQConnection.java"}, {"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c6888830df344eb707696468c14532c12f763e75/client/src/main/java/org/apache/qpid/client/AMQProtocolHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c6888830df344eb707696468c14532c12f763e75/client/src/main/java/org/apache/qpid/client/AMQProtocolHandler.java", "sha": "8f33374c34965bc43073dcffe9d9a566ea5a46b1", "changes": 13, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQProtocolHandler.java?ref=c6888830df344eb707696468c14532c12f763e75", "patch": "@@ -109,16 +109,16 @@\n     /** Used to provide a condition to wait upon for operations that are required to wait for failover to complete. */\n     private CountDownLatch _failoverLatch;\n \n+    /** Object to lock on when changing the _failoverLatch  */\n+    private final Object _failoverLatchChange = new Object();\n+\n     /** The last failover exception that occurred */\n     private FailoverException _lastFailoverException;\n \n     /** Defines the default timeout to use for synchronous protocol commands. */\n     private final long DEFAULT_SYNC_TIMEOUT = Long.getLong(ClientProperties.QPID_SYNC_OP_TIMEOUT,\n                                                            Long.getLong(AMQJ_DEFAULT_SYNCWRITE_TIMEOUT,\n                                                                         ClientProperties.DEFAULT_SYNC_OPERATION_TIMEOUT));\n-\n-    /** Object to lock on when changing the latch */\n-    private Object _failoverLatchChange = new Object();\n     private ClientDecoder _decoder;\n \n     private ProtocolVersion _suggestedProtocolVersion;\n@@ -744,13 +744,18 @@ public String generateQueueName()\n \n     public CountDownLatch getFailoverLatch()\n     {\n-        return _failoverLatch;\n+        synchronized (_failoverLatchChange)\n+        {\n+            _logger.debug(\"Failover latch retrieved : {}\", _failoverLatch);\n+            return _failoverLatch;\n+        }\n     }\n \n     public void setFailoverLatch(CountDownLatch failoverLatch)\n     {\n         synchronized (_failoverLatchChange)\n         {\n+            _logger.debug(\"Failover latch set : {}\", failoverLatch);\n             _failoverLatch = failoverLatch;\n         }\n     }", "filename": "client/src/main/java/org/apache/qpid/client/AMQProtocolHandler.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/5f3924120b3abd515c97f77d2f16416ff0fa73c5", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ce358d4c5dc16a82042bb869bf59939e874f043f", "message": "QPID-3993 : NPE on continuation transfers with no deliveryId", "bug_id": "qpid-jms-amqp-0-x_22", "file": [{"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/5f3924120b3abd515c97f77d2f16416ff0fa73c5/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/ReceivingLinkEndpoint.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/5f3924120b3abd515c97f77d2f16416ff0fa73c5/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/ReceivingLinkEndpoint.java", "sha": "cf86fc2471d55258aa2afd6561debdfe9b50d3e1", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/ReceivingLinkEndpoint.java?ref=5f3924120b3abd515c97f77d2f16416ff0fa73c5", "patch": "@@ -32,6 +32,8 @@\n {\r\n \r\n \r\n+    private UnsignedInteger _lastDeliveryId;\r\n+\r\n     private static class TransientState\r\n     {\r\n \r\n@@ -435,4 +437,16 @@ public UnsignedInteger getDrainLimit()\n     {\r\n         return _drainLimit;\r\n     }\r\n+\r\n+    UnsignedInteger getLastDeliveryId()\r\n+    {\r\n+        return _lastDeliveryId;\r\n+    }\r\n+\r\n+    void setLastDeliveryId(UnsignedInteger lastDeliveryId)\r\n+    {\r\n+        _lastDeliveryId = lastDeliveryId;\r\n+    }\r\n+\r\n+\r\n }\r", "filename": "amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/ReceivingLinkEndpoint.java"}, {"additions": 20, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/5f3924120b3abd515c97f77d2f16416ff0fa73c5/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/5f3924120b3abd515c97f77d2f16416ff0fa73c5/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java", "sha": "17f90fef59403611b4c248e248a606d74b72280b", "changes": 24, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java?ref=5f3924120b3abd515c97f77d2f16416ff0fa73c5", "patch": "@@ -321,21 +321,32 @@ public void receiveTransfer(final Transfer transfer)\n \r\n             }\r\n \r\n-            Delivery delivery = _incomingUnsettled.get(transfer.getDeliveryId());\r\n+            UnsignedInteger deliveryId = transfer.getDeliveryId();\r\n+            if(deliveryId == null)\r\n+            {\r\n+                deliveryId = ((ReceivingLinkEndpoint)endpoint).getLastDeliveryId();\r\n+            }\r\n+            \r\n+            Delivery delivery = _incomingUnsettled.get(deliveryId);\r\n             if(delivery == null)\r\n             {\r\n                 delivery = new Delivery(transfer, endpoint);\r\n-                _incomingUnsettled.put(transfer.getDeliveryId(),delivery);\r\n+                _incomingUnsettled.put(deliveryId,delivery);\r\n                 if(delivery.isSettled() || Boolean.TRUE.equals(transfer.getAborted()))\r\n                 {\r\n /*\r\n                     _availableIncomingCredit++;\r\n */\r\n                 }\r\n+                \r\n+                if(Boolean.TRUE.equals(transfer.getMore()))\r\n+                {\r\n+                    ((ReceivingLinkEndpoint)endpoint).setLastDeliveryId(transfer.getDeliveryId());\r\n+                }\r\n             }\r\n             else\r\n             {\r\n-                if(delivery.getDeliveryId().equals(transfer.getDeliveryId()))\r\n+                if(delivery.getDeliveryId().equals(deliveryId))\r\n                 {\r\n                     delivery.addTransfer(transfer);\r\n                     if(delivery.isSettled())\r\n@@ -350,6 +361,11 @@ else if(Boolean.TRUE.equals(transfer.getAborted()))\n                         _availableIncomingCredit += delivery.getTransfers().size();\r\n */\r\n                     }\r\n+\r\n+                    if(!Boolean.TRUE.equals(transfer.getMore()))\r\n+                    {\r\n+                        ((ReceivingLinkEndpoint)endpoint).setLastDeliveryId(null);\r\n+                    }\r\n                 }\r\n                 else\r\n                 {\r\n@@ -365,7 +381,7 @@ else if(Boolean.TRUE.equals(transfer.getAborted()))\n \r\n             if((delivery.isComplete() && delivery.isSettled() || Boolean.TRUE.equals(transfer.getAborted())))\r\n             {\r\n-                _incomingUnsettled.remove(transfer.getDeliveryId());\r\n+                _incomingUnsettled.remove(deliveryId);\r\n             }\r\n         }\r\n     }\r", "filename": "amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/65c72499e9c3cb779c2af9194b7a7042c36e3e4f", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/8a7e01b6418636d61f6cfd5b5c44294acab346f3", "message": "QPID-6889: [Java Broker] Prevent NPE during path validation when given name does not have a parent portion", "bug_id": "qpid-jms-amqp-0-x_23", "file": [{"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/65c72499e9c3cb779c2af9194b7a7042c36e3e4f/broker-core/src/main/java/org/apache/qpid/server/store/JsonFileConfigStore.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/65c72499e9c3cb779c2af9194b7a7042c36e3e4f/broker-core/src/main/java/org/apache/qpid/server/store/JsonFileConfigStore.java", "sha": "e341ec8934f23d12a8d3220e44d326824a452b33", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/store/JsonFileConfigStore.java?ref=65c72499e9c3cb779c2af9194b7a7042c36e3e4f", "patch": "@@ -150,6 +150,7 @@ private void setup(final FileBasedSettings configurationStoreSettings)\n             throw new StoreException(\"Cannot determine path for configuration storage\");\n         }\n         File fileFromSettings = new File(configurationStoreSettings.getStorePath());\n+        File parentFromSettings = fileFromSettings.getAbsoluteFile().getParentFile();\n         boolean isFile = fileFromSettings.exists() && fileFromSettings.isFile();\n         if(!isFile)\n         {\n@@ -165,14 +166,14 @@ else if(fileFromSettings.getName().endsWith(\".json\"))\n             {\n                 isFile = true;\n             }\n-            else if((new File(fileFromSettings.getParent())).isDirectory() && fileFromSettings.getName().contains(\".\"))\n+            else if(parentFromSettings.isDirectory() && fileFromSettings.getName().contains(\".\"))\n             {\n                 isFile = true;\n             }\n         }\n         if(isFile)\n         {\n-            _directoryName = fileFromSettings.getParent();\n+            _directoryName = parentFromSettings.getAbsolutePath();\n             _configFileName = fileFromSettings.getName();\n             _backupFileName = fileFromSettings.getName() + \".bak\";\n             _tempFileName = fileFromSettings.getName() + \".tmp\";", "filename": "broker-core/src/main/java/org/apache/qpid/server/store/JsonFileConfigStore.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/9191c2fbc1c5445f1a1a32fcea43017bc5cdce9e", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a2d1e294924f8dc029bf0cd7a77c5301add1c660", "message": "QPID-1803 : Fixed potential NPE in FileUtils.delete", "bug_id": "qpid-jms-amqp-0-x_24", "file": [{"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9191c2fbc1c5445f1a1a32fcea43017bc5cdce9e/common/src/main/java/org/apache/qpid/util/FileUtils.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9191c2fbc1c5445f1a1a32fcea43017bc5cdce9e/common/src/main/java/org/apache/qpid/util/FileUtils.java", "sha": "63222b50dbb3388a97f67b1b163e85fbd6eb831d", "changes": 12, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/util/FileUtils.java?ref=9191c2fbc1c5445f1a1a32fcea43017bc5cdce9e", "patch": "@@ -250,9 +250,17 @@ public static boolean delete(File file, boolean recursive)\n          {\n              if (recursive)\n              {\n-                 for (File subFile : file.listFiles())\n+                 File[] files = file.listFiles();\n+\n+                 // This can occur if the file is deleted outside the JVM\n+                 if (files == null)\n+                 {\n+                     return false;\n+                 }\n+\n+                 for (int i = 0; i < files.length; i++)\n                  {\n-                     success = delete(subFile, true) && success;\n+                     success = delete(files[i], true) && success;\n                  }\n \n                  return success && file.delete();", "filename": "common/src/main/java/org/apache/qpid/util/FileUtils.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/f8bae594286024dfad1c6f055dee4873642428c4", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/7f951f0a66eb1003da5529af20a3788507713f3f", "message": "QPID-1430: *ahem* better fix for NPE on connection close", "bug_id": "qpid-jms-amqp-0-x_25", "file": [{"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f8bae594286024dfad1c6f055dee4873642428c4/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f8bae594286024dfad1c6f055dee4873642428c4/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java", "sha": "30ea4dcf8d4794751721945ecc3a72672d3d9f63", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java?ref=f8bae594286024dfad1c6f055dee4873642428c4", "patch": "@@ -206,7 +206,12 @@ public void closed(Connection conn)\n         ConnectionException exc = exception;\n         exception = null;\n \n-        ConnectionClose close = (exc == null ? null : exc.getClose());\n+        if (exc == null)\n+        {\n+            return;\n+        }\n+\n+        ConnectionClose close = exc.getClose();\n         if (close == null)\n         {\n             try", "filename": "client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/05bcec0212ef15911f3132d336ac52aa0975364c", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/84ea0e51073d6fc4199f8d075c43e661eef53be9", "message": "QPID-1430: fixed an NPE on connection close", "bug_id": "qpid-jms-amqp-0-x_26", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/05bcec0212ef15911f3132d336ac52aa0975364c/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/05bcec0212ef15911f3132d336ac52aa0975364c/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java", "sha": "0539d2f23409028281adc4f3cf96348670502882", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java?ref=05bcec0212ef15911f3132d336ac52aa0975364c", "patch": "@@ -206,7 +206,7 @@ public void closed(Connection conn)\n         ConnectionException exc = exception;\n         exception = null;\n \n-        ConnectionClose close = exc.getClose();\n+        ConnectionClose close = (exc == null ? null : exc.getClose());\n         if (close == null)\n         {\n             try", "filename": "client/src/main/java/org/apache/qpid/client/AMQConnectionDelegate_0_10.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/90d820ff38fb09168a8b99f898244b06a47a59dd", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/44817ee322d82ab3e10872546eb2b13f60aaf9e2", "message": "QPID-1233: made getStringProperty(nonexistent) return null instead of NPE", "bug_id": "qpid-jms-amqp-0-x_27", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/90d820ff38fb09168a8b99f898244b06a47a59dd/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/90d820ff38fb09168a8b99f898244b06a47a59dd/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java", "sha": "e66ba433a93e81dac73b0af1d8ffa5ccba99084b", "changes": 9, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java?ref=90d820ff38fb09168a8b99f898244b06a47a59dd", "patch": "@@ -652,14 +652,7 @@ public String getStringProperty(String propertyName) throws JMSException\n             }\n             else if(o == null)\n             {\n-                if(propertyMap.containsKey(propertyName))\n-                {\n-                    return null;\n-                }\n-                else\n-                {\n-                    return String.valueOf(null);\n-                }\n+                return null;\n             }\n             else if(o.getClass().isArray())\n             {", "filename": "client/src/main/java/org/apache/qpid/client/message/AMQMessageDelegate_0_10.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/90d820ff38fb09168a8b99f898244b06a47a59dd/systests/src/main/java/org/apache/qpid/test/unit/basic/PropertyValueTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/90d820ff38fb09168a8b99f898244b06a47a59dd/systests/src/main/java/org/apache/qpid/test/unit/basic/PropertyValueTest.java", "sha": "48bd722aae77e6966c038fbe213d3cd9770b4a9a", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/unit/basic/PropertyValueTest.java?ref=90d820ff38fb09168a8b99f898244b06a47a59dd", "patch": "@@ -35,6 +35,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.jms.Connection;\n import javax.jms.Destination;\n import javax.jms.JMSException;\n import javax.jms.Message;\n@@ -90,6 +91,16 @@ private void init(AMQConnection connection, Destination destination) throws Exce\n         connection.start();\n     }\n \n+    public void testGetNonexistent() throws Exception\n+    {\n+        Connection conn = getConnection();\n+        Session ssn = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+        Message m = ssn.createTextMessage();\n+        String s = m.getStringProperty(\"nonexistent\");\n+        assertNull(s);\n+        conn.close();\n+    }\n+\n     public void testOnce()\n     {\n         runBatch(1);", "filename": "systests/src/main/java/org/apache/qpid/test/unit/basic/PropertyValueTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/d2520e0249c973c891bc0521e9274e1eee1d1fc7", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/1a74b5c417aa79cafc0e9fe38f5a701e1611eba7", "message": "QPID-5846: Fix NPE in org.apache.qpid.server.virtualhost.berkeleydb.BDBHAVirtualHostImpl.isCoalescingSync()", "bug_id": "qpid-jms-amqp-0-x_28", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/d2520e0249c973c891bc0521e9274e1eee1d1fc7/bdbstore/src/main/java/org/apache/qpid/server/virtualhost/berkeleydb/BDBHAVirtualHostImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/d2520e0249c973c891bc0521e9274e1eee1d1fc7/bdbstore/src/main/java/org/apache/qpid/server/virtualhost/berkeleydb/BDBHAVirtualHostImpl.java", "sha": "d28435b4846240cd8d4d6a5719d9b3c4e960eda2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/bdbstore/src/main/java/org/apache/qpid/server/virtualhost/berkeleydb/BDBHAVirtualHostImpl.java?ref=d2520e0249c973c891bc0521e9274e1eee1d1fc7", "patch": "@@ -88,7 +88,7 @@ public String getDurability()\n     @Override\n     public boolean isCoalescingSync()\n     {\n-        return _localTransactionSynchronizationPolicy.equals(SyncPolicy.SYNC.name());\n+        return SyncPolicy.SYNC.name().equals(_localTransactionSynchronizationPolicy);\n     }\n \n     @Override", "filename": "bdbstore/src/main/java/org/apache/qpid/server/virtualhost/berkeleydb/BDBHAVirtualHostImpl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/1a74b5c417aa79cafc0e9fe38f5a701e1611eba7", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ca8c5f012ea9d79c642161c13888ddec23a70dcc", "message": "QPID-5792: add null check to avoid NPE during Destination decoding\n\nApplied patch from Dejan Bosanac", "bug_id": "qpid-jms-amqp-0-x_29", "file": [{"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/1a74b5c417aa79cafc0e9fe38f5a701e1611eba7/amqp-1-0-client-jms/src/main/java/org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/1a74b5c417aa79cafc0e9fe38f5a701e1611eba7/amqp-1-0-client-jms/src/main/java/org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java", "sha": "940061906128cb5657b1b0ebc4bc187801b7c0bb", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/amqp-1-0-client-jms/src/main/java/org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java?ref=1a74b5c417aa79cafc0e9fe38f5a701e1611eba7", "patch": "@@ -1347,13 +1347,16 @@ static final String join(String sep, Iterable items)\n     {\n         StringBuilder result = new StringBuilder();\n \n-        for (Object o : items)\n+        if (items != null)\n         {\n-            if (result.length() > 0)\n+            for (Object o : items)\n             {\n-                result.append(sep);\n+                if (result.length() > 0)\n+                {\n+                    result.append(sep);\n+                }\n+                result.append(o.toString());\n             }\n-            result.append(o.toString());\n         }\n \n         return result.toString();", "filename": "amqp-1-0-client-jms/src/main/java/org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/cd3fafb84dd66c93f6bd48074b8ad2c73720be91", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/3364b3e2a3fc9db1f3b597f8995993a4e3262673", "message": "QPID-5784: [Java Broker] Prevent NPE possibility from BDB store\\'s coalescing committer on shutdown", "bug_id": "qpid-jms-amqp-0-x_30", "file": [{"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/cd3fafb84dd66c93f6bd48074b8ad2c73720be91/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/CoalescingCommiter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/cd3fafb84dd66c93f6bd48074b8ad2c73720be91/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/CoalescingCommiter.java", "sha": "c9341dce02c6324dd0b0cede8cc993fcf8b22594", "changes": 15, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/CoalescingCommiter.java?ref=cd3fafb84dd66c93f6bd48074b8ad2c73720be91", "patch": "@@ -24,6 +24,7 @@\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n+import com.sun.org.apache.xalan.internal.xsltc.runtime.BasisLibrary;\n import org.apache.log4j.Logger;\n import org.apache.qpid.server.store.StoreFuture;\n \n@@ -242,6 +243,10 @@ private void processJobs()\n                 for(int i = 0; i < size; i++)\n                 {\n                     BDBCommitFuture commit = _jobQueue.poll();\n+                    if (commit == null)\n+                    {\n+                        break;\n+                    }\n                     commit.complete();\n                 }\n \n@@ -255,6 +260,10 @@ private void processJobs()\n                     for(int i = 0; i < size; i++)\n                     {\n                         BDBCommitFuture commit = _jobQueue.poll();\n+                        if (commit == null)\n+                        {\n+                            break;\n+                        }\n                         commit.abort(e);\n                     }\n                 }\n@@ -302,10 +311,16 @@ public void close()\n             {\n                 _stopped.set(true);\n                 BDBCommitFuture commit = null;\n+                int abortedCommits = 0;\n                 while ((commit = _jobQueue.poll()) != null)\n                 {\n+                    abortedCommits++;\n                     commit.abort(e);\n                 }\n+                if (LOGGER.isDebugEnabled() && abortedCommits > 0)\n+                {\n+                    LOGGER.debug(abortedCommits + \" commit(s) were aborted during close.\");\n+                }\n                 _lock.notifyAll();\n             }\n         }", "filename": "bdbstore/src/main/java/org/apache/qpid/server/store/berkeleydb/CoalescingCommiter.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/97cb1b418bc7ae3630ec9a564bc2608c6d1dbac6", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/0d765ff8994ff533b6780b466819ff9f9a416d3e", "message": "QPID-5578 : make mocked queue return the correct model object to prevent NPEs", "bug_id": "qpid-jms-amqp-0-x_31", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/97cb1b418bc7ae3630ec9a564bc2608c6d1dbac6/broker-core/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/97cb1b418bc7ae3630ec9a564bc2608c6d1dbac6/broker-core/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java", "sha": "74ae42b95040d51aad13f39ff278192c40c69432", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java?ref=97cb1b418bc7ae3630ec9a564bc2608c6d1dbac6", "patch": "@@ -132,6 +132,7 @@ private AMQQueue mockQueue()\n         AMQQueue queue = mock(AMQQueue.class);\n         when(queue.getVirtualHost()).thenReturn(_virtualHost);\n         when(queue.getCategoryClass()).thenReturn(Queue.class);\n+        when(queue.getModel()).thenReturn(BrokerModel.getInstance());\n         return queue;\n     }\n ", "filename": "broker-core/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/da320da8010695a5a9933eee998309f1933acfe9", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a505ccc760d2abd380170eb1a7a0e636a7065e9c", "message": "QPID-5577 : compareTo should throw an NPE if the object being compared to is null", "bug_id": "qpid-jms-amqp-0-x_32", "file": [{"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/da320da8010695a5a9933eee998309f1933acfe9/broker-core/src/main/java/org/apache/qpid/server/queue/QueueEntryImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/da320da8010695a5a9933eee998309f1933acfe9/broker-core/src/main/java/org/apache/qpid/server/queue/QueueEntryImpl.java", "sha": "e3b56d25b7632dd5708bd496346f6348862ded5f", "changes": 4, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/queue/QueueEntryImpl.java?ref=da320da8010695a5a9933eee998309f1933acfe9", "patch": "@@ -439,10 +439,6 @@ public boolean removeStateChangeListener(StateChangeListener<? super MessageInst\n \n     public int compareTo(final QueueEntry o)\n     {\n-        if(o == null)\n-        {\n-            return 1;\n-        }\n         QueueEntryImpl other = (QueueEntryImpl)o;\n         return getEntryId() > other.getEntryId() ? 1 : getEntryId() < other.getEntryId() ? -1 : 0;\n     }", "filename": "broker-core/src/main/java/org/apache/qpid/server/queue/QueueEntryImpl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/9c62e46f0917d959d2775c6938d00b82eb346e7e", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/b7cf271c02028706deeee50ee87d698d91c58095", "message": "QPID-7546 : Prevent messages without without propertt or header section(s) failing with a NPE within MessageMetaData_1_0.MessageHeader_1_0#getExpiration\n\nFixes failing Python test qpid_tests.broker_1_0.selector.SelectorTests", "bug_id": "qpid-jms-amqp-0-x_33", "file": [{"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9c62e46f0917d959d2775c6938d00b82eb346e7e/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/MessageMetaData_1_0.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9c62e46f0917d959d2775c6938d00b82eb346e7e/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/MessageMetaData_1_0.java", "sha": "17fac614958ce30671d25bb7c3c2ac2d380f00d6", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/MessageMetaData_1_0.java?ref=9c62e46f0917d959d2775c6938d00b82eb346e7e", "patch": "@@ -23,6 +23,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n@@ -38,6 +39,7 @@\n import org.apache.qpid.server.protocol.v1_0.type.AmqpErrorException;\n import org.apache.qpid.server.protocol.v1_0.type.Section;\n import org.apache.qpid.server.protocol.v1_0.type.Symbol;\n+import org.apache.qpid.server.protocol.v1_0.type.UnsignedInteger;\n import org.apache.qpid.server.protocol.v1_0.type.codec.AMQPDescribedTypeRegistry;\n import org.apache.qpid.server.protocol.v1_0.type.messaging.AmqpSequence;\n import org.apache.qpid.server.protocol.v1_0.type.messaging.AmqpValue;\n@@ -450,15 +452,19 @@ public String getCorrelationId()\n             }\n         }\n \n+        @Override\n         public long getExpiration()\n         {\n-            if(_properties.getAbsoluteExpiryTime() != null)\n+            final Date absoluteExpiryTime = _properties == null ? null : _properties.getAbsoluteExpiryTime();\n+            if(absoluteExpiryTime != null)\n             {\n-                return _properties.getAbsoluteExpiryTime().getTime();\n+                return absoluteExpiryTime.getTime();\n             }\n             else\n             {\n-                return _header.getTtl() == null || _properties.getCreationTime() == null ? 0L : _header.getTtl().longValue() + _properties.getCreationTime().getTime();\n+                final Date creationTime = _properties == null ? null : _properties.getCreationTime();\n+                final UnsignedInteger ttl = _header == null ? null : _header.getTtl();\n+                return ttl == null || creationTime == null ? 0L : ttl.longValue() + creationTime.getTime();\n             }\n         }\n ", "filename": "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/MessageMetaData_1_0.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/7ec42f2266b0360fedd264554f5e3327eaad0d52", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/c8f78fd1993ee856f69d984249a54782d0040bb0", "message": "QPID-6234 : Fix NPE in ServerSessionDelegate when message.subscribe destination is null (applied patch from Lorenz Quack)", "bug_id": "qpid-jms-amqp-0-x_34", "file": [{"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/7ec42f2266b0360fedd264554f5e3327eaad0d52/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/7ec42f2266b0360fedd264554f5e3327eaad0d52/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java", "sha": "0575d97463ad236953971aeab75a832fd54226a7", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java?ref=7ec42f2266b0360fedd264554f5e3327eaad0d52", "patch": "@@ -201,7 +201,11 @@ public void messageSubscribe(Session session, MessageSubscribe method)\n         {\n             String destination = method.getDestination();\n \n-            if(((ServerSession)session).getSubscription(destination)!=null)\n+            if (destination == null)\n+            {\n+                exception(session, method, ExecutionErrorCode.INVALID_ARGUMENT, \"Subscriber must provide a destination. The protocol specification marking the destination argument as optional is considered a mistake.\");\n+            }\n+            else if(((ServerSession)session).getSubscription(destination) != null)\n             {\n                 exception(session, method, ExecutionErrorCode.NOT_ALLOWED, \"Subscription already exists with destination '\"+destination+\"'\");\n             }", "filename": "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/7367c2de8a29be7fede6508d1ef1860149810662", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ad8558975deab48525d3f1233c65264d3da5ca0c", "message": "QPID-5241: [Java Broker] Prevent possibility of NPE during JMX plugin shutdown.", "bug_id": "qpid-jms-amqp-0-x_35", "file": [{"additions": 16, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/7367c2de8a29be7fede6508d1ef1860149810662/broker-plugins/management-jmx/src/main/java/org/apache/qpid/server/jmx/JMXManagement.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/7367c2de8a29be7fede6508d1ef1860149810662/broker-plugins/management-jmx/src/main/java/org/apache/qpid/server/jmx/JMXManagement.java", "sha": "18e9f9f809f6f3aa13a82f10d8341e820d8a5a96", "changes": 17, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/management-jmx/src/main/java/org/apache/qpid/server/jmx/JMXManagement.java?ref=7367c2de8a29be7fede6508d1ef1860149810662", "patch": "@@ -230,7 +230,7 @@ private void stop()\n             _children.clear();\n         }\n         getBroker().removeChangeListener(this);\n-        _objectRegistry.close();\n+        closeObjectRegistry();\n     }\n \n     @Override\n@@ -358,4 +358,19 @@ private void validateAttributes(Map<String, Object> convertedAttributes)\n             }\n         }\n     }\n+\n+    private void closeObjectRegistry()\n+    {\n+        if (_objectRegistry != null)\n+        {\n+            try\n+            {\n+                _objectRegistry.close();\n+            }\n+            finally\n+            {\n+                _objectRegistry = null;\n+            }\n+        }\n+    }\n }", "filename": "broker-plugins/management-jmx/src/main/java/org/apache/qpid/server/jmx/JMXManagement.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a6c1bbad3518bfad6a6b156d1646c49c6bfb9d9a", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/90cfe29eb88775a8c21d1e7676b5325e38f2c00c", "message": "QPID-6429: [Java Broker] Prevent NPE on shutdown if an AMQP port failed to bind on startup", "bug_id": "qpid-jms-amqp-0-x_36", "file": [{"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a6c1bbad3518bfad6a6b156d1646c49c6bfb9d9a/broker-core/src/main/java/org/apache/qpid/server/transport/TCPandSSLTransport.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a6c1bbad3518bfad6a6b156d1646c49c6bfb9d9a/broker-core/src/main/java/org/apache/qpid/server/transport/TCPandSSLTransport.java", "sha": "480ab14f7feb029a167fd7c7f829578193ba92b4", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/transport/TCPandSSLTransport.java?ref=a6c1bbad3518bfad6a6b156d1646c49c6bfb9d9a", "patch": "@@ -111,7 +111,10 @@ public int getAcceptingPort()\n     @Override\n     public void close()\n     {\n-        _networkTransport.close();\n+        if (_networkTransport != null)\n+        {\n+            _networkTransport.close();\n+        }\n     }\n \n     class ServerNetworkTransportConfiguration implements NetworkTransportConfiguration", "filename": "broker-core/src/main/java/org/apache/qpid/server/transport/TCPandSSLTransport.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/36c2f7dc6802288235e5700bda8112da9624a567", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a7c83fcc97e25c2a6ebad4174c58f508f0b91d39", "message": "QPID-6411 : Don't throw an NPE if there is no Error associated with the a broker initiated detach", "bug_id": "qpid-jms-amqp-0-x_37", "file": [{"additions": 28, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/36c2f7dc6802288235e5700bda8112da9624a567/amqp-1-0-client/src/main/java/org/apache/qpid/amqp_1_0/client/Receiver.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/36c2f7dc6802288235e5700bda8112da9624a567/amqp-1-0-client/src/main/java/org/apache/qpid/amqp_1_0/client/Receiver.java", "sha": "5d4374fec522c84046d2330fec5705e4688caf93", "changes": 36, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/amqp-1-0-client/src/main/java/org/apache/qpid/amqp_1_0/client/Receiver.java?ref=36c2f7dc6802288235e5700bda8112da9624a567", "patch": "@@ -38,8 +38,10 @@\n import org.apache.qpid.amqp_1_0.type.AmqpErrorException;\n import org.apache.qpid.amqp_1_0.type.Binary;\n import org.apache.qpid.amqp_1_0.type.DeliveryState;\n+import org.apache.qpid.amqp_1_0.type.ErrorCondition;\n import org.apache.qpid.amqp_1_0.type.Outcome;\n import org.apache.qpid.amqp_1_0.type.Section;\n+import org.apache.qpid.amqp_1_0.type.Symbol;\n import org.apache.qpid.amqp_1_0.type.UnsignedInteger;\n import org.apache.qpid.amqp_1_0.type.messaging.Accepted;\n import org.apache.qpid.amqp_1_0.type.messaging.Modified;\n@@ -58,6 +60,20 @@\n \n public class Receiver implements DeliveryStateHandler\n {\n+    private static final ErrorCondition UNKNOWN_ERROR_CONDITION = new ErrorCondition()\n+    {\n+        @Override\n+        public Symbol getValue()\n+        {\n+            return Symbol.valueOf(\"Unknown\");\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return getValue().toString();\n+        }\n+    };\n     private ReceivingLinkEndpoint _endpoint;\n     private int _id;\n     private static final UnsignedInteger DEFAULT_INITIAL_CREDIT = UnsignedInteger.valueOf(100);\n@@ -196,16 +212,20 @@ public boolean isSatisfied()\n             {\n                 throw new ConnectionErrorException(AmqpError.INTERNAL_ERROR,\"Interrupted while waiting for detach following failed attach\");\n             }\n-            throw new ConnectionErrorException(getError().getCondition(),\n-                                               getError().getDescription() == null\n-                                                       ? \"AMQP error: '\" + getError().getCondition().toString()\n+\n+            Error error = getError() == null\n+                    ? new Error(UNKNOWN_ERROR_CONDITION, \"Unknown\")\n+                    : getError();\n+\n+\n+            ErrorCondition condition = error.getCondition() == null ? UNKNOWN_ERROR_CONDITION : error.getCondition();\n+\n+            throw new ConnectionErrorException(condition,\n+                                               error.getDescription() == null\n+                                                       ? \"AMQP error: '\" + condition.toString()\n                                                          + \"' when attempting to create a receiver\"\n                                                          + (source != null ? \" from: '\" + source.getAddress() +\"'\" : \"\")\n-                                                       : getError().getDescription());\n-        }\n-        else\n-        {\n-\n+                                                       : error.getDescription());\n         }\n     }\n ", "filename": "amqp-1-0-client/src/main/java/org/apache/qpid/amqp_1_0/client/Receiver.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/97aaf5e84544ab29f4f3b55f0c104f5e9b7e8a10", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/47e12abbbfa517dd1e55f0774e66340e084a5c84", "message": "QPID-4671: [Java Broker] Fix NPE occuring in FanoutExchange#isBound(... AMQQueue) when queue parameter is null", "bug_id": "qpid-jms-amqp-0-x_38", "file": [{"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/97aaf5e84544ab29f4f3b55f0c104f5e9b7e8a10/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/97aaf5e84544ab29f4f3b55f0c104f5e9b7e8a10/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java", "sha": "6ad5eb261ea54e47c7a2a9e7cdf2e49760cf112f", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java?ref=97aaf5e84544ab29f4f3b55f0c104f5e9b7e8a10", "patch": "@@ -76,7 +76,7 @@ public boolean isBound(AMQShortString routingKey, FieldTable arguments, AMQQueue\n \n     public boolean isBound(AMQShortString routingKey, AMQQueue queue)\n     {\n-        return _queues.containsKey(queue);\n+        return isBound(queue);\n     }\n \n     public boolean isBound(AMQShortString routingKey)\n@@ -87,7 +87,10 @@ public boolean isBound(AMQShortString routingKey)\n \n     public boolean isBound(AMQQueue queue)\n     {\n-\n+        if (queue == null)\n+        {\n+            return false;\n+        }\n         return _queues.containsKey(queue);\n     }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java"}, {"additions": 67, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/97aaf5e84544ab29f4f3b55f0c104f5e9b7e8a10/broker/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/97aaf5e84544ab29f4f3b55f0c104f5e9b7e8a10/broker/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java", "sha": "67739373e16e3d8ad28883759804a8dcc9d953d0", "changes": 67, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java?ref=97aaf5e84544ab29f4f3b55f0c104f5e9b7e8a10", "patch": "@@ -0,0 +1,67 @@\n+package org.apache.qpid.server.exchange;\n+\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.UUID;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.server.binding.Binding;\n+import org.apache.qpid.server.queue.AMQQueue;\n+\n+public class FanoutExchangeTest extends TestCase\n+{\n+    private FanoutExchange _exchange;\n+\n+    public void setUp()\n+    {\n+        _exchange = new FanoutExchange();\n+    }\n+\n+    public void testIsBoundAMQShortStringFieldTableAMQQueueWhenQueueIsNull()\n+    {\n+        assertFalse(\"calling isBound(AMQShortString,FieldTable,AMQQueue) with null queue should return false\",\n+                _exchange.isBound((AMQShortString) null, (FieldTable) null, (AMQQueue) null));\n+    }\n+\n+    public void testIsBoundAMQShortStringAMQQueueWhenQueueIsNull()\n+    {\n+        assertFalse(\"calling isBound(AMQShortString,AMQQueue) with null queue should return false\",\n+                _exchange.isBound((AMQShortString) null, (AMQQueue) null));\n+    }\n+\n+    public void testIsBoundAMQQueueWhenQueueIsNull()\n+    {\n+        assertFalse(\"calling isBound(AMQQueue) with null queue should return false\", _exchange.isBound((AMQQueue) null));\n+    }\n+\n+    public void testIsBoundAMQShortStringFieldTableAMQQueue()\n+    {\n+        AMQQueue queue = bindQueue();\n+        assertTrue(\"Should return true for a bound queue\",\n+                _exchange.isBound((AMQShortString) null, (FieldTable) null, queue));\n+    }\n+\n+    public void testIsBoundAMQShortStringAMQQueue()\n+    {\n+        AMQQueue queue = bindQueue();\n+        assertTrue(\"Should return true for a bound queue\",\n+                _exchange.isBound((AMQShortString) null, queue));\n+    }\n+\n+    public void testIsBoundAMQQueue()\n+    {\n+        AMQQueue queue = bindQueue();\n+        assertTrue(\"Should return true for a bound queue\",\n+                _exchange.isBound(queue));\n+    }\n+\n+    private AMQQueue bindQueue()\n+    {\n+        AMQQueue queue = mock(AMQQueue.class);\n+        _exchange.addBinding(new Binding(UUID.randomUUID(), \"does not matter\", queue, _exchange, null));\n+        return queue;\n+    }\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/exchange/FanoutExchangeTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/45addbc062f75dfc3e4e310dbad18a62fd0e215e", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/db85c0cff4866284d08523350e71376b05f0bdcd", "message": "QPID-4472 : [Java Broker] NPE with non-SASL AMQP 1.0 Connection", "bug_id": "qpid-jms-amqp-0-x_39", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/45addbc062f75dfc3e4e310dbad18a62fd0e215e/broker/src/main/java/org/apache/qpid/server/protocol/MultiVersionProtocolEngine.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/45addbc062f75dfc3e4e310dbad18a62fd0e215e/broker/src/main/java/org/apache/qpid/server/protocol/MultiVersionProtocolEngine.java", "sha": "c8126b36779177fcdd2b28405e7fbc28be69d6ad", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/MultiVersionProtocolEngine.java?ref=45addbc062f75dfc3e4e310dbad18a62fd0e215e", "patch": "@@ -341,7 +341,7 @@ public AmqpProtocolVersion getVersion()\n \n         public ServerProtocolEngine getProtocolEngine()\n         {\n-            return new ProtocolEngine_1_0_0(_appRegistry,_id);\n+            return new ProtocolEngine_1_0_0(_network, _appRegistry,_id);\n         }\n     };\n ", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/MultiVersionProtocolEngine.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/45addbc062f75dfc3e4e310dbad18a62fd0e215e/broker/src/main/java/org/apache/qpid/server/protocol/ProtocolEngine_1_0_0.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/45addbc062f75dfc3e4e310dbad18a62fd0e215e/broker/src/main/java/org/apache/qpid/server/protocol/ProtocolEngine_1_0_0.java", "sha": "715a512b47f64e51db3f628692dd6ad7cec0af0c", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/ProtocolEngine_1_0_0.java?ref=45addbc062f75dfc3e4e310dbad18a62fd0e215e", "patch": "@@ -99,10 +99,14 @@\n \n \n \n-    public ProtocolEngine_1_0_0(final IApplicationRegistry appRegistry, long id)\n+    public ProtocolEngine_1_0_0(final NetworkConnection networkDriver, final IApplicationRegistry appRegistry, long id)\n     {\n         _appRegistry = appRegistry;\n         _connectionId = id;\n+        if(networkDriver != null)\n+        {\n+            setNetworkConnection(networkDriver, networkDriver.getSender());\n+        }\n     }\n \n ", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/ProtocolEngine_1_0_0.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/432f71bc6aefc0fa574b7d8e9029b8b1a62ebbae", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/f107ff95ef2aadcdfc89e4a318009baddaa1d06b", "message": "QPID-3979: [Java Broker] Conflation queues: guard NPE identified by review feedback.", "bug_id": "qpid-jms-amqp-0-x_40", "file": [{"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/432f71bc6aefc0fa574b7d8e9029b8b1a62ebbae/broker/src/main/java/org/apache/qpid/server/queue/ConflationQueueList.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/432f71bc6aefc0fa574b7d8e9029b8b1a62ebbae/broker/src/main/java/org/apache/qpid/server/queue/ConflationQueueList.java", "sha": "0b95b9cc4744d323dd2b667269175bc9305e6a21", "changes": 17, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/ConflationQueueList.java?ref=432f71bc6aefc0fa574b7d8e9029b8b1a62ebbae", "patch": "@@ -72,22 +72,29 @@ public ConflationQueueEntry add(final ServerMessage message)\n             do\n             {\n                 latestValueReference = getOrPutIfAbsent(keyValue, referenceToEntry);\n-                oldEntry = latestValueReference.get();\n+                oldEntry = latestValueReference == null ? null : latestValueReference.get();\n             }\n-            while(oldEntry.compareTo(entry) < 0\n+            while(oldEntry != null\n+                    && oldEntry.compareTo(entry) < 0\n                     && oldEntry != getHead()\n                     && !latestValueReference.compareAndSet(oldEntry, entry));\n \n-            if(oldEntry.compareTo(entry) < 0)\n+            if (oldEntry == null)\n             {\n-                // We replaced some other entry to become the newest value\n-                discardEntry(oldEntry);\n+                // Unlikely: A newer entry came along and was consumed (and entry removed from map)\n+                // during our processing of getOrPutIfAbsent().  In this case we know our entry has been superseded.\n+                discardEntry(entry);\n             }\n             else if (oldEntry.compareTo(entry) > 0)\n             {\n                 // A newer entry came along\n                 discardEntry(entry);\n             }\n+            else if (oldEntry.compareTo(entry) < 0)\n+            {\n+                // We replaced some other entry to become the newest value\n+                discardEntry(oldEntry);\n+            }\n \n             entry.setLatestValueReference(latestValueReference);\n         }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/ConflationQueueList.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/f22e46eaa237c0242a4adaaf6e2d39b72c00d692", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/7cdc1d4b45ce6e846589a3c79792f52971fd8448", "message": "QPID-6142: Fix NPE thrown on startup when broker fails to start due to CO validation exceptions", "bug_id": "qpid-jms-amqp-0-x_41", "file": [{"additions": 22, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/Broker.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/Broker.java", "sha": "7780f060bbda0e011b64d24ca901a1bf488a7eab", "changes": 22, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/Broker.java?ref=f22e46eaa237c0242a4adaaf6e2d39b72c00d692", "patch": "@@ -58,6 +58,17 @@\n     private EventLogger _eventLogger;\n     private boolean _configuringOwnLogging = false;\n     private final TaskExecutor _taskExecutor = new TaskExecutorImpl();\n+    private final boolean _exitJVMOnShutdownWithNonZeroExitCode;\n+\n+    public Broker()\n+    {\n+        this(false);\n+    }\n+\n+    public Broker(boolean exitJVMOnShutdownWithNonZeroExitCode)\n+    {\n+        this._exitJVMOnShutdownWithNonZeroExitCode = exitJVMOnShutdownWithNonZeroExitCode;\n+    }\n \n     protected static class InitException extends RuntimeException\n     {\n@@ -70,6 +81,12 @@\n     }\n \n     public void shutdown()\n+    {\n+        shutdown(0);\n+    }\n+\n+    @Override\n+    public void shutdown(int exitStatusCode)\n     {\n         try\n         {\n@@ -92,6 +109,11 @@ public void shutdown()\n                 {\n                     LogManager.shutdown();\n                 }\n+\n+                if (_exitJVMOnShutdownWithNonZeroExitCode && exitStatusCode != 0)\n+                {\n+                    System.exit(exitStatusCode);\n+                }\n             }\n         }\n     }", "filename": "broker-core/src/main/java/org/apache/qpid/server/Broker.java"}, {"additions": 34, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java", "sha": "cd21f533a49719c5c28ca6f279f7637584c1b9ef", "changes": 34, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java?ref=f22e46eaa237c0242a4adaaf6e2d39b72c00d692", "patch": "@@ -57,6 +57,7 @@\n     public static final String SHUTTING_DOWN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.shutting_down\";\n     public static final String MANAGEMENT_MODE_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.management_mode\";\n     public static final String STARTUP_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.startup\";\n+    public static final String FATAL_ERROR_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.fatal_error\";\n     public static final String READY_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"broker.ready\";\n \n     static\n@@ -75,6 +76,7 @@\n         Logger.getLogger(SHUTTING_DOWN_LOG_HIERARCHY);\n         Logger.getLogger(MANAGEMENT_MODE_LOG_HIERARCHY);\n         Logger.getLogger(STARTUP_LOG_HIERARCHY);\n+        Logger.getLogger(FATAL_ERROR_LOG_HIERARCHY);\n         Logger.getLogger(READY_LOG_HIERARCHY);\n \n         _messages = ResourceBundle.getBundle(\"org.apache.qpid.server.logging.messages.Broker_logmessages\", _currentLocale);\n@@ -491,6 +493,38 @@ public String getLogHierarchy()\n         };\n     }\n \n+    /**\n+     * Log a Broker message of the Format:\n+     * <pre>BRK-1016 : Fatal error : {0} : See log file for more information</pre>\n+     * Optional values are contained in [square brackets] and are numbered\n+     * sequentially in the method call.\n+     *\n+     */\n+    public static LogMessage FATAL_ERROR(String param1)\n+    {\n+        String rawMessage = _messages.getString(\"FATAL_ERROR\");\n+\n+        final Object[] messageArguments = {param1};\n+        // Create a new MessageFormat to ensure thread safety.\n+        // Sharing a MessageFormat and using applyPattern is not thread safe\n+        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);\n+\n+        final String message = formatter.format(messageArguments);\n+\n+        return new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+\n+            public String getLogHierarchy()\n+            {\n+                return FATAL_ERROR_LOG_HIERARCHY;\n+            }\n+        };\n+    }\n+\n     /**\n      * Log a Broker message of the Format:\n      * <pre>BRK-1004 : Qpid Broker Ready</pre>", "filename": "broker-core/src/main/java/org/apache/qpid/server/logging/messages/BrokerMessages.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Broker_logmessages.properties", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Broker_logmessages.properties", "sha": "322335a956266525ebb2578657aa464a3cd7f938", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/logging/messages/Broker_logmessages.properties?ref=f22e46eaa237c0242a4adaaf6e2d39b72c00d692", "patch": "@@ -52,4 +52,6 @@ MANAGEMENT_MODE = BRK-1012 : Management Mode : User Details : {0} / {1}\n # 0 - Total message size\n # 1 - Target memory size\n FLOW_TO_DISK_ACTIVE = BRK-1014 : Message flow to disk active :  Message memory use {0,number,#}KB exceeds threshold {1,number,#.##}KB\n-FLOW_TO_DISK_INACTIVE = BRK-1015 : Message flow to disk inactive : Message memory use {0,number,#}KB within threshold {1,number,#.##}KB\n\\ No newline at end of file\n+FLOW_TO_DISK_INACTIVE = BRK-1015 : Message flow to disk inactive : Message memory use {0,number,#}KB within threshold {1,number,#.##}KB\n+\n+FATAL_ERROR = BRK-1016 : Fatal error : {0} : See log file for more information\n\\ No newline at end of file", "filename": "broker-core/src/main/java/org/apache/qpid/server/logging/messages/Broker_logmessages.properties"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/model/BrokerShutdownProvider.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/model/BrokerShutdownProvider.java", "sha": "7eb0d3cc64dae9e132d91e6ebf3b442cbdbfac14", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/model/BrokerShutdownProvider.java?ref=f22e46eaa237c0242a4adaaf6e2d39b72c00d692", "patch": "@@ -22,5 +22,5 @@\n \n public interface BrokerShutdownProvider\n {\n-    void shutdown();\n+    void shutdown(int exitStatusCode);\n }", "filename": "broker-core/src/main/java/org/apache/qpid/server/model/BrokerShutdownProvider.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java", "sha": "d413050cefc1bea73d7f834277937647df9d821f", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java?ref=f22e46eaa237c0242a4adaaf6e2d39b72c00d692", "patch": "@@ -969,7 +969,8 @@ protected void onExceptionInOpen(RuntimeException e)\n             BrokerShutdownProvider shutdownProvider = systemConfig.getBrokerShutdownProvider();\n             if (shutdownProvider != null)\n             {\n-                shutdownProvider.shutdown();\n+                _eventLogger.message(BrokerMessages.FATAL_ERROR(e.getMessage()));\n+                shutdownProvider.shutdown(1);\n             }\n             else\n             {", "filename": "broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java", "sha": "d32f0299d53c16d83a970098469c76e902265f24", "changes": 19, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java?ref=f22e46eaa237c0242a4adaaf6e2d39b72c00d692", "patch": "@@ -32,6 +32,7 @@\n import org.apache.qpid.server.logging.SystemOutMessageLogger;\n import org.apache.qpid.server.logging.messages.BrokerMessages;\n import org.apache.qpid.server.model.Broker;\n+import org.apache.qpid.server.model.State;\n import org.apache.qpid.server.model.SystemConfig;\n import org.apache.qpid.server.store.BrokerStoreUpgraderAndRecoverer;\n import org.apache.qpid.server.store.DurableConfigurationStore;\n@@ -77,17 +78,17 @@ public void initialise(BrokerOptions brokerOptions) throws Exception\n         logStartupMessages(startupLogger);\n \n         BrokerStoreUpgraderAndRecoverer upgrader = new BrokerStoreUpgraderAndRecoverer(_systemConfig);\n-        _broker = upgrader.perform(_store);\n+        Broker broker = upgrader.perform(_store);\n+        _broker = broker;\n \n-        _broker.setEventLogger(startupLogger);\n-        _broker.open();\n-\n-        // starting the broker\n-        //_broker.setDesiredState(State.ACTIVE);\n-\n-        startupLogger.message(BrokerMessages.READY());\n-        _broker.setEventLogger(eventLogger);\n+        broker.setEventLogger(startupLogger);\n+        broker.open();\n \n+        if (broker.getState() == State.ACTIVE)\n+        {\n+            startupLogger.message(BrokerMessages.READY());\n+            broker.setEventLogger(eventLogger);\n+        }\n     }\n \n     public void close()", "filename": "broker-core/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/test/java/org/apache/qpid/server/store/BrokerRecovererTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker-core/src/test/java/org/apache/qpid/server/store/BrokerRecovererTest.java", "sha": "f4802481cbabeaeca38ddc602b30b4d3db00bd28", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/store/BrokerRecovererTest.java?ref=f22e46eaa237c0242a4adaaf6e2d39b72c00d692", "patch": "@@ -34,7 +34,6 @@\n import junit.framework.TestCase;\n \n import org.apache.qpid.server.BrokerOptions;\n-import org.apache.qpid.server.configuration.IllegalConfigurationException;\n import org.apache.qpid.server.configuration.updater.CurrentThreadTaskExecutor;\n import org.apache.qpid.server.configuration.updater.TaskExecutor;\n import org.apache.qpid.server.logging.EventLogger;\n@@ -261,7 +260,7 @@ public void testModelVersionValidationForIncompatibleMajorVersion() throws Excep\n             resolveObjects(_brokerEntry);\n             Broker<?> broker = _systemConfig.getBroker();\n             broker.open();\n-            verify(_brokerShutdownProvider).shutdown();\n+            verify(_brokerShutdownProvider).shutdown(1);\n         }\n     }\n \n@@ -280,7 +279,7 @@ public void testModelVersionValidationForIncompatibleMinorVersion() throws Excep\n \n         Broker<?> broker = (Broker<?>) recover.resolve();\n         broker.open();\n-        verify(_brokerShutdownProvider).shutdown();\n+        verify(_brokerShutdownProvider).shutdown(1);\n     }\n \n     public void testIncorrectModelVersion() throws Exception\n@@ -298,7 +297,7 @@ public void testIncorrectModelVersion() throws Exception\n                     _systemConfig.getObjectFactory().recover(_brokerEntry, _systemConfig);\n             Broker<?> broker = (Broker<?>) recover.resolve();\n             broker.open();\n-            verify(_brokerShutdownProvider).shutdown();\n+            verify(_brokerShutdownProvider).shutdown(1);\n             reset(_brokerShutdownProvider);\n         }\n     }", "filename": "broker-core/src/test/java/org/apache/qpid/server/store/BrokerRecovererTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker/src/main/java/org/apache/qpid/server/Main.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/f22e46eaa237c0242a4adaaf6e2d39b72c00d692/broker/src/main/java/org/apache/qpid/server/Main.java", "sha": "76f848588464284e929e1cad6945e1c1f71328a9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/Main.java?ref=f22e46eaa237c0242a4adaaf6e2d39b72c00d692", "patch": "@@ -454,7 +454,7 @@ public void uncaughtException(final Thread t, final Throwable e)\n \n     protected void startBroker(final BrokerOptions options) throws Exception\n     {\n-        Broker broker = new Broker();\n+        Broker broker = new Broker(true);\n         broker.startup(options);\n     }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/Main.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/457106b26ee6cfb4e1f8d42bad3e824b33362e81", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/c812b1381599a01f80231a88a89e47f7a56ed8b9", "message": "QPID-2720: prevent NPE's in event we didnt fully set up the PluginManager", "bug_id": "qpid-jms-amqp-0-x_42", "file": [{"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/457106b26ee6cfb4e1f8d42bad3e824b33362e81/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/457106b26ee6cfb4e1f8d42bad3e824b33362e81/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java", "sha": "dab6c3b2318b7b1520a372fc52f29b25c60fb736", "changes": 21, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java?ref=457106b26ee6cfb4e1f8d42bad3e824b33362e81", "patch": "@@ -92,6 +92,7 @@\n \n     private Activator _activator;\n \n+    private final List<ServiceTracker> _trackers = new ArrayList<ServiceTracker>();\n     private Map<String, SecurityPluginFactory> _securityPlugins = new HashMap<String, SecurityPluginFactory>();\n     private Map<List<String>, ConfigurationPluginFactory> _configPlugins = new IdentityHashMap<List<String>, ConfigurationPluginFactory>();\n     private Map<String, VirtualHostPluginFactory> _vhostPlugins = new HashMap<String, VirtualHostPluginFactory>();\n@@ -253,25 +254,29 @@ public PluginManager(String pluginPath, String cachePath, BundleContext bundleCo\n             _logger.info(\"Using the specified external BundleContext\");\n         }\n \n-        // TODO save trackers in a map, keyed by class name\n-        \n         _exchangeTracker = new ServiceTracker(bundleContext, ExchangeType.class.getName(), null);\n         _exchangeTracker.open();\n+        _trackers.add(_exchangeTracker);\n \n         _securityTracker = new ServiceTracker(bundleContext, SecurityPluginFactory.class.getName(), null);\n         _securityTracker.open();\n+        _trackers.add(_securityTracker);\n \n         _configTracker = new ServiceTracker(bundleContext, ConfigurationPluginFactory.class.getName(), null);\n         _configTracker.open();\n+        _trackers.add(_configTracker);\n \n         _virtualHostTracker = new ServiceTracker(bundleContext, VirtualHostPluginFactory.class.getName(), null);\n         _virtualHostTracker.open();\n+        _trackers.add(_virtualHostTracker);\n  \n         _policyTracker = new ServiceTracker(bundleContext, SlowConsumerPolicyPluginFactory.class.getName(), null);\n         _policyTracker.open();\n-        \n+        _trackers.add(_policyTracker);\n+\n         _authenticationManagerTracker = new ServiceTracker(bundleContext, AuthenticationManagerPluginFactory.class.getName(), null);\n         _authenticationManagerTracker.open();\n+        _trackers.add(_authenticationManagerTracker);\n \n         _logger.info(\"Opened service trackers\");\n     }\n@@ -353,12 +358,10 @@ public void close()\n         try\n         {\n             // Close all bundle trackers\n-            _exchangeTracker.close();\n-            _securityTracker.close();\n-            _configTracker.close();\n-            _virtualHostTracker.close();\n-            _policyTracker.close();\n-            _authenticationManagerTracker.close();\n+            for(ServiceTracker tracker : _trackers)\n+            {\n+                tracker.close();\n+            }\n         }\n         finally\n         {", "filename": "broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/4b0aa2c72afc85d406e2acee1c39899720686dde", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/86b9b44755682e96249b386785873a6f2c3a0825", "message": "QPID-6103 : Fix NPE which occurred when first flow was sent before receiving initial flow from partner", "bug_id": "qpid-jms-amqp-0-x_43", "file": [{"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/4b0aa2c72afc85d406e2acee1c39899720686dde/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/4b0aa2c72afc85d406e2acee1c39899720686dde/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java", "sha": "0f375187735d0cdec20d779a929dada2f438a955", "changes": 21, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java?ref=4b0aa2c72afc85d406e2acee1c39899720686dde", "patch": "@@ -772,10 +772,13 @@ public void sendFlow()\n     }\n     public void sendFlow(final Flow flow)\n     {\n-        final int nextIncomingId = _nextIncomingTransferId.intValue();\n-        flow.setNextIncomingId(UnsignedInteger.valueOf(nextIncomingId));\n+        if(_nextIncomingTransferId != null)\n+        {\n+            final int nextIncomingId = _nextIncomingTransferId.intValue();\n+            flow.setNextIncomingId(UnsignedInteger.valueOf(nextIncomingId));\n+            _lastSentIncomingLimit = UnsignedInteger.valueOf(nextIncomingId + _availableIncomingCredit);\n+        }\n         flow.setIncomingWindow(UnsignedInteger.valueOf(_availableIncomingCredit));\n-        _lastSentIncomingLimit = UnsignedInteger.valueOf(nextIncomingId + _availableIncomingCredit);\n \n         flow.setNextOutgoingId(UnsignedInteger.valueOf(_nextOutgoingTransferId.intValue()));\n         flow.setOutgoingWindow(UnsignedInteger.valueOf(_availableOutgoingCredit));\n@@ -784,11 +787,15 @@ public void sendFlow(final Flow flow)\n \n     public void sendFlowConditional()\n     {\n-        UnsignedInteger clientsCredit = _lastSentIncomingLimit.subtract(UnsignedInteger.valueOf(_nextIncomingTransferId.intValue()));\n-        int i = UnsignedInteger.valueOf(_availableIncomingCredit).subtract(clientsCredit).compareTo(clientsCredit);\n-        if(i >=0)\n+        if(_nextIncomingTransferId != null)\n         {\n-            sendFlow();\n+            UnsignedInteger clientsCredit =\n+                    _lastSentIncomingLimit.subtract(UnsignedInteger.valueOf(_nextIncomingTransferId.intValue()));\n+            int i = UnsignedInteger.valueOf(_availableIncomingCredit).subtract(clientsCredit).compareTo(clientsCredit);\n+            if (i >= 0)\n+            {\n+                sendFlow();\n+            }\n         }\n \n     }", "filename": "amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ea61748a8d6b1334552182dac1f25f75ebe620e2", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/79f279af448b98aaf594ed77c580622920e44bc6", "message": "QPID-1447 : Add additional testing for null TopicDelete Policy Configuration and fix for NPEs.", "bug_id": "qpid-jms-amqp-0-x_44", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ea61748a8d6b1334552182dac1f25f75ebe620e2/broker-plugins/experimental/slowconsumerdetection/src/main/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicy.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ea61748a8d6b1334552182dac1f25f75ebe620e2/broker-plugins/experimental/slowconsumerdetection/src/main/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicy.java", "sha": "577dced7d8d765c370f74613f006bc6bab06907e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/experimental/slowconsumerdetection/src/main/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicy.java?ref=ea61748a8d6b1334552182dac1f25f75ebe620e2", "patch": "@@ -93,7 +93,7 @@ public void performPolicy(AMQQueue q)\n                                  \"Consuming to slow.\");\n \n             // Actively delete non autoDelete queues if deletePersistent is set\n-            if (!q.isAutoDelete() && _configuration.deletePersistent())\n+            if (!q.isAutoDelete() && (_configuration != null && _configuration.deletePersistent()))\n             {\n                 CurrentActor.get().message(q.getLogSubject(), TopicDeletePolicyMessages.TDP_DELETING_QUEUE());\n                 q.delete();", "filename": "broker-plugins/experimental/slowconsumerdetection/src/main/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicy.java"}, {"additions": 56, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/ea61748a8d6b1334552182dac1f25f75ebe620e2/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicyTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/ea61748a8d6b1334552182dac1f25f75ebe620e2/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicyTest.java", "sha": "364766dfa7bbbad3c6ec47767dd40c23249d76d0", "changes": 66, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicyTest.java?ref=ea61748a8d6b1334552182dac1f25f75ebe620e2", "patch": "@@ -34,7 +34,6 @@\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.util.InternalBrokerBaseCase;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n-import org.apache.qpid.test.utils.QpidTestCase;\n \n public class TopicDeletePolicyTest extends InternalBrokerBaseCase\n {\n@@ -97,8 +96,6 @@ public void doTask(AMQProtocolSession session) throws AMQException\n         ((AMQChannel) queue.getExclusiveOwningSession()).getProtocolSession().addSessionCloseTask(deleteQueueTask);\n     }\n \n-\n-\n     /** Check that a null queue passed in does not upset the policy. */\n     public void testNullQueueParameter() throws ConfigurationException\n     {\n@@ -120,7 +117,7 @@ public void testNullQueueParameter() throws ConfigurationException\n      * Set a owning Session to null which means this is not an exclusive queue\n      * so the queue should not be deleted\n      */\n-    public void testNonExclusiveQueue() throws ConfigurationException\n+    public void testNonExclusiveQueue()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -141,7 +138,7 @@ public void testNonExclusiveQueue() throws ConfigurationException\n      *\n      * JMS Queues are not to be processed so this should not delete the queue.\n      */\n-    public void testQueuesAreNotProcessed() throws ConfigurationException\n+    public void testQueuesAreNotProcessed()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -156,12 +153,11 @@ public void testQueuesAreNotProcessed() throws ConfigurationException\n         assertFalse(\"Connection should not be closed\", _connection.isClosed());\n     }\n \n-\n     /**\n      * Give a non auto-delete queue is bound to the topic exchange the\n      * TopicDeletePolicy will close the connection and delete the queue,\n      */\n-    public void testNonAutoDeleteTopicIsNotClosed() throws ConfigurationException\n+    public void testNonAutoDeleteTopicIsNotClosed()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -182,7 +178,7 @@ public void testNonAutoDeleteTopicIsNotClosed() throws ConfigurationException\n      * Give a auto-delete queue bound to the topic exchange the TopicDeletePolicy will\n      * close the connection and delete the queue\n      */\n-    public void testTopicIsClosed() throws ConfigurationException\n+    public void testTopicIsClosed()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -203,7 +199,7 @@ public void testTopicIsClosed() throws ConfigurationException\n      * Give a queue bound to the topic exchange the TopicDeletePolicy will\n      * close the connection and NOT delete the queue\n      */\n-    public void testNonAutoDeleteTopicIsClosedNotDeleted() throws AMQException, ConfigurationException\n+    public void testNonAutoDeleteTopicIsClosedNotDeleted()\n     {\n         TopicDeletePolicy policy = new TopicDeletePolicy();\n         policy.configure(_config);\n@@ -223,7 +219,7 @@ public void testNonAutoDeleteTopicIsClosedNotDeleted() throws AMQException, Conf\n      * configured with the delete-persistent tag will close the connection\n      * and delete the queue\n      */\n-    public void testPersistentTopicIsClosedAndDeleted() throws ConfigurationException\n+    public void testPersistentTopicIsClosedAndDeleted()\n     {\n         //Set the config to delete persistent queues\n         _config.getConfig().addProperty(\"delete-persistent\", \"\");\n@@ -244,4 +240,54 @@ public void testPersistentTopicIsClosedAndDeleted() throws ConfigurationExceptio\n         assertTrue(\"Connection should be closed\", _connection.isClosed());\n     }\n \n+    /**\n+     * Give a queue bound to the topic exchange the TopicDeletePolicy not\n+     * configured to close a persistent queue\n+     */\n+    public void testPersistentTopicIsClosedAndDeletedNullConfig()\n+    {\n+        TopicDeletePolicy policy = new TopicDeletePolicy();\n+        // Explicity say we are not configuring the policy.\n+        policy.configure(null);\n+\n+        MockAMQQueue queue = createOwnedQueue();\n+\n+        queue.addBinding(new Binding(null, \"bindingKey\", queue, new TopicExchange(), null));\n+\n+        policy.performPolicy(queue);\n+\n+        assertFalse(\"Queue should not be deleted\", queue.isDeleted());\n+        assertTrue(\"Connection should be closed\", _connection.isClosed());\n+    }\n+\n+    public void testNonExclusiveQueueNullConfig()\n+    {\n+        _config = null;\n+        testNonExclusiveQueue();\n+    }\n+\n+    public void testQueuesAreNotProcessedNullConfig()\n+    {\n+        _config = null;\n+        testQueuesAreNotProcessed();\n+    }\n+\n+    public void testNonAutoDeleteTopicIsNotClosedNullConfig()\n+    {\n+        _config = null;\n+        testNonAutoDeleteTopicIsNotClosed();\n+    }\n+\n+    public void testTopicIsClosedNullConfig()\n+    {\n+        _config = null;\n+        testTopicIsClosed();\n+    }\n+\n+    public void testNonAutoDeleteTopicIsClosedNotDeletedNullConfig() throws AMQException\n+    {\n+        _config = null;\n+        testNonAutoDeleteTopicIsClosedNotDeleted();\n+    }\n+\n }", "filename": "broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/policies/TopicDeletePolicyTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/9c67c9cc895bad2938a0515db206dabc3713b2da", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/e7ad50c46ccc3a64192ef7c43cc8bb69efcc1eb4", "message": "QPID-2585 : Prevent NPE if plugins are not enabled but requested", "bug_id": "qpid-jms-amqp-0-x_45", "file": [{"additions": 66, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9c67c9cc895bad2938a0515db206dabc3713b2da/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/SlowConsumerDetectionQueueConfigurationTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9c67c9cc895bad2938a0515db206dabc3713b2da/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/SlowConsumerDetectionQueueConfigurationTest.java", "sha": "180573d625895d54fc2ff6b2723891b33fbf2127", "changes": 66, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/SlowConsumerDetectionQueueConfigurationTest.java?ref=9c67c9cc895bad2938a0515db206dabc3713b2da", "patch": "@@ -0,0 +1,66 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.virtualhost.plugin;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.XMLConfiguration;\n+import org.apache.qpid.server.configuration.plugin.SlowConsumerDetectionQueueConfiguration;\n+\n+\n+public class SlowConsumerDetectionQueueConfigurationTest extends TestCase\n+{\n+    public void setUp()\n+    {\n+        \n+    }\n+\n+\n+    public void testConfigLoadingValidConfig()\n+    {\n+        SlowConsumerDetectionQueueConfiguration config = new SlowConsumerDetectionQueueConfiguration();\n+\n+        XMLConfiguration xmlconfig = new XMLConfiguration();\n+\n+        xmlconfig.addProperty(\"messageAge\", \"60000\");\n+        xmlconfig.addProperty(\"depth\", \"1024\");\n+        xmlconfig.addProperty(\"messageCount\", \"10\");\n+        xmlconfig.addProperty(\"policy.name\", \"TopicDelete\");\n+        xmlconfig.addProperty(\"policy.topicdelete\", \"\");\n+\n+\n+        // Create a CompositeConfiguration as this is what the broker uses\n+        CompositeConfiguration composite = new CompositeConfiguration();\n+        composite.addConfiguration(xmlconfig);\n+\n+        try\n+        {\n+            config.setConfiguration(\"\", composite);\n+        }\n+        catch (ConfigurationException e)\n+        {\n+            e.printStackTrace();\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+}", "filename": "broker-plugins/experimental/slowconsumerdetection/src/test/java/org/apache/qpid/server/virtualhost/plugin/SlowConsumerDetectionQueueConfigurationTest.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9c67c9cc895bad2938a0515db206dabc3713b2da/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9c67c9cc895bad2938a0515db206dabc3713b2da/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java", "sha": "cba8dda425873fde84f36658678fd2bf92c0e697", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java?ref=9c67c9cc895bad2938a0515db206dabc3713b2da", "patch": "@@ -245,6 +245,12 @@ public PluginManager(String plugindir) throws Exception\n \n     public <P extends PluginFactory> Map<String, P> getPlugins(Class<P> plugin)\n     {\n+        // If plugins are not configured then return an empty set\n+        if (_activator == null)\n+        {\n+            return new HashMap<String, P>();\n+        }\n+\n         ServiceTracker tracker = new ServiceTracker(_activator.getContext(), plugin.getName(), null);\n         tracker.open();\n ", "filename": "broker/src/main/java/org/apache/qpid/server/plugins/PluginManager.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/dca7f107bce2d63336d819f3589e77e0b006ba91", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/b0764872dc12d3066383745fcadae6c4a6f6c541", "message": "QPID-1994: prevent NPE caused by refreshing whilst app is closing down", "bug_id": "qpid-jms-amqp-0-x_46", "file": [{"additions": 16, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dca7f107bce2d63336d819f3589e77e0b006ba91/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/RefreshIntervalComboPanel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dca7f107bce2d63336d819f3589e77e0b006ba91/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/RefreshIntervalComboPanel.java", "sha": "ae60467bf53511fa32e47dc623943563422674fe", "changes": 29, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/RefreshIntervalComboPanel.java?ref=dca7f107bce2d63336d819f3589e77e0b006ba91", "patch": "@@ -106,21 +106,24 @@ public RefreshTask(int secs)\n         @Override\n         public void run()\n         {\n-            IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow(); \n-            final MBeanView mbView = (MBeanView)window.getActivePage().findView(MBeanView.ID);\n-\n-            final NavigationView navView = (NavigationView)window.getActivePage().findView(NavigationView.ID);\n-            try\n-            {\n-                mbView.refresh();\n-                navView.refresh();\n-            }\n-            catch (Exception ex)\n+            IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();\n+            if(window != null)\n             {\n-                MBeanUtility.handleException(ex);\n-            }\n+                final MBeanView mbView = (MBeanView)window.getActivePage().findView(MBeanView.ID);\n \n-            _display.timerExec(1000 * seconds, this);\n+                final NavigationView navView = (NavigationView)window.getActivePage().findView(NavigationView.ID);\n+                try\n+                {\n+                    mbView.refresh();\n+                    navView.refresh();\n+                }\n+                catch (Exception ex)\n+                {\n+                    MBeanUtility.handleException(ex);\n+                }\n+\n+                _display.timerExec(1000 * seconds, this);\n+            }\n         }\n         \n     }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/RefreshIntervalComboPanel.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/63c3ca71a78e4329963c1161b3bf7ce91b464bb1", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/e20d8a8191d9deed3059b13e40a4d303743da32f", "message": "QPID-1128 - Patch from Robbert Gemmell to prevent NPE whilst adding queue to navigation.", "bug_id": "qpid-jms-amqp-0-x_47", "file": [{"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/63c3ca71a78e4329963c1161b3bf7ce91b464bb1/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanTypeTabControl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/63c3ca71a78e4329963c1161b3bf7ce91b464bb1/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanTypeTabControl.java", "sha": "d4b2ed1db6350e7176d4026b3660c9ef78af24c0", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanTypeTabControl.java?ref=63c3ca71a78e4329963c1161b3bf7ce91b464bb1", "patch": "@@ -204,6 +204,11 @@ public void widgetSelected(SelectionEvent e)\n                 for (int i = 0; i < selectedItems.length; i++)\n                 {\n                     String name = selectedItems[i];\n+                    int nameEnd = name.indexOf(\" (\");                \t\n+                    if (nameEnd != -1)\n+                    {\n+                        name = name.substring(0, nameEnd);                \t\t\n+                    }                \t\n                     // pass the ManagedBean to the navigation view to be added\n                     ManagedBean mbean = _objectsMap.get(name);\n                     IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow(); ", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanTypeTabControl.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/63c3ca71a78e4329963c1161b3bf7ce91b464bb1/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/QueueTypeTabControl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/63c3ca71a78e4329963c1161b3bf7ce91b464bb1/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/QueueTypeTabControl.java", "sha": "9fcf32abddc29ac1b6e62f282ae12af0223bfb67", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/QueueTypeTabControl.java?ref=63c3ca71a78e4329963c1161b3bf7ce91b464bb1", "patch": "@@ -246,11 +246,10 @@ public void widgetSelected(SelectionEvent e)\n             {\n                 continue;\n             }\n-            AttributeData data = MBeanUtility.getAttributeData(mbean, Constants.ATTRIBUTE_QUEUE_DEPTH);\n-            String value = mbean.getName() + \" (\" + data.getValue().toString() + \" KB)\";\n+            String value = mbean.getName();\n             items.add(value);\n-            //items[i] = mbean.getName() + \" (\" + value + \" KB)\";\n             getMBeansMap().put(value, mbean);\n+            AttributeData data = MBeanUtility.getAttributeData(mbean, Constants.ATTRIBUTE_QUEUE_DEPTH);\n             _queueDepthMap.put(data, mbean);\n             data = MBeanUtility.getAttributeData(mbean, Constants.ATTRIBUTE_QUEUE_CONSUMERCOUNT);\n             _queueConsumerCountMap.put(data, mbean);\n@@ -289,7 +288,7 @@ private void sortQueuesByConsumerCount()\n         {\n             ManagedBean mbean = _queueConsumerCountMap.get(data);\n             String value = data.getValue().toString();\n-            items[i++] = mbean.getName() + \" (\" + value + \" )\";\n+            items[i++] = mbean.getName() + \" (\" + value + \")\";\n         }\n         getListWidget().setItems(items);\n     }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/QueueTypeTabControl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/331f80075b7294fc917482b0cea91d0f25d6b785", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/1f563a876f0cf84148b9126341094cef2538282f", "message": "QPID-6001 :  [Java Client] Prevent NPE when publishing using ADDR destination to Broker using AMQP 0-9-1 or lower", "bug_id": "qpid-jms-amqp-0-x_48", "file": [{"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/331f80075b7294fc917482b0cea91d0f25d6b785/client/src/main/java/org/apache/qpid/client/AMQSession_0_8.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/331f80075b7294fc917482b0cea91d0f25d6b785/client/src/main/java/org/apache/qpid/client/AMQSession_0_8.java", "sha": "dbbc30091097ff1018010bbd477620cc0b99455a", "changes": 22, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQSession_0_8.java?ref=331f80075b7294fc917482b0cea91d0f25d6b785", "patch": "@@ -26,6 +26,14 @@\n import static org.apache.qpid.configuration.ClientProperties.QPID_FLOW_CONTROL_WAIT_FAILURE;\n import static org.apache.qpid.configuration.ClientProperties.QPID_FLOW_CONTROL_WAIT_NOTIFY_PERIOD;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.jms.Destination;\n+import javax.jms.JMSException;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -52,13 +60,6 @@\n import org.apache.qpid.protocol.AMQMethodEvent;\n import org.apache.qpid.transport.TransportException;\n \n-import javax.jms.Destination;\n-import javax.jms.JMSException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n public class AMQSession_0_8 extends AMQSession<BasicMessageConsumer_0_8, BasicMessageProducer_0_8>\n {\n     /** Used for debugging. */\n@@ -736,14 +737,9 @@ public void resolveAddress(AMQDestination dest,\n                                               boolean isConsumer,\n                                               boolean noLocal) throws AMQException\n     {\n-        throwUnsupportedAddressingSyntax();\n+        throw new UnsupportedAddressSyntaxException(dest);\n     }\n \n-    void throwUnsupportedAddressingSyntax()\n-    {\n-        throw new UnsupportedOperationException(\"The new addressing based syntax is \"\n-                + \"not supported for AMQP 0-8/0-9/0-9-1 versions\");\n-    }\n \n     protected void flushAcknowledgments()\n     {", "filename": "client/src/main/java/org/apache/qpid/client/AMQSession_0_8.java"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/331f80075b7294fc917482b0cea91d0f25d6b785/client/src/main/java/org/apache/qpid/client/BasicMessageProducer_0_8.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/331f80075b7294fc917482b0cea91d0f25d6b785/client/src/main/java/org/apache/qpid/client/BasicMessageProducer_0_8.java", "sha": "b9bb03444facdfb03f10379352f866910628b496", "changes": 23, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/BasicMessageProducer_0_8.java?ref=331f80075b7294fc917482b0cea91d0f25d6b785", "patch": "@@ -20,6 +20,17 @@\n  */\n package org.apache.qpid.client;\n \n+import java.nio.ByteBuffer;\n+import java.util.UUID;\n+\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+import javax.jms.Queue;\n+import javax.jms.Topic;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.client.message.AMQMessageDelegate_0_8;\n import org.apache.qpid.client.message.AbstractJMSMessage;\n@@ -33,16 +44,6 @@\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.ExchangeDeclareBody;\n import org.apache.qpid.framing.MethodRegistry;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.Queue;\n-import javax.jms.Topic;\n-\n-import java.nio.ByteBuffer;\n-import java.util.UUID;\n \n public class BasicMessageProducer_0_8 extends BasicMessageProducer\n {\n@@ -60,7 +61,7 @@ void declareDestination(AMQDestination destination)\n \n         if (destination.getDestSyntax() == AMQDestination.DestSyntax.ADDR)\n         {\n-            getSession().throwUnsupportedAddressingSyntax();\n+            throw new UnsupportedAddressSyntaxException(destination);\n         }\n \n         if(getSession().isDeclareExchanges())", "filename": "client/src/main/java/org/apache/qpid/client/BasicMessageProducer_0_8.java"}, {"additions": 32, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/331f80075b7294fc917482b0cea91d0f25d6b785/client/src/main/java/org/apache/qpid/client/UnsupportedAddressSyntaxException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/331f80075b7294fc917482b0cea91d0f25d6b785/client/src/main/java/org/apache/qpid/client/UnsupportedAddressSyntaxException.java", "sha": "c65fd7c18957bdb2672d2a955f739e6717117238", "changes": 32, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/UnsupportedAddressSyntaxException.java?ref=331f80075b7294fc917482b0cea91d0f25d6b785", "patch": "@@ -0,0 +1,32 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.client;\n+\n+class UnsupportedAddressSyntaxException extends UnsupportedOperationException\n+{\n+    UnsupportedAddressSyntaxException(final AMQDestination dest)\n+    {\n+        super(\"The address '\" + dest.toString() + \"' uses the \" + AMQDestination.DestSyntax.ADDR + \" addressing syntax\"\n+              + \" which is not supported for AMQP 0-8/0-9/0-9-1 connections.  Use the \" + AMQDestination.DestSyntax.BURL\n+              + \" syntax instead:\\n\"\n+              + \"\\tBURL:<Exchange Class>://<Exchange Name>/[<Destination>]/[<Queue>][?<option>='<value>'[&<option>='<value>']]\\n\");\n+    }\n+}", "filename": "client/src/main/java/org/apache/qpid/client/UnsupportedAddressSyntaxException.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/1f563a876f0cf84148b9126341094cef2538282f", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/2c87f10720b757b19281e831c809339ac349296a", "message": "QPID-6001: [Java Client] Prevent NPE when publishing using ADDR destination to Broker using AMQP 0-9-1 or lower", "bug_id": "qpid-jms-amqp-0-x_49", "file": [{"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/1f563a876f0cf84148b9126341094cef2538282f/client/src/main/java/org/apache/qpid/client/AMQSession_0_8.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/1f563a876f0cf84148b9126341094cef2538282f/client/src/main/java/org/apache/qpid/client/AMQSession_0_8.java", "sha": "ef0d023fb2b45b79ada19dda8d2cd3aeafbaf911", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQSession_0_8.java?ref=1f563a876f0cf84148b9126341094cef2538282f", "patch": "@@ -735,9 +735,14 @@ public void sync() throws AMQException\n     public void resolveAddress(AMQDestination dest,\n                                               boolean isConsumer,\n                                               boolean noLocal) throws AMQException\n+    {\n+        throwUnsupportedAddressingSyntax();\n+    }\n+\n+    void throwUnsupportedAddressingSyntax()\n     {\n         throw new UnsupportedOperationException(\"The new addressing based syntax is \"\n-                + \"not supported for AMQP 0-8/0-9 versions\");\n+                + \"not supported for AMQP 0-8/0-9/0-9-1 versions\");\n     }\n \n     protected void flushAcknowledgments()", "filename": "client/src/main/java/org/apache/qpid/client/AMQSession_0_8.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/1f563a876f0cf84148b9126341094cef2538282f/client/src/main/java/org/apache/qpid/client/BasicMessageProducer_0_8.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/1f563a876f0cf84148b9126341094cef2538282f/client/src/main/java/org/apache/qpid/client/BasicMessageProducer_0_8.java", "sha": "ed517d38a7e721840e14c4d7fcd8eabf10e47cb4", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/BasicMessageProducer_0_8.java?ref=1f563a876f0cf84148b9126341094cef2538282f", "patch": "@@ -57,6 +57,12 @@\n \n     void declareDestination(AMQDestination destination)\n     {\n+\n+        if (destination.getDestSyntax() == AMQDestination.DestSyntax.ADDR)\n+        {\n+            getSession().throwUnsupportedAddressingSyntax();\n+        }\n+\n         if(getSession().isDeclareExchanges())\n         {\n             final MethodRegistry methodRegistry = getSession().getMethodRegistry();", "filename": "client/src/main/java/org/apache/qpid/client/BasicMessageProducer_0_8.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/8a913be98454760afa99ce3128f6a38bcb1371a3", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/fe50c85379e49dabb4b836229c2dacbc12d5a246", "message": "QPID-5884 : The broker should not NPE if it receives a SASL Init request where no mechanism is provided", "bug_id": "qpid-jms-amqp-0-x_50", "file": [{"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/8a913be98454760afa99ce3128f6a38bcb1371a3/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/8a913be98454760afa99ce3128f6a38bcb1371a3/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java", "sha": "75b0d7be1914eb4de04fa05df750f1c1a8eb45ec", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java?ref=8a913be98454760afa99ce3128f6a38bcb1371a3", "patch": "@@ -851,14 +851,14 @@ public byte getMajorVersion()\n \n     public void receiveSaslInit(final SaslInit saslInit)\n     {\n-        Symbol mechanism = saslInit.getMechanism();\n+        String mechanism = saslInit.getMechanism() == null ? null : saslInit.getMechanism().toString();\n         final Binary initialResponse = saslInit.getInitialResponse();\n         byte[] response = initialResponse == null ? new byte[0] : initialResponse.getArray();\n \n \n         try\n         {\n-            _saslServer = _saslServerProvider.getSaslServer(mechanism.toString(), \"localhost\");\n+            _saslServer = _saslServerProvider.getSaslServer(mechanism, \"localhost\");\n \n             // Process response from the client\n             byte[] challenge = _saslServer.evaluateResponse(response != null ? response : new byte[0]);", "filename": "amqp-1-0-common/src/main/java/org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/dc3d6e917d76971963f550a0705b944c7bdae92a", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/f63f2e2894dff71b82d6c432e3df2fd5db035b30", "message": "QPID-5766: Intitialisation of StatisticsCounter objects can lead to NPE.\n\nPatch Supplied by Andrew MacBean <andymacbean@gmail.com>.", "bug_id": "qpid-jms-amqp-0-x_51", "file": [{"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java", "sha": "e6d7f44e0c81046c4a143ed095a222aa846ad430", "changes": 18, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java?ref=dc3d6e917d76971963f550a0705b944c7bdae92a", "patch": "@@ -82,7 +82,7 @@\n     private BrokerOptions _brokerOptions;\n \n     private Timer _reportingTimer;\n-    private StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n+    private final StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n \n     @ManagedAttributeField\n     private String _defaultVirtualHost;\n@@ -119,7 +119,10 @@ public BrokerAdapter(Map<String, Object> attributes,\n             authManager.addUser(BrokerOptions.MANAGEMENT_MODE_USER_NAME, _brokerOptions.getManagementModePassword());\n             _managementModeAuthenticationProvider = authManager;\n         }\n-        initialiseStatistics();\n+        _messagesDelivered = new StatisticsCounter(\"messages-delivered\");\n+        _dataDelivered = new StatisticsCounter(\"bytes-delivered\");\n+        _messagesReceived = new StatisticsCounter(\"messages-received\");\n+        _dataReceived = new StatisticsCounter(\"bytes-received\");\n     }\n \n     public void onValidate()\n@@ -243,9 +246,6 @@ private void activate()\n             addVirtualHostNode(virtualHostNode);\n         }\n \n-\n-        initialiseStatistics();\n-\n         initialiseStatisticsReporting();\n        // changeChildState(State.ACTIVE, false);\n         if (isManagementMode())\n@@ -995,14 +995,6 @@ public void resetStatistics()\n         }\n     }\n \n-    public void initialiseStatistics()\n-    {\n-        _messagesDelivered = new StatisticsCounter(\"messages-delivered\");\n-        _dataDelivered = new StatisticsCounter(\"bytes-delivered\");\n-        _messagesReceived = new StatisticsCounter(\"messages-received\");\n-        _dataReceived = new StatisticsCounter(\"bytes-received\");\n-    }\n-\n     private class StatisticsReportingTask extends TimerTask\n     {\n         private final int DELIVERED = 0;", "filename": "broker-core/src/main/java/org/apache/qpid/server/model/adapter/BrokerAdapter.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/main/java/org/apache/qpid/server/stats/StatisticsGatherer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/main/java/org/apache/qpid/server/stats/StatisticsGatherer.java", "sha": "25f5f4e73f319ce3437206f30765f1711cb2b00b", "changes": 11, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/stats/StatisticsGatherer.java?ref=dc3d6e917d76971963f550a0705b944c7bdae92a", "patch": "@@ -35,17 +35,6 @@\n  */\n public interface StatisticsGatherer\n {\n-    /**\n-     * Initialise the statistics gathering for this object.\n-     * \n-     * This method is responsible for creating any {@link StatisticsCounter}\n-     * objects and for determining whether statistics generation should be\n-     * enabled, by checking broker and system configuration.\n-     * \n-     * @see StatisticsCounter#DISABLE_STATISTICS\n-     */\n-    void initialiseStatistics();\n-    \n     /**\n      * This method is responsible for registering the receipt of a message\n      * with the counters, and also for passing this notification to any parent", "filename": "broker-core/src/main/java/org/apache/qpid/server/stats/StatisticsGatherer.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java", "sha": "cd3d7c889c9d7a349435569ca7df5e77d42ef1d0", "changes": 16, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java?ref=dc3d6e917d76971963f550a0705b944c7bdae92a", "patch": "@@ -110,7 +110,7 @@\n \n     private volatile VirtualHostState _state = VirtualHostState.INITIALISING;\n \n-    private StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n+    private final StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n \n     private final Map<String, LinkRegistry> _linkRegistry = new HashMap<String, LinkRegistry>();\n     private boolean _blocked;\n@@ -173,6 +173,10 @@ public AbstractVirtualHost(final Map<String, Object> attributes, VirtualHostNode\n \n         _defaultDestination = new DefaultDestination(this);\n \n+        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getName());\n+        _dataDelivered = new StatisticsCounter(\"bytes-delivered-\" + getName());\n+        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getName());\n+        _dataReceived = new StatisticsCounter(\"bytes-received-\" + getName());\n     }\n \n     public void onValidate()\n@@ -245,8 +249,6 @@ protected void onOpen()\n \n         registerSystemNodes();\n \n-        initialiseStatistics();\n-\n         Subject.doAs(SecurityManager.getSubjectWithAddedSystemRights(), new PrivilegedAction<Object>()\n         {\n             @Override\n@@ -790,14 +792,6 @@ public void resetStatistics()\n         }\n     }\n \n-    public void initialiseStatistics()\n-    {\n-        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getName());\n-        _dataDelivered = new StatisticsCounter(\"bytes-delivered-\" + getName());\n-        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getName());\n-        _dataReceived = new StatisticsCounter(\"bytes-received-\" + getName());\n-    }\n-\n     public synchronized LinkRegistry getLinkRegistry(String remoteContainerId)\n     {\n         LinkRegistry linkRegistry = _linkRegistry.get(remoteContainerId);", "filename": "broker-core/src/main/java/org/apache/qpid/server/virtualhost/AbstractVirtualHost.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/test/java/org/apache/qpid/server/consumer/MockConsumer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/test/java/org/apache/qpid/server/consumer/MockConsumer.java", "sha": "722535669b52ba0b8146e0852d0205e5fd87ac39", "changes": 4, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/consumer/MockConsumer.java?ref=dc3d6e917d76971963f550a0705b944c7bdae92a", "patch": "@@ -414,10 +414,6 @@ public int compareTo(final Object o)\n \n     private static class MockConnectionModel implements AMQConnectionModel\n     {\n-        @Override\n-        public void initialiseStatistics()\n-        {\n-        }\n \n         @Override\n         public void registerMessageReceived(long messageSize, long timestamp)", "filename": "broker-core/src/test/java/org/apache/qpid/server/consumer/MockConsumer.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/test/java/org/apache/qpid/server/virtualhost/MockVirtualHost.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-core/src/test/java/org/apache/qpid/server/virtualhost/MockVirtualHost.java", "sha": "cec34bd890e642898926efa5e0b77ecca439f61e", "changes": 5, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/virtualhost/MockVirtualHost.java?ref=dc3d6e917d76971963f550a0705b944c7bdae92a", "patch": "@@ -569,11 +569,6 @@ public StatisticsCounter getMessageReceiptStatistics()\n         return null;\n     }\n \n-    public void initialiseStatistics()\n-    {\n-\n-    }\n-\n     public void registerMessageDelivered(long messageSize)\n     {\n ", "filename": "broker-core/src/test/java/org/apache/qpid/server/virtualhost/MockVirtualHost.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java", "sha": "ede51ef21342eb06c50fd83011fbbe9aee790f89", "changes": 17, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java?ref=dc3d6e917d76971963f550a0705b944c7bdae92a", "patch": "@@ -71,7 +71,7 @@\n \n     private final Subject _authorizedSubject = new Subject();\n     private Principal _authorizedPrincipal = null;\n-    private StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n+    private final StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n     private final long _connectionId;\n     private final Object _reference = new Object();\n     private VirtualHostImpl _virtualHost;\n@@ -93,6 +93,11 @@ public ServerConnection(final long connectionId, Broker broker)\n         _connectionId = connectionId;\n         _authorizedSubject.getPrincipals().add(new ConnectionPrincipal(this));\n         _broker = broker;\n+\n+        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getConnectionId());\n+        _dataDelivered = new StatisticsCounter(\"data-delivered-\" + getConnectionId());\n+        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getConnectionId());\n+        _dataReceived = new StatisticsCounter(\"data-received-\" + getConnectionId());\n     }\n \n     public Object getReference()\n@@ -175,8 +180,6 @@ public VirtualHostImpl getVirtualHost()\n     public void setVirtualHost(VirtualHostImpl virtualHost)\n     {\n         _virtualHost = virtualHost;\n-\n-        initialiseStatistics();\n     }\n \n     @Override\n@@ -455,14 +458,6 @@ public void resetStatistics()\n         _dataReceived.reset();\n     }\n \n-    public void initialiseStatistics()\n-    {\n-        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getConnectionId());\n-        _dataDelivered = new StatisticsCounter(\"data-delivered-\" + getConnectionId());\n-        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getConnectionId());\n-        _dataReceived = new StatisticsCounter(\"data-received-\" + getConnectionId());\n-    }\n-\n     /**\n      * @return authorizedSubject\n      */", "filename": "broker-plugins/amqp-0-10-protocol/src/main/java/org/apache/qpid/server/protocol/v0_10/ServerConnection.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java", "sha": "b28e9bc23c2f073e25b2af984799c052dcafed15", "changes": 16, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java?ref=dc3d6e917d76971963f550a0705b944c7bdae92a", "patch": "@@ -154,7 +154,7 @@\n     private long _maxFrameSize;\n     private final AtomicBoolean _closing = new AtomicBoolean(false);\n \n-    private StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n+    private final StatisticsCounter _messagesDelivered, _dataDelivered, _messagesReceived, _dataReceived;\n \n     private NetworkConnection _network;\n     private Sender<ByteBuffer> _sender;\n@@ -201,12 +201,14 @@ public Void run()\n \n                 _closeWhenNoRoute = _broker.getConnection_closeWhenNoRoute();\n \n-                initialiseStatistics();\n-\n                 return null;\n             }\n         });\n \n+        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getSessionID());\n+        _dataDelivered = new StatisticsCounter(\"data-delivered-\" + getSessionID());\n+        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getSessionID());\n+        _dataReceived = new StatisticsCounter(\"data-received-\" + getSessionID());\n     }\n \n     private <T> T runAsSubject(PrivilegedAction<T> action)\n@@ -1500,14 +1502,6 @@ public void resetStatistics()\n         _dataReceived.reset();\n     }\n \n-    public void initialiseStatistics()\n-    {\n-        _messagesDelivered = new StatisticsCounter(\"messages-delivered-\" + getSessionID());\n-        _dataDelivered = new StatisticsCounter(\"data-delivered-\" + getSessionID());\n-        _messagesReceived = new StatisticsCounter(\"messages-received-\" + getSessionID());\n-        _dataReceived = new StatisticsCounter(\"data-received-\" + getSessionID());\n-    }\n-\n     public boolean isSessionNameUnique(byte[] name)\n     {\n         // 0-8/0-9/0-9-1 sessions don't have names", "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Connection_1_0.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dc3d6e917d76971963f550a0705b944c7bdae92a/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Connection_1_0.java", "sha": "6d780461f46af4698816f3074a9da8af529de45e", "changes": 19, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Connection_1_0.java?ref=dc3d6e917d76971963f550a0705b944c7bdae92a", "patch": "@@ -76,10 +76,7 @@\n     private final CopyOnWriteArrayList<SessionModelListener> _sessionListeners =\n             new CopyOnWriteArrayList<SessionModelListener>();\n \n-    private StatisticsCounter _messageDeliveryStatistics = new StatisticsCounter();\n-    private StatisticsCounter _messageReceiptStatistics = new StatisticsCounter();\n-    private StatisticsCounter _dataDeliveryStatistics = new StatisticsCounter();\n-    private StatisticsCounter _dataReceiptStatistics = new StatisticsCounter();\n+    private final StatisticsCounter _messageDeliveryStatistics, _messageReceiptStatistics, _dataDeliveryStatistics, _dataReceiptStatistics;\n \n     private final LogSubject _logSubject = new LogSubject()\n     {\n@@ -118,7 +115,10 @@ public Connection_1_0(Broker broker,\n         _connectionId = connectionId;\n         _subject.getPrincipals().add(new ConnectionPrincipal(this));\n         _subjectCreator = subjectCreator;\n-\n+        _messageDeliveryStatistics = new StatisticsCounter(\"messages-delivered-\" + getConnectionId());\n+        _dataDeliveryStatistics = new StatisticsCounter(\"data-delivered-\" + getConnectionId());\n+        _messageReceiptStatistics = new StatisticsCounter(\"messages-received-\" + getConnectionId());\n+        _dataReceiptStatistics = new StatisticsCounter(\"data-received-\" + getConnectionId());\n     }\n \n     public Object getReference()\n@@ -367,15 +367,6 @@ public boolean isStopped()\n         return _stopped;\n     }\n \n-    @Override\n-    public void initialiseStatistics()\n-    {\n-        _messageDeliveryStatistics = new StatisticsCounter(\"messages-delivered-\" + getConnectionId());\n-        _dataDeliveryStatistics = new StatisticsCounter(\"data-delivered-\" + getConnectionId());\n-        _messageReceiptStatistics = new StatisticsCounter(\"messages-received-\" + getConnectionId());\n-        _dataReceiptStatistics = new StatisticsCounter(\"data-received-\" + getConnectionId());\n-    }\n-\n     @Override\n     public void registerMessageReceived(long messageSize, long timestamp)\n     {", "filename": "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/Connection_1_0.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dc3d6e917d76971963f550a0705b944c7bdae92a/systests/src/main/java/org/apache/qpid/client/ssl/SSLTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dc3d6e917d76971963f550a0705b944c7bdae92a/systests/src/main/java/org/apache/qpid/client/ssl/SSLTest.java", "sha": "8225fce3a33787b2c3454f7aced0c0385505f7b0", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/client/ssl/SSLTest.java?ref=dc3d6e917d76971963f550a0705b944c7bdae92a", "patch": "@@ -43,9 +43,13 @@\n import org.apache.qpid.server.model.Transport;\n import org.apache.qpid.test.utils.QpidBrokerTestCase;\n import org.apache.qpid.test.utils.TestBrokerConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class SSLTest extends QpidBrokerTestCase\n {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SSLTest.class);\n+\n     private static final String CERT_ALIAS_APP1 = \"app1\";\n     private static final String CERT_ALIAS_APP2 = \"app2\";\n \n@@ -209,6 +213,7 @@ public void testVerifyHostNameWithIncorrectHostname() throws Exception\n \n     private void verifyExceptionCausesContains(Exception e, String expectedString)\n     {\n+        LOGGER.debug(\"verifying that the following exception contains \" + expectedString, e);\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n         e.printStackTrace(new PrintStream(bout));\n         String strace = bout.toString();", "filename": "systests/src/main/java/org/apache/qpid/client/ssl/SSLTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a6299b644733aedc951b342697f5b17f9158a0b6", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a776ace41aa0b5f571159888ef52f9fc2124325a", "message": "QPID-6686: Fix NPE thrown when accessing FileLogger#logFiles when FileLogger is in ERRORED state due to attribute value resolution errors", "bug_id": "qpid-jms-amqp-0-x_52", "file": [{"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/main/java/org/apache/qpid/server/logging/BrokerFileLoggerImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/main/java/org/apache/qpid/server/logging/BrokerFileLoggerImpl.java", "sha": "551d2e738c21680b02eeba3efa863a838cc40e8c", "changes": 9, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/logging/BrokerFileLoggerImpl.java?ref=a6299b644733aedc951b342697f5b17f9158a0b6", "patch": "@@ -24,6 +24,7 @@\n import java.io.IOError;\n import java.io.IOException;\n import java.security.AccessControlException;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -151,7 +152,7 @@ public String getLayout()\n     @Override\n     public List<LogFileDetails> getLogFiles()\n     {\n-        return _rolloverWatcher.getLogFileDetails();\n+        return _rolloverWatcher == null ? Collections.<LogFileDetails>emptyList() :_rolloverWatcher.getLogFileDetails();\n     }\n \n     @Override\n@@ -162,7 +163,7 @@ public Content getFile(final String fileName)\n             throw new AccessControlException(\"Permission denied to access log content\");\n         }\n \n-        return _rolloverWatcher.getFileContent(fileName);\n+        return _rolloverWatcher == null ? null : _rolloverWatcher.getFileContent(fileName);\n     }\n \n     @Override\n@@ -173,7 +174,7 @@ public Content getFiles(@Param(name = \"fileName\") Set<String> fileName)\n             throw new AccessControlException(\"Permission denied to access log content\");\n         }\n \n-        return _rolloverWatcher.getFilesAsZippedContent(fileName);\n+        return _rolloverWatcher == null ? null :_rolloverWatcher.getFilesAsZippedContent(fileName);\n     }\n \n     @Override\n@@ -184,7 +185,7 @@ public Content getAllFiles()\n             throw new AccessControlException(\"Permission denied to access log content\");\n         }\n \n-        return _rolloverWatcher.getAllFilesAsZippedContent();\n+        return _rolloverWatcher == null ? null : _rolloverWatcher.getAllFilesAsZippedContent();\n     }\n \n     @Override", "filename": "broker-core/src/main/java/org/apache/qpid/server/logging/BrokerFileLoggerImpl.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLogger.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLogger.java", "sha": "6bc4af36a08d0977b350f7763a862c271f18e79f", "changes": 1, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLogger.java?ref=a6299b644733aedc951b342697f5b17f9158a0b6", "patch": "@@ -21,7 +21,6 @@\n package org.apache.qpid.server.logging;\n \n \n-import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n ", "filename": "broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLogger.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLoggerImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLoggerImpl.java", "sha": "cf38983f05a15bbce13ab5fa794fc47fdc913aa6", "changes": 9, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLoggerImpl.java?ref=a6299b644733aedc951b342697f5b17f9158a0b6", "patch": "@@ -22,6 +22,7 @@\n \n import java.io.File;\n import java.security.AccessControlException;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -140,7 +141,7 @@ public String getLayout()\n     @Override\n     public List<LogFileDetails> getLogFiles()\n     {\n-        return _rolloverWatcher.getLogFileDetails();\n+        return _rolloverWatcher == null ? Collections.<LogFileDetails>emptyList() : _rolloverWatcher.getLogFileDetails();\n     }\n \n     @Override\n@@ -151,7 +152,7 @@ public Content getFile(final String fileName)\n             throw new AccessControlException(\"Permission denied to access log content\");\n         }\n \n-        return _rolloverWatcher.getFileContent(fileName);\n+        return _rolloverWatcher == null ? null : _rolloverWatcher.getFileContent(fileName);\n     }\n \n     @Override\n@@ -162,7 +163,7 @@ public Content getFiles(@Param(name = \"fileName\") Set<String> fileName)\n             throw new AccessControlException(\"Permission denied to access log content\");\n         }\n \n-        return _rolloverWatcher.getFilesAsZippedContent(fileName);\n+        return _rolloverWatcher == null ? null : _rolloverWatcher.getFilesAsZippedContent(fileName);\n     }\n \n \n@@ -174,7 +175,7 @@ public Content getAllFiles()\n             throw new AccessControlException(\"Permission denied to access log content\");\n         }\n \n-        return _rolloverWatcher.getAllFilesAsZippedContent();\n+        return _rolloverWatcher == null ? null : _rolloverWatcher.getAllFilesAsZippedContent();\n     }\n \n     @Override", "filename": "broker-core/src/main/java/org/apache/qpid/server/logging/VirtualHostFileLoggerImpl.java"}, {"additions": 120, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/test/java/org/apache/qpid/server/logging/BrokerFileLoggerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/test/java/org/apache/qpid/server/logging/BrokerFileLoggerTest.java", "sha": "e5b80368ca828fd912584cfe24e602591c12c23e", "changes": 120, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/logging/BrokerFileLoggerTest.java?ref=a6299b644733aedc951b342697f5b17f9158a0b6", "patch": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging;\n+\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.qpid.server.configuration.updater.TaskExecutor;\n+import org.apache.qpid.server.configuration.updater.TaskExecutorImpl;\n+import org.apache.qpid.server.model.Broker;\n+import org.apache.qpid.server.model.BrokerLogger;\n+import org.apache.qpid.server.model.BrokerModel;\n+import org.apache.qpid.server.model.ConfiguredObject;\n+import org.apache.qpid.server.model.Model;\n+import org.apache.qpid.server.model.State;\n+import org.apache.qpid.server.model.SystemConfig;\n+import org.apache.qpid.server.security.SecurityManager;\n+import org.apache.qpid.test.utils.QpidTestCase;\n+import org.apache.qpid.util.FileUtils;\n+\n+public class BrokerFileLoggerTest extends QpidTestCase\n+{\n+    private TaskExecutor _taskExecutor;\n+    private File _baseFolder;\n+    private File _logFile;\n+    private Broker _broker;\n+\n+    @Override\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        _taskExecutor = new TaskExecutorImpl();\n+        _taskExecutor.start();\n+\n+        Model model = BrokerModel.getInstance();\n+\n+        org.apache.qpid.server.security.SecurityManager securityManager = mock(SecurityManager.class);\n+        EventLogger eventLogger = mock(EventLogger.class);\n+\n+        SystemConfig<?> systemConfig = mock(SystemConfig.class);\n+        when(systemConfig.getModel()).thenReturn(model);\n+        when(systemConfig.getChildExecutor()).thenReturn(_taskExecutor);\n+        when(systemConfig.getEventLogger()).thenReturn(eventLogger);\n+        doReturn(SystemConfig.class).when(systemConfig).getCategoryClass();\n+\n+        _broker = mock(Broker.class);\n+        when(_broker.getSecurityManager()).thenReturn(securityManager);\n+        when(_broker.getModel()).thenReturn(model);\n+        when(_broker.getChildExecutor()).thenReturn(_taskExecutor);\n+        when(_broker.getParent(SystemConfig.class)).thenReturn(systemConfig);\n+        doReturn(Broker.class).when(_broker).getCategoryClass();\n+\n+        _baseFolder = new File(TMP_FOLDER, \"test-sub-folder\");\n+        _logFile = new File(_baseFolder, \"tmp-broker-host.log.\" + System.currentTimeMillis());\n+        if (_baseFolder.exists())\n+        {\n+            FileUtils.delete(_baseFolder, true);\n+        }\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception\n+    {\n+        try\n+        {\n+            _broker.close();\n+            _taskExecutor.stopImmediately();\n+            if (_baseFolder != null && _baseFolder.exists())\n+            {\n+                FileUtils.delete(_baseFolder, true);\n+            }\n+        }\n+        finally\n+        {\n+            super.tearDown();\n+        }\n+    }\n+\n+    public void testGetLogFilesOnResolutionErrors()\n+    {\n+        Map<String, Object> attributes = new HashMap<>();\n+        attributes.put(BrokerLogger.NAME, getTestName());\n+        attributes.put(ConfiguredObject.TYPE, BrokerFileLogger.TYPE);\n+        attributes.put(BrokerFileLogger.FILE_NAME, _logFile.getPath());\n+        attributes.put(BrokerFileLogger.MAX_FILE_SIZE, \"invalid\");\n+\n+        BrokerFileLogger logger = new BrokerFileLoggerImpl(attributes, _broker);\n+        logger.open();\n+\n+        assertEquals(\"Unexpected state\", State.ERRORED, logger.getState());\n+\n+        Collection<LogFileDetails> logFileDetails = logger.getLogFiles();\n+        assertTrue(\"File details should be empty\", logFileDetails.isEmpty());\n+    }\n+\n+}", "filename": "broker-core/src/test/java/org/apache/qpid/server/logging/BrokerFileLoggerTest.java"}, {"additions": 17, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/test/java/org/apache/qpid/server/logging/VirtualHostLoggerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a6299b644733aedc951b342697f5b17f9158a0b6/broker-core/src/test/java/org/apache/qpid/server/logging/VirtualHostLoggerTest.java", "sha": "0e3330b22fcf34528acbb8a27bdd3853c8482ace", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/logging/VirtualHostLoggerTest.java?ref=a6299b644733aedc951b342697f5b17f9158a0b6", "patch": "@@ -203,6 +203,23 @@ public void testGetLogFiles()\n         }\n     }\n \n+    public void testGetLogFilesOnResolutionErrors()\n+    {\n+        Map<String, Object> attributes = new HashMap<>();\n+        attributes.put(VirtualHostLogger.NAME, getTestName());\n+        attributes.put(ConfiguredObject.TYPE, VirtualHostFileLogger.TYPE);\n+        attributes.put(VirtualHostFileLogger.FILE_NAME, _logFile.getPath());\n+        attributes.put(VirtualHostFileLogger.MAX_FILE_SIZE, \"invalid\");\n+\n+        VirtualHostFileLogger logger = new VirtualHostFileLoggerImpl(attributes, _virtualHost);\n+        logger.open();\n+\n+        assertEquals(\"Unexpected state\", State.ERRORED, logger.getState());\n+\n+        Collection<LogFileDetails> logFileDetails = logger.getLogFiles();\n+        assertTrue(\"File details should be empty\", logFileDetails.isEmpty());\n+    }\n+\n     private VirtualHostLogger createVirtualHostLogger()\n     {\n         return createVirtualHostLogger(Collections.<String,Object>emptyMap());", "filename": "broker-core/src/test/java/org/apache/qpid/server/logging/VirtualHostLoggerTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/73e8d1729db9b28a9b95738a988996fb9e23c4aa", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/f15a62a7603959080faa9eb7b1bf12eec479bf40", "message": "QPID-5785: [Java Broker] Fix NPE when a topic exchange is closed after a message filter has been added to an existing binding.\n\nThis corrects a regression introduced by QPID-5709 that was causing a NPE to appear in the test log for QueueBindingTest.", "bug_id": "qpid-jms-amqp-0-x_53", "file": [{"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/73e8d1729db9b28a9b95738a988996fb9e23c4aa/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/73e8d1729db9b28a9b95738a988996fb9e23c4aa/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java", "sha": "3e5d7dedb4c4be78f3c39f7e1057f70487a31b3e", "changes": 19, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java?ref=73e8d1729db9b28a9b95738a988996fb9e23c4aa", "patch": "@@ -76,8 +76,10 @@ protected synchronized void onBindingUpdated(final BindingImpl binding, final Ma\n         assert queue != null;\n         assert bindingKey != null;\n \n-        _logger.debug(\"Updating binding of queue \" + queue.getName() + \" with routing key \" + bindingKey);\n-\n+        if (_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"Updating binding of queue \" + queue.getName() + \" with routing key \" + bindingKey);\n+        }\n \n         String routingKey = TopicNormalizer.normalize(bindingKey);\n \n@@ -87,6 +89,7 @@ protected synchronized void onBindingUpdated(final BindingImpl binding, final Ma\n             if (_bindings.containsKey(binding))\n             {\n                 Map<String, Object> oldArgs = _bindings.get(binding);\n+                _bindings.put(binding, args);\n                 TopicExchangeResult result = _topicExchangeResults.get(routingKey);\n \n                 if (FilterSupport.argumentsContainFilter(args))\n@@ -136,8 +139,10 @@ protected synchronized void registerQueue(final BindingImpl binding) throws AMQI\n         assert queue != null;\n         assert bindingKey != null;\n \n-        _logger.debug(\"Registering queue \" + queue.getName() + \" with routing key \" + bindingKey);\n-\n+        if (_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"Registering queue \" + queue.getName() + \" with routing key \" + bindingKey);\n+        }\n \n         String routingKey = TopicNormalizer.normalize(bindingKey);\n \n@@ -252,6 +257,12 @@ private synchronized boolean deregisterQueue(final BindingImpl binding)\n         if(_bindings.containsKey(binding))\n         {\n             Map<String,Object> bindingArgs = _bindings.remove(binding);\n+\n+            if (_logger.isDebugEnabled())\n+            {\n+                _logger.debug(\"deregisterQueue \" + bindingArgs);\n+            }\n+\n             String bindingKey = TopicNormalizer.normalize(binding.getBindingKey());\n             TopicExchangeResult result = _topicExchangeResults.get(bindingKey);\n ", "filename": "broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java"}, {"additions": 170, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/73e8d1729db9b28a9b95738a988996fb9e23c4aa/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/73e8d1729db9b28a9b95738a988996fb9e23c4aa/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java", "sha": "d7779390b16e051f08f02fb42a8ca3da79df216d", "changes": 208, "status": "modified", "deletions": 38, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java?ref=73e8d1729db9b28a9b95738a988996fb9e23c4aa", "patch": "@@ -20,9 +20,11 @@\n  */\n package org.apache.qpid.server.exchange;\n \n+import static org.apache.qpid.common.AMQPFilterTypes.*;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -31,6 +33,7 @@\n import org.junit.Assert;\n \n import org.apache.qpid.server.binding.BindingImpl;\n+import org.apache.qpid.server.message.AMQMessageHeader;\n import org.apache.qpid.server.message.InstanceProperties;\n import org.apache.qpid.server.message.MessageReference;\n import org.apache.qpid.server.message.ServerMessage;\n@@ -64,6 +67,7 @@ public void setUp() throws Exception\n         attributes.put(Exchange.DURABLE, false);\n \n         _exchange = new TopicExchange(attributes, _vhost);\n+        _exchange.open();\n     }\n \n     @Override\n@@ -94,7 +98,7 @@ public void tearDown() throws Exception\n     public void testNoRoute() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a*#b\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b\", 0l);\n@@ -105,7 +109,7 @@ public void testNoRoute() throws Exception\n     public void testDirectMatch() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"ab\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b\",0l);\n@@ -127,7 +131,7 @@ public void testDirectMatch() throws Exception\n     public void testStarMatch() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a*\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b\",0l);\n@@ -158,7 +162,7 @@ public void testStarMatch() throws Exception\n     public void testHashMatch() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.#\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.#\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b.c\",0l);\n@@ -209,7 +213,7 @@ public void testHashMatch() throws Exception\n     public void testMidHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null);\n \n         routeMessage(\"a.c.d.b\",0l);\n \n@@ -234,7 +238,7 @@ public void testMidHash() throws Exception\n     public void testMatchAfterHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*.#.b.c\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*.#.b.c\", queue, _exchange, null);\n \n \n         int queueCount = routeMessage(\"a.c.b.b\",0l);\n@@ -272,11 +276,11 @@ public void testMatchAfterHash() throws Exception\n     public void testHashAfterHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(),\n-                                                              \"a.*.#.b.c.#.d\",\n-                                                              queue,\n-                                                              _exchange,\n-                                                              null));\n+        createBinding(UUID.randomUUID(),\n+                      \"a.*.#.b.c.#.d\",\n+                      queue,\n+                      _exchange,\n+                      null);\n \n         int queueCount = routeMessage(\"a.c.b.b.c\",0l);\n         Assert.assertEquals(\"Message should not route to any queues\", 0, queueCount);\n@@ -297,7 +301,7 @@ public void testHashAfterHash() throws Exception\n     public void testHashHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.#.*.#.d\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.#.*.#.d\", queue, _exchange, null);\n \n         int queueCount = routeMessage(\"a.c.b.b.c\",0l);\n         Assert.assertEquals(\"Message should not route to any queues\", 0, queueCount);\n@@ -318,7 +322,7 @@ public void testHashHash() throws Exception\n     public void testSubMatchFails() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b.c.d\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.b.c.d\", queue, _exchange, null);\n \n         int queueCount = routeMessage(\"a.b.c\",0l);\n         Assert.assertEquals(\"Message should not route to any queues\", 0, queueCount);\n@@ -327,27 +331,10 @@ public void testSubMatchFails() throws Exception\n \n     }\n \n-    private int routeMessage(String routingKey, long messageNumber)\n-    {\n-        ServerMessage message = mock(ServerMessage.class);\n-        when(message.getInitialRoutingAddress()).thenReturn(routingKey);\n-        List<? extends BaseQueue> queues = _exchange.route(message, routingKey, InstanceProperties.EMPTY);\n-        MessageReference ref = mock(MessageReference.class);\n-        when(ref.getMessage()).thenReturn(message);\n-        when(message.newReference()).thenReturn(ref);\n-        when(message.getMessageNumber()).thenReturn(messageNumber);\n-        for(BaseQueue q : queues)\n-        {\n-            q.enqueue(message, null);\n-        }\n-\n-        return queues.size();\n-    }\n-\n     public void testMoreRouting() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null));\n+       createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null);\n \n \n         int queueCount = routeMessage(\"a.b.c\",0l);\n@@ -360,7 +347,7 @@ public void testMoreRouting() throws Exception\n     public void testMoreQueue() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null);\n \n \n         int queueCount = routeMessage(\"a\",0l);\n@@ -370,11 +357,119 @@ public void testMoreQueue() throws Exception\n \n     }\n \n-    private static BindingImpl createBinding(UUID id,\n-                                                final String bindingKey,\n-                                                final AMQQueue queue,\n-                                                final ExchangeImpl exchange,\n-                                                final Map<String, Object> arguments)\n+    public void testRouteWithJMSSelector() throws Exception\n+    {\n+        AMQQueue<?> queue = createQueue(\"queue1\");\n+        final String bindingKey = \"bindingKey\";\n+\n+        Map<String, Object> bindArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 5\");\n+        createBinding(UUID.randomUUID(), bindingKey, queue, _exchange, bindArgs);\n+\n+        ServerMessage matchMsg1 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader1 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        when(matchMsg1.getMessageHeader()).thenReturn(msgHeader1);\n+        routeMessage(matchMsg1, bindingKey, 1);\n+        Assert.assertEquals(\"First message should be routed to queue\", 1, queue.getQueueDepthMessages());\n+\n+        ServerMessage nonmatchMsg2 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader2 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 5));\n+        when(nonmatchMsg2.getMessageHeader()).thenReturn(msgHeader2);\n+        routeMessage(nonmatchMsg2, bindingKey, 2);\n+        Assert.assertEquals(\"Second message should not be routed to queue\", 1, queue.getQueueDepthMessages());\n+\n+        ServerMessage nonmatchMsg3 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader3 = createMessageHeader(Collections.<String, Object>emptyMap());\n+        when(nonmatchMsg3.getMessageHeader()).thenReturn(msgHeader3);\n+        routeMessage(nonmatchMsg3, bindingKey, 3);\n+        Assert.assertEquals(\"Third message should not be routed to queue\", 1, queue.getQueueDepthMessages());\n+\n+        ServerMessage matchMsg4 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader4 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 7));\n+        when(matchMsg4.getMessageHeader()).thenReturn(msgHeader4);\n+        routeMessage(matchMsg4, bindingKey, 4);\n+        Assert.assertEquals(\"First message should be routed to queue\", 2, queue.getQueueDepthMessages());\n+\n+    }\n+\n+    public void testUpdateBindingReplacingSelector() throws Exception\n+    {\n+        AMQQueue<?> queue = createQueue(\"queue1\");\n+        final String bindingKey = \"a\";\n+\n+        Map<String, Object> originalArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 5\");\n+        createBinding(UUID.randomUUID(), bindingKey, queue, _exchange, originalArgs);\n+\n+        AMQMessageHeader mgsHeader1 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        ServerMessage msg1 = mock(ServerMessage.class);\n+        when(msg1.getMessageHeader()).thenReturn(mgsHeader1);\n+\n+        routeMessage(msg1, bindingKey, 1);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Update the binding\n+        Map<String, Object> newArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 6\");\n+        _exchange.replaceBinding(bindingKey, queue, newArgs);\n+\n+        // Message that would have matched the original selector but not the new\n+        AMQMessageHeader mgsHeader2 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        ServerMessage msg2 = mock(ServerMessage.class);\n+        when(msg2.getMessageHeader()).thenReturn(mgsHeader2);\n+\n+        routeMessage(msg2, bindingKey, 2);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Message that matches only the second\n+        AMQMessageHeader mgsHeader3 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 7));\n+        ServerMessage msg3 = mock(ServerMessage.class);\n+        when(msg3.getMessageHeader()).thenReturn(mgsHeader3);\n+\n+        routeMessage(msg3, bindingKey, 2);\n+        Assert.assertEquals(2, queue.getQueueDepthMessages());\n+\n+    }\n+\n+    // This demonstrates QPID-5785.  Deleting the exchange after this combination of binding\n+    // updates generated a NPE\n+    public void testUpdateBindingAddingSelector() throws Exception\n+    {\n+        AMQQueue<?> queue = createQueue(\"queue1\");\n+        final String bindingKey = \"a\";\n+\n+        BindingImpl binding = createBinding(UUID.randomUUID(), bindingKey, queue, _exchange, null);\n+\n+        ServerMessage msg1 = mock(ServerMessage.class);\n+\n+        routeMessage(msg1, bindingKey, 1);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Update the binding adding selector\n+        Map<String, Object> newArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 6\");\n+        _exchange.replaceBinding(bindingKey, queue, newArgs);\n+\n+        // Message that does not match the new selector\n+        AMQMessageHeader mgsHeader2 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        ServerMessage msg2 = mock(ServerMessage.class);\n+        when(msg2.getMessageHeader()).thenReturn(mgsHeader2);\n+\n+        routeMessage(msg2, bindingKey, 2);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Message that matches the selector\n+        AMQMessageHeader mgsHeader3 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 7));\n+        ServerMessage msg3 = mock(ServerMessage.class);\n+        when(msg3.getMessageHeader()).thenReturn(mgsHeader3);\n+\n+        routeMessage(msg3, bindingKey, 2);\n+        Assert.assertEquals(2, queue.getQueueDepthMessages());\n+\n+        _exchange.delete();\n+    }\n+\n+    private BindingImpl createBinding(UUID id,\n+                                      String bindingKey,\n+                                      AMQQueue queue,\n+                                      ExchangeImpl exchange,\n+                                      Map<String, Object> arguments)\n     {\n         Map<String, Object> attributes = new HashMap<String, Object>();\n         attributes.put(Binding.NAME, bindingKey);\n@@ -383,10 +478,47 @@ private static BindingImpl createBinding(UUID id,\n             attributes.put(Binding.ARGUMENTS, arguments);\n         }\n         attributes.put(Binding.ID, id);\n-        BindingImpl binding = new BindingImpl(attributes, queue, exchange);\n+\n+        BindingImpl binding = (BindingImpl) _vhost.getObjectFactory().create(Binding.class, attributes, queue, exchange);\n         binding.open();\n         return binding;\n     }\n \n+    private int routeMessage(String routingKey, long messageNumber)\n+    {\n+        ServerMessage message = mock(ServerMessage.class);\n+        return routeMessage(message, routingKey, messageNumber);\n+    }\n+\n+    private int routeMessage(ServerMessage message, String routingKey, long messageNumber)\n+    {\n+        when(message.getInitialRoutingAddress()).thenReturn(routingKey);\n+        List<? extends BaseQueue> queues = _exchange.route(message, routingKey, InstanceProperties.EMPTY);\n+        MessageReference ref = mock(MessageReference.class);\n+        when(ref.getMessage()).thenReturn(message);\n+        when(message.newReference()).thenReturn(ref);\n+        when(message.getMessageNumber()).thenReturn(messageNumber);\n+        for(BaseQueue q : queues)\n+        {\n+            q.enqueue(message, null);\n+        }\n+\n+        return queues.size();\n+    }\n+\n+    private AMQMessageHeader createMessageHeader(Map<String, Object> headers)\n+    {\n+        AMQMessageHeader messageHeader = mock(AMQMessageHeader.class);\n+        for(Map.Entry<String, Object> entry : headers.entrySet())\n+        {\n+            String key = entry.getKey();\n+            Object value = entry.getValue();\n+\n+            when(messageHeader.containsHeader(key)).thenReturn(true);\n+            when(messageHeader.getHeader(key)).thenReturn(value);\n+        }\n+        return messageHeader;\n+    }\n+\n \n }", "filename": "broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/18ad506e6eb72b579eb3678615f0d34c52dc26e7", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/48cc8d2ac0dc0912362722f438798d02d2ff778a", "message": "QPID-5088 : [Java Broker] fix NPE when null queue name is looked up in the queue registry", "bug_id": "qpid-jms-amqp-0-x_54", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/18ad506e6eb72b579eb3678615f0d34c52dc26e7/broker/src/main/java/org/apache/qpid/server/queue/DefaultQueueRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/18ad506e6eb72b579eb3678615f0d34c52dc26e7/broker/src/main/java/org/apache/qpid/server/queue/DefaultQueueRegistry.java", "sha": "7d091dbf733f411975523c506acc603574c73782", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/DefaultQueueRegistry.java?ref=18ad506e6eb72b579eb3678615f0d34c52dc26e7", "patch": "@@ -81,7 +81,7 @@ public void unregisterQueue(String name)\n \n     public AMQQueue getQueue(String queue)\n     {\n-        return _queueMap.get(queue);\n+        return queue == null ? null : _queueMap.get(queue);\n     }\n \n     public void addRegistryChangeListener(RegistryChangeListener listener)", "filename": "broker/src/main/java/org/apache/qpid/server/queue/DefaultQueueRegistry.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/e2b78bdf24279f0b12c55242112c52c7cdb4f8cc", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ad4ea1ee38f6f7fc2611c3a438bc54622881a7c5", "message": "QPID-6591: Fix NPE which might occur in VHN configuration thread when VH is get closed from other thread and VH Principal become null", "bug_id": "qpid-jms-amqp-0-x_55", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/e2b78bdf24279f0b12c55242112c52c7cdb4f8cc/broker-core/src/main/java/org/apache/qpid/server/configuration/updater/TaskExecutorImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/e2b78bdf24279f0b12c55242112c52c7cdb4f8cc/broker-core/src/main/java/org/apache/qpid/server/configuration/updater/TaskExecutorImpl.java", "sha": "758bc64aabeacbbc439b448a1fed1a0a0d874d73", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/configuration/updater/TaskExecutorImpl.java?ref=e2b78bdf24279f0b12c55242112c52c7cdb4f8cc", "patch": "@@ -338,7 +338,7 @@ private Subject getContextSubject()\n             if (additionalPrincipal != null && !principals.contains(additionalPrincipal))\n             {\n                 Set<Principal> extendedPrincipals = new HashSet<>(principals);\n-                extendedPrincipals.add(_principalAccessor.getPrincipal());\n+                extendedPrincipals.add(additionalPrincipal);\n                 contextSubject = new Subject(contextSubject.isReadOnly(),\n                         extendedPrincipals,\n                         contextSubject.getPublicCredentials(),", "filename": "broker-core/src/main/java/org/apache/qpid/server/configuration/updater/TaskExecutorImpl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/5227f59db28d8ae8efab9c2d5823f828ca956d62", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/18009ccac4f3a16ebb1c5e3bd8ada6dd9ac586e4", "message": "QPID-6587 : Conversion of 1-0 message to 0-10 causes NPE if the 1-0 message does not have an application properties section", "bug_id": "qpid-jms-amqp-0-x_56", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/5227f59db28d8ae8efab9c2d5823f828ca956d62/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/MessageMetaData_1_0.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/5227f59db28d8ae8efab9c2d5823f828ca956d62/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/MessageMetaData_1_0.java", "sha": "9c38ede740c50570f97968cae7197f7661b2a4bf", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/MessageMetaData_1_0.java?ref=5227f59db28d8ae8efab9c2d5823f828ca956d62", "patch": "@@ -592,7 +592,7 @@ public String getTo()\n \n         public Map<String, Object> getHeadersAsMap()\n         {\n-            return new HashMap<String, Object>(_appProperties);\n+            return _appProperties == null ? new HashMap<String,Object>() : new HashMap<>(_appProperties);\n         }\n     }\n ", "filename": "broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/MessageMetaData_1_0.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/6d35fab60df440600801017b3cefd3e77b9017e3", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/f26200443b5e5f471cbc75b2fac49ef300454fd8", "message": "QPID-24 : Fix potential NPE in log message on recovery of xids where the queue was transient", "bug_id": "qpid-jms-amqp-0-x_57", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/6d35fab60df440600801017b3cefd3e77b9017e3/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostConfigRecoveryHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/6d35fab60df440600801017b3cefd3e77b9017e3/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostConfigRecoveryHandler.java", "sha": "0e965472d5b2516b9a8dbda75c464106beb994bc", "changes": 5, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostConfigRecoveryHandler.java?ref=6d35fab60df440600801017b3cefd3e77b9017e3", "patch": "@@ -29,8 +29,6 @@\n import java.util.Map;\n import java.util.TreeMap;\n import java.util.UUID;\n-\n-import org.apache.commons.lang.StringUtils;\n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.AMQStoreException;\n@@ -59,7 +57,6 @@\n import org.apache.qpid.server.txn.DtxBranch;\n import org.apache.qpid.server.txn.DtxRegistry;\n import org.apache.qpid.server.txn.ServerTransaction;\n-import org.apache.qpid.transport.Binary;\n import org.apache.qpid.transport.Xid;\n import org.apache.qpid.transport.util.Functions;\n import org.apache.qpid.util.ByteBufferInputStream;\n@@ -271,7 +268,7 @@ public void onRollback()\n                 StringBuilder xidString = xidAsString(id);\n                 CurrentActor.get().message(_logSubject,\n                                            TransactionLogMessages.XA_INCOMPLETE_QUEUE(xidString.toString(),\n-                                                                                      queue.getName()));\n+                                                                                      record.getQueue().getResourceName()));\n \n             }\n         }", "filename": "broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostConfigRecoveryHandler.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/16c2aeae45b39e916531c589dc96f04be1be6856", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/939067380f6c27734dd356d8c5b2d6cf132c3002", "message": "QPID-3714 : Fix for NPE when a transient message (or when using the Memory Store) has no body", "bug_id": "qpid-jms-amqp-0-x_58", "file": [{"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/16c2aeae45b39e916531c589dc96f04be1be6856/broker/src/main/java/org/apache/qpid/server/store/StoredMemoryMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/16c2aeae45b39e916531c589dc96f04be1be6856/broker/src/main/java/org/apache/qpid/server/store/StoredMemoryMessage.java", "sha": "144cc629bd85cb627b5a889826cc48727d852f6f", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/store/StoredMemoryMessage.java?ref=16c2aeae45b39e916531c589dc96f04be1be6856", "patch": "@@ -84,6 +84,10 @@ public void addContent(int offsetInMessage, ByteBuffer src)\n \n     public int getContent(int offset, ByteBuffer dst)\n     {\n+        if(_content == null)\n+        {\n+            return 0;\n+        }\n         ByteBuffer src = _content.duplicate();\n \n         int oldPosition = src.position();\n@@ -102,6 +106,10 @@ public int getContent(int offset, ByteBuffer dst)\n \n     public ByteBuffer getContent(int offsetInMessage, int size)\n     {\n+        if(_content == null)\n+        {\n+            return null;\n+        }\n         ByteBuffer buf = _content.duplicate();\n \n         if(offsetInMessage != 0)", "filename": "broker/src/main/java/org/apache/qpid/server/store/StoredMemoryMessage.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/939067380f6c27734dd356d8c5b2d6cf132c3002", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/0ce3c267f7cbfd43928fa282bda88ff07669c2b9", "message": "QPID-3714 : Fix for NPE in the SecurityManager when a null routing key is used in 0-10", "bug_id": "qpid-jms-amqp-0-x_59", "file": [{"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/939067380f6c27734dd356d8c5b2d6cf132c3002/broker/src/main/java/org/apache/qpid/server/security/SecurityManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/939067380f6c27734dd356d8c5b2d6cf132c3002/broker/src/main/java/org/apache/qpid/server/security/SecurityManager.java", "sha": "2a1ae8a870edeb2fe913baa15c2fdb238ab6b6f5", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/SecurityManager.java?ref=939067380f6c27734dd356d8c5b2d6cf132c3002", "patch": "@@ -389,8 +389,16 @@ Result allowed(SecurityPlugin plugin)\n     private ConcurrentHashMap<String, ConcurrentHashMap<String, PublishAccessCheck>> _publishPropsCache\n             = new ConcurrentHashMap<String, ConcurrentHashMap<String, PublishAccessCheck>>();\n \n-    public boolean authorisePublish(final boolean immediate, final String routingKey, final String exchangeName)\n+    public boolean authorisePublish(final boolean immediate, String routingKey, String exchangeName)\n     {\n+        if(routingKey == null)\n+        {\n+            routingKey = \"\";\n+        }\n+        if(exchangeName == null)\n+        {\n+            exchangeName = \"\";\n+        }\n         PublishAccessCheck check;\n         ConcurrentHashMap<String, ConcurrentHashMap<String, PublishAccessCheck>> cache =\n                 immediate ? _immediatePublishPropsCache : _publishPropsCache;", "filename": "broker/src/main/java/org/apache/qpid/server/security/SecurityManager.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/fd4ff1afacfe8f30079b3eaa536add75f01efddc", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/4497edcd6dd540ea7e22f469693e1f4440e47031", "message": "QPID-3205\nAdded the nessacery null checks to avoid a NPE due to missing delivery props or headers all together.", "bug_id": "qpid-jms-amqp-0-x_60", "file": [{"additions": 29, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd4ff1afacfe8f30079b3eaa536add75f01efddc/common/src/main/java/org/apache/qpid/transport/Session.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd4ff1afacfe8f30079b3eaa536add75f01efddc/common/src/main/java/org/apache/qpid/transport/Session.java", "sha": "b3c335ae6885f59f5fd002f84439403f89e9dcaf", "changes": 30, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/transport/Session.java?ref=fd4ff1afacfe8f30079b3eaa536add75f01efddc", "patch": "@@ -42,7 +42,10 @@\n import static org.apache.qpid.util.Strings.toUTF8;\n \n import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.TimeUnit;\n@@ -262,7 +265,32 @@ void resume()\n                 }\n                 else if (m instanceof MessageTransfer)\n                 {\n-                    ((MessageTransfer)m).getHeader().get(DeliveryProperties.class).setRedelivered(true);\n+                \tMessageTransfer xfr = (MessageTransfer)m;\n+                \t\n+                \tif (xfr.getHeader() != null)\n+                \t{\n+                \t\tif (xfr.getHeader().get(DeliveryProperties.class) != null)\n+                \t\t{\n+                \t\t   xfr.getHeader().get(DeliveryProperties.class).setRedelivered(true);\n+                \t\t}\n+                \t\telse\n+                \t\t{\n+                \t\t\tStruct[] structs = xfr.getHeader().getStructs();\n+                \t\t\tDeliveryProperties deliveryProps = new DeliveryProperties();\n+                    \t\tdeliveryProps.setRedelivered(true);\n+                    \t\t\n+                    \t\tList<Struct> list = Arrays.asList(structs);\n+                    \t\tlist.add(deliveryProps);\n+                    \t\txfr.setHeader(new Header(list));\n+                \t\t}\n+                \t\t\n+                \t}\n+                \telse\n+                \t{\n+                \t\tDeliveryProperties deliveryProps = new DeliveryProperties();\n+                \t\tdeliveryProps.setRedelivered(true);\n+                \t\txfr.setHeader(new Header(deliveryProps));\n+                \t}\n                 }\n                 sessionCommandPoint(m.getId(), 0);\n                 send(m);", "filename": "common/src/main/java/org/apache/qpid/transport/Session.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/0aa483de15845150372ebf795aaa11027411db53", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ca5861cd6cdab710a0c5e56070d9cc306361988d", "message": "QPID-1813 : Check the value of _sessionIdentifier and return null if it is null rather than an NPE.", "bug_id": "qpid-jms-amqp-0-x_61", "file": [{"additions": 22, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/0aa483de15845150372ebf795aaa11027411db53/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/0aa483de15845150372ebf795aaa11027411db53/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java", "sha": "b987dae16dfafd9a0c70d150c703d45365963cad", "changes": 24, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java?ref=0aa483de15845150372ebf795aaa11027411db53", "patch": "@@ -457,12 +457,32 @@ public long getSize()\n \n     public Object getPublisherClientInstance()\n     {\n-        return _sessionIdentifier.getSessionInstance();\n+        //todo store sessionIdentifier/client id with message in store\n+        //Currently the _sessionIdentifier will be null if the message has been\n+        // restored from a message Store\n+        if (_sessionIdentifier == null)\n+        {\n+            return null;\n+        }\n+        else\n+        {\n+            return _sessionIdentifier.getSessionInstance();\n+        }\n     }\n                                                                                           \n     public Object getPublisherIdentifier()\n     {\n-        return _sessionIdentifier.getSessionIdentifier();\n+        //todo store sessionIdentifier/client id with message in store\n+        //Currently the _sessionIdentifier will be null if the message has been\n+        // restored from a message Store\n+        if (_sessionIdentifier == null)\n+        {\n+            return null;\n+        }\n+        else\n+        {\n+            return _sessionIdentifier.getSessionIdentifier();\n+        }\n     }\n \n     public void setClientIdentifier(final AMQProtocolSession.ProtocolSessionIdentifier sessionIdentifier)", "filename": "broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/0aa483de15845150372ebf795aaa11027411db53/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/0aa483de15845150372ebf795aaa11027411db53/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "sha": "7aa9d1e3af9fad97b41d2474c3a6bdad27e03d04", "changes": 8, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java?ref=0aa483de15845150372ebf795aaa11027411db53", "patch": "@@ -382,11 +382,10 @@ public boolean hasInterest(QueueEntry entry)\n //            return false;\n         }\n \n-\n-\n-        //todo - client id should be recoreded and this test removed but handled below\n         if (_noLocal)\n         {\n+            //todo - client id should be recoreded so we don't have to handle\n+            // the case where this is null.\n             final Object publisherId = entry.getMessage().getPublisherClientInstance();\n \n             // We don't want local messages so check to see if message is one we sent\n@@ -404,9 +403,8 @@ public boolean hasInterest(QueueEntry entry)\n             {\n \n                 localInstance = getProtocolSession().getClientIdentifier();\n-                //todo - client id should be recoreded and this test removed but handled here\n-\n \n+                //todo - client id should be recoreded so we don't have to do the null check\n                 if (localInstance != null && localInstance.equals(entry.getMessage().getPublisherIdentifier()))\n                 {\n                     return false;", "filename": "broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/32e8d15d9946e0c327a8ef474aa79379f7d05e3d", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/b93923f1d6e675226c942e73d4bbb406b2d2b1f1", "message": "QPID-1015 : Applied patch by Senaka Fernando to prevent NPE in MC on refresh before initial usage.", "bug_id": "qpid-jms-amqp-0-x_62", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/32e8d15d9946e0c327a8ef474aa79379f7d05e3d/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/32e8d15d9946e0c327a8ef474aa79379f7d05e3d/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java", "sha": "5476c2787116d6bd558ae96985d2ed882a0eb589", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java?ref=32e8d15d9946e0c327a8ef474aa79379f7d05e3d", "patch": "@@ -135,7 +135,7 @@ public void refreshMBeanView()\n     {\n         try\n         {\n-            if (NODE_TYPE_SERVER.equals(_selectedNode.getType()) ||\n+            if (_selectedNode == null || NODE_TYPE_SERVER.equals(_selectedNode.getType()) ||\n                 NODE_TYPE_DOMAIN.equals(_selectedNode.getType()) )\n             {\n                 return;", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/2da66589d916f122c09f14aadf1c2ce874f57282", "message": "QPID-1244: fix for NPE on broker initiated connection close, also preserve the connection close text for better error reporting", "bug_id": "qpid-jms-amqp-0-x_63", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/client/src/main/java/org/apache/qpid/nclient/Client.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/client/src/main/java/org/apache/qpid/nclient/Client.java", "sha": "af0e724e423d29fd44f4c461a8950afd46f092bd", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/nclient/Client.java?ref=12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16", "patch": "@@ -122,6 +122,7 @@ public void closed()\n \n             @Override public void connectionClose(Channel context, ConnectionClose connectionClose)\n             {\n+                super.connectionClose(context, connectionClose);\n                 ErrorCode errorCode = ErrorCode.get(connectionClose.getReplyCode().getValue());\n                 if (_closedListner == null && errorCode != ErrorCode.NO_ERROR)\n                 {", "filename": "client/src/main/java/org/apache/qpid/nclient/Client.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/Channel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/Channel.java", "sha": "d6b015930bcf97ed97c1123a1c6d339aac460999", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/transport/Channel.java?ref=12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16", "patch": "@@ -134,6 +134,14 @@ void setSession(Session session)\n         this.session = session;\n     }\n \n+    void closeCode(ConnectionClose close)\n+    {\n+        if (session != null)\n+        {\n+            session.closeCode(close);\n+        }\n+    }\n+\n     private void emit(ProtocolEvent event)\n     {\n         event.setChannel(channel);", "filename": "common/src/main/java/org/apache/qpid/transport/Channel.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/Connection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/Connection.java", "sha": "68b9b209bb35a389703dd7649042edf52d99e9c7", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/transport/Connection.java?ref=12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16", "patch": "@@ -148,6 +148,17 @@ public void exception(Throwable t)\n         delegate.exception(t);\n     }\n \n+    void closeCode(ConnectionClose close)\n+    {\n+        synchronized (channels)\n+        {\n+            for (Channel ch : channels.values())\n+            {\n+                ch.closeCode(close);\n+            }\n+        }\n+    }\n+\n     public void closed()\n     {\n         log.debug(\"connection closed: %s\", this);", "filename": "common/src/main/java/org/apache/qpid/transport/Connection.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/ConnectionDelegate.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/ConnectionDelegate.java", "sha": "2aa1db7b288f9578e5bb735607bc0950fa3cc83a", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/transport/ConnectionDelegate.java?ref=12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16", "patch": "@@ -250,6 +250,7 @@ public void connectionRedirect(Channel context, ConnectionRedirect struct)\n \n     @Override public void connectionClose(Channel ch, ConnectionClose close)\n     {\n+        ch.getConnection().closeCode(close);\n         ch.connectionCloseOk();\n     }\n ", "filename": "common/src/main/java/org/apache/qpid/transport/ConnectionDelegate.java"}, {"additions": 45, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/ConnectionException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/ConnectionException.java", "sha": "c3239ef68488beadbf56e3432c9883cf8375ea8d", "changes": 45, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/transport/ConnectionException.java?ref=12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16", "patch": "@@ -0,0 +1,45 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.transport;\n+\n+\n+/**\n+ * ConnectionException\n+ *\n+ */\n+\n+public class ConnectionException extends RuntimeException\n+{\n+\n+    private ConnectionClose close;\n+\n+    public ConnectionException(ConnectionClose close)\n+    {\n+        super(close.getReplyText());\n+        this.close = close;\n+    }\n+\n+    public ConnectionClose getClose()\n+    {\n+        return close;\n+    }\n+\n+}", "filename": "common/src/main/java/org/apache/qpid/transport/ConnectionException.java"}, {"additions": 24, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/Session.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/Session.java", "sha": "10ca6cfb0a348fa3affc80a2023579de8c298b0e", "changes": 24, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/transport/Session.java?ref=12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16", "patch": "@@ -268,6 +268,23 @@ boolean complete(int lower, int upper)\n \n     public void invoke(Method m)\n     {\n+        if (closed.get())\n+        {\n+            List<ExecutionException> exc = getExceptions();\n+            if (!exc.isEmpty())\n+            {\n+                throw new SessionException(exc);\n+            }\n+            else if (close != null)\n+            {\n+                throw new ConnectionException(close);\n+            }\n+            else\n+            {\n+                throw new SessionClosedException();\n+            }\n+        }\n+\n         if (m.getEncodedTrack() == Frame.L4)\n         {\n             synchronized (commands)\n@@ -379,6 +396,13 @@ void addException(ExecutionException exc)\n         }\n     }\n \n+    private ConnectionClose close = null;\n+\n+    void closeCode(ConnectionClose close)\n+    {\n+        this.close = close;\n+    }\n+\n     List<ExecutionException> getExceptions()\n     {\n         synchronized (exceptions)", "filename": "common/src/main/java/org/apache/qpid/transport/Session.java"}, {"additions": 39, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/SessionClosedException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/SessionClosedException.java", "sha": "d2c54cf339c0c019f534f4301a5d1fb6833b062b", "changes": 39, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/transport/SessionClosedException.java?ref=12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16", "patch": "@@ -0,0 +1,39 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.transport;\n+\n+import java.util.Collections;\n+\n+\n+/**\n+ * SessionClosedException\n+ *\n+ */\n+\n+public class SessionClosedException extends SessionException\n+{\n+\n+    public SessionClosedException()\n+    {\n+        super(Collections.EMPTY_LIST);\n+    }\n+\n+}", "filename": "common/src/main/java/org/apache/qpid/transport/SessionClosedException.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/network/io/IoReceiver.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16/common/src/main/java/org/apache/qpid/transport/network/io/IoReceiver.java", "sha": "d6d1df573cfda360cfe4335d92a8b83b11534fa2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/transport/network/io/IoReceiver.java?ref=12ca4ab4b02326f3aec7ebaa0b36cc2d67741b16", "patch": "@@ -100,7 +100,7 @@ public void run()\n             InputStream in = socket.getInputStream();\n             int read = 0;\n             int offset = 0;\n-            while (!closed.get() && (read = in.read(buffer, offset, bufferSize-offset)) != -1)\n+            while ((read = in.read(buffer, offset, bufferSize-offset)) != -1)\n             {\n                 if (read > 0)\n                 {", "filename": "common/src/main/java/org/apache/qpid/transport/network/io/IoReceiver.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a28f77be04fc43ec0568133753c5aa6f25f83d2f", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/6288aa10fdd6420827eeabbf7d9fd167bfe7f95f", "message": "QPID-4902: NPE from SimpleAMQQueue and RejectedExecutionExecution handling\n\nGuard against NPE in setLastSeenEntry.  #execute() method change to ignore REE in the case where the\nqueue has already been stopped (logged at ERROR otherwise).  Change Subscription*#_queueContext member\nto volatile as this member is get/set from different threads during the queue's lifecycle", "bug_id": "qpid-jms-amqp-0-x_64", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/main/java/org/apache/qpid/server/protocol/v1_0/Subscription_1_0.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/main/java/org/apache/qpid/server/protocol/v1_0/Subscription_1_0.java", "sha": "ad8eafc850cce4ac44e60ac5cbc68a477597efd9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/v1_0/Subscription_1_0.java?ref=a28f77be04fc43ec0568133753c5aa6f25f83d2f", "patch": "@@ -67,7 +67,7 @@\n     private final QueueEntry.SubscriptionAssignedState _assignedState = new QueueEntry.SubscriptionAssignedState(this);\n     private final long _id;\n     private final boolean _acquires;\n-    private AMQQueue.Context _queueContext;\n+    private volatile AMQQueue.Context _queueContext;\n     private Map<String, Object> _properties = new ConcurrentHashMap<String, Object>();\n     private ReentrantLock _stateChangeLock = new ReentrantLock();\n ", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/v1_0/Subscription_1_0.java"}, {"additions": 25, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java", "sha": "242ad240480fb6bb29a40b73d1097ff922f94c74", "changes": 31, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java?ref=a28f77be04fc43ec0568133753c5aa6f25f83d2f", "patch": "@@ -30,6 +30,7 @@\n import java.util.concurrent.ConcurrentSkipListSet;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -296,7 +297,22 @@ public void resetNotifications()\n \n     public void execute(Runnable runnable)\n     {\n-        _asyncDelivery.execute(runnable);\n+        try\n+        {\n+            _asyncDelivery.execute(runnable);\n+        }\n+        catch (RejectedExecutionException ree)\n+        {\n+            if (_stopped.get())\n+            {\n+                // Ignore - SubFlusherRunner or QueueRunner submitted execution as queue was being stopped.\n+            }\n+            else\n+            {\n+                _logger.error(\"Unexpected rejected execution\", ree);\n+                throw ree;\n+            }\n+        }\n     }\n \n     public AMQShortString getNameShortString()\n@@ -863,12 +879,15 @@ private boolean subscriptionReadyAndHasInterest(final Subscription sub, final Qu\n     private void setLastSeenEntry(final Subscription sub, final QueueEntry entry)\n     {\n         QueueContext subContext = (QueueContext) sub.getQueueContext();\n-        QueueEntry releasedEntry = subContext.getReleasedEntry();\n-\n-        QueueContext._lastSeenUpdater.set(subContext, entry);\n-        if(releasedEntry == entry)\n+        if (subContext != null)\n         {\n-           QueueContext._releasedUpdater.compareAndSet(subContext, releasedEntry, null);\n+            QueueEntry releasedEntry = subContext.getReleasedEntry();\n+\n+            QueueContext._lastSeenUpdater.set(subContext, entry);\n+            if(releasedEntry == entry)\n+            {\n+               QueueContext._releasedUpdater.compareAndSet(subContext, releasedEntry, null);\n+            }\n         }\n     }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "sha": "0d648862b1b6f309995328ea795cd95295ce2510", "changes": 14, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java?ref=a28f77be04fc43ec0568133753c5aa6f25f83d2f", "patch": "@@ -76,7 +76,7 @@ public void stateChange(Subscription sub, State oldState, State newState)\n \n \n     private final AtomicReference<State> _state = new AtomicReference<State>(State.ACTIVE);\n-    private AMQQueue.Context _queueContext;\n+    private volatile AMQQueue.Context _queueContext;\n \n     private final ClientDeliveryMethod _deliveryMethod;\n     private final RecordDeliveryMethod _recordMethod;\n@@ -470,11 +470,6 @@ public void queueDeleted(AMQQueue queue)\n         _deleted.set(true);\n     }\n \n-    public boolean filtersMessages()\n-    {\n-        return _filters != null || _noLocal;\n-    }\n-\n     public boolean hasInterest(QueueEntry entry)\n     {\n         //check that the message hasn't been rejected\n@@ -510,13 +505,6 @@ public boolean hasInterest(QueueEntry entry)\n \n     }\n \n-    private String id = String.valueOf(System.identityHashCode(this));\n-\n-    private String debugIdentity()\n-    {\n-        return id;\n-    }\n-\n     private boolean checkFilters(QueueEntry msg)\n     {\n         return (_filters == null) || _filters.allAllow(msg);", "filename": "broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/main/java/org/apache/qpid/server/subscription/Subscription_0_10.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/main/java/org/apache/qpid/server/subscription/Subscription_0_10.java", "sha": "df648b88aea81f85913c31960143703924d789ad", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/subscription/Subscription_0_10.java?ref=a28f77be04fc43ec0568133753c5aa6f25f83d2f", "patch": "@@ -98,7 +98,7 @@\n     private final Lock _stateChangeLock = new ReentrantLock();\n \n     private final AtomicReference<State> _state = new AtomicReference<State>(State.ACTIVE);\n-    private AMQQueue.Context _queueContext;\n+    private volatile AMQQueue.Context _queueContext;\n     private final AtomicBoolean _deleted = new AtomicBoolean(false);\n \n ", "filename": "broker/src/main/java/org/apache/qpid/server/subscription/Subscription_0_10.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a28f77be04fc43ec0568133753c5aa6f25f83d2f/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java", "sha": "363eb5ecabe69d4e7727be855c4a087fa2ea7350", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java?ref=a28f77be04fc43ec0568133753c5aa6f25f83d2f", "patch": "@@ -48,7 +48,7 @@\n     private AMQShortString tag = new AMQShortString(\"mocktag\");\n     private AMQQueue queue = null;\n     private StateListener _listener = null;\n-    private AMQQueue.Context _queueContext = null;\n+    private volatile AMQQueue.Context _queueContext = null;\n     private State _state = State.ACTIVE;\n     private ArrayList<QueueEntry> messages = new ArrayList<QueueEntry>();\n     private final Lock _stateChangeLock = new ReentrantLock();", "filename": "broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/cd1663035d7e8d0b14dff5cbbbf998281c2580ec", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/07357319357fd06a1405bf08cc93b0dc2d979816", "message": "QPID-6076 : Sending a message with no routing key to the default exchange in the java broker results in an NPE", "bug_id": "qpid-jms-amqp-0-x_65", "file": [{"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/cd1663035d7e8d0b14dff5cbbbf998281c2580ec/broker-core/src/main/java/org/apache/qpid/server/exchange/DefaultDestination.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/cd1663035d7e8d0b14dff5cbbbf998281c2580ec/broker-core/src/main/java/org/apache/qpid/server/exchange/DefaultDestination.java", "sha": "127a8d9e52bbb6ad87ec6e5ebc8b0cc29424de57", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/exchange/DefaultDestination.java?ref=cd1663035d7e8d0b14dff5cbbbf998281c2580ec", "patch": "@@ -50,11 +50,15 @@ public String getName()\n \n \n     public final  <M extends ServerMessage<? extends StorableMessageMetaData>> int send(final M message,\n-                                                                                        final String routingAddress,\n+                                                                                        String routingAddress,\n                                                                                         final InstanceProperties instanceProperties,\n                                                                                         final ServerTransaction txn,\n                                                                                         final Action<? super MessageInstance> postEnqueueAction)\n     {\n+        if(routingAddress == null)\n+        {\n+            routingAddress = \"\";\n+        }\n         final AMQQueue q = _virtualHost.getQueue(routingAddress);\n         if(q == null)\n         {", "filename": "broker-core/src/main/java/org/apache/qpid/server/exchange/DefaultDestination.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/2ede6b336ab75f993bfecabe1406d988e328b988", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/2e4f5238b930654e1f9b69c5142e0eb101fe3f1c", "message": "QPID-6028: [Java Broker] Prevent NPE when unbinding from the fanout exchange.\n\nEnsure the AbstractExchange interpretation of bindingKey is uniform across the whole API (that is we always treat a null bindingKey as the empty string).\nPrevent 0-8..0-91 passing bindingKey \"null\" when unbinding with null binding key.\n\nFixes QPID-3987 too.", "bug_id": "qpid-jms-amqp-0-x_66", "file": [{"additions": 35, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2ede6b336ab75f993bfecabe1406d988e328b988/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2ede6b336ab75f993bfecabe1406d988e328b988/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java", "sha": "41b6705f0519dcea4aa3726e9663b9769d238d9e", "changes": 55, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java?ref=2ede6b336ab75f993bfecabe1406d988e328b988", "patch": "@@ -281,8 +281,13 @@ public String toString()\n         return _virtualHost;\n     }\n \n+    @Override\n     public boolean isBound(String bindingKey, Map<String,Object> arguments, Queue<?> queue)\n     {\n+        if (bindingKey == null)\n+        {\n+            bindingKey = \"\";\n+        }\n         for(Binding b : _bindings)\n         {\n             if(bindingKey.equals(b.getBindingKey()) && queue.getName().equals(b.getDestination()))\n@@ -295,8 +300,14 @@ public boolean isBound(String bindingKey, Map<String,Object> arguments, Queue<?>\n         return false;\n     }\n \n+    @Override\n     public boolean isBound(String bindingKey, Queue<?> queue)\n     {\n+        if (bindingKey == null)\n+        {\n+            bindingKey = \"\";\n+        }\n+\n         for(Binding b : _bindings)\n         {\n             if(bindingKey.equals(b.getBindingKey()) && queue.getName().equals(b.getDestination()))\n@@ -307,8 +318,14 @@ public boolean isBound(String bindingKey, Queue<?> queue)\n         return false;\n     }\n \n+    @Override\n     public boolean isBound(String bindingKey)\n     {\n+        if (bindingKey == null)\n+        {\n+            bindingKey = \"\";\n+        }\n+\n         for(Binding b : _bindings)\n         {\n             if(bindingKey.equals(b.getBindingKey()))\n@@ -319,6 +336,7 @@ public boolean isBound(String bindingKey)\n         return false;\n     }\n \n+    @Override\n     public boolean isBound(Queue<?> queue)\n     {\n         for(Binding b : _bindings)\n@@ -347,7 +365,7 @@ public boolean isBound(Map<String, Object> arguments, Queue<?> queue)\n         return false;\n     }\n \n-\n+    @Override\n     public boolean isBound(Map<String, Object> arguments)\n     {\n         for(Binding b : _bindings)\n@@ -366,6 +384,11 @@ public boolean isBound(Map<String, Object> arguments)\n     @Override\n     public boolean isBound(String bindingKey, Map<String, Object> arguments)\n     {\n+        if (bindingKey == null)\n+        {\n+            bindingKey = \"\";\n+        }\n+\n         for(Binding b : _bindings)\n         {\n             if(b.getBindingKey().equals(bindingKey) &&\n@@ -379,11 +402,13 @@ public boolean isBound(String bindingKey, Map<String, Object> arguments)\n         return false;\n     }\n \n+    @Override\n     public boolean hasBindings()\n     {\n         return !_bindings.isEmpty();\n     }\n \n+    @Override\n     public Exchange<?> getAlternateExchange()\n     {\n         return _alternateExchange;\n@@ -406,11 +431,13 @@ private void postSetAlternateExchange()\n         }\n     }\n \n+    @Override\n     public void removeReference(ExchangeReferrer exchange)\n     {\n         _referrers.remove(exchange);\n     }\n \n+    @Override\n     public void addReference(ExchangeReferrer exchange)\n     {\n         _referrers.put(exchange, Boolean.TRUE);\n@@ -434,11 +461,7 @@ protected abstract void onBindingUpdated(final BindingIdentifier binding,\n \n     protected abstract void onUnbind(final BindingIdentifier binding);\n \n-    public Map<String, Object> getArguments()\n-    {\n-        return Collections.emptyMap();\n-    }\n-\n+    @Override\n     public long getBindingCount()\n     {\n         return getBindings().size();\n@@ -485,6 +508,7 @@ public long getBindingCount()\n         return queues;\n     }\n \n+    @Override\n     public final  <M extends ServerMessage<? extends StorableMessageMetaData>> int send(final M message,\n                                                                                         final String routingAddress,\n                                                                                         final InstanceProperties instanceProperties,\n@@ -773,19 +797,6 @@ public void replaceBinding(String bindingKey,\n         bind(queue.getName(), bindingKey, arguments, true);\n     }\n \n-\n-    private ListenableFuture<Void> autoDeleteIfNecessaryAsync()\n-    {\n-        if (isAutoDeletePending())\n-        {\n-            _logger.debug(\"Auto-deleting exchange: {}\", this);\n-\n-            return deleteAsync();\n-        }\n-\n-        return Futures.immediateFuture(null);\n-    }\n-\n     private boolean autoDeleteIfNecessary()\n     {\n         if (isAutoDeletePending())\n@@ -899,8 +910,12 @@ public boolean deleteBinding(final String bindingKey, final Queue<?> queue)\n     }\n \n     @Override\n-    public boolean hasBinding(final String bindingKey, final Queue<?> queue)\n+    public boolean hasBinding(String bindingKey, final Queue<?> queue)\n     {\n+        if (bindingKey == null)\n+        {\n+            bindingKey = \"\";\n+        }\n         for (Binding b : _bindings)\n         {\n             if (b.getBindingKey().equals(bindingKey) && b.getDestination().equals(queue.getName()))", "filename": "broker-core/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2ede6b336ab75f993bfecabe1406d988e328b988/broker-core/src/main/java/org/apache/qpid/server/exchange/FanoutExchangeImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2ede6b336ab75f993bfecabe1406d988e328b988/broker-core/src/main/java/org/apache/qpid/server/exchange/FanoutExchangeImpl.java", "sha": "c4b103b017751ba14fa91883f7a1bee9d67fcbff", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/exchange/FanoutExchangeImpl.java?ref=2ede6b336ab75f993bfecabe1406d988e328b988", "patch": "@@ -160,7 +160,7 @@ public BindingSet updateBinding(final BindingIdentifier binding, final Map<Strin\n         public BindingSet removeBinding(final BindingIdentifier binding)\n         {\n             Queue<?> queue = (Queue<?>) binding.getDestination();\n-            if(_filteredBindings.get(queue).containsKey(binding))\n+            if(_filteredBindings.containsKey(queue) && _filteredBindings.get(queue).containsKey(binding))\n             {\n                 final Map<Queue<?>, Map<BindingIdentifier, FilterManager>> filteredBindings = new HashMap<>(_filteredBindings);\n                 final Map<BindingIdentifier, FilterManager> bindingsForQueue = new HashMap<>(filteredBindings.remove(queue));", "filename": "broker-core/src/main/java/org/apache/qpid/server/exchange/FanoutExchangeImpl.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2ede6b336ab75f993bfecabe1406d988e328b988/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2ede6b336ab75f993bfecabe1406d988e328b988/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java", "sha": "8b3f2194b83d1673f202b8a3efb2a3db369fac01", "changes": 24, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java?ref=2ede6b336ab75f993bfecabe1406d988e328b988", "patch": "@@ -3082,15 +3082,15 @@ public void receiveExchangeDelete(final AMQShortString exchangeStr, final boolea\n     @Override\n     public void receiveQueueBind(final AMQShortString queueName,\n                                  final AMQShortString exchange,\n-                                 AMQShortString routingKey,\n+                                 AMQShortString bindingKey,\n                                  final boolean nowait,\n                                  final FieldTable argumentsTable)\n     {\n         if(_logger.isDebugEnabled())\n         {\n             _logger.debug(\"RECV[\" + _channelId + \"] QueueBind[\" +\" queue: \" + queueName +\n                           \" exchange: \" + exchange +\n-                          \" bindingKey: \" + routingKey +\n+                          \" bindingKey: \" + bindingKey +\n                           \" nowait: \" + nowait + \" arguments: \" + argumentsTable + \" ]\");\n         }\n \n@@ -3103,16 +3103,15 @@ public void receiveQueueBind(final AMQShortString queueName,\n \n             if (queue != null)\n             {\n-                if (routingKey == null)\n+                if (bindingKey == null)\n                 {\n-                    routingKey = AMQShortString.valueOf(queue.getName());\n+                    bindingKey = AMQShortString.valueOf(queue.getName());\n                 }\n             }\n         }\n         else\n         {\n             queue = getQueue(queueName.toString());\n-            routingKey = routingKey == null ? AMQShortString.EMPTY_STRING : routingKey;\n         }\n \n         if (queue == null)\n@@ -3146,16 +3145,16 @@ else if (isDefaultExchange(exchange))\n                 {\n \n                     Map<String, Object> arguments = FieldTable.convertToMap(argumentsTable);\n-                    String bindingKey = String.valueOf(routingKey);\n+                    String bindingKeyStr = AMQShortString.toString(bindingKey);\n \n-                    if (!exch.isBound(bindingKey, arguments, queue))\n+                    if (!exch.isBound(bindingKeyStr, arguments, queue))\n                     {\n \n-                        if (!exch.addBinding(bindingKey, queue, arguments)\n+                        if (!exch.addBinding(bindingKeyStr, queue, arguments)\n                             && ExchangeDefaults.TOPIC_EXCHANGE_CLASS.equals(\n                                 exch.getType()))\n                         {\n-                            exch.replaceBinding(bindingKey, queue, arguments);\n+                            exch.replaceBinding(bindingKeyStr, queue, arguments);\n                         }\n                     }\n \n@@ -3166,7 +3165,7 @@ else if (isDefaultExchange(exchange))\n                                      + \" to exchange \"\n                                      + exch\n                                      + \" with routing key \"\n-                                     + routingKey);\n+                                     + bindingKeyStr);\n                     }\n                     if (!nowait)\n                     {\n@@ -3547,22 +3546,21 @@ else if (isDefaultExchange(exchange))\n         }\n         else\n         {\n-\n             final Exchange<?> exch = getExchange(exchange.toString());\n \n             if (exch == null)\n             {\n                 closeChannel(ErrorCodes.NOT_FOUND, \"Exchange '\" + exchange + \"' does not exist.\");\n             }\n-            else if (!exch.hasBinding(String.valueOf(bindingKey), queue))\n+            else if (!exch.hasBinding(AMQShortString.toString(bindingKey), queue))\n             {\n                 closeChannel(ErrorCodes.NOT_FOUND, \"No such binding\");\n             }\n             else\n             {\n                 try\n                 {\n-                    exch.deleteBinding(String.valueOf(bindingKey), queue);\n+                    exch.deleteBinding(AMQShortString.toString(bindingKey), queue);\n \n                     final AMQMethodBody responseBody = _connection.getMethodRegistry().createQueueUnbindOkBody();\n                     sync();", "filename": "broker-plugins/amqp-0-8-protocol/src/main/java/org/apache/qpid/server/protocol/v0_8/AMQChannel.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2ede6b336ab75f993bfecabe1406d988e328b988/test-profiles/python_tests/JavaPre010PythonExcludes", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2ede6b336ab75f993bfecabe1406d988e328b988/test-profiles/python_tests/JavaPre010PythonExcludes", "sha": "44a8712375b51b9ba7db899e9b3231896854d864", "changes": 4, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/test-profiles/python_tests/JavaPre010PythonExcludes?ref=2ede6b336ab75f993bfecabe1406d988e328b988", "patch": "@@ -29,10 +29,6 @@ qpid_tests.broker_0_9.query.QueryTests.test_binding_query_header\n qpid_tests.broker_0_9.query.QueryTests.test_binding_query_topic\n qpid_tests.broker_0_9.query.QueryTests.test_exchange_query\n \n-# QPID-3987 Tests broker_0_9.queue.QueueTests.test_unbind_fanout and broker_0_9.queue.QueueTests.test_unbind_headers fail with 404, 'No such binding'\n-qpid_tests.broker_0_9.queue.QueueTests.test_unbind_fanout\n-qpid_tests.broker_0_9.queue.QueueTests.test_unbind_headers\n-\n #QPID-4832 Apache Qpid Broker for Java does not support an explicit bind to a default exchange\n qpid_tests.broker_0_8.exchange.DefaultExchangeRuleTests.testDefaultExchangeExplicitBind\n ", "filename": "test-profiles/python_tests/JavaPre010PythonExcludes"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/e0a177415c3a6c1d9ecc8f9b618f648e7ea8fc3f", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/aad21c748f1f9471241fcd8509ff820e75f3b695", "message": "QPID-3672: Occasional NPE from Qpid Management Console when connecting to server\n\nApplied patch from Andrew MacBean <andymacbean@gmail.com> and myself.", "bug_id": "qpid-jms-amqp-0-x_67", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/e0a177415c3a6c1d9ecc8f9b618f648e7ea8fc3f/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/e0a177415c3a6c1d9ecc8f9b618f648e7ea8fc3f/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java", "sha": "cc2e4290a0927011cf0152e5d72ff5162f49b266", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java?ref=e0a177415c3a6c1d9ecc8f9b618f648e7ea8fc3f", "patch": "@@ -579,7 +579,7 @@ private boolean doesMBeanNodeAlreadyExist(TreeObject typeNode, String mbeanName)\n         List<TreeObject> childNodes = typeNode.getChildren();\n         for (TreeObject child : childNodes)\n         {\n-            if (MBEAN.equals(child.getType()) && mbeanName.equals(child.getName()))\n+            if (MBEAN.equals(child.getType()) && mbeanName != null && mbeanName.equals(child.getName()))\n             {\n                 return true;\n             }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/0f607ee4268af9eaf0f572f7286ccd1765ea60cf", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a2f644ec25319b6c4736c408a58e120937dcffe7", "message": "QPID-6688: [Java Broker] Add port state check in HTTP and JMX management plugins whilst iterating through ports in order to avoid NPE thrown for Ports in ERRORED state having uninitialized protocols", "bug_id": "qpid-jms-amqp-0-x_68", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/0f607ee4268af9eaf0f572f7286ccd1765ea60cf/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/0f607ee4268af9eaf0f572f7286ccd1765ea60cf/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java", "sha": "d83af069c89892ac0753e7ba31baca942682f6cd", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java?ref=0f607ee4268af9eaf0f572f7286ccd1765ea60cf", "patch": "@@ -557,7 +557,7 @@ private void logOperationalShutdownMessage(Server server)\n         Collection<Port<?>> httpPorts = new HashSet<>();\n         for (Port<?> port : ports)\n         {\n-            if (port.getProtocols().contains(Protocol.HTTP))\n+            if (port.getState() != State.ERRORED && port.getProtocols().contains(Protocol.HTTP))\n             {\n                 httpPorts.add(port);\n             }", "filename": "broker-plugins/management-http/src/main/java/org/apache/qpid/server/management/plugin/HttpManagement.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/0f607ee4268af9eaf0f572f7286ccd1765ea60cf/broker-plugins/management-jmx/src/main/java/org/apache/qpid/server/jmx/JMXManagementPluginImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/0f607ee4268af9eaf0f572f7286ccd1765ea60cf/broker-plugins/management-jmx/src/main/java/org/apache/qpid/server/jmx/JMXManagementPluginImpl.java", "sha": "b899f25056e739035823498d0b0e49b55d0dc9e7", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/management-jmx/src/main/java/org/apache/qpid/server/jmx/JMXManagementPluginImpl.java?ref=0f607ee4268af9eaf0f572f7286ccd1765ea60cf", "patch": "@@ -119,7 +119,7 @@ public boolean getUsePlatformMBeanServer()\n         Collection<Port<?>> ports = broker.getPorts();\n         for (Port<?> port : ports)\n         {\n-            if (port.getDesiredState() != State.ACTIVE)\n+            if (port.getDesiredState() != State.ACTIVE || port.getState() == State.ERRORED)\n             {\n                 continue;\n             }", "filename": "broker-plugins/management-jmx/src/main/java/org/apache/qpid/server/jmx/JMXManagementPluginImpl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/bb86ecac24601ece35da33c59d973213da24dbaf", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/30db1c5977d4a4381a4f76ffb141feb0ac5f4f71", "message": "QPID-2155 : Added NPE checks for path errors, updated to check the backup location for existing backup files to initialise the .n count", "bug_id": "qpid-jms-amqp-0-x_69", "file": [{"additions": 44, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/bb86ecac24601ece35da33c59d973213da24dbaf/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/bb86ecac24601ece35da33c59d973213da24dbaf/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java", "sha": "be52b82789ecec6446d8465905da9eb570bc8b74", "changes": 65, "status": "modified", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java?ref=bb86ecac24601ece35da33c59d973213da24dbaf", "patch": "@@ -823,7 +823,7 @@ else if (countDirection == 0)\n                     LogLog.debug(\"CD=0,curSizeRollBackups:\"+curSizeRollBackups);\n                     LogLog.debug(\"CD=0,maxSizeRollBackups:\"+maxSizeRollBackups);\n \n-                    // delete the first and keep counting up.\n+                    // delete the first and keep counting up.                                                                                               \n                     int oldestFileIndex = curSizeRollBackups - maxSizeRollBackups + 1;\n                     LogLog.debug(\"CD=0,deleteFile:\"+oldestFileIndex);\n                     deleteFile(newFile + '.' + oldestFileIndex);\n@@ -888,6 +888,11 @@ else if (countDirection == 0)\n         LogLog.debug(\"CD=\"+countDirection+\",done\");\n     }\n \n+\n+    private int countFileIndex(String fileName)\n+    {\n+        return countFileIndex(fileName, true);\n+    }\n     /**\n      * Use filename as a base name and find what count number we are up to by\n      * looking at the files in this format:\n@@ -899,9 +904,10 @@ else if (countDirection == 0)\n      * \n      *\n      * @param fileName the basefilename to use\n+     * @param checkBackupLocation should backupFilesToPath location be checked for existing backups\n      * @return int the next free index\n      */\n-    private int countFileIndex(String fileName)\n+    private int countFileIndex(String fileName, boolean checkBackupLocation)\n     {\n         String testFileName;\n \n@@ -911,6 +917,14 @@ private int countFileIndex(String fileName)\n \n         testFileName = fileName + \".\" + index;\n \n+        // Bail out early if there is a problem with the file\n+        if (new File(testFileName) == null\n+                || new File(testFileName + COMPRESS_EXTENSION) == null)\n+\n+        {\n+            return index;\n+        }\n+\n         // Check that we do not have the 1..n missing scenario\n         if (!(new File(testFileName).exists()\n               || new File(testFileName + COMPRESS_EXTENSION).exists()))\n@@ -920,33 +934,36 @@ private int countFileIndex(String fileName)\n             String prunedFileName = new File(fileName).getName();\n \n             // Look through all files to find next index\n-            for (File file : new File(fileName).getParentFile().listFiles())\n+            if (new File(fileName).getParentFile() != null)\n             {\n-                String name = file.getName();\n-\n-                if (name.startsWith(prunedFileName) && !name.equals(prunedFileName))\n+                for (File file : new File(fileName).getParentFile().listFiles())\n                 {\n-                    String parsedCount = name.substring(prunedFileName.length() + 1 );\n+                    String name = file.getName();\n \n-                    if (parsedCount.endsWith(COMPRESS_EXTENSION))\n+                    if (name.startsWith(prunedFileName) && !name.equals(prunedFileName))\n                     {\n-                        parsedCount = parsedCount.substring(0, parsedCount.indexOf(COMPRESS_EXTENSION));\n-                    }\n+                        String parsedCount = name.substring(prunedFileName.length() + 1);\n \n-                    try\n-                    {\n-                        max = Integer.parseInt(parsedCount);\n+                        if (parsedCount.endsWith(COMPRESS_EXTENSION))\n+                        {\n+                            parsedCount = parsedCount.substring(0, parsedCount.indexOf(COMPRESS_EXTENSION));\n+                        }\n \n-                        // if we got a good value then update our index value.\n-                        if (max > index)\n+                        try\n                         {\n-                            // +1 as we want to return the next free value.\n-                            index = max + 1;\n+                            max = Integer.parseInt(parsedCount);\n+\n+                            // if we got a good value then update our index value.\n+                            if (max > index)\n+                            {\n+                                // +1 as we want to return the next free value.\n+                                index = max + 1;\n+                            }\n+                        }\n+                        catch (NumberFormatException nfe)\n+                        {\n+                            //ignore it assume file doesn't exist.\n                         }\n-                    }\n-                    catch (NumberFormatException nfe)\n-                    {\n-                        //ignore it assume file doesn't exist.\n                     }\n                 }\n             }\n@@ -963,6 +980,12 @@ private int countFileIndex(String fileName)\n             testFileName = fileName + \".\" + index;\n         }\n \n+        if (checkBackupLocation && index == 1 && backupFilesToPath != null)\n+        {\n+            LogLog.debug(\"Trying backup location:\"+backupFilesToPath + System.getProperty(\"file.separator\") + fileName);\n+            return countFileIndex(backupFilesToPath + System.getProperty(\"file.separator\") + new File(fileName).getName(), false);\n+        }\n+\n         return index;\n     }\n ", "filename": "broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/9782150f1db47e8f7727e6f7c48b42f9bfe39711", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/b17ed7caa30e0922209f44dc623de1d1d01f4e00", "message": "NO-JIRA: [Java Broker Tests] Fix race condition in TransactionTimeoutTests meaning observations of test members could yield NPE\n\n* Reordered so that the exception listener's latch is decremented only after members for linked exception message and linked exception code.", "bug_id": "qpid-jms-amqp-0-x_70", "file": [{"additions": 23, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9782150f1db47e8f7727e6f7c48b42f9bfe39711/systests/src/main/java/org/apache/qpid/test/unit/transacted/TransactionTimeoutTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9782150f1db47e8f7727e6f7c48b42f9bfe39711/systests/src/main/java/org/apache/qpid/test/unit/transacted/TransactionTimeoutTestCase.java", "sha": "98fe29f8261b1f29518c11049d8400c695d5a6ab", "changes": 49, "status": "modified", "deletions": 26, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/unit/transacted/TransactionTimeoutTestCase.java?ref=9782150f1db47e8f7727e6f7c48b42f9bfe39711", "patch": "@@ -63,17 +63,19 @@\n     protected Queue _queue;\n     protected MessageConsumer _consumer;\n     protected MessageProducer _producer;\n-    private CountDownLatch _exceptionLatch = new CountDownLatch(1);\n-    protected AtomicInteger _exceptionCount = new AtomicInteger(0);\n-    protected String _message;\n     protected Exception _exception;\n-    protected AMQConstant _code;\n+\n+    private final CountDownLatch _exceptionListenerLatch = new CountDownLatch(1);\n+    private final AtomicInteger _exceptionCount = new AtomicInteger(0);\n+    private volatile AMQConstant _linkedExceptionCode;\n+    private volatile String _linkedExceptionMessage;\n \n     /**\n      * Subclasses must implement this to configure transaction timeout parameters.\n      */\n     protected abstract void configure() throws Exception;\n-        \n+\n+    @Override\n     protected void setUp() throws Exception\n     {\n         // Configure timeouts\n@@ -100,18 +102,6 @@ protected void setUp() throws Exception\n         producer();\n         consumer();\n     }\n-    \n-    protected void tearDown() throws Exception\n-    {\n-        try\n-        {\n-            _con.close();\n-        }\n-        finally\n-        {\n-            super.tearDown();\n-        }\n-    }\n \n     /**\n      * Create a transacted persistent message producer session.\n@@ -218,26 +208,33 @@ protected void expect(int count, float delay) throws Exception\n      * Checks that the correct exception was thrown and was received\n      * by the listener with a 506 error code.\n      */\n-    protected void check(String reason)throws InterruptedException\n+    protected void check(String reason) throws InterruptedException\n     {\n-        assertTrue(\"Should have caught exception in listener\", _exceptionLatch.await(1, TimeUnit.SECONDS));\n         assertNotNull(\"Should have thrown exception to client\", _exception);\n-        assertTrue(\"Exception message should contain '\" + reason + \"': \" + _message, _message.contains(reason + \" transaction timed out\"));\n-        assertNotNull(\"Exception should have an error code\", _code);\n-        assertEquals(\"Error code should be 506\", AMQConstant.RESOURCE_ERROR, _code);\n+\n+        assertTrue(\"Should have caught exception in listener\", _exceptionListenerLatch.await(1, TimeUnit.SECONDS));\n+        assertNotNull(\"Linked exception message should not be null\", _linkedExceptionMessage);\n+        assertTrue(\"Linked exception message '\" + _linkedExceptionMessage + \"' should contain '\" + reason + \"'\",\n+                   _linkedExceptionMessage.contains(reason + \" transaction timed out\"));\n+        assertNotNull(\"Linked exception should have an error code\", _linkedExceptionCode);\n+        assertEquals(\"Linked exception error code should be 506\", AMQConstant.RESOURCE_ERROR, _linkedExceptionCode);\n     }\n \n     /** @see javax.jms.ExceptionListener#onException(javax.jms.JMSException) */\n+    @Override\n     public void onException(JMSException jmse)\n     {\n-        _exceptionLatch.countDown();\n-        _exceptionCount.incrementAndGet();\n+        if (jmse.getLinkedException() != null)\n+        {\n+            _linkedExceptionMessage = jmse.getLinkedException().getMessage();\n+        }\n \n-        _message = jmse.getLinkedException().getMessage();\n         if (jmse.getLinkedException() instanceof AMQException)\n         {\n-            _code = ((AMQException) jmse.getLinkedException()).getErrorCode();\n+            _linkedExceptionCode = ((AMQException) jmse.getLinkedException()).getErrorCode();\n         }\n+        _exceptionCount.incrementAndGet();\n+        _exceptionListenerLatch.countDown();\n     }\n \n     protected int getNumberOfDeliveredExceptions()", "filename": "systests/src/main/java/org/apache/qpid/test/unit/transacted/TransactionTimeoutTestCase.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/050ecef5d8652c2ebd845aa8f4f256dfe5258286", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/14a2a6185d99db57f35759b24f40e42deb2a0dee", "message": "QPID-4419: ensure the broker kills the 0-10 connection immediately for explicit reason that no sasl mech was chosen, instead of sending an incorrect ConnectionTune and then killing the connection as side effect of a subsequent NPE.", "bug_id": "qpid-jms-amqp-0-x_71", "file": [{"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/050ecef5d8652c2ebd845aa8f4f256dfe5258286/common/src/main/java/org/apache/qpid/transport/ServerDelegate.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/050ecef5d8652c2ebd845aa8f4f256dfe5258286/common/src/main/java/org/apache/qpid/transport/ServerDelegate.java", "sha": "1e0d5b9698f3576a8aba05184e1b21edabfadbf5", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/transport/ServerDelegate.java?ref=050ecef5d8652c2ebd845aa8f4f256dfe5258286", "patch": "@@ -71,7 +71,8 @@ public void connectionStartOk(Connection conn, ConnectionStartOk ok)\n \n         if (mechanism == null || mechanism.length() == 0)\n         {\n-            tuneAuthorizedConnection(conn);\n+            conn.connectionClose(ConnectionCloseCode.CONNECTION_FORCED,\n+                    \"No Sasl mechanism was specified\");\n             return;\n         }\n \n@@ -82,7 +83,7 @@ public void connectionStartOk(Connection conn, ConnectionStartOk ok)\n             if (ss == null)\n             {\n                 conn.connectionClose(ConnectionCloseCode.CONNECTION_FORCED,\n-                     \"null SASL mechanism: \" + mechanism);\n+                     \"No SaslServer could be created for mechanism: \" + mechanism);\n                 return;\n             }\n             conn.setSaslServer(ss);", "filename": "common/src/main/java/org/apache/qpid/transport/ServerDelegate.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/050ecef5d8652c2ebd845aa8f4f256dfe5258286/common/src/test/java/org/apache/qpid/transport/ConnectionTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/050ecef5d8652c2ebd845aa8f4f256dfe5258286/common/src/test/java/org/apache/qpid/transport/ConnectionTest.java", "sha": "12bbd20228bc01e962e82e78e4687c62fbea5fb5", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/test/java/org/apache/qpid/transport/ConnectionTest.java?ref=050ecef5d8652c2ebd845aa8f4f256dfe5258286", "patch": "@@ -155,6 +155,7 @@ private Connection connect(final CountDownLatch closed)\n     {\n         final Connection conn = new Connection();\n         conn.setConnectionDelegate(new ClientDelegate(new ConnectionSettings()));\n+\n         conn.addConnectionListener(new ConnectionListener()\n         {\n             public void opened(Connection conn) {}\n@@ -225,6 +226,12 @@ public Session getSession(Connection conn, SessionAttach atc)\n                 ssn.setSessionListener(ConnectionTest.this);\n                 return ssn;\n             }\n+\n+            @Override\n+            public void connectionStartOk(Connection conn, ConnectionStartOk ok)\n+            {\n+                tuneAuthorizedConnection(conn);\n+            }\n         };\n \n         try", "filename": "common/src/test/java/org/apache/qpid/transport/ConnectionTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a284f1f648af7f66653de28fb60948c6f1573498", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/3e0da0f517bfab793c826b776d2b2d886e2cd7f8", "message": "QPID-3701\n    -Add support for Glassfish 3.1.1 AS\n    -Add necessary configuration files for Glassfish support\n    -Reworked JNDI naming conventions to be consistent across all\n    supported app servers\n    -Fixed NPE in QpidConnectionFactoryProxy\n    -Added necessary documentation files for Glassfish support", "bug_id": "qpid-jms-amqp-0-x_72", "file": [{"additions": 52, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/README.txt", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/README.txt", "sha": "eccdf1377f320e64ee62443f313e9af07822911c", "changes": 65, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/README.txt?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -6,8 +6,8 @@ The Qpid JCA example provides a sample JEE application that demonstrates how to\n configure, install and run applications using the Qpid JCA adapter for EE\n connectivity and the Apache Qpid C++ Broker. This example code can be used as a\n convenient starting point for your own development and deployment\n-efforts. Currently the example is supported on JBoss EAP 5.x, JBoss 6.x and\n-Apache Geronimo 2.x.\n+efforts. Currently the example is supported on JBoss EAP 5.x, JBoss 6.x,\n+Apache Geronimo 2.x and Glassfish 3.1.1.\n \n Example Components\n ===================\n@@ -42,11 +42,12 @@ they should be used. These concepts will be explained later in this document.\n \n The deployment configuration for destinations, and ConnectionFactories varies by platform.\n In JBossEAP, the configuration mechanism is a *-ds.xml file. Geronimo 2.2.x has the notion\n-of a deployment plan in the form of a geronimo-ra.xml file.\n+of a deployment plan in the form of a geronimo-ra.xml file. Similarly, Glassfish 3.1.1 uses\n+the glassfish-resources.xml file.\n \n-The Qpid JCA Example provides both a qpid-jca-ds.xml file as well as a geronimo-ra.xml deployment\n-plan. Both mechanisms provide a reasonable set of defaults to allow you to deploy the Qpid JCA\n-adapter in either environment and get up and running quickly.\n+The Qpid JCA Example provides a sample qpid-jca-ds.xml, geronimo-ra.xml and glassfish-resources.xml file.\n+Each file provides reasonable set of defaults to allow you to deploy the Qpid JCA\n+adapter in the supported environments and get up and running quickly.\n \n EJB 3.x\n \n@@ -70,7 +71,7 @@ EE EAR archive\n     An EAR wrapper for the ejb and web components.\n \n \n-    An RMI client used to excercise the EJB 3.x component.\n+An RMI client used to excercise the EJB 3.x component.\n \n Sample *-ds.xml file\n     A sample *-ds.xml file is provided to create destinations and ManagedConnectionFactories\n@@ -80,6 +81,10 @@ Sample geronimo-ra.xml\n     A sample geronimo-ra.xml file is provided to create destinations and ManagedConnectionFactories\n     in the Geronimo environment. This file is semantically equivalent to the JBoss *-ds.xml artifact.\n \n+Sample glassfish-resources.xml\n+    A sample glassfish-resources.xml file is provided to create JMS destinations and\n+    ManagedConnectionFactories in the Glassfish environemnt.\n+\n A build.xml file\n     An ant build.xml file to configure, install and deploy the aforementioned components.\n \n@@ -107,14 +112,11 @@ Quickstart\n ==========\n After satifsying the above requirements you are ready to deploy and run the example application.\n The steps to deploy and run in the supported application servers are largely the same, however,\n-if you are targeting JBoss you will either need to modify the property in the example build.xml file\n-\n-\n-    <property name=\"target.platform\" value=\"geronimo\"/>\n-\n-to be jboss\n+you need to specify the target platform environment to which you are attempting to deploy.\n \n     <property name=\"target.platform\" value=\"jboss\"/>\n+    <property name=\"target.platform\" value=\"geronimo\"/>\n+    <property name=\"target.platform\" value=\"glassfish\"/>\n \n or set this property via the command line.\n \n@@ -202,6 +204,16 @@ Geronimo\n        adapter is now deployed and ready for use in Geronimo.\n \n \n+Glassfish\n+    As previously mentioned, the Glassfish environment uses the glassfish-resources.xml file to configure AdminObjects and ManagedConnectionFactories.\n+    A sample file is provided. To deploy the file simply execute:\n+\n+    ant deploy-rar\n+\n+    If building from the Qpid source tree, this will package and deploy the qpid-ra-<version>.rar file as well as configure the adapter. If you are\n+    not building from source, the adapter will be configured correctly via the glassfish-resources.xml file.\n+\n+\n Step 2 -- Deploy the application component(s).\n \n As previously mentioned, the adapter comes with a variety of EE components for use in your respective application server. You can choose to deploy\n@@ -246,6 +258,25 @@ This is the JNDI name of the SLSB component and it varies by application server.\n \n You can set this property if you want to modify the message contents being routed through the system.\n \n+JMS\n+If you do not want to use EJB and prefer to test the Qpid JCA adapter using the standard JMS API's, simply set the following property\n+\n+    <property name=\"client.use.ejb\" value=\"true\"/> <!-- uses JNDI/JMS or JNDI/RMI -->\n+\n+as\n+\n+    <property name=\"client.use.ejb\" value=\"false\"/> <!-- uses JNDI/JMS or JNDI/RMI -->\n+\n+\n+Request/Reply\n+\n+The EJB/JMS client simply sends a message to a destination and does not receive a response. The Qpid JCA examples includes a request-reply\n+example to allow you to receive a response. The following command:\n+\n+ant run-reqresp\n+\n+will execute this example. A variety of configuration options for both the EJB/JMS and Request/Reply are provided. Please see the build.xml file for more details.\n+\n Web\n The Qpid JCA Example comes with a web application. To access the web component, simply use a browser of your choice and navigate to\n \n@@ -267,6 +298,14 @@ instead of posting to a queue, the web application will use the local interface\n RMI client.\n \n \n+Similar to the Request/Reply example, a Request/Reploy Servlet is provided as well. To access this servlet navigate to the above URL:\n+\n+\n+http://<server-host-name>:<server-port>/qpid-jca-web/qpid-reqresp\n+\n+A reasonable set of defaults is provided which can be further tuned and configured to suit your development needs.\n+\n+\n Summary\n =======\n While conceptually simple, the Qpid JCA example provides a majority of the component types and messaging patterns you are most likely to use your development efforts.", "filename": "jca/example/README.txt"}, {"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/build-geronimo-properties.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/build-geronimo-properties.xml", "sha": "02ecb531342913570aea6b56386de017559ef0c6", "changes": 19, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/build-geronimo-properties.xml?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -22,20 +22,31 @@\n \n     <property name=\"jndi.scheme\" value=\"name\"/>\n \n-    <!--\n-    <property name=\"qpid.xacf.jndi.name\" value=\"jca:/qpid.jca/QpidJCAAdapter/JCAManagedConnectionFactory/QpidJMSXA\"/>\n-    -->\n     <property name=\"qpid.xacf.jndi.name\" value=\"QpidJMSXA\"/>\n+\n+    <property name=\"jndi.prefix\" value=\"jca:/qpid.jca/QpidJCAAdapter/JCAAdminObject/\"/>\n+\n+\n+    <property name=\"qpid.hello.queue.jndi.name\" value=\"HelloQueue\"/>\n+    <property name=\"qpid.goodbye.queue.jndi.name\" value=\"GoodByeQueue\"/>\n+    <property name=\"qpid.hello.topic.jndi.name\" value=\"HelloTopic\"/>\n+    <property name=\"qpid.goodbye.topic.jndi.name\" value=\"GoodByeTopic\"/>\n+    <property name=\"qpid.request.queue.jndi.name\" value=\"RequestQueue\"/>\n+    <property name=\"qpid.response.queue.jndi.name\" value=\"ResponseQueue\"/>\n+\n+    <!--\n     <property name=\"qpid.cf.jndi.name\" value=\"jca:/qpid.jca/QpidJCAAdapter/JCAAdminObject/QpidConnectionFactory\"/>\n     <property name=\"qpid.hello.queue.jndi.name\" value=\"jca:/qpid.jca/QpidJCAAdapter/JCAAdminObject/HelloQueue\"/>\n     <property name=\"qpid.goodbye.queue.jndi.name\" value=\"jca:/qpid.jca/QpidJCAAdapter/JCAAdminObject/GoodByeQueue\"/>\n     <property name=\"qpid.hello.topic.jndi.name\" value=\"jca:/qpid.jca/QpidJCAAdapter/JCAAdminObject/HelloTopic\"/>\n     <property name=\"qpid.goodbye.topic.jndi.name\" value=\"jca:/qpid.jca/QpidJCAAdapter/JCAAdminObject/GoodByeTopic\"/>\n     <property name=\"qpid.request.queue.jndi.name\" value=\"jca:/qpid.jca/QpidJCAAdapter/JCAAdminObject/RequestQueue\"/>\n     <property name=\"qpid.response.queue.jndi.name\" value=\"jca:/qpid.jca/QpidJCAAdapter/JCAAdminObject/ResponseQueue\"/>\n-\n+    -->\n     <property name=\"qpid.ejb.jndi.name\" value=\"name=&quot;QpidTestEJB&quot;\"/>\n     <property name=\"qpid.ejb.name\" value=\"QpidTestBeanRemote\"/>\n+    <property name=\"qpid.client.cf.jndi.name\" value=\"${jndi.prefix}/QpidConnectionFactory\"/>\n+    <property name=\"qpid.client.dest.jndi.name\" value=\"${jndi.prefix}/${qpid.hello.queue.jndi.name}\"/>\n \n     <property name=\"jndi.context\" value=\"org.openejb.client.RemoteInitialContextFactory\"/>\n     <property name=\"server.host\" value=\"ejbd://localhost:4201\"/>", "filename": "jca/example/build-geronimo-properties.xml"}, {"additions": 135, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/build-glassfish-properties.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/build-glassfish-properties.xml", "sha": "94c79be93198e00743620516f061ae5311355db1", "changes": 135, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/build-glassfish-properties.xml?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -0,0 +1,135 @@\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+-->\n+<project name=\"qpid-jca-example-glassfish-properties\" basedir=\".\" default=\"\">\n+\n+    <property name=\"jndi.scheme\" value=\"name\"/>\n+    <property name=\"jndi.prefix\" value=\"\"/>\n+\n+    <property name=\"qpid.xacf.jndi.name\" value=\"QpidJMSXA\"/>\n+    <property name=\"qpid.hello.topic.jndi.name\" value=\"HelloTopic\"/>\n+    <property name=\"qpid.goodbye.topic.jndi.name\" value=\"GoodByeTopic\"/>\n+    <property name=\"qpid.hello.queue.jndi.name\" value=\"HelloQueue\"/>\n+    <property name=\"qpid.goodbye.queue.jndi.name\" value=\"GoodByeQueue\"/>\n+    <property name=\"qpid.request.queue.jndi.name\" value=\"QpidRequestQueue\"/>\n+    <property name=\"qpid.response.queue.jndi.name\" value=\"QpidResponseQueue\"/>\n+    <property name=\"qpid.ejb.jndi.name\" value=\"mappedName=&quot;QpidTestEJB&quot;\"/>\n+    <property name=\"qpid.ejb.ref.name\" value=\"QpidTestBean/local\"/>\n+    <property name=\"qpid.ejb.name\" value=\"QpidTestBean#org.apache.qpid.jca.example.ejb.QpidTestRemote\"/>\n+    <property name=\"qpid.client.cf.jndi.name\" value=\"QpidConnectionFactory\"/>\n+    <property name=\"qpid.client.dest.jndi.name\" value=\"${qpid.hello.queue.jndi.name}\"/>\n+\n+    <property name=\"jndi.context\" value=\"com.sun.enterprise.naming.SerialInitContextFactory\"/>\n+    <property name=\"server.host\" value=\"iiop://localhost:3700\"/>\n+    <property name=\"glassfish.home\" value=\"${env.GLASSFISH_HOME}\"/>\n+    <property name=\"glassfish.domain\" value=\"domain1\"/>\n+    <property name=\"glassfish.user\" value=\"\"/>\n+    <property name=\"glassfish.password\" value=\"\"/>\n+\n+    <path id=\"compile.classpath\">\n+        <fileset dir=\"${glassfish.home}/glassfish/modules\">\n+            <include name=\"javax.ejb.jar\"/>\n+            <include name=\"javax.transaction.jar\"/>\n+            <include name=\"javax.jms.jar\"/>\n+            <include name=\"javax.resource.jar\"/>\n+            <include name=\"javax.servlet.jar\"/>\n+        </fileset>\n+\n+        <fileset dir=\"${glassfish.home}/glassfish/domains/${glassfish.domain}/lib/ext\">\n+            <include name=\"slf4j-api-*.jar\"/>\n+        </fileset>\n+    </path>\n+\n+    <path id=\"run.classpath\">\n+        <fileset dir=\"${lib.dir}\">\n+            <include name=\"qpid-ra-*.jar\"/>\n+            <include name=\"qpid-client-*.jar\"/>\n+            <include name=\"qpid-common-*.jar\"/>\n+        </fileset>\n+\n+        <fileset dir=\"${glassfish.home}/glassfish/lib/\">\n+            <include name=\"gf-client.jar\"/>\n+        </fileset>\n+\n+        <fileset dir=\"${glassfish.home}/glassfish/modules\">\n+            <include name=\"javax.ejb.jar\"/>\n+            <include name=\"javax.transaction.jar\"/>\n+            <include name=\"javax.jms.jar\"/>\n+            <include name=\"javax.resource.jar\"/>\n+            <include name=\"javax.servlet.jar\"/>\n+        </fileset>\n+        <fileset dir=\"${glassfish.home}/glassfish/domains/${glassfish.domain}/lib/ext\">\n+            <include name=\"slf4j-api-*.jar\"/>\n+        </fileset>\n+    </path>\n+\n+    <filterset id=\"extra.filterset\">\n+        <filter token=\"rar.ver\" value=\"${qpid.ver}\"/>\n+    </filterset>\n+\n+    <macrodef name=\"glassfish\">\n+        <attribute name=\"user\" default=\"${glassfish.user}\"/>\n+        <attribute name=\"password\" default=\"${glassfish.password}\"/>\n+        <attribute name=\"action\" default=\"list-applications\"/>\n+        <attribute name=\"module\"/>\n+        <attribute name=\"plan\" default=\"\"/>\n+        <sequential>\n+            <exec executable=\"${glassfish.home}/bin/asadmin\">\n+                <arg line=\"@{action} @{module} @{plan}\"/>\n+            </exec>\n+        </sequential>\n+    </macrodef>\n+\n+    <target name=\"package-rar\" depends=\"compile\">\n+        <jar destfile=\"${build.dir}/${rar.name}\"/>\n+    </target>\n+\n+    <target name=\"deploy-rar\" depends=\"package-rar\" description=\"Deploy the RAR file.\">\n+        <glassfish action=\"deploy\" module=\"${qpid.jca.dir}/${rar.name}\"/>\n+        <glassfish action=\"add-resources\" module=\"${gen.dir}/glassfish-resources.xml\"/>\n+    </target>\n+\n+\n+    <target name=\"undeploy-resources\">\n+        <glassfish action=\"delete-admin-object\" module=\"${qpid.hello.topic.jndi.name}\"/>\n+        <glassfish action=\"delete-admin-object\" module=\"${qpid.goodbye.topic.jndi.name}\"/>\n+        <glassfish action=\"delete-admin-object\" module=\"${qpid.hello.queue.jndi.name}\"/>\n+        <glassfish action=\"delete-admin-object\" module=\"${qpid.goodbye.queue.jndi.name}\"/>\n+        <glassfish action=\"delete-admin-object\" module=\"${qpid.request.queue.jndi.name}\"/>\n+        <glassfish action=\"delete-admin-object\" module=\"${qpid.response.queue.jndi.name}\"/>\n+        <glassfish action=\"delete-connector-connection-pool\" module=\"--cascade true QpidJMSXAPool\"/>\n+        <glassfish action=\"delete-connector-connection-pool\" module=\"--cascade true QpidJMSPool\"/>\n+        <glassfish action=\"delete-resource-adapter-config\" module=\"QpidResourceAdapter\"/>\n+    </target>\n+\n+    <target name=\"undeploy-rar\" description=\"Deploy the RAR file.\">\n+        <glassfish action=\"undeploy\" module=\"--cascade true qpid-ra-${qpid.ver}\"/>\n+    </target>\n+\n+    <target name=\"deploy-ear\" description=\"Deploy the EAR file.\" depends=\"package-ear\">\n+        <glassfish action=\"deploy\" module=\"${build.dir}/${ear.name}\"/>\n+    </target>\n+\n+    <target name=\"undeploy-ear\" description=\"Undeploy the EAR file.\">\n+        <glassfish action=\"undeploy\" module=\"qpid-jcaex\"/>\n+    </target>\n+</project>\n+\n+", "filename": "jca/example/build-glassfish-properties.xml"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/build-jboss-properties.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/build-jboss-properties.xml", "sha": "fd3827463097ebc431e1d0766361e38c47dbb515", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/build-jboss-properties.xml?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -21,6 +21,7 @@\n <project name=\"qpid-jca-example-jboss-properties\" basedir=\".\" default=\"\">\n \n     <property name=\"jndi.scheme\" value=\"mappedName\"/>\n+    <property name=\"jndi.prefix\" value=\"\"/>\n \n     <property name=\"qpid.xacf.jndi.name\" value=\"java:QpidJMSXA\"/>\n     <property name=\"qpid.cf.jndi.name\" value=\"QpidConnectionFactory\"/>\n@@ -29,9 +30,12 @@\n     <property name=\"qpid.hello.queue.jndi.name\" value=\"HelloQueue\"/>\n     <property name=\"qpid.goodbye.queue.jndi.name\" value=\"GoodByeQueue\"/>\n     <property name=\"qpid.request.queue.jndi.name\" value=\"QpidRequestQueue\"/>\n+    <property name=\"qpid.response.queue.jndi.name\" value=\"QpidResponseQueue\"/>\n     <property name=\"qpid.ejb.jndi.name\" value=\"mappedName=&quot;QpidTestEJB&quot;\"/>\n     <property name=\"qpid.ejb.ref.name\" value=\"QpidTestBean/local\"/>\n     <property name=\"qpid.ejb.name\" value=\"qpid-jcaex/QpidTestBean/remote\"/>\n+    <property name=\"qpid.client.cf.jndi.name\" value=\"${jndi.prefix}/QpidConnectionFactory\"/>\n+    <property name=\"qpid.client.dest.jndi.name\" value=\"${jndi.prefix}/${qpid.hello.queue.jndi.name}\"/>\n \n     <property name=\"jndi.context\" value=\"org.jnp.interfaces.NamingContextFactory\"/>\n     <property name=\"server.host\" value=\"jnp://localhost:1099\"/>", "filename": "jca/example/build-jboss-properties.xml"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/build.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/build.xml", "sha": "60b7f7a0d14a1897a19405ac8d7d735f8d2d2704", "changes": 17, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/build.xml?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -27,7 +27,7 @@\n     <property name=\"qpid.dest_syntax\" value=\"ADDR\"/>\n \n     <!-- Properties controlling running sample standalone client -->\n-    <property name=\"client.use.ejb\" value=\"true\"/> <!-- uses JNDI/JMS or JNDI/RMI -->\n+    <property name=\"client.use.ejb\" value=\"false\"/> <!-- uses JNDI/JMS or JNDI/RMI -->\n     <property name=\"client.message\" value=\"Hello Qpid World\"/>\n     <property name=\"client.message.count\" value=\"1\"/>\n     <property name=\"client.use.topic\" value=\"false\"/> <!-- Use topic/queue -->\n@@ -72,7 +72,6 @@\n                 <filter token=\"rar.name\" value=\"${rar.name}\"/>\n                 <filter token=\"ejb.name\" value=\"${ejb.name}\"/>\n                 <filter token=\"war.name\" value=\"${war.name}\"/>\n-\n                 <filter token=\"broker.url\" value=\"${broker.url}\"/>\n \n                 <filter token=\"qpid.hello.topic.dest.address\" value=\"${qpid.hello.topic.dest.address}\"/>\n@@ -92,12 +91,14 @@\n                 <filter token=\"rar.name\" value=\"${rar.name}\"/>\n                 <filter token=\"broker.url\" value=\"${broker.url}\"/>\n                 <filter token=\"jndi.scheme\" value=\"${jndi.scheme}\"/>\n+                <filter token=\"jndi.prefix\" value=\"${jndi.prefix}\"/>\n                 <filter token=\"qpid.xacf.jndi.name\" value=\"${qpid.xacf.jndi.name}\"/>\n                 <filter token=\"qpid.hello.topic.jndi.name\" value=\"${qpid.hello.topic.jndi.name}\"/>\n                 <filter token=\"qpid.goodbye.topic.jndi.name\" value=\"${qpid.goodbye.topic.jndi.name}\"/>\n                 <filter token=\"qpid.hello.queue.jndi.name\" value=\"${qpid.hello.queue.jndi.name}\"/>\n                 <filter token=\"qpid.goodbye.queue.jndi.name\" value=\"${qpid.goodbye.queue.jndi.name}\"/>\n                 <filter token=\"qpid.request.queue.jndi.name\" value=\"${qpid.request.queue.jndi.name}\"/>\n+                <filter token=\"qpid.response.queue.jndi.name\" value=\"${qpid.response.queue.jndi.name}\"/>\n                 <filter token=\"qpid.ejb.jndi.name\" value=\"${qpid.ejb.jndi.name}\"/>\n             </filterset>\n         </copy>\n@@ -112,6 +113,9 @@\n             <classes dir=\"${build.classes.dir}\">\n                 <include name=\"org/apache/qpid/jca/example/web/**\"/>\n             </classes>\n+            <metainf dir=\"${gen.dir}\">\n+                <include name=\"glassfish-web.xml\"/>\n+            </metainf>\n         </war>\n     </target>\n \n@@ -120,6 +124,7 @@\n             <include name=\"org/apache/qpid/jca/example/ejb/**/*.class\"/>\n             <metainf dir=\"${gen.dir}\">\n                 <include name=\"jboss.xml\"/>\n+                <include name=\"glassfish-ejb-jar.xml\"/>\n             </metainf>\n         </jar>\n     </target>\n@@ -143,9 +148,9 @@\n             <sysproperty key=\"java.naming.factory.initial\" value=\"${jndi.context}\"/>\n             <sysproperty key=\"java.naming.provider.url\" value=\"${server.host}\"/>\n             <sysproperty key=\"qpid.ejb.name\" value=\"${qpid.ejb.name}\"/>\n-            <sysproperty key=\"qpid.cf.name\" value=\"${qpid.cf.jndi.name}\"/>\n+            <sysproperty key=\"qpid.cf.name\" value=\"${qpid.client.cf.jndi.name}\"/>\n+            <sysproperty key=\"qpid.dest.name\" value=\"${qpid.client.dest.jndi.name}\"/>\n             <sysproperty key=\"qpid.dest_syntax\" value=\"${qpid.dest_syntax}\"/>\n-            <sysproperty key=\"qpid.dest.name\" value=\"${qpid.hello.queue.jndi.name}\"/>\n             <sysproperty key=\"log4j.configuration\" value=\"file://${conf.dir}/log4j.properties\"/>\n \n             <sysproperty key=\"qpid.message\" value=\"${client.message}\"/>\n@@ -167,8 +172,8 @@\n             <sysproperty key=\"qpid.message\" value=\"Hello, World\"/>\n             <sysproperty key=\"message.count\" value=\"1\"/>\n             <sysproperty key=\"thread.count\" value=\"5\"/>\n-            <sysproperty key=\"qpid.cf.name\" value=\"${qpid.cf.jndi.name}\"/>\n-            <sysproperty key=\"qpid.dest.name\" value=\"${qpid.responder.queue.jndi.name}\"/>\n+            <sysproperty key=\"qpid.cf.name\" value=\"${qpid.client.cf.jndi.name}\"/>\n+            <sysproperty key=\"qpid.dest.name\" value=\"${qpid.client.dest.jndi.name}\"/>\n             <sysproperty key=\"log4j.configuration\" value=\"file://${conf.dir}/log4j.properties\"/>\n             <sysproperty key=\"qpid.dest_syntax\" value=\"${qpid.dest_syntax}\"/>\n         </java>", "filename": "jca/example/build.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/geronimo-application.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/geronimo-application.xml", "sha": "384f6b2e759059b59f3b548764ff7b1e14daf422", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/conf/geronimo-application.xml?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -21,7 +21,7 @@\n  -->\n <application xmlns=\"http://geronimo.apache.org/xml/ns/j2ee/application-2.0\"\n     xmlns:sys=\"http://geronimo.apache.org/xml/ns/deployment-1.2\"\n-    xmlns:naming=\"http://geronimo.apache.org/xml/ns/naming-1.2\"\n+    xmlns:nam=\"http://geronimo.apache.org/xml/ns/naming-1.2\"\n     application-name=\"QpidJCAExampleApplication\">\n \n     <sys:environment>", "filename": "jca/example/conf/geronimo-application.xml"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/geronimo-ra.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/geronimo-ra.xml", "sha": "a7511f647f7955d59c2003937d35cb601a7f6e1b", "changes": 18, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/conf/geronimo-ra.xml?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -74,63 +74,65 @@\n       <adminobject-interface>org.apache.qpid.ra.admin.QpidTopic</adminobject-interface>\n       <adminobject-class>org.apache.qpid.ra.admin.QpidTopicImpl</adminobject-class>\n       <adminobject-instance>\n-         <message-destination-name>HelloTopic</message-destination-name>\n+          <message-destination-name>HelloTopic</message-destination-name>\n          <config-property-setting name=\"DestinationAddress\">@qpid.hello.topic.dest.address@</config-property-setting>\n       </adminobject-instance>\n     </adminobject>\n     <adminobject>\n       <adminobject-interface>org.apache.qpid.ra.admin.QpidTopic</adminobject-interface>\n       <adminobject-class>org.apache.qpid.ra.admin.QpidTopicImpl</adminobject-class>\n       <adminobject-instance>\n-         <message-destination-name>GoodByeTopic</message-destination-name>\n+          <message-destination-name>GoodByeTopic</message-destination-name>\n          <config-property-setting name=\"DestinationAddress\">@qpid.goodbye.topic.dest.address@</config-property-setting>\n       </adminobject-instance>\n     </adminobject>\n+    <!--\n     <adminobject>\n       <adminobject-interface>org.apache.qpid.ra.admin.QpidTopic</adminobject-interface>\n       <adminobject-class>org.apache.qpid.ra.admin.QpidTopicImpl</adminobject-class>\n       <adminobject-instance>\n-         <message-destination-name>HelloGoodByeTopic</message-destination-name>\n+          <message-destination-name>jms/HelloGoodByeTopic</message-destination-name>\n          <config-property-setting name=\"DestinationAddress\">@qpid.hellogoodbye.topic.dest.address@</config-property-setting>\n       </adminobject-instance>\n     </adminobject>\n+    -->\n     <adminobject>\n       <adminobject-interface>org.apache.qpid.ra.admin.QpidQueue</adminobject-interface>\n       <adminobject-class>org.apache.qpid.ra.admin.QpidQueueImpl</adminobject-class>\n       <adminobject-instance>\n-         <message-destination-name>HelloQueue</message-destination-name>\n+          <message-destination-name>HelloQueue</message-destination-name>\n          <config-property-setting name=\"DestinationAddress\">@qpid.hello.queue.dest.address@</config-property-setting>\n       </adminobject-instance>\n     </adminobject>\n     <adminobject>\n       <adminobject-interface>org.apache.qpid.ra.admin.QpidQueue</adminobject-interface>\n       <adminobject-class>org.apache.qpid.ra.admin.QpidQueueImpl</adminobject-class>\n       <adminobject-instance>\n-         <message-destination-name>GoodByeQueue</message-destination-name>\n+          <message-destination-name>GoodByeQueue</message-destination-name>\n          <config-property-setting name=\"DestinationAddress\">@qpid.goodbye.queue.dest.address@</config-property-setting>\n       </adminobject-instance>\n     </adminobject>\n     <adminobject>\n       <adminobject-interface>org.apache.qpid.ra.admin.QpidQueue</adminobject-interface>\n       <adminobject-class>org.apache.qpid.ra.admin.QpidQueueImpl</adminobject-class>\n       <adminobject-instance>\n-         <message-destination-name>RequestQueue</message-destination-name>\n+          <message-destination-name>RequestQueue</message-destination-name>\n          <config-property-setting name=\"DestinationAddress\">@qpid.request.queue.dest.address@</config-property-setting>\n       </adminobject-instance>\n     </adminobject>\n     <adminobject>\n       <adminobject-interface>org.apache.qpid.ra.admin.QpidQueue</adminobject-interface>\n       <adminobject-class>org.apache.qpid.ra.admin.QpidQueueImpl</adminobject-class>\n       <adminobject-instance>\n-         <message-destination-name>ResponseQueue</message-destination-name>\n+          <message-destination-name>ResponseQueue</message-destination-name>\n          <config-property-setting name=\"DestinationAddress\">@qpid.response.queue.dest.address@</config-property-setting>\n       </adminobject-instance>\n     </adminobject>\n     <adminobject>\n       <adminobject-interface>javax.jms.ConnectionFactory</adminobject-interface>\n       <adminobject-class>org.apache.qpid.ra.admin.QpidConnectionFactoryProxy</adminobject-class>\n       <adminobject-instance>\n-         <message-destination-name>QpidConnectionFactory</message-destination-name>\n+          <message-destination-name>QpidConnectionFactory</message-destination-name>\n          <config-property-setting name=\"ConnectionURL\">@broker.url@</config-property-setting>\n       </adminobject-instance>\n     </adminobject>", "filename": "jca/example/conf/geronimo-ra.xml"}, {"additions": 70, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/glassfish-ejb-jar.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/glassfish-ejb-jar.xml", "sha": "e3ea140472be153f5a129ee588211f41a987e899", "changes": 70, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/conf/glassfish-ejb-jar.xml?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE glassfish-ejb-jar PUBLIC \"-//GlassFish.org//DTD GlassFish Application Server 3.1 EJB 3.1//EN\" \"http://glassfish.org/dtds/glassfish-ejb-jar_3_1-1.dtd\">\n+<glassfish-ejb-jar>\n+   <enterprise-beans>\n+   <ejb>\n+     <ejb-name>QpidHelloListenerBean</ejb-name>\n+     <jndi-name>HelloQueue</jndi-name>\n+     <mdb-resource-adapter>\n+        <resource-adapter-mid>qpid-ra-@rar.ver@</resource-adapter-mid>\n+     </mdb-resource-adapter>\n+     <resource-ref>\n+       <res-ref-name>QpidJMSXA</res-ref-name>\n+       <jndi-name>QpidJMSXA</jndi-name>\n+     </resource-ref>\n+   </ejb>\n+   <ejb>\n+     <ejb-name>QpidGoodByeListenerBean</ejb-name>\n+     <jndi-name>GoodByeQueue</jndi-name>\n+     <mdb-resource-adapter>\n+        <resource-adapter-mid>qpid-ra-@rar.ver@</resource-adapter-mid>\n+     </mdb-resource-adapter>\n+     <resource-ref>\n+       <res-ref-name>QpidJMSXA</res-ref-name>\n+       <jndi-name>QpidJMSXA</jndi-name>\n+     </resource-ref>\n+   </ejb>\n+   <ejb>\n+     <ejb-name>QpidHelloSubscriberBean</ejb-name>\n+     <jndi-name>HelloTopic</jndi-name>\n+     <mdb-resource-adapter>\n+        <resource-adapter-mid>qpid-ra-@rar.ver@</resource-adapter-mid>\n+     </mdb-resource-adapter>\n+     <resource-ref>\n+       <res-ref-name>QpidJMSXA</res-ref-name>\n+       <jndi-name>QpidJMSXA</jndi-name>\n+     </resource-ref>\n+   </ejb>\n+   <ejb>\n+     <ejb-name>QpidGoodByeSubscriberBean</ejb-name>\n+     <jndi-name>GoodByeTopic</jndi-name>\n+     <mdb-resource-adapter>\n+        <resource-adapter-mid>qpid-ra-@rar.ver@</resource-adapter-mid>\n+     </mdb-resource-adapter>\n+     <resource-ref>\n+       <res-ref-name>QpidJMSXA</res-ref-name>\n+       <jndi-name>QpidJMSXA</jndi-name>\n+     </resource-ref>\n+   </ejb>\n+   <ejb>\n+     <ejb-name>QpidJMSResponderBean</ejb-name>\n+     <jndi-name>QpidResponderQueue</jndi-name>\n+     <mdb-resource-adapter>\n+        <resource-adapter-mid>qpid-ra-@rar.ver@</resource-adapter-mid>\n+     </mdb-resource-adapter>\n+     <resource-ref>\n+       <res-ref-name>QpidJMSXA</res-ref-name>\n+       <jndi-name>QpidJMSXA</jndi-name>\n+     </resource-ref>\n+   </ejb>\n+   <ejb>\n+     <ejb-name>QpidTestBean</ejb-name>\n+     <jndi-name>QpidTestBean</jndi-name>\n+     <resource-ref>\n+       <res-ref-name>QpidJMSXA</res-ref-name>\n+       <jndi-name>QpidJMSXA</jndi-name>\n+     </resource-ref>\n+   </ejb>\n+   </enterprise-beans>\n+</glassfish-ejb-jar>\n+", "filename": "jca/example/conf/glassfish-ejb-jar.xml"}, {"additions": 74, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/glassfish-resources.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/glassfish-resources.xml", "sha": "9eab4302d57e48913d9496b3cb667e923b9e2a3b", "changes": 74, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/conf/glassfish-resources.xml?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE resources PUBLIC \"-//GlassFish.org//DTD GlassFish Application Server 3.1 Resource Definitions//EN\" \"http://glassfish.org/dtds/glassfish-resources_1_5.dtd\">\n+<resources>\n+\n+\n+    <resource-adapter-config name=\"QpidResourceAdapter\" resource-adapter-name=\"qpid-ra-@rar.ver@\" thread-pool-ids=\"thread-pool-1\">\n+       <property name=\"TransactionManagerLocatorClass\" value=\"org.apache.qpid.ra.tm.GlassfishTransactionManagerLocator\"/>\n+       <property name=\"TransactionManagerLocatorMethod\" value=\"getTm\"/>\n+    </resource-adapter-config>\n+\n+    <!--XAConnectionFactory-->\n+    <connector-connection-pool\n+        name=\"QpidJMSXAPool\"\n+        resource-adapter-name=\"qpid-ra-@rar.ver@\"\n+        connection-definition-name=\"org.apache.qpid.ra.QpidRAConnectionFactory\"\n+        transaction-support=\"XATransaction\"\n+        ping=\"true\">\n+        <property name=\"connectionURL\" value=\"@broker.url@\"/>\n+        <property name=\"SessionDefaultType\" value=\"javax.jms.Queue\"/>\n+   </connector-connection-pool>\n+\n+    <connector-resource jndi-name=\"QpidJMSXA\" pool-name=\"QpidJMSXAPool\"/>\n+\n+    <!--LocalTransaction ConnectionFactory\n+    <connector-connection-pool\n+        name=\"QpidJMSPool\"\n+        resource-adapter-name=\"qpid-ra-@rar.ver@\"\n+        connection-definition-name=\"org.apache.qpid.ra.QpidRAConnectionFactory\"\n+        transaction-support=\"LocalTransaction\"\n+        ping=\"true\">\n+        <property name=\"connectionURL\" value=\"@broker.url@\"/>\n+        <property name=\"SessionDefaultType\" value=\"javax.jms.Queue\"/>\n+        <property name=\"UseLocalTx\" value=\"true\"/>\n+    </connector-connection-pool>\n+\n+\n+    <connector-resource jndi-name=\"QpidJMS\" pool-name=\"QpidJMSPool\"/>\n+\n+    -->\n+    <!--Destinations-->\n+    <admin-object-resource jndi-name=\"HelloQueue\" res-adapter=\"qpid-ra-@rar.ver@\" res-type=\"org.apache.qpid.ra.admin.QpidQueue\" class-name=\"org.apache.qpid.ra.admin.QpidQueueImpl\">\n+        <property name=\"DestinationAddress\" value=\"@qpid.hello.queue.dest.address@\"/>\n+    </admin-object-resource>\n+\n+    <admin-object-resource jndi-name=\"GoodByeQueue\" res-adapter=\"qpid-ra-@rar.ver@\" res-type=\"org.apache.qpid.ra.admin.QpidQueue\" class-name=\"org.apache.qpid.ra.admin.QpidQueueImpl\">\n+        <property name=\"DestinationAddress\" value=\"@qpid.goodbye.queue.dest.address@\"/>\n+    </admin-object-resource>\n+\n+    <admin-object-resource jndi-name=\"HelloTopic\" res-adapter=\"qpid-ra-@rar.ver@\" res-type=\"org.apache.qpid.ra.admin.QpidTopic\" class-name=\"org.apache.qpid.ra.admin.QpidTopicImpl\">\n+        <property name=\"DestinationAddress\" value=\"@qpid.hello.topic.dest.address@\"/>\n+    </admin-object-resource>\n+\n+    <admin-object-resource jndi-name=\"GoodByeTopic\" res-adapter=\"qpid-ra-@rar.ver@\" res-type=\"org.apache.qpid.ra.admin.QpidTopic\" class-name=\"org.apache.qpid.ra.admin.QpidTopicImpl\">\n+        <property name=\"DestinationAddress\" value=\"@qpid.goodbye.topic.dest.address@\"/>\n+    </admin-object-resource>\n+\n+    <!--\n+    <admin-object-resource jndi-name=\"HelloGoodByeTopic\" res-adapter=\"qpid-ra-@rar.ver@\" res-type=\"org.apache.qpid.ra.admin.QpidTopic\" class-name=\"org.apache.qpid.ra.admin.QpidTopicImpl\">\n+        <property name=\"DestinationAddress\" value=\"@qpid.hellogoodbye.topic.dest.address@\"/>\n+    </admin-object-resource>\n+    -->\n+    <admin-object-resource jndi-name=\"QpidRequestQueue\" res-adapter=\"qpid-ra-@rar.ver@\" res-type=\"org.apache.qpid.ra.admin.QpidQueue\" class-name=\"org.apache.qpid.ra.admin.QpidQueueImpl\">\n+        <property name=\"DestinationAddress\" value=\"@qpid.request.queue.dest.address@\"/>\n+    </admin-object-resource>\n+\n+    <admin-object-resource jndi-name=\"QpidResponseQueue\" res-adapter=\"qpid-ra-@rar.ver@\" res-type=\"org.apache.qpid.ra.admin.QpidQueue\" class-name=\"org.apache.qpid.ra.admin.QpidQueueImpl\">\n+        <property name=\"DestinationAddress\" value=\"@qpid.response.queue.dest.address@\"/>\n+    </admin-object-resource>\n+\n+    <admin-object-resource jndi-name=\"QpidConnectionFactory\" res-adapter=\"qpid-ra-@rar.ver@\" res-type=\"javax.jms.ConnectionFactory\" class-name=\"org.apache.qpid.ra.admin.QpidConnectionFactoryProxy\">\n+        <property name=\"ConnectionURL\" value=\"@broker.url@\"/>\n+    </admin-object-resource>\n+\n+</resources>", "filename": "jca/example/conf/glassfish-resources.xml"}, {"additions": 26, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/glassfish-web.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/conf/glassfish-web.xml", "sha": "950ee73d51e09bee843fd88a14a86db2dc53ae78", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/conf/glassfish-web.xml?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE glassfish-web-app PUBLIC \"-//GlassFish.org//DTD GlassFish Application Server 3.1 Servlet 3.0//EN\" \"http://glassfish.org/dtds/glassfish-web-app_3_0-1.dtd\">\n+<glassfish-web-app>\n+\n+    <context-root>qpid-jca-web</context-root>\n+\n+    <ejb-ref>\n+        <ejb-ref-name>QpidTestBean</ejb-ref-name>\n+        <jndi-name>QpidTestBean</jndi-name>\n+    </ejb-ref>\n+\n+    <resource-ref>\n+      <res-ref-name>QpidJMSXA</res-ref-name>\n+      <jndi-name>QpidJMSXA</jndi-name>\n+    </resource-ref>\n+    <resource-env-ref>\n+      <res-env-ref-name>HelloQueue</res-env-ref-name>\n+      <jndi-name>HelloQueue</jndi-name>\n+    </resource-env-ref>\n+    <resource-ref>\n+      <res-ref-name>HelloTopic</res-ref-name>\n+      <jndi-name>HelloTopic</jndi-name>\n+    </resource-ref>\n+\n+\n+</glassfish-web-app>", "filename": "jca/example/conf/glassfish-web.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/client/QpidRequestResponseClient.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/client/QpidRequestResponseClient.java", "sha": "fd5b3efff0f8af1632d88ef11fbb25f1959f3830", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/src/main/java/org/apache/qpid/jca/example/client/QpidRequestResponseClient.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -42,7 +42,7 @@\n     private static final Logger _log = LoggerFactory.getLogger(QpidRequestResponseClient.class);\n \n     private static final String DEFAULT_CF_JNDI = \"QpidConnectionFactory\";\n-    private static final String DEFAULT_DESTINATION_JNDI = \"QpidResponderQueue\";\n+    private static final String DEFAULT_DESTINATION_JNDI = \"QpidRequestQueue\";\n     private static final String DEFAULT_MESSAGE = \"Hello, World!\";\n     private static final int DEFAULT_MESSAGE_COUNT = 1;\n     private static final int DEFAULT_THREAD_COUNT = 1;", "filename": "jca/example/src/main/java/org/apache/qpid/jca/example/client/QpidRequestResponseClient.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidGoodByeListenerBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidGoodByeListenerBean.java", "sha": "bdb722a87b8255864b15083b6da7025decd68237", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidGoodByeListenerBean.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -34,7 +34,7 @@\n @MessageDriven(activationConfig = {\n     @ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\"),\n     @ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Queue\"),\n-    @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@qpid.goodbye.queue.jndi.name@\"),\n+    @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@jndi.prefix@@qpid.goodbye.queue.jndi.name@\"),\n     @ActivationConfigProperty(propertyName = \"connectionURL\", propertyValue = \"@broker.url@\"),\n     @ActivationConfigProperty(propertyName = \"useLocalTx\", propertyValue = \"false\"),\n     @ActivationConfigProperty(propertyName = \"maxSession\", propertyValue = \"10\")", "filename": "jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidGoodByeListenerBean.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidGoodByeSubscriberBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidGoodByeSubscriberBean.java", "sha": "f2e4d6aaa5ea505dbfbc025c9372806d288367d5", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidGoodByeSubscriberBean.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -34,7 +34,7 @@\n @MessageDriven(activationConfig = {\n     @ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\"),\n     @ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n-    @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@qpid.goodbye.topic.jndi.name@\"),\n+    @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@jndi.prefix@@qpid.goodbye.topic.jndi.name@\"),\n     @ActivationConfigProperty(propertyName = \"connectionURL\", propertyValue = \"@broker.url@\"),\n     @ActivationConfigProperty(propertyName = \"subscriptionDurability\", propertyValue = \"NotDurable\"),\n     @ActivationConfigProperty(propertyName = \"maxSession\", propertyValue = \"10\")", "filename": "jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidGoodByeSubscriberBean.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidHelloListenerBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidHelloListenerBean.java", "sha": "42a9ab6f6021a0c019064aa2f739fb91f1f02745", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidHelloListenerBean.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -42,7 +42,7 @@\n @MessageDriven(activationConfig = {\n    @ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\"),\n    @ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Queue\"),\n-   @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@qpid.hello.queue.jndi.name@\"),\n+   @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@jndi.prefix@@qpid.hello.queue.jndi.name@\"),\n    @ActivationConfigProperty(propertyName = \"connectionURL\", propertyValue = \"@broker.url@\"),\n    @ActivationConfigProperty(propertyName = \"maxSession\", propertyValue = \"10\")\n })", "filename": "jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidHelloListenerBean.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidHelloSubscriberBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidHelloSubscriberBean.java", "sha": "882c85fa18575472fff65bec23e77ca17464d066", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidHelloSubscriberBean.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -42,7 +42,7 @@\n @MessageDriven(activationConfig = {\n    @ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\"),\n    @ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Topic\"),\n-   @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@qpid.hello.topic.jndi.name@\"),\n+   @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@jndi.prefix@@qpid.hello.topic.jndi.name@\"),\n    @ActivationConfigProperty(propertyName = \"connectionURL\", propertyValue = \"@broker.url@\"),\n    @ActivationConfigProperty(propertyName = \"subscriptionDurability\", propertyValue = \"NotDurable\"),\n    @ActivationConfigProperty(propertyName = \"maxSession\", propertyValue = \"10\")", "filename": "jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidHelloSubscriberBean.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidJMSResponderBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidJMSResponderBean.java", "sha": "6e99d4fe7ff6190c2e4caebe45113d4af3f2678e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidJMSResponderBean.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -41,7 +41,7 @@\n @MessageDriven(activationConfig = {\n     @ActivationConfigProperty(propertyName = \"acknowledgeMode\", propertyValue = \"Auto-acknowledge\"),\n     @ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Queue\"),\n-    @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@qpid.request.queue.jndi.name@\"),\n+    @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"@jndi.prefix@@qpid.request.queue.jndi.name@\"),\n     @ActivationConfigProperty(propertyName = \"connectionURL\", propertyValue = \"@broker.url@\"),\n     @ActivationConfigProperty(propertyName = \"maxSession\", propertyValue = \"10\")\n })", "filename": "jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidJMSResponderBean.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidTestBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidTestBean.java", "sha": "a5f4770257b28bf7cffd24d5c672013cd4a4269a", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidTestBean.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -43,10 +43,10 @@\n     @Resource(@jndi.scheme@=\"@qpid.xacf.jndi.name@\")\n     private ConnectionFactory _connectionFactory;\n \n-    @Resource(@jndi.scheme@=\"HelloQueue\")\n+    @Resource(@jndi.scheme@=\"@qpid.hello.queue.jndi.name@\")\n     private Destination _queue;\n \n-    @Resource(@jndi.scheme@=\"HelloTopic\")\n+    @Resource(@jndi.scheme@=\"@qpid.hello.topic.jndi.name@\")\n     private Destination _topic;\n \n     @Override", "filename": "jca/example/src/main/java/org/apache/qpid/jca/example/ejb/QpidTestBean.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/web/QpidRequestResponseServlet.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/example/src/main/java/org/apache/qpid/jca/example/web/QpidRequestResponseServlet.java", "sha": "d069a0c943e7254856d9b572b313cc94f8d43807", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/example/src/main/java/org/apache/qpid/jca/example/web/QpidRequestResponseServlet.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -59,10 +59,10 @@\n     @Resource(@jndi.scheme@=\"@qpid.xacf.jndi.name@\")\n     private ConnectionFactory _connectionFactory;\n \n-    @Resource(@jndi.scheme@=\"QpidRequestQueue\")\n+    @Resource(@jndi.scheme@=\"@qpid.request.queue.jndi.name@\")\n     private Destination _queue;\n \n-    @Resource(@jndi.scheme@=\"QpidResponseQueue\")\n+    @Resource(@jndi.scheme@=\"@qpid.response.queue.jndi.name@\")\n     private Destination _responseQueue;\n \n ", "filename": "jca/example/src/main/java/org/apache/qpid/jca/example/web/QpidRequestResponseServlet.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/src/main/java/org/apache/qpid/ra/admin/QpidConnectionFactoryProxy.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/src/main/java/org/apache/qpid/ra/admin/QpidConnectionFactoryProxy.java", "sha": "7f2bee079f33afbaff672215c5325d79768edc07", "changes": 15, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/src/main/java/org/apache/qpid/ra/admin/QpidConnectionFactoryProxy.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -137,7 +137,20 @@ public String getConnectionURL()\n     */\n    public Connection createConnection() throws JMSException\n    {\n-       return _delegate.createConnection();\n+       try\n+       {\n+           if(_delegate == null)\n+           {\n+               getReference();\n+           }\n+\n+           return _delegate.createConnection();\n+       }\n+       catch(Exception e)\n+       {\n+          throw new JMSException(e.getMessage());\n+       }\n+\n    }\n \n    /**", "filename": "jca/src/main/java/org/apache/qpid/ra/admin/QpidConnectionFactoryProxy.java"}, {"additions": 63, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a284f1f648af7f66653de28fb60948c6f1573498/jca/src/main/java/org/apache/qpid/ra/tm/GlassfishTransactionManagerLocator.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a284f1f648af7f66653de28fb60948c6f1573498/jca/src/main/java/org/apache/qpid/ra/tm/GlassfishTransactionManagerLocator.java", "sha": "cff53d2710887d1c7bbb45f77d00ed85f375647d", "changes": 63, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/jca/src/main/java/org/apache/qpid/ra/tm/GlassfishTransactionManagerLocator.java?ref=a284f1f648af7f66653de28fb60948c6f1573498", "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.qpid.ra.tm;\n+\n+\n+import javax.naming.InitialContext;\n+import javax.transaction.TransactionManager;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GlassfishTransactionManagerLocator\n+{\n+    private static final Logger _log = LoggerFactory.getLogger(GlassfishTransactionManagerLocator.class);\n+\n+    private static final String TM_JNDI_NAME = \"java:appserver/TransactionManager\";\n+\n+    public TransactionManager getTm() throws Exception\n+    {\n+        InitialContext ctx = null;\n+        TransactionManager tm = null;\n+\n+        try\n+        {\n+            ctx = new InitialContext();\n+            tm = (TransactionManager)ctx.lookup(TM_JNDI_NAME);\n+        }\n+        catch(Exception e)\n+        {\n+            _log.error(\"Error attempting to location TM \" + e.getMessage());\n+        }\n+        finally\n+        {\n+            try\n+            {\n+                if(ctx != null)\n+                {\n+                    ctx.close();\n+                }\n+            }\n+            catch(Exception ignore){}\n+        }\n+\n+        return tm;\n+    }\n+}", "filename": "jca/src/main/java/org/apache/qpid/ra/tm/GlassfishTransactionManagerLocator.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/31639fd16c363beac8833600d209b1f445c2c8c1", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/8bd363e96bf1886d01fe56fa28b88ac9e73c48b1", "message": "QPID-3823: ServerSession unblock(AMQQueue) can cause NPE when trying to remove a queue from _blockingQueues Map that is not present\n\nApplied patch from Andrew MacBean <andymacbean@gmail.com> and Philip Harvey <phil@philharveyonline.com>", "bug_id": "qpid-jms-amqp-0-x_73", "file": [{"additions": 22, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/31639fd16c363beac8833600d209b1f445c2c8c1/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/31639fd16c363beac8833600d209b1f445c2c8c1/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "sha": "2266de0ae4df36b0786269111fc00ee8d1fd8bc3", "changes": 40, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=31639fd16c363beac8833600d209b1f445c2c8c1", "patch": "@@ -20,8 +20,22 @@\n  */\n package org.apache.qpid.server;\n \n-import org.apache.log4j.Logger;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentSkipListSet;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.AMQSecurityException;\n import org.apache.qpid.framing.AMQMethodBody;\n@@ -79,21 +93,6 @@\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.transport.TransportException;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.SortedSet;\n-import java.util.TreeSet;\n-import java.util.UUID;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicLong;\n-\n public class AMQChannel implements SessionConfig, AMQSessionModel, AsyncAutoCommitTransaction.FutureRecorder\n {\n     public static final int DEFAULT_PREFETCH = 4096;\n@@ -155,7 +154,7 @@\n     private final AMQProtocolSession _session;\n     private AtomicBoolean _closing = new AtomicBoolean(false);\n \n-    private final ConcurrentMap<AMQQueue, Boolean> _blockingQueues = new ConcurrentHashMap<AMQQueue, Boolean>();\n+    private final Set<AMQQueue> _blockingQueues = new ConcurrentSkipListSet<AMQQueue>();\n \n     private final AtomicBoolean _blocking = new AtomicBoolean(false);\n \n@@ -1363,7 +1362,7 @@ public LogActor getLogActor()\n \n     public void block(AMQQueue queue)\n     {\n-        if(_blockingQueues.putIfAbsent(queue, Boolean.TRUE) == null)\n+        if(_blockingQueues.add(queue))\n         {\n \n             if(_blocking.compareAndSet(false,true))\n@@ -1616,4 +1615,9 @@ boolean isReadyForCompletion()\n         }\n     }\n \n+    @Override\n+    public int compareTo(AMQSessionModel session)\n+    {\n+        return getId().toString().compareTo(session.getID().toString());\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/AMQChannel.java"}, {"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/31639fd16c363beac8833600d209b1f445c2c8c1/broker/src/main/java/org/apache/qpid/server/protocol/AMQSessionModel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/31639fd16c363beac8833600d209b1f445c2c8c1/broker/src/main/java/org/apache/qpid/server/protocol/AMQSessionModel.java", "sha": "a80eb46cfa6acb1331a0512b997d5f5219b34ada", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/AMQSessionModel.java?ref=31639fd16c363beac8833600d209b1f445c2c8c1", "patch": "@@ -20,11 +20,19 @@\n  */\n package org.apache.qpid.server.protocol;\n \n+import java.util.concurrent.ConcurrentSkipListSet;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.server.logging.LogSubject;\n import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.SimpleAMQQueue;\n \n-public interface AMQSessionModel\n+/**\n+ * Session model interface.\n+ * Extends {@link Comparable} to allow objects to be inserted into a {@link ConcurrentSkipListSet}\n+ * when monitoring the blocking and blocking of queues/sessions in {@link SimpleAMQQueue}.\n+ */\n+public interface AMQSessionModel extends Comparable<AMQSessionModel>\n {\n     public Object getID();\n ", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/AMQSessionModel.java"}, {"additions": 21, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/31639fd16c363beac8833600d209b1f445c2c8c1/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/31639fd16c363beac8833600d209b1f445c2c8c1/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java", "sha": "c6d634fb2892f4246a6d3984396dcb605667e0a5", "changes": 44, "status": "modified", "deletions": 23, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java?ref=31639fd16c363beac8833600d209b1f445c2c8c1", "patch": "@@ -18,8 +18,23 @@\n  */\n package org.apache.qpid.server.queue;\n \n-import org.apache.log4j.Logger;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentSkipListSet;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.management.JMException;\n \n+import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.AMQSecurityException;\n import org.apache.qpid.framing.AMQShortString;\n@@ -52,22 +67,6 @@\n import org.apache.qpid.server.txn.ServerTransaction;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n-import javax.management.JMException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.UUID;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicLong;\n-\n public class SimpleAMQQueue implements AMQQueue, Subscription.StateListener, MessageGroupManager.SubscriptionResetHelper\n {\n     private static final Logger _logger = Logger.getLogger(SimpleAMQQueue.class);\n@@ -165,7 +164,7 @@\n     private AtomicInteger _deliveredMessages = new AtomicInteger();\n     private AtomicBoolean _stopped = new AtomicBoolean(false);\n \n-    private final ConcurrentMap<AMQSessionModel, Boolean> _blockedChannels = new ConcurrentHashMap<AMQSessionModel, Boolean>();\n+    private final Set<AMQSessionModel> _blockedChannels = new ConcurrentSkipListSet<AMQSessionModel>();\n \n     private final AtomicBoolean _deleted = new AtomicBoolean(false);\n     private final List<Task> _deleteTaskList = new CopyOnWriteArrayList<Task>();\n@@ -1629,7 +1628,7 @@ public void checkCapacity(AMQSessionModel channel)\n                 //Overfull log message\n                 _logActor.message(_logSubject, QueueMessages.OVERFULL(_atomicQueueSize.get(), _capacity));\n \n-                _blockedChannels.putIfAbsent(channel, Boolean.TRUE);\n+                _blockedChannels.add(channel);\n \n                 channel.block(this);\n \n@@ -1662,11 +1661,10 @@ private void checkCapacity()\n                     _logActor.message(_logSubject, QueueMessages.UNDERFULL(_atomicQueueSize.get(), _flowResumeCapacity));\n                 }\n \n-\n-                for(AMQSessionModel c : _blockedChannels.keySet())\n+                for(final AMQSessionModel blockedChannel : _blockedChannels)\n                 {\n-                    c.unblock(this);\n-                    _blockedChannels.remove(c);\n+                    blockedChannel.unblock(this);\n+                    _blockedChannels.remove(blockedChannel);\n                 }\n             }\n         }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java"}, {"additions": 33, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/31639fd16c363beac8833600d209b1f445c2c8c1/broker/src/main/java/org/apache/qpid/server/transport/ServerSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/31639fd16c363beac8833600d209b1f445c2c8c1/broker/src/main/java/org/apache/qpid/server/transport/ServerSession.java", "sha": "e4268ed2dceabea2306fe7dad2900b01bf86f19a", "changes": 58, "status": "modified", "deletions": 25, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/transport/ServerSession.java?ref=31639fd16c363beac8833600d209b1f445c2c8c1", "patch": "@@ -20,8 +20,28 @@\n  */\n package org.apache.qpid.server.transport;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import static org.apache.qpid.server.logging.subjects.LogSubjectFormat.CHANNEL_FORMAT;\n+import static org.apache.qpid.util.Serial.gt;\n+\n+import java.security.Principal;\n+import java.text.MessageFormat;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.concurrent.ConcurrentSkipListSet;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.security.auth.Subject;\n \n import org.apache.qpid.AMQException;\n import org.apache.qpid.protocol.AMQConstant;\n@@ -65,27 +85,8 @@\n import org.apache.qpid.transport.RangeSetFactory;\n import org.apache.qpid.transport.Session;\n import org.apache.qpid.transport.SessionDelegate;\n-\n-import static org.apache.qpid.server.logging.subjects.LogSubjectFormat.CHANNEL_FORMAT;\n-import static org.apache.qpid.util.Serial.gt;\n-\n-import javax.security.auth.Subject;\n-import java.security.Principal;\n-import java.text.MessageFormat;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.SortedMap;\n-import java.util.UUID;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.ConcurrentSkipListMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicLong;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class ServerSession extends Session \n         implements AuthorizationHolder, SessionConfig, \n@@ -102,7 +103,7 @@\n     private long _createTime = System.currentTimeMillis();\n     private LogActor _actor = GenericActor.getInstance(this);\n \n-    private final ConcurrentMap<AMQQueue, Boolean> _blockingQueues = new ConcurrentHashMap<AMQQueue, Boolean>();\n+    private final Set<AMQQueue> _blockingQueues = new ConcurrentSkipListSet<AMQQueue>();\n \n     private final AtomicBoolean _blocking = new AtomicBoolean(false);\n     private ChannelLogSubject _logSubject;\n@@ -684,7 +685,8 @@ else if (openClose > 0L && openTime > openClose)\n \n     public void block(AMQQueue queue)\n     {\n-        if(_blockingQueues.putIfAbsent(queue, Boolean.TRUE) == null)\n+\n+        if(_blockingQueues.add(queue))\n         {\n \n             if(_blocking.compareAndSet(false,true))\n@@ -897,4 +899,10 @@ boolean isReadyForCompletion()\n             return _future.isComplete();\n         }\n     }\n+\n+    @Override\n+    public int compareTo(AMQSessionModel session)\n+    {\n+        return getId().toString().compareTo(session.getID().toString());\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/transport/ServerSession.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/a7680b56cf9e2b7feb0a2c0a9c620ac3e77e1216", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/6f175af53818c3bb33befbed20cd021616e52ffb", "message": "QPID-2931: update MessageReference to stop nulling out the ServerMessage reference upon release for now, preventing NPE's experienced due to race conditions resulting in use of getMessage() after release.", "bug_id": "qpid-jms-amqp-0-x_74", "file": [{"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/a7680b56cf9e2b7feb0a2c0a9c620ac3e77e1216/broker/src/main/java/org/apache/qpid/server/message/MessageReference.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/a7680b56cf9e2b7feb0a2c0a9c620ac3e77e1216/broker/src/main/java/org/apache/qpid/server/message/MessageReference.java", "sha": "399f8f93271ec9d7991bea010a660ca06c209db4", "changes": 13, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/message/MessageReference.java?ref=a7680b56cf9e2b7feb0a2c0a9c620ac3e77e1216", "patch": "@@ -20,13 +20,12 @@\n  */\n package org.apache.qpid.server.message;\n \n-import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n public abstract class MessageReference<M extends ServerMessage>\n {\n \n-    private static final AtomicReferenceFieldUpdater<MessageReference, ServerMessage> _messageUpdater =\n-            AtomicReferenceFieldUpdater.newUpdater(MessageReference.class, ServerMessage.class,\"_message\");\n+    private final AtomicBoolean _released = new AtomicBoolean(false);\n \n     private volatile M _message;\n \n@@ -47,10 +46,12 @@ public M getMessage()\n \n     public void release()\n     {\n-        M message = (M) _messageUpdater.getAndSet(this,null);\n-        if(message != null)\n+        if(!_released.getAndSet(true))\n         {\n-            onRelease(message);\n+            if(_message != null)\n+            {\n+                onRelease(_message);\n+            }\n         }\n     }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/message/MessageReference.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/85b507b498628700eeefd174308e5336c95155de", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/7a437add82b50ed33b80f0770a3d737ec22ad807", "message": "QPID-2695: use exchangeName variable instead of exchange variable when logging during binding recovery to guard against NPEs, and check for exchange presence to prevent the BindingFactory incorrectly binding to the default exchange", "bug_id": "qpid-jms-amqp-0-x_75", "file": [{"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/85b507b498628700eeefd174308e5336c95155de/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostConfigRecoveryHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/85b507b498628700eeefd174308e5336c95155de/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostConfigRecoveryHandler.java", "sha": "96a9ac729e52a4fc65f5cd0f028642a0ec23ea8f", "changes": 15, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostConfigRecoveryHandler.java?ref=85b507b498628700eeefd174308e5336c95155de", "patch": "@@ -219,18 +219,20 @@ public void binding(String exchangeName, String queueName, String bindingKey, By\n         _actions = new ArrayList<ProcessAction>();\n         try\n         {\n-            QueueRegistry queueRegistry = _virtualHost.getQueueRegistry();\n             Exchange exchange = _virtualHost.getExchangeRegistry().getExchange(exchangeName);\n-            AMQQueue queue = queueRegistry.getQueue(new AMQShortString(queueName));\n+            if (exchange == null)\n+            {\n+                _logger.error(\"Unknown exchange: \" + exchangeName + \", cannot bind queue : \" + queueName);\n+                return;\n+            }\n+            \n+            AMQQueue queue = _virtualHost.getQueueRegistry().getQueue(new AMQShortString(queueName));\n             if (queue == null)\n             {\n-                _logger.error(\"Unknown queue: \" + queueName + \" cannot be bound to exchange: \"\n-                    + exchange.getNameShortString());\n+                _logger.error(\"Unknown queue: \" + queueName + \", cannot be bound to exchange: \" + exchangeName);\n             }\n             else\n             {\n-\n-\n                 FieldTable argumentsFT = null;\n                 if(buf != null)\n                 {\n@@ -249,7 +251,6 @@ public void binding(String exchangeName, String queueName, String bindingKey, By\n \n                     bf.restoreBinding(bindingKey, queue, exchange, argumentMap);\n                 }\n-\n             }\n         }\n         catch (AMQException e)", "filename": "broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostConfigRecoveryHandler.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/38c05917d810a8aa30de418373769019fc9b0fa3", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/c860adc8e975eb86f1759ffa2bedf17ae9a08454", "message": "Client.java: workaround for NPE + close underling connection. BasicInteropTest.java: added a connection close and a flush so that the message will definitely be received prior to the JVM exiting.", "bug_id": "qpid-jms-amqp-0-x_76", "file": [{"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/38c05917d810a8aa30de418373769019fc9b0fa3/client/src/main/java/org/apache/qpidity/nclient/Client.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/38c05917d810a8aa30de418373769019fc9b0fa3/client/src/main/java/org/apache/qpidity/nclient/Client.java", "sha": "42b482442a6f9c512073e83b82517bd2f75fe327", "changes": 17, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpidity/nclient/Client.java?ref=38c05917d810a8aa30de418373769019fc9b0fa3", "patch": "@@ -51,11 +51,16 @@ public SessionDelegate getSessionDelegate()\n \n             @Override public void connectionClose(Channel context, ConnectionClose connectionClose)\n             {\n-                _exceptionListner.onException(\n-                        new QpidException(\"Server closed the connection: Reason \" +\n-                                           connectionClose.getReplyText(),\n-                                           ErrorCode.get(connectionClose.getReplyCode()),\n-                                           null));\n+                // XXX: replaced reference to _exceptionListner with\n+                // throw new RuntimeException because\n+                // _exceptionListner may be null. In general this\n+                // needs to be reworked because not every connection\n+                // close is an exception!\n+                throw new RuntimeException\n+                    (new QpidException(\"Server closed the connection: Reason \" +\n+                                       connectionClose.getReplyText(),\n+                                       ErrorCode.get(connectionClose.getReplyCode()),\n+                                       null));\n             }\n         };\n \n@@ -102,7 +107,7 @@ public void close() throws QpidException\n     {\n         Channel ch = _conn.getChannel(0);\n         ch.connectionClose(0, \"client is closing\", 0, 0);\n-        //need to close the connection underneath as well\n+        _conn.close();\n     }\n \n     public Session createSession(long expiryInSeconds)", "filename": "client/src/main/java/org/apache/qpidity/nclient/Client.java"}, {"additions": 18, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/38c05917d810a8aa30de418373769019fc9b0fa3/client/src/main/java/org/apache/qpidity/nclient/interop/BasicInteropTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/38c05917d810a8aa30de418373769019fc9b0fa3/client/src/main/java/org/apache/qpidity/nclient/interop/BasicInteropTest.java", "sha": "b3d81cd2c1c79456d51800fd88303c1723c141c7", "changes": 21, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpidity/nclient/interop/BasicInteropTest.java?ref=38c05917d810a8aa30de418373769019fc9b0fa3", "patch": "@@ -25,6 +25,11 @@ public BasicInteropTest(String host)\n         this.host = host;\n     }\n \n+    public void close() throws QpidException\n+    {\n+        conn.close();\n+    }\n+\n     public void testCreateConnection(){\n         System.out.println(\"------- Creating connection--------\");\n         conn = Client.createConnection();\n@@ -46,7 +51,7 @@ public void testCreateSession(){\n \n     public void testExchange(){\n         System.out.println(\"------- Creating an exchange --------\");\n-        session.exchangeDeclare(\"test\", \"amq.direct\", \"\", null);\n+        session.exchangeDeclare(\"test\", \"direct\", \"\", null);\n         session.sync();\n         System.out.println(\"------- Exchange created --------\");\n     }\n@@ -73,7 +78,8 @@ public void testSendMessage(){\n         System.out.println(\"------- Message sent --------\");\n     }\n \n-    public void testSubscribe(){\n+    public void testSubscribe()\n+    {\n         System.out.println(\"------- Sending a subscribe --------\");\n         session.messageSubscribe(\"testQueue\", \"myDest\",\n                                  Session.TRANSFER_CONFIRM_MODE_REQUIRED,\n@@ -97,6 +103,13 @@ public void onMessage(Message message)\n         session.messageFlowMode(\"myDest\", Session.MESSAGE_FLOW_MODE_WINDOW);\n         System.out.println(\"------- Setting Credit --------\");\n         session.messageFlow(\"myDest\", Session.MESSAGE_FLOW_UNIT_MESSAGE, 1);\n+        session.messageFlow(\"myDest\", Session.MESSAGE_FLOW_UNIT_BYTE, -1);\n+    }\n+\n+    public void testMessageFlush()\n+    {\n+        session.messageFlush(\"myDest\");\n+        session.sync();\n     }\n \n     public void onException(QpidException e)\n@@ -107,7 +120,7 @@ public void onException(QpidException e)\n         System.out.println(\"------- /Broker Notified an error --------\");\n     }\n \n-    public static void main(String[] args)\n+    public static void main(String[] args) throws QpidException\n     {\n         String host = \"0.0.0.0\";\n         if (args.length>0)\n@@ -122,5 +135,7 @@ public static void main(String[] args)\n         t.testQueue();\n         t.testSubscribe();\n         t.testSendMessage();\n+        t.testMessageFlush();\n+        t.close();\n     }\n }", "filename": "client/src/main/java/org/apache/qpidity/nclient/interop/BasicInteropTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/1440beb2c87f639e786f680c863535d9bbd12126", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/3b60b771440bb917247dc383a51476be1c036bb2", "message": "QPID-6068: [Java Broker] Prevent NPE when ediiting JMX_CONNECTOR port through REST or Web Management UI\n\n* Also hidden the authentication provider field when editting an RMI port\n* Added the missing prompts for transports/protocols.\n* Remove the mandatory marker from the protocols field", "bug_id": "qpid-jms-amqp-0-x_77", "file": [{"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/1440beb2c87f639e786f680c863535d9bbd12126/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPortWithAuthProvider.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/1440beb2c87f639e786f680c863535d9bbd12126/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPortWithAuthProvider.java", "sha": "4932c0257302d9487dc56ad649589f64227d8fe3", "changes": 9, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPortWithAuthProvider.java?ref=1440beb2c87f639e786f680c863535d9bbd12126", "patch": "@@ -88,18 +88,16 @@ public void onValidate()\n             throw new IllegalConfigurationException(\n                     \"Can't create port which requests SSL client certificates but doesn't use SSL transport.\");\n         }\n-\n     }\n \n-\n     @Override\n     protected void validateChange(final ConfiguredObject<?> proxyForValidation, final Set<String> changedAttributes)\n     {\n         super.validateChange(proxyForValidation, changedAttributes);\n         Port<?> updated = (Port<?>)proxyForValidation;\n \n-        boolean needClientCertificate = (Boolean) updated.getAttribute(NEED_CLIENT_AUTH);\n-        boolean wantClientCertificate = (Boolean) updated.getAttribute(WANT_CLIENT_AUTH);\n+        boolean needClientCertificate = updated.getAttribute(NEED_CLIENT_AUTH) == null ? false : (Boolean) updated.getAttribute(NEED_CLIENT_AUTH);\n+        boolean wantClientCertificate = updated.getAttribute(WANT_CLIENT_AUTH) == null ? false : (Boolean) updated.getAttribute(WANT_CLIENT_AUTH);\n         boolean requiresCertificate = needClientCertificate || wantClientCertificate;\n \n         boolean usesSsl = updated.getTransports().contains(Transport.SSL);\n@@ -117,8 +115,5 @@ protected void validateChange(final ConfiguredObject<?> proxyForValidation, fina\n                 throw new IllegalConfigurationException(\"Can't create port which requests SSL client certificates but doesn't use SSL transport.\");\n             }\n         }\n-\n-\n-\n     }\n }", "filename": "broker-core/src/main/java/org/apache/qpid/server/model/port/AbstractPortWithAuthProvider.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/1440beb2c87f639e786f680c863535d9bbd12126/broker-core/src/main/java/org/apache/qpid/server/model/port/JmxPortImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/1440beb2c87f639e786f680c863535d9bbd12126/broker-core/src/main/java/org/apache/qpid/server/model/port/JmxPortImpl.java", "sha": "3e21db23c66bcf742c4b70a4e988f1af421de106", "changes": 3, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/model/port/JmxPortImpl.java?ref=1440beb2c87f639e786f680c863535d9bbd12126", "patch": "@@ -20,13 +20,10 @@\n  */\n package org.apache.qpid.server.model.port;\n \n-import java.util.Collections;\n import java.util.Map;\n-import java.util.Set;\n \n import org.apache.qpid.server.model.Broker;\n import org.apache.qpid.server.model.ManagedObjectFactoryConstructor;\n-import org.apache.qpid.server.model.Protocol;\n import org.apache.qpid.server.model.State;\n \n public class JmxPortImpl extends AbstractPortWithAuthProvider<JmxPortImpl> implements JmxPort<JmxPortImpl>", "filename": "broker-core/src/main/java/org/apache/qpid/server/model/port/JmxPortImpl.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/1440beb2c87f639e786f680c863535d9bbd12126/broker-plugins/management-http/src/main/java/resources/addPort.html", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/1440beb2c87f639e786f680c863535d9bbd12126/broker-plugins/management-http/src/main/java/resources/addPort.html", "sha": "c76a230382ab877bdadeb409edbb144f068e19b8", "changes": 20, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/management-http/src/main/java/resources/addPort.html?ref=1440beb2c87f639e786f680c863535d9bbd12126", "patch": "@@ -78,19 +78,23 @@\n             <div id=\"formAddPort:fieldsProtocols\">\n                 <div class=\"clear\">\n                     <div class=\"formLabel-labelCell\">\n-                        <label for=\"formAddPort.protocols\">Protocols*:</label>\n+                        <label for=\"formAddPort.protocols\">Protocols:</label>\n                     </div>\n                     <div class=\"formLabel-controlCell\">\n                         <select id=\"formAddPort.protocols\"\n                                 data-dojo-type=\"dijit.form.MultiSelect\"\n                                 data-dojo-props=\"\n                                     name: 'protocols',\n                                     value: '',\n-                                    label: 'protocol*:',\n-                                    promptMessage: 'Protocol to be associated with this port',\n-                                    title: 'Enter protocol to be associated with this port'\">\n+                                    title: 'Select protocol(s) to be associated with this port'\">\n                         </select>\n                     </div>\n+                    <div id=\"formAddPort.protocols.tooltip\"\n+                         data-dojo-type=\"dijit.Tooltip\"\n+                         data-dojo-props=\"connectId: 'formAddPort.protocols',\n+                                          label: 'Protocol(s) to be associated with the port'\">\n+                    </div>\n+\n                 </div>\n             </div>\n \n@@ -144,9 +148,13 @@\n                                     placeHolder: 'TCP',\n                                     value: '',\n                                     multiple: true,\n-                                    promptMessage: 'Transport(s)',\n-                                    title: 'Select transports'\">\n+                                    title: 'Select transport(s) to be associated with the port'\">\n                         </select>\n+                        <div id=\"formAddPort.transports.tooltip\"\n+                             data-dojo-type=\"dijit.Tooltip\"\n+                             data-dojo-props=\"connectId: 'formAddPort.transports',\n+                                              label: 'Transport(s) to be associated with the port'\">\n+                        </div>\n                     </div>\n                 </div>\n             </div>", "filename": "broker-plugins/management-http/src/main/java/resources/addPort.html"}, {"additions": 28, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/1440beb2c87f639e786f680c863535d9bbd12126/broker-plugins/management-http/src/main/java/resources/js/qpid/common/widgetconfigurer.js", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/1440beb2c87f639e786f680c863535d9bbd12126/broker-plugins/management-http/src/main/java/resources/js/qpid/common/widgetconfigurer.js", "sha": "2eb0a9b808ec844a2301c0eae5e92b0a0e2a2b5f", "changes": 29, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/management-http/src/main/java/resources/js/qpid/common/widgetconfigurer.js?ref=1440beb2c87f639e786f680c863535d9bbd12126", "patch": "@@ -23,12 +23,13 @@ define([\"dojo/_base/xhr\",\n         \"dojo/dom\",\n         \"dojo/dom-construct\",\n         \"dojo/dom-attr\",\n+        \"dijit/registry\",\n         \"qpid/common/properties\",\n         \"qpid/common/metadata\",\n         \"dojo/text!strings.html\",\n         \"dojo/domReady!\"\n         ],\n-  function (xhr, string, query, dom, domConstruct, domAttr, properties, metadata, template)\n+  function (xhr, string, query, dom, domConstruct, domAttr, registry, properties, metadata, template)\n   {\n    var widgetconfigurer =\n    {\n@@ -67,6 +68,32 @@ define([\"dojo/_base/xhr\",\n                }\n            }\n        }\n+       else if  (widget instanceof dijit.Tooltip)\n+       {\n+         // If it is a tooltop, find the connected widget and use its name to lookup the default from the metadata.\n+         if (typeof widget.get(\"qpid.originalLabel\") == \"undefined\")\n+         {\n+           widget.set(\"qpid.originalLabel\", widget.get(\"label\"));\n+         }\n+\n+         var message = widget.get(\"qpid.originalLabel\");\n+         var connectId = widget.get(\"connectId\")[0];\n+         var connectWidget = registry.byId(connectId);\n+         if (connectWidget)\n+         {\n+           var connectWidgetName = connectWidget.get(\"name\");\n+           var defaultValue = metadata.getDefaultValueForAttribute(category, type, connectWidgetName);\n+           if (defaultValue)\n+           {\n+             var newMessage = string.substitute(this.promptTemplateWithDefault, { 'default': defaultValue, 'prompt': message });\n+\n+             if (message != newMessage)\n+             {\n+               widget.set(\"label\", newMessage);\n+             }\n+           }\n+         }\n+       }\n      },\n      _processWidgetValue: function (widget, category, type)\n      {", "filename": "broker-plugins/management-http/src/main/java/resources/js/qpid/common/widgetconfigurer.js"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/1440beb2c87f639e786f680c863535d9bbd12126/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Port.js", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/1440beb2c87f639e786f680c863535d9bbd12126/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Port.js", "sha": "1bf41ec730b9108ce2b4e6f31b39cb84889f79bf", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/management-http/src/main/java/resources/js/qpid/management/Port.js?ref=1440beb2c87f639e786f680c863535d9bbd12126", "patch": "@@ -137,6 +137,7 @@ define([\"dojo/dom\",\n                            \"needClientAuthValue\",\n                            \"wantClientAuthValue\",\n                            \"trustStoresValue\",\n+                           \"authenticationProvider\",\n                            \"bindingAddress\",\n                            \"keyStore\",\n                            \"needClientAuth\",\n@@ -183,6 +184,7 @@ define([\"dojo/dom\",\n \n               var typeMetaData = metadata.getMetaData(\"Port\", this.portData[\"type\"]);\n \n+              this.authenticationProvider.style.display = \"authenticationProvider\" in typeMetaData.attributes ? \"block\" : \"none\";\n               this.bindingAddress.style.display = \"bindingAddress\" in typeMetaData.attributes ? \"block\" : \"none\";\n               this.keyStore.style.display = \"keyStore\" in typeMetaData.attributes ? \"block\" : \"none\";\n               this.needClientAuth.style.display = \"needClientAuth\" in typeMetaData.attributes ? \"block\" : \"none\";", "filename": "broker-plugins/management-http/src/main/java/resources/js/qpid/management/Port.js"}, {"additions": 85, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/1440beb2c87f639e786f680c863535d9bbd12126/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addPort.js", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/1440beb2c87f639e786f680c863535d9bbd12126/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addPort.js", "sha": "88425a6bab84341472fee1bd11ae9fcf68117547", "changes": 142, "status": "modified", "deletions": 57, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-plugins/management-http/src/main/java/resources/js/qpid/management/addPort.js?ref=1440beb2c87f639e786f680c863535d9bbd12126", "patch": "@@ -23,7 +23,6 @@ define([\"dojo/_base/xhr\",\n         \"dojo/dom-construct\",\n         \"dojo/_base/window\",\n         \"dijit/registry\",\n-        \"dojo/parser\",\n         \"dojo/_base/array\",\n         \"dojo/_base/event\",\n         'dojo/_base/json',\n@@ -56,7 +55,7 @@ define([\"dojo/_base/xhr\",\n         \"dojox/grid/EnhancedGrid\",\n         \"dojox/grid/enhanced/plugins/IndirectSelection\",\n         \"dojo/domReady!\"],\n-    function (xhr, dom, construct, win, registry, parser, array, event, json, Memory, ObjectStore, FilteringSelect, domStyle, lang, util, metadata) {\n+    function (xhr, dom, construct, win, registry, array, event, json, Memory, ObjectStore, FilteringSelect, domStyle, lang, util, metadata) {\n \n         var addPort = {};\n \n@@ -86,10 +85,12 @@ define([\"dojo/_base/xhr\",\n             var transportsValues = metadata.extractUniqueListOfValues(transportsValidValues);\n             util.setMultiSelectOptions(transportsMultiSelect, transportsValues.sort());\n \n-            toggleSslWidgets(newValue, transportsMultiSelect.value);\n+            addPort._toggleSslWidgets(newValue, transportsMultiSelect.value);\n+            util.applyMetadataToWidgets(registry.byId(\"addPort\").domNode, \"Port\", newValue);\n+\n         };\n \n-        var convertToPort = function convertToPort(formValues)\n+        addPort._convertToPort = function(formValues)\n             {\n                 var newPort = {};\n                 newPort.name = dijit.byId(\"formAddPort.name\").value;\n@@ -185,7 +186,7 @@ define([\"dojo/_base/xhr\",\n                 return newPort;\n             };\n \n-            var toggleSslWidgets = function toggleSslWidgets(portType, transportType)\n+        addPort._toggleSslWidgets = function(portType, transportType)\n             {\n                 var clientAuthPanel = dojo.byId(\"formAddPort:fieldsClientAuth\");\n                 var transportSSLPanelNode = dom.byId(\"formAddPort:fieldsTransportSSL\");\n@@ -217,67 +218,90 @@ define([\"dojo/_base/xhr\",\n \n             };\n \n-            xhr.get({url: \"addPort.html\", sync: true, load:  function(data) {\n-                var theForm;\n-                node.innerHTML = data;\n-                addPort.dialogNode = dom.byId(\"addPort\");\n-                parser.instantiate([addPort.dialogNode]);\n-\n-                //add the port types to formAddPort.type\n-                var portTypeSelect = registry.byId(\"formAddPort.type\");\n-                var supportedPortTypes = metadata.getTypesForCategory(\"Port\");\n-                var portTypeSelectStore = util.makeTypeStore(supportedPortTypes);\n-                portTypeSelect.set(\"store\", portTypeSelectStore);\n-\n-                //add handler for transports change\n-                registry.byId(\"formAddPort.transports\").on(\"change\", function(newValue){\n-                    var portType = portTypeSelect.get(\"value\");\n-                    toggleSslWidgets(portType, newValue);\n-                });\n-\n-\n-                theForm = registry.byId(\"formAddPort\");\n-                theForm.on(\"submit\", function(e) {\n-\n-                    event.stop(e);\n-                    if(theForm.validate()){\n+        addPort._init = function()\n+        {\n+          xhr.get({url: \"addPort.html\", sync: true, load: function (data)\n+          {\n+            var theForm;\n+            node.innerHTML = data;\n+            addPort.dialogNode = dom.byId(\"addPort\");\n+          }});\n+        }\n+\n+        addPort._prepareForm = function()\n+        {\n+          //add the port types to formAddPort.type\n+          var portTypeSelect = registry.byId(\"formAddPort.type\");\n+          var supportedPortTypes = metadata.getTypesForCategory(\"Port\");\n+          var portTypeSelectStore = util.makeTypeStore(supportedPortTypes);\n+          portTypeSelect.set(\"store\", portTypeSelectStore);\n+\n+          //add handler for transports change\n+          registry.byId(\"formAddPort.transports\").on(\"change\", function (newValue)\n+          {\n+            var portType = portTypeSelect.get(\"value\");\n+            addPort._toggleSslWidgets(portType, newValue);\n+          });\n+\n+          theForm = registry.byId(\"formAddPort\");\n+          theForm.on(\"submit\", function (e)\n+          {\n+\n+            event.stop(e);\n+            if (theForm.validate())\n+            {\n \n-                        var newPort = convertToPort(theForm.getValues());\n-                        if ((newPort.needClientAuth || newPort.wantClientAuth) && (!newPort.hasOwnProperty(\"trustStores\") || newPort.trustStores.length==0))\n-                        {\n-                          alert(\"A trust store must be selected when requesting client certificates.\");\n-                          return false;\n-                        }\n-                        var that = this;\n+              var newPort = addPort._convertToPort(theForm.getValues());\n+              if ((newPort.needClientAuth || newPort.wantClientAuth) && (!newPort.hasOwnProperty(\"trustStores\") || newPort.trustStores.length == 0))\n+              {\n+                alert(\"A trust store must be selected when requesting client certificates.\");\n+                return false;\n+              }\n+              var that = this;\n+\n+              xhr.put({url: \"api/latest/port/\" + encodeURIComponent(newPort.name), sync: true, handleAs: \"json\",\n+                headers: { \"Content-Type\": \"application/json\"},\n+                putData: json.toJson(newPort),\n+                load: function (x)\n+                {\n+                  that.success = true;\n+                },\n+                error: function (error)\n+                {\n+                  that.success = false;\n+                  that.failureReason = error;\n+                }});\n \n-                        xhr.put({url: \"api/latest/port/\"+encodeURIComponent(newPort.name), sync: true, handleAs: \"json\",\n-                                 headers: { \"Content-Type\": \"application/json\"},\n-                                 putData: json.toJson(newPort),\n-                                 load: function(x) {that.success = true; },\n-                                 error: function(error) {that.success = false; that.failureReason = error;}});\n+              if (this.success === true)\n+              {\n+                registry.byId(\"addPort\").hide();\n+              }\n+              else\n+              {\n+                util.xhrErrorHandler(this.failureReason);\n+              }\n \n-                        if(this.success === true)\n-                        {\n-                            registry.byId(\"addPort\").hide();\n-                        }\n-                        else\n-                        {\n-                            util.xhrErrorHandler(this.failureReason);\n-                        }\n+              return false;\n \n-                        return false;\n \n+            } else\n+            {\n+              alert('Form contains invalid data.  Please correct first');\n+              return false;\n+            }\n \n-                    }else{\n-                        alert('Form contains invalid data.  Please correct first');\n-                        return false;\n-                    }\n+          });\n+        }\n \n-                });\n-            }});\n+        addPort.show = function(portName, portType, providers, keystores, truststores)\n+        {\n \n+            if (!this.formPrepared)\n+            {\n+              this._prepareForm();\n+              this.formPrepared = true;\n+            }\n \n-        addPort.show = function(portName, portType, providers, keystores, truststores) {\n             registry.byId(\"formAddPort\").reset();\n             dojo.byId(\"formAddPort.id\").value = \"\";\n \n@@ -371,6 +395,8 @@ define([\"dojo/_base/xhr\",\n \n                        //authenticationProvider\n                        providerWidget.set(\"value\", port.authenticationProvider ? port.authenticationProvider : \"\");\n+                       providerWidget.set(\"disabled\", ! (\"authenticationProvider\" in typeMetaData.attributes));\n+                       dom.byId(\"formAddPort:fieldsAuthenticationProvider\").style.display = \"authenticationProvider\" in typeMetaData.attributes ? \"block\" : \"none\";\n \n                        //transports\n                        var transportsMultiSelect = dom.byId(\"formAddPort.transports\");\n@@ -444,5 +470,7 @@ define([\"dojo/_base/xhr\",\n \n         };\n \n+        addPort._init();\n+\n         return addPort;\n     });", "filename": "broker-plugins/management-http/src/main/java/resources/js/qpid/management/addPort.js"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/2e118889f331fe750ed1683c9203f65978def861", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/7367c2de8a29be7fede6508d1ef1860149810662", "message": "QPID-5240: Change ExternalSaslServer to avoid NPE possibility.\n\nContract for SaslServer#getAuthorizationID does not disallow the calling of getAuthorizationID following a failed authentication\nso returning null in this case seems reasonable (com.sun.security.sasl.CramMD5Server behaves in this way).\n\nAlso refactored EAMT to have small tightly targetted tests.", "bug_id": "qpid-jms-amqp-0-x_78", "file": [{"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e118889f331fe750ed1683c9203f65978def861/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e118889f331fe750ed1683c9203f65978def861/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java", "sha": "5f5ee08c214728fc1c2965c190f7ae15301e462e", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java?ref=2e118889f331fe750ed1683c9203f65978def861", "patch": "@@ -36,7 +36,7 @@\n \n     private boolean _complete = false;\n     private final Principal _externalPrincipal;\n-    private boolean _useFullDN = false;\n+    private final boolean _useFullDN;\n \n     public ExternalSaslServer(Principal externalPrincipal, boolean useFullDN)\n     {\n@@ -62,7 +62,7 @@ public boolean isComplete()\n \n     public String getAuthorizationID()\n     {\n-        return getAuthenticatedPrincipal().getName();\n+        return getAuthenticatedPrincipal() == null ? null : getAuthenticatedPrincipal().getName();\n     }\n \n     public byte[] unwrap(byte[] incoming, int offset, int len) throws SaslException", "filename": "broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java"}, {"additions": 103, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e118889f331fe750ed1683c9203f65978def861/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e118889f331fe750ed1683c9203f65978def861/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java", "sha": "586bff5683c1411d392449b17aae291135f1f0b9", "changes": 196, "status": "modified", "deletions": 93, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java?ref=2e118889f331fe750ed1683c9203f65978def861", "patch": "@@ -43,141 +43,151 @@ public void testCreateSaslServer() throws Exception\n         createSaslServerTestImpl(_manager);\n     }\n \n-    public void testCreateSaslServerUsingFullDN() throws Exception\n+    public void testAuthenticatePrincipalNull_CausesAuthError() throws Exception\n     {\n-        createSaslServerTestImpl(_managerUsingFullDN);\n-    }\n-\n-    public void createSaslServerTestImpl(AuthenticationManager manager) throws Exception\n-    {\n-        SaslServer server = manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n-\n-        assertEquals(\"Sasl Server mechanism name is not as expected\", \"EXTERNAL\", server.getMechanismName());\n-\n-        try\n-        {\n-            server = manager.createSaslServer(\"PLAIN\", \"example.example.com\", null);\n-            fail(\"Expected creating SaslServer with incorrect mechanism to throw an exception\");\n-        }\n-        catch (SaslException e)\n-        {\n-            // pass\n-        }\n-    }\n-\n-    /**\n-     * Test behaviour of the authentication when the useFullDN attribute is set true\n-     * and the username is taken directly as the externally supplied Principal\n-     */\n-    public void testAuthenticateWithFullDN() throws Exception\n-    {\n-        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n-        SaslServer saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-\n-        AuthenticationResult result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n-        assertNotNull(result);\n-        assertEquals(\"Expected authentication to be successful\",\n-                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n-                     result.getStatus());\n-\n-        assertOnlyContainsWrapped(principal, result.getPrincipals());\n-\n-        saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n-        result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n \n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be unsuccessful\",\n-                     AuthenticationResult.AuthenticationStatus.ERROR,\n-                     result.getStatus());\n+                AuthenticationResult.AuthenticationStatus.ERROR,\n+                result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n     }\n \n-    /**\n-     * Test behaviour of the authentication when parsing the username from\n-     * the Principals DN as <CN>@<DC1>.<DC2>.<DC3>....<DCN>\n-     */\n-    public void testAuthenticateWithUsernameBasedOnCNAndDC() throws Exception\n+    public void testAuthenticatePrincipalNoCn_CausesAuthError() throws Exception\n     {\n-        X500Principal principal;\n-        SaslServer saslServer;\n-        AuthenticationResult result;\n-        UsernamePrincipal expectedPrincipal;\n-\n-        // DN contains only CN\n-        principal = new X500Principal(\"CN=person\");\n-        expectedPrincipal = new UsernamePrincipal(\"person\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-\n-        result = _manager.authenticate(saslServer, new byte[0]);\n-        assertNotNull(result);\n-        assertEquals(\"Expected authentication to be successful\",\n-                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n-                     result.getStatus());\n-        assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n-\n-        // Null principal\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        X500Principal principal = new X500Principal(\"DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n \n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be unsuccessful\",\n                 AuthenticationResult.AuthenticationStatus.ERROR,\n                 result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n+    }\n \n-        // DN doesn't contain CN\n-        principal = new X500Principal(\"DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-        result = _manager.authenticate(saslServer, new byte[0]);\n+    public void testAuthenticatePrincipalEmptyCn_CausesAuthError() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n \n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be unsuccessful\",\n                 AuthenticationResult.AuthenticationStatus.ERROR,\n                 result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains empty CN\n-        principal = new X500Principal(\"CN=, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-        result = _manager.authenticate(saslServer, new byte[0]);\n+    public void testAuthenticatePrincipalCnOnly() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n-        assertEquals(\"Expected authentication to be unsuccessful\",\n-                AuthenticationResult.AuthenticationStatus.ERROR,\n-                result.getStatus());\n+        assertEquals(\"Expected authentication to be successful\",\n+                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n+                     result.getStatus());\n+        assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person\", saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains CN and DC\n-        principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n-        expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+    public void testAuthenticatePrinicpalCnAndDc() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be successful\",\n                 AuthenticationResult.AuthenticationStatus.SUCCESS,\n                 result.getStatus());\n         assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person@example.com\", saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains CN and DC and other components\n-        principal = new X500Principal(\"CN=person, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+    public void testAuthenticatePrinicpalCnDc_OtherComponentsIgnored() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be successful\",\n                 AuthenticationResult.AuthenticationStatus.SUCCESS,\n                 result.getStatus());\n         assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person@example.com\", saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains CN and DC and other components\n-        principal = new X500Principal(\"CN=person, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        expectedPrincipal = new UsernamePrincipal(\"person\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+    public void testAuthenticatePrincipalCn_OtherComponentsIgnored() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be successful\",\n                 AuthenticationResult.AuthenticationStatus.SUCCESS,\n                 result.getStatus());\n         assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person\", saslServer.getAuthorizationID());\n+    }\n+\n+    public void testFullDNMode_CreateSaslServer() throws Exception\n+    {\n+        createSaslServerTestImpl(_managerUsingFullDN);\n+    }\n+\n+    public void testFullDNMode_Authenticate() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n+        SaslServer saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+\n+        AuthenticationResult result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n+        assertNotNull(result);\n+        assertEquals(\"Expected authentication to be successful\",\n+                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n+                     result.getStatus());\n+\n+        assertOnlyContainsWrapped(principal, result.getPrincipals());\n+        assertEquals(\"CN=person,DC=example,DC=com\", saslServer.getAuthorizationID());\n+    }\n+\n+    public void testFullDNMode_AuthenticatePrincipalNull_CausesAuthError() throws Exception\n+    {\n+        SaslServer saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n+        AuthenticationResult result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n+\n+        assertNotNull(result);\n+        assertEquals(\"Expected authentication to be unsuccessful\",\n+                     AuthenticationResult.AuthenticationStatus.ERROR,\n+                     result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n+    }\n+\n+    private void createSaslServerTestImpl(AuthenticationManager manager) throws Exception\n+    {\n+        SaslServer server = manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n+\n+        assertEquals(\"Sasl Server mechanism name is not as expected\", \"EXTERNAL\", server.getMechanismName());\n+\n+        try\n+        {\n+            server = manager.createSaslServer(\"PLAIN\", \"example.example.com\", null);\n+            fail(\"Expected creating SaslServer with incorrect mechanism to throw an exception\");\n+        }\n+        catch (SaslException e)\n+        {\n+            // pass\n+        }\n     }\n \n }", "filename": "broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/0718af78d1a6e39475c0e2c776deac0543dde5a0", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/e5ce48b1815235993c2bf75bc51c73458e82d663", "message": "QPID-2828: prevent NPE if attempting to add queues to the navigation tree that have been removed due to MBean unregistration notification since the selection list was created, and indicate in the status bar why the operation apparently has no effect", "bug_id": "qpid-jms-amqp-0-x_79", "file": [{"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/0718af78d1a6e39475c0e2c776deac0543dde5a0/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/0718af78d1a6e39475c0e2c776deac0543dde5a0/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java", "sha": "65615a6d18575d03021ff615569fd9fda8fe0a34", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java?ref=0718af78d1a6e39475c0e2c776deac0543dde5a0", "patch": "@@ -475,7 +475,7 @@ private void clearView()\n         }\n         \n         _form.setText(APPLICATION_NAME);\n-        populateStatusBar(\"\");\n+        clearStatusBar();\n     }\n     \n     public void mbeanUnregistered(ManagedBean mbean)\n@@ -556,6 +556,11 @@ public void populateStatusBar(String message)\n         IActionBars bars = getViewSite().getActionBars();\n         bars.getStatusLineManager().setMessage(message);\n     }\n+    \n+    public void clearStatusBar()\n+    {\n+        populateStatusBar(\"\");\n+    }\n \n     public void back() throws Exception\n     {", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/0718af78d1a6e39475c0e2c776deac0543dde5a0/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/0718af78d1a6e39475c0e2c776deac0543dde5a0/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java", "sha": "655718c0985cab20208e4bb29311dac879c814aa", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java?ref=0718af78d1a6e39475c0e2c776deac0543dde5a0", "patch": "@@ -1002,6 +1002,14 @@ public static void operationFailedStatusBarMessage(String failureMessage)\n             _mbeanView.populateStatusBar(icon, failureMessage);            \n         }\n     }\n+    \n+    public static void clearStatusBar()\n+    {\n+        if(_mbeanView != null)\n+        {\n+            _mbeanView.clearStatusBar();            \n+        }\n+    }\n \n     public static void centerChildInParentShell(Shell parent, Shell child)\n     {", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java"}, {"additions": 25, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/0718af78d1a6e39475c0e2c776deac0543dde5a0/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/type/QueueTypeTabControl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/0718af78d1a6e39475c0e2c776deac0543dde5a0/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/type/QueueTypeTabControl.java", "sha": "c5ab5184ee0a19412bf65a490fbd904f2f12787b", "changes": 26, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/type/QueueTypeTabControl.java?ref=0718af78d1a6e39475c0e2c776deac0543dde5a0", "patch": "@@ -700,14 +700,38 @@ protected void addMBeanToFavourites()\n         \n         ArrayList<ManagedBean> selectedMBeans = new ArrayList<ManagedBean>();\n \n+        boolean allSucceded = true;\n         //the entries are created from an List<Object> with the attribute values (name first)\n         for(int index = 0; index < selectedIndices.length ; index++)\n         {\n             List<Object> queueEntry = (List<Object>) _table.getItem(selectedIndices[index]).getData();\n             String queueName = (String) queueEntry.get(0);\n-            selectedMBeans.add(_serverRegistry.getQueue(queueName, _virtualHost));\n+            \n+            ManagedBean queueMBean = _serverRegistry.getQueue(queueName, _virtualHost);\n+            \n+            //check queue had not already been unregistered before trying to add it\n+            if(queueMBean != null)\n+            {\n+                selectedMBeans.add(queueMBean);\n+            }\n+            else\n+            {\n+                allSucceded = false;\n+            }\n         }\n \n+        if(allSucceded)\n+        {\n+            //ensure the status bar is cleared of any previous failures added by the below\n+            ViewUtility.clearStatusBar();\n+        }\n+        else\n+        {\n+            ViewUtility.operationFailedStatusBarMessage(\"A selected queue could not be added as it was no longer registered\");\n+            refresh();\n+        }\n+        \n+\n         IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow(); \n         NavigationView view = (NavigationView)window.getActivePage().findView(NavigationView.ID);\n         ", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/type/QueueTypeTabControl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/41e583667e84142f390323ff44ce3ff8f71c60c0", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/fbb9b866d4deb994113a2422b98735841909fb5b", "message": "QPID-1950 : Problem is that the thrown exception whilst an IOException does not signify that the socket has closed. So the broker had two open connections to send messages on. Change was to ensure that the previous Socket/IOSession has been closed before failover starts. Also added protected to ChannelOpenHandler to guard against out of order frames causing a NPE.", "bug_id": "qpid-jms-amqp-0-x_80", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/41e583667e84142f390323ff44ce3ff8f71c60c0/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/41e583667e84142f390323ff44ce3ff8f71c60c0/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java", "sha": "fcf3fd4337b635b02f8be953421b4460926bde25", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java?ref=41e583667e84142f390323ff44ce3ff8f71c60c0", "patch": "@@ -71,7 +71,7 @@ public void methodReceived(AMQStateManager stateManager, BasicRejectBody body, i\n         {\n             _logger.warn(\"Dropping reject request as message is null for tag:\" + deliveryTag);\n //            throw evt.getMethod().getChannelException(AMQConstant.NOT_FOUND, \"Delivery Tag(\" + deliveryTag + \")not known\");\n-        }\n+        }                 \n         else\n         {\n             if (message.isQueueDeleted())", "filename": "broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/41e583667e84142f390323ff44ce3ff8f71c60c0/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/41e583667e84142f390323ff44ce3ff8f71c60c0/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java", "sha": "99180138884fd5f7ddb497fd51679b57991b9dd3", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java?ref=41e583667e84142f390323ff44ce3ff8f71c60c0", "patch": "@@ -54,6 +54,13 @@ public void methodReceived(AMQStateManager stateManager, ChannelOpenBody body, i\n         AMQProtocolSession session = stateManager.getProtocolSession();\n         VirtualHost virtualHost = session.getVirtualHost();\n \n+        \n+        // Protect the broker against out of order frame request.\n+        if (virtualHost == null)\n+        {\n+            throw new AMQException(AMQConstant.COMMAND_INVALID, \"Virtualhost has not yet been set. ConnectionOpen has not been called.\", null);\n+        }\n+\n         final AMQChannel channel = new AMQChannel(session,channelId,\n                                                   virtualHost.getMessageStore());\n ", "filename": "broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/41e583667e84142f390323ff44ce3ff8f71c60c0/client/src/main/java/org/apache/qpid/client/failover/FailoverHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/41e583667e84142f390323ff44ce3ff8f71c60c0/client/src/main/java/org/apache/qpid/client/failover/FailoverHandler.java", "sha": "7fa7004a9e3423eb6eb86210a663a4a638266160", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/failover/FailoverHandler.java?ref=41e583667e84142f390323ff44ce3ff8f71c60c0", "patch": "@@ -140,6 +140,17 @@ public void run()\n             // a slightly more complex state model therefore I felt it was worthwhile doing this.\n             AMQStateManager existingStateManager = _amqProtocolHandler.getStateManager();\n \n+\n+            // We are failing over so lets ensure any existing ProtocolSessions\n+            // are closed. Closing them will update the stateManager which we\n+            // probably don't want to record the change to the closed state.\n+            // So lets make a new one.\n+            _amqProtocolHandler.setStateManager(new AMQStateManager());\n+\n+            // Close the session, false says don't wait for it to close, just close it.\n+            _amqProtocolHandler.getProtocolSession().closeProtocolSession(false);\n+\n+            // Use a fresh new StateManager for the reconnection attempts\n             _amqProtocolHandler.setStateManager(new AMQStateManager());\n \n ", "filename": "client/src/main/java/org/apache/qpid/client/failover/FailoverHandler.java"}, {"additions": 331, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/41e583667e84142f390323ff44ce3ff8f71c60c0/systests/src/main/java/org/apache/qpid/server/failover/MessageDisappearWithIOExceptionTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/41e583667e84142f390323ff44ce3ff8f71c60c0/systests/src/main/java/org/apache/qpid/server/failover/MessageDisappearWithIOExceptionTest.java", "sha": "8d707c4c79f5474390f8c2c210642cd435212ebb", "changes": 331, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/failover/MessageDisappearWithIOExceptionTest.java?ref=41e583667e84142f390323ff44ce3ff8f71c60c0", "patch": "@@ -0,0 +1,331 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.failover;\n+\n+import org.apache.mina.common.WriteTimeoutException;\n+import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.protocol.AMQProtocolSession;\n+import org.apache.qpid.jms.ConnectionListener;\n+import org.apache.qpid.test.utils.QpidTestCase;\n+import org.apache.qpid.test.utils.FailoverBaseCase;\n+import org.apache.qpid.AMQConnectionClosedException;\n+\n+import javax.jms.Destination;\n+import javax.jms.Message;\n+import javax.jms.MessageConsumer;\n+import javax.jms.MessageProducer;\n+import javax.jms.Queue;\n+import javax.jms.Session;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Test case based on user reported error.\n+ *\n+ * Summary:\n+ * A user has reported message loss from their application. On bouncing of\n+ * the broker the 'lost' messages are delivered to the broker.\n+ *\n+ * Note:\n+ * The client was using Spring so that may influence the situation.\n+ *\n+ * Issue:\n+ * The log files show 7 instances of the following which result in 7\n+ * missing messages.\n+ *\n+ * The client log files show:\n+ *\n+ * The broker log file show:\n+ *\n+ *\n+ * 7 missing messages have delivery tags 5-11. Which says that they are\n+ * sequentially the next message from the broker.\n+ *\n+ * The only way for the 'without a handler' log to occur is if the consumer\n+ * has been removed from the look up table of the dispatcher.\n+ * And the only way for the 'null message' log to occur on the broker is is\n+ * if the message does not exist in the unacked-map\n+ *\n+ * The consumer is only removed from the list during session\n+ * closure and failover.\n+ *\n+ * If the session was closed then the broker would requeue the unacked\n+ * messages so the potential exists to have an empty map but the broker\n+ * will not send a message out after the unacked map has been cleared.\n+ *\n+ * When failover occurs the _consumer map is cleared and the consumers are\n+ * resubscribed. This is down without first stopping any existing\n+ * dispatcher so there exists the potential to receive a message after\n+ * the _consumer map has been cleared which is how the 'without a handler'\n+ * log statement occurs.\n+ *\n+ * Scenario:\n+ *\n+ * Looking over logs the sequence that best fits the events is as follows:\n+ * - Something causes Mina to be delayed causing the WriteTimoutException.\n+ * - This exception is recevied by AMQProtocolHandler#exceptionCaught\n+ * - As the WriteTimeoutException is an IOException this will cause\n+ * sessionClosed to be called to start failover.\n+ * + This is potentially the issues here. All IOExceptions are treated\n+ * as connection failure events.\n+ * - Failover Runs\n+ * + Failover assumes that the previous connection has been closed.\n+ * + Failover binds the existing objects (AMQConnection/Session) to the\n+ * new connection objects.\n+ * - Everything is reported as being successfully failed over.\n+ * However, what is neglected is that the original connection has not\n+ * been closed.\n+ * + So what occurs is that the broker sends a message to the consumer on\n+ * the original connection, as it was not notified of the client\n+ * failing over.\n+ * As the client failover reuses the original AMQSession and Dispatcher\n+ * the new messages the broker sends to the old consumer arrives at the\n+ * client and is processed by the same AMQSession and Dispatcher.\n+ * However, as the failover process cleared the _consumer map and\n+ * resubscribe the consumers the Dispatcher does not recognise the\n+ * delivery tag and so logs the 'without a handler' message.\n+ * - The Dispatcher then attempts to reject the message, however,\n+ * + The AMQSession/Dispatcher pair have been swapped to using a new Mina\n+ * ProtocolSession as part of the failover process so the reject is\n+ * sent down the second connection. The broker receives the Reject\n+ * request but as the Message was sent on a different connection the\n+ * unacknowledgemap is empty and a 'message is null' log message\n+ * produced.\n+ *\n+ * Test Strategy:\n+ *\n+ * It should be easy to demonstrate if we can send an IOException to\n+ * AMQProtocolHandler#exceptionCaught and then try sending a message.\n+ *\n+ * The current unknowns here are the type of consumers that are in use.\n+ * If it was an exclusive queue(Durable Subscription) then why did the\n+ * resubscribe not fail.\n+ *\n+ * If it was not exclusive then why did the messages not round robin?\n+ */\n+public class MessageDisappearWithIOExceptionTest extends FailoverBaseCase implements ConnectionListener\n+{\n+    private CountDownLatch _failoverOccured = new CountDownLatch(1);\n+    AMQConnection _connection;\n+    Session _session;\n+    Queue _queue;\n+    MessageConsumer _consumer;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        stopBroker(getFailingPort());\n+\n+    }\n+\n+    /**\n+     * Test Summary:\n+     *\n+     * Create a queue consumer and send 10 messages to the broker.\n+     *\n+     * Consume the first message.\n+     * This will pull the rest into the prefetch\n+     *\n+     * Send an IOException to the MinaProtocolHandler.\n+     *\n+     * This will force failover to occur.\n+     *\n+     * 9 messages would normally be expected but it is expected that none will\n+     * arrive. As they are still in the prefetch of the first session.\n+     *\n+     * To free the messages we need to close all connections.\n+     * - Simply doing connection.close() and retesting will not be enough as\n+     * the original connection's IO layer will still exist and is nolonger\n+     * connected to the connection object as a result of failover.\n+     *\n+     * - Test will need to retain a reference to the original connection IO so\n+     * that it can be closed releasing the messages to validate that the\n+     * messages have indeed been 'lost' on that sesssion.\n+     */\n+    public void test() throws Exception\n+    {\n+        initialiseConnection();\n+\n+        // Create Producer\n+        // Send 10 messages\n+        List<Message> messages = sendNumberedBytesMessage(_session, _queue, 10);\n+\n+        // Consume first messasge\n+        Message received = _consumer.receive(2000);\n+\n+        // Verify received messages\n+        assertNotNull(\"First message not received.\", received);\n+        assertEquals(\"Incorrect message Received\",\n+                     messages.remove(0).getIntProperty(\"count\"),\n+                     received.getIntProperty(\"count\"));\n+\n+        // Allow ack to be sent to broker, by performing a synchronous command\n+        // along the session.\n+//        _session.createConsumer(_session.createTemporaryQueue()).close();\n+\n+        //Retain IO Layer\n+        AMQProtocolSession protocolSession = _connection.getProtocolHandler().getProtocolSession();\n+\n+        // Send IO Exception - causing failover\n+        _connection.getProtocolHandler().\n+                exceptionCaught(_connection.getProtocolHandler().getProtocolSession().getIoSession(),\n+                                new WriteTimeoutException(\"WriteTimeoutException to cause failover.\"));\n+\n+        // Verify Failover occured through ConnectionListener\n+        assertTrue(\"Failover did not occur\",\n+                   _failoverOccured.await(4000, TimeUnit.MILLISECONDS));\n+\n+        //Verify new protocolSession is not the same as the original\n+        assertNotSame(\"Protocol Session has not changed\",\n+                      protocolSession,\n+                      _connection.getProtocolHandler().getProtocolSession());\n+\n+        /***********************************/\n+        // This verifies that the bug has been resolved\n+\n+        // Attempt to consume again. Expect 9 messages\n+        for (int count = 1; count < 10; count++)\n+        {\n+            received = _consumer.receive(2000);\n+            assertNotNull(\"Expected message not received:\" + count, received);\n+            assertEquals(messages.remove(0).getIntProperty(\"count\"),\n+                         received.getIntProperty(\"count\"));\n+        }\n+\n+        //Verify there are no more messages\n+        received = _consumer.receive(1000);\n+        assertNull(\"Message receieved when there should be none:\" + received,\n+                   received);\n+\n+//        /***********************************/\n+//        // This verifies that the bug exists\n+//\n+//        // Attempt to consume remaining 9 messages.. Expecting NONE.\n+//        // receiving just one message should fail so no need to fail 9 times\n+//        received = _consumer.receive(1000);\n+//        assertNull(\"Message receieved when it should be null:\" + received, received);\n+//\n+////        //Close the Connection which you would assume would free the messages\n+////        _connection.close();\n+////\n+////        // Reconnect\n+////        initialiseConnection();\n+////\n+////        // We should still be unable to receive messages\n+////        received = _consumer.receive(1000);\n+////        assertNull(\"Message receieved when it should be null:\" + received, received);\n+////\n+////        _connection.close();\n+//\n+//        // Close original IO layer. Expecting messages to be released\n+//        protocolSession.closeProtocolSession();\n+//\n+//        // Reconnect and all should be good.\n+////        initialiseConnection();\n+//\n+//        // Attempt to consume again. Expect 9 messages\n+//        for (int count = 1; count < 10; count++)\n+//        {\n+//            received = _consumer.receive(2000);\n+//            assertNotNull(\"Expected message not received:\" + count, received);\n+//            assertEquals(messages.remove(0).getIntProperty(\"count\"),\n+//                         received.getIntProperty(\"count\"));\n+//        }\n+//\n+//        //Verify there are no more messages\n+//        received = _consumer.receive(1000);\n+//        assertNull(\"Message receieved when there should be none:\" + received,\n+//                   received);\n+    }\n+\n+    private void initialiseConnection()\n+            throws Exception\n+    {\n+        //Create Connection\n+        _connection = (AMQConnection) getConnection();\n+        _connection.setConnectionListener(this);\n+\n+        _session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+        _queue = _session.createQueue(getName());\n+\n+        // Create Consumer\n+        _consumer = _session.createConsumer(_queue);\n+\n+        //Start connection\n+        _connection.start();\n+    }\n+\n+    /** QpidTestCase back port to this release */\n+\n+    // modified from QTC as sendMessage is not testable.\n+    //  - should be renamed sendBlankBytesMessage\n+    //  - should be renamed sendNumberedBytesMessage\n+    public List<Message> sendNumberedBytesMessage(Session session, Destination destination,\n+                                                  int count) throws Exception\n+    {\n+        List<Message> messages = new ArrayList<Message>(count);\n+\n+        MessageProducer producer = session.createProducer(destination);\n+\n+        for (int i = 0; i < count; i++)\n+        {\n+            Message next = session.createMessage();\n+\n+            next.setIntProperty(\"count\", count);\n+\n+            producer.send(next);\n+\n+            messages.add(next);\n+        }\n+\n+        producer.close();\n+        return messages;\n+    }\n+\n+    public void bytesSent(long count)\n+    {\n+        //To change body of implemented methods use File | Settings | File Templates.\n+    }\n+\n+    public void bytesReceived(long count)\n+    {\n+    }\n+\n+    public boolean preFailover(boolean redirect)\n+    {\n+        //Allow failover to occur\n+        return true;\n+    }\n+\n+    public boolean preResubscribe()\n+    {\n+        //Allow failover to occur\n+        return true;\n+    }\n+\n+    public void failoverComplete()\n+    {\n+        _failoverOccured.countDown();\n+    }\n+}", "filename": "systests/src/main/java/org/apache/qpid/server/failover/MessageDisappearWithIOExceptionTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/41e583667e84142f390323ff44ce3ff8f71c60c0/systests/src/main/java/org/apache/qpid/test/unit/ack/AcknowledgeAfterFailoverTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/41e583667e84142f390323ff44ce3ff8f71c60c0/systests/src/main/java/org/apache/qpid/test/unit/ack/AcknowledgeAfterFailoverTest.java", "sha": "eb36522facc932454e106afb4ce5a818fa4cec8e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/unit/ack/AcknowledgeAfterFailoverTest.java?ref=41e583667e84142f390323ff44ce3ff8f71c60c0", "patch": "@@ -61,7 +61,7 @@ public void setUp() throws Exception\n      * @param transacted create a transacted session for this test\n      * @param mode if not transacted what ack mode to use for this test\n      * @throws Exception if a problem occured during test setup.\n-     */\n+     */                                                                                                               \n     @Override\n     protected void init(boolean transacted, int mode) throws Exception\n     {", "filename": "systests/src/main/java/org/apache/qpid/test/unit/ack/AcknowledgeAfterFailoverTest.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/41e583667e84142f390323ff44ce3ff8f71c60c0/systests/src/main/java/org/apache/qpid/test/utils/FailoverBaseCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/41e583667e84142f390323ff44ce3ff8f71c60c0/systests/src/main/java/org/apache/qpid/test/utils/FailoverBaseCase.java", "sha": "0426c4f45f75dc313d220102a1c02f0e220a9019", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/utils/FailoverBaseCase.java?ref=41e583667e84142f390323ff44ce3ff8f71c60c0", "patch": "@@ -55,7 +55,7 @@ protected void setUp() throws java.lang.Exception\n         super.setUp();\n         // Set QPID_WORK to $QPID_WORK/<getFailingPort()>\n         // or /tmp/<getFailingPort()> if QPID_WORK not set.\n-        setSystemProperty(\"QPID_WORK\", System.getProperty(\"QPID_WORK\", System.getProperty(\"java.io.tmpdir\")) + \"/\" + getFailingPort());\n+        setSystemProperty(\"QPID_WORK\", System.getProperty(\"QPID_WORK\") + \"/\" + getFailingPort());\n         startBroker(getFailingPort());\n     }\n \n@@ -95,7 +95,7 @@ public void tearDown() throws Exception\n             // Ensure we shutdown any secondary brokers, even if we are unable\n             // to cleanly tearDown the QTC.\n             stopBroker(getFailingPort());\n-            FileUtils.deleteDirectory(System.getProperty(\"QPID_WORK\", System.getProperty(\"java.io.tmpdir\")) + \"/\" + getFailingPort());\n+            FileUtils.deleteDirectory(System.getProperty(\"QPID_WORK\") + \"/\" + getFailingPort());\n         }\n     }\n ", "filename": "systests/src/main/java/org/apache/qpid/test/utils/FailoverBaseCase.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/41e583667e84142f390323ff44ce3ff8f71c60c0/test-profiles/Excludes", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/41e583667e84142f390323ff44ce3ff8f71c60c0/test-profiles/Excludes", "sha": "863f56ae921330ce3fc238baf5a344559f2910d0", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/test-profiles/Excludes?ref=41e583667e84142f390323ff44ce3ff8f71c60c0", "patch": "@@ -30,3 +30,7 @@ org.apache.qpid.test.unit.ack.AcknowledgeAfterFailoverTest#testClientAck\n // QPID-143 : Failover can occur between receive and ack but we don't stop the ack.\n org.apache.qpid.test.unit.ack.AcknowledgeAfterFailoverOnMessageTest#testAutoAck\n org.apache.qpid.test.unit.ack.AcknowledgeAfterFailoverOnMessageTest#testDupsOk\n+\n+\n+//temp do not commit\n+org.apache.qpid.server.failover.MessageDisappearWithIOExceptionTest#*", "filename": "test-profiles/Excludes"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/41e583667e84142f390323ff44ce3ff8f71c60c0/test-profiles/test-provider.properties", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/41e583667e84142f390323ff44ce3ff8f71c60c0/test-profiles/test-provider.properties", "sha": "8cea012c1d7288adc96b0032af2fa1b58d764770", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/test-profiles/test-provider.properties?ref=41e583667e84142f390323ff44ce3ff8f71c60c0", "patch": "@@ -34,7 +34,7 @@ connectionfactory.default.vm = amqp://username:password@clientid/test?brokerlist\n \n connectionfactory.failover = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port.alt};tcp://localhost:${test.port}'&sync_ack='true'&sync_publish='all'&failover='roundrobin?cyclecount='20''\n connectionfactory.failover.ssl = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port.alt.ssl}?ssl='true';tcp://localhost:${test.port.ssl}?ssl='true''&sync_ack='true'&sync_publish='all'&failover='roundrobin?cyclecount='20''\n-connectionfactory.failover.vm = amqp://username:password@clientid/test?brokerlist='vm://:2;vm://:1'\n+connectionfactory.failover.vm = amqp://username:password@clientid/test?brokerlist='vm://:2;vm://:1'&failover='roundrobin?cyclecount='20''\n \n connectionfactory.connection1 = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port}'\n connectionfactory.connection2 = amqp://username:password@clientid/test?brokerlist='tcp://localhost:${test.port.alt}'", "filename": "test-profiles/test-provider.properties"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/03c462a4daa841cfb710f6a8749a361e4c47cbce", "message": "QPID-1945: add initial new UI view for the VirtualHostManager mbean\n\nAlso modified the navigation tree to correctly identify the virtual host for single-instance mbeans like the VHM, and made the server registry mbean removal process more resistant to NPE's", "bug_id": "qpid-jms-amqp-0-x_81", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java", "sha": "17468cab80a09e0f8c7508eb2f784d6664d42c9f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java?ref=4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da", "patch": "@@ -27,7 +27,7 @@\n  */\n public class Constants\n {\n-    public final static String APPLICATION_NAME = \"Qpid Management Console\";\n+    public final static String APPLICATION_NAME = \"Qpid JMX Management Console\";\n     public static final String DEFAULT_DOMAIN = \"org.apache.qpid\";\n     \n     public final static String ACTION_REMOVE_MBEANNODE = \"Remove from list\";", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java", "sha": "bf3e95e30817dd939fe17837006416010ad1c53a", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java?ref=4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da", "patch": "@@ -164,6 +164,12 @@ else if (mbean.isConnection())\n \n     public void removeManagedObject(ManagedBean mbean)\n     {\n+        if (mbean == null)\n+        {\n+            return;\n+        }\n+        \n+        _mbeansMap.remove(mbean.getUniqueName());\n         \n         if (mbean.isQueue())\n         {\n@@ -177,8 +183,6 @@ else if (mbean.isConnection())\n         {\n             removeConnectionMBean(mbean);\n         }\n-        \n-        _mbeansMap.remove(mbean.getUniqueName());\n     }\n     \n     public void putMBeanInfo(ManagedBean mbean, MBeanInfo mbeanInfo)\n@@ -423,11 +427,11 @@ public void registerManagedObject(ObjectName objName)\n     public void unregisterManagedObject(ObjectName objName)\n     {\n         ManagedBean mbean = _mbeansMap.get(objName.toString());\n-        removeManagedObject(mbean);\n         // Check if mbean was not available in the map. It can happen if mbean unregistration\n         // notification is received and the mbean is not added in the map.\n         if (mbean != null)\n         {\n+            removeManagedObject(mbean);\n             _mbeansToBeRemoved.add(mbean);\n         }\n     }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanTabFolderFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanTabFolderFactory.java", "sha": "08f210fa913711d4533b70b9e954f55c50f7d754", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanTabFolderFactory.java?ref=4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da", "patch": "@@ -44,6 +44,7 @@\n import org.apache.qpid.management.ui.views.type.ExchangeTypeTabControl;\n import org.apache.qpid.management.ui.views.type.QueueTypeTabControl;\n import org.apache.qpid.management.ui.views.users.UserManagementTabControl;\n+import org.apache.qpid.management.ui.views.vhost.VHostTabControl;\n import org.apache.qpid.management.ui.views.logging.ConfigurationFileTabControl;\n import org.apache.qpid.management.ui.views.logging.RuntimeTabControl;\n import org.eclipse.swt.SWT;\n@@ -102,7 +103,11 @@ public static TabFolder generateMBeanTabFolder(final Composite parent, final JMX\n                 createGenericTabFolder(tabFolder, mbean);\n                 break;\n             case VHOST_MANAGER:\n-                createGenericTabFolder(tabFolder, mbean);\n+                tab = new TabItem(tabFolder, SWT.NONE);\n+                tab.setText(\"Operations\");\n+                controller = new VHostTabControl(tabFolder, mbean, mbsc);\n+                tab.setControl(controller.getControl());\n+                tab.setData(TabControl.CONTROLLER, controller);\n                 break;\n             case LOGGING_MANAGEMENT:\n                 tab = new TabItem(tabFolder, SWT.NONE);", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanTabFolderFactory.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java", "sha": "3322375b4f5c664bd09afe381bda552563613b33", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java?ref=4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da", "patch": "@@ -632,6 +632,7 @@ private void addManagedBean(TreeObject parent, ManagedBean mbean)\n \n         // Add the mbean node now\n         TreeObject mbeanNode = new TreeObject(mbean);\n+        mbeanNode.setVirtualHost(mbean.getVirtualHostName());\n         mbeanNode.setParent(typeNode);\n \n         // Add the mbean to the config file", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java"}, {"additions": 711, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/vhost/VHostTabControl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/vhost/VHostTabControl.java", "sha": "9b18901d86c93473923a7ba51e68b6eb649c818c", "changes": 711, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/vhost/VHostTabControl.java?ref=4cdb8c5ec5d8355ea82689dea3b0e34b0a1541da", "patch": "@@ -0,0 +1,711 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.views.vhost;\n+\n+import static org.apache.qpid.management.ui.Constants.EXCHANGE_TYPE_VALUES;\n+\n+import java.util.List;\n+\n+import javax.management.MBeanServerConnection;\n+import javax.management.MBeanServerInvocationHandler;\n+\n+import org.apache.qpid.management.ui.ApplicationRegistry;\n+import org.apache.qpid.management.ui.ManagedBean;\n+import org.apache.qpid.management.ui.ServerRegistry;\n+import org.apache.qpid.management.common.mbeans.ManagedBroker;\n+import org.apache.qpid.management.ui.jmx.JMXManagedObject;\n+import org.apache.qpid.management.ui.jmx.MBeanUtility;\n+import org.apache.qpid.management.ui.views.MBeanView;\n+import org.apache.qpid.management.ui.views.TabControl;\n+import org.apache.qpid.management.ui.views.ViewUtility;\n+import org.eclipse.jface.viewers.ISelectionChangedListener;\n+import org.eclipse.jface.viewers.IStructuredContentProvider;\n+import org.eclipse.jface.viewers.ITableLabelProvider;\n+import org.eclipse.jface.viewers.LabelProvider;\n+import org.eclipse.jface.viewers.SelectionChangedEvent;\n+import org.eclipse.jface.viewers.TableViewer;\n+import org.eclipse.jface.viewers.Viewer;\n+import org.eclipse.jface.viewers.ViewerSorter;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Shell;\n+import org.eclipse.swt.widgets.TabFolder;\n+import org.eclipse.swt.widgets.Table;\n+import org.eclipse.swt.widgets.TableColumn;\n+import org.eclipse.swt.widgets.Text;\n+import org.eclipse.ui.forms.widgets.Form;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+\n+\n+/**\n+ * Control class for the VirtualHostManager mbean operations tab.\n+ */\n+public class VHostTabControl extends TabControl\n+{\n+    private FormToolkit _toolkit;\n+    private Form        _form;\n+    private Table _queueTable = null;\n+    private TableViewer _queueTableViewer = null;\n+    private Table _exchangeTable = null;\n+    private TableViewer _exchangeTableViewer = null;\n+    \n+    private Composite _paramsComposite = null;\n+\n+    private ManagedBroker _vhmb;\n+\n+    public VHostTabControl(TabFolder tabFolder, JMXManagedObject mbean, MBeanServerConnection mbsc)\n+    {\n+        super(tabFolder);\n+        _mbean = mbean;\n+        _vhmb = (ManagedBroker) MBeanServerInvocationHandler.newProxyInstance(mbsc, \n+                                mbean.getObjectName(), ManagedBroker.class, false);\n+        _toolkit = new FormToolkit(_tabFolder.getDisplay());\n+        _form = _toolkit.createForm(_tabFolder);\n+        _form.getBody().setLayout(new GridLayout());\n+        createComposites();\n+        createWidgets();\n+    }\n+    \n+    private void createComposites()\n+    {\n+        _paramsComposite = _toolkit.createComposite(_form.getBody(), SWT.NONE);\n+        _paramsComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+        _paramsComposite.setLayout(new GridLayout(2, true));\n+    }\n+    \n+    /**\n+     * @see TabControl#getControl()\n+     */\n+    public Control getControl()\n+    {\n+        return _form;\n+    }\n+    \n+    /**\n+     * @see TabControl#setFocus()\n+     */\n+    public void setFocus()\n+    {\n+\n+    }\n+    \n+    @Override\n+    public void refresh(ManagedBean mbean)\n+    {\n+        List<ManagedBean> queues = null;\n+        List<ManagedBean> exchanges = null;\n+        \n+        ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(MBeanView.getServer());\n+        queues = serverRegistry.getQueues(MBeanView.getVirtualHost());\n+        exchanges = serverRegistry.getExchanges(MBeanView.getVirtualHost());\n+\n+        _form.setVisible(false);\n+        _queueTableViewer.setInput(queues);\n+        _exchangeTableViewer.setInput(exchanges);\n+        _form.setVisible(true);\n+        layout();\n+    }\n+    \n+    public void layout()\n+    {\n+        _form.layout(true);\n+        _form.getBody().layout(true, true);\n+    }\n+    \n+    private void createWidgets()\n+    {\n+        Group queuesGroup = new Group(_paramsComposite, SWT.SHADOW_NONE);\n+        queuesGroup.setBackground(_paramsComposite.getBackground());\n+        queuesGroup.setText(\"Queues\");\n+        queuesGroup.setLayout(new GridLayout(2,false));\n+        GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true);\n+        queuesGroup.setLayoutData(gridData);\n+               \n+        _queueTable = new Table (queuesGroup, SWT.SINGLE | SWT.SCROLL_LINE | SWT.BORDER | SWT.FULL_SELECTION);\n+        _queueTable.setLinesVisible (true);\n+        _queueTable.setHeaderVisible (true);\n+        GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);\n+        _queueTable.setLayoutData(data);\n+        \n+        _queueTableViewer = new TableViewer(_queueTable);\n+        final TableSorter tableSorter = new TableSorter();\n+        \n+        String[] titles = {\"Name\"};\n+        int[] bounds = { 250 };\n+        for (int i = 0; i < titles.length; i++) \n+        {\n+            final int index = i;\n+            final TableColumn column = new TableColumn (_queueTable, SWT.NONE);\n+\n+            column.setText(titles[i]);\n+            column.setWidth(bounds[i]);\n+            column.setResizable(true);\n+\n+            //Setting the right sorter\n+            column.addSelectionListener(new SelectionAdapter() \n+            {\n+                @Override\n+                public void widgetSelected(SelectionEvent e) \n+                {\n+                    tableSorter.setColumn(index);\n+                    final TableViewer viewer = _queueTableViewer;\n+                    int dir = viewer .getTable().getSortDirection();\n+                    if (viewer.getTable().getSortColumn() == column) \n+                    {\n+                        dir = dir == SWT.UP ? SWT.DOWN : SWT.UP;\n+                    } \n+                    else \n+                    {\n+                        dir = SWT.UP;\n+                    }\n+                    viewer.getTable().setSortDirection(dir);\n+                    viewer.getTable().setSortColumn(column);\n+                    viewer.refresh();\n+                }\n+            });\n+\n+        }\n+        \n+        _queueTableViewer.setContentProvider(new ContentProviderImpl());\n+        _queueTableViewer.setLabelProvider(new LabelProviderImpl());\n+        _queueTableViewer.setSorter(tableSorter);\n+        \n+        Composite queuesRightComposite = _toolkit.createComposite(queuesGroup);\n+        gridData = new GridData(SWT.FILL, SWT.FILL, false, true);\n+        queuesRightComposite.setLayoutData(gridData);\n+        queuesRightComposite.setLayout(new GridLayout());\n+        \n+        final Button createQueueButton = _toolkit.createButton(queuesRightComposite, \"Create ...\", SWT.PUSH);\n+        createQueueButton.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false));\n+        createQueueButton.addSelectionListener(new SelectionAdapter()\n+        {\n+            public void widgetSelected(SelectionEvent e)\n+            {\n+                createQueue(createQueueButton.getShell());\n+            }\n+        });\n+        \n+        final Button deleteQueueButton = _toolkit.createButton(queuesRightComposite, \"Delete\", SWT.PUSH);\n+        deleteQueueButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));\n+        deleteQueueButton.setEnabled(false);\n+        deleteQueueButton.addSelectionListener(new SelectionAdapter()\n+        {\n+            public void widgetSelected(SelectionEvent e)\n+            {\n+                int selectionIndex = _queueTable.getSelectionIndex();\n+\n+                if (selectionIndex != -1)\n+                {\n+                    final ManagedBean selectedQueue = (ManagedBean)_queueTable.getItem(selectionIndex).getData();\n+                    String queue = selectedQueue.getName(); \n+\n+                    int response = ViewUtility.popupOkCancelConfirmationMessage(\"VirtualHost Manager\", \n+                                                                    \"Delete queue: \" + queue + \" ?\");\n+                    if (response == SWT.OK)\n+                    {\n+                        try\n+                        {\n+                            _vhmb.deleteQueue(queue);\n+                            \n+                            //remove queue from list of managed beans\n+                            ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(MBeanView.getServer());\n+                            serverRegistry.removeManagedObject(selectedQueue);\n+                        }\n+                        catch(Exception e1)\n+                        {\n+                            MBeanUtility.handleException(_mbean, e1);\n+                        }\n+                        //TODO:display result\n+                        refresh(_mbean);;\n+                    }\n+                }\n+            }\n+        });\n+  \n+        _queueTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){\n+            public void selectionChanged(SelectionChangedEvent evt)\n+            {\n+                int selectionIndex = _queueTable.getSelectionIndex();\n+\n+                if (selectionIndex != -1)\n+                {\n+                    deleteQueueButton.setEnabled(true);\n+                }\n+                else\n+                {\n+                    deleteQueueButton.setEnabled(false);\n+                }\n+            }\n+        });\n+\n+        \n+        Group exchangesGroup = new Group(_paramsComposite, SWT.SHADOW_NONE);\n+        exchangesGroup.setBackground(_paramsComposite.getBackground());\n+        exchangesGroup.setText(\"Exchanges\");\n+        exchangesGroup.setLayout(new GridLayout(2,false));\n+        gridData = new GridData(SWT.FILL, SWT.FILL, true, true);\n+        exchangesGroup.setLayoutData(gridData);\n+               \n+        _exchangeTable = new Table (exchangesGroup, SWT.SINGLE | SWT.SCROLL_LINE | SWT.BORDER | SWT.FULL_SELECTION);\n+        _exchangeTable.setLinesVisible (true);\n+        _exchangeTable.setHeaderVisible (true);\n+        data = new GridData(SWT.FILL, SWT.FILL, true, true);\n+        _exchangeTable.setLayoutData(data);\n+        \n+        _exchangeTableViewer = new TableViewer(_exchangeTable);\n+        final TableSorter exchangeTableSorter = new TableSorter();\n+        \n+        for (int i = 0; i < titles.length; i++) \n+        {\n+            final int index = i;\n+            final TableColumn column = new TableColumn (_exchangeTable, SWT.NONE);\n+\n+            column.setText(titles[i]);\n+            column.setWidth(bounds[i]);\n+            column.setResizable(true);\n+\n+            //Setting the right sorter\n+            column.addSelectionListener(new SelectionAdapter() \n+            {\n+                @Override\n+                public void widgetSelected(SelectionEvent e) \n+                {\n+                    exchangeTableSorter.setColumn(index);\n+                    final TableViewer viewer = _exchangeTableViewer;\n+                    int dir = viewer .getTable().getSortDirection();\n+                    if (viewer.getTable().getSortColumn() == column) \n+                    {\n+                        dir = dir == SWT.UP ? SWT.DOWN : SWT.UP;\n+                    } \n+                    else \n+                    {\n+                        dir = SWT.UP;\n+                    }\n+                    viewer.getTable().setSortDirection(dir);\n+                    viewer.getTable().setSortColumn(column);\n+                    viewer.refresh();\n+                }\n+            });\n+\n+        }\n+        \n+        _exchangeTableViewer.setContentProvider(new ContentProviderImpl());\n+        _exchangeTableViewer.setLabelProvider(new LabelProviderImpl());\n+        _exchangeTableViewer.setSorter(exchangeTableSorter);\n+        \n+        Composite exchangesRightComposite = _toolkit.createComposite(exchangesGroup);\n+        gridData = new GridData(SWT.FILL, SWT.FILL, false, true);\n+        exchangesRightComposite.setLayoutData(gridData);\n+        exchangesRightComposite.setLayout(new GridLayout());\n+        \n+        final Button createExchangeButton = _toolkit.createButton(exchangesRightComposite, \"Create ...\", SWT.PUSH);\n+        createExchangeButton.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false));\n+        createExchangeButton.addSelectionListener(new SelectionAdapter()\n+        {\n+            public void widgetSelected(SelectionEvent e)\n+            {\n+                createExchange(createQueueButton.getShell());\n+            }\n+        });\n+        \n+        final Button deleteExchangeButton = _toolkit.createButton(exchangesRightComposite, \"Delete\", SWT.PUSH);\n+        deleteExchangeButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));\n+        deleteExchangeButton.setEnabled(false);\n+        deleteExchangeButton.addSelectionListener(new SelectionAdapter()\n+        {\n+            public void widgetSelected(SelectionEvent e)\n+            {\n+                int selectionIndex = _exchangeTable.getSelectionIndex();\n+\n+                if (selectionIndex != -1)\n+                {\n+                    final ManagedBean selectedExchange = (ManagedBean)_exchangeTable.getItem(selectionIndex).getData();\n+                    String exchange = selectedExchange.getName(); \n+\n+                    int response = ViewUtility.popupOkCancelConfirmationMessage(\"VirtualHost Manager\", \n+                                                                    \"Delete exchange: \" + exchange + \" ?\");\n+                    if (response == SWT.OK)\n+                    {\n+                        try\n+                        {\n+                            _vhmb.unregisterExchange(exchange);\n+                            \n+                            //remove exchange from list of managed beans\n+                            ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(MBeanView.getServer());\n+                            serverRegistry.removeManagedObject(selectedExchange);\n+                        }\n+                        catch(Exception e1)\n+                        {\n+                            MBeanUtility.handleException(_mbean, e1);\n+                        }\n+                        //TODO:display result\n+\n+                        refresh(_mbean);;\n+                    }\n+                }\n+            }\n+        });\n+  \n+        _exchangeTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){\n+            public void selectionChanged(SelectionChangedEvent evt)\n+            {\n+                int selectionIndex = _exchangeTable.getSelectionIndex();\n+\n+                if (selectionIndex != -1)\n+                {\n+                    deleteExchangeButton.setEnabled(true);\n+                }\n+                else\n+                {\n+                    deleteExchangeButton.setEnabled(false);\n+                }\n+            }\n+        });\n+        \n+    }\n+\n+    \n+    /**\n+     * Content Provider class for the table viewer\n+     */\n+    private class ContentProviderImpl  implements IStructuredContentProvider\n+    {\n+        \n+        public void inputChanged(Viewer v, Object oldInput, Object newInput)\n+        {\n+            \n+        }\n+        \n+        public void dispose()\n+        {\n+            \n+        }\n+        \n+        @SuppressWarnings(\"unchecked\")\n+        public Object[] getElements(Object parent)\n+        {\n+            return ((List<ManagedBean>) parent).toArray();\n+        }\n+    }\n+    \n+    /**\n+     * Label Provider class for the table viewer\n+     */\n+    private class LabelProviderImpl extends LabelProvider implements ITableLabelProvider\n+    {\n+        @Override\n+        public String getColumnText(Object element, int columnIndex)\n+        {\n+            switch (columnIndex)\n+            {\n+                case 0 : // name column \n+                    return ((ManagedBean) element).getName();\n+                default :\n+                    return \"-\";\n+            }\n+        }\n+        \n+        @Override\n+        public Image getColumnImage(Object element, int columnIndex)\n+        {\n+            return null;\n+        }\n+        \n+    }\n+\n+    /**\n+     * Sorter class for the table viewer.\n+     *\n+     */\n+    public class TableSorter extends ViewerSorter\n+    {\n+        private int column;\n+        private static final int ASCENDING = 0;\n+        private static final int DESCENDING = 1;\n+\n+        private int direction = DESCENDING;\n+\n+        public TableSorter()\n+        {\n+            this.column = 0;\n+            direction = ASCENDING;\n+        }\n+\n+        public void setColumn(int column)\n+        {\n+            if (column == this.column)\n+            {\n+                // Same column as last sort; toggle the direction\n+                direction = 1 - direction;\n+            }\n+            else\n+            {\n+                // New column; do an ascending sort\n+                this.column = column;\n+                direction = ASCENDING;\n+            }\n+        }\n+\n+        @Override\n+        public int compare(Viewer viewer, Object e1, Object e2)\n+        {\n+            ManagedBean mbean1 = (ManagedBean ) e1;\n+            ManagedBean mbean2 = (ManagedBean ) e2;\n+            \n+            int comparison = 0;\n+            switch(column)\n+            {\n+                case 0:\n+                    comparison = mbean1.getName().compareTo(mbean2.getName());\n+                    break;\n+                default:\n+                    comparison = 0;\n+            }\n+            // If descending order, flip the direction\n+            if(direction == DESCENDING)\n+            {\n+                comparison = -comparison;\n+            }\n+            return comparison;\n+        }\n+    }\n+    \n+    private void createQueue(final Shell parent)\n+    {\n+        final Shell shell = ViewUtility.createModalDialogShell(parent, \"Create Queue\");\n+        \n+        Composite nameComposite = _toolkit.createComposite(shell, SWT.NONE);\n+        nameComposite.setBackground(shell.getBackground());\n+        nameComposite.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        nameComposite.setLayout(new GridLayout(2,false));\n+        \n+        _toolkit.createLabel(nameComposite,\"Name:\").setBackground(shell.getBackground());\n+        final Text nameText = new Text(nameComposite, SWT.BORDER);\n+        nameText.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        \n+        Composite ownerComposite = _toolkit.createComposite(shell, SWT.NONE);\n+        ownerComposite.setBackground(shell.getBackground());\n+        ownerComposite.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        ownerComposite.setLayout(new GridLayout(2,false));\n+        \n+        _toolkit.createLabel(ownerComposite,\"Owner (optional):\").setBackground(shell.getBackground());\n+        final Text ownerText = new Text(ownerComposite, SWT.BORDER);\n+        ownerText.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        \n+        Composite durableComposite = _toolkit.createComposite(shell, SWT.NONE);\n+        durableComposite.setBackground(shell.getBackground());\n+        GridData gridData = new GridData(SWT.FILL, SWT.TOP, true, false);\n+        gridData.minimumWidth = 220;\n+        durableComposite.setLayoutData(gridData);\n+        durableComposite.setLayout(new GridLayout(2,false));\n+        \n+        _toolkit.createLabel(durableComposite,\"Durable:\").setBackground(shell.getBackground());\n+        final Button durableButton = new Button(durableComposite, SWT.CHECK);\n+        durableButton.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, true, false));\n+\n+        Composite okCancelButtonsComp = _toolkit.createComposite(shell);\n+        okCancelButtonsComp.setBackground(shell.getBackground());\n+        okCancelButtonsComp.setLayoutData(new GridData(SWT.RIGHT, SWT.FILL, true, true));\n+        okCancelButtonsComp.setLayout(new GridLayout(2,false));\n+        \n+        Button okButton = _toolkit.createButton(okCancelButtonsComp, \"OK\", SWT.PUSH);\n+        okButton.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, false, false));\n+        Button cancelButton = _toolkit.createButton(okCancelButtonsComp, \"Cancel\", SWT.PUSH);\n+        cancelButton.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, false, false));\n+\n+        okButton.addSelectionListener(new SelectionAdapter()\n+        {\n+            public void widgetSelected(SelectionEvent e)\n+            {\n+                String name = nameText.getText();\n+                \n+                if (name == null || name.length() == 0)\n+                {                            \n+                    ViewUtility.popupErrorMessage(\"Create Queue\", \"Please enter a valid name\");\n+                    return;\n+                }\n+                \n+                String owner = ownerText.getText();\n+                \n+                if (owner != null && owner.length() == 0)\n+                {                            \n+                    owner = null;\n+                }\n+                \n+                boolean durable = durableButton.getSelection();\n+                \n+                shell.dispose();\n+                \n+                try\n+                {\n+                    _vhmb.createNewQueue(name, owner, durable);\n+                    //TODO: display result?\n+                    \n+                    try\n+                    {   \n+                        //delay to allow mbean registration notification processing\n+                        Thread.sleep(250); \n+                    }\n+                    catch(InterruptedException ie)\n+                    {\n+                        //ignore\n+                    }\n+                }\n+                catch(Exception e5)\n+                {\n+                    MBeanUtility.handleException(_mbean, e5);\n+                }\n+\n+                refresh(_mbean);\n+            }\n+        });\n+        \n+        cancelButton.addSelectionListener(new SelectionAdapter()\n+        {\n+            public void widgetSelected(SelectionEvent e)\n+            {\n+                shell.dispose();\n+            }\n+        });\n+\n+        shell.setDefaultButton(okButton);\n+        shell.pack();\n+        shell.open();\n+    }\n+    \n+    private void createExchange(final Shell parent)\n+    {\n+        final Shell shell = ViewUtility.createModalDialogShell(parent, \"Create Exchange\");\n+\n+        Composite nameComposite = _toolkit.createComposite(shell, SWT.NONE);\n+        nameComposite.setBackground(shell.getBackground());\n+        nameComposite.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        nameComposite.setLayout(new GridLayout(2,false));\n+        \n+        _toolkit.createLabel(nameComposite,\"Name:\").setBackground(shell.getBackground());\n+        final Text nameText = new Text(nameComposite, SWT.BORDER);\n+        nameText.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        \n+        Composite typeComposite = _toolkit.createComposite(shell, SWT.NONE);\n+        typeComposite.setBackground(shell.getBackground());\n+        typeComposite.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        typeComposite.setLayout(new GridLayout(2,false));\n+        \n+        //TODO: get exchange types from broker instead of hardcoded\n+        _toolkit.createLabel(typeComposite,\"Type:\").setBackground(shell.getBackground());\n+        final org.eclipse.swt.widgets.List typeList = new org.eclipse.swt.widgets.List(typeComposite, SWT.SINGLE | SWT.BORDER);\n+        typeList.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        typeList.setItems(EXCHANGE_TYPE_VALUES);\n+        \n+        Composite durableComposite = _toolkit.createComposite(shell, SWT.NONE);\n+        durableComposite.setBackground(shell.getBackground());\n+        GridData gridData = new GridData(SWT.FILL, SWT.TOP, true, false);\n+        gridData.minimumWidth = 220;\n+        durableComposite.setLayoutData(gridData);\n+        durableComposite.setLayout(new GridLayout(2,false));\n+        \n+        _toolkit.createLabel(durableComposite,\"Durable:\").setBackground(shell.getBackground());\n+        final Button durableButton = new Button(durableComposite, SWT.CHECK);\n+        durableButton.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, true, false));\n+\n+\n+        Composite okCancelButtonsComp = _toolkit.createComposite(shell);\n+        okCancelButtonsComp.setBackground(shell.getBackground());\n+        okCancelButtonsComp.setLayoutData(new GridData(SWT.RIGHT, SWT.FILL, true, true));\n+        okCancelButtonsComp.setLayout(new GridLayout(2,false));\n+        \n+        Button okButton = _toolkit.createButton(okCancelButtonsComp, \"OK\", SWT.PUSH);\n+        okButton.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, false, false));\n+        Button cancelButton = _toolkit.createButton(okCancelButtonsComp, \"Cancel\", SWT.PUSH);\n+        cancelButton.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, false, false));\n+\n+        okButton.addSelectionListener(new SelectionAdapter()\n+        {\n+            public void widgetSelected(SelectionEvent e)\n+            {\n+                String name = nameText.getText();\n+                \n+                if (name == null || name.length() == 0)\n+                {                            \n+                    ViewUtility.popupErrorMessage(\"Create Exchange\", \"Please enter a valid name\");\n+                    return;\n+                }\n+                \n+                int selectedTypeIndex = typeList.getSelectionIndex();\n+                \n+                if (selectedTypeIndex == -1)\n+                {\n+                    ViewUtility.popupErrorMessage(\"Create Exchange\", \"Please select an Exchange type\");\n+                    return;\n+                }\n+                \n+                String type = typeList.getItem(selectedTypeIndex);\n+\n+                boolean durable = durableButton.getSelection();\n+                \n+                shell.dispose();\n+                \n+                try\n+                {\n+                    _vhmb.createNewExchange(name, type, durable);\n+                    //TODO: display result?\n+                    \n+                    try\n+                    {   \n+                        //delay to allow mbean registration notification processing\n+                        Thread.sleep(250); \n+                    }\n+                    catch(InterruptedException ie)\n+                    {\n+                        //ignore\n+                    }\n+                }\n+                catch(Exception e5)\n+                {\n+                    MBeanUtility.handleException(_mbean, e5);\n+                }\n+\n+                refresh(_mbean);\n+            }\n+        });\n+        \n+        cancelButton.addSelectionListener(new SelectionAdapter()\n+        {\n+            public void widgetSelected(SelectionEvent e)\n+            {\n+                shell.dispose();\n+            }\n+        });\n+\n+        shell.setDefaultButton(okButton);\n+        shell.pack();\n+        shell.open();\n+    }\n+    \n+}", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/vhost/VHostTabControl.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/dd829d50e621f1406b765f2e79e2399f4e2b7a57", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/ae242f66ed8c0d565964d13901c9061e40596c65", "message": "Removed false positive return from FU.delete(). Delete mirrors functionality provided by java.io. Attempting to delete an non-existent file returns false. The caller must handle this correctly. If client provides a null value then the call will throw a NPE which is a valid java response.", "bug_id": "qpid-jms-amqp-0-x_82", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dd829d50e621f1406b765f2e79e2399f4e2b7a57/common/src/main/java/org/apache/qpid/util/FileUtils.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dd829d50e621f1406b765f2e79e2399f4e2b7a57/common/src/main/java/org/apache/qpid/util/FileUtils.java", "sha": "e4bfb9c664a443a3d98b095719505ee2b098e607", "changes": 8, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/util/FileUtils.java?ref=dd829d50e621f1406b765f2e79e2399f4e2b7a57", "patch": "@@ -246,12 +246,6 @@ public static boolean delete(File file, boolean recursive)\n      {\n          boolean success = true;\n \n-         // If we have nothing to delete then it must be ok to say it was deleted.\n-         if (file == null || !file.exists())\n-         {\n-             return true;\n-         }\n-\n          if (file.isDirectory())\n          {\n              if (recursive)\n@@ -267,7 +261,7 @@ public static boolean delete(File file, boolean recursive)\n              return false;\n          }\n \n-         return success && file.delete();\n+         return file.delete();\n      }\n \n ", "filename": "common/src/main/java/org/apache/qpid/util/FileUtils.java"}, {"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/dd829d50e621f1406b765f2e79e2399f4e2b7a57/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/dd829d50e621f1406b765f2e79e2399f4e2b7a57/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java", "sha": "94e7e20a86d3aea1c59dd894d5f6ccfdbedffbbb", "changes": 16, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java?ref=dd829d50e621f1406b765f2e79e2399f4e2b7a57", "patch": "@@ -287,9 +287,23 @@ public void testDeleteNonExistentFile()\n         assertTrue(\"File exists\", !test.exists());\n         assertFalse(\"File is a directory\", test.isDirectory());\n \n-        assertTrue(\"Unable to delete\",FileUtils.delete(test,true));\n+        assertTrue(\"Delete Succeeded \", !FileUtils.delete(test, true));\n     }\n \n+    public void testDeleteNull()\n+    {\n+        try\n+        {\n+            FileUtils.delete(null, true);\n+            fail(\"Delete with null value should throw NPE.\");\n+        }\n+        catch (NullPointerException npe)\n+        {\n+            // expected path\n+        }\n+    }\n+\n+\n     /**\n      * Given two lists of File arrays ensure they are the same length and all entries in Before are in After\n      *", "filename": "common/src/test/java/org/apache/qpid/util/FileUtilsTest.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/3d4dd6921516432ed8ea4db24513be5e664976c5", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/e86a4b25e8e7bce808420c4fc1e210d5ea9fcc38", "message": "FileUtils : Was not correctly handling the case where a File object became null, it would previously have thrown a NPE which was erroneously caught this and declared the delete to have failed. If there is nothing to delete (signified by the Null File object) then the delete should pass.", "bug_id": "qpid-jms-amqp-0-x_83", "file": [{"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/3d4dd6921516432ed8ea4db24513be5e664976c5/common/src/main/java/org/apache/qpid/util/FileUtils.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/3d4dd6921516432ed8ea4db24513be5e664976c5/common/src/main/java/org/apache/qpid/util/FileUtils.java", "sha": "585657c8bb65e7c6c894bb084131413f6fa48bdd", "changes": 15, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/util/FileUtils.java?ref=3d4dd6921516432ed8ea4db24513be5e664976c5", "patch": "@@ -246,18 +246,19 @@ public static boolean delete(File file, boolean recursive)\n      {\n          boolean success = true;\n \n+         // If we have nothing to delete then it must be ok to say it was deleted.\n+         if (file == null)\n+         {\n+             return true;\n+         }\n+\n          if (file.isDirectory())\n          {\n              if (recursive)\n              {\n-                 try{\n-                     for (File subFile : file.listFiles())\n-                     {\n-                         success = delete(subFile, true) & success ;\n-                     }\n-                 }catch (NullPointerException npe)\n+                 for (File subFile : file.listFiles())\n                  {\n-                     success = false;\n+                     success = delete(subFile, true) & success ;\n                  }\n \n                  return success && file.delete();", "filename": "common/src/main/java/org/apache/qpid/util/FileUtils.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/2e3b110d8829eaec17e4993fe22c6ed01822cf34", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/12b6f0ee3250e2cb1ebea686250c24d24844d1cc", "message": "QPID-3829: use a seperate object for reference checking to stop the AMQMessage holding its underlying 0-8/0-9/0-9-1 connection/io objects in memory after they are closed. Also stops an NPE on the 0-8/0-9/0-9-1 subscriptions when evaluating no-local after store recovery.\n\nEnables NoLocalAfterRecoveryTest again, though updated to make it simpler and more reliable. This test should be removed if changes for QPID-3605 are undertaken.", "bug_id": "qpid-jms-amqp-0-x_84", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "sha": "e5e755bd2355797303aa8b3133c2eddf22223e98", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=2e3b110d8829eaec17e4993fe22c6ed01822cf34", "patch": "@@ -1108,7 +1108,7 @@ private AMQMessage createAMQMessage(IncomingMessage incomingMessage)\n         AMQMessage message = new AMQMessage(incomingMessage.getStoredMessage());\n \n         message.setExpiration(incomingMessage.getExpiration());\n-        message.setClientIdentifier(_session);\n+        message.setConnectionIdentifier(_session.getReference());\n         return message;\n     }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/AMQChannel.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/message/AMQMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/message/AMQMessage.java", "sha": "6a0e4d216eb6e6d408a0945721393d5bed8e39ed", "changes": 14, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/message/AMQMessage.java?ref=2e3b110d8829eaec17e4993fe22c6ed01822cf34", "patch": "@@ -58,7 +58,7 @@\n \n     private final long _size;\n \n-    private Object _sessionIdentifier;\n+    private Object _connectionIdentifier;\n     private static final byte IMMEDIATE_AND_DELIVERED = (byte) (IMMEDIATE | DELIVERED_TO_CONSUMER);\n \n     public AMQMessage(StoredMessage<MessageMetaData> handle)\n@@ -218,19 +218,15 @@ public long getMessageNumber()\n     }\n \n \n-    public Object getPublisherIdentifier()\n+    public Object getConnectionIdentifier()\n     {\n-        //todo store sessionIdentifier/client id with message in store\n-        //Currently the _sessionIdentifier will be null if the message has been\n-        // restored from a message Store\n-\n-        return _sessionIdentifier;\n+        return _connectionIdentifier;\n \n     }\n \n-    public void setClientIdentifier(final Object sessionIdentifier)\n+    public void setConnectionIdentifier(final Object connectionIdentifier)\n     {\n-        _sessionIdentifier = sessionIdentifier;\n+        _connectionIdentifier = connectionIdentifier;\n     }\n \n ", "filename": "broker/src/main/java/org/apache/qpid/server/message/AMQMessage.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolEngine.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolEngine.java", "sha": "f6980be525aa8767638c8873a191b1d322bc5363", "changes": 16, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolEngine.java?ref=2e3b110d8829eaec17e4993fe22c6ed01822cf34", "patch": "@@ -132,7 +132,8 @@\n     private Subject _authorizedSubject;\n     private MethodDispatcher _dispatcher;\n \n-    private final long _sessionID;\n+    private final long _connectionID;\n+    private Object _reference = new Object();\n \n     private AMQPConnectionActor _actor;\n     private LogSubject _logSubject;\n@@ -170,7 +171,7 @@ public AMQProtocolEngine(VirtualHostRegistry virtualHostRegistry, NetworkConnect\n         _codecFactory = new AMQCodecFactory(true, this);\n \n         setNetworkConnection(network);\n-        _sessionID = connectionId;\n+        _connectionID = connectionId;\n \n         _actor = new AMQPConnectionActor(this, virtualHostRegistry.getApplicationRegistry().getRootMessageLogger());\n \n@@ -203,7 +204,7 @@ private AMQProtocolSessionMBean createMBean() throws JMException\n \n     public long getSessionID()\n     {\n-        return _sessionID;\n+        return _connectionID;\n     }\n \n     public LogActor getLogActor()\n@@ -969,11 +970,6 @@ public MethodRegistry getRegistry()\n         return getMethodRegistry();\n     }\n \n-    public Object getClientIdentifier()\n-    {\n-        return _network.getRemoteAddress();\n-    }\n-\n     public VirtualHost getVirtualHost()\n     {\n         return _virtualHost;\n@@ -1464,4 +1460,8 @@ public void deliverToClient(final Subscription sub, final QueueEntry entry, fina\n \n     }\n \n+    public Object getReference()\n+    {\n+        return _reference;\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolEngine.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java", "sha": "6cd5b21f891051482067c510d1e01405c8d16c17", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java?ref=2e3b110d8829eaec17e4993fe22c6ed01822cf34", "patch": "@@ -172,7 +172,7 @@\n \n     void setClientProperties(FieldTable clientProperties);\n \n-    Object getClientIdentifier();\n+    Object getReference();\n \n     VirtualHost getVirtualHost();\n ", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e3b110d8829eaec17e4993fe22c6ed01822cf34/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "sha": "32baa17fc7b7d27f47737b7566a2d2e32a97b31d", "changes": 15, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java?ref=2e3b110d8829eaec17e4993fe22c6ed01822cf34", "patch": "@@ -475,10 +475,6 @@ public boolean filtersMessages()\n \n     public boolean hasInterest(QueueEntry entry)\n     {\n-\n-\n-\n-\n         //check that the message hasn't been rejected\n         if (entry.isRejectedBy(getSubscriptionID()))\n         {\n@@ -490,22 +486,17 @@ public boolean hasInterest(QueueEntry entry)\n \n         if (_noLocal)\n         {\n-\n             AMQMessage message = (AMQMessage) entry.getMessage();\n \n-            //todo - client id should be recorded so we don't have to handle\n-            // the case where this is null.\n-            final Object publisher = message.getPublisherIdentifier();\n+            final Object publisherReference = message.getConnectionIdentifier();\n \n             // We don't want local messages so check to see if message is one we sent\n-            Object localInstance = getProtocolSession();\n+            Object localReference = getProtocolSession().getReference();\n \n-            if(publisher.equals(localInstance))\n+            if(publisherReference != null && publisherReference.equals(localReference))\n             {\n                 return false;\n             }\n-\n-\n         }\n \n ", "filename": "broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java"}, {"additions": 30, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e3b110d8829eaec17e4993fe22c6ed01822cf34/systests/src/main/java/org/apache/qpid/server/persistent/NoLocalAfterRecoveryTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e3b110d8829eaec17e4993fe22c6ed01822cf34/systests/src/main/java/org/apache/qpid/server/persistent/NoLocalAfterRecoveryTest.java", "sha": "2e259191aa23feb000d3bdc5fe828939cae1b5fa", "changes": 171, "status": "modified", "deletions": 141, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/persistent/NoLocalAfterRecoveryTest.java?ref=2e3b110d8829eaec17e4993fe22c6ed01822cf34", "patch": "@@ -20,14 +20,8 @@\n  */\n package org.apache.qpid.server.persistent;\n \n-import org.apache.commons.configuration.XMLConfiguration;\n-\n-import org.apache.qpid.client.AMQConnection;\n-import org.apache.qpid.jms.BrokerDetails;\n-import org.apache.qpid.jms.ConnectionListener;\n-import org.apache.qpid.jms.ConnectionURL;\n-import org.apache.qpid.server.store.DerbyMessageStore;\n-import org.apache.qpid.test.utils.QpidBrokerTestCase;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.jms.Connection;\n import javax.jms.JMSException;\n@@ -36,60 +30,28 @@\n import javax.jms.Session;\n import javax.jms.Topic;\n import javax.jms.TopicSubscriber;\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+\n+import org.apache.qpid.test.utils.QpidBrokerTestCase;\n \n /**\n- * QPID-1813 : We do not store the client id with a message so on store restart\n- * that information is lost and we are unable to perform no local checks.\n- *\n- * QPID-1813 highlights the lack of testing here as the broker will NPE as it\n- * assumes that the client id of the publisher will always exist\n+ * Verifies that after recovery, a new Connection with no-local in use is\n+ * able to receive messages sent prior to the broker restart.\n  */\n-public class NoLocalAfterRecoveryTest extends QpidBrokerTestCase implements ConnectionListener\n+public class NoLocalAfterRecoveryTest extends QpidBrokerTestCase\n {\n     protected final String MY_TOPIC_SUBSCRIPTION_NAME = this.getName();\n     protected static final int SEND_COUNT = 10;\n-    private CountDownLatch _failoverComplete = new CountDownLatch(1);\n-\n-    protected ConnectionURL _connectionURL;\n-\n-    @Override\n-    protected void setUp() throws Exception\n-    {\n-\n-        XMLConfiguration configuration = new XMLConfiguration(_configFile);\n-        configuration.setProperty(\"virtualhosts.virtualhost.test.store.class\", \"org.apache.qpid.server.store.DerbyMessageStore\");\n-        configuration.setProperty(\"virtualhosts.virtualhost.test.store.\"+ DerbyMessageStore.ENVIRONMENT_PATH_PROPERTY,\n-                                  System.getProperty(\"QPID_WORK\", System.getProperty(\"java.io.tmpdir\")) + File.separator + \"derbyDB-NoLocalAfterRecoveryTest\");\n-\n-        File tmpFile = File.createTempFile(\"configFile\", \"test\");\n-        tmpFile.deleteOnExit();\n-        configuration.save(tmpFile);\n-\n-        _configFile = tmpFile;\n-        _connectionURL = getConnectionURL();\n-\n-        BrokerDetails details = _connectionURL.getBrokerDetails(0);\n-\n-        // This will attempt to failover for 3 seconds.\n-        // Local testing suggests failover takes 2 seconds\n-        details.setProperty(BrokerDetails.OPTIONS_RETRY, \"10\");\n-        details.setProperty(BrokerDetails.OPTIONS_CONNECT_DELAY, \"500\");\n-\n-        super.setUp();        \n-    }\n \n     public void test() throws Exception\n     {\n+        if(!isBrokerStorePersistent())\n+        {\n+            fail(\"This test requires a broker with a persistent store\");\n+        }\n \n-        Connection connection = getConnection(_connectionURL);\n+        Connection connection = getConnection();\n         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);\n-\n-        Topic topic = (Topic) getInitialContext().lookup(\"topic\");\n+        Topic topic = session.createTopic(MY_TOPIC_SUBSCRIPTION_NAME);\n \n         TopicSubscriber noLocalSubscriber = session.\n                 createDurableSubscriber(topic, MY_TOPIC_SUBSCRIPTION_NAME + \"-NoLocal\",\n@@ -99,88 +61,40 @@ public void test() throws Exception\n                 createDurableSubscriber(topic, MY_TOPIC_SUBSCRIPTION_NAME + \"-Normal\",\n                                         null, false);\n \n-        List<Message> sent = sendMessage(session, topic, SEND_COUNT);\n-\n-        session.commit();\n-\n-        assertEquals(\"Incorrect number of messages sent\",\n-                     SEND_COUNT, sent.size());\n-\n+        sendMessage(session, topic, SEND_COUNT);\n \n         // Check messages can be received as expected.\n         connection.start();\n \n-        assertTrue(\"No Local Subscriber is not a no-local subscriber\",\n-                   noLocalSubscriber.getNoLocal());\n-\n-        assertFalse(\"Normal Subscriber is a no-local subscriber\",\n-                    normalSubscriber.getNoLocal());\n-\n-\n         List<Message> received = receiveMessage(noLocalSubscriber, SEND_COUNT);\n         assertEquals(\"No Local Subscriber Received messages\", 0, received.size());\n \n         received = receiveMessage(normalSubscriber, SEND_COUNT);\n         assertEquals(\"Normal Subscriber Received no messages\",\n                      SEND_COUNT, received.size());\n+        session.commit();\n+        connection.close();\n \n-\n-        ((AMQConnection)connection).setConnectionListener(this);\n-\n+        //We didn't receive the messages on the durable queue for the no-local subscriber\n+        //so they are still on the broker. Restart the broker, prompting their recovery.\n         restartBroker();\n \n+        Connection connection2 = getConnection();\n+        connection2.start();\n \n-        //Await\n-        if (!_failoverComplete.await(4000L, TimeUnit.MILLISECONDS))\n-        {\n-            fail(\"Failover Failed to compelete\");\n-        }\n-\n-        session.rollback();\n-\n-        //Failover will restablish our clients\n-        assertTrue(\"No Local Subscriber is not a no-local subscriber\",\n-                   noLocalSubscriber.getNoLocal());\n-\n-        assertFalse(\"Normal Subscriber is a no-local subscriber\",\n-                    normalSubscriber.getNoLocal());\n+        Session session2 = connection2.createSession(true, Session.SESSION_TRANSACTED);\n+        Topic topic2 = session2.createTopic(MY_TOPIC_SUBSCRIPTION_NAME);\n \n+        TopicSubscriber noLocalSubscriber2 = session2.\n+                createDurableSubscriber(topic2, MY_TOPIC_SUBSCRIPTION_NAME + \"-NoLocal\",\n+                                        null, true);\n \n-        // NOTE : here that the NO-local subscriber actually now gets ALL the\n-        // messages as the connection has failed and they are consuming on a\n-        // different connnection to the one that was published on.\n-        received = receiveMessage(noLocalSubscriber, SEND_COUNT);\n+        // The NO-local subscriber should now get ALL the messages\n+        // as they are being consumed on a different connection to\n+        // the one that they were published on.\n+        received = receiveMessage(noLocalSubscriber2, SEND_COUNT);\n+        session2.commit();\n         assertEquals(\"No Local Subscriber Received messages\", SEND_COUNT, received.size());\n-\n-        received = receiveMessage(normalSubscriber, SEND_COUNT);\n-        assertEquals(\"Normal Subscriber Received no messages\",\n-                     SEND_COUNT, received.size());\n-\n-        //leave the store in a clean state.\n-        session.commit();\n-    }\n-\n-    protected List<Message> assertReceiveMessage(MessageConsumer messageConsumer,\n-                                                 int count) throws JMSException\n-    {\n-\n-        List<Message> receivedMessages = new ArrayList<Message>(count);\n-        for (int i = 0; i < count; i++)\n-        {\n-            Message received = messageConsumer.receive(1000);\n-\n-            if (received != null)\n-            {\n-                receivedMessages.add(received);\n-            }\n-            else\n-            {\n-                fail(\"Only \"\n-                     + receivedMessages.size() + \"/\" + count + \" received.\");\n-            }\n-        }\n-\n-        return receivedMessages;\n     }\n \n     protected List<Message> receiveMessage(MessageConsumer messageConsumer,\n@@ -204,29 +118,4 @@ public void test() throws Exception\n \n         return receivedMessages;\n     }\n-\n-    public void bytesSent(long count)\n-    {\n-\n-    }\n-\n-    public void bytesReceived(long count)\n-    {\n-\n-    }\n-\n-    public boolean preFailover(boolean redirect)\n-    {\n-        return true;\n-    }\n-\n-    public boolean preResubscribe()\n-    {\n-        return true;\n-    }\n-\n-    public void failoverComplete()\n-    {\n-        _failoverComplete.countDown();\n-    }\n }", "filename": "systests/src/main/java/org/apache/qpid/server/persistent/NoLocalAfterRecoveryTest.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e3b110d8829eaec17e4993fe22c6ed01822cf34/test-profiles/JavaExcludes", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e3b110d8829eaec17e4993fe22c6ed01822cf34/test-profiles/JavaExcludes", "sha": "e123d029181a22bdb1d324d815c4c49c0d9cf73d", "changes": 3, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/test-profiles/JavaExcludes?ref=2e3b110d8829eaec17e4993fe22c6ed01822cf34", "patch": "@@ -28,9 +28,6 @@ org.apache.qpid.test.client.queue.QueuePolicyTest#testRejectPolicy\n //Moved from JavaStandaloneExcludes when it was removed\n ///////////////////////////////////////////////////////\n \n-//QPID-1818, QPID-1821 : Client code path does not correctly restore a transacted session after failover.\n-org.apache.qpid.server.persistent.NoLocalAfterRecoveryTest#*\n-\n //XA functionality is not fully implemented yet\n org.apache.qpid.jms.xa.XAResourceTest#*\n ", "filename": "test-profiles/JavaExcludes"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/2e3b110d8829eaec17e4993fe22c6ed01822cf34/test-profiles/JavaTransientExcludes", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/2e3b110d8829eaec17e4993fe22c6ed01822cf34/test-profiles/JavaTransientExcludes", "sha": "7cc541c8b928f5790996e86e3e8aa102742fb802", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/test-profiles/JavaTransientExcludes?ref=2e3b110d8829eaec17e4993fe22c6ed01822cf34", "patch": "@@ -18,6 +18,7 @@\n //\n \n //These tests require a persistent store\n+org.apache.qpid.server.persistent.NoLocalAfterRecoveryTest#*\n org.apache.qpid.server.store.PersistentStoreTest#*\n org.apache.qpid.test.unit.ack.ClientAcknowledgeTest#testClientAckWithLargeFlusherPeriod\n ", "filename": "test-profiles/JavaTransientExcludes"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/246c02761601a92133fb7d10e37b5361cf2f8fc7", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/8ca9c74ec4a84fa74a40b5cfd43e3c77e9bfe6b0", "message": "QPID-2900: Changed SimpleAMQQueue to avoid race condition in the updating atomic QueueContext._releasedEntry. Race was between thread SubFlushRunner (or QueueRunner) executing method SimpleAMQQueue.setLastSeenEntry and the thread executing the MessageRelase command executing method SimpleAMQQueue.updateSubRequeueEntry. Bolstered the unit tests surrounding the area of change to reduce risk of regression. Overrode TestableMemoryMessageStore#close() to avoid a NPE during tearDown silently cluttering some unit test logs (including SimpleAMQQueueTest).\n\nApplied patch from Keith Wall <keith.wall@gmail.com>", "bug_id": "qpid-jms-amqp-0-x_85", "file": [{"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java", "sha": "b003152db67f218790964cefbf26f1491497a031", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java?ref=246c02761601a92133fb7d10e37b5361cf2f8fc7", "patch": "@@ -54,7 +54,6 @@\n \n import javax.management.JMException;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.EnumSet;\n@@ -742,12 +741,12 @@ private void incrementTxnDequeueStats(QueueEntry entry)\n     private void deliverMessage(final Subscription sub, final QueueEntry entry)\n             throws AMQException\n     {\n+        setLastSeenEntry(sub, entry);\n+\n         _deliveredMessages.incrementAndGet();\n         incrementUnackedMsgCount();\n \n         sub.send(entry);\n-\n-        setLastSeenEntry(sub,entry);\n     }\n \n     private boolean subscriptionReadyAndHasInterest(final Subscription sub, final QueueEntry entry) throws AMQException", "filename": "broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java"}, {"additions": 97, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/queue/QueueEntryTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/queue/QueueEntryTest.java", "sha": "b67723dd2559035f22f6eb82411bb97b2145bf7f", "changes": 97, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/queue/QueueEntryTest.java?ref=246c02761601a92133fb7d10e37b5361cf2f8fc7", "patch": "@@ -0,0 +1,97 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.queue;\n+\n+import org.apache.qpid.test.utils.QpidTestCase;\n+\n+/**\n+ *\n+ * Tests QueueEntry\n+ *\n+ */\n+public class QueueEntryTest extends QpidTestCase\n+{\n+    private QueueEntryImpl _queueEntry1 = null;\n+    private QueueEntryImpl _queueEntry2 = null;\n+    private QueueEntryImpl _queueEntry3 = null;\n+\n+    @Override\n+    protected void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        int i = 0;\n+\n+        SimpleQueueEntryList queueEntryList = new SimpleQueueEntryList(null);\n+        _queueEntry1 = (QueueEntryImpl) queueEntryList.add(new MockAMQMessage(i++));\n+        _queueEntry2 = (QueueEntryImpl) queueEntryList.add(new MockAMQMessage(i++));\n+        _queueEntry3 = (QueueEntryImpl) queueEntryList.add(new MockAMQMessage(i++));\n+    }\n+\n+    public void testCompareTo()\n+    {\n+        assertTrue(_queueEntry1.compareTo(_queueEntry2) < 0);\n+        assertTrue(_queueEntry2.compareTo(_queueEntry1) > 0);\n+        assertTrue(_queueEntry1.compareTo(_queueEntry1) == 0);\n+    }\n+\n+    /**\n+     * Tests that the getNext() can be used to traverse the list.\n+     */\n+    public void testTraverseWithNoDeletedEntries()\n+    {\n+        QueueEntryImpl current = _queueEntry1;\n+\n+        current = current.getNext();\n+        assertSame(\"Unexpected current entry\",_queueEntry2, current);\n+\n+        current = current.getNext();\n+        assertSame(\"Unexpected current entry\",_queueEntry3, current);\n+\n+        current = current.getNext();\n+        assertNull(current);\n+\n+    }\n+\n+    /**\n+     * Tests that the getNext() can be used to traverse the list but deleted\n+     * entries are skipped and de-linked from the chain of entries.\n+     */\n+    public void testTraverseWithDeletedEntries()\n+    {\n+        // Delete 2nd queue entry\n+        _queueEntry2.delete();\n+        assertTrue(_queueEntry2.isDeleted());\n+\n+\n+        QueueEntryImpl current = _queueEntry1;\n+\n+        current = current.getNext();\n+        assertSame(\"Unexpected current entry\",_queueEntry3, current);\n+\n+        current = current.getNext();\n+        assertNull(current);\n+\n+        // Assert the side effects of getNext()\n+        assertSame(\"Next node of entry 1 should now be entry 3\",\n+                _queueEntry3, _queueEntry1.nextNode());\n+    }\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/queue/QueueEntryTest.java"}, {"additions": 261, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/queue/SimpleAMQQueueTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/queue/SimpleAMQQueueTest.java", "sha": "67d093d00abaad5cf2b164dd604f323a7e95963d", "changes": 264, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/queue/SimpleAMQQueueTest.java?ref=246c02761601a92133fb7d10e37b5361cf2f8fc7", "patch": "@@ -1,4 +1,3 @@\n-package org.apache.qpid.server.queue;\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +19,7 @@\n  *\n  */\n \n+package org.apache.qpid.server.queue;\n \n import org.apache.commons.configuration.PropertiesConfiguration;\n \n@@ -36,6 +36,7 @@\n import org.apache.qpid.server.exchange.DirectExchange;\n import org.apache.qpid.server.message.AMQMessage;\n import org.apache.qpid.server.message.MessageMetaData;\n+import org.apache.qpid.server.queue.BaseQueue.PostEnqueueAction;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.store.StoredMessage;\n import org.apache.qpid.server.store.TestableMemoryMessageStore;\n@@ -170,7 +171,7 @@ public void testBinding() throws AMQSecurityException, AMQInternalException\n \n     }\n \n-    public void testSubscription() throws AMQException\n+    public void testRegisterSubscriptionThenEnqueueMessage() throws AMQException\n     {\n         // Check adding a subscription adds it to the queue\n         _queue.registerSubscription(_subscription, false);\n@@ -185,6 +186,7 @@ public void testSubscription() throws AMQException\n         AMQMessage messageA = createMessage(new Long(24));\n         _queue.enqueue(messageA);\n         assertEquals(messageA, _subscription.getQueueContext().getLastSeenEntry().getMessage());\n+        assertNull(((QueueContext)_subscription.getQueueContext())._releasedEntry);\n \n         // Check removing the subscription removes it's information from the queue\n         _queue.unregisterSubscription(_subscription);\n@@ -199,13 +201,269 @@ public void testSubscription() throws AMQException\n \n     }\n \n-    public void testQueueNoSubscriber() throws AMQException, InterruptedException\n+    public void testEnqueueMessageThenRegisterSubscription() throws AMQException, InterruptedException\n     {\n         AMQMessage messageA = createMessage(new Long(24));\n         _queue.enqueue(messageA);\n         _queue.registerSubscription(_subscription, false);\n         Thread.sleep(150);\n         assertEquals(messageA, _subscription.getQueueContext().getLastSeenEntry().getMessage());\n+        assertNull(\"There should be no releasedEntry after an enqueue\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+    }\n+\n+    /**\n+     * Tests enqueuing two messages.\n+     */\n+    public void testEnqueueTwoMessagesThenRegisterSubscription() throws Exception\n+    {\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+        _queue.enqueue(messageA);\n+        _queue.enqueue(messageB);\n+        _queue.registerSubscription(_subscription, false);\n+        Thread.sleep(150);\n+        assertEquals(messageB, _subscription.getQueueContext().getLastSeenEntry().getMessage());\n+        assertNull(\"There should be no releasedEntry after enqueues\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+    }\n+\n+    /**\n+     * Tests that a re-queued message is resent to the subscriber.  Verifies also that the\n+     * QueueContext._releasedEntry is reset to null after the entry has been reset.\n+     */\n+    public void testRequeuedMessageIsResentToSubscriber() throws Exception\n+    {\n+        _queue.registerSubscription(_subscription, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+        AMQMessage messageC = createMessage(new Long(26));\n+\n+        /* Enqueue three messages */\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+        _queue.enqueue(messageB, postEnqueueAction);\n+        _queue.enqueue(messageC, postEnqueueAction);\n+\n+        Thread.sleep(150);  // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 3, _subscription.getMessages().size());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(0).isRedelivered());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(1).isRedelivered());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(2).isRedelivered());\n+\n+        /* Now requeue the first message only */\n+\n+        queueEntries.get(0).release();\n+        _queue.requeue(queueEntries.get(0));\n+\n+        Thread.sleep(150); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 4, _subscription.getMessages().size());\n+        assertTrue(\"Redelivery flag should now be set\", queueEntries.get(0).isRedelivered());\n+        assertFalse(\"Redelivery flag should remain be unset\", queueEntries.get(1).isRedelivered());\n+        assertFalse(\"Redelivery flag should remain be unset\",queueEntries.get(2).isRedelivered());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+    }\n+\n+    /**\n+     * Tests that a re-queued message that becomes expired is not resent to the subscriber.\n+     * This tests ensures that SimpleAMQQueueEntry.getNextAvailableEntry avoids expired entries.\n+     * Verifies also that the QueueContext._releasedEntry is reset to null after the entry has been reset.\n+     */\n+    public void testRequeuedMessageThatBecomesExpiredIsNotRedelivered() throws Exception\n+    {\n+        _queue.registerSubscription(_subscription, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        /* Enqueue one message with expiration set for a short time in the future */\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        int messageExpirationOffset = 200;\n+        messageA.setExpiration(System.currentTimeMillis() + messageExpirationOffset);\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+\n+        int subFlushWaitTime = 150;\n+        Thread.sleep(subFlushWaitTime); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 1, _subscription.getMessages().size());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(0).isRedelivered());\n+\n+        /* Wait a little more to be sure that message will have expired, then requeue it */\n+        Thread.sleep(messageExpirationOffset - subFlushWaitTime + 10);\n+        queueEntries.get(0).release();\n+        _queue.requeue(queueEntries.get(0));\n+\n+        Thread.sleep(subFlushWaitTime); // Work done by SubFlushRunner Thread\n+\n+        assertTrue(\"Expecting the queue entry to be now expired\", queueEntries.get(0).expired());\n+        assertEquals(\"Total number of messages sent should not have changed\", 1, _subscription.getMessages().size());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(0).isRedelivered());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+\n+    }\n+\n+    /**\n+     * Tests that if a client requeues messages 'out of order' (the order\n+     * used by QueueEntryImpl.compareTo) that messages are still resent\n+     * successfully.  Specifically this test ensures the {@see SimpleAMQQueue#requeue()}\n+     * can correctly move the _releasedEntry to an earlier position in the QueueEntry list.\n+     */\n+    public void testMessagesRequeuedOutOfComparableOrderAreDelivered() throws Exception\n+    {\n+        _queue.registerSubscription(_subscription, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+        AMQMessage messageC = createMessage(new Long(26));\n+\n+        /* Enqueue three messages */\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+        _queue.enqueue(messageB, postEnqueueAction);\n+        _queue.enqueue(messageC, postEnqueueAction);\n+\n+        Thread.sleep(150);  // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 3, _subscription.getMessages().size());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(0).isRedelivered());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(1).isRedelivered());\n+        assertFalse(\"Redelivery flag should not be set\", queueEntries.get(2).isRedelivered());\n+\n+        /* Now requeue the third and first message only */\n+\n+        queueEntries.get(2).release();\n+        queueEntries.get(0).release();\n+        _queue.requeue(queueEntries.get(2));\n+        _queue.requeue(queueEntries.get(0));\n+\n+        Thread.sleep(150); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription\", 5, _subscription.getMessages().size());\n+        assertTrue(\"Redelivery flag should now be set\", queueEntries.get(0).isRedelivered());\n+        assertFalse(\"Redelivery flag should remain be unset\", queueEntries.get(1).isRedelivered());\n+        assertTrue(\"Redelivery flag should now be set\",queueEntries.get(2).isRedelivered());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)_subscription.getQueueContext())._releasedEntry);\n+    }\n+\n+\n+    /**\n+     * Tests a requeue for a queue with multiple subscriptions.  Verifies that a\n+     * requeue resends a message to a <i>single</i> subscriber.\n+     */\n+    public void testRequeueForQueueWithMultipleSubscriptions() throws Exception\n+    {\n+        MockSubscription subscription1 = new MockSubscription();\n+        MockSubscription subscription2 = new MockSubscription();\n+\n+        _queue.registerSubscription(subscription1, false);\n+        _queue.registerSubscription(subscription2, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+\n+        /* Enqueue two messages */\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+        _queue.enqueue(messageB, postEnqueueAction);\n+\n+        Thread.sleep(150);  // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription1 after enqueue\", 1, subscription1.getMessages().size());\n+        assertEquals(\"Unexpected total number of messages sent to subscription2 after enqueue\", 1, subscription2.getMessages().size());\n+\n+        /* Now requeue a message (for any subscription) */\n+\n+        queueEntries.get(0).release();\n+        _queue.requeue((QueueEntryImpl)queueEntries.get(0));\n+\n+        Thread.sleep(150); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to all subscriptions after requeue\", 3, subscription1.getMessages().size() + subscription2.getMessages().size());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)subscription1.getQueueContext())._releasedEntry);\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)subscription2.getQueueContext())._releasedEntry);\n+    }\n+\n+    /**\n+     * Tests a requeue for a queue with multiple subscriptions.  Verifies that a\n+     * subscriber specific requeue resends the message to <i>that</i> subscriber.\n+     */\n+    public void testSubscriptionSpecificRequeueForQueueWithMultipleSubscriptions() throws Exception\n+    {\n+        MockSubscription subscription1 = new MockSubscription();\n+        MockSubscription subscription2 = new MockSubscription();\n+\n+        _queue.registerSubscription(subscription1, false);\n+        _queue.registerSubscription(subscription2, false);\n+\n+        final ArrayList<QueueEntry> queueEntries = new ArrayList<QueueEntry>();\n+        PostEnqueueAction postEnqueueAction = new PostEnqueueAction()\n+        {\n+            public void onEnqueue(QueueEntry entry)\n+            {\n+                queueEntries.add(entry);\n+            }\n+        };\n+\n+        AMQMessage messageA = createMessage(new Long(24));\n+        AMQMessage messageB = createMessage(new Long(25));\n+\n+        /* Enqueue two messages */\n+\n+        _queue.enqueue(messageA, postEnqueueAction);\n+        _queue.enqueue(messageB, postEnqueueAction);\n+\n+        Thread.sleep(150);  // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription1 after enqueue\", 1, subscription1.getMessages().size());\n+        assertEquals(\"Unexpected total number of messages sent to subscription2 after enqueue\", 1, subscription2.getMessages().size());\n+\n+        /* Now requeue a message (for first subscription) */\n+\n+        queueEntries.get(0).release();\n+        _queue.requeue((QueueEntryImpl)queueEntries.get(0), subscription1);\n+\n+        Thread.sleep(150); // Work done by SubFlushRunner Thread\n+\n+        assertEquals(\"Unexpected total number of messages sent to subscription1 after requeue\", 2, subscription1.getMessages().size());\n+        assertEquals(\"Unexpected total number of messages sent to subscription2 after requeue\", 1, subscription2.getMessages().size());\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)subscription1.getQueueContext())._releasedEntry);\n+        assertNull(\"releasedEntry should be cleared after requeue processed\", ((QueueContext)subscription2.getQueueContext())._releasedEntry);\n     }\n \n     public void testExclusiveConsumer() throws AMQException", "filename": "broker/src/test/java/org/apache/qpid/server/queue/SimpleAMQQueueTest.java"}, {"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/queue/SimpleQueueEntryListTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/queue/SimpleQueueEntryListTest.java", "sha": "320a75045ab8a6675ded92eff4b893633af33664", "changes": 15, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/queue/SimpleQueueEntryListTest.java?ref=246c02761601a92133fb7d10e37b5361cf2f8fc7", "patch": "@@ -51,6 +51,21 @@ protected void tearDown()\n         }\n     }\n     \n+    /**\n+     * Tests the behavior of the next(QueuyEntry) method.\n+     */\n+    public void testNext() throws Exception\n+    {\n+        SimpleQueueEntryList sqel = new SimpleQueueEntryList(null);\n+        int i = 0;\n+\n+        QueueEntry queueEntry1 = sqel.add(new MockAMQMessage(i++));\n+        QueueEntry queueEntry2 = sqel.add(new MockAMQMessage(i++));\n+\n+        assertSame(queueEntry2, sqel.next(queueEntry1));\n+        assertNull(sqel.next(queueEntry2));\n+    }\n+\n     public void testScavenge() throws Exception\n     {\n         SimpleQueueEntryList sqel = new SimpleQueueEntryList(null);", "filename": "broker/src/test/java/org/apache/qpid/server/queue/SimpleQueueEntryListTest.java"}, {"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/store/TestableMemoryMessageStore.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/store/TestableMemoryMessageStore.java", "sha": "3593297a0553ac96fc9def20a2cfc606c89b2910", "changes": 20, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/store/TestableMemoryMessageStore.java?ref=246c02761601a92133fb7d10e37b5361cf2f8fc7", "patch": "@@ -20,17 +20,12 @@\n  */\n package org.apache.qpid.server.store;\n \n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n import org.apache.qpid.AMQStoreException;\n import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.message.MessageMetaData;\n-import org.apache.qpid.framing.abstraction.ContentChunk;\n-\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.nio.ByteBuffer;\n \n /**\n  * Adds some extra methods to the memory message store for testing purposes.\n@@ -52,8 +47,11 @@ public TestableMemoryMessageStore()\n \n     }\n \n-\n-\n+    @Override\n+    public void close() throws Exception\n+    {\n+        // Not required to do anything\n+    }\n \n     @Override\n     public StoredMessage addMessage(StorableMessageMetaData metaData)", "filename": "broker/src/test/java/org/apache/qpid/server/store/TestableMemoryMessageStore.java"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/246c02761601a92133fb7d10e37b5361cf2f8fc7/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java", "sha": "1ec134e90e485b04ec2a1770528960714b647778", "changes": 23, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java?ref=246c02761601a92133fb7d10e37b5361cf2f8fc7", "patch": "@@ -21,20 +21,19 @@\n *\n */\n \n+import java.util.ArrayList;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.AMQChannel;\n import org.apache.qpid.server.logging.LogActor;\n-import org.apache.qpid.server.filter.FilterManager;\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.queue.QueueEntry;\n import org.apache.qpid.server.queue.QueueEntry.SubscriptionAcquiredState;\n \n-import java.util.ArrayList;\n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n public class MockSubscription implements Subscription\n {\n \n@@ -137,12 +136,11 @@ public void confirmAutoClose()\n \n     public void set(String key, Object value)\n     {\n-        //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n     public Object get(String key)\n     {\n-        return null;  //To change body of implemented methods use File | Settings | File Templates.\n+        return null;\n     }\n \n     public boolean isAutoClose()\n@@ -194,12 +192,15 @@ public void onDequeue(QueueEntry queueEntry)\n \n     public void restoreCredit(QueueEntry queueEntry)\n     {\n-        //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n-    public void send(QueueEntry msg) throws AMQException\n+    public void send(QueueEntry entry) throws AMQException\n     {\n-        messages.add(msg);\n+        if (messages.contains(entry))\n+        {\n+            entry.setRedelivered();\n+        }\n+        messages.add(entry);\n     }\n \n     public void setQueueContext(AMQQueue.Context queueContext)", "filename": "broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/977356355f7648c9a16b54166399cb3fc38bb67c", "message": "QPID-1331 : Modified the BrowserSubscription to be consistent with the NoAck Subscription.\nAdded Test QueueBrowserUsesNoAckTest to validate the change.\nNote that the Credit Manager Suspends the subscriber not the channel when credit is exhausted. JIRA to follow.\nSo to check if the subscription was suspended I needed to make a MockChannel and give it access to the subscriber map in the\nChannel.\nThe test also needed to be able to interrogate the state of the Subscription which was not part of the Subscription interface, but was used by all subscriptions. So promoted to the interface and implemented the stubs in the various helper/test classes.\n\nAdded the ability to browse() via the InternalBrokerBaseCase and prevented a NPE when there were no messages returned via getDelivers.", "bug_id": "qpid-jms-amqp-0-x_86", "file": [{"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "sha": "a668016f93200d9f07be7d2bb77eff2e356f6de8", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "patch": "@@ -93,8 +93,7 @@\n     private IncomingMessage _currentMessage;\n \n     /** Maps from consumer tag to subscription instance. Allows us to unsubscribe from a queue. */\n-    private final Map<AMQShortString, Subscription> _tag2SubscriptionMap = new HashMap<AMQShortString, Subscription>();\n-\n+    protected final Map<AMQShortString, Subscription> _tag2SubscriptionMap = new HashMap<AMQShortString, Subscription>();\n \n     private final MessageStore _messageStore;\n ", "filename": "broker/src/main/java/org/apache/qpid/server/AMQChannel.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java", "sha": "9419572399385b54e5c50647bf188aef4ec62ef8", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java?ref=eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "patch": "@@ -82,6 +82,8 @@\n \n     void setStateListener(final StateListener listener);\n \n+    public State getState();\n+\n     QueueEntry getLastSeenEntry();\n \n     boolean setLastSeenEntry(QueueEntry expected, QueueEntry newValue);", "filename": "broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "sha": "df842702757f9042bd087edb699340ea834f646b", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java?ref=eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "patch": "@@ -79,6 +79,7 @@ public BrowserSubscription(AMQChannel channel, AMQProtocolSession protocolSessio\n         }\n \n \n+        @Override\n         public boolean isBrowser()\n         {\n             return true;\n@@ -91,6 +92,7 @@ public boolean isBrowser()\n          * @param msg   The message to send\n          * @throws AMQException\n          */\n+        @Override\n         public void send(QueueEntry msg) throws AMQException\n         {\n             // We don't decrement the reference here as we don't want to consume the message\n@@ -103,6 +105,13 @@ public void send(QueueEntry msg) throws AMQException\n             }\n \n         }\n+\n+        @Override\n+        public boolean wouldSuspend(QueueEntry msg)\n+        {\n+            return false;\n+        }\n+\n     }\n \n     public static class NoAckSubscription extends SubscriptionImpl\n@@ -118,6 +127,7 @@ public NoAckSubscription(AMQChannel channel, AMQProtocolSession protocolSession,\n         }\n \n \n+        @Override\n         public boolean isBrowser()\n         {\n             return false;\n@@ -130,6 +140,7 @@ public boolean isBrowser()\n          * @param entry   The message to send\n          * @throws AMQException\n          */\n+        @Override\n         public void send(QueueEntry entry) throws AMQException\n         {\n \n@@ -166,6 +177,7 @@ public void send(QueueEntry entry) throws AMQException\n             }\n         }\n \n+        @Override\n         public boolean wouldSuspend(QueueEntry msg)\n         {\n             return false;\n@@ -185,6 +197,7 @@ public AckSubscription(AMQChannel channel, AMQProtocolSession protocolSession,\n             super(channel, protocolSession, consumerTag, filters, noLocal, creditManager, deliveryMethod, recordMethod);\n         }\n \n+        @Override\n         public boolean isBrowser()\n         {\n             return false;\n@@ -198,6 +211,7 @@ public boolean isBrowser()\n          * @param entry   The message to send\n          * @throws AMQException\n          */\n+        @Override\n         public void send(QueueEntry entry) throws AMQException\n         {\n ", "filename": "broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java", "sha": "da35ddc594b9b11d7203baa8e6d405dd87f8cb97", "changes": 9, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java?ref=eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "patch": "@@ -72,7 +72,14 @@ public byte getProtocolMinorVersion()\n     {\n         synchronized (_channelDelivers)\n         {\n-            List<DeliveryPair> msgs = _channelDelivers.get(channelId).get(consumerTag).subList(0, count);\n+            List<DeliveryPair> all =_channelDelivers.get(channelId).get(consumerTag);\n+            \n+            if (all == null)\n+            {\n+                return new ArrayList<DeliveryPair>(0);\n+            }\n+            \n+            List<DeliveryPair> msgs = all.subList(0, count);\n \n             List<DeliveryPair> response = new ArrayList<DeliveryPair>(msgs);\n ", "filename": "broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java", "sha": "db2f8a57ad1dd52c7193e14e24536414f659a8e0", "changes": 13, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java?ref=eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "patch": "@@ -29,8 +29,6 @@\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.queue.QueueEntry;\n import org.apache.qpid.server.queue.QueueEntry.SubscriptionAcquiredState;\n-import org.apache.qpid.server.subscription.Subscription.State;\n-import org.apache.qpid.server.subscription.Subscription.StateListener;\n \n public class MockSubscription implements Subscription\n {\n@@ -40,15 +38,15 @@\n     private AMQQueue queue = null;\n     private StateListener listener = null;\n     private QueueEntry lastSeen = null;\n-    private State state = State.ACTIVE;\n+    private State _state = State.ACTIVE;\n     private ArrayList<QueueEntry> messages = new ArrayList<QueueEntry>();\n \n     @Override\n     public void close()\n     {\n         closed = true;\n-        listener.stateChange(this, state , State.CLOSED);\n-        state = State.CLOSED;\n+        listener.stateChange(this, _state, State.CLOSED);\n+        _state = State.CLOSED;\n     }\n \n     @Override\n@@ -179,6 +177,11 @@ public void setStateListener(StateListener listener)\n         this.listener = listener;\n     }\n \n+    public State getState()\n+    {\n+        return _state;\n+    }\n+\n     @Override\n     public boolean wouldSuspend(QueueEntry msg)\n     {", "filename": "broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java"}, {"additions": 77, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/server/subscription/QueueBrowserUsesNoAckTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/server/subscription/QueueBrowserUsesNoAckTest.java", "sha": "d0db4ebd38ca880b68b34c023e1f0f02b191b8aa", "changes": 77, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/subscription/QueueBrowserUsesNoAckTest.java?ref=eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "patch": "@@ -0,0 +1,77 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.subscription;\n+\n+import org.apache.qpid.server.util.InternalBrokerBaseCase;\n+import org.apache.qpid.server.protocol.InternalTestProtocolSession;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.AMQException;\n+\n+import java.util.List;\n+\n+public class QueueBrowserUsesNoAckTest extends InternalBrokerBaseCase\n+{\n+\n+    public void testQueueBrowserUsesNoAck() throws AMQException\n+    {\n+        int sendMessageCount = 2;\n+        int prefetch = 1;\n+\n+        //Check store is empty\n+        checkStoreContents(0);\n+\n+        //Send required messsages to the queue\n+        publishMessages(_session, _channel, sendMessageCount);\n+\n+        //Ensure they are stored\n+        checkStoreContents(sendMessageCount);\n+\n+        //Check that there are no unacked messages\n+        assertEquals(\"Channel should have no unacked msgs \", 0,\n+                     _channel.getUnacknowledgedMessageMap().size());\n+\n+        //Set the prefetch on the session to be less than the sent messages\n+        _channel.setCredit(0, prefetch);\n+\n+        //browse the queue\n+        AMQShortString browser = browse(_channel, _queue);\n+\n+        _queue.deliverAsync();\n+\n+        //Wait for messages to fill the prefetch\n+        _session.awaitDelivery(prefetch);\n+\n+        //Get those messages\n+        List<InternalTestProtocolSession.DeliveryPair> messages =\n+                _session.getDelivers(_channel.getChannelId(), browser,\n+                                     prefetch);\n+\n+        //Ensure we recevied the prefetched messages\n+        assertEquals(prefetch, messages.size());\n+\n+        //Check the process didn't suspend the subscription as this would\n+        // indicate we are using the prefetch credit. i.e. using acks not No-Ack\n+        assertTrue(\"The subscription has been suspended\",\n+                   !_channel.getSubscription(browser).getState()\n+                           .equals(Subscription.State.SUSPENDED));       \n+    }\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/subscription/QueueBrowserUsesNoAckTest.java"}, {"additions": 28, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java", "sha": "509ea817fdbd723fc6ed0e9b8aa615712cf4f156", "changes": 30, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java?ref=eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "patch": "@@ -36,15 +36,18 @@\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.FieldTable;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n import org.apache.qpid.AMQException;\n+import org.apache.qpid.util.MockChannel;\n+import org.apache.qpid.common.AMQPFilterTypes;\n import org.apache.qpid.exchange.ExchangeDefaults;\n \n public class InternalBrokerBaseCase extends TestCase\n {\n     protected IApplicationRegistry _registry;\n     protected MessageStore _messageStore;\n-    protected AMQChannel _channel;\n+    protected MockChannel _channel;\n     protected InternalTestProtocolSession _session;\n     protected VirtualHost _virtualHost;\n     protected StoreContext _storeContext = new StoreContext();\n@@ -74,7 +77,7 @@ public void setUp() throws Exception\n \n         _session.setVirtualHost(_virtualHost);\n \n-        _channel = new AMQChannel(_session, 1, _messageStore);\n+        _channel = new MockChannel(_session, 1, _messageStore);\n \n         _session.addChannel(_channel);\n     }\n@@ -113,6 +116,29 @@ protected AMQShortString subscribe(InternalTestProtocolSession session, AMQChann\n         return null;\n     }\n \n+    protected AMQShortString browse(AMQChannel channel, AMQQueue queue)\n+    {\n+        try\n+        {\n+            FieldTable filters = new FieldTable();\n+            filters.put(AMQPFilterTypes.NO_CONSUME.getValue(), true);\n+\n+            return channel.subscribeToQueue(null, queue, true, filters, false, true);\n+        }\n+        catch (AMQException e)\n+        {\n+            e.printStackTrace();\n+            fail(e.getMessage());\n+        }\n+        catch (ConsumerTagNotUniqueException e)\n+        {\n+            e.printStackTrace();\n+            fail(e.getMessage());\n+        }\n+        //Keep the compiler happy\n+        return null;\n+    }\n+\n     public void publishMessages(InternalTestProtocolSession session, AMQChannel channel, int messages) throws AMQException\n     {\n         MessagePublishInfo info = new MessagePublishInfo()", "filename": "broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java"}, {"additions": 43, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/util/MockChannel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/broker/src/test/java/org/apache/qpid/util/MockChannel.java", "sha": "447d09429d908edebdc4d0efc192c1217a99832a", "changes": 43, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/util/MockChannel.java?ref=eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "patch": "@@ -0,0 +1,43 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.util;\n+\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.subscription.Subscription;\n+import org.apache.qpid.server.store.MessageStore;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.framing.AMQShortString;\n+\n+public class MockChannel extends AMQChannel\n+{\n+    public MockChannel(AMQProtocolSession session, int channelId, MessageStore messageStore)\n+            throws AMQException\n+    {\n+        super(session, channelId, messageStore);\n+    }\n+\n+    public Subscription getSubscription(AMQShortString subscription)\n+    {\n+        return _tag2SubscriptionMap.get(subscription);\n+    }\n+    \n+}", "filename": "broker/src/test/java/org/apache/qpid/util/MockChannel.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/eacfa5d957c1043b1ff879d4be5a93ca4f58290a/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java", "sha": "c20c0bc579e282fbaa6ae42422a95798baf44313", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java?ref=eacfa5d957c1043b1ff879d4be5a93ca4f58290a", "patch": "@@ -110,6 +110,12 @@ public void setStateListener(final StateListener listener)\n     {\n         //To change body of implemented methods use File | Settings | File Templates.\n     }\n+    \n+    @Override\n+    public State getState()\n+    {\n+        return null;  //To change body of implemented methods use File | Settings | File Templates.\n+    }\n \n     public QueueEntry getLastSeenEntry()\n     {", "filename": "systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/6a3801703e7e6f7effe28e92c70d660acb2c68e9", "message": "QPID-1992 : Addition of new Broker Logging Framework\nProvided static CurrentActor for accessing ThreadLocal.\nIncluded Test to validate setting of ThreadLocals.\nAdded Test for AMQPActor\nAdded getRootMessageLogger() to IApplicationRegistry\nAdjusted *ProtocolSessions to start counting at 0.\nAllowed Setting of Vhost on the MockProtocolSession\nCreated a fixed Principle in MockProtocolSession\nChanges to MockProtocolSession, prevent NPEs when the AMQPActor creates its log string.\nConverted CurrentActor to use a Stack allowing a variety of actors to take their turn on a thread.\nImproved package structure\nAdded testing for Actors\n\nMoved FileMonitorTools functionality to FileUtils and provided a Test\nConverted Log4jMessageLoggerTest to a proper UnitTest\nMoved Test cases to test package\nUpdated other broker tests to set the authenticated user before setting the virtualhost,\nWhilst the logging could output null as the username it would be better if the tests correctly set the authorizedID.\n\nUpdate to include tests for disabled logging\n\nFully tested LogSubjects\nUpdated MockAMQQueue to be able to take a Virtualhost as per a normal Queue.", "bug_id": "qpid-jms-amqp-0-x_87", "file": [{"additions": 16, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/configuration/ServerConfiguration.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/configuration/ServerConfiguration.java", "sha": "fc16b75e1a413fb97204074259c4fc4e56787735", "changes": 17, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/configuration/ServerConfiguration.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -94,6 +94,7 @@\n         envVarMap.put(\"QPID_SOCKETWRITEBUFFER\", \"connector.socketWriteBuffer\");\n         envVarMap.put(\"QPID_TCPNODELAY\", \"connector.tcpNoDelay\");\n         envVarMap.put(\"QPID_ENABLEPOOLEDALLOCATOR\", \"advanced.enablePooledAllocator\");\n+        envVarMap.put(\"QPID_STATUS-UPDATES\", \"status-updates\");\n     }\n     \n     public ServerConfiguration(File configurationURL) throws ConfigurationException\n@@ -186,7 +187,12 @@ private final static Configuration parseConfig(File file) throws ConfigurationEx\n         }\n         return conf;\n     }\n-    \n+\n+    public boolean getStatusEnabled()\n+    {\n+        return getConfig().getBoolean(\"status-updates\", true);\n+    }\n+\n     // Our configuration class needs to make the interpolate method\n     // public so it can be called below from the config method.\n     private static class MyConfiguration extends CompositeConfiguration\n@@ -541,4 +547,13 @@ public long getHousekeepingCheckPeriod()\n                    getConfig().getLong(\"housekeeping.expiredMessageCheckPeriod\", \n                            DEFAULT_HOUSEKEEPING_PERIOD));\n     }\n+\n+    public boolean getStatusUpdates()\n+    {\n+        // Retrieve the setting from configuration but default to on.\n+        String value = getConfig().getString(\"status-updates\", \"on\");\n+\n+        return value.equalsIgnoreCase(\"on\");\n+    }\n+\n }", "filename": "broker/src/main/java/org/apache/qpid/server/configuration/ServerConfiguration.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java", "sha": "5d7adc63719332eb39c9927ad0fa34ebbe822541", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -54,8 +54,11 @@ public void methodReceived(AMQStateManager stateManager, ChannelOpenBody body, i\n         AMQProtocolSession session = stateManager.getProtocolSession();\n         VirtualHost virtualHost = session.getVirtualHost();\n \n-        final AMQChannel channel = new AMQChannel(session,channelId, virtualHost.getMessageStore()\n-        );\n+        final AMQChannel channel = new AMQChannel(session,channelId,\n+                                                  virtualHost.getMessageStore());\n+\n+        \n+\n         session.addChannel(channel);\n \n         ChannelOpenOkBody response;", "filename": "broker/src/main/java/org/apache/qpid/server/handler/ChannelOpenHandler.java"}, {"additions": 34, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/BrokerMessages.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/BrokerMessages.java", "sha": "e9cc7449cd120db31208fd59fc4bfba1903d3b33", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/BrokerMessages.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,34 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+public class BrokerMessages\n+{\n+\n+    public static LogMessage BRK_1001(String version, String build)\n+    {\n+        return new LogMessage()\n+        {\n+            \n+        };\n+    }\n+\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/BrokerMessages.java"}, {"additions": 43, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/LogActor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/LogActor.java", "sha": "203a5d160d2b869677615e361a760127f93226e0", "changes": 43, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/LogActor.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,43 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.server.logging;\n+\n+/**\n+ * LogActor the entity that is stored as in a ThreadLocal and used to perform logging.\n+ *\n+ * The actor is responsible for formatting its display name for the log entry.\n+ *\n+ * The actor performs the requested logging.\n+ */\n+public interface LogActor\n+{\n+    /**\n+     * Logs the specified LogMessage about the LogSubject\n+     *\n+     * Currently logging has a global setting however this will later be revised and\n+     * as such the LogActor will need to take into consideration any new configuration\n+     * as a means of enabling the logging of LogActors and LogSubjects.\n+     *\n+     * @param subject The subject that is being logged\n+     * @param message The message to log\n+     */\n+    public void message(LogSubject subject, LogMessage message);\n+} \n\\ No newline at end of file", "filename": "broker/src/main/java/org/apache/qpid/server/logging/LogActor.java"}, {"additions": 26, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/LogMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/LogMessage.java", "sha": "5c112ff100a0e7db3165d17d379f8f029c1cebd3", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/LogMessage.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,26 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+public interface LogMessage\n+{\n+       \n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/LogMessage.java"}, {"additions": 37, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/LogSubject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/LogSubject.java", "sha": "e53ef364bfda644d8cb57eda56bace5b444fa925", "changes": 37, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/LogSubject.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,37 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+/**\n+ * Each LogSubject that wishes to be logged will implement this to provide their\n+ * own display representation.\n+ *\n+ * The display representation is retrieved through the toString() method.\n+ */\n+public interface LogSubject \n+{\n+    /**\n+     * Logs the message as provided by String.valueOf(message).\n+     *\n+     * @returns String the display representation of this LogSubject\n+     */\n+    public String toString();\n+}\n\\ No newline at end of file", "filename": "broker/src/main/java/org/apache/qpid/server/logging/LogSubject.java"}, {"additions": 44, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/RawMessageLogger.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/RawMessageLogger.java", "sha": "7d515f3263abaae04f54ae2c74a74b45fcc683e2", "changes": 44, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/RawMessageLogger.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,44 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+/**\n+ * A RawMessage Logger takes the given String and any Throwable and writes the\n+ * data to its resource.\n+ */\n+public interface RawMessageLogger\n+{\n+\n+    /**\n+     * Log the given message.\n+     *\n+     * @param message   String to log.\n+     */\n+    public void rawMessage(String message);\n+\n+    /**\n+     * Log the message and formatted stack trace for any Throwable.\n+     *\n+     * @param message   String to log.\n+     * @param throwable Throwable for which to provide stack trace.\n+     */\n+    public void rawMessage(String message, Throwable throwable);\n+} \n\\ No newline at end of file", "filename": "broker/src/main/java/org/apache/qpid/server/logging/RawMessageLogger.java"}, {"additions": 56, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLogger.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLogger.java", "sha": "cd7992faa70183b6f9d4eda0d96edb9f2547d5e2", "changes": 56, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLogger.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,56 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+/**\n+ * The RootMessageLogger is used by the LogActors to query if\n+ * logging is enabled for the requested message and to provide the actual\n+ * message that should be logged.\n+ */\n+public interface RootMessageLogger\n+{\n+    /**\n+     * Determine if the LogSubject and the LogActor should be\n+     * generating log messages.\n+     *\n+     * @param subject The subject of this log request\n+     * @param actor   The actor requesting the logging\n+     * @return boolean true if the message should be logged.\n+     */\n+    boolean isMessageEnabled(LogActor actor, LogSubject subject);\n+\n+\n+    /**\n+     * Log the raw message to the configured logger.\n+     *\n+     * @param message   The message to log\n+     */\n+    public void rawMessage(String message);\n+\n+    /**\n+     * Log the raw message to the configured logger.\n+     * Along with a formated stack trace from the Throwable.\n+     *\n+     * @param message   The message to log\n+     * @param throwable Optional Throwable that should provide stact trace\n+     */\n+    void rawMessage(String message, Throwable throwable);\n+}\n\\ No newline at end of file", "filename": "broker/src/main/java/org/apache/qpid/server/logging/RootMessageLogger.java"}, {"additions": 52, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLoggerImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLoggerImpl.java", "sha": "9270c316b6935007f6d393deb0f159bdf851e392", "changes": 52, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/RootMessageLoggerImpl.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,52 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+\n+public class RootMessageLoggerImpl implements RootMessageLogger\n+{\n+    private boolean _enabled;\n+\n+    RawMessageLogger _rawLogger;\n+    private static final String MESSAGE = \"MESSAGE \";\n+\n+    public RootMessageLoggerImpl(ServerConfiguration configuration, RawMessageLogger rawLogger)\n+    {\n+        _enabled = configuration.getStatusUpdates();\n+        _rawLogger = rawLogger;\n+    }\n+\n+    public boolean isMessageEnabled(LogActor actor, LogSubject subject)\n+    {\n+        return _enabled;\n+    }\n+\n+    public void rawMessage(String message)\n+    {\n+        _rawLogger.rawMessage(MESSAGE + message);\n+    }\n+\n+    public void rawMessage(String message, Throwable throwable)\n+    {\n+        _rawLogger.rawMessage(MESSAGE + message, throwable);\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/RootMessageLoggerImpl.java"}, {"additions": 79, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPChannelActor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPChannelActor.java", "sha": "3170040a77735de63953029a3a6b5107cefb318a", "changes": 79, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPChannelActor.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,79 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.subjects.ChannelLogSubject;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+import java.text.MessageFormat;\n+\n+/**\n+ * An AMQPChannelActor represtents a connection through the AMQP port with an\n+ * associated Channel.\n+ *\n+ * <p/>\n+ * This is responsible for correctly formatting the LogActor String in the log\n+ * <p/>\n+ * [con:1(user@127.0.0.1/)/ch:1]\n+ * <p/>\n+ * To do this it requires access to the IO Layers as well as a Channel\n+ */\n+public class AMQPChannelActor extends AbstractActor\n+{\n+\n+    /**\n+     * Create a new ChannelActor\n+     *\n+     * @param channel    The Channel for this LogActor\n+     * @param rootLogger The root Logger that this LogActor should use\n+     */\n+    public AMQPChannelActor(AMQChannel channel, RootMessageLogger rootLogger)\n+    {\n+        super(rootLogger);\n+\n+        AMQProtocolSession session = channel.getProtocolSession();\n+\n+        /**\n+         * LOG FORMAT used by the AMQPConnectorActor follows\n+         * ChannelLogSubject.CHANNEL_FORMAT :\n+         * con:{0}({1}@{2}/{3})/ch:{4}\n+         *\n+         * Uses a MessageFormat call to insert the requried values according to\n+         * these indicies:\n+         *\n+         * 0 - Connection ID\n+         * 1 - User ID\n+         * 2 - IP\n+         * 3 - Virtualhost\n+         */\n+        _logString = \"[\" + MessageFormat.format(ChannelLogSubject.CHANNEL_FORMAT,\n+                                               session.getSessionID(),\n+                                               session.getAuthorizedID().getName(),\n+                                               session.getRemoteAddress(),\n+                                               session.getVirtualHost().getName(),\n+                                               channel.getChannelId())\n+                    + \"] \";\n+    }\n+}\n+", "filename": "broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPChannelActor.java"}, {"additions": 115, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPConnectionActor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPConnectionActor.java", "sha": "432b1d820306de05e120e6d8ed60052286d9aad5", "changes": 115, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPConnectionActor.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,115 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.subjects.ConnectionLogSubject;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+\n+import java.text.MessageFormat;\n+\n+/**\n+ * An AMQPConnectionActor represtents a connectionthrough the AMQP port.\n+ * <p/>\n+ * This is responsible for correctly formatting the LogActor String in the log\n+ * <p/>\n+ * [ con:1(user@127.0.0.1/) ]\n+ * <p/>\n+ * To do this it requires access to the IO Layers.\n+ */\n+public class AMQPConnectionActor extends AbstractActor\n+{\n+    /**\n+     * 0 - Connection ID\n+     * 1 - Remote Address\n+     */\n+    public static String SOCKET_FORMAT = \"con:{0}({1})\";\n+\n+    /**\n+     * LOG FORMAT for the ConnectionLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Connection ID\n+     * 1 - User ID\n+     * 2 - IP\n+     */\n+    public static final String USER_FORMAT = \"con:{0}({1}@{2})\";\n+\n+    public AMQPConnectionActor(AMQProtocolSession session, RootMessageLogger rootLogger)\n+    {\n+        super(rootLogger);\n+\n+        _logString = \"[\" + MessageFormat.format(SOCKET_FORMAT,\n+                                                session.getSessionID(),\n+                                                session.getRemoteAddress())\n+\n+                     + \"] \";\n+    }\n+\n+    /**\n+     * Call when the connection has been authorized so that the logString\n+     * can be updated with the new user identity.\n+     *\n+     * @param session the authorized session\n+     */\n+    public void connectionAuthorized(AMQProtocolSession session)\n+    {\n+        _logString = \"[\" + MessageFormat.format(USER_FORMAT,\n+                                                session.getSessionID(),\n+                                                session.getAuthorizedID().getName(),\n+                                                session.getRemoteAddress())\n+                     + \"] \";\n+\n+    }\n+\n+    /**\n+     * Called once the user has been authenticated and they are now selecting\n+     * the virtual host they wish to use.\n+     *\n+     * @param session the session that now has a virtualhost associated with it.\n+     */\n+    public void virtualHostSelected(AMQProtocolSession session)\n+    {\n+\n+        /**\n+         * LOG FORMAT used by the AMQPConnectorActor follows\n+         * ConnectionLogSubject.CONNECTION_FORMAT :\n+         * con:{0}({1}@{2}/{3})\n+         *\n+         * Uses a MessageFormat call to insert the requried values according to\n+         * these indicies:\n+         *\n+         * 0 - Connection ID\n+         * 1 - User ID\n+         * 2 - IP\n+         * 3 - Virtualhost\n+         */\n+        _logString = \"[\" + MessageFormat.format(ConnectionLogSubject.CONNECTION_FORMAT,\n+                                                session.getSessionID(),\n+                                                session.getAuthorizedID().getName(),\n+                                                session.getRemoteAddress(),\n+                                                session.getVirtualHost().getName())\n+                     + \"] \";\n+\n+    }\n+}\n+", "filename": "broker/src/main/java/org/apache/qpid/server/logging/actors/AMQPConnectionActor.java"}, {"additions": 45, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/AbstractActor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/AbstractActor.java", "sha": "95f2dc9ff6d4a92394d35d445cb7186e7de060cc", "changes": 45, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/actors/AbstractActor.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,45 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.LogActor;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+\n+public abstract class AbstractActor implements LogActor\n+{\n+    protected String _logString;\n+    protected RootMessageLogger _rootLogger;\n+\n+    public AbstractActor(RootMessageLogger rootLogger)\n+    {\n+        _rootLogger = rootLogger;\n+    }\n+\n+    public void message(LogSubject subject, LogMessage message)\n+    {\n+        if (_rootLogger.isMessageEnabled(this, subject))\n+        {\n+            _rootLogger.rawMessage(_logString + String.valueOf(subject) + message);\n+        }\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/actors/AbstractActor.java"}, {"additions": 54, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/CurrentActor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/CurrentActor.java", "sha": "221e57eebb99392a6ede38c022083f0afbb6bbbc", "changes": 54, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/actors/CurrentActor.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.LogActor;\n+\n+import java.util.LinkedList;\n+import java.util.Deque;\n+\n+public class CurrentActor\n+{\n+    private static final ThreadLocal<Deque<LogActor>> _currentActor = new ThreadLocal<Deque<LogActor>>()\n+    {\n+        protected Deque<LogActor> initialValue()\n+        {\n+            return new LinkedList<LogActor>();\n+        }\n+    };\n+\n+    public static void set(LogActor actor)\n+    {\n+        Deque<LogActor> stack = _currentActor.get();\n+        stack.addFirst(actor);\n+    }\n+\n+    public static void remove()\n+    {\n+        Deque<LogActor> stack = _currentActor.get();\n+        stack.remove();\n+    }\n+\n+    public static LogActor get()\n+    {\n+        return _currentActor.get().peek();\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/actors/CurrentActor.java"}, {"additions": 57, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/ManagementActor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/actors/ManagementActor.java", "sha": "58d55a13bb64020ca5997fb1c69922a315020b61", "changes": 57, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/actors/ManagementActor.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,57 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+\n+import java.text.MessageFormat;\n+import java.security.Principal;\n+\n+public class ManagementActor extends AbstractActor\n+{\n+\n+    /**\n+     * LOG FORMAT for the ManagementActor,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Connection ID\n+     * 1 - User ID\n+     * 2 - IP\n+     */\n+    public static final String MANAGEMENT_FORMAT = \"mng:{0}({1}@{2})\";\n+\n+    /**\n+     * //todo Correct interface to provide connection details\n+     * @param user\n+     * @param rootLogger The RootLogger to use for this Actor\n+     */\n+    public ManagementActor(Principal user, RootMessageLogger rootLogger)\n+    {\n+        super(rootLogger);\n+\n+        _logString = \"[\"+ MessageFormat.format(MANAGEMENT_FORMAT,\n+                                          \"<MNG:ConnectionID>\",\n+                                          user.getName(),\n+                                          \"<MNG:RemoteAddress>\")\n+                     + \"] \";\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/actors/ManagementActor.java"}, {"additions": 55, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLogger.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLogger.java", "sha": "377415562676ebdcecfc47a9e4e12493285eeecf", "changes": 55, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLogger.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,55 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging.rawloggers;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.apache.qpid.server.logging.RawMessageLogger;\n+\n+public class Log4jMessageLogger implements RawMessageLogger\n+{\n+    public static final String DEFAULT_LEVEL = \"INFO\";\n+    public static final String DEFAULT_LOGGER = \"qpid.message\";\n+    private Level _level;\n+    private Logger _rawMessageLogger;\n+\n+    public Log4jMessageLogger()\n+    {\n+        this(DEFAULT_LEVEL, DEFAULT_LOGGER);\n+    }\n+\n+    public Log4jMessageLogger(String level, String logger)\n+    {\n+        _level = Level.toLevel(level);\n+\n+        _rawMessageLogger = Logger.getLogger(logger);\n+    }\n+\n+    public void rawMessage(String message)\n+    {\n+        rawMessage(message, null);\n+    }\n+\n+    public void rawMessage(String message, Throwable throwable)\n+    {\n+        _rawMessageLogger.log(_level, message, throwable);\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLogger.java"}, {"additions": 64, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/AbstractLogSubject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/AbstractLogSubject.java", "sha": "4fb5bdcc934ecaf48906bcc9bfcf0ae338e49870", "changes": 64, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/subjects/AbstractLogSubject.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,64 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.logging.LogSubject;\n+\n+import java.text.MessageFormat;\n+\n+/**\n+ * The LogSubjects all have a similar requriement to format their output and\n+ * provide the String value.\n+ *\n+ * This Abstract LogSubject provides this basic functionality, allowing the\n+ * actual LogSubjects to provide their formating and data.\n+ */\n+public abstract class AbstractLogSubject implements LogSubject\n+{\n+    /**\n+     * The logString that will be returned via toString\n+     */\n+    protected String logString;\n+\n+    /**\n+     * Set the toString logging of this LogSubject. Based on a format provided\n+     * by format and the var args.\n+     * @param format The Message to format\n+     * @param args The values to put in to the message.\n+     */\n+    protected void setLogStringWithFormat(String format, Object... args)\n+    {\n+        logString = \"[\" + MessageFormat.format(format, args) + \"] \";\n+    }\n+\n+    /**\n+     * ToString is how the Logging infrastructure will get the text for this\n+     * LogSubject\n+     *\n+     * @return String representing this LogSubject\n+     */\n+    @Override\n+    public String toString()\n+    {\n+        return logString;\n+    }\n+\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/subjects/AbstractLogSubject.java"}, {"additions": 62, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/BindingLogSubject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/BindingLogSubject.java", "sha": "fd171fea5a6817a6d3f32889165a056329c4eb42", "changes": 62, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/subjects/BindingLogSubject.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,62 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.queue.AMQQueue;\n+\n+public class BindingLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the ChannelLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Virtualhost Name\n+     * 1 - Exchange Type\n+     * 2 - Exchange Name\n+     * 3 - Queue Name\n+     * 4 - Binding RoutingKey\n+     */\n+    protected static String BINDING_FORMAT = \"vh(/{0})/ex({1}/{2})/qu({3})/rk({4})\";\n+\n+    /**\n+     * Create a BindingLogSubject that Logs in the following format.\n+     *\n+     * [ vh(/)/ex(amq.direct)/qu(testQueue)/bd(testQueue) ]\n+     *\n+     * @param routingKey\n+     * @param exchange\n+     * @param queue\n+     */\n+    public BindingLogSubject(AMQShortString routingKey, Exchange exchange,\n+                             AMQQueue queue)\n+    {\n+        setLogStringWithFormat(BINDING_FORMAT, queue.getVirtualHost().getName(),\n+                               exchange.getType(),\n+                               exchange.getName(),\n+                               queue.getName(),\n+                               routingKey);\n+    }\n+\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/subjects/BindingLogSubject.java"}, {"additions": 54, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/ChannelLogSubject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/ChannelLogSubject.java", "sha": "1b22de6d015ff24a39263b8363832e896abbfaee", "changes": 54, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/subjects/ChannelLogSubject.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+\n+public class ChannelLogSubject extends AbstractLogSubject\n+{\n+    /**\n+     * LOG FORMAT for the ChannelLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Connection ID\n+     * 1 - User ID\n+     * 2 - IP\n+     * 3 - Virtualhost\n+     * 4 - Channel ID\n+     */\n+    public static String CHANNEL_FORMAT = ConnectionLogSubject.CONNECTION_FORMAT\n+                                             + \"/ch:{4}\";\n+\n+    public ChannelLogSubject(AMQChannel channel)\n+    {\n+        AMQProtocolSession session = channel.getProtocolSession();\n+\n+        // Provide the value for the 4th replacement.\n+        setLogStringWithFormat(CHANNEL_FORMAT,\n+              session.getSessionID(),\n+              session.getAuthorizedID().getName(),\n+              session.getRemoteAddress(),\n+              session.getVirtualHost().getName(),\n+              channel.getChannelId());\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/subjects/ChannelLogSubject.java"}, {"additions": 48, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubject.java", "sha": "e07dbcda2366ffec0de48d98d5d0a72103127d9c", "changes": 48, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubject.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,48 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+\n+/** The Connection LogSubject */\n+public class ConnectionLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the ConnectionLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Connection ID\n+     * 1 - User ID\n+     * 2 - IP\n+     * 3 - Virtualhost\n+     */\n+    public static final String CONNECTION_FORMAT = \"con:{0}({1}@{2}/{3})\";\n+\n+    public ConnectionLogSubject(AMQProtocolSession session)\n+    {\n+        setLogStringWithFormat(CONNECTION_FORMAT, session.getSessionID(),\n+               session.getAuthorizedID().getName(),\n+               session.getRemoteAddress(),\n+               session.getVirtualHost().getName());\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubject.java"}, {"additions": 46, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubject.java", "sha": "21e5f5e4ce9884fb2156741994db28275ed1ed95", "changes": 46, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubject.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,46 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class ExchangeLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the ExchangeLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Virtualhost Name\n+     * 1 - Exchange Type\n+     * 2 - Exchange Name\n+     */\n+    protected static String BINDING_FORMAT = \"vh(/{0})/ex({1}/{2})\";\n+\n+    /** Create an ExchangeLogSubject that Logs in the following format. */\n+    public ExchangeLogSubject(Exchange exchange, VirtualHost vhost)\n+    {\n+        setLogStringWithFormat(BINDING_FORMAT, vhost.getName(),\n+                               exchange.getType(), exchange.getName());\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubject.java"}, {"additions": 45, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/QueueLogSubject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/QueueLogSubject.java", "sha": "89f31ef477abb98df0eb11c51c0a7fd22f2adbc6", "changes": 45, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/subjects/QueueLogSubject.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,45 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.queue.AMQQueue;\n+\n+public class QueueLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the ExchangeLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Virtualhost name\n+     * 1 - queue name\n+     */\n+    protected static String BINDING_FORMAT = \"vh(/{0})/qu({1})\";\n+\n+    /** Create an QueueLogSubject that Logs in the following format. */\n+    public QueueLogSubject(AMQQueue queue)\n+    {\n+        setLogStringWithFormat(BINDING_FORMAT,\n+                               queue.getVirtualHost().getName(),\n+                               queue.getName());\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/subjects/QueueLogSubject.java"}, {"additions": 49, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubject.java", "sha": "b68ef2e9a905f0f953f23766eb0b1fe56650784a", "changes": 49, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubject.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,49 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.subscription.Subscription;\n+\n+public class SubscriptionLogSubject extends AbstractLogSubject\n+{\n+\n+    /**\n+     * LOG FORMAT for the SubscriptionLogSubject,\n+     * Uses a MessageFormat call to insert the requried values according to\n+     * these indicies:\n+     *\n+     * 0 - Subscription ID\n+     * 1 - queue name\n+     */\n+    protected static String BINDING_FORMAT = \"sub:{0}(qu({1}))\";\n+\n+    /**\n+     * Create an QueueLogSubject that Logs in the following format.\n+     *\n+     * @param subscription\n+     */\n+    public SubscriptionLogSubject(Subscription subscription)\n+    {\n+\n+        setLogStringWithFormat(BINDING_FORMAT, subscription.getSubscriptionID(),\n+                               subscription.getQueue().getName());\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubject.java"}, {"additions": 48, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java", "sha": "e46a52f3bfc910d21327fd42c98071106bbb9686", "changes": 54, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -21,26 +21,39 @@\n package org.apache.qpid.server.protocol;\n \n import org.apache.log4j.Logger;\n-\n+import org.apache.mina.common.CloseFuture;\n import org.apache.mina.common.IdleStatus;\n import org.apache.mina.common.IoServiceConfig;\n import org.apache.mina.common.IoSession;\n-import org.apache.mina.common.CloseFuture;\n import org.apache.mina.transport.vmpipe.VmPipeAddress;\n-\n import org.apache.qpid.AMQChannelException;\n import org.apache.qpid.AMQConnectionException;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.codec.AMQCodecFactory;\n import org.apache.qpid.codec.AMQDecoder;\n import org.apache.qpid.common.ClientProperties;\n-import org.apache.qpid.framing.*;\n+import org.apache.qpid.framing.AMQBody;\n+import org.apache.qpid.framing.AMQDataBlock;\n+import org.apache.qpid.framing.AMQFrame;\n+import org.apache.qpid.framing.AMQMethodBody;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.ChannelCloseOkBody;\n+import org.apache.qpid.framing.ContentBody;\n+import org.apache.qpid.framing.ContentHeaderBody;\n+import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.framing.HeartbeatBody;\n+import org.apache.qpid.framing.MethodDispatcher;\n+import org.apache.qpid.framing.MethodRegistry;\n+import org.apache.qpid.framing.ProtocolInitiation;\n+import org.apache.qpid.framing.ProtocolVersion;\n import org.apache.qpid.pool.ReadWriteThreadModel;\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.protocol.AMQMethodEvent;\n import org.apache.qpid.protocol.AMQMethodListener;\n import org.apache.qpid.server.AMQChannel;\n import org.apache.qpid.server.handler.ServerMethodDispatcherImpl;\n+import org.apache.qpid.server.logging.actors.AMQPConnectionActor;\n+import org.apache.qpid.server.logging.actors.CurrentActor;\n import org.apache.qpid.server.management.Managable;\n import org.apache.qpid.server.management.ManagedObject;\n import org.apache.qpid.server.output.ProtocolOutputConverter;\n@@ -54,7 +67,6 @@\n \n import javax.management.JMException;\n import javax.security.sasl.SaslServer;\n-\n import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n import java.security.Principal;\n@@ -64,13 +76,16 @@\n import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.atomic.AtomicLong;\n \n public class AMQMinaProtocolSession implements AMQProtocolSession, Managable\n {\n     private static final Logger _logger = Logger.getLogger(AMQProtocolSession.class);\n \n     private static final String CLIENT_PROPERTIES_INSTANCE = ClientProperties.instance.toString();\n \n+    private static final AtomicLong idGenerator = new AtomicLong(0);\n+\n     // to save boxing the channelId and looking up in a map... cache in an array the low numbered\n     // channels.  This value must be of the form 2^x - 1.\n     private static final int CHANNEL_CACHE_SIZE = 0xff;\n@@ -120,6 +135,11 @@\n     private static final long LAST_WRITE_FUTURE_JOIN_TIMEOUT = 60000L;\n     private org.apache.mina.common.WriteFuture _lastWriteFuture;\n \n+    // Create a simple ID that increments for ever new Session\n+    private final long _sessionID = idGenerator.getAndIncrement();\n+\n+    private AMQPConnectionActor _actor;\n+\n     public ManagedObject getManagedObject()\n     {\n         return _managedObject;\n@@ -134,6 +154,8 @@ public AMQMinaProtocolSession(IoSession session, VirtualHostRegistry virtualHost\n \n         _codecFactory = codecFactory;\n \n+        _actor = new AMQPConnectionActor(this, virtualHostRegistry.getApplicationRegistry().getRootMessageLogger());\n+\n         try\n         {\n             IoServiceConfig config = session.getServiceConfig();\n@@ -158,6 +180,7 @@ public AMQMinaProtocolSession(IoSession session, VirtualHostRegistry virtualHost\n \n         _codecFactory = codecFactory;\n \n+        _actor = new AMQPConnectionActor(this, virtualHostRegistry.getApplicationRegistry().getRootMessageLogger());\n     }\n \n     private AMQProtocolSessionMBean createMBean() throws AMQException\n@@ -183,6 +206,11 @@ public static AMQProtocolSession getAMQProtocolSession(IoSession minaProtocolSes\n         return (AMQProtocolSession) minaProtocolSession.getAttachment();\n     }\n \n+    public long getSessionID()\n+    {\n+        return _sessionID;\n+    }\n+\n     public void dataBlockReceived(AMQDataBlock message) throws Exception\n     {\n         _lastReceived = message;\n@@ -235,6 +263,7 @@ private void frameReceived(AMQFrame frame) throws AMQException\n             }\n         }\n \n+        CurrentActor.set(_actor);\n         try\n         {\n             body.handle(channelId, this);\n@@ -244,7 +273,10 @@ private void frameReceived(AMQFrame frame) throws AMQException\n             closeChannel(channelId);\n             throw e;\n         }\n-\n+        finally\n+        {\n+            CurrentActor.remove();\n+        }\n     }\n \n     private void protocolInitiationReceived(ProtocolInitiation pi)\n@@ -796,6 +828,8 @@ public void setVirtualHost(VirtualHost virtualHost) throws AMQException\n     {\n         _virtualHost = virtualHost;\n \n+        _actor.virtualHostSelected(this);\n+\n         _virtualHost.getConnectionRegistry().registerConnection(this);\n \n         _managedObject = createMBean();\n@@ -820,13 +854,21 @@ public ProtocolOutputConverter getProtocolOutputConverter()\n     public void setAuthorizedID(Principal authorizedID)\n     {\n         _authorizedID = authorizedID;\n+\n+        // Let the actor know that this connection is now Authorized\n+        _actor.connectionAuthorized(this);\n     }\n \n     public Principal getAuthorizedID()\n     {\n         return _authorizedID;\n     }\n \n+    public SocketAddress getRemoteAddress()\n+    {\n+        return _minaProtocolSession.getRemoteAddress();\n+    }\n+\n     public MethodRegistry getMethodRegistry()\n     {\n         return MethodRegistry.getMethodRegistry(getProtocolVersion());", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java", "sha": "f721730d9c71080a26d028029e2d444660e1b9fd", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -36,6 +36,7 @@\n \n public interface AMQProtocolSession extends AMQVersionAwareProtocolSession\n {\n+    long getSessionID();\n \n     public static final class ProtocolSessionIdentifier\n     {\n@@ -198,6 +199,8 @@ public Object getSessionInstance()\n     /** @return a Principal that was used to authorized this session */\n     Principal getAuthorizedID();\n \n+    public java.net.SocketAddress getRemoteAddress();\n+\n     public MethodRegistry getMethodRegistry();\n \n     public MethodDispatcher getMethodDispatcher();", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java", "sha": "8c6650830792b0069d2bdac15bf81164208f72cb", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -202,13 +202,23 @@ public VirtualHost getVirtualHost()\n \n     public void bind(Exchange exchange, AMQShortString routingKey, FieldTable arguments) throws AMQException\n     {\n+\n         exchange.registerQueue(routingKey, this, arguments);\n         if (isDurable() && exchange.isDurable())\n         {\n             _virtualHost.getMessageStore().bindQueue(exchange, routingKey, this, arguments);\n         }\n \n         _bindings.addBinding(routingKey, arguments, exchange);\n+//        ExchangeBinding binding = new ExchangeBinding(routingKey, exchange, arguments);\n+\n+        //fixme MR logging in progress\n+//        _bindings.addBinding(binding);\n+//\n+//        if (_logger.isMessageEnabled(binding))\n+//        {\n+//            _logger.message(binding, \"QM-1001 : Created Binding\");\n+//        }\n     }\n \n     public void unBind(Exchange exchange, AMQShortString routingKey, FieldTable arguments) throws AMQException", "filename": "broker/src/main/java/org/apache/qpid/server/queue/SimpleAMQQueue.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java", "sha": "b58b849133b1d5bd31c5041ec53d83d2019a2fb6", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -35,6 +35,7 @@\n import org.apache.qpid.server.security.auth.manager.AuthenticationManager;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n \n /**\n  * An abstract application registry that provides access to configuration information and handles the\n@@ -70,6 +71,8 @@\n \n     protected PluginManager _pluginManager;\n \n+    protected RootMessageLogger _rootMessageLogger;\n+\n     static\n     {\n         Runtime.getRuntime().addShutdownHook(new Thread(new ShutdownService()));\n@@ -287,4 +290,9 @@ public PluginManager getPluginManager()\n         return _pluginManager;\n     }\n \n+    public RootMessageLogger getRootMessageLogger()\n+    {\n+        return _rootMessageLogger;\n+    }\n+    \n }", "filename": "broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java", "sha": "31a85b878aea9040a8567cfc7ef7a14bd416e98b", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -33,6 +33,8 @@\n import org.apache.qpid.server.security.auth.manager.PrincipalDatabaseAuthenticationManager;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.rawloggers.Log4jMessageLogger;\n \n public class ConfigurationFileApplicationRegistry extends ApplicationRegistry\n {\n@@ -44,9 +46,12 @@ public ConfigurationFileApplicationRegistry(File configurationURL) throws Config\n \n     public void initialise() throws Exception\n     {\n+        _rootMessageLogger = new RootMessageLoggerImpl(_configuration, \n+                                                       new Log4jMessageLogger());\n+\n         initialiseManagedObjectRegistry();\n \n-        _virtualHostRegistry = new VirtualHostRegistry();\n+        _virtualHostRegistry = new VirtualHostRegistry(this);\n \n         _pluginManager = new PluginManager(_configuration.getPluginDirectory());\n ", "filename": "broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/registry/IApplicationRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/registry/IApplicationRegistry.java", "sha": "7d17639f2231784f2362644db5dae3e350ed7eb6", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/registry/IApplicationRegistry.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -33,6 +33,7 @@\n import org.apache.qpid.server.security.access.ACLManager;\n import org.apache.qpid.server.security.access.ACLPlugin;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n import org.apache.mina.common.IoAcceptor;\n \n public interface IApplicationRegistry\n@@ -69,6 +70,8 @@\n \n     PluginManager getPluginManager();\n \n+    RootMessageLogger getRootMessageLogger();\n+\n     /**\n      * Register any acceptors for this registry\n      * @param bindAddress The address that the acceptor has been bound with", "filename": "broker/src/main/java/org/apache/qpid/server/registry/IApplicationRegistry.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java", "sha": "19eabce9ff66601c16cb0fe3adb00150ff7acfc0", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -52,6 +52,8 @@\n \n     AMQShortString getConsumerTag();\n \n+    long getSubscriptionID();\n+\n     boolean isSuspended();\n \n     boolean hasInterest(QueueEntry msg);", "filename": "broker/src/main/java/org/apache/qpid/server/subscription/Subscription.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java", "sha": "51da884d1eefb157680417f7543d61e2cee869d2", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -22,6 +22,7 @@\n \n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n \n@@ -66,6 +67,11 @@ public void stateChange(Subscription sub, State oldState, State newState)\n     private QueueEntry.SubscriptionAcquiredState _owningState = new QueueEntry.SubscriptionAcquiredState(this);\n     private final Lock _stateChangeLock;\n \n+    private static final AtomicLong idGenerator = new AtomicLong(0);\n+    // Create a simple ID that increments for ever new Subscription\n+    private final long _subscriptionID = idGenerator.getAndIncrement();\n+\n+\n     static final class BrowserSubscription extends SubscriptionImpl\n     {\n         public BrowserSubscription(AMQChannel channel, AMQProtocolSession protocolSession,\n@@ -526,6 +532,11 @@ public AMQShortString getConsumerTag()\n         return _consumerTag;\n     }\n \n+    public long getSubscriptionID()\n+    {\n+        return _subscriptionID;\n+    }\n+\n     public AMQProtocolSession getProtocolSession()\n     {\n         return _channel.getProtocolSession();", "filename": "broker/src/main/java/org/apache/qpid/server/subscription/SubscriptionImpl.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java", "sha": "9ef1e029d3b49c30be041a378f092b788e275982", "changes": 21, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -20,17 +20,12 @@\n  */\n package org.apache.qpid.server.util;\n \n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Properties;\n-\n-import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.commons.configuration.MapConfiguration;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.qpid.server.configuration.ServerConfiguration;\n import org.apache.qpid.server.configuration.VirtualHostConfiguration;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.rawloggers.Log4jMessageLogger;\n import org.apache.qpid.server.management.NoopManagedObjectRegistry;\n import org.apache.qpid.server.plugins.PluginManager;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n@@ -41,6 +36,10 @@\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n \n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Properties;\n+\n public class NullApplicationRegistry extends ApplicationRegistry\n {\n     public NullApplicationRegistry() throws ConfigurationException\n@@ -51,9 +50,11 @@ public NullApplicationRegistry() throws ConfigurationException\n     public void initialise() throws Exception\n     {\n         _logger.info(\"Initialising NullApplicationRegistry\");\n-        \n+\n+        _rootMessageLogger = new RootMessageLoggerImpl(_configuration, new Log4jMessageLogger());\n+\n         _configuration.setHousekeepingExpiredMessageCheckPeriod(200);\n-        \n+\n         Properties users = new Properties();\n \n         users.put(\"guest\", \"guest\");\n@@ -65,7 +66,7 @@ public void initialise() throws Exception\n         _authenticationManager = new PrincipalDatabaseAuthenticationManager(null, null);\n \n         _managedObjectRegistry = new NoopManagedObjectRegistry();\n-        _virtualHostRegistry = new VirtualHostRegistry();\n+        _virtualHostRegistry = new VirtualHostRegistry(this);\n         PropertiesConfiguration vhostProps = new PropertiesConfiguration();\n         VirtualHostConfiguration hostConfig = new VirtualHostConfiguration(\"test\", vhostProps);\n         VirtualHost dummyHost = new VirtualHost(hostConfig);", "filename": "broker/src/main/java/org/apache/qpid/server/util/NullApplicationRegistry.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostRegistry.java", "sha": "5543adbeb5de414229507e5e10ebb1140692d226", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostRegistry.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -20,6 +20,9 @@\n  */\r\n package org.apache.qpid.server.virtualhost;\r\n \r\n+import org.apache.qpid.server.registry.ApplicationRegistry;\r\n+import org.apache.qpid.server.registry.ConfigurationFileApplicationRegistry;\r\n+\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Map;\r\n@@ -32,6 +35,12 @@\n \r\n \r\n     private String _defaultVirtualHostName;\r\n+    private ApplicationRegistry _applicationRegistry;\r\n+\r\n+    public VirtualHostRegistry(ApplicationRegistry applicationRegistry)\r\n+    {\r\n+        _applicationRegistry = applicationRegistry;\r\n+    }\r\n \r\n     public synchronized void registerVirtualHost(VirtualHost host) throws Exception\r\n     {\r\n@@ -67,4 +76,9 @@ public void setDefaultVirtualHostName(String defaultVirtualHostName)\n     {\r\n         return new ArrayList<VirtualHost>(_registry.values());\r\n     }\r\n+\r\n+    public ApplicationRegistry getApplicationRegistry()\r\n+    {\r\n+        return _applicationRegistry;\r\n+    }\r\n }\r", "filename": "broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHostRegistry.java"}, {"additions": 86, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/RootMessageLoggerImplTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/RootMessageLoggerImplTest.java", "sha": "012a59068786403ff5dbffa22410dac46739fb39", "changes": 86, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/RootMessageLoggerImplTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,86 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+\n+import java.util.List;\n+\n+public class RootMessageLoggerImplTest extends TestCase\n+{\n+\n+    RootMessageLogger _rootLogger;\n+    UnitTestMessageLogger _rawLogger;\n+\n+    public void setUp() throws ConfigurationException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+\n+        _rootLogger = new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+    }\n+\n+    public void tearDown()\n+    {\n+        _rawLogger.clearLogMessages();\n+    }\n+\n+    public void testLog()\n+    {\n+        String message = \"test logging\";\n+\n+        _rootLogger.rawMessage(message);\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 1, logs.size());\n+\n+        assertTrue(logs.get(0).toString().contains(message));\n+    }\n+\n+    public void testLogWithThrowable()\n+    {\n+        String message = \"test logging\";\n+        Exception exception = new Exception(\"Test\");\n+\n+        _rootLogger.rawMessage(message, exception);\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 2, logs.size());\n+\n+        String loggedMessage = (String) logs.get(0);\n+        assertTrue(\"Message not found in log:\" + loggedMessage,\n+                   loggedMessage.contains(message));\n+\n+        Exception fromLog = (Exception) logs.get(1);\n+        assertEquals(exception.getMessage(), fromLog.getMessage());\n+    }\n+\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/RootMessageLoggerImplTest.java"}, {"additions": 73, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/StatusUpdateConfigurationTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/StatusUpdateConfigurationTest.java", "sha": "9a3c18bf9999d97043c448dbd649c2145deede71", "changes": 73, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/StatusUpdateConfigurationTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,73 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging;\n+\n+import junit.framework.TestCase;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Set of test to validate the effects of the changes made to the\n+ * ServerConfiguration to enable the enabling/disabling of status update\n+ * messages.\n+ *\n+ * The default is to on.\n+ */\n+public class StatusUpdateConfigurationTest extends TestCase\n+{\n+\n+    /**\n+     * Validate that with no configuration the status updates will default to\n+     * enabled.\n+     * @throws org.apache.commons.configuration.ConfigurationException\n+     * - if there was a problem in creating the configuratino\n+     */\n+    public void testEnabled() throws ConfigurationException\n+    {\n+\n+        ServerConfiguration serverConfig = new ServerConfiguration(\n+                new PropertiesConfiguration());\n+\n+        assertTrue(\"Status Updates not enabled as expected.\",\n+                   serverConfig.getStatusUpdates());\n+    }\n+\n+\n+    /**\n+     * Validate that through the config it is possible to disable status updates\n+     * @throws org.apache.commons.configuration.ConfigurationException\n+     * - if there was a problem in creating the configuratino\n+     */\n+    public void testUpdateControls() throws ConfigurationException\n+    {\n+\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        config.setProperty(\"status-updates\", \"off\");\n+\n+\n+        assertFalse(\"Status Updates should not be enabled.\",\n+                   serverConfig.getStatusUpdates());\n+    }\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/StatusUpdateConfigurationTest.java"}, {"additions": 206, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPChannelActorTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPChannelActorTest.java", "sha": "298e3bc22cb3e8a1844dc2b8f49c777e4179c653", "changes": 206, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPChannelActorTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,206 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.logging.actors.AMQPConnectionActor;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogActor;\n+import org.apache.qpid.server.AMQChannel;\n+\n+import java.util.List;\n+\n+/**\n+ * Test : AMQPConnectionActorTest\n+ * Validate the AMQPConnectionActor class.\n+ *\n+ * The test creates a new AMQPActor and then logs a message using it.\n+ *\n+ * The test then verifies that the logged message was the only one created and\n+ * that the message contains the required message.\n+ */\n+public class AMQPChannelActorTest extends TestCase\n+{\n+\n+    LogActor _amqpActor;\n+    UnitTestMessageLogger _rawLogger;\n+\n+    public void setUp() throws ConfigurationException, AMQException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+\n+        AMQChannel channel = new AMQChannel(session, 1, session.getVirtualHost().getMessageStore());\n+\n+        _amqpActor = new AMQPChannelActor(channel, rootLogger);\n+\n+    }\n+\n+    public void tearDown()\n+    {\n+        _rawLogger.clearLogMessages();\n+    }\n+\n+    /**\n+     * Test that when logging on behalf of the channel\n+     * The test sends a message then verifies that it entered the logs.\n+     *\n+     * The log message should be fully repalaced (no '{n}' values) and should\n+     * contain the channel id ('/ch:1') identification.\n+     */\n+    public void testChannel()\n+    {\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 1, logs.size());\n+\n+        // Verify that the logged message is present in the output\n+        assertTrue(\"Message was not found in log message:\" + logs.get(0),\n+                   logs.get(0).toString().contains(message));\n+\n+        // Verify that the message has the correct type\n+        assertTrue(\"Message contains the [con: prefix\",\n+                   logs.get(0).toString().contains(\"[con:\"));\n+        \n+\n+        // Verify that all the values were presented to the MessageFormatter\n+        // so we will not end up with '{n}' entries in the log.\n+        assertFalse(\"Verify that the string does not contain any '{'.\" + logs.get(0),\n+                    logs.get(0).toString().contains(\"{\"));\n+\n+        // Verify that the logged message contains the 'ch:1' marker\n+        assertTrue(\"Message was not logged as part of channel 1\" + logs.get(0),\n+                   logs.get(0).toString().contains(\"/ch:1\"));\n+\n+    }\n+\n+    public void testChannelLoggingOff() throws ConfigurationException, AMQException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        config.addProperty(\"status-updates\", \"OFF\");\n+\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+\n+        AMQChannel channel = new AMQChannel(session, 1, session.getVirtualHost().getMessageStore());\n+\n+        _amqpActor = new AMQPChannelActor(channel, rootLogger);\n+\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 0, logs.size());\n+\n+    }\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPChannelActorTest.java"}, {"additions": 202, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPConnectionActorTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPConnectionActorTest.java", "sha": "c220865864453979ed5a0a4427fc7b277881e17f", "changes": 202, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPConnectionActorTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,202 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.logging.actors.AMQPConnectionActor;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogActor;\n+\n+import java.util.List;\n+\n+/**\n+ * Test : AMQPConnectionActorTest\n+ * Validate the AMQPConnectionActor class.\n+ *\n+ * The test creates a new AMQPActor and then logs a message using it.\n+ *\n+ * The test then verifies that the logged message was the only one created and\n+ * that the message contains the required message.\n+ */\n+public class AMQPConnectionActorTest extends TestCase\n+{\n+\n+    LogActor _amqpActor;\n+    UnitTestMessageLogger _rawLogger;\n+\n+    public void setUp() throws ConfigurationException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+        _amqpActor = new AMQPConnectionActor(session, rootLogger);\n+    }\n+\n+    public void tearDown()\n+    {\n+        _rawLogger.clearLogMessages();\n+    }\n+\n+    /**\n+     * Test the AMQPActor logging as a Connection level.\n+     *\n+     * The test sends a message then verifies that it entered the logs.\n+     *\n+     * The log message should be fully repalaced (no '{n}' values) and should\n+     * not contain any channel identification.\n+     *\n+     */\n+    public void testConnection()\n+    {\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 1, logs.size());\n+\n+        // Verify that the logged message is present in the output\n+        assertTrue(\"Message was not found in log message\",\n+                   logs.get(0).toString().contains(message));\n+\n+        // Verify that the message has the correct type\n+        assertTrue(\"Message contains the [con: prefix\",\n+                   logs.get(0).toString().contains(\"[con:\"));        \n+\n+        // Verify that all the values were presented to the MessageFormatter\n+        // so we will not end up with '{n}' entries in the log.\n+        assertFalse(\"Verify that the string does not contain any '{'.\",\n+                    logs.get(0).toString().contains(\"{\"));\n+\n+        // Verify that the logged message does not contains the 'ch:' marker\n+        assertFalse(\"Message was logged with a channel identifier.\" + logs.get(0),\n+                   logs.get(0).toString().contains(\"/ch:\"));\n+    }\n+\n+\n+\n+    public void testConnectionLoggingOff() throws ConfigurationException, AMQException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        config.addProperty(\"status-updates\", \"OFF\");\n+\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+\n+        _amqpActor = new AMQPConnectionActor(session, rootLogger);\n+\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 0, logs.size());\n+\n+    }\n+\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/actors/AMQPConnectionActorTest.java"}, {"additions": 262, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/CurrentActorTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/CurrentActorTest.java", "sha": "c1cc3253a8a0d6ec77e45053f5ee42276e609dee", "changes": 262, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/actors/CurrentActorTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,262 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import junit.framework.TestCase;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+/**\n+ * Test : CurrentActorTest\n+ * Summary:\n+ * Validate ThreadLocal operation.\n+ *\n+ * Test creates THREADS number of threads which all then execute the same test\n+ * together ( as close as looping Thread.start() will allow).\n+ *\n+ * Test:\n+ * Test sets the CurrentActor then proceeds to retrieve the value and use it.\n+ *\n+ * The test also validates that it is the same LogActor that this thread set.\n+ *\n+ * Finally the LogActor is removed and tested to make sure that it was\n+ * successfully removed.\n+ *\n+ * By having a higher number of threads than would normally be used in the\n+ * Poolling filter we aim to catch the race condition where a ThreadLocal remove\n+ * is called before one or more threads call get(). This way we can ensure that\n+ * the remove does not affect more than the Thread it was called in.\n+ */\n+public class CurrentActorTest extends TestCase\n+{\n+    //Set this to be a reasonably large number\n+    int THREADS = 10;\n+\n+    // Record any exceptions that are thrown by the threads\n+    final Exception[] _errors = new Exception[THREADS];\n+\n+    // Create a single session for this test.\n+    AMQProtocolSession session;\n+\n+    public void setUp()\n+    {\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+    }\n+\n+    public void testFIFO() throws AMQException\n+    {\n+        // Create a new actor using retrieving the rootMessageLogger from\n+        // the default ApplicationRegistry.\n+        //fixme reminder that we need a better approach for broker testing.\n+        AMQPConnectionActor connectionActor = new AMQPConnectionActor(session,\n+                                                                      ApplicationRegistry.getInstance().\n+                                                                              getRootMessageLogger());\n+\n+        CurrentActor.set(connectionActor);\n+\n+        //Use the Actor to send a simple message\n+        CurrentActor.get().message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[CurrentActorTest] \";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return \"Connection Log Msg\";\n+            }\n+        });\n+\n+        // Verify it was the same actor as we set earlier\n+        assertEquals(\"Retrieved actor is not as expected \",\n+                     connectionActor, CurrentActor.get());\n+\n+        /**\n+         * Set the actor to nwo be the Channel actor so testing the ability\n+         * to push the actor on to the stack\n+         */\n+\n+        AMQChannel channel = new AMQChannel(session, 1, session.getVirtualHost().getMessageStore());\n+\n+        AMQPChannelActor channelActor = new AMQPChannelActor(channel,\n+                                                             ApplicationRegistry.getInstance().\n+                                                                     getRootMessageLogger());\n+\n+        CurrentActor.set(channelActor);\n+\n+        //Use the Actor to send a simple message\n+        CurrentActor.get().message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[CurrentActorTest] \";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return \"Channel Log Msg\";\n+            }\n+        });\n+\n+        // Verify it was the same actor as we set earlier\n+        assertEquals(\"Retrieved actor is not as expected \",\n+                     channelActor, CurrentActor.get());\n+\n+        // Remove the ChannelActor from the stack\n+        CurrentActor.remove();\n+\n+        // Verify we now have the same connection actor as we set earlier\n+        assertEquals(\"Retrieved actor is not as expected \",\n+                     connectionActor, CurrentActor.get());\n+\n+        // Verify that removing the last actor returns us to a null value.\n+        CurrentActor.remove();\n+\n+        assertNull(\"CurrentActor should be null\", CurrentActor.get());\n+\n+    }\n+\n+    public void testThreadLocal()\n+    {\n+\n+        // Setup the threads\n+        Thread[] threads = new Thread[THREADS];\n+        for (int count = 0; count < THREADS; count++)\n+        {\n+            Runnable test = new Test(count);\n+            threads[count] = new Thread(test);\n+        }\n+\n+        //Run the threads\n+        for (int count = 0; count < THREADS; count++)\n+        {\n+            threads[count].start();\n+        }\n+\n+        // Wait for them to finish\n+        for (int count = 0; count < THREADS; count++)\n+        {\n+            try\n+            {\n+                threads[count].join();\n+            }\n+            catch (InterruptedException e)\n+            {\n+                //if we are interrupted then we will exit shortly.\n+            }\n+        }\n+\n+        // Verify that none of the tests threw an exception\n+        for (int count = 0; count < THREADS; count++)\n+        {\n+            if (_errors[count] != null)\n+            {\n+                _errors[count].printStackTrace();\n+                fail(\"Error occured in thread:\" + count);\n+            }\n+        }\n+    }\n+\n+    public class Test implements Runnable\n+    {\n+        int count;\n+\n+        Test(int count)\n+        {\n+            this.count = count;\n+        }\n+\n+        public void run()\n+        {\n+\n+            // Create a new actor using retrieving the rootMessageLogger from\n+            // the default ApplicationRegistry.\n+            //fixme reminder that we need a better approach for broker testing.\n+            AMQPConnectionActor actor = new AMQPConnectionActor(session,\n+                                                                ApplicationRegistry.getInstance().\n+                                                                        getRootMessageLogger());\n+\n+            CurrentActor.set(actor);\n+\n+            try\n+            {\n+                //Use the Actor to send a simple message\n+                CurrentActor.get().message(new LogSubject()\n+                {\n+                    public String toString()\n+                    {\n+                        return \"[CurrentActorTest] \";\n+                    }\n+\n+                }, new LogMessage()\n+                {\n+                    public String toString()\n+                    {\n+                        return \"Running Thread:\" + count;\n+                    }\n+                });\n+\n+                // Verify it was the same actor as we set earlier\n+                assertEquals(\"Retrieved actor is not as expected \",\n+                             actor, CurrentActor.get());\n+\n+                // Verify that removing the actor works for this thread\n+                CurrentActor.remove();\n+\n+                assertNull(\"CurrentActor should be null\", CurrentActor.get());\n+            }\n+            catch (Exception e)\n+            {\n+                _errors[count] = e;\n+            }\n+\n+        }\n+    }\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/actors/CurrentActorTest.java"}, {"additions": 125, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/ManagementActorTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/ManagementActorTest.java", "sha": "fa0bb6529e992e2ff5567303e87aed99bb7c394f", "changes": 125, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/actors/ManagementActorTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,125 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.logging.LogActor;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+\n+import java.security.Principal;\n+import java.util.List;\n+\n+/**\n+ * Test : AMQPConnectionActorTest\n+ * Validate the AMQPConnectionActor class.\n+ *\n+ * The test creates a new AMQPActor and then logs a message using it.\n+ *\n+ * The test then verifies that the logged message was the only one created and\n+ * that the message contains the required message.\n+ */\n+public class ManagementActorTest extends TestCase\n+{\n+\n+    LogActor _amqpActor;\n+    UnitTestMessageLogger _rawLogger;\n+\n+    public void setUp() throws ConfigurationException\n+    {\n+        Configuration config = new PropertiesConfiguration();\n+        ServerConfiguration serverConfig = new ServerConfiguration(config);\n+\n+        _rawLogger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, _rawLogger);\n+\n+        _amqpActor = new ManagementActor(new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"ManagementActorTest\";\n+            }\n+        }, rootLogger);\n+    }\n+\n+    public void tearDown()\n+    {\n+        _rawLogger.clearLogMessages();\n+    }\n+\n+    /**\n+     * Test the AMQPActor logging as a Connection level.\n+     *\n+     * The test sends a message then verifies that it entered the logs.\n+     *\n+     * The log message should be fully repalaced (no '{n}' values) and should\n+     * not contain any channel identification.\n+     */\n+    public void testConnection()\n+    {\n+        final String message = \"test logging\";\n+\n+        _amqpActor.message(new LogSubject()\n+        {\n+            public String toString()\n+            {\n+                return \"[AMQPActorTest]\";\n+            }\n+\n+        }, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return message;\n+            }\n+        });\n+\n+        List<Object> logs = _rawLogger.getLogMessages();\n+\n+        assertEquals(\"Message log size not as expected.\", 1, logs.size());\n+\n+        // Verify that the logged message is present in the output\n+        assertTrue(\"Message was not found in log message\",\n+                   logs.get(0).toString().contains(message));\n+\n+        // Verify that all the values were presented to the MessageFormatter\n+        // so we will not end up with '{n}' entries in the log.\n+        assertFalse(\"Verify that the string does not contain any '{'.\",\n+                    logs.get(0).toString().contains(\"{\"));\n+\n+        // Verify that the message has the correct type\n+        assertTrue(\"Message contains the [mng: prefix\",\n+                   logs.get(0).toString().contains(\"[mng:\"));\n+\n+        // Verify that the logged message does not contains the 'ch:' marker\n+        assertFalse(\"Message was logged with a channel identifier.\" + logs.get(0),\n+                    logs.get(0).toString().contains(\"/ch:\"));\n+    }\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/actors/ManagementActorTest.java"}, {"additions": 33, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/TestBlankActor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/actors/TestBlankActor.java", "sha": "ec84d8bc9be3bc8cbff9fcf095c06457ca7914bb", "changes": 33, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/actors/TestBlankActor.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,33 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.actors;\n+\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+\n+public class TestBlankActor extends AbstractActor\n+{\n+    public TestBlankActor(RootMessageLogger rootLogger)\n+    {\n+        super(rootLogger);\n+        _logString = \"[Blank]\";\n+    }\n+}\n+    \n\\ No newline at end of file", "filename": "broker/src/test/java/org/apache/qpid/server/logging/actors/TestBlankActor.java"}, {"additions": 288, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLoggerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLoggerTest.java", "sha": "d7a5aa667b06bf36f224108f8c544c297b26264d", "changes": 288, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLoggerTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,288 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging.rawloggers;\n+\n+import junit.framework.TestCase;\n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/** Test that the Log4jMessageLogger defaults behave as expected */\n+public class Log4jMessageLoggerTest extends TestCase\n+{\n+    private File _lodgfile;\n+\n+    Level _rootLevel;\n+    Log4jTestAppender _appender;\n+\n+    @Override\n+    public void setUp() throws IOException\n+    {\n+        // Setup a file for logging\n+        _appender = new Log4jTestAppender();\n+\n+        Logger root = Logger.getRootLogger();\n+        root.addAppender(_appender);\n+\n+        _rootLevel = Logger.getRootLogger().getLevel();\n+        if (_rootLevel != Level.INFO)\n+        {\n+            root.setLevel(Level.INFO);\n+            root.warn(\"Root Logger set to:\" + _rootLevel + \" Resetting to INFO for test.\");\n+        }\n+        root.warn(\"Adding Test Appender:\" + _appender);\n+    }\n+\n+    @Override\n+    public void tearDown()\n+    {\n+        Logger root = Logger.getRootLogger();\n+        root.warn(\"Removing Test Appender:\" + _appender);\n+        root.warn(\"Resetting Root Level to : \" + _rootLevel);\n+\n+        Logger.getRootLogger().setLevel(_rootLevel);\n+\n+        Logger.getRootLogger().removeAppender(_appender);\n+\n+        //Call close on our appender. This will clear the log messages\n+        // from Memory\n+        _appender.close();\n+    }\n+\n+    /**\n+     * Verify that the default configuraion of Log4jMessageLogger will\n+     * log a message.\n+     *\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public void testDefaultLogsMessage() throws IOException, InterruptedException\n+    {\n+        // Create a logger to test\n+        Log4jMessageLogger logger = new Log4jMessageLogger();\n+\n+        //Create Message for test\n+        String message = \"testDefaults\";\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyLogPresent(message);\n+    }\n+\n+    /**\n+     * This test checks that if the Root Logger level is set such that the INFO\n+     * messages would not be logged then the  Log4jMessageLogger default of INFO\n+     * will result in logging not being presented.\n+     *\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public void testDefaultsLogsAtInfo() throws IOException, InterruptedException\n+    {\n+        // Create a logger to test\n+        Log4jMessageLogger logger = new Log4jMessageLogger();\n+\n+        //Create Message for test\n+        String message = \"testDefaults\";\n+\n+        //Set default logger level to off\n+        Logger.getRootLogger().setLevel(Level.WARN);\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyNoLog(message);\n+    }\n+\n+    /**\n+     * Test that changing the logger works.\n+     * <p/>\n+     * Test this by setting the default logger level to off which has been\n+     * verified to work by test 'testDefaultsLevelObeyed'\n+     *\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public void testDefaultLoggerAdjustment() throws IOException, InterruptedException\n+    {\n+        String loggerName = \"TestLogger\";\n+        // Create a logger to test\n+        Log4jMessageLogger logger = new Log4jMessageLogger(Log4jMessageLogger.DEFAULT_LEVEL, loggerName);\n+\n+        //Create Message for test\n+        String message = \"testDefaults\";\n+\n+        //Disable the default Log4jMessageLogger logger\n+        Level originalLevel = Logger.getLogger(Log4jMessageLogger.DEFAULT_LOGGER).getLevel();\n+        Logger.getLogger(Log4jMessageLogger.DEFAULT_LOGGER).setLevel(Level.OFF);\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyLogPresent(message);\n+\n+        // Restore the logging level\n+        Logger.getLogger(Log4jMessageLogger.DEFAULT_LOGGER).setLevel(originalLevel);\n+    }\n+\n+    /**\n+     * Test that changing the log level has an effect.\n+     * Set the level to be debug\n+     * but only set the logger to log at INFO\n+     * there should be no data printed\n+     * subsequently changing the root logger to allow DEBUG should\n+     * show the message\n+     *\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public void testDefaultsLevelObeyed() throws IOException, InterruptedException\n+    {\n+        // Create a logger to test\n+        Log4jMessageLogger logger = new Log4jMessageLogger(\"DEBUG\", Log4jMessageLogger.DEFAULT_LOGGER);\n+\n+        //Create Message for test\n+        String message = \"testDefaults\";\n+\n+        //Set root logger to INFO only\n+        Logger.getRootLogger().setLevel(Level.INFO);\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyNoLog(message);\n+\n+        //Set root logger to INFO only\n+        Logger.getRootLogger().setLevel(Level.DEBUG);\n+\n+        // Log the message\n+        logger.rawMessage(message);\n+\n+        verifyLogPresent(message);\n+    }\n+\n+    /**\n+     * Check that the Log Message reached log4j\n+     * @param message the message to search for\n+     */\n+    private void verifyLogPresent(String message)\n+    {\n+        List<String> results = findMessageInLog(message);\n+\n+        //Validate we only got one message\n+        assertEquals(\"The result set was not as expected.\", 1, results.size());\n+\n+        // Validate message\n+        String line = results.get(0);\n+\n+        assertNotNull(\"No Message retrieved from log file\", line);\n+        assertTrue(\"Message not contained in log.:\" + line,\n+                   line.contains(message));\n+    }\n+\n+    /**\n+     * Check that the given Message is not present in the log4j records.\n+     * @param message the message to search for\n+     */\n+    private void verifyNoLog(String message)\n+    {\n+        List<String> results = findMessageInLog(message);\n+\n+        //Validate we only got one message\n+        if (results.size() > 0)\n+        {\n+            System.err.println(\"Unexpected Log messages\");\n+\n+            for (String msg : results)\n+            {\n+                System.err.println(msg);\n+            }\n+        }\n+\n+        assertEquals(\"No messages expected.\", 0, results.size());\n+    }\n+\n+    /**\n+     * Get the appenders list of events and return a list of all the messages\n+     * that contain the given message\n+     *\n+     * @param message the search string\n+     * @return The list of all logged messages that contain the search string.\n+     */\n+    private List<String> findMessageInLog(String message)\n+    {\n+        List<LoggingEvent> log = _appender.getLog();\n+\n+        // Search Results for requested message\n+        List<String> result = new LinkedList<String>();\n+\n+        for (LoggingEvent event : log)\n+        {\n+            if (String.valueOf(event.getMessage()).contains(message))\n+            {\n+                result.add(String.valueOf(event.getMessage()));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+\n+    /**\n+     * Log4j Appender that simply records all the Logging Events so we can\n+     * verify that the above logging will make it to log4j in a unit test.\n+     */\n+    private class Log4jTestAppender extends AppenderSkeleton\n+    {\n+        List<LoggingEvent> _log = new LinkedList<LoggingEvent>();\n+\n+        protected void append(LoggingEvent loggingEvent)\n+        {\n+            _log.add(loggingEvent);\n+        }\n+\n+        public void close()\n+        {\n+            _log.clear();\n+        }\n+\n+        /**\n+         * @return the list of LoggingEvents that have occured in this Appender\n+         */\n+        public List<LoggingEvent> getLog()\n+        {\n+            return _log;\n+        }\n+\n+        public boolean requiresLayout()\n+        {\n+            return false;\n+        }\n+    }\n+}\n+", "filename": "broker/src/test/java/org/apache/qpid/server/logging/rawloggers/Log4jMessageLoggerTest.java"}, {"additions": 60, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLogger.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLogger.java", "sha": "df50cfb57a5fc0a1f2bc411eaf9f7486941de831", "changes": 60, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLogger.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,60 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.logging.rawloggers;\n+\n+import org.apache.qpid.server.logging.RawMessageLogger;\n+\n+import java.util.List;\n+import java.util.LinkedList;\n+\n+public class UnitTestMessageLogger implements RawMessageLogger\n+{\n+    List<Object> _log;\n+\n+    public UnitTestMessageLogger()\n+    {\n+        _log = new LinkedList<Object>();\n+    }\n+\n+\n+    public void rawMessage(String message)\n+    {\n+        _log.add(message);\n+    }\n+\n+    public void rawMessage(String message, Throwable throwable)\n+    {\n+        _log.add(message);\n+        _log.add(throwable);\n+    }\n+\n+\n+    public List<Object> getLogMessages()\n+    {\n+        return _log;\n+    }\n+\n+    public void clearLogMessages()\n+    {\n+        _log.clear();\n+    }\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLogger.java"}, {"additions": 102, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLoggerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLoggerTest.java", "sha": "e10de48432f7d9a47c71cdf9882a47e8d6d508ad", "changes": 102, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLoggerTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,102 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.rawloggers;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.List;\n+\n+/**\n+ * Test: UnitTestMessageLoggerTest\n+ *\n+ * This test verifies that UnitTestMessageLogger adhears to its interface.\n+ *\n+ * Messages are logged, and Throwables recorded in an array that can be\n+ * retreived and cleared.\n+ *\n+ */\n+public class UnitTestMessageLoggerTest extends TestCase\n+{\n+    private static final String TEST_MESSAGE = \"Test\";\n+    private static final String TEST_THROWABLE = \"Test Throwable\";\n+\n+    public void testRawMessage()\n+    {\n+        UnitTestMessageLogger logger = new UnitTestMessageLogger();\n+\n+        assertEquals(\"Messages logged before test start\", 0,\n+                     logger.getLogMessages().size());\n+\n+        // Log a message\n+        logger.rawMessage(TEST_MESSAGE);\n+\n+        List<Object> messages = logger.getLogMessages();\n+\n+        assertEquals(\"Expected to have 1 messages logged\", 1, messages.size());\n+\n+        assertEquals(\"First message not what was logged\",\n+                     TEST_MESSAGE, messages.get(0));\n+    }\n+\n+    public void testRawMessageWithThrowable()\n+    {\n+        UnitTestMessageLogger logger = new UnitTestMessageLogger();\n+\n+        assertEquals(\"Messages logged before test start\", 0,\n+                     logger.getLogMessages().size());\n+\n+        // Log a message\n+        Throwable throwable = new Throwable(TEST_THROWABLE);\n+\n+        logger.rawMessage(TEST_MESSAGE, throwable);\n+\n+        List<Object> messages = logger.getLogMessages();\n+\n+        assertEquals(\"Expected to have 2 entries\", 2, messages.size());\n+\n+        assertEquals(\"Message text not what was logged\",\n+                     TEST_MESSAGE, messages.get(0));\n+\n+        assertEquals(\"Message throwable not what was logged\",\n+                     TEST_THROWABLE, ((Throwable) messages.get(1)).getMessage());\n+\n+    }\n+\n+    public void testClear()\n+    {\n+        UnitTestMessageLogger logger = new UnitTestMessageLogger();\n+\n+        assertEquals(\"Messages logged before test start\", 0,\n+                     logger.getLogMessages().size());\n+\n+        // Log a message\n+        logger.rawMessage(TEST_MESSAGE);\n+\n+        assertEquals(\"Expected to have 1 messages logged\",\n+                     1, logger.getLogMessages().size());\n+\n+        logger.clearLogMessages();\n+\n+        assertEquals(\"Expected to have no messagse after a clear\",\n+                     0, logger.getLogMessages().size());\n+\n+    }\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/rawloggers/UnitTestMessageLoggerTest.java"}, {"additions": 258, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/AbstractTestLogSubject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/AbstractTestLogSubject.java", "sha": "04081db8e3a3731129326465d6da226fd99f7cdc", "changes": 258, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/subjects/AbstractTestLogSubject.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,258 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.configuration.ServerConfiguration;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.logging.LogActor;\n+import org.apache.qpid.server.logging.LogMessage;\n+import org.apache.qpid.server.logging.LogSubject;\n+import org.apache.qpid.server.logging.RootMessageLogger;\n+import org.apache.qpid.server.logging.RootMessageLoggerImpl;\n+import org.apache.qpid.server.logging.actors.TestBlankActor;\n+import org.apache.qpid.server.logging.rawloggers.UnitTestMessageLogger;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+import java.util.List;\n+\n+public abstract class AbstractTestLogSubject extends TestCase\n+{\n+    protected Configuration _config = new PropertiesConfiguration();\n+    protected LogSubject _subject = null;\n+\n+    protected List<Object> performLog() throws ConfigurationException\n+    {\n+        if (_subject == null)\n+        {\n+            throw new NullPointerException(\"LogSubject has not been set\");\n+        }\n+\n+        ServerConfiguration serverConfig = new ServerConfiguration(_config);\n+\n+        UnitTestMessageLogger logger = new UnitTestMessageLogger();\n+        RootMessageLogger rootLogger =\n+                new RootMessageLoggerImpl(serverConfig, logger);\n+\n+        LogActor actor_actor = new TestBlankActor(rootLogger);\n+\n+        actor_actor.message(_subject, new LogMessage()\n+        {\n+            public String toString()\n+            {\n+                return \"<Log Message>\";\n+            }\n+        });\n+\n+        return logger.getLogMessages();\n+    }\n+\n+    /**\n+     * Verify that the connection section has the expected items\n+     *\n+     * @param connectionID - The connection id (int) to check for\n+     * @param user         - the Connected username\n+     * @param ipString     - the ipString/hostname\n+     * @param vhost        - the virtualhost that the user connected to.\n+     * @param message      - the message these values should appear in.\n+     */\n+    protected void verifyConnection(long connectionID, String user, String ipString, String vhost, String message)\n+    {\n+        // This should return us MockProtocolSessionUser@null/test\n+        String connectionSlice = getSlice(\"con:\" + connectionID, message);\n+\n+        assertNotNull(\"Unable to find connection 'con:\" + connectionID + \"'\",\n+                      connectionSlice);\n+\n+        // Exract the userName\n+        String[] userNameParts = connectionSlice.split(\"@\");\n+\n+        assertEquals(\"Unable to split Username from rest of Connection:\"\n+                     + connectionSlice, 2, userNameParts.length);\n+\n+        assertEquals(\"Username not as expected\", userNameParts[0], user);\n+\n+        // Extract IP.\n+        String[] ipParts = userNameParts[1].split(\"/\");\n+\n+        assertEquals(\"Unable to split IP from rest of Connection:\"\n+                     + userNameParts[1], 2, ipParts.length);\n+\n+        assertEquals(\"IP not as expected\", ipParts[0], ipString);\n+\n+        //Finally check vhost\n+        assertEquals(\"Virtualhost name not as expected.\", vhost, ipParts[1]);\n+    }\n+\n+    /**\n+     * Verify that the RoutingKey is present in the provided message.\n+     *\n+     * @param message    The message to check\n+     * @param routingKey The routing key to check against\n+     */\n+    protected void verifyRoutingKey(String message, AMQShortString routingKey)\n+    {\n+        String routingKeySlice = getSlice(\"rk\", message);\n+\n+        assertNotNull(\"Routing Key not found:\" + message, routingKey);\n+\n+        assertEquals(\"Routing key not correct\",\n+                     routingKey.toString(), routingKeySlice);\n+    }\n+\n+    /**\n+     * Verify that the given Queue's name exists in the provided message\n+     *\n+     * @param message The message to check\n+     * @param queue   The queue to check against\n+     */\n+    protected void verifyQueue(String message, AMQQueue queue)\n+    {\n+        String queueSlice = getSlice(\"qu\", message);\n+\n+        assertNotNull(\"Queue not found:\" + message, queueSlice);\n+\n+        assertEquals(\"Queue name not correct\",\n+                     queue.getName().toString(), queueSlice);\n+    }\n+\n+    /**\n+     * Verify that the given exchange (name and type) are present in the\n+     * provided message.\n+     *\n+     * @param message  The message to check\n+     * @param exchange the exchange to check against\n+     */\n+    protected void verifyExchange(String message, Exchange exchange)\n+    {\n+        String exchangeSilce = getSlice(\"ex\", message);\n+\n+        assertNotNull(\"Exchange not found:\" + message, exchangeSilce);\n+\n+        String[] exchangeParts = exchangeSilce.split(\"/\");\n+\n+        assertEquals(\"Exchange should be in two parts ex(type/name)\", 2,\n+                     exchangeParts.length);\n+\n+        assertEquals(\"Exchange type not correct\",\n+                     exchange.getType().toString(), exchangeParts[0]);\n+\n+        assertEquals(\"Exchange name not correct\",\n+                     exchange.getName().toString(), exchangeParts[1]);\n+\n+    }\n+\n+    /**\n+     * Verify that a VirtualHost with the given name appears in the given\n+     * message.\n+     *\n+     * @param message the message to search\n+     * @param vhost   the vhostName to check against\n+     */\n+    protected void verifyVirtualHost(String message, VirtualHost vhost)\n+    {\n+        String vhostSlice = getSlice(\"vh\", message);\n+\n+        assertNotNull(\"Virtualhost not found:\" + message, vhostSlice);\n+\n+        assertEquals(\"Virtualhost not correct\", \"/\" + vhost.getName(), vhostSlice);\n+    }\n+\n+    /**\n+     * Parse the log message and return the slice according to the following:\n+     * Given Example:\n+     * con:1(guest@127.0.0.1/test)/ch:2/ex(amq.direct)/qu(myQueue)/rk(myQueue)\n+     *\n+     * Each item (except channel) is of the format <key>(<values>)\n+     *\n+     * So Given an ID to slice on:\n+     * con:1 - Connection 1\n+     * ex - exchange\n+     * qu - queue\n+     * rk - routing key\n+     *\n+     * @param sliceID the slice to locate\n+     * @param message the message to search in\n+     *\n+     * @return the slice if found otherwise null is returned\n+     */\n+    protected String getSlice(String sliceID, String message)\n+    {\n+        int indexOfSlice = message.indexOf(sliceID + \"(\");\n+\n+        if (indexOfSlice == -1)\n+        {\n+            return null;\n+        }\n+\n+        int endIndex = message.indexOf(')', indexOfSlice);\n+\n+        if (endIndex == -1)\n+        {\n+            return null;\n+        }\n+\n+        return message.substring(indexOfSlice + 1 + sliceID.length(),\n+                                 endIndex);\n+    }\n+\n+    /**\n+     * Test that when Logging occurs a single log statement is provided\n+     *\n+     * @throws ConfigurationException\n+     */\n+    public void testEnabled() throws ConfigurationException\n+    {\n+        List<Object> logs = performLog();\n+\n+        assertEquals(\"Log has to many messagse\", 1, logs.size());\n+\n+        validateLogStatement(String.valueOf(logs.get(0)));\n+    }\n+\n+    /**\n+     * Call to the individiual tests to validate the message is formatted as\n+     * expected\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    protected abstract void validateLogStatement(String message);\n+\n+    /**\n+     * Ensure that when status-updates are off this does not perform logging\n+     *\n+     * @throws ConfigurationException\n+     */\n+    public void testDisabled() throws ConfigurationException\n+    {\n+        _config.addProperty(\"status-updates\", \"OFF\");\n+\n+        List<Object> logs = performLog();\n+\n+        assertEquals(\"Log has to many messagse\", 0, logs.size());\n+    }\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/subjects/AbstractTestLogSubject.java"}, {"additions": 68, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/BindingLogSubjectTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/BindingLogSubjectTest.java", "sha": "845d02267f07f49a29cd3c2debe7999173f1aea5", "changes": 68, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/subjects/BindingLogSubjectTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,68 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.MockAMQQueue;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class BindingLogSubjectTest extends AbstractTestLogSubject\n+{\n+\n+    AMQQueue _queue;\n+    AMQShortString _routingKey;\n+    Exchange _exchange;\n+    VirtualHost _testVhost;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        _testVhost = ApplicationRegistry.getInstance().getVirtualHostRegistry().\n+                getVirtualHost(\"test\");\n+        // Configure items for subjectCreation\n+        _routingKey = new AMQShortString(\"RoutingKey\");\n+        _exchange = _testVhost.getExchangeRegistry().getDefaultExchange();\n+        _queue = new MockAMQQueue(\"BindingLogSubjectTest\");\n+        ((MockAMQQueue) _queue).setVirtualHost(_testVhost);\n+\n+        _subject = new BindingLogSubject(_routingKey, _exchange, _queue);\n+    }\n+\n+    /**\n+     * Validate that the logged Subject  message is as expected:\n+     * MESSAGE [Blank][vh(/test)/ex(direct/<<default>>)/qu(BindingLogSubjectTest)/rk(RoutingKey)] <Log Message>\n+     * @param message the message whos format needs validation\n+     */\n+    @Override\n+    protected void validateLogStatement(String message)\n+    {\n+        verifyVirtualHost(message, _testVhost);\n+        verifyExchange(message, _exchange);\n+        verifyQueue(message, _queue);\n+        verifyRoutingKey(message, _routingKey);\n+    }\n+\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/subjects/BindingLogSubjectTest.java"}, {"additions": 79, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/ChannelLogSubjectTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/ChannelLogSubjectTest.java", "sha": "9d5cb70f4ba82c23cc159e658386cf3c9a349dc8", "changes": 79, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/subjects/ChannelLogSubjectTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,79 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class ChannelLogSubjectTest extends ConnectionLogSubjectTest\n+{\n+    private final int _channelID = 1;\n+\n+    @Override\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        _session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            _session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+        AMQChannel channel = new AMQChannel(_session, _channelID, _session.getVirtualHost().getMessageStore());\n+\n+        _subject = new ChannelLogSubject(channel);\n+    }\n+\n+    /**\n+     * MESSAGE [Blank][con:0(MockProtocolSessionUser@null/test)/ch:1] <Log Message>\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    protected void validateLogStatement(String message)\n+    {\n+        // Use the ConnectionLogSubjectTest to vaildate that the connection\n+        // section is ok\n+        super.validateLogStatement(message);\n+\n+        // Finally check that the channel identifier is correctly added\n+        assertTrue(\"Channel 1 identifier not found as part of Subject\",\n+                   message.contains(\")/ch:1]\"));\n+    }\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/subjects/ChannelLogSubjectTest.java"}, {"additions": 69, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubjectTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubjectTest.java", "sha": "ff2d9b5e11047901e45b1d1a64cccd99ff2c3afb", "changes": 69, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubjectTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,69 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class ConnectionLogSubjectTest extends AbstractTestLogSubject\n+{\n+    AMQProtocolSession _session;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        _session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            _session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+        _subject = new ConnectionLogSubject(_session);\n+    }\n+\n+    /**\n+     * MESSAGE [Blank][con:0(MockProtocolSessionUser@null/test)] <Log Message>\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    protected void validateLogStatement(String message)\n+    {\n+        verifyConnection(_session.getSessionID(), \"MockProtocolSessionUser\", \"null\", \"test\", message);\n+    }\n+\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/subjects/ConnectionLogSubjectTest.java"}, {"additions": 57, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubjectTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubjectTest.java", "sha": "35df4c5976ddcdc8fc6894677aeb70e574edfc51", "changes": 57, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubjectTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,57 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.MockAMQQueue;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.framing.AMQShortString;\n+\n+public class ExchangeLogSubjectTest extends AbstractTestLogSubject\n+{\n+    Exchange _exchange;\n+    VirtualHost _testVhost;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        _testVhost = ApplicationRegistry.getInstance().getVirtualHostRegistry().\n+                getVirtualHost(\"test\");\n+\n+        _exchange = _testVhost.getExchangeRegistry().getDefaultExchange();\n+        _subject = new ExchangeLogSubject(_exchange,_testVhost);\n+    }\n+\n+    /**\n+     * Validate that the logged Subject  message is as expected:\n+     * MESSAGE [Blank][vh(/test)/ex(direct/<<default>>)] <Log Message>\n+     * @param message the message whos format needs validation\n+     */\n+    @Override\n+    protected void validateLogStatement(String message)\n+    {\n+        verifyVirtualHost(message, _testVhost);\n+        verifyExchange(message, _exchange);\n+    }\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/subjects/ExchangeLogSubjectTest.java"}, {"additions": 60, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/QueueLogSubjectTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/QueueLogSubjectTest.java", "sha": "7ef1f8d90382d6cddcdc874f45070aa92a859655", "changes": 60, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/subjects/QueueLogSubjectTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,60 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.MockAMQQueue;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class QueueLogSubjectTest extends AbstractTestLogSubject\n+{\n+\n+    AMQQueue _queue;\n+    VirtualHost _testVhost;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        _testVhost = ApplicationRegistry.getInstance().getVirtualHostRegistry().\n+                getVirtualHost(\"test\");\n+\n+        _queue = new MockAMQQueue(\"QueueLogSubjectTest\");\n+        ((MockAMQQueue) _queue).setVirtualHost(_testVhost);\n+\n+        _subject = new QueueLogSubject(_queue);\n+    }\n+\n+    /**\n+     * Validate that the logged Subject  message is as expected:\n+     * MESSAGE [Blank][vh(/test)/qu(BindingLogSubjectTest)] <Log Message>\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    @Override\n+    protected void validateLogStatement(String message)\n+    {\n+        System.err.println(message);\n+        verifyVirtualHost(message, _testVhost);\n+        verifyQueue(message, _queue);\n+    }\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/subjects/QueueLogSubjectTest.java"}, {"additions": 114, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubjectTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubjectTest.java", "sha": "0b0b0d78d1b69c5a723581d2bd9d1755b6d105d1", "changes": 114, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubjectTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -0,0 +1,114 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.logging.subjects;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.flow.LimitlessCreditManager;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.MockAMQQueue;\n+import org.apache.qpid.server.queue.MockProtocolSession;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.subscription.Subscription;\n+import org.apache.qpid.server.subscription.SubscriptionFactory;\n+import org.apache.qpid.server.subscription.SubscriptionFactoryImpl;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+\n+public class SubscriptionLogSubjectTest extends AbstractTestLogSubject\n+{\n+\n+    AMQQueue _queue;\n+    VirtualHost _testVhost;\n+    private boolean _acks;\n+    private FieldTable _filters;\n+    private boolean _noLocal;\n+    private int _channelID = 1;\n+    Subscription _subscription;\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        _testVhost = ApplicationRegistry.getInstance().getVirtualHostRegistry().\n+                getVirtualHost(\"test\");\n+\n+        _queue = new MockAMQQueue(\"QueueLogSubjectTest\");\n+        ((MockAMQQueue) _queue).setVirtualHost(_testVhost);\n+\n+        // Create a single session for this test.\n+        // Re-use is ok as we are testing the LogActor object is set correctly,\n+        // not the value of the output.\n+        AMQProtocolSession session = new MockProtocolSession(new MemoryMessageStore());\n+        // Use the first Virtualhost that has been defined to initialise\n+        // the MockProtocolSession. This prevents a NPE when the\n+        // AMQPActor attempts to lookup the name of the VHost.\n+        try\n+        {\n+            session.setVirtualHost(ApplicationRegistry.getInstance().\n+                    getVirtualHostRegistry().getVirtualHosts().\n+                    toArray(new VirtualHost[1])[0]);\n+        }\n+        catch (AMQException e)\n+        {\n+            fail(\"Unable to set virtualhost on session:\" + e.getMessage());\n+        }\n+\n+        AMQChannel channel = new AMQChannel(session, _channelID, session.getVirtualHost().getMessageStore());\n+\n+        session.addChannel(channel);\n+\n+        SubscriptionFactory factory = new SubscriptionFactoryImpl();\n+\n+        _subscription = factory.createSubscription(_channelID, session, new AMQShortString(\"cTag\"),\n+                                                   _acks, _filters, _noLocal,\n+                                                   new LimitlessCreditManager());\n+\n+        _subscription.setQueue(_queue);\n+\n+        _subject = new SubscriptionLogSubject(_subscription);\n+    }\n+\n+    /**\n+     * Validate that the logged Subject  message is as expected:\n+     * MESSAGE [Blank][sub:0(qu(QueueLogSubjectTest))] <Log Message>\n+     *\n+     * @param message the message whos format needs validation\n+     */\n+    @Override\n+    protected void validateLogStatement(String message)\n+    {\n+        String subscriptionSlice = getSlice(\"sub:\"\n+                                            + _subscription.getSubscriptionID(),\n+                                            message);\n+        \n+        assertNotNull(\"Unable to locate subscription 'sub:\" +\n+                      _subscription.getSubscriptionID() + \"'\");\n+\n+        // Adding the ')' is a bit ugly but SubscriptionLogSubject is the only\n+        // Subject that nests () and so the simple parser of checking for the\n+        // next ')' falls down.\n+        verifyQueue(subscriptionSlice+\")\", _queue);\n+    }\n+}", "filename": "broker/src/test/java/org/apache/qpid/server/logging/subjects/SubscriptionLogSubjectTest.java"}, {"additions": 18, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java", "sha": "f09b03ab85cef0e284287a5caa3635ed478ced1d", "changes": 31, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -21,25 +21,22 @@\n package org.apache.qpid.server.protocol;\n \n import junit.framework.TestCase;\n-\n import org.apache.log4j.Logger;\n-\n import org.apache.qpid.AMQException;\n import org.apache.qpid.codec.AMQCodecFactory;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.AMQChannel;\n-import org.apache.qpid.server.queue.AMQQueueFactory;\n import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.AMQQueueFactory;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.registry.IApplicationRegistry;\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.SkeletonMessageStore;\n \n import javax.management.JMException;\n+import java.security.Principal;\n \n-/**\n- * Test class to test MBean operations for AMQMinaProtocolSession.\n- */\n+/** Test class to test MBean operations for AMQMinaProtocolSession. */\n public class AMQProtocolSessionMBeanTest extends TestCase\n {\n     /** Used for debugging. */\n@@ -56,11 +53,11 @@ public void testChannels() throws Exception\n         int channelCount = _mbean.channels().size();\n         assertTrue(channelCount == 1);\n         AMQQueue queue = AMQQueueFactory.createAMQQueueImpl(new AMQShortString(\"testQueue_\" + System.currentTimeMillis()),\n-                                                                   false,\n-                                                                   new AMQShortString(\"test\"),\n-                                                                   true,\n-                                                                   _protocolSession.getVirtualHost(), null);\n-        AMQChannel channel = new AMQChannel(_protocolSession,2, _messageStore);\n+                                                            false,\n+                                                            new AMQShortString(\"test\"),\n+                                                            true,\n+                                                            _protocolSession.getVirtualHost(), null);\n+        AMQChannel channel = new AMQChannel(_protocolSession, 2, _messageStore);\n         channel.setDefaultQueue(queue);\n         _protocolSession.addChannel(channel);\n         channelCount = _mbean.channels().size();\n@@ -114,8 +111,16 @@ protected void setUp() throws Exception\n \n         IApplicationRegistry appRegistry = ApplicationRegistry.getInstance();\n         _protocolSession =\n-            new AMQMinaProtocolSession(new TestIoSession(), appRegistry.getVirtualHostRegistry(), new AMQCodecFactory(true),\n-                null);\n+                new AMQMinaProtocolSession(new TestIoSession(), appRegistry.getVirtualHostRegistry(), new AMQCodecFactory(true),\n+                                           null);\n+        // Need to authenticate session for it to work, (well for logging to work)\n+        _protocolSession.setAuthorizedID(new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"AMQProtocolSessionMBeanTestUser\";\n+            }\n+        });\n         _protocolSession.setVirtualHost(appRegistry.getVirtualHostRegistry().getVirtualHost(\"test\"));\n         _channel = new AMQChannel(_protocolSession, 1, _messageStore);\n         _protocolSession.addChannel(_channel);", "filename": "broker/src/test/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java", "sha": "49c5f8a14b36c7203219d1de729b24b3cab46b50", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -34,6 +34,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.net.SocketAddress;\n \n public class InternalTestProtocolSession extends AMQMinaProtocolSession implements ProtocolOutputConverter\n {", "filename": "broker/src/test/java/org/apache/qpid/server/protocol/InternalTestProtocolSession.java"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/protocol/MaxChannelsTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/protocol/MaxChannelsTest.java", "sha": "9597c1319aeb49e0cb8123c527c51483bb6d42ab", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/protocol/MaxChannelsTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -30,6 +30,8 @@\n import org.apache.qpid.AMQException;\n import org.apache.qpid.protocol.AMQConstant;\n \n+import java.security.Principal;\n+\n /** Test class to test MBean operations for AMQMinaProtocolSession. */\n public class MaxChannelsTest extends TestCase\n {\n@@ -40,6 +42,16 @@ public void testChannels() throws Exception\n     {\n         _session = new AMQMinaProtocolSession(new TestIoSession(), _appRegistry\n \t\t\t\t.getVirtualHostRegistry(), new AMQCodecFactory(true), null);\n+\n+        // Need to authenticate session for it to work, (well for logging to work)\n+        _session.setAuthorizedID(new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"AMQProtocolSessionMBeanTestUser\";\n+            }\n+        });\n+\n         _session.setVirtualHost(_appRegistry.getVirtualHostRegistry().getVirtualHost(\"test\"));\n \n         // check the channel count is correct", "filename": "broker/src/test/java/org/apache/qpid/server/protocol/MaxChannelsTest.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/queue/MockAMQQueue.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/queue/MockAMQQueue.java", "sha": "651c1311c840e459452fb44a11940e54e5e54bee", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/queue/MockAMQQueue.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -44,6 +44,7 @@\n {\n     private boolean _deleted = false;\n     private AMQShortString _name;\n+    private VirtualHost _virtualhost;\n \n     public MockAMQQueue(String name)\n     {\n@@ -75,9 +76,14 @@ public AMQShortString getOwner()\n         return null;  //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n+    public void setVirtualHost(VirtualHost virtualhost)\n+    {\n+        _virtualhost = virtualhost;\n+    }\n+\n     public VirtualHost getVirtualHost()\n     {\n-        return null;  //To change body of implemented methods use File | Settings | File Templates.\n+        return _virtualhost;\n     }\n \n     public void bind(Exchange exchange, AMQShortString routingKey, FieldTable arguments) throws AMQException", "filename": "broker/src/test/java/org/apache/qpid/server/queue/MockAMQQueue.java"}, {"additions": 26, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/queue/MockProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/queue/MockProtocolSession.java", "sha": "b9dcd972b125a60809b7edb1e96bfc7e2bd91fe0", "changes": 28, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/queue/MockProtocolSession.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -34,7 +34,9 @@\n import javax.security.sasl.SaslServer;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n import java.security.Principal;\n+import java.net.SocketAddress;\n \n /**\n  * A protocol session that can be used for testing purposes.\n@@ -45,11 +47,21 @@\n \n     private Map<Integer, AMQChannel> _channelMap = new HashMap<Integer, AMQChannel>();\n \n+    private static final AtomicLong idGenerator = new AtomicLong(0);\n+\n+    private final long _sessionID = idGenerator.getAndIncrement();\n+    private VirtualHost _virtualHost;\n+\n     public MockProtocolSession(MessageStore messageStore)\n     {\n         _messageStore = messageStore;\n     }\n \n+    public long getSessionID()\n+    {\n+        return _sessionID;\n+    }\n+\n     public void dataBlockReceived(AMQDataBlock message) throws Exception\n     {\n     }\n@@ -158,12 +170,12 @@ public Object getClientIdentifier()\n \n     public VirtualHost getVirtualHost()\n     {\n-        return null;  //To change body of implemented methods use File | Settings | File Templates.\n+        return _virtualHost;\n     }\n \n     public void setVirtualHost(VirtualHost virtualHost)\n     {\n-        //To change body of implemented methods use File | Settings | File Templates.\n+        _virtualHost = virtualHost;\n     }\n \n     public void addSessionCloseTask(Task task)\n@@ -187,6 +199,18 @@ public void setAuthorizedID(Principal authorizedID)\n     }\n \n     public Principal getAuthorizedID()\n+    {\n+        return new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"MockProtocolSessionUser\";\n+            }\n+        };\n+\n+    }\n+\n+    public SocketAddress getRemoteAddress()\n     {\n         return null;  //To change body of implemented methods use File | Settings | File Templates.\n     }", "filename": "broker/src/test/java/org/apache/qpid/server/queue/MockProtocolSession.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/security/access/plugins/network/FirewallPluginTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/security/access/plugins/network/FirewallPluginTest.java", "sha": "f56d5623541827f4f6be32f54cfd052cbe96ad73", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/security/access/plugins/network/FirewallPluginTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -40,6 +40,7 @@\n import org.apache.qpid.server.store.TestableMemoryMessageStore;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n \n public class FirewallPluginTest extends TestCase\n {\n@@ -89,11 +90,13 @@ public String getHostname()\n     public void setUp() throws Exception\n     {\n         _store = new TestableMemoryMessageStore();\n-        PropertiesConfiguration env = new PropertiesConfiguration();\n-        _virtualHost = new VirtualHost(new VirtualHostConfiguration(\"test\", env));\n         TestIoSession iosession = new TestIoSession();\n         iosession.setAddress(\"127.0.0.1\");\n-        VirtualHostRegistry virtualHostRegistry = null;\n+\n+        // Retreive VirtualHost from the Registry\n+        VirtualHostRegistry virtualHostRegistry = ApplicationRegistry.getInstance().getVirtualHostRegistry();\n+        _virtualHost = virtualHostRegistry.getVirtualHost(\"test\");\n+\n         AMQCodecFactory codecFactory = new AMQCodecFactory(true);\n         _session = new AMQMinaProtocolSession(iosession, virtualHostRegistry, codecFactory);        \n     }", "filename": "broker/src/test/java/org/apache/qpid/server/security/access/plugins/network/FirewallPluginTest.java"}, {"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java", "sha": "43152ef780d12f601ec1dc53763e5c0e2353528e", "changes": 20, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -21,17 +21,18 @@\n *\n */\n \n-import java.util.ArrayList;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.AMQChannel;\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.queue.QueueEntry;\n import org.apache.qpid.server.queue.QueueEntry.SubscriptionAcquiredState;\n \n+import java.util.ArrayList;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n public class MockSubscription implements Subscription\n {\n \n@@ -44,6 +45,10 @@\n     private ArrayList<QueueEntry> messages = new ArrayList<QueueEntry>();\n     private final Lock _stateChangeLock = new ReentrantLock();\n \n+    private static final AtomicLong idGenerator = new AtomicLong(0);\n+    // Create a simple ID that increments for ever new Subscription\n+    private final long _subscriptionID = idGenerator.getAndIncrement();\n+\n     public void close()\n     {\n         _closed = true;\n@@ -66,7 +71,12 @@ public AMQChannel getChannel()\n \n     public AMQShortString getConsumerTag()\n     {\n-        return tag ;\n+        return tag;\n+    }\n+\n+    public long getSubscriptionID()\n+    {\n+        return _subscriptionID;\n     }\n \n     public QueueEntry getLastSeenEntry()", "filename": "broker/src/test/java/org/apache/qpid/server/subscription/MockSubscription.java"}, {"additions": 27, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java", "sha": "585ed9a538705776ccb3ec00881b91a7b3224dd3", "changes": 45, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -21,30 +21,31 @@\n package org.apache.qpid.server.util;\n \n import junit.framework.TestCase;\n-\n import org.apache.commons.configuration.PropertiesConfiguration;\n-import org.apache.qpid.server.registry.ApplicationRegistry;\n-import org.apache.qpid.server.registry.IApplicationRegistry;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.queue.AMQQueueFactory;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.common.AMQPFilterTypes;\n+import org.apache.qpid.exchange.ExchangeDefaults;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.ContentHeaderBody;\n+import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.ConsumerTagNotUniqueException;\n import org.apache.qpid.server.configuration.ServerConfiguration;\n import org.apache.qpid.server.exchange.Exchange;\n import org.apache.qpid.server.protocol.InternalTestProtocolSession;\n-import org.apache.qpid.server.AMQChannel;\n-import org.apache.qpid.server.ConsumerTagNotUniqueException;\n-import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.queue.AMQQueueFactory;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.registry.IApplicationRegistry;\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreContext;\n import org.apache.qpid.server.store.TestableMemoryMessageStore;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.BasicContentHeaderProperties;\n-import org.apache.qpid.framing.FieldTable;\n-import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n-import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.util.MockChannel;\n-import org.apache.qpid.common.AMQPFilterTypes;\n-import org.apache.qpid.exchange.ExchangeDefaults;\n+\n+import java.security.Principal;\n \n public class InternalBrokerBaseCase extends TestCase\n {\n@@ -64,7 +65,7 @@ public void setUp() throws Exception\n         configuration.setProperty(\"virtualhosts.virtualhost.test.store.class\", TestableMemoryMessageStore.class.getName());\n         _registry = new TestApplicationRegistry(new ServerConfiguration(configuration));\n         ApplicationRegistry.initialise(_registry);\n-        _virtualHost = _registry.getVirtualHostRegistry().getVirtualHost(\"test\");        \n+        _virtualHost = _registry.getVirtualHostRegistry().getVirtualHost(\"test\");\n \n         _messageStore = _virtualHost.getMessageStore();\n \n@@ -80,6 +81,14 @@ public void setUp() throws Exception\n \n         _session = new InternalTestProtocolSession();\n \n+        _session.setAuthorizedID(new Principal()\n+        {\n+            public String getName()\n+            {\n+                return \"InternalBrokerBaseCaseUser\";\n+            }\n+        });\n+\n         _session.setVirtualHost(_virtualHost);\n \n         _channel = new MockChannel(_session, 1, _messageStore);\n@@ -176,7 +185,7 @@ public AMQShortString getRoutingKey()\n \n         for (int count = 0; count < messages; count++)\n         {\n-            channel.setPublishFrame(info,  _virtualHost.getExchangeRegistry().getExchange(info.getExchange()));\n+            channel.setPublishFrame(info, _virtualHost.getExchangeRegistry().getExchange(info.getExchange()));\n \n             //Set the body size\n             ContentHeaderBody _headerBody = new ContentHeaderBody();", "filename": "broker/src/test/java/org/apache/qpid/server/util/InternalBrokerBaseCase.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/util/TestApplicationRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/broker/src/test/java/org/apache/qpid/server/util/TestApplicationRegistry.java", "sha": "84bee7984bf88d61162b3f81aac5e8aef6b54e7a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/util/TestApplicationRegistry.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -87,7 +87,7 @@ public void initialise() throws Exception\n \n         _messageStore = new TestableMemoryMessageStore();\n \n-        _virtualHostRegistry = new VirtualHostRegistry();\n+        _virtualHostRegistry = new VirtualHostRegistry(this);\n         \n         PropertiesConfiguration vhostProps = new PropertiesConfiguration();\n         VirtualHostConfiguration hostConfig = new VirtualHostConfiguration(\"test\", vhostProps);", "filename": "broker/src/test/java/org/apache/qpid/server/util/TestApplicationRegistry.java"}, {"additions": 111, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/common/src/main/java/org/apache/qpid/util/FileUtils.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/common/src/main/java/org/apache/qpid/util/FileUtils.java", "sha": "515c8492904a3bee2fc1754af954ba6dd716e527", "changes": 182, "status": "modified", "deletions": 71, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/util/FileUtils.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -20,7 +20,18 @@\n  */\n package org.apache.qpid.util;\n \n-import java.io.*;\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.LinkedList;\n+import java.util.List;\n \n /**\n  * FileUtils provides some simple helper methods for working with files. It follows the convention of wrapping all\n@@ -46,7 +57,8 @@ public static String readFileAsString(String filename)\n     {\n         BufferedInputStream is = null;\n \n-        try{\n+        try\n+        {\n             try\n             {\n                 is = new BufferedInputStream(new FileInputStream(filename));\n@@ -57,7 +69,9 @@ public static String readFileAsString(String filename)\n             }\n \n             return readStreamAsString(is);\n-        }finally {\n+        }\n+        finally\n+        {\n             if (is != null)\n             {\n                 try\n@@ -210,68 +224,69 @@ public static void copy(File src, File dst)\n     /*\n      * Deletes a given file\n      */\n-     public static boolean deleteFile(String filePath)\n-     {\n-         return delete(new File(filePath), false);\n-     }\n+    public static boolean deleteFile(String filePath)\n+    {\n+        return delete(new File(filePath), false);\n+    }\n \n     /*\n      * Deletes a given empty directory \n      */\n-     public static boolean deleteDirectory(String directoryPath)\n-     {\n-         File directory = new File(directoryPath);\n-\n-         if (directory.isDirectory())\n-         {\n-           if (directory.listFiles().length == 0)\n-           {\n-               return delete(directory, true);\n-           }\n-         }\n-\n-         return false;\n-     }\n-\n-     /**\n-      * Delete a given file/directory,\n-      * A directory will always require the recursive flag to be set.\n-      * if a directory is specified and recursive set then delete the whole tree\n-      * @param file the File object to start at\n-      * @param recursive boolean to recurse if a directory is specified.\n-      * @return <code>true</code> if and only if the file or directory is\n-      *          successfully deleted; <code>false</code> otherwise\n-      */\n-     public static boolean delete(File file, boolean recursive)\n-     {\n-         boolean success = true;\n-\n-         if (file.isDirectory())\n-         {\n-             if (recursive)\n-             {\n-                 File[] files = file.listFiles();\n-\n-                 // This can occur if the file is deleted outside the JVM\n-                 if (files == null)\n-                 {\n-                     return false;\n-                 }\n-\n-                 for (int i = 0; i < files.length; i++)\n-                 {\n-                     success = delete(files[i], true) && success;\n-                 }\n-\n-                 return success && file.delete();\n-             }\n-\n-             return false;\n-         }\n-\n-         return file.delete();\n-     }\n+    public static boolean deleteDirectory(String directoryPath)\n+    {\n+        File directory = new File(directoryPath);\n \n+        if (directory.isDirectory())\n+        {\n+            if (directory.listFiles().length == 0)\n+            {\n+                return delete(directory, true);\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Delete a given file/directory,\n+     * A directory will always require the recursive flag to be set.\n+     * if a directory is specified and recursive set then delete the whole tree\n+     *\n+     * @param file      the File object to start at\n+     * @param recursive boolean to recurse if a directory is specified.\n+     *\n+     * @return <code>true</code> if and only if the file or directory is\n+     *         successfully deleted; <code>false</code> otherwise\n+     */\n+    public static boolean delete(File file, boolean recursive)\n+    {\n+        boolean success = true;\n+\n+        if (file.isDirectory())\n+        {\n+            if (recursive)\n+            {\n+                File[] files = file.listFiles();\n+\n+                // This can occur if the file is deleted outside the JVM\n+                if (files == null)\n+                {\n+                    return false;\n+                }\n+\n+                for (int i = 0; i < files.length; i++)\n+                {\n+                    success = delete(files[i], true) && success;\n+                }\n+\n+                return success && file.delete();\n+            }\n+\n+            return false;\n+        }\n+\n+        return file.delete();\n+    }\n \n     public static class UnableToCopyException extends Exception\n     {\n@@ -294,7 +309,6 @@ public static void copyRecursive(File source, File dst) throws FileNotFoundExcep\n             throw new IllegalArgumentException(\"Unable to copy '\" + source.toString() + \"' to '\" + dst + \"' a file with same name exists.\");\n         }\n \n-\n         if (source.isFile())\n         {\n             copy(source, dst);\n@@ -303,22 +317,48 @@ public static void copyRecursive(File source, File dst) throws FileNotFoundExcep\n         //else we have a source directory\n         if (!dst.isDirectory() && !dst.mkdir())\n         {\n-             throw new UnableToCopyException(\"Unable to create destination directory\");\n+            throw new UnableToCopyException(\"Unable to create destination directory\");\n         }\n \n-\n         for (File file : source.listFiles())\n         {\n-           if (file.isFile())\n-           {\n-               copy(file, new File(dst.toString() + File.separator + file.getName()));\n-           }\n-           else\n-           {\n-               copyRecursive(file, new File(dst + File.separator + file.getName()));\n-           }\n+            if (file.isFile())\n+            {\n+                copy(file, new File(dst.toString() + File.separator + file.getName()));\n+            }\n+            else\n+            {\n+                copyRecursive(file, new File(dst + File.separator + file.getName()));\n+            }\n         }\n \n+    }\n+\n+    /**\n+     * Checks the specified file for instances of the search string.\n+     *\n+     * @param file the file to search\n+     * @param search the search String\n+     *\n+     * @throws java.io.IOException\n+     * @return the list of matching entries\n+     */\n+    public static List<String> searchFile(File file, String search)\n+            throws IOException\n+    {\n+\n+        List<String> results = new LinkedList<String>();\n+\n+        BufferedReader reader = new BufferedReader(new FileReader(file));\n+        while (reader.ready())\n+        {\n+            String line = reader.readLine();\n+            if (line.contains(search))\n+            {\n+                results.add(line);\n+            }\n+        }\n \n+        return results;\n     }\n }", "filename": "common/src/main/java/org/apache/qpid/util/FileUtils.java"}, {"additions": 73, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java", "sha": "7eba5f092ef5628ae531863b1aadc9d04531e672", "changes": 80, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/test/java/org/apache/qpid/util/FileUtilsTest.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -22,11 +22,12 @@\n \n import junit.framework.TestCase;\n \n-import java.io.File;\n-import java.io.IOException;\n import java.io.BufferedWriter;\n-import java.io.FileWriter;\n+import java.io.File;\n import java.io.FileNotFoundException;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.List;\n \n public class FileUtilsTest extends TestCase\n {\n@@ -47,7 +48,7 @@ public void testCopyFile()\n \n         //Create initial file\n         File test = createTestFile(fileName, TEST_DATA);\n-        \n+\n         try\n         {\n             //Check number of files before copy\n@@ -137,7 +138,6 @@ public void testCopyRecursive()\n             testSubDir.deleteOnExit();\n             testDir.deleteOnExit();\n \n-\n             //Perform Copy\n             File copyDir = new File(testDir.toString() + COPY);\n             try\n@@ -282,7 +282,7 @@ public void testDeleteFile()\n \n     public void testDeleteNonExistentFile()\n     {\n-        File test = new File(\"FileUtilsTest-testDelete-\"+System.currentTimeMillis());\n+        File test = new File(\"FileUtilsTest-testDelete-\" + System.currentTimeMillis());\n \n         assertTrue(\"File exists\", !test.exists());\n         assertFalse(\"File is a directory\", test.isDirectory());\n@@ -303,7 +303,6 @@ public void testDeleteNull()\n         }\n     }\n \n-\n     /**\n      * Given two lists of File arrays ensure they are the same length and all entries in Before are in After\n      *\n@@ -543,4 +542,71 @@ private void createSubDir(String path, int directories, int files)\n         }\n     }\n \n+    public static final String SEARCH_STRING = \"testSearch\";\n+\n+    /**\n+     * Test searchFile(File file, String search) will find a match when it\n+     * exists.\n+     *\n+     * @throws java.io.IOException if unable to perform test setup\n+     */\n+    public void testSearchSucceed() throws IOException\n+    {\n+        File _logfile = File.createTempFile(\"FileUtilsTest-testSearchSucceed\", \".out\");\n+\n+        prepareFileForSearchTest(_logfile);\n+\n+        List<String> results = FileUtils.searchFile(_logfile, SEARCH_STRING);\n+\n+        assertNotNull(\"Null result set returned\", results);\n+\n+        assertEquals(\"Results do not contain expected count\", 1, results.size());\n+    }\n+\n+    /**\n+     * Test searchFile(File file, String search) will not find a match when the\n+     * test string does not exist.\n+     *\n+     * @throws java.io.IOException if unable to perform test setup\n+     */\n+    public void testSearchFail() throws IOException\n+    {\n+        File _logfile = File.createTempFile(\"FileUtilsTest-testSearchFail\", \".out\");\n+\n+        prepareFileForSearchTest(_logfile);\n+\n+        List<String> results = FileUtils.searchFile(_logfile, \"Hello\");\n+\n+        assertNotNull(\"Null result set returned\", results);\n+\n+        //Validate we only got one message\n+        if (results.size() > 0)\n+        {\n+            System.err.println(\"Unexpected messages\");\n+\n+            for (String msg : results)\n+            {\n+                System.err.println(msg);\n+            }\n+        }\n+\n+        assertEquals(\"Results contains data when it was not expected\",\n+                     0, results.size());\n+    }\n+\n+    /**\n+     * Write the SEARCH_STRING in to the given file.\n+     *\n+     * @param logfile The file to write the SEARCH_STRING into\n+     *\n+     * @throws IOException if an error occurs\n+     */\n+    private void prepareFileForSearchTest(File logfile) throws IOException\n+    {\n+        BufferedWriter writer = new BufferedWriter(new FileWriter(logfile));\n+        writer.append(SEARCH_STRING);\n+        writer.flush();\n+        writer.close();\n+    }\n+\n }", "filename": "common/src/test/java/org/apache/qpid/util/FileUtilsTest.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/c53c100583e62f7e9a532f5dc8d37f8cf0e6067d/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java", "sha": "dd01cb2f8e78020e9c87f47f68268b2c1dbcba64", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java?ref=c53c100583e62f7e9a532f5dc8d37f8cf0e6067d", "patch": "@@ -141,6 +141,11 @@ public AMQShortString getConsumerTag()\n         return null;  //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n+    public long getSubscriptionID()\n+    {\n+        return 0;  //To change body of implemented methods use File | Settings | File Templates.\n+    }\n+\n     public boolean isActive()\n     {\n         return false;  //To change body of implemented methods use File | Settings | File Templates.", "filename": "systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/9dc5f0883067dc16c6bad4486ad015ab3465010a", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/279d516de738912a024f0e72b7afedb62099d1b4", "message": "Merged revisions 533075-533079 via svnmerge from \nhttps://svn.apache.org/repos/asf/incubator/qpid/branches/M2\n\n........\n  r533075 | ritchiem | 2007-04-27 13:27:19 +0100 (Fri, 27 Apr 2007) | 2 lines\n  \n  QPID-473 Base64MD5PrincipalDatabase doesn't check password changes were applied to disk before storing in memory\n  Reversed the effects of the requested change if the changes cannot be persisted to disk\n........\n  r533077 | ritchiem | 2007-04-27 13:29:52 +0100 (Fri, 27 Apr 2007) | 3 lines\n  \n  Bin Updates: Qpid-Run removed new bash 3.x feature += replaced with option=\"${value1} ${value2}\" constructs to support older bash 2.x\n  renamed passwd qpid-passwd and fixed classpath loading errors.\n  Moved bdbbackup script to live with the bdb module.\n........\n  r533078 | ritchiem | 2007-04-27 13:30:07 +0100 (Fri, 27 Apr 2007) | 1 line\n  \n  Updated PrincipalDatabase implementations to return empty strings rather than null. As this causes NPE on MC.\n........\n  r533079 | ritchiem | 2007-04-27 13:31:03 +0100 (Fri, 27 Apr 2007) | 1 line\n  \n  Updated MLT to have variables that define the BROKER and VHOST used and White space\n........", "bug_id": "qpid-jms-amqp-0-x_88", "file": [{"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/279d516de738912a024f0e72b7afedb62099d1b4/broker/bin/bdbbackup", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/279d516de738912a024f0e72b7afedb62099d1b4/broker/bin/bdbbackup", "sha": "34743cd873ebaa8707fa9949df91540d1010e93c", "changes": 21, "status": "removed", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/bin/bdbbackup?ref=279d516de738912a024f0e72b7afedb62099d1b4", "patch": "@@ -1,21 +0,0 @@\n-#!/bin/bash\n-#\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-# \n-#   http://www.apache.org/licenses/LICENSE-2.0\n-# \n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-#\n-\n-. qpid-run org.apache.qpid.server.store.berkeleydb.BDBBackup \"$@\"", "filename": "broker/bin/bdbbackup"}, {"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9dc5f0883067dc16c6bad4486ad015ab3465010a/broker/bin/qpid-passwd", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9dc5f0883067dc16c6bad4486ad015ab3465010a/broker/bin/qpid-passwd", "previous_filename": "broker/bin/passwd", "sha": "6e64af6e7086d3f60411481e8647833f08e20a89", "changes": 9, "status": "renamed", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/bin/qpid-passwd?ref=9dc5f0883067dc16c6bad4486ad015ab3465010a", "patch": "@@ -18,4 +18,13 @@\n # under the License.\r\n #\r\n \r\n+# Set classpath to include Qpid jar with all required jars in manifest\r\n+QPID_LIBS=$QPID_HOME/lib/qpid-incubating.jar\r\n+\r\n+# Set other variables used by the qpid-run script before calling\r\n+export JAVA=java \\\r\n+       JAVA_VM=-server \\\r\n+       JAVA_MEM=-Xmx1024m \\\r\n+       QPID_CLASSPATH=$QPID_LIBS\r\n+\r\n . qpid-run org.apache.qpid.server.security.Passwd \"$@\"\r", "filename": "broker/bin/qpid-passwd"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9dc5f0883067dc16c6bad4486ad015ab3465010a/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9dc5f0883067dc16c6bad4486ad015ab3465010a/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java", "sha": "10adfdd9fc00e07eaaa6bea4c3c573e392875a58", "changes": 22, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java?ref=9dc5f0883067dc16c6bad4486ad015ab3465010a", "patch": "@@ -182,6 +182,7 @@ public boolean updatePassword(Principal principal, char[] password) throws Accou\n             try\n             {\n                 _userUpdate.lock();\n+                char[] orig = user.getPassword();\n                 user.setPassword(password);\n \n                 try\n@@ -192,6 +193,8 @@ public boolean updatePassword(Principal principal, char[] password) throws Accou\n                 {\n                     _logger.error(\"Unable to save password file, password change for user'\"\n                                   + principal + \"' will revert at restart\");\n+                    //revert the password change\n+                    user.setPassword(orig);\n                     return false;\n                 }\n                 return true;\n@@ -210,22 +213,6 @@ public boolean updatePassword(Principal principal, char[] password) throws Accou\n         }\n     }\n \n-    private char[] convertPassword(String password) throws UnsupportedEncodingException\n-    {\n-        byte[] passwdBytes = password.getBytes(DEFAULT_ENCODING);\n-\n-        char[] passwd = new char[passwdBytes.length];\n-\n-        int index = 0;\n-\n-        for (byte b : passwdBytes)\n-        {\n-            passwd[index++] = (char) b;\n-        }\n-\n-        return passwd;\n-    }\n-\n     public boolean createPrincipal(Principal principal, char[] password)\n     {\n         if (_users.get(principal.getName()) != null)\n@@ -247,9 +234,10 @@ public boolean createPrincipal(Principal principal, char[] password)\n             }\n             catch (IOException e)\n             {\n+                //remove the use on failure.\n+                _users.remove(user.getName());\n                 return false;\n             }\n-\n         }\n         finally\n         {", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9dc5f0883067dc16c6bad4486ad015ab3465010a/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9dc5f0883067dc16c6bad4486ad015ab3465010a/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java", "sha": "c49f4e2a33580a0926e7279dbbab2c5a97174416", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java?ref=9dc5f0883067dc16c6bad4486ad015ab3465010a", "patch": "@@ -39,6 +39,7 @@\n import java.util.Map;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.LinkedList;\n import java.security.Principal;\n \n /**\n@@ -157,7 +158,7 @@ public boolean deletePrincipal(Principal principal) throws AccountNotFoundExcept\n \n     public List<Principal> getUsers()\n     {\n-        return null; //todo\n+        return new LinkedList<Principal>(); //todo\n     }\n \n     public Principal getUser(String username)", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9dc5f0883067dc16c6bad4486ad015ab3465010a/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9dc5f0883067dc16c6bad4486ad015ab3465010a/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java", "sha": "73d58ca48949bb123b9f97500d2cfba79c08e79f", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java?ref=9dc5f0883067dc16c6bad4486ad015ab3465010a", "patch": "@@ -31,6 +31,7 @@\n import java.util.Map;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.LinkedList;\n import java.security.Principal;\n import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n@@ -142,7 +143,7 @@ private boolean compareCharArray(char[] a, char[] b)\n \n     public List<Principal> getUsers()\n     {\n-        return null; //todo\n+        return new LinkedList<Principal>(); //todo\n     }\n \n     public Principal getUser(String username)", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java"}, {"additions": 30, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9dc5f0883067dc16c6bad4486ad015ab3465010a/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9dc5f0883067dc16c6bad4486ad015ab3465010a/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java", "sha": "b15742f3aa2c4f754d5c8d559fb184423cba4758", "changes": 53, "status": "modified", "deletions": 23, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java?ref=9dc5f0883067dc16c6bad4486ad015ab3465010a", "patch": "@@ -63,17 +63,21 @@\n     private MessageConsumer _consumer;\n     private Connection _clientConnection;\n     private CountDownLatch _awaitMessages = new CountDownLatch(MSG_COUNT);\n+    private static final String BROKER = \"vm://:1\";\n+    private static final String VHOST = \"test\";\n \n     protected void setUp() throws Exception\n     {\n         super.setUp();\n-        TransportConnection.createVMBroker(1);\n-\n+        if (BROKER.contains(\"vm://\"))\n+        {\n+            TransportConnection.createVMBroker(1);\n+        }\n         InitialContextFactory factory = new PropertiesFileInitialContextFactory();\n \n         Hashtable<String, String> env = new Hashtable<String, String>();\n \n-        env.put(\"connectionfactory.connection\", \"amqp://guest:guest@MLT_ID/test?brokerlist='vm://:1'\");\n+        env.put(\"connectionfactory.connection\", \"amqp://guest:guest@MLT_ID/\" + VHOST + \"?brokerlist='\" + BROKER + \"'\");\n         env.put(\"queue.queue\", \"MessageListenerTest\");\n \n         _context = factory.getInitialContext(env);\n@@ -113,7 +117,10 @@ protected void tearDown() throws Exception\n         _clientConnection.close();\n \n         super.tearDown();\n-        TransportConnection.killAllVMBrokers();\n+        if (BROKER.contains(\"vm://\"))\n+        {\n+            TransportConnection.killAllVMBrokers();\n+        }\n     }\n \n \n@@ -145,34 +152,34 @@ public void testAsynchronousRecieve() throws Exception\n     }\n \n     public void testRecieveTheUseMessageListener() throws Exception\n-     {\n+    {\n \n-         _logger.error(\"Test disabled as initial receive is not called first\");\n-         // Perform initial receive to start connection\n+        _logger.error(\"Test disabled as initial receive is not called first\");\n+        // Perform initial receive to start connection\n //         assertTrue(_consumer.receive(2000) != null);\n //         receivedCount++;\n \n-         // Sleep to ensure remaining 4 msgs end up on _synchronousQueue\n+        // Sleep to ensure remaining 4 msgs end up on _synchronousQueue\n //         Thread.sleep(1000);\n \n-         // Set the message listener and wait for the messages to come in.\n-         _consumer.setMessageListener(this);\n+        // Set the message listener and wait for the messages to come in.\n+        _consumer.setMessageListener(this);\n \n-         _logger.info(\"Waiting 3 seconds for messages\");\n+        _logger.info(\"Waiting 3 seconds for messages\");\n+\n+        try\n+        {\n+            _awaitMessages.await(3000, TimeUnit.MILLISECONDS);\n+        }\n+        catch (InterruptedException e)\n+        {\n+            //do nothing\n+        }\n+        //Should have recieved all async messages\n+        assertEquals(MSG_COUNT, receivedCount);\n \n-         try\n-         {\n-             _awaitMessages.await(3000, TimeUnit.MILLISECONDS);\n-         }\n-         catch (InterruptedException e)\n-         {\n-             //do nothing\n-         }\n-         //Should have recieved all async messages\n-         assertEquals(MSG_COUNT, receivedCount);\n+    }\n \n-     }\n-    \n \n     public void onMessage(Message message)\n     {", "filename": "client/src/test/java/org/apache/qpid/client/MessageListenerTest.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/9dc5f0883067dc16c6bad4486ad015ab3465010a/common/bin/qpid-run", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/9dc5f0883067dc16c6bad4486ad015ab3465010a/common/bin/qpid-run", "sha": "fc607529ee3fd7a73ca252f6e9c52f72c6cd8ee9", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/bin/qpid-run?ref=9dc5f0883067dc16c6bad4486ad015ab3465010a", "patch": "@@ -70,7 +70,7 @@ if [ -n \"$QPID_LOG_PREFIX\" ]; then\n         echo Using qpid logprefix property\n         LOG_PREFIX=\" -Dlogprefix=$QPID_LOG_PREFIX\"\n     fi\n-    SYSTEM_PROPS+=$LOG_PREFIX\n+    SYSTEM_PROPS=\"${SYSTEM_PROPS} ${LOG_PREFIX}\"\n fi\n \n if [ -n \"$QPID_LOG_SUFFIX\" ]; then\n@@ -81,7 +81,7 @@ if [ -n \"$QPID_LOG_SUFFIX\" ]; then\n         echo Using qpig logsuffix property\n         LOG_SUFFIX=\" -Dlogsuffix=$QPID_LOG_SUFFIX\"\n     fi\n-    SYSTEM_PROPS+=$LOG_SUFFIX\n+    SYSTEM_PROPS=\"${SYSTEM_PROPS} ${LOG_SUFFIX}\"\n fi\n \n echo System Properties set to $SYSTEM_PROPS\n@@ -146,7 +146,7 @@ exclusive() {\n   if [ -z \"$PREVIOUS_ARGS\" ]; then\n     PREVIOUS_ARGS=$1\n   else\n-    PREVIOUS_ARGS+=\", $1\"\n+    PREVIOUS_ARGS=\"${PREVIOUS_ARGS}, $1\"\n     DISPATCH() {\n       die -usage \"you must choose one of: $PREVIOUS_ARGS\"\n     }\n@@ -168,7 +168,7 @@ for arg in \"${RUN_ARGS[@]}\"; do\n       if [ -z \"$JPDA_OPTS\" ]; then\n         JPDA_OPTS=\"-Xdebug -Xrunjdwp:transport=${JPDA_TRANSPORT:-dt_socket},address=${JPDA_ADDRESS:-8000},server=y,suspend=n\"\n       fi\n-      QPID_OPTS+=\" ${JPDA_OPTS}\"\n+      QPID_OPTS=\"${QPID_OPTS} ${JPDA_OPTS}\"\n       ;;\n     -run:external-classpath=*)\n #USAGE: controls how the CLASSPATH environment variable is used by", "filename": "common/bin/qpid-run"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/b89757a55ca74bf32932325e3ac601e5620d7471", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/24487f19ced251829a21d114c18acc59bd018727", "message": "QPID-346 Message loss after rollback\nQPID-348 Problems of prefetching messages\nQPID-355 Closing a consumer does not ensure messages delivery will stop for that subscription \n\nBROKER\nAMQChannel - updated requeue to either resend via the Delivery Manager not directly via msg.writedeliver.\nBasicRejectMethodHandler - initial place holder.\nTxRollbackHandler - Added comment\nAMQMessage - added ability to record who has taken the message so that it can be resent to that subscriber on resend/requeue.\nAMQQueue - added the queue reference to the Subscription creation\nConcurrentSelectorDeliveryManager - Added methods to correctly monitor the size of queue messages. Including messages on the resend queue of a Subscriber. Additional locking to ensure that messages are not sent to the subscriber after Closure. QPID-355 \nDeliveryManager - adjusted deliver call to allow delivery to the head of the queue.\nSubscription - changes to allow selction of queue(resend or predelivery) methods to add to resend and getSendLock to ensure that sending to the Subscription is allowed.\nSubscriptionFactory - changes to allow the AMQQueue to be passed to the Subscription.\nSubscriptionImpl - implementation of the interfaces. Local storage of messages to be resent and requeuing of the messages during closure.\nSubscriptionSet - changes to retrieve the actual stored Subscription when performing removeSubscriber. So we have access to the the resend queue.\nAMQStateManager - Added BasicRejectMethodHandler\nTransactionalContext - Added option to deliver the messages to the front of the queue.\nLocalTransactionalContext - cleared the _postComitDeliveryList on rollback. Added option to deliver the messages to the front of the queue.\nNonTransactionalContext - Added option to deliver the messages to the front of the queue.\n\nDeliverMessageOperation.java DELELTED AS NOT USED.\n\nCLIENT\nAMQSession - added ability to get the pervious state of the dispatcher when settting Stopped, fixed the channel suspension problems on broker so uncommented clean up code in rollback and recover.\nBasicMessageConsumer - updated the rollback so that it sends reject messages to server.\nAbstractJMSMessage - whitespace + added extra message properties to the toString()\nAMQProtocolHandler - whitespace + extra debug output\nTransactedTest - updated expect to prevent NPEs also added extra logging to help understand what is going on.\n\nCLUSTER\nClusteredQueue - AMQQueue changes for message deliveryFirst.\nRemoteSubscriptionImpl - Implementation of Subscription \n\nSYSTESTS\nAbstractHeadersExchangeTestBase - AMQQueue changes for message deliveryFirst.\nAMQQueueMBeanTest - changes for message deliveryFirst.\nConcurrencyTest - changes for message deliveryFirst. \nDeliveryManagerTest - changes for message deliveryFirst.\nSubscriptionTestHelper - Implementation of Subscription \n\n\nWhiteSpace only\nUnacknowledgedMessageMapImpl.java", "bug_id": "qpid-jms-amqp-0-x_89", "file": [{"additions": 213, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "sha": "7ceb3a7eefbeeb41e74952bb7fa894fdfcd69bc5", "changes": 272, "status": "modified", "deletions": 59, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -46,6 +46,7 @@\n import org.apache.qpid.server.queue.AMQMessage;\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.queue.MessageHandleFactory;\n+import org.apache.qpid.server.queue.Subscription;\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreContext;\n import org.apache.qpid.server.txn.LocalTransactionalContext;\n@@ -74,28 +75,20 @@\n      */\n     private AtomicLong _deliveryTag = new AtomicLong(0);\n \n-    /**\n-     * A channel has a default queue (the last declared) that is used when no queue name is\n-     * explictily set\n-     */\n+    /** A channel has a default queue (the last declared) that is used when no queue name is explictily set */\n     private AMQQueue _defaultQueue;\n \n-    /**\n-     * This tag is unique per subscription to a queue. The server returns this in response to a\n-     * basic.consume request.\n-     */\n+    /** This tag is unique per subscription to a queue. The server returns this in response to a basic.consume request. */\n     private int _consumerTag;\n \n     /**\n-     * The current message - which may be partial in the sense that not all frames have been received yet -\n-     * which has been received by this channel. As the frames are received the message gets updated and once all\n-     * frames have been received the message can then be routed.\n+     * The current message - which may be partial in the sense that not all frames have been received yet - which has\n+     * been received by this channel. As the frames are received the message gets updated and once all frames have been\n+     * received the message can then be routed.\n      */\n     private AMQMessage _currentMessage;\n \n-    /**\n-     * Maps from consumer tag to queue instance. Allows us to unsubscribe from a queue.\n-     */\n+    /** Maps from consumer tag to queue instance. Allows us to unsubscribe from a queue. */\n     private final Map<AMQShortString, AMQQueue> _consumerTag2QueueMap = new HashMap<AMQShortString, AMQQueue>();\n \n     private final MessageStore _messageStore;\n@@ -109,8 +102,8 @@\n     private TransactionalContext _txnContext;\n \n     /**\n-     * A context used by the message store enabling it to track context for a given channel even across\n-     * thread boundaries\n+     * A context used by the message store enabling it to track context for a given channel even across thread\n+     * boundaries\n      */\n     private final StoreContext _storeContext;\n \n@@ -123,7 +116,6 @@\n     private final AMQProtocolSession _session;\n \n \n-\n     public AMQChannel(AMQProtocolSession session, int channelId, MessageStore messageStore, MessageRouter exchanges)\n             throws AMQException\n     {\n@@ -138,9 +130,7 @@ public AMQChannel(AMQProtocolSession session, int channelId, MessageStore messag\n         _txnContext = new NonTransactionalContext(_messageStore, _storeContext, this, _returnMessages, _browsedAcks);\n     }\n \n-    /**\n-     * Sets this channel to be part of a local transaction\n-     */\n+    /** Sets this channel to be part of a local transaction */\n     public void setLocalTransactional()\n     {\n         _txnContext = new LocalTransactionalContext(_messageStore, _storeContext, _returnMessages);\n@@ -293,17 +283,17 @@ public int getNextConsumerTag()\n     }\n \n     /**\n-     * Subscribe to a queue. We register all subscriptions in the channel so that\n-     * if the channel is closed we can clean up all subscriptions, even if the\n-     * client does not explicitly unsubscribe from all queues.\n+     * Subscribe to a queue. We register all subscriptions in the channel so that if the channel is closed we can clean\n+     * up all subscriptions, even if the client does not explicitly unsubscribe from all queues.\n      *\n-     * @param tag     the tag chosen by the client (if null, server will generate one)\n-     * @param queue   the queue to subscribe to\n-     * @param session the protocol session of the subscriber\n+     * @param tag       the tag chosen by the client (if null, server will generate one)\n+     * @param queue     the queue to subscribe to\n+     * @param session   the protocol session of the subscriber\n      * @param noLocal\n      * @param exclusive\n-     * @return the consumer tag. This is returned to the subscriber and used in\n-     *         subsequent unsubscribe requests\n+     *\n+     * @return the consumer tag. This is returned to the subscriber and used in subsequent unsubscribe requests\n+     *\n      * @throws ConsumerTagNotUniqueException if the tag is not unique\n      * @throws AMQException                  if something goes wrong\n      */\n@@ -335,7 +325,7 @@ public void unsubscribeConsumer(AMQProtocolSession session, AMQShortString consu\n     }\n \n     /**\n-     * Called from the protocol session to close this channel and clean up.\n+     * Called from the protocol session to close this channel and clean up. T\n      *\n      * @throws AMQException if there is an error during closure\n      */\n@@ -344,8 +334,6 @@ public void close(AMQProtocolSession session) throws AMQException\n         _txnContext.rollback();\n         unsubscribeAllConsumers(session);\n         requeue();\n-        _txnContext.commit();\n-\n     }\n \n     private void unsubscribeAllConsumers(AMQProtocolSession session) throws AMQException\n@@ -362,8 +350,8 @@ private void unsubscribeAllConsumers(AMQProtocolSession session) throws AMQExcep\n      * Add a message to the channel-based list of unacknowledged messages\n      *\n      * @param message     the message that was delivered\n-     * @param deliveryTag the delivery tag used when delivering the message (see protocol spec for description of\n-     *                    the delivery tag)\n+     * @param deliveryTag the delivery tag used when delivering the message (see protocol spec for description of the\n+     *                    delivery tag)\n      * @param queue       the queue from which the message was delivered\n      */\n     public void addUnacknowledgedMessage(AMQMessage message, long deliveryTag, AMQShortString consumerTag, AMQQueue queue)\n@@ -376,8 +364,8 @@ public void addUnacknowledgedMessage(AMQMessage message, long deliveryTag, AMQSh\n     }\n \n     /**\n-     * Called to attempt re-enqueue all outstanding unacknowledged messages on the channel.\n-     * May result in delivery to this same channel or to other subscribers.\n+     * Called to attempt re-enqueue all outstanding unacknowledged messages on the channel. May result in delivery to\n+     * this same channel or to other subscribers.\n      *\n      * @throws org.apache.qpid.AMQException if the requeue fails\n      */\n@@ -386,23 +374,75 @@ public void requeue() throws AMQException\n         // we must create a new map since all the messages will get a new delivery tag when they are redelivered\n         Collection<UnacknowledgedMessage> messagesToBeDelivered = _unacknowledgedMessageMap.cancelAllMessages();\n \n+        TransactionalContext nontransacted = null;\n+        if (!(_txnContext instanceof NonTransactionalContext))\n+        {\n+            nontransacted = new NonTransactionalContext(_messageStore, _storeContext, this,\n+                                                        _returnMessages, _browsedAcks);\n+        }\n+\n+\n         for (UnacknowledgedMessage unacked : messagesToBeDelivered)\n         {\n             if (unacked.queue != null)\n             {\n-                _txnContext.deliver(unacked.message, unacked.queue);\n+                // Deliver these messages out of the transaction as their delivery was never\n+                // part of the transaction only the receive.\n+                if (!(_txnContext instanceof NonTransactionalContext))\n+                {\n+                    nontransacted.deliver(unacked.message, unacked.queue, false);\n+                }\n+                else\n+                {\n+                    _txnContext.deliver(unacked.message, unacked.queue, false);\n+                }\n             }\n         }\n \n     }\n \n+    public void requeue(long deliveryTag) throws AMQException\n+    {\n+        UnacknowledgedMessage unacked = _unacknowledgedMessageMap.remove(deliveryTag);\n \n-    /**\n-     * Called to resend all outstanding unacknowledged messages to this same channel.\n-     */\n+        if (unacked != null)\n+        {\n+            TransactionalContext nontransacted = null;\n+            if (!(_txnContext instanceof NonTransactionalContext))\n+            {\n+                nontransacted = new NonTransactionalContext(_messageStore, _storeContext, this,\n+                                                            _returnMessages, _browsedAcks);\n+            }\n+\n+            if (!(_txnContext instanceof NonTransactionalContext))\n+            {\n+                nontransacted.deliver(unacked.message, unacked.queue, false);\n+            }\n+            else\n+            {\n+                _txnContext.deliver(unacked.message, unacked.queue, false);\n+            }\n+            unacked.message.decrementReference(_storeContext);\n+        }\n+        else\n+        {\n+            _log.error(\"Requested requeue of message:\" + deliveryTag + \" but no such delivery tag exists\");\n+        }\n+\n+\n+    }\n+\n+\n+    /** Called to resend all outstanding unacknowledged messages to this same channel. */\n     public void resend(final AMQProtocolSession session, final boolean requeue) throws AMQException\n     {\n         final List<UnacknowledgedMessage> msgToRequeue = new LinkedList<UnacknowledgedMessage>();\n+        final List<UnacknowledgedMessage> msgToResend = new LinkedList<UnacknowledgedMessage>();\n+\n+        if (_log.isInfoEnabled())\n+        {\n+            _log.info(\"unacked map contains \" + _unacknowledgedMessageMap.size());\n+        }\n \n         _unacknowledgedMessageMap.visit(new UnacknowledgedMessageMap.Visitor()\n         {\n@@ -412,21 +452,40 @@ public boolean callback(UnacknowledgedMessage message) throws AMQException\n                 AMQShortString consumerTag = message.consumerTag;\n                 AMQMessage msg = message.message;\n                 msg.setRedelivered(true);\n-                if((consumerTag != null) && _consumerTag2QueueMap.containsKey(consumerTag) && !isSuspended())\n+                if (consumerTag != null)\n                 {\n-                    msg.writeDeliver(session, _channelId, deliveryTag, consumerTag);\n+                    // Consumer exists\n+                    if (_consumerTag2QueueMap.containsKey(consumerTag))\n+                    {\n+                        msgToResend.add(message);\n+                    }\n+                    else // consumer has gone\n+                    {\n+                        msgToRequeue.add(message);\n+                    }\n                 }\n                 else\n                 {\n                     // Message has no consumer tag, so was \"delivered\" to a GET\n                     // or consumer no longer registered\n                     // cannot resend, so re-queue.\n-                    if (message.queue != null && (consumerTag == null || requeue))\n+                    if (message.queue != null)\n+                    {\n+                        if (requeue)\n+                        {\n+                            msgToRequeue.add(message);\n+                        }\n+                        else\n+                        {\n+                            _log.info(\"No DeadLetter Queue and requeue not requested so dropping message:\" + message);\n+                        }\n+                    }\n+                    else\n                     {\n-                        msgToRequeue.add(message);                         \n+                        _log.info(\"Message.queue is null and no DeadLetter Queue so dropping message:\" + message);\n                     }\n                 }\n-                \n+\n                 // false means continue processing\n                 return false;\n             }\n@@ -436,21 +495,112 @@ public void visitComplete()\n             }\n         });\n \n-        for(UnacknowledgedMessage message : msgToRequeue)\n+        // Process Messages to Resend\n+        if (_log.isInfoEnabled())\n+        {\n+            if (!msgToResend.isEmpty())\n+            {\n+                _log.info(\"Preparing (\" + msgToResend.size() + \") message to resend to.\");\n+            }\n+        }\n+        for (UnacknowledgedMessage message : msgToResend)\n+        {\n+            AMQMessage msg = message.message;\n+\n+            // Our Java Client will always suspend the channel when resending!!\n+//            if (isSuspended())\n+//            {\n+//                _log.info(\"Channel is suspended so requeuing\");\n+//                //move this message to requeue\n+//                msgToRequeue.add(message);\n+//            }\n+//            else\n+            {\n+                //release to allow it to be delivered\n+                msg.release();\n+\n+                // Without any details from the client about what has been processed we have to mark\n+                // all messages in the unacked map as redelivered.\n+                msg.setRedelivered(true);\n+\n+\n+                Subscription sub = msg.getDeliveredSubscription();\n+\n+                if (sub != null)\n+                {\n+                    synchronized (sub.getSendLock())\n+                    {\n+                        if (sub.isClosed())\n+                        {\n+                            _log.info(\"Subscription closed during resend so requeuing message\");\n+                            //move this message to requeue\n+                            msgToRequeue.add(message);\n+                        }\n+                        else\n+                        {\n+                            if (_log.isDebugEnabled())\n+                            {\n+                                _log.debug(\"Requeuing (\" + System.identityHashCode(msg) + \") for resend\");\n+                            }\n+                            // Will throw an exception if the sub is closed\n+                            sub.addToResendQueue(msg);\n+                            _unacknowledgedMessageMap.remove(message.deliveryTag);\n+                            // Don't decrement as we are bypassing the normal deliver which increments\n+                            // this is what there is a decrement on the Requeue as deliver will increment.\n+                            // msg.decrementReference(_storeContext);\n+                        }\n+                    }\n+                }\n+                else\n+                {\n+                    _log.info(\"DeliveredSubscription not recorded so just requeueing to prevent loss\");\n+                    //move this message to requeue\n+                    msgToRequeue.add(message);\n+                }\n+            }\n+        }\n+\n+        if (_log.isInfoEnabled())\n+        {\n+            if (!msgToRequeue.isEmpty())\n+            {\n+                _log.info(\"Preparing (\" + msgToRequeue.size() + \") message to requeue to.\");\n+            }\n+        }\n+\n+        TransactionalContext nontransacted = null;\n+        if (!(_txnContext instanceof NonTransactionalContext))\n         {\n-            _txnContext.deliver(message.message, message.queue);\n+            nontransacted = new NonTransactionalContext(_messageStore, _storeContext, this,\n+                                                        _returnMessages, _browsedAcks);\n+        }\n+\n+        // Process Messages to Requeue at the front of the queue\n+        for (UnacknowledgedMessage message : msgToRequeue)\n+        {\n+            // Deliver these messages out of the transaction as their delivery was never\n+            // part of the transaction only the receive.\n+            if (!(_txnContext instanceof NonTransactionalContext))\n+            {\n+                nontransacted.deliver(message.message, message.queue, true);\n+            }\n+            else\n+            {\n+                _txnContext.deliver(message.message, message.queue, true);\n+            }\n+\n             _unacknowledgedMessageMap.remove(message.deliveryTag);\n             message.message.decrementReference(_storeContext);\n         }\n     }\n \n     /**\n-     * Callback indicating that a queue has been deleted. We must update the structure of unacknowledged\n-     * messages to remove the queue reference and also decrement any message reference counts, without\n-     * actually removing the item since we may get an ack for a delivery tag that was generated from the\n-     * deleted queue.\n+     * Callback indicating that a queue has been deleted. We must update the structure of unacknowledged messages to\n+     * remove the queue reference and also decrement any message reference counts, without actually removing the item\n+     * since we may get an ack for a delivery tag that was generated from the deleted queue.\n      *\n      * @param queue the queue that has been deleted\n+     *\n      * @throws org.apache.qpid.AMQException if there is an error processing the unacked messages\n      */\n     public void queueDeleted(final AMQQueue queue) throws AMQException\n@@ -487,6 +637,7 @@ public void visitComplete()\n      * @param deliveryTag the last delivery tag\n      * @param multiple    if true will acknowledge all messages up to an including the delivery tag. if false only\n      *                    acknowledges the single message specified by the delivery tag\n+     *\n      * @throws AMQException if the delivery tag is unknown (e.g. not outstanding) on this channel\n      */\n     public void acknowledgeMessage(long deliveryTag, boolean multiple) throws AMQException\n@@ -517,10 +668,10 @@ public void addUnacknowledgedBrowsedMessage(AMQMessage msg, long deliveryTag, AM\n     private void checkSuspension()\n     {\n         boolean suspend;\n-        \n-        suspend = ((_prefetch_HighWaterMark != 0) &&  _unacknowledgedMessageMap.size() >= _prefetch_HighWaterMark)\n-                 || ((_prefetchSize != 0) && _prefetchSize < _unacknowledgedMessageMap.getUnacknowledgeBytes());\n-        \n+\n+        suspend = ((_prefetch_HighWaterMark != 0) && _unacknowledgedMessageMap.size() >= _prefetch_HighWaterMark)\n+                  || ((_prefetchSize != 0) && _prefetchSize < _unacknowledgedMessageMap.getUnacknowledgeBytes());\n+\n         setSuspended(suspend);\n     }\n \n@@ -570,8 +721,6 @@ public void commit() throws AMQException\n     public void rollback() throws AMQException\n     {\n         _txnContext.rollback();\n-\n-\n     }\n \n     public String toString()\n@@ -617,21 +766,26 @@ public boolean wouldSuspend(AMQMessage msg)\n         }\n         else\n         {\n-            boolean willSuspend = ((_prefetch_HighWaterMark != 0) &&  _unacknowledgedMessageMap.size() + 1 > _prefetch_HighWaterMark);\n-            if(!willSuspend)\n+            boolean willSuspend = ((_prefetch_HighWaterMark != 0) && _unacknowledgedMessageMap.size() + 1 > _prefetch_HighWaterMark);\n+            if (!willSuspend)\n             {\n                 final long unackedSize = _unacknowledgedMessageMap.getUnacknowledgeBytes();\n \n                 willSuspend = (_prefetchSize != 0) && (unackedSize != 0) && (_prefetchSize < msg.getSize() + unackedSize);\n             }\n \n \n-            if(willSuspend)\n+            if (willSuspend)\n             {\n                 setSuspended(true);\n             }\n             return willSuspend;\n         }\n \n     }\n+\n+    public TransactionalContext getTransactionalContext()\n+    {\n+        return _txnContext;\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/AMQChannel.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/ack/UnacknowledgedMessageMapImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/ack/UnacknowledgedMessageMapImpl.java", "sha": "fdf087fdeaf89cf03556bf23def01b0d53724a4c", "changes": 1, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/ack/UnacknowledgedMessageMapImpl.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -85,7 +85,6 @@ public void remove(List<UnacknowledgedMessage> msgs)\n             for (UnacknowledgedMessage msg : msgs)\n             {\n                 remove(msg.deliveryTag);\n-\n             }\n         }\n     }", "filename": "broker/src/main/java/org/apache/qpid/server/ack/UnacknowledgedMessageMapImpl.java"}, {"additions": 68, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java", "sha": "ed13092ded2ebf04932818ffc6aca73e6592fba0", "changes": 68, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -0,0 +1,68 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.handler;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.framing.BasicRejectBody;\n+import org.apache.qpid.protocol.AMQMethodEvent;\n+import org.apache.qpid.server.AMQChannel;\n+import org.apache.qpid.server.ack.UnacknowledgedMessage;\n+import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.state.AMQStateManager;\n+import org.apache.qpid.server.state.StateAwareMethodListener;\n+import org.apache.log4j.Logger;\n+\n+public class BasicRejectMethodHandler implements StateAwareMethodListener<BasicRejectBody>\n+{\n+    private static final Logger _logger = Logger.getLogger(BasicRejectMethodHandler.class);\n+\n+    private static BasicRejectMethodHandler _instance = new BasicRejectMethodHandler();\n+\n+    public static BasicRejectMethodHandler getInstance()\n+    {\n+        return _instance;\n+    }\n+\n+    private BasicRejectMethodHandler()\n+    {\n+    }\n+\n+    public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicRejectBody> evt) throws AMQException\n+    {\n+        AMQProtocolSession session = stateManager.getProtocolSession();\n+\n+        _logger.info(\"FIXME: Rejecting:\" + evt.getMethod().deliveryTag + \": Requeue:\" + evt.getMethod().requeue);\n+\n+        int channelId = evt.getChannelId();\n+        UnacknowledgedMessage message = session.getChannel(channelId).getUnacknowledgedMessageMap().get(evt.getMethod().deliveryTag);\n+\n+        _logger.info(\"Need to reject message:\" + message);\n+//        if (evt.getMethod().requeue)\n+//        {\n+//          session.getChannel(channelId).requeue(evt.getMethod().deliveryTag);\n+//        }\n+//        else\n+//       {\n+//           // session.getChannel(channelId).resend(message);\n+//       }\n+\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/handler/TxRollbackHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/handler/TxRollbackHandler.java", "sha": "a10f44f9061e962d0402cdab453d7ec79a0e1058", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/TxRollbackHandler.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -62,6 +62,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<TxRollba\n             session.writeFrame(TxRollbackOkBody.createAMQFrame(evt.getChannelId(), (byte) 8, (byte) 0));\n             //Now resend all the unacknowledged messages back to the original subscribers.\n             //(Must be done after the TxnRollback-ok response).\n+            // Why, are we not allowed to send messages back to client before the ok method?\n             channel.resend(session, false);\n         }\n         catch (AMQException e)", "filename": "broker/src/main/java/org/apache/qpid/server/handler/TxRollbackHandler.java"}, {"additions": 85, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java", "sha": "aa7ea16afcc3500fa3cddb525444eef1fc6f0c99", "changes": 165, "status": "modified", "deletions": 80, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -36,21 +36,15 @@\n import org.apache.qpid.framing.abstraction.ContentChunk;\n import org.apache.qpid.server.txn.TransactionalContext;\n \n-/**\n- * Combines the information that make up a deliverable message into a more manageable form.\n- */\n+/** Combines the information that make up a deliverable message into a more manageable form. */\n public class AMQMessage\n {\n     private static final Logger _log = Logger.getLogger(AMQMessage.class);\n \n-    /**\n-     * Used in clustering\n-     */\n+    /** Used in clustering */\n     private Set<Object> _tokens;\n \n-    /**\n-     * Only use in clustering - should ideally be removed?\n-     */\n+    /** Only use in clustering - should ideally be removed? */\n     private AMQProtocolSession _publisher;\n \n     private final Long _messageId;\n@@ -63,28 +57,31 @@\n     private TransactionalContext _txnContext;\n \n     /**\n-     * Flag to indicate whether message has been delivered to a\n-     * consumer. Used in implementing return functionality for\n+     * Flag to indicate whether message has been delivered to a consumer. Used in implementing return functionality for\n      * messages published with the 'immediate' flag.\n      */\n     private boolean _deliveredToConsumer;\n     /**\n-     * We need to keep track of whether the message was 'immediate'\n-     * as in extreme circumstances, when the checkDelieveredToConsumer\n-     * is called, the message may already have been received and acknowledged,\n-     * and the body removed from the store.\n+     * We need to keep track of whether the message was 'immediate' as in extreme circumstances, when the\n+     * checkDelieveredToConsumer is called, the message may already have been received and acknowledged, and the body\n+     * removed from the store.\n      */\n     private boolean _immediate;\n \n     private AtomicBoolean _taken = new AtomicBoolean(false);\n \n     private TransientMessageData _transientMessageData = new TransientMessageData();\n \n+    private Subscription _takenBySubcription;\n \n+    public boolean isTaken()\n+    {\n+        return _taken.get();\n+    }\n \n     /**\n-     * Used to iterate through all the body frames associated with this message. Will not\n-     * keep all the data in memory therefore is memory-efficient.\n+     * Used to iterate through all the body frames associated with this message. Will not keep all the data in memory\n+     * therefore is memory-efficient.\n      */\n     private class BodyFrameIterator implements Iterator<AMQDataBlock>\n     {\n@@ -103,7 +100,7 @@ public boolean hasNext()\n         {\n             try\n             {\n-                return _index < _messageHandle.getBodyCount(getStoreContext(),_messageId) - 1;\n+                return _index < _messageHandle.getBodyCount(getStoreContext(), _messageId) - 1;\n             }\n             catch (AMQException e)\n             {\n@@ -153,7 +150,7 @@ public boolean hasNext()\n         {\n             try\n             {\n-                return _index < _messageHandle.getBodyCount(getStoreContext(),_messageId) - 1;\n+                return _index < _messageHandle.getBodyCount(getStoreContext(), _messageId) - 1;\n             }\n             catch (AMQException e)\n             {\n@@ -166,7 +163,7 @@ public ContentChunk next()\n         {\n             try\n             {\n-                return _messageHandle.getContentChunk(getStoreContext(),_messageId, ++_index);\n+                return _messageHandle.getContentChunk(getStoreContext(), _messageId, ++_index);\n             }\n             catch (AMQException e)\n             {\n@@ -196,12 +193,14 @@ public AMQMessage(Long messageId, MessagePublishInfo info,\n     }\n \n     /**\n-     * Used when recovering, i.e. when the message store is creating references to messages.\n-     * In that case, the normal enqueue/routingComplete is not done since the recovery process\n-     * is responsible for routing the messages to queues.\n+     * Used when recovering, i.e. when the message store is creating references to messages. In that case, the normal\n+     * enqueue/routingComplete is not done since the recovery process is responsible for routing the messages to\n+     * queues.\n+     *\n      * @param messageId\n      * @param store\n      * @param factory\n+     *\n      * @throws AMQException\n      */\n     public AMQMessage(Long messageId, MessageStore store, MessageHandleFactory factory, TransactionalContext txnConext) throws AMQException\n@@ -213,8 +212,8 @@ public AMQMessage(Long messageId, MessageStore store, MessageHandleFactory facto\n     }\n \n     /**\n-     * Used in testing only. This allows the passing of the content header immediately\n-     * on construction.\n+     * Used in testing only. This allows the passing of the content header immediately on construction.\n+     *\n      * @param messageId\n      * @param info\n      * @param txnContext\n@@ -228,14 +227,15 @@ public AMQMessage(Long messageId, MessagePublishInfo info,\n     }\n \n     /**\n-     * Used in testing only. This allows the passing of the content header and some body fragments on\n-     * construction.\n+     * Used in testing only. This allows the passing of the content header and some body fragments on construction.\n+     *\n      * @param messageId\n      * @param info\n      * @param txnContext\n      * @param contentHeader\n      * @param destinationQueues\n      * @param contentBodies\n+     *\n      * @throws AMQException\n      */\n     public AMQMessage(Long messageId, MessagePublishInfo info,\n@@ -280,7 +280,7 @@ public ContentHeaderBody getContentHeaderBody() throws AMQException\n         }\n         else\n         {\n-            return _messageHandle.getContentHeaderBody(getStoreContext(),_messageId);\n+            return _messageHandle.getContentHeaderBody(getStoreContext(), _messageId);\n         }\n     }\n \n@@ -338,24 +338,22 @@ public long getMessageId()\n         return _messageId;\n     }\n \n-    /**\n-     * Threadsafe. Increment the reference count on the message.\n-     */\n+    /** Threadsafe. Increment the reference count on the message. */\n     public void incrementReference()\n     {\n         _referenceCount.incrementAndGet();\n         if (_log.isDebugEnabled())\n         {\n \n-            _log.debug(\"Ref count on message \" + _messageId + \" incremented to \" + _referenceCount + \"   \" +  Arrays.asList(Thread.currentThread().getStackTrace()).subList(0,4));\n+            _log.debug(\"Ref count on message \" + _messageId + \" incremented to \" + _referenceCount + \"   \" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(0, 4));\n \n         }\n     }\n \n     /**\n      * Threadsafe. This will decrement the reference count and when it reaches zero will remove the message from the\n      * message store.\n-     *                                                                                                            \n+     *\n      * @throws MessageCleanupException when an attempt was made to remove the message from the message store and that\n      *                                 failed\n      */\n@@ -371,7 +369,7 @@ public void decrementReference(StoreContext storeContext) throws MessageCleanupE\n             {\n                 if (_log.isDebugEnabled())\n                 {\n-                    _log.debug(\"Ref count on message \" + _messageId + \" is zero; removing message\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(0,4));\n+                    _log.debug(\"Ref count on message \" + _messageId + \" is zero; removing message\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(0, 4));\n \n \n                 }\n@@ -394,13 +392,13 @@ public void decrementReference(StoreContext storeContext) throws MessageCleanupE\n         {\n             if (_log.isDebugEnabled())\n             {\n-                _log.debug(\"Ref count is now \" + _referenceCount + \" for message id \" + _messageId+ \"\\n\" +  Arrays.asList(Thread.currentThread().getStackTrace()).subList(0,4));\n+                _log.debug(\"Ref count is now \" + _referenceCount + \" for message id \" + _messageId + \"\\n\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(0, 4));\n                 if (_referenceCount.get() < 0)\n                 {\n                     Thread.dumpStack();\n                 }\n             }\n-            if(_referenceCount.get()<0)\n+            if (_referenceCount.get() < 0)\n             {\n                 throw new MessageCleanupException(\"Reference count for message id \" + _messageId + \" has gone below 0.\");\n             }\n@@ -419,18 +417,26 @@ public AMQProtocolSession getPublisher()\n \n     /**\n      * Called selectors to determin if the message has already been sent\n-     * @return   _deliveredToConsumer\n+     *\n+     * @return _deliveredToConsumer\n      */\n     public boolean getDeliveredToConsumer()\n     {\n         return _deliveredToConsumer;\n     }\n \n \n-\n-    public boolean taken()\n+    public boolean taken(Subscription sub)\n     {\n-        return _taken.getAndSet(true);\n+        if (_taken.getAndSet(true))\n+        {\n+            return true;\n+        }\n+        else\n+        {\n+            _takenBySubcription = sub;\n+            return false;\n+        }\n     }\n \n     public void release()\n@@ -441,9 +447,9 @@ public void release()\n     public boolean checkToken(Object token)\n     {\n \n-        if(_tokens==null)\n+        if (_tokens == null)\n         {\n-            _tokens  = new HashSet<Object>();\n+            _tokens = new HashSet<Object>();\n         }\n \n         if (_tokens.contains(token))\n@@ -458,11 +464,12 @@ public boolean checkToken(Object token)\n     }\n \n     /**\n-     * Registers a queue to which this message is to be delivered. This is\n-     * called from the exchange when it is routing the message. This will be called before any content bodies have\n-     * been received so that the choice of AMQMessageHandle implementation can be picked based on various criteria.\n+     * Registers a queue to which this message is to be delivered. This is called from the exchange when it is routing\n+     * the message. This will be called before any content bodies have been received so that the choice of\n+     * AMQMessageHandle implementation can be picked based on various criteria.\n      *\n      * @param queue the queue\n+     *\n      * @throws org.apache.qpid.AMQException if there is an error enqueuing the message\n      */\n     public void enqueue(AMQQueue queue) throws AMQException\n@@ -483,24 +490,23 @@ public boolean isPersistent() throws AMQException\n         }\n         else\n         {\n-            return _messageHandle.isPersistent(getStoreContext(),_messageId);\n+            return _messageHandle.isPersistent(getStoreContext(), _messageId);\n         }\n     }\n \n     /**\n      * Called to enforce the 'immediate' flag.\n      *\n-     * @throws NoConsumersException if the message is marked for\n-     *                              immediate delivery but has not been marked as delivered to a\n-     *                              consumer\n+     * @throws NoConsumersException if the message is marked for immediate delivery but has not been marked as delivered\n+     *                              to a consumer\n      */\n     public void checkDeliveredToConsumer() throws NoConsumersException, AMQException\n     {\n \n         if (_immediate && !_deliveredToConsumer)\n         {\n             throw new NoConsumersException(this);\n-        }        \n+        }\n     }\n \n     public MessagePublishInfo getMessagePublishInfo() throws AMQException\n@@ -512,7 +518,7 @@ public MessagePublishInfo getMessagePublishInfo() throws AMQException\n         }\n         else\n         {\n-            pb = _messageHandle.getMessagePublishInfo(getStoreContext(),_messageId);\n+            pb = _messageHandle.getMessagePublishInfo(getStoreContext(), _messageId);\n         }\n         return pb;\n     }\n@@ -533,10 +539,7 @@ public long getArrivalTime()\n     }\n \n \n-    /**\n-     * Called when this message is delivered to a consumer. (used to\n-     * implement the 'immediate' flag functionality).\n-     */\n+    /** Called when this message is delivered to a consumer. (used to implement the 'immediate' flag functionality). */\n     public void setDeliveredToConsumer()\n     {\n         _deliveredToConsumer = true;\n@@ -566,7 +569,7 @@ private void deliver(StoreContext storeContext) throws AMQException\n \n             for (AMQQueue q : destinationQueues)\n             {\n-                _txnContext.deliver(this, q);\n+                _txnContext.deliver(this, q, true);\n             }\n         }\n         finally\n@@ -583,23 +586,22 @@ public void writeDeliver(AMQProtocolSession protocolSession, int channelId, long\n         AMQDataBlock contentHeader = ContentHeaderBody.createAMQFrame(channelId,\n                                                                       getContentHeaderBody());\n \n-        final int bodyCount = _messageHandle.getBodyCount(getStoreContext(),_messageId);\n-        if(bodyCount == 0)\n+        final int bodyCount = _messageHandle.getBodyCount(getStoreContext(), _messageId);\n+        if (bodyCount == 0)\n         {\n             SmallCompositeAMQDataBlock compositeBlock = new SmallCompositeAMQDataBlock(deliver,\n-                                                                             contentHeader);\n+                                                                                       contentHeader);\n \n             protocolSession.writeFrame(compositeBlock);\n         }\n         else\n         {\n \n-\n             //\n             // Optimise the case where we have a single content body. In that case we create a composite block\n             // so that we can writeDeliver out the deliver, header and body with a single network writeDeliver.\n             //\n-            ContentChunk cb = _messageHandle.getContentChunk(getStoreContext(),_messageId, 0);\n+            ContentChunk cb = _messageHandle.getContentChunk(getStoreContext(), _messageId, 0);\n \n             AMQDataBlock firstContentBody = new AMQFrame(channelId, protocolSession.getRegistry().getProtocolVersionMethodConverter().convertToBody(cb));\n             AMQDataBlock[] headerAndFirstContent = new AMQDataBlock[]{contentHeader, firstContentBody};\n@@ -609,9 +611,9 @@ public void writeDeliver(AMQProtocolSession protocolSession, int channelId, long\n             //\n             // Now start writing out the other content bodies\n             //\n-            for(int i = 1; i < bodyCount; i++)\n+            for (int i = 1; i < bodyCount; i++)\n             {\n-                cb = _messageHandle.getContentChunk(getStoreContext(),_messageId, i);\n+                cb = _messageHandle.getContentChunk(getStoreContext(), _messageId, i);\n                 protocolSession.writeFrame(new AMQFrame(channelId, protocolSession.getRegistry().getProtocolVersionMethodConverter().convertToBody(cb)));\n             }\n \n@@ -627,22 +629,21 @@ public void writeGetOk(AMQProtocolSession protocolSession, int channelId, long d\n         AMQDataBlock contentHeader = ContentHeaderBody.createAMQFrame(channelId,\n                                                                       getContentHeaderBody());\n \n-        final int bodyCount = _messageHandle.getBodyCount(getStoreContext(),_messageId);\n-        if(bodyCount == 0)\n+        final int bodyCount = _messageHandle.getBodyCount(getStoreContext(), _messageId);\n+        if (bodyCount == 0)\n         {\n             SmallCompositeAMQDataBlock compositeBlock = new SmallCompositeAMQDataBlock(deliver,\n-                                                                             contentHeader);\n+                                                                                       contentHeader);\n             protocolSession.writeFrame(compositeBlock);\n         }\n         else\n         {\n \n-\n             //\n             // Optimise the case where we have a single content body. In that case we create a composite block\n             // so that we can writeDeliver out the deliver, header and body with a single network writeDeliver.\n             //\n-            ContentChunk cb = _messageHandle.getContentChunk(getStoreContext(),_messageId, 0);\n+            ContentChunk cb = _messageHandle.getContentChunk(getStoreContext(), _messageId, 0);\n \n             AMQDataBlock firstContentBody = new AMQFrame(channelId, protocolSession.getRegistry().getProtocolVersionMethodConverter().convertToBody(cb));\n             AMQDataBlock[] headerAndFirstContent = new AMQDataBlock[]{contentHeader, firstContentBody};\n@@ -652,9 +653,9 @@ public void writeGetOk(AMQProtocolSession protocolSession, int channelId, long d\n             //\n             // Now start writing out the other content bodies\n             //\n-            for(int i = 1; i < bodyCount; i++)\n+            for (int i = 1; i < bodyCount; i++)\n             {\n-                cb = _messageHandle.getContentChunk(getStoreContext(),_messageId, i);\n+                cb = _messageHandle.getContentChunk(getStoreContext(), _messageId, i);\n                 protocolSession.writeFrame(new AMQFrame(channelId, protocolSession.getRegistry().getProtocolVersionMethodConverter().convertToBody(cb)));\n             }\n \n@@ -685,10 +686,10 @@ private ByteBuffer createEncodedGetOkFrame(AMQProtocolSession protocolSession, i\n         AMQFrame getOkFrame = BasicGetOkBody.createAMQFrame(channelId,\n                                                             protocolSession.getProtocolMajorVersion(),\n                                                             protocolSession.getProtocolMinorVersion(),\n-                                                                deliveryTag, pb.getExchange(),\n-                                                                queueSize,\n-                                                                _messageHandle.isRedelivered(),\n-                                                                pb.getRoutingKey());\n+                                                            deliveryTag, pb.getExchange(),\n+                                                            queueSize,\n+                                                            _messageHandle.isRedelivered(),\n+                                                            pb.getRoutingKey());\n         ByteBuffer buf = ByteBuffer.allocate((int) getOkFrame.getSize()); // XXX: Could cast be a problem?\n         getOkFrame.writePayload(buf);\n         buf.flip();\n@@ -699,7 +700,7 @@ private ByteBuffer createEncodedReturnFrame(AMQProtocolSession protocolSession,\n     {\n         AMQFrame returnFrame = BasicReturnBody.createAMQFrame(channelId,\n                                                               protocolSession.getProtocolMajorVersion(),\n-                                                              protocolSession.getProtocolMinorVersion(), \n+                                                              protocolSession.getProtocolMinorVersion(),\n                                                               getMessagePublishInfo().getExchange(),\n                                                               replyCode, replyText,\n                                                               getMessagePublishInfo().getRoutingKey());\n@@ -757,12 +758,11 @@ public long getSize()\n         }\n         catch (AMQException e)\n         {\n-            _log.error(e.toString(),e);\n+            _log.error(e.toString(), e);\n             return 0;\n         }\n \n-    }    \n-\n+    }\n \n \n     public void restoreTransientMessageData() throws AMQException\n@@ -771,7 +771,7 @@ public void restoreTransientMessageData() throws AMQException\n         transientMessageData.setMessagePublishInfo(getMessagePublishInfo());\n         transientMessageData.setContentHeaderBody(getContentHeaderBody());\n         transientMessageData.addBodyLength(getContentHeaderBody().getSize());\n-        _transientMessageData = transientMessageData; \n+        _transientMessageData = transientMessageData;\n     }\n \n \n@@ -784,6 +784,11 @@ public void clearTransientMessageData()\n     public String toString()\n     {\n         return \"Message: \" + _messageId + \"; ref count: \" + _referenceCount + \"; taken: \" +\n-                _taken;\n+               _taken + \" by:\" + _takenBySubcription;\n+    }\n+\n+    public Subscription getDeliveredSubscription()\n+    {\n+        return _takenBySubcription;\n     }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java"}, {"additions": 55, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java", "sha": "429829e201dc2c499351cce29fb6fda94b45f1cc", "changes": 143, "status": "modified", "deletions": 88, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -45,13 +45,11 @@\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n /**\n- * This is an AMQ Queue, and should not be confused with a JMS queue or any other abstraction like\n- * that. It is described fully in RFC 006.\n+ * This is an AMQ Queue, and should not be confused with a JMS queue or any other abstraction like that. It is described\n+ * fully in RFC 006.\n  */\n public class AMQQueue implements Managable, Comparable\n {\n-\n-\n     public static final class ExistingExclusiveSubscription extends AMQException\n     {\n \n@@ -74,26 +72,19 @@ public ExistingSubscriptionPreventsExclusive()\n     private static final ExistingSubscriptionPreventsExclusive EXISTING_SUBSCRIPTION = new ExistingSubscriptionPreventsExclusive();\n \n \n-\n     private static final Logger _logger = Logger.getLogger(AMQQueue.class);\n \n     private final AMQShortString _name;\n \n-    /**\n-     * null means shared\n-     */\n+    /** null means shared */\n     private final AMQShortString _owner;\n \n     private final boolean _durable;\n \n-    /**\n-     * If true, this queue is deleted when the last subscriber is removed\n-     */\n+    /** If true, this queue is deleted when the last subscriber is removed */\n     private final boolean _autoDelete;\n \n-    /**\n-     * Holds subscribers to the queue.\n-     */\n+    /** Holds subscribers to the queue. */\n     private final SubscriptionSet _subscribers;\n \n     private final SubscriptionFactory _subscriptionFactory;\n@@ -106,60 +97,41 @@ public ExistingSubscriptionPreventsExclusive()\n \n     private List<Task> _deleteTaskList = new CopyOnWriteArrayList<Task>();\n \n-    /**\n-     * Manages message delivery.\n-     */\n+    /** Manages message delivery. */\n     private final DeliveryManager _deliveryMgr;\n \n-    /**\n-     * Used to track bindings to exchanges so that on deletion they can easily\n-     * be cancelled.\n-     */\n+    /** Used to track bindings to exchanges so that on deletion they can easily be cancelled. */\n     private final ExchangeBindings _bindings = new ExchangeBindings(this);\n \n-    /**\n-     * Executor on which asynchronous delivery will be carriedout where required\n-     */\n+    /** Executor on which asynchronous delivery will be carriedout where required */\n     private final Executor _asyncDelivery;\n \n     private final AMQQueueMBean _managedObject;\n \n     private final VirtualHost _virtualHost;\n \n \n-    /**\n-     * max allowed size(KB) of a single message\n-     */\n+    /** max allowed size(KB) of a single message */\n     @Configured(path = \"maximumMessageSize\", defaultValue = \"0\")\n     public long _maximumMessageSize;\n \n-    /**\n-     * max allowed number of messages on a queue.\n-     */\n+    /** max allowed number of messages on a queue. */\n     @Configured(path = \"maximumMessageCount\", defaultValue = \"0\")\n     public int _maximumMessageCount;\n \n-    /**\n-     * max queue depth for the queue\n-     */\n+    /** max queue depth for the queue */\n     @Configured(path = \"maximumQueueDepth\", defaultValue = \"0\")\n     public long _maximumQueueDepth;\n \n-    /**\n-     * maximum message age before alerts occur\n-     */\n+    /** maximum message age before alerts occur */\n     @Configured(path = \"maximumMessageAge\", defaultValue = \"0\")\n     public long _maximumMessageAge;\n \n-    /**\n-     * the minimum interval between sending out consequetive alerts of the same type\n-     */\n+    /** the minimum interval between sending out consequetive alerts of the same type */\n     @Configured(path = \"minimumAlertRepeatGap\", defaultValue = \"0\")\n     public long _minimumAlertRepeatGap;\n \n-    /**\n-     * total messages received by the queue since startup.\n-     */\n+    /** total messages received by the queue since startup. */\n     public AtomicLong _totalMessagesReceived = new AtomicLong();\n \n     public int compareTo(Object o)\n@@ -176,7 +148,6 @@ public AMQQueue(AMQShortString name, boolean durable, AMQShortString owner,\n     }\n \n \n-\n     protected AMQQueue(AMQShortString name, boolean durable, AMQShortString owner,\n                        boolean autoDelete, VirtualHost virtualHost,\n                        SubscriptionSet subscribers)\n@@ -211,7 +182,7 @@ protected AMQQueue(AMQShortString name, boolean durable, AMQShortString owner,\n \n         _subscribers = subscribers;\n         _subscriptionFactory = subscriptionFactory;\n-\t\t_deliveryMgr = new ConcurrentSelectorDeliveryManager(_subscribers, this);\n+        _deliveryMgr = new ConcurrentSelectorDeliveryManager(_subscribers, this);\n     }\n \n     private AMQQueueMBean createMBean() throws AMQException\n@@ -251,17 +222,13 @@ public boolean isAutoDelete()\n         return _autoDelete;\n     }\n \n-    /**\n-     * @return no of messages(undelivered) on the queue.\n-     */\n+    /** @return no of messages(undelivered) on the queue. */\n     public int getMessageCount()\n     {\n         return _deliveryMgr.getQueueMessageCount();\n     }\n \n-    /**\n-     * @return List of messages(undelivered) on the queue.\n-     */\n+    /** @return List of messages(undelivered) on the queue. */\n     public List<AMQMessage> getMessagesOnTheQueue()\n     {\n         return _deliveryMgr.getMessages();\n@@ -275,6 +242,7 @@ public long getQueueDepth()\n \n     /**\n      * @param messageId\n+     *\n      * @return AMQMessage with give id if exists. null if AMQMessage with given id doesn't exist.\n      */\n     public AMQMessage getMessageOnTheQueue(long messageId)\n@@ -294,13 +262,12 @@ public AMQMessage getMessageOnTheQueue(long messageId)\n     }\n \n     /**\n-     * moves messages from this queue to another queue. to do this the approach is following-\n-     * - setup the queue for moving messages (hold the lock and stop the async delivery)\n-     * - get all the messages available in the given message id range\n-     * - setup the other queue for moving messages (hold the lock and stop the async delivery)\n-     * - send these available messages to the other queue (enqueue in other queue)\n-     * - Once sending to other Queue is successful, remove messages from this queue\n-     * - remove locks from both queues and start async delivery\n+     * moves messages from this queue to another queue. to do this the approach is following- - setup the queue for\n+     * moving messages (hold the lock and stop the async delivery) - get all the messages available in the given message\n+     * id range - setup the other queue for moving messages (hold the lock and stop the async delivery) - send these\n+     * available messages to the other queue (enqueue in other queue) - Once sending to other Queue is successful,\n+     * remove messages from this queue - remove locks from both queues and start async delivery\n+     *\n      * @param fromMessageId\n      * @param toMessageId\n      * @param queueName\n@@ -316,7 +283,7 @@ public synchronized void moveMessagesToAnotherQueue(long fromMessageId, long toM\n             startMovingMessages();\n             List<AMQMessage> list = getMessagesOnTheQueue();\n             List<AMQMessage> foundMessagesList = new ArrayList<AMQMessage>();\n-            int maxMessageCountToBeMoved = (int)(toMessageId - fromMessageId + 1);\n+            int maxMessageCountToBeMoved = (int) (toMessageId - fromMessageId + 1);\n \n             // Run this loop till you find all the messages or the list has no more messages\n             for (AMQMessage message : list)\n@@ -344,7 +311,7 @@ public synchronized void moveMessagesToAnotherQueue(long fromMessageId, long toM\n         {\n             // remove the lock and start the async delivery\n             anotherQueue.stopMovingMessages();\n-            stopMovingMessages();   \n+            stopMovingMessages();\n         }\n     }\n \n@@ -364,10 +331,8 @@ public void stopMovingMessages()\n         _deliveryMgr.stopMovingMessages();\n         _deliveryMgr.processAsync(_asyncDelivery);\n     }\n-    \n-    /**\n-     * @return MBean object associated with this Queue\n-     */\n+\n+    /** @return MBean object associated with this Queue */\n     public ManagedObject getManagedObject()\n     {\n         return _managedObject;\n@@ -422,41 +387,37 @@ public void setMaximumQueueDepth(long value)\n     public long getOldestMessageArrivalTime()\n     {\n         return _deliveryMgr.getOldestMessageArrival();\n-        \n+\n     }\n \n-    /**\n-     * Removes the AMQMessage from the top of the queue.\n-     */\n+    /** Removes the AMQMessage from the top of the queue. */\n     public synchronized void deleteMessageFromTop(StoreContext storeContext) throws AMQException\n     {\n         _deliveryMgr.removeAMessageFromTop(storeContext);\n     }\n \n-    /**\n-     * removes all the messages from the queue.\n-     */\n+    /** removes all the messages from the queue. */\n     public synchronized long clearQueue(StoreContext storeContext) throws AMQException\n     {\n         return _deliveryMgr.clearAllMessages(storeContext);\n     }\n \n     public void bind(AMQShortString routingKey, FieldTable arguments, Exchange exchange) throws AMQException\n     {\n-        exchange.registerQueue(routingKey, this, arguments);        \n-        if(isDurable() && exchange.isDurable())\n+        exchange.registerQueue(routingKey, this, arguments);\n+        if (isDurable() && exchange.isDurable())\n         {\n-            _virtualHost.getMessageStore().bindQueue(exchange,routingKey,this,arguments);\n+            _virtualHost.getMessageStore().bindQueue(exchange, routingKey, this, arguments);\n         }\n         _bindings.addBinding(routingKey, arguments, exchange);\n     }\n \n     public void unBind(AMQShortString routingKey, FieldTable arguments, Exchange exchange) throws AMQException\n     {\n         exchange.deregisterQueue(routingKey, this, arguments);\n-        if(isDurable() && exchange.isDurable())\n+        if (isDurable() && exchange.isDurable())\n         {\n-            _virtualHost.getMessageStore().unbindQueue(exchange,routingKey,this,arguments);\n+            _virtualHost.getMessageStore().unbindQueue(exchange, routingKey, this, arguments);\n         }\n         _bindings.remove(routingKey, arguments, exchange);\n     }\n@@ -466,30 +427,31 @@ public void registerProtocolSession(AMQProtocolSession ps, int channel, AMQShort\n                                         FieldTable filters, boolean noLocal, boolean exclusive)\n             throws AMQException\n     {\n-        if(incrementSubscriberCount() > 1)\n+        if (incrementSubscriberCount() > 1)\n         {\n-            if(isExclusive())\n+            if (isExclusive())\n             {\n                 decrementSubscriberCount();\n                 throw EXISTING_EXCLUSIVE;\n             }\n-            else if(exclusive)\n+            else if (exclusive)\n             {\n                 decrementSubscriberCount();\n                 throw EXISTING_SUBSCRIPTION;\n             }\n \n         }\n-        else if(exclusive)\n+        else if (exclusive)\n         {\n             setExclusive(true);\n         }\n \n         debug(\"Registering protocol session {0} with channel {1} and consumer tag {2} with {3}\", ps, channel, consumerTag, this);\n \n-        Subscription subscription = _subscriptionFactory.createSubscription(channel, ps, consumerTag, acks, filters, noLocal);\n+        Subscription subscription = _subscriptionFactory.createSubscription(channel, ps, consumerTag, acks,\n+                                                                            filters, noLocal, this);\n \n-        if(subscription.hasFilters())\n+        if (subscription.hasFilters())\n         {\n             if (_deliveryMgr.hasQueuedMessages())\n             {\n@@ -537,10 +499,10 @@ public void unregisterProtocolSession(AMQProtocolSession ps, int channel, AMQSho\n                                    \" and protocol session key \" + ps.getKey() + \" not registered with queue \" + this);\n         }\n \n+        removedSubscription.close();\n         setExclusive(false);\n         decrementSubscriberCount();\n \n-\n         // if we are eligible for auto deletion, unregister from the queue registry\n         if (_autoDelete && _subscribers.isEmpty())\n         {\n@@ -583,13 +545,13 @@ else if (checkEmpty && _deliveryMgr.hasQueuedMessages())\n \n     public void delete() throws AMQException\n     {\n-        if(!_deleted.getAndSet(true))\n+        if (!_deleted.getAndSet(true))\n         {\n             _subscribers.queueDeleted(this);\n             _bindings.deregister();\n             _virtualHost.getQueueRegistry().unregisterQueue(_name);\n             _managedObject.unregister();\n-            for(Task task : _deleteTaskList)\n+            for (Task task : _deleteTaskList)\n             {\n                 task.doTask(this);\n             }\n@@ -605,7 +567,8 @@ protected void autodelete() throws AMQException\n \n     public void processGet(StoreContext storeContext, AMQMessage msg) throws AMQException\n     {\n-        _deliveryMgr.deliver(storeContext, getName(), msg);\n+        //fixme not sure what this is doing. should we be passing deliverFirst through here?\n+        _deliveryMgr.deliver(storeContext, getName(), msg, false);\n         try\n         {\n             msg.checkDeliveredToConsumer();\n@@ -620,9 +583,9 @@ public void processGet(StoreContext storeContext, AMQMessage msg) throws AMQExce\n     }\n \n \n-    public void process(StoreContext storeContext, AMQMessage msg) throws AMQException\n+    public void process(StoreContext storeContext, AMQMessage msg, boolean deliverFirst) throws AMQException\n     {\n-        _deliveryMgr.deliver(storeContext, getName(), msg);\n+        _deliveryMgr.deliver(storeContext, getName(), msg, deliverFirst);\n         try\n         {\n             msg.checkDeliveredToConsumer();\n@@ -731,7 +694,7 @@ public VirtualHost getVirtualHost()\n \n     public static interface Task\n     {\n-        public void doTask(AMQQueue queue) throws AMQException;        \n+        public void doTask(AMQQueue queue) throws AMQException;\n     }\n \n     public void addQueueDeleteTask(Task task)\n@@ -759,4 +722,8 @@ public void setMaximumMessageAge(long maximumMessageAge)\n         _maximumMessageAge = maximumMessageAge;\n     }\n \n+    public void subscriberHasPendingResend(boolean hasContent, SubscriptionImpl subscription, AMQMessage msg)\n+    {\n+        _deliveryMgr.subscriberHasPendingResend(hasContent, subscription, msg);\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java"}, {"additions": 224, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java", "sha": "208a59516ca1b5cfaf486e657cb187313bfc05b9", "changes": 322, "status": "modified", "deletions": 98, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -24,9 +24,14 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Queue;\n+import java.util.Set;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.concurrent.Executor;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.locks.ReentrantLock;\n \n import org.apache.log4j.Logger;\n@@ -38,60 +43,49 @@\n import org.apache.qpid.server.configuration.Configurator;\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n import org.apache.qpid.server.store.StoreContext;\n+import org.apache.qpid.util.MessageQueue;\n+import org.apache.qpid.util.ConcurrentLinkedMessageQueueAtomicSize;\n import org.apache.qpid.util.ConcurrentLinkedQueueAtomicSize;\n \n \n-/**\n- * Manages delivery of messages on behalf of a queue\n- */\n+/** Manages delivery of messages on behalf of a queue */\n public class ConcurrentSelectorDeliveryManager implements DeliveryManager\n {\n     private static final Logger _log = Logger.getLogger(ConcurrentSelectorDeliveryManager.class);\n \n     @Configured(path = \"advanced.compressBufferOnQueue\",\n                 defaultValue = \"false\")\n     public boolean compressBufferOnQueue;\n-    /**\n-     * Holds any queued messages\n-     */\n-    private final Queue<AMQMessage> _messages = new ConcurrentLinkedQueueAtomicSize<AMQMessage>();\n-\n-    private final ReentrantLock _messageAccessLock = new ReentrantLock();\n+    /** Holds any queued messages */\n+    private final MessageQueue<AMQMessage> _messages = new ConcurrentLinkedMessageQueueAtomicSize<AMQMessage>();\n \n-    //private int _messageCount;\n-    /**\n-     * Ensures that only one asynchronous task is running for this manager at\n-     * any time.\n-     */\n+    /** Ensures that only one asynchronous task is running for this manager at any time. */\n     private final AtomicBoolean _processing = new AtomicBoolean();\n-    /**\n-     * The subscriptions on the queue to whom messages are delivered\n-     */\n+    /** The subscriptions on the queue to whom messages are delivered */\n     private final SubscriptionManager _subscriptions;\n \n     /**\n-     * A reference to the queue we are delivering messages for. We need this to be able\n-     * to pass the code that handles acknowledgements a handle on the queue.\n+     * A reference to the queue we are delivering messages for. We need this to be able to pass the code that handles\n+     * acknowledgements a handle on the queue.\n      */\n     private final AMQQueue _queue;\n \n     /**\n-     * Flag used while moving messages from this queue to another. For moving messages the async delivery\n-     * should also stop. This flat should be set to true to stop async delivery and set to false to enable\n-     * async delivery again.\n+     * Flag used while moving messages from this queue to another. For moving messages the async delivery should also\n+     * stop. This flat should be set to true to stop async delivery and set to false to enable async delivery again.\n      */\n     private AtomicBoolean _movingMessages = new AtomicBoolean();\n-    \n+\n     /**\n      * Lock used to ensure that an channel that becomes unsuspended during the start of the queueing process is forced\n-     * to wait till the first message is added to the queue. This will ensure that the _queue has messages to be delivered\n-     * via the async thread.\n-     * <p/>\n-     * Lock is used to control access to hasQueuedMessages() and over the addition of messages to the queue.\n+     * to wait till the first message is added to the queue. This will ensure that the _queue has messages to be\n+     * delivered via the async thread. <p/> Lock is used to control access to hasQueuedMessages() and over the addition\n+     * of messages to the queue.\n      */\n     private ReentrantLock _lock = new ReentrantLock();\n     private AtomicLong _totalMessageSize = new AtomicLong();\n-\n+    private AtomicInteger _extraMessages = new AtomicInteger();\n+    private Set<Subscription> _hasContent = Collections.synchronizedSet(new HashSet<Subscription>());\n \n     ConcurrentSelectorDeliveryManager(SubscriptionManager subscriptions, AMQQueue queue)\n     {\n@@ -109,7 +103,7 @@\n     }\n \n \n-    private boolean addMessageToQueue(AMQMessage msg)\n+    private boolean addMessageToQueue(AMQMessage msg, boolean deliverFirst)\n     {\n         // Shrink the ContentBodies to their actual size to save memory.\n         if (compressBufferOnQueue)\n@@ -122,7 +116,14 @@ private boolean addMessageToQueue(AMQMessage msg)\n             }\n         }\n \n-        _messages.offer(msg);\n+        if (deliverFirst)\n+        {\n+            _messages.pushHead(msg);\n+        }\n+        else\n+        {\n+            _messages.offer(msg);\n+        }\n \n         _totalMessageSize.addAndGet(msg.getSize());\n \n@@ -135,7 +136,7 @@ public boolean hasQueuedMessages()\n         _lock.lock();\n         try\n         {\n-            return !_messages.isEmpty();\n+            return !(_messages.isEmpty() && _hasContent.isEmpty());\n         }\n         finally\n         {\n@@ -149,18 +150,17 @@ public int getQueueMessageCount()\n     }\n \n     /**\n-     * This is an EXPENSIVE opperation to perform with a ConcurrentLinkedQueue as it must run the queue to determine size.\n-     * The ConcurrentLinkedQueueAtomicSize uses an AtomicInteger to record the number of elements on the queue.\n+     * This is an EXPENSIVE opperation to perform with a ConcurrentLinkedQueue as it must run the queue to determine\n+     * size. The ConcurrentLinkedQueueAtomicSize uses an AtomicInteger to record the number of elements on the queue.\n      *\n      * @return int the number of messages in the delivery queue.\n      */\n     private int getMessageCount()\n     {\n-        return _messages.size();\n+        return _messages.size() + _extraMessages.get();\n     }\n \n \n-\n     public long getTotalMessageSize()\n     {\n         return _totalMessageSize.get();\n@@ -172,6 +172,38 @@ public long getOldestMessageArrival()\n         return msg == null ? Long.MAX_VALUE : msg.getArrivalTime();\n     }\n \n+    public void subscriberHasPendingResend(boolean hasContent, Subscription subscription, AMQMessage msg)\n+    {\n+        _lock.lock();\n+        try\n+        {\n+            if (hasContent)\n+            {\n+                _log.debug(\"Queue has adding subscriber content\");\n+                _hasContent.add(subscription);\n+                _totalMessageSize.addAndGet(msg.getSize());\n+                _extraMessages.addAndGet(1);\n+            }\n+            else\n+            {\n+                _log.debug(\"Queue has removing subscriber content\");\n+                if (msg == null)\n+                {\n+                    _hasContent.remove(subscription);\n+                }\n+                else\n+                {\n+                    _totalMessageSize.addAndGet(-msg.getSize());\n+                    _extraMessages.addAndGet(-1);\n+                }\n+            }\n+        }\n+        finally\n+        {\n+            _lock.unlock();\n+        }\n+    }\n+\n \n     public List<AMQMessage> getMessages()\n     {\n@@ -195,15 +227,15 @@ public void populatePreDeliveryQueue(Subscription subscription)\n             AMQMessage message = currentQueue.next();\n             if (subscription.hasInterest(message))\n             {\n-                subscription.enqueueForPreDelivery(message);\n+                subscription.enqueueForPreDelivery(message, false);\n             }\n         }\n     }\n \n     public boolean performGet(AMQProtocolSession protocolSession, AMQChannel channel, boolean acks) throws AMQException\n     {\n         AMQMessage msg = getNextMessage();\n-        if(msg == null)\n+        if (msg == null)\n         {\n             return false;\n         }\n@@ -229,7 +261,7 @@ public boolean performGet(AMQProtocolSession protocolSession, AMQChannel channel\n                     }\n                     _queue.dequeue(channel.getStoreContext(), msg);\n                 }\n-                synchronized(channel)\n+                synchronized (channel)\n                 {\n                     long deliveryTag = channel.getNextDeliveryTag();\n \n@@ -252,8 +284,8 @@ public boolean performGet(AMQProtocolSession protocolSession, AMQChannel channel\n     }\n \n     /**\n-     * For feature of moving messages, this method is used. It sets the lock and sets the movingMessages flag,\n-     * so that the asyn delivery is also stopped.\n+     * For feature of moving messages, this method is used. It sets the lock and sets the movingMessages flag, so that\n+     * the asyn delivery is also stopped.\n      */\n     public void startMovingMessages()\n     {\n@@ -262,8 +294,8 @@ public void startMovingMessages()\n     }\n \n     /**\n-     * Once moving messages to another queue is done or aborted, remove lock and unset the movingMessages flag,\n-     * so that the async delivery can start again.\n+     * Once moving messages to another queue is done or aborted, remove lock and unset the movingMessages flag, so that\n+     * the async delivery can start again.\n      */\n     public void stopMovingMessages()\n     {\n@@ -276,6 +308,7 @@ public void stopMovingMessages()\n \n     /**\n      * Messages will be removed from this queue and all preDeliveryQueues\n+     *\n      * @param messageList\n      */\n     public void removeMovedMessages(List<AMQMessage> messageList)\n@@ -308,7 +341,9 @@ public void removeMovedMessages(List<AMQMessage> messageList)\n \n     /**\n      * Now with implementation of predelivery queues, this method will mark the message on the top as taken.\n+     *\n      * @param storeContext\n+     *\n      * @throws AMQException\n      */\n     public void removeAMessageFromTop(StoreContext storeContext) throws AMQException\n@@ -318,11 +353,11 @@ public void removeAMessageFromTop(StoreContext storeContext) throws AMQException\n         if (msg != null)\n         {\n             // mark this message as taken and get it removed\n-            msg.taken();\n+            msg.taken(null);\n             _queue.dequeue(storeContext, msg);\n             getNextMessage();\n         }\n-        \n+\n         _lock.unlock();\n     }\n \n@@ -335,7 +370,7 @@ public long clearAllMessages(StoreContext storeContext) throws AMQException\n         while (msg != null)\n         {\n             //mark this message as taken and get it removed\n-            msg.taken();\n+            msg.taken(null);\n             _queue.dequeue(storeContext, msg);\n             msg = getNextMessage();\n             count++;\n@@ -347,20 +382,15 @@ public long clearAllMessages(StoreContext storeContext) throws AMQException\n \n     public synchronized AMQMessage getNextMessage() throws AMQException\n     {\n-        return getNextMessage(_messages);\n+        return getNextMessage(_messages, null);\n     }\n \n-\n-    private AMQMessage getNextMessage(Queue<AMQMessage> messages)\n-    {\n-        return getNextMessage(messages, false);\n-    }\n-\n-    private AMQMessage getNextMessage(Queue<AMQMessage> messages, boolean browsing)\n+    private AMQMessage getNextMessage(Queue<AMQMessage> messages, Subscription sub)\n     {\n         AMQMessage message = messages.peek();\n \n-        while (message != null && (browsing || message.taken()))\n+\n+        while (message != null && ((sub == null || sub.isBrowser()) || message.taken(sub)))\n         {\n             //remove the already taken message\n             messages.poll();\n@@ -371,27 +401,76 @@ private AMQMessage getNextMessage(Queue<AMQMessage> messages, boolean browsing)\n         return message;\n     }\n \n-    public void sendNextMessage(Subscription sub, Queue<AMQMessage> messageQueue)\n+    public void sendNextMessage(Subscription sub, AMQQueue queue)//Queue<AMQMessage> messageQueue)\n     {\n+\n+        Queue<AMQMessage> messageQueue = sub.getNextQueue(_messages);\n+\n+        if (_log.isTraceEnabled())\n+        {\n+            _log.trace(\"Async sendNextMessage for sub (\" + System.identityHashCode(sub) +\n+                       \") from queue (\" + System.identityHashCode(messageQueue) +\n+                       \") AMQQueue (\" + System.identityHashCode(queue) + \")\");\n+        }\n+\n+        if (messageQueue == null)\n+        {\n+            // There is no queue with messages currently. This is ok... just means the queue has no msgs matching selector\n+            if (_log.isDebugEnabled())\n+            {\n+                _log.debug(sub + \": asked to send messages but has none on given queue:\" + queue);\n+            }\n+            return;\n+        }\n+\n         AMQMessage message = null;\n         try\n         {\n-            message = getNextMessage(messageQueue, sub.isBrowser());\n+            message = getNextMessage(messageQueue, sub);\n \n             // message will be null if we have no messages in the messageQueue.\n             if (message == null)\n             {\n+                if (_log.isTraceEnabled())\n+                {\n+                    _log.trace(\"No messages for Subscriber(\" + System.identityHashCode(sub) + \") from queue; (\" + System.identityHashCode(messageQueue) + \")\");\n+                }\n                 return;\n             }\n             if (_log.isDebugEnabled())\n             {\n-                _log.debug(\"Async Delivery Message:\" + message + \" to :\" + sub);\n+                _log.debug(\"Async Delivery Message (\" + System.identityHashCode(message) +\n+                           \") by :\" + System.identityHashCode(this) +\n+                           \") to :\" + System.identityHashCode(sub));\n             }\n \n             sub.send(message, _queue);\n \n             //remove sent message from our queue.\n             messageQueue.poll();\n+            //If we don't remove the message from _messages\n+            // Otherwise the Async send will never end\n+\n+            if (messageQueue == sub.getResendQueue())\n+            {\n+                if (_log.isTraceEnabled())\n+                {\n+                    _log.trace(\"All messages sent from resendQueue for \" + sub);\n+                }\n+                if (messageQueue.isEmpty())\n+                {\n+                    subscriberHasPendingResend(false, sub, null);\n+                    //better to use the above method as this keeps all the tracking in one location.\n+//                    _hasContent.remove(sub);\n+                }\n+\n+                _extraMessages.decrementAndGet();\n+            }\n+            else if (messageQueue == sub.getPreDeliveryQueue())\n+            {\n+                _log.info(\"We could do clean up of the main _message queue here\");\n+            }\n+\n             _totalMessageSize.addAndGet(-message.getSize());\n         }\n         catch (AMQException e)\n@@ -403,6 +482,7 @@ public void sendNextMessage(Subscription sub, Queue<AMQMessage> messageQueue)\n \n     /**\n      * enqueues the messages in the list on the queue and all required predelivery queues\n+     *\n      * @param storeContext\n      * @param movedMessageList\n      */\n@@ -411,7 +491,7 @@ public void enqueueMovedMessages(StoreContext storeContext, List<AMQMessage> mov\n         _lock.lock();\n         for (AMQMessage msg : movedMessageList)\n         {\n-            addMessageToQueue(msg);\n+            addMessageToQueue(msg, true);\n         }\n \n         // enqueue on the pre delivery queues\n@@ -422,16 +502,16 @@ public void enqueueMovedMessages(StoreContext storeContext, List<AMQMessage> mov\n                 // Only give the message to those that want them.\n                 if (sub.hasInterest(msg))\n                 {\n-                    sub.enqueueForPreDelivery(msg);\n+                    sub.enqueueForPreDelivery(msg, true);\n                 }\n             }\n         }\n         _lock.unlock();\n     }\n \n     /**\n-     * Only one thread should ever execute this method concurrently, but\n-     * it can do so while other threads invoke deliver().\n+     * Only one thread should ever execute this method concurrently, but it can do so while other threads invoke\n+     * deliver().\n      */\n     private void processQueue()\n     {\n@@ -444,40 +524,43 @@ private void processQueue()\n \n             for (Subscription sub : _subscriptions.getSubscriptions())\n             {\n-                if (!sub.isSuspended())\n+                synchronized (sub.getSendLock())\n                 {\n-                    sendNextMessage(sub);\n-\n-                    hasSubscribers = true;\n-                }\n-            }\n-        }\n-    }\n+                    if (!sub.isSuspended())\n+                    {\n+                        sendNextMessage(sub, _queue);\n \n-    private void sendNextMessage(Subscription sub)\n-    {\n-        if (sub.hasFilters())\n-        {\n-            sendNextMessage(sub, sub.getPreDeliveryQueue());\n-            if (sub.isAutoClose())\n-            {\n-                if (sub.getPreDeliveryQueue().isEmpty())\n-                {\n-                    sub.close();\n+                        hasSubscribers = true;\n+                    }\n                 }\n             }\n         }\n-        else\n-        {\n-            sendNextMessage(sub, _messages);\n-        }\n     }\n \n-    public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) throws AMQException\n+//    private void sendNextMessage(Subscription sub)\n+//    {\n+//        if (sub.hasFilters())\n+//        {\n+//            sendNextMessage(sub, sub.getPreDeliveryQueue());\n+//            if (sub.isAutoClose())\n+//            {\n+//                if (sub.getPreDeliveryQueue().isEmpty())\n+//                {\n+//                    sub.close();\n+//                }\n+//            }\n+//        }\n+//        else\n+//        {\n+//            sendNextMessage(sub, _messages);\n+//        }\n+//    }\n+\n+    public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, boolean deliverFirst) throws AMQException\n     {\n         if (_log.isDebugEnabled())\n         {\n-            _log.debug(id() + \"deliver :\" + msg);\n+            _log.debug(id() + \"deliver :first(\" + deliverFirst + \") :\" + msg);\n         }\n         msg.release();\n \n@@ -491,11 +574,11 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) t\n             {\n                 if (_log.isDebugEnabled())\n                 {\n-                    _log.debug(id() + \"Testing Message(\" + msg + \") for Queued Delivery\");\n+                    _log.debug(id() + \"Testing Message(\" + msg + \") for Queued Delivery:\" + currentStatus());\n                 }\n                 if (!msg.getMessagePublishInfo().isImmediate())\n                 {\n-                    addMessageToQueue(msg);\n+                    addMessageToQueue(msg, deliverFirst);\n \n                     //release lock now message is on queue.\n                     _lock.unlock();\n@@ -504,7 +587,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) t\n                     if (_log.isDebugEnabled())\n                     {\n                         _log.debug(id() + \"We have \" + _subscriptions.getSubscriptions().size() +\n-                                   \" subscribers to give the message to.\");\n+                                   \" subscribers to give the message to:\" + currentStatus());\n                     }\n                     for (Subscription sub : _subscriptions.getSubscriptions())\n                     {\n@@ -528,7 +611,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) t\n                                 _log.debug(id() + \"Queuing message(\" + System.identityHashCode(msg) +\n                                            \") for PreDelivery for subscriber(\" + System.identityHashCode(sub) + \")\");\n                             }\n-                            sub.enqueueForPreDelivery(msg);\n+                            sub.enqueueForPreDelivery(msg, deliverFirst);\n                         }\n                     }\n                 }\n@@ -537,14 +620,47 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg) t\n             {\n                 //release lock now\n                 _lock.unlock();\n-\n-                if (_log.isDebugEnabled())\n+                synchronized (s.getSendLock())\n                 {\n-                    _log.debug(id() + \"Delivering Message:\" + System.identityHashCode(msg) + \" to(\" +\n-                               System.identityHashCode(s) + \") :\" + s);\n+                    if (!s.isSuspended())\n+                    {\n+                        if (_log.isDebugEnabled())\n+                        {\n+                            _log.debug(id() + \"Delivering Message:\" + System.identityHashCode(msg) + \" to(\" +\n+                                       System.identityHashCode(s) + \") :\" + s);\n+                        }\n+                        msg.taken(s);\n+                        //Deliver the message\n+                        s.send(msg, _queue);\n+                    }\n+                    else\n+                    {\n+                        if (_log.isDebugEnabled())\n+                        {\n+                            _log.debug(id() + \" Subscription(\" + System.identityHashCode(s) + \") became suspended between nextSubscriber and send\");\n+                        }\n+                    }\n+\n+                    if (!msg.isTaken())\n+                    {\n+                        if (_log.isDebugEnabled())\n+                        {\n+                            _log.debug(id() + \" Message(\" + System.identityHashCode(msg) + \") has not been taken so recursing!:\" +\n+                                       \" Subscriber:\" + System.identityHashCode(s));\n+                        }\n+\n+                        deliver(context, name, msg, deliverFirst);\n+                    }\n+                    else\n+                    {\n+                        if (_log.isDebugEnabled())\n+                        {\n+                            _log.debug(id() + \" Message(\" + System.identityHashCode(msg) +\n+                                       \") has been taken so disregarding deliver request to Subscriber:\" +\n+                                       System.identityHashCode(s));\n+                        }\n+                    }\n                 }\n-                //Deliver the message\n-                s.send(msg, _queue);\n             }\n         }\n         finally\n@@ -593,9 +709,7 @@ public void processAsync(Executor executor)\n     {\n         if (_log.isDebugEnabled())\n         {\n-            _log.debug(\"Processing Async. Queued:\" + hasQueuedMessages() + \"(\" + getQueueMessageCount() + \")\" +\n-                       \" Active:\" + _subscriptions.hasActiveSubscribers() +\n-                       \" Processing:\" + _processing.get());\n+            _log.debug(\"Processing Async.\" + currentStatus());\n         }\n \n         if (hasQueuedMessages() && _subscriptions.hasActiveSubscribers())\n@@ -608,4 +722,16 @@ public void processAsync(Executor executor)\n         }\n     }\n \n+    private String currentStatus()\n+    {\n+        return \" Queued:\" + (_messages.isEmpty() ? \"Empty \" : \"Contains\") +\n+               \"(\" + _messages.size() + \":\" + ((ConcurrentLinkedQueue) _messages).size() + \") \" +\n+               \" Extra: \" + (_hasContent.isEmpty() ? \"Empty \" : \"Contains\") +\n+               \"(\" + _hasContent.size() + \":\" + _extraMessages.get() + \") \" +\n+               \" Active:\" + _subscriptions.hasActiveSubscribers() +\n+               \" Processing:\" + _processing.get() +\n+               \" Queued:\" + (_messages.isEmpty() ? \"Empty \" : \"Contains\") +\n+               \"(\" + _messages.size() + \":\" + ((ConcurrentLinkedQueue) _messages).size() + \") \";\n+    }\n+\n }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java"}, {"additions": 19, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/DeliveryManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/DeliveryManager.java", "sha": "5b77951dfdd3472c2930ce9a81dfce6416d68bda", "changes": 36, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/DeliveryManager.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -32,8 +32,8 @@\n interface DeliveryManager\n {\n     /**\n-     * Determines whether there are queued messages. Sets _queueing to false if\n-     * there are no queued messages. This needs to be atomic.\n+     * Determines whether there are queued messages. Sets _queueing to false if there are no queued messages. This needs\n+     * to be atomic.\n      *\n      * @return true if there are queued messages\n      */\n@@ -43,34 +43,34 @@\n      * This method should not be used to determin if there are messages in the queue.\n      *\n      * @return int The number of messages in the queue\n+     *\n      * @use hasQueuedMessages() for all controls relating to having messages on the queue.\n      */\n     int getQueueMessageCount();\n \n     /**\n-     * Requests that the delivery manager start processing the queue asynchronously\n-     * if there is work that can be done (i.e. there are messages queued up and\n-     * subscribers that can receive them.\n-     * <p/>\n-     * This should be called when subscribers are added, but only after the consume-ok\n-     * message has been returned as message delivery may start immediately. It should also\n-     * be called after unsuspending a client.\n-     * <p/>\n+     * Requests that the delivery manager start processing the queue asynchronously if there is work that can be done\n+     * (i.e. there are messages queued up and subscribers that can receive them. <p/> This should be called when\n+     * subscribers are added, but only after the consume-ok message has been returned as message delivery may start\n+     * immediately. It should also be called after unsuspending a client. <p/>\n      *\n      * @param executor the executor on which the delivery should take place\n      */\n     void processAsync(Executor executor);\n \n     /**\n-     * Handles message delivery. The delivery manager is always in one of two modes;\n-     * it is either queueing messages for asynchronous delivery or delivering\n-     * directly.\n+     * Handles message delivery. The delivery manager is always in one of two modes; it is either queueing messages for\n+     * asynchronous delivery or delivering directly.\n+     *\n+     * @param storeContext\n+     * @param name         the name of the entity on whose behalf we are delivering the message\n+     * @param msg          the message to deliver\n+     * @param deliverFirst\n      *\n-     * @param name the name of the entity on whose behalf we are delivering the message\n-     * @param msg  the message to deliver\n-     * @throws org.apache.qpid.server.queue.FailedDequeueException if the message could not be dequeued\n+     * @throws org.apache.qpid.server.queue.FailedDequeueException\n+     *          if the message could not be dequeued\n      */\n-    void deliver(StoreContext storeContext, AMQShortString name, AMQMessage msg) throws FailedDequeueException, AMQException;\n+    void deliver(StoreContext storeContext, AMQShortString name, AMQMessage msg, boolean deliverFirst) throws FailedDequeueException, AMQException;\n \n     void removeAMessageFromTop(StoreContext storeContext) throws AMQException;\n \n@@ -93,4 +93,6 @@\n     long getTotalMessageSize();\n \n     long getOldestMessageArrival();\n+\n+    void subscriberHasPendingResend(boolean hasContent, Subscription subscription, AMQMessage msg);\n }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/DeliveryManager.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/Subscription.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/Subscription.java", "sha": "e9f209839a361fb1225bb479b4ba160a5be3bbad", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/Subscription.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -38,13 +38,23 @@\n \n     Queue<AMQMessage> getPreDeliveryQueue();\n \n-    void enqueueForPreDelivery(AMQMessage msg);\n+    Queue<AMQMessage> getResendQueue();\n+\n+    Queue<AMQMessage> getNextQueue(Queue<AMQMessage> messages);    \n+\n+    void enqueueForPreDelivery(AMQMessage msg, boolean deliverFirst);\n \n     boolean isAutoClose();\n \n     void close();\n \n+    boolean isClosed();\n+\n     boolean isBrowser();\n \n     boolean wouldSuspend(AMQMessage msg);\n+\n+    void addToResendQueue(AMQMessage msg);\n+\n+    Object getSendLock();\n }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/Subscription.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionFactory.java", "sha": "917f7c4e97c6e38b9d0354f55124125e2eac0d29", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionFactory.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -26,16 +26,16 @@\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n \n /**\n- * Allows the customisation of the creation of a subscription. This is typically done within an AMQQueue. This\n- * factory primarily assists testing although in future more sophisticated subscribers may need a different\n- * subscription implementation.\n+ * Allows the customisation of the creation of a subscription. This is typically done within an AMQQueue. This factory\n+ * primarily assists testing although in future more sophisticated subscribers may need a different subscription\n+ * implementation.\n  *\n  * @see org.apache.qpid.server.queue.AMQQueue\n  */\n public interface SubscriptionFactory\n {\n     Subscription createSubscription(int channel, AMQProtocolSession protocolSession, AMQShortString consumerTag, boolean acks,\n-                                    FieldTable filters, boolean noLocal) throws AMQException;\n+                                    FieldTable filters, boolean noLocal, AMQQueue queue) throws AMQException;\n \n \n     Subscription createSubscription(int channel, AMQProtocolSession protocolSession, AMQShortString consumerTag)", "filename": "broker/src/main/java/org/apache/qpid/server/queue/SubscriptionFactory.java"}, {"additions": 205, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java", "sha": "ede7731a06174a9b9b69cfe4e63ef00e9fda4f1c", "changes": 232, "status": "modified", "deletions": 27, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -21,10 +21,10 @@\n package org.apache.qpid.server.queue;\n \n import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n-import org.apache.qpid.AMQChannelException;\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.common.AMQPFilterTypes;\n import org.apache.qpid.common.ClientProperties;\n@@ -37,6 +37,8 @@\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n import org.apache.qpid.server.store.StoreContext;\n import org.apache.qpid.util.ConcurrentLinkedQueueAtomicSize;\n+import org.apache.qpid.util.MessageQueue;\n+import org.apache.qpid.util.ConcurrentLinkedMessageQueueAtomicSize;\n \n /**\n  * Encapsulation of a supscription to a queue. <p/> Ties together the protocol session of a subscriber, the consumer tag\n@@ -52,9 +54,11 @@\n \n     public final AMQShortString consumerTag;\n \n-    private final Object sessionKey;\n+    private final Object _sessionKey;\n \n-    private Queue<AMQMessage> _messages;\n+    private MessageQueue<AMQMessage> _messages;\n+\n+    private Queue<AMQMessage> _resendQueue;\n \n     private final boolean _noLocal;\n \n@@ -63,46 +67,55 @@\n     private FilterManager _filters;\n     private final boolean _isBrowser;\n     private final Boolean _autoClose;\n-    private boolean _closed = false;\n+    private boolean _sentClose = false;\n+\n     private static final String CLIENT_PROPERTIES_INSTANCE = ClientProperties.instance.toString();\n \n+    private AMQQueue _queue;\n+    private final AtomicBoolean _sendLock = new AtomicBoolean(false);\n+\n+\n     public static class Factory implements SubscriptionFactory\n     {\n-        public Subscription createSubscription(int channel, AMQProtocolSession protocolSession, AMQShortString consumerTag, boolean acks, FieldTable filters, boolean noLocal) throws AMQException\n+        public Subscription createSubscription(int channel, AMQProtocolSession protocolSession,\n+                                               AMQShortString consumerTag, boolean acks, FieldTable filters,\n+                                               boolean noLocal, AMQQueue queue) throws AMQException\n         {\n-            return new SubscriptionImpl(channel, protocolSession, consumerTag, acks, filters, noLocal);\n+            return new SubscriptionImpl(channel, protocolSession, consumerTag, acks, filters, noLocal, queue);\n         }\n \n         public SubscriptionImpl createSubscription(int channel, AMQProtocolSession protocolSession, AMQShortString consumerTag)\n                 throws AMQException\n         {\n-            return new SubscriptionImpl(channel, protocolSession, consumerTag, false, null, false);\n+            return new SubscriptionImpl(channel, protocolSession, consumerTag, false, null, false, null);\n         }\n     }\n \n     public SubscriptionImpl(int channelId, AMQProtocolSession protocolSession,\n                             AMQShortString consumerTag, boolean acks)\n             throws AMQException\n     {\n-        this(channelId, protocolSession, consumerTag, acks, null, false);\n+        this(channelId, protocolSession, consumerTag, acks, null, false, null);\n     }\n \n     public SubscriptionImpl(int channelId, AMQProtocolSession protocolSession,\n-                            AMQShortString consumerTag, boolean acks, FieldTable filters, boolean noLocal)\n+                            AMQShortString consumerTag, boolean acks, FieldTable filters,\n+                            boolean noLocal, AMQQueue queue)\n             throws AMQException\n     {\n         AMQChannel channel = protocolSession.getChannel(channelId);\n         if (channel == null)\n-        {            \n+        {\n             throw new AMQException(AMQConstant.NOT_FOUND, \"channel :\" + channelId + \" not found in protocol session\");\n         }\n \n         this.channel = channel;\n         this.protocolSession = protocolSession;\n         this.consumerTag = consumerTag;\n-        sessionKey = protocolSession.getKey();\n+        _sessionKey = protocolSession.getKey();\n         _acks = acks;\n         _noLocal = noLocal;\n+        _queue = queue;\n \n         _filters = FilterManagerFactory.createManager(filters);\n \n@@ -145,9 +158,7 @@ public SubscriptionImpl(int channelId, AMQProtocolSession protocolSession,\n \n         if (_filters != null)\n         {\n-            _messages = new ConcurrentLinkedQueueAtomicSize<AMQMessage>();\n-\n-\n+            _messages = new ConcurrentLinkedMessageQueueAtomicSize<AMQMessage>();\n         }\n         else\n         {\n@@ -169,30 +180,47 @@ public boolean equals(Object o)\n         return (o instanceof SubscriptionImpl) && equals((SubscriptionImpl) o);\n     }\n \n-    /** Equality holds if the session matches and the channel and consumer tag are the same. */\n+    /**\n+     * Equality holds if the session matches and the channel and consumer tag are the same.\n+     *\n+     * @param psc The subscriptionImpl to compare\n+     *\n+     * @return equality\n+     */\n     private boolean equals(SubscriptionImpl psc)\n     {\n-        return sessionKey.equals(psc.sessionKey)\n+        return _sessionKey.equals(psc._sessionKey)\n                && psc.channel == channel\n                && psc.consumerTag.equals(consumerTag);\n     }\n \n     public int hashCode()\n     {\n-        return sessionKey.hashCode();\n+        return _sessionKey.hashCode();\n     }\n \n     public String toString()\n     {\n-        return \"[channel=\" + channel + \", consumerTag=\" + consumerTag + \", session=\" + protocolSession.getKey() + \"]\";\n+        String subscriber = \"[channel=\" + channel +\n+                            \", consumerTag=\" + consumerTag +\n+                            \", session=\" + protocolSession.getKey() +\n+                            \", resendQueue=\" + (_resendQueue != null);\n+\n+        if (_resendQueue != null)\n+        {\n+            subscriber += \", resendSize=\" + _resendQueue.size();\n+        }\n+\n+\n+        return subscriber + \"]\";\n     }\n \n     /**\n      * This method can be called by each of the publisher threads. As a result all changes to the channel object must be\n      * thread safe.\n      *\n-     * @param msg\n-     * @param queue\n+     * @param msg   The message to send\n+     * @param queue the Queue it has been sent from\n      *\n      * @throws AMQException\n      */\n@@ -278,7 +306,18 @@ private void sendToConsumer(StoreContext storeContext, AMQMessage msg, AMQQueue\n \n     public boolean isSuspended()\n     {\n-        return channel.isSuspended();\n+        if (_logger.isTraceEnabled())\n+        {\n+            if (channel.isSuspended())\n+            {\n+                _logger.trace(\"Subscription(\" + System.identityHashCode(this) + \") channel's is susupended\");\n+            }\n+            if (_sendLock.get())\n+            {\n+                _logger.trace(\"Subscription(\" + System.identityHashCode(this) + \") has sendLock set so closing.\");\n+            }\n+        }\n+        return channel.isSuspended() || _sendLock.get();\n     }\n \n     /**\n@@ -376,11 +415,18 @@ private boolean checkFilters(AMQMessage msg)\n         return _messages;\n     }\n \n-    public void enqueueForPreDelivery(AMQMessage msg)\n+    public void enqueueForPreDelivery(AMQMessage msg, boolean deliverFirst)\n     {\n         if (_messages != null)\n         {\n-            _messages.offer(msg);\n+            if (deliverFirst)\n+            {\n+                _messages.pushHead(msg);\n+            }\n+            else\n+            {\n+                _messages.offer(msg);\n+            }\n         }\n     }\n \n@@ -391,19 +437,95 @@ public boolean isAutoClose()\n \n     public void close()\n     {\n-        if (!_closed)\n+        synchronized (_sendLock)\n+        {\n+            if (_logger.isDebugEnabled())\n+            {\n+                _logger.debug(\"Setting SendLock true\");\n+            }\n+\n+            _sendLock.set(true);\n+\n+        }\n+        if (_logger.isInfoEnabled())\n+        {\n+            _logger.info(\"Closing subscription (\" + System.identityHashCode(this) + \"):\" + this);\n+        }\n+\n+        if (_resendQueue != null && !_resendQueue.isEmpty())\n+        {\n+            requeue();\n+        }\n+\n+        //remove references in PDQ\n+        if (_messages != null)\n+        {\n+            _messages.clear();\n+        }\n+\n+        if (_autoClose && !_sentClose)\n         {\n             _logger.info(\"Closing autoclose subscription:\" + this);\n             // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)\n             // TODO: Connect this to the session version obtained from ProtocolInitiation for this session.\n             // Be aware of possible changes to parameter order as versions change.\n             protocolSession.writeFrame(BasicCancelOkBody.createAMQFrame(channel.getChannelId(),\n-                                                                        protocolSession.getProtocolMajorVersion(),\n-                                                                        protocolSession.getProtocolMinorVersion(),\n+                                                                        (byte) 8, (byte) 0,    // AMQP version (major, minor)\n                                                                         consumerTag    // consumerTag\n             ));\n-            _closed = true;\n+            _sentClose = true;\n+        }\n+    }\n+\n+    private void requeue()\n+    {\n+        if (_queue != null)\n+        {\n+            if (_logger.isDebugEnabled())\n+            {\n+                _logger.debug(\"Requeuing :\" + _resendQueue.size() + \" messages\");\n+            }\n+\n+            while (!_resendQueue.isEmpty())\n+            {\n+                AMQMessage resent = _resendQueue.poll();\n+\n+                resent.release();\n+                _queue.subscriberHasPendingResend(false, this, resent);\n+\n+                try\n+                {\n+                    channel.getTransactionalContext().deliver(resent, _queue, true);\n+                }\n+                catch (AMQException e)\n+                {\n+                    _logger.error(\"Unable to re-deliver messages\", e);\n+                }\n+            }\n+\n+            if (!_resendQueue.isEmpty())\n+            {\n+                _logger.error(\"[MESSAGES LOST]Unable to re-deliver messages as queue is null.\");\n+            }\n+\n+            _queue.subscriberHasPendingResend(false, this, null);\n         }\n+        else\n+        {\n+            if (!_resendQueue.isEmpty())\n+            {\n+                _logger.error(\"Unable to re-deliver messages as queue is null.\");\n+            }\n+        }\n+\n+        // Clear the messages\n+        _resendQueue = null;\n+    }\n+\n+\n+    public boolean isClosed()\n+    {\n+        return _sendLock.get(); // This rather than _close is used to signify the subscriber is now closed.\n     }\n \n     public boolean isBrowser()\n@@ -416,5 +538,61 @@ public boolean wouldSuspend(AMQMessage msg)\n         return channel.wouldSuspend(msg);\n     }\n \n+    public Queue<AMQMessage> getResendQueue()\n+    {\n+        if (_resendQueue == null)\n+        {\n+            _resendQueue = new ConcurrentLinkedQueueAtomicSize<AMQMessage>();\n+        }\n+        return _resendQueue;\n+    }\n+\n+\n+    public Queue<AMQMessage> getNextQueue(Queue<AMQMessage> messages)\n+    {\n+        if (_resendQueue != null && !_resendQueue.isEmpty())\n+        {\n+            return _resendQueue;\n+        }\n+\n+        if (_filters != null)\n+        {\n+            if (isAutoClose())\n+            {\n+                if (_messages.isEmpty())\n+                {\n+                    close();\n+                    return null;\n+                }\n+            }\n+            return _messages;\n+        }\n+        else // we want the DM queue\n+        {\n+            return messages;\n+        }\n+    }\n+\n+    public void addToResendQueue(AMQMessage msg)\n+    {\n+        // add to our resend queue\n+        getResendQueue().add(msg);\n+\n+        // Mark Queue has having content.\n+        if (_queue == null)\n+        {\n+            _logger.error(\"Queue is null won't be able to resend messages\");\n+        }\n+        else\n+        {\n+            _queue.subscriberHasPendingResend(true, this, msg);\n+        }\n+    }\n+\n+    public Object getSendLock()\n+    {\n+        return _sendLock;\n+    }\n+\n \n }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java"}, {"additions": 40, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionSet.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionSet.java", "sha": "26b040aae03a03c88f6c143c519c2f1e45b17c61", "changes": 70, "status": "modified", "deletions": 30, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionSet.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -27,49 +27,64 @@\n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n \n-/**\n- * Holds a set of subscriptions for a queue and manages the round\n- * robin-ing of deliver etc.\n- */\n+/** Holds a set of subscriptions for a queue and manages the round robin-ing of deliver etc. */\n class SubscriptionSet implements WeightedSubscriptionManager\n {\n     private static final Logger _log = Logger.getLogger(SubscriptionSet.class);\n \n-    /**\n-     * List of registered subscribers\n-     */\n+    /** List of registered subscribers */\n     private List<Subscription> _subscriptions = new CopyOnWriteArrayList<Subscription>();\n \n-    /**\n-     * Used to control the round robin delivery of content\n-     */\n+    /** Used to control the round robin delivery of content */\n     private int _currentSubscriber;\n+    private final Object _subscriptionsChange = new Object();\n \n-    /**\n-     * Accessor for unit tests.\n-     */\n+\n+    /** Accessor for unit tests. */\n     int getCurrentSubscriber()\n     {\n         return _currentSubscriber;\n     }\n \n     public void addSubscriber(Subscription subscription)\n     {\n-        _subscriptions.add(subscription);\n+        synchronized (_subscriptionsChange)\n+        {\n+            _subscriptions.add(subscription);\n+        }\n     }\n \n     /**\n      * Remove the subscription, returning it if it was found\n      *\n      * @param subscription\n+     *\n      * @return null if no match was found\n      */\n     public Subscription removeSubscriber(Subscription subscription)\n     {\n-        boolean isRemoved = _subscriptions.remove(subscription); // TODO: possibly need O(1) operation here.\n-        if (isRemoved)\n+        // TODO: possibly need O(1) operation here.\n+\n+        Subscription sub = null;\n+        synchronized (_subscriptionsChange)\n         {\n-            return subscription;\n+            int subIndex = _subscriptions.indexOf(subscription);\n+\n+            if (subIndex != -1)\n+            {\n+                //we can't just return the passed in subscription as it is a new object\n+                // and doesn't contain the stored state we need.\n+                //NOTE while this may be removed now anyone with an iterator will still have it in the list!!\n+                sub = _subscriptions.remove(subIndex);\n+            }\n+            else\n+            {\n+                _log.error(\"Unable to remove from index(\" + subIndex + \")subscription:\" + subscription);\n+            }\n+        }\n+        if (sub != null)\n+        {\n+            return sub;\n         }\n         else\n         {\n@@ -92,14 +107,11 @@ private void debugDumpSubscription(Subscription subscription)\n     }\n \n     /**\n-     * Return the next unsuspended subscription or null if not found.\n-     * <p/>\n-     * Performance note:\n-     * This method can scan all items twice when looking for a subscription that is not\n-     * suspended. The worst case occcurs when all subscriptions are suspended. However, it is does this\n-     * without synchronisation and subscriptions may be added and removed concurrently. Also note that because of\n-     * race conditions and when subscriptions are removed between calls to nextSubscriber, the\n-     * IndexOutOfBoundsException also causes the scan to start at the beginning.\n+     * Return the next unsuspended subscription or null if not found. <p/> Performance note: This method can scan all\n+     * items twice when looking for a subscription that is not suspended. The worst case occcurs when all subscriptions\n+     * are suspended. However, it is does this without synchronisation and subscriptions may be added and removed\n+     * concurrently. Also note that because of race conditions and when subscriptions are removed between calls to\n+     * nextSubscriber, the IndexOutOfBoundsException also causes the scan to start at the beginning.\n      */\n     public Subscription nextSubscriber(AMQMessage msg)\n     {\n@@ -156,9 +168,7 @@ private Subscription nextSubscriberImpl(AMQMessage msg)\n         return null;\n     }\n \n-    /**\n-     * Overridden in test classes.\n-     */\n+    /** Overridden in test classes. */\n     protected void subscriberScanned()\n     {\n     }\n@@ -199,8 +209,8 @@ public int getWeight()\n     }\n \n     /**\n-     * Notification that a queue has been deleted. This is called so that the subscription can inform the\n-     * channel, which in turn can update its list of unacknowledged messages.\n+     * Notification that a queue has been deleted. This is called so that the subscription can inform the channel, which\n+     * in turn can update its list of unacknowledged messages.\n      *\n      * @param queue\n      */", "filename": "broker/src/main/java/org/apache/qpid/server/queue/SubscriptionSet.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/state/AMQStateManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/state/AMQStateManager.java", "sha": "d12f5cd084246dc0a75009a2754b4015094d42bf", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/state/AMQStateManager.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -55,6 +55,7 @@\n import org.apache.qpid.framing.TxCommitBody;\n import org.apache.qpid.framing.TxRollbackBody;\n import org.apache.qpid.framing.TxSelectBody;\n+import org.apache.qpid.framing.BasicRejectBody;\n import org.apache.qpid.protocol.AMQMethodEvent;\n import org.apache.qpid.protocol.AMQMethodListener;\n import org.apache.qpid.server.handler.BasicAckMethodHandler;\n@@ -82,8 +83,9 @@\n import org.apache.qpid.server.handler.QueueDeleteHandler;\n import org.apache.qpid.server.handler.QueuePurgeHandler;\n import org.apache.qpid.server.handler.TxCommitHandler;\n-import org.apache.qpid.server.handler.TxRollbackHandler;\n+import org.apache.qpid.server.handler.BasicRejectMethodHandler;\n import org.apache.qpid.server.handler.TxSelectHandler;\n+import org.apache.qpid.server.handler.TxRollbackHandler;\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n \n@@ -173,6 +175,7 @@ protected void registerListeners()\n         frame2handlerMap.put(TxSelectBody.class, TxSelectHandler.getInstance());\n         frame2handlerMap.put(TxCommitBody.class, TxCommitHandler.getInstance());\n         frame2handlerMap.put(TxRollbackBody.class, TxRollbackHandler.getInstance());\n+        frame2handlerMap.put(BasicRejectBody.class, BasicRejectMethodHandler.getInstance());\n \n         _state2HandlersMap.put(AMQState.CONNECTION_OPEN, frame2handlerMap);\n ", "filename": "broker/src/main/java/org/apache/qpid/server/state/AMQStateManager.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/24487f19ced251829a21d114c18acc59bd018727/broker/src/main/java/org/apache/qpid/server/txn/DeliverMessageOperation.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/24487f19ced251829a21d114c18acc59bd018727/broker/src/main/java/org/apache/qpid/server/txn/DeliverMessageOperation.java", "sha": "4dff514ff4ebdcc261978d2e39f3d15ea04fc117", "changes": 74, "status": "removed", "deletions": 74, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/txn/DeliverMessageOperation.java?ref=24487f19ced251829a21d114c18acc59bd018727", "patch": "@@ -1,74 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.server.txn;\n-\n-import org.apache.log4j.Logger;\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.server.queue.AMQMessage;\n-import org.apache.qpid.server.queue.AMQQueue;\n-import org.apache.qpid.server.store.StoreContext;\n-\n-/**\n- * @author Robert Greig (robert.j.greig@jpmorgan.com)\n- */\n-public class DeliverMessageOperation implements TxnOp\n-{\n-    private static final Logger _logger = Logger.getLogger(DeliverMessageOperation.class);\n-\n-    private final AMQMessage _msg;\n-\n-    private final AMQQueue _queue;\n-\n-    public DeliverMessageOperation(AMQMessage msg, AMQQueue queue)\n-    {\n-        _msg = msg;\n-        _queue = queue;\n-        _msg.incrementReference();\n-    }\n-\n-    public void prepare(StoreContext context) throws AMQException\n-    {\n-    }\n-\n-    public void undoPrepare()\n-    {\n-    }\n-\n-    public void commit(StoreContext context) throws AMQException\n-    {\n-        //do the memeory part of the record()\n-        _msg.incrementReference();\n-        //then process the message\n-        try\n-        {\n-            _queue.process(context, _msg);\n-        }\n-        catch (AMQException e)\n-        {\n-            //TODO: is there anything else we can do here? I think not...\n-            _logger.error(\"Error during commit of a queue delivery: \" + e, e);\n-        }\n-    }\n-\n-    public void rollback(StoreContext storeContext)\n-    {\n-    }\n-}", "filename": "broker/src/main/java/org/apache/qpid/server/txn/DeliverMessageOperation.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java", "sha": "e5cce672f644c61dfa923e42812bc87aac0e68ce", "changes": 15, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -31,9 +31,7 @@\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreContext;\n \n-/**\n- * A transactional context that only supports local transactions.\n- */\n+/** A transactional context that only supports local transactions. */\n public class LocalTransactionalContext implements TransactionalContext\n {\n     private static final Logger _log = Logger.getLogger(LocalTransactionalContext.class);\n@@ -62,12 +60,14 @@\n     {\n         public AMQMessage message;\n         public AMQQueue queue;\n+        private boolean deliverFirst;\n \n \n-        public DeliveryDetails(AMQMessage message, AMQQueue queue)\n+        public DeliveryDetails(AMQMessage message, AMQQueue queue, boolean deliverFirst)\n         {\n             this.message = message;\n             this.queue = queue;\n+            this.deliverFirst = deliverFirst;\n         }\n     }\n \n@@ -89,9 +89,10 @@ public StoreContext getStoreContext()\n     public void rollback() throws AMQException\n     {\n         _txnBuffer.rollback(_storeContext);\n+        _postCommitDeliveryList.clear();\n     }\n \n-    public void deliver(AMQMessage message, AMQQueue queue) throws AMQException\n+    public void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) throws AMQException\n     {\n         // A publication will result in the enlisting of several\n         // TxnOps. The first is an op that will store the message.\n@@ -100,7 +101,7 @@ public void deliver(AMQMessage message, AMQQueue queue) throws AMQException\n         // enqueued. Finally a cleanup op will be added to decrement\n         // the reference associated with the routing.\n         message.incrementReference();\n-        _postCommitDeliveryList.add(new DeliveryDetails(message, queue));\n+        _postCommitDeliveryList.add(new DeliveryDetails(message, queue, deliverFirst));\n         _messageDelivered = true;\n         /*_txnBuffer.enlist(new DeliverMessageOperation(message, queue));\n         if (_log.isDebugEnabled())\n@@ -225,7 +226,7 @@ private void postCommitDelivery() throws AMQException\n         {\n             for (DeliveryDetails dd : _postCommitDeliveryList)\n             {\n-                dd.queue.process(_storeContext, dd.message);\n+                dd.queue.process(_storeContext, dd.message, dd.deliverFirst);\n             }\n         }\n         finally", "filename": "broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java", "sha": "19146da22eecb47b4c87b6f6fa8756811d9018bb", "changes": 20, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -34,21 +34,15 @@\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreContext;\n \n-/**\n- * @author Apache Software Foundation\n- */\n+/** @author Apache Software Foundation */\n public class NonTransactionalContext implements TransactionalContext\n {\n     private static final Logger _log = Logger.getLogger(NonTransactionalContext.class);\n \n-    /**\n-     * Channel is useful for logging\n-     */\n+    /** Channel is useful for logging */\n     private final AMQChannel _channel;\n \n-    /**\n-     * Where to put undeliverable messages\n-     */\n+    /** Where to put undeliverable messages */\n     private final List<RequiredDeliveryException> _returnMessages;\n \n     private Set<Long> _browsedAcks;\n@@ -57,9 +51,7 @@\n \n     private StoreContext _storeContext;\n \n-    /**\n-     * Whether we are in a transaction\n-     */\n+    /** Whether we are in a transaction */\n     private boolean _inTran;\n \n     public NonTransactionalContext(MessageStore messageStore, StoreContext storeContext, AMQChannel channel,\n@@ -97,12 +89,12 @@ public void rollback() throws AMQException\n         // Does not apply to this context\n     }\n \n-    public void deliver(AMQMessage message, AMQQueue queue) throws AMQException\n+    public void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) throws AMQException\n     {\n         try\n         {\n             message.incrementReference();\n-            queue.process(_storeContext, message);\n+            queue.process(_storeContext, message, deliverFirst);\n             //following check implements the functionality\n             //required by the 'immediate' flag:\n             message.checkDeliveredToConsumer();", "filename": "broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java", "sha": "88451e2fca9f6a51eb4f46309172432b676db699", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -38,7 +38,7 @@\n \n     void rollback() throws AMQException;\n \n-    void deliver(AMQMessage message, AMQQueue queue) throws AMQException;\n+    void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) throws AMQException;\n \n     void acknowledgeMessage(long deliveryTag, long lastDeliveryTag, boolean multiple,\n                             UnacknowledgedMessageMap unacknowledgedMessageMap) throws AMQException;", "filename": "broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java"}, {"additions": 24, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/main/java/org/apache/qpid/client/AMQSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/main/java/org/apache/qpid/client/AMQSession.java", "sha": "89f596e5411053db4479886d724915a2d13a9894", "changes": 44, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQSession.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -255,13 +255,16 @@ final boolean connectionStopped()\n             return _connectionStopped;\n         }\n \n-        void setConnectionStopped(boolean connectionStopped)\n+        boolean setConnectionStopped(boolean connectionStopped)\n         {\n+            boolean currently;\n             synchronized (_lock)\n             {\n+                currently = _connectionStopped;\n                 _connectionStopped = connectionStopped;\n                 _lock.notify();\n             }\n+            return currently;\n         }\n \n         private void dispatchMessage(UnprocessedMessage message)\n@@ -543,7 +546,7 @@ public void rollback() throws JMSException\n \n                 if (!isSuspended)\n                 {\n-//                    suspendChannel(true);\n+                    suspendChannel(true);\n                 }\n \n                 _connection.getProtocolHandler().syncWrite(\n@@ -556,7 +559,7 @@ public void rollback() throws JMSException\n \n                 if (!isSuspended)\n                 {\n-//                    suspendChannel(false);\n+                    suspendChannel(false);\n                 }\n             }\n             catch (AMQException e)\n@@ -822,10 +825,10 @@ public void recover() throws JMSException\n \n             boolean isSuspended = isSuspended();\n \n-//            if (!isSuspended)\n-//            {\n-//                suspendChannel(true);\n-//            }\n+            if (!isSuspended)\n+            {\n+                suspendChannel(true);\n+            }\n \n             for (BasicMessageConsumer consumer : _consumers.values())\n             {\n@@ -841,15 +844,15 @@ public void recover() throws JMSException\n                                                                                        false)    // requeue\n                     , BasicRecoverOkBody.class);\n \n-//            if (_dispatcher != null)\n-//            {\n-//                _dispatcher.rollback();\n-//            }\n-//\n-//            if (!isSuspended)\n-//            {\n-//                suspendChannel(false);\n-//            }\n+            if (_dispatcher != null)\n+            {\n+                _dispatcher.rollback();\n+            }\n+\n+            if (!isSuspended)\n+            {\n+                suspendChannel(false);\n+            }\n         }\n         catch (AMQException e)\n         {\n@@ -1952,7 +1955,7 @@ void deregisterConsumer(BasicMessageConsumer consumer)\n             if (_dispatcher == null)\n             {\n                 rejectMessagesForConsumerTag(consumer.getConsumerTag(), true);\n-            }\n+            }// if the dispatcher is running we have to do the clean up in the Ok Handler.\n         }\n     }\n \n@@ -2171,8 +2174,9 @@ private void rejectAllMessages(boolean requeue)\n         rejectMessagesForConsumerTag(null, requeue);\n     }\n \n-    /** @param consumerTag The consumerTag to prune from queue or all if null\n-     * @param requeue Should the removed messages be requeued (or discarded. Possibly to DLQ)\n+    /**\n+     * @param consumerTag The consumerTag to prune from queue or all if null\n+     * @param requeue     Should the removed messages be requeued (or discarded. Possibly to DLQ)\n      */\n \n     private void rejectMessagesForConsumerTag(AMQShortString consumerTag, boolean requeue)\n@@ -2192,7 +2196,7 @@ private void rejectMessagesForConsumerTag(AMQShortString consumerTag, boolean re\n \n                 messages.remove();\n \n-//                rejectMessage(message.getDeliverBody().deliveryTag, requeue);\n+                rejectMessage(message.getDeliverBody().deliveryTag, requeue);\n \n                 _logger.debug(\"Rejected the message(\" + message.getDeliverBody() + \") for consumer :\" + consumerTag);\n             }", "filename": "client/src/main/java/org/apache/qpid/client/AMQSession.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java", "sha": "e9b914425aa8788fd31ee099f77f6a449db3495e", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -745,28 +745,32 @@ public void rollback()\n             {\n                 _logger.debug(\"Rejecting the messages for consumer with tag:\" + _consumerTag);\n             }\n-            for (Object o : _synchronousQueue)\n+            Iterator iterator = _synchronousQueue.iterator();\n+            while (iterator.hasNext())\n             {\n+                Object o = iterator.next();\n+\n                 if (o instanceof AbstractJMSMessage)\n                 {\n-//                    _session.rejectMessage(((AbstractJMSMessage) o).getDeliveryTag(), true);\n+                    _session.rejectMessage(((AbstractJMSMessage) o).getDeliveryTag(), true);\n \n                     if (_logger.isTraceEnabled())\n                     {\n                         _logger.trace(\"Rejected message\" + o);\n+                        iterator.remove();\n                     }\n \n                 }\n                 else\n                 {\n                     _logger.error(\"Queue contained a :\" + o.getClass() +\n-                                 \" unable to reject as it is not an AbstractJMSMessage. Will be cleared\");\n+                                  \" unable to reject as it is not an AbstractJMSMessage. Will be cleared\");\n                 }\n             }\n \n             if (_synchronousQueue.size() != 0)\n             {\n-                _logger.warn(\"Queue was not empty after rejecting all messages\");\n+                _logger.warn(\"Queue was not empty after rejecting all messages Remaining:\" + _synchronousQueue.size());\n             }\n \n             _synchronousQueue.clear();", "filename": "client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java"}, {"additions": 17, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java", "sha": "36dd4d400cf6fa649c63ec758aebb400c4264e05", "changes": 29, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -87,17 +87,17 @@ protected AbstractJMSMessage(long deliveryTag, BasicContentHeaderProperties cont\n         switch (contentType)\n         {\n \n-        case AMQDestination.QUEUE_TYPE:\n-            dest = new AMQQueue(exchange, routingKey, routingKey);\n-            break;\n+            case AMQDestination.QUEUE_TYPE:\n+                dest = new AMQQueue(exchange, routingKey, routingKey);\n+                break;\n \n-        case AMQDestination.TOPIC_TYPE:\n-            dest = new AMQTopic(exchange, routingKey, null);\n-            break;\n+            case AMQDestination.TOPIC_TYPE:\n+                dest = new AMQTopic(exchange, routingKey, null);\n+                break;\n \n-        default:\n-            dest = new AMQUndefinedDestination(exchange, routingKey, null);\n-            break;\n+            default:\n+                dest = new AMQUndefinedDestination(exchange, routingKey, null);\n+                break;\n         }\n         //Destination dest = AMQDestination.createDestination(url);\n         setJMSDestination(dest);\n@@ -203,7 +203,7 @@ public void setJMSReplyTo(Destination destination) throws JMSException\n         if (!(destination instanceof AMQDestination))\n         {\n             throw new IllegalArgumentException(\n-                \"ReplyTo destination may only be an AMQDestination - passed argument was type \" + destination.getClass());\n+                    \"ReplyTo destination may only be an AMQDestination - passed argument was type \" + destination.getClass());\n         }\n \n         final AMQDestination amqd = (AMQDestination) destination;\n@@ -495,8 +495,8 @@ public void acknowledge() throws JMSException\n     public abstract void clearBodyImpl() throws JMSException;\n \n     /**\n-     * Get a String representation of the body of the message. Used in the\n-     * toString() method which outputs this before message properties.\n+     * Get a String representation of the body of the message. Used in the toString() method which outputs this before\n+     * message properties.\n      */\n     public abstract String toBodyString() throws JMSException;\n \n@@ -519,7 +519,12 @@ public String toString()\n             buf.append(\"\\nJMS priority: \").append(getJMSPriority());\n             buf.append(\"\\nJMS delivery mode: \").append(getJMSDeliveryMode());\n             buf.append(\"\\nJMS reply to: \").append(String.valueOf(getJMSReplyTo()));\n+            buf.append(\"\\nJMS Redelivered: \").append(_redelivered);\n+            buf.append(\"\\nJMS Destination: \").append(getJMSDestination());\n+            buf.append(\"\\nJMS Type: \").append(getJMSType());\n+            buf.append(\"\\nJMS MessageID: \").append(getJMSMessageID());\n             buf.append(\"\\nAMQ message number: \").append(_deliveryTag);\n+\n             buf.append(\"\\nProperties:\");\n             if (getJmsHeaders().isEmpty())\n             {", "filename": "client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java"}, {"additions": 29, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java", "sha": "d0cc52271a02204bb0a8413f0d0035935a2fb520", "changes": 74, "status": "modified", "deletions": 45, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -65,15 +65,12 @@\n     private static final Logger _logger = Logger.getLogger(AMQProtocolHandler.class);\n \n     /**\n-     * The connection that this protocol handler is associated with. There is a 1-1\n-     * mapping between connection instances and protocol handler instances.\n+     * The connection that this protocol handler is associated with. There is a 1-1 mapping between connection instances\n+     * and protocol handler instances.\n      */\n     private AMQConnection _connection;\n \n-    /**\n-     * Our wrapper for a protocol session that provides access to session values\n-     * in a typesafe manner.\n-     */\n+    /** Our wrapper for a protocol session that provides access to session values in a typesafe manner. */\n     private volatile AMQProtocolSession _protocolSession;\n \n     private AMQStateManager _stateManager = new AMQStateManager();\n@@ -120,8 +117,8 @@ public void sessionCreated(IoSession session) throws Exception\n         // we only add the SSL filter where we have an SSL connection\n         if (_connection.getSSLConfiguration() != null)\n         {\n-        \tSSLConfiguration sslConfig = _connection.getSSLConfiguration();\n-        \tSSLContextFactory sslFactory = new SSLContextFactory(sslConfig.getKeystorePath(), sslConfig.getKeystorePassword(), sslConfig.getCertType()); \n+            SSLConfiguration sslConfig = _connection.getSSLConfiguration();\n+            SSLContextFactory sslFactory = new SSLContextFactory(sslConfig.getKeystorePath(), sslConfig.getKeystorePassword(), sslConfig.getCertType());\n             SSLFilter sslFilter = new SSLFilter(sslFactory.buildClientContext());\n             sslFilter.setUseClientMode(true);\n             session.getFilterChain().addBefore(\"protocolFilter\", \"ssl\", sslFilter);\n@@ -139,7 +136,7 @@ public void sessionCreated(IoSession session) throws Exception\n         {\n             e.printStackTrace();\n         }\n-  \n+\n         _protocolSession = new AMQProtocolSession(this, session, _connection, getStateManager());\n         _protocolSession.init();\n     }\n@@ -154,6 +151,7 @@ public void sessionOpened(IoSession session) throws Exception\n      * sessionClosed() depending on whether we were trying to send data at the time of failure.\n      *\n      * @param session\n+     *\n      * @throws Exception\n      */\n     public void sessionClosed(IoSession session) throws Exception\n@@ -208,9 +206,7 @@ public void sessionClosed(IoSession session) throws Exception\n         _logger.info(\"Protocol Session [\" + this + \"] closed\");\n     }\n \n-    /**\n-     * See {@link FailoverHandler} to see rationale for separate thread.\n-     */\n+    /** See {@link FailoverHandler} to see rationale for separate thread. */\n     private void startFailoverThread()\n     {\n         Thread failoverThread = new Thread(_failoverHandler);\n@@ -267,10 +263,9 @@ else if (_failoverState == FailoverState.FAILED)\n     }\n \n     /**\n-     * There are two cases where we have other threads potentially blocking for events to be handled by this\n-     * class. These are for the state manager (waiting for a state change) or a frame listener (waiting for a\n-     * particular type of frame to arrive). When an error occurs we need to notify these waiters so that they can\n-     * react appropriately.\n+     * There are two cases where we have other threads potentially blocking for events to be handled by this class.\n+     * These are for the state manager (waiting for a state change) or a frame listener (waiting for a particular type\n+     * of frame to arrive). When an error occurs we need to notify these waiters so that they can react appropriately.\n      *\n      * @param e the exception to propagate\n      */\n@@ -306,13 +301,13 @@ public void messageReceived(IoSession session, Object message) throws Exception\n \n         HeartbeatDiagnostics.received(bodyFrame instanceof HeartbeatBody);\n \n-        switch(bodyFrame.getFrameType())\n+        switch (bodyFrame.getFrameType())\n         {\n             case AMQMethodBody.TYPE:\n \n                 if (debug)\n                 {\n-                    _logger.debug(\"Method frame received: \" + frame);\n+                    _logger.debug(\"(\" + System.identityHashCode(this) + \")Method frame received: \" + frame);\n                 }\n \n                 final AMQMethodEvent<AMQMethodBody> evt = new AMQMethodEvent<AMQMethodBody>(frame.getChannel(), (AMQMethodBody) bodyFrame);\n@@ -362,10 +357,10 @@ public void messageReceived(IoSession session, Object message) throws Exception\n                 _protocolSession.messageContentBodyReceived(frame.getChannel(),\n                                                             (ContentBody) bodyFrame);\n                 break;\n-            \n+\n             case HeartbeatBody.TYPE:\n \n-                if(debug)\n+                if (debug)\n                 {\n                     _logger.debug(\"Received heartbeat\");\n                 }\n@@ -413,8 +408,8 @@ public void attainState(AMQState s) throws AMQException\n     }\n \n     /**\n-     * Convenience method that writes a frame to the protocol session. Equivalent\n-     * to calling getProtocolSession().write().\n+     * Convenience method that writes a frame to the protocol session. Equivalent to calling\n+     * getProtocolSession().write().\n      *\n      * @param frame the frame to write\n      */\n@@ -429,30 +424,28 @@ public void writeFrame(AMQDataBlock frame, boolean wait)\n     }\n \n     /**\n-     * Convenience method that writes a frame to the protocol session and waits for\n-     * a particular response. Equivalent to calling getProtocolSession().write() then\n-     * waiting for the response.\n+     * Convenience method that writes a frame to the protocol session and waits for a particular response. Equivalent to\n+     * calling getProtocolSession().write() then waiting for the response.\n      *\n      * @param frame\n      * @param listener the blocking listener. Note the calling thread will block.\n      */\n     public AMQMethodEvent writeCommandFrameAndWaitForReply(AMQFrame frame,\n-                                                            BlockingMethodFrameListener listener)\n+                                                           BlockingMethodFrameListener listener)\n             throws AMQException\n     {\n         return writeCommandFrameAndWaitForReply(frame, listener, DEFAULT_SYNC_TIMEOUT);\n     }\n \n     /**\n-     * Convenience method that writes a frame to the protocol session and waits for\n-     * a particular response. Equivalent to calling getProtocolSession().write() then\n-     * waiting for the response.\n+     * Convenience method that writes a frame to the protocol session and waits for a particular response. Equivalent to\n+     * calling getProtocolSession().write() then waiting for the response.\n      *\n      * @param frame\n      * @param listener the blocking listener. Note the calling thread will block.\n      */\n     public AMQMethodEvent writeCommandFrameAndWaitForReply(AMQFrame frame,\n-                                                            BlockingMethodFrameListener listener, long timeout)\n+                                                           BlockingMethodFrameListener listener, long timeout)\n             throws AMQException\n     {\n         try\n@@ -477,27 +470,22 @@ public AMQMethodEvent writeCommandFrameAndWaitForReply(AMQFrame frame,\n \n     }\n \n-    /**\n-     * More convenient method to write a frame and wait for it's response.\n-     */\n+    /** More convenient method to write a frame and wait for it's response. */\n     public AMQMethodEvent syncWrite(AMQFrame frame, Class responseClass) throws AMQException\n     {\n         return syncWrite(frame, responseClass, DEFAULT_SYNC_TIMEOUT);\n     }\n \n-    /**\n-     * More convenient method to write a frame and wait for it's response.\n-     */\n+    /** More convenient method to write a frame and wait for it's response. */\n     public AMQMethodEvent syncWrite(AMQFrame frame, Class responseClass, long timeout) throws AMQException\n     {\n         return writeCommandFrameAndWaitForReply(frame,\n                                                 new SpecificMethodFrameListener(frame.getChannel(), responseClass), timeout);\n     }\n \n     /**\n-     * Convenience method to register an AMQSession with the protocol handler. Registering\n-     * a session with the protocol handler will ensure that messages are delivered to the\n-     * consumer(s) on that session.\n+     * Convenience method to register an AMQSession with the protocol handler. Registering a session with the protocol\n+     * handler will ensure that messages are delivered to the consumer(s) on that session.\n      *\n      * @param channelId the channel id of the session\n      * @param session   the session instance.\n@@ -555,17 +543,13 @@ public void closeConnection(long timeout) throws AMQException\n \n     }\n \n-    /**\n-     * @return the number of bytes read from this protocol session\n-     */\n+    /** @return the number of bytes read from this protocol session */\n     public long getReadBytes()\n     {\n         return _protocolSession.getIoSession().getReadBytes();\n     }\n \n-    /**\n-     * @return the number of bytes written to this protocol session\n-     */\n+    /** @return the number of bytes written to this protocol session */\n     public long getWrittenBytes()\n     {\n         return _protocolSession.getIoSession().getWrittenBytes();", "filename": "client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java"}, {"additions": 375, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java", "sha": "0d75a6b968051d1c244e9c354288e07edaca54d1", "changes": 375, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -0,0 +1,375 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.test.unit.transacted;\n+\n+import junit.framework.TestCase;\n+import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.transport.TransportConnection;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.url.URLSyntaxException;\n+import org.apache.log4j.Logger;\n+\n+import javax.jms.Session;\n+import javax.jms.MessageProducer;\n+import javax.jms.MessageConsumer;\n+import javax.jms.Queue;\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+import javax.jms.TextMessage;\n+\n+/**\n+ * This class tests a number of commits and roll back scenarios\n+ *\n+ * Assumptions; - Assumes empty Queue\n+ */\n+public class CommitRollbackTest extends TestCase\n+{\n+    protected AMQConnection conn;\n+    protected final String queue = \"direct://amq.direct//Qpid.Client.Transacted.CommitRollback.queue\";\n+    protected String payload = \"xyzzy\";\n+    private Session _session;\n+    private MessageProducer _publisher;\n+    private Session _pubSession;\n+    private MessageConsumer _consumer;\n+    Queue _jmsQueue;\n+\n+    private static final Logger _logger = Logger.getLogger(CommitRollbackTest.class);\n+\n+    protected void setUp() throws Exception\n+    {\n+        super.setUp();\n+        TransportConnection.createVMBroker(1);\n+        newConnection();\n+    }\n+\n+    private void newConnection() throws AMQException, URLSyntaxException, JMSException\n+    {\n+        conn = new AMQConnection(\"amqp://guest:guest@client/test?brokerlist='vm://:1'\");\n+\n+        _session = conn.createSession(true, Session.CLIENT_ACKNOWLEDGE);\n+\n+        _jmsQueue = _session.createQueue(queue);\n+        _consumer = _session.createConsumer(_jmsQueue);\n+\n+        _pubSession = conn.createSession(true, Session.CLIENT_ACKNOWLEDGE);\n+\n+        _publisher = _pubSession.createProducer(_pubSession.createQueue(queue));\n+\n+        conn.start();\n+    }\n+\n+    protected void tearDown() throws Exception\n+    {\n+        super.tearDown();\n+\n+        conn.close();\n+        TransportConnection.killVMBroker(1);\n+    }\n+\n+    /** PUT a text message, disconnect before commit, confirm it is gone. */\n+    public void testPutThenDisconnect() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testPutThenDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _logger.info(\"reconnecting without commit\");\n+        conn.close();\n+\n+        newConnection();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        //commit to ensure message is removed from queue\n+        _session.commit();\n+\n+        assertNull(\"test message was put and disconnected before commit, but is still present\", result);\n+    }\n+\n+    /** PUT a text message, disconnect before commit, confirm it is gone. */\n+    public void testPutThenCloseDisconnect() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testPutThenDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _logger.info(\"closing publisher without commit\");\n+        _publisher.close();\n+\n+        _logger.info(\"reconnecting without commit\");\n+        conn.close();\n+\n+        newConnection();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        //commit to ensure message is removed from queue\n+        _session.commit();\n+\n+        assertNull(\"test message was put and disconnected before commit, but is still present\", result);\n+    }\n+\n+    /**\n+     * PUT a text message, rollback, confirm message is gone. The consumer is on the same connection but different\n+     * session as producer\n+     */\n+    public void testPutThenRollback() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testPutThenRollback\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _logger.info(\"rolling back\");\n+        _pubSession.rollback();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        assertNull(\"test message was put and rolled back, but is still present\", result);\n+    }\n+\n+    /** GET a text message, disconnect before commit, confirm it is still there. The consumer is on a new connection */\n+    public void testGetThenDisconnect() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testGetThenDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+\n+        Message msg = _consumer.receive(1000);\n+        assertNotNull(\"retrieved message is null\", msg);\n+\n+        _logger.info(\"closing connection\");\n+        conn.close();\n+\n+        newConnection();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        _session.commit();\n+\n+        assertNotNull(\"test message was consumed and disconnected before commit, but is gone\", result);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) result).getText());\n+    }\n+\n+    /**\n+     * GET a text message, close consumer, disconnect before commit, confirm it is still there. The consumer is on the\n+     * same connection but different session as producer\n+     */\n+    public void testGetThenCloseDisconnect() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testGetThenCloseDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+\n+        Message msg = _consumer.receive(1000);\n+        assertNotNull(\"retrieved message is null\", msg);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) msg).getText());\n+\n+        _logger.info(\"reconnecting without commit\");\n+        _consumer.close();\n+        conn.close();\n+\n+        newConnection();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+\n+        _session.commit();\n+\n+        assertNotNull(\"test message was consumed and disconnected before commit, but is gone\", result);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) result).getText());\n+    }\n+\n+    /**\n+     * GET a text message, rollback, confirm it is still there. The consumer is on the same connection but differnt\n+     * session to the producer\n+     */\n+    public void testGetThenRollback() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testGetThenDisconnect\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+\n+        Message msg = _consumer.receive(1000);\n+\n+        assertNotNull(\"retrieved message is null\", msg);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) msg).getText());\n+\n+        _logger.info(\"rolling back\");\n+\n+        _session.rollback();\n+\n+        _logger.info(\"receiving result\");\n+\n+        Message result = _consumer.receive(1000);\n+\n+        _session.commit();\n+        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) result).getText());\n+        assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+    }\n+\n+    /**\n+     * GET a text message, close message producer, rollback, confirm it is still there. The consumer is on the same\n+     * connection but different session as producer\n+     */\n+    public void testGetThenCloseRollback() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testGetThenCloseRollback\";\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+\n+        Message msg = _consumer.receive(1000);\n+\n+        assertNotNull(\"retrieved message is null\", msg);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) msg).getText());\n+\n+        _logger.info(\"Closing consumer\");\n+        _consumer.close();\n+\n+        _logger.info(\"rolling back\");\n+        _session.rollback();\n+\n+        _logger.info(\"receiving result\");\n+\n+        _consumer = _session.createConsumer(_jmsQueue);\n+\n+        Message result = _consumer.receive(1000);\n+\n+        _session.commit();\n+        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+        assertEquals(\"test message was correct message\", MESSAGE_TEXT, ((TextMessage) result).getText());\n+        assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+    }\n+\n+\n+    /** Test that rolling back a session purges the dispatcher queue, and the messages arrive in the correct order */\n+    public void testSend2ThenRollback() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending two test messages\");\n+        _publisher.send(_pubSession.createTextMessage(\"1\"));\n+        _publisher.send(_pubSession.createTextMessage(\"2\"));\n+        _pubSession.commit();\n+\n+        _logger.info(\"getting test message\");\n+        assertEquals(\"1\", ((TextMessage) _consumer.receive(1000)).getText());\n+\n+        _logger.info(\"rolling back\");\n+        _session.rollback();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+        assertEquals(\"1\", ((TextMessage) result).getText());\n+        assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+\n+        result = _consumer.receive(1000);\n+        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+        assertEquals(\"2\", ((TextMessage) result).getText());\n+        assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+\n+        result = _consumer.receive(1000);\n+\n+        assertNull(\"test message should be null\", result);\n+    }\n+\n+    public void testSend2ThenCloseAfter1andTryAgain() throws Exception\n+    {\n+//        assertTrue(\"session is not transacted\", _session.getTransacted());\n+//        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+//\n+//        _logger.info(\"sending two test messages\");\n+//        _publisher.send(_pubSession.createTextMessage(\"1\"));\n+//        _publisher.send(_pubSession.createTextMessage(\"2\"));\n+//        _pubSession.commit();\n+//\n+//        _logger.info(\"getting test message\");\n+//        assertEquals(\"1\", ((TextMessage) _consumer.receive(1000)).getText());\n+//\n+//        _consumer.close();\n+//\n+//        _consumer = _session.createConsumer(_jmsQueue);\n+//\n+//        _logger.info(\"receiving result\");\n+//        Message result = _consumer.receive(1000);\n+//        _logger.error(\"1:\" + result);\n+////        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+////        assertEquals(\"1\" , ((TextMessage) result).getText());\n+////        assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n+//\n+//        result = _consumer.receive(1000);\n+//        _logger.error(\"2\" + result);\n+////        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+////        assertEquals(\"2\", ((TextMessage) result).getText());\n+////        assertTrue(\"Messasge is marked as redelivered\" + result, !result.getJMSRedelivered());\n+//\n+//        result = _consumer.receive(1000);\n+//        _logger.error(\"3\" + result);\n+//        assertNull(\"test message should be null:\" + result, result);\n+    }\n+\n+}", "filename": "client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java"}, {"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/test/java/org/apache/qpid/test/unit/transacted/TransactedTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/client/src/test/java/org/apache/qpid/test/unit/transacted/TransactedTest.java", "sha": "94cbb426e5dcc5c1a818e749532e92afcf886b6c", "changes": 22, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/transacted/TransactedTest.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -63,12 +63,11 @@ protected void setUp() throws Exception\n         super.setUp();\n         TransportConnection.createVMBroker(1);\n         con = new AMQConnection(\"vm://:1\", \"guest\", \"guest\", \"TransactedTest\", \"test\");\n-        session = con.createSession(true, 0);\n+        session = con.createSession(true, Session.SESSION_TRANSACTED);\n         queue1 = new AMQQueue(session.getDefaultQueueExchangeName(), new AMQShortString(\"Q1\"), new AMQShortString(\"Q1\"), false, true);\n         queue2 = new AMQQueue(session.getDefaultQueueExchangeName(), new AMQShortString(\"Q2\"), false);\n \n \n-\n         consumer1 = session.createConsumer(queue1);\n         //Dummy just to create the queue. \n         MessageConsumer consumer2 = session.createConsumer(queue2);\n@@ -81,7 +80,6 @@ protected void setUp() throws Exception\n         prepProducer1 = prepSession.createProducer(queue1);\n         prepCon.start();\n \n-\n         //add some messages\n         prepProducer1.send(prepSession.createTextMessage(\"A\"));\n         prepProducer1.send(prepSession.createTextMessage(\"B\"));\n@@ -127,32 +125,41 @@ public void testCommit() throws Exception\n \n     public void testRollback() throws Exception\n     {\n+        _logger.info(\"Sending X Y Z\");\n         producer2.send(session.createTextMessage(\"X\"));\n         producer2.send(session.createTextMessage(\"Y\"));\n         producer2.send(session.createTextMessage(\"Z\"));\n+        _logger.info(\"Receiving A B\");\n         expect(\"A\", consumer1.receive(1000));\n         expect(\"B\", consumer1.receive(1000));\n-        expect(\"C\", consumer1.receive(1000));\n+        //Don't consume 'C' leave it in the prefetch cache to ensure rollback removes it.\n \n         //rollback\n+        _logger.info(\"rollback\");\n         session.rollback();\n \n+        _logger.info(\"Receiving A B C\");\n         //ensure sent messages are not visible and received messages are requeued\n         expect(\"A\", consumer1.receive(1000));\n         expect(\"B\", consumer1.receive(1000));\n         expect(\"C\", consumer1.receive(1000));\n+\n+        _logger.info(\"Starting new connection\");\n         testCon.start();\n         testConsumer1 = testSession.createConsumer(queue1);\n+        _logger.info(\"Testing we have no messages left\");\n         assertTrue(null == testConsumer1.receive(1000));\n         assertTrue(null == testConsumer2.receive(1000));\n+\n+        session.commit();\n     }\n \n     public void testResendsMsgsAfterSessionClose() throws Exception\n     {\n         AMQConnection con = new AMQConnection(\"vm://:1\", \"guest\", \"guest\", \"consumer1\", \"test\");\n \n         Session consumerSession = con.createSession(true, Session.CLIENT_ACKNOWLEDGE);\n-        AMQQueue queue3 = new AMQQueue(consumerSession.getDefaultQueueExchangeName(),new AMQShortString(\"Q3\"), false);\n+        AMQQueue queue3 = new AMQQueue(consumerSession.getDefaultQueueExchangeName(), new AMQShortString(\"Q3\"), false);\n         MessageConsumer consumer = consumerSession.createConsumer(queue3);\n         //force synch to ensure the consumer has resulted in a bound queue\n         ((AMQSession) consumerSession).declareExchangeSynch(ExchangeDefaults.DIRECT_EXCHANGE_NAME, ExchangeDefaults.DIRECT_EXCHANGE_CLASS);\n@@ -225,8 +232,9 @@ public void testResendsMsgsAfterSessionClose() throws Exception\n \n     private void expect(String text, Message msg) throws JMSException\n     {\n-        assertTrue(msg instanceof TextMessage);\n-        assertEquals(text, ((TextMessage) msg).getText());\n+        assertNotNull(\"Message should not be null\", msg);\n+        assertTrue(\"Message should be a text message\", msg instanceof TextMessage);\n+        assertEquals(\"Message content does not match expected\", text, ((TextMessage) msg).getText());\n     }\n \n     public static junit.framework.Test suite()", "filename": "client/src/test/java/org/apache/qpid/test/unit/transacted/TransactedTest.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/cluster/src/main/java/org/apache/qpid/server/queue/ClusteredQueue.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/cluster/src/main/java/org/apache/qpid/server/queue/ClusteredQueue.java", "sha": "9fa96ece1e138ff57680e88dfabe63185ab94553", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/cluster/src/main/java/org/apache/qpid/server/queue/ClusteredQueue.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -32,7 +32,6 @@\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.Executor;\n \n /**\n  * Represents a shared queue in a cluster. The key difference is that as well as any\n@@ -56,10 +55,10 @@ public ClusteredQueue(GroupManager groupMgr, AMQShortString name, boolean durabl\n     }\n \n \n-    public void process(StoreContext storeContext, AMQMessage msg) throws AMQException\n+    public void process(StoreContext storeContext, AMQMessage msg, boolean deliverFirst) throws AMQException\n     {\n         _logger.info(new LogMessage(\"{0} delivered to clustered queue {1}\", msg, this));\n-        super.process(storeContext, msg);\n+        super.process(storeContext, msg, deliverFirst);\n     }\n \n     protected void autodelete() throws AMQException", "filename": "cluster/src/main/java/org/apache/qpid/server/queue/ClusteredQueue.java"}, {"additions": 26, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/cluster/src/main/java/org/apache/qpid/server/queue/RemoteSubscriptionImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/cluster/src/main/java/org/apache/qpid/server/queue/RemoteSubscriptionImpl.java", "sha": "a5ace417524866c17b331bbe704fe80f9ea865d4", "changes": 27, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/cluster/src/main/java/org/apache/qpid/server/queue/RemoteSubscriptionImpl.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -117,7 +117,17 @@ public boolean hasInterest(AMQMessage msg)\n         return null;\n     }\n \n-    public void enqueueForPreDelivery(AMQMessage msg)\n+    public Queue<AMQMessage> getResendQueue()\n+    {\n+        return null;\n+    }\n+\n+    public Queue<AMQMessage> getNextQueue(Queue<AMQMessage> messages)\n+    {\n+        return messages;\n+    }\n+\n+    public void enqueueForPreDelivery(AMQMessage msg, boolean deliverFirst)\n     {\n         //no-op -- if selectors are implemented on RemoteSubscriptions then look at SubscriptionImpl\n     }\n@@ -132,6 +142,11 @@ public void close()\n         //no-op\n     }\n \n+    public boolean isClosed()\n+    {\n+        return false;\n+    }\n+\n     public boolean isBrowser()\n     {\n         return false;\n@@ -142,4 +157,14 @@ public boolean wouldSuspend(AMQMessage msg)\n         return _suspended;\n     }\n \n+    public void addToResendQueue(AMQMessage msg)\n+    {\n+        //no-op\n+    }\n+\n+    public Object getSendLock()\n+    {\n+        return new Object();\n+    }\n+\n }", "filename": "cluster/src/main/java/org/apache/qpid/server/queue/RemoteSubscriptionImpl.java"}, {"additions": 197, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/common/src/main/java/org/apache/qpid/util/ConcurrentLinkedMessageQueueAtomicSize.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/common/src/main/java/org/apache/qpid/util/ConcurrentLinkedMessageQueueAtomicSize.java", "sha": "cdf686b4cba8ca98d93b1ae4efbf6ee093f7b018", "changes": 197, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/util/ConcurrentLinkedMessageQueueAtomicSize.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -0,0 +1,197 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.util;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.Queue;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class ConcurrentLinkedMessageQueueAtomicSize<E> extends ConcurrentLinkedQueueAtomicSize<E> implements MessageQueue<E>\n+{\n+    private static final Logger _logger = Logger.getLogger(ConcurrentLinkedMessageQueueAtomicSize.class);\n+\n+    protected Queue<E> _messageHead = new ConcurrentLinkedQueueAtomicSize<E>();\n+\n+    protected AtomicInteger _messageHeadSize = new AtomicInteger(0);\n+\n+    @Override\n+    public int size()\n+    {\n+        return super.size() + _messageHeadSize.get();\n+    }\n+\n+    @Override\n+    public E poll()\n+    {\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.poll();\n+        }\n+        else\n+        {\n+            _logger.debug(\"Providing item from message head\");\n+\n+            E e = _messageHead.poll();\n+\n+            if (e != null)\n+            {\n+                _messageHeadSize.decrementAndGet();\n+            }\n+\n+            return e;\n+        }\n+    }\n+\n+    @Override\n+    public boolean remove(Object o)\n+    {\n+\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.remove(o);\n+        }\n+        else\n+        {\n+            if (_messageHead.remove(o))\n+            {\n+                _messageHeadSize.decrementAndGet();\n+                return true;\n+            }\n+\n+            return super.remove(o);\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeAll(Collection<?> c)\n+    {\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.removeAll(c);\n+        }\n+        else\n+        {\n+            //fixme this is super.removeAll but iterator here doesn't work\n+            // we need to be able to correctly decrement _messageHeadSize\n+//            boolean modified = false;\n+//            Iterator<?> e = iterator();\n+//            while (e.hasNext())\n+//            {\n+//                if (c.contains(e.next()))\n+//                {\n+//                    e.remove();\n+//                    modified = true;\n+//                    _size.decrementAndGet();\n+//                }\n+//            }\n+//            return modified;\n+\n+            throw new RuntimeException(\"Not implemented\");\n+        }\n+    }\n+\n+\n+    @Override\n+    public boolean isEmpty()\n+    {\n+        return (_messageHead.isEmpty() && super.isEmpty());\n+    }\n+\n+    @Override\n+    public void clear()\n+    {\n+        super.clear();\n+        _messageHead.clear();\n+    }\n+\n+    @Override\n+    public boolean contains(Object o)\n+    {\n+        return _messageHead.contains(o) || super.contains(o);\n+    }\n+\n+    @Override\n+    public boolean containsAll(Collection<?> o)\n+    {\n+        return _messageHead.containsAll(o) || super.containsAll(o);\n+    }\n+\n+    @Override\n+    public E element()\n+    {\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.element();\n+        }\n+        else\n+        {\n+            return _messageHead.element();\n+        }\n+    }\n+\n+    @Override\n+    public E peek()\n+    {\n+        if (_messageHead.isEmpty())\n+        {\n+            return super.peek();\n+        }\n+        else\n+        {\n+            _logger.debug(\"Providing item from message head\");\n+            return _messageHead.peek();\n+        }\n+\n+    }\n+\n+    @Override\n+    public Iterator<E> iterator()\n+    {\n+        throw new RuntimeException(\"Not Implemented\");\n+\n+    }\n+\n+    @Override\n+    public boolean retainAll(Collection<?> c)\n+    {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    @Override\n+    public Object[] toArray()\n+    {\n+        throw new RuntimeException(\"Not Implemented\");\n+    }\n+\n+    public boolean pushHead(E o)\n+    {\n+        _logger.debug(\"Adding item to head of queue\");\n+        if (_messageHead.offer(o))\n+        {\n+            _messageHeadSize.incrementAndGet();\n+            return true;\n+        }\n+        return false;\n+    }\n+}\n\\ No newline at end of file", "filename": "common/src/main/java/org/apache/qpid/util/ConcurrentLinkedMessageQueueAtomicSize.java"}, {"additions": 30, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/common/src/main/java/org/apache/qpid/util/MessageQueue.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/common/src/main/java/org/apache/qpid/util/MessageQueue.java", "sha": "9cf3319374c057374e6dd2d82bb938cc154b01b2", "changes": 30, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/util/MessageQueue.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -0,0 +1,30 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.util;\n+\n+import java.util.Queue;\n+\n+public interface MessageQueue<E> extends Queue<E>\n+{\n+\n+    boolean pushHead(E o);\n+\n+}", "filename": "common/src/main/java/org/apache/qpid/util/MessageQueue.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/exchange/AbstractHeadersExchangeTestBase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/exchange/AbstractHeadersExchangeTestBase.java", "sha": "ccd23bc0bcccff7d5ca82e69eca48ed90cb5c3c7", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/exchange/AbstractHeadersExchangeTestBase.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -272,9 +272,10 @@ public TestQueue(AMQShortString name) throws AMQException\n          * not invoked. It is unnecessary since for this test we only care to know whether the message was\n          * sent to the queue; the queue processing logic is not being tested.\n          * @param msg\n+         * @param deliverFirst\n          * @throws AMQException\n          */\n-        public void process(StoreContext context, AMQMessage msg) throws AMQException\n+        public void process(StoreContext context, AMQMessage msg, boolean deliverFirst) throws AMQException\n         {\n             messages.add(new HeadersExchangeTest.Message(msg));\n         }", "filename": "systests/src/main/java/org/apache/qpid/server/exchange/AbstractHeadersExchangeTestBase.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java", "sha": "26332579cbb15e76812174e30ce0733c0935ca79", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -19,7 +19,6 @@\n \n import junit.framework.TestCase;\n import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.BasicPublishBody;\n import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n@@ -151,7 +150,7 @@ public void testExceptions() throws Exception\n         AMQMessage msg = message(false);\n         long id = msg.getMessageId();\n         _queue.clearQueue(_storeContext);\n-        _queue.process(_storeContext, msg);\n+        _queue.process(_storeContext, msg, false);\n         msg.routingComplete(_messageStore, _storeContext, new MessageHandleFactory());\n         _queueMBean.viewMessageContent(id);\n         try\n@@ -216,7 +215,7 @@ private void sendMessages(int messageCount) throws AMQException\n         }\n         for (int i = 0; i < messageCount; i++)\n         {\n-            _queue.process(_storeContext, messages[i]);\n+            _queue.process(_storeContext, messages[i], false);\n         }\n \n         for (int i = 0; i < messages.length; i++)", "filename": "systests/src/main/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/queue/ConcurrencyTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/queue/ConcurrencyTest.java", "sha": "4971db2d28f5bac47d9c4bf972379b1e56f0ef3a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/queue/ConcurrencyTest.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -194,7 +194,7 @@ void doRun() throws Throwable\n             AMQMessage msg = nextMessage();\n             if (msg != null)\n             {\n-                _deliveryMgr.deliver(null, new AMQShortString(toString()), msg);\n+                _deliveryMgr.deliver(null, new AMQShortString(toString()), msg, false);\n             }\n         }\n     }", "filename": "systests/src/main/java/org/apache/qpid/server/queue/ConcurrencyTest.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/queue/DeliveryManagerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/queue/DeliveryManagerTest.java", "sha": "dc5a6d3cf60cbaa0d73459f95941d2d4a859244b", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/queue/DeliveryManagerTest.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -49,7 +49,7 @@ public void testStartInQueueingMode() throws AMQException\n \n         for (int i = 0; i < batch; i++)\n         {\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i]);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i], false);\n         }\n \n         SubscriptionTestHelper s1 = new SubscriptionTestHelper(\"1\");\n@@ -59,7 +59,7 @@ public void testStartInQueueingMode() throws AMQException\n \n         for (int i = batch; i < messages.length; i++)\n         {\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i]);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i], false);\n         }\n \n         assertTrue(s1.getMessages().isEmpty());\n@@ -97,7 +97,7 @@ public void testStartInDirectMode() throws AMQException\n \n         for (int i = 0; i < batch; i++)\n         {\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i]);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i], false);\n         }\n \n         assertEquals(batch, s1.getMessages().size());\n@@ -111,7 +111,7 @@ public void testStartInDirectMode() throws AMQException\n         s1.setSuspended(true);\n         for (int i = batch; i < messages.length; i++)\n         {\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i]);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, messages[i], false);\n         }\n \n         _mgr.processAsync(new OnCurrentThreadExecutor());\n@@ -133,7 +133,7 @@ public void testNoConsumers() throws AMQException\n         try\n         {\n             AMQMessage msg = message(true);\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, msg);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, msg, false);\n             msg.checkDeliveredToConsumer();\n             fail(\"expected exception did not occur\");\n         }\n@@ -155,7 +155,7 @@ public void testNoActiveConsumers() throws AMQException\n             _subscriptions.addSubscriber(s);\n             s.setSuspended(true);\n             AMQMessage msg = message(true);\n-            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, msg);\n+            _mgr.deliver(_storeContext, DEFAULT_QUEUE_NAME, msg, false);\n             msg.checkDeliveredToConsumer();\n             fail(\"expected exception did not occur\");\n         }", "filename": "systests/src/main/java/org/apache/qpid/server/queue/DeliveryManagerTest.java"}, {"additions": 29, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/b89757a55ca74bf32932325e3ac601e5620d7471/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java", "sha": "01eb2ba6a2e166ecd0e353304f8cd01423a0d7e4", "changes": 33, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java?ref=b89757a55ca74bf32932325e3ac601e5620d7471", "patch": "@@ -67,12 +67,22 @@ public boolean isSuspended()\n         return isSuspended;\n     }\n \n-\tpublic boolean wouldSuspend(AMQMessage msg)\n+    public boolean wouldSuspend(AMQMessage msg)\n     {\n         return isSuspended;\n     }\n \n-\t\n+    public void addToResendQueue(AMQMessage msg)\n+    {\n+        //no-op\n+    }\n+\n+    public Object getSendLock()\n+    {\n+        return new Object();\n+    }\n+\n+\n     public void queueDeleted(AMQQueue queue)\n     {\n     }\n@@ -92,7 +102,17 @@ public boolean hasInterest(AMQMessage msg)\n         return null;\n     }\n \n-    public void enqueueForPreDelivery(AMQMessage msg)\n+    public Queue<AMQMessage> getResendQueue()\n+    {\n+        return null;\n+    }\n+\n+    public Queue<AMQMessage> getNextQueue(Queue<AMQMessage> messages)\n+    {\n+        return messages;\n+    }\n+\n+    public void enqueueForPreDelivery(AMQMessage msg, boolean deliverFirst)\n     {\n         //no-op\n     }\n@@ -107,9 +127,14 @@ public void close()\n         //no-op\n     }\n \n+    public boolean isClosed()\n+    {\n+        return false;\n+    }\n+\n     public boolean isBrowser()\n     {\n-        return false;  //To change body of implemented methods use File | Settings | File Templates.\n+        return false;\n     }\n \n     public int hashCode()", "filename": "systests/src/main/java/org/apache/qpid/server/queue/SubscriptionTestHelper.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/424f4bc6d8b09552067ef63c4908de5519343ca9", "message": "Merged revisions 1-447993,447995-448007,448009-448141,448143-448157,448161-448194,448196-448210,448212-448218,448220-448223,448225-448233,448235,448237-448241,448243-448596,448598-448623,448625-448850,448852-448880,448882-448982,448984-449635,449637-449639,449641-449642,449644-449645,449647-449674,449676-449719,449721-449749,449751-449762,449764-449933,449935-449941,449943-450383,450385,450387-450400,450402-450433,450435-450503,450505-450555,450557-450860,450862-451024,451026-451149,451151-451316,451318-451931,451933-452139,452141-452162,452164-452320,452322,452324-452325,452327-452333,452335-452429,452431-452528,452530-452545,452547-453192,453194-453195,453197-453536,453538,453540-453656,453658-454676,454678-454735,454737,454739-454781,454783-462728,462730-462819,462821-462833,462835-462839,462841-463071,463073-463178,463180-463308,463310-463362,463364-463375,463377-463396,463398-463402,463404-463409,463411-463661,463663-463670,463672-463673,463675-464493,464495-464502,464504-464576,464578-464613,464615-464628,464630,464632-464866,464868-464899,464901-464942,464944-464949,464951-465004,465006-465016,465018-465053,465055-465165,465167-465321,465323-465406,465408-465427,465429-465431,465433-465548,465550-466044,466047-466075,466077,466079-466081,466083-466099,466101-466112,466114-466126,466128-466240,466242-466971,466973-466978,466980-467309,467311-467312,467316-467328,467330-467485,467487-467588,467590-467604,467606-467699,467701-467706,467708-467749,467751-468069,468071-468537,468539-469241,469244-469246,469248-469318,469320-469421,469423,469425-469429,469431-469435,469437-469462,469464-469469,469472-469477,469479-469490,469492-469503,469505-469529,469531-469598,469600-469624,469626-469737,469739-469752,469754-469806,469808-469928,469930-469953,469955-470011,470013-470109,470111-470335,470338-470339,470341-470379,470381,470383-470399,470401-470446,470448-470741,470743-470758,470760-470809,470811-470817,470819-470993,470995-471001,471003-471788,471790-471792,471794-472028,472030-472032,472034-472036,472038,472040,472043,472045-472059,472061,472063,472065-472066,472068,472070-472072,472074-472080,472082,472084-472092,472094-472107,472109-472123,472125-472158,472160-472165,472167-472172,472174-472457,472459-472460,472462-472464,472466-472470,472472-472483,472486-472491,472493-472494,472496-472497,472499,472501-472503,472505-472512,472514-472544,472546-472556,472558-472560,472562-472572,472574-472587,472589-472591,472593-472605,472607,472609-472731,472733-472786,472788-472843,472845-472849,472851-472859,472861-472878,472880-472903,472905,472907-472988,472990-472991,472993-473071,473073-473086,473088-473090,473093,473095-473096,473098-473106,473108-473110,473112-473185,473187-473260,473262,473268-473270,473275-473279,473281,473284-473287,473289-473295,473297-473306,473308-473330,473332-473335,473337,473339-473344,473346-473351,473353-473355,473357-473358,473361-473471,473473-473497,473499-473535,473537-473567,473569-473888,473890-474451,474454-474492,474494-474563,474565-474843,474845-474865,474867-474932,474934-475035,475037-475144,475146-475180,475182-475265,475267-475285,475287,475289-475293,475295-475296,475298-475302,475304-475631,475633-475649,475651-475748,475750-475752,475754-476107,476109-476302,476304-476413,476415-476430,476432-476700,476702-476868,476870-477147,477149-477213,477215-477263,477265-477340,477342-477635,477637-477789,477791-477825,477827-477841,477843,477846-477852,477854,477856,477858-477865,477867-477894,477896-478022,478024-478182,478184-478211,478213-478233,478235-478236,478238-478241,478243-478252,478254-478259,478261-478263,478265,478267-478269,478271-478286,478288-478342,478344-478379,478381-478412,478414-478443,478445-478636,478639-478658,478660-478821,478823-478853,478855-478922,478924-478962,478965-478974,478976-479029,479031-479049,479051-479210,479212-479214,479216-479407,479409-479415,479417-479425,479427-479559,479561-479639,479641-479676,479678-479685,479687-480030,480033-480086,480091-480093,480095-480118,480120-480139,480141,480143-480148,480150-480156,480158-480163,480165-480177,480179-480189,480191-480193,480195-480198,480200-480220,480222-480282,480284-480292,480294-480308,480310-480317,480320-480422,480424,480426-480581,480583-480656,480658-480692,480695-480702,480704,480706-480710,480712-480910,480913-480933,480935-480945,480947-480972,480974-480993,480995-481034,481036-481158,481161-481174,481176-481220,481222-481234,481236-481260,481263-481264,481266-481296,481298-481304,481306-481311,481313-481332,481334,481336-481380,481382-481441,481443-482144,482146-482180,482182-482193,482195-482232,482234-482236,482239,482241-482242,482244-482247,482250-482251,482253,482256-482261,482264-482288,482290-482364,482366,482368,482370-482554,482556,482558-482569,482572-482636,482638,482640-482696,482698-482722,482724-482732,482734-482771,482774-482957,482959-483045,483047-483105,483108,483110-483115,483117,483119-483127,483130-483134,483136-483148,483150-483158,483160-483164,483166-483178,483180-483391,483393-483400,483402-483403,483405-483418,483420-483421,483425-483436,483438-483470,483472-483502,483504-483558,483560-483599,483601-483637,483639-483644,483646-483659,483661-483670,483672-483878,483880-483910,483912-483915,483917-483940,483942,483944-483968,483970-483972,483974-483976,483978,483980-484612,484614-484657,484659-484693,484695-484718,484720-484842,484844-484847,484849-484986,484988-485019,485021-485489,485491-485544,485546-485591,485593,485595-485697,485699-485729,485731-485734,485736-485779,485781-485787,485789-485851,485853,485855-486007,486009,486011-486020,486022-486083,486085-486097,486099-486117,486120-486131,486133-486148,486150-486161,486163-486164,486166-486197,486199-486205,486208-486247,486249-486253,486256-486427,486429-486431,486433-486554,486556-486573,486575-486593,486595,486597-486609,486611-486619,486622,486625,486627-486641,486643-486645,486649-486687,486689-486721,486723-486730,486732-486746,486748-486759,486761,486763-486777,486779-486782,486784-486788,486790,486792,486794-486796,486798-487175,487178,487180-487213,487215,487217-487267,487269-487284,487286-487298,487300-487358,487360-487367,487369-487382,487384-487434,487436-487480,487482-487547,487549-487561,487563-487565,487567-487578,487580-487615,487617-487622,487624,487626,487628,487630-487635,487637-487703,487705-487777,487780-487781,487783-487800,487802-487803,487805-487820,487822-487848,487850-487902,487904-488103,488105-488133,488135-488158,488160-488163,488165-488187,488189-488216,488218-488248,488250-488278,488280,488282-488303,488305-488313,488315-488342,488344-488351,488353-488376,488378-488449,488451-488593,488595,488597-488623,488625-488700,488702-488704,488706-488710,488714,488716-488725,488727-488744,488746-488770,488772-488798,488800,488802-488807,488809,488811-488829,488831-488843,488845-488851,488853-489069,489071-489077,489079-489081,489084-489102,489104-489105,489107-489109,489111-489112,489114-489139,489141-489178,489181-489203,489205-489211,489213,489216-489329,489332-489402,489404-489417,489419-489421,489423-489643,489645-489690,489692-489703,489705-489714,489716-489747,489749-489753,489755-489803,489805-489904,489906-490372,490374-490504,490506-490604,490606-490707,490710-490733,490735-490871,490873-490984,490986-491028,491030,491032-491071,491073-491119,491121-491576,491578-491672,491674-491800,491802-491838,491840-491878,491880-492183,492185-492279,492281-492317,492319-492513,492515-492584,492586-492587,492589-492601,492603-492635,492637-492640,492642-492717,492719-492723,492725-492729,492731-492755,492757-492901,492903-492955,492957-492962,492964-492997,492999-493002,493004-493041,493043-493059,493062-493063,493065-493086,493088-493125,493127-493139,493141-493150,493152-493871,493873-494017,494019-494030,494032-494041,494043-494091,494093-494120,494122-494354,494356-494436,494438-494539,494541-494552,494554-494586,494588-494649,494651,494653-494654,494656-494657,494659-494764,494766-494768,494770-494796,494798-494799,494802,494804-494860,494862-494903,494905-494906,494908-495019,495021-495160,495162-495168,495171-495188,495190-495229,495231-495254,495256-495303,495305-495313,495315-495336,495338-495372,495374-495379,495381-495454,495457-495459,495462-495516,495518-495524,495526-495531,495533-495548,495551-495553,495555,495557-495558,495560,495562-495573,495575-495583,495585-495594,495596-495628,495630-495638,495640-495651,495653-495660,495662-495753,495755-496259,496261-496262,496264-496269,496271-496275,496277-496301,496303-496316,496318-496383,496385-496413,496415-496495,496497-496625,496627-496636,496638-496640,496642-496647,496650-496657,496659-496660,496663-496664,496666-496677,496679-496681,496683-496730,496732-496750,496752,496754-496784,496786-496832,496834-496840,496842-496990,496992-496995,496997-497340,497343-497351,497353-497403,497405-497424,497426-497438,497440-497481,497483-497497,497499-497765,497767-497769,497771-497775,497777-497778,497780,497782-497783,497785,497787-497812,497814-497871,497873-497877,497879-498573,498575-498588,498590,498592,498594-498636,498638-498669,498671-498686,498688-498689,498691-498719,498721-498964,498966-498969,498971-498973,498975-498982,498985-499035,499037-499040,499042,499044-499048,499050-499082,499084-499086,499088-499164,499167-499169,499171-499355,499357-499370,499372-499373,499375-499391,499393,499395-499425,499428,499430-499445,499447-499455,499457-499460,499462-499465,499467,499469-499489,499491-499492,499494-499531,499533-499562,499566-499627,499629-499715,499717-499732,499734-499755,499758-499763,499765-499780,499782-499795,499797-499802,499804-499844,499846,499848-499850,499852-499863,499865-499873,499875-499974,499976-499978,499980-500263,500265-500283,500285-500309,500311-501000,501002,501012-501057,501059-501095,501097-501390,501392-501410,501413-501447,501449-501454,501456,501458-501464,501466-501471,501473-501803,501805-501913,501915-501916,501918-501919,501921-501944,501946-502171,502173-502177,502181,502183-502247,502250-502252,502254-502260,502262-502267,502270,502272,502274-502575,502577-502609,502611-502619,502621-502626,502628-502654,502656-503592,503594-503603,503605-503608,503610-503636,503638-503645,503647-503705,503707-503789,503791-504024,504026-504111,504113-504506,504508-504735,504737-504863,504865-504867,504869-504914,504916-505241,505243-505254,505257-505267,505269-505354,505356-505891,505893-505971,505973-506400,506402-506404,506407-506438,506440-506516,506518-506541,506543-506966,506968-506971,506973-507095,507097-507108,507111-507454,507456,507459-507471,507473-507556,507558,507560-507581,507585-507594,507597,507599-507608,507610-507728,507730-507893,507895-507937,507940-508234,508236-508350,508352-508365,508367-508380,508383,508386-508415,508417-508648,508650-508941,508943-509146,509148-509171,509173-509175,509179-509201,509203-509207,509209-509215,509217-509222,509224-509477,509480-509627,509629-509634,509636-509641,509643-509736,509738-509931,509933-510059,510061-510075,510077-510158,510161-510896,510898-510938,510940-511388,511390-511922,511924-512287,512289-512698,512702-512813,512815-512817,512819-513359,513361-513370,513372-514702,514704-514886,514888-514902,514904-515126,515129-515141,515143-515516,515518-515534,515536-515538,515540-515648,515650-515651,515653-516070,516072-516411,516413-516448,516450,516452-517637,517639-517647,517649-517659,517661-517663,517665-517677,517679-517682,517684-517744,517746-518085,518087-518175,518177-518558,518560-518568,518571-518666,518668,518670-518699,518701-518987,518990-518992,518994-519908,519910-519932,519934-520414,520416-520842,520844-520937,520939-521362,521364-521792,521794-522462,522464-522527,522529-522534,522536-522566,522568-522993,522995-523244,523246-525530,525532,525534,525537-526149,526151-526682,526686-526713,526715-530399 via svnmerge from \nhttps://svn.apache.org/repos/asf/incubator/qpid/branches/M2\n\n........\n  r521682 | bhupendrab | 2007-03-23 11:50:55 +0000 (Fri, 23 Mar 2007) | 2 lines\n  \n  QPID-418 (merged from trunk)\n  svn merge -r521336:521345 https://svn.apache.org/repos/asf/incubator/qpid/trunk/qpid/java .\n........\n  r521705 | rgreig | 2007-03-23 12:44:14 +0000 (Fri, 23 Mar 2007) | 1 line\n  \n  Updates to performance tests.\n........\n  r521710 | ritchiem | 2007-03-23 12:59:18 +0000 (Fri, 23 Mar 2007) | 2 lines\n  \n  QPID-419 Access Control QPID-423 Authentication per virtualhost\n  Improved error handling when hostconfig is not specifed. Was NPE-ing\n........\n  r521715 | ritchiem | 2007-03-23 13:10:33 +0000 (Fri, 23 Mar 2007) | 2 lines\n  \n  QPID-423 Authentication per virtualhost\n  Improved error handling when hostconfig is not specifed. Was NPE-ing\n........\n  r521782 | bhupendrab | 2007-03-23 16:02:51 +0000 (Fri, 23 Mar 2007) | 1 line\n  \n  QPID-420 (merged from trunk)  And r518998:518999 and r520846:520850\n........\n  r522959 | ritchiem | 2007-03-27 16:39:51 +0100 (Tue, 27 Mar 2007) | 2 lines\n  \n  Updated assembly/bin.xml to include transient_config.xml persistent_config.xml \n........\n  r522961 | ritchiem | 2007-03-27 16:42:40 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  forgot to rename files after they had been copied\n........\n  r522967 | ritchiem | 2007-03-27 16:56:03 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  correctly renamed transient and persistent config files\n........\n  r522977 | ritchiem | 2007-03-27 17:06:15 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  updated config files\n........\n  r522981 | ritchiem | 2007-03-27 17:10:45 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  Added echo of progress and reduced timeout\n........\n  r522989 | ritchiem | 2007-03-27 17:33:04 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  fixed error where script wouldn't pickup running pids\n........\n  r522990 | ritchiem | 2007-03-27 17:36:34 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  Added additional logging and comments\n........\n  r522991 | ritchiem | 2007-03-27 17:37:17 +0100 (Tue, 27 Mar 2007) | 1 line\n  \n  Added additional  comments\n........\n  r523747 | rajith | 2007-03-29 16:32:56 +0100 (Thu, 29 Mar 2007) | 1 line\n  \n  Fix for setting the message id\n........\n  r524050 | rgreig | 2007-03-30 12:51:09 +0100 (Fri, 30 Mar 2007) | 1 line\n  \n  Removed excess logging to optimize performance.\n........\n  r524739 | ritchiem | 2007-04-02 08:29:06 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Added BDB Test scripts and updated pom to contain same tests as were used in perftesting\n........\n  r524740 | ritchiem | 2007-04-02 08:47:29 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Fixed error with passwordfile parameter\n........\n  r524743 | ritchiem | 2007-04-02 09:07:55 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Added CTQ tests\n........\n  r524763 | ritchiem | 2007-04-02 11:50:06 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Added verify password method to PrincipalDatabase\n........\n  r524765 | ritchiem | 2007-04-02 11:55:12 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  Moved broker details to a separate variable.\n........\n  r524767 | ritchiem | 2007-04-02 12:17:54 +0100 (Mon, 02 Apr 2007) | 1 line\n  \n  ignored idea files\n........\n  r525487 | ritchiem | 2007-04-04 11:42:59 +0100 (Wed, 04 Apr 2007) | 3 lines\n  \n  Added default timeout to AMQConnection.close();\n........\n  r525553 | ritchiem | 2007-04-04 17:34:35 +0100 (Wed, 04 Apr 2007) | 1 line\n  \n  Updated case of properties\n........\n  r525766 | ritchiem | 2007-04-05 09:51:55 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-308 Added test case to demonstrate heap exhaustion of broker. Can't be run InVM as it kills the broker.\n........\n  r525777 | ritchiem | 2007-04-05 10:29:22 +0100 (Thu, 05 Apr 2007) | 20 lines\n  \n  QPID-414 : Addition of CRAM-MD5-HASHED authentication. Same as CRAM-MD5 but the client uses the hash of the password rather than the original password. This allows the broker to store the hash not the original password.\n  \n  Added initial tool for generation passwords.\n  \n  Broker:\n  Renamed MD5PasswordFilePrincipalDatabase.java to Base64MD5PasswordFilePrincipalDatabase.java as that more accurately represents the file contents. \n  PlainPasswordVhostFilePrincipalDatabase.java - import tidy up\n  PrincipalDatabaseAuthenticationManager.java - Changed to add our SASL providers at the start of the SASL list.\n  CRAMMD5Hashed* - New SASL mechanism that delegates to CRAM-MD5 but understands that the password to use is the hash of the users password.\n  JCAProvider - Removed the addProvider() line as this is done after the construction in PrincipalDatabaseAuthenticationManager.\n  PlainSaslServerFactory - White Space\n  Passwd.java - New util stub for managing passwords ala htpasswd.\n  \n  Client\n  Added CRAM-MD5-HASHED to CallbackHandlerRegistry \n  Added ClientFactory for CRAMMD5Hashed that returns the first CRAM-MD5 SaslClient.\n  DynamicSaslRegistrar.java - Tidied imports added new JCAProviders at the start of the Sasl lists.\n  DynamicSaslRegistrar.properties - Added CRAM-MD5-HASHED handler.\n  JCAProvider.java - as with broker stopped JCAProvider.java adding itself as the DynamicSaslRegistrar.java does this on the client.\n  UsernameHashedPasswordCallbackHandler.java - New callback handler that is used by CRAM-MD5-HASHED. It hashes the client's password and uses that in the CRAM-MD5 algorithm.\n........\n  r525785 | ritchiem | 2007-04-05 10:48:43 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  Old ant folder\n........\n  r525786 | ritchiem | 2007-04-05 10:57:33 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-440 - added comments in the code relating to this bug.\n........\n  r525787 | ritchiem | 2007-04-05 10:58:20 +0100 (Thu, 05 Apr 2007) | 2 lines\n  \n  QPID-308 removed closeConnection() that calls close(-1) and may result in a client hang. better to call closeConnection(long timeout) so forced this my removing closeConnection();\n........\n  r525788 | ritchiem | 2007-04-05 11:00:56 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-414 update to config.xml to give usage example.\n........\n  r525804 | ritchiem | 2007-04-05 13:19:31 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-308 Updated HeapExhaustion to be able to be run from command line\n........\n  r525817 | ritchiem | 2007-04-05 14:14:50 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  Update to qpid stop scripts to properly check for existing broker instances and promptly stop them.\n........\n  r525829 | ritchiem | 2007-04-05 14:50:56 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  Updated scripts to work correctly under solaris and bash 2.0\n........\n  r525862 | rgodfrey | 2007-04-05 17:37:40 +0100 (Thu, 05 Apr 2007) | 1 line\n  \n  QPID-443 : Fix to transactionality of message publishing\n........\n  r525867 | ritchiem | 2007-04-05 17:47:59 +0100 (Thu, 05 Apr 2007) | 2 lines\n  \n  QPID-416 Provided simple update to Access Control via FileAccessManager to allow access rights for a virtualhost to be stored in a separate file.\n  Updated PrincipalDatabaseAccessManager to use the default AccessManager if the specified PrincipalDatabase is not an AccessManager.\n........\n  r526091 | ritchiem | 2007-04-06 09:21:01 +0100 (Fri, 06 Apr 2007) | 5 lines\n  \n  QPID-416 Update to Access control to allow simply read/write permissions per Virtual host.\n  access - updated file to have examples of access control.\n  AccessManager - Deprecated old isAuthorised method\n  Implemented new isAuthorized method on all AccessManagers\n........\n  r526113 | ritchiem | 2007-04-06 11:28:43 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Updated case of properties to be true cammelCase and updated tests to run for a duration of 10 minutes rather than set message count. To provide better results for graphing.\n........\n  r526117 | ritchiem | 2007-04-06 11:42:11 +0100 (Fri, 06 Apr 2007) | 9 lines\n  \n  QPID-416 Update to Access control to allow simply read/write permissions per Virtual host.\n  access - updated file to have examples of access control.\n  Changed AMQProtocolSession to record an authorized Principal not just a String.\n   - Required \n  Added AccessRights files needed for VirtualHostAccess control.\n  \n  Updated ConnectionOpenMethodHandler to allow Principals with any access to connect not just read.\n  \n  UsernamePrincipal - Added a toString\n........\n  r526118 | rgodfrey | 2007-04-06 11:55:17 +0100 (Fri, 06 Apr 2007) | 1 line\n........\n  r526122 | ritchiem | 2007-04-06 12:26:06 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  removed pauses between batches\n........\n  r526154 | rgodfrey | 2007-04-06 14:24:46 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-443 : Fix to transactionality of message publishing\n........\n  r526157 | bhupendrab | 2007-04-06 14:32:56 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-444   : Enabling the Qpid to use SASL. jmxmp can be plugged into for SASL. Can be configured to use security. \n........\n  r526158 | ritchiem | 2007-04-06 14:34:52 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Duplicate of BDB-Qpid.sh\n........\n  r526159 | bhupendrab | 2007-04-06 14:37:47 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-444  : adding jmxport, which is used when out of the box JMXAgent is not used\n........\n  r526166 | ritchiem | 2007-04-06 14:51:41 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-414 - Initial script to run the passwd gen. \n........\n  r526187 | bhupendrab | 2007-04-06 15:53:36 +0100 (Fri, 06 Apr 2007) | 2 lines\n  \n  QPID-444   : Enabling the SASL support. jmxmp can be plugged into for SASL.\n........\n  r526194 | rgreig | 2007-04-06 16:21:19 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Added some ramping up performance tests.\n........\n  r526195 | marnie | 2007-04-06 16:21:33 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  QPID-381 Amended session constructor to be non-transactional and use client ack mode.\n........\n  r526198 | rgreig | 2007-04-06 16:26:02 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Fixed message sizes.\n........\n  r526199 | rgreig | 2007-04-06 16:29:06 +0100 (Fri, 06 Apr 2007) | 1 line\n  \n  Fixed commit batch size.\n........\n  r526666 | ritchiem | 2007-04-09 08:47:14 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Updated so the FileAppender includes time stamps by default.. ConversionPattern made the same as STDOUT and RollingFileAppender\n........\n  r526691 | ritchiem | 2007-04-09 10:39:47 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Added $@ to allow pass through of command line args to each sub process\n........\n  r526692 | bhupendrab | 2007-04-09 10:45:06 +0100 (Mon, 09 Apr 2007) | 4 lines\n  \n  QPID-444   : added log statements and some config parameters.\n  Removed the autoDelete parameter from createNewQueue method used from Management Console.\n........\n  r526694 | bhupendrab | 2007-04-09 10:51:46 +0100 (Mon, 09 Apr 2007) | 1 line\n........\n  r526709 | bhupendrab | 2007-04-09 12:02:08 +0100 (Mon, 09 Apr 2007) | 2 lines\n  \n  QPID-444  : updated the management console dependency configuration for sasl support\n........\n  r526776 | rgreig | 2007-04-09 16:26:04 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Stopped throwing away exception causes.\n........\n  r526803 | rgreig | 2007-04-09 17:09:24 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Got rid of some uses of System.out instead of log4j logging.\n........\n  r526807 | rgreig | 2007-04-09 17:12:49 +0100 (Mon, 09 Apr 2007) | 1 line\n  \n  Got rid of some uses of System.out instead of log4j logging.\n........\n  r527049 | ritchiem | 2007-04-10 08:58:26 +0100 (Tue, 10 Apr 2007) | 1 line\n  \n  Moved bdb tests to bdbstore package\n........\n  r527050 | ritchiem | 2007-04-10 09:00:42 +0100 (Tue, 10 Apr 2007) | 1 line\n  \n  QueueDeclareHandler.java - Added more detail to error messages. Such as returning the queue name that was attempted to be declared but failed.\n........\n  r527053 | ritchiem | 2007-04-10 09:03:15 +0100 (Tue, 10 Apr 2007) | 1 line\n  \n  Added a test to check that Persistent Queues do actually persist.\n........\n  r527182 | ritchiem | 2007-04-10 17:29:47 +0100 (Tue, 10 Apr 2007) | 1 line\n  \n  QPID-446 Initial MBean framework.\n........\n  r527487 | ritchiem | 2007-04-11 14:31:18 +0100 (Wed, 11 Apr 2007) | 5 lines\n  \n  QPID-446  AMQUserManagementMBean Initial implementation of user management in authentication file.\n  UserManagement - Added annotations for MBeanOperations\n  PrincipalDatabase - Added new methods to update,create,delete Principal.\n   - Implemented method on all PrincipalDatabase implementations, most return false to say not complete except \n  Base64MD5PasswordFilePrincipalDatabase - which now stores in memory the password file and flushes any changes to disk.\n........\n  r527493 | ritchiem | 2007-04-11 14:50:40 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  QPID-446  Missed the commit of JMXManagedObjectRegistry change on verifyPassword char[] to String\n........\n  r527499 | bhupendrab | 2007-04-11 15:16:02 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  QPID-444  : added CRAM-MD5-HASHED mechanism for sasl\n........\n  r527509 | bhupendrab | 2007-04-11 15:47:22 +0100 (Wed, 11 Apr 2007) | 1 line\n........\n  r527518 | ritchiem | 2007-04-11 16:21:37 +0100 (Wed, 11 Apr 2007) | 14 lines\n  \n  QPID-446 \n  JMXManagedObjectRegistry - Split instantiation from starting up. To all the setting of the Access file when loaded later in the startup sequence.\n  ManagedObjectRegistry - Added Start method\n  MBeanInvocationHandlerImpl - Updated to allow the setting of the access properties object from the AMQUserManagementMBean\n  NoopManagedObjectRegistry - implemented no-op start\n  ConfigurationFileApplicationRegistry - Adjusted to split creation of ManagedObjectRegistry from starting server to allow the setting of access rights.\n  AMQUserManagementMBean - Implemented reading of access rights file.\n  Base64MD5PasswordFilePrincipalDatabase - added comment for future Management.\n  PrincipalDatabaseManager - added initialiseManagement method\n  ConfigurationFilePrincipalDatabaseManager - implemented general Management initialisation.\n  PropertiesPrincipalDatabaseManager - no-op implementation\n........\n  r527537 | ritchiem | 2007-04-11 16:47:30 +0100 (Wed, 11 Apr 2007) | 2 lines\n  \n  QPID-446 Update to contain jmx config settings.\n........\n  r527556 | bhupendrab | 2007-04-11 17:07:58 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  synchronized with hash mechanism used in Broker\n........\n  r527557 | ritchiem | 2007-04-11 17:08:54 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  Fixed Bug in convertPassword where data wasn't correctly updated PropertiesPrincipalDatabase, \n........\n  r527558 | ritchiem | 2007-04-11 17:09:54 +0100 (Wed, 11 Apr 2007) | 1 line\n  \n  QpiQPID-446 Update to ensure qpid.password file is correctly written in savePasswordFile\n........\n  r527803 | ritchiem | 2007-04-12 08:16:54 +0100 (Thu, 12 Apr 2007) | 5 lines\n  \n  QPID-446 Update to write accessRights file and correctly write Base64 MD5 Hashed password to password file.\n  MBeanInvocationHandlerImpl - made statics ADMIN,READONLY,READWRITE public so they can be used in writing the access file.\n  AMQUserManagementMBean - Update to write the access File.\n  PrincipalDatabase - create getUser(username) to retrieve a Principal from the database this is then implemented in all PDs. Used to check for existence of a user.\n........\n  r527843 | ritchiem | 2007-04-12 09:52:19 +0100 (Thu, 12 Apr 2007) | 10 lines\n  \n  QPID-446 Update to send userList to JMX Management console.\n  Currently niave implementation just sending ALL users in one go. If a LDAPPrincipalDatabase was created this could be quite a lot of data a) to send but b) to create in broker Heap.\n  PrincipalDatabase - javadoc'd and getUsers method, \n   -changed verifyPassword method to take String for username rather than Principal only the Managment Console uses this method and it the MC should be changed to use the Broker SASL modules directly rather than having very similar ones of its own.\n   - Removed AccountNotFound exception from createPrincipal as it made no sence\n  No-op implementation in PlainPasswordFilePrincipalDatabase and PropertiesPrincipalDatabase\n  Base64MD5PasswordFilePrincipalDatabase changed local User class to implement Principal so current Map can be returned via getUsers\n   - Added locking to ensure integrity of files in the face of multiple edits.\n........\n  r527848 | ritchiem | 2007-04-12 10:11:19 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  QPID-446 Removed hashing of presented password in Base64MD5PasswordFilePrincipalDatabase. \n........\n  r527876 | rgodfrey | 2007-04-12 11:31:51 +0100 (Thu, 12 Apr 2007) | 3 lines\n  \n  QPID-451 Throw InvalidDestinationException on attempt to publish to a Queue which does not exist\n  Changed QueueSenderAdapter to check if the routing key is bound to a queue on the given exchange.\n  The checking can be turned off by setting the system property org.apache.qpid.client.verifyQueueBindingBeforePublish to anything but true\n........\n  r527941 | bhupendrab | 2007-04-12 14:49:10 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  not needed for management console\n........\n  r527959 | bhupendrab | 2007-04-12 15:40:36 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  refining the mbean operations\n........\n  r527972 | ritchiem | 2007-04-12 16:11:16 +0100 (Thu, 12 Apr 2007) | 3 lines\n  \n  QPID-446\n  Updated sample configs to contain jmx security options.\n........\n  r528003 | marnie | 2007-04-12 17:15:48 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  QPID-352 Changes\n........\n  r528005 | marnie | 2007-04-12 17:16:34 +0100 (Thu, 12 Apr 2007) | 1 line\n  \n  QPID-352 Changes\n........\n  r528424 | rgreig | 2007-04-13 11:17:12 +0100 (Fri, 13 Apr 2007) | 1 line\n  \n  Created new ping client that sends messages only. Usefull for examaning known queue states in mgmnt console.\n........\n  r529233 | bhupendrab | 2007-04-16 14:25:58 +0100 (Mon, 16 Apr 2007) | 1 line\n  \n  added parameter for SASL\n........\n  r529246 | bhupendrab | 2007-04-16 14:48:31 +0100 (Mon, 16 Apr 2007) | 1 line\n  \n  removed default username as guest. Added hashing for new user password field. \n........\n  r529297 | rgodfrey | 2007-04-16 16:53:45 +0100 (Mon, 16 Apr 2007) | 1 line\n  \n  QPID-453 : AMQShortString should implement Comparable\n........\n  r529635 | bhupendrab | 2007-04-17 16:07:06 +0100 (Tue, 17 Apr 2007) | 1 line\n  \n  QPID-422 : Combined all user configured notifications on one view.\n........\n  r529659 | ritchiem | 2007-04-17 17:08:00 +0100 (Tue, 17 Apr 2007) | 7 lines\n  \n  QPID-454 Message 'taken' notion is per message. But should be per message per queue\n  AMQChannel - pass queue in on all take/release/getSubscriptionDelievered calls\n  BasicRejectMethodHandler - pass queue in on getSubscriptionDelievered calls\n  AMQMessage - Changes to require AMQQueue on all take/release/getSubscriptionDelievered calls\n  ConcurrentSelectorDeliveryManager - pass queue in on take/release/getSubscriptionDelievered calls\n  SubscriptionImpl - - pass queue in on release calls\n........\n  r529666 | ritchiem | 2007-04-17 17:19:59 +0100 (Tue, 17 Apr 2007) | 11 lines\n  \n  QPID-455 Prefetched messages can cause problems with client tools.\n  AMQSession - suspend channel at startup until start() and recieve/setMessageListener are called.\n  BasicMessageConsumer - mainly style sheet changes\n  MessageListenerMultiConsumerTest - removed one test case as we cannot ensure round-robin effect at start up .. added test case for only c2 consuming when c1 does nothing.\n  MessageListenerTest - added new test that can demonstrate a further bug of message 'loss' when a receive is called only once before a message listener is set. Prefetched message end up on _SynchronousQueue regression of QPID-293 as of r501004.\n  MessageRequeueTest - Was missing a conn.start()\n  DurableSubscriptionTest - Removed blocking receives() so we don't block on failure\n  CommitRollbackTest - Text message was wrong on testGetThenDisconnect tests so adjusted\n........\n  r529669 | bhupendrab | 2007-04-17 17:43:53 +0100 (Tue, 17 Apr 2007) | 1 line\n  \n  QPID-417\n........\n  r530034 | bhupendrab | 2007-04-18 15:32:02 +0100 (Wed, 18 Apr 2007) | 2 lines\n  \n  AMQUserManagementMBean.java - calling relaod within viewUsers method.\n  Creating user list on management console instead of typing the user name.\n........\n  r530037 | ritchiem | 2007-04-18 15:37:30 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-454 Message 'taken' notion is per message. REVERTED as it just wasn't right.. needs to be refactored.\n........\n  r530041 | ritchiem | 2007-04-18 15:40:47 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-457 Fixed rollback inTran problem with test case\n........\n  r530042 | ritchiem | 2007-04-18 15:42:16 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-457 Fixed rollback inTran problem with test case Missed the actual file fix.\n........\n  r530043 | ritchiem | 2007-04-18 15:46:36 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-458 Fix to make the CSDM check if a message is taken when deliverying to browser. Removing the message from the queue and continuing if that is the caee.\n........\n  r530044 | ritchiem | 2007-04-18 15:54:36 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  Removed e.printstacktrace that sneaked in with the other code style changes.\n........\n  r530047 | ritchiem | 2007-04-18 16:09:28 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  Fix for intermittent CRT expected <1> but was <2> errors\n........\n  r530048 | ritchiem | 2007-04-18 16:10:24 +0100 (Wed, 18 Apr 2007) | 3 lines\n  \n  ResetMessageListenerTest was using the wrong queue for running tests. This was causing problems during testing.\n  \n  Changed queue to use ResetMessageListenerTest queue\n........\n  r530049 | ritchiem | 2007-04-18 16:11:22 +0100 (Wed, 18 Apr 2007) | 2 lines\n  \n  QPID-455 Prefetched messages can cause problems with client tools.\n  Removed the changes as this was causing problems. Guarded with a check for now but solution is till not correct.\n........\n  r530052 | ritchiem | 2007-04-18 16:12:45 +0100 (Wed, 18 Apr 2007) | 1 line\n  \n  QPID-455 - Guarded test with a check until a full solution is found\n........", "bug_id": "qpid-jms-amqp-0-x_90", "file": [{"additions": 21, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/bin/passwd", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/bin/passwd", "sha": "c1bb05c082331f6c35b6f85a2519802b9f1956de", "changes": 21, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/bin/passwd?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,21 @@\n+#!/bin/bash\r\n+#\r\n+# Licensed to the Apache Software Foundation (ASF) under one\r\n+# or more contributor license agreements.  See the NOTICE file\r\n+# distributed with this work for additional information\r\n+# regarding copyright ownership.  The ASF licenses this file\r\n+# to you under the Apache License, Version 2.0 (the\r\n+# \"License\"); you may not use this file except in compliance\r\n+# with the License.  You may obtain a copy of the License at\r\n+#\r\n+#   http://www.apache.org/licenses/LICENSE-2.0\r\n+#\r\n+# Unless required by applicable law or agreed to in writing,\r\n+# software distributed under the License is distributed on an\r\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+# KIND, either express or implied.  See the License for the\r\n+# specific language governing permissions and limitations\r\n+# under the License.\r\n+#\r\n+\r\n+. qpid-run org.apache.qpid.server.security.Passwd \"$@\"\r", "filename": "broker/bin/passwd"}, {"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/bin/qpid-server", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/bin/qpid-server", "sha": "a2b416b12ba81a397010a095904d8d3cd4325952", "changes": 9, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/bin/qpid-server?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -18,4 +18,13 @@\n # under the License.\n #\n \n+# Set classpath to include Qpid jar with all required jars in manifest\n+QPID_LIBS=$QPID_HOME/lib/qpid-incubating.jar:$QPID_HOME/lib/bdbstore-launch.jar\n+\n+# Set other variables used by the qpid-run script before calling\n+export JAVA=java \\\n+       JAVA_VM=-server \\\n+       JAVA_MEM=-Xmx1024m \\\n+       QPID_CLASSPATH=$QPID_LIBS\n+\n . qpid-run org.apache.qpid.server.Main \"$@\"", "filename": "broker/bin/qpid-server"}, {"additions": 18, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/bin/qpid.stop", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/bin/qpid.stop", "sha": "9193d3c4e17cf58b73cf204dd503c9f44e0f1de4", "changes": 38, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/bin/qpid.stop?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -5,17 +5,18 @@\n # Script checks for a given pid running PROGRAM and attempts to quit it\n #\n \n-MAX_ATTEMPTS=5\n-SLEEP_DELAY=2\n-PROGRAM=\"org.apache.qpid.server.Main\"\n+MAX_ATTEMPTS=1\n+SLEEP_DELAY=1\n+PROGRAM=\"DQPID\"\n \n \n #\n # Print what is going to be done\n #\n printActions()\n {\n-ps=`ps o command p $1|grep $PROGRAM`\n+#ps=`ps o command p $1|grep $PROGRAM`\n+ps=`ps -o args -p $1|grep $PROGRAM`\n echo \"Attempting to kill: $ps\"\n }\n \n@@ -36,42 +37,40 @@ quit()\n kill $1\n }\n \n+#\n+# Grep the ps log for the PID ($1) to ensure that it has quit\n+#\n+lookup()\n+{\n+result=`ps -o args -p $1 |grep -v grep |grep $PROGRAM |wc -l`\n+}\n \n #\n # Sleep and then check then lookup the PID($1) to ensure it has quit\n #\n check()\n {\n+echo \"Waiting $SLEEP_DELAY second for $1 to exit\"\n sleep $SLEEP_DELAY\n lookup $1\n }\n \n \n-#\n-# Grep the ps log for the PID ($1) to ensure that it has quit\n-#\n-lookup()\n-{\n-result=`ps p $1 |grep -v grep |grep $PROGRAM |wc -l`\n-}\n-\n \n #\n # Verify the PID($1) is available\n #\n verifyPid()\n {\n lookup $1\n-if [[ $result == 1 ]] ; then\t\n+if [[ $[$result] == 1 ]] ; then\n  brokerspid=$1\n else\n  echo \"Unable to locate Qpid Process with PID $1\"\n  exit -1\n fi\n }\n \n-\n-\n #\n # Main Run\n #\n@@ -89,30 +88,29 @@ printActions $brokerspid\n \n # Attempt to quit the process MAX_ATTEMPTS Times\n attempt=0\n-while [[ $result > 0 && $attempt < $MAX_ATTEMPTS ]] ; do\n+while [[ $[$result] > 0 && $[$attempt] < $[$MAX_ATTEMPTS] ]] ; do\n  quit $brokerspid\n  check $brokerspid\n  attempt=$[$attempt + 1]\n done\n \n-\n # Check that it has quit\n-if [[ $results == 0 ]] ; then\n+if [[ $[$result] == 0 ]] ; then\n  echo \"Process quit\"\n  exit 0\n else\n \n  # Now attempt to force quit the process\n  attempt=0\n- while [[ $result > 0 && $attempt < $MAX_ATTEMPTS ]] ; do\n+ while [[ $[$result] > 0 && $[$attempt] < $[$MAX_ATTEMPTS] ]] ; do\n   forceQuit $brokerspid\n   check $brokerspid\n   attempt=$[$attempt + 1]\n  done\n \n \n  # Output final status\n- if [[ $attempt == $MAX_ATTEMPTS ]] ; then\n+ if [[ $[$result] > 0 && $[$attempt] == $[$MAX_ATTEMPTS] ]] ; then\n \techo \"Stopped trying to kill process: $brokerspid\"\n \techo \"Attempted to stop $attempt times\"\n  else", "filename": "broker/bin/qpid.stop"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/bin/qpid.stopall", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/bin/qpid.stopall", "sha": "2e762bdd50fce310ba2c813c98badd0012456b39", "changes": 15, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/bin/qpid.stopall?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -6,17 +6,16 @@\n #  Utilises qpid.stop to perform the actual stopping\n #\n \n-MAX_ATTEMPTS=5\n-SLEEP_DELAY=2\n-PROGRAM=\"org.apache.qpid.server.Main\"\n+PROGRAM=\"DQPID\"\n \n #\n # grep ps for instances of $PROGRAM and collect PIDs\n #\n lookup()\n {\n-pids=`ps o pid,command  |grep -v grep | grep $PROGRAM | cut -d ' ' -f 1`\n-result=`echo -n $pids | wc -l`\n+#pids=`ps o pid,command  | grep $PROGRAM | grep -v grep | cut -d ' ' -f 1`\n+pids=`ps -ef |grep $USER | grep $PROGRAM | grep -v grep | awk '{print $2}'`\n+result=`echo -n $pids | wc -w`\n }\n \n \n@@ -25,7 +24,7 @@ result=`echo -n $pids | wc -l`\n #\n showPids()\n {\n-ps p $pids\n+ps -o user,pid,args -p $pids\n }\n \n \n@@ -35,7 +34,7 @@ ps p $pids\n \n lookup\n \n-if [[ $result == 0 ]] ; then\n+if [[ $[$result] == 0 ]] ; then\n  echo \"No Qpid Brokers found running under user '$USER'\"\n  exit 0\n fi\n@@ -49,7 +48,7 @@ done\n # Check we have quit all\n lookup\n \n-if [[ $result == 0 ]] ; then\n+if [[ $[$result] == 0 ]] ; then\n  echo \"All Qpid brokers successfully quit\"\n else\n  echo \"Some brokers were not quit\"", "filename": "broker/bin/qpid.stopall"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/distribution/src/main/assembly/broker-bin.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/distribution/src/main/assembly/broker-bin.xml", "sha": "4b3263077112b67743a6ee12d039ae14110bff64", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/distribution/src/main/assembly/broker-bin.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -77,6 +77,12 @@\n       <destName>config.xml</destName>\n       <fileMode>420</fileMode>\n     </file>\n+    <file>\n+      <source>../etc/jmxremote.access</source>\n+      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n+      <destName>jmxremote.access</destName>\n+      <fileMode>420</fileMode>\n+    </file>\n     <file>\n       <source>../etc/log4j.xml</source>\n       <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n@@ -107,6 +113,12 @@\n       <destName>qpid-run</destName>\n       <fileMode>473</fileMode>\n     </file>\n+    <file>\n+      <source>../bin/passwd</source>\n+      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n+      <destName>passwd</destName>\n+      <fileMode>473</fileMode>\n+    </file>\n     <file>\n       <source>../bin/qpid-server</source>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>", "filename": "broker/distribution/src/main/assembly/broker-bin.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/access", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/access", "sha": "a781ed8aa999331ab37ff397fa9e81e0a9bcad3f", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/access?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1 @@\n+guest:localhost(rw),test(rw)\n\\ No newline at end of file", "filename": "broker/etc/access"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/config.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/config.xml", "sha": "c66c2f632e3046215b1c5eaaf0f92f11571ddf8a", "changes": 20, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/config.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -41,6 +41,8 @@\n     </connector>\n     <management>\n         <enabled>true</enabled>\n+        <jmxport>8999</jmxport>\n+        <security-enabled>true</security-enabled>\n     </management>\n     <advanced>\n         <filterchain enableExecutorPool=\"true\"/>\n@@ -63,13 +65,14 @@\n                 </attributes>\n             </principal-database>\n \n-            <!--principal-database>\n-                <name>md5passwordfile</name>\n-                <class>org.apache.qpid.server.security.auth.database.MD5PasswordFilePrincipalDatabase</class>\n+            <!-- Example use of Base64 encoded MD5 hashes for authentication via CRAM-MD5-Hashed\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.Base64MD5PasswordFilePrincipalDatabase</class>\n                 <attributes>\n                     <attribute>\n                         <name>passwordFile</name>\n-                        <value>${conf}/md5passwd</value>\n+                        <value>${conf}/qpid.passwd</value>\n                     </attribute>\n                 </attributes>\n             </principal-database-->\n@@ -78,16 +81,21 @@\n         <access>\n             <class>org.apache.qpid.server.security.access.AllowAll</class>\n         </access>\n+        <jmx>\n+            <access>${conf}/jmxremote.access</access>\n+            <principal-database>passwordfile</principal-database>\n+        </jmx>        \n     </security>\n \n     <virtualhosts>\n         <virtualhost>\n             <name>localhost</name>\n             <localhost>\n                 <store>\n-                    <!-- <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>  -->\n+                    <!-- <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/localhost-store</environment-path> -->\n+\n                     <class>org.apache.qpid.server.store.MemoryMessageStore</class>\n-                    <environment-path>localhost-store</environment-path>\n                 </store>\n \n                 <security>", "filename": "broker/etc/config.xml"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/jmxremote.access", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/jmxremote.access", "sha": "d1172fc197ac7862d1350cebe4f795913c818fe8", "changes": 3, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/jmxremote.access?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,3 @@\n+admin=admin\n+guest=readonly\n+user=readwrite", "filename": "broker/etc/jmxremote.access"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/log4j.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/log4j.xml", "sha": "b44222760790d2dea50310cd708def22cdd204f1", "changes": 10, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/log4j.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -44,20 +44,16 @@\n         <param name=\"backupFilesToPath\" value=\"${QPID_WORK}/backup/log\"/>\n \n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n-            <!--param name=\"ConversionPattern\" value=\"%t %-5p %c{2} - %m%n\"/-->\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>            \n         </layout>\n     </appender>\n \n-        <appender name=\"FileAppender\" class=\"org.apache.log4j.FileAppender\">\n-        <param name=\"staticLogFileName\" value=\"false\"/>\n-\n+    <appender name=\"FileAppender\" class=\"org.apache.log4j.FileAppender\">\n         <param name=\"File\" value=\"${QPID_WORK}/log/${logprefix}qpid${logsuffix}.log\"/>\n         <param name=\"Append\" value=\"false\"/>\n \n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%t %-5p %c{2} - %m%n\"/>\n-\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n         </layout>\n     </appender>\n ", "filename": "broker/etc/log4j.xml"}, {"additions": 132, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/persistent_config.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/persistent_config.xml", "sha": "178a73515c6c0d2f51dd3d8c2c19368b3719db2c", "changes": 132, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/persistent_config.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,132 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+\n+ This is an example config using the BDBMessageStore available from\n+ the Red Hat Messaging project at etp.108.redhat.com and distributed under GPL.\n+ -->\n+        \n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <connector>\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+        <jmxport>8999</jmxport>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+        <jmx>\n+            <access>${conf}/jmxremote.access</access>\n+            <principal-database>passwordfile</principal-database>\n+        </jmx>\n+    </security>\n+\n+    <virtualhosts>\n+        <virtualhost>\n+            <name>localhost</name>\n+            <localhost>\n+                <store>\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdbstore/localhost-store</environment-path>\n+                </store>\n+\n+                <security>\n+                    <access>\n+                        <class>org.apache.qpid.server.security.access.PrincipalDatabaseAccessManager</class>\n+                        <attributes>\n+                            <attribute>\n+                                <name>principalDatabase</name>\n+                                <value>passwordfile</value>\n+                            </attribute>\n+                            <attribute>\n+                                <name>defaultAccessManager</name>\n+                                <value>DenyAll</value>\n+                            </attribute>\n+                        </attributes>\n+                    </access>\n+                </security>\n+            </localhost>\n+        </virtualhost>\n+\n+        <virtualhost>\n+            <name>development</name>\n+            <development>\n+                <store>\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdbstore/development-store</environment-path>\n+                </store>\n+            </development>\n+        </virtualhost>\n+\n+        <virtualhost>\n+            <name>test</name>\n+            <test>\n+                <store>\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdbstore/test-store</environment-path>\n+                </store>\n+            </test>\n+        </virtualhost>\n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+", "filename": "broker/etc/persistent_config.xml"}, {"additions": 128, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/transient_config.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/etc/transient_config.xml", "sha": "164d66cd1b527dda1ef7bbdfe7eff9ed85eb30b1", "changes": 128, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/transient_config.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,128 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+\n+ This is an example config file that uses the MemoryMessageStore.\n+  As a result it is aimed at brokers sending transient messages.\n+\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <connector>\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+        <jmxport>8999</jmxport>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+        <jmx>\n+            <access>${conf}/jmxremote.access</access>\n+            <principal-database>passwordfile</principal-database>\n+        </jmx>\n+    </security>\n+\n+    <virtualhosts>\n+        <virtualhost>\n+            <name>localhost</name>\n+            <localhost>\n+                <store>\n+                    <class>org.apache.qpid.server.store.MemoryMessageStore</class>\n+                </store>\n+\n+                <security>\n+                    <access>\n+                        <class>org.apache.qpid.server.security.access.PrincipalDatabaseAccessManager</class>\n+                        <attributes>\n+                            <attribute>\n+                                <name>principalDatabase</name>\n+                                <value>passwordfile</value>\n+                            </attribute>\n+                            <attribute>\n+                                <name>defaultAccessManager</name>\n+                                <value>DenyAll</value>\n+                            </attribute>\n+                        </attributes>\n+                    </access>\n+                </security>\n+            </localhost>\n+        </virtualhost>\n+\n+        <virtualhost>\n+            <name>development</name>\n+            <development>\n+                <store>\n+                    <class>org.apache.qpid.server.store.MemoryMessageStore</class>\n+                </store>\n+            </development>\n+        </virtualhost>\n+\n+        <virtualhost>\n+            <name>test</name>\n+            <test>\n+                <store>\n+                    <class>org.apache.qpid.server.store.MemoryMessageStore</class>\n+                </store>\n+            </test>\n+        </virtualhost>\n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+", "filename": "broker/etc/transient_config.xml"}, {"additions": 40, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBean.java", "sha": "d31359b0196f26777ae7fbe02340eefeb4e19277", "changes": 53, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBean.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,3 +1,23 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n /*\n  *\n  * Copyright (c) 2006 The Apache Software Foundation\n@@ -22,8 +42,12 @@\n import javax.management.MalformedObjectNameException;\n import javax.management.ObjectName;\n \n+import org.apache.commons.configuration.Configuration;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.configuration.Configurator;\n+import org.apache.qpid.server.configuration.VirtualHostConfiguration;\n import org.apache.qpid.server.exchange.Exchange;\n import org.apache.qpid.server.exchange.ExchangeFactory;\n import org.apache.qpid.server.exchange.ExchangeRegistry;\n@@ -36,9 +60,6 @@\n import org.apache.qpid.server.queue.QueueRegistry;\n import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n-import org.apache.qpid.server.configuration.Configurator;\n-import org.apache.qpid.server.configuration.VirtualHostConfiguration;\n-import org.apache.commons.configuration.Configuration;\n \n /**\n  * This MBean implements the broker management interface and exposes the\n@@ -82,8 +103,7 @@ public String getObjectInstanceName()\n      * @param autoDelete\n      * @throws JMException\n      */\n-    public void createNewExchange(String exchangeName, String type, boolean durable, boolean autoDelete)\n-            throws JMException\n+    public void createNewExchange(String exchangeName, String type, boolean durable) throws JMException\n     {\n         try\n         {\n@@ -92,7 +112,8 @@ public void createNewExchange(String exchangeName, String type, boolean durable,\n                 Exchange exchange = _exchangeRegistry.getExchange(new AMQShortString(exchangeName));\n                 if (exchange == null)\n                 {\n-                    exchange = _exchangeFactory.createExchange(new AMQShortString(exchangeName), new AMQShortString(type), durable, autoDelete, 0);\n+                    exchange = _exchangeFactory.createExchange(new AMQShortString(exchangeName), new AMQShortString(type),\n+                                                               durable, false, 0);\n                     _exchangeRegistry.registerExchange(exchange);\n                 }\n                 else\n@@ -140,8 +161,7 @@ public void unregisterExchange(String exchangeName) throws JMException\n      * @param autoDelete\n      * @throws JMException\n      */\n-    public void createNewQueue(String queueName, String owner, boolean durable,boolean autoDelete)\n-            throws JMException\n+    public void createNewQueue(String queueName, String owner, boolean durable) throws JMException\n     {\n         AMQQueue queue = _queueRegistry.getQueue(new AMQShortString(queueName));\n         if (queue != null)\n@@ -156,22 +176,27 @@ public void createNewQueue(String queueName, String owner, boolean durable,boole\n             {\n                 ownerShortString = new AMQShortString(owner);\n             }\n-            queue = new AMQQueue(new AMQShortString(queueName), durable, ownerShortString, autoDelete, getVirtualHost());\n+\n+            queue = new AMQQueue(new AMQShortString(queueName), durable, ownerShortString, false, getVirtualHost());\n             if (queue.isDurable() && !queue.isAutoDelete())\n             {\n                 _messageStore.createQueue(queue);\n             }\n \n-            Configuration virtualHostDefaultQueueConfiguration = VirtualHostConfiguration.getDefaultQueueConfiguration(queue);\n+            Configuration virtualHostDefaultQueueConfiguration =\n+                VirtualHostConfiguration.getDefaultQueueConfiguration(queue);\n             if (virtualHostDefaultQueueConfiguration != null)\n             {\n                 Configurator.configure(queue, virtualHostDefaultQueueConfiguration);\n             }\n+\n             _queueRegistry.registerQueue(queue);\n         }\n         catch (AMQException ex)\n         {\n-            throw new MBeanException(new JMException(ex.getMessage()),\"Error in creating queue \" + queueName);\n+            JMException jme = new JMException(ex.getMessage());\n+            jme.initCause(ex);\n+            throw new MBeanException(jme, \"Error in creating queue \" + queueName);\n         }\n     }\n \n@@ -202,7 +227,9 @@ public void deleteQueue(String queueName) throws JMException\n         }\n         catch (AMQException ex)\n         {\n-            throw new MBeanException(new JMException(ex.getMessage()), \"Error in deleting queue \" + queueName);\n+            JMException jme = new JMException(ex.getMessage());\n+            jme.initCause(ex);\n+            throw new MBeanException(jme, \"Error in deleting queue \" + queueName);\n         }\n     }\n \n@@ -213,7 +240,7 @@ public ManagedObject getParentObject()\n \n     // This will have a single instance for a virtual host, so not having the name property in the ObjectName\n     public ObjectName getObjectName() throws MalformedObjectNameException\n-    {        \n+    {\n         return getObjectNameForSingleInstanceMBean();\n     }\n } // End of MBean class", "filename": "broker/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBean.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "sha": "2e1653e69dd7131363883227d105115f086fd030", "changes": 13, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -472,7 +472,7 @@ public void requeue() throws AMQException\n             if (unacked.queue != null)\n             {\n                 // Ensure message is released for redelivery\n-                unacked.message.release();\n+                unacked.message.release(unacked.queue);\n \n                 // Mark message redelivered\n                 unacked.message.setRedelivered(true);\n@@ -503,7 +503,10 @@ public void requeue(long deliveryTag) throws AMQException\n         {\n \n             // Ensure message is released for redelivery\n-            unacked.message.release();\n+            if (unacked.queue != null)\n+            {\n+                unacked.message.release(unacked.queue);\n+            }\n \n             // Mark message redelivered\n             unacked.message.setRedelivered(true);\n@@ -672,14 +675,14 @@ public void visitComplete()\n //            else\n //            {\n             //release to allow it to be delivered\n-            msg.release();\n+            msg.release(message.queue);\n \n             // Without any details from the client about what has been processed we have to mark\n             // all messages in the unacked map as redelivered.\n             msg.setRedelivered(true);\n \n \n-            Subscription sub = msg.getDeliveredSubscription();\n+            Subscription sub = msg.getDeliveredSubscription(message.queue);\n \n             if (sub != null)\n             {\n@@ -753,7 +756,7 @@ public void visitComplete()\n         // Process Messages to Requeue at the front of the queue\n         for (UnacknowledgedMessage message : msgToRequeue)\n         {\n-            message.message.release();\n+            message.message.release(message.queue);\n             message.message.setRedelivered(true);\n \n             deliveryContext.deliver(message.message, message.queue, true);", "filename": "broker/src/main/java/org/apache/qpid/server/AMQChannel.java"}, {"additions": 55, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/Main.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/Main.java", "sha": "146d0566cef083ef72ea955221325ecb764b31de", "changes": 91, "status": "modified", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/Main.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -36,14 +36,17 @@\n import org.apache.commons.cli.ParseException;\n import org.apache.commons.cli.PosixParser;\n import org.apache.commons.configuration.ConfigurationException;\n+\n import org.apache.log4j.BasicConfigurator;\n import org.apache.log4j.Logger;\n import org.apache.log4j.xml.DOMConfigurator;\n+\n import org.apache.mina.common.ByteBuffer;\n import org.apache.mina.common.IoAcceptor;\n import org.apache.mina.common.SimpleByteBufferAllocator;\n import org.apache.mina.transport.socket.nio.SocketAcceptorConfig;\n import org.apache.mina.transport.socket.nio.SocketSessionConfig;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.ProtocolVersion;\n import org.apache.qpid.pool.ReadWriteThreadModel;\n@@ -59,7 +62,7 @@\n  * Main entry point for AMQPD.\n  *\n  */\n-@SuppressWarnings({\"AccessStaticViaInstance\"})\n+@SuppressWarnings({ \"AccessStaticViaInstance\" })\n public class Main\n {\n     private static final Logger _logger = Logger.getLogger(Main.class);\n@@ -74,9 +77,9 @@\n \n     protected static class InitException extends Exception\n     {\n-        InitException(String msg)\n+        InitException(String msg, Throwable cause)\n         {\n-            super(msg);\n+            super(msg, cause);\n         }\n     }\n \n@@ -97,13 +100,15 @@ protected boolean parseCommandline(String[] args)\n         try\n         {\n             commandLine = new PosixParser().parse(options, args);\n+\n             return true;\n         }\n         catch (ParseException e)\n         {\n             System.err.println(\"Error: \" + e.getMessage());\n             HelpFormatter formatter = new HelpFormatter();\n             formatter.printHelp(\"Qpid\", options, true);\n+\n             return false;\n         }\n     }\n@@ -112,17 +117,26 @@ protected void setOptions(Options options)\n     {\n         Option help = new Option(\"h\", \"help\", false, \"print this message\");\n         Option version = new Option(\"v\", \"version\", false, \"print the version information and exit\");\n-        Option configFile = OptionBuilder.withArgName(\"file\").hasArg().withDescription(\"use given configuration file\").\n-                withLongOpt(\"config\").create(\"c\");\n-        Option port = OptionBuilder.withArgName(\"port\").hasArg().withDescription(\"listen on the specified port. Overrides any value in the config file\").\n-                withLongOpt(\"port\").create(\"p\");\n-        Option bind = OptionBuilder.withArgName(\"bind\").hasArg().withDescription(\"bind to the specified address. Overrides any value in the config file\").\n-                withLongOpt(\"bind\").create(\"b\");\n-        Option logconfig = OptionBuilder.withArgName(\"logconfig\").hasArg().withDescription(\"use the specified log4j xml configuration file. By \" +\n-                \"default looks for a file named \" + DEFAULT_LOG_CONFIG_FILENAME + \" in the same directory as the configuration file\").\n-                withLongOpt(\"logconfig\").create(\"l\");\n-        Option logwatchconfig = OptionBuilder.withArgName(\"logwatch\").hasArg().withDescription(\"monitor the log file configuration file for changes. Units are seconds. \" +\n-                \"Zero means do not check for changes.\").withLongOpt(\"logwatch\").create(\"w\");\n+        Option configFile =\n+            OptionBuilder.withArgName(\"file\").hasArg().withDescription(\"use given configuration file\").withLongOpt(\"config\")\n+                         .create(\"c\");\n+        Option port =\n+            OptionBuilder.withArgName(\"port\").hasArg()\n+                         .withDescription(\"listen on the specified port. Overrides any value in the config file\")\n+                         .withLongOpt(\"port\").create(\"p\");\n+        Option bind =\n+            OptionBuilder.withArgName(\"bind\").hasArg()\n+                         .withDescription(\"bind to the specified address. Overrides any value in the config file\")\n+                         .withLongOpt(\"bind\").create(\"b\");\n+        Option logconfig =\n+            OptionBuilder.withArgName(\"logconfig\").hasArg()\n+                         .withDescription(\"use the specified log4j xml configuration file. By \"\n+                + \"default looks for a file named \" + DEFAULT_LOG_CONFIG_FILENAME\n+                + \" in the same directory as the configuration file\").withLongOpt(\"logconfig\").create(\"l\");\n+        Option logwatchconfig =\n+            OptionBuilder.withArgName(\"logwatch\").hasArg()\n+                         .withDescription(\"monitor the log file configuration file for changes. Units are seconds. \"\n+                + \"Zero means do not check for changes.\").withLongOpt(\"logwatch\").create(\"w\");\n \n         options.addOption(help);\n         options.addOption(version);\n@@ -150,17 +164,19 @@ else if (commandLine.hasOption(\"v\"))\n             boolean first = true;\n             for (ProtocolVersion pv : ProtocolVersion.getSupportedProtocolVersions())\n             {\n-                if(first)\n+                if (first)\n                 {\n                     first = false;\n                 }\n                 else\n                 {\n                     protocol.append(\", \");\n                 }\n+\n                 protocol.append(pv.getMajorVersion()).append('-').append(pv.getMinorVersion());\n \n             }\n+\n             System.out.println(ver + \" (\" + protocol + \")\");\n         }\n         else\n@@ -186,7 +202,6 @@ else if (commandLine.hasOption(\"v\"))\n         }\n     }\n \n-\n     protected void startup() throws InitException, ConfigurationException, Exception\n     {\n         final String QpidHome = System.getProperty(\"QPID_HOME\");\n@@ -201,7 +216,7 @@ protected void startup() throws InitException, ConfigurationException, Exception\n                 error = error + \"\\nNote: Qpid_HOME is not set.\";\n             }\n \n-            throw new InitException(error);\n+            throw new InitException(error, null);\n         }\n         else\n         {\n@@ -226,8 +241,8 @@ protected void startup() throws InitException, ConfigurationException, Exception\n \n         _logger.info(\"Starting Qpid.AMQP broker\");\n \n-        ConnectorConfiguration connectorConfig = ApplicationRegistry.getInstance().\n-                getConfiguredObject(ConnectorConfiguration.class);\n+        ConnectorConfiguration connectorConfig =\n+            ApplicationRegistry.getInstance().getConfiguredObject(ConnectorConfiguration.class);\n \n         ByteBuffer.setUseDirectBuffers(connectorConfig.enableDirectBuffers);\n \n@@ -249,7 +264,7 @@ protected void startup() throws InitException, ConfigurationException, Exception\n             }\n             catch (NumberFormatException e)\n             {\n-                throw new InitException(\"Invalid port: \" + portStr);\n+                throw new InitException(\"Invalid port: \" + portStr, e);\n             }\n         }\n \n@@ -264,19 +279,21 @@ protected void startup() throws InitException, ConfigurationException, Exception\n                 int totalVHosts = ((Collection) virtualHosts).size();\n                 for (int vhost = 0; vhost < totalVHosts; vhost++)\n                 {\n-                    setupVirtualHosts(configFile.getParent() , (String)((List)virtualHosts).get(vhost));\n+                    setupVirtualHosts(configFile.getParent(), (String) ((List) virtualHosts).get(vhost));\n                 }\n             }\n             else\n             {\n-               setupVirtualHosts(configFile.getParent() , (String)virtualHosts);\n+                setupVirtualHosts(configFile.getParent(), (String) virtualHosts);\n             }\n         }\n+\n         bind(port, connectorConfig);\n \n     }\n \n-    protected void setupVirtualHosts(String configFileParent, String configFilePath) throws ConfigurationException, AMQException, URLSyntaxException\n+    protected void setupVirtualHosts(String configFileParent, String configFilePath)\n+        throws ConfigurationException, AMQException, URLSyntaxException\n     {\n         String configVar = \"${conf}\";\n \n@@ -285,7 +302,7 @@ protected void setupVirtualHosts(String configFileParent, String configFilePath)\n             configFilePath = configFileParent + configFilePath.substring(configVar.length());\n         }\n \n-        if (configFilePath.indexOf(\".xml\") != -1 )\n+        if (configFilePath.indexOf(\".xml\") != -1)\n         {\n             VirtualHostConfiguration vHostConfig = new VirtualHostConfiguration(configFilePath);\n             vHostConfig.performBindings();\n@@ -298,11 +315,12 @@ protected void setupVirtualHosts(String configFileParent, String configFilePath)\n \n             String[] fileNames = virtualHostDir.list();\n \n-            for (int each=0; each < fileNames.length; each++)\n+            for (int each = 0; each < fileNames.length; each++)\n             {\n                 if (fileNames[each].endsWith(\".xml\"))\n                 {\n-                    VirtualHostConfiguration vHostConfig = new VirtualHostConfiguration(configFilePath+\"/\"+fileNames[each]);\n+                    VirtualHostConfiguration vHostConfig =\n+                        new VirtualHostConfiguration(configFilePath + \"/\" + fileNames[each]);\n                     vHostConfig.performBindings();\n                 }\n             }\n@@ -319,7 +337,7 @@ protected void bind(int port, ConnectorConfiguration connectorConfig)\n \n         try\n         {\n-            //IoAcceptor acceptor = new SocketAcceptor(connectorConfig.processors);\n+            // IoAcceptor acceptor = new SocketAcceptor(connectorConfig.processors);\n             IoAcceptor acceptor = connectorConfig.createAcceptor();\n             SocketAcceptorConfig sconfig = (SocketAcceptorConfig) acceptor.getDefaultConfig();\n             SocketSessionConfig sc = (SocketSessionConfig) sconfig.getSessionConfig();\n@@ -334,7 +352,7 @@ protected void bind(int port, ConnectorConfiguration connectorConfig)\n             {\n                 sconfig.setThreadModel(ReadWriteThreadModel.getInstance());\n             }\n-            \n+\n             if (!connectorConfig.enableSSL || !connectorConfig.sslOnly)\n             {\n                 AMQPFastProtocolHandler handler = new AMQPProtocolProvider().getHandler();\n@@ -347,6 +365,7 @@ protected void bind(int port, ConnectorConfiguration connectorConfig)\n                 {\n                     bindAddress = new InetSocketAddress(InetAddress.getByAddress(parseIP(bindAddr)), port);\n                 }\n+\n                 acceptor.bind(bindAddress, handler, sconfig);\n                 _logger.info(\"Qpid.AMQP listening on non-SSL address \" + bindAddress);\n             }\n@@ -356,8 +375,7 @@ protected void bind(int port, ConnectorConfiguration connectorConfig)\n                 AMQPFastProtocolHandler handler = new AMQPProtocolProvider().getHandler();\n                 try\n                 {\n-                    acceptor.bind(new InetSocketAddress(connectorConfig.sslPort),\n-                                  handler, sconfig);\n+                    acceptor.bind(new InetSocketAddress(connectorConfig.sslPort), handler, sconfig);\n                     _logger.info(\"Qpid.AMQP listening on SSL port \" + connectorConfig.sslPort);\n                 }\n                 catch (IOException e)\n@@ -415,16 +433,17 @@ private void configureLogging(File logConfigFile, String logWatchConfig)\n         }\n         catch (NumberFormatException e)\n         {\n-            System.err.println(\"Log watch configuration value of \" + logWatchConfig + \" is invalid. Must be \" +\n-                    \"a non-negative integer. Using default of zero (no watching configured\");\n+            System.err.println(\"Log watch configuration value of \" + logWatchConfig + \" is invalid. Must be \"\n+                + \"a non-negative integer. Using default of zero (no watching configured\");\n         }\n+\n         if (logConfigFile.exists() && logConfigFile.canRead())\n         {\n             System.out.println(\"Configuring logger using configuration file \" + logConfigFile.getAbsolutePath());\n             if (logWatchTime > 0)\n             {\n-                System.out.println(\"log file \" + logConfigFile.getAbsolutePath() + \" will be checked for changes every \" +\n-                        logWatchTime + \" seconds\");\n+                System.out.println(\"log file \" + logConfigFile.getAbsolutePath() + \" will be checked for changes every \"\n+                    + logWatchTime + \" seconds\");\n                 // log4j expects the watch interval in milliseconds\n                 DOMConfigurator.configureAndWatch(logConfigFile.getAbsolutePath(), logWatchTime * 1000);\n             }", "filename": "broker/src/main/java/org/apache/qpid/server/Main.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java", "sha": "de3905268e16e4b9a6b16ead3cae70c13659fa84", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -196,6 +196,7 @@ public void route(AMQMessage payload) throws AMQException\n             }\n             else\n             {\n+                _logger.error(\"MESSAGE LOSS: Message should be sent on a Dead Letter Queue\");                \n                 _logger.warn(msg);\n             }\n         }", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java", "sha": "9052b2e81f276eaf09d4b766e827e9f9ea69c690", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -98,7 +98,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicRej\n             // If we haven't requested message to be resent to this consumer then reject it from ever getting it.\n //            if (!evt.getMethod().resend)\n             {\n-                message.message.reject(message.message.getDeliveredSubscription());\n+                message.message.reject(message.message.getDeliveredSubscription(message.queue));\n             }\n \n             if (evt.getMethod().requeue)", "filename": "broker/src/main/java/org/apache/qpid/server/handler/BasicRejectMethodHandler.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java", "sha": "30a40c5a75d998a1ab8f387c6517a01296418182", "changes": 16, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -33,6 +33,7 @@\n import org.apache.qpid.server.state.StateAwareMethodListener;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.security.access.AccessResult;\n+import org.apache.qpid.server.security.access.AccessRights;\n import org.apache.log4j.Logger;\n \n public class ConnectionOpenMethodHandler implements StateAwareMethodListener<ConnectionOpenBody>\n@@ -75,23 +76,26 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Connecti\n \n         if (virtualHost == null)\n         {\n-            throw body.getConnectionException(AMQConstant.NOT_FOUND, \"Unknown virtual host: \" + virtualHostName);\n+            throw body.getConnectionException(AMQConstant.NOT_FOUND, \"Unknown virtual host: '\" + virtualHostName + \"'\");\n         }\n         else\n         {\n             session.setVirtualHost(virtualHost);\n \n-            AccessResult result = virtualHost.getAccessManager().isAuthorized(virtualHost, session.getAuthorizedID());\n+            AccessResult result = virtualHost.getAccessManager().isAuthorized(virtualHost, session.getAuthorizedID(), AccessRights.Rights.ANY);\n \n             switch (result.getStatus())\n             {\n                 default:\n                 case REFUSED:\n-                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED,\n-                                                      \"Access denied to vHost '\" + virtualHostName + \"' by \"\n-                                                      + result.getAuthorizer());\n+                    String error = \"Any access denied to vHost '\" + virtualHostName + \"' by \"\n+                                   + result.getAuthorizer();\n+                    \n+                    _logger.warn(error);\n+\n+                    throw body.getConnectionException(AMQConstant.ACCESS_REFUSED, error);\n                 case GRANTED:\n-                    _logger.info(\"Granted access to vHost '\" + virtualHostName + \"' for \" + session.getAuthorizedID()\n+                    _logger.info(\"Granted any access to vHost '\" + virtualHostName + \"' for \" + session.getAuthorizedID()\n                                  + \" by '\" + result.getAuthorizer() + \"'\");\n             }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/handler/ConnectionOpenMethodHandler.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/ConnectionSecureOkMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/ConnectionSecureOkMethodHandler.java", "sha": "fef00942a010026b1cfdd3eef88ccf1172170fb0", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/ConnectionSecureOkMethodHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -37,6 +37,7 @@\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.security.auth.manager.AuthenticationManager;\n import org.apache.qpid.server.security.auth.AuthenticationResult;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.state.AMQState;\n import org.apache.qpid.server.state.AMQStateManager;\n import org.apache.qpid.server.state.StateAwareMethodListener;\n@@ -106,7 +107,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Connecti\n                     ConnectionStartOkMethodHandler.getConfiguredFrameSize(),\t// frameMax\n                     HeartbeatConfig.getInstance().getDelay());\t// heartbeat\n                 session.writeFrame(tune);\n-                session.setAuthorizedID(ss.getAuthorizationID());                \n+                session.setAuthorizedID(new UsernamePrincipal(ss.getAuthorizationID()));                \n                 disposeSaslServer(session);\n                 break;\n             case CONTINUE:", "filename": "broker/src/main/java/org/apache/qpid/server/handler/ConnectionSecureOkMethodHandler.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java", "sha": "47341434974580a4b697cd33f1e0f5b3c0ff479d", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -37,6 +37,7 @@\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.security.auth.manager.AuthenticationManager;\n import org.apache.qpid.server.security.auth.AuthenticationResult;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.state.AMQState;\n import org.apache.qpid.server.state.AMQStateManager;\n import org.apache.qpid.server.state.StateAwareMethodListener;\n@@ -95,7 +96,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Connecti\n                     throw new AMQException(\"Authentication failed\");\n                 case SUCCESS:\n                     _logger.info(\"Connected as: \" + ss.getAuthorizationID());\n-                    session.setAuthorizedID(ss.getAuthorizationID());\n+                    session.setAuthorizedID(new UsernamePrincipal(ss.getAuthorizationID()));                \n \n                     stateManager.changeState(AMQState.CONNECTION_NOT_TUNED);\n                     // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)", "filename": "broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java"}, {"additions": 25, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java", "sha": "2e697d4564b7087fd22ddc5d8a13f8f12e3b1315", "changes": 52, "status": "modified", "deletions": 27, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -64,7 +64,6 @@ public static QueueDeclareHandler getInstance()\n     private final AtomicInteger _counter = new AtomicInteger();\n \n \n-\n     protected QueueDeclareHandler()\n     {\n         Configurator.configure(this);\n@@ -92,12 +91,12 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<QueueDec\n         synchronized (queueRegistry)\n         {\n \n-            if (((queue = queueRegistry.getQueue(body.queue)) == null) )\n+            if (((queue = queueRegistry.getQueue(body.queue)) == null))\n             {\n-                if(body.passive)\n+                if (body.passive)\n                 {\n-                    String msg = \"Queue: \" + body.queue + \" not found.\";\n-                    throw body.getChannelException(AMQConstant.NOT_FOUND,msg );\n+                    String msg = \"Queue: \" + body.queue + \" not found on VirtualHost(\" + virtualHost + \").\";\n+                    throw body.getChannelException(AMQConstant.NOT_FOUND, msg);\n                 }\n                 else\n                 {\n@@ -112,13 +111,16 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<QueueDec\n                         Exchange defaultExchange = exchangeRegistry.getDefaultExchange();\n \n                         queue.bind(body.queue, null, defaultExchange);\n-                        _log.info(\"Queue \" + body.queue + \" bound to default exchange\");\n+                        _log.info(\"Queue \" + body.queue + \" bound to default exchange(\" + defaultExchange.getName() + \")\");\n                     }\n                 }\n             }\n-            else if(queue.getOwner() != null && !session.getContextKey().equals(queue.getOwner()))\n+            else if (queue.getOwner() != null && !session.getContextKey().equals(queue.getOwner()))\n             {\n-                throw body.getChannelException(AMQConstant.ALREADY_EXISTS, \"Cannot declare queue, as exclusive queue with same name declared on another connection\");        \n+                throw body.getChannelException(AMQConstant.ALREADY_EXISTS, \"Cannot declare queue('\" + body.queue + \"'),\"\n+                                                                           + \" as exclusive queue with same name \"\n+                                                                           + \"declared on another client ID('\"\n+                                                                           + queue.getOwner() + \"')\");\n             }\n \n             AMQChannel channel = session.getChannel(evt.getChannelId());\n@@ -138,10 +140,10 @@ else if(queue.getOwner() != null && !session.getContextKey().equals(queue.getOwn\n             // TODO: Connect this to the session version obtained from ProtocolInitiation for this session.\n             // Be aware of possible changes to parameter order as versions change.\n             AMQFrame response = QueueDeclareOkBody.createAMQFrame(evt.getChannelId(),\n-                (byte)8, (byte)0,\t// AMQP version (major, minor)\n-                queue.getConsumerCount(), // consumerCount\n-                queue.getMessageCount(), // messageCount\n-                body.queue); // queue\n+                                                                  (byte) 8, (byte) 0,    // AMQP version (major, minor)\n+                                                                  queue.getConsumerCount(), // consumerCount\n+                                                                  queue.getMessageCount(), // messageCount\n+                                                                  body.queue); // queue\n             _log.info(\"Queue \" + body.queue + \" declared successfully\");\n             session.writeFrame(response);\n         }\n@@ -162,24 +164,22 @@ protected AMQQueue createQueue(QueueDeclareBody body, VirtualHost virtualHost, f\n     {\n         final QueueRegistry registry = virtualHost.getQueueRegistry();\n         AMQShortString owner = body.exclusive ? session.getContextKey() : null;\n-        final AMQQueue queue =  new AMQQueue(body.queue, body.durable, owner, body.autoDelete, virtualHost);\n+        final AMQQueue queue = new AMQQueue(body.queue, body.durable, owner, body.autoDelete, virtualHost);\n         final AMQShortString queueName = queue.getName();\n \n-        if(body.exclusive && !body.durable)\n+        if (body.exclusive && !body.durable)\n         {\n             final AMQProtocolSession.Task deleteQueueTask =\n-                new AMQProtocolSession.Task()\n-                {\n-\n-                    public void doTask(AMQProtocolSession session) throws AMQException\n+                    new AMQProtocolSession.Task()\n                     {\n-                        if(registry.getQueue(queueName) == queue)\n+                        public void doTask(AMQProtocolSession session) throws AMQException\n                         {\n-                            queue.delete();\n+                            if (registry.getQueue(queueName) == queue)\n+                            {\n+                                queue.delete();\n+                            }\n                         }\n-\n-                    }\n-                };\n+                    };\n \n             session.addSessionCloseTask(deleteQueueTask);\n \n@@ -190,16 +190,14 @@ public void doTask(AMQQueue queue)\n                     session.removeSessionCloseTask(deleteQueueTask);\n                 }\n             });\n-\n-\n-        }\n+        }// if exclusive and not durable\n \n         Configuration virtualHostDefaultQueueConfiguration = VirtualHostConfiguration.getDefaultQueueConfiguration(queue);\n         if (virtualHostDefaultQueueConfiguration != null)\n         {\n             Configurator.configure(queue, virtualHostDefaultQueueConfiguration);\n         }\n-        \n+\n         return queue;\n     }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java"}, {"additions": 252, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java", "sha": "38c9e4950a042b527eb13c84da56d32a62449f99", "changes": 258, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -20,34 +20,280 @@\n  */\n package org.apache.qpid.server.management;\n \n+import java.io.IOException;\n import java.lang.management.ManagementFactory;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.LocateRegistry;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.HashMap;\n+import java.util.Map;\n \n import javax.management.JMException;\n import javax.management.MBeanServer;\n+import javax.management.MBeanServerFactory;\n+import javax.management.remote.JMXConnectorServer;\n+import javax.management.remote.JMXConnectorServerFactory;\n+import javax.management.remote.JMXServiceURL;\n+import javax.management.remote.MBeanServerForwarder;\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import javax.security.auth.login.AccountNotFoundException;\n+import javax.security.sasl.AuthorizeCallback;\n \n import org.apache.log4j.Logger;\n \n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.registry.IApplicationRegistry;\n+import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+import org.apache.qpid.server.security.auth.database.Base64MD5PasswordFilePrincipalDatabase;\n+import org.apache.qpid.server.security.auth.database.PlainPasswordFilePrincipalDatabase;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n+import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5HashedInitialiser;\n+\n+/**\n+ * This class starts up an MBeanserver. If out of the box agent is being used then there are no security features\n+ * implemented. To use the security features like user authentication, turn off the jmx options in the \"QPID_OPTS\" env\n+ * variable and use JMXMP connector server. If JMXMP connector is not available, then the standard JMXConnector will be\n+ * used, which again doesn't have user authentication.\n+ */\n public class JMXManagedObjectRegistry implements ManagedObjectRegistry\n {\n     private static final Logger _log = Logger.getLogger(JMXManagedObjectRegistry.class);\n \n     private final MBeanServer _mbeanServer;\n+    private Registry _rmiRegistry;\n+    private JMXServiceURL _jmxURL;\n \n-    public JMXManagedObjectRegistry()\n+    public JMXManagedObjectRegistry() throws AMQException\n     {\n         _log.info(\"Initialising managed object registry using platform MBean server\");\n-        // we use the platform MBean server currently but this must be changed or at least be configuurable\n-        _mbeanServer = ManagementFactory.getPlatformMBeanServer();\n+        IApplicationRegistry appRegistry = ApplicationRegistry.getInstance();\n+\n+        // Retrieve the config parameters\n+        boolean platformServer = appRegistry.getConfiguration().getBoolean(\"management.platform-mbeanserver\", true);\n+\n+        _mbeanServer =\n+                platformServer ? ManagementFactory.getPlatformMBeanServer()\n+                : MBeanServerFactory.createMBeanServer(ManagedObject.DOMAIN);\n+    }\n+\n+\n+    public void start()\n+    {\n+        // Check if the \"QPID_OPTS\" is set to use Out of the Box JMXAgent\n+        if (areOutOfTheBoxJMXOptionsSet())\n+        {\n+            _log.info(\"JMX: Using the out of the box JMX Agent\");\n+            return;\n+        }\n+\n+        IApplicationRegistry appRegistry = ApplicationRegistry.getInstance();\n+\n+        boolean security = appRegistry.getConfiguration().getBoolean(\"management.security-enabled\", true);\n+        int port = appRegistry.getConfiguration().getInt(\"management.jmxport\", 8999);\n+\n+        try\n+        {\n+            if (security)\n+            {\n+                // For SASL using JMXMP\n+                _jmxURL = new JMXServiceURL(\"jmxmp\", null, port);\n+\n+                Map env = new HashMap();\n+                Map<String, PrincipalDatabase> map = appRegistry.getDatabaseManager().getDatabases();\n+                PrincipalDatabase db = null;\n+                \n+                for (Map.Entry<String, PrincipalDatabase> entry : map.entrySet())\n+                {\n+                    if (entry.getValue() instanceof Base64MD5PasswordFilePrincipalDatabase)\n+                    {\n+                        db = entry.getValue();\n+                        break;\n+                    }\n+                    else if (entry.getValue() instanceof PlainPasswordFilePrincipalDatabase)\n+                    {\n+                        db = entry.getValue();\n+                    }\n+                }\n+\n+                if (db instanceof Base64MD5PasswordFilePrincipalDatabase)\n+                {\n+                    env.put(\"jmx.remote.profiles\", \"SASL/CRAM-MD5\");\n+                    CRAMMD5HashedInitialiser initialiser = new CRAMMD5HashedInitialiser();\n+                    initialiser.initialise(db);\n+                    env.put(\"jmx.remote.sasl.callback.handler\", initialiser.getCallbackHandler());\n+                }\n+                else if (db instanceof PlainPasswordFilePrincipalDatabase)\n+                {\n+                    env.put(\"jmx.remote.profiles\", \"SASL/PLAIN\");\n+                    env.put(\"jmx.remote.sasl.callback.handler\", new UserCallbackHandler(db));\n+                }\n+\n+                // Enable the SSL security and server authentication\n+                /*\n+                SslRMIClientSocketFactory csf = new SslRMIClientSocketFactory();\n+                SslRMIServerSocketFactory ssf = new SslRMIServerSocketFactory();\n+                env.put(RMIConnectorServer.RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE, csf);\n+                env.put(RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE, ssf);\n+                 */\n+\n+                try\n+                {\n+                    JMXConnectorServer cs = JMXConnectorServerFactory.newJMXConnectorServer(_jmxURL, env, _mbeanServer);\n+                    MBeanServerForwarder mbsf = MBeanInvocationHandlerImpl.newProxyInstance();\n+                    cs.setMBeanServerForwarder(mbsf);\n+                    cs.start();\n+                    _log.info(\"JMX: Starting JMXConnector server with SASL\");\n+                }\n+                catch (java.net.MalformedURLException urlException)\n+                {\n+                    // When JMXMPConnector is not available\n+                    // java.net.MalformedURLException: Unsupported protocol: jmxmp\n+                    _log.info(\"JMX: Starting JMXConnector server\");\n+                    startJMXConnectorServer(port);\n+                }\n+            }\n+            else\n+            {\n+                startJMXConnectorServer(port);\n+            }\n+        }\n+        catch (Exception ex)\n+        {\n+            _log.error(\"Error in initialising Managed Object Registry.\" + ex.getMessage());\n+            ex.printStackTrace();\n+        }\n+    }\n+\n+    /**\n+     * Starts up an RMIRegistry at configured port and attaches a JMXConnectorServer to it.\n+     *\n+     * @param port\n+     *\n+     * @throws IOException\n+     */\n+    private void startJMXConnectorServer(int port) throws IOException\n+    {\n+        startRMIRegistry(port);\n+        _jmxURL = new JMXServiceURL(\"service:jmx:rmi:///jndi/rmi://localhost:\" + port + \"/jmxrmi\");\n+        JMXConnectorServer cs = JMXConnectorServerFactory.newJMXConnectorServer(_jmxURL, null, _mbeanServer);\n+        cs.start();\n     }\n \n     public void registerObject(ManagedObject managedObject) throws JMException\n     {\n-         _mbeanServer.registerMBean(managedObject, managedObject.getObjectName());\n+        _mbeanServer.registerMBean(managedObject, managedObject.getObjectName());\n     }\n \n     public void unregisterObject(ManagedObject managedObject) throws JMException\n     {\n         _mbeanServer.unregisterMBean(managedObject.getObjectName());\n     }\n \n+    /**\n+     * Checks is the \"QPID_OPTS\" env variable is set to use the out of the box JMXAgent.\n+     *\n+     * @return\n+     */\n+    private boolean areOutOfTheBoxJMXOptionsSet()\n+    {\n+        if (System.getProperty(\"com.sun.management.jmxremote\") != null)\n+        {\n+            return true;\n+        }\n+\n+        if (System.getProperty(\"com.sun.management.jmxremote.port\") != null)\n+        {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Starts the rmi registry at given port\n+     *\n+     * @param port\n+     *\n+     * @throws RemoteException\n+     */\n+    private void startRMIRegistry(int port) throws RemoteException\n+    {\n+        System.setProperty(\"java.rmi.server.randomIDs\", \"true\");\n+        _rmiRegistry = LocateRegistry.createRegistry(port);\n+    }\n+\n+    // stops the RMIRegistry, if it was running and bound to a port\n+    public void close() throws RemoteException\n+    {\n+        if (_rmiRegistry != null)\n+        {\n+            // Stopping the RMI registry\n+            UnicastRemoteObject.unexportObject(_rmiRegistry, true);\n+        }\n+    }\n+\n+    /** This class is used for SASL enabled JMXConnector for performing user authentication. */\n+    private class UserCallbackHandler implements CallbackHandler\n+    {\n+        private final PrincipalDatabase _principalDatabase;\n+\n+        protected UserCallbackHandler(PrincipalDatabase database)\n+        {\n+            _principalDatabase = database;\n+        }\n+\n+        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException\n+        {\n+            // Retrieve callbacks\n+            NameCallback ncb = null;\n+            PasswordCallback pcb = null;\n+            for (int i = 0; i < callbacks.length; i++)\n+            {\n+                if (callbacks[i] instanceof NameCallback)\n+                {\n+                    ncb = (NameCallback) callbacks[i];\n+                }\n+                else if (callbacks[i] instanceof PasswordCallback)\n+                {\n+                    pcb = (PasswordCallback) callbacks[i];\n+                }\n+                else if (callbacks[i] instanceof AuthorizeCallback)\n+                {\n+                    ((AuthorizeCallback) callbacks[i]).setAuthorized(true);\n+                }\n+                else\n+                {\n+                    throw new UnsupportedCallbackException(callbacks[i]);\n+                }\n+            }\n+\n+            boolean authorized = false;\n+            // Process retrieval of password; can get password if username is available in NameCallback\n+            if ((ncb != null) && (pcb != null))\n+            {\n+                String username = ncb.getDefaultName();\n+                try\n+                {\n+                    authorized = _principalDatabase.verifyPassword(username, new String(pcb.getPassword()));\n+                }\n+                catch (AccountNotFoundException e)\n+                {\n+                    IOException ioe = new IOException(\"User not authorized.  \" + e);\n+                    ioe.initCause(e);\n+                    throw ioe;\n+                }\n+            }\n+\n+            if (!authorized)\n+            {\n+                throw new IOException(\"User not authorized.\");\n+            }\n+        }\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java"}, {"additions": 217, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java", "sha": "a79d993afcde64371762b69502e3d6a9e25e73f6", "changes": 217, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,217 @@\n+/*\n+ *\n+ * Copyright (c) 2006 The Apache Software Foundation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.qpid.server.management;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.log4j.Logger;\n+\n+import javax.management.remote.MBeanServerForwarder;\n+import javax.management.remote.JMXPrincipal;\n+import javax.management.MBeanServer;\n+import javax.management.ObjectName;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanOperationInfo;\n+import javax.management.JMException;\n+import javax.security.auth.Subject;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Proxy;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.Principal;\n+import java.security.AccessControlContext;\n+import java.util.Set;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.FileInputStream;\n+\n+/**\n+ * This class can be used by the JMXConnectorServer as an InvocationHandler for the mbean operations. This implements\n+ * the logic for allowing the users to invoke MBean operations and implements the restrictions for readOnly, readWrite\n+ * and admin users.\n+ */\n+public class MBeanInvocationHandlerImpl implements InvocationHandler\n+{\n+    private static final Logger _logger = Logger.getLogger(MBeanInvocationHandlerImpl.class);\n+\n+    public final static String ADMIN = \"admin\";\n+    public final static String READWRITE = \"readwrite\";\n+    public final static String READONLY = \"readonly\";\n+    private final static String DELEGATE = \"JMImplementation:type=MBeanServerDelegate\";\n+    private MBeanServer mbs;\n+    private static Properties _userRoles = new Properties();\n+\n+    public static MBeanServerForwarder newProxyInstance()\n+    {\n+        final InvocationHandler handler = new MBeanInvocationHandlerImpl();\n+        final Class[] interfaces = new Class[]{MBeanServerForwarder.class};\n+\n+        Object proxy = Proxy.newProxyInstance(MBeanServerForwarder.class.getClassLoader(), interfaces, handler);\n+        return MBeanServerForwarder.class.cast(proxy);\n+    }\n+\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable\n+    {\n+        final String methodName = method.getName();\n+\n+        if (methodName.equals(\"getMBeanServer\"))\n+        {\n+            return mbs;\n+        }\n+\n+        if (methodName.equals(\"setMBeanServer\"))\n+        {\n+            if (args[0] == null)\n+            {\n+                throw new IllegalArgumentException(\"Null MBeanServer\");\n+            }\n+            if (mbs != null)\n+            {\n+                throw new IllegalArgumentException(\"MBeanServer object already initialized\");\n+            }\n+            mbs = (MBeanServer) args[0];\n+            return null;\n+        }\n+\n+        // Retrieve Subject from current AccessControlContext\n+        AccessControlContext acc = AccessController.getContext();\n+        Subject subject = Subject.getSubject(acc);\n+\n+        // Allow operations performed locally on behalf of the connector server itself\n+        if (subject == null)\n+        {\n+            return method.invoke(mbs, args);\n+        }\n+\n+        if (args == null || DELEGATE.equals(args[0]))\n+        {\n+            return method.invoke(mbs, args);\n+        }\n+\n+        // Restrict access to \"createMBean\" and \"unregisterMBean\" to any user\n+        if (methodName.equals(\"createMBean\") || methodName.equals(\"unregisterMBean\"))\n+        {\n+            throw new SecurityException(\"Access denied\");\n+        }\n+\n+        // Retrieve JMXPrincipal from Subject\n+        Set<JMXPrincipal> principals = subject.getPrincipals(JMXPrincipal.class);\n+        if (principals == null || principals.isEmpty())\n+        {\n+            throw new SecurityException(\"Access denied\");\n+        }\n+\n+        Principal principal = principals.iterator().next();\n+        String identity = principal.getName();\n+\n+        // Following users can perform any operation other than \"createMBean\" and \"unregisterMBean\"\n+        if (isAdmin(identity) || isAllowedToModify(identity))\n+        {\n+            return method.invoke(mbs, args);\n+        }\n+\n+        // These users can only call \"getAttribute\" on the MBeanServerDelegate MBean\n+        // Here we can add other fine grained permissions like specific method for a particular mbean\n+        if (isReadOnlyUser(identity) && isReadOnlyMethod(method, args))\n+        {\n+            return method.invoke(mbs, args);\n+        }\n+\n+        throw new SecurityException(\"Access denied\");\n+    }\n+\n+    // Initialises the user roles\n+    public static void setAccessRights(Properties accessRights)\n+    {\n+        _userRoles = accessRights;\n+    }\n+\n+    private boolean isAdmin(String userName)\n+    {\n+        if (ADMIN.equals(_userRoles.getProperty(userName)))\n+        {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private boolean isAllowedToModify(String userName)\n+    {\n+        if (READWRITE.equals(_userRoles.getProperty(userName)))\n+        {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private boolean isReadOnlyUser(String userName)\n+    {\n+        if (READONLY.equals(_userRoles.getProperty(userName)))\n+        {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private boolean isReadOnlyMethod(Method method, Object[] args)\n+    {\n+        String methodName = method.getName();\n+        if (methodName.equals(\"queryMBeans\") ||\n+            methodName.equals(\"getDefaultDomain\") ||\n+            methodName.equals(\"getMBeanInfo\") ||\n+            methodName.equals(\"getAttribute\") ||\n+            methodName.equals(\"getAttributes\"))\n+        {\n+            return true;\n+        }\n+\n+        if (args[0] instanceof ObjectName)\n+        {\n+            String mbeanMethod = (args.length > 1) ? (String) args[1] : null;\n+            if (mbeanMethod == null)\n+            {\n+                return false;\n+            }\n+\n+            try\n+            {\n+                MBeanInfo mbeanInfo = mbs.getMBeanInfo((ObjectName) args[0]);\n+                if (mbeanInfo != null)\n+                {\n+                    MBeanOperationInfo[] opInfos = mbeanInfo.getOperations();\n+                    for (MBeanOperationInfo opInfo : opInfos)\n+                    {\n+                        if (opInfo.getName().equals(mbeanMethod) && (opInfo.getImpact() == MBeanOperationInfo.INFO))\n+                        {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+            catch (JMException ex)\n+            {\n+                ex.printStackTrace();\n+            }\n+        }\n+\n+        return false;\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/ManagedBroker.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/ManagedBroker.java", "sha": "45e2e91ed70028efaabcbd05bf5254334b106148", "changes": 6, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/management/ManagedBroker.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -52,8 +52,7 @@\n     @MBeanOperation(name=\"createNewExchange\", description=\"Creates a new Exchange\", impact= MBeanOperationInfo.ACTION)\n     void createNewExchange(@MBeanOperationParameter(name=\"name\", description=\"Name of the new exchange\")String name,\n                            @MBeanOperationParameter(name=\"ExchangeType\", description=\"Type of the exchange\")String type,\n-                           @MBeanOperationParameter(name=\"durable\", description=\"true if the Exchang should be durable\")boolean durable,\n-                           @MBeanOperationParameter(name=\"passive\", description=\"true of the Exchange should be passive\")boolean passive)\n+                           @MBeanOperationParameter(name=\"durable\", description=\"true if the Exchang should be durable\")boolean durable)\n         throws IOException, JMException;\n \n     /**\n@@ -81,8 +80,7 @@ void unregisterExchange(@MBeanOperationParameter(name= ManagedExchange.TYPE, des\n     @MBeanOperation(name=\"createNewQueue\", description=\"Create a new Queue on the Broker server\", impact= MBeanOperationInfo.ACTION)\n     void createNewQueue(@MBeanOperationParameter(name=\"queue name\", description=\"Name of the new queue\")String queueName,\n                         @MBeanOperationParameter(name=\"owner\", description=\"Owner name\")String owner,\n-                        @MBeanOperationParameter(name=\"durable\", description=\"true if the queue should be durable\")boolean durable,\n-                        @MBeanOperationParameter(name=\"autoDelete\", description=\"true if the queue should be auto delete\") boolean autoDelete)\n+                        @MBeanOperationParameter(name=\"durable\", description=\"true if the queue should be durable\")boolean durable)\n         throws IOException, JMException;\n \n     /**", "filename": "broker/src/main/java/org/apache/qpid/server/management/ManagedBroker.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/ManagedObjectRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/ManagedObjectRegistry.java", "sha": "5f9bc9ddad728696c2fb980e912a01dc6530164a", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/management/ManagedObjectRegistry.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -21,6 +21,7 @@\n package org.apache.qpid.server.management;\n \n import javax.management.JMException;\n+import java.rmi.RemoteException;\n \n /**\n  * Handles the registration (and unregistration and so on) of managed objects.\n@@ -36,7 +37,11 @@\n  */\n public interface ManagedObjectRegistry\n {\n+    void start();\n+\n     void registerObject(ManagedObject managedObject) throws JMException;\n \n     void unregisterObject(ManagedObject managedObject) throws JMException;\n+\n+    void close() throws RemoteException;\n }", "filename": "broker/src/main/java/org/apache/qpid/server/management/ManagedObjectRegistry.java"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/NoopManagedObjectRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/management/NoopManagedObjectRegistry.java", "sha": "b4fbed6948ed906957f4a0430b7ca2b0dc90986b", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/management/NoopManagedObjectRegistry.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -24,6 +24,8 @@\n \n import org.apache.log4j.Logger;\n \n+import java.rmi.RemoteException;\n+\n /**\n  * This managed object registry does not actually register MBeans. This can be used in tests when management is\n  * not required or when management has been disabled.\n@@ -38,11 +40,21 @@ public NoopManagedObjectRegistry()\n         _log.info(\"Management is disabled\");\n     }\n \n+    public void start()\n+    {\n+        //no-op\n+    }\n+\n     public void registerObject(ManagedObject managedObject) throws JMException\n     {\n     }\n \n     public void unregisterObject(ManagedObject managedObject) throws JMException\n     {\n     }\n+\n+    public void close() throws RemoteException\n+    {\n+        \n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/management/NoopManagedObjectRegistry.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java", "sha": "2e62c2f1e4ef712207644411ee766d84febf1e46", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -28,6 +28,7 @@\n import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.CopyOnWriteArraySet;\n+import java.security.Principal;\n \n import javax.management.JMException;\n import javax.security.sasl.SaslServer;\n@@ -108,7 +109,7 @@\n     private VersionSpecificRegistry _registry = MainRegistry.getVersionSpecificRegistry(_protocolVersion);\n     private List<Integer> _closingChannelsList = new ArrayList<Integer>();\n     private ProtocolOutputConverter _protocolOutputConverter;\n-    private String _authorizedID;\n+    private Principal _authorizedID;\n \n \n     public ManagedObject getManagedObject()\n@@ -745,12 +746,12 @@ public ProtocolOutputConverter getProtocolOutputConverter()\n         return _protocolOutputConverter;\n     }\n \n-    public void setAuthorizedID(String authorizedID)\n+    public void setAuthorizedID(Principal authorizedID)\n     {\n         _authorizedID = authorizedID;\n     }\n \n-    public String getAuthorizedID()\n+    public Principal getAuthorizedID()\n     {\n         return _authorizedID;\n     }", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/AMQMinaProtocolSession.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java", "sha": "390117acf665bd44be41381398d8188f7ad5464f", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -31,6 +31,8 @@\n import org.apache.qpid.server.output.ProtocolOutputConverter;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n+import java.security.Principal;\n+\n \n public interface AMQProtocolSession extends AMQVersionAwareProtocolSession\n {\n@@ -165,9 +167,9 @@\n \n     public ProtocolOutputConverter getProtocolOutputConverter();\n \n-    void setAuthorizedID(String authorizedID);\n+    void setAuthorizedID(Principal authorizedID);\n \n-    /** @return a username string that was used to authorized this session */    \n-    String getAuthorizedID();\n+    /** @return a Principal that was used to authorized this session */\n+    Principal getAuthorizedID();\n \n }", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSession.java"}, {"additions": 62, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBean.java", "sha": "66f928a70e275ccebb58259112acd2e1309faa3c", "changes": 96, "status": "modified", "deletions": 34, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBean.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,3 +1,23 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n /*\n  *\n  * Copyright (c) 2006 The Apache Software Foundation\n@@ -17,14 +37,15 @@\n  */\n package org.apache.qpid.server.protocol;\n \n+import java.security.Principal;\n import java.util.Date;\n import java.util.List;\n \n import javax.management.JMException;\n import javax.management.MBeanException;\n import javax.management.MBeanNotificationInfo;\n-import javax.management.Notification;\n import javax.management.NotCompliantMBeanException;\n+import javax.management.Notification;\n import javax.management.monitor.MonitorNotification;\n import javax.management.openmbean.CompositeData;\n import javax.management.openmbean.CompositeDataSupport;\n@@ -56,38 +77,39 @@\n {\n     private AMQMinaProtocolSession _session = null;\n     private String _name = null;\n-    \n-    //openmbean data types for representing the channel attributes\n-    private final static String[] _channelAtttibuteNames = {\"Channel Id\", \"Transactional\", \"Default Queue\", \"Unacknowledged Message Count\"};\n-    private final static String[] _indexNames = {_channelAtttibuteNames[0]};\n-    private final static OpenType[] _channelAttributeTypes = {SimpleType.INTEGER, SimpleType.BOOLEAN, SimpleType.STRING, SimpleType.INTEGER};\n-    private static CompositeType _channelType = null;      // represents the data type for channel data\n-    private static TabularType _channelsType = null;       // Data type for list of channels type\n+\n+    // openmbean data types for representing the channel attributes\n+    private static final String[] _channelAtttibuteNames =\n+        { \"Channel Id\", \"Transactional\", \"Default Queue\", \"Unacknowledged Message Count\" };\n+    private static final String[] _indexNames = { _channelAtttibuteNames[0] };\n+    private static final OpenType[] _channelAttributeTypes =\n+        { SimpleType.INTEGER, SimpleType.BOOLEAN, SimpleType.STRING, SimpleType.INTEGER };\n+    private static CompositeType _channelType = null; // represents the data type for channel data\n+    private static TabularType _channelsType = null; // Data type for list of channels type\n     private static final AMQShortString BROKER_MANAGEMENT_CONSOLE_HAS_CLOSED_THE_CONNECTION =\n-            new AMQShortString(\"Broker Management Console has closed the connection.\");\n+        new AMQShortString(\"Broker Management Console has closed the connection.\");\n \n     @MBeanConstructor(\"Creates an MBean exposing an AMQ Broker Connection\")\n     public AMQProtocolSessionMBean(AMQMinaProtocolSession session) throws NotCompliantMBeanException, OpenDataException\n     {\n         super(ManagedConnection.class, ManagedConnection.TYPE);\n         _session = session;\n         String remote = getRemoteAddress();\n-        remote = \"anonymous\".equals(remote) ? remote + hashCode() : remote;\n+        remote = \"anonymous\".equals(remote) ? (remote + hashCode()) : remote;\n         _name = jmxEncode(new StringBuffer(remote), 0).toString();\n         init();\n     }\n \n-\n     static\n     {\n         try\n         {\n             init();\n         }\n-        catch(JMException ex)\n+        catch (JMException ex)\n         {\n-            // It should never occur\n-            System.out.println(ex.getMessage());\n+            // This is not expected to ever occur.\n+            throw new RuntimeException(\"Got JMException in static initializer.\", ex);\n         }\n     }\n \n@@ -96,26 +118,27 @@ public AMQProtocolSessionMBean(AMQMinaProtocolSession session) throws NotComplia\n      */\n     private static void init() throws OpenDataException\n     {\n-        _channelType = new CompositeType(\"Channel\", \"Channel Details\", _channelAtttibuteNames,\n-                                         _channelAtttibuteNames, _channelAttributeTypes);\n+        _channelType =\n+            new CompositeType(\"Channel\", \"Channel Details\", _channelAtttibuteNames, _channelAtttibuteNames,\n+                _channelAttributeTypes);\n         _channelsType = new TabularType(\"Channels\", \"Channels\", _channelType, _indexNames);\n     }\n \n     public String getClientId()\n     {\n-        return _session.getContextKey() == null ? null : _session.getContextKey().toString();\n+        return (_session.getContextKey() == null) ? null : _session.getContextKey().toString();\n     }\n \n     public String getAuthorizedId()\n     {\n-        return _session.getAuthorizedID();\n+        return (_session.getAuthorizedID() != null ) ? _session.getAuthorizedID().getName() : null;\n     }\n \n     public String getVersion()\n     {\n-        return _session.getClientVersion() == null ? null : _session.getClientVersion().toString();\n+        return (_session.getClientVersion() == null) ? null : _session.getClientVersion().toString();\n     }\n-    \n+\n     public Date getLastIoTime()\n     {\n         return new Date(_session.getIOSession().getLastIoTime());\n@@ -171,6 +194,7 @@ public void commitTransactions(int channelId) throws JMException\n             {\n                 throw new JMException(\"The channel (channel Id = \" + channelId + \") does not exist\");\n             }\n+\n             _session.commitTransactions(channel);\n         }\n         catch (AMQException ex)\n@@ -194,6 +218,7 @@ public void rollbackTransactions(int channelId) throws JMException\n             {\n                 throw new JMException(\"The channel (channel Id = \" + channelId + \") does not exist\");\n             }\n+\n             _session.rollbackTransactions(channel);\n         }\n         catch (AMQException ex)\n@@ -215,9 +240,12 @@ public TabularData channels() throws OpenDataException\n \n         for (AMQChannel channel : list)\n         {\n-            Object[] itemValues = {channel.getChannelId(), channel.isTransactional(),\n+            Object[] itemValues =\n+                {\n+                    channel.getChannelId(), channel.isTransactional(),\n                     (channel.getDefaultQueue() != null) ? channel.getDefaultQueue().getName().asString() : null,\n-                    channel.getUnacknowledgedMessageMap().size()};\n+                    channel.getUnacknowledgedMessageMap().size()\n+                };\n \n             CompositeData channelData = new CompositeDataSupport(_channelType, _channelAtttibuteNames, itemValues);\n             channelsList.put(channelData);\n@@ -232,17 +260,16 @@ public TabularData channels() throws OpenDataException\n      * @throws JMException\n      */\n     public void closeConnection() throws JMException\n-    {        \n+    {\n         // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)\n         // TODO: Connect this to the session version obtained from ProtocolInitiation for this session.\n         // Be aware of possible changes to parameter order as versions change.\n-        final AMQFrame response = ConnectionCloseBody.createAMQFrame(0,\n-            _session.getProtocolMajorVersion(),\n-            _session.getProtocolMinorVersion(),\t// AMQP version (major, minor)\n-            0,\t// classId\n-            0,\t// methodId\n-        \tAMQConstant.REPLY_SUCCESS.getCode(),\t// replyCode\n-            BROKER_MANAGEMENT_CONSOLE_HAS_CLOSED_THE_CONNECTION    // replyText\n+        final AMQFrame response =\n+            ConnectionCloseBody.createAMQFrame(0, _session.getProtocolMajorVersion(), _session.getProtocolMinorVersion(), // AMQP version (major, minor)\n+                0, // classId\n+                0, // methodId\n+                AMQConstant.REPLY_SUCCESS.getCode(), // replyCode\n+                BROKER_MANAGEMENT_CONSOLE_HAS_CLOSED_THE_CONNECTION // replyText\n             );\n         _session.writeFrame(response);\n \n@@ -259,18 +286,19 @@ public void closeConnection() throws JMException\n     @Override\n     public MBeanNotificationInfo[] getNotificationInfo()\n     {\n-        String[] notificationTypes = new String[]{MonitorNotification.THRESHOLD_VALUE_EXCEEDED};\n+        String[] notificationTypes = new String[] { MonitorNotification.THRESHOLD_VALUE_EXCEEDED };\n         String name = MonitorNotification.class.getName();\n         String description = \"Channel count has reached threshold value\";\n         MBeanNotificationInfo info1 = new MBeanNotificationInfo(notificationTypes, name, description);\n \n-        return new MBeanNotificationInfo[]{info1};\n+        return new MBeanNotificationInfo[] { info1 };\n     }\n \n     public void notifyClients(String notificationMsg)\n     {\n-        Notification n = new Notification(MonitorNotification.THRESHOLD_VALUE_EXCEEDED, this,\n-                ++_notificationSequenceNumber, System.currentTimeMillis(), notificationMsg);\n+        Notification n =\n+            new Notification(MonitorNotification.THRESHOLD_VALUE_EXCEEDED, this, ++_notificationSequenceNumber,\n+                System.currentTimeMillis(), notificationMsg);\n         _broadcaster.sendNotification(n);\n     }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBean.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/protocol/ManagedConnection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/protocol/ManagedConnection.java", "sha": "e6e713ac6d9d9a8e345c8b53d155bfb3526ca1d6", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/ManagedConnection.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -23,6 +23,7 @@\n \n import java.io.IOException;\n import java.util.Date;\n+import java.security.Principal;\n \n import javax.management.JMException;\n import javax.management.MBeanOperationInfo;\n@@ -67,16 +68,17 @@\n     /**\n      * Tells the total number of bytes written till now.\n      * @return number of bytes written.\n-     */\n+     *\n     @MBeanAttribute(name=\"WrittenBytes\", description=\"The total number of bytes written till now\")\n     Long getWrittenBytes();\n-\n+    */\n     /**\n      * Tells the total number of bytes read till now.\n      * @return number of bytes read.\n-     */\n+     *\n     @MBeanAttribute(name=\"ReadBytes\", description=\"The total number of bytes read till now\")\n     Long getReadBytes();\n+    */\n \n     /**\n      * Threshold high value for no of channels.  This is useful in setting notifications or", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/ManagedConnection.java"}, {"additions": 25, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java", "sha": "b2046efee3414ac85cbc353576805d7983ce3968", "changes": 38, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -25,6 +25,7 @@\n import org.apache.qpid.framing.AMQDataBlock;\n import org.apache.qpid.framing.AMQFrame;\n import org.apache.qpid.framing.ContentHeaderBody;\n+import org.apache.qpid.framing.FieldTable;\n import org.apache.qpid.framing.abstraction.ContentChunk;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n import org.apache.qpid.framing.abstraction.ProtocolVersionMethodConverter;\n@@ -42,6 +43,8 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n@@ -78,19 +81,20 @@\n     private boolean _immediate;\n \n     private AtomicBoolean _taken = new AtomicBoolean(false);\n-\n     private TransientMessageData _transientMessageData = new TransientMessageData();\n \n     private Subscription _takenBySubcription;\n-\n     private Set<Subscription> _rejectedBy = null;\n+    private Map<AMQQueue, AtomicBoolean> _takenMap = new HashMap<AMQQueue, AtomicBoolean>();\n+    private Map<AMQQueue, Subscription> _takenBySubcriptionMap = new HashMap<AMQQueue, Subscription>();\n \n-    public boolean isTaken()\n+    public boolean isTaken(AMQQueue queue)\n     {\n         return _taken.get();\n     }\n \n     private final int hashcode = System.identityHashCode(this);\n+\n     public String debugIdentity()\n     {\n         return \"(HC:\" + hashcode + \" ID:\" + _messageId + \" Ref:\" + _referenceCount.get() + \")\";\n@@ -203,9 +207,10 @@ public AMQMessage(Long messageId, MessagePublishInfo info,\n         _transientMessageData.setMessagePublishInfo(info);\n \n         _taken = new AtomicBoolean(false);\n+\n         if (_log.isDebugEnabled())\n         {\n-            _log.debug(\"Message(\" + System.identityHashCode(this) + \") created (\" + debugIdentity()+\")\");\n+            _log.debug(\"Message(\" + System.identityHashCode(this) + \") created (\" + debugIdentity() + \")\");\n         }\n     }\n \n@@ -318,8 +323,10 @@ public void routingComplete(MessageStore store, StoreContext storeContext, Messa\n \n         // enqueuing the messages ensure that if required the destinations are recorded to a\n         // persistent store\n+\n         for (AMQQueue q : _transientMessageData.getDestinationQueues())\n         {\n+            _takenMap.put(q, new AtomicBoolean(false));\n             _messageHandle.enqueue(storeContext, _messageId, q);\n         }\n \n@@ -356,12 +363,13 @@ public long getMessageId()\n     }\n \n     /**\n-     * Creates a long-lived reference to this message, and increments the count of such references, as an atomic operation.\n+     * Creates a long-lived reference to this message, and increments the count of such references, as an atomic\n+     * operation.\n      */\n     public AMQMessage takeReference()\n     {\n         _referenceCount.incrementAndGet();\n-\treturn this;\n+        return this;\n     }\n \n     /** Threadsafe. Increment the reference count on the message. */\n@@ -378,9 +386,10 @@ protected void incrementReference()\n      * Threadsafe. This will decrement the reference count and when it reaches zero will remove the message from the\n      * message store.\n      *\n+     * @param storeContext\n+     *\n      * @throws MessageCleanupException when an attempt was made to remove the message from the message store and that\n      *                                 failed\n-     * @param storeContext\n      */\n     public void decrementReference(StoreContext storeContext) throws MessageCleanupException\n     {\n@@ -451,7 +460,7 @@ public boolean getDeliveredToConsumer()\n     }\n \n \n-    public boolean taken(Subscription sub)\n+    public boolean taken(AMQQueue queue, Subscription sub)\n     {\n         if (_taken.getAndSet(true))\n         {\n@@ -464,7 +473,7 @@ public boolean taken(Subscription sub)\n         }\n     }\n \n-    public void release()\n+    public void release(AMQQueue queue)\n     {\n         if (_log.isTraceEnabled())\n         {\n@@ -600,7 +609,7 @@ private void deliver(StoreContext storeContext) throws AMQException\n             for (AMQQueue q : destinationQueues)\n             {\n                 //Increment the references to this message for each queue delivery.\n-                incrementReference();                \n+                incrementReference();\n                 //normal deliver so add this message at the end.\n                 _txnContext.deliver(this, q, false);\n             }\n@@ -824,11 +833,14 @@ public void clearTransientMessageData()\n \n     public String toString()\n     {\n-        return \"Message[\" + debugIdentity() + \"]: \" + _messageId + \"; ref count: \" + _referenceCount + \"; taken: \" +\n-               _taken + \" by:\" + _takenBySubcription;\n+        return \"Message[\" + debugIdentity() + \"]: \" + _messageId + \"; ref count: \" + _referenceCount + \"; taken : \" +\n+               _taken + \" by :\" + _takenBySubcription;\n+\n+//        return \"Message[\" + debugIdentity() + \"]: \" + _messageId + \"; ref count: \" + _referenceCount + \"; taken for queues: \" +\n+//               _takenMap.toString() + \" by Subs:\" + _takenBySubcriptionMap.toString();\n     }\n \n-    public Subscription getDeliveredSubscription()\n+    public Subscription getDeliveredSubscription(AMQQueue queue)\n     {\n         return _takenBySubcription;\n     }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java"}, {"additions": 84, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java", "sha": "bbaa7379f6585cd932d5f933d5ebffd5a6e07d66", "changes": 136, "status": "modified", "deletions": 52, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,3 +1,23 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n /*\n  *\n  * Copyright (c) 2006 The Apache Software Foundation\n@@ -17,11 +37,11 @@\n  */\n package org.apache.qpid.server.queue;\n \n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Date;\n-import java.text.SimpleDateFormat;\n \n import javax.management.JMException;\n import javax.management.MBeanException;\n@@ -41,12 +61,14 @@\n import javax.management.openmbean.TabularType;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.mina.common.ByteBuffer;\n+\n import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.CommonContentHeaderProperties;\n-import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.CommonContentHeaderProperties;\n+import org.apache.qpid.framing.ContentHeaderBody;\n import org.apache.qpid.framing.abstraction.ContentChunk;\n import org.apache.qpid.server.management.AMQManagedObject;\n import org.apache.qpid.server.management.MBeanConstructor;\n@@ -73,15 +95,15 @@\n     private AMQQueue _queue = null;\n     private String _queueName = null;\n     // OpenMBean data types for viewMessages method\n-    private final static String[] _msgAttributeNames = {\"AMQ MessageId\", \"Header\", \"Size(bytes)\", \"Redelivered\"};\n-    private static String[] _msgAttributeIndex = {_msgAttributeNames[0]};\n+    private static final String[] _msgAttributeNames = { \"AMQ MessageId\", \"Header\", \"Size(bytes)\", \"Redelivered\" };\n+    private static String[] _msgAttributeIndex = { _msgAttributeNames[0] };\n     private static OpenType[] _msgAttributeTypes = new OpenType[4]; // AMQ message attribute types.\n-    private static CompositeType _messageDataType = null;           // Composite type for representing AMQ Message data.\n-    private static TabularType _messagelistDataType = null;         // Datatype for representing AMQ messages list.\n+    private static CompositeType _messageDataType = null; // Composite type for representing AMQ Message data.\n+    private static TabularType _messagelistDataType = null; // Datatype for representing AMQ messages list.\n \n     // OpenMBean data types for viewMessageContent method\n     private static CompositeType _msgContentType = null;\n-    private final static String[] _msgContentAttributes = {\"AMQ MessageId\", \"MimeType\", \"Encoding\", \"Content\"};\n+    private static final String[] _msgContentAttributes = { \"AMQ MessageId\", \"MimeType\", \"Encoding\", \"Content\" };\n     private static OpenType[] _msgContentAttributeTypes = new OpenType[4];\n \n     private final long[] _lastNotificationTimes = new long[NotificationCheck.values().length];\n@@ -95,7 +117,6 @@ public AMQQueueMBean(AMQQueue queue) throws JMException\n         _queueName = jmxEncode(new StringBuffer(queue.getName()), 0).toString();\n     }\n \n-\n     public ManagedObject getParentObject()\n     {\n         return _queue.getVirtualHost().getManagedObject();\n@@ -107,10 +128,10 @@ public ManagedObject getParentObject()\n         {\n             init();\n         }\n-        catch(JMException ex)\n+        catch (JMException ex)\n         {\n-            // It should never occur\n-            System.out.println(ex.getMessage());\n+            // This is not expected to ever occur.\n+            throw new RuntimeException(\"Got JMException in static initializer.\", ex);\n         }\n     }\n \n@@ -119,19 +140,21 @@ public ManagedObject getParentObject()\n      */\n     private static void init() throws OpenDataException\n     {\n-        _msgContentAttributeTypes[0] = SimpleType.LONG;                    // For message id\n-        _msgContentAttributeTypes[1] = SimpleType.STRING;                  // For MimeType\n-        _msgContentAttributeTypes[2] = SimpleType.STRING;                  // For Encoding\n-        _msgContentAttributeTypes[3] = new ArrayType(1, SimpleType.BYTE);  // For message content\n-        _msgContentType = new CompositeType(\"Message Content\", \"AMQ Message Content\", _msgContentAttributes,\n-                _msgContentAttributes, _msgContentAttributeTypes);\n-\n-        _msgAttributeTypes[0] = SimpleType.LONG;                      // For message id\n-        _msgAttributeTypes[1] = new ArrayType(1, SimpleType.STRING);  // For header attributes\n-        _msgAttributeTypes[2] = SimpleType.LONG;                      // For size\n-        _msgAttributeTypes[3] = SimpleType.BOOLEAN;                   // For redelivered\n-\n-        _messageDataType = new CompositeType(\"Message\", \"AMQ Message\", _msgAttributeNames, _msgAttributeNames, _msgAttributeTypes);\n+        _msgContentAttributeTypes[0] = SimpleType.LONG; // For message id\n+        _msgContentAttributeTypes[1] = SimpleType.STRING; // For MimeType\n+        _msgContentAttributeTypes[2] = SimpleType.STRING; // For Encoding\n+        _msgContentAttributeTypes[3] = new ArrayType(1, SimpleType.BYTE); // For message content\n+        _msgContentType =\n+            new CompositeType(\"Message Content\", \"AMQ Message Content\", _msgContentAttributes, _msgContentAttributes,\n+                _msgContentAttributeTypes);\n+\n+        _msgAttributeTypes[0] = SimpleType.LONG; // For message id\n+        _msgAttributeTypes[1] = new ArrayType(1, SimpleType.STRING); // For header attributes\n+        _msgAttributeTypes[2] = SimpleType.LONG; // For size\n+        _msgAttributeTypes[3] = SimpleType.BOOLEAN; // For redelivered\n+\n+        _messageDataType =\n+            new CompositeType(\"Message\", \"AMQ Message\", _msgAttributeNames, _msgAttributeNames, _msgAttributeTypes);\n         _messagelistDataType = new TabularType(\"Messages\", \"List of messages\", _messageDataType, _msgAttributeIndex);\n     }\n \n@@ -213,7 +236,8 @@ public void setMaximumMessageCount(Long value)\n     public Long getMaximumQueueDepth()\n     {\n         long queueDepthInBytes = _queue.getMaximumQueueDepth();\n-        return queueDepthInBytes >> 10 ;\n+\n+        return queueDepthInBytes >> 10;\n     }\n \n     public void setMaximumQueueDepth(Long value)\n@@ -227,7 +251,8 @@ public void setMaximumQueueDepth(Long value)\n     public Long getQueueDepth() throws JMException\n     {\n         long queueBytesSize = _queue.getQueueDepth();\n-        return queueBytesSize >> 10 ;\n+\n+        return queueBytesSize >> 10;\n     }\n \n     /**\n@@ -237,13 +262,13 @@ public void checkForNotification(AMQMessage msg) throws AMQException, JMExceptio\n     {\n \n         final long currentTime = System.currentTimeMillis();\n-        final long thresholdTime =  currentTime - _queue.getMinimumAlertRepeatGap();\n+        final long thresholdTime = currentTime - _queue.getMinimumAlertRepeatGap();\n \n-        for(NotificationCheck check : NotificationCheck.values())\n+        for (NotificationCheck check : NotificationCheck.values())\n         {\n-            if(check.isMessageSpecific() || _lastNotificationTimes[check.ordinal()]<thresholdTime)\n+            if (check.isMessageSpecific() || (_lastNotificationTimes[check.ordinal()] < thresholdTime))\n             {\n-                if(check.notifyIfNecessary(msg, _queue, this))\n+                if (check.notifyIfNecessary(msg, _queue, this))\n                 {\n                     _lastNotificationTimes[check.ordinal()] = currentTime;\n                 }\n@@ -260,9 +285,10 @@ public void notifyClients(NotificationCheck notification, AMQQueue queue, String\n         // important : add log to the log file - monitoring tools may be looking for this\n         _logger.info(notification.name() + \" On Queue \" + queue.getName() + \" - \" + notificationMsg);\n         notificationMsg = notification.name() + \" \" + notificationMsg;\n-        \n-        _lastNotification = new Notification(MonitorNotification.THRESHOLD_VALUE_EXCEEDED, this,\n-                ++_notificationSequenceNumber, System.currentTimeMillis(), notificationMsg);\n+\n+        _lastNotification =\n+            new Notification(MonitorNotification.THRESHOLD_VALUE_EXCEEDED, this, ++_notificationSequenceNumber,\n+                System.currentTimeMillis(), notificationMsg);\n \n         _broadcaster.sendNotification(_lastNotification);\n     }\n@@ -334,20 +360,25 @@ public CompositeData viewMessageContent(long msgId) throws JMException\n         try\n         {\n             // Create header attributes list\n-            CommonContentHeaderProperties headerProperties = (CommonContentHeaderProperties) msg.getContentHeaderBody().properties;\n+            CommonContentHeaderProperties headerProperties =\n+                (CommonContentHeaderProperties) msg.getContentHeaderBody().properties;\n             String mimeType = null, encoding = null;\n             if (headerProperties != null)\n             {\n                 AMQShortString mimeTypeShortSting = headerProperties.getContentType();\n-                mimeType = mimeTypeShortSting == null ? null : mimeTypeShortSting.toString();\n-                encoding = headerProperties.getEncoding() == null ? \"\" : headerProperties.getEncoding().toString();\n+                mimeType = (mimeTypeShortSting == null) ? null : mimeTypeShortSting.toString();\n+                encoding = (headerProperties.getEncoding() == null) ? \"\" : headerProperties.getEncoding().toString();\n             }\n-            Object[] itemValues = {msgId, mimeType, encoding, msgContent.toArray(new Byte[0])};\n+\n+            Object[] itemValues = { msgId, mimeType, encoding, msgContent.toArray(new Byte[0]) };\n+\n             return new CompositeDataSupport(_msgContentType, _msgContentAttributes, itemValues);\n         }\n         catch (AMQException e)\n         {\n-            throw new JMException(\"Error creating header attributes list: \" + e);\n+            JMException jme = new JMException(\"Error creating header attributes list: \" + e);\n+            jme.initCause(e);\n+            throw jme;\n         }\n     }\n \n@@ -358,8 +389,8 @@ public TabularData viewMessages(int beginIndex, int endIndex) throws JMException\n     {\n         if ((beginIndex > endIndex) || (beginIndex < 1))\n         {\n-            throw new OperationsException(\"From Index = \" + beginIndex + \", To Index = \" + endIndex +\n-                                          \"\\n\\\"From Index\\\" should be greater than 0 and less than \\\"To Index\\\"\");\n+            throw new OperationsException(\"From Index = \" + beginIndex + \", To Index = \" + endIndex\n+                + \"\\n\\\"From Index\\\" should be greater than 0 and less than \\\"To Index\\\"\");\n         }\n \n         List<AMQMessage> list = _queue.getMessagesOnTheQueue();\n@@ -368,20 +399,22 @@ public TabularData viewMessages(int beginIndex, int endIndex) throws JMException\n         try\n         {\n             // Create the tabular list of message header contents\n-            for (int i = beginIndex; i <= endIndex && i <= list.size(); i++)\n+            for (int i = beginIndex; (i <= endIndex) && (i <= list.size()); i++)\n             {\n                 AMQMessage msg = list.get(i - 1);\n                 ContentHeaderBody headerBody = msg.getContentHeaderBody();\n                 // Create header attributes list\n                 String[] headerAttributes = getMessageHeaderProperties(headerBody);\n-                Object[] itemValues = {msg.getMessageId(), headerAttributes, headerBody.bodySize, msg.isRedelivered()};\n+                Object[] itemValues = { msg.getMessageId(), headerAttributes, headerBody.bodySize, msg.isRedelivered() };\n                 CompositeData messageData = new CompositeDataSupport(_messageDataType, _msgAttributeNames, itemValues);\n                 _messageList.put(messageData);\n             }\n         }\n         catch (AMQException e)\n         {\n-            throw new JMException(\"Error creating message contents: \" + e);\n+            JMException jme = new JMException(\"Error creating message contents: \" + e);\n+            jme.initCause(e);\n+            throw jme;\n         }\n \n         return _messageList;\n@@ -400,11 +433,11 @@ public TabularData viewMessages(int beginIndex, int endIndex) throws JMException\n         list.add(\"JMSCorrelationID = \" + headerProperties.getCorrelationIdAsString());\n \n         int delMode = headerProperties.getDeliveryMode();\n-        list.add(\"JMSDeliveryMode = \" + (delMode == 1 ? \"Persistent\" : \"Non_Persistent\"));\n+        list.add(\"JMSDeliveryMode = \" + ((delMode == 1) ? \"Persistent\" : \"Non_Persistent\"));\n \n         list.add(\"JMSPriority = \" + headerProperties.getPriority());\n         list.add(\"JMSType = \" + headerProperties.getType());\n-        \n+\n         long longDate = headerProperties.getExpiration();\n         String strDate = (longDate != 0) ? _dateFormat.format(new Date(longDate)) : null;\n         list.add(\"JMSExpiration = \" + strDate);\n@@ -425,27 +458,26 @@ public TabularData viewMessages(int beginIndex, int endIndex) throws JMException\n      */\n     public void moveMessages(long fromMessageId, long toMessageId, String toQueueName) throws JMException\n     {\n-        if (fromMessageId > toMessageId || (fromMessageId < 1))\n+        if ((fromMessageId > toMessageId) || (fromMessageId < 1))\n         {\n-            throw new OperationsException(\"\\\"From MessageId\\\" should be greater then 0 and less then \\\"To MessageId\\\"\");            \n+            throw new OperationsException(\"\\\"From MessageId\\\" should be greater then 0 and less then \\\"To MessageId\\\"\");\n         }\n \n         _queue.moveMessagesToAnotherQueue(fromMessageId, toMessageId, toQueueName, _storeContext);\n     }\n \n-\n     /**\n      * returns Notifications sent by this MBean.\n      */\n     @Override\n     public MBeanNotificationInfo[] getNotificationInfo()\n     {\n-        String[] notificationTypes = new String[]{MonitorNotification.THRESHOLD_VALUE_EXCEEDED};\n+        String[] notificationTypes = new String[] { MonitorNotification.THRESHOLD_VALUE_EXCEEDED };\n         String name = MonitorNotification.class.getName();\n         String description = \"Either Message count or Queue depth or Message size has reached threshold high value\";\n         MBeanNotificationInfo info1 = new MBeanNotificationInfo(notificationTypes, name, description);\n \n-        return new MBeanNotificationInfo[]{info1};\n+        return new MBeanNotificationInfo[] { info1 };\n     }\n \n } // End of AMQQueueMBean class", "filename": "broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java"}, {"additions": 18, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java", "sha": "979f692361d6c05c9a0817292871ea84926c655e", "changes": 31, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -210,6 +210,7 @@ public void subscriberHasPendingResend(boolean hasContent, Subscription subscrip\n \n     /**\n      * Returns all the messages in the Queue\n+     *\n      * @return List of messages\n      */\n     public List<AMQMessage> getMessages()\n@@ -222,14 +223,16 @@ public void subscriberHasPendingResend(boolean hasContent, Subscription subscrip\n             list.add(message);\n         }\n         _lock.unlock();\n-        \n+\n         return list;\n     }\n \n     /**\n      * Returns messages within the range of given messageIds\n+     *\n      * @param fromMessageId\n      * @param toMessageId\n+     *\n      * @return\n      */\n     public List<AMQMessage> getMessages(long fromMessageId, long toMessageId)\n@@ -242,7 +245,7 @@ public void subscriberHasPendingResend(boolean hasContent, Subscription subscrip\n         long maxMessageCount = toMessageId - fromMessageId + 1;\n \n         _lock.lock();\n-        \n+\n         List<AMQMessage> foundMessagesList = new ArrayList<AMQMessage>();\n \n         for (AMQMessage message : _messages)\n@@ -399,7 +402,7 @@ public void removeMovedMessages(List<AMQMessage> messageList)\n     public void removeAMessageFromTop(StoreContext storeContext) throws AMQException\n     {\n         _lock.lock();\n-        \n+\n         AMQMessage message = _messages.poll();\n         if (message != null)\n         {\n@@ -432,9 +435,7 @@ public long clearAllMessages(StoreContext storeContext) throws AMQException\n         return count;\n     }\n \n-    /**\n-        This can only be used to clear the _messages queue. Any subscriber resend queue will not be purged. \n-     */\n+    /** This can only be used to clear the _messages queue. Any subscriber resend queue will not be purged. */\n     private AMQMessage getNextMessage() throws AMQException\n     {\n         return getNextMessage(_messages, null);\n@@ -444,8 +445,12 @@ private AMQMessage getNextMessage(Queue<AMQMessage> messages, Subscription sub)\n     {\n         AMQMessage message = messages.peek();\n \n-        //while (we have a message) && (The subscriber is not a browser or we are clearing) && (Check message is taken.)\n-        while (message != null && (sub != null && !sub.isBrowser() || sub == null) && message.taken(sub))\n+        //while (we have a message) && ((The subscriber is not a browser or message is taken ) or we are clearing) && (Check message is taken.)\n+        while (message != null\n+               && (\n+                ((sub != null && !sub.isBrowser()) || message.isTaken(_queue))\n+                || sub == null)\n+               && message.taken(_queue, sub))\n         {\n             //remove the already taken message\n             AMQMessage removed = messages.poll();\n@@ -506,7 +511,7 @@ public void sendNextMessage(Subscription sub, AMQQueue queue)//Queue<AMQMessage>\n                 }\n                 if (_log.isDebugEnabled())\n                 {\n-                    _log.debug(debugIdentity() + \"Async Delivery Message \" + message.getMessageId() + \"(\" + System.identityHashCode(message) +\n+                    _log.debug(debugIdentity() + \"Async Delivery Message :\" + message + \"(\" + System.identityHashCode(message) +\n                                \") by :\" + System.identityHashCode(this) +\n                                \") to :\" + System.identityHashCode(sub));\n                 }\n@@ -526,7 +531,7 @@ public void sendNextMessage(Subscription sub, AMQQueue queue)//Queue<AMQMessage>\n \n             if (_log.isDebugEnabled())\n             {\n-                _log.debug(debugIdentity() + \"Async Delivered Message r:\" + removed.debugIdentity() + \"d:\" + message.debugIdentity() +\n+                _log.debug(debugIdentity() + \"Async Delivered Message r:\" + removed.debugIdentity() + \"d:\" + message +\n                            \") by :\" + System.identityHashCode(this) +\n                            \") to :\" + System.identityHashCode(sub));\n             }\n@@ -562,7 +567,7 @@ else if (messageQueue == sub.getPreDeliveryQueue() && !sub.isBrowser())\n         }\n         catch (AMQException e)\n         {\n-            message.release();\n+            message.release(_queue);\n             _log.error(debugIdentity() + \"Unable to deliver message as dequeue failed: \" + e, e);\n         }\n     }\n@@ -723,7 +728,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, b\n                             _log.trace(debugIdentity() + \"Delivering Message:\" + msg.debugIdentity() + \" to(\" +\n                                        System.identityHashCode(s) + \") :\" + s);\n                         }\n-                        msg.taken(s);\n+                        msg.taken(_queue, s);\n                         //Deliver the message\n                         s.send(msg, _queue);\n                     }\n@@ -737,7 +742,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, b\n                     }\n                 }\n \n-                if (!msg.isTaken())\n+                if (!msg.isTaken(_queue))\n                 {\n                     if (_log.isInfoEnabled())\n                     {", "filename": "broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java", "sha": "e3944954f3e7a1190033ac85a87d752e183bac1f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -558,7 +558,7 @@ private void requeue()\n                     _logger.trace(\"Removed for resending:\" + resent.debugIdentity());\n                 }\n \n-                resent.release();\n+                resent.release(_queue);\n                 _queue.subscriberHasPendingResend(false, this, resent);\n \n                 try", "filename": "broker/src/main/java/org/apache/qpid/server/queue/SubscriptionImpl.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java", "sha": "89f0b7b39da16d00d4c99e3b3f13e5da5b0e0887", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -153,7 +153,7 @@ public static IApplicationRegistry getInstance(int instanceID)\n             {\n                 _logger.error(\"Error configuring application: \" + e, e);\n                 //throw new AMQBrokerCreationException(instanceID, \"Unable to create Application Registry instance \" + instanceID);\n-                throw new RuntimeException(\"Unable to create Application Registry\");\n+                throw new RuntimeException(\"Unable to create Application Registry\", e);\n             }\n         }\n         else\n@@ -168,6 +168,12 @@ public void close() throws Exception\n         {\n             virtualHost.close();\n         }\n+\n+        // close the rmi registry(if any) started for management\n+        if (getInstance().getManagedObjectRegistry() != null)\n+        {\n+            getInstance().getManagedObjectRegistry().close();\n+        }\n     }\n \n     public Configuration getConfiguration()\n@@ -187,7 +193,7 @@ public Configuration getConfiguration()\n             catch (Exception e)\n             {\n                 _logger.error(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\");\n-                throw new IllegalArgumentException(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\");\n+                throw new IllegalArgumentException(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\", e);\n             }\n             Configurator.configure(instance);\n             _configuredObjects.put(instanceType, instance);", "filename": "broker/src/main/java/org/apache/qpid/server/registry/ApplicationRegistry.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java", "sha": "1cca259a8d65f8cd8d16578c6cba82724feb22ad", "changes": 9, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -42,6 +42,7 @@\n import org.apache.qpid.server.security.access.AccessManagerImpl;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.virtualhost.VirtualHostRegistry;\n+import org.apache.qpid.AMQException;\n \n public class ConfigurationFileApplicationRegistry extends ApplicationRegistry\n {\n@@ -103,6 +104,7 @@ protected String interpolate(String o)\n     public void initialise() throws Exception\n     {\n         initialiseManagedObjectRegistry();\n+\n         _virtualHostRegistry = new VirtualHostRegistry();\n \n         _accessManager = new AccessManagerImpl(\"default\", _configuration);\n@@ -111,7 +113,12 @@ public void initialise() throws Exception\n \n         _authenticationManager = new PrincipalDatabaseAuthenticationManager(null, null);\n \n+        _databaseManager.initialiseManagement(_configuration);\n+\n+        _managedObjectRegistry.start();\n+\n         initialiseVirtualHosts();\n+\n     }\n \n     private void initialiseVirtualHosts() throws Exception\n@@ -123,7 +130,7 @@ private void initialiseVirtualHosts() throws Exception\n         }\n     }\n \n-    private void initialiseManagedObjectRegistry()\n+    private void initialiseManagedObjectRegistry() throws AMQException\n     {\n         ManagementConfiguration config = getConfiguredObject(ManagementConfiguration.class);\n         if (config.enabled)", "filename": "broker/src/main/java/org/apache/qpid/server/registry/ConfigurationFileApplicationRegistry.java"}, {"additions": 81, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/Passwd.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/Passwd.java", "sha": "f9e093dba7c1be0bd2691da0c951f5d78ebd0746", "changes": 81, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/Passwd.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,81 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.DigestException;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+\n+public class Passwd\n+{\n+    public static void main(String args[]) throws NoSuchAlgorithmException, DigestException, IOException\n+    {\n+        if (args.length != 2)\n+        {\n+            System.out.println(\"Passwd <username> <password>\");\n+            System.exit(0);\n+        }\n+\n+        byte[] data = args[1].getBytes(\"utf-8\");\n+\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+\n+        for (byte b : data)\n+        {\n+            md.update(b);\n+        }\n+\n+        byte[] digest = md.digest();\n+\n+        Base64 b64 = new Base64();\n+\n+        byte[] encoded = b64.encode(digest);\n+\n+        output(args[0], encoded);\n+    }\n+\n+    private static void output(String user, byte[] encoded) throws IOException\n+    {\n+\n+//        File passwdFile = new File(\"qpid.passwd\");\n+\n+        PrintStream ps = new PrintStream(System.out);\n+\n+        user += \":\";\n+        ps.write(user.getBytes(\"utf-8\"));\n+\n+        for (byte b : encoded)\n+        {\n+            ps.write(b);\n+        }\n+\n+        ps.println();\n+\n+        ps.flush();\n+        ps.close();\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/Passwd.java"}, {"additions": 457, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AMQUserManagementMBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AMQUserManagementMBean.java", "sha": "a43474559d858b537aef55809e574abe138854f3", "changes": 457, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/AMQUserManagementMBean.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,457 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.access;\n+\n+import org.apache.qpid.server.management.MBeanDescription;\n+import org.apache.qpid.server.management.AMQManagedObject;\n+import org.apache.qpid.server.management.MBeanOperationParameter;\n+import org.apache.qpid.server.management.MBeanOperation;\n+import org.apache.qpid.server.management.MBeanInvocationHandlerImpl;\n+import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n+import org.apache.log4j.Logger;\n+import org.apache.commons.configuration.ConfigurationException;\n+\n+import javax.management.JMException;\n+import javax.management.openmbean.TabularData;\n+import javax.management.openmbean.TabularDataSupport;\n+import javax.management.openmbean.TabularType;\n+import javax.management.openmbean.SimpleType;\n+import javax.management.openmbean.CompositeType;\n+import javax.management.openmbean.OpenType;\n+import javax.management.openmbean.OpenDataException;\n+import javax.management.openmbean.CompositeData;\n+import javax.management.openmbean.CompositeDataSupport;\n+import javax.security.auth.login.AccountNotFoundException;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.FileOutputStream;\n+import java.util.Properties;\n+import java.util.List;\n+import java.util.Enumeration;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.security.Principal;\n+\n+/** MBean class for AMQUserManagementMBean. It implements all the management features exposed for managing users. */\n+@MBeanDescription(\"User Management Interface\")\n+public class AMQUserManagementMBean extends AMQManagedObject implements UserManagement\n+{\n+\n+    private static final Logger _logger = Logger.getLogger(AMQUserManagementMBean.class);\n+\n+    private PrincipalDatabase _principalDatabase;\n+    private String _accessFileName;\n+    private Properties _accessRights;\n+    //    private File _accessFile;\n+    private ReentrantLock _accessRightsUpdate = new ReentrantLock();\n+\n+    // Setup for the TabularType\n+    static TabularType _userlistDataType; // Datatype for representing User Lists\n+\n+    static CompositeType _userDataType; // Composite type for representing User\n+    static String[] _userItemNames = {\"Username\", \"Read\", \"Write\", \"Admin\"};\n+\n+    static\n+    {\n+        String[] userItemDesc = {\"Broker Login username\", \"Management Console Read Permission\",\n+                                 \"Management Console Write Permission\", \"Management Console Admin Permission\"};\n+\n+        OpenType[] userItemTypes = new OpenType[4]; // User item types.\n+        userItemTypes[0] = SimpleType.STRING;  // For Username\n+        userItemTypes[1] = SimpleType.BOOLEAN; // For Rights - Read\n+        userItemTypes[2] = SimpleType.BOOLEAN; // For Rights - Write\n+        userItemTypes[3] = SimpleType.BOOLEAN; // For Rights - Admin\n+        String[] userDataIndex = {_userItemNames[0]};\n+\n+        try\n+        {\n+            _userDataType =\n+                    new CompositeType(\"User\", \"User Data\", _userItemNames, userItemDesc, userItemTypes);\n+\n+            _userlistDataType = new TabularType(\"Users\", \"List of users\", _userDataType, userDataIndex);\n+        }\n+        catch (OpenDataException e)\n+        {\n+            _logger.error(\"Tabular data setup for viewing users incorrect.\");\n+            _userlistDataType = null;\n+        }\n+    }\n+\n+\n+    public AMQUserManagementMBean() throws JMException\n+    {\n+        super(UserManagement.class, UserManagement.TYPE);\n+    }\n+\n+    public String getObjectInstanceName()\n+    {\n+        return UserManagement.TYPE;\n+    }\n+\n+    public boolean setPassword(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                               @MBeanOperationParameter(name = \"password\", description = \"Password\")String password)\n+    {\n+        try\n+        {\n+            //delegate password changes to the Principal Database\n+            return _principalDatabase.updatePassword(new UsernamePrincipal(username), password);\n+        }\n+        catch (AccountNotFoundException e)\n+        {\n+            _logger.warn(\"Attempt to set password of non-existant user'\" + username + \"'\");\n+            return false;\n+        }\n+    }\n+\n+    public boolean setRights(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                             @MBeanOperationParameter(name = \"read\", description = \"Administration read\")boolean read,\n+                             @MBeanOperationParameter(name = \"write\", description = \"Administration write\")boolean write,\n+                             @MBeanOperationParameter(name = \"admin\", description = \"Administration rights\")boolean admin)\n+    {\n+\n+        if (_accessRights.get(username) == null)\n+        {\n+            // If the user doesn't exist in the user rights file check that they at least have an account.\n+            if (_principalDatabase.getUser(username) == null)\n+            {\n+                return false;\n+            }\n+        }\n+\n+        try\n+        {\n+\n+            _accessRightsUpdate.lock();\n+\n+            // Update the access rights\n+            if (admin)\n+            {\n+                _accessRights.put(username, MBeanInvocationHandlerImpl.ADMIN);\n+            }\n+            else\n+            {\n+                if (read | write)\n+                {\n+                    if (read)\n+                    {\n+                        _accessRights.put(username, MBeanInvocationHandlerImpl.READONLY);\n+                    }\n+                    if (write)\n+                    {\n+                        _accessRights.put(username, MBeanInvocationHandlerImpl.READWRITE);\n+                    }\n+                }\n+                else\n+                {\n+                    _accessRights.remove(username);\n+                }\n+            }\n+\n+            saveAccessFile();\n+        }\n+        finally\n+        {\n+            if (_accessRightsUpdate.isHeldByCurrentThread())\n+            {\n+                _accessRightsUpdate.unlock();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    public boolean createUser(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                              @MBeanOperationParameter(name = \"password\", description = \"Password\")String password,\n+                              @MBeanOperationParameter(name = \"read\", description = \"Administration read\")boolean read,\n+                              @MBeanOperationParameter(name = \"write\", description = \"Administration write\")boolean write,\n+                              @MBeanOperationParameter(name = \"admin\", description = \"Administration rights\")boolean admin)\n+    {\n+        if (_principalDatabase.createPrincipal(new UsernamePrincipal(username), password))\n+        {\n+            _accessRights.put(username, \"\");\n+\n+            return setRights(username, read, write, admin);\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean deleteUser(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username)\n+    {\n+\n+        try\n+        {\n+            if (_principalDatabase.deletePrincipal(new UsernamePrincipal(username)))\n+            {\n+                try\n+                {\n+                    _accessRightsUpdate.lock();\n+\n+                    _accessRights.remove(username);\n+                    saveAccessFile();\n+                }\n+                finally\n+                {\n+                    if (_accessRightsUpdate.isHeldByCurrentThread())\n+                    {\n+                        _accessRightsUpdate.unlock();\n+                    }\n+                }\n+                return true;\n+            }\n+        }\n+        catch (AccountNotFoundException e)\n+        {\n+            _logger.warn(\"Attempt to delete user (\" + username + \") that doesn't exist\");\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean reloadData()\n+    {\n+        try\n+        {\n+            try\n+            {\n+                loadAccessFile();\n+            }\n+            catch (ConfigurationException e)\n+            {\n+                _logger.info(\"Reload failed due to:\" + e);\n+                return false;\n+            }\n+\n+            // Reload successful\n+            return true;\n+        }\n+        catch (IOException e)\n+        {\n+            _logger.info(\"Reload failed due to:\" + e);\n+            // Reload unsuccessful\n+            return false;\n+        }\n+    }\n+\n+\n+    @MBeanOperation(name = \"viewUsers\", description = \"All users with access rights to the system.\")\n+    public TabularData viewUsers()\n+    {\n+        // Table of users\n+        // Username(string), Access rights Read,Write,Admin(bool,bool,bool)\n+\n+        reloadData();\n+        \n+        if (_userlistDataType == null)\n+        {\n+            _logger.warn(\"TabluarData not setup correctly\");\n+            return null;\n+        }\n+\n+        List<Principal> users = _principalDatabase.getUsers();\n+\n+        TabularDataSupport userList = new TabularDataSupport(_userlistDataType);\n+\n+        try\n+        {\n+            // Create the tabular list of message header contents\n+            for (Principal user : users)\n+            {\n+                // Create header attributes list\n+\n+                String rights = (String) _accessRights.get(user.getName());\n+\n+                Boolean read = false;\n+                Boolean write = false;\n+                Boolean admin = false;\n+\n+                if (rights != null)\n+                {\n+                    read = rights.equals(MBeanInvocationHandlerImpl.READONLY)\n+                           || rights.equals(MBeanInvocationHandlerImpl.READWRITE);\n+                    write = rights.equals(MBeanInvocationHandlerImpl.READWRITE);\n+                    admin = rights.equals(MBeanInvocationHandlerImpl.ADMIN);\n+                }\n+\n+                Object[] itemData = {user.getName(), read, write, admin};\n+                CompositeData messageData = new CompositeDataSupport(_userDataType, _userItemNames, itemData);\n+                userList.put(messageData);\n+            }\n+        }\n+        catch (OpenDataException e)\n+        {\n+            _logger.warn(\"Unable to create user list due to :\" + e);\n+            return null;\n+        }\n+\n+        return userList;\n+    }\n+\n+    /*** Broker Methods **/\n+\n+    /**\n+     * setPrincipalDatabase\n+     *\n+     * @param database set The Database to use for user lookup\n+     */\n+    public void setPrincipalDatabase(PrincipalDatabase database)\n+    {\n+        _principalDatabase = database;\n+    }\n+\n+    /**\n+     * setAccessFile\n+     *\n+     * @param accessFile the file to use for updating.\n+     *\n+     * @throws java.io.IOException If the file cannot be accessed\n+     * @throws org.apache.commons.configuration.ConfigurationException\n+     *                             if checks on the file fail.\n+     */\n+    public void setAccessFile(String accessFile) throws IOException, ConfigurationException\n+    {\n+        _accessFileName = accessFile;\n+\n+        if (_accessFileName != null)\n+        {\n+            loadAccessFile();\n+        }\n+        else\n+        {\n+            _logger.warn(\"Access rights file specified is null. Access rights not changed.\");\n+        }\n+    }\n+\n+    private void loadAccessFile() throws IOException, ConfigurationException\n+    {\n+        try\n+        {\n+            _accessRightsUpdate.lock();\n+\n+            Properties accessRights = new Properties();\n+\n+            File accessFile = new File(_accessFileName);\n+\n+            if (!accessFile.exists())\n+            {\n+                throw new ConfigurationException(\"'\" + _accessFileName + \"' does not exist\");\n+            }\n+\n+            if (!accessFile.canRead())\n+            {\n+                throw new ConfigurationException(\"Cannot read '\" + _accessFileName + \"'.\");\n+            }\n+\n+            if (!accessFile.canWrite())\n+            {\n+                _logger.warn(\"Unable to write to access file '\" + _accessFileName + \"' changes will not be preserved.\");\n+            }\n+\n+            accessRights.load(new FileInputStream(accessFile));\n+            checkAccessRights(accessRights);\n+            setAccessRights(accessRights);\n+        }\n+        finally\n+        {\n+            if (_accessRightsUpdate.isHeldByCurrentThread())\n+            {\n+                _accessRightsUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    private void checkAccessRights(Properties accessRights)\n+    {\n+        Enumeration values = accessRights.propertyNames();\n+\n+        while (values.hasMoreElements())\n+        {\n+            String user = (String) values.nextElement();\n+\n+            if (_principalDatabase.getUser(user) == null)\n+            {\n+                _logger.warn(\"Access rights contains user '\" + user + \"' but there is no authentication data for that user\");\n+            }\n+        }\n+    }\n+\n+    private void saveAccessFile()\n+    {\n+        try\n+        {\n+            _accessRightsUpdate.lock();\n+            try\n+            {\n+                // remove old temporary file\n+                File tmp = new File(_accessFileName + \".tmp\");\n+                if (tmp.exists())\n+                {\n+                    tmp.delete();\n+                }\n+\n+                //remove old backup\n+                File old = new File(_accessFileName + \".old\");\n+                if (old.exists())\n+                {\n+                    old.delete();\n+                }\n+\n+                // Rename current file\n+                File rights = new File(_accessFileName);\n+                rights.renameTo(old);\n+\n+                FileOutputStream output = new FileOutputStream(tmp);\n+                _accessRights.store(output, \"\");\n+                output.close();\n+\n+                // Rename new file to main file\n+                tmp.renameTo(rights);\n+\n+                // delete tmp\n+                tmp.delete();\n+            }\n+            catch (IOException e)\n+            {\n+                _logger.warn(\"Problem occured saving '\" + _accessFileName + \"' changes may not be preserved. :\" + e);\n+            }\n+        }\n+        finally\n+        {\n+            if (_accessRightsUpdate.isHeldByCurrentThread())\n+            {\n+                _accessRightsUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * user=read user=write user=readwrite user=admin\n+     *\n+     * @param accessRights The properties list of access rights to process\n+     */\n+    private void setAccessRights(Properties accessRights)\n+    {\n+        _logger.debug(\"Setting Access Rights:\" + accessRights);\n+        _accessRights = accessRights;\n+        MBeanInvocationHandlerImpl.setAccessRights(_accessRights);\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/AMQUserManagementMBean.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AccessManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AccessManager.java", "sha": "d70a6dc8f4a6655de4ec55f03a100a646bb7e086", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/AccessManager.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,8 +20,13 @@\n  */\n package org.apache.qpid.server.security.access;\n \n+import java.security.Principal;\n+\n public interface AccessManager\n {\n+    AccessResult isAuthorized(Accessable accessObject, Principal username, AccessRights.Rights rights);\n+\n+    @Deprecated\n     AccessResult isAuthorized(Accessable accessObject, String username);\n \n     String getName();", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/AccessManager.java"}, {"additions": 26, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AccessManagerImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AccessManagerImpl.java", "sha": "35d036d20f8dfc4113cd4e580424c9a1cedab05a", "changes": 33, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/AccessManagerImpl.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -23,13 +23,13 @@\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.configuration.PropertyUtils;\n-import org.apache.qpid.configuration.PropertyException;\n import org.apache.log4j.Logger;\n \n import java.util.List;\n import java.lang.reflect.Method;\n-import java.lang.reflect.InvocationTargetException;\n+import java.security.Principal;\n \n public class AccessManagerImpl implements AccessManager\n {\n@@ -39,8 +39,13 @@\n \n     public AccessManagerImpl(String name, Configuration hostConfig) throws ConfigurationException\n     {\n-        String accessClass = hostConfig.getString(\"security.access.class\");\n+        if (hostConfig == null)\n+        {\n+            _logger.warn(\"No Configuration specified. Using default access controls for VirtualHost:'\" + name + \"'\");\n+            return;\n+        }\n \n+        String accessClass = hostConfig.getString(\"security.access.class\");\n         if (accessClass == null)\n         {\n             _logger.warn(\"No access control specified. Using default access controls for VirtualHost:'\" + name + \"'\");\n@@ -111,21 +116,35 @@ private void initialiseAccessControl(AccessManager accessManager, Configuration\n             }\n             catch (Exception e)\n             {\n-                throw new ConfigurationException(e.getCause());\n+                ConfigurationException ce = new ConfigurationException(e.getMessage(), e.getCause());\n+                ce.initCause(e);\n+                throw ce;\n             }\n         }\n     }\n \n-\n     public AccessResult isAuthorized(Accessable accessObject, String username)\n+    {\n+        return isAuthorized(accessObject, new UsernamePrincipal(username), AccessRights.Rights.READ);\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, Principal user, AccessRights.Rights rights)\n     {\n         if (_accessManager == null)\n         {\n-            return ApplicationRegistry.getInstance().getAccessManager().isAuthorized(accessObject, username);\n+            if (ApplicationRegistry.getInstance().getAccessManager() == this)\n+            {\n+                _logger.warn(\"No Default access manager specified DENYING ALL ACCESS\");\n+                return new AccessResult(this, AccessResult.AccessStatus.REFUSED);\n+            }\n+            else\n+            {\n+                return ApplicationRegistry.getInstance().getAccessManager().isAuthorized(accessObject, user, rights);\n+            }\n         }\n         else\n         {\n-            return _accessManager.isAuthorized(accessObject, username);\n+            return _accessManager.isAuthorized(accessObject, user, rights);\n         }\n     }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/AccessManagerImpl.java"}, {"additions": 63, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AccessRights.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AccessRights.java", "sha": "1b79a5a0e0780ee3828e4da538901967da03619f", "changes": 63, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/AccessRights.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,63 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.access;\n+\n+public class AccessRights\n+{\n+    public enum Rights\n+    {\n+        ANY,\n+        READ,\n+        WRITE,\n+        READWRITE\n+    }\n+\n+    Rights _right;\n+\n+    public AccessRights(Rights right)\n+    {\n+        _right = right;\n+    }\n+\n+    public boolean allows(Rights rights)\n+    {\n+        switch (_right)\n+        {\n+            case ANY:\n+                return (rights.equals(Rights.WRITE)\n+                        || rights.equals(Rights.READ)\n+                        || rights.equals(Rights.READWRITE)\n+                        || rights.equals(Rights.ANY));\n+            case READ:\n+                return rights.equals(Rights.READ) || rights.equals(Rights.ANY);\n+            case WRITE:\n+                return rights.equals(Rights.WRITE) || rights.equals(Rights.ANY);\n+            case READWRITE:\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    public Rights getRights()\n+    {\n+        return _right;\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/AccessRights.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AllowAll.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/AllowAll.java", "sha": "1ddca3a64ec9a5bbd9a1c846aeb00f250ee68f26", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/AllowAll.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,9 +20,16 @@\n  */\n package org.apache.qpid.server.security.access;\n \n+import java.security.Principal;\n+\n public class AllowAll implements AccessManager\n {\n \n+    public AccessResult isAuthorized(Accessable accessObject, Principal username, AccessRights.Rights rights)\n+    {\n+        return new AccessResult(this, AccessResult.AccessStatus.GRANTED);\n+    }\n+\n     public AccessResult isAuthorized(Accessable accessObject, String username)\n     {\n         return new AccessResult(this, AccessResult.AccessStatus.GRANTED);", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/AllowAll.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/DenyAll.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/DenyAll.java", "sha": "bf40eeba4e066ebdceb55aaf1f3931fbd91aee1d", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/DenyAll.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,8 +20,15 @@\n  */\n package org.apache.qpid.server.security.access;\n \n+import java.security.Principal;\n+\n public class DenyAll implements AccessManager\n {\n+    public AccessResult isAuthorized(Accessable accessObject, Principal username, AccessRights.Rights rights)\n+    {\n+        return new AccessResult(this, AccessResult.AccessStatus.REFUSED);\n+    }\n+\n     public AccessResult isAuthorized(Accessable accessObject, String username)\n     {\n         return new AccessResult(this, AccessResult.AccessStatus.REFUSED);", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/DenyAll.java"}, {"additions": 183, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/FileAccessManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/FileAccessManager.java", "sha": "291bc714edd4bc17918bf496765342b7ff7060e7", "changes": 183, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/FileAccessManager.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,183 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.server.security.access;\n+\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.FileNotFoundException;\n+import java.io.File;\n+import java.util.regex.Pattern;\n+import java.security.Principal;\n+\n+/**\n+ * Represents a user database where the account information is stored in a simple flat file.\n+ *\n+ * The file is expected to be in the form: username:password username1:password1 ... usernamen:passwordn\n+ *\n+ * where a carriage return separates each username/password pair. Passwords are assumed to be in plain text.\n+ */\n+public class FileAccessManager implements AccessManager\n+{\n+    private static final Logger _logger = Logger.getLogger(FileAccessManager.class);\n+\n+    protected File _accessFile;\n+\n+    protected Pattern _regexp = Pattern.compile(\":\");\n+\n+    private static final short USER_INDEX = 0;\n+    private static final short VIRTUALHOST_INDEX = 1;\n+\n+    public void setAccessFile(String accessFile) throws FileNotFoundException\n+    {\n+        File f = new File(accessFile);\n+        _logger.info(\"FileAccessManager using file \" + f.getAbsolutePath());\n+        _accessFile = f;\n+        if (!f.exists())\n+        {\n+            throw new FileNotFoundException(\"Cannot find access file \" + f);\n+        }\n+        if (!f.canRead())\n+        {\n+            throw new FileNotFoundException(\"Cannot read access file \" + f +\n+                                            \". Check permissions.\");\n+        }\n+    }\n+\n+    /**\n+     * Looks up the virtual hosts for a specified user in the access file.\n+     *\n+     * @param user The user to lookup\n+     *\n+     * @return a list of virtualhosts\n+     */\n+    private VirtualHostAccess[] lookupVirtualHost(String user)\n+    {\n+        String[] results = lookup(user, VIRTUALHOST_INDEX);\n+        VirtualHostAccess vhosts[] = new VirtualHostAccess[results.length];\n+\n+        for (int index = 0; index < results.length; index++)\n+        {\n+            vhosts[index] = new VirtualHostAccess(results[index]);\n+        }\n+\n+        return vhosts;\n+    }\n+\n+\n+    private String[] lookup(String user, int index)\n+    {\n+        try\n+        {\n+            BufferedReader reader = null;\n+            try\n+            {\n+                reader = new BufferedReader(new FileReader(_accessFile));\n+                String line;\n+\n+                while ((line = reader.readLine()) != null)\n+                {\n+                    String[] result = _regexp.split(line);\n+                    if (result == null || result.length < (index + 1))\n+                    {\n+                        continue;\n+                    }\n+\n+                    if (user.equals(result[USER_INDEX]))\n+                    {\n+                        return result[index].split(\",\");\n+                    }\n+                }\n+                return null;\n+            }\n+            finally\n+            {\n+                if (reader != null)\n+                {\n+                    reader.close();\n+                }\n+            }\n+        }\n+        catch (IOException ioe)\n+        {\n+            //ignore\n+        }\n+        return null;\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, String username)\n+    {\n+        return isAuthorized(accessObject, new UsernamePrincipal(username), AccessRights.Rights.READ);\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, Principal user, AccessRights.Rights rights)\n+    {\n+        if (accessObject instanceof VirtualHost)\n+        {\n+            VirtualHostAccess[] hosts = lookupVirtualHost(user.getName());\n+\n+            if (hosts != null)\n+            {\n+                for (VirtualHostAccess host : hosts)\n+                {\n+                    if (accessObject.getAccessableName().equals(host.getVirtualHost()))\n+                    {\n+                        if (host.getAccessRights().allows(rights))\n+                        {\n+                            return new AccessResult(this, AccessResult.AccessStatus.GRANTED);\n+                        }\n+                        else\n+                        {\n+                            return new AccessResult(this, AccessResult.AccessStatus.REFUSED);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+//        else if (accessObject instanceof AMQQueue)\n+//        {\n+//            String[] queues = lookupQueue(username, ((AMQQueue) accessObject).getVirtualHost());\n+//\n+//            if (queues != null)\n+//            {\n+//                for (String queue : queues)\n+//                {\n+//                    if (accessObject.getAccessableName().equals(queue))\n+//                    {\n+//                        return new AccessResult(this, AccessResult.AccessStatus.GRANTED);\n+//                    }\n+//                }\n+//            }\n+//        }\n+\n+        return new AccessResult(this, AccessResult.AccessStatus.REFUSED);\n+    }\n+\n+    public String getName()\n+    {\n+        return \"FileAccessManager\";\n+    }\n+\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/FileAccessManager.java"}, {"additions": 19, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/PrincipalDatabaseAccessManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/PrincipalDatabaseAccessManager.java", "sha": "6ccadb2e7d0ba2b2c884f47d6d5b203bc3b84a45", "changes": 21, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/PrincipalDatabaseAccessManager.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -22,8 +22,11 @@\n \n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.log4j.Logger;\n \n+import java.security.Principal;\n+\n public class PrincipalDatabaseAccessManager implements AccessManager\n {\n     private static final Logger _logger = Logger.getLogger(PrincipalDatabaseAccessManager.class);\n@@ -58,15 +61,21 @@ public void setPrincipalDatabase(String database)\n         }\n     }\n \n+\n     public AccessResult isAuthorized(Accessable accessObject, String username)\n+    {\n+        return isAuthorized(accessObject, new UsernamePrincipal(username), AccessRights.Rights.READ);\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, Principal username, AccessRights.Rights rights)\n     {\n         AccessResult result;\n \n         if (_database == null)\n         {\n             if (_default != null)\n             {\n-                result = _default.isAuthorized(accessObject, username);\n+                result = _default.isAuthorized(accessObject, username, rights);\n             }\n             else\n             {\n@@ -75,7 +84,15 @@ public AccessResult isAuthorized(Accessable accessObject, String username)\n         }\n         else\n         {\n-            result = ((AccessManager) _database).isAuthorized(accessObject, username);\n+            if (!(_database instanceof AccessManager))\n+            {\n+                _logger.warn(\"Specified PrincipalDatabase is not an AccessManager so using default AccessManager\");\n+                result = _default.isAuthorized(accessObject, username, rights);\n+            }\n+            else\n+            {\n+                result = ((AccessManager) _database).isAuthorized(accessObject, username, rights);\n+            }\n         }\n \n         result.addAuthorizer(this);", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/PrincipalDatabaseAccessManager.java"}, {"additions": 111, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/UserManagement.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/UserManagement.java", "sha": "6381213398cddbd3e99fbdfb0ec534b88a427eca", "changes": 111, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/UserManagement.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,111 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.access;\n+\n+import org.apache.qpid.server.management.MBeanOperation;\n+import org.apache.qpid.server.management.MBeanOperationParameter;\n+import org.apache.qpid.server.management.MBeanAttribute;\n+import org.apache.qpid.AMQException;\n+\n+import javax.management.openmbean.TabularData;\n+import javax.management.openmbean.CompositeData;\n+import javax.management.JMException;\n+import java.io.IOException;\n+\n+public interface UserManagement\n+{\n+    String TYPE = \"UserManagement\";\n+\n+    //********** Operations *****************//\n+    /**\n+     * set password for user\n+     *\n+     * @param username The username to create\n+     * @param password The password for the user\n+     *\n+     * @return The result of the operation\n+     */\n+    @MBeanOperation(name = \"setPassword\", description = \"Set password for user.\")              \n+    boolean setPassword(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                        @MBeanOperationParameter(name = \"password\", description = \"Password\")String password);\n+\n+    /**\n+     * set rights for users with given details\n+     *\n+     * @param username The username to create\n+     * @param read     The set of permission to give the new user\n+     * @param write    The set of permission to give the new user\n+     * @param admin    The set of permission to give the new user\n+     *\n+     * @return The result of the operation\n+     */\n+    @MBeanOperation(name = \"setRights\", description = \"Set access rights for user.\")\n+    boolean setRights(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                      @MBeanOperationParameter(name = \"read\", description = \"Administration read\")boolean read,\n+                      @MBeanOperationParameter(name = \"write\", description = \"Administration write\")boolean write,\n+                      @MBeanOperationParameter(name = \"admin\", description = \"Administration rights\")boolean admin);\n+\n+    /**\n+     * Create users with given details\n+     *\n+     * @param username The username to create\n+     * @param password The password for the user\n+     * @param read     The set of permission to give the new user\n+     * @param write    The set of permission to give the new user\n+     * @param admin    The set of permission to give the new user\n+     *\n+     * @return The result of the operation\n+     */\n+    @MBeanOperation(name = \"createUser\", description = \"Create new user from system.\")\n+    boolean createUser(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username,\n+                       @MBeanOperationParameter(name = \"password\", description = \"Password\")String password,\n+                       @MBeanOperationParameter(name = \"read\", description = \"Administration read\")boolean read,\n+                       @MBeanOperationParameter(name = \"write\", description = \"Administration write\")boolean write,\n+                       @MBeanOperationParameter(name = \"admin\", description = \"Administration rights\")boolean admin);\n+\n+    /**\n+     * View users returns all the users that are currently available to the system.\n+     *\n+     * @param username The user to delete\n+     *\n+     * @return The result of the operation\n+     */\n+    @MBeanOperation(name = \"deleteUser\", description = \"Delete user from system.\")\n+    boolean deleteUser(@MBeanOperationParameter(name = \"username\", description = \"Username\")String username);\n+\n+\n+    /**\n+     * Reload the date from disk\n+     *\n+     * @return The result of the operation\n+     */\n+//    @MBeanOperation(name = \"reloadData\", description = \"Reload the authentication file from disk.\")\n+//    boolean reloadData();\n+\n+    /**\n+     * View users returns all the users that are currently available to the system.\n+     *\n+     * @return a table of users data (Username, read, write, admin)\n+     */\n+    @MBeanOperation(name = \"viewUsers\", description = \"All users with access rights to the system.\")\n+    TabularData viewUsers();\n+\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/UserManagement.java"}, {"additions": 68, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/VirtualHostAccess.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/access/VirtualHostAccess.java", "sha": "13151a66b8fefbcd7a0d5a737a5d99e3e54125f2", "changes": 68, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/access/VirtualHostAccess.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,68 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.access;\n+\n+public class VirtualHostAccess\n+{\n+    private String _vhost;\n+    private AccessRights _rights;\n+\n+    public VirtualHostAccess(String vhostaccess)\n+    {\n+        //format <vhost>(<rights>)\n+        int hostend = vhostaccess.indexOf('(');\n+\n+        if (hostend == -1)\n+        {\n+            throw new IllegalArgumentException(\"VirtualHostAccess format string contains no access _rights\");\n+        }\n+\n+        _vhost = vhostaccess.substring(0, hostend);\n+\n+        String rights = vhostaccess.substring(hostend);\n+\n+        if (rights.indexOf('r') != -1)\n+        {\n+            if (rights.indexOf('w') != -1)\n+            {\n+                _rights = new AccessRights(AccessRights.Rights.READWRITE);\n+            }\n+            else\n+            {\n+                _rights = new AccessRights(AccessRights.Rights.READ);\n+            }\n+        }\n+        else if (rights.indexOf('w') != -1)\n+        {\n+            _rights = new AccessRights(AccessRights.Rights.WRITE);\n+        }\n+    }\n+\n+    public AccessRights getAccessRights()\n+    {\n+        return _rights;\n+    }\n+\n+    public String getVirtualHost()\n+    {\n+        return _vhost;\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/access/VirtualHostAccess.java"}, {"additions": 626, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java", "sha": "956db64d90fdc61309219e77270427f933d8d439", "changes": 626, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,626 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.auth.database;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n+import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5HashedInitialiser;\n+import org.apache.qpid.server.security.access.AMQUserManagementMBean;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.EncoderException;\n+\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.login.AccountNotFoundException;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.UnsupportedEncodingException;\n+import java.io.PrintStream;\n+import java.util.regex.Pattern;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.LinkedList;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.security.Principal;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.MessageDigest;\n+\n+/**\n+ * Represents a user database where the account information is stored in a simple flat file.\n+ *\n+ * The file is expected to be in the form: username:password username1:password1 ... usernamen:passwordn\n+ *\n+ * where a carriage return separates each username/password pair. Passwords are assumed to be in plain text.\n+ */\n+public class Base64MD5PasswordFilePrincipalDatabase implements PrincipalDatabase\n+{\n+    private static final Logger _logger = Logger.getLogger(Base64MD5PasswordFilePrincipalDatabase.class);\n+\n+    private File _passwordFile;\n+\n+    private Pattern _regexp = Pattern.compile(\":\");\n+\n+    private Map<String, AuthenticationProviderInitialiser> _saslServers;\n+\n+    AMQUserManagementMBean _mbean;\n+    private static final String DEFAULT_ENCODING = \"utf-8\";\n+    private Map<String, User> _users = new HashMap<String, User>();\n+    private ReentrantLock _userUpdate = new ReentrantLock();\n+\n+    public Base64MD5PasswordFilePrincipalDatabase()\n+    {\n+        _saslServers = new HashMap<String, AuthenticationProviderInitialiser>();\n+\n+        /**\n+         *  Create Authenticators for MD5 Password file.\n+         */\n+\n+        // Accept Plain incomming and hash it for comparison to the file.\n+        CRAMMD5HashedInitialiser cram = new CRAMMD5HashedInitialiser();\n+        cram.initialise(this);\n+        _saslServers.put(cram.getMechanismName(), cram);\n+\n+        //fixme The PDs should setup a PD Mangement MBean\n+//        try\n+//        {\n+//            _mbean = new AMQUserManagementMBean();\n+//            _mbean.setPrincipalDatabase(this);\n+//        }\n+//        catch (JMException e)\n+//        {\n+//            _logger.warn(\"User management disabled as unable to create MBean:\" + e);\n+//        }\n+    }\n+\n+    public void setPasswordFile(String passwordFile) throws IOException\n+    {\n+        File f = new File(passwordFile);\n+        _logger.info(\"PasswordFilePrincipalDatabase using file \" + f.getAbsolutePath());\n+        _passwordFile = f;\n+        if (!f.exists())\n+        {\n+            throw new FileNotFoundException(\"Cannot find password file \" + f);\n+        }\n+        if (!f.canRead())\n+        {\n+            throw new FileNotFoundException(\"Cannot read password file \" + f +\n+                                            \". Check permissions.\");\n+        }\n+\n+        loadPasswordFile();\n+    }\n+\n+    /**\n+     * SASL Callback Mechanism - sets the Password in the PasswordCallback based on the value in the PasswordFile\n+     *\n+     * @param principal The Principal to set the password for\n+     * @param callback  The PasswordCallback to call setPassword on\n+     *\n+     * @throws AccountNotFoundException If the Principal cannont be found in this Database\n+     */\n+    public void setPassword(Principal principal, PasswordCallback callback) throws AccountNotFoundException\n+    {\n+        if (_passwordFile == null)\n+        {\n+            throw new AccountNotFoundException(\"Unable to locate principal since no password file was specified during initialisation\");\n+        }\n+        if (principal == null)\n+        {\n+            throw new IllegalArgumentException(\"principal must not be null\");\n+        }\n+\n+        char[] pwd = lookupPassword(principal.getName());\n+\n+        if (pwd != null)\n+        {\n+            callback.setPassword(pwd);\n+        }\n+        else\n+        {\n+            throw new AccountNotFoundException(\"No account found for principal \" + principal);\n+        }\n+    }\n+\n+    /**\n+     * Used to verify that the presented Password is correct. Currently only used by Management Console\n+     *\n+     * @param principal The principal to authenticate\n+     * @param password  The password to check\n+     *\n+     * @return true if password is correct\n+     *\n+     * @throws AccountNotFoundException if the principal cannot be found\n+     */\n+    public boolean verifyPassword(String principal, String password) throws AccountNotFoundException\n+    {\n+        try\n+        {\n+            char[] pwd = lookupPassword(principal);\n+            byte[] passwordBytes = password.getBytes(DEFAULT_ENCODING);\n+\n+            int index = 0;\n+            boolean verified = true;\n+\n+            while (verified & index < passwordBytes.length)\n+            {\n+                verified = (pwd[index] == (char) passwordBytes[index]);\n+                index++;\n+            }\n+            return verified;\n+        }\n+        catch (UnsupportedEncodingException e)\n+        {\n+            return false;\n+        }\n+    }\n+\n+    public boolean updatePassword(Principal principal, String password) throws AccountNotFoundException\n+    {\n+        User user = _users.get(principal.getName());\n+\n+        if (user == null)\n+        {\n+            throw new AccountNotFoundException(principal.getName());\n+        }\n+\n+        try\n+        {\n+\n+            char[] passwd = convertPassword(password);\n+\n+            try\n+            {\n+                _userUpdate.lock();\n+                user.setPassword(passwd);\n+\n+                try\n+                {\n+                    savePasswordFile();\n+                }\n+                catch (IOException e)\n+                {\n+                    _logger.error(\"Unable to save password file, password change for user'\"\n+                                  + principal + \"' will revert at restart\");\n+                    return false;\n+                }\n+                return true;\n+            }\n+            finally\n+            {\n+                if (_userUpdate.isHeldByCurrentThread())\n+                {\n+                    _userUpdate.unlock();\n+                }\n+            }\n+        }\n+        catch (UnsupportedEncodingException e)\n+        {\n+            return false;\n+        }\n+    }\n+\n+    private char[] convertPassword(String password) throws UnsupportedEncodingException\n+    {\n+        byte[] passwdBytes = password.getBytes(DEFAULT_ENCODING);\n+\n+        char[] passwd = new char[passwdBytes.length];\n+\n+        int index = 0;\n+\n+        for (byte b : passwdBytes)\n+        {\n+            passwd[index++] = (char) b;\n+        }\n+\n+        return passwd;\n+    }\n+\n+    public boolean createPrincipal(Principal principal, String password)\n+    {\n+        if (_users.get(principal.getName()) != null)\n+        {\n+            return false;\n+        }\n+\n+        User user;\n+        try\n+        {\n+            user = new User(principal.getName(), convertPassword(password));\n+        }\n+        catch (UnsupportedEncodingException e)\n+        {\n+            _logger.warn(\"Unable to encode password:\" + e);\n+            return false;\n+        }\n+\n+        try\n+        {\n+            _userUpdate.lock();\n+            _users.put(user.getName(), user);\n+\n+            try\n+            {\n+                savePasswordFile();\n+                return true;\n+            }\n+            catch (IOException e)\n+            {\n+                return false;\n+            }\n+\n+        }\n+        finally\n+        {\n+            if (_userUpdate.isHeldByCurrentThread())\n+            {\n+                _userUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    public boolean deletePrincipal(Principal principal) throws AccountNotFoundException\n+    {\n+        User user = _users.get(principal.getName());\n+\n+        if (user == null)\n+        {\n+            throw new AccountNotFoundException(principal.getName());\n+        }\n+\n+        try\n+        {\n+            _userUpdate.lock();\n+            user.delete();\n+\n+            try\n+            {\n+                savePasswordFile();\n+            }\n+            catch (IOException e)\n+            {\n+                _logger.warn(\"Unable to remove user '\" + user.getName() + \"' from password file.\");\n+                return false;\n+            }\n+\n+            _users.remove(user.getName());\n+        }\n+        finally\n+        {\n+            if (_userUpdate.isHeldByCurrentThread())\n+            {\n+                _userUpdate.unlock();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+\n+    public Map<String, AuthenticationProviderInitialiser> getMechanisms()\n+    {\n+        return _saslServers;\n+    }\n+\n+    public List<Principal> getUsers()\n+    {\n+        return new LinkedList<Principal>(_users.values());\n+    }\n+\n+    public Principal getUser(String username)\n+    {\n+        if (_users.containsKey(username))\n+        {\n+            return new UsernamePrincipal(username);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Looks up the password for a specified user in the password file. Note this code is <b>not</b> secure since it\n+     * creates strings of passwords. It should be modified to create only char arrays which get nulled out.\n+     *\n+     * @param name The principal name to lookup\n+     *\n+     * @return a char[] for use in SASL.\n+     */\n+    private char[] lookupPassword(String name)\n+    {\n+        User user = _users.get(name);\n+        if (user == null)\n+        {\n+            return null;\n+        }\n+        else\n+        {\n+            return user.getPassword();\n+        }\n+    }\n+\n+\n+    private void loadPasswordFile() throws IOException\n+    {\n+        try\n+        {\n+            _userUpdate.lock();\n+            _users.clear();\n+\n+            BufferedReader reader = null;\n+            try\n+            {\n+                reader = new BufferedReader(new FileReader(_passwordFile));\n+                String line;\n+\n+                while ((line = reader.readLine()) != null)\n+                {\n+                    String[] result = _regexp.split(line);\n+                    if (result == null || result.length < 2 || result[0].startsWith(\"#\"))\n+                    {\n+                        continue;\n+                    }\n+\n+                    User user = new User(result);\n+                    _logger.info(\"Created user:\" + user);\n+                    _users.put(user.getName(), user);\n+                }\n+            }\n+            finally\n+            {\n+                if (reader != null)\n+                {\n+                    reader.close();\n+                }\n+            }\n+        }\n+        finally\n+        {\n+            if (_userUpdate.isHeldByCurrentThread())\n+            {\n+                _userUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    private void savePasswordFile() throws IOException\n+    {\n+        try\n+        {\n+            _userUpdate.lock();\n+\n+            BufferedReader reader = null;\n+            PrintStream writer = null;\n+            File tmp = new File(_passwordFile.getAbsolutePath() + \".tmp\");\n+            if (tmp.exists())\n+            {\n+                tmp.delete();\n+            }\n+            try\n+            {\n+                writer = new PrintStream(tmp);\n+                reader = new BufferedReader(new FileReader(_passwordFile));\n+                String line;\n+\n+                while ((line = reader.readLine()) != null)\n+                {\n+                    String[] result = _regexp.split(line);\n+                    if (result == null || result.length < 2 || result[0].startsWith(\"#\"))\n+                    {\n+                        writer.write(line.getBytes(DEFAULT_ENCODING));\n+                        continue;\n+                    }\n+\n+                    User user = _users.get(result[0]);\n+\n+                    if (user == null)\n+                    {\n+                        writer.write(line.getBytes(DEFAULT_ENCODING));\n+                        writer.println();\n+                    }\n+                    else if (!user.isDeleted())\n+                    {\n+                        if (!user.isModified())\n+                        {\n+                            writer.write(line.getBytes(DEFAULT_ENCODING));\n+                            writer.println();\n+                        }\n+                        else\n+                        {\n+                            try\n+                            {\n+                                byte[] encodedPassword = user.getEncodePassword();\n+\n+                                writer.write((user.getName() + \":\").getBytes(DEFAULT_ENCODING));\n+                                writer.write(encodedPassword);\n+                                writer.println();\n+\n+                                user.saved();\n+                            }\n+                            catch (Exception e)\n+                            {\n+                                _logger.warn(\"Unable to encode new password reverting to old password.\");\n+                                writer.write(line.getBytes(DEFAULT_ENCODING));\n+                                writer.println();\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                for (User user : _users.values())\n+                {\n+                    if (user.isModified())\n+                    {\n+                        byte[] encodedPassword;\n+                        try\n+                        {\n+                            encodedPassword = user.getEncodePassword();\n+                            writer.write((user.getName() + \":\").getBytes(DEFAULT_ENCODING));\n+                            writer.write(encodedPassword);\n+                            writer.println();\n+                            user.saved();\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            _logger.warn(\"Unable to get Encoded password for user'\" + user.getName() + \"' password not saved\");\n+                        }\n+                    }\n+                }\n+            }\n+            finally\n+            {\n+                if (reader != null)\n+                {\n+                    reader.close();\n+                }\n+\n+                if (writer != null)\n+                {\n+                    writer.close();\n+                }\n+\n+                // Swap temp file to main password file.\n+                File old = new File(_passwordFile.getAbsoluteFile() + \".old\");\n+                if (old.exists())\n+                {\n+                    old.delete();\n+                }\n+                _passwordFile.renameTo(old);\n+                tmp.renameTo(_passwordFile);\n+                tmp.delete();\n+            }\n+        }\n+        finally\n+        {\n+            if (_userUpdate.isHeldByCurrentThread())\n+            {\n+                _userUpdate.unlock();\n+            }\n+        }\n+    }\n+\n+    private class User implements Principal\n+    {\n+        String _name;\n+        char[] _password;\n+        byte[] _encodedPassword = null;\n+        private boolean _modified = false;\n+        private boolean _deleted = false;\n+\n+        User(String[] data) throws UnsupportedEncodingException\n+        {\n+            if (data.length != 2)\n+            {\n+                throw new IllegalArgumentException(\"User Data should be lenght 2, username, password\");\n+            }\n+\n+            _name = data[0];\n+\n+            byte[] encoded_password = data[1].getBytes(DEFAULT_ENCODING);\n+\n+            Base64 b64 = new Base64();\n+            byte[] decoded = b64.decode(encoded_password);\n+\n+            _encodedPassword = encoded_password;\n+\n+            _password = new char[decoded.length];\n+\n+            int index = 0;\n+            for (byte c : decoded)\n+            {\n+                _password[index++] = (char) c;\n+            }\n+        }\n+\n+        public User(String name, char[] password)\n+        {\n+            _name = name;\n+            setPassword(password);\n+        }\n+\n+        public String getName()\n+        {\n+            return _name;\n+        }\n+\n+        public String toString()\n+        {\n+            if (_logger.isDebugEnabled())\n+            {\n+                return getName() + ((_encodedPassword == null) ? \"\" : \":\" + new String(_encodedPassword));\n+            }\n+            else\n+            {\n+                return _name;\n+            }\n+        }\n+\n+        char[] getPassword()\n+        {\n+            return _password;\n+        }\n+\n+        void setPassword(char[] password)\n+        {\n+            _password = password;\n+            _modified = true;\n+            _encodedPassword = null;\n+        }\n+\n+\n+        byte[] getEncodePassword() throws EncoderException, UnsupportedEncodingException, NoSuchAlgorithmException\n+        {\n+            if (_encodedPassword == null)\n+            {\n+                encodePassword();\n+            }\n+            return _encodedPassword;\n+        }\n+\n+        private void encodePassword() throws EncoderException, UnsupportedEncodingException, NoSuchAlgorithmException\n+        {\n+            Base64 b64 = new Base64();\n+            _encodedPassword = b64.encode(new String(_password).getBytes(DEFAULT_ENCODING));\n+        }\n+\n+        public boolean isModified()\n+        {\n+            return _modified;\n+        }\n+\n+        public boolean isDeleted()\n+        {\n+            return _deleted;\n+        }\n+\n+        public void delete()\n+        {\n+            _deleted = true;\n+        }\n+\n+        public void saved()\n+        {\n+            _modified = false;\n+        }\n+\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabase.java"}, {"additions": 116, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/ConfigurationFilePrincipalDatabaseManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/ConfigurationFilePrincipalDatabaseManager.java", "sha": "2d3f5e5131a36327e1561529e6f4fdbdcb6a6742", "changes": 144, "status": "modified", "deletions": 28, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/ConfigurationFilePrincipalDatabaseManager.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,38 +1,46 @@\n /*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.security.auth.database;\n \n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n+\n+import org.apache.log4j.Logger;\n+\n+import org.apache.qpid.configuration.PropertyUtils;\n+import org.apache.qpid.configuration.PropertyException;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n-import org.apache.qpid.server.security.auth.database.PrincipalDatabaseManager;\n import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n-import org.apache.qpid.configuration.PropertyUtils;\n-import org.apache.log4j.Logger;\n+import org.apache.qpid.server.security.auth.database.PrincipalDatabaseManager;\n+import org.apache.qpid.server.security.access.AMQUserManagementMBean;\n+import org.apache.qpid.AMQException;\n \n-import java.util.Map;\n-import java.util.List;\n-import java.util.HashMap;\n-import java.lang.reflect.Method;\n-import java.io.FileNotFoundException;\n+import javax.management.JMException;\n \n public class ConfigurationFilePrincipalDatabaseManager implements PrincipalDatabaseManager\n {\n@@ -80,18 +88,21 @@ public ConfigurationFilePrincipalDatabaseManager() throws Exception\n             initialisePrincipalDatabase((PrincipalDatabase) o, config, i);\n \n             String name = databaseNames.get(i);\n-            if (name == null || name.length() == 0)\n+            if ((name == null) || (name.length() == 0))\n             {\n                 throw new Exception(\"Principal database names must have length greater than or equal to one character\");\n             }\n+\n             PrincipalDatabase pd = databases.get(name);\n             if (pd != null)\n             {\n                 throw new Exception(\"Duplicate principal database name not provided\");\n             }\n+\n             _logger.info(\"Initialised principal database '\" + name + \"' successfully\");\n             databases.put(name, (PrincipalDatabase) o);\n         }\n+\n         return databases;\n     }\n \n@@ -104,14 +115,16 @@ private void initialisePrincipalDatabase(PrincipalDatabase principalDatabase, Co\n         for (int i = 0; i < argumentNames.size(); i++)\n         {\n             String argName = argumentNames.get(i);\n-            if (argName == null || argName.length() == 0)\n+            if ((argName == null) || (argName.length() == 0))\n             {\n                 throw new ConfigurationException(\"Argument names must have length >= 1 character\");\n             }\n+\n             if (Character.isLowerCase(argName.charAt(0)))\n             {\n                 argName = Character.toUpperCase(argName.charAt(0)) + argName.substring(1);\n             }\n+\n             String methodName = \"set\" + argName;\n             Method method = null;\n             try\n@@ -125,9 +138,10 @@ private void initialisePrincipalDatabase(PrincipalDatabase principalDatabase, Co\n \n             if (method == null)\n             {\n-                throw new ConfigurationException(\"No method \" + methodName + \" found in class \" + principalDatabase.getClass() +\n-                                                 \" hence unable to configure principal database. The method must be public and \" +\n-                                                 \"have a single String argument with a void return type\");\n+                throw new ConfigurationException(\"No method \" + methodName + \" found in class \"\n+                                                 + principalDatabase.getClass()\n+                                                 + \" hence unable to configure principal database. The method must be public and \"\n+                                                 + \"have a single String argument with a void return type\");\n             }\n \n             try\n@@ -136,7 +150,14 @@ private void initialisePrincipalDatabase(PrincipalDatabase principalDatabase, Co\n             }\n             catch (Exception ite)\n             {\n-                throw new ConfigurationException(ite.getCause());\n+                if (ite instanceof ConfigurationException)\n+                {\n+                    throw(ConfigurationException) ite;\n+                }\n+                else\n+                {\n+                    throw new ConfigurationException(ite.getMessage(), ite);\n+                }\n             }\n         }\n     }\n@@ -145,4 +166,71 @@ private void initialisePrincipalDatabase(PrincipalDatabase principalDatabase, Co\n     {\n         return _databases;\n     }\n+\n+    public void initialiseManagement(Configuration config) throws ConfigurationException\n+    {\n+        try\n+        {\n+            AMQUserManagementMBean _mbean = new AMQUserManagementMBean();\n+\n+            String baseSecurity = \"security.jmx\";\n+            List<String> principalDBs = config.getList(baseSecurity + \".principal-database\");\n+\n+            if (principalDBs.size() == 0)\n+            {\n+                throw new ConfigurationException(\"No principal-database specified for jmx security(\" + baseSecurity + \".principal-database)\");\n+            }\n+\n+            String databaseName = principalDBs.get(0);\n+\n+            PrincipalDatabase database = getDatabases().get(databaseName);\n+\n+            if (database == null)\n+            {\n+                throw new ConfigurationException(\"Principal-database '\" + databaseName + \"' not found\");\n+            }\n+\n+            _mbean.setPrincipalDatabase(database);\n+\n+            List<String> jmxaccesslist = config.getList(baseSecurity + \".access\");\n+\n+            if (jmxaccesslist.size() == 0)\n+            {\n+                throw new ConfigurationException(\"No access control files specified for jmx security(\" + baseSecurity + \".access)\");\n+            }\n+\n+            String jmxaccesssFile = null;\n+            \n+            try\n+            {\n+                jmxaccesssFile = PropertyUtils.replaceProperties(jmxaccesslist.get(0));\n+            }\n+            catch (PropertyException e)\n+            {\n+                throw new ConfigurationException(\"Unable to parse access control filename '\" + jmxaccesssFile + \"'\");\n+            }\n+\n+            try\n+            {\n+                _mbean.setAccessFile(jmxaccesssFile);\n+            }\n+            catch (IOException e)\n+            {\n+                _logger.warn(\"Unable to load access file:\" + jmxaccesssFile);\n+            }\n+\n+            try\n+            {\n+                _mbean.register();\n+            }\n+            catch (AMQException e)\n+            {\n+                _logger.warn(\"Unable to register user management MBean\");\n+            }\n+        }\n+        catch (JMException e)\n+        {\n+            _logger.warn(\"User management disabled as unable to create MBean:\" + e);\n+        }\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/ConfigurationFilePrincipalDatabaseManager.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/424f4bc6d8b09552067ef63c4908de5519343ca9/broker/src/main/java/org/apache/qpid/server/security/auth/database/MD5PasswordFilePrincipalDatabase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/424f4bc6d8b09552067ef63c4908de5519343ca9/broker/src/main/java/org/apache/qpid/server/security/auth/database/MD5PasswordFilePrincipalDatabase.java", "sha": "c24a5f21e94f708e72f267ac5314555d802ccae9", "changes": 160, "status": "removed", "deletions": 160, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/MD5PasswordFilePrincipalDatabase.java?ref=424f4bc6d8b09552067ef63c4908de5519343ca9", "patch": "@@ -1,160 +0,0 @@\n-/*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.    \n- *\n- * \n- */\n-package org.apache.qpid.server.security.auth.database;\n-\n-import org.apache.log4j.Logger;\n-import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n-import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5Initialiser;\n-import org.apache.qpid.server.security.auth.sasl.plain.PlainInitialiser;\n-\n-import javax.security.auth.callback.PasswordCallback;\n-import javax.security.auth.login.AccountNotFoundException;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.BufferedReader;\n-import java.io.FileReader;\n-import java.util.regex.Pattern;\n-import java.util.Map;\n-import java.util.HashMap;\n-import java.security.Principal;\n-\n-/**\n- * Represents a user database where the account information is stored in a simple flat file.\n- *\n- * The file is expected to be in the form: username:password username1:password1 ... usernamen:passwordn\n- *\n- * where a carriage return separates each username/password pair. Passwords are assumed to be in plain text.\n- */\n-public class MD5PasswordFilePrincipalDatabase implements PrincipalDatabase\n-{\n-    private static final Logger _logger = Logger.getLogger(MD5PasswordFilePrincipalDatabase.class);\n-\n-    private File _passwordFile;\n-\n-    private Pattern _regexp = Pattern.compile(\":\");\n-\n-    private Map<String, AuthenticationProviderInitialiser> _saslServers;\n-\n-    public MD5PasswordFilePrincipalDatabase()\n-    {\n-        _saslServers = new HashMap<String, AuthenticationProviderInitialiser>();\n-\n-        /**\n-         *  Create Authenticators for MD5 Password file.\n-         */\n-\n-        //  Accept MD5 incomming and use plain comparison with the file\n-        PlainInitialiser cram = new PlainInitialiser();\n-        cram.initialise(this);\n-        // Accept Plain incomming and hash it for comparison to the file.\n-        CRAMMD5Initialiser plain = new CRAMMD5Initialiser();\n-        plain.initialise(this,CRAMMD5Initialiser.HashDirection.INCOMMING);        \n-\n-        _saslServers.put(plain.getMechanismName(), cram);\n-        _saslServers.put(cram.getMechanismName(), plain);\n-    }\n-\n-    public void setPasswordFile(String passwordFile) throws FileNotFoundException\n-    {\n-        File f = new File(passwordFile);\n-        _logger.info(\"PasswordFilePrincipalDatabase using file \" + f.getAbsolutePath());\n-        _passwordFile = f;\n-        if (!f.exists())\n-        {\n-            throw new FileNotFoundException(\"Cannot find password file \" + f);\n-        }\n-        if (!f.canRead())\n-        {\n-            throw new FileNotFoundException(\"Cannot read password file \" + f +\n-                                            \". Check permissions.\");\n-        }\n-    }\n-\n-    public void setPassword(Principal principal, PasswordCallback callback) throws IOException,\n-                                                                                   AccountNotFoundException\n-    {\n-        if (_passwordFile == null)\n-        {\n-            throw new AccountNotFoundException(\"Unable to locate principal since no password file was specified during initialisation\");\n-        }\n-        if (principal == null)\n-        {\n-            throw new IllegalArgumentException(\"principal must not be null\");\n-        }\n-        char[] pwd = lookupPassword(principal.getName());\n-        if (pwd != null)\n-        {\n-            callback.setPassword(pwd);\n-        }\n-        else\n-        {\n-            throw new AccountNotFoundException(\"No account found for principal \" + principal);\n-        }\n-    }\n-\n-    public Map<String, AuthenticationProviderInitialiser> getMechanisms()\n-    {\n-        return _saslServers;\n-    }\n-\n-    /**\n-     * Looks up the password for a specified user in the password file. Note this code is <b>not</b> secure since it\n-     * creates strings of passwords. It should be modified to create only char arrays which get nulled out.\n-     *\n-     * @param name\n-     *\n-     * @return\n-     *\n-     * @throws java.io.IOException\n-     */\n-    private char[] lookupPassword(String name) throws IOException\n-    {\n-        BufferedReader reader = null;\n-        try\n-        {\n-            reader = new BufferedReader(new FileReader(_passwordFile));\n-            String line;\n-\n-            while ((line = reader.readLine()) != null)\n-            {\n-                String[] result = _regexp.split(line);\n-                if (result == null || result.length < 2)\n-                {\n-                    continue;\n-                }\n-\n-                if (name.equals(result[0]))\n-                {\n-                    return result[1].toCharArray();\n-                }\n-            }\n-            return null;\n-        }\n-        finally\n-        {\n-            if (reader != null)\n-            {\n-                reader.close();\n-            }\n-        }\n-    }\n-}", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/MD5PasswordFilePrincipalDatabase.java"}, {"additions": 88, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java", "sha": "3f6794aaaf9ebf246557095b3fa9353dd2d33450", "changes": 92, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -21,8 +21,8 @@\n package org.apache.qpid.server.security.auth.database;\n \n import org.apache.log4j.Logger;\n-import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.security.auth.sasl.amqplain.AmqPlainInitialiser;\n import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5Initialiser;\n import org.apache.qpid.server.security.auth.sasl.plain.PlainInitialiser;\n@@ -34,9 +34,11 @@\n import java.io.IOException;\n import java.io.BufferedReader;\n import java.io.FileReader;\n+import java.io.UnsupportedEncodingException;\n import java.util.regex.Pattern;\n import java.util.Map;\n import java.util.HashMap;\n+import java.util.List;\n import java.security.Principal;\n \n /**\n@@ -119,21 +121,103 @@ public void setPassword(Principal principal, PasswordCallback callback) throws I\n         }\n     }\n \n+    public boolean verifyPassword(String principal, String password) throws AccountNotFoundException\n+    {\n+        try\n+        {\n+            char[] pwd = lookupPassword(principal);\n+\n+            return compareCharArray(pwd, convertPassword(password));\n+        }\n+        catch (IOException e)\n+        {\n+            return false;\n+        }\n+    }\n+\n+    private char[] convertPassword(String password) throws UnsupportedEncodingException\n+    {\n+        byte[] passwdBytes = password.getBytes(\"utf-8\");\n+\n+        char[] passwd = new char[passwdBytes.length];\n+\n+        int index = 0;\n+\n+        for (byte b : passwdBytes)\n+        {\n+            passwd[index++] = (char) b;\n+        }\n+\n+        return passwd;\n+    }\n+\n+    public boolean updatePassword(Principal principal, String password) throws AccountNotFoundException\n+    {\n+        return false; // updates denied\n+    }\n+\n+    public boolean createPrincipal(Principal principal, String password)\n+    {\n+        return false; // updates denied\n+    }\n+\n+    public boolean deletePrincipal(Principal principal) throws AccountNotFoundException\n+    {\n+        return false; // updates denied\n+    }\n+\n     public Map<String, AuthenticationProviderInitialiser> getMechanisms()\n     {\n         return _saslServers;\n     }\n \n+    public List<Principal> getUsers()\n+    {\n+        return null; //todo\n+    }\n+\n+    public Principal getUser(String username)\n+    {\n+        try\n+        {\n+            if (lookupPassword(username) != null)\n+            {\n+                return new UsernamePrincipal(username);\n+            }\n+        }\n+        catch (IOException e)\n+        {\n+            //fall through to null return\n+        }\n+        return null;\n+    }\n+\n+    private boolean compareCharArray(char[] a, char[] b)\n+    {\n+        boolean equal = false;\n+        if (a.length == b.length)\n+        {\n+            equal = true;\n+            int index = 0;\n+            while (equal && index < a.length)\n+            {\n+                equal = a[index] == b[index];\n+                index++;\n+            }\n+        }\n+        return equal;\n+    }\n+\n \n     /**\n      * Looks up the password for a specified user in the password file. Note this code is <b>not</b> secure since it\n      * creates strings of passwords. It should be modified to create only char arrays which get nulled out.\n      *\n-     * @param name\n+     * @param name the name of the principal to lookup\n      *\n-     * @return\n+     * @return char[] of the password\n      *\n-     * @throws java.io.IOException\n+     * @throws java.io.IOException whilst accessing the file\n      */\n     private char[] lookupPassword(String name) throws IOException\n     {", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabase.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordVhostFilePrincipalDatabase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordVhostFilePrincipalDatabase.java", "sha": "598f8f8b4c37c37fff08b1b31649859c28c7f310", "changes": 22, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordVhostFilePrincipalDatabase.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,26 +20,17 @@\n  */\n package org.apache.qpid.server.security.auth.database;\n \n-import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n-import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n-import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5Initialiser;\n-import org.apache.qpid.server.security.auth.sasl.plain.PlainInitialiser;\n import org.apache.qpid.server.security.access.AccessManager;\n import org.apache.qpid.server.security.access.AccessResult;\n import org.apache.qpid.server.security.access.Accessable;\n+import org.apache.qpid.server.security.access.AccessRights;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.log4j.Logger;\n \n-import javax.security.auth.callback.PasswordCallback;\n-import javax.security.auth.login.AccountNotFoundException;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.BufferedReader;\n import java.io.FileReader;\n-import java.util.regex.Pattern;\n-import java.util.Map;\n-import java.util.HashMap;\n import java.security.Principal;\n \n /**\n@@ -103,9 +94,15 @@\n \n     public AccessResult isAuthorized(Accessable accessObject, String username)\n     {\n+        return isAuthorized(accessObject, new UsernamePrincipal(username), AccessRights.Rights.READ);\n+    }\n+\n+    public AccessResult isAuthorized(Accessable accessObject, Principal user, AccessRights.Rights rights)\n+    {\n+\n         if (accessObject instanceof VirtualHost)\n         {\n-            String[] hosts = lookupVirtualHost(username);\n+            String[] hosts = lookupVirtualHost(user.getName());\n \n             if (hosts != null)\n             {\n@@ -126,4 +123,5 @@ public String getName()\n     {\n         return \"PlainPasswordVhostFile\";\n     }\n+\n }", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/PlainPasswordVhostFilePrincipalDatabase.java"}, {"additions": 50, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabase.java", "sha": "8073fcc3c6045a17024d6855f0c8e3d804f65e62", "changes": 50, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabase.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -23,8 +23,10 @@\n import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n \n import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n import java.security.Principal;\n import java.util.Map;\n+import java.util.List;\n \n import javax.security.auth.callback.PasswordCallback;\n import javax.security.auth.login.AccountNotFoundException;\n@@ -46,5 +48,53 @@\n     void setPassword(Principal principal, PasswordCallback callback)\n             throws IOException, AccountNotFoundException;\n \n+     /**\n+     * Used to verify that the presented Password is correct. Currently only used by Management Console\n+     * @param principal The principal to authenticate\n+     * @param password The password to check\n+     * @return true if password is correct\n+     * @throws AccountNotFoundException if the principal cannot be found\n+     */\n+    boolean verifyPassword(String principal, String password)\n+            throws AccountNotFoundException;\n+\n+    /**\n+     * Update(Change) the password for the given principal\n+     * @param principal Who's password is to be changed\n+     * @param password The new password to use\n+     * @return True if change was successful\n+     * @throws AccountNotFoundException If the given principal doesn't exist in the Database\n+     */\n+    boolean updatePassword(Principal principal, String password)\n+            throws AccountNotFoundException;\n+\n+    /**\n+     * Create a new principal in the database\n+     * @param principal The principal to create\n+     * @param password The password to set for the principal\n+     * @return True on a successful creation\n+     */\n+    boolean createPrincipal(Principal principal, String password);\n+\n+    /**\n+     * Delete a principal\n+     * @param principal The principal to delete\n+     * @return True on a successful creation\n+     * @throws AccountNotFoundException If the given principal doesn't exist in the Database\n+     */\n+    boolean deletePrincipal(Principal principal)\n+            throws AccountNotFoundException;\n+\n+    /**\n+     * Get the principal from the database with the given username\n+     * @param username of the principal to lookup\n+     * @return The Principal object for the given username or null if not found.\n+     */\n+    Principal getUser(String username);\n+\n+\n     public Map<String, AuthenticationProviderInitialiser> getMechanisms();\n+\n+\n+    List<Principal> getUsers();\n }", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabase.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabaseManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabaseManager.java", "sha": "2c553ae76ac507dfbd2ef3e83d753c4b5bc2bf57", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabaseManager.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -21,10 +21,14 @@\n package org.apache.qpid.server.security.auth.database;\n \n import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n \n import java.util.Map;\n \n public interface PrincipalDatabaseManager\n {\n     public Map<String, PrincipalDatabase> getDatabases();\n+\n+    public void initialiseManagement(Configuration config) throws ConfigurationException;\n }", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/PrincipalDatabaseManager.java"}, {"additions": 82, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java", "sha": "b1ac0e1f00dc18a22e8231c39866dca40f943af0", "changes": 82, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -21,6 +21,7 @@\n package org.apache.qpid.server.security.auth.database;\n \n import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n+import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5Initialiser;\n import org.apache.qpid.server.security.auth.sasl.plain.PlainInitialiser;\n \n@@ -29,8 +30,10 @@\n import java.util.Properties;\n import java.util.Map;\n import java.util.HashMap;\n+import java.util.List;\n import java.security.Principal;\n import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n \n public class PropertiesPrincipalDatabase implements PrincipalDatabase\n {\n@@ -76,8 +79,87 @@ public void setPassword(Principal principal, PasswordCallback callback) throws I\n         }\n     }\n \n+    public boolean verifyPassword(String principal, String password) throws AccountNotFoundException\n+    {\n+        char[] pwd = _users.getProperty(principal).toCharArray();\n+\n+        try\n+        {\n+            return compareCharArray(pwd, convertPassword(password));\n+        }\n+        catch (UnsupportedEncodingException e)\n+        {\n+            return false;\n+        }\n+    }\n+\n+    public boolean updatePassword(Principal principal, String password) throws AccountNotFoundException\n+    {\n+        return false; // updates denied\n+    }\n+\n+    public boolean createPrincipal(Principal principal, String password)\n+    {\n+        return false; // updates denied\n+    }\n+\n+    public boolean deletePrincipal(Principal principal) throws AccountNotFoundException\n+    {\n+        return false; // updates denied\n+    }\n+\n+    private boolean compareCharArray(char[] a, char[] b)\n+    {\n+        boolean equal = false;\n+        if (a.length == b.length)\n+        {\n+            equal = true;\n+            int index = 0;\n+            while (equal && index < a.length)\n+            {\n+                equal = a[index] == b[index];\n+                index++;\n+            }\n+        }\n+        return equal;\n+    }\n+\n+    private char[] convertPassword(String password) throws UnsupportedEncodingException\n+    {\n+        byte[] passwdBytes = password.getBytes(\"utf-8\");\n+\n+        char[] passwd = new char[passwdBytes.length];\n+\n+        int index = 0;\n+\n+        for (byte b : passwdBytes)\n+        {\n+            passwd[index++] = (char) b;\n+        }\n+\n+        return passwd;\n+    }\n+\n+\n     public Map<String, AuthenticationProviderInitialiser> getMechanisms()\n     {\n         return _saslServers;\n     }\n+\n+    public List<Principal> getUsers()\n+    {\n+        return null; //todo\n+    }\n+\n+    public Principal getUser(String username)\n+    {\n+        if (_users.getProperty(username) != null)\n+        {\n+            return new UsernamePrincipal(username);\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabase.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabaseManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabaseManager.java", "sha": "6b86a46bd274a75964c142d227662fc493619d50", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabaseManager.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,6 +20,8 @@\n  */\n package org.apache.qpid.server.security.auth.database;\n \n+import org.apache.commons.configuration.Configuration;\n+\n import java.util.Map;\n import java.util.Properties;\n import java.util.HashMap;\n@@ -38,4 +40,9 @@ public PropertiesPrincipalDatabaseManager(String name, Properties users)\n     {\n         return _databases;\n     }\n+\n+    public void initialiseManagement(Configuration config)\n+    {\n+        //todo\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/database/PropertiesPrincipalDatabaseManager.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java", "sha": "ce5e0cd7487d1325c137ed265963343d8e232bc6", "changes": 19, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -71,7 +71,7 @@ public PrincipalDatabaseAuthenticationManager(String name, Configuration hostCon\n         Map<String, Class<? extends SaslServerFactory>> providerMap = new TreeMap<String, Class<? extends SaslServerFactory>>();\n \n \n-        if (name == null)\n+        if (name == null || hostConfig == null)\n         {\n             initialiseAuthenticationMechanisms(providerMap, ApplicationRegistry.getInstance().getDatabaseManager().getDatabases());\n         }\n@@ -108,11 +108,15 @@ public PrincipalDatabaseAuthenticationManager(String name, Configuration hostCon\n \n         if (providerMap.size() > 0)\n         {\n-            Security.addProvider(new JCAProvider(providerMap));\n+            // Ensure we are used before the defaults\n+            if (Security.insertProviderAt(new JCAProvider(providerMap), 1) == -1)\n+            {\n+                _logger.warn(\"Unable to set order of providers.\");\n+            }\n         }\n         else\n         {\n-            _logger.warn(\"No SASL providers availble.\");\n+            _logger.warn(\"No additional SASL providers registered.\");\n         }\n \n     }\n@@ -148,21 +152,20 @@ private void initialiseAuthenticationMechanisms(Map<String, Class<? extends Sasl\n     {\n         if (database == null || database.getMechanisms().size() == 0)\n         {\n-            _logger.warn(\"\");\n+            _logger.warn(\"No Database or no mechanisms to initialise authentication\");\n             return;\n         }\n \n-        for (AuthenticationProviderInitialiser mechanism : database.getMechanisms().values())\n+        for (Map.Entry<String, AuthenticationProviderInitialiser> mechanism : database.getMechanisms().entrySet())\n         {\n-            initialiseAuthenticationMechanism(mechanism, providerMap);\n+            initialiseAuthenticationMechanism(mechanism.getKey(), mechanism.getValue(), providerMap);\n         }\n     }\n \n-    private void initialiseAuthenticationMechanism(AuthenticationProviderInitialiser initialiser,\n+    private void initialiseAuthenticationMechanism(String mechanism, AuthenticationProviderInitialiser initialiser,\n                                                    Map<String, Class<? extends SaslServerFactory>> providerMap)\n             throws Exception\n     {\n-        String mechanism = initialiser.getMechanismName();\n         if (_mechanisms == null)\n         {\n             _mechanisms = mechanism;", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/JCAProvider.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/JCAProvider.java", "sha": "fd4ad86055592e98f9627a674b4160b36cc25f69", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/JCAProvider.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -33,7 +33,7 @@ public JCAProvider(Map<String, Class<? extends SaslServerFactory>> providerMap)\n         super(\"AMQSASLProvider\", 1.0, \"A JCA provider that registers all \" +\n               \"AMQ SASL providers that want to be registered\");\n         register(providerMap);\n-        Security.addProvider(this);\n+        //Security.addProvider(this);\n     }\n \n     private void register(Map<String, Class<? extends SaslServerFactory>> providerMap)", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/sasl/JCAProvider.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePasswordInitialiser.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePasswordInitialiser.java", "sha": "dd0bd096c37c7e64ff08d9e7c263a3fe8c93c8ac", "changes": 15, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePasswordInitialiser.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -33,14 +33,16 @@\n import javax.security.sasl.AuthorizeCallback;\n \n import org.apache.commons.configuration.Configuration;\n+\n import org.apache.log4j.Logger;\n+\n import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n import org.apache.qpid.server.security.auth.sasl.AuthenticationProviderInitialiser;\n import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n \n public abstract class UsernamePasswordInitialiser implements AuthenticationProviderInitialiser\n {\n-    protected static final Logger _logger = Logger.getLogger(UsernamePasswordInitialiser.class);    \n+    protected static final Logger _logger = Logger.getLogger(UsernamePasswordInitialiser.class);\n \n     private ServerCallbackHandler _callbackHandler;\n \n@@ -72,7 +74,9 @@ else if (callback instanceof PasswordCallback)\n                     {\n                         // very annoyingly the callback handler does not throw anything more appropriate than\n                         // IOException\n-                        throw new IOException(\"Error looking up user \" + e);\n+                        IOException ioe = new IOException(\"Error looking up user \" + e);\n+                        ioe.initCause(e);\n+                        throw ioe;\n                     }\n                 }\n                 else if (callback instanceof AuthorizeCallback)\n@@ -88,7 +92,7 @@ else if (callback instanceof AuthorizeCallback)\n     }\n \n     public void initialise(String baseConfigPath, Configuration configuration,\n-                           Map<String, PrincipalDatabase> principalDatabases) throws Exception\n+        Map<String, PrincipalDatabase> principalDatabases) throws Exception\n     {\n         String principalDatabaseName = configuration.getString(baseConfigPath + \".principal-database\");\n         PrincipalDatabase db = principalDatabases.get(principalDatabaseName);\n@@ -102,6 +106,7 @@ public void initialise(PrincipalDatabase db)\n         {\n             throw new NullPointerException(\"Cannot initialise with a null Principal database.\");\n         }\n+\n         _callbackHandler = new ServerCallbackHandler(db);\n     }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePasswordInitialiser.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePrincipal.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePrincipal.java", "sha": "d7c83836909b83eae27da55661f65f1dc18d9f9d", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePrincipal.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -22,10 +22,7 @@\n \n import java.security.Principal;\n \n-/**\n- * A principal that is just a wrapper for a simple username.\n- *\n- */\n+/** A principal that is just a wrapper for a simple username. */\n public class UsernamePrincipal implements Principal\n {\n     private String _name;\n@@ -39,4 +36,9 @@ public String getName()\n     {\n         return _name;\n     }\n+\n+    public String toString()\n+    {\n+        return _name;\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/sasl/UsernamePrincipal.java"}, {"additions": 50, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedInitialiser.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedInitialiser.java", "sha": "97f9a4e91a1a1baec523fa0816e2f93a13895359", "changes": 50, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedInitialiser.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,50 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.security.auth.sasl.crammd5;\n+\n+import org.apache.qpid.server.security.auth.sasl.UsernamePasswordInitialiser;\n+import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+\n+import javax.security.sasl.SaslServerFactory;\n+import java.util.Map;\n+\n+public class CRAMMD5HashedInitialiser extends UsernamePasswordInitialiser\n+{\n+    public String getMechanismName()\n+    {\n+        return CRAMMD5HashedSaslServer.MECHANISM;\n+    }\n+\n+    public Class<? extends SaslServerFactory> getServerFactoryClassForJCARegistration()\n+    {\n+        return CRAMMD5HashedServerFactory.class;\n+    }\n+\n+    public void initialise(PrincipalDatabase passwordFile)\n+    {\n+        super.initialise(passwordFile);\n+    }\n+\n+    public Map<String, ?> getProperties()\n+    {\n+        return null;\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedInitialiser.java"}, {"additions": 105, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedSaslServer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedSaslServer.java", "sha": "f6cab084ea25411cc3ad362e56e8447391a6f235", "changes": 105, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedSaslServer.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,105 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.security.auth.sasl.crammd5;\n+\n+import javax.security.sasl.SaslServer;\n+import javax.security.sasl.SaslException;\n+import javax.security.sasl.Sasl;\n+import javax.security.sasl.SaslServerFactory;\n+import javax.security.auth.callback.CallbackHandler;\n+import java.util.Enumeration;\n+import java.util.Map;\n+\n+public class CRAMMD5HashedSaslServer implements SaslServer\n+{\n+    public static final String MECHANISM = \"CRAM-MD5-HASHED\";\n+\n+    private SaslServer _realServer;\n+\n+    public CRAMMD5HashedSaslServer(String mechanism, String protocol, String serverName, Map<String, ?> props,\n+                                   CallbackHandler cbh) throws SaslException\n+    {\n+        Enumeration factories = Sasl.getSaslServerFactories();\n+\n+        while (factories.hasMoreElements())\n+        {\n+            SaslServerFactory factory = (SaslServerFactory) factories.nextElement();\n+\n+            if (factory instanceof CRAMMD5HashedServerFactory)\n+            {\n+                continue;\n+            }\n+            \n+            String[] mechs = factory.getMechanismNames(props);\n+\n+            for (String mech : mechs)\n+            {\n+                if (mech.equals(\"CRAM-MD5\"))\n+                {\n+                    _realServer = factory.createSaslServer(\"CRAM-MD5\", protocol, serverName, props, cbh);\n+                    return;\n+                }\n+            }\n+        }\n+\n+        throw new RuntimeException(\"No default SaslServer found for mechanism:\" + \"CRAM-MD5\");\n+    }\n+\n+    public String getMechanismName()\n+    {\n+        return MECHANISM;\n+    }\n+\n+    public byte[] evaluateResponse(byte[] response) throws SaslException\n+    {\n+        return _realServer.evaluateResponse(response);\n+    }\n+\n+    public boolean isComplete()\n+    {\n+        return _realServer.isComplete();\n+    }\n+\n+    public String getAuthorizationID()\n+    {\n+        return _realServer.getAuthorizationID();\n+    }\n+\n+    public byte[] unwrap(byte[] incoming, int offset, int len) throws SaslException\n+    {\n+        return _realServer.unwrap(incoming, offset, len);\n+    }\n+\n+    public byte[] wrap(byte[] outgoing, int offset, int len) throws SaslException\n+    {\n+        return _realServer.wrap(outgoing, offset, len);\n+    }\n+\n+    public Object getNegotiatedProperty(String propName)\n+    {\n+        return _realServer.getNegotiatedProperty(propName);\n+    }\n+\n+    public void dispose() throws SaslException\n+    {\n+        _realServer.dispose();\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedSaslServer.java"}, {"additions": 61, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedServerFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedServerFactory.java", "sha": "5298b5cc6384124b54ba9fda1c96af5c8ffd8e3c", "changes": 61, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedServerFactory.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,61 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.server.security.auth.sasl.crammd5;\n+\n+import java.util.Map;\n+\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.sasl.Sasl;\n+import javax.security.sasl.SaslException;\n+import javax.security.sasl.SaslServer;\n+import javax.security.sasl.SaslServerFactory;\n+\n+public class CRAMMD5HashedServerFactory implements SaslServerFactory\n+{\n+    public SaslServer createSaslServer(String mechanism, String protocol, String serverName, Map<String, ?> props,\n+                                       CallbackHandler cbh) throws SaslException\n+    {\n+        if (mechanism.equals(CRAMMD5HashedSaslServer.MECHANISM))\n+        {\n+            return new CRAMMD5HashedSaslServer(mechanism, protocol, serverName, props, cbh);\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n+\n+    public String[] getMechanismNames(Map props)\n+    {\n+        if (props != null)\n+        {\n+            if (props.containsKey(Sasl.POLICY_NOPLAINTEXT) ||\n+                props.containsKey(Sasl.POLICY_NODICTIONARY) ||\n+                props.containsKey(Sasl.POLICY_NOACTIVE))\n+            {\n+                // returned array must be non null according to interface documentation\n+                return new String[0];\n+            }\n+        }\n+\n+        return new String[]{CRAMMD5HashedSaslServer.MECHANISM};\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/sasl/crammd5/CRAMMD5HashedServerFactory.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainSaslServerFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainSaslServerFactory.java", "sha": "f0dd9eeb6dcd27f03099924372b4c7f036f99bd7", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainSaslServerFactory.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -29,7 +29,7 @@\n import javax.security.sasl.SaslServerFactory;\n \n public class PlainSaslServerFactory implements SaslServerFactory\n-{    \n+{\n     public SaslServer createSaslServer(String mechanism, String protocol, String serverName, Map props,\n                                        CallbackHandler cbh) throws SaslException\n     {", "filename": "broker/src/main/java/org/apache/qpid/server/security/auth/sasl/plain/PlainSaslServerFactory.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/txn/CleanupMessageOperation.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/txn/CleanupMessageOperation.java", "sha": "609a85c22fadedebb79352b506209c118c245025", "changes": 13, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/txn/CleanupMessageOperation.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -56,18 +56,7 @@ public void undoPrepare()\n \n     public void commit(StoreContext context)\n     {\n-        //The routers reference can now be released.  This is done\n-        //here to ensure that it happens after the queues that\n-        //enqueue it have incremented their counts (which as a\n-        //memory only operation is done in the commit phase).\n-        try\n-        {\n-            _msg.decrementReference(context);\n-        }\n-        catch (AMQException e)\n-        {\n-            _log.error(\"On commiting transaction, failed to cleanup unused message: \" + e, e);\n-        }\n+\n         try\n         {\n             _msg.checkDeliveredToConsumer();", "filename": "broker/src/main/java/org/apache/qpid/server/txn/CleanupMessageOperation.java"}, {"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java", "sha": "6d776eec0f404e0aa71aeb84fc1a6de1d02b3f1f", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -89,6 +89,12 @@ public StoreContext getStoreContext()\n     public void rollback() throws AMQException\n     {\n         _txnBuffer.rollback(_storeContext);\n+        // Hack to deal with uncommitted non-transactional writes\n+        if(_messageStore.inTran(_storeContext))\n+        {\n+            _messageStore.abortTran(_storeContext);\n+            _inTran = false;\n+        }\n         _postCommitDeliveryList.clear();\n     }\n \n@@ -103,6 +109,7 @@ public void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) th\n //        message.incrementReference();\n         _postCommitDeliveryList.add(new DeliveryDetails(message, queue, deliverFirst));\n         _messageDelivered = true;\n+        _txnBuffer.enlist(new CleanupMessageOperation(message, _returnMessages));\n         /*_txnBuffer.enlist(new DeliverMessageOperation(message, queue));\n         if (_log.isDebugEnabled())\n         {\n@@ -111,7 +118,7 @@ public void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) th\n         }\n         message.incrementReference();\n         _messageDelivered = true;\n-        _txnBuffer.enlist(new CleanupMessageOperation(message, _returnMessages));\n+\n         */\n     }\n \n@@ -195,6 +202,7 @@ public void commit() throws AMQException\n         {\n             _txnBuffer.enlist(new StoreMessageOperation(_messageStore));\n         }\n+        //fixme fail commit here ... QPID-440\n         try\n         {\n             _txnBuffer.commit(_storeContext);", "filename": "broker/src/main/java/org/apache/qpid/server/txn/LocalTransactionalContext.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/txn/TxnBuffer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/txn/TxnBuffer.java", "sha": "405c2335524354118049f6caa3b3902a9c3cd705", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/txn/TxnBuffer.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -41,7 +41,7 @@ public void commit(StoreContext context) throws AMQException\n     {\n         if (_log.isDebugEnabled())\n         {\n-            _log.debug(\"Committing \" + _ops.size() + \" ops to commit.:\" + _ops.toArray());\n+            _log.debug(\"Committing \" + _ops.size() + \" ops to commit.:\" + _ops);\n         }\n \n         if (prepare(context))", "filename": "broker/src/main/java/org/apache/qpid/server/txn/TxnBuffer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java", "sha": "b5c59dbbb7592f91ee6159d6297919d7170706f4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -181,7 +181,7 @@ private void initialiseMessageStore(Configuration config) throws Exception\n         catch (Exception e)\r\n         {\r\n             _logger.error(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\");\r\n-            throw new IllegalArgumentException(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\");\r\n+            throw new IllegalArgumentException(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\", e);\r\n         }\r\n         Configurator.configure(instance);\r\n \r", "filename": "broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java", "sha": "0c1da5c278f766189cab5d893b3ba12f76749363", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -106,6 +106,8 @@ public void testMessageSizeAlert() throws Exception\n     /**\n      * Tests if Queue Depth alert is thrown when queue depth reaches the threshold value\n      *\n+     * Based on FT402 subbmitted by client\n+     *\n      * @throws Exception\n      */\n     public void testQueueDepthAlertNoSubscriber() throws Exception", "filename": "broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java"}, {"additions": 32, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageDispatcher.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageDispatcher.java", "sha": "6a7626c51dacd08955f5d693e00fa1828744193d", "changes": 61, "status": "modified", "deletions": 29, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageDispatcher.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,38 +1,41 @@\n /*\n+ *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n  * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n+ *\n  */\n package org.apache.qpid.example.publisher;\n \n-import org.apache.log4j.Logger;\n-\n import java.io.File;\n \n+import javax.jms.JMSException;\n+\n+import org.apache.log4j.Logger;\n+\n import org.apache.qpid.example.shared.FileUtils;\n import org.apache.qpid.example.shared.Statics;\n \n-import javax.jms.JMSException;\n-\n /**\n  * Class that sends message files to the Publisher to distribute\n  * using files as input\n  * Must set properties for host in properties file or uses in vm broker\n  */\n-public class FileMessageDispatcher {\n+public class FileMessageDispatcher\n+{\n \n     protected static final Logger _logger = Logger.getLogger(FileMessageDispatcher.class);\n \n@@ -48,30 +51,30 @@\n     public static void main(String[] args)\n     {\n \n-        //Check command line args ok - must provide a path or file for us to dispatch\n+        // Check command line args ok - must provide a path or file for us to dispatch\n         if (args.length == 0)\n         {\n-            System.err.println(\"Usage: FileMessageDispatcher <filesToDispatch>\" + \"\");\n+            System.out.println(\"Usage: FileMessageDispatcher <filesToDispatch>\" + \"\");\n         }\n         else\n         {\n             try\n             {\n-                //publish message(s) from file(s) to configured queue\n+                // publish message(s) from file(s) to configured queue\n                 publish(args[0]);\n \n-                //Move payload file(s) to archive location as no error\n+                // Move payload file(s) to archive location as no error\n                 FileUtils.moveFileToNewDir(args[0], System.getProperties().getProperty(Statics.ARCHIVE_PATH));\n             }\n-            catch(Exception e)\n+            catch (Exception e)\n             {\n-                //log error and exit\n+                // log error and exit\n                 _logger.error(\"Error trying to dispatch message: \" + e);\n                 System.exit(1);\n             }\n             finally\n             {\n-                //clean up before exiting\n+                // clean up before exiting\n                 if (getPublisher() != null)\n                 {\n                     getPublisher().cleanup();\n@@ -98,33 +101,33 @@ public static void publish(String path) throws JMSException, MessageFactoryExcep\n         File tempFile = new File(path);\n         if (tempFile.isDirectory())\n         {\n-            //while more files in dir publish them\n+            // while more files in dir publish them\n             File[] files = tempFile.listFiles();\n \n-            if (files == null || files.length == 0)\n+            if ((files == null) || (files.length == 0))\n             {\n                 _logger.info(\"FileMessageDispatcher - No files to publish in input directory: \" + tempFile);\n             }\n             else\n             {\n                 for (File file : files)\n                 {\n-                    //Create message factory passing in payload path\n+                    // Create message factory passing in payload path\n                     FileMessageFactory factory = new FileMessageFactory(getPublisher().getSession(), file.toString());\n \n-                    //Send the message generated from the payload using the _publisher\n+                    // Send the message generated from the payload using the _publisher\n                     getPublisher().sendMessage(factory.createEventMessage());\n \n                 }\n             }\n         }\n         else\n         {\n-            //handle a single file\n-            //Create message factory passing in payload path\n-            FileMessageFactory factory = new FileMessageFactory(getPublisher().getSession(),tempFile.toString());\n+            // handle a single file\n+            // Create message factory passing in payload path\n+            FileMessageFactory factory = new FileMessageFactory(getPublisher().getSession(), tempFile.toString());\n \n-            //Send the message generated from the payload using the _publisher\n+            // Send the message generated from the payload using the _publisher\n             getPublisher().sendMessage(factory.createEventMessage());\n         }\n     }\n@@ -145,15 +148,15 @@ public static void cleanup()\n      */\n     private static Publisher getPublisher()\n     {\n-       if (_publisher != null)\n-       {\n-           return _publisher;\n-       }\n+        if (_publisher != null)\n+        {\n+            return _publisher;\n+        }\n \n-       //Create a _publisher\n-       _publisher = new Publisher();\n+        // Create a _publisher\n+        _publisher = new Publisher();\n \n-       return _publisher;\n+        return _publisher;\n     }\n \n }", "filename": "client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageDispatcher.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageFactory.java", "sha": "f3b21e3c645a23f63ee35a8a6400f8414bc0e62e", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageFactory.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -47,7 +47,9 @@ public FileMessageFactory(Session session, String filename) throws MessageFactor\n         }\n         catch (IOException e)\n         {\n-            throw new MessageFactoryException(e.toString());\n+            MessageFactoryException mfe = new MessageFactoryException(e.toString());\n+            mfe.initCause(e);\n+            throw mfe;\n         }\n     }\n ", "filename": "client/example/src/main/java/org/apache/qpid/example/publisher/FileMessageFactory.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/example/src/main/java/org/apache/qpid/example/shared/InitialContextHelper.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/example/src/main/java/org/apache/qpid/example/shared/InitialContextHelper.java", "sha": "98a2c0d49781d9503b66ed6aa28365f62b72ecd4", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/example/src/main/java/org/apache/qpid/example/shared/InitialContextHelper.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -59,11 +59,11 @@ public InitialContextHelper(String propertiesName) throws ContextException\n         }\n         catch (IOException e)\n         {\n-            throw new ContextException(e.toString());\n+            throw new ContextException(e.toString(), e);\n         }\n         catch (NamingException n)\n         {\n-            throw new ContextException(n.toString());\n+            throw new ContextException(n.toString(), n);\n         }\n     }\n ", "filename": "client/example/src/main/java/org/apache/qpid/example/shared/InitialContextHelper.java"}, {"additions": 180, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/AMQConnection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/AMQConnection.java", "sha": "0e3d99eeba177607d84375ce56d89135916e8836", "changes": 355, "status": "modified", "deletions": 175, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQConnection.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -20,6 +20,29 @@\n  */\n package org.apache.qpid.client;\n \n+import java.io.IOException;\n+import java.net.ConnectException;\n+import java.nio.channels.UnresolvedAddressException;\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.jms.*;\n+import javax.jms.IllegalStateException;\n+import javax.naming.NamingException;\n+import javax.naming.Reference;\n+import javax.naming.Referenceable;\n+import javax.naming.StringRefAddr;\n+\n+import org.apache.log4j.Logger;\n+\n import org.apache.qpid.AMQConnectionFailureException;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.AMQUndeliveredException;\n@@ -44,28 +67,6 @@\n import org.apache.qpid.jms.FailoverPolicy;\n import org.apache.qpid.url.URLSyntaxException;\n \n-import org.apache.log4j.Logger;\n-\n-import javax.jms.*;\n-import javax.jms.IllegalStateException;\n-import javax.naming.NamingException;\n-import javax.naming.Reference;\n-import javax.naming.Referenceable;\n-import javax.naming.StringRefAddr;\n-import java.io.IOException;\n-import java.net.ConnectException;\n-import java.nio.channels.UnresolvedAddressException;\n-import java.text.MessageFormat;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.TimeUnit;\n-\n public class AMQConnection extends Closeable implements Connection, QueueConnection, TopicConnection, Referenceable\n {\n     private static final Logger _logger = Logger.getLogger(AMQConnection.class);\n@@ -95,7 +96,7 @@\n     private AMQProtocolHandler _protocolHandler;\n \n     /** Maps from session id (Integer) to AMQSession instance */\n-    private final Map _sessions = new LinkedHashMap(); //fixme this is map is replicated in amqprotocolsession as _channelId2SessionMap    \n+    private final Map _sessions = new LinkedHashMap(); // fixme this is map is replicated in amqprotocolsession as _channelId2SessionMap\n \n     private String _clientName;\n \n@@ -125,15 +126,14 @@\n \n     /*\n      * _Connected should be refactored with a suitable wait object.\n-    */\n+     */\n     private boolean _connected;\n \n     /*\n      * The last error code that occured on the connection. Used to return the correct exception to the client\n-    */\n+     */\n     private AMQException _lastAMQException = null;\n \n-\n     /*\n      * The connection meta data\n      */\n@@ -149,6 +149,7 @@\n \n     /** Thread Pool for executing connection level processes. Such as returning bounced messages. */\n     private final ExecutorService _taskPool = Executors.newCachedThreadPool();\n+    private static final long DEFAULT_TIMEOUT = 1000 * 30;\n \n     /**\n      * @param broker      brokerdetails\n@@ -160,13 +161,13 @@\n      * @throws AMQException\n      * @throws URLSyntaxException\n      */\n-    public AMQConnection(String broker, String username, String password,\n-                         String clientName, String virtualHost) throws AMQException, URLSyntaxException\n+    public AMQConnection(String broker, String username, String password, String clientName, String virtualHost)\n+        throws AMQException, URLSyntaxException\n     {\n-        this(new AMQConnectionURL(ConnectionURL.AMQ_PROTOCOL + \"://\" +\n-                                  username + \":\" + password + \"@\" +\n-                                  (clientName == null ? \"\" : clientName) + \"/\" +\n-                                  virtualHost + \"?brokerlist='\" + AMQBrokerDetails.checkTransport(broker) + \"'\"), null);\n+        this(new AMQConnectionURL(\n+                ConnectionURL.AMQ_PROTOCOL + \"://\" + username + \":\" + password + \"@\"\n+                + ((clientName == null) ? \"\" : clientName) + \"/\" + virtualHost + \"?brokerlist='\"\n+                + AMQBrokerDetails.checkTransport(broker) + \"'\"), null);\n     }\n \n     /**\n@@ -179,44 +180,38 @@ public AMQConnection(String broker, String username, String password,\n      * @throws AMQException\n      * @throws URLSyntaxException\n      */\n-    public AMQConnection(String broker, String username, String password,\n-                         String clientName, String virtualHost, SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n+    public AMQConnection(String broker, String username, String password, String clientName, String virtualHost,\n+        SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n     {\n-        this(new AMQConnectionURL(ConnectionURL.AMQ_PROTOCOL + \"://\" +\n-                                  username + \":\" + password + \"@\" +\n-                                  (clientName == null ? \"\" : clientName) + \"/\" +\n-                                  virtualHost + \"?brokerlist='\" + AMQBrokerDetails.checkTransport(broker) + \"'\"), sslConfig);\n+        this(new AMQConnectionURL(\n+                ConnectionURL.AMQ_PROTOCOL + \"://\" + username + \":\" + password + \"@\"\n+                + ((clientName == null) ? \"\" : clientName) + \"/\" + virtualHost + \"?brokerlist='\"\n+                + AMQBrokerDetails.checkTransport(broker) + \"'\"), sslConfig);\n     }\n \n-\n-    public AMQConnection(String host, int port, String username, String password,\n-                         String clientName, String virtualHost) throws AMQException, URLSyntaxException\n+    public AMQConnection(String host, int port, String username, String password, String clientName, String virtualHost)\n+        throws AMQException, URLSyntaxException\n     {\n         this(host, port, false, username, password, clientName, virtualHost, null);\n     }\n \n-    public AMQConnection(String host, int port, String username, String password,\n-                         String clientName, String virtualHost, SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n+    public AMQConnection(String host, int port, String username, String password, String clientName, String virtualHost,\n+        SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n     {\n         this(host, port, false, username, password, clientName, virtualHost, sslConfig);\n     }\n \n-\n-    public AMQConnection(String host, int port, boolean useSSL, String username, String password,\n-                         String clientName, String virtualHost, SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n+    public AMQConnection(String host, int port, boolean useSSL, String username, String password, String clientName,\n+        String virtualHost, SSLConfiguration sslConfig) throws AMQException, URLSyntaxException\n     {\n-        this(new AMQConnectionURL(useSSL ?\n-                                  ConnectionURL.AMQ_PROTOCOL + \"://\" +\n-                                  username + \":\" + password + \"@\" +\n-                                  (clientName == null ? \"\" : clientName) +\n-                                  virtualHost + \"?brokerlist='tcp://\" + host + \":\" + port + \"'\"\n-                                  + \",\" + ConnectionURL.OPTIONS_SSL + \"='true'\" :\n-                                                                                ConnectionURL.AMQ_PROTOCOL + \"://\" +\n-                                                                                username + \":\" + password + \"@\" +\n-                                                                                (clientName == null ? \"\" : clientName) +\n-                                                                                virtualHost + \"?brokerlist='tcp://\" + host + \":\" + port + \"'\"\n-                                                                                + \",\" + ConnectionURL.OPTIONS_SSL + \"='false'\"\n-        ), sslConfig);\n+        this(new AMQConnectionURL(\n+                useSSL\n+                ? (ConnectionURL.AMQ_PROTOCOL + \"://\" + username + \":\" + password + \"@\"\n+                    + ((clientName == null) ? \"\" : clientName) + virtualHost + \"?brokerlist='tcp://\" + host + \":\" + port\n+                    + \"'\" + \",\" + ConnectionURL.OPTIONS_SSL + \"='true'\")\n+                : (ConnectionURL.AMQ_PROTOCOL + \"://\" + username + \":\" + password + \"@\"\n+                    + ((clientName == null) ? \"\" : clientName) + virtualHost + \"?brokerlist='tcp://\" + host + \":\" + port\n+                    + \"'\" + \",\" + ConnectionURL.OPTIONS_SSL + \"='false'\")), sslConfig);\n     }\n \n     public AMQConnection(String connection) throws AMQException, URLSyntaxException\n@@ -229,13 +224,13 @@ public AMQConnection(String connection, SSLConfiguration sslConfig) throws AMQEx\n         this(new AMQConnectionURL(connection), sslConfig);\n     }\n \n-\n     public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) throws AMQException\n     {\n         if (_logger.isInfoEnabled())\n         {\n             _logger.info(\"Connection:\" + connectionURL);\n         }\n+\n         _sslConfiguration = sslConfig;\n         if (connectionURL == null)\n         {\n@@ -249,7 +244,6 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n         _password = connectionURL.getPassword();\n         setVirtualHost(connectionURL.getVirtualHost());\n \n-\n         if (connectionURL.getDefaultQueueExchangeName() != null)\n         {\n             _defaultQueueExchangeName = connectionURL.getDefaultQueueExchangeName();\n@@ -270,15 +264,13 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n             _temporaryTopicExchangeName = connectionURL.getTemporaryTopicExchangeName();\n         }\n \n-\n         _failoverPolicy = new FailoverPolicy(connectionURL);\n \n         _protocolHandler = new AMQProtocolHandler(this);\n \n         // We are not currently connected\n         _connected = false;\n \n-\n         Exception lastException = new Exception();\n         lastException.initCause(new ConnectException());\n \n@@ -296,7 +288,8 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n \n                 if (_logger.isInfoEnabled())\n                 {\n-                    _logger.info(\"Unable to connect to broker at \" + _failoverPolicy.getCurrentBrokerDetails(), e.getCause());\n+                    _logger.info(\"Unable to connect to broker at \" + _failoverPolicy.getCurrentBrokerDetails(),\n+                        e.getCause());\n                 }\n             }\n         }\n@@ -322,7 +315,7 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n                 }\n             }\n \n-            if (message == null || message.equals(\"\"))\n+            if ((message == null) || message.equals(\"\"))\n             {\n                 message = \"Unable to Connect\";\n             }\n@@ -335,11 +328,13 @@ public AMQConnection(ConnectionURL connectionURL, SSLConfiguration sslConfig) th\n                 {\n                     e = new AMQUnresolvedAddressException(message, _failoverPolicy.getCurrentBrokerDetails().toString());\n                 }\n+\n                 e.initCause(lastException);\n             }\n \n             throw e;\n         }\n+\n         _connectionMetaData = new QpidConnectionMetaData(this);\n     }\n \n@@ -369,6 +364,7 @@ private void setVirtualHost(String virtualHost)\n         {\n             virtualHost = virtualHost.substring(1);\n         }\n+\n         _virtualHost = virtualHost;\n     }\n \n@@ -382,7 +378,7 @@ private void makeBrokerConnection(BrokerDetails brokerDetail) throws IOException\n             _protocolHandler.attainState(AMQState.CONNECTION_OPEN);\n             _failoverPolicy.attainedConnection();\n \n-            //Again this should be changed to a suitable notify\n+            // Again this should be changed to a suitable notify\n             _connected = true;\n         }\n         catch (AMQException e)\n@@ -401,6 +397,7 @@ public boolean attemptReconnection(String host, int port)\n         try\n         {\n             makeBrokerConnection(bd);\n+\n             return true;\n         }\n         catch (Exception e)\n@@ -409,8 +406,10 @@ public boolean attemptReconnection(String host, int port)\n             {\n                 _logger.info(\"Unable to connect to broker at \" + bd);\n             }\n+\n             attemptReconnection();\n         }\n+\n         return false;\n     }\n \n@@ -421,6 +420,7 @@ public boolean attemptReconnection()\n             try\n             {\n                 makeBrokerConnection(_failoverPolicy.getNextBrokerDetails());\n+\n                 return true;\n             }\n             catch (Exception e)\n@@ -436,13 +436,14 @@ public boolean attemptReconnection()\n                 {\n                     if (_logger.isInfoEnabled())\n                     {\n-                        _logger.info(e.getMessage() + \":Unable to connect to broker at \" + _failoverPolicy.getCurrentBrokerDetails());\n+                        _logger.info(e.getMessage() + \":Unable to connect to broker at \"\n+                            + _failoverPolicy.getCurrentBrokerDetails());\n                     }\n                 }\n             }\n         }\n \n-        //connection unsuccessful\n+        // connection unsuccessful\n         return false;\n     }\n \n@@ -474,14 +475,14 @@ public boolean failoverAllowed()\n         return createSession(transacted, acknowledgeMode, AMQSession.DEFAULT_PREFETCH_HIGH_MARK);\n     }\n \n-    public org.apache.qpid.jms.Session createSession(final boolean transacted, final int acknowledgeMode,\n-                                                     final int prefetch) throws JMSException\n+    public org.apache.qpid.jms.Session createSession(final boolean transacted, final int acknowledgeMode, final int prefetch)\n+        throws JMSException\n     {\n         return createSession(transacted, acknowledgeMode, prefetch, prefetch);\n     }\n \n     public org.apache.qpid.jms.Session createSession(final boolean transacted, final int acknowledgeMode,\n-                                                     final int prefetchHigh, final int prefetchLow) throws JMSException\n+        final int prefetchHigh, final int prefetchLow) throws JMSException\n     {\n         checkNotClosed();\n         if (channelLimitReached())\n@@ -491,85 +492,81 @@ public boolean failoverAllowed()\n         else\n         {\n             return (org.apache.qpid.jms.Session) new FailoverSupport()\n-            {\n-                public Object operation() throws JMSException\n-                {\n-                    int channelId = _idFactory.incrementAndGet();\n-\n-                    if (_logger.isDebugEnabled())\n-                    {\n-                        _logger.debug(\"Write channel open frame for channel id \" + channelId);\n-                    }\n-\n-                    // We must create the session and register it before actually sending the frame to the server to\n-                    // open it, so that there is no window where we could receive data on the channel and not be set\n-                    // up to handle it appropriately.\n-                    AMQSession session = new AMQSession(AMQConnection.this, channelId, transacted, acknowledgeMode,\n-                                                        prefetchHigh, prefetchLow);\n-                    _protocolHandler.addSessionByChannel(channelId, session);\n-                    registerSession(channelId, session);\n-\n-                    boolean success = false;\n-                    try\n-                    {\n-                        createChannelOverWire(channelId, prefetchHigh, prefetchLow, transacted);\n-                        success = true;\n-                    }\n-                    catch (AMQException e)\n-                    {\n-                        JMSException jmse = new JMSException(\"Error creating session: \" + e);\n-                        jmse.setLinkedException(e);\n-                        throw jmse;\n-                    }\n-                    finally\n-                    {\n-                        if (!success)\n-                        {\n-                            _protocolHandler.removeSessionByChannel(channelId);\n-                            deregisterSession(channelId);\n-                        }\n-                    }\n-\n-                    if (_started)\n                     {\n-                        try\n-                        {\n-                            session.start();\n-                        }\n-                        catch (AMQException e)\n+                        public Object operation() throws JMSException\n                         {\n-                            throw new JMSAMQException(e);\n+                            int channelId = _idFactory.incrementAndGet();\n+\n+                            if (_logger.isDebugEnabled())\n+                            {\n+                                _logger.debug(\"Write channel open frame for channel id \" + channelId);\n+                            }\n+\n+                            // We must create the session and register it before actually sending the frame to the server to\n+                            // open it, so that there is no window where we could receive data on the channel and not be set\n+                            // up to handle it appropriately.\n+                            AMQSession session =\n+                                new AMQSession(AMQConnection.this, channelId, transacted, acknowledgeMode, prefetchHigh,\n+                                    prefetchLow);\n+                            _protocolHandler.addSessionByChannel(channelId, session);\n+                            registerSession(channelId, session);\n+\n+                            boolean success = false;\n+                            try\n+                            {\n+                                createChannelOverWire(channelId, prefetchHigh, prefetchLow, transacted);\n+                                success = true;\n+                            }\n+                            catch (AMQException e)\n+                            {\n+                                JMSException jmse = new JMSException(\"Error creating session: \" + e);\n+                                jmse.setLinkedException(e);\n+                                throw jmse;\n+                            }\n+                            finally\n+                            {\n+                                if (!success)\n+                                {\n+                                    _protocolHandler.removeSessionByChannel(channelId);\n+                                    deregisterSession(channelId);\n+                                }\n+                            }\n+\n+                            if (_started)\n+                            {\n+                                try\n+                                {\n+                                    session.start();\n+                                }\n+                                catch (AMQException e)\n+                                {\n+                                    throw new JMSAMQException(e);\n+                                }\n+                            }\n+\n+                            return session;\n                         }\n-                    }\n-                    return session;\n-                }\n-            }.execute(this);\n+                    }.execute(this);\n         }\n     }\n \n     private void createChannelOverWire(int channelId, int prefetchHigh, int prefetchLow, boolean transacted)\n-            throws AMQException\n+        throws AMQException\n     {\n \n         // TODO: Be aware of possible changes to parameter order as versions change.\n \n-        _protocolHandler.syncWrite(\n-                ChannelOpenBody.createAMQFrame(channelId,\n-                                               _protocolHandler.getProtocolMajorVersion(),\n-                                               _protocolHandler.getProtocolMinorVersion(),\n-                                               null),    // outOfBand\n-                                                         ChannelOpenOkBody.class);\n-\n-        //todo send low water mark when protocol allows.\n-        //todo Be aware of possible changes to parameter order as versions change.\n-        _protocolHandler.syncWrite(\n-                BasicQosBody.createAMQFrame(channelId,\n-                                            _protocolHandler.getProtocolMajorVersion(),\n-                                            _protocolHandler.getProtocolMinorVersion(),\n-                                            false,    // global\n-                                            prefetchHigh,    // prefetchCount\n-                                            0),    // prefetchSize\n-                                                   BasicQosOkBody.class);\n+        _protocolHandler.syncWrite(ChannelOpenBody.createAMQFrame(channelId, _protocolHandler.getProtocolMajorVersion(),\n+                _protocolHandler.getProtocolMinorVersion(), null), // outOfBand\n+            ChannelOpenOkBody.class);\n+\n+        // todo send low water mark when protocol allows.\n+        // todo Be aware of possible changes to parameter order as versions change.\n+        _protocolHandler.syncWrite(BasicQosBody.createAMQFrame(channelId, _protocolHandler.getProtocolMajorVersion(),\n+                _protocolHandler.getProtocolMinorVersion(), false, // global\n+                prefetchHigh, // prefetchCount\n+                0), // prefetchSize\n+            BasicQosOkBody.class);\n \n         if (transacted)\n         {\n@@ -579,10 +576,8 @@ private void createChannelOverWire(int channelId, int prefetchHigh, int prefetch\n             }\n \n             // TODO: Be aware of possible changes to parameter order as versions change.\n-            _protocolHandler.syncWrite(TxSelectBody.createAMQFrame(channelId,\n-                                                                   _protocolHandler.getProtocolMajorVersion(),\n-                                                                   _protocolHandler.getProtocolMinorVersion()),\n-                                       TxSelectOkBody.class);\n+            _protocolHandler.syncWrite(TxSelectBody.createAMQFrame(channelId, _protocolHandler.getProtocolMajorVersion(),\n+                    _protocolHandler.getProtocolMinorVersion()), TxSelectOkBody.class);\n         }\n     }\n \n@@ -596,11 +591,10 @@ private void reopenChannel(int channelId, int prefetchHigh, int prefetchLow, boo\n         {\n             _protocolHandler.removeSessionByChannel(channelId);\n             deregisterSession(channelId);\n-            throw new AMQException(\"Error reopening channel \" + channelId + \" after failover: \" + e);\n+            throw new AMQException(\"Error reopening channel \" + channelId + \" after failover: \" + e, e);\n         }\n     }\n \n-\n     public void setFailoverPolicy(FailoverPolicy policy)\n     {\n         _failoverPolicy = policy;\n@@ -645,12 +639,13 @@ public TopicSession createTopicSession(boolean transacted, int acknowledgeMode)\n \n     private boolean channelLimitReached()\n     {\n-        return _maximumChannelCount != 0 && _sessions.size() == _maximumChannelCount;\n+        return (_maximumChannelCount != 0) && (_sessions.size() == _maximumChannelCount);\n     }\n \n     public String getClientID() throws JMSException\n     {\n         checkNotClosed();\n+\n         return _clientName;\n     }\n \n@@ -666,13 +661,15 @@ public void setClientID(String clientID) throws JMSException\n     public ConnectionMetaData getMetaData() throws JMSException\n     {\n         checkNotClosed();\n+\n         return _connectionMetaData;\n \n     }\n \n     public ExceptionListener getExceptionListener() throws JMSException\n     {\n         checkNotClosed();\n+\n         return _exceptionListener;\n     }\n \n@@ -706,6 +703,7 @@ public void start() throws JMSException\n                     throw new JMSAMQException(e);\n                 }\n             }\n+\n             _started = true;\n         }\n     }\n@@ -726,13 +724,14 @@ public void stop() throws JMSException\n                     throw new JMSAMQException(e);\n                 }\n             }\n+\n             _started = false;\n         }\n     }\n \n     public void close() throws JMSException\n     {\n-        close(-1);\n+        close(DEFAULT_TIMEOUT);\n     }\n \n     public void close(long timeout) throws JMSException\n@@ -752,7 +751,7 @@ public void close(long timeout) throws JMSException\n                     {\n                         try\n                         {\n-                            //adjust timeout\n+                            // adjust timeout\n                             long taskPoolTimeout = adjustTimeout(timeout, startCloseTime);\n \n                             _taskPool.awaitTermination(taskPoolTimeout, TimeUnit.MILLISECONDS);\n@@ -763,15 +762,17 @@ public void close(long timeout) throws JMSException\n                         }\n                     }\n \n-                    //adjust timeout\n+                    // adjust timeout\n                     timeout = adjustTimeout(timeout, startCloseTime);\n \n                     _protocolHandler.closeConnection(timeout);\n \n                 }\n                 catch (AMQException e)\n                 {\n-                    throw new JMSException(\"Error closing connection: \" + e);\n+                    JMSException jmse = new JMSException(\"Error closing connection: \" + e);\n+                    jmse.setLinkedException(e);\n+                    throw jmse;\n                 }\n             }\n         }\n@@ -785,6 +786,7 @@ private long adjustTimeout(long timeout, long startTime)\n         {\n             timeout = 0;\n         }\n+\n         return timeout;\n     }\n \n@@ -803,6 +805,7 @@ private void markAllSessionsClosed()\n \n             session.markClosed();\n         }\n+\n         _sessions.clear();\n     }\n \n@@ -842,6 +845,7 @@ private void closeAllSessions(Throwable cause, long timeout, long starttime) thr\n                 }\n             }\n         }\n+\n         _sessions.clear();\n         if (sessionException != null)\n         {\n@@ -850,42 +854,42 @@ private void closeAllSessions(Throwable cause, long timeout, long starttime) thr\n     }\n \n     public ConnectionConsumer createConnectionConsumer(Destination destination, String messageSelector,\n-                                                       ServerSessionPool sessionPool,\n-                                                       int maxMessages) throws JMSException\n+        ServerSessionPool sessionPool, int maxMessages) throws JMSException\n     {\n         checkNotClosed();\n+\n         return null;\n     }\n \n-    public ConnectionConsumer createConnectionConsumer(Queue queue, String messageSelector,\n-                                                       ServerSessionPool sessionPool,\n-                                                       int maxMessages) throws JMSException\n+    public ConnectionConsumer createConnectionConsumer(Queue queue, String messageSelector, ServerSessionPool sessionPool,\n+        int maxMessages) throws JMSException\n     {\n         checkNotClosed();\n+\n         return null;\n     }\n \n-    public ConnectionConsumer createConnectionConsumer(Topic topic, String messageSelector,\n-                                                       ServerSessionPool sessionPool,\n-                                                       int maxMessages) throws JMSException\n+    public ConnectionConsumer createConnectionConsumer(Topic topic, String messageSelector, ServerSessionPool sessionPool,\n+        int maxMessages) throws JMSException\n     {\n         checkNotClosed();\n+\n         return null;\n     }\n \n-    public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String subscriptionName,\n-                                                              String messageSelector, ServerSessionPool sessionPool,\n-                                                              int maxMessages)\n-            throws JMSException\n+    public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String subscriptionName, String messageSelector,\n+        ServerSessionPool sessionPool, int maxMessages) throws JMSException\n     {\n         // TODO Auto-generated method stub\n         checkNotClosed();\n+\n         return null;\n     }\n \n     public long getMaximumChannelCount() throws JMSException\n     {\n         checkNotClosed();\n+\n         return _maximumChannelCount;\n     }\n \n@@ -974,6 +978,7 @@ public boolean firePreFailover(boolean redirect)\n         {\n             proceed = _connectionListener.preFailover(redirect);\n         }\n+\n         return proceed;\n     }\n \n@@ -994,6 +999,7 @@ public boolean firePreResubscribe() throws JMSException\n             {\n                 markAllSessionsClosed();\n             }\n+\n             return resubscribe;\n         }\n         else\n@@ -1057,12 +1063,15 @@ public void exceptionReceived(Throwable cause)\n         {\n             if (cause instanceof AMQException)\n             {\n-                je = new JMSException(Integer.toString(((AMQException) cause).getErrorCode().getCode()), \"Exception thrown against \" + toString() + \": \" + cause);\n+                je =\n+                    new JMSException(Integer.toString(((AMQException) cause).getErrorCode().getCode()),\n+                        \"Exception thrown against \" + toString() + \": \" + cause);\n             }\n             else\n             {\n                 je = new JMSException(\"Exception thrown against \" + toString() + \": \" + cause);\n             }\n+\n             if (cause instanceof Exception)\n             {\n                 je.setLinkedException((Exception) cause);\n@@ -1090,6 +1099,7 @@ public void exceptionReceived(Throwable cause)\n                 {\n                     _logger.info(\"Closing AMQConnection due to :\" + cause.getMessage());\n                 }\n+\n                 _closed.set(true);\n                 closeAllSessions(cause, -1, -1); // FIXME: when doing this end up with RejectedExecutionException from executor.\n             }\n@@ -1145,9 +1155,11 @@ public String toString()\n             buf.append(\"Host: \").append(String.valueOf(bd.getHost()));\n             buf.append(\"\\nPort: \").append(String.valueOf(bd.getPort()));\n         }\n+\n         buf.append(\"\\nVirtual Host: \").append(String.valueOf(_virtualHost));\n         buf.append(\"\\nClient ID: \").append(String.valueOf(_clientName));\n-        buf.append(\"\\nActive session count: \").append(_sessions == null ? 0 : _sessions.size());\n+        buf.append(\"\\nActive session count: \").append((_sessions == null) ? 0 : _sessions.size());\n+\n         return buf.toString();\n     }\n \n@@ -1158,11 +1170,8 @@ public String toURL()\n \n     public Reference getReference() throws NamingException\n     {\n-        return new Reference(\n-                AMQConnection.class.getName(),\n-                new StringRefAddr(AMQConnection.class.getName(), toURL()),\n-                AMQConnectionFactory.class.getName(),\n-                null);          // factory location\n+        return new Reference(AMQConnection.class.getName(), new StringRefAddr(AMQConnection.class.getName(), toURL()),\n+                AMQConnectionFactory.class.getName(), null); // factory location\n     }\n \n     public SSLConfiguration getSSLConfiguration()\n@@ -1175,19 +1184,16 @@ public AMQShortString getDefaultTopicExchangeName()\n         return _defaultTopicExchangeName;\n     }\n \n-\n     public void setDefaultTopicExchangeName(AMQShortString defaultTopicExchangeName)\n     {\n         _defaultTopicExchangeName = defaultTopicExchangeName;\n     }\n \n-\n     public AMQShortString getDefaultQueueExchangeName()\n     {\n         return _defaultQueueExchangeName;\n     }\n \n-\n     public void setDefaultQueueExchangeName(AMQShortString defaultQueueExchangeName)\n     {\n         _defaultQueueExchangeName = defaultQueueExchangeName;\n@@ -1200,10 +1206,9 @@ public AMQShortString getTemporaryTopicExchangeName()\n \n     public AMQShortString getTemporaryQueueExchangeName()\n     {\n-        return _temporaryQueueExchangeName;  //To change body of created methods use File | Settings | File Templates.\n+        return _temporaryQueueExchangeName; // To change body of created methods use File | Settings | File Templates.\n     }\n \n-\n     public void setTemporaryTopicExchangeName(AMQShortString temporaryTopicExchangeName)\n     {\n         _temporaryTopicExchangeName = temporaryTopicExchangeName;", "filename": "client/src/main/java/org/apache/qpid/client/AMQConnection.java"}, {"additions": 24, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java", "sha": "b3fbd1f5106146b4a481ef9106450ebcab8d4192", "changes": 60, "status": "modified", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -20,19 +20,19 @@\n  */\n package org.apache.qpid.client;\n \n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.jms.BrokerDetails;\n-import org.apache.qpid.jms.ConnectionURL;\n-import org.apache.qpid.url.URLHelper;\n-import org.apache.qpid.url.URLSyntaxException;\n-\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.StringTokenizer;\n \n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.jms.BrokerDetails;\n+import org.apache.qpid.jms.ConnectionURL;\n+import org.apache.qpid.url.URLHelper;\n+import org.apache.qpid.url.URLSyntaxException;\n+\n public class AMQConnectionURL implements ConnectionURL\n {\n     private String _url;\n@@ -49,7 +49,6 @@\n     private AMQShortString _temporaryTopicExchangeName;\n     private AMQShortString _temporaryQueueExchangeName;\n \n-\n     public AMQConnectionURL(String fullURL) throws URLSyntaxException\n     {\n         _url = fullURL;\n@@ -58,18 +57,18 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n         _failoverOptions = new HashMap<String, String>();\n \n         // Connection URL format\n-        //amqp://[user:pass@][clientid]/virtualhost?brokerlist='tcp://host:port?option=\\'value\\',option=\\'value\\';vm://:3/virtualpath?option=\\'value\\'',failover='method?option=\\'value\\',option='value''\"\n+        // amqp://[user:pass@][clientid]/virtualhost?brokerlist='tcp://host:port?option=\\'value\\',option=\\'value\\';vm://:3/virtualpath?option=\\'value\\'',failover='method?option=\\'value\\',option='value''\"\n         // Options are of course optional except for requiring a single broker in the broker list.\n         try\n         {\n             URI connection = new URI(fullURL);\n \n-            if (connection.getScheme() == null || !(connection.getScheme().equalsIgnoreCase(AMQ_PROTOCOL)))\n+            if ((connection.getScheme() == null) || !(connection.getScheme().equalsIgnoreCase(AMQ_PROTOCOL)))\n             {\n                 throw new URISyntaxException(fullURL, \"Not an AMQP URL\");\n             }\n \n-            if (connection.getHost() == null || connection.getHost().equals(\"\"))\n+            if ((connection.getHost() == null) || connection.getHost().equals(\"\"))\n             {\n                 String uid = AMQConnectionFactory.getUniqueClientID();\n                 if (uid == null)\n@@ -91,7 +90,7 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n \n             if (userInfo == null)\n             {\n-                //Fix for Java 1.5 which doesn't parse UserInfo for non http URIs\n+                // Fix for Java 1.5 which doesn't parse UserInfo for non http URIs\n                 userInfo = connection.getAuthority();\n \n                 if (userInfo != null)\n@@ -112,16 +111,16 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n \n             if (userInfo == null)\n             {\n-                throw URLHelper.parseError(AMQ_PROTOCOL.length() + 3,\n-                                           \"User information not found on url\", fullURL);\n+                throw URLHelper.parseError(AMQ_PROTOCOL.length() + 3, \"User information not found on url\", fullURL);\n             }\n             else\n             {\n                 parseUserInfo(userInfo);\n             }\n+\n             String virtualHost = connection.getPath();\n \n-            if (virtualHost != null && (!virtualHost.equals(\"\")))\n+            if ((virtualHost != null) && (!virtualHost.equals(\"\")))\n             {\n                 setVirtualHost(virtualHost);\n             }\n@@ -130,7 +129,7 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n                 int authLength = connection.getAuthority().length();\n                 int start = AMQ_PROTOCOL.length() + 3;\n                 int testIndex = start + authLength;\n-                if (testIndex < fullURL.length() && fullURL.charAt(testIndex) == '?')\n+                if ((testIndex < fullURL.length()) && (fullURL.charAt(testIndex) == '?'))\n                 {\n                     throw URLHelper.parseError(start, testIndex - start, \"Virtual host found\", fullURL);\n                 }\n@@ -141,14 +140,9 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n \n             }\n \n-\n             URLHelper.parseOptions(_options, connection.getQuery());\n \n             processOptions();\n-\n-            //Fragment is #string (not used)\n-            //System.out.println(connection.getFragment());\n-\n         }\n         catch (URISyntaxException uris)\n         {\n@@ -165,11 +159,10 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n             }\n             else\n             {\n-                if (slash != 0 && fullURL.charAt(slash - 1) == ':')\n+                if ((slash != 0) && (fullURL.charAt(slash - 1) == ':'))\n                 {\n                     throw URLHelper.parseError(slash - 2, fullURL.indexOf('?') - slash + 2,\n-                                               \"Virtual host looks like a windows path, forward slash not allowed in URL\",\n-                                               fullURL);\n+                        \"Virtual host looks like a windows path, forward slash not allowed in URL\", fullURL);\n                 }\n                 else\n                 {\n@@ -182,14 +175,14 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n \n     private void parseUserInfo(String userinfo) throws URLSyntaxException\n     {\n-        //user info = user:pass\n+        // user info = user:pass\n \n         int colonIndex = userinfo.indexOf(':');\n \n         if (colonIndex == -1)\n         {\n             throw URLHelper.parseError(AMQ_PROTOCOL.length() + 3, userinfo.length(),\n-                                       \"Null password in user information not allowed.\", _url);\n+                \"Null password in user information not allowed.\", _url);\n         }\n         else\n         {\n@@ -205,7 +198,7 @@ private void processOptions() throws URLSyntaxException\n         {\n             String brokerlist = _options.get(OPTIONS_BROKERLIST);\n \n-            //brokerlist tcp://host:port?option='value',option='value';vm://:3/virtualpath?option='value'\n+            // brokerlist tcp://host:port?option='value',option='value';vm://:3/virtualpath?option='value'\n             StringTokenizer st = new StringTokenizer(brokerlist, \"\" + URLHelper.BROKER_SEPARATOR);\n \n             while (st.hasMoreTokens())\n@@ -244,19 +237,16 @@ private void processOptions() throws URLSyntaxException\n             _defaultTopicExchangeName = new AMQShortString(_options.get(OPTIONS_DEFAULT_TOPIC_EXCHANGE));\n         }\n \n-\n         if (_options.containsKey(OPTIONS_DEFAULT_QUEUE_EXCHANGE))\n         {\n             _defaultQueueExchangeName = new AMQShortString(_options.get(OPTIONS_DEFAULT_QUEUE_EXCHANGE));\n         }\n \n-\n         if (_options.containsKey(OPTIONS_TEMPORARY_QUEUE_EXCHANGE))\n         {\n             _temporaryQueueExchangeName = new AMQShortString(_options.get(OPTIONS_TEMPORARY_QUEUE_EXCHANGE));\n         }\n \n-\n         if (_options.containsKey(OPTIONS_TEMPORARY_TOPIC_EXCHANGE))\n         {\n             _temporaryTopicExchangeName = new AMQShortString(_options.get(OPTIONS_TEMPORARY_TOPIC_EXCHANGE));\n@@ -439,18 +429,16 @@ private String optionsToString()\n         return sb.toString();\n     }\n \n-\n     public static void main(String[] args) throws URLSyntaxException\n     {\n-\n-        String url2 = \"amqp://ritchiem:bob@temp?brokerlist='tcp://localhost:5672;jcp://fancyserver:3000/',failover='roundrobin'\";\n-        //\"amqp://user:pass@clientid/virtualhost?brokerlist='tcp://host:1?option1=\\'value\\',option2=\\'value\\';vm://:3?option1=\\'value\\'',failover='method?option1=\\'value\\',option2='value''\";\n+        String url2 =\n+            \"amqp://ritchiem:bob@temp?brokerlist='tcp://localhost:5672;jcp://fancyserver:3000/',failover='roundrobin'\";\n+        // \"amqp://user:pass@clientid/virtualhost?brokerlist='tcp://host:1?option1=\\'value\\',option2=\\'value\\';vm://:3?option1=\\'value\\'',failover='method?option1=\\'value\\',option2='value''\";\n \n         ConnectionURL connectionurl2 = new AMQConnectionURL(url2);\n \n         System.out.println(url2);\n         System.out.println(connectionurl2);\n \n     }\n-\n }", "filename": "client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/AMQDestination.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/AMQDestination.java", "sha": "585991d905bf59a1a6757c967f1bb6a624369a7d", "changes": 31, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQDestination.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -53,6 +53,8 @@\n     private String _url;\n     private AMQShortString _urlAsShortString;\n \n+    private boolean _validated;\n+\n     private byte[] _byteEncoding;\n     private static final int IS_DURABLE_MASK = 0x1;\n     private static final int IS_EXCLUSIVE_MASK = 0x2;\n@@ -198,12 +200,16 @@ public String toString()\n     {\n         return toURL();\n \n-        /*\n-        return \"Destination: \" + _destinationName + \", \" +\n-               \"Queue Name: \" + _queueName + \", Exchange: \" + _exchangeName +\n-               \", Exchange class: \" + _exchangeClass + \", Exclusive: \" + _isExclusive +\n-               \", AutoDelete: \" + _isAutoDelete + \", Routing  Key: \" + getRoutingKey();\n-         */\n+    }\n+\n+    public boolean isValidated()\n+    {\n+        return _validated;\n+    }\n+\n+    public void setValidated(boolean validated)\n+    {\n+        _validated = validated;\n     }\n \n     public String toURL()\n@@ -348,15 +354,7 @@ public boolean equals(Object o)\n         {\n             return false;\n         }\n-  /*      if (_isExclusive != that._isExclusive)\n-        {\n-            return false;\n-        }\n-        if (_isAutoDelete != that._isAutoDelete)\n-        {\n-            return false;\n-        }\n-        */\n+\n         return true;\n     }\n \n@@ -370,8 +368,7 @@ public int hashCode()\n         {\n             result = 29 * result + _queueName.hashCode();\n         }\n-//        result = result * (_isExclusive ? 13 : 7);\n-//        result = result * (_isAutoDelete ? 13 : 7);\n+\n         return result;\n     }\n ", "filename": "client/src/main/java/org/apache/qpid/client/AMQDestination.java"}, {"additions": 60, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/AMQSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/AMQSession.java", "sha": "8bb5b622f7c74855d47308a6e52ebe315a462429", "changes": 75, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQSession.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -202,6 +202,7 @@\n     /** Responsible for decoding a message fragment and passing it to the appropriate message consumer. */\n \n     private static final Logger _dispatcherLogger = Logger.getLogger(Dispatcher.class);\n+    private AtomicBoolean _firstDispatcher = new AtomicBoolean(true);\n \n     private class Dispatcher extends Thread\n     {\n@@ -327,8 +328,11 @@ private void dispatchMessage(UnprocessedMessage message)\n                                                    \") is closed rejecting(requeue)...\");\n                         }\n                     }\n-\n-                    rejectMessage(message, true);\n+                    // Don't reject if we're already closing\n+                    if (!_closed.get())\n+                    {\n+                        rejectMessage(message, true);\n+                    }\n                 }\n                 else\n                 {\n@@ -995,42 +999,42 @@ public void run()\n         throw new java.lang.UnsupportedOperationException();\n     }\n \n-    public MessageProducer createProducer(Destination destination, boolean mandatory,\n-                                          boolean immediate, boolean waitUntilSent)\n+    public BasicMessageProducer createProducer(Destination destination, boolean mandatory,\n+                                               boolean immediate, boolean waitUntilSent)\n             throws JMSException\n     {\n         return createProducerImpl(destination, mandatory, immediate, waitUntilSent);\n     }\n \n-    public MessageProducer createProducer(Destination destination, boolean mandatory, boolean immediate)\n+    public BasicMessageProducer createProducer(Destination destination, boolean mandatory, boolean immediate)\n             throws JMSException\n     {\n         return createProducerImpl(destination, mandatory, immediate);\n     }\n \n-    public MessageProducer createProducer(Destination destination, boolean immediate)\n+    public BasicMessageProducer createProducer(Destination destination, boolean immediate)\n             throws JMSException\n     {\n         return createProducerImpl(destination, DEFAULT_MANDATORY, immediate);\n     }\n \n-    public MessageProducer createProducer(Destination destination) throws JMSException\n+    public BasicMessageProducer createProducer(Destination destination) throws JMSException\n     {\n         return createProducerImpl(destination, DEFAULT_MANDATORY, DEFAULT_IMMEDIATE);\n     }\n \n-    private org.apache.qpid.jms.MessageProducer createProducerImpl(Destination destination, boolean mandatory,\n-                                                                   boolean immediate)\n+    private BasicMessageProducer createProducerImpl(Destination destination, boolean mandatory,\n+                                                    boolean immediate)\n             throws JMSException\n     {\n         return createProducerImpl(destination, mandatory, immediate, false);\n     }\n \n-    private org.apache.qpid.jms.MessageProducer createProducerImpl(final Destination destination, final boolean mandatory,\n-                                                                   final boolean immediate, final boolean waitUntilSent)\n+    private BasicMessageProducer createProducerImpl(final Destination destination, final boolean mandatory,\n+                                                    final boolean immediate, final boolean waitUntilSent)\n             throws JMSException\n     {\n-        return (org.apache.qpid.jms.MessageProducer) new FailoverSupport()\n+        return (BasicMessageProducer) new FailoverSupport()\n         {\n             public Object operation() throws JMSException\n             {\n@@ -1248,8 +1252,10 @@ public Object operation() throws JMSException\n                 {\n                     JMSException ex = new JMSException(\"Error registering consumer: \" + e);\n \n-                    //todo remove\n-                    e.printStackTrace();\n+                    if (_logger.isDebugEnabled())\n+                    {\n+                        e.printStackTrace();\n+                    }\n                     ex.setLinkedException(e);\n                     throw ex;\n                 }\n@@ -1926,6 +1932,24 @@ void setHasMessageListeners()\n \n     synchronized void startDistpatcherIfNecessary()\n     {\n+        if (Boolean.parseBoolean(System.getProperties().getProperty(\"REGISTER_CONSUMERS_FLOWED\", \"false\")))\n+        {\n+//            if (!connectionStopped)\n+            {\n+                if (isSuspended() && _firstDispatcher.getAndSet(false))\n+                {\n+                    try\n+                    {\n+                        suspendChannel(false);\n+                    }\n+                    catch (AMQException e)\n+                    {\n+                        _logger.info(\"Suspending channel threw an exception:\" + e);\n+                    }\n+                }\n+            }\n+        }\n+\n         startDistpatcherIfNecessary(false);\n     }\n \n@@ -1974,6 +1998,27 @@ void registerConsumer(BasicMessageConsumer consumer, boolean nowait) throws AMQE\n \n         bindQueue(amqd, queueName, protocolHandler, consumer.getRawSelectorFieldTable());\n \n+        // The dispatcher will be null if we have just created this session\n+        // so suspend the channel before we register our consumer so that we don't\n+        // start prefetching until a receive/mListener is set.\n+        if (Boolean.parseBoolean(System.getProperties().getProperty(\"REGISTER_CONSUMERS_FLOWED\", \"false\")))\n+        {\n+            if (_dispatcher == null)\n+            {\n+                if (!isSuspended())\n+                {\n+                    try\n+                    {\n+                        suspendChannel(true);\n+                    }\n+                    catch (AMQException e)\n+                    {\n+                        _logger.info(\"Suspending channel threw an exception:\" + e);\n+                    }\n+                }\n+            }\n+        }\n+\n         try\n         {\n             consumeFromQueue(consumer, queueName, protocolHandler, nowait, consumer.getMessageSelector());\n@@ -2089,7 +2134,7 @@ public void confirmConsumerCancelled(AMQShortString consumerTag)\n         // Remove the consumer from the map\n         BasicMessageConsumer consumer = (BasicMessageConsumer) _consumers.get(consumerTag);\n         if (consumer != null)\n-        {            \n+        {\n //            fixme this isn't right.. needs to check if _queue contains data for this consumer\n             if (consumer.isAutoClose())// && _queue.isEmpty())\n             {", "filename": "client/src/main/java/org/apache/qpid/client/AMQSession.java"}, {"additions": 95, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java", "sha": "1c3cdbcb657aa71dcbdc75d900aae01af0678b17", "changes": 164, "status": "modified", "deletions": 69, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,9 +20,9 @@\n  */\n package org.apache.qpid.client;\n \n+import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Arrays;\n import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.TimeUnit;\n@@ -34,6 +34,7 @@\n import javax.jms.MessageListener;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.client.message.AbstractJMSMessage;\n import org.apache.qpid.client.message.MessageFactoryRegistry;\n@@ -138,10 +139,10 @@\n     private boolean _noConsume;\n     private List<StackTraceElement> _closedStack = null;\n \n-    protected BasicMessageConsumer(int channelId, AMQConnection connection, AMQDestination destination, String messageSelector,\n-                                   boolean noLocal, MessageFactoryRegistry messageFactory, AMQSession session,\n-                                   AMQProtocolHandler protocolHandler, FieldTable rawSelectorFieldTable,\n-                                   int prefetchHigh, int prefetchLow, boolean exclusive, int acknowledgeMode, boolean noConsume, boolean autoClose)\n+    protected BasicMessageConsumer(int channelId, AMQConnection connection, AMQDestination destination,\n+                                   String messageSelector, boolean noLocal, MessageFactoryRegistry messageFactory, AMQSession session,\n+                                   AMQProtocolHandler protocolHandler, FieldTable rawSelectorFieldTable, int prefetchHigh, int prefetchLow,\n+                                   boolean exclusive, int acknowledgeMode, boolean noConsume, boolean autoClose)\n     {\n         _channelId = channelId;\n         _connection = connection;\n@@ -160,7 +161,7 @@ protected BasicMessageConsumer(int channelId, AMQConnection connection, AMQDesti\n         _autoClose = autoClose;\n         _noConsume = noConsume;\n \n-        //Force queue browsers not to use acknowledge modes.\n+        // Force queue browsers not to use acknowledge modes.\n         if (_noConsume)\n         {\n             _acknowledgeMode = Session.NO_ACKNOWLEDGE;\n@@ -175,12 +176,14 @@ public AMQDestination getDestination()\n     public String getMessageSelector() throws JMSException\n     {\n         checkPreConditions();\n+\n         return _messageSelector;\n     }\n \n     public MessageListener getMessageListener() throws JMSException\n     {\n         checkPreConditions();\n+\n         return _messageListener.get();\n     }\n \n@@ -198,14 +201,14 @@ public void setMessageListener(final MessageListener messageListener) throws JMS\n     {\n         checkPreConditions();\n \n-        //if the current listener is non-null and the session is not stopped, then\n-        //it is an error to call this method.\n+        // if the current listener is non-null and the session is not stopped, then\n+        // it is an error to call this method.\n \n-        //i.e. it is only valid to call this method if\n+        // i.e. it is only valid to call this method if\n         //\n-        //    (a) the connection is stopped, in which case the dispatcher is not running\n-        //    OR\n-        //    (b) the listener is null AND we are not receiving synchronously at present\n+        // (a) the connection is stopped, in which case the dispatcher is not running\n+        // OR\n+        // (b) the listener is null AND we are not receiving synchronously at present\n         //\n \n         if (!_session.getAMQConnection().started())\n@@ -215,7 +218,8 @@ public void setMessageListener(final MessageListener messageListener) throws JMS\n \n             if (_logger.isDebugEnabled())\n             {\n-                _logger.debug(\"Session stopped : Message listener(\" + messageListener + \") set for destination \" + _destination);\n+                _logger.debug(\"Session stopped : Message listener(\" + messageListener + \") set for destination \"\n+                              + _destination);\n             }\n         }\n         else\n@@ -224,6 +228,7 @@ public void setMessageListener(final MessageListener messageListener) throws JMS\n             {\n                 throw new javax.jms.IllegalStateException(\"Another thread is already receiving synchronously.\");\n             }\n+\n             if (!_messageListener.compareAndSet(null, messageListener))\n             {\n                 throw new javax.jms.IllegalStateException(\"Attempt to alter listener while session is started.\");\n@@ -233,7 +238,7 @@ public void setMessageListener(final MessageListener messageListener) throws JMS\n \n             if (messageListener != null)\n             {\n-                //handle case where connection has already been started, and the dispatcher has alreaded started\n+                // handle case where connection has already been started, and the dispatcher has alreaded started\n                 // putting values on the _synchronousQueue\n \n                 synchronized (_session)\n@@ -263,10 +268,12 @@ private void acquireReceiving() throws JMSException\n         {\n             throw new javax.jms.IllegalStateException(\"Another thread is already receiving.\");\n         }\n+\n         if (isMessageListenerSet())\n         {\n             throw new javax.jms.IllegalStateException(\"A listener has already been set.\");\n         }\n+\n         _receivingThread = Thread.currentThread();\n     }\n \n@@ -331,6 +338,7 @@ public Message receive(long l) throws JMSException\n             {\n                 return null;\n             }\n+\n             Object o = null;\n             if (l > 0)\n             {\n@@ -340,6 +348,7 @@ public Message receive(long l) throws JMSException\n             {\n                 o = _synchronousQueue.take();\n             }\n+\n             final AbstractJMSMessage m = returnMessageOrThrow(o);\n             if (m != null)\n             {\n@@ -352,6 +361,7 @@ public Message receive(long l) throws JMSException\n         catch (InterruptedException e)\n         {\n             _logger.warn(\"Interrupted: \" + e);\n+\n             return null;\n         }\n         finally\n@@ -365,6 +375,7 @@ private boolean closeOnAutoClose() throws JMSException\n         if (isAutoClose() && _closeWhenNoMessages && _synchronousQueue.isEmpty())\n         {\n             close(false);\n+\n             return true;\n         }\n         else\n@@ -387,6 +398,7 @@ public Message receiveNoWait() throws JMSException\n             {\n                 return null;\n             }\n+\n             Object o = _synchronousQueue.poll();\n             final AbstractJMSMessage m = returnMessageOrThrow(o);\n             if (m != null)\n@@ -414,8 +426,7 @@ public Message receiveNoWait() throws JMSException\n      * @throws JMSException if the argument is a throwable. If it is a JMSException it is rethrown as is, but if not a\n      *                      JMSException is created with the linked exception set appropriately\n      */\n-    private AbstractJMSMessage returnMessageOrThrow(Object o)\n-            throws JMSException\n+    private AbstractJMSMessage returnMessageOrThrow(Object o) throws JMSException\n     {\n         // errors are passed via the queue too since there is no way of interrupting the poll() via the API.\n         if (o instanceof Throwable)\n@@ -425,6 +436,7 @@ private AbstractJMSMessage returnMessageOrThrow(Object o)\n             {\n                 e.setLinkedException((Exception) o);\n             }\n+\n             throw e;\n         }\n         else\n@@ -433,15 +445,14 @@ private AbstractJMSMessage returnMessageOrThrow(Object o)\n         }\n     }\n \n-\n     public void close() throws JMSException\n     {\n         close(true);\n     }\n \n     public void close(boolean sendClose) throws JMSException\n     {\n-        //synchronized (_closed)\n+        // synchronized (_closed)\n \n         if (_logger.isInfoEnabled())\n         {\n@@ -456,22 +467,23 @@ public void close(boolean sendClose) throws JMSException\n                 {\n                     if (_closedStack != null)\n                     {\n-                        _logger.trace(_consumerTag + \" close():\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 6));\n+                        _logger.trace(_consumerTag + \" close():\"\n+                                      + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 6));\n                         _logger.trace(_consumerTag + \" previously:\" + _closedStack.toString());\n                     }\n                     else\n                     {\n                         _closedStack = Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 6);\n                     }\n                 }\n+\n                 if (sendClose)\n                 {\n                     // TODO: Be aware of possible changes to parameter order as versions change.\n-                    final AMQFrame cancelFrame = BasicCancelBody.createAMQFrame(_channelId,\n-                                                                                _protocolHandler.getProtocolMajorVersion(),\n-                                                                                _protocolHandler.getProtocolMinorVersion(),\n-                                                                                _consumerTag,    // consumerTag\n-                                                                                false);    // nowait\n+                    final AMQFrame cancelFrame =\n+                            BasicCancelBody.createAMQFrame(_channelId, _protocolHandler.getProtocolMajorVersion(),\n+                                                           _protocolHandler.getProtocolMinorVersion(), _consumerTag, // consumerTag\n+                                                           false); // nowait\n \n                     try\n                     {\n@@ -485,25 +497,28 @@ public void close(boolean sendClose) throws JMSException\n                     }\n                     catch (AMQException e)\n                     {\n-                        _logger.error(\"Error closing consumer: \" + e, e);\n-                        throw new JMSException(\"Error closing consumer: \" + e);\n+                        // _logger.error(\"Error closing consumer: \" + e, e);            \n+                        JMSException jmse = new JMSException(\"Error closing consumer: \" + e);\n+                        jmse.setLinkedException(e);\n+                        throw jmse;\n                     }\n                 }\n                 else\n                 {\n-//                    //fixme this probably is not right\n-//                    if (!isNoConsume())\n-                    {   //done in BasicCancelOK Handler but not sending one so just deregister.\n+                    // //fixme this probably is not right\n+                    // if (!isNoConsume())\n+                    { // done in BasicCancelOK Handler but not sending one so just deregister.\n                         deregisterConsumer();\n                     }\n                 }\n \n-                if (_messageListener != null && _receiving.get())\n+                if ((_messageListener != null) && _receiving.get())\n                 {\n                     if (_logger.isInfoEnabled())\n                     {\n                         _logger.info(\"Interrupting thread: \" + _receivingThread);\n                     }\n+\n                     _receivingThread.interrupt();\n                 }\n             }\n@@ -516,15 +531,16 @@ public void close(boolean sendClose) throws JMSException\n      */\n     void markClosed()\n     {\n-//        synchronized (_closed)\n+        // synchronized (_closed)\n         {\n             _closed.set(true);\n \n             if (_logger.isTraceEnabled())\n             {\n                 if (_closedStack != null)\n                 {\n-                    _logger.trace(_consumerTag + \" markClosed():\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 8));\n+                    _logger.trace(_consumerTag + \" markClosed():\"\n+                                  + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 8));\n                     _logger.trace(_consumerTag + \" previously:\" + _closedStack.toString());\n                 }\n                 else\n@@ -533,6 +549,7 @@ void markClosed()\n                 }\n             }\n         }\n+\n         deregisterConsumer();\n     }\n \n@@ -551,22 +568,22 @@ void notifyMessage(UnprocessedMessage messageFrame, int channelId)\n         {\n             _logger.debug(\"notifyMessage called with message number \" + messageFrame.getDeliverBody().deliveryTag);\n         }\n+\n         try\n         {\n-            AbstractJMSMessage jmsMessage = _messageFactory.createMessage(messageFrame.getDeliverBody().deliveryTag,\n-                                                                          messageFrame.getDeliverBody().redelivered,\n-                                                                          messageFrame.getDeliverBody().exchange,\n-                                                                          messageFrame.getDeliverBody().routingKey,\n-                                                                          messageFrame.getContentHeader(),\n-                                                                          messageFrame.getBodies());\n+            AbstractJMSMessage jmsMessage =\n+                    _messageFactory.createMessage(messageFrame.getDeliverBody().deliveryTag,\n+                                                  messageFrame.getDeliverBody().redelivered, messageFrame.getDeliverBody().exchange,\n+                                                  messageFrame.getDeliverBody().routingKey, messageFrame.getContentHeader(), messageFrame.getBodies());\n \n             if (debug)\n             {\n                 _logger.debug(\"Message is of type: \" + jmsMessage.getClass().getName());\n             }\n-//            synchronized (_closed)\n+            // synchronized (_closed)\n+\n             {\n-//                if (!_closed.get())\n+                // if (!_closed.get())\n                 {\n \n                     jmsMessage.setConsumer(this);\n@@ -575,12 +592,12 @@ void notifyMessage(UnprocessedMessage messageFrame, int channelId)\n \n                     notifyMessage(jmsMessage, channelId);\n                 }\n-//                else\n-//                {\n-//                    _logger.error(\"MESSAGE REJECTING!\");\n-//                    _session.rejectMessage(jmsMessage, true);\n-//                    //_logger.error(\"MESSAGE JUST DROPPED!\");\n-//                }\n+                // else\n+                // {\n+                // _logger.error(\"MESSAGE REJECTING!\");\n+                // _session.rejectMessage(jmsMessage, true);\n+                // //_logger.error(\"MESSAGE JUST DROPPED!\");\n+                // }\n             }\n         }\n         catch (Exception e)\n@@ -606,11 +623,11 @@ public void notifyMessage(AbstractJMSMessage jmsMessage, int channelId)\n         {\n             if (isMessageListenerSet())\n             {\n-                //we do not need a lock around the test above, and the dispatch below as it is invalid\n-                //for an application to alter an installed listener while the session is started\n-//                synchronized (_closed)\n+                // we do not need a lock around the test above, and the dispatch below as it is invalid\n+                // for an application to alter an installed listener while the session is started\n+                // synchronized (_closed)\n                 {\n-//                    if (!_closed.get())\n+                    // if (!_closed.get())\n                     {\n \n                         preApplicationProcessing(jmsMessage);\n@@ -641,9 +658,11 @@ private void preDeliver(AbstractJMSMessage msg)\n     {\n         switch (_acknowledgeMode)\n         {\n+\n             case Session.PRE_ACKNOWLEDGE:\n                 _session.acknowledgeMessage(msg.getDeliveryTag(), false);\n                 break;\n+\n             case Session.CLIENT_ACKNOWLEDGE:\n                 // we set the session so that when the user calls acknowledge() it can call the method on session\n                 // to send out the appropriate frame\n@@ -657,17 +676,21 @@ private void postDeliver(AbstractJMSMessage msg) throws JMSException\n         msg.setJMSDestination(_destination);\n         switch (_acknowledgeMode)\n         {\n+\n             case Session.CLIENT_ACKNOWLEDGE:\n                 if (isNoConsume())\n                 {\n                     _session.acknowledgeMessage(msg.getDeliveryTag(), false);\n                 }\n+\n                 break;\n+\n             case Session.DUPS_OK_ACKNOWLEDGE:\n                 if (++_outstanding >= _prefetchHigh)\n                 {\n                     _dups_ok_acknowledge_send = true;\n                 }\n+\n                 if (_outstanding <= _prefetchLow)\n                 {\n                     _dups_ok_acknowledge_send = false;\n@@ -680,14 +703,18 @@ private void postDeliver(AbstractJMSMessage msg) throws JMSException\n                         _session.acknowledgeMessage(msg.getDeliveryTag(), true);\n                     }\n                 }\n+\n                 break;\n+\n             case Session.AUTO_ACKNOWLEDGE:\n                 // we do not auto ack a message if the application code called recover()\n                 if (!_session.isInRecovery())\n                 {\n                     _session.acknowledgeMessage(msg.getDeliveryTag(), false);\n                 }\n+\n                 break;\n+\n             case Session.SESSION_TRANSACTED:\n                 if (isNoConsume())\n                 {\n@@ -697,6 +724,7 @@ private void postDeliver(AbstractJMSMessage msg) throws JMSException\n                 {\n                     _receivedDeliveryTags.add(msg.getDeliveryTag());\n                 }\n+\n                 break;\n         }\n     }\n@@ -721,14 +749,15 @@ void acknowledgeLastDelivered()\n \n     void notifyError(Throwable cause)\n     {\n-//        synchronized (_closed)\n+        // synchronized (_closed)\n         {\n             _closed.set(true);\n             if (_logger.isTraceEnabled())\n             {\n                 if (_closedStack != null)\n                 {\n-                    _logger.trace(_consumerTag + \" notifyError():\" + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 8));\n+                    _logger.trace(_consumerTag + \" notifyError():\"\n+                                  + Arrays.asList(Thread.currentThread().getStackTrace()).subList(3, 8));\n                     _logger.trace(_consumerTag + \" previously\" + _closedStack.toString());\n                 }\n                 else\n@@ -737,7 +766,7 @@ void notifyError(Throwable cause)\n                 }\n             }\n         }\n-        //QPID-293 can \"request redelivery of this error through dispatcher\"\n+        // QPID-293 can \"request redelivery of this error through dispatcher\"\n \n         // we have no way of propagating the exception to a message listener - a JMS limitation - so we\n         // deal with the case where we have a synchronous receive() waiting for a message to arrive\n@@ -749,10 +778,10 @@ void notifyError(Throwable cause)\n                 _logger.debug(\"Passed exception to synchronous queue for propagation to receive()\");\n             }\n         }\n+\n         deregisterConsumer();\n     }\n \n-\n     /**\n      * Perform cleanup to deregister this consumer. This occurs when closing the consumer in both the clean case and in\n      * the case of an error occurring.\n@@ -782,7 +811,7 @@ private void checkPreConditions() throws JMSException\n \n         this.checkNotClosed();\n \n-        if (_session == null || _session.isClosed())\n+        if ((_session == null) || _session.isClosed())\n         {\n             throw new javax.jms.IllegalStateException(\"Invalid Session\");\n         }\n@@ -817,7 +846,6 @@ public boolean isAutoClose()\n         return _autoClose;\n     }\n \n-\n     public boolean isNoConsume()\n     {\n         return _noConsume;\n@@ -827,10 +855,7 @@ public void closeWhenNoMessages(boolean b)\n     {\n         _closeWhenNoMessages = b;\n \n-        if (_closeWhenNoMessages\n-            && _synchronousQueue.isEmpty()\n-            && _receiving.get()\n-            && _messageListener != null)\n+        if (_closeWhenNoMessages && _synchronousQueue.isEmpty() && _receiving.get() && (_messageListener != null))\n         {\n             _receivingThread.interrupt();\n         }\n@@ -846,13 +871,13 @@ public void rollback()\n             _logger.debug(\"Rejecting received messages in _receivedDTs (RQ)\");\n         }\n \n-        //rollback received but not committed messages\n+        // rollback received but not committed messages\n         while (!_receivedDeliveryTags.isEmpty())\n         {\n             if (_logger.isDebugEnabled())\n             {\n-                _logger.debug(\"Rejecting the messages(\" + _receivedDeliveryTags.size() + \") in _receivedDTs (RQ)\" +\n-                              \"for consumer with tag:\" + _consumerTag);\n+                _logger.debug(\"Rejecting the messages(\" + _receivedDeliveryTags.size() + \") in _receivedDTs (RQ)\"\n+                              + \"for consumer with tag:\" + _consumerTag);\n             }\n \n             Long tag = _receivedDeliveryTags.poll();\n@@ -876,14 +901,15 @@ public void rollback()\n             }\n         }\n \n-        //rollback pending messages\n+        // rollback pending messages\n         if (_synchronousQueue.size() > 0)\n         {\n             if (_logger.isDebugEnabled())\n             {\n-                _logger.debug(\"Rejecting the messages(\" + _synchronousQueue.size() + \") in _syncQueue (PRQ)\" +\n-                              \"for consumer with tag:\" + _consumerTag);\n+                _logger.debug(\"Rejecting the messages(\" + _synchronousQueue.size() + \") in _syncQueue (PRQ)\"\n+                              + \"for consumer with tag:\" + _consumerTag);\n             }\n+\n             Iterator iterator = _synchronousQueue.iterator();\n \n             while (iterator.hasNext())\n@@ -898,13 +924,14 @@ public void rollback()\n                     {\n                         _logger.trace(\"Rejected message:\" + ((AbstractJMSMessage) o).getDeliveryTag());\n                     }\n+\n                     iterator.remove();\n \n                 }\n                 else\n                 {\n-                    _logger.error(\"Queue contained a :\" + o.getClass() +\n-                                  \" unable to reject as it is not an AbstractJMSMessage. Will be cleared\");\n+                    _logger.error(\"Queue contained a :\" + o.getClass()\n+                                  + \" unable to reject as it is not an AbstractJMSMessage. Will be cleared\");\n                     iterator.remove();\n                 }\n             }\n@@ -919,7 +946,6 @@ public void rollback()\n         }\n     }\n \n-\n     public String debugIdentity()\n     {\n         return String.valueOf(_consumerTag);", "filename": "client/src/main/java/org/apache/qpid/client/BasicMessageConsumer.java"}, {"additions": 23, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/BasicMessageProducer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/BasicMessageProducer.java", "sha": "bd7cc945821fe523cd27e2d129a6b8d43576baa5", "changes": 26, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/BasicMessageProducer.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -21,6 +21,7 @@\n package org.apache.qpid.client;\n \n import java.io.UnsupportedEncodingException;\n+import java.util.UUID;\n \n import javax.jms.BytesMessage;\n import javax.jms.DeliveryMode;\n@@ -118,6 +119,9 @@\n     private final boolean _mandatory;\n \n     private final boolean _waitUntilSent;\n+    \n+    private boolean _disableMessageId;\n+        \n     private static final ContentBody[] NO_CONTENT_BODIES = new ContentBody[0];\n \n     protected BasicMessageProducer(AMQConnection connection, AMQDestination destination, boolean transacted, int channelId,\n@@ -172,15 +176,14 @@ public void setDisableMessageID(boolean b) throws JMSException\n     {\n         checkPreConditions();\n         checkNotClosed();\n-        // IGNORED\n+        _disableMessageId = b;\n     }\n \n     public boolean getDisableMessageID() throws JMSException\n     {\n         checkNotClosed();\n \n-        // Always false for AMQP\n-        return false;\n+        return _disableMessageId;\n     }\n \n     public void setDisableMessageTimestamp(boolean b) throws JMSException\n@@ -450,6 +453,18 @@ protected void sendImpl(AMQDestination destination, Message origMessage, int del\n         origMessage.setJMSDestination(destination);\n \n         AbstractJMSMessage message = convertToNativeMessage(origMessage);\n+        \n+        if(_disableMessageId)\n+        {\n+        \tmessage.setJMSMessageID(null);\n+        }\n+        else\n+        {\n+        \tif (message.getJMSMessageID() == null)\n+        \t{\n+        \t\tmessage.setJMSMessageID(UUID.randomUUID().toString());\n+        \t}\n+        }\n \n         int type;\n         if (destination instanceof Topic)\n@@ -667,4 +682,9 @@ public AMQSession getSession()\n     {\n         return _session;\n     }\n+\n+    public boolean isBound(AMQDestination destination) throws JMSException\n+    {\n+        return _session.isQueueBound(destination.getExchangeName(),null,destination.getRoutingKey());\n+    }\n }", "filename": "client/src/main/java/org/apache/qpid/client/BasicMessageProducer.java"}, {"additions": 45, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/JMSAMQException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/JMSAMQException.java", "sha": "d1237cff493cf35ce6cfd4a15572f552b1ba71bf", "changes": 45, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/JMSAMQException.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,3 +1,23 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n /*\n  *\n  * Copyright (c) 2006 The Apache Software Foundation\n@@ -22,10 +42,35 @@\n import org.apache.qpid.AMQException;\n \n /**\n+ * JMSException does not accept wrapped exceptions in its constructor. Presumably this is because it is a relatively old\n+ * Java exception class, before this was added as a default to Throwable. This exception class accepts wrapped exceptions\n+ * as well as error messages, through its constructor, but is a JMSException.\n+ *\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\n+ * <tr><th> Responsibilities <th> Collaborations\n+ * <tr><td> Accept wrapped exceptions as a JMSException.\n+ * </table>\n+ *\n  * @author Apache Software Foundation\n  */\n public class JMSAMQException extends JMSException\n {\n+    /**\n+     * Creates a JMSException, wrapping another exception class.\n+     *\n+     * @param message The error message.\n+     * @param cause   The underlying exception that caused this one. May be null if none is to be set.\n+     */\n+    public JMSAMQException(String message, Exception cause)\n+    {\n+        super(message);\n+\n+        if (cause != null)\n+        {\n+            setLinkedException(cause);\n+        }\n+    }\n+\n     public JMSAMQException(AMQException s)\n     {\n         super(s.getMessage(), String.valueOf(s.getErrorCode()));", "filename": "client/src/main/java/org/apache/qpid/client/JMSAMQException.java"}, {"additions": 30, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/QueueSenderAdapter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/QueueSenderAdapter.java", "sha": "e0c4b613336ad9cdcede75c6834d00d3ae8c5753", "changes": 35, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/QueueSenderAdapter.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,14 +7,15 @@\n import javax.jms.MessageProducer;\n import javax.jms.Queue;\n import javax.jms.QueueSender;\n+import javax.jms.InvalidDestinationException;\n \n public class QueueSenderAdapter implements QueueSender {\n \n-\tprivate MessageProducer _delegate;\n+\tprivate BasicMessageProducer _delegate;\n \tprivate Queue _queue;\n \tprivate boolean closed = false;\n \t\n-\tpublic QueueSenderAdapter(MessageProducer msgProducer, Queue queue){\n+\tpublic QueueSenderAdapter(BasicMessageProducer msgProducer, Queue queue){\n \t\t_delegate = msgProducer;\n \t\t_queue = queue;\n \t}\n@@ -122,12 +123,13 @@ public void setTimeToLive(long timeToLive) throws JMSException {\n \t\t_delegate.setTimeToLive(timeToLive);\n \t}\n \n-    private void checkPreConditions() throws IllegalStateException, IllegalStateException\n+    private void checkPreConditions() throws JMSException\n     {\n         checkPreConditions(_queue);\n     }\n \n-    private void checkPreConditions(Queue queue) throws IllegalStateException, IllegalStateException {\n+    private void checkPreConditions(Queue queue) throws JMSException\n+    {\n \t\tif (closed){\n \t\t\tthrow new javax.jms.IllegalStateException(\"Publisher is closed\");\n \t\t}\n@@ -137,5 +139,28 @@ private void checkPreConditions(Queue queue) throws IllegalStateException, Illeg\n \t\tif(session == null || session.isClosed()){\n \t\t\tthrow new javax.jms.IllegalStateException(\"Invalid Session\");\n \t\t}\n-\t}\n+\n+        if(!(queue instanceof AMQDestination))\n+        {\n+            throw new InvalidDestinationException(\"Queue: \" + queue + \" is not a valid Qpid queue\");\n+        }\n+        AMQDestination destination = (AMQDestination) queue;\n+        if(!destination.isValidated() && checkQueueBeforePublish())\n+        {\n+\n+            if (_delegate.isBound(destination))\n+            {\n+                destination.setValidated(true);\n+            }\n+            else\n+            {\n+                throw new InvalidDestinationException(\"Queue: \" + queue + \" is not a valid destination (no bindings on server\");\n+            }\n+        }\n+    }\n+\n+    private boolean checkQueueBeforePublish()\n+    {\n+        return \"true\".equalsIgnoreCase(System.getProperty(\"org.apache.qpid.client.verifyQueueBindingBeforePublish\", \"true\"));\n+    }\n }", "filename": "client/src/main/java/org/apache/qpid/client/QueueSenderAdapter.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/TopicPublisherAdapter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/TopicPublisherAdapter.java", "sha": "02a408465b9f3bdc2630080e61c12910d89981c3", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/TopicPublisherAdapter.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -175,5 +175,10 @@ private void checkTopic(Destination topic) throws InvalidDestinationException\n         {\n             throw new InvalidDestinationException(\"Destination \" + topic + \" is not a topic\");\n         }\n+        if(!(topic instanceof AMQDestination))\n+        {\n+            throw new InvalidDestinationException(\"Destination \" + topic + \" is not a Qpid topic\");\n+        }\n+\n     }\n }", "filename": "client/src/main/java/org/apache/qpid/client/TopicPublisherAdapter.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/handler/ChannelCloseMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/handler/ChannelCloseMethodHandler.java", "sha": "f62baf2c3a296437a8a8e76d64e6bacb807759d4", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/handler/ChannelCloseMethodHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -94,6 +94,8 @@ else if (errorCode == AMQConstant.INVALID_ROUTING_KEY)\n             }\n \n         }\n+        //fixme why is this only done when the close is expected...\n+        // should the above forced closes not also cause a close?\n         protocolSession.channelClosed(evt.getChannelId(), errorCode, String.valueOf(reason));\n     }\n }", "filename": "client/src/main/java/org/apache/qpid/client/handler/ChannelCloseMethodHandler.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/message/AbstractBytesMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/message/AbstractBytesMessage.java", "sha": "af254fbbaf6a17d3f0b934cf3b4a8b5addfe3695", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/AbstractBytesMessage.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -27,6 +27,7 @@\n import javax.jms.MessageEOFException;\n \n import org.apache.mina.common.ByteBuffer;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n@@ -72,7 +73,7 @@ protected void allocateInitialBuffer()\n     }\n \n     AbstractBytesMessage(long messageNbr, ContentHeaderBody contentHeader, AMQShortString exchange,\n-                         AMQShortString routingKey, ByteBuffer data) throws AMQException\n+        AMQShortString routingKey, ByteBuffer data) throws AMQException\n     {\n         // TODO: this casting is ugly. Need to review whole ContentHeaderBody idea\n         super(messageNbr, (BasicContentHeaderProperties) contentHeader.properties, exchange, routingKey, data);\n@@ -93,7 +94,9 @@ public String toBodyString() throws JMSException\n         }\n         catch (IOException e)\n         {\n-            throw new JMSException(e.toString());\n+            JMSException jmse = new JMSException(e.toString());\n+            jmse.setLinkedException(e);\n+            throw jmse;\n         }\n     }\n \n@@ -112,19 +115,22 @@ private String getText() throws IOException\n         {\n             return null;\n         }\n+\n         int pos = _data.position();\n         _data.rewind();\n         // one byte left is for the end of frame marker\n         if (_data.remaining() == 0)\n         {\n             // this is really redundant since pos must be zero\n             _data.position(pos);\n+\n             return null;\n         }\n         else\n         {\n             String data = _data.getString(Charset.forName(\"UTF8\").newDecoder());\n             _data.position(pos);\n+\n             return data;\n         }\n     }", "filename": "client/src/main/java/org/apache/qpid/client/message/AbstractBytesMessage.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java", "sha": "f87b4027f6ccdbb25d8d7ac5215576950a9bb925", "changes": 12, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -23,6 +23,7 @@\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.Map;\n+import java.util.UUID;\n \n import javax.jms.Destination;\n import javax.jms.JMSException;\n@@ -32,12 +33,7 @@\n import org.apache.commons.collections.map.ReferenceMap;\n import org.apache.mina.common.ByteBuffer;\n import org.apache.qpid.AMQException;\n-import org.apache.qpid.client.AMQDestination;\n-import org.apache.qpid.client.AMQQueue;\n-import org.apache.qpid.client.AMQTopic;\n-import org.apache.qpid.client.AMQUndefinedDestination;\n-import org.apache.qpid.client.BasicMessageConsumer;\n-import org.apache.qpid.client.CustomJMSXProperty;\n+import org.apache.qpid.client.*;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n import org.apache.qpid.framing.FieldTable;\n@@ -123,7 +119,7 @@ public String getJMSMessageID() throws JMSException\n     {\n         if (getContentHeaderProperties().getMessageIdAsString() == null)\n         {\n-            getContentHeaderProperties().setMessageId(\"ID:\" + _deliveryTag);\n+            getContentHeaderProperties().setMessageId(\"ID:\" + UUID.randomUUID());\n         }\n \n         return getContentHeaderProperties().getMessageIdAsString();\n@@ -183,7 +179,7 @@ public Destination getJMSReplyTo() throws JMSException\n                 }\n                 catch (URLSyntaxException e)\n                 {\n-                    throw new JMSException(\"Illegal value in JMS_ReplyTo property: \" + replyToEncoding);\n+                    throw new JMSAMQException(\"Illegal value in JMS_ReplyTo property: \" + replyToEncoding, e);\n                 }\n \n                 _destinationCache.put(replyToEncoding, dest);", "filename": "client/src/main/java/org/apache/qpid/client/message/AbstractJMSMessage.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/message/JMSHeaderAdapter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/message/JMSHeaderAdapter.java", "sha": "348a0bd152142850f4a35c8e681a2b10470f3495", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/JMSHeaderAdapter.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -384,7 +384,9 @@ public void setObject(String string, Object object) throws JMSException\n         }\r\n         catch (AMQPInvalidClassException aice)\r\n         {\r\n-            throw new MessageFormatException(\"Only primatives are allowed object is:\" + object.getClass());\r\n+            MessageFormatException mfe = new MessageFormatException(\"Only primatives are allowed object is:\" + object.getClass());\r\n+            mfe.setLinkedException(aice);\r\n+            throw mfe;\r\n         }\r\n     }\r\n \r", "filename": "client/src/main/java/org/apache/qpid/client/message/JMSHeaderAdapter.java"}, {"additions": 18, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/message/JMSObjectMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/message/JMSObjectMessage.java", "sha": "caf8741280e0b676f41163c3f57bf63fe9c80f33", "changes": 28, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/message/JMSObjectMessage.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -33,6 +33,7 @@\n import javax.jms.ObjectMessage;\n \n import org.apache.mina.common.ByteBuffer;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.framing.BasicContentHeaderProperties;\n@@ -61,14 +62,15 @@ private JMSObjectMessage(ByteBuffer data)\n             _data = ByteBuffer.allocate(DEFAULT_BUFFER_SIZE);\n             _data.setAutoExpand(true);\n         }\n+\n         getContentHeaderProperties().setContentType(MIME_TYPE_SHORT_STRING);\n     }\n \n     /**\n      * Creates read only message for delivery to consumers\n      */\n-    JMSObjectMessage(long messageNbr, ContentHeaderBody contentHeader, AMQShortString exchange,\n-                     AMQShortString routingKey, ByteBuffer data) throws AMQException\n+    JMSObjectMessage(long messageNbr, ContentHeaderBody contentHeader, AMQShortString exchange, AMQShortString routingKey,\n+        ByteBuffer data) throws AMQException\n     {\n         super(messageNbr, (BasicContentHeaderProperties) contentHeader.properties, exchange, routingKey, data);\n     }\n@@ -79,6 +81,7 @@ public void clearBodyImpl() throws JMSException\n         {\n             _data.release();\n         }\n+\n         _data = null;\n \n     }\n@@ -116,11 +119,13 @@ public void setObject(Serializable serializable) throws JMSException\n         }\n         catch (IOException e)\n         {\n-            throw new MessageFormatException(\"Message not serializable: \" + e);\n+            MessageFormatException mfe = new MessageFormatException(\"Message not serializable: \" + e);\n+            mfe.setLinkedException(e);\n+            throw mfe;\n         }\n \n     }\n-  \n+\n     public Serializable getObject() throws JMSException\n     {\n         ObjectInputStream in = null;\n@@ -133,17 +138,20 @@ public Serializable getObject() throws JMSException\n         {\n             _data.rewind();\n             in = new ObjectInputStream(_data.asInputStream());\n+\n             return (Serializable) in.readObject();\n         }\n         catch (IOException e)\n         {\n-            e.printStackTrace();\n-            throw new MessageFormatException(\"Could not deserialize message: \" + e);\n+            MessageFormatException mfe = new MessageFormatException(\"Could not deserialize message: \" + e);\n+            mfe.setLinkedException(e);\n+            throw mfe;\n         }\n         catch (ClassNotFoundException e)\n         {\n-            e.printStackTrace();\n-            throw new MessageFormatException(\"Could not deserialize message: \" + e);\n+            MessageFormatException mfe = new MessageFormatException(\"Could not deserialize message: \" + e);\n+            mfe.setLinkedException(e);\n+            throw mfe;\n         }\n         finally\n         {\n@@ -162,8 +170,7 @@ private static void close(InputStream in)\n             }\n         }\n         catch (IOException ignore)\n-        {\n-        }\n+        { }\n     }\n \n     private static String toString(ByteBuffer data)\n@@ -172,6 +179,7 @@ private static String toString(ByteBuffer data)\n         {\n             return null;\n         }\n+\n         int pos = data.position();\n         try\n         {", "filename": "client/src/main/java/org/apache/qpid/client/message/JMSObjectMessage.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java", "sha": "5bc1555df79955cc1fccc092211c1a9afdf5304c", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -34,6 +34,7 @@\n import org.apache.qpid.AMQDisconnectedException;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.AMQTimeoutException;\n+import org.apache.qpid.AMQChannelClosedException;\n import org.apache.qpid.client.AMQConnection;\n import org.apache.qpid.client.AMQSession;\n import org.apache.qpid.client.SSLConfiguration;\n@@ -248,6 +249,12 @@ public void exceptionCaught(IoSession session, Throwable cause) throws Exception\n \n                 sessionClosed(session);\n             }\n+\n+            //FIXME Need to correctly handle other exceptions. Things like ...\n+//            if (cause instanceof AMQChannelClosedException)\n+            // which will cause the JMSSession to end due to a channel close and so that Session needs\n+            // to be removed from the map so we can correctly still call close without an exception when trying to close\n+            // the server closed session.  See also CloseChannelMethodHandler as the sessionClose is never called on exception\n         }\n         // we reach this point if failover was attempted and failed therefore we need to let the calling app\n         // know since we cannot recover the situation\n@@ -510,11 +517,6 @@ public void closeSession(AMQSession session) throws AMQException\n         _protocolSession.closeSession(session);\n     }\n \n-    public void closeConnection() throws AMQException\n-    {\n-        closeConnection(-1);\n-    }\n-\n     public void closeConnection(long timeout) throws AMQException\n     {\n         getStateManager().changeState(AMQState.CONNECTION_CLOSING);", "filename": "client/src/main/java/org/apache/qpid/client/protocol/AMQProtocolHandler.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/CallbackHandlerRegistry.properties", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/CallbackHandlerRegistry.properties", "sha": "89ee8337f827e3079f910454ba74dc28f1734593", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/security/CallbackHandlerRegistry.properties?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -16,5 +16,6 @@\n # specific language governing permissions and limitations\n # under the License.\n #\n+CallbackHandler.CRAM-MD5-HASHED=org.apache.qpid.client.security.UsernameHashedPasswordCallbackHandler\n CallbackHandler.CRAM-MD5=org.apache.qpid.client.security.UsernamePasswordCallbackHandler\n CallbackHandler.PLAIN=org.apache.qpid.client.security.UsernamePasswordCallbackHandler", "filename": "client/src/main/java/org/apache/qpid/client/security/CallbackHandlerRegistry.properties"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.java", "sha": "04db8044de999ff18a0390bb8fb0dbbb23c317e3", "changes": 33, "status": "modified", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,10 +20,6 @@\n  */\n package org.apache.qpid.client.security;\n \n-import java.io.BufferedInputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.Security;\n@@ -34,6 +30,7 @@\n \n import javax.security.sasl.SaslClientFactory;\n \n+\n import org.apache.log4j.Logger;\n \n import org.apache.qpid.util.FileUtils;\n@@ -50,14 +47,11 @@\n  * mechanism=fully.qualified.class.name\n  * </pre>\n  *\n- * <p/>Where mechanism is an IANA-registered mechanism name and the fully qualified class name refers to a\n- * class that implements javax.security.sasl.SaslClientFactory and provides the specified mechanism.\n+ * <p/>Where mechanism is an IANA-registered mechanism name and the fully qualified class name refers to a class that\n+ * implements javax.security.sasl.SaslClientFactory and provides the specified mechanism.\n  *\n- * <p><table id=\"crc\"><caption>CRC Card</caption>\n- * <tr><th> Responsibilities <th> Collaborations\n- * <tr><td> Parse SASL mechanism properties.\n- * <tr><td> Create and register security provider for SASL mechanisms.\n- * </table>\n+ * <p><table id=\"crc\"><caption>CRC Card</caption> <tr><th> Responsibilities <th> Collaborations <tr><td> Parse SASL\n+ * mechanism properties. <tr><td> Create and register security provider for SASL mechanisms. </table>\n  */\n public class DynamicSaslRegistrar\n {\n@@ -69,19 +63,16 @@\n     /** The default name of the SASL properties file resource. */\n     public static final String DEFAULT_RESOURCE_NAME = \"org/apache/qpid/client/security/DynamicSaslRegistrar.properties\";\n \n-    /**\n-     * Reads the properties file, and creates a dynamic security provider to register the SASL implementations\n-     * with.\n-     */\n+    /** Reads the properties file, and creates a dynamic security provider to register the SASL implementations with. */\n     public static void registerSaslProviders()\n     {\n         _logger.debug(\"public static void registerSaslProviders(): called\");\n \n         // Open the SASL properties file, using the default name is one is not specified.\n         String filename = System.getProperty(FILE_PROPERTY);\n         InputStream is =\n-            FileUtils.openFileOrDefaultResource(filename, DEFAULT_RESOURCE_NAME,\n-                                                DynamicSaslRegistrar.class.getClassLoader());\n+                FileUtils.openFileOrDefaultResource(filename, DEFAULT_RESOURCE_NAME,\n+                                                    DynamicSaslRegistrar.class.getClassLoader());\n \n         try\n         {\n@@ -94,7 +85,7 @@ public static void registerSaslProviders()\n \n             if (factories.size() > 0)\n             {\n-                Security.addProvider(new JCAProvider(factories));\n+                Security.insertProviderAt(new JCAProvider(factories), 0);\n                 _logger.debug(\"Dynamic SASL provider added as a security provider\");\n             }\n         }\n@@ -170,15 +161,15 @@ public static void registerSaslProviders()\n      * @return A map from SASL mechanism names to implementing client factory classes.\n      *\n      * @todo Why tree map here? Do really want mechanisms in alphabetical order? Seems more likely that the declared\n-     *       order of the mechanisms is intended to be preserved, so that they are registered in the declared order\n-     *       of preference. Consider LinkedHashMap instead.\n+     * order of the mechanisms is intended to be preserved, so that they are registered in the declared order of\n+     * preference. Consider LinkedHashMap instead.\n      */\n     private static Map<String, Class<? extends SaslClientFactory>> parseProperties(Properties props)\n     {\n         Enumeration e = props.propertyNames();\n \n         TreeMap<String, Class<? extends SaslClientFactory>> factoriesToRegister =\n-            new TreeMap<String, Class<? extends SaslClientFactory>>();\n+                new TreeMap<String, Class<? extends SaslClientFactory>>();\n \n         while (e.hasMoreElements())\n         {", "filename": "client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.properties", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.properties", "sha": "1bff43142b56b6448685c52d0b220972c12faff5", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.properties?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -17,3 +17,4 @@\n # under the License.\n #\n AMQPLAIN=org.apache.qpid.client.security.amqplain.AmqPlainSaslClientFactory\n+CRAM-MD5-HASHED=org.apache.qpid.client.security.crammd5hashed.CRAMMD5HashedSaslClientFactory", "filename": "client/src/main/java/org/apache/qpid/client/security/DynamicSaslRegistrar.properties"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/JCAProvider.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/JCAProvider.java", "sha": "5bf120454eed8c04ca46f0a63425efced688d4ac", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/security/JCAProvider.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -52,7 +52,7 @@ public JCAProvider(Map<String, Class<? extends SaslClientFactory>> providerMap)\n         super(\"AMQSASLProvider\", 1.0, \"A JCA provider that registers all \"\n               + \"AMQ SASL providers that want to be registered\");\n         register(providerMap);\n-        Security.addProvider(this);\n+//        Security.addProvider(this);\n     }\n \n     /**", "filename": "client/src/main/java/org/apache/qpid/client/security/JCAProvider.java"}, {"additions": 104, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/UsernameHashedPasswordCallbackHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/UsernameHashedPasswordCallbackHandler.java", "sha": "46323e8c09541e9450b601e5b733eb97ae9b3c3b", "changes": 104, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/security/UsernameHashedPasswordCallbackHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,104 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.client.security;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import javax.security.sasl.RealmCallback;\n+\n+import com.sun.crypto.provider.HmacMD5;\n+\n+import org.apache.log4j.Logger;\n+\n+import org.apache.qpid.client.protocol.AMQProtocolSession;\n+\n+public class UsernameHashedPasswordCallbackHandler implements AMQCallbackHandler\n+{\n+    private static final Logger _logger = Logger.getLogger(UsernameHashedPasswordCallbackHandler.class);\n+\n+    private AMQProtocolSession _protocolSession;\n+\n+    public void initialise(AMQProtocolSession protocolSession)\n+    {\n+        _protocolSession = protocolSession;\n+    }\n+\n+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException\n+    {\n+        for (int i = 0; i < callbacks.length; i++)\n+        {\n+            Callback cb = callbacks[i];\n+            if (cb instanceof NameCallback)\n+            {\n+                ((NameCallback) cb).setName(_protocolSession.getUsername());\n+            }\n+            else if (cb instanceof PasswordCallback)\n+            {\n+                try\n+                {\n+                    ((PasswordCallback) cb).setPassword(getHash(_protocolSession.getPassword()));\n+                }\n+                catch (NoSuchAlgorithmException e)\n+                {\n+                    UnsupportedCallbackException uce = new UnsupportedCallbackException(cb);\n+                    uce.initCause(e);\n+                    throw uce;\n+                }\n+            }\n+            else\n+            {\n+                throw new UnsupportedCallbackException(cb);\n+            }\n+        }\n+    }\n+\n+    private char[] getHash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException\n+    {\n+\n+        byte[] data = text.getBytes(\"utf-8\");\n+\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+\n+        for (byte b : data)\n+        {\n+            md.update(b);\n+        }\n+\n+        byte[] digest = md.digest();\n+\n+        char[] hash = new char[digest.length ];\n+\n+        int index = 0;\n+        for (byte b : digest)\n+        {            \n+            hash[index++] = (char) b;\n+        }\n+\n+        return hash;\n+    }\n+}", "filename": "client/src/main/java/org/apache/qpid/client/security/UsernameHashedPasswordCallbackHandler.java"}, {"additions": 72, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/crammd5hashed/CRAMMD5HashedSaslClientFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/security/crammd5hashed/CRAMMD5HashedSaslClientFactory.java", "sha": "22bb1ac1565fd0fb1d0594a22b4e01ae42cfa854", "changes": 72, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/security/crammd5hashed/CRAMMD5HashedSaslClientFactory.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,72 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.client.security.crammd5hashed;\n+\n+import org.apache.qpid.client.security.amqplain.AmqPlainSaslClient;\n+\n+import javax.security.sasl.SaslClientFactory;\n+import javax.security.sasl.SaslClient;\n+import javax.security.sasl.SaslException;\n+import javax.security.sasl.Sasl;\n+import javax.security.auth.callback.CallbackHandler;\n+import java.util.Map;\n+import java.security.Security;\n+\n+public class CRAMMD5HashedSaslClientFactory implements SaslClientFactory\n+{\n+    /** The name of this mechanism */\n+    public static final String MECHANISM = \"CRAM-MD5-HASHED\";\n+\n+\n+    public SaslClient createSaslClient(String[] mechanisms, String authorizationId, String protocol, String serverName, Map<String, ?> props, CallbackHandler cbh) throws SaslException\n+    {\n+        for (int i = 0; i < mechanisms.length; i++)\n+        {\n+            if (mechanisms[i].equals(MECHANISM))\n+            {\n+                if (cbh == null)\n+                {\n+                    throw new SaslException(\"CallbackHandler must not be null\");\n+                }\n+\n+                String[] mechs = {\"CRAM-MD5\"};\n+                return Sasl.createSaslClient(mechs, authorizationId, protocol, serverName, props, cbh);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public String[] getMechanismNames(Map props)\n+    {\n+        if (props != null)\n+        {\n+            if (props.containsKey(Sasl.POLICY_NOPLAINTEXT) ||\n+                props.containsKey(Sasl.POLICY_NODICTIONARY) ||\n+                props.containsKey(Sasl.POLICY_NOACTIVE))\n+            {\n+                // returned array must be non null according to interface documentation\n+                return new String[0];\n+            }\n+        }\n+\n+        return new String[]{MECHANISM};\n+    }\n+}", "filename": "client/src/main/java/org/apache/qpid/client/security/crammd5hashed/CRAMMD5HashedSaslClientFactory.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/transport/AMQNoTransportForProtocolException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/transport/AMQNoTransportForProtocolException.java", "sha": "1ec3adc2eb4125987a437cdcaa3687e2e425afe2", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/transport/AMQNoTransportForProtocolException.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -33,7 +33,7 @@ public AMQNoTransportForProtocolException(BrokerDetails details)\n \n     public AMQNoTransportForProtocolException(BrokerDetails details, String message)\n     {\n-        super(message);\n+        super(null, message, null);\n \n         _details = details;\n     }", "filename": "client/src/main/java/org/apache/qpid/client/transport/AMQNoTransportForProtocolException.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/transport/AMQTransportConnectionException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/transport/AMQTransportConnectionException.java", "sha": "fec7ff693cc6a0049613026b8371e615d204e687", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/transport/AMQTransportConnectionException.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -21,12 +21,12 @@\n package org.apache.qpid.client.transport;\n \n import org.apache.qpid.AMQException;\n+import org.apache.qpid.protocol.AMQConstant;\n \n public class AMQTransportConnectionException extends AMQException\n {\n-    public AMQTransportConnectionException(String message)\n+    public AMQTransportConnectionException(AMQConstant errorCode, String message, Throwable cause)\n     {\n-        super(message);\n-\n+        super(errorCode, message, cause);\n     }\n }", "filename": "client/src/main/java/org/apache/qpid/client/transport/AMQTransportConnectionException.java"}, {"additions": 50, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/transport/TransportConnection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/transport/TransportConnection.java", "sha": "0bc83e9804fcd57625c47cbd9108ff7a2baec5e4", "changes": 95, "status": "modified", "deletions": 45, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/transport/TransportConnection.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -26,12 +26,14 @@\n import java.util.Map;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.mina.common.IoConnector;\n import org.apache.mina.common.IoHandlerAdapter;\n import org.apache.mina.common.IoServiceConfig;\n import org.apache.mina.transport.socket.nio.SocketConnector;\n import org.apache.mina.transport.vmpipe.VmPipeAcceptor;\n import org.apache.mina.transport.vmpipe.VmPipeAddress;\n+\n import org.apache.qpid.client.AMQBrokerDetails;\n import org.apache.qpid.client.vmbroker.AMQVMBrokerCreationException;\n import org.apache.qpid.jms.BrokerDetails;\n@@ -64,13 +66,11 @@ public static ITransportConnection getInstance(BrokerDetails details) throws AMQ\n         int transport = getTransport(details.getTransport());\n \n         if (transport == -1)\n-\n         {\n             throw new AMQNoTransportForProtocolException(details);\n         }\n \n         if (transport == _currentInstance)\n-\n         {\n             if (transport == VM)\n             {\n@@ -88,40 +88,42 @@ public static ITransportConnection getInstance(BrokerDetails details) throws AMQ\n         _currentInstance = transport;\n \n         switch (transport)\n-\n         {\n-            case TCP:\n-                _instance = new SocketTransportConnection(new SocketTransportConnection.SocketConnectorFactory()\n-                {\n-                    public IoConnector newSocketConnector()\n+\n+        case TCP:\n+            _instance = new SocketTransportConnection(new SocketTransportConnection.SocketConnectorFactory()\n                     {\n-                        SocketConnector result;\n-                        //FIXME - this needs to be sorted to use the new Mina MultiThread SA.\n-                        if (Boolean.getBoolean(\"qpidnio\"))\n+                        public IoConnector newSocketConnector()\n                         {\n-                            _logger.fatal(\"Using Qpid NIO - sysproperty 'qpidnio' is set.\");\n-//                            result = new org.apache.qpid.nio.SocketConnector(); // non-blocking connector\n+                            SocketConnector result;\n+                            // FIXME - this needs to be sorted to use the new Mina MultiThread SA.\n+                            if (Boolean.getBoolean(\"qpidnio\"))\n+                            {\n+                                _logger.fatal(\"Using Qpid NIO - sysproperty 'qpidnio' is set.\");\n+                                // result = new org.apache.qpid.nio.SocketConnector(); // non-blocking connector\n+                            }\n+                            // else\n+\n+                            {\n+                                _logger.info(\"Using Mina NIO\");\n+                                result = new SocketConnector(); // non-blocking connector\n+                            }\n+\n+                            // Don't have the connector's worker thread wait around for other connections (we only use\n+                            // one SocketConnector per connection at the moment anyway). This allows short-running\n+                            // clients (like unit tests) to complete quickly.\n+                            result.setWorkerTimeout(0);\n+\n+                            return result;\n                         }\n-//                        else\n-                        {\n-                            _logger.info(\"Using Mina NIO\");\n-                            result = new SocketConnector(); // non-blocking connector\n-                        }\n-\n-                        // Don't have the connector's worker thread wait around for other connections (we only use\n-                        // one SocketConnector per connection at the moment anyway). This allows short-running\n-                        // clients (like unit tests) to complete quickly.\n-                        result.setWorkerTimeout(0);\n+                    });\n+            break;\n \n-                        return result;\n-                    }\n-                });\n-                break;\n-            case VM:\n-            {\n-                _instance = getVMTransport(details, Boolean.getBoolean(\"amqj.AutoCreateVMBroker\"));\n-                break;\n-            }\n+        case VM:\n+        {\n+            _instance = getVMTransport(details, Boolean.getBoolean(\"amqj.AutoCreateVMBroker\"));\n+            break;\n+        }\n         }\n \n         return _instance;\n@@ -142,7 +144,8 @@ private static int getTransport(String transport)\n         return -1;\n     }\n \n-    private static ITransportConnection getVMTransport(BrokerDetails details, boolean AutoCreate) throws AMQVMBrokerCreationException\n+    private static ITransportConnection getVMTransport(BrokerDetails details, boolean AutoCreate)\n+        throws AMQVMBrokerCreationException\n     {\n         int port = details.getPort();\n \n@@ -154,14 +157,14 @@ private static ITransportConnection getVMTransport(BrokerDetails details, boolea\n             }\n             else\n             {\n-                throw new AMQVMBrokerCreationException(port, \"VM Broker on port \" + port + \" does not exist. Auto create disabled.\");\n+                throw new AMQVMBrokerCreationException(null, port, \"VM Broker on port \" + port\n+                    + \" does not exist. Auto create disabled.\", null);\n             }\n         }\n \n         return new VmPipeTransportConnection(port);\n     }\n \n-\n     public static void createVMBroker(int port) throws AMQVMBrokerCreationException\n     {\n         if (_acceptor == null)\n@@ -192,7 +195,7 @@ public static void createVMBroker(int port) throws AMQVMBrokerCreationException\n             {\n                 _logger.error(e);\n \n-                //Try and unbind provider\n+                // Try and unbind provider\n                 try\n                 {\n                     VmPipeAddress pipe = new VmPipeAddress(port);\n@@ -203,7 +206,7 @@ public static void createVMBroker(int port) throws AMQVMBrokerCreationException\n                     }\n                     catch (Exception ignore)\n                     {\n-                        //ignore\n+                        // ignore\n                     }\n \n                     if (provider == null)\n@@ -227,7 +230,7 @@ public static void createVMBroker(int port) throws AMQVMBrokerCreationException\n                         because = e.getCause().toString();\n                     }\n \n-                    throw new AMQVMBrokerCreationException(port, because + \" Stopped binding of InVM Qpid.AMQP\");\n+                    throw new AMQVMBrokerCreationException(null, port, because + \" Stopped binding of InVM Qpid.AMQP\", e);\n                 }\n             }\n         }\n@@ -246,14 +249,14 @@ private static IoHandlerAdapter createBrokerInstance(int port) throws AMQVMBroke\n         // can't use introspection to get Provider as it is a server class.\n         // need to go straight to IoHandlerAdapter but that requries the queues and exchange from the ApplicationRegistry which we can't access.\n \n-        //get right constructor and pass in instancec ID - \"port\"\n+        // get right constructor and pass in instancec ID - \"port\"\n         IoHandlerAdapter provider;\n         try\n         {\n-            Class[] cnstr = {Integer.class};\n-            Object[] params = {port};\n+            Class[] cnstr = { Integer.class };\n+            Object[] params = { port };\n             provider = (IoHandlerAdapter) Class.forName(protocolProviderClass).getConstructor(cnstr).newInstance(params);\n-            //Give the broker a second to create\n+            // Give the broker a second to create\n             _logger.info(\"Created VMBroker Instance:\" + port);\n         }\n         catch (Exception e)\n@@ -270,8 +273,10 @@ private static IoHandlerAdapter createBrokerInstance(int port) throws AMQVMBroke\n                 because = e.getCause().toString();\n             }\n \n-\n-            throw new AMQVMBrokerCreationException(port, because + \" Stopped InVM Qpid.AMQP creation\");\n+            AMQVMBrokerCreationException amqbce =\n+                new AMQVMBrokerCreationException(null, port, because + \" Stopped InVM Qpid.AMQP creation\", null);\n+            amqbce.initCause(e);\n+            throw amqbce;\n         }\n \n         return provider;", "filename": "client/src/main/java/org/apache/qpid/client/transport/TransportConnection.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/vmbroker/AMQVMBrokerCreationException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/client/vmbroker/AMQVMBrokerCreationException.java", "sha": "4b2982fe9c85f6fbd3c6470ec81dab4b747f04a6", "changes": 16, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/vmbroker/AMQVMBrokerCreationException.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -21,19 +21,25 @@\n package org.apache.qpid.client.vmbroker;\n \n import org.apache.qpid.client.transport.AMQTransportConnectionException;\n+import org.apache.qpid.protocol.AMQConstant;\n \n public class AMQVMBrokerCreationException extends AMQTransportConnectionException\n {\n     private int _port;\n \n+    /**\n+     * @param port\n+     *\n+     * @deprecated\n+     */\n     public AMQVMBrokerCreationException(int port)\n     {\n-        this(port, \"Unable to create vm broker\");\n+        this(null, port, \"Unable to create vm broker\", null);\n     }\n \n-    public AMQVMBrokerCreationException(int port, String message)\n+    public AMQVMBrokerCreationException(AMQConstant errorCode, int port, String message, Throwable cause)\n     {\n-        super(message);\n+        super(errorCode, message, cause);\n         _port = port;\n     }\n ", "filename": "client/src/main/java/org/apache/qpid/client/vmbroker/AMQVMBrokerCreationException.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/jms/FailoverPolicy.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/main/java/org/apache/qpid/jms/FailoverPolicy.java", "sha": "6ad3fb4baed62c4aa0ad02780ac2151ae5145165", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/jms/FailoverPolicy.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -101,7 +101,7 @@ public FailoverPolicy(ConnectionURL connectionDetails)\n                     }\n                     catch (Exception cnfe)\n                     {\n-                        throw new IllegalArgumentException(\"Unknown failover method:\" + failoverMethod);\n+                        throw new IllegalArgumentException(\"Unknown failover method:\" + failoverMethod, cnfe);\n                     }\n                 }\n             }", "filename": "client/src/main/java/org/apache/qpid/jms/FailoverPolicy.java"}, {"additions": 41, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/client/MessageListenerMultiConsumerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/client/MessageListenerMultiConsumerTest.java", "sha": "794fd5c8c1ce331468178e66186a06675c59448e", "changes": 60, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/client/MessageListenerMultiConsumerTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -65,6 +65,7 @@\n \n     private final CountDownLatch _allMessagesSent = new CountDownLatch(2); //all messages Sent Lock\n \n+\n     protected void setUp() throws Exception\n     {\n         super.setUp();\n@@ -122,30 +123,39 @@ protected void tearDown() throws Exception\n         TransportConnection.killAllVMBrokers();\n     }\n \n+//    public void testRecieveC1thenC2() throws Exception\n+//    {\n+//\n+//        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n+//        {\n+//\n+//            assertTrue(_consumer1.receive() != null);\n+//        }\n+//\n+//        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n+//        {\n+//            assertTrue(_consumer2.receive() != null);\n+//        }\n+//    }\n \n-    public void testRecieveC1thenC2() throws Exception\n+    public void testRecieveInterleaved() throws Exception\n     {\n-\n-        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n+        int msg = 0;\n+        int MAX_LOOPS = MSG_COUNT * 2;\n+        for (int loops = 0; msg < MSG_COUNT || loops < MAX_LOOPS; loops++)\n         {\n \n-            assertTrue(_consumer1.receive() != null);\n-        }\n-\n-        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n-        {\n-            assertTrue(_consumer2.receive() != null);\n+            if (_consumer1.receive(100) != null)\n+            {\n+                msg++;\n+            }\n+            if (_consumer2.receive(100) != null)\n+            {\n+                msg++;\n+            }\n         }\n-    }\n-\n-    public void testRecieveInterleaved() throws Exception\n-    {\n \n-        for (int msg = 0; msg < MSG_COUNT / 2; msg++)\n-        {\n-            assertTrue(_consumer1.receive() != null);\n-            assertTrue(_consumer2.receive() != null);\n-        }\n+        assertEquals(\"Not all messages received.\", MSG_COUNT, msg);\n     }\n \n \n@@ -161,7 +171,7 @@ public void onMessage(Message message)\n \n                 if (receivedCount1 == MSG_COUNT / 2)\n                 {\n-                    _allMessagesSent.countDown();                    \n+                    _allMessagesSent.countDown();\n                 }\n \n             }\n@@ -196,6 +206,18 @@ public void onMessage(Message message)\n         assertEquals(MSG_COUNT, receivedCount1 + receivedCount2);\n     }\n \n+    public void testRecieveC2Only_OnlyRunWith_REGISTER_CONSUMERS_FLOWED() throws Exception\n+    {\n+        if (Boolean.parseBoolean(System.getProperties().getProperty(\"REGISTER_CONSUMERS_FLOWED\", \"false\")))\n+        {\n+            for (int msg = 0; msg < MSG_COUNT; msg++)\n+            {\n+                assertTrue(MSG_COUNT + \" msg should be received. Only received:\" + msg,\n+                           _consumer2.receive(1000) != null);\n+            }\n+        }\n+    }\n+\n \n     public static junit.framework.Test suite()\n     {", "filename": "client/src/test/java/org/apache/qpid/client/MessageListenerMultiConsumerTest.java"}, {"additions": 30, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java", "sha": "7b5957ac8cad9272f6dc8f3e0d1befb01b3405be", "changes": 30, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/client/MessageListenerTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -144,6 +144,36 @@ public void testAsynchronousRecieve() throws Exception\n \n     }\n \n+    public void testRecieveTheUseMessageListener() throws Exception\n+     {\n+\n+         _logger.error(\"Test disabled as initial receive is not called first\");\n+         // Perform initial receive to start connection\n+//         assertTrue(_consumer.receive(2000) != null);\n+//         receivedCount++;\n+\n+         // Sleep to ensure remaining 4 msgs end up on _synchronousQueue\n+//         Thread.sleep(1000);\n+\n+         // Set the message listener and wait for the messages to come in.\n+         _consumer.setMessageListener(this);\n+\n+         _logger.info(\"Waiting 3 seconds for messages\");\n+\n+         try\n+         {\n+             _awaitMessages.await(3000, TimeUnit.MILLISECONDS);\n+         }\n+         catch (InterruptedException e)\n+         {\n+             //do nothing\n+         }\n+         //Should have recieved all async messages\n+         assertEquals(MSG_COUNT, receivedCount);\n+\n+     }\n+    \n+\n     public void onMessage(Message message)\n     {\n         _logger.info(\"Received Message(\" + receivedCount + \"):\" + message);", "filename": "client/src/test/java/org/apache/qpid/client/MessageListenerTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/client/ResetMessageListenerTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/client/ResetMessageListenerTest.java", "sha": "42594fff8ee8dfcf0a6d8c2f239dca7205fb470b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/client/ResetMessageListenerTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -83,7 +83,7 @@ protected void setUp() throws Exception\n         Hashtable<String, String> env = new Hashtable<String, String>();\n \n         env.put(\"connectionfactory.connection\", \"amqp://guest:guest@MLT_ID/test?brokerlist='vm://:1'\");\n-        env.put(\"queue.queue\", \"direct://amq.direct//MessageListenerTest\");\n+        env.put(\"queue.queue\", \"direct://amq.direct//ResetMessageListenerTest\");\n \n         _context = factory.getInitialContext(env);\n ", "filename": "client/src/test/java/org/apache/qpid/client/ResetMessageListenerTest.java"}, {"additions": 109, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/test/unit/basic/InvalidDestinationTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/test/unit/basic/InvalidDestinationTest.java", "sha": "1b5da2631d1467307ea7c02f21097a248435ff43", "changes": 109, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/basic/InvalidDestinationTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,109 @@\n+package org.apache.qpid.test.unit.basic;\r\n+\r\n+import org.apache.qpid.client.AMQConnection;\r\n+import org.apache.qpid.client.AMQDestination;\r\n+import org.apache.qpid.client.AMQSession;\r\n+import org.apache.qpid.client.AMQQueue;\r\n+import org.apache.qpid.client.vmbroker.AMQVMBrokerCreationException;\r\n+import org.apache.qpid.client.transport.TransportConnection;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+import javax.jms.MessageConsumer;\r\n+import javax.jms.Session;\r\n+import javax.jms.QueueSession;\r\n+import javax.jms.Queue;\r\n+import javax.jms.QueueSender;\r\n+import javax.jms.TextMessage;\r\n+import javax.jms.InvalidDestinationException;\r\n+\r\n+public class InvalidDestinationTest extends TestCase\r\n+{\r\n+    private AMQConnection _connection;\r\n+    private AMQDestination _destination;\r\n+    private AMQSession _session;\r\n+    private MessageConsumer _consumer;\r\n+\r\n+    private static final String VM_BROKER = \"vm://:1\";\r\n+\r\n+\r\n+    protected void setUp() throws Exception\r\n+    {\r\n+        super.setUp();\r\n+        createVMBroker();\r\n+        _connection = new AMQConnection(VM_BROKER, \"guest\", \"guest\", \"ReceiveTestClient\", \"test\");\r\n+    }\r\n+\r\n+    public void createVMBroker()\r\n+    {\r\n+        try\r\n+        {\r\n+            TransportConnection.createVMBroker(1);\r\n+        }\r\n+        catch (AMQVMBrokerCreationException e)\r\n+        {\r\n+            fail(\"Unable to create broker: \" + e);\r\n+        }\r\n+    }\r\n+\r\n+    protected void tearDown() throws Exception\r\n+    {\r\n+        _connection.close();\r\n+        TransportConnection.killVMBroker(1);\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+\r\n+\r\n+    public void testInvalidDestination() throws Exception\r\n+    {\r\n+        Queue invalidDestination = new AMQQueue(\"amq.direct\",\"unknownQ\");\r\n+        AMQQueue validDestination = new AMQQueue(\"amq.direct\",\"knownQ\");\r\n+        QueueSession queueSession = _connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\r\n+\r\n+        // This is the only easy way to create and bind a queue from the API :-(\r\n+        MessageConsumer consumer = queueSession.createConsumer(validDestination);\r\n+\r\n+        QueueSender sender = queueSession.createSender(invalidDestination);\r\n+        TextMessage msg = queueSession.createTextMessage(\"Hello\");\r\n+        try\r\n+        {\r\n+            sender.send(msg);\r\n+            fail(\"Expected InvalidDestinationException\");\r\n+        }\r\n+        catch (InvalidDestinationException ex)\r\n+        {\r\n+            // pass\r\n+        }\r\n+        sender.close();\r\n+\r\n+        sender = queueSession.createSender(null);\r\n+        invalidDestination = new AMQQueue(\"amq.direct\",\"unknownQ\");\r\n+\r\n+        try\r\n+        {\r\n+            sender.send(invalidDestination,msg);\r\n+            fail(\"Expected InvalidDestinationException\");\r\n+        }\r\n+        catch (InvalidDestinationException ex)\r\n+        {\r\n+            // pass\r\n+        }\r\n+        sender.send(validDestination,msg);\r\n+        sender.close();\r\n+        validDestination = new AMQQueue(\"amq.direct\",\"knownQ\");\r\n+        sender = queueSession.createSender(validDestination);\r\n+        sender.send(msg);\r\n+\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+\r\n+    public static junit.framework.Test suite()\r\n+    {\r\n+\r\n+        return new junit.framework.TestSuite(InvalidDestinationTest.class);\r\n+    }\r\n+}\r", "filename": "client/src/test/java/org/apache/qpid/test/unit/basic/InvalidDestinationTest.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/test/unit/close/MessageRequeueTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/test/unit/close/MessageRequeueTest.java", "sha": "62234ad21f51eb6de02bb2908a7b04412a3dc3cd", "changes": 13, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/close/MessageRequeueTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -330,7 +330,7 @@ public Integer getId()\n     public void testRequeue() throws JMSException, AMQException, URLSyntaxException\n     {\n         int run = 0;\n-        while (run < 10)\n+//        while (run < 10)\n         {\n             run++;\n \n@@ -350,17 +350,10 @@ public void testRequeue() throws JMSException, AMQException, URLSyntaxException\n             _logger.debug(\"Create Consumer\");\n             MessageConsumer consumer = session.createConsumer(q);\n \n-            try\n-            {\n-                Thread.sleep(2000);\n-            }\n-            catch (InterruptedException e)\n-            {\n-                //\n-            }\n+            conn.start();\n \n             _logger.debug(\"Receiving msg\");\n-            Message msg = consumer.receive(1000);\n+            Message msg = consumer.receive(2000);\n \n             assertNotNull(\"Message should not be null\", msg);\n ", "filename": "client/src/test/java/org/apache/qpid/test/unit/close/MessageRequeueTest.java"}, {"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java", "sha": "190b3861f02a528e5cc6acb26af08ae4bbb2ef4a", "changes": 16, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -100,7 +100,9 @@ public void testDurability() throws AMQException, JMSException, URLSyntaxExcepti\n         AMQTopic topic = new AMQTopic(con,\"MyTopic\");\n         Session session1 = con.createSession(false, AMQSession.NO_ACKNOWLEDGE);\n         MessageConsumer consumer1 = session1.createConsumer(topic);\n-        MessageProducer producer = session1.createProducer(topic);\n+\n+        Session sessionProd = con.createSession(false, AMQSession.NO_ACKNOWLEDGE);\n+        MessageProducer producer = sessionProd.createProducer(topic);\n \n         Session session2 = con.createSession(false, AMQSession.NO_ACKNOWLEDGE);\n         TopicSubscriber consumer2 = session2.createDurableSubscriber(topic, \"MySubscription\");\n@@ -112,12 +114,12 @@ public void testDurability() throws AMQException, JMSException, URLSyntaxExcepti\n         Message msg;\n         msg = consumer1.receive();\n         assertEquals(\"A\", ((TextMessage) msg).getText());\n-        msg = consumer1.receive(1000);\n+        msg = consumer1.receive(100);\n         assertEquals(null, msg);\n \n         msg = consumer2.receive();\n         assertEquals(\"A\", ((TextMessage) msg).getText());\n-        msg = consumer2.receive(1000);\n+        msg = consumer2.receive(100);\n         assertEquals(null, msg);\n \n         consumer2.close();\n@@ -127,14 +129,14 @@ public void testDurability() throws AMQException, JMSException, URLSyntaxExcepti\n \n         producer.send(session1.createTextMessage(\"B\"));\n \n-        msg = consumer1.receive();\n+        msg = consumer1.receive(100);\n         assertEquals(\"B\", ((TextMessage) msg).getText());\n-        msg = consumer1.receive(1000);\n+        msg = consumer1.receive(100);\n         assertEquals(null, msg);\n \n-        msg = consumer3.receive();\n+        msg = consumer3.receive(100);\n         assertEquals(\"B\", ((TextMessage) msg).getText());\n-        msg = consumer3.receive(1000);\n+        msg = consumer3.receive(100);\n         assertEquals(null, msg);\n \n         con.close();", "filename": "client/src/test/java/org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java"}, {"additions": 63, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java", "sha": "685fe20048fe2c0799445d13d0a44fa29c5acefe", "changes": 76, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -53,12 +53,15 @@\n     Queue _jmsQueue;\n \n     private static final Logger _logger = Logger.getLogger(CommitRollbackTest.class);\n+    private static final String BROKER = \"vm://:1\";\n \n     protected void setUp() throws Exception\n     {\n         super.setUp();\n-        TransportConnection.createVMBroker(1);\n-\n+        if (BROKER.startsWith(\"vm\"))\n+        {\n+            TransportConnection.createVMBroker(1);\n+        }\n         testMethod++;\n         queue += testMethod;\n \n@@ -68,7 +71,7 @@ protected void setUp() throws Exception\n \n     private void newConnection() throws AMQException, URLSyntaxException, JMSException\n     {\n-        conn = new AMQConnection(\"amqp://guest:guest@client/test?brokerlist='vm://:1'\");\n+        conn = new AMQConnection(\"amqp://guest:guest@client/test?brokerlist='\" + BROKER + \"'\");\n \n         _session = conn.createSession(true, Session.CLIENT_ACKNOWLEDGE);\n \n@@ -87,7 +90,10 @@ protected void tearDown() throws Exception\n         super.tearDown();\n \n         conn.close();\n-        TransportConnection.killVMBroker(1);\n+        if (BROKER.startsWith(\"vm\"))\n+        {\n+            TransportConnection.killVMBroker(1);\n+        }\n     }\n \n     /**\n@@ -261,7 +267,7 @@ public void testGetThenRollback() throws Exception\n         assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n \n         _logger.info(\"sending test message\");\n-        String MESSAGE_TEXT = \"testGetThenDisconnect\";\n+        String MESSAGE_TEXT = \"testGetThenRollback\";\n         _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n \n         _pubSession.commit();\n@@ -394,16 +400,60 @@ public void testSend2ThenCloseAfter1andTryAgain() throws Exception\n         _logger.info(\"receiving result\");\n         result = _consumer.receive(1000);\n         assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n-        assertEquals(\"1\", ((TextMessage) result).getText());\n-        assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n-\n-        result = _consumer.receive(1000);\n-        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n-        assertEquals(\"2\", ((TextMessage) result).getText());\n-        assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n-\n+        if (result.getJMSRedelivered())\n+        {\n+            assertEquals(\"1\", ((TextMessage) result).getText());\n+\n+            result = _consumer.receive(1000);\n+            assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+            assertEquals(\"2\", ((TextMessage) result).getText());\n+            assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n+        }\n+        else\n+        {\n+            assertEquals(\"2\", ((TextMessage) result).getText());\n+            assertTrue(\"Messasge is marked as redelivered\" + result, !result.getJMSRedelivered());\n+\n+            result = _consumer.receive(1000);\n+            assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+            assertEquals(\"1\", ((TextMessage) result).getText());\n+            assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());\n+\n+        }\n         result = _consumer.receive(1000);\n         assertNull(\"test message should be null:\" + result, result);\n+\n+    }\n+\n+\n+    public void testPutThenRollbackThenGet() throws Exception\n+    {\n+        assertTrue(\"session is not transacted\", _session.getTransacted());\n+        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+\n+        _logger.info(\"sending test message\");\n+        String MESSAGE_TEXT = \"testPutThenRollbackThenGet\";\n+\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+        _pubSession.commit();\n+\n+        assertNotNull(_consumer.receive(100));\n+\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _logger.info(\"rolling back\");\n+        _pubSession.rollback();\n+\n+        _logger.info(\"receiving result\");\n+        Message result = _consumer.receive(1000);\n+        assertNull(\"test message was put and rolled back, but is still present\", result);\n+\n+        _publisher.send(_pubSession.createTextMessage(MESSAGE_TEXT));\n+\n+        _pubSession.commit();\n+\n+        assertNotNull(_consumer.receive(100));\n+\n     }\n \n }", "filename": "client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/testutil/Config.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/testutil/Config.java", "sha": "b777cf93b6776aafa42e2c9a79d005ed49d2c105", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/testutil/Config.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -172,7 +172,7 @@ else if(\"-port\".equalsIgnoreCase(key))\n             }\n             catch(NumberFormatException e)\n             {\n-                throw new RuntimeException(\"Bad port number: \" + value);\n+                throw new RuntimeException(\"Bad port number: \" + value, e);\n             }\n         }\n         else if(\"-name\".equalsIgnoreCase(key))", "filename": "client/src/test/java/org/apache/qpid/testutil/Config.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/testutil/QpidClientConnection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/client/src/test/java/org/apache/qpid/testutil/QpidClientConnection.java", "sha": "195ed79dab5dd0f36fb3dacfc2c20b2186352521", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/testutil/QpidClientConnection.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -3,6 +3,7 @@\n import org.apache.qpid.client.AMQConnectionFactory;\n import org.apache.qpid.client.AMQConnectionURL;\n import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.JMSAMQException;\n import org.apache.qpid.url.URLSyntaxException;\n import org.apache.log4j.Logger;\n \n@@ -70,7 +71,7 @@ public void connect() throws JMSException\n             }\n             catch (URLSyntaxException e)\n             {\n-                throw new JMSException(\"URL syntax error in [\" + brokerUrl + \"]: \" + e.getMessage());\n+                throw new JMSAMQException(\"URL syntax error in [\" + brokerUrl + \"]: \" + e.getMessage(), e);\n             }\n         }\n     }", "filename": "client/src/test/java/org/apache/qpid/testutil/QpidClientConnection.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/bin/qpid-run", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/bin/qpid-run", "sha": "fe8fd0e9cc864bd36627e28f086f9dd177fb2f7b", "changes": 17, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/bin/qpid-run?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -106,15 +106,20 @@ usage() {\n export EXTERNAL_CLASSPATH=$CLASSPATH\n unset CLASSPATH\n \n-conf=$QPID_HOME/etc/$program.conf\n-if [ ! -e $conf ]; then\n-  conf=$QPID_HOME/etc/$(basename ${sourced}).conf\n+#Use QPID_CLASSPATH if set\n+if [ -n \"$QPID_CLASSPATH\" ]; then\n+    export CLASSPATH=$QPID_CLASSPATH\n+    echo \"Using QPID_CLASSPATH\" $QPID_CLASSPATH\n+else\n+    echo \"Warning: Qpid classpath not set. CLASSPATH must include qpid jars.\"\n fi\n \n-if [ -r $conf ]; then\n-  . $conf\n+#Use QPID_JAVA_MEM if set\n+if [ -n \"$QPID_JAVA_MEM\" ]; then\n+    export JAVA_MEM=$QPID_JAVA_MEM\n+    echo \"Using QPID_JAVA_MEM setting\" $QPID_JAVA_MEM\n else\n-  die \"unable to source $conf\"\n+    echo \"Info: QPID_JAVA_MEM not set. Defaulting to JAVA_MEM\" $JAVA_MEM\n fi\n \n declare -a RUN_ARGS JAVA_ARGS", "filename": "common/bin/qpid-run"}, {"additions": 50, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/AMQException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/AMQException.java", "sha": "3e93243a1dae2b3fa2d8923ba8cacfe38987ea7b", "changes": 58, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/AMQException.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -23,37 +23,74 @@\n import org.apache.log4j.Logger;\n import org.apache.qpid.protocol.AMQConstant;\n \n-/** Generic AMQ exception. */\n+/**\n+ * AMQException forms the root exception of all exceptions relating to the AMQ protocol. It provides space to associate\n+ * an AMQ error code with the exception, which is a numberic value, with a meaning defined by the protocol.\n+ *\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\n+ * <tr><th> Responsibilities <th> Collaborations\n+ * <tr><td> Represents an exception condition associated with an AMQ protocol error code.\n+ * </table>\n+ *\n+ * @todo This exception class is also used as a generic exception throughout Qpid code. This usage may not be strictly\n+ *       correct if this is to signify a protocol exception. Should review.\n+ */\n public class AMQException extends Exception\n {\n+    /** Holds the AMQ error code constant associated with this exception. */\n     private AMQConstant _errorCode;\n \n+    /**\n+     * Creates an exception with an optional error code, optional message and optional underlying cause.\n+     *\n+     * @param errorCode The error code. May be null if not to be set.\n+     * @param msg       The exception message. May be null if not to be set.\n+     * @param t         The underlying cause of the exception. May be null if not to be set.\n+     */\n+    public AMQException(AMQConstant errorCode, String msg, Throwable t)\n+    {\n+        super(((msg == null) ? \"\" : msg) + ((errorCode == null) ? \"\" : (\" [error code \" + errorCode + \"]\")), t);\n+        _errorCode = errorCode;\n+    }\n+\n+    /**\n+     * @param message\n+     *\n+     * @deprecated Use {@link #AMQException(org.apache.qpid.protocol.AMQConstant, String, Throwable)} instead.\n+     */\n     public AMQException(String message)\n     {\n         super(message);\n         //fixme This method needs removed and all AMQExceptions need a valid error code\n         _errorCode = AMQConstant.getConstant(-1);\n     }\n \n+    /**\n+     * @param msg\n+     * @param t\n+     *\n+     * @deprecated Use {@link #AMQException(org.apache.qpid.protocol.AMQConstant, String, Throwable)} instead.\n+     */\n     public AMQException(String msg, Throwable t)\n     {\n         super(msg, t);\n         //fixme This method needs removed and all AMQExceptions need a valid error code\n         _errorCode = AMQConstant.getConstant(-1);\n     }\n \n-    public AMQException(AMQConstant errorCode, String msg, Throwable t)\n-    {\n-        super(msg + \" [error code \" + errorCode + ']', t);\n-        _errorCode = errorCode;\n-    }\n-\n+    /**\n+     * @param errorCode\n+     * @param msg\n+     *\n+     * @deprecated Use {@link #AMQException(org.apache.qpid.protocol.AMQConstant, String, Throwable)} instead.\n+     */\n     public AMQException(AMQConstant errorCode, String msg)\n     {\n         super(msg + \" [error code \" + errorCode + ']');\n         _errorCode = errorCode;\n     }\n \n+    /*\n     public AMQException(Logger logger, String msg, Throwable t)\n     {\n         this(msg, t);\n@@ -71,10 +108,15 @@ public AMQException(Logger logger, AMQConstant errorCode, String msg)\n         this(errorCode, msg);\n         logger.error(getMessage(), this);\n     }\n+    */\n \n+    /**\n+     * Gets the AMQ protocol exception code associated with this exception.\n+     *\n+     * @return The AMQ protocol exception code associated with this exception.\n+     */\n     public AMQConstant getErrorCode()\n     {\n         return _errorCode;\n     }\n-\n }", "filename": "common/src/main/java/org/apache/qpid/AMQException.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/configuration/PropertyException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/configuration/PropertyException.java", "sha": "7c85a08e110a746060e4ca8695657f25f7a56aa9", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/configuration/PropertyException.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,3 +1,4 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -7,9 +8,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -21,6 +22,7 @@\n package org.apache.qpid.configuration;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.qpid.AMQException;\n import org.apache.qpid.protocol.AMQConstant;\n \n@@ -49,7 +51,7 @@ public PropertyException(AMQConstant errorCode, String msg)\n         super(errorCode, msg);\n     }\n \n-    public PropertyException(Logger logger, String msg, Throwable t)\n+    /*public PropertyException(Logger logger, String msg, Throwable t)\n     {\n         super(logger, msg, t);\n     }\n@@ -62,5 +64,5 @@ public PropertyException(Logger logger, String msg)\n     public PropertyException(Logger logger, AMQConstant errorCode, String msg)\n     {\n         super(logger, errorCode, msg);\n-    }\n+    }*/\n }", "filename": "common/src/main/java/org/apache/qpid/configuration/PropertyException.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/AMQDataBlockDecoder.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/AMQDataBlockDecoder.java", "sha": "9f36448986033971aead9ad8acfb0373f5088e39", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/AMQDataBlockDecoder.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -94,7 +94,7 @@ protected Object createAndPopulateFrame(IoSession session, ByteBuffer in)\n \n         if(bodyFactory == null)\n         {\n-            throw new AMQFrameDecodingException(\"Unsupported frame type: \" + type);\n+            throw new AMQFrameDecodingException(null, \"Unsupported frame type: \" + type, null);\n         }\n \n         final int channel = in.getUnsignedShort();\n@@ -103,8 +103,8 @@ protected Object createAndPopulateFrame(IoSession session, ByteBuffer in)\n         // bodySize can be zero\n         if (channel < 0 || bodySize < 0)\n         {\n-            throw new AMQFrameDecodingException(\"Undecodable frame: type = \" + type + \" channel = \" + channel +\n-                                                \" bodySize = \" + bodySize);\n+            throw new AMQFrameDecodingException(null, \"Undecodable frame: type = \" + type + \" channel = \" + channel +\n+                                                \" bodySize = \" + bodySize, null);\n         }\n \n         AMQFrame frame = new AMQFrame(in, channel, bodySize, bodyFactory);\n@@ -113,7 +113,7 @@ protected Object createAndPopulateFrame(IoSession session, ByteBuffer in)\n         byte marker = in.get();\n         if ((marker & 0xFF) != 0xCE)\n         {\n-            throw new AMQFrameDecodingException(\"End of frame marker not found. Read \" + marker + \" length=\" + bodySize + \" type=\" + type);\n+            throw new AMQFrameDecodingException(null, \"End of frame marker not found. Read \" + marker + \" length=\" + bodySize + \" type=\" + type, null);\n         }\n         return frame;\n     }", "filename": "common/src/main/java/org/apache/qpid/framing/AMQDataBlockDecoder.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/AMQFrameDecodingException.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/AMQFrameDecodingException.java", "sha": "c462dec2a3978890772844d6ca6409087b78ee08", "changes": 20, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/AMQFrameDecodingException.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,3 +1,4 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -7,9 +8,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -21,28 +22,29 @@\n package org.apache.qpid.framing;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.qpid.AMQException;\n+import org.apache.qpid.protocol.AMQConstant;\n \n public class AMQFrameDecodingException extends AMQException\n {\n-    public AMQFrameDecodingException(String message)\n+    /*public AMQFrameDecodingException(String message)\n     {\n         super(message);\n-    }\n+    }*/\n \n-    public AMQFrameDecodingException(String message, Throwable t)\n+    public AMQFrameDecodingException(AMQConstant errorCode, String message, Throwable t)\n     {\n-        super(message, t);\n+        super(errorCode, message, t);\n     }\n \n-    public AMQFrameDecodingException(Logger log, String message)\n+    /*public AMQFrameDecodingException(Logger log, String message)\n     {\n         super(log, message);\n     }\n \n     public AMQFrameDecodingException(Logger log, String message, Throwable t)\n     {\n         super(log, message, t);\n-    }\n-\n+    }*/\n }", "filename": "common/src/main/java/org/apache/qpid/framing/AMQFrameDecodingException.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/AMQShortString.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/AMQShortString.java", "sha": "f2492585bcaf5838c1de5ea953690ea09b6e9afe", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/AMQShortString.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -9,7 +9,7 @@\n  * and thus can be held more effectively in a byte buffer.\r\n  *\r\n  */\r\n-public final class AMQShortString implements CharSequence\r\n+public final class AMQShortString implements CharSequence, Comparable<AMQShortString>\r\n {\r\n     private static final Logger _logger = Logger.getLogger(AMQShortString.class);\r\n \r", "filename": "common/src/main/java/org/apache/qpid/framing/AMQShortString.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/BasicContentHeaderProperties.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/BasicContentHeaderProperties.java", "sha": "008afb490e561d556c108b1bc112ead39454f87d", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/BasicContentHeaderProperties.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -341,7 +341,7 @@ private void decode(ByteBuffer buffer)\n         }\n         catch (AMQFrameDecodingException e)\n         {\n-            throw new RuntimeException(\"Error in content header data: \" + e);\n+            throw new RuntimeException(\"Error in content header data: \" + e, e);\n         }\n \n         final int endPos = buffer.position();\n@@ -381,7 +381,7 @@ private void decodeUpToHeaders()\n         }\n         catch (AMQFrameDecodingException e)\n         {\n-            throw new RuntimeException(\"Error in content header data: \" + e);\n+            throw new RuntimeException(\"Error in content header data: \" + e, e);\n         }\n     }\n ", "filename": "common/src/main/java/org/apache/qpid/framing/BasicContentHeaderProperties.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/ContentHeaderPropertiesFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/ContentHeaderPropertiesFactory.java", "sha": "712eb437dbf6797f6abff59a3046e9de7d53e49a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/ContentHeaderPropertiesFactory.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -49,7 +49,7 @@ public ContentHeaderProperties createContentHeaderProperties(int classId, int pr\n         }\n         else\n         {\n-        \tthrow new AMQFrameDecodingException(\"Unsupport content header class id: \" + classId);\n+        \tthrow new AMQFrameDecodingException(null, \"Unsupport content header class id: \" + classId, null);\n         }\n         properties.populatePropertiesFromBuffer(buffer, propertyFlags, size);\n         return properties;", "filename": "common/src/main/java/org/apache/qpid/framing/ContentHeaderPropertiesFactory.java"}, {"additions": 102, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/EncodingUtils.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/EncodingUtils.java", "sha": "f0cdda487c13adcac55d599b66bca76ee8d3481b", "changes": 261, "status": "modified", "deletions": 159, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/EncodingUtils.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -23,6 +23,7 @@\n import java.nio.charset.Charset;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.mina.common.ByteBuffer;\n \n public class EncodingUtils\n@@ -49,96 +50,95 @@ public static int encodedShortStringLength(String s)\n         }\n     }\n \n-\n     public static int encodedShortStringLength(short s)\n     {\n-        if( s == 0 )\n+        if (s == 0)\n         {\n             return 1 + 1;\n         }\n \n         int len = 0;\n-        if(s < 0)\n+        if (s < 0)\n         {\n-            len=1;\n+            len = 1;\n             // sloppy - doesn't work of Integer.MIN_VALUE\n-            s=(short)-s;\n+            s = (short) -s;\n         }\n \n-        if(s>9999)\n+        if (s > 9999)\n         {\n-            return 1+5;\n+            return 1 + 5;\n         }\n-        else if(s>999)\n+        else if (s > 999)\n         {\n-            return 1+4;\n+            return 1 + 4;\n         }\n-        else if(s>99)\n+        else if (s > 99)\n         {\n-            return 1+3;\n+            return 1 + 3;\n         }\n-        else if(s>9)\n+        else if (s > 9)\n         {\n-            return 1+2;\n+            return 1 + 2;\n         }\n         else\n         {\n-            return 1+1;\n+            return 1 + 1;\n         }\n \n     }\n \n-\n     public static int encodedShortStringLength(int i)\n     {\n-        if( i == 0 )\n+        if (i == 0)\n         {\n             return 1 + 1;\n         }\n \n         int len = 0;\n-        if(i < 0)\n+        if (i < 0)\n         {\n-            len=1;\n+            len = 1;\n             // sloppy - doesn't work of Integer.MIN_VALUE\n-            i=-i;\n+            i = -i;\n         }\n \n         // range is now 1 - 2147483647\n-        if(i < Short.MAX_VALUE)\n+        if (i < Short.MAX_VALUE)\n         {\n-            return len + encodedShortStringLength((short)i);\n+            return len + encodedShortStringLength((short) i);\n         }\n         else if (i > 999999)\n         {\n-            return len + 6 + encodedShortStringLength((short)(i/1000000));\n+            return len + 6 + encodedShortStringLength((short) (i / 1000000));\n         }\n         else // if (i > 99999)\n         {\n-            return len + 5 + encodedShortStringLength((short)(i/100000));\n+            return len + 5 + encodedShortStringLength((short) (i / 100000));\n         }\n \n     }\n \n     public static int encodedShortStringLength(long l)\n     {\n-        if(l == 0)\n+        if (l == 0)\n         {\n             return 1 + 1;\n         }\n \n         int len = 0;\n-        if(l < 0)\n+        if (l < 0)\n         {\n-            len=1;\n+            len = 1;\n             // sloppy - doesn't work of Long.MIN_VALUE\n-            l=-l;\n+            l = -l;\n         }\n-        if(l < Integer.MAX_VALUE)\n+\n+        if (l < Integer.MAX_VALUE)\n         {\n             return len + encodedShortStringLength((int) l);\n         }\n-        else if(l > 9999999999L)\n+        else if (l > 9999999999L)\n         {\n             return len + 10 + encodedShortStringLength((int) (l / 10000000000L));\n         }\n@@ -149,7 +149,6 @@ else if(l > 9999999999L)\n \n     }\n \n-\n     public static int encodedShortStringLength(AMQShortString s)\n     {\n         if (s == null)\n@@ -162,7 +161,6 @@ public static int encodedShortStringLength(AMQShortString s)\n         }\n     }\n \n-\n     public static int encodedLongStringLength(String s)\n     {\n         if (s == null)\n@@ -219,7 +217,6 @@ public static int encodedContentLength(Content table)\n         return 0;\n     }\n \n- \n     public static void writeShortStringBytes(ByteBuffer buffer, String s)\n     {\n         if (s != null)\n@@ -230,6 +227,7 @@ public static void writeShortStringBytes(ByteBuffer buffer, String s)\n             {\n                 encodedString[i] = (byte) cha[i];\n             }\n+\n             writeBytes(buffer, encodedString);\n         }\n         else\n@@ -239,7 +237,6 @@ public static void writeShortStringBytes(ByteBuffer buffer, String s)\n         }\n     }\n \n-\n     public static void writeShortStringBytes(ByteBuffer buffer, AMQShortString s)\n     {\n         if (s != null)\n@@ -256,7 +253,7 @@ public static void writeShortStringBytes(ByteBuffer buffer, AMQShortString s)\n \n     public static void writeLongStringBytes(ByteBuffer buffer, String s)\n     {\n-        assert s == null || s.length() <= 0xFFFE;\n+        assert (s == null) || (s.length() <= 0xFFFE);\n         if (s != null)\n         {\n             int len = s.length();\n@@ -267,6 +264,7 @@ public static void writeLongStringBytes(ByteBuffer buffer, String s)\n             {\n                 encodedString[i] = (byte) cha[i];\n             }\n+\n             buffer.put(encodedString);\n         }\n         else\n@@ -277,7 +275,7 @@ public static void writeLongStringBytes(ByteBuffer buffer, String s)\n \n     public static void writeLongStringBytes(ByteBuffer buffer, char[] s)\n     {\n-        assert s == null || s.length <= 0xFFFE;\n+        assert (s == null) || (s.length <= 0xFFFE);\n         if (s != null)\n         {\n             int len = s.length;\n@@ -287,6 +285,7 @@ public static void writeLongStringBytes(ByteBuffer buffer, char[] s)\n             {\n                 encodedString[i] = (byte) s[i];\n             }\n+\n             buffer.put(encodedString);\n         }\n         else\n@@ -297,7 +296,7 @@ public static void writeLongStringBytes(ByteBuffer buffer, char[] s)\n \n     public static void writeLongStringBytes(ByteBuffer buffer, byte[] bytes)\n     {\n-        assert bytes == null || bytes.length <= 0xFFFE;\n+        assert (bytes == null) || (bytes.length <= 0xFFFE);\n         if (bytes != null)\n         {\n             writeUnsignedInteger(buffer, bytes.length);\n@@ -330,7 +329,6 @@ public static void writeUnsignedShort(ByteBuffer buffer, int s)\n         }\n     }\n \n-\n     public static int unsignedIntegerLength()\n     {\n         return 4;\n@@ -356,7 +354,6 @@ public static void writeUnsignedInteger(ByteBuffer buffer, long l)\n         }\n     }\n \n-\n     public static void writeFieldTableBytes(ByteBuffer buffer, FieldTable table)\n     {\n         if (table != null)\n@@ -400,10 +397,9 @@ public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean valu\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n-\n         buffer.put(packedValue);\n     }\n \n@@ -413,213 +409,181 @@ public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean valu\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n-\n         buffer.put(packedValue);\n     }\n \n-\n-\n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3,\n-                                     boolean value4)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3,\n+        boolean value4)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         if (value4)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 4));\n+            packedValue = (byte) (packedValue | (byte) (1 << 4));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3,\n-                                     boolean value4,\n-                                     boolean value5)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3,\n+        boolean value4, boolean value5)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         if (value4)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 4));\n+            packedValue = (byte) (packedValue | (byte) (1 << 4));\n         }\n \n         if (value5)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 5));\n+            packedValue = (byte) (packedValue | (byte) (1 << 5));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3,\n-                                     boolean value4,\n-                                     boolean value5,\n-                                     boolean value6)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3,\n+        boolean value4, boolean value5, boolean value6)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         if (value4)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 4));\n+            packedValue = (byte) (packedValue | (byte) (1 << 4));\n         }\n \n         if (value5)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 5));\n+            packedValue = (byte) (packedValue | (byte) (1 << 5));\n         }\n \n         if (value6)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 6));\n+            packedValue = (byte) (packedValue | (byte) (1 << 6));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-    public static void writeBooleans(ByteBuffer buffer,\n-                                     boolean value0,\n-                                     boolean value1,\n-                                     boolean value2,\n-                                     boolean value3,\n-                                     boolean value4,\n-                                     boolean value5,\n-                                     boolean value6,\n-                                     boolean value7)\n+    public static void writeBooleans(ByteBuffer buffer, boolean value0, boolean value1, boolean value2, boolean value3,\n+        boolean value4, boolean value5, boolean value6, boolean value7)\n     {\n         byte packedValue = value0 ? (byte) 1 : (byte) 0;\n \n         if (value1)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 1));\n+            packedValue = (byte) (packedValue | (byte) (1 << 1));\n         }\n \n         if (value2)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 2));\n+            packedValue = (byte) (packedValue | (byte) (1 << 2));\n         }\n \n         if (value3)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 3));\n+            packedValue = (byte) (packedValue | (byte) (1 << 3));\n         }\n \n         if (value4)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 4));\n+            packedValue = (byte) (packedValue | (byte) (1 << 4));\n         }\n \n         if (value5)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 5));\n+            packedValue = (byte) (packedValue | (byte) (1 << 5));\n         }\n \n         if (value6)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 6));\n+            packedValue = (byte) (packedValue | (byte) (1 << 6));\n         }\n \n         if (value7)\n         {\n-            packedValue = (byte) (packedValue | (byte)(1 << 7));\n+            packedValue = (byte) (packedValue | (byte) (1 << 7));\n         }\n \n         buffer.put(packedValue);\n     }\n \n-\n-\n-\n     /**\n      * This is used for writing longstrs.\n      *\n@@ -647,26 +611,27 @@ public static void writeTimestamp(ByteBuffer buffer, long timestamp)\n     public static boolean[] readBooleans(ByteBuffer buffer)\n     {\n         final byte packedValue = buffer.get();\n-        if(packedValue == 0)\n+        if (packedValue == 0)\n         {\n             return ALL_FALSE_ARRAY;\n         }\n+\n         final boolean[] result = new boolean[8];\n \n         result[0] = ((packedValue & 1) != 0);\n         result[1] = ((packedValue & (1 << 1)) != 0);\n         result[2] = ((packedValue & (1 << 2)) != 0);\n         result[3] = ((packedValue & (1 << 3)) != 0);\n-        if((packedValue & 0xF0) == 0)\n+        if ((packedValue & 0xF0) == 0)\n         {\n             result[0] = ((packedValue & 1) != 0);\n         }\n+\n         result[4] = ((packedValue & (1 << 4)) != 0);\n         result[5] = ((packedValue & (1 << 5)) != 0);\n         result[6] = ((packedValue & (1 << 6)) != 0);\n         result[7] = ((packedValue & (1 << 7)) != 0);\n \n-\n         return result;\n     }\n \n@@ -742,6 +707,7 @@ public static String readLongString(ByteBuffer buffer)\n             {\n                 stringChars[i] = (char) stringBytes[i];\n             }\n+\n             return new String(stringChars);\n         }\n     }\n@@ -757,22 +723,22 @@ public static String readLongString(ByteBuffer buffer)\n         {\n             byte[] result = new byte[(int) length];\n             buffer.get(result);\n+\n             return result;\n         }\n     }\n \n     public static long readTimestamp(ByteBuffer buffer)\n     {\n         // Discard msb from AMQ timestamp\n-        //buffer.getUnsignedInt();\n+        // buffer.getUnsignedInt();\n         return buffer.getLong();\n     }\n \n-\n     static byte[] hexToByteArray(String id)\n     {\n         // Should check param for null, long enough for this check, upper-case and trailing char\n-        String s = (id.charAt(1) == 'x') ? id.substring(2) : id;    // strip 0x\n+        String s = (id.charAt(1) == 'x') ? id.substring(2) : id; // strip 0x\n \n         int len = s.length();\n         int byte_len = len / 2;\n@@ -786,7 +752,7 @@ public static long readTimestamp(ByteBuffer buffer)\n             byte b1 = Byte.parseByte(s.substring(ch, ch + 1), 16);\n             byte b2 = Byte.parseByte(s.substring(ch + 1, ch + 2), 16);\n \n-            b[i] = (byte) (b1 * 16 + b2);\n+            b[i] = (byte) ((b1 * 16) + b2);\n         }\n \n         return (b);\n@@ -795,7 +761,7 @@ public static long readTimestamp(ByteBuffer buffer)\n     public static char[] convertToHexCharArray(byte[] from)\n     {\n         int length = from.length;\n-        char[] result_buff = new char[length * 2 + 2];\n+        char[] result_buff = new char[(length * 2) + 2];\n \n         result_buff[0] = '0';\n         result_buff[1] = 'x';\n@@ -831,7 +797,7 @@ public static String convertToHexString(ByteBuffer bb)\n         byte[] from = new byte[size];\n \n         // Is this not the same.\n-        //bb.get(from, 0, length);\n+        // bb.get(from, 0, length);\n         for (int i = 0; i < size; i++)\n         {\n             from[i] = bb.get(i);\n@@ -840,9 +806,9 @@ public static String convertToHexString(ByteBuffer bb)\n         return (new String(convertToHexCharArray(from)));\n     }\n \n-    private static char hex_chars[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n+    private static char[] hex_chars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n \n-    //**** new methods\n+    // **** new methods\n \n     // AMQP_BOOLEAN_PROPERTY_PREFIX\n \n@@ -854,6 +820,7 @@ public static void writeBoolean(ByteBuffer buffer, Boolean aBoolean)\n     public static boolean readBoolean(ByteBuffer buffer)\n     {\n         byte packedValue = buffer.get();\n+\n         return (packedValue == 1);\n     }\n \n@@ -878,7 +845,6 @@ public static int encodedByteLength()\n         return 1;\n     }\n \n-\n     // AMQP_SHORT_PROPERTY_PREFIX\n     public static void writeShort(ByteBuffer buffer, Short aShort)\n     {\n@@ -943,7 +909,6 @@ public static int encodedFloatLength()\n         return 4;\n     }\n \n-\n     // Double_PROPERTY_PREFIX\n     public static void writeDouble(ByteBuffer buffer, Double aDouble)\n     {\n@@ -960,7 +925,6 @@ public static int encodedDoubleLength()\n         return 8;\n     }\n \n-\n     public static byte[] readBytes(ByteBuffer buffer)\n     {\n         short length = buffer.getUnsigned();\n@@ -981,7 +945,7 @@ public static void writeBytes(ByteBuffer buffer, byte[] data)\n     {\n         if (data != null)\n         {\n-            // TODO: check length fits in an unsigned byte            \n+            // TODO: check length fits in an unsigned byte\n             writeUnsignedByte(buffer, (short) data.length);\n             buffer.put(data);\n         }\n@@ -992,39 +956,37 @@ public static void writeBytes(ByteBuffer buffer, byte[] data)\n         }\n     }\n \n-    //CHAR_PROPERTY\n+    // CHAR_PROPERTY\n     public static int encodedCharLength()\n     {\n         return encodedByteLength();\n     }\n \n     public static char readChar(ByteBuffer buffer)\n     {\n-        //This is valid as we know that the Character is ASCII 0..127\n+        // This is valid as we know that the Character is ASCII 0..127\n         return (char) buffer.get();\n     }\n \n     public static void writeChar(ByteBuffer buffer, char character)\n     {\n-        //This is valid as we know that the Character is ASCII 0..127\n+        // This is valid as we know that the Character is ASCII 0..127\n         writeByte(buffer, (byte) character);\n     }\n \n-\n-\n-\n     public static long readLongAsShortString(ByteBuffer buffer)\n     {\n         short length = buffer.getUnsigned();\n         short pos = 0;\n-        if(length == 0)\n+        if (length == 0)\n         {\n             return 0L;\n         }\n+\n         byte digit = buffer.get();\n         boolean isNegative;\n         long result = 0;\n-        if(digit == (byte)'-')\n+        if (digit == (byte) '-')\n         {\n             isNegative = true;\n             pos++;\n@@ -1034,15 +996,16 @@ public static long readLongAsShortString(ByteBuffer buffer)\n         {\n             isNegative = false;\n         }\n-        result = digit - (byte)'0';\n+\n+        result = digit - (byte) '0';\n         pos++;\n \n-        while(pos < length)\n+        while (pos < length)\n         {\n             pos++;\n             digit = buffer.get();\n             result = (result << 3) + (result << 1);\n-            result += digit - (byte)'0';\n+            result += digit - (byte) '0';\n         }\n \n         return result;\n@@ -1051,33 +1014,13 @@ public static long readLongAsShortString(ByteBuffer buffer)\n     public static long readUnsignedInteger(ByteBuffer buffer)\n     {\n         long l = 0xFF & buffer.get();\n-        l <<=8;\n+        l <<= 8;\n         l = l | (0xFF & buffer.get());\n-        l <<=8;\n+        l <<= 8;\n         l = l | (0xFF & buffer.get());\n-        l <<=8;\n+        l <<= 8;\n         l = l | (0xFF & buffer.get());\n \n         return l;\n     }\n-\n-\n-    public static void main(String[] args)\n-    {\n-        ByteBuffer buf = ByteBuffer.allocate(8);\n-        buf.setAutoExpand(true);\n-\n-        long l = (long) Integer.MAX_VALUE;\n-        l += 1024L;\n-\n-        writeUnsignedInteger(buf, l);\n-\n-        buf.flip();\n-\n-        long l2 = readUnsignedInteger(buf);\n-\n-        System.out.println(\"before: \" + l);\n-        System.out.println(\"after:  \" + l2);\n-    }\n-\n }", "filename": "common/src/main/java/org/apache/qpid/framing/EncodingUtils.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/VersionSpecificRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/framing/VersionSpecificRegistry.java", "sha": "faa7cc1e82223754d01e59a286f0ce14d4c607c0", "changes": 24, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/VersionSpecificRegistry.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -148,34 +148,30 @@ public AMQMethodBody get(short classID, short methodID, ByteBuffer in, long size\n         }\r\n         catch(NullPointerException e)\r\n         {\r\n-            throw new AMQFrameDecodingException(_log,\r\n-                \"Class \" + classID + \" unknown in AMQP version \" + _protocolMajorVersion + \"-\" + _protocolMinorVersion\r\n-                 + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\");\r\n+            throw new AMQFrameDecodingException(null, \"Class \" + classID + \" unknown in AMQP version \" + _protocolMajorVersion\r\n+                + \"-\" + _protocolMinorVersion + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\", e);\r\n         }\r\n         catch(IndexOutOfBoundsException e)\r\n         {\r\n             if(classID >= _registry.length)\r\n             {\r\n-                throw new AMQFrameDecodingException(_log,\r\n-                    \"Class \" + classID + \" unknown in AMQP version \" + _protocolMajorVersion + \"-\" + _protocolMinorVersion\r\n-                     + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\");\r\n-\r\n+                throw new AMQFrameDecodingException(null, \"Class \" + classID + \" unknown in AMQP version \" + _protocolMajorVersion\r\n+                    + \"-\" + _protocolMinorVersion + \" (while trying to decode class \" + classID + \" method \" + methodID\r\n+                    + \".\", e);\r\n             }\r\n             else\r\n             {\r\n-                throw new AMQFrameDecodingException(_log,\r\n-                    \"Method \" + methodID + \" unknown in AMQP version \" + _protocolMajorVersion + \"-\" + _protocolMinorVersion\r\n-                     + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\");\r\n-\r\n+                throw new AMQFrameDecodingException(null, \"Method \" + methodID + \" unknown in AMQP version \"\r\n+                    + _protocolMajorVersion + \"-\" + _protocolMinorVersion + \" (while trying to decode class \" + classID\r\n+                    + \" method \" + methodID + \".\", e);\r\n             }\r\n         }\r\n \r\n \r\n         if (bodyFactory == null)\r\n         {\r\n-            throw new AMQFrameDecodingException(_log,\r\n-                \"Method \" + methodID + \" unknown in AMQP version \" + _protocolMajorVersion + \"-\" + _protocolMinorVersion\r\n-                 + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\");\r\n+            throw new AMQFrameDecodingException(null, \"Method \" + methodID + \" unknown in AMQP version \" + _protocolMajorVersion\r\n+                + \"-\" + _protocolMinorVersion + \" (while trying to decode class \" + classID + \" method \" + methodID + \".\", null);\r\n         }\r\n \r\n \r", "filename": "common/src/main/java/org/apache/qpid/framing/VersionSpecificRegistry.java"}, {"additions": 23, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/pool/Event.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/pool/Event.java", "sha": "7300ec8c3f2a9a882f1fce0dbd6edf494cca7284", "changes": 23, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/pool/Event.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -85,4 +85,27 @@ public void process(IoSession session)\n     }\n \n \n+\n+    public static final class CloseEvent extends Event\n+    {\n+        private final IoFilter.NextFilter _nextFilter;\n+\n+        public CloseEvent(final IoFilter.NextFilter nextFilter)\n+        {\n+            super();\n+            _nextFilter = nextFilter;\n+        }\n+\n+\n+        public void process(IoSession session)\n+        {\n+            _nextFilter.sessionClosed(session);\n+        }\n+\n+        public IoFilter.NextFilter getNextFilter()\n+        {\n+            return _nextFilter;\n+        }\n+    }\n+\n }", "filename": "common/src/main/java/org/apache/qpid/pool/Event.java"}, {"additions": 51, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/pool/PoolingFilter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/pool/PoolingFilter.java", "sha": "c9c96925cb4d47d58b385eacab17753cf41e03d5", "changes": 107, "status": "modified", "deletions": 56, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/pool/PoolingFilter.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -24,10 +24,13 @@\n import java.util.concurrent.ConcurrentMap;\n \n import org.apache.log4j.Logger;\n+\n import org.apache.mina.common.IdleStatus;\n import org.apache.mina.common.IoFilterAdapter;\n import org.apache.mina.common.IoSession;\n \n+import org.apache.qpid.pool.Event.CloseEvent;\n+\n public class PoolingFilter extends IoFilterAdapter implements Job.JobCompletionHandler\n {\n     private static final Logger _logger = Logger.getLogger(PoolingFilter.class);\n@@ -47,12 +50,12 @@ public PoolingFilter(ReferenceCountingExecutorService refCountingPool, String na\n     void fireAsynchEvent(IoSession session, Event event)\n     {\n         Job job = getJobForSession(session);\n- //       job.acquire(); //prevents this job being removed from _jobs\n+        // job.acquire(); //prevents this job being removed from _jobs\n         job.add(event);\n \n-        //Additional checks on pool to check that it hasn't shutdown.\n+        // Additional checks on pool to check that it hasn't shutdown.\n         // The alternative is to catch the RejectedExecutionException that will result from executing on a shutdown pool\n-        if (job.activate() && _poolReference.getPool() != null && !_poolReference.getPool().isShutdown())\n+        if (job.activate() && (_poolReference.getPool() != null) && !_poolReference.getPool().isShutdown())\n         {\n             _poolReference.getPool().execute(job);\n         }\n@@ -68,16 +71,6 @@ public void createNewJobForSession(IoSession session)\n     private Job getJobForSession(IoSession session)\n     {\n         return (Job) session.getAttribute(_name);\n-\n-/*        if(job == null)\n-        {\n-            System.err.println(\"Error in \" + _name);\n-            Thread.dumpStack();\n-        }\n-\n-\n-        job = _jobs.get(session);\n-        return job == null ? createJobForSession(session) : job;*/\n     }\n \n     private Job createJobForSession(IoSession session)\n@@ -87,35 +80,36 @@ private Job createJobForSession(IoSession session)\n \n     private Job addJobForSession(IoSession session, Job job)\n     {\n-        //atomic so ensures all threads agree on the same job\n+        // atomic so ensures all threads agree on the same job\n         Job existing = _jobs.putIfAbsent(session, job);\n-        return existing == null ? job : existing;\n+\n+        return (existing == null) ? job : existing;\n     }\n \n-    //Job.JobCompletionHandler\n+    // Job.JobCompletionHandler\n     public void completed(IoSession session, Job job)\n     {\n-//        if (job.isComplete())\n-//        {\n-//            job.release();\n-//            if (!job.isReferenced())\n-//            {\n-//                _jobs.remove(session);\n-//            }\n-//        }\n-//        else\n-        if(!job.isComplete())\n+        // if (job.isComplete())\n+        // {\n+        // job.release();\n+        // if (!job.isReferenced())\n+        // {\n+        // _jobs.remove(session);\n+        // }\n+        // }\n+        // else\n+        if (!job.isComplete())\n         {\n             // ritchiem : 2006-12-13 Do we need to perform the additional checks here?\n-            //                       Can the pool be shutdown at this point?\n-            if (job.activate() && _poolReference.getPool() != null && !_poolReference.getPool().isShutdown())\n+            // Can the pool be shutdown at this point?\n+            if (job.activate() && (_poolReference.getPool() != null) && !_poolReference.getPool().isShutdown())\n             {\n                 _poolReference.getPool().execute(job);\n             }\n         }\n     }\n \n-    //IoFilter methods that are processed by threads on the pool\n+    // IoFilter methods that are processed by threads on the pool\n \n     public void sessionOpened(final NextFilter nextFilter, final IoSession session) throws Exception\n     {\n@@ -127,37 +121,33 @@ public void sessionClosed(final NextFilter nextFilter, final IoSession session)\n         nextFilter.sessionClosed(session);\n     }\n \n-    public void sessionIdle(final NextFilter nextFilter, final IoSession session,\n-                            final IdleStatus status) throws Exception\n+    public void sessionIdle(final NextFilter nextFilter, final IoSession session, final IdleStatus status) throws Exception\n     {\n         nextFilter.sessionIdle(session, status);\n     }\n \n-    public void exceptionCaught(final NextFilter nextFilter, final IoSession session,\n-                                final Throwable cause) throws Exception\n+    public void exceptionCaught(final NextFilter nextFilter, final IoSession session, final Throwable cause) throws Exception\n     {\n-            nextFilter.exceptionCaught(session,cause);\n+        nextFilter.exceptionCaught(session, cause);\n     }\n \n-    public void messageReceived(final NextFilter nextFilter, final IoSession session,\n-                                final Object message) throws Exception\n+    public void messageReceived(final NextFilter nextFilter, final IoSession session, final Object message) throws Exception\n     {\n-        nextFilter.messageReceived(session,message);\n+        nextFilter.messageReceived(session, message);\n     }\n \n-    public void messageSent(final NextFilter nextFilter, final IoSession session,\n-                            final Object message) throws Exception\n+    public void messageSent(final NextFilter nextFilter, final IoSession session, final Object message) throws Exception\n     {\n         nextFilter.messageSent(session, message);\n     }\n \n-    public void filterWrite(final NextFilter nextFilter, final IoSession session,\n-                            final WriteRequest writeRequest) throws Exception\n+    public void filterWrite(final NextFilter nextFilter, final IoSession session, final WriteRequest writeRequest)\n+        throws Exception\n     {\n         nextFilter.filterWrite(session, writeRequest);\n     }\n \n-    //IoFilter methods that are processed on current thread (NOT on pooled thread)\n+    // IoFilter methods that are processed on current thread (NOT on pooled thread)\n \n     public void filterClose(NextFilter nextFilter, IoSession session) throws Exception\n     {\n@@ -199,13 +189,17 @@ public AsynchReadPoolingFilter(ReferenceCountingExecutorService refCountingPool,\n             super(refCountingPool, name);\n         }\n \n-        public void messageReceived(final NextFilter nextFilter, final IoSession session,\n-                                final Object message) throws Exception\n+        public void messageReceived(final NextFilter nextFilter, final IoSession session, final Object message)\n+            throws Exception\n         {\n \n             fireAsynchEvent(session, new Event.ReceivedEvent(nextFilter, message));\n         }\n \n+        public void sessionClosed(final NextFilter nextFilter, final IoSession session) throws Exception\n+        {\n+            fireAsynchEvent(session, new CloseEvent(nextFilter));\n+        }\n \n     }\n \n@@ -217,26 +211,27 @@ public AsynchWritePoolingFilter(ReferenceCountingExecutorService refCountingPool\n             super(refCountingPool, name);\n         }\n \n-\n-        public void filterWrite(final NextFilter nextFilter, final IoSession session,\n-                                final WriteRequest writeRequest) throws Exception\n+        public void filterWrite(final NextFilter nextFilter, final IoSession session, final WriteRequest writeRequest)\n+            throws Exception\n         {\n             fireAsynchEvent(session, new Event.WriteEvent(nextFilter, writeRequest));\n         }\n \n+        public void sessionClosed(final NextFilter nextFilter, final IoSession session) throws Exception\n+        {\n+            fireAsynchEvent(session, new CloseEvent(nextFilter));\n+        }\n+\n     }\n \n-    public static PoolingFilter createAynschReadPoolingFilter(ReferenceCountingExecutorService refCountingPool,String name)\n+    public static PoolingFilter createAynschReadPoolingFilter(ReferenceCountingExecutorService refCountingPool, String name)\n     {\n-        return new AsynchReadPoolingFilter(refCountingPool,name);\n+        return new AsynchReadPoolingFilter(refCountingPool, name);\n     }\n \n-\n-    public static PoolingFilter createAynschWritePoolingFilter(ReferenceCountingExecutorService refCountingPool,String name)\n+    public static PoolingFilter createAynschWritePoolingFilter(ReferenceCountingExecutorService refCountingPool, String name)\n     {\n-        return new AsynchWritePoolingFilter(refCountingPool,name);\n+        return new AsynchWritePoolingFilter(refCountingPool, name);\n     }\n \n }\n-\n-", "filename": "common/src/main/java/org/apache/qpid/pool/PoolingFilter.java"}, {"additions": 20, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/url/AMQBindingURL.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/url/AMQBindingURL.java", "sha": "353c0d39c230e736f035859ce9c438674b10327e", "changes": 53, "status": "modified", "deletions": 33, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/url/AMQBindingURL.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -24,9 +24,10 @@\n import java.net.URISyntaxException;\n import java.util.HashMap;\n \n+import org.apache.log4j.Logger;\n+\n import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n-import org.apache.log4j.Logger;\n \n public class AMQBindingURL implements BindingURL\n {\n@@ -39,10 +40,9 @@\n     AMQShortString _queueName;\n     private HashMap<String, String> _options;\n \n-\n     public AMQBindingURL(String url) throws URLSyntaxException\n     {\n-        //format:\n+        // format:\n         // <exch_class>://<exch_name>/[<destination>]/[<queue>]?<option>='<value>'[,<option>='<value>']*\n         _logger.debug(\"Parsing URL: \" + url);\n         _url = url;\n@@ -61,10 +61,10 @@ private void parseBindingURL() throws URLSyntaxException\n \n             if (exchangeClass == null)\n             {\n-                _url = ExchangeDefaults.DIRECT_EXCHANGE_CLASS + \"://\" +\n-                        \"\" + \"//\" + _url;\n-                //URLHelper.parseError(-1, \"Exchange Class not specified.\", _url);\n+                _url = ExchangeDefaults.DIRECT_EXCHANGE_CLASS + \"://\" + \"\" + \"//\" + _url;\n+                // URLHelper.parseError(-1, \"Exchange Class not specified.\", _url);\n                 parseBindingURL();\n+\n                 return;\n             }\n             else\n@@ -76,7 +76,7 @@ private void parseBindingURL() throws URLSyntaxException\n \n             if (exchangeName == null)\n             {\n-                if(getExchangeClass().equals(ExchangeDefaults.DIRECT_EXCHANGE_CLASS))\n+                if (getExchangeClass().equals(ExchangeDefaults.DIRECT_EXCHANGE_CLASS))\n                 {\n                     setExchangeName(\"\");\n                 }\n@@ -92,19 +92,18 @@ private void parseBindingURL() throws URLSyntaxException\n \n             String queueName;\n \n-            if (connection.getPath() == null ||\n-                    connection.getPath().equals(\"\"))\n+            if ((connection.getPath() == null) || connection.getPath().equals(\"\"))\n             {\n                 throw URLHelper.parseError(_url.indexOf(_exchangeName.toString()) + _exchangeName.length(),\n-                        \"Destination or Queue requried\", _url);\n+                    \"Destination or Queue requried\", _url);\n             }\n             else\n             {\n                 int slash = connection.getPath().indexOf(\"/\", 1);\n                 if (slash == -1)\n                 {\n                     throw URLHelper.parseError(_url.indexOf(_exchangeName.toString()) + _exchangeName.length(),\n-                            \"Destination requried\", _url);\n+                        \"Destination requried\", _url);\n                 }\n                 else\n                 {\n@@ -127,9 +126,8 @@ private void parseBindingURL() throws URLSyntaxException\n \n             setQueueName(queueName);\n \n-            //Fragment is #string (not used)\n-            //System.out.println(connection.getFragment());\n-            _logger.debug(\"URL Parsed: \" + this);            \n+            // Fragment is #string (not used)\n+            _logger.debug(\"URL Parsed: \" + this);\n \n         }\n         catch (URISyntaxException uris)\n@@ -162,7 +160,7 @@ private void setExchangeName(String exchangeName)\n \n     private void processOptions()\n     {\n-        //this is where we would parse any options that needed more than just storage.\n+        // this is where we would parse any options that needed more than just storage.\n     }\n \n     public String getURL()\n@@ -219,11 +217,13 @@ public void setQueueName(AMQShortString name) throws URLSyntaxException\n             {\n                 if (containsOption(BindingURL.OPTION_CLIENTID) && containsOption(BindingURL.OPTION_SUBSCRIPTION))\n                 {\n-                    _queueName = new AMQShortString(getOption(BindingURL.OPTION_CLIENTID + \":\" + BindingURL.OPTION_SUBSCRIPTION));\n+                    _queueName =\n+                        new AMQShortString(getOption(BindingURL.OPTION_CLIENTID + \":\" + BindingURL.OPTION_SUBSCRIPTION));\n                 }\n                 else\n                 {\n-                    throw URLHelper.parseError(-1, \"Durable subscription must have values for \" + BindingURL.OPTION_CLIENTID + \" and \" + BindingURL.OPTION_SUBSCRIPTION + \".\", _url);\n+                    throw URLHelper.parseError(-1, \"Durable subscription must have values for \" + BindingURL.OPTION_CLIENTID\n+                        + \" and \" + BindingURL.OPTION_SUBSCRIPTION + \".\", _url);\n \n                 }\n             }\n@@ -237,7 +237,6 @@ public void setQueueName(AMQShortString name) throws URLSyntaxException\n             _queueName = name;\n         }\n \n-\n     }\n \n     public String getOption(String key)\n@@ -275,7 +274,6 @@ public void setRoutingKey(AMQShortString key)\n         setOption(OPTION_ROUTING_KEY, key.toString());\n     }\n \n-\n     public String toString()\n     {\n         StringBuffer sb = new StringBuffer();\n@@ -289,18 +287,7 @@ public String toString()\n         sb.append(_queueName);\n \n         sb.append(URLHelper.printOptions(_options));\n-        return sb.toString();\n-    }\n-\n-    public static void main(String args[]) throws URLSyntaxException\n-    {\n-        String url = \"exchangeClass://exchangeName/Destination/Queue?option='value',option2='value2'\";\n-\n-        AMQBindingURL dest = new AMQBindingURL(url);\n-\n-        System.out.println(url);\n-        System.out.println(dest);\n \n+        return sb.toString();\n     }\n-\n }", "filename": "common/src/main/java/org/apache/qpid/url/AMQBindingURL.java"}, {"additions": 20, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/url/URLHelper.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/common/src/main/java/org/apache/qpid/url/URLHelper.java", "sha": "c08b443acf543fde7aee771697b723bc22b7d83e", "changes": 44, "status": "modified", "deletions": 24, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/url/URLHelper.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,9 +7,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -30,10 +30,10 @@\n \n     public static void parseOptions(HashMap<String, String> optionMap, String options) throws URLSyntaxException\n     {\n-        //options looks like this\n-        //brokerlist='tcp://host:port?option='value',option='value';vm://:3/virtualpath?option='value'',failover='method?option='value',option='value''\n+        // options looks like this\n+        // brokerlist='tcp://host:port?option='value',option='value';vm://:3/virtualpath?option='value'',failover='method?option='value',option='value''\n \n-        if (options == null || options.indexOf('=') == -1)\n+        if ((options == null) || (options.indexOf('=') == -1))\n         {\n             return;\n         }\n@@ -49,8 +49,8 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n         // to store index of final \"'\"\n         int valueIndex = optionIndex;\n \n-        //Walk remainder of url.\n-        while (nestedQuotes > 0 || valueIndex < length)\n+        // Walk remainder of url.\n+        while ((nestedQuotes > 0) || (valueIndex < length))\n         {\n             valueIndex++;\n \n@@ -61,27 +61,24 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n \n             if (options.charAt(valueIndex) == '\\'')\n             {\n-                if (valueIndex + 1 < options.length())\n+                if ((valueIndex + 1) < options.length())\n                 {\n-                    if (options.charAt(valueIndex + 1) == DEFAULT_OPTION_SEPERATOR ||\n-                            options.charAt(valueIndex + 1) == ALTERNATIVE_OPTION_SEPARATOR ||\n-                            options.charAt(valueIndex + 1) == BROKER_SEPARATOR ||\n-                            options.charAt(valueIndex + 1) == '\\'')\n+                    if ((options.charAt(valueIndex + 1) == DEFAULT_OPTION_SEPERATOR)\n+                            || (options.charAt(valueIndex + 1) == ALTERNATIVE_OPTION_SEPARATOR)\n+                            || (options.charAt(valueIndex + 1) == BROKER_SEPARATOR)\n+                            || (options.charAt(valueIndex + 1) == '\\''))\n                     {\n                         nestedQuotes--;\n-//                        System.out.println(\n-//                                options + \"\\n\" + \"-\" + nestedQuotes + \":\" + getPositionString(valueIndex - 2, 1));\n+\n                         if (nestedQuotes == 0)\n                         {\n-                            //We've found the value of an option\n+                            // We've found the value of an option\n                             break;\n                         }\n                     }\n                     else\n                     {\n                         nestedQuotes++;\n-//                        System.out.println(\n-//                                options + \"\\n\" + \"+\" + nestedQuotes + \":\" + getPositionString(valueIndex - 2, 1));\n                     }\n                 }\n                 else\n@@ -98,11 +95,11 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n             }\n         }\n \n-        if (nestedQuotes != 0 || valueIndex < (optionIndex + 2))\n+        if ((nestedQuotes != 0) || (valueIndex < (optionIndex + 2)))\n         {\n             int sepIndex = 0;\n \n-            //Try and identify illegal separator character\n+            // Try and identify illegal separator character\n             if (nestedQuotes > 1)\n             {\n                 for (int i = 0; i < nestedQuotes; i++)\n@@ -112,14 +109,14 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n                 }\n             }\n \n-            if (sepIndex >= options.length() || sepIndex == 0)\n+            if ((sepIndex >= options.length()) || (sepIndex == 0))\n             {\n                 throw parseError(valueIndex, \"Unterminated option\", options);\n             }\n             else\n             {\n-                throw parseError(sepIndex, \"Unterminated option. Possible illegal option separator:'\" +\n-                        options.charAt(sepIndex) + \"'\", options);\n+                throw parseError(sepIndex, \"Unterminated option. Possible illegal option separator:'\"\n+                    + options.charAt(sepIndex) + \"'\", options);\n             }\n         }\n \n@@ -130,12 +127,11 @@ public static void parseOptions(HashMap<String, String> optionMap, String option\n \n         if (valueIndex < (options.length() - 1))\n         {\n-            //Recurse to get remaining options\n+            // Recurse to get remaining options\n             parseOptions(optionMap, options.substring(valueIndex + 2));\n         }\n     }\n \n-\n     public static URLSyntaxException parseError(int index, String error, String url)\n     {\n         return parseError(index, 1, error, url);", "filename": "common/src/main/java/org/apache/qpid/url/URLHelper.java"}, {"additions": 30, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/distribution/src/main/assembly/bin.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/distribution/src/main/assembly/bin.xml", "sha": "ef85137f90aca8352a9f649c37d2d235b306ad66", "changes": 30, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/assembly/bin.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -82,6 +82,24 @@\n       <destName>config.xml</destName>\n       <fileMode>420</fileMode>\n     </file>\n+    <file>\n+      <source>../broker/etc/jmxremote.access</source>\n+      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n+      <destName>jmxremote.access</destName>\n+      <fileMode>420</fileMode>\n+    </file>\n+    <file>\n+      <source>../broker/etc/transient_config.xml</source>\n+      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n+      <destName>transient_config.xml</destName>\n+      <fileMode>420</fileMode>\n+    </file>\n+    <file>\n+      <source>../broker/etc/persistent_config.xml</source>\n+      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n+      <destName>persistent_config.xml</destName>\n+      <fileMode>420</fileMode>\n+    </file>\n     <file>\n       <source>../broker/etc/log4j.xml</source>\n       <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n@@ -112,6 +130,18 @@\n       <destName>virtualhosts.xml</destName>\n       <fileMode>420</fileMode>\n     </file>\n+    <file>\n+      <source>../broker/bin/qpid.stop</source>\n+      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n+      <destName>qpid.stop</destName>\n+      <fileMode>493</fileMode>\n+    </file>\n+    <file>\n+      <source>../broker/bin/qpid.stopall</source>\n+      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n+      <destName>qpid.stopall</destName>\n+      <fileMode>493</fileMode>\n+    </file>\n     <file>\n       <source>../common/bin/qpid-run</source>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>", "filename": "distribution/src/main/assembly/bin.xml"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/distribution/src/main/assembly/management-eclipse-plugin.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/distribution/src/main/assembly/management-eclipse-plugin.xml", "sha": "98534d43d0ec079d7b0aa6f5f925425164aa42b0", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/assembly/management-eclipse-plugin.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -88,6 +88,13 @@\n       </includes>\n       <fileMode>777</fileMode>\n     </fileSet>\n+    <fileSet>\n+      <directory>../management/eclipse-plugin/src/main/resources/sasl</directory>\n+      <outputDirectory>qpidmc/eclipse/plugins/jmxremote.optional_1.0.1/META-INF</outputDirectory>\n+      <includes>\n+        <include>MANIFEST.MF</include>\n+      </includes>\n+    </fileSet>\n   </fileSets>\n \n   <dependencySets>", "filename": "distribution/src/main/assembly/management-eclipse-plugin.xml"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/META-INF/MANIFEST.MF", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/META-INF/MANIFEST.MF", "sha": "a92f37588600dda5f5a9dd9236a6abe0ccd13d5a", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/META-INF/MANIFEST.MF?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -7,6 +7,7 @@ Bundle-Activator: org.apache.qpid.management.ui.Activator\n Bundle-Localization: plugin\n Require-Bundle: org.eclipse.ui,\n  org.eclipse.core.runtime,\n- org.eclipse.ui.forms\n+ org.eclipse.ui.forms,\n+ jmxremote.optional\n Eclipse-LazyStart: true\n Bundle-Vendor: Apache Software Foundation", "filename": "management/eclipse-plugin/META-INF/MANIFEST.MF"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/bin/qpidmc.bat", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/bin/qpidmc.bat", "sha": "e444bc58118ed0efe6dc4fbef5d22aa02bae79c6", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/bin/qpidmc.bat?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -52,4 +52,4 @@ goto exit\n rem Slurp the command line arguments. This loop allows for an unlimited number\r\n rem of agruments (up to the command line limit, anyway).\r\n \r\n-\"%JAVA_HOME%\\bin\\java\" -Xms40m -Xmx256m -Declipse.consoleLog=true  -jar %QPIDMC_HOME%\\eclipse\\startup.jar org.eclipse.core.launcher.Main -launcher %QPIDMC_HOME%\\eclipse\\eclipse -name \"Qpid Management Console\" -showsplash 600 -configuration \"file:%QPIDMC_HOME%\\configuration\" -os win32 -ws win32 -arch x86\r\n+\"%JAVA_HOME%\\bin\\java\" -Xms40m -Xmx256m -Declipse.consoleLog=false -Dsecurity=PLAIN -jar %QPIDMC_HOME%\\eclipse\\startup.jar org.eclipse.core.launcher.Main -launcher %QPIDMC_HOME%\\eclipse\\eclipse -name \"Qpid Management Console\" -showsplash 600 -configuration \"file:%QPIDMC_HOME%\\configuration\" -os win32 -ws win32 -arch x86\r", "filename": "management/eclipse-plugin/bin/qpidmc.bat"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/bin/qpidmc.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/bin/qpidmc.sh", "sha": "aae61b14c70de9d963ab4809212cf36537d6effc", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/bin/qpidmc.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -61,4 +61,4 @@ elif [ $os = \"Linux\" ]; then\n     os=\"linux\"\n fi\n \n-\"$JAVA_HOME/bin/java\" -Xms40m -Xmx256m -Declipse.consoleLog=false -jar $QPIDMC_HOME/eclipse/startup.jar org.eclipse.core.launcher.Main -launcher $QPIDMC_HOME/eclipse/eclipse -name \"Qpid Management Console\" -showsplash 600 -configuration \"file:$QPIDMC_HOME/configuration\" -os $os -ws $ws -arch $arch\n+\"$JAVA_HOME/bin/java\" -Xms40m -Xmx256m -Declipse.consoleLog=false -Dsecurity=PLAIN -jar $QPIDMC_HOME/eclipse/startup.jar org.eclipse.core.launcher.Main -launcher $QPIDMC_HOME/eclipse/eclipse -name \"Qpid Management Console\" -showsplash 600 -configuration \"file:$QPIDMC_HOME/configuration\" -os $os -ws $ws -arch $arch", "filename": "management/eclipse-plugin/bin/qpidmc.sh"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationRegistry.java", "sha": "714f84ea494b66bdbb0f5f22278d159567298915", "changes": 9, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationRegistry.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -41,7 +41,9 @@\n {\n     private static ImageRegistry imageRegistry = new ImageRegistry();\n     private static FontRegistry fontRegistry = new FontRegistry();\n-\n+    public static final boolean debug = Boolean.getBoolean(\"debug\");\n+    public static final String securityMechanism = System.getProperty(\"security\", null);    \n+    \n     static\n     {\n         imageRegistry.put(Constants.CONSOLE_IMAGE, \n@@ -130,4 +132,9 @@ public static void serverConnectionClosed(ManagedServer server)\n         _closedServerList.clear();\n         return list;\n     }\n+    \n+    public static String getSecurityMechanism()\n+    {\n+        return securityMechanism;\n+    }\n }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationRegistry.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationWorkbenchWindowAdvisor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationWorkbenchWindowAdvisor.java", "sha": "e3aedef28e4f8c2119d40adfca352dc43ad39e6c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationWorkbenchWindowAdvisor.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -49,7 +49,7 @@ public void preWindowOpen()\n         IWorkbenchWindowConfigurer configurer = getWindowConfigurer();\n         int x = Display.getDefault().getBounds().width;\n         int y = Display.getDefault().getBounds().height;\n-        configurer.setInitialSize(new Point(4*x/5, 3*y/4));\n+        configurer.setInitialSize(new Point(9*x/10, 8*y/10));\n         configurer.setShowCoolBar(true);\n         configurer.setShowStatusLine(false);\n         ", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ApplicationWorkbenchWindowAdvisor.java"}, {"additions": 105, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java", "sha": "da70dc736c880c1e09816580f33dd23052c73817", "changes": 197, "status": "modified", "deletions": 92, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,3 +1,4 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -7,9 +8,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- * \n+ *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -29,98 +30,110 @@\n  */\n public class Constants\n {\n-    public final static String APPLICATION_NAME = \"Qpid Management Console\";\n-    \n-    public final static String ACTION_REMOVE_MBEANNODE = \"Remove from list\";\n-    public final static String VALUE = \"value\";\n-    public final static String TYPE  = \"type\";\n-    public final static String NODE_TYPE_SERVER    = \"server\";\n-    public final static String NODE_TYPE_DOMAIN    = \"domain\";\n-    public final static String NODE_TYPE_MBEANTYPE = \"mbeantype\";\n+    public static final String APPLICATION_NAME = \"Qpid Management Console\";\n+\n+    public static final String ACTION_REMOVE_MBEANNODE = \"Remove from list\";\n+    public static final String VALUE = \"value\";\n+    public static final String TYPE = \"type\";\n+    public static final String NODE_TYPE_SERVER = \"server\";\n+    public static final String NODE_TYPE_DOMAIN = \"domain\";\n+    public static final String NODE_TYPE_MBEANTYPE = \"mbeantype\";\n     // currently used only for virtual host instances, but will work as general also\n-    public final static String NODE_TYPE_TYPEINSTANCE = \"mbeantype_instance\";\n-    public final static String MBEAN      = \"mbean\";\n-    public final static String ATTRIBUTE = \"Attribute\";\n-    public final static String ATTRIBUTES = \"Attributes\";\n-    public final static String NOTIFICATION = \"Notifications\";\n-    public final static String RESULT = \"Result\";\n-    public final static String VIRTUAL_HOST = \"VirtualHost\";\n-    public final static String DEFAULT_VH = \"Default\";\n-    public final static String DEFAULT_USERNAME = \"guest\";\n-    public final static String DEFAULT_PASSWORD = \"guest\";\n-    \n-    public final static String USERNAME = \"Username\";\n-    public final static String PASSWORD = \"Password\";\n-    \n+    public static final String NODE_TYPE_TYPEINSTANCE = \"mbeantype_instance\";\n+    public static final String MBEAN = \"mbean\";\n+    public static final String ATTRIBUTE = \"Attribute\";\n+    public static final String ATTRIBUTES = \"Attributes\";\n+    public static final String NOTIFICATIONS = \"Notifications\";\n+    public static final String RESULT = \"Result\";\n+    public static final String VIRTUAL_HOST = \"VirtualHost\";\n+    public static final String DEFAULT_VH = \"Default\";\n+    public static final String DEFAULT_USERNAME = \"guest\";\n+    public static final String DEFAULT_PASSWORD = \"guest\";\n+\n+    public static final String USERNAME = \"Username\";\n+    public static final String PASSWORD = \"Password\";\n+\n     // Attributes and operations are used to customize the GUI for Qpid. If these are changes in the\n     // Qpid server, then these should be updated accordingly\n-    public final static String ATTRIBUTE_QUEUE_OWNER = \"owner\";\n-    public final static String ATTRIBUTE_QUEUE_DEPTH = \"QueueDepth\";\n-    public final static String ATTRIBUTE_QUEUE_CONSUMERCOUNT = \"ActiveConsumerCount\";    \n-    public final static String OPERATION_CREATE_QUEUE = \"createNewQueue\";\n-    public final static String OPERATION_CREATE_BINDING = \"createNewBinding\";\n-    public final static String OPERATION_MOVE_MESSAGES = \"moveMessages\";\n-    \n-    public final static String ALL = \"All\";\n-    \n-    public final static String NAVIGATION_ROOT = \"Qpid Connections\";\n-    public final static String DESCRIPTION = \" Description\";\n-    \n-    public final static String QUEUE  = \"Queue\";\n-    public final static String CONNECTION =\"Connection\";\n-    public final static String EXCHANGE = \"Exchange\";\n-    public final static String EXCHANGE_TYPE = \"ExchangeType\";\n-    public final static String[] EXCHANGE_TYPE_VALUES = {\"direct\", \"topic\", \"headers\"};\n-    public final static String[] BOOLEAN_TYPE_VALUES = {\"false\", \"true\"};\n-    public final static String[] ATTRIBUTE_TABLE_TITLES = {\"Attribute Name\", \"Value\"};  \n-    public static final String[] CONNECTION_PROTOCOLS ={\"RMI\"};\n+    public static final String ATTRIBUTE_QUEUE_OWNER = \"owner\";\n+    public static final String ATTRIBUTE_QUEUE_DEPTH = \"QueueDepth\";\n+    public static final String ATTRIBUTE_QUEUE_CONSUMERCOUNT = \"ActiveConsumerCount\";\n+    public static final String OPERATION_CREATE_QUEUE = \"createNewQueue\";\n+    public static final String OPERATION_CREATE_BINDING = \"createNewBinding\";\n+    public static final String OPERATION_MOVE_MESSAGES = \"moveMessages\";\n+\n+    public static final String OPERATION_CREATEUSER = \"createUser\";\n+    public static final String OPERATION_VIEWUSERS = \"viewUsers\";\n+    public static final String OPERATION_PARAM_USERNAME = \"username\";\n+\n+    public static final String OPERATION_SUCCESSFUL = \"Operation successful\";\n+    public static final String OPERATION_UNSUCCESSFUL = \"Operation unsuccessful\";\n+\n+    public static final String ALL = \"All\";\n+\n+    public static final String NAVIGATION_ROOT = \"Qpid Connections\";\n+    public static final String DESCRIPTION = \" Description\";\n+\n+    public static final String ADMIN_MBEAN_TYPE = \"UserManagement\";\n+    public static final String QUEUE = \"Queue\";\n+    public static final String CONNECTION = \"Connection\";\n+    public static final String EXCHANGE = \"Exchange\";\n+    public static final String EXCHANGE_TYPE = \"ExchangeType\";\n+    public static final String[] EXCHANGE_TYPE_VALUES = { \"direct\", \"fanout\", \"headers\", \"topic\" };\n+    public static final String[] BOOLEAN_TYPE_VALUES = { \"false\", \"true\" };\n+    public static final String[] ATTRIBUTE_TABLE_TITLES = { \"Attribute Name\", \"Value\" };\n+    public static final String[] CONNECTION_PROTOCOLS = { \"RMI\" };\n     public static final String DEFAULT_PROTOCOL = CONNECTION_PROTOCOLS[0];\n-    \n-    public final static String ACTION_ADDSERVER = \"New Connection\";\n-    public final static String ACTION_RECONNECT = \"Reconnect\";\n-    public final static String ACTION_LOGIN = \"Login\";\n-    \n-    public final static String QUEUE_SORT_BY_NAME = \"Queue Name\";\n-    public final static String QUEUE_SORT_BY_DEPTH = \"Queue Depth\";\n-    public final static String QUEUE_SORT_BY_CONSUMERCOUNT = \"Consumer Count\";\n-    public final static String QUEUE_SHOW_TEMP_QUEUES= \"show temporary queues\";\n-    \n-    public final static String SUBSCRIBE_BUTTON   = \"Subscribe\";\n-    public final static String UNSUBSCRIBE_BUTTON = \"Unsubscribe\";\n-    \n-    public final static String CONSOLE_IMAGE = \"ConsoelImage\";\n-    public final static String CLOSED_FOLDER_IMAGE = \"ClosedFolderImage\";\n-    public final static String OPEN_FOLDER_IMAGE = \"OpenFolderImage\";\n-    public final static String MBEAN_IMAGE = \"MBeanImage\";\n-    public final static String NOTIFICATION_IMAGE = \"NotificationImage\";\n-    \n-    public final static String FONT_BUTTON = \"ButtonFont\";\n-    public final static String FONT_BOLD = \"BoldFont\";\n-    public final static String FONT_ITALIC = \"ItalicFont\";\n-    public final static String FONT_TABLE_CELL = \"TableCellFont\";\n-    public final static String FONT_NORMAL = \"Normal\";\n-    \n-    public final static String BUTTON_DETAILS = \"Details\";\n-    public final static String BUTTON_EDIT_ATTRIBUTE = \"Edit Attribute\";\n-    public final static String BUTTON_REFRESH = \"Refresh\";\n-    public final static String BUTTON_GRAPH = \"Graph\";\n-    public final static int TIMER_INTERVAL = 5000;\n-    public final static String BUTTON_EXECUTE = \"Execute\";\n-    public final static String BUTTON_CLEAR = \"Clear\";\n-    public final static String BUTTON_CONNECT = \"Connect\";\n-    public final static String BUTTON_CANCEL = \"Cancel\";\n-    public final static String BUTTON_UPDATE = \"Update\";\n-    \n-    \n-    public final static int OPERATION_IMPACT_INFO    = 0;\n-    public final static int OPERATION_IMPACT_ACTION  = 1;\n-    public final static int OPERATION_IMPACT_ACTIONINFO  = 2;\n-    public final static int OPERATION_IMPACT_UNKNOWN = 3;\n-    \n-    public final static String ERROR_SERVER_CONNECTION = \"Server could not be connected\";\n-    public final static String INFO_PROTOCOL = \"Please select the protocol\";\n-    public final static String INFO_HOST_ADDRESS = \"Please enter the host address\";\n-    public final static String INFO_HOST_PORT = \"Please enter the port number\";\n-    public final static String INFO_USERNAME = \"Please enter the \" + USERNAME;\n-    public final static String INFO_PASSWORD = \"Please enter the \" + PASSWORD;\n+\n+    public static final String ACTION_ADDSERVER = \"New Connection\";\n+    public static final String ACTION_RECONNECT = \"Reconnect\";\n+    public static final String ACTION_LOGIN = \"Login\";\n+\n+    public static final String QUEUE_SORT_BY_NAME = \"Queue Name\";\n+    public static final String QUEUE_SORT_BY_DEPTH = \"Queue Depth\";\n+    public static final String QUEUE_SORT_BY_CONSUMERCOUNT = \"Consumer Count\";\n+    public static final String QUEUE_SHOW_TEMP_QUEUES = \"show temporary queues\";\n+\n+    public static final String SUBSCRIBE_BUTTON = \"Subscribe\";\n+    public static final String UNSUBSCRIBE_BUTTON = \"Unsubscribe\";\n+\n+    public static final String CONSOLE_IMAGE = \"ConsoelImage\";\n+    public static final String CLOSED_FOLDER_IMAGE = \"ClosedFolderImage\";\n+    public static final String OPEN_FOLDER_IMAGE = \"OpenFolderImage\";\n+    public static final String MBEAN_IMAGE = \"MBeanImage\";\n+    public static final String NOTIFICATION_IMAGE = \"NotificationImage\";\n+\n+    public static final String FONT_BUTTON = \"ButtonFont\";\n+    public static final String FONT_BOLD = \"BoldFont\";\n+    public static final String FONT_ITALIC = \"ItalicFont\";\n+    public static final String FONT_TABLE_CELL = \"TableCellFont\";\n+    public static final String FONT_NORMAL = \"Normal\";\n+\n+    public static final String BUTTON_DETAILS = \"Details\";\n+    public static final String BUTTON_EDIT_ATTRIBUTE = \"Edit Attribute\";\n+    public static final String BUTTON_REFRESH = \"Refresh\";\n+    public static final String BUTTON_GRAPH = \"Graph\";\n+    public static final int TIMER_INTERVAL = 5000;\n+    public static final String BUTTON_EXECUTE = \"Execute\";\n+    public static final String BUTTON_CLEAR = \"Clear\";\n+    public static final String BUTTON_CONNECT = \"Connect\";\n+    public static final String BUTTON_CANCEL = \"Cancel\";\n+    public static final String BUTTON_UPDATE = \"Update\";\n+\n+    public static final int OPERATION_IMPACT_INFO = 0;\n+    public static final int OPERATION_IMPACT_ACTION = 1;\n+    public static final int OPERATION_IMPACT_ACTIONINFO = 2;\n+    public static final int OPERATION_IMPACT_UNKNOWN = 3;\n+\n+    public static final String ERROR_SERVER_CONNECTION = \"Server could not be connected\";\n+    public static final String INFO_PROTOCOL = \"Please select the protocol\";\n+    public static final String INFO_HOST_ADDRESS = \"Please enter the host address\";\n+    public static final String INFO_HOST_PORT = \"Please enter the port number\";\n+    public static final String INFO_USERNAME = \"Please enter the \" + USERNAME;\n+    public static final String INFO_PASSWORD = \"Please enter the \" + PASSWORD;\n+\n+    public static final String MECH_CRAMMD5 = \"CRAM-MD5\";\n+    public static final String MECH_PLAIN = \"PLAIN\";\n+    public static final String SASL_CRAMMD5 = \"SASL/CRAM-MD5\";\n+    public static final String SASL_PLAIN = \"SASL/PLAIN\";\n }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Constants.java"}, {"additions": 11, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ManagedBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ManagedBean.java", "sha": "31825e925df455a6243d165cb3952f7d4553fb33", "changes": 16, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ManagedBean.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,6 +20,7 @@\n  */\n package org.apache.qpid.management.ui;\n \n+import static org.apache.qpid.management.ui.Constants.*;\n import java.util.HashMap;\n \n /**\n@@ -50,7 +51,7 @@ public void setProperties(HashMap properties)\n         this._properties = properties;\n         setName(getProperty(\"name\"));\n         setType(getProperty(\"type\"));\n-        _virtualHostName = getProperty(Constants.VIRTUAL_HOST);\n+        _virtualHostName = getProperty(VIRTUAL_HOST);\n     }\n     public String getDomain()\n     {\n@@ -89,7 +90,7 @@ public void setUniqueName(String uniqueName)\n     public String getVirtualHostName()\n     {\n         // To make it work with the broker with no virtual host implementation\n-        return _virtualHostName == null ? Constants.DEFAULT_VH : _virtualHostName;\n+        return _virtualHostName == null ? DEFAULT_VH : _virtualHostName;\n     }\n     \n     /**\n@@ -106,21 +107,26 @@ public String getInstanceName()\n     \n     public boolean isQueue()\n     {\n-        return _type.endsWith(Constants.QUEUE);\n+        return _type.endsWith(QUEUE);\n     }\n     \n     public boolean isConnection()\n     {\n-        return _type.endsWith(Constants.CONNECTION);\n+        return _type.endsWith(CONNECTION);\n     }\n     \n     public boolean isExchange()\n     {\n-        return _type.endsWith(Constants.EXCHANGE);\n+        return _type.endsWith(EXCHANGE);\n     }\n     \n     public boolean isTempQueue()\n     {\n         return (isQueue() && getName().startsWith(\"tmp_\"));\n     }\n+    \n+    public boolean isAdmin()\n+    {\n+        return _type.endsWith(ADMIN_MBEAN_TYPE);\n+    }\n }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ManagedBean.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Perspective.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Perspective.java", "sha": "f93200cadfd8ff5c99463702a332d98864363d1d", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Perspective.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -37,8 +37,8 @@ public void createInitialLayout(IPageLayout layout)\n \t\tlayout.setEditorAreaVisible(false);\n         \n \t\t// standalone view meaning it can't be docked or stacked with other views, and it doesn't have a title bar.        \n-\t\tlayout.addStandaloneView(NavigationView.ID, true, IPageLayout.LEFT, 0.25f, editorArea);\n-        layout.addStandaloneView(MBeanView.ID, true, IPageLayout.RIGHT, 0.75f, editorArea);\n+\t\tlayout.addStandaloneView(NavigationView.ID, true, IPageLayout.LEFT, 0.30f, editorArea);\n+        layout.addStandaloneView(MBeanView.ID, true, IPageLayout.RIGHT, 0.70f, editorArea);\n \t\t\n \t\tlayout.getViewLayout(NavigationView.ID).setCloseable(false);\n         layout.getViewLayout(MBeanView.ID).setCloseable(false);       ", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/Perspective.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ServerRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ServerRegistry.java", "sha": "313e143df5b04aa0686d96750717f26878c462c4", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ServerRegistry.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -128,6 +128,10 @@ public void addVirtualHost(String name)\n         return _virtualHosts;\n     }\n     \n+    public abstract void setUserList(List<String> list);\n+    \n+    public abstract List<String> getUsernames();\n+    \n     public abstract void addManagedObject(ManagedBean key);\n     \n     public abstract List<ManagedBean> getMBeans();\n@@ -154,7 +158,7 @@ public void addVirtualHost(String name)\n     \n     public abstract boolean hasSubscribedForNotifications(ManagedBean mbean, String name, String type);\n     \n-    public abstract void clearNotifications(ManagedBean mbean);\n+    public abstract void clearNotifications(ManagedBean mbean, List<NotificationObject> list);\n     \n     public ClientListener getNotificationListener()\n     {", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/ServerRegistry.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/AddServer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/AddServer.java", "sha": "0e12c59de4abbc3f25e56a2154593e05db5cd2da", "changes": 13, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/AddServer.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -194,9 +194,6 @@ private void createAddServerPopup()\n             }\n         }\n         \n-        //If you create it, you dispose it.\n-        shell.dispose();\n-        \n         // enable the main shell\n         _window.getShell().setEnabled(true);\n         _window.getShell().open();\n@@ -263,15 +260,15 @@ private void createWidgets(final Shell shell)\n         user.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, false, false));\n         \n         final Text textUser = new Text(composite, SWT.BORDER);\n-        textUser.setText(DEFAULT_USERNAME);\n+        textUser.setText(\"\");\n         textUser.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n         \n         Label password = new Label(composite, SWT.NONE);\n         password.setText(PASSWORD);\n         password.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, false, false));\n         \n         final Text textPwd = new Text(composite, SWT.BORDER | SWT.SINGLE | SWT.PASSWORD);\n-        textPwd.setText(DEFAULT_PASSWORD);\n+        textPwd.setText(\"\");\n         //textPwd.setEchoChar('*');\n         textPwd.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n         \n@@ -327,11 +324,7 @@ public void widgetSelected(SelectionEvent event)\n                 \n                 _domain = comboDomain.getText();\n                 _addServer = true;\n-\n-                if (!connectButton.getShell().isDisposed())\n-                {\n-                    connectButton.getShell().dispose();\n-                }                                      \n+                shell.dispose();                                     \n             }\n         });\n         ", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/AddServer.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/ReconnectServer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/ReconnectServer.java", "sha": "9aa265ab3c4b85c7bc655c9e0679dee3dbaa1cd6", "changes": 13, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/ReconnectServer.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -168,9 +168,6 @@ private void createLoginPopup()\n             }\n         }\n         \n-        //If you create it, you dispose it.\n-        shell.dispose();\n-        \n         // enable the main shell\n         _window.getShell().setEnabled(true);\n         _window.getShell().open();\n@@ -194,7 +191,7 @@ private void createWidgets(final Shell shell)\n         user.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, false, false));\n         \n         final Text textUser = new Text(composite, SWT.BORDER);\n-        textUser.setText(DEFAULT_USERNAME);\n+        textUser.setText(\"\");\n         textUser.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n         // Put cursor on this field\n         textUser.setFocus();\n@@ -204,7 +201,7 @@ private void createWidgets(final Shell shell)\n         password.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, false, false));\n         \n         final Text textPwd = new Text(composite, SWT.BORDER | SWT.SINGLE | SWT.PASSWORD);\n-        textPwd.setText(DEFAULT_PASSWORD);\n+        textPwd.setText(\"\");\n         textPwd.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n         \n         Composite buttonsComposite  = new Composite(composite, SWT.NONE);\n@@ -240,11 +237,7 @@ public void widgetSelected(SelectionEvent event)\n                 }\n                 \n                 _connect = true;\n-\n-                if (!connectButton.getShell().isDisposed())\n-                {\n-                    connectButton.getShell().dispose();\n-                }\n+                shell.dispose();\n             }\n         });\n ", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/actions/ReconnectServer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/ClientListener.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/ClientListener.java", "sha": "2be0ddbebfaf2a436ac1db2e1a193e210a1a583c", "changes": 5, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/ClientListener.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -45,10 +45,7 @@ public void handleNotification(Notification notification, Object handback)\n     {\n         ObjectName objName = null;\n         String     type = notification.getType();\n-        if (MBeanUtility.isDebug())\n-        {\n-            System.out.println(type + \":\" + objName);\n-        }\n+        MBeanUtility.printOutput(type + \":\" + objName);\n         \n         if (MBeanServerNotification.REGISTRATION_NOTIFICATION.equals(type))\n         {", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/ClientListener.java"}, {"additions": 153, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java", "sha": "816c479cf9997cc6b4225174d2b4d807188a977b", "changes": 170, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,6 +20,10 @@\n  */\n package org.apache.qpid.management.ui.jmx;\n \n+import static org.apache.qpid.management.ui.Constants.*;\n+\n+import java.lang.reflect.Constructor;\n+import java.security.Security;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n@@ -35,15 +39,20 @@\n import javax.management.remote.JMXConnector;\n import javax.management.remote.JMXConnectorFactory;\n import javax.management.remote.JMXServiceURL;\n+import javax.security.sasl.SaslClientFactory;\n \n-import org.apache.qpid.management.ui.Constants;\n+import org.apache.qpid.management.ui.ApplicationRegistry;\n import org.apache.qpid.management.ui.ManagedBean;\n import org.apache.qpid.management.ui.ManagedServer;\n import org.apache.qpid.management.ui.ServerRegistry;\n import org.apache.qpid.management.ui.model.ManagedAttributeModel;\n import org.apache.qpid.management.ui.model.NotificationInfoModel;\n import org.apache.qpid.management.ui.model.NotificationObject;\n import org.apache.qpid.management.ui.model.OperationDataModel;\n+import org.apache.qpid.management.ui.sasl.JCAProvider;\n+import org.apache.qpid.management.ui.sasl.SaslProvider;\n+import org.apache.qpid.management.ui.sasl.UserPasswordCallbackHandler;\n+import org.apache.qpid.management.ui.sasl.UsernameHashedPasswordCallbackHandler;\n \n \n public class JMXServerRegistry extends ServerRegistry\n@@ -52,11 +61,12 @@\n     private JMXConnector _jmxc = null;\n     private MBeanServerConnection _mbsc = null;\n     \n+    private List<String> _usersList;\n     // When an mbean gets removed from mbean server, then the notification listener\n     // will add that mbean in this list.\n     private List<ManagedBean> _mbeansToBeRemoved = new ArrayList<ManagedBean>();\n     \n-    // Map containing all managed beans and ampped with unique mbean name\n+    // Map containing all managed beans and mapped with unique mbean name\n     private HashMap<String, ManagedBean>   _mbeansMap    = new HashMap<String, ManagedBean>();\n     // Map containing MBeanInfo for all mbeans and mapped with unique mbean name \n     private HashMap<String, MBeanInfo>     _mbeanInfoMap = new HashMap<String, MBeanInfo>();\n@@ -83,11 +93,69 @@ public JMXServerRegistry(ManagedServer server) throws Exception\n     {\n         super(server);\n         JMXServiceURL jmxUrl = new JMXServiceURL(server.getUrl());\n-        Map<String, Object> env = new HashMap<String, Object>();\n-        String[] creds = {server.getUser(), server.getPassword()};\n-        env.put(JMXConnector.CREDENTIALS, creds);\n-\n-        _jmxc = JMXConnectorFactory.connect(jmxUrl, env);\n+        Map<String, Object> env = null;\n+        String securityMechanism = ApplicationRegistry.getSecurityMechanism();\n+       \n+        if (securityMechanism != null)\n+        {                                \n+            try\n+            {\n+                // Check if the JMXMP connector is available\n+                Class klass = Class.forName(\"javax.management.remote.jmxmp.JMXMPConnector\");\n+                \n+                jmxUrl = new JMXServiceURL(\"jmxmp\", server.getHost(), server.getPort());\n+                env = new HashMap<String, Object>();\n+                \n+                if (MECH_CRAMMD5.equals(securityMechanism))\n+                {\n+                    // For SASL/CRAM-MD5\n+                    Map<String, Class<? extends SaslClientFactory>> map = new HashMap<String, Class<? extends SaslClientFactory>>();\n+                    Class<?> clazz = Class.forName(\"org.apache.qpid.management.ui.sasl.CRAMMD5HashedSaslClientFactory\");\n+                    map.put(\"CRAM-MD5-HASHED\", (Class<? extends SaslClientFactory>) clazz);\n+                    \n+                    Security.addProvider(new JCAProvider(map));\n+                    env.put(\"jmx.remote.profiles\", SASL_CRAMMD5); \n+                    env.put(\"jmx.remote.sasl.callback.handler\",\n+                            new UsernameHashedPasswordCallbackHandler(server.getUser(), server.getPassword()));\n+                }\n+                else if (MECH_PLAIN.equals(securityMechanism))\n+                {\n+                    // For SASL/PLAIN\n+                    Security.addProvider(new SaslProvider());\n+                    env.put(\"jmx.remote.profiles\", SASL_PLAIN);\n+                    env.put(\"jmx.remote.sasl.callback.handler\",\n+                            new UserPasswordCallbackHandler(server.getUser(), server.getPassword())); \n+                }\n+                else\n+                {\n+                    MBeanUtility.printOutput(\"Security mechanism \" + securityMechanism + \" is not supported.\");\n+                }\n+                \n+                // Now create the instance of JMXMPConnector                                               \n+                Class[] paramTypes = {JMXServiceURL.class, Map.class};                           \n+                Constructor cons = klass.getConstructor(paramTypes);\n+                \n+                Object[] args = {jmxUrl, env};           \n+                Object theObject = cons.newInstance(args);\n+                \n+                _jmxc = (JMXConnector)theObject;\n+                _jmxc.connect();\n+                MBeanUtility.printOutput(\"Starting JMXConnector with SASL. Server=\" + server.getName());\n+            }\n+            catch (Exception ex)\n+            {\n+                // When JMXMPConnector is not available\n+                MBeanUtility.printOutput(\"Starting JMXConnector. Server=\" + server.getName());                \n+                jmxUrl = new JMXServiceURL(server.getUrl());\n+                _jmxc = JMXConnectorFactory.connect(jmxUrl, null);\n+            }\n+        }\n+        else\n+        {\n+            jmxUrl = new JMXServiceURL(server.getUrl());\n+            _jmxc = JMXConnectorFactory.connect(jmxUrl, null);\n+        }\n+        \n         _mbsc = _jmxc.getMBeanServerConnection();\n         \n         _clientListener = new ClientListener(server);\n@@ -155,10 +223,7 @@ else if (mbean.isConnection())\n \n     public void removeManagedObject(ManagedBean mbean)\n     {\n-        if (MBeanUtility.isDebug())\n-        {\n-            System.out.println(\"Removing MBean:\" + mbean.getUniqueName());\n-        }\n+        MBeanUtility.printOutput(\"Removing MBean:\" + mbean.getUniqueName());\n         \n         if (mbean.isQueue())\n         {\n@@ -218,17 +283,78 @@ public void addNotification(ObjectName objName, Notification notification)\n         list.add(obj);\n     }\n     \n+    /**\n+     * Returns all the notification objects for a given mbean. If mbean is null, it returns\n+     * notification objects for all the mbeans.\n+     */\n     public List<NotificationObject> getNotifications(ManagedBean mbean)\n     {\n-        return _notificationsMap.get(mbean.getUniqueName());\n+        if (mbean == null)\n+        {\n+            List<NotificationObject> totalList = new ArrayList<NotificationObject>();\n+            for (List<NotificationObject> list : _notificationsMap.values())\n+            {\n+                totalList.addAll(list);\n+            }\n+            return totalList;\n+        }\n+        else\n+        {\n+            return _notificationsMap.get(mbean.getUniqueName());\n+        }\n     }\n     \n-    public void clearNotifications(ManagedBean mbean)\n+    public void clearNotifications(ManagedBean mbean, List<NotificationObject> list)\n     {\n-        if (_notificationsMap.containsKey(mbean.getUniqueName()))\n-            _notificationsMap.get(mbean.getUniqueName()).clear();\n+        if (mbean == null)\n+        {\n+            if (list == null || list.isEmpty())\n+            {\n+                // All notifications of all mbeans to be cleared\n+                _notificationsMap.clear();\n+            }\n+            else\n+            {\n+                // Clear the selected notifications\n+                for (NotificationObject obj : list)\n+                {\n+                    mbean = _mbeansMap.get(obj.getSource().toString());\n+                    List<NotificationObject> nList = _notificationsMap.get(mbean.getUniqueName());\n+                    if (nList != null && !nList.isEmpty())\n+                    {\n+                        nList.remove(obj);\n+                    }\n+                }\n+            }\n+        }\n+        else \n+        {\n+            if (list == null || list.isEmpty())\n+            {\n+                // All notifications of this mbean to be cleared\n+                List<NotificationObject> nList = _notificationsMap.get(mbean.getUniqueName());\n+                if (nList != null && !nList.isEmpty())\n+                {\n+                    nList.clear();\n+                }\n+            }\n+            else\n+            {\n+                // Clear the selected notifications\n+                for (NotificationObject obj : list)\n+                {\n+                    List<NotificationObject> nList = _notificationsMap.get(mbean.getUniqueName());\n+                    if (nList != null && !nList.isEmpty())\n+                    {\n+                        nList.remove(obj);\n+                    }\n+                }\n+            }\n+        }\n     }\n     \n+    \n+    \n     /**\n      * Adds notification name and type to the map. The map contains all the notification names,\n      * subscribed for an mbean.\n@@ -254,7 +380,7 @@ public void addNotificationListener(ManagedBean mbean, String name, String type)\n             map.put(name, list);\n         }\n         // Now add the notification type to the list\n-        if (Constants.ALL.equals(type))\n+        if (ALL.equals(type))\n         {\n             List<NotificationInfoModel> infoList = _notificationInfoMap.get(mbean.getUniqueName());\n             for (NotificationInfoModel model : infoList)\n@@ -313,7 +439,7 @@ public void removeNotificationListener(ManagedBean mbean, String name, String ty\n             HashMap<String, List<String>> map = _subscribedNotificationMap.get(mbean.getUniqueName());\n             if (map.containsKey(name))\n             {\n-                if (Constants.ALL.equals(type))\n+                if (ALL.equals(type))\n                 {\n                     map.remove(name);\n                 }\n@@ -441,6 +567,16 @@ public OperationDataModel getOperationModel(ManagedBean mbean)\n         }\n         return connections;\n     }\n+    \n+    public void setUserList(List<String> list)\n+    {\n+        _usersList = list;\n+    }\n+    \n+    public List<String> getUsernames()\n+    {\n+        return _usersList;\n+    }\n \n     public ClientNotificationListener getNotificationListener()\n     {", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/JMXServerRegistry.java"}, {"additions": 32, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/MBeanUtility.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/MBeanUtility.java", "sha": "41db11c10e5efb9a4046d73f63797266fdd2d82e", "changes": 52, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/MBeanUtility.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -60,13 +60,6 @@\n  */\n public class MBeanUtility\n {\n-    private static boolean _debug;\n-    static\n-    {\n-        String debug = System.getProperty(\"debug\");\n-        _debug = \"true\".equalsIgnoreCase(debug) ? true : false;\n-    }\n-    \n     public static final BigInteger MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);\n     public static final BigInteger MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);\n     /**\n@@ -149,27 +142,27 @@ public static void handleException(Exception ex)\n      * @param mbean managed bean\n      * @param ex   Exception\n      */\n-    public static void handleException(ManagedBean mbean, Exception ex)\n+    public static void handleException(ManagedBean mbean, Throwable ex)\n     {\n         if (mbean == null)\n         {\n             ViewUtility.popupErrorMessage(\"Error\", \"Managed Object is null \\n\" + ex.toString());\n-            ex.printStackTrace();\n+            printStackTrace(ex);\n         }\n         else if (ex instanceof IOException)\n         {\n             ViewUtility.popupErrorMessage(mbean.getInstanceName(), \"IO Error occured \\n\" + ex.toString());\n-            ex.printStackTrace();\n+            printStackTrace(ex);\n         }\n         else if (ex instanceof ReflectionException)\n         {\n             ViewUtility.popupErrorMessage(mbean.getInstanceName(), \"Server has thrown error \\n\" + ex.toString());\n-            ex.printStackTrace();\n+            printStackTrace(ex);\n         }\n         else if (ex instanceof InstanceNotFoundException)\n         {\n             ViewUtility.popupErrorMessage(mbean.getInstanceName(), \"Managed Object Not Found \\n\" + ex.toString());\n-            ex.printStackTrace();\n+            printStackTrace(ex);\n         }\n         else if (ex instanceof MBeanException)\n         {\n@@ -188,8 +181,20 @@ else if (ex instanceof ManagementConsoleException)\n         }\n         else \n         {\n-            ViewUtility.popupErrorMessage(mbean.getInstanceName(), ex.getMessage());\n-            ex.printStackTrace();\n+            if (ex.getCause() != null)\n+            {\n+                handleException(mbean, ex.getCause());\n+            }\n+            else\n+            {\n+                String msg = ex.getMessage();\n+                if (msg == null)\n+                {\n+                    msg = ex.toString();\n+                }\n+                ViewUtility.popupErrorMessage(mbean.getInstanceName(), msg);\n+                printStackTrace(ex);\n+            }\n         }\n         \n     }\n@@ -449,12 +454,19 @@ public static OperationDataModel getOperations(ManagedBean mbean)\n         return Arrays.asList(domains);\n     }\n     \n-    /**\n-     * return true if System property is set to true -Ddebug=true\n-     * @return\n-     */\n-    public static boolean isDebug()\n+    public static void printOutput(String statement)\n     {\n-        return _debug;\n+        if (ApplicationRegistry.debug)\n+        {\n+            System.out.println(statement);\n+        }\n+    }\n+    \n+    private static void printStackTrace(Throwable ex)\n+    {\n+        if (ApplicationRegistry.debug)\n+        {\n+            ex.printStackTrace();\n+        }\n     }\n }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/jmx/MBeanUtility.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/NotificationObject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/NotificationObject.java", "sha": "926e5f0a24c91f733bff575ff77284b6ac9d88b5", "changes": 15, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/NotificationObject.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -24,10 +24,12 @@\n import java.util.Date;\n import java.util.TimeZone;\n \n+import javax.management.ObjectName;\n+\n public class NotificationObject\n {\n \n-    private long     _sequenceNo;\n+    private long    _sequenceNo;\n     private Date    _timeStamp;\n     private String  _message;\n     private Object  _source;       \n@@ -52,6 +54,17 @@ public void setSource(Object _source)\n     {\n         this._source = _source;\n     }\n+    \n+    public String getSourceName()\n+    {\n+        if (_source instanceof ObjectName)\n+        {\n+            return ((ObjectName)_source).getKeyProperty(\"name\");\n+        }\n+        \n+        return null;\n+    }\n+    \n     public String getMessage()\n     {\n         return _message;", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/NotificationObject.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/OperationData.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/OperationData.java", "sha": "2b83645942ea7a53bc1ea6a2c2af6a930df406de", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/OperationData.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -80,5 +80,13 @@ public void setReturnType(String returnType)\n         this._returnType = returnType;\n     }\n     \n+    public boolean isReturnTypeBoolean()\n+    {\n+        return (_returnType.equals(\"boolean\") || _returnType.equals(\"java.lang.Boolean\"));\n+    }\n     \n+    public boolean isReturnTypeVoid()\n+    {\n+        return (_returnType.equals(\"void\") || _returnType.equals(\"java.lang.Void\"));\n+    }\n }\n\\ No newline at end of file", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/model/OperationData.java"}, {"additions": 60, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/CRAMMD5HashedSaslClientFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/CRAMMD5HashedSaslClientFactory.java", "sha": "32a0c123441a21b72cebf24494eabb231e20dd82", "changes": 60, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/CRAMMD5HashedSaslClientFactory.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,60 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.util.Map;\n+\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.sasl.Sasl;\n+import javax.security.sasl.SaslClient;\n+import javax.security.sasl.SaslClientFactory;\n+import javax.security.sasl.SaslException;\n+\n+public class CRAMMD5HashedSaslClientFactory implements SaslClientFactory\n+{\n+    /** The name of this mechanism */\n+    public static final String MECHANISM = \"CRAM-MD5-HASHED\";\n+\n+    public SaslClient createSaslClient(String[] mechanisms, String authorizationId, String protocol,\n+                                       String serverName, Map<String, ?> props, CallbackHandler cbh)\n+    throws SaslException\n+    {\n+        for (int i = 0; i < mechanisms.length; i++)\n+        {\n+            if (mechanisms[i].equals(MECHANISM))\n+            {\n+                if (cbh == null)\n+                {\n+                    throw new SaslException(\"CallbackHandler must not be null\");\n+                }\n+\n+                String[] mechs = {\"CRAM-MD5\"};\n+                return Sasl.createSaslClient(mechs, authorizationId, protocol, serverName, props, cbh);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public String[] getMechanismNames(Map props)\n+    { \n+        return new String[]{MECHANISM};\n+    }\n+}", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/CRAMMD5HashedSaslClientFactory.java"}, {"additions": 54, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/ClientSaslFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/ClientSaslFactory.java", "sha": "ce9a273eaae3052bc5d7ab57c85c200265684631", "changes": 54, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/ClientSaslFactory.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,54 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.util.Map;\n+\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.sasl.SaslClient;\n+import javax.security.sasl.SaslClientFactory;\n+import javax.security.sasl.SaslException;\n+\n+public class ClientSaslFactory implements SaslClientFactory\n+{\n+    public SaslClient createSaslClient(String[] mechs, String authorizationId, String protocol,\n+                                       String serverName, Map props, CallbackHandler cbh)\n+    throws SaslException \n+    {\n+        for (int i = 0; i < mechs.length; i++)\n+        {\n+            if (mechs[i].equals(\"PLAIN\"))\n+            {\n+                return new PlainSaslClient(authorizationId, cbh);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Simple-minded implementation that ignores props\n+     */\n+    public String[] getMechanismNames(Map props)\n+    {\n+        return new String[]{\"PLAIN\"};\n+    }\n+\n+}", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/ClientSaslFactory.java"}, {"additions": 56, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/JCAProvider.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/JCAProvider.java", "sha": "d8189f3ac36efa2b9d2bd1bd67d2c67f6c5306c1", "changes": 56, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/JCAProvider.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,56 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.security.Provider;\n+import java.util.Map;\n+\n+import javax.security.sasl.SaslClientFactory;\n+\n+public class JCAProvider extends Provider\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Creates the security provider with a map from SASL mechanisms to implementing factories.\n+     *\n+     * @param providerMap The map from SASL mechanims to implementing factory classes.\n+     */\n+    public JCAProvider(Map<String, Class<? extends SaslClientFactory>> providerMap)\n+    {\n+        super(\"AMQSASLProvider\", 1.0, \"A JCA provider that registers all \"\n+              + \"AMQ SASL providers that want to be registered\");\n+        register(providerMap);\n+    }\n+\n+    /**\n+     * Registers client factory classes for a map of mechanism names to client factory classes.\n+     *\n+     * @param providerMap The map from SASL mechanims to implementing factory classes.\n+     */\n+    private void register(Map<String, Class<? extends SaslClientFactory>> providerMap)\n+    {\n+        for (Map.Entry<String, Class<? extends SaslClientFactory>> me : providerMap.entrySet())\n+        {\n+            put(\"SaslClientFactory.\" + me.getKey(), me.getValue().getName());\n+        }\n+    }\n+}", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/JCAProvider.java"}, {"additions": 203, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/PlainSaslClient.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/PlainSaslClient.java", "sha": "22190f29eb328ec04ccaf505bd3de4ef97d0b177", "changes": 203, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/PlainSaslClient.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,203 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.io.*;\n+import javax.security.auth.callback.*;\n+import javax.security.sasl.*;\n+\n+public class PlainSaslClient implements SaslClient\n+{\n+\n+    private boolean completed;\n+    private CallbackHandler cbh;\n+    private String authorizationID;\n+    private String authenticationID;\n+    private byte password[];\n+    private static byte SEPARATOR = 0;\n+    \n+    public PlainSaslClient(String authorizationID, CallbackHandler cbh) throws SaslException\n+    {\n+        completed = false;\n+        this.cbh = cbh;\n+        Object[] userInfo = getUserInfo();\n+        this.authorizationID = authorizationID;\n+        this.authenticationID = (String) userInfo[0];\n+        this.password = (byte[]) userInfo[1];\n+        if (authenticationID == null || password == null)\n+        {\n+            throw new SaslException(\"PLAIN: authenticationID and password must be specified\");\n+        }\n+    }\n+\n+    public byte[] evaluateChallenge(byte[] challenge) throws SaslException\n+    {\n+        if (completed)\n+        {\n+            throw new IllegalStateException(\"PLAIN: authentication already \" +\n+            \"completed\");\n+        }\n+        completed = true;\n+        try \n+        {\n+            byte authzid[] =\n+                authorizationID == null ? null : authorizationID.getBytes(\"UTF8\");\n+            byte authnid[] = authenticationID.getBytes(\"UTF8\");\n+            byte response[] =\n+                new byte[\n+                         password.length +\n+                         authnid.length +\n+                         2 + // SEPARATOR\n+                         (authzid != null ? authzid.length : 0)\n+                         ];\n+            int size = 0;\n+            if (authzid != null) {\n+                System.arraycopy(authzid, 0, response, 0, authzid.length);\n+                size = authzid.length;\n+            }\n+            response[size++] = SEPARATOR;\n+            System.arraycopy(authnid, 0, response, size, authnid.length);\n+            size += authnid.length;\n+            response[size++] = SEPARATOR;\n+            System.arraycopy(password, 0, response, size, password.length);\n+            clearPassword();\n+            return response;\n+        } catch (UnsupportedEncodingException e) {\n+            throw new SaslException(\"PLAIN: Cannot get UTF-8 encoding of ids\",\n+                    e);\n+        }\n+    }\n+\n+    public String getMechanismName()\n+    {\n+        return \"PLAIN\";\n+    }\n+\n+    public boolean hasInitialResponse()\n+    {\n+        return true;\n+    }\n+\n+    public boolean isComplete()\n+    {\n+        return completed;\n+    }\n+\n+    public byte[] unwrap(byte[] incoming, int offset, int len) throws SaslException\n+    {\n+        if (completed) {\n+            throw new IllegalStateException(\"PLAIN: this mechanism supports \" +\n+            \"neither integrity nor privacy\");\n+        } else {\n+            throw new IllegalStateException(\"PLAIN: authentication not \" +\n+            \"completed\");\n+        }\n+    }\n+\n+    public byte[] wrap(byte[] outgoing, int offset, int len) throws SaslException\n+    {\n+        if (completed)\n+        {\n+            throw new IllegalStateException(\"PLAIN: this mechanism supports \" +\n+            \"neither integrity nor privacy\");\n+        }\n+        else\n+        {\n+            throw new IllegalStateException(\"PLAIN: authentication not \" +\n+            \"completed\");\n+        }\n+    }\n+\n+    public Object getNegotiatedProperty(String propName)\n+    {\n+        if (completed)\n+        {\n+            if (propName.equals(Sasl.QOP))\n+            {\n+                return \"auth\";\n+            }\n+            else\n+            {\n+                return null;\n+            }\n+        }\n+        else \n+        {\n+            throw new IllegalStateException(\"PLAIN: authentication not \" +\n+            \"completed\");\n+        }\n+    }\n+\n+    private void clearPassword()\n+    {\n+        if (password != null)\n+        {\n+            for (int i = 0 ; i < password.length ; i++)\n+            {\n+                password[i] = 0;\n+            }\n+            password = null;\n+        }\n+    }\n+\n+    public void dispose() throws SaslException\n+    {\n+        clearPassword();\n+    }\n+\n+    protected void finalize()\n+    {\n+        clearPassword();\n+    }\n+\n+    private Object[] getUserInfo() throws SaslException\n+    {\n+        try\n+        {\n+            final String userPrompt = \"PLAIN authentication id: \";\n+            final String pwPrompt = \"PLAIN password: \";\n+            NameCallback nameCb = new NameCallback(userPrompt);\n+            PasswordCallback passwordCb = new PasswordCallback(pwPrompt, false);\n+            cbh.handle(new Callback[] { nameCb, passwordCb });\n+            String userid = nameCb.getName();\n+            char pwchars[] = passwordCb.getPassword();\n+            byte pwbytes[];\n+            if (pwchars != null)\n+            {\n+                pwbytes = (new String(pwchars)).getBytes(\"UTF8\");\n+                passwordCb.clearPassword();\n+            }\n+            else \n+            {\n+                pwbytes = null;\n+            }\n+            return (new Object[] { userid, pwbytes });\n+        } \n+        catch (IOException e)\n+        {\n+            throw new SaslException(\"Cannot get password\", e);\n+        } \n+        catch (UnsupportedCallbackException e)\n+        {\n+            throw new SaslException(\"Cannot get userid/password\", e);\n+        }\n+    }\n+}", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/PlainSaslClient.java"}, {"additions": 35, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/SaslProvider.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/SaslProvider.java", "sha": "2917de87401abd7c0e10af9784fe41ab24b67f6c", "changes": 35, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/SaslProvider.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,35 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.security.Provider;\n+\n+public class SaslProvider extends Provider\n+{\n+    private static final long serialVersionUID = -6978096016899676466L;\n+\n+    public SaslProvider()\n+    {\n+        super(\"SaslClientFactory\", 1.0, \"SASL PLAIN CLIENT MECHANISM\");\n+        put(\"SaslClientFactory.PLAIN\", \"ClientSaslFactory\");\n+    }\n+\n+}", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/SaslProvider.java"}, {"additions": 73, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UserPasswordCallbackHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UserPasswordCallbackHandler.java", "sha": "1602229c85af0d59256af8f95b6837a49739312d", "changes": 73, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UserPasswordCallbackHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.io.*;\n+import javax.security.auth.callback.*;\n+\n+public class UserPasswordCallbackHandler implements CallbackHandler\n+{\n+    private String user;\n+    private char[] pwchars;\n+    \n+    public UserPasswordCallbackHandler(String user, String password)\n+    {\n+        this.user = user;\n+        this.pwchars = password.toCharArray();\n+    }\n+\n+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException\n+    {\n+        for (int i = 0; i < callbacks.length; i++)\n+        {\n+            if (callbacks[i] instanceof NameCallback)\n+            {\n+                NameCallback ncb = (NameCallback) callbacks[i];\n+                ncb.setName(user);\n+            } \n+            else if (callbacks[i] instanceof PasswordCallback)\n+            {\n+                PasswordCallback pcb = (PasswordCallback) callbacks[i];\n+                pcb.setPassword(pwchars);\n+            } \n+            else\n+            {\n+                throw new UnsupportedCallbackException(callbacks[i]);\n+            }\n+        }\n+    }\n+\n+    private void clearPassword()\n+    {\n+        if (pwchars != null) \n+        {\n+            for (int i = 0 ; i < pwchars.length ; i++)\n+            {\n+                pwchars[i] = 0;\n+            }\n+            pwchars = null;\n+        }\n+    }\n+\n+    protected void finalize()\n+    {\n+        clearPassword();\n+    }\n+}", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UserPasswordCallbackHandler.java"}, {"additions": 82, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UsernameHashedPasswordCallbackHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UsernameHashedPasswordCallbackHandler.java", "sha": "f4e3d2661e153ba92a1813ca749ac76006ef6b09", "changes": 82, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UsernameHashedPasswordCallbackHandler.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,82 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.qpid.management.ui.sasl;\n+\n+import java.io.IOException;\n+\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+\n+import org.apache.qpid.management.ui.views.ViewUtility;\n+\n+public class UsernameHashedPasswordCallbackHandler implements CallbackHandler\n+{\n+    private String user;\n+    private char[] pwchars;\n+    \n+    public UsernameHashedPasswordCallbackHandler(String user, String password) throws Exception\n+    {\n+        this.user = user;\n+        this.pwchars = ViewUtility.getHash(password);\n+    }\n+\n+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException\n+    {\n+        for (int i = 0; i < callbacks.length; i++)\n+        {\n+            if (callbacks[i] instanceof NameCallback)\n+            {\n+                NameCallback ncb = (NameCallback) callbacks[i];\n+                ncb.setName(user);\n+            } \n+            else if (callbacks[i] instanceof PasswordCallback)\n+            {\n+                PasswordCallback pcb = (PasswordCallback) callbacks[i];\n+                pcb.setPassword(pwchars);\n+            } \n+            else\n+            {\n+                throw new UnsupportedCallbackException(callbacks[i]);\n+            }\n+        }\n+    }\n+\n+    \n+    private void clearPassword()\n+    {\n+        if (pwchars != null) \n+        {\n+            for (int i = 0 ; i < pwchars.length ; i++)\n+            {\n+                pwchars[i] = 0;\n+            }\n+            pwchars = null;\n+        }\n+    }\n+\n+    protected void finalize()\n+    {\n+        clearPassword();\n+    }\n+}", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/sasl/UsernameHashedPasswordCallbackHandler.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/AttributesTabControl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/AttributesTabControl.java", "sha": "a7e8bbfc4c62afdb027622eb322b5b92e37fd33c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/AttributesTabControl.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -596,7 +596,7 @@ public void widgetSelected(SelectionEvent event)\n     }    \n \n     // Refresh from the server registry\n-    private void refresh()\n+    public void refresh()\n     {\n         JMXServerRegistry serverRegistry = (JMXServerRegistry)ApplicationRegistry.getServerRegistry(_mbean);\n         ManagedAttributeModel attributesList = serverRegistry.getAttributeModel(_mbean);", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/AttributesTabControl.java"}, {"additions": 73, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java", "sha": "344c3c4e7f256156e191df90da9f145294528543", "changes": 98, "status": "modified", "deletions": 25, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -62,6 +62,7 @@\n     \n     private FormToolkit  _toolkit = null;\n     private Form _form = null;\n+    private String _formText = APPLICATION_NAME;\n     private static ManagedServer _server = null;\n     private TreeObject _selectedNode = null;\n     private ManagedBean _mbean = null;\n@@ -73,6 +74,8 @@\n \n     // TabFolder to list all the mbeans for a given mbeantype(eg Connection, Queue, Exchange)\n     private TabFolder typeTabFolder = null;\n+    \n+    private TabFolder notificationTabFolder = null;\n     /*\n      * Listener for the selection events in the navigation view\n      */ \n@@ -91,16 +94,41 @@ public void selectionChanged(IWorkbenchPart part, ISelection sel)\n             // an mbeantype. For mbeantype selection(eg Connection, Queue, Exchange) _mbean will remain null.\n             _mbean = null;\n             setInvisible();\n-            _form.setText(APPLICATION_NAME);\n             \n-            // If a selected node(mbean) gets unregistered from mbena server, mbenaview should should \n+            // If a selected node(mbean) gets unregistered from mbean server, mbeanview should \n             // make the tabfolber for that mbean invisible\n             if (_selectedNode == null)            \n                 return;\n             \n             setServer();\n             refreshMBeanView();\n+            setFormTitle();            \n+        }\n+    }\n+    \n+    private void setFormTitle()\n+    {\n+        if (_mbean != null)\n+        {\n+            _formText = _mbean.getType();\n+            if ((_mbean.getVirtualHostName() != null) && (!DEFAULT_VH.equals(_mbean.getVirtualHostName())) )\n+            {\n+                _formText = _formText.replaceFirst(VIRTUAL_HOST, _mbean.getVirtualHostName());\n+                if (_mbean.getName() != null && _mbean.getName().length() != 0)\n+                {\n+                    _formText = _formText + \": \" + _mbean.getName();\n+                }\n+            }\n+        }\n+        else if ((_selectedNode.getVirtualHost() != null) && (!DEFAULT_VH.equals(_selectedNode.getVirtualHost())))\n+        {\n+            _formText = _selectedNode.getVirtualHost();\n         }\n+        else\n+        {\n+            _formText = APPLICATION_NAME;\n+        }\n+        _form.setText(_formText);\n     }\n     \n     public void refreshMBeanView()\n@@ -121,10 +149,16 @@ else if (NODE_TYPE_MBEANTYPE.equals(_selectedNode.getType()))\n             {\n                 refreshTypeTabFolder(_selectedNode.getName());\n             } \n-            else\n+            else if (NOTIFICATIONS.equals(_selectedNode.getType()))\n+            {\n+                refreshNotificationPage();\n+            }\n+            else if (MBEAN.equals(_selectedNode.getType()))\n             {\n+                _mbean = (ManagedBean)_selectedNode.getManagedObject(); \n                 showSelectedMBean();\n             }\n+            \n             _form.layout(true);\n             _form.getBody().layout(true, true);\n         }\n@@ -174,20 +208,7 @@ public static String getVirtualHost()\n     }\n     \n     private void showSelectedMBean() throws Exception\n-    {     \n-        if (NOTIFICATION.equals(_selectedNode.getType()))\n-        {\n-            _mbean = (ManagedBean)_selectedNode.getParent().getManagedObject();                \n-        }\n-        else if (MBEAN.equals(_selectedNode.getType()))\n-        {\n-            _mbean = (ManagedBean)_selectedNode.getManagedObject();                \n-        }\n-        else\n-        {\n-            return;\n-        }\n-        \n+    {           \n         try\n         {                \n             MBeanUtility.getMBeanInfo(_mbean);     \n@@ -213,14 +234,8 @@ else if (MBEAN.equals(_selectedNode.getType()))\n             tabFolder = createMBeanTabFolder();\n         }\n         \n-        String text = _mbean.getType();\n-        if (_mbean.getName() != null && _mbean.getName().length() != 0)\n-        {\n-            text = text + \": \" + _mbean.getName();\n-        }\n-        _form.setText(text);\n         int tabIndex = 0;\n-        if (NOTIFICATION.equals(_selectedNode.getType()))\n+        if (NOTIFICATIONS.equals(_selectedNode.getType()))\n         {\n             tabIndex = tabFolder.getItemCount() -1;\n         }\n@@ -247,6 +262,8 @@ public void createPartControl(Composite parent)\n         // Add mbeantype TabFolder. This will list all the mbeans under a mbeantype (eg Queue, Exchange).\n         // Using this list mbeans will be added in the navigation view\n         createMBeanTypeTabFolder();\n+        \n+        createNotificationsTabFolder();\n     }\n     \n     private TabFolder createMBeanTabFolder()\n@@ -345,7 +362,7 @@ private void createNotificationsTab(TabFolder tabFolder)\n         NotificationsTabControl controller = new NotificationsTabControl(tabFolder);\n         \n         TabItem tab = new TabItem(tabFolder, SWT.NONE);\n-        tab.setText(NOTIFICATION);\n+        tab.setText(NOTIFICATIONS);\n         tab.setData(CONTROLLER, controller);\n         tab.setControl(controller.getControl());\n     }\n@@ -432,6 +449,32 @@ public void handleEvent(Event evt)\n         });\n     }\n     \n+    private void createNotificationsTabFolder()\n+    {\n+        notificationTabFolder = new TabFolder(_form.getBody(), SWT.NONE);\n+        FormData layoutData = new FormData();\n+        layoutData.left = new FormAttachment(0);\n+        layoutData.top = new FormAttachment(0);\n+        layoutData.right = new FormAttachment(100);\n+        layoutData.bottom = new FormAttachment(100);\n+        notificationTabFolder.setLayoutData(layoutData);\n+        notificationTabFolder.setVisible(false);\n+        \n+        VHNotificationsTabControl controller = new VHNotificationsTabControl(notificationTabFolder);       \n+        TabItem tab = new TabItem(notificationTabFolder, SWT.NONE);\n+        tab.setText(NOTIFICATIONS);\n+        tab.setData(CONTROLLER, controller);\n+        tab.setControl(controller.getControl());\n+    }\n+    \n+    private void refreshNotificationPage()\n+    {        \n+        TabItem tab = notificationTabFolder.getItem(0);\n+        VHNotificationsTabControl controller = (VHNotificationsTabControl)tab.getData(CONTROLLER);\n+        controller.refresh();\n+        notificationTabFolder.setVisible(true);\n+    }\n+    \n     /**\n      * Refreshes the Selected mbeantype tab. The control lists all the available mbeans\n      * for an mbeantype(eg Queue, Exchange etc)\n@@ -492,6 +535,11 @@ private void setInvisible()\n         {\n             typeTabFolder.setVisible(false);\n         }\n+        \n+        if (notificationTabFolder != null)\n+        {\n+            notificationTabFolder.setVisible(false);\n+        }\n     }\n     \n }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/MBeanView.java"}, {"additions": 19, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java", "sha": "68f95e01f01dd5dfc80dc9b10910aedca60b9e4e", "changes": 27, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -244,7 +244,8 @@ public void addNewServer(String transportProtocol, String host, int port, String\n             List<TreeObject> list = _serversRootNode.getChildren();\n             for (TreeObject node : list)\n             {\n-                if (url.equals(node.getUrl()))\n+                ManagedServer nodeServer = (ManagedServer)node.getManagedObject();\n+                if (url.equals(nodeServer.getUrl()))\n                 {\n                     // Server is already in the list of added servers, so now connect it.\n                     // Set the server node as selected and then connect it.\n@@ -266,7 +267,6 @@ public void addNewServer(String transportProtocol, String host, int port, String\n \n         // Server connection is successful. Now add the server in the tree\n         TreeObject serverNode = new TreeObject(serverAddress, NODE_TYPE_SERVER);\n-        serverNode.setUrl(url);\n         serverNode.setManagedObject(managedServer);\n         _serversRootNode.addChild(serverNode);\n \n@@ -504,6 +504,11 @@ private void addDefaultNodes(TreeObject parent)\n         typeChild = new TreeObject(QUEUE, NODE_TYPE_MBEANTYPE);\n         typeChild.setParent(parent);\n         typeChild.setVirtualHost(parent.getVirtualHost());\n+        \n+        // Add common notification node for virtual host\n+        TreeObject notificationNode = new TreeObject(NOTIFICATIONS, NOTIFICATIONS);\n+        notificationNode.setParent(parent);\n+        notificationNode.setVirtualHost(parent.getVirtualHost());\n     }\n \n     /**\n@@ -585,7 +590,10 @@ private void addManagedBean(TreeObject domain, ManagedBean mbean) // throws Exce\n \n                 // create a node for \"type\"\n                 typeNode = createTypeNode(parentNode, type);\n-                typeNode.setVirtualHost(mbean.getVirtualHostName());\n+                if (!type.equals(VIRTUAL_HOST))\n+                {\n+                    typeNode.setVirtualHost(mbean.getVirtualHostName());\n+                }\n             }\n \n             // now type node create becomes the parent node for next node in hierarchy\n@@ -641,8 +649,8 @@ private void addManagedBean(TreeObject domain, ManagedBean mbean) // throws Exce\n \n         // Add notification node\n         // TODO: show this only if the mbean sends any notification\n-        TreeObject notificationNode = new TreeObject(NOTIFICATION, NOTIFICATION);\n-        notificationNode.setParent(mbeanNode);\n+        //TreeObject notificationNode = new TreeObject(NOTIFICATION, NOTIFICATION);\n+        //notificationNode.setParent(mbeanNode);\n     }\n \n     private TreeObject createTypeNode(TreeObject parent, String name)\n@@ -1044,7 +1052,7 @@ public void dispose()\n         public Image getImage(Object element)\n         {\n             TreeObject node = (TreeObject) element;\n-            if (node.getType().equals(NOTIFICATION))\n+            if (node.getType().equals(NOTIFICATIONS))\n             {\n                 return ApplicationRegistry.getImage(NOTIFICATION_IMAGE);\n             }\n@@ -1107,8 +1115,11 @@ public int category(Object element)\n             {\n                 return 1;\n             }\n-\n-            return 2;\n+            if (node.getType().equals(NOTIFICATIONS))\n+            {\n+                return 2;\n+            }\n+            return 3;\n         }\n     }\n ", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NavigationView.java"}, {"additions": 53, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NotificationsTabControl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NotificationsTabControl.java", "sha": "6894080859fcfc99e14d5cdd7214c5716d430a95", "changes": 410, "status": "modified", "deletions": 357, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NotificationsTabControl.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,29 +20,28 @@\n  */\n package org.apache.qpid.management.ui.views;\n \n-import java.util.ArrayList;\n+import static org.apache.qpid.management.ui.Constants.BUTTON_CLEAR;\n+import static org.apache.qpid.management.ui.Constants.BUTTON_REFRESH;\n+import static org.apache.qpid.management.ui.Constants.DESCRIPTION;\n+import static org.apache.qpid.management.ui.Constants.FONT_BOLD;\n+import static org.apache.qpid.management.ui.Constants.FONT_BUTTON;\n+import static org.apache.qpid.management.ui.Constants.FONT_ITALIC;\n+import static org.apache.qpid.management.ui.Constants.SUBSCRIBE_BUTTON;\n+import static org.apache.qpid.management.ui.Constants.UNSUBSCRIBE_BUTTON;\n+\n import java.util.List;\n \n-import static org.apache.qpid.management.ui.Constants.*;\n import org.apache.qpid.management.ui.ApplicationRegistry;\n import org.apache.qpid.management.ui.ManagedBean;\n import org.apache.qpid.management.ui.ServerRegistry;\n import org.apache.qpid.management.ui.jmx.MBeanUtility;\n import org.apache.qpid.management.ui.model.NotificationInfoModel;\n import org.apache.qpid.management.ui.model.NotificationObject;\n-import org.eclipse.jface.viewers.DoubleClickEvent;\n-import org.eclipse.jface.viewers.IDoubleClickListener;\n-import org.eclipse.jface.viewers.ILabelProviderListener;\n-import org.eclipse.jface.viewers.IStructuredContentProvider;\n-import org.eclipse.jface.viewers.ITableLabelProvider;\n-import org.eclipse.jface.viewers.StructuredSelection;\n-import org.eclipse.jface.viewers.TableViewer;\n-import org.eclipse.jface.viewers.Viewer;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n import org.eclipse.swt.SWT;\n import org.eclipse.swt.events.SelectionAdapter;\n import org.eclipse.swt.events.SelectionEvent;\n import org.eclipse.swt.events.SelectionListener;\n-import org.eclipse.swt.graphics.Image;\n import org.eclipse.swt.layout.FormAttachment;\n import org.eclipse.swt.layout.FormData;\n import org.eclipse.swt.layout.FormLayout;\n@@ -52,85 +51,41 @@\n import org.eclipse.swt.widgets.Combo;\n import org.eclipse.swt.widgets.Composite;\n import org.eclipse.swt.widgets.Control;\n-import org.eclipse.swt.widgets.Display;\n import org.eclipse.swt.widgets.Label;\n-import org.eclipse.swt.widgets.Shell;\n import org.eclipse.swt.widgets.TabFolder;\n-import org.eclipse.swt.widgets.Table;\n-import org.eclipse.swt.widgets.TableColumn;\n-import org.eclipse.swt.widgets.Text;\n-import org.eclipse.ui.forms.widgets.Form;\n-import org.eclipse.ui.forms.widgets.FormToolkit;\n \n /**\n  * Creates control composite for Notifications tab\n  * @author Bhupendra Bhardwaj\n  */\n-public class NotificationsTabControl extends TabControl\n-{\n-    private FormToolkit  _toolkit;\n-    private Form _form;\n-    private Table table = null;\n-    private TableViewer _tableViewer  = null;\n-    \n-    private IStructuredContentProvider contentProvider = new ContentProviderImpl();\n-    private SelectionListener selectionListener = new SelectionListenerImpl();\n-    private SelectionListener comboListener = new ComboSelectionListener();\n-    \n-    private Thread worker = null;\n-    \n-    private List<NotificationObject> _notifications = null;\n-    private static final String COLUMN_SEQ  = \"Sequence No\";\n-    private static final String COLUMN_TIME = \"TimeStamp\";\n-    private static final String COLUMN_TYPE  = \"Type\";\n-    private static final String COLUMN_MSG  = \"Notification Message\";\n-    private static final String[] _tableTitles = new String [] {\n-            COLUMN_SEQ,\n-            COLUMN_TIME,\n-            COLUMN_TYPE,\n-            COLUMN_MSG\n-         };\n+public class NotificationsTabControl extends VHNotificationsTabControl\n+{    \n+    private static final String SELECT_NOTIFICATIONNAME = \"Select Notification\";\n+    private static final String SELECT_NOTIFICATIONTYPE = \"Select Type\";\n+    private SelectionListener selectionListener;\n+    private SelectionListener comboListener;    \n     \n     private Combo notificationNameCombo = null;\n     private Combo typesCombo = null;\n     private Label descriptionLabel = null;\n     private Button _subscribeButton   = null;\n     private Button _unsubscribeButton = null;\n-    private Button _clearButton       = null;\n-    private Button _refreshButton       = null;\n-    \n     \n     public NotificationsTabControl(TabFolder tabFolder)\n     {\n         super(tabFolder);\n-        _toolkit = new FormToolkit(_tabFolder.getDisplay());\n-        _form = _toolkit.createForm(_tabFolder);\n-        GridLayout gridLayout = new GridLayout();      \n-        gridLayout.marginWidth = 0;\n-        gridLayout.marginHeight = 0;       \n-        _form.getBody().setLayout(gridLayout);\n-        \n-        createWidgets();\n-        worker = new Thread(new Worker()); \n-        worker.start();\n     }\n     \n-    private void createWidgets()\n+    protected void createWidgets()\n     {       \n+        selectionListener = new SelectionListenerImpl();\n+        comboListener = new ComboSelectionListener();\n         createNotificationInfoComposite();\n         //addFilterComposite();\n         addButtons();  \n         createTableViewer();\n     }\n     \n-    /**\n-     * @see TabControl#getControl()\n-     */\n-    public Control getControl()\n-    {\n-        return _form;\n-    }\n-    \n     /**\n      * Creates composite and populates for displaying Notification Information (name, type, description)\n      * and creates buttons for subscribing or unsubscribing for notifications\n@@ -205,7 +160,7 @@ private void createNotificationInfoComposite()\n     /**\n      * Creates clear buttin and refresh button\n      */\n-    private void addButtons()\n+    protected void addButtons()\n     {    \n         Composite composite = _toolkit.createComposite(_form.getBody(), SWT.NONE);\n         composite.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n@@ -224,8 +179,9 @@ public void widgetSelected(SelectionEvent e)\n                     if (_mbean == null)\n                         return;\n                     \n+                    IStructuredSelection ss = (IStructuredSelection)_tableViewer.getSelection();\n                     ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(_mbean);\n-                    serverRegistry.clearNotifications(_mbean);\n+                    serverRegistry.clearNotifications(_mbean, ss.toList());\n                     refresh();\n                 }\n             });\n@@ -247,155 +203,13 @@ public void widgetSelected(SelectionEvent e)\n                 }\n             });\n     }\n-    \n-    /**\n-     * Creates table to display notifications\n-     */\n-    private void createTable()\n-    {\n-        table = _toolkit.createTable(_form.getBody(),  SWT.FULL_SELECTION);\n-        table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n-        \n-        TableColumn column = new TableColumn(table, SWT.NONE);\n-        column.setText(_tableTitles[0]);\n-        column.pack();        //column.setWidth(200);\n-\n-        column = new TableColumn(table, SWT.NONE);\n-        column.setText(_tableTitles[1]);\n-        column.setWidth(150);\n-        \n-        column = new TableColumn(table, SWT.NONE);\n-        column.setText(_tableTitles[2]);\n-        column.setWidth(100);\n-        \n-        column = new TableColumn(table, SWT.NONE);\n-        column.setText(_tableTitles[3]);\n-        column.setWidth(500);\n-        \n-        table.setHeaderVisible(true);\n-        table.setLinesVisible(true);\n-    }\n-    \n-    /**\n-     * Creates JFace viewer for the notifications table\n-     */\n-    protected void createTableViewer()\n-    {\n-        createTable();\n-        _tableViewer = new TableViewer(table);\n-        //_tableViewer.getControl().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n-        _tableViewer.setUseHashlookup(true);\n-        _tableViewer.setContentProvider(contentProvider);\n-        _tableViewer.setLabelProvider(new LabelProviderImpl());\n-        _tableViewer.setColumnProperties(_tableTitles);\n-        /*\n-        CellEditor[] cellEditors = new CellEditor[_tableTitles.length];\n-        TextCellEditor textEditor = new TextCellEditor(table);\n-        cellEditors[0] = textEditor;\n-        textEditor = new TextCellEditor(table);\n-        cellEditors[1] = textEditor;\n-        textEditor = new TextCellEditor(table);\n-        cellEditors[2] = textEditor;\n-        textEditor = new TextCellEditor(table);\n-        cellEditors[3] = textEditor;\n-        \n-        // Assign the cell editors to the viewer \n-        _tableViewer.setCellEditors(cellEditors);\n-        _tableViewer.setCellModifier(new TableCellModifier());\n-        */\n-        \n-        addTableListeners();\n-        \n-        //_tableViewer.addSelectionChangedListener(new );\n-        \n-        //_notificationDetails = new Composite(_tabControl, SWT.BORDER);\n-        //_notificationDetails.setLayoutData(new GridData(GridData.FILL_BOTH));\n-        \n-        //_tabControl.layout();\n-        //viewerComposite.layout();\n-    }\n-    \n-    /**\n-     * Adds listeners to the viewer for displaying notification details \n-     */\n-    private void addTableListeners()\n-    {\n-        _tableViewer.addDoubleClickListener(new IDoubleClickListener()\n-            {\n-                Display display = null;\n-                Shell   shell = null;\n-                public void doubleClick(DoubleClickEvent event)\n-                {\n-                    display = Display.getCurrent();\n-                    shell = new Shell(display, SWT.BORDER | SWT.CLOSE | SWT.MIN |\n-                            SWT.MAX | SWT.RESIZE);\n-                    shell.setText(\"Notification\");\n-\n-                    int x = display.getBounds().width;\n-                    int y = display.getBounds().height;\n-                    shell.setBounds(x/4, y/4, x/2, y/3);\n-                    StructuredSelection selection = (StructuredSelection)event.getSelection();\n-                    createPopupContents((NotificationObject)selection.getFirstElement());\n-                    shell.open();\n-                    while (!shell.isDisposed()) {\n-                        if (!display.readAndDispatch()) {\n-                            display.sleep();\n-                        }\n-                    }\n-                    \n-                    //If you create it, you dispose it.\n-                    shell.dispose();\n-                }\n-\n-                private void createPopupContents(NotificationObject obj)\n-                {                    \n-                    shell.setLayout(new GridLayout());\n-                    \n-                    Composite parent = new Composite(shell, SWT.NONE);\n-                    parent.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n-                    GridLayout layout = new GridLayout(4, true);\n-                    parent.setLayout(layout);\n-\n-                    Label key = new Label(parent, SWT.TRAIL);               \n-                    key.setText(COLUMN_SEQ);\n-                    GridData layoutData = new GridData(SWT.TRAIL, SWT.TOP, false, false,1,1);\n-                    key.setLayoutData(layoutData);\n-                    Text  value = new Text(parent, SWT.BEGINNING | SWT.BORDER |SWT.READ_ONLY);\n-                    value.setText(\"\"+obj.getSequenceNo());\n-                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n-\n-                    // Time row\n-                    key = new Label(parent, SWT.TRAIL);\n-                    key.setText(COLUMN_TIME);\n-                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n-                    value = new Text(parent, SWT.BEGINNING | SWT.BORDER | SWT.READ_ONLY);\n-                    value.setText(\"\"+obj.getTimeStamp());\n-                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n-\n-                    key = new Label(parent, SWT.TRAIL);\n-                    key.setText(COLUMN_TYPE);\n-                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n-                    value = new Text(parent, SWT.BEGINNING | SWT.BORDER | SWT.READ_ONLY);\n-                    value.setText(\"\"+obj.getType());\n-                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n-\n-                    key = new Label(parent, SWT.TRAIL);\n-                    key.setText(COLUMN_MSG);\n-                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n-                    value = new Text(parent, SWT.MULTI | SWT.WRAP| SWT.BORDER | SWT.V_SCROLL | SWT.READ_ONLY);\n-                    value.setText(\"\"+obj.getMessage());\n-                    GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true, 3, 1);\n-                    gridData.heightHint = 100;\n-                    value.setLayoutData(gridData);\n-                }\n-            });\n-    }\n-    \n+  \n     @Override\n     public void refresh(ManagedBean mbean)\n     {\n         _mbean = mbean;\n         _notifications = null;\n+        _table.deselectAll();\n         _tableViewer.getTable().clearAll();\n         \n         if (_mbean == null)\n@@ -431,9 +245,10 @@ public void refresh(ManagedBean mbean)\n         _form.getBody().layout(true, true);\n     }\n     \n-    private void refresh()\n+    public void refresh()\n     {\n         _notifications = null;\n+        _table.deselectAll();\n         _tableViewer.getTable().clearAll();\n     }\n     \n@@ -444,7 +259,11 @@ private void populateNotificationInfo()\n     {\n         notificationNameCombo.removeAll();\n         NotificationInfoModel[] items = MBeanUtility.getNotificationInfo(_mbean);\n-        notificationNameCombo.add(\"Select Notification\");\n+        if (items.length > 1)\n+        {\n+            notificationNameCombo.add(SELECT_NOTIFICATIONNAME);\n+        }\n+        \n         for (int i = 0; i < items.length; i++)\n         {\n             notificationNameCombo.add(items[i].getName());\n@@ -457,6 +276,7 @@ private void populateNotificationInfo()\n         typesCombo.select(0);\n         typesCombo.setEnabled(false);\n         \n+        populateNotificationType(notificationNameCombo.getItem(0));\n         checkForEnablingButtons();\n     }\n     \n@@ -466,7 +286,8 @@ private void populateNotificationInfo()\n     private void checkForEnablingButtons()\n     {\n         int nameIndex = notificationNameCombo.getSelectionIndex();\n-        if (nameIndex == 0)\n+        int itemCount = notificationNameCombo.getItems().length;\n+        if ((itemCount > 1) && (nameIndex == 0))\n         {\n             _subscribeButton.setEnabled(false);\n             _unsubscribeButton.setEnabled(false);\n@@ -475,7 +296,8 @@ private void checkForEnablingButtons()\n         }\n         \n         int typeIndex = typesCombo.getSelectionIndex();\n-        if (typeIndex == 0)\n+        itemCount = typesCombo.getItems().length;\n+        if ((itemCount > 1) && (typeIndex == 0))\n         {\n             _subscribeButton.setEnabled(false);\n             _unsubscribeButton.setEnabled(false);\n@@ -560,164 +382,38 @@ public void widgetSelected(SelectionEvent e)\n             Combo combo = (Combo)e.getSource();\n             if (combo == notificationNameCombo)\n             {\n-                if (combo.getSelectionIndex() == 0)\n-                {\n-                    descriptionLabel.setText(\"\");\n-                    typesCombo.select(0);\n-                    typesCombo.setEnabled(false);\n-                    return;\n-                }\n-                String index = combo.getItem(combo.getSelectionIndex());                \n-                NotificationInfoModel data = (NotificationInfoModel)combo.getData(index);\n-                descriptionLabel.setText(data.getDescription());\n-                typesCombo.removeAll();       \n-                typesCombo.setItems(data.getTypes());\n-                typesCombo.add(\"Select Type\", 0);\n-                typesCombo.select(0);\n-                typesCombo.setEnabled(true);\n+                String selectedItem = combo.getItem(combo.getSelectionIndex());                \n+                populateNotificationType(selectedItem);\n             }\n             checkForEnablingButtons();\n         }\n     }\n     \n-    /**\n-     * Content provider class for the table viewer\n-     */\n-    private class ContentProviderImpl implements IStructuredContentProvider, INotificationViewer\n+    private void populateNotificationType(String notificationName)\n     {\n-        public void inputChanged(Viewer v, Object oldInput, Object newInput)\n+        NotificationInfoModel data = (NotificationInfoModel)notificationNameCombo.getData(notificationName);\n+        if (data == null)\n         {\n-            \n-        }\n-        public void dispose()\n-        {\n-            \n-        }\n-        public Object[] getElements(Object parent) \n-        {\n-            return _notifications.toArray(new NotificationObject[0]);\n-        }\n-        public void addNotification(NotificationObject notification)\n-        {\n-            _tableViewer.add(notification);\n-        }\n-        \n-        public void addNotification(List<NotificationObject> notificationList)\n-        {\n-            _tableViewer.add(notificationList.toArray(new NotificationObject[0]));\n-        }\n-    }\n-    \n-    /**\n-     * Label provider for the table viewer\n-     */\n-    private class LabelProviderImpl implements ITableLabelProvider\n-    {\n-        List<ILabelProviderListener> listeners = new ArrayList<ILabelProviderListener>();       \n-        public void addListener(ILabelProviderListener listener)\n-        {\n-            listeners.add(listener);\n-        }\n-        \n-        public void dispose(){\n-            \n-        }\n-        \n-        public Image getColumnImage(Object element, int columnIndex)\n-        {\n-            return null;\n-        }\n-        \n-        public String getColumnText(Object element, int columnIndex)\n-        {\n-            String result = null;\n-            NotificationObject t = (NotificationObject)element;\n-            switch(columnIndex)\n-            {\n-            case 0 : \n-                result = String.valueOf(t.getSequenceNo());\n-                break;\n-            case 1 :\n-                result = String.valueOf(t.getTimeStamp());\n-                break;\n-            case 2 : \n-                result = t.getType();\n-                break;\n-            case 3 : \n-                result = t.getMessage();\n-                break;\n-            default : \n-                result = \"\";\n-            }\n-            \n-            return result;\n-        }\n-        \n-        public boolean isLabelProperty(Object element, String property)\n-        {\n-            return false;\n-        }\n-        \n-        public void removeListener(ILabelProviderListener listener)\n-        {\n-            listeners.remove(listener);\n-        }\n-    } // end of LabelProviderImpl\n-    \n-    private boolean workerRunning = false;\n-    private void setWorkerRunning(boolean running)\n-    {\n-        workerRunning = running;\n-    }\n-    \n-    /**\n-     * Worker class which keeps looking if there are new notifications coming from server for the selected mbean\n-     */\n-    private class Worker implements Runnable\n-    {\n-        public void run()\n-        {\n-            Display display = _tabFolder.getDisplay();\n-            while(true)\n-            {\n-                if (!workerRunning || _mbean == null || display == null)\n-                {\n-                    sleep();\n-                    continue;\n-                }\n-                \n-                display.syncExec(new Runnable()\n-                {\n-                    public void run()\n-                    {\n-                        setWorkerRunning(_form.isVisible());\n-                        if (!workerRunning) return;\n-                        \n-                        updateTableViewer();\n-                    }\n-                });     \n-            \n-                sleep();\n-            }\n+            descriptionLabel.setText(\"\");\n+            typesCombo.select(0);\n+            typesCombo.setEnabled(false);\n+            return;\n         }\n-        \n-        private void sleep()\n+        descriptionLabel.setText(data.getDescription());\n+        typesCombo.removeAll();       \n+        typesCombo.setItems(data.getTypes());\n+        if (typesCombo.getItemCount() > 1)\n         {\n-            try\n-            {\n-                Thread.sleep(2000);\n-            }\n-            catch(Exception ex)\n-            {\n-\n-            }  \n+            typesCombo.add(SELECT_NOTIFICATIONTYPE, 0);\n         }\n+        typesCombo.select(0);\n+        typesCombo.setEnabled(true);\n     }\n     \n     /**\n      * Updates the table with new notifications received from mbean server for the selected mbean\n      */\n-    private void updateTableViewer()\n+    protected void updateTableViewer()\n     {\n         ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(_mbean);        \n         List<NotificationObject> newList = serverRegistry.getNotifications(_mbean);", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/NotificationsTabControl.java"}, {"additions": 79, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/OperationTabControl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/OperationTabControl.java", "sha": "2ac037e4f0d7530297bf6a3723b2573941c033d5", "changes": 84, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/OperationTabControl.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,10 +20,16 @@\n  */\n package org.apache.qpid.management.ui.views;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map.Entry;\n \n+import javax.management.openmbean.CompositeData;\n+import javax.management.openmbean.TabularDataSupport;\n+\n import static org.apache.qpid.management.ui.Constants.*;\n import org.apache.qpid.management.ui.ApplicationRegistry;\n import org.apache.qpid.management.ui.ManagedBean;\n@@ -76,7 +82,7 @@\n     private SelectionListener operationExecutionListener = new OperationExecutionListener(); \n     private SelectionListener refreshListener = new RefreshListener(); \n     private SelectionListener parameterSelectionListener = new ParameterSelectionListener();\n-    private SelectionListener bolleanSelectionListener = new BooleanSelectionListener();\n+    private SelectionListener booleanSelectionListener = new BooleanSelectionListener();\n     private VerifyListener    verifyListener = new VerifyListenerImpl();\n     private KeyListener       keyListener = new KeyListenerImpl();\n     private KeyListener       headerBindingListener = new HeaderBindingKeyListener();\n@@ -249,6 +255,8 @@ private void createParameterWidgets()\n             formData.top = new FormAttachment(0, parameterPositionOffset);\n             formData.left = new FormAttachment(label, 5);\n             formData.right = new FormAttachment(valueWidth);\n+            // this will contain the list of items, if the list is to be made available to choose from\n+            // e.g. the list of exchanges\n             String[] items = null;\n             if (param.getName().equals(QUEUE))\n             {\n@@ -269,6 +277,15 @@ else if (param.getName().equals(EXCHANGE_TYPE))\n             {\n                 items = EXCHANGE_TYPE_VALUES;\n             }\n+            else if (_mbean.isAdmin() && param.getName().equals(OPERATION_PARAM_USERNAME)\n+                                      && !_opData.getName().equals(OPERATION_CREATEUSER))\n+            {\n+                List<String> list = ApplicationRegistry.getServerRegistry(_mbean).getUsernames();\n+                if (list != null && !list.isEmpty())\n+                {\n+                    items = list.toArray(new String[0]);\n+                }\n+            }\n             \n             if (items != null)\n             {\n@@ -295,12 +312,17 @@ else if (param.isBoolean())\n                 Button booleanButton = _toolkit.createButton(_paramsComposite, \"\", SWT.CHECK);\n                 booleanButton.setLayoutData(formData);\n                 booleanButton.setData(param);\n-                booleanButton.addSelectionListener(bolleanSelectionListener);\n+                booleanButton.addSelectionListener(booleanSelectionListener);\n                 valueInCombo = true;                \n             }\n             else\n             {\n-                Text text = _toolkit.createText(_paramsComposite, \"\", SWT.NONE);\n+                int style = SWT.NONE;\n+                if (PASSWORD.equalsIgnoreCase(param.getName()))\n+                {\n+                    style = SWT.PASSWORD;\n+                }\n+                Text text = _toolkit.createText(_paramsComposite, \"\", style);\n                 formData = new FormData();\n                 formData.top = new FormAttachment(0, parameterPositionOffset);\n                 formData.left = new FormAttachment(label, 5);\n@@ -530,6 +552,8 @@ private void clearParameterValues(Composite control)\n                 ((org.eclipse.swt.widgets.List)controls[i]).deselectAll();\n             else if (controls[i] instanceof Text)\n                 ((Text)controls[i]).setText(\"\");\n+            else if (controls[i] instanceof Button)\n+                ((Button)controls[i]).setSelection(false);\n             else if (controls[i] instanceof Composite)\n                 clearParameterValues((Composite)controls[i]);\n         }\n@@ -557,6 +581,21 @@ public void widgetSelected(SelectionEvent e)\n                         }\n                         // End of custom code\n                         \n+                        \n+                        // customized for passwords\n+                        if (PASSWORD.equalsIgnoreCase(param.getName()))\n+                        {\n+                            try\n+                            {\n+                                param.setValueFromString(ViewUtility.getHashedString(param.getValue()));\n+                            }\n+                            catch (Exception ex)\n+                            {\n+                                MBeanUtility.handleException(_mbean, ex);\n+                                return;\n+                            }\n+                        }\n+                        // end of customization\n                         ViewUtility.popupInfoMessage(_form.getText(),\n                                 \"Please select the \" + ViewUtility.getDisplayText(param.getName()));\n                         \n@@ -609,16 +648,33 @@ private void executeAndShowResults()\n             return;\n         }\n         \n+        // Custom code for Admin mbean operation\n+        /* These custome codes here are to make the GUI look more user friendly. \n+         * Here we are adding the users to a list, which will be used to list username to be selected on\n+         * pages like \"delete user\", \"set password\" instead of typing the username\n+        */\n+        if (_mbean.isAdmin() && _opData.getName().equals(OPERATION_VIEWUSERS))\n+        {\n+            ApplicationRegistry.getServerRegistry(_mbean).setUserList(extractUserList(result));\n+        }\n+        // end of custom code\n+        \n         // Some mbeans have only \"type\" and no \"name\".\n         String title = _mbean.getType();\n         if (_mbean.getName() != null && _mbean.getName().length() != 0)\n         {\n             title = _mbean.getName();\n         }\n         \n-        if (_opData.getReturnType().equals(\"void\") || _opData.getReturnType().equals(\"java.lang.Void\"))\n+        if (_opData.isReturnTypeVoid())\n+        {\n+            ViewUtility.popupInfoMessage(title, OPERATION_SUCCESSFUL);\n+        }\n+        else if (_opData.isReturnTypeBoolean())\n         {\n-            ViewUtility.popupInfoMessage(title, \"Operation successful\");\n+            boolean success = Boolean.parseBoolean(result.toString());\n+            String message = success ? OPERATION_SUCCESSFUL : OPERATION_UNSUCCESSFUL;\n+            ViewUtility.popupInfoMessage(title, message);\n         }\n         else if (_opData.getParameters() != null && !_opData.getParameters().isEmpty())\n         {\n@@ -634,6 +690,24 @@ else if (_opData.getParameters() != null && !_opData.getParameters().isEmpty())\n \n     }\n     \n+    private List<String> extractUserList(Object result)\n+    {\n+        if (!(result instanceof TabularDataSupport))\n+        {\n+            return null;\n+        }\n+        \n+        TabularDataSupport tabularData = (TabularDataSupport)result;\n+        Collection<CompositeData> records = tabularData.values();\n+        List<String> list = new ArrayList<String>();\n+        for (CompositeData data : records)\n+        {\n+            list.add(data.get(USERNAME).toString());\n+        }\n+        Collections.sort(list);\n+        return list;\n+    }\n+    \n     /**\n      * Listener class for the operation parameters widget\n      */", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/OperationTabControl.java"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TabControl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TabControl.java", "sha": "c13c92066c5b7e92d249827e052616381a95fbc8", "changes": 13, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TabControl.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -69,7 +69,18 @@ public Control getControl()\n         return null;\n     }\n     \n-    public abstract void refresh(ManagedBean mbean);\n+    public void refresh(ManagedBean mbean)\n+    {\n+        if (mbean == null)\n+        {\n+            refresh();\n+        }\n+    }\n+    \n+    public void refresh()\n+    {\n+        \n+    }\n     \n     public void refresh(ManagedBean mbean, OperationData opData)\n     {", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TabControl.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TreeObject.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TreeObject.java", "sha": "9545ed9876bfcf5092de6502377ab9362d8a3c2b", "changes": 12, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TreeObject.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -31,7 +31,6 @@\n {\n     private String _name;\n     private String _type;\n-    private String _url;\n     private String _virtualHost;\n     private TreeObject _parent;\n     private List<TreeObject> _children = new ArrayList<TreeObject>();\n@@ -88,16 +87,6 @@ public String getType()\n     {\n         return _type;\n     }\n-\n-    public String getUrl()\n-    {\n-        return _url;\n-    }\n-\n-    public void setUrl(String url)\n-    {\n-        this._url = url;\n-    }\n     \n     public String getVirtualHost()\n     {\n@@ -131,7 +120,6 @@ public void setParent(TreeObject parent)\n         \n         if (parent != null)\n         {\n-            this._url = parent.getUrl();\n             parent.addChild(this);\n         }\n     }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/TreeObject.java"}, {"additions": 462, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/VHNotificationsTabControl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/VHNotificationsTabControl.java", "sha": "258f5ce02a4c2d2cac6959c5ed2664c37e1ea656", "changes": 462, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/VHNotificationsTabControl.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,462 @@\n+package org.apache.qpid.management.ui.views;\n+\n+import static org.apache.qpid.management.ui.Constants.BUTTON_CLEAR;\n+import static org.apache.qpid.management.ui.Constants.BUTTON_REFRESH;\n+import static org.apache.qpid.management.ui.Constants.CONSOLE_IMAGE;\n+import static org.apache.qpid.management.ui.Constants.FONT_BUTTON;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.qpid.management.ui.ApplicationRegistry;\n+import org.apache.qpid.management.ui.ServerRegistry;\n+import org.apache.qpid.management.ui.model.NotificationObject;\n+import org.eclipse.jface.viewers.DoubleClickEvent;\n+import org.eclipse.jface.viewers.IDoubleClickListener;\n+import org.eclipse.jface.viewers.ILabelProviderListener;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.jface.viewers.IStructuredContentProvider;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.viewers.ITableLabelProvider;\n+import org.eclipse.jface.viewers.StructuredSelection;\n+import org.eclipse.jface.viewers.TableViewer;\n+import org.eclipse.jface.viewers.Viewer;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Display;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.Shell;\n+import org.eclipse.swt.widgets.TabFolder;\n+import org.eclipse.swt.widgets.Table;\n+import org.eclipse.swt.widgets.TableColumn;\n+import org.eclipse.swt.widgets.Text;\n+import org.eclipse.ui.forms.widgets.Form;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+\n+public class VHNotificationsTabControl extends TabControl\n+{\n+    protected FormToolkit  _toolkit;\n+    protected Form _form;\n+    protected Table _table = null;\n+    protected TableViewer _tableViewer  = null;\n+     \n+    protected Thread worker = null;\n+    \n+    protected List<NotificationObject> _notifications = null;\n+    \n+    private static final String COLUMN_OBJ = \"Object Name\";\n+    private static final String COLUMN_SEQ  = \"Sequence No\";\n+    private static final String COLUMN_TIME = \"TimeStamp\";\n+    private static final String COLUMN_TYPE  = \"Type\";\n+    private static final String COLUMN_MSG  = \"Notification Message\";\n+    protected static final String[] _tableTitles = new String [] {\n+            COLUMN_OBJ,\n+            COLUMN_SEQ,\n+            COLUMN_TIME,\n+            COLUMN_TYPE,\n+            COLUMN_MSG\n+         };\n+    \n+    protected Button _clearButton       = null;\n+    protected Button _refreshButton       = null;\n+    \n+    public VHNotificationsTabControl(TabFolder tabFolder)\n+    {\n+        super(tabFolder);\n+        _toolkit = new FormToolkit(_tabFolder.getDisplay());\n+        _form = _toolkit.createForm(_tabFolder);\n+        GridLayout gridLayout = new GridLayout();      \n+        gridLayout.marginWidth = 0;\n+        gridLayout.marginHeight = 0;       \n+        _form.getBody().setLayout(gridLayout);\n+        \n+        worker = new Thread(new Worker()); \n+        worker.start();\n+    }\n+    \n+    protected void createWidgets()\n+    {       \n+        addButtons();  \n+        createTableViewer();\n+    }\n+    \n+    /**\n+     * @see TabControl#getControl()\n+     */\n+    public Control getControl()\n+    {\n+        if (_table == null)\n+        {\n+            createWidgets();\n+        }\n+        return _form;\n+    }\n+\n+    /**\n+     * Creates clear buttin and refresh button\n+     */\n+    protected void addButtons()\n+    {    \n+        Composite composite = _toolkit.createComposite(_form.getBody(), SWT.NONE);\n+        composite.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+        composite.setLayout(new GridLayout(2, true));\n+        \n+        // Add Clear Button\n+        _clearButton = _toolkit.createButton(composite, BUTTON_CLEAR, SWT.PUSH | SWT.CENTER);\n+        _clearButton.setFont(ApplicationRegistry.getFont(FONT_BUTTON));\n+        GridData gridData = new GridData(SWT.LEAD, SWT.TOP, true, false);\n+        gridData.widthHint = 80;\n+        _clearButton.setLayoutData(gridData);\n+        _clearButton.addSelectionListener(new SelectionAdapter()\n+            {\n+                public void widgetSelected(SelectionEvent e)\n+                {  \n+                    //TODO : Get selected rows and clear those\n+                    IStructuredSelection ss = (IStructuredSelection)_tableViewer.getSelection();\n+                    ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(MBeanView.getServer());\n+                    serverRegistry.clearNotifications(null, ss.toList());\n+                    refresh();\n+                }\n+            });\n+        \n+        // Add Refresh Button\n+        _refreshButton = _toolkit.createButton(composite, BUTTON_REFRESH, SWT.PUSH | SWT.CENTER);\n+        _refreshButton.setFont(ApplicationRegistry.getFont(FONT_BUTTON));\n+        gridData = new GridData(SWT.TRAIL, SWT.TOP, true, false);\n+        gridData.widthHint = 80;\n+        _refreshButton.setLayoutData(gridData);\n+        _refreshButton.addSelectionListener(new SelectionAdapter()\n+            {\n+                public void widgetSelected(SelectionEvent e)\n+                { \n+                    refresh();\n+                }\n+            });\n+    }\n+    \n+    /**\n+     * Creates table to display notifications\n+     */\n+    private void createTable()\n+    {\n+        _table = _toolkit.createTable(_form.getBody(), SWT.MULTI | SWT.FULL_SELECTION);\n+        _table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+        \n+        TableColumn column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[0]);\n+        column.setWidth(100);\n+        \n+        column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[1]);\n+        column.setWidth(100); \n+\n+        column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[2]);\n+        column.setWidth(130);\n+        \n+        column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[3]);\n+        column.setWidth(100);\n+        \n+        column = new TableColumn(_table, SWT.NONE);\n+        column.setText(_tableTitles[4]);\n+        column.setWidth(500);\n+        \n+        _table.setHeaderVisible(true);\n+        _table.setLinesVisible(true);\n+    }\n+    \n+    /**\n+     * Creates JFace viewer for the notifications table\n+     */\n+    protected void createTableViewer()\n+    {\n+        createTable();\n+        _tableViewer = new TableViewer(_table);\n+        //_tableViewer.getControl().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+        _tableViewer.setUseHashlookup(true);\n+        _tableViewer.setContentProvider(new ContentProviderImpl());\n+        _tableViewer.setLabelProvider(new LabelProviderImpl());\n+        _tableViewer.setColumnProperties(_tableTitles);\n+        /*\n+        CellEditor[] cellEditors = new CellEditor[_tableTitles.length];\n+        TextCellEditor textEditor = new TextCellEditor(table);\n+        cellEditors[0] = textEditor;\n+        textEditor = new TextCellEditor(table);\n+        cellEditors[1] = textEditor;\n+        textEditor = new TextCellEditor(table);\n+        cellEditors[2] = textEditor;\n+        textEditor = new TextCellEditor(table);\n+        cellEditors[3] = textEditor;\n+        \n+        // Assign the cell editors to the viewer \n+        _tableViewer.setCellEditors(cellEditors);\n+        _tableViewer.setCellModifier(new TableCellModifier());\n+        */\n+        \n+        addTableListeners();\n+        \n+        //_tableViewer.addSelectionChangedListener(new );\n+        \n+        //_notificationDetails = new Composite(_tabControl, SWT.BORDER);\n+        //_notificationDetails.setLayoutData(new GridData(GridData.FILL_BOTH));\n+        \n+        //_tabControl.layout();\n+        //viewerComposite.layout();\n+    }\n+    \n+    /**\n+     * Adds listeners to the viewer for displaying notification details \n+     */\n+    protected void addTableListeners()\n+    {\n+        _tableViewer.addDoubleClickListener(new IDoubleClickListener()\n+            {\n+                Display display = null;\n+                Shell   shell = null;\n+                public void doubleClick(DoubleClickEvent event)\n+                {\n+                    display = Display.getCurrent();\n+                    shell = new Shell(display, SWT.BORDER | SWT.CLOSE | SWT.MIN | SWT.MAX | SWT.RESIZE);\n+                    shell.setText(\"Notification\");\n+                    shell.setImage(ApplicationRegistry.getImage(CONSOLE_IMAGE));\n+\n+                    int x = display.getBounds().width;\n+                    int y = display.getBounds().height;\n+                    shell.setBounds(x/4, y/4, x/2, y/3);\n+                    StructuredSelection selection = (StructuredSelection)event.getSelection();\n+                    createPopupContents((NotificationObject)selection.getFirstElement());\n+                    shell.open();\n+                    while (!shell.isDisposed()) {\n+                        if (!display.readAndDispatch()) {\n+                            display.sleep();\n+                        }\n+                    }\n+                    \n+                    //If you create it, you dispose it.\n+                    shell.dispose();\n+                }\n+\n+                private void createPopupContents(NotificationObject obj)\n+                {                    \n+                    shell.setLayout(new GridLayout());\n+                    \n+                    Composite parent = _toolkit.createComposite(shell, SWT.NONE);\n+                    parent.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+                    GridLayout layout = new GridLayout(4, true);\n+                    parent.setLayout(layout);\n+                    \n+                    // Object name record\n+                    Label key = _toolkit.createLabel(parent, COLUMN_OBJ, SWT.TRAIL); \n+                    GridData layoutData = new GridData(SWT.TRAIL, SWT.TOP, false, false,1,1);\n+                    key.setLayoutData(layoutData);\n+                    Text  value = _toolkit.createText(parent, obj.getSourceName(), SWT.BEGINNING | SWT.BORDER |SWT.READ_ONLY);\n+                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n+\n+                    // Sequence no record\n+                    key = _toolkit.createLabel(parent, COLUMN_SEQ, SWT.TRAIL);             \n+                    layoutData = new GridData(SWT.TRAIL, SWT.TOP, false, false,1,1);\n+                    key.setLayoutData(layoutData);\n+                    value = _toolkit.createText(parent, \"\"+obj.getSequenceNo(), SWT.BEGINNING | SWT.BORDER |SWT.READ_ONLY);\n+                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n+\n+                    // Time row\n+                    key = _toolkit.createLabel(parent, COLUMN_TIME, SWT.TRAIL);\n+                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n+                    value = _toolkit.createText(parent, obj.getTimeStamp(), SWT.BEGINNING | SWT.BORDER | SWT.READ_ONLY);\n+                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n+\n+                    key = _toolkit.createLabel(parent, COLUMN_TYPE, SWT.TRAIL);\n+                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n+                    value = _toolkit.createText(parent, obj.getType(), SWT.BEGINNING | SWT.BORDER | SWT.READ_ONLY);\n+                    value.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,3,1));\n+\n+                    key = _toolkit.createLabel(parent, COLUMN_MSG, SWT.TRAIL);\n+                    key.setLayoutData(new GridData(SWT.TRAIL, SWT.TOP, true, false,1,1));\n+                    value = _toolkit.createText(parent, obj.getMessage(), SWT.MULTI | SWT.WRAP| SWT.BORDER | SWT.V_SCROLL | SWT.READ_ONLY);\n+                    GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true, 3, 1);\n+                    gridData.heightHint = 100;\n+                    value.setLayoutData(gridData);\n+                }\n+            });\n+    }\n+    \n+    public void refresh()\n+    {        \n+        _notifications = null;\n+        _table.deselectAll();\n+        _tableViewer.getTable().clearAll();  \n+        \n+        Control[] children = _form.getBody().getChildren();        \n+        for (int i = 0; i < children.length; i++)\n+        {\n+            children[i].setVisible(true);\n+        }\n+             \n+        workerRunning = true;\n+        _form.layout(true);   \n+        _form.getBody().layout(true, true);\n+    }\n+    \n+    /**\n+     * Content provider class for the table viewer\n+     */\n+    protected class ContentProviderImpl implements IStructuredContentProvider, INotificationViewer\n+    {\n+        public void inputChanged(Viewer v, Object oldInput, Object newInput)\n+        {\n+            \n+        }\n+        public void dispose()\n+        {\n+            \n+        }\n+        public Object[] getElements(Object parent) \n+        {\n+            return _notifications.toArray(new NotificationObject[0]);\n+        }\n+        public void addNotification(NotificationObject notification)\n+        {\n+            _tableViewer.add(notification);\n+        }\n+        \n+        public void addNotification(List<NotificationObject> notificationList)\n+        {\n+            _tableViewer.add(notificationList.toArray(new NotificationObject[0]));\n+        }\n+    }\n+    \n+    /**\n+     * Label provider for the table viewer\n+     */\n+    protected class LabelProviderImpl implements ITableLabelProvider\n+    {\n+        List<ILabelProviderListener> listeners = new ArrayList<ILabelProviderListener>();       \n+        public void addListener(ILabelProviderListener listener)\n+        {\n+            listeners.add(listener);\n+        }\n+        \n+        public void dispose(){\n+            \n+        }\n+        \n+        public Image getColumnImage(Object element, int columnIndex)\n+        {\n+            return null;\n+        }\n+        \n+        public String getColumnText(Object element, int columnIndex)\n+        {\n+            String result = null;\n+            NotificationObject t = (NotificationObject)element;\n+            switch(columnIndex)\n+            {\n+            case 0 : \n+                result = t.getSourceName();\n+                break;\n+            case 1 : \n+                result = String.valueOf(t.getSequenceNo());\n+                break;\n+            case 2 :\n+                result = String.valueOf(t.getTimeStamp());\n+                break;\n+            case 3 : \n+                result = t.getType();\n+                break;\n+            case 4 : \n+                result = t.getMessage();\n+                break;\n+            default : \n+                result = \"\";\n+            }\n+            \n+            return result;\n+        }\n+        \n+        public boolean isLabelProperty(Object element, String property)\n+        {\n+            return false;\n+        }\n+        \n+        public void removeListener(ILabelProviderListener listener)\n+        {\n+            listeners.remove(listener);\n+        }\n+    } // end of LabelProviderImpl\n+    \n+    protected boolean workerRunning = false;\n+    protected void setWorkerRunning(boolean running)\n+    {\n+        workerRunning = running;\n+    }\n+    \n+    /**\n+     * Worker class which keeps looking if there are new notifications coming from server for the selected mbean\n+     */\n+    private class Worker implements Runnable\n+    {\n+        public void run()\n+        {\n+            Display display = _tabFolder.getDisplay();\n+            while(true)\n+            {\n+                if (!workerRunning || display == null)\n+                {\n+                    sleep();\n+                    continue;\n+                }\n+                \n+                display.syncExec(new Runnable()\n+                {\n+                    public void run()\n+                    {\n+                        if (_form == null || _form.isDisposed())\n+                            return;\n+                        setWorkerRunning(_form.isVisible());\n+                        if (!workerRunning) return;\n+                        \n+                        updateTableViewer();\n+                    }\n+                });     \n+            \n+                sleep();\n+            }\n+        }\n+        \n+        private void sleep()\n+        {\n+            try\n+            {\n+                Thread.sleep(2000);\n+            }\n+            catch(Exception ex)\n+            {\n+\n+            }  \n+        }\n+    }\n+    \n+    /**\n+     * Updates the table with new notifications received from mbean server for all mbeans\n+     */\n+    protected void updateTableViewer()\n+    {\n+        ServerRegistry serverRegistry = ApplicationRegistry.getServerRegistry(MBeanView.getServer());        \n+        List<NotificationObject> newList = serverRegistry.getNotifications(null);\n+        if (newList == null)\n+            return;\n+        \n+        _notifications = newList;\n+        _tableViewer.setInput(_notifications);\n+        _tableViewer.refresh();\n+    }\n+\n+}", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/VHNotificationsTabControl.java"}, {"additions": 69, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java", "sha": "9b5cddd342aef72e918054870727b7cf13ad54d5", "changes": 69, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -20,8 +20,13 @@\n  */\n package org.apache.qpid.management.ui.views;\n \n+import java.io.UnsupportedEncodingException;\n import java.nio.charset.Charset;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -70,6 +75,8 @@\n     public static final String PREV  = \"Previous\";\n     public static final String INDEX = \"Index\";\n     \n+    private static final Comparator tabularDataComparator = new TabularDataComparator();\n+    \n     private static List<String> SUPPORTED_ARRAY_DATATYPES = new ArrayList<String>();\n     static\n     {\n@@ -121,6 +128,9 @@ private static void createTabularDataHolder(FormToolkit toolkit, Composite paren\n             text.setLayoutData(layoutData);\n             return;\n         }  \n+        \n+        Collections.sort(list, tabularDataComparator);\n+     \n         // Attach the tabular record to be retrieved and shown later when record is traversed\n         // using first/next/previous/last buttons\n         composite.setData(list);\n@@ -549,4 +559,63 @@ public static void disposeChildren(Composite parent)\n             oldControls[i].dispose();\n         }\n     }\n+    \n+    public static String getHashedString(Object text) throws NoSuchAlgorithmException, UnsupportedEncodingException\n+    {\n+        char[] chars = getHash((String)text);\n+        return new String(chars);\n+    }\n+    \n+    public static char[] getHash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException\n+    {\n+        byte[] data = text.getBytes(\"utf-8\");\n+\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+\n+        for (byte b : data)\n+        {\n+            md.update(b);\n+        }\n+\n+        byte[] digest = md.digest();\n+\n+        char[] hash = new char[digest.length ];\n+\n+        int index = 0;\n+        for (byte b : digest)\n+        {            \n+            hash[index++] = (char) b;\n+        }\n+\n+        return hash;\n+    }\n+    \n+    private static class TabularDataComparator implements java.util.Comparator<Map.Entry>\n+    {\n+        public int compare(Map.Entry data1, Map.Entry data2)\n+        {\n+            if (data1.getKey() instanceof List)\n+            {\n+                Object obj1 = ((List)data1.getKey()).get(0);                \n+                Object obj2 = ((List)data2.getKey()).get(0);\n+                String str1 = obj1.toString();\n+                String str2 = obj2.toString();\n+                if (obj1 instanceof String)\n+                {\n+                    return str1.compareTo(str2);\n+                }\n+                \n+                try\n+                {\n+                    return Long.valueOf(str1).compareTo(Long.valueOf(str2));\n+                }\n+                catch (Exception ex)\n+                {\n+                    return -1;\n+                }\n+            }\n+           \n+            return -1;\n+        }\n+    }\n }", "filename": "management/eclipse-plugin/src/main/java/org/apache/qpid/management/ui/views/ViewUtility.java"}, {"additions": 19, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/resources/sasl/MANIFEST.MF", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/resources/sasl/MANIFEST.MF", "sha": "7a9e5caaaf9aee2d78f94fb33c8a6f93a614b781", "changes": 19, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/resources/sasl/MANIFEST.MF?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,19 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: Jmxmp Plug-in\n+Bundle-SymbolicName: jmxremote.optional\n+Bundle-Version: 1.0.1\n+Bundle-ClassPath: .\n+Bundle-Vendor:\n+Bundle-Localization: plugin\n+Export-Package: com.sun.jmx.remote.generic,\n+ com.sun.jmx.remote.opt.internal,\n+ com.sun.jmx.remote.opt.security,\n+ com.sun.jmx.remote.opt.util,\n+ com.sun.jmx.remote.profile.sasl,\n+ com.sun.jmx.remote.profile.tls,\n+ com.sun.jmx.remote.protocol.jmxmp,\n+ com.sun.jmx.remote.socket,\n+ javax.management.remote.generic,\n+ javax.management.remote.jmxmp,\n+ javax.management.remote.message", "filename": "management/eclipse-plugin/src/main/resources/sasl/MANIFEST.MF"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/resources/win32/configuration/config.ini", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/management/eclipse-plugin/src/main/resources/win32/configuration/config.ini", "sha": "1762840aff33d244fcc46582c22cb046141fe219", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/main/resources/win32/configuration/config.ini?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -22,5 +22,5 @@\n osgi.splashPath=platform:/base/plugins/org.apache.qpid.management.ui\r\n eclipse.product=org.apache.qpid.management.ui.product\r\n eclipse.application=org.apache.qpid.management.ui.application\r\n-osgi.bundles=org.eclipse.equinox.common@2:start,org.eclipse.core.runtime@start,com.ibm.icu,org.apache.qpid.management.ui,org.eclipse.core.commands,org.eclipse.core.contenttype,org.eclipse.core.expressions,org.eclipse.core.jobs,org.eclipse.core.runtime.compatibility.auth,org.eclipse.core.runtime.compatibility.registry,org.eclipse.equinox.preferences,org.eclipse.equinox.registry,org.eclipse.help,org.eclipse.jface,org.eclipse.swt,org.eclipse.swt.win32.win32.x86,org.eclipse.ui,org.eclipse.ui.forms,org.eclipse.ui.workbench\r\n+osgi.bundles=org.eclipse.equinox.common@2:start,org.eclipse.core.runtime@start,com.ibm.icu,org.apache.qpid.management.ui,org.eclipse.core.commands,org.eclipse.core.contenttype,org.eclipse.core.expressions,org.eclipse.core.jobs,org.eclipse.core.runtime.compatibility.auth,org.eclipse.core.runtime.compatibility.registry,org.eclipse.equinox.preferences,org.eclipse.equinox.registry,org.eclipse.help,org.eclipse.jface,org.eclipse.swt,org.eclipse.swt.win32.win32.x86,org.eclipse.ui,org.eclipse.ui.forms,jmxremote.optional,org.eclipse.ui.workbench\r\n osgi.bundles.defaultStartLevel=4\r", "filename": "management/eclipse-plugin/src/main/resources/win32/configuration/config.ini"}, {"additions": 28, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/BDB-Qpid-4.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/BDB-Qpid-4.sh", "sha": "f54c0576401466d496df66d574d176731468023a", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/BDB-Qpid-4.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,28 @@\n+#!/bin/bash\n+\n+if [ -z QPID_HOME ] ; then\n+\n+echo \"QPID_HOME must be set\"\n+exit 0\n+fi\n+\n+configs=`pwd`\n+\n+pushd $QPID_HOME/bin/\n+\n+echo \"Starting qpid server - device config\"\n+./qpid-server -c $configs/bdb-qpid-4/device.xml\n+\n+echo \"Starting qpid server - filepath  config\"\n+./qpid-server -c $configs/bdb-qpid-4/filepath.xml\n+\n+echo \"Starting qpid server - none existent path config\"\n+./qpid-server -c $configs/bdb-qpid-4/noneexistantpath.xml\n+\n+echo \"Starting qpid server - no permission config\"\n+./qpid-server -c $configs/bdb-qpid-4/nopermission.xml\n+\n+echo \"Starting qpid server - Star in path config\"\n+./qpid-server -c $configs/bdb-qpid-4/starpath.xml\n+\n+popd", "filename": "perftests/etc/scripts/BDB-Qpid-4.sh"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/BDB-Qpid.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/BDB-Qpid.sh", "sha": "8ff233dc6d6856481bdb79fe1333a3ee5044fa82", "changes": 12, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/BDB-Qpid.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,12 @@\n+#!/bin/bash\n+\n+# Parse arguements taking all - prefixed args as JAVA_OPTS\n+for arg in \"$@\"; do\n+    if [[ $arg == -java:* ]]; then\n+        JAVA_OPTS=\"${JAVA_OPTS}-`echo $arg|cut -d ':' -f 2`  \"\n+    else\n+        ARGS=\"${ARGS}$arg \"\n+    fi\n+done\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx256m -Dbadger.level=warn -Damqj.test.logging.level=warn -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar org.apache.qpid.ping.PingDurableClient -o $QPID_WORK/results ${ARGS} ", "filename": "perftests/etc/scripts/BDB-Qpid.sh"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-1.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-1.sh", "sha": "518b06aac496d017de87c1ac7ae54df362fe2c93", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/CTQ-Qpid-1.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-1.sh $@ & ./PQ-Qpid-1-P.sh $@", "filename": "perftests/etc/scripts/CTQ-Qpid-1.sh"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-2.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-2.sh", "sha": "bbe5d75cd30b3958662c8cdbf17a5d3231c2d70a", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/CTQ-Qpid-2.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-2.sh $@ & ./PQ-Qpid-2-P.sh $@", "filename": "perftests/etc/scripts/CTQ-Qpid-2.sh"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-3.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-3.sh", "sha": "7e9430c8a394a14b07a4e88241f014f160591e2b", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/CTQ-Qpid-3.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-3.sh $@ & ./PQ-Qpid-3-P.sh $@", "filename": "perftests/etc/scripts/CTQ-Qpid-3.sh"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-4.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-4.sh", "sha": "720ca35fe10a3a3705e597d67a47e5c4d32d6d07", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/CTQ-Qpid-4.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-4.sh $@ & ./PQ-Qpid-4-P.sh $@", "filename": "perftests/etc/scripts/CTQ-Qpid-4.sh"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-5.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-5.sh", "sha": "fe19f6a513affe9f7b26d5fefc671245fa15ee2a", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/CTQ-Qpid-5.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-5.sh $@ & ./PQ-Qpid-5-P.sh $@", "filename": "perftests/etc/scripts/CTQ-Qpid-5.sh"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-6.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/CTQ-Qpid-6.sh", "sha": "09df5ce25a5f5c27d5d54eb7aceed2f0bc13c181", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/CTQ-Qpid-6.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1 @@\n+./PQ-Qpid-6.sh $@ & ./PQ-Qpid-6-P.sh $@", "filename": "perftests/etc/scripts/CTQ-Qpid-6.sh"}, {"additions": 24, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/PT-Qpid-13.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/PT-Qpid-13.sh", "sha": "630aa22ca35cebf37287d531fc7071893c413701", "changes": 24, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/PT-Qpid-13.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,24 @@\n+#!/bin/bash\n+\n+# Parse arguements taking all - prefixed args as JAVA_OPTS\n+for arg in \"$@\"; do\n+    if [[ $arg == -java:* ]]; then\n+        JAVA_OPTS=\"${JAVA_OPTS}-`echo $arg|cut -d ':' -f 2`  \"\n+    else\n+        ARGS=\"${ARGS}$arg \"\n+    fi\n+done\n+\n+echo \"Starting 6 parallel tests\"\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.1 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd1 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.2 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd2 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.3 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd3 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.4 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinatioNname=newd4 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.5 -s [250] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd5 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-13.6 -s [250] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=newd6 uniqueDests=true batchSize=250 transacted=true commitBatchSize=50 -o $QPID_WORK/results ${ARGS}\n+", "filename": "perftests/etc/scripts/PT-Qpid-13.sh"}, {"additions": 23, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/PT-Qpid-14.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/PT-Qpid-14.sh", "sha": "7499eedda46a65e380490e2250f1752a736829a9", "changes": 23, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/PT-Qpid-14.sh?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,23 @@\n+#!/bin/bash\n+\n+# Parse arguements taking all - prefixed args as JAVA_OPTS\n+for arg in \"$@\"; do\n+    if [[ $arg == -java:* ]]; then\n+        JAVA_OPTS=\"${JAVA_OPTS}-`echo $arg|cut -d ':' -f 2`  \"\n+    else\n+        ARGS=\"${ARGS}$arg \"\n+    fi\n+done\n+echo \"Starting 6 parallel tests\"\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping1 batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping2 batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping3 batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[200] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256destinationname=ping4  batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping5 batchSize=250 -o $QPID_WORK/results ${ARGS} &\n+\n+java -Xms256m -Dlog4j.configuration=perftests.log4j -Xmx3072m -Dbadger.level=warn -Damqj.test.logging.level=info -Damqj.logging.level=warn ${JAVA_OPTS} -cp qpid-perftests-1.0-incubating-M2-SNAPSHOT-all-test-deps.jar uk.co.thebadgerset.junit.extensions.TKTestRunner -n PT-Qpid-14 -s [250] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationName=ping6 batchSize=250 -o $QPID_WORK/results ${ARGS}", "filename": "perftests/etc/scripts/PT-Qpid-14.sh"}, {"additions": 98, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/device.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/device.xml", "sha": "a052f8516747677fc3c1d1b172c42fb07a5013bc", "changes": 98, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/bdb-qpid-4/device.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+\t    <virtualhost>\n+            <name>device</name>\n+            <device>\n+                <store>\n+                    <!-- /dev/null give it a device -->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>/dev/null</environment-path>\n+                </store>\n+            </device>\n+        </virtualhost>\n+\n+    \n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+", "filename": "perftests/etc/scripts/bdb-qpid-4/device.xml"}, {"additions": 97, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/filepath.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/filepath.xml", "sha": "ebce10cb95428b5aa77cddeaa5306a08cd233dc3", "changes": 97, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/bdb-qpid-4/filepath.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+\t\t<virtualhost>\n+            <name>pathToAFile</name>\n+            <pathToAFile>\n+                <store>\n+                    <!-- ${conf}/config.xml give the path to a file -->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${conf}/config.xml</environment-path>\n+                </store>\n+            </pathToAFile>\n+        </virtualhost>     \n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+", "filename": "perftests/etc/scripts/bdb-qpid-4/filepath.xml"}, {"additions": 97, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/noneexistantpath.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/noneexistantpath.xml", "sha": "c20beb1c92095eaa9dd2cdd2b96b8872f22c6ac4", "changes": 97, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/bdb-qpid-4/noneexistantpath.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+        <virtualhost>\n+            <name>nonExistentPath</name>\n+            <nonExistentPath>\n+                <store>\n+                    <!-- Path to a location that doesn't exist -->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdb-qpid-5/1/localhost-store</environment-path>\n+                </store>\n+            </nonExistentPath>\n+        </virtualhost>\n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+", "filename": "perftests/etc/scripts/bdb-qpid-4/noneexistantpath.xml"}, {"additions": 98, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/nopermission.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/nopermission.xml", "sha": "958a19cda2ef20cd769a35b39bd3be3802e02f9d", "changes": 98, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/bdb-qpid-4/nopermission.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+\t       <virtualhost>\n+            <name>noPermissions</name>\n+            <noPermissions>\n+                <store>\n+                    <!-- /etc/bdb-qpid-5 give it somewhere it doesn't have permission -->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>/etc/bdb-qpid-5/</environment-path>\n+                </store>\n+            </noPermissions>\n+        </virtualhost>\n+\n+    \n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+", "filename": "perftests/etc/scripts/bdb-qpid-4/nopermission.xml"}, {"additions": 98, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/starpath.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/etc/scripts/bdb-qpid-4/starpath.xml", "sha": "c795ec5202ce6581b3e40e2c61407f9dd0eeaad7", "changes": 98, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/etc/scripts/bdb-qpid-4/starpath.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ - \n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ - \n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<broker>\n+    <prefix>${QPID_HOME}</prefix>\n+    <work>${QPID_WORK}</work>\n+    <conf>${prefix}/etc</conf>\n+    <userhome>$HOME</userhome>\n+    <connector>\n+        <!-- Uncomment out this block and edit the keystorePath and keystorePassword\n+             to enable SSL support\n+        <ssl>\n+            <enabled>true</enabled>\n+            <sslOnly>true</sslOnly>\n+            <keystorePath>/path/to/keystore.ks</keystorePath>\n+            <keystorePassword>keystorepass</keystorePassword>\n+        </ssl>-->\n+        <qpidnio>true</qpidnio>\n+        <transport>nio</transport>\n+        <port>5672</port>\n+        <sslport>8672</sslport>\n+        <socketReceiveBuffer>32768</socketReceiveBuffer>\n+        <socketSendBuffer>32768</socketSendBuffer>\n+    </connector>\n+    <management>\n+        <enabled>true</enabled>\n+    </management>\n+    <advanced>\n+        <filterchain enableExecutorPool=\"true\"/>\n+        <enablePooledAllocator>false</enablePooledAllocator>\n+        <enableDirectBuffers>false</enableDirectBuffers>\n+        <framesize>65535</framesize>\n+        <compressBufferOnQueue>false</compressBufferOnQueue>\n+    </advanced>\n+\n+    <security>\n+        <principal-databases>\n+            <principal-database>\n+                <name>passwordfile</name>\n+                <class>org.apache.qpid.server.security.auth.database.PlainPasswordVhostFilePrincipalDatabase</class>\n+                <attributes>\n+                    <attribute>\n+                        <name>passwordFile</name>\n+                        <value>${conf}/passwdVhost</value>\n+                    </attribute>\n+                </attributes>\n+            </principal-database>\n+        </principal-databases>\n+\n+        <access>\n+            <class>org.apache.qpid.server.security.access.AllowAll</class>\n+        </access>\n+    </security>\n+\n+    <virtualhosts>\n+\n+        <virtualhost>\n+            <name>pathWithStar</name>\n+            <pathWithStar>\n+                <store>\n+                    <!-- ${work}/bdbd-qpid-5/2/* have a * in path-->\n+                    <class>org.apache.qpid.server.store.berkeleydb.BDBMessageStore</class>\n+                    <environment-path>${work}/bdb-qpid-5/2/*-store</environment-path>\n+                </store>\n+            </pathWithStar>\n+        </virtualhost>     \n+\n+    </virtualhosts>\n+    <heartbeat>\n+        <delay>0</delay>\n+        <timeoutFactor>2.0</timeoutFactor>\n+    </heartbeat>\n+    <queue>\n+        <auto_register>true</auto_register>\n+    </queue>\n+\n+    <virtualhosts>${conf}/virtualhosts.xml</virtualhosts>\n+</broker>\n+\n+", "filename": "perftests/etc/scripts/bdb-qpid-4/starpath.xml"}, {"additions": 281, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/pom.xml", "sha": "63edac1801d971a7afb6d4949ee5e512827268f8", "changes": 294, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/pom.xml?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -39,6 +39,18 @@\n         <log4j.perftests>perftests.log4j</log4j.perftests>\n     </properties>\n \n+    <!-- Temporary local maven repo, whilst JUnit Toolkit is still reaching stable version to add to central maven repository. -->\n+    <repositories>\n+        <repository>\n+            <id>junit-toolkit.snapshots</id>\n+            <name>JUnit Toolkit SNAPSHOT Repository</name>\n+            <url>http://junit-toolkit.svn.sourceforge.net/svnroot/junit-toolkit/snapshots/</url>\n+            <snapshots>\n+                <enabled>true</enabled>\n+            </snapshots>\n+        </repository>\n+    </repositories>\n+\n     <!-- Temporary local maven repo, whilst JUnit Toolkit is still reaching stable version to add to central maven repository. -->\n     <pluginRepositories>\n         <pluginRepository>\n@@ -86,18 +98,6 @@\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n             </plugin>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-jar-plugin</artifactId>\n-                <executions>\n-                    <execution>\n-                        <phase>package</phase>\n-                        <goals>\n-                            <goal>test-jar</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-            </plugin>\n \n             <!-- The JUnit Toolkit maven2 plugin is in the process of being added to the maven repository.\n                  \n@@ -130,8 +130,15 @@\n                 <configuration>\n                     <scriptOutDirectory>target</scriptOutDirectory>\n                     <testJar>${project.build.finalName}-all-test-deps.jar</testJar>\n-\n                     <systemproperties>\n+                        <property>\n+                            <name>-Xms</name>\n+                            <value>256m</value>\n+                        </property>\n+                        <property>\n+                            <name>-Xmx</name>\n+                            <value>3072m</value>\n+                        </property>\n                         <property>\n                             <name>log4j.configuration</name>\n                             <value>${log4j.perftests}</value>\n@@ -185,6 +192,267 @@\n                         <Ping-Failover-After-Commit>\n                             -n Ping-Failover-After-Commit -s [100] -o . -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=10 failAfterCommit=true\n                         </Ping-Failover-After-Commit>\n+                        \n+                        <!-- P2P Volume Tests. -->\n+                        <VT-Qpid-1>-n VT-Qpid-1 -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true  messageSize=256 transacted=true -o $QPID_WORK/results</VT-Qpid-1>\n+                        <VT-Qpid-2>-n VT-Qpid-2 -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=256 -o $QPID_WORK/results</VT-Qpid-2>\n+                        <!-- Setting sample to 3,000,000 will result in a log entry every 10 minutes so should have 144 data points for the run. -->\n+                        <VT-Qpid-3>-n VT-Qpid-3 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true rate=10000 messageSize=256 transacted=true -o $QPID_WORK/results commitBatchSize=100 batchSize=10000</VT-Qpid-3>\n+                        <VT-Qpid-4>-n VT-Qpid-4 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true rate=10000 messageSize=256 -o $QPID_WORK/results batchSize=10000</VT-Qpid-4>\n+                        <VT-Qpid-5>-n VT-Qpid-5 -s[1000] -c[1,32],samples=32 -d2M transacted=true commitBatchSize=100 persistent=false rate=1000 messageSize=256</VT-Qpid-5>\n+                        <VT-Qpid-6>-n VT-Qpid-6 -s[100] -c[1,32],samples=32 -d2M transacted=true commitBatchSize=100 persistent=true rate=100 messageSize=256</VT-Qpid-6>\n+\n+                        <!-- P2P Scalability Tests. -->\n+                        <!-- 250,000 Total, 1P-1T-1C -->\n+                        <PT-Qpid-1>-n PT-Qpid-1 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results commitBatchSize=100 transacted=true</PT-Qpid-1>\n+                        <PT-Qpid-2>-n PT-Qpid-2 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-2>\n+\n+                        <!-- 25000 Msgs * 10 Brokers = 250,000 Total, 10P-1Q-10C -->\n+                        <PT-Qpid-3>-n PT-Qpid-3 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results commitBatchSize=100 transacted=true</PT-Qpid-3>\n+                        <PT-Qpid-4>-n PT-Qpid-4 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-4>\n+\n+                        <!-- 25000 Msgs * 10 Brokers = 250,000 Tota,l 10P-10T-10C 10*(1P-1Q-1C) -->\n+                        <PT-Qpid-5>-n PT-Qpid-5 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results transacted=true commitBatchSize=100</PT-Qpid-5>\n+                        <PT-Qpid-6>-n PT-Qpid-6 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-6>\n+\n+                        <!-- 2500 Msgs * 10 Brokers * 10 Topics/Clients = 250,000 Total, 10P-100T-10C 10*(1P-10T-1C) -->\n+                        <PT-Qpid-7>-n PT-Qpid-7 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true destinationsCount=10 transacted=true commitBatchSize=100 messageSize=256 -o $QPID_WORK/results</PT-Qpid-7>\n+                        <PT-Qpid-8>-n PT-Qpid-8 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true destinationsCount=10 messageSize=256 -o $QPID_WORK/results</PT-Qpid-8>\n+\n+                        <!-- 2500 Msgs * 100 Brokers = 250,000 Total, 100P-100T-100C 100*(1P-1T-1C) -->\n+                        <PT-Qpid-9>-n PT-Qpid-9 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</PT-Qpid-9>\n+                        <PT-Qpid-10>-n PT-Qpid-10 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 batchSize=250 -o $QPID_WORK/results</PT-Qpid-10>\n+\n+                        <!-- 250 Msgs * 100 Brokers * 10 Clients = 250,000 Total, 100P-1000T-100C 100*(1P-10T-1C)  -->\n+                        <PT-Qpid-11>-n PT-Qpid-11 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-11>\n+                        <PT-Qpid-12>-n PT-Qpid-12 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 destinationsCount=10 -o $QPID_WORK/results</PT-Qpid-12>\n+\n+                        <!-- 250 Msgs * 1000 Brokers = 250,000 Total, 1000P-1000T-1000C 1000*(1P-1T-1C) -->\n+                        <!-- PT-Qpid-13>-n PT-Qpid-13 -s [100] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 batchSize=100 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-13 -->\n+                        <!-- PT-Qpid-14>-n PT-Qpid-14 -s [100] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=256 batchSize=100 -o $QPID_WORK/results</PT-Qpid-14 -->\n+\n+                        <!-- P2P Volume Tests. -->\n+                        <VQ-Qpid-1>-n VQ-Qpid-1 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</VQ-Qpid-1>\n+                        <VQ-Qpid-2>-n VQ-Qpid-2 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 commitBatchSize=100 -o $QPID_WORK/results</VQ-Qpid-2>\n+                        <!-- Setting sample to 3,000,000 will result in a log entry every 10 minutes so should have 144 data points for the run. -->\n+                        <VQ-Qpid-3>-n VQ-Qpid-3 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf rate=10000 messageSize=256 commitBatchSize=100 transacted=true batchSize=100000 -o $QPID_WORK/results</VQ-Qpid-3>\n+                        <VQ-Qpid-4>-n VQ-Qpid-4 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf rate=10000 messageSize=256 batchSize=100000 -o $QPID_WORK/results</VQ-Qpid-4>\n+\n+                        <!-- P2P Scalability Tests. -->\n+                        <!-- 15,000 Total, 1P-1Q-1C -->\n+                        <PQ-Qpid-1>-n PQ-Qpid-1 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf transacted=true commitBatchSize=100 messageSize=256 -o $QPID_WORK/results</PQ-Qpid-1>\n+                        <PQ-Qpid-2>-n PQ-Qpid-2 -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 -o $QPID_WORK/results</PQ-Qpid-2>\n+\n+                        <!-- 1500 Messages * 10 Brokers = 15,000 Total, 10P-1Q-10C -->\n+                        <PQ-Qpid-3>-n PQ-Qpid-3 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256  destinationName=ping transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-3>\n+                        <PQ-Qpid-4>-n PQ-Qpid-4 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256  destinationName=ping -o $QPID_WORK/results</PQ-Qpid-4>\n+\n+                        <!-- 1500 Messages * 10 Brokers = 15,000 Total, 10P-10Q-10C 10*(1P-1Q-1C) -->\n+                        <PQ-Qpid-5>-n PQ-Qpid-5 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-5>\n+                        <PQ-Qpid-6>-n PQ-Qpid-6 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 -o $QPID_WORK/results</PQ-Qpid-6>\n+\n+                        <!-- 1500 Messages * 10 Brokers = 15,000 Total, 10P-100Q-10C 10*(1P-10Q-1C) -->\n+                        <PQ-Qpid-7>-n PQ-Qpid-7 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 commitBatchSize=100 destinationsCount=10 transacted=true -o $QPID_WORK/results</PQ-Qpid-7>\n+                        <PQ-Qpid-8>-n PQ-Qpid-8 -d 10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256  destinationsCount=10 -o $QPID_WORK/results</PQ-Qpid-8>\n+\n+                        <!-- 150 Messages * 100 Brokers = 15,000 Total, 100P-100Q-100C 100*(1P-1Q-1C) -->\n+                        <PQ-Qpid-9>-n PQ-Qpid-9 -d 20M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-9>\n+                        <PQ-Qpid-10>-n PQ-Qpid-10 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 -o $QPID_WORK/results</PQ-Qpid-10>\n+\n+\n+                        <!-- 150 Messages * 100 Brokers = 15,000 Total, 100P-1000Q-100C 100*(1P-10Q-1C) -->\n+                        <PQ-Qpid-11>-n PQ-Qpid-11 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-11>\n+                        <PQ-Qpid-12>-n PQ-Qpid-12 -d 10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 destinationsCount=10 -o $QPID_WORK/results</PQ-Qpid-12>\n+\n+                        <!-- 15 Messages * 1000 Brokers = 15,000 Total, 1000P-1000Q-1000C 1000*(1P-1Q-1C) -->\n+                        <!--PQ-Qpid-13>-n PQ-Qpid-13 -d 10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-13>\n+                            <PQ-Qpid-14>-n PQ-Qpid-14 -d 10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=15  -o $QPID_WORK/results</PQ-Qpid-14-->\n+\n+                        <!-- Increasing Message Payload Tests. -->\n+                        <!-- Topic Testing -->\n+                        <LT-Qpid-1-512b>-n LT-Qpid-1-512b -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=512 transacted=true commitBatchSize=100 -o $QPID_WORK/results</LT-Qpid-1-512b>\n+                        <LT-Qpid-2-512b>-n LT-Qpid-2-512b -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=512 -o $QPID_WORK/results</LT-Qpid-2-512b>\n+\n+                        <LT-Qpid-1-1K>-n LT-Qpid-1-1K -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 transacted=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-1-1K>\n+                        <LT-Qpid-2-1K>-n LT-Qpid-2-1K -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-2-1K>\n+\n+                        <LT-Qpid-1-5K>-n LT-Qpid-1-5K -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=5120 transacted=true -o $QPID_WORK/results</LT-Qpid-1-5K>\n+                        <LT-Qpid-2-5K>-n LT-Qpid-2-5K -d 10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true  messageSize=5120 -o $QPID_WORK/results</LT-Qpid-2-5K>\n+\n+                        <LT-Qpid-1-10K>-n LT-Qpid-1-10K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=10240 transacted=true -o $QPID_WORK/results</LT-Qpid-1-10K>\n+                        <LT-Qpid-2-10K>-n LT-Qpid-2-10K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=10240 -o $QPID_WORK/results</LT-Qpid-2-10K>\n+\n+                        <LT-Qpid-1-50K>-n LT-Qpid-1-50K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=51200 transacted=true -o $QPID_WORK/results</LT-Qpid-1-50K>\n+                        <LT-Qpid-2-50K>-n LT-Qpid-2-50K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=51200 -o $QPID_WORK/results</LT-Qpid-2-50K>\n+\n+                        <LT-Qpid-1-100K>-n LT-Qpid-1-100K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=102400 transacted=true -o $QPID_WORK/results</LT-Qpid-1-100K>\n+                        <LT-Qpid-2-100K>-n LT-Qpid-2-100K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=102400 -o $QPID_WORK/results</LT-Qpid-2-100K>\n+                        \n+                        <LT-Qpid-1-1M>-n LT-Qpid-1-1M -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true commitBatchSize=100 messageSize=1048576 transacted=true -o $QPID_WORK/results</LT-Qpid-1-1M>\n+                        <LT-Qpid-2-1M>-n LT-Qpid-2-1M -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf pubsub=true messageSize=1048476 -o $QPID_WORK/results</LT-Qpid-2-1M>\n+\n+                        <!-- Queue Testing -->\n+                        <LT-Qpid-3-512b>-n LT-Qpid-3-512b -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=512 transacted=true -o $QPID_WORK/results</LT-Qpid-3-512b>\n+                        <LT-Qpid-4-512b>-n LT-Qpid-4-512b -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=512 -o $QPID_WORK/results</LT-Qpid-4-512b>\n+\n+                        <LT-Qpid-3-1K>-n LT-Qpid-3-1K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=1024 transacted=true -o $QPID_WORK/results</LT-Qpid-3-1K>\n+                        <LT-Qpid-4-1K>-n LT-Qpid-4-1K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPer messageSize=1024 -o $QPID_WORK/results</LT-Qpid-4-1K>\n+\n+                        <LT-Qpid-3-5K>-n LT-Qpid-3-5K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=5120 transacted=true -o $QPID_WORK/results</LT-Qpid-3-5K>\n+                        <LT-Qpid-4-5K>-n LT-Qpid-4-5K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=5120 -o $QPID_WORK/results</LT-Qpid-4-5K>\n+\n+                        <LT-Qpid-3-10K>-n LT-Qpid-3-10K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=10240 transacted=true -o $QPID_WORK/results</LT-Qpid-3-10K>\n+                        <LT-Qpid-4-10K>-n LT-Qpid-4-10K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=10240 -o $QPID_WORK/results</LT-Qpid-4-10K>\n+\n+                        <LT-Qpid-3-50K>-n LT-Qpid-3-50K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=51200 transacted=true -o $QPID_WORK/results</LT-Qpid-3-50K>\n+                        <LT-Qpid-4-50K>-n LT-Qpid-4-50K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=51200 -o $QPID_WORK/results</LT-Qpid-4-50K>\n+                        \n+                        <LT-Qpid-3-100K>-n LT-Qpid-3-100K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=102400 transacted=true -o $QPID_WORK/results</LT-Qpid-3-100K>\n+                        <LT-Qpid-4-100K>-n LT-Qpid-4-100K -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=102400 -o $QPID_WORK/results</LT-Qpid-4-100K>\n+\n+                        <LT-Qpid-3-1M>-n LT-Qpid-3-1M -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf commitBatchSize=100 messageSize=1048576 transacted=true -o $QPID_WORK/results</LT-Qpid-3-1M>\n+                        <LT-Qpid-4-1M>-n LT-Qpid-4-1M -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=1048576  -o $QPID_WORK/results</LT-Qpid-4-1M>\n+\n+                        <!-- Failover Tests. -->\n+                        <!-- Transactional -->\n+                        <FT-Qpid-1>-n FT-Qpid-1 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" FailBeforeSend=true -o $QPID_WORK/results</FT-Qpid-1>\n+                        <FT-Qpid-2>-n FT-Qpid-2 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failAfterSend=true -o $QPID_WORK/results</FT-Qpid-2>\n+                        <FT-Qpid-3>-n FT-Qpid-3 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failAfterCommit=true -o $QPID_WORK/results</FT-Qpid-3>\n+\n+                        <!-- Non Transactional -->\n+                        <FT-Qpid-4>-n FT-Qpid-4 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" transacted=false failBeforeSend=true -o $QPID_WORK/results</FT-Qpid-4>\n+                        <FT-Qpid-5>-n FT-Qpid-5 -s [250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" transacted=false failAfterSend=true -o $QPID_WORK/results</FT-Qpid-5>\n+\n+\n+                        <!-- Persistent Tests -->\n+\n+                        <!-- P2P Volume Tests. -->\n+                        <VT-Qpid-1-P>-n VT-Qpid-1 -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</VT-Qpid-1-P>\n+                        <VT-Qpid-2-P>-n VT-Qpid-2 -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 -o $QPID_WORK/results</VT-Qpid-2-P>\n+                        <!-- Setting sample to 3,000,000 will result in a log entry every 10 minutes so should have 144 data points for the run. -->\n+                        <VT-Qpid-3-P>-n VT-Qpid-3 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true rate=1000  messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results batchSize=10000</VT-Qpid-3-P>\n+                        <VT-Qpid-4-P>-n VT-Qpid-4 -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true rate=1000  messageSize=256 -o $QPID_WORK/results batchSize=10000</VT-Qpid-4-P>\n+\n+                        <!-- P2P Scalability Tests. -->\n+                        <!-- 25,000 Total, 1P-1T-1C -->\n+                        <PT-Qpid-1-P>-n PT-Qpid-1-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true  messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</PT-Qpid-1-P>\n+                        <PT-Qpid-2-P>-n PT-Qpid-2-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-2-P>\n+\n+                        <!-- 2500 Msgs * 10 Brokers = 25,000 Total, 10P-1Q-10C -->\n+                        <PT-Qpid-3-P>-n PT-Qpid-3-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</PT-Qpid-3-P>\n+                        <PT-Qpid-4-P>-n PT-Qpid-4-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256  -o $QPID_WORK/results</PT-Qpid-4-P>\n+\n+                        <!-- 2500 Msgs * 10 Brokers = 25,000 Tota,l 10P-10T-10C 10*(1P-1Q-1C) -->\n+                        <PT-Qpid-5-P>-n PT-Qpid-5-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true transacted=true messageSize=256 commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-5-P>\n+                        <PT-Qpid-6-P>-n PT-Qpid-6-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-6-P>\n+\n+                        <!-- 250 Msgs * 10 Brokers * 10 Topics/Clients = 250,000 Total, 10P-100T-10C 10*(1P-10T-1C) -->\n+                        <PT-Qpid-7-P>-n PT-Qpid-7-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true destinationsCount=10 transacted=true messageSize=256 commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-7-P>\n+                        <PT-Qpid-8-P>-n PT-Qpid-8-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true destinationsCount=10 messageSize=256 -o $QPID_WORK/results</PT-Qpid-8-P>\n+\n+                        <!-- 250 Msgs * 100 Brokers = 25,000 Total, 100P-100T-100C 100*(1P-1T-1C) -->\n+                        <PT-Qpid-9-P>-n PT-Qpid-9-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</PT-Qpid-9-P>\n+                        <PT-Qpid-10-P>-n PT-Qpid-10-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 batchSize=250 -o $QPID_WORK/results</PT-Qpid-10-P>\n+\n+                        <!-- 25 Msgs * 100 Brokers * 10 Clients = 250,000 Total, 100P-1000T-100C 100*(1P-10T-1C)  -->\n+                        <PT-Qpid-11-P>-n PT-Qpid-11-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-11-P>\n+                        <PT-Qpid-12-P>-n PT-Qpid-12-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 destinationsCount=10 -o $QPID_WORK/results</PT-Qpid-12-P>\n+\n+                        <!-- 25 Msgs * 1000 Brokers = 25,000 Total, 1000P-1000T-1000C 1000*(1P-1T-1C) -->\n+                        <!--PT-Qpid-13-P>-n PT-Qpid-13-P -d10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PT-Qpid-13-P-->\n+                        <!--PT-Qpid-14-P>-n PT-Qpid-14-P -d10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=256 -o $QPID_WORK/results</PT-Qpid-14-P-->\n+\n+                        <!-- P2P Volume Tests. -->\n+                        <VQ-Qpid-1-P>-n VQ-Qpid-1-P -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results</VQ-Qpid-1-P>\n+                        <VQ-Qpid-2-P>-n VQ-Qpid-2-P -d1H -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</VQ-Qpid-2-P>\n+                        <!-- Setting sample to 3,000,000 will result in a log entry every 10 minutes so should have 144 data points for the run. -->\n+                        <VQ-Qpid-3-P>-n VQ-Qpid-3-P -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true rate=10000 messageSize=256 commitBatchSize=100 transacted=true -o $QPID_WORK/results batchSize=100000</VQ-Qpid-3-P>\n+                        <VQ-Qpid-4-P>-n VQ-Qpid-4-P -s [100000] -d 24H -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true rate=10000 messageSize=256 -o $QPID_WORK/results batchSize=100000</VQ-Qpid-4-P>\n+\n+                        <!-- P2P Scalability Tests. -->\n+                        <!-- 1500 Total, 1P-1Q-1C -->\n+                        <PQ-Qpid-1-P>-n PQ-Qpid-1-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true transacted=true commitBatchSize=100 messageSize=256 -o $QPID_WORK/results</PQ-Qpid-1-P>\n+                        <PQ-Qpid-2-P>-n PQ-Qpid-2-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</PQ-Qpid-2-P>\n+\n+                        <!-- 150 Messages * 10 Brokers = 15,000 Total, 10P-1Q-10C -->\n+                        <PQ-Qpid-3-P>-n PQ-Qpid-3-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationName=ping transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-3-P>\n+                        <PQ-Qpid-4-P>-n PQ-Qpid-4-P -d10M -s [100] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationName=ping -o $QPID_WORK/results</PQ-Qpid-4-P>\n+\n+                        <!-- 150 Messages * 10 Brokers = 15,000 Total, 10P-10Q-10C 10*(1P-1Q-1C) -->\n+                        <PQ-Qpid-5-P>-n PQ-Qpid-5-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-5-P>\n+                        <PQ-Qpid-6-P>-n PQ-Qpid-6-P -d10M -s [100] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</PQ-Qpid-6-P>\n+\n+                        <!-- 150 Messages * 10 Brokers = 15,000 Total, 10P-100Q-10C 10*(1P-10Q-1C) -->\n+                        <PQ-Qpid-7-P>-n PQ-Qpid-7-P -d10M -s [1000] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=100 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-7-P>\n+                        <PQ-Qpid-8-P>-n PQ-Qpid-8-P -d10M -s [100] -c[10] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationsCount=10 -o $QPID_WORK/results rate=200</PQ-Qpid-8-P>\n+\n+                        <!-- 15 Messages * 100 Brokers = 15,000 Total, 100P-100Q-100C 100*(1P-1Q-1C) -->\n+                        <PQ-Qpid-9-P>-n PQ-Qpid-9-P -d10M -s [1000] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=50 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-9-P>\n+                        <PQ-Qpid-10-P>-n PQ-Qpid-10-P -d10M -s [100] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</PQ-Qpid-10-P>\n+\n+                        <!-- 15 Messages * 100 Brokers = 15,000 Total, 100P-1000Q-100C 100*(1P-10Q-1C) -->\n+                        <PQ-Qpid-11-P>-n PQ-Qpid-11-P -d10M -s [100] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationsCount=10 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-11-P>\n+                        <PQ-Qpid-12-P>-n PQ-Qpid-12-P -d10M -s [100] -c[100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 destinationsCount=10 -o $QPID_WORK/results</PQ-Qpid-12-P>\n+\n+                        <!-- 2 Messages * 1000 Brokers = 2,000 Total, 1000P-1000Q-1000C 1000*(1P-1Q-1C) -->\n+                        <!--PQ-Qpid-13-P>-n PQ-Qpid-13-P -d10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 transacted=true commitBatchSize=100 -o $QPID_WORK/results</PQ-Qpid-13-P>\n+                            <PQ-Qpid-14-P>-n PQ-Qpid-14-P -d10M -s [1000] -c[1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 -o $QPID_WORK/results</PQ-Qpid-14-P-->\n+\n+                        <!-- Increasing Message Payload Tests. -->\n+                        <!-- Topic Testing -->\n+                        <LT-Qpid-1-512b-P>-n LT-Qpid-1-512b-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=512 transacted=true commitBatchSize=100 -o $QPID_WORK/results</LT-Qpid-1-512b-P>\n+                        <LT-Qpid-2-512b-P>-n LT-Qpid-2-512b-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=512 -o $QPID_WORK/results</LT-Qpid-2-512b-P>\n+\n+                        <LT-Qpid-1-1K-P>-n LT-Qpid-1-1K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true commitBatchSize=100 transacted=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-1-1K-P>\n+                        <LT-Qpid-2-1K-P>-n LT-Qpid-2-1K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-2-1K-P>\n+\n+                        <LT-Qpid-1-5K-P>-n LT-Qpid-1-5K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=5120 transacted=true -o $QPID_WORK/results</LT-Qpid-1-5K-P>\n+                        <LT-Qpid-2-5K-P>-n LT-Qpid-2-5K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=5120 -o $QPID_WORK/results</LT-Qpid-2-5K-P>\n+\n+                        <LT-Qpid-1-10K-P>-n LT-Qpid-1-10K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true commitBatchSize=100 messageSize=10240 transacted=true -o $QPID_WORK/results</LT-Qpid-1-10K-P>\n+                        <LT-Qpid-2-10K-P>-n LT-Qpid-2-10K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=10240  -o $QPID_WORK/results</LT-Qpid-2-10K-P>\n+\n+                        <LT-Qpid-1-50K-P>-n LT-Qpid-1-50K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=51200 commitBatchSize=100 transacted=true -o $QPID_WORK/results</LT-Qpid-1-50K-P>\n+                        <LT-Qpid-2-50K-P>-n LT-Qpid-2-50K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=51200 -o $QPID_WORK/results</LT-Qpid-2-50K-P>\n+\n+                        <LT-Qpid-1-100K-P>-n LT-Qpid-1-100K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true commitBatchSize=100 messageSize=102400 transacted=true -o $QPID_WORK/results</LT-Qpid-1-100K-P>\n+                        <LT-Qpid-2-100K-P>-n LT-Qpid-2-100K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=102400 -o $QPID_WORK/results</LT-Qpid-2-100K-P>\n+                        \n+                        <LT-Qpid-1-1M-P>-n LT-Qpid-1-1M-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true commitBatchSize=100 messageSize=1048576 transacted=true -o $QPID_WORK/results</LT-Qpid-1-1M-P>\n+                        <LT-Qpid-2-1M-P>-n LT-Qpid-2-1M-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true pubsub=true messageSize=1048476 -o $QPID_WORK/results</LT-Qpid-2-1M-P>\n+\n+                        <!-- Queue Testing -->\n+                        <LT-Qpid-3-512b-P>-n LT-Qpid-3-512b-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=512 transacted=true -o $QPID_WORK/results</LT-Qpid-3-512b-P>\n+                        <LT-Qpid-4-512b-P>-n LT-Qpid-4-512b-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=512 -o $QPID_WORK/results</LT-Qpid-4-512b-P>\n+\n+                        <LT-Qpid-3-1K-P>-n LT-Qpid-3-1K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 transacted=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-3-1K-P>\n+                        <LT-Qpid-4-1K-P>-n LT-Qpid-4-1K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=1024 -o $QPID_WORK/results</LT-Qpid-4-1K-P>\n+\n+                        <LT-Qpid-3-5K-P>-n LT-Qpid-3-5K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=5120 transacted=true -o $QPID_WORK/results</LT-Qpid-3-5K-P>\n+                        <LT-Qpid-4-5K-P>-n LT-Qpid-4-5K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=5120 -o $QPID_WORK/results</LT-Qpid-4-5K-P>\n+\n+                        <LT-Qpid-3-10K-P>-n LT-Qpid-3-10K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=10240 transacted=true -o $QPID_WORK/results</LT-Qpid-3-10K-P>\n+                        <LT-Qpid-4-10K-P>-n LT-Qpid-4-10K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=10240 -o $QPID_WORK/results</LT-Qpid-4-10K-P>\n+\n+                        <LT-Qpid-3-50K-P>-n LT-Qpid-3-50K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=51200 transacted=true -o $QPID_WORK/results</LT-Qpid-3-50K-P>\n+                        <LT-Qpid-4-50K-P>-n LT-Qpid-4-50K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=51200 -o $QPID_WORK/results</LT-Qpid-4-50K-P>\n+                        \n+                        <LT-Qpid-3-100K-P>-n LT-Qpid-3-100K-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=102400 transacted=true -o $QPID_WORK/results</LT-Qpid-3-100K-P>\n+                        <LT-Qpid-4-100K-P>-n LT-Qpid-4-100K-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=102400 -o $QPID_WORK/results</LT-Qpid-4-100K-P>\n+\n+                        <LT-Qpid-3-1M-P>-n LT-Qpid-3-1M-P -d10M -s [1000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true commitBatchSize=100 messageSize=1048576 transacted=true -o $QPID_WORK/results</LT-Qpid-3-1M-P>\n+                        <LT-Qpid-4-1M-P>-n LT-Qpid-4-1M-P -d10M -s [100] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=1048576 -o $QPID_WORK/results</LT-Qpid-4-1M-P>\n+\n+                        <!-- Failover Tests. -->\n+                        <!-- Transactional -->\n+                        <FT-Qpid-1-P>-n FT-Qpid-1-P -s [25000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failBeforeSend=true -o $QPID_WORK/results</FT-Qpid-1-P>\n+                        <FT-Qpid-2-P>-n FT-Qpid-2-P -s [25000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failAfterSend=true -o $QPID_WORK/results</FT-Qpid-2-P>\n+                        <FT-Qpid-3-P>-n FT-Qpid-3-P -s [25000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 batchSize=10000 transacted=true broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" failAfterCommit=true -o $QPID_WORK/results</FT-Qpid-3-P>\n+\n+                        <!-- Non Transactional -->\n+                        <FT-Qpid-4-P>-n FT-Qpid-4-P -s [250] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" transacted=false failBeforeSend=true -o $QPID_WORK/results</FT-Qpid-4-P>\n+                        <FT-Qpid-5-P>-n FT-Qpid-5-P -s [250] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true messageSize=256 broker=\"tcp://10.0.0.1:5001;tcp://10.0.0.2:5002\" transacted=false failAfterSend=true -o $QPID_WORK/results</FT-Qpid-5-P>\n+\n \n                     </commands>\n                 </configuration>", "filename": "perftests/pom.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java", "sha": "eeb4021f3482336ec474988e5c234cd878eb1645", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -103,7 +103,7 @@ public static String createMessagePayload(int size)\n     {\n         StringBuffer buf = new StringBuffer(size);\n         int count = 0;\n-        while (count < size)\n+        while (count <= (size - MESSAGE_DATA_BYTES.length()))\n         {\n             buf.append(MESSAGE_DATA_BYTES);\n             count += MESSAGE_DATA_BYTES.length();", "filename": "perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/config/AbstractConfig.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/config/AbstractConfig.java", "sha": "14db74438f17d229d3e70ab21486ee1482ba78e8", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/config/AbstractConfig.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -49,7 +49,7 @@ protected int parseInt(String msg, String i)\n         }\n         catch(NumberFormatException e)\n         {\n-            throw new RuntimeException(msg + \": \" + i);\n+            throw new RuntimeException(msg + \": \" + i, e);\n         }\n     }\n \n@@ -61,7 +61,7 @@ protected long parseLong(String msg, String i)\n         }\n         catch(NumberFormatException e)\n         {\n-            throw new RuntimeException(msg + \": \" + i);\n+            throw new RuntimeException(msg + \": \" + i, e);\n         }\n     }\n ", "filename": "perftests/src/main/java/org/apache/qpid/config/AbstractConfig.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/config/JBossConnectionFactoryInitialiser.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/config/JBossConnectionFactoryInitialiser.java", "sha": "a0248a8f795b4b50466c05d44709f396501aaa67", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/config/JBossConnectionFactoryInitialiser.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -22,6 +22,7 @@\n \n import org.apache.qpid.config.ConnectionFactoryInitialiser;\n import org.apache.qpid.config.ConnectorConfig;\n+import org.apache.qpid.client.JMSAMQException;\n \n import javax.jms.ConnectionFactory;\n import javax.jms.JMSException;\n@@ -63,11 +64,11 @@ public ConnectionFactory getFactory(ConnectorConfig config) throws JMSException\n         }\n         catch (NamingException e)\n         {\n-            throw new JMSException(\"Unable to lookup object: \" + e);\n+            throw new JMSAMQException(\"Unable to lookup object: \" + e, e);\n         }\n         catch (Exception e)\n         {\n-            throw new JMSException(\"Error creating topic: \" + e);\n+            throw new JMSAMQException(\"Error creating topic: \" + e, e);\n         }\n     }\n ", "filename": "perftests/src/main/java/org/apache/qpid/config/JBossConnectionFactoryInitialiser.java"}, {"additions": 38, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java", "sha": "0e832ef1000441fb025517b9dfdc8d7c8aceb64e", "changes": 40, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -1,3 +1,4 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\r\n /*\r\n  *\r\n  * Licensed to the Apache Software Foundation (ASF) under one\r\n@@ -178,6 +179,7 @@ public static void main(String[] args)\n \r\n             // Run the test procedure.\r\n             int sent = pingProducer.send();\r\n+            pingProducer.closeConnection();\r\n             pingProducer.waitForUser(\"Press return to begin receiving the pings.\");\r\n             pingProducer.receive(sent);\r\n \r\n@@ -302,17 +304,25 @@ else if (!_publish)\n         System.out.println(\"Messages sent: \" + messagesSent + \", Messages Committed = \" + messagesCommitted\r\n             + \", Messages not Committed = \" + messagesNotCommitted);\r\n \r\n+\r\n+\r\n+        return messagesSent;\r\n+    }\r\n+\r\n+    protected void closeConnection()\r\n+    {\r\n         // Clean up the connection.\r\n         try\r\n         {\r\n             close();\r\n         }\r\n         catch (JMSException e)\r\n         {\r\n+            log.debug(\"There was an error whilst closing the connection: \" + e, e);\r\n+            System.out.println(\"There was an error whilst closing the connection.\");\r\n+\r\n             // Ignore as did best could manage to clean up.\r\n         }\r\n-\r\n-        return messagesSent;\r\n     }\r\n \r\n     protected void receive(int messagesSent) throws Exception\r\n@@ -354,6 +364,32 @@ else if (messagesReceived >= messagesSent)\n             }\r\n         }\r\n \r\n+        // Ensure messages received are committed.\r\n+        if (_transacted)\r\n+        {\r\n+            try\r\n+            {\r\n+                _consumerSession.commit();\r\n+                System.out.println(\"Committed for all messages received.\");\r\n+            }\r\n+            catch (JMSException e)\r\n+            {\r\n+                log.debug(\"Error during commit: \" + e, e);\r\n+                System.out.println(\"Error during commit.\");\r\n+                try\r\n+                {\r\n+                    _consumerSession.rollback();\r\n+                    System.out.println(\"Rolled back on all messages received.\");\r\n+                }\r\n+                catch (JMSException e2)\r\n+                {\r\n+                    log.debug(\"Error during rollback: \" + e, e);\r\n+                    System.out.println(\"Error on roll back of all messages received.\");\r\n+                }\r\n+\r\n+            }\r\n+        }\r\n+\r\n         log.debug(\"messagesReceived = \" + messagesReceived);\r\n \r\n         System.out.println(\"Messages received: \" + messagesReceived);\r", "filename": "perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java"}, {"additions": 57, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java", "sha": "7cf5e4516f8a52e2cbdd52ba1ce1b5193d37e6ee", "changes": 57, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,57 @@\n+/* Copyright Rupert Smith, 2005 to 2006, all rights reserved. */\r\n+package org.apache.qpid.ping;\r\n+\r\n+import java.util.Properties;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.util.CommandLineParser;\r\n+\r\n+/**\r\n+ * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * </table>\r\n+ */\r\n+public class PingSendOnlyClient extends PingDurableClient\r\n+{\r\n+    private static final Logger log = Logger.getLogger(PingSendOnlyClient.class);\r\n+\r\n+    public PingSendOnlyClient(Properties overrides) throws Exception\r\n+    {\r\n+        super(overrides);\r\n+    }\r\n+\r\n+    /**\r\n+     * Starts the ping/wait/receive process.\r\n+     *\r\n+     * @param args The command line arguments.\r\n+     */\r\n+    public static void main(String[] args)\r\n+    {\r\n+        try\r\n+        {\r\n+            // Create a ping producer overriding its defaults with all options passed on the command line.\r\n+            Properties options = CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][] {}));\r\n+            PingDurableClient pingProducer = new PingSendOnlyClient(options);\r\n+\r\n+            // Create a shutdown hook to terminate the ping-pong producer.\r\n+            Runtime.getRuntime().addShutdownHook(pingProducer.getShutdownHook());\r\n+\r\n+            // Ensure that the ping pong producer is registered to listen for exceptions on the connection too.\r\n+            // pingProducer.getConnection().setExceptionListener(pingProducer);\r\n+\r\n+            // Run the test procedure.\r\n+            int sent = pingProducer.send();\r\n+            pingProducer.waitForUser(\"Press return to close connection and quit.\");\r\n+            pingProducer.closeConnection();\r\n+\r\n+            System.exit(0);\r\n+        }\r\n+        catch (Exception e)\r\n+        {\r\n+            System.err.println(e.getMessage());\r\n+            log.error(\"Top level handler caught execption.\", e);\r\n+            System.exit(1);\r\n+        }\r\n+    }\r\n+}\r", "filename": "perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java"}, {"additions": 32, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java", "sha": "ecaf27167fd7feb5c9f0a0d3861b30be1b775eb2", "changes": 59, "status": "modified", "deletions": 27, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -116,7 +116,7 @@\n  *       by the PPP that it is atteched to.\r\n  *\r\n  * @todo Use read/write lock in the onmessage, not for reading writing but to make use of a shared and exlcusive lock pair.\r\n- *       Obtian read lock on all messages, before decrementing the message count. At the end of the on message method add a\r\n+ *       Obtain read lock on all messages, before decrementing the message count. At the end of the on message method add a\r\n  *       block that obtains the write lock for the very last message, releases any waiting producer. Means that the last\r\n  *       message waits until all other messages have been handled before releasing producers but allows messages to be\r\n  *       processed concurrently, unlike the current synchronized block.\r\n@@ -725,13 +725,17 @@ public void createReplyConsumers(Collection<Destination> destinations, String se\n         log.debug(\"public void createReplyConsumers(Collection<Destination> destinations = \" + destinations\r\n             + \", String selector = \" + selector + \"): called\");\r\n \r\n+        log.debug(\"Creating \" + destinations.size() + \" reply consumers.\");\r\n+\r\n         for (Destination destination : destinations)\r\n         {\r\n             // Create a consumer for the destination and set this pinger to listen to its messages.\r\n             _consumer =\r\n                 _consumerSession.createConsumer(destination, PREFETCH_DEFAULT, NO_LOCAL_DEFAULT, EXCLUSIVE_DEFAULT,\r\n                     selector);\r\n             _consumer.setMessageListener(this);\r\n+\r\n+            log.debug(\"Set this to listen to replies sent to destination: \" + destination);\r\n         }\r\n     }\r\n \r\n@@ -743,13 +747,13 @@ public void createReplyConsumers(Collection<Destination> destinations, String se\n      */\r\n     public void onMessage(Message message)\r\n     {\r\n-        log.debug(\"public void onMessage(Message message): called\");\r\n+        // log.debug(\"public void onMessage(Message message): called\");\r\n \r\n         try\r\n         {\r\n             // Extract the messages correlation id.\r\n             String correlationID = message.getJMSCorrelationID();\r\n-            log.debug(\"correlationID = \" + correlationID);\r\n+            // log.debug(\"correlationID = \" + correlationID);\r\n \r\n             // Countdown on the traffic light if there is one for the matching correlation id.\r\n             PerCorrelationId perCorrelationId = perCorrelationIds.get(correlationID);\r\n@@ -761,7 +765,7 @@ public void onMessage(Message message)\n                 // Restart the timeout timer on every message.\r\n                 perCorrelationId.timeOutStart = System.nanoTime();\r\n \r\n-                log.debug(\"Reply was expected, decrementing the latch for the id, \" + correlationID);\r\n+                // log.debug(\"Reply was expected, decrementing the latch for the id, \" + correlationID);\r\n \r\n                 // Decrement the countdown latch. Before this point, it is possible that two threads might enter this\r\n                 // method simultanesouly with the same correlation id. Decrementing the latch in a synchronized block\r\n@@ -776,8 +780,8 @@ public void onMessage(Message message)\n                     trueCount = trafficLight.getCount();\r\n                     remainingCount = trueCount - 1;\r\n \r\n-                    log.debug(\"remainingCount = \" + remainingCount);\r\n-                    log.debug(\"trueCount = \" + trueCount);\r\n+                    // log.debug(\"remainingCount = \" + remainingCount);\r\n+                    // log.debug(\"trueCount = \" + trueCount);\r\n \r\n                     // Commit on transaction batch size boundaries. At this point in time the waiting producer remains\r\n                     // blocked, even on the last message.\r\n@@ -806,23 +810,23 @@ public void onMessage(Message message)\n             }\r\n \r\n             // Print out ping times for every message in verbose mode only.\r\n-            if (_verbose)\r\n+            /*if (_verbose)\r\n             {\r\n                 Long timestamp = message.getLongProperty(MESSAGE_TIMESTAMP_PROPNAME);\r\n \r\n                 if (timestamp != null)\r\n                 {\r\n                     long diff = System.nanoTime() - timestamp;\r\n-                    log.trace(\"Time for round trip (nanos): \" + diff);\r\n+                    //log.trace(\"Time for round trip (nanos): \" + diff);\r\n                 }\r\n-            }\r\n+            }*/\r\n         }\r\n         catch (JMSException e)\r\n         {\r\n             log.warn(\"There was a JMSException: \" + e.getMessage(), e);\r\n         }\r\n \r\n-        log.debug(\"public void onMessage(Message message): ending\");\r\n+        // log.debug(\"public void onMessage(Message message): ending\");\r\n     }\r\n \r\n     /**\r\n@@ -955,16 +959,16 @@ public void pingNoWaitForReply(Message message, int numPings, String messageCorr\n             committed = false;\r\n \r\n             // Re-timestamp the message.\r\n-            message.setLongProperty(MESSAGE_TIMESTAMP_PROPNAME, System.nanoTime());\r\n+            // message.setLongProperty(MESSAGE_TIMESTAMP_PROPNAME, System.nanoTime());\r\n \r\n             // Send the message, passing in the message count.\r\n             committed = sendMessage(i, message);\r\n \r\n             // Spew out per message timings on every message sonly in verbose mode.\r\n-            if (_verbose)\r\n+            /*if (_verbose)\r\n             {\r\n                 log.info(timestampFormatter.format(new Date()) + \": Pinged at with correlation id, \" + messageCorrelationId);\r\n-            }\r\n+            }*/\r\n         }\r\n \r\n         // Call commit if the send loop finished before reaching a batch size boundary so there may still be uncommitted messages.\r\n@@ -1003,7 +1007,7 @@ protected boolean sendMessage(int i, Message message) throws JMSException\n                 _failBeforeSend = false;\r\n             }\r\n \r\n-            log.trace(\"Failing Before Send\");\r\n+            // log.trace(\"Failing Before Send\");\r\n             waitForUser(KILL_BROKER_PROMPT);\r\n         }\r\n \r\n@@ -1176,6 +1180,7 @@ public void close() throws JMSException\n             if (_connection != null)\r\n             {\r\n                 _connection.close();\r\n+                log.debug(\"Close connection.\");\r\n             }\r\n         }\r\n         finally\r\n@@ -1213,20 +1218,20 @@ public void close() throws JMSException\n      */\r\n     protected boolean commitTx(Session session) throws JMSException\r\n     {\r\n-        log.debug(\"protected void commitTx(Session session): called\");\r\n+        // log.debug(\"protected void commitTx(Session session): called\");\r\n \r\n         boolean committed = false;\r\n \r\n-        log.trace(\"Batch time reached\");\r\n+        // log.trace(\"Batch time reached\");\r\n         if (_failAfterSend)\r\n         {\r\n-            log.trace(\"Batch size reached\");\r\n+            // log.trace(\"Batch size reached\");\r\n             if (_failOnce)\r\n             {\r\n                 _failAfterSend = false;\r\n             }\r\n \r\n-            log.trace(\"Failing After Send\");\r\n+            // log.trace(\"Failing After Send\");\r\n             waitForUser(KILL_BROKER_PROMPT);\r\n         }\r\n \r\n@@ -1241,14 +1246,14 @@ protected boolean commitTx(Session session) throws JMSException\n                         _failBeforeCommit = false;\r\n                     }\r\n \r\n-                    log.trace(\"Failing Before Commit\");\r\n+                    // log.trace(\"Failing Before Commit\");\r\n                     waitForUser(KILL_BROKER_PROMPT);\r\n                 }\r\n \r\n-                long l = System.nanoTime();\r\n+                // long l = System.nanoTime();\r\n                 session.commit();\r\n                 committed = true;\r\n-                log.debug(\"Time taken to commit :\" + ((System.nanoTime() - l) / 1000000f) + \" ms\");\r\n+                // log.debug(\"Time taken to commit :\" + ((System.nanoTime() - l) / 1000000f) + \" ms\");\r\n \r\n                 if (_failAfterCommit)\r\n                 {\r\n@@ -1257,15 +1262,15 @@ protected boolean commitTx(Session session) throws JMSException\n                         _failAfterCommit = false;\r\n                     }\r\n \r\n-                    log.trace(\"Failing After Commit\");\r\n+                    // log.trace(\"Failing After Commit\");\r\n                     waitForUser(KILL_BROKER_PROMPT);\r\n                 }\r\n \r\n-                log.trace(\"Session Commited.\");\r\n+                // log.trace(\"Session Commited.\");\r\n             }\r\n             catch (JMSException e)\r\n             {\r\n-                log.trace(\"JMSException on commit:\" + e.getMessage(), e);\r\n+                log.debug(\"JMSException on commit:\" + e.getMessage(), e);\r\n \r\n                 // Warn that the bounce back client is not available.\r\n                 if (e.getLinkedException() instanceof AMQNoConsumersException)\r\n@@ -1276,11 +1281,11 @@ protected boolean commitTx(Session session) throws JMSException\n                 try\r\n                 {\r\n                     session.rollback();\r\n-                    log.trace(\"Message rolled back.\");\r\n+                    log.debug(\"Message rolled back.\");\r\n                 }\r\n                 catch (JMSException jmse)\r\n                 {\r\n-                    log.trace(\"JMSE on rollback:\" + jmse.getMessage(), jmse);\r\n+                    log.debug(\"JMSE on rollback:\" + jmse.getMessage(), jmse);\r\n \r\n                     // Both commit and rollback failed. Throw the rollback exception.\r\n                     throw jmse;\r\n@@ -1296,7 +1301,7 @@ protected boolean commitTx(Session session) throws JMSException\n      *\r\n      * @param prompt The prompt to display on the console.\r\n      */\r\n-    protected void waitForUser(String prompt)\r\n+    public void waitForUser(String prompt)\r\n     {\r\n         System.out.println(prompt);\r\n \r", "filename": "perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/topic/Config.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/main/java/org/apache/qpid/topic/Config.java", "sha": "d5c097939979762c4faabc05122e0fe31796ab27", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/topic/Config.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -221,7 +221,7 @@ else if(\"-port\".equalsIgnoreCase(key))\n             }\n             catch(NumberFormatException e)\n             {\n-                throw new RuntimeException(\"Bad port number: \" + value);\n+                throw new RuntimeException(\"Bad port number: \" + value, e);\n             }\n         }\n         else if(\"-payload\".equalsIgnoreCase(key))", "filename": "perftests/src/main/java/org/apache/qpid/topic/Config.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/test/java/org/apache/qpid/ping/PingAsyncTestPerf.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/perftests/src/test/java/org/apache/qpid/ping/PingAsyncTestPerf.java", "sha": "6c7f22c19a95c495c393b9a317c887a2b9506835", "changes": 11, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/test/java/org/apache/qpid/ping/PingAsyncTestPerf.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -133,12 +133,13 @@ public TimingController getTimingController()\n      */\n     public void testAsyncPingOk(int numPings) throws Exception\n     {\n-        _logger.debug(\"public void testAsyncPingOk(int numPings): called\");\n+        // _logger.debug(\"public void testAsyncPingOk(int numPings): called\");\n \n         // Ensure that at least one ping was requeusted.\n         if (numPings == 0)\n         {\n             _logger.error(\"Number of pings requested was zero.\");\n+            fail(\"Number of pings requested was zero.\");\n         }\n \n         // Get the per thread test setup to run the test through.\n@@ -147,8 +148,8 @@ public void testAsyncPingOk(int numPings) throws Exception\n \n         // Advance the correlation id of messages to send, to make it unique for this run.\n         perThreadSetup._correlationId = Long.toString(corellationIdGenerator.incrementAndGet());\n-        String messageCorrelationId = perThreadSetup._correlationId;\n-        _logger.debug(\"messageCorrelationId = \" + messageCorrelationId);\n+        // String messageCorrelationId = perThreadSetup._correlationId;\n+        // _logger.debug(\"messageCorrelationId = \" + messageCorrelationId);\n \n         // Initialize the count and timing controller for the new correlation id.\n         PerCorrelationId perCorrelationId = new PerCorrelationId();\n@@ -246,9 +247,9 @@ public void onMessage(Message message, int remainingCount) throws JMSException\n                 // Extract the correlation id from the message.\n                 String correlationId = message.getJMSCorrelationID();\n \n-                _logger.debug(\"public void onMessage(Message message, int remainingCount = \" + remainingCount\n+                /*_logger.debug(\"public void onMessage(Message message, int remainingCount = \" + remainingCount\n                     + \"): called on batch boundary for message id: \" + correlationId + \" with thread id: \"\n-                    + Thread.currentThread().getId());\n+                    + Thread.currentThread().getId());*/\n \n                 // Get the details for the correlation id and check that they are not null. They can become null\n                 // if a test times out.", "filename": "perftests/src/test/java/org/apache/qpid/ping/PingAsyncTestPerf.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java", "sha": "20de0d5df0b8322ae61dc4a89dafe8a9ccbfb1d1", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -44,9 +44,9 @@ public void testExchangeOperations() throws Exception\n         VirtualHost vHost = ApplicationRegistry.getInstance().getVirtualHostRegistry().getVirtualHost(\"test\");\n \n         ManagedBroker mbean = new AMQBrokerManagerMBean((VirtualHost.VirtualHostMBean)vHost.getManagedObject());\n-        mbean.createNewExchange(exchange1,\"direct\",false, false);\n-        mbean.createNewExchange(exchange2,\"topic\",false, false);\n-        mbean.createNewExchange(exchange3,\"headers\",false, false);\n+        mbean.createNewExchange(exchange1,\"direct\",false);\n+        mbean.createNewExchange(exchange2,\"topic\",false);\n+        mbean.createNewExchange(exchange3,\"headers\",false);\n \n         assertTrue(_exchangeRegistry.getExchange(new AMQShortString(exchange1)) != null);\n         assertTrue(_exchangeRegistry.getExchange(new AMQShortString(exchange2)) != null);\n@@ -70,7 +70,7 @@ public void testQueueOperations() throws Exception\n \n         assertTrue(_queueRegistry.getQueue(new AMQShortString(queueName)) == null);\n                 \n-        mbean.createNewQueue(queueName, \"test\", false, true);\n+        mbean.createNewQueue(queueName, \"test\", false);\n         assertTrue(_queueRegistry.getQueue(new AMQShortString(queueName)) != null);\n \n         mbean.deleteQueue(queueName);", "filename": "systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java"}, {"additions": 208, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/server/failure/HeapExhaustion.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/server/failure/HeapExhaustion.java", "sha": "52eb5414ff899e0a1344e8fb24332a9d8c62096e", "changes": 208, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/failure/HeapExhaustion.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,208 @@\n+package org.apache.qpid.server.failure;\n+\n+import junit.framework.TestCase;\n+import org.apache.qpid.testutil.QpidClientConnection;\n+import org.apache.qpid.client.failover.FailoverException;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.protocol.AMQConstant;\n+import org.apache.log4j.Logger;\n+\n+import javax.jms.JMSException;\n+import java.io.IOException;\n+\n+\n+/** Test Case provided by client Non-functional Test NF101: heap exhaustion behaviour */\n+public class HeapExhaustion extends TestCase\n+{\n+    private static final Logger _logger = Logger.getLogger(HeapExhaustion.class);\n+\n+    protected QpidClientConnection conn;\n+    protected final String BROKER = \"localhost\";\n+    protected final String vhost = \"/test\";\n+    protected final String queue = \"direct://amq.direct//queue\";\n+\n+    protected String hundredK;\n+    protected String megabyte;\n+\n+    protected String generatePayloadOfSize(Integer numBytes)\n+    {\n+        return new String(new byte[numBytes]);\n+    }\n+\n+    protected void setUp() throws Exception\n+    {\n+        conn = new QpidClientConnection(BROKER);\n+        conn.setVirtualHost(vhost);\n+\n+        conn.connect();\n+        // clear queue\n+        _logger.debug(\"setup: clearing test queue\");\n+        conn.consume(queue, 2000);\n+\n+        hundredK = generatePayloadOfSize(1024 * 100);\n+        megabyte = generatePayloadOfSize(1024 * 1024);\n+    }\n+\n+    protected void tearDown() throws Exception\n+    {\n+        conn.disconnect();\n+    }\n+\n+\n+    /**\n+     * PUT at maximum rate (although we commit after each PUT) until failure\n+     *\n+     * @throws Exception on error\n+     */\n+    public void testUntilFailure() throws Exception\n+    {\n+        int copies = 0;\n+        int total = 0;\n+        String payload = hundredK;\n+        int size = payload.getBytes().length;\n+        while (true)\n+        {\n+            conn.put(queue, payload, 1);\n+            copies++;\n+            total += size;\n+            _logger.info(\"put copy \" + copies + \" OK for total bytes: \" + total);\n+        }\n+    }\n+\n+    /**\n+     * PUT at lower rate (5 per second) until failure\n+     *\n+     * @throws Exception on error\n+     */\n+    public void testUntilFailureWithDelays() throws Exception\n+    {\n+        int copies = 0;\n+        int total = 0;\n+        String payload = hundredK;\n+        int size = payload.getBytes().length;\n+        while (true)\n+        {\n+            conn.put(queue, payload, 1);\n+            copies++;\n+            total += size;\n+            _logger.debug(\"put copy \" + copies + \" OK for total bytes: \" + total);\n+            Thread.sleep(200);\n+        }\n+    }\n+\n+    public static void noDelay()\n+    {\n+        HeapExhaustion he = new HeapExhaustion();\n+\n+        try\n+        {\n+            he.setUp();\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.info(\"Unable to connect\");\n+            System.exit(0);\n+        }\n+\n+        try\n+        {\n+            _logger.info(\"Running testUntilFailure\");\n+            try\n+            {\n+                he.testUntilFailure();\n+            }\n+            catch (FailoverException fe)\n+            {\n+                _logger.error(\"Caught failover:\" + fe);\n+            }\n+            _logger.info(\"Finishing Connection \");\n+\n+            try\n+            {\n+                he.tearDown();\n+            }\n+            catch (JMSException jmse)\n+            {\n+                if (((AMQException) jmse.getLinkedException()).getErrorCode() == AMQConstant.REQUEST_TIMEOUT)\n+                {\n+                    _logger.info(\"Successful test of testUntilFailure\");\n+                }\n+                else\n+                {\n+                    _logger.error(\"Test Failed due to:\" + jmse);\n+                }\n+            }\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Test Failed due to:\" + e);\n+        }\n+    }\n+\n+    public static void withDelay()\n+    {\n+        HeapExhaustion he = new HeapExhaustion();\n+\n+        try\n+        {\n+            he.setUp();\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.info(\"Unable to connect\");\n+            System.exit(0);\n+        }\n+\n+        try\n+        {\n+            _logger.info(\"Running testUntilFailure\");\n+            try\n+            {\n+                he.testUntilFailureWithDelays();\n+            }\n+            catch (FailoverException fe)\n+            {\n+                _logger.error(\"Caught failover:\" + fe);\n+            }\n+            _logger.info(\"Finishing Connection \");\n+\n+            try\n+            {\n+                he.tearDown();\n+            }\n+            catch (JMSException jmse)\n+            {\n+                if (((AMQException) jmse.getLinkedException()).getErrorCode() == AMQConstant.REQUEST_TIMEOUT)\n+                {\n+                    _logger.info(\"Successful test of testUntilFailure\");\n+                }\n+                else\n+                {\n+                    _logger.error(\"Test Failed due to:\" + jmse);\n+                }\n+            }\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Test Failed due to:\" + e);\n+        }\n+    }\n+\n+    public static void main(String args[])\n+    {\n+        noDelay();\n+\n+\n+        try\n+        {\n+            System.out.println(\"Restart failed broker now to retest broker with delays in send.\");\n+            System.in.read();\n+        }\n+        catch (IOException e)\n+        {\n+            _logger.info(\"Continuing\");\n+        }\n+\n+        withDelay();\n+    }\n+}", "filename": "systests/src/main/java/org/apache/qpid/server/failure/HeapExhaustion.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/server/queue/MockProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/server/queue/MockProtocolSession.java", "sha": "0ad6502755eea0c54ba3b0302243e463da3813d6", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/queue/MockProtocolSession.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -35,6 +35,7 @@\n import javax.security.sasl.SaslServer;\n import java.util.HashMap;\n import java.util.Map;\n+import java.security.Principal;\n \n /**\n  * A protocol session that can be used for testing purposes.\n@@ -177,12 +178,12 @@ public ProtocolOutputConverter getProtocolOutputConverter()\n         return ProtocolOutputConverterRegistry.getConverter(this);\n     }\n \n-    public void setAuthorizedID(String authorizedID)\n+    public void setAuthorizedID(Principal authorizedID)\n     {\n         //To change body of implemented methods use File | Settings | File Templates.\n     }\n \n-    public String getAuthorizedID()\n+    public Principal getAuthorizedID()\n     {\n         return null;  //To change body of implemented methods use File | Settings | File Templates.\n     }", "filename": "systests/src/main/java/org/apache/qpid/server/queue/MockProtocolSession.java"}, {"additions": 276, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/server/queue/PersistentTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/server/queue/PersistentTest.java", "sha": "4ad10b68ff8ade455a4faa99a26e1b451f7ffa7f", "changes": 276, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/queue/PersistentTest.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,276 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.server.queue;\n+\n+import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.AMQSession;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.AMQChannelClosedException;\n+import org.apache.qpid.AMQConnectionClosedException;\n+import org.apache.qpid.util.CommandLineParser;\n+import org.apache.qpid.url.URLSyntaxException;\n+import org.apache.log4j.Logger;\n+\n+import javax.jms.Session;\n+import javax.jms.JMSException;\n+import javax.jms.Queue;\n+import javax.jms.MessageProducer;\n+import javax.jms.TextMessage;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+public class PersistentTest\n+{\n+    private static final Logger _logger = Logger.getLogger(PersistentTest.class);\n+\n+\n+    private static final String QUEUE = \"direct://amq.direct//PersistentTest-Queue2?durable='true',exclusive='true'\";\n+\n+    protected AMQConnection _connection;\n+\n+    protected Session _session;\n+\n+    protected Queue _queue;\n+    private Properties properties;\n+\n+    private String _brokerDetails;\n+    private String _username;\n+    private String _password;\n+    private String _virtualpath;\n+\n+    public PersistentTest(Properties overrides)\n+    {\n+        properties = new Properties(defaults);\n+        properties.putAll(overrides);\n+\n+        _brokerDetails = properties.getProperty(BROKER_PROPNAME);\n+        _username = properties.getProperty(USERNAME_PROPNAME);\n+        _password = properties.getProperty(PASSWORD_PROPNAME);\n+        _virtualpath = properties.getProperty(VIRTUAL_HOST_PROPNAME);\n+\n+        createConnection();\n+    }\n+\n+    protected void createConnection()\n+    {\n+        try\n+        {\n+            _connection = new AMQConnection(_brokerDetails, _username, _password, \"PersistentTest\", _virtualpath);\n+\n+            _session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+            _connection.start();\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Unable to create test class due to:\" + e.getMessage(), e);\n+            System.exit(0);\n+        }\n+    }\n+\n+    public void test() throws AMQException, URLSyntaxException\n+    {\n+\n+        //Create the Durable Queue\n+        try\n+        {\n+            _session.createConsumer(_session.createQueue(QUEUE)).close();\n+        }\n+        catch (JMSException e)\n+        {\n+            _logger.error(\"Unable to create Queue due to:\" + e.getMessage(), e);\n+            System.exit(0);\n+        }\n+\n+        try\n+        {\n+            if (testQueue())\n+            {\n+                // close connection\n+                _connection.close();\n+                // wait\n+                System.out.println(\"Restart Broker Now\");\n+                try\n+                {\n+                    System.in.read();\n+                }\n+                catch (IOException e)\n+                {\n+                    //\n+                }\n+                finally\n+                {\n+                    System.out.println(\"Continuing....\");\n+                }\n+\n+                //Test queue is still there.\n+                AMQConnection connection = new AMQConnection(_brokerDetails, _username, _password, \"DifferentClientID\", _virtualpath);\n+\n+                AMQSession session = (AMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+                try\n+                {\n+                    session.createConsumer(session.createQueue(QUEUE));\n+                    _logger.error(\"Create consumer succeeded.\" +\n+                                  \" This shouldn't be allowed as this means the queue didn't exist when it should\");\n+\n+                    connection.close();\n+\n+                    exit();\n+                }\n+                catch (JMSException e)\n+                {\n+                    try\n+                    {\n+                        connection.close();\n+                    }\n+                    catch (JMSException cce)\n+                    {\n+                        if (cce.getLinkedException() instanceof AMQConnectionClosedException)\n+                        {\n+                            _logger.error(\"Channel Close Bug still present QPID-432, should see an 'Error closing session'\");\n+                        }\n+                        else\n+                        {\n+                            exit(cce);\n+                        }\n+                    }\n+\n+                    if (e.getLinkedException() instanceof AMQChannelClosedException)\n+                    {\n+                        _logger.info(\"AMQChannelClosedException received as expected\");\n+                    }\n+                    else\n+                    {\n+                        exit(e);\n+                    }\n+                }\n+            }\n+        }\n+        catch (JMSException e)\n+        {\n+            _logger.error(\"Unable to test Queue due to:\" + e.getMessage(), e);\n+            System.exit(0);\n+        }\n+    }\n+\n+    private void exit(JMSException e)\n+    {\n+        _logger.error(\"JMSException received:\" + e.getMessage());\n+        e.printStackTrace();\n+        exit();\n+    }\n+\n+    private void exit()\n+    {\n+        try\n+        {\n+            _connection.close();\n+        }\n+        catch (JMSException e)\n+        {\n+            //\n+        }\n+        System.exit(0);\n+    }\n+\n+    private boolean testQueue() throws JMSException\n+    {\n+        String TEST_TEXT = \"init\";\n+\n+        //Create a new session to send producer\n+        Session session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+        Queue q = session.createQueue(QUEUE);\n+        MessageProducer producer = session.createProducer(q);\n+\n+        producer.send(session.createTextMessage(TEST_TEXT));\n+\n+        //create a new consumer on the original session\n+        TextMessage m = (TextMessage) _session.createConsumer(q).receive();\n+\n+\n+        if ((m != null) && m.getText().equals(TEST_TEXT))\n+        {\n+            return true;\n+        }\n+        else\n+        {\n+            _logger.error(\"Incorrect values returned from Queue Test:\" + m);\n+            System.exit(0);\n+            return false;\n+        }\n+    }\n+\n+    /** Holds the name of the property to get the test broker url from. */\n+    public static final String BROKER_PROPNAME = \"broker\";\n+\n+    /** Holds the default broker url for the test. */\n+    public static final String BROKER_DEFAULT = \"tcp://localhost:5672\";\n+\n+    /** Holds the name of the property to get the test broker virtual path. */\n+    public static final String VIRTUAL_HOST_PROPNAME = \"virtualHost\";\n+\n+    /** Holds the default virtual path for the test. */\n+    public static final String VIRTUAL_HOST_DEFAULT = \"\";\n+\n+    /** Holds the name of the property to get the broker access username from. */\n+    public static final String USERNAME_PROPNAME = \"username\";\n+\n+    /** Holds the default broker log on username. */\n+    public static final String USERNAME_DEFAULT = \"guest\";\n+\n+    /** Holds the name of the property to get the broker access password from. */\n+    public static final String PASSWORD_PROPNAME = \"password\";\n+\n+    /** Holds the default broker log on password. */\n+    public static final String PASSWORD_DEFAULT = \"guest\";\n+\n+    /** Holds the default configuration properties. */\n+    public static Properties defaults = new Properties();\n+\n+    static\n+    {\n+        defaults.setProperty(BROKER_PROPNAME, BROKER_DEFAULT);\n+        defaults.setProperty(USERNAME_PROPNAME, USERNAME_DEFAULT);\n+        defaults.setProperty(PASSWORD_PROPNAME, PASSWORD_DEFAULT);\n+        defaults.setProperty(VIRTUAL_HOST_PROPNAME, VIRTUAL_HOST_DEFAULT);\n+    }\n+\n+    public static void main(String[] args)\n+    {\n+        PersistentTest test;\n+\n+        Properties options = CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][]{}));\n+\n+\n+        test = new PersistentTest(options);\n+        try\n+        {\n+            test.test();\n+            System.out.println(\"Test was successfull.\");\n+        }\n+        catch (Exception e)\n+        {\n+            _logger.error(\"Unable to test due to:\" + e.getMessage(), e);\n+        }\n+    }\n+}", "filename": "systests/src/main/java/org/apache/qpid/server/queue/PersistentTest.java"}, {"additions": 268, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/testutil/QpidClientConnection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/479e2e7e32be5188ccb315bb059dbf6bde83fb9b/systests/src/main/java/org/apache/qpid/testutil/QpidClientConnection.java", "sha": "80773c102d7b6b9ab359c2184c52e4601ccf5958", "changes": 268, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/testutil/QpidClientConnection.java?ref=479e2e7e32be5188ccb315bb059dbf6bde83fb9b", "patch": "@@ -0,0 +1,268 @@\n+package org.apache.qpid.testutil;\n+\n+import org.apache.qpid.client.AMQConnectionFactory;\n+import org.apache.qpid.client.AMQConnectionURL;\n+import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.JMSAMQException;\n+import org.apache.qpid.url.URLSyntaxException;\n+import org.apache.log4j.Logger;\n+\n+import javax.jms.ExceptionListener;\n+import javax.jms.Session;\n+import javax.jms.Connection;\n+import javax.jms.JMSException;\n+import javax.jms.Queue;\n+import javax.jms.MessageProducer;\n+import javax.jms.Message;\n+import javax.jms.MessageConsumer;\n+import javax.jms.TextMessage;\n+\n+public class QpidClientConnection implements ExceptionListener\n+{\n+\n+    private static final Logger _logger = Logger.getLogger(QpidClientConnection.class);\n+\n+    private boolean transacted = true;\n+    private int ackMode = Session.CLIENT_ACKNOWLEDGE;\n+    private Connection connection;\n+\n+    private String virtualHost;\n+    private String brokerlist;\n+    private int prefetch;\n+    protected Session session;\n+    protected boolean connected;\n+\n+    public QpidClientConnection(String broker)\n+    {\n+        super();\n+        setVirtualHost(\"/test\");\n+        setBrokerList(broker);\n+        setPrefetch(5000);\n+    }\n+\n+\n+    public void connect() throws JMSException\n+    {\n+        if (!connected)\n+        {\n+            /*\n+            * amqp://[user:pass@][clientid]/virtualhost?\n+            * brokerlist='[transport://]host[:port][?option='value'[&option='value']];'\n+            * [&failover='method[?option='value'[&option='value']]']\n+            * [&option='value']\"\n+            */\n+            String brokerUrl = \"amqp://guest:guest@\" + virtualHost + \"?brokerlist='\" + brokerlist + \"'\";\n+            try\n+            {\n+                AMQConnectionFactory factory = new AMQConnectionFactory(new AMQConnectionURL(brokerUrl));\n+                _logger.info(\"connecting to Qpid :\" + brokerUrl);\n+                connection = factory.createConnection();\n+\n+                // register exception listener\n+                connection.setExceptionListener(this);\n+\n+                session = ((AMQConnection) connection).createSession(transacted, ackMode, prefetch);\n+\n+\n+                _logger.info(\"starting connection\");\n+                connection.start();\n+\n+                connected = true;\n+            }\n+            catch (URLSyntaxException e)\n+            {\n+                throw new JMSAMQException(\"URL syntax error in [\" + brokerUrl + \"]: \" + e.getMessage(), e);\n+            }\n+        }\n+    }\n+\n+    public void disconnect() throws JMSException\n+    {\n+        if (connected)\n+        {\n+            session.commit();\n+            session.close();\n+            connection.close();\n+            connected = false;\n+            _logger.info(\"disconnected\");\n+        }\n+    }\n+\n+    public void disconnectWithoutCommit() throws JMSException\n+    {\n+        if (connected)\n+        {\n+            session.close();\n+            connection.close();\n+            connected = false;\n+            _logger.info(\"disconnected without commit\");\n+        }\n+    }\n+\n+    public String getBrokerList()\n+    {\n+        return brokerlist;\n+    }\n+\n+    public void setBrokerList(String brokerlist)\n+    {\n+        this.brokerlist = brokerlist;\n+    }\n+\n+    public String getVirtualHost()\n+    {\n+        return virtualHost;\n+    }\n+\n+    public void setVirtualHost(String virtualHost)\n+    {\n+        this.virtualHost = virtualHost;\n+    }\n+\n+    public void setPrefetch(int prefetch)\n+    {\n+        this.prefetch = prefetch;\n+    }\n+\n+\n+    /** override as necessary */\n+    public void onException(JMSException exception)\n+    {\n+        _logger.info(\"ExceptionListener event: error \" + exception.getErrorCode() + \", message: \" + exception.getMessage());\n+    }\n+\n+    public boolean isConnected()\n+    {\n+        return connected;\n+    }\n+\n+    public Session getSession()\n+    {\n+        return session;\n+    }\n+\n+    /**\n+     * Put a String as a text messages, repeat n times. A null payload will result in a null message.\n+     *\n+     * @param queueName The queue name to put to\n+     * @param payload   the content of the payload\n+     * @param copies    the number of messages to put\n+     *\n+     * @throws javax.jms.JMSException any exception that occurs\n+     */\n+    public void put(String queueName, String payload, int copies) throws JMSException\n+    {\n+        if (!connected)\n+        {\n+            connect();\n+        }\n+\n+        _logger.info(\"putting to queue \" + queueName);\n+        Queue queue = session.createQueue(queueName);\n+\n+        final MessageProducer sender = session.createProducer(queue);\n+\n+        for (int i = 0; i < copies; i++)\n+        {\n+            Message m = session.createTextMessage(payload + i);\n+            m.setIntProperty(\"index\", i + 1);\n+            sender.send(m);\n+        }\n+\n+        session.commit();\n+        sender.close();\n+        _logger.info(\"put \" + copies + \" copies\");\n+    }\n+\n+    /**\n+     * GET the top message on a queue. Consumes the message. Accepts timeout value.\n+     *\n+     * @param queueName   The quename to get from\n+     * @param readTimeout The timeout to use\n+     *\n+     * @return the content of the text message if any\n+     *\n+     * @throws javax.jms.JMSException any exception that occured\n+     */\n+    public Message getNextMessage(String queueName, long readTimeout) throws JMSException\n+    {\n+        if (!connected)\n+        {\n+            connect();\n+        }\n+\n+        Queue queue = session.createQueue(queueName);\n+\n+        final MessageConsumer consumer = session.createConsumer(queue);\n+\n+        Message message = consumer.receive(readTimeout);\n+        session.commit();\n+        consumer.close();\n+\n+        Message result;\n+\n+        // all messages we consume should be TextMessages\n+        if (message instanceof TextMessage)\n+        {\n+            result = ((TextMessage) message);\n+        }\n+        else if (null == message)\n+        {\n+            result = null;\n+        }\n+        else\n+        {\n+            _logger.info(\"warning: received non-text message\");\n+            result = message;\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * GET the top message on a queue. Consumes the message.\n+     *\n+     * @param queueName The Queuename to get from\n+     *\n+     * @return The string content of the text message, if any received\n+     *\n+     * @throws javax.jms.JMSException any exception that occurs\n+     */\n+    public Message getNextMessage(String queueName) throws JMSException\n+    {\n+        return getNextMessage(queueName, 0);\n+    }\n+\n+    /**\n+     * Completely clears a queue. For readTimeout behaviour see Javadocs for javax.jms.MessageConsumer.\n+     *\n+     * @param queueName   The Queue name to consume from\n+     * @param readTimeout The timeout for each consume\n+     *\n+     * @throws javax.jms.JMSException Any exception that occurs during the consume\n+     * @throws InterruptedException   If the consume thread was interrupted during a consume.\n+     */\n+    public void consume(String queueName, int readTimeout) throws JMSException, InterruptedException\n+    {\n+        if (!connected)\n+        {\n+            connect();\n+        }\n+\n+        _logger.info(\"consuming queue \" + queueName);\n+        Queue queue = session.createQueue(queueName);\n+\n+        final MessageConsumer consumer = session.createConsumer(queue);\n+        int messagesReceived = 0;\n+\n+        _logger.info(\"consuming...\");\n+        while ((consumer.receive(readTimeout)) != null)\n+        {\n+            messagesReceived++;\n+        }\n+\n+        session.commit();\n+        consumer.close();\n+        _logger.info(\"consumed: \" + messagesReceived);\n+    }\n+}", "filename": "systests/src/main/java/org/apache/qpid/testutil/QpidClientConnection.java"}], "repo": "qpid-jms-amqp-0-x"}, {"commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/12199502e6c6dbca9a3650e4a401f478b0dd06b4", "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "message": "Merged revisions 1-447993,447995-448007,448009-448141,448143-448157,448161-448194,448196-448210,448212-448218,448220-448223,448225-448233,448235,448237-448241,448243-448596,448598-448623,448625-448850,448852-448880,448882-448982,448984-449635,449637-449639,449641-449642,449644-449645,449647-449674,449676-449719,449721-449749,449751-449762,449764-449933,449935-449941,449943-450383,450385,450387-450400,450402-450433,450435-450503,450505-450555,450557-450860,450862-451024,451026-451149,451151-451316,451318-451931,451933-452139,452141-452162,452164-452320,452322,452324-452325,452327-452333,452335-452429,452431-452528,452530-452545,452547-453192,453194-453195,453197-453536,453538,453540-453656,453658-454676,454678-454735,454737,454739-454781,454783-462728,462730-462819,462821-462833,462835-462839,462841-463071,463073-463178,463180-463308,463310-463362,463364-463375,463377-463396,463398-463402,463404-463409,463411-463661,463663-463670,463672-463673,463675-464493,464495-464502,464504-464576,464578-464613,464615-464628,464630,464632-464866,464868-464899,464901-464942,464944-464949,464951-465004,465006-465016,465018-465053,465055-465165,465167-465321,465323-465406,465408-465427,465429-465431,465433-465548,465550-466044,466047-466075,466077,466079-466081,466083-466099,466101-466112,466114-466126,466128-466240,466242-466971,466973-466978,466980-467309,467311-467312,467316-467328,467330-467485,467487-467588,467590-467604,467606-467699,467701-467706,467708-467749,467751-468069,468071-468537,468539-469241,469244-469246,469248-469318,469320-469421,469423,469425-469429,469431-469435,469437-469462,469464-469469,469472-469477,469479-469490,469492-469503,469505-469529,469531-469598,469600-469624,469626-469737,469739-469752,469754-469806,469808-469928,469930-469953,469955-470011,470013-470109,470111-470335,470338-470339,470341-470379,470381,470383-470399,470401-470446,470448-470741,470743-470758,470760-470809,470811-470817,470819-470993,470995-471001,471003-471788,471790-471792,471794-472028,472030-472032,472034-472036,472038,472040,472043,472045-472059,472061,472063,472065-472066,472068,472070-472072,472074-472080,472082,472084-472092,472094-472107,472109-472123,472125-472158,472160-472165,472167-472172,472174-472457,472459-472460,472462-472464,472466-472470,472472-472483,472486-472491,472493-472494,472496-472497,472499,472501-472503,472505-472512,472514-472544,472546-472556,472558-472560,472562-472572,472574-472587,472589-472591,472593-472605,472607,472609-472731,472733-472786,472788-472843,472845-472849,472851-472859,472861-472878,472880-472903,472905,472907-472988,472990-472991,472993-473071,473073-473086,473088-473090,473093,473095-473096,473098-473106,473108-473110,473112-473185,473187-473260,473262,473268-473270,473275-473279,473281,473284-473287,473289-473295,473297-473306,473308-473330,473332-473335,473337,473339-473344,473346-473351,473353-473355,473357-473358,473361-473471,473473-473497,473499-473535,473537-473567,473569-473888,473890-474451,474454-474492,474494-474563,474565-474843,474845-474865,474867-474932,474934-475035,475037-475144,475146-475180,475182-475265,475267-475285,475287,475289-475293,475295-475296,475298-475302,475304-475631,475633-475649,475651-475748,475750-475752,475754-476107,476109-476302,476304-476413,476415-476430,476432-476700,476702-476868,476870-477147,477149-477213,477215-477263,477265-477340,477342-477635,477637-477789,477791-477825,477827-477841,477843,477846-477852,477854,477856,477858-477865,477867-477894,477896-478022,478024-478182,478184-478211,478213-478233,478235-478236,478238-478241,478243-478252,478254-478259,478261-478263,478265,478267-478269,478271-478286,478288-478342,478344-478379,478381-478412,478414-478443,478445-478636,478639-478658,478660-478821,478823-478853,478855-478922,478924-478962,478965-478974,478976-479029,479031-479049,479051-479210,479212-479214,479216-479407,479409-479415,479417-479425,479427-479559,479561-479639,479641-479676,479678-479685,479687-480030,480033-480086,480091-480093,480095-480118,480120-480139,480141,480143-480148,480150-480156,480158-480163,480165-480177,480179-480189,480191-480193,480195-480198,480200-480220,480222-480282,480284-480292,480294-480308,480310-480317,480320-480422,480424,480426-480581,480583-480656,480658-480692,480695-480702,480704,480706-480710,480712-480910,480913-480933,480935-480945,480947-480972,480974-480993,480995-481034,481036-481158,481161-481174,481176-481220,481222-481234,481236-481260,481263-481264,481266-481296,481298-481304,481306-481311,481313-481332,481334,481336-481380,481382-481441,481443-482144,482146-482180,482182-482193,482195-482232,482234-482236,482239,482241-482242,482244-482247,482250-482251,482253,482256-482261,482264-482288,482290-482364,482366,482368,482370-482554,482556,482558-482569,482572-482636,482638,482640-482696,482698-482722,482724-482732,482734-482771,482774-482957,482959-483045,483047-483105,483108,483110-483115,483117,483119-483127,483130-483134,483136-483148,483150-483158,483160-483164,483166-483178,483180-483391,483393-483400,483402-483403,483405-483418,483420-483421,483425-483436,483438-483470,483472-483502,483504-483558,483560-483599,483601-483637,483639-483644,483646-483659,483661-483670,483672-483878,483880-483910,483912-483915,483917-483940,483942,483944-483968,483970-483972,483974-483976,483978,483980-484612,484614-484657,484659-484693,484695-484718,484720-484842,484844-484847,484849-484986,484988-485019,485021-485489,485491-485544,485546-485591,485593,485595-485697,485699-485729,485731-485734,485736-485779,485781-485787,485789-485851,485853,485855-486007,486009,486011-486020,486022-486083,486085-486097,486099-486117,486120-486131,486133-486148,486150-486161,486163-486164,486166-486197,486199-486205,486208-486247,486249-486253,486256-486427,486429-486431,486433-486554,486556-486573,486575-486593,486595,486597-486609,486611-486619,486622,486625,486627-486641,486643-486645,486649-486687,486689-486721,486723-486730,486732-486746,486748-486759,486761,486763-486777,486779-486782,486784-486788,486790,486792,486794-486796,486798-487175,487178,487180-487213,487215,487217-487267,487269-487284,487286-487298,487300-487358,487360-487367,487369-487382,487384-487434,487436-487480,487482-487547,487549-487561,487563-487565,487567-487578,487580-487615,487617-487622,487624,487626,487628,487630-487635,487637-487703,487705-487777,487780-487781,487783-487800,487802-487803,487805-487820,487822-487848,487850-487902,487904-488103,488105-488133,488135-488158,488160-488163,488165-488187,488189-488216,488218-488248,488250-488278,488280,488282-488303,488305-488313,488315-488342,488344-488351,488353-488376,488378-488449,488451-488593,488595,488597-488623,488625-488700,488702-488704,488706-488710,488714,488716-488725,488727-488744,488746-488770,488772-488798,488800,488802-488807,488809,488811-488829,488831-488843,488845-488851,488853-489069,489071-489077,489079-489081,489084-489102,489104-489105,489107-489109,489111-489112,489114-489139,489141-489178,489181-489203,489205-489211,489213,489216-489329,489332-489402,489404-489417,489419-489421,489423-489643,489645-489690,489692-489703,489705-489714,489716-489747,489749-489753,489755-489803,489805-489904,489906-490372,490374-490504,490506-490604,490606-490707,490710-490733,490735-490871,490873-490984,490986-491028,491030,491032-491071,491073-491119,491121-491576,491578-491672,491674-491800,491802-491838,491840-491878,491880-492183,492185-492279,492281-492317,492319-492513,492515-492584,492586-492587,492589-492601,492603-492635,492637-492640,492642-492717,492719-492723,492725-492729,492731-492755,492757-492901,492903-492955,492957-492962,492964-492997,492999-493002,493004-493041,493043-493059,493062-493063,493065-493086,493088-493125,493127-493139,493141-493150,493152-493871,493873-494017,494019-494030,494032-494041,494043-494091,494093-494120,494122-494354,494356-494436,494438-494539,494541-494552,494554-494586,494588-494649,494651,494653-494654,494656-494657,494659-494764,494766-494768,494770-494796,494798-494799,494802,494804-494860,494862-494903,494905-494906,494908-495019,495021-495160,495162-495168,495171-495188,495190-495229,495231-495254,495256-495303,495305-495313,495315-495336,495338-495372,495374-495379,495381-495454,495457-495459,495462-495516,495518-495524,495526-495531,495533-495548,495551-495553,495555,495557-495558,495560,495562-495573,495575-495583,495585-495594,495596-495628,495630-495638,495640-495651,495653-495660,495662-495753,495755-496259,496261-496262,496264-496269,496271-496275,496277-496301,496303-496316,496318-496383,496385-496413,496415-496495,496497-496625,496627-496636,496638-496640,496642-496647,496650-496657,496659-496660,496663-496664,496666-496677,496679-496681,496683-496730,496732-496750,496752,496754-496784,496786-496832,496834-496840,496842-496990,496992-496995,496997-497340,497343-497351,497353-497403,497405-497424,497426-497438,497440-497481,497483-497497,497499-497765,497767-497769,497771-497775,497777-497778,497780,497782-497783,497785,497787-497812,497814-497871,497873-497877,497879-498573,498575-498588,498590,498592,498594-498636,498638-498669,498671-498686,498688-498689,498691-498719,498721-498964,498966-498969,498971-498973,498975-498982,498985-499035,499037-499040,499042,499044-499048,499050-499082,499084-499086,499088-499164,499167-499169,499171-499355,499357-499370,499372-499373,499375-499391,499393,499395-499425,499428,499430-499445,499447-499455,499457-499460,499462-499465,499467,499469-499489,499491-499492,499494-499531,499533-499562,499566-499627,499629-499715,499717-499732,499734-499755,499758-499763,499765-499780,499782-499795,499797-499802,499804-499844,499846,499848-499850,499852-499863,499865-499873,499875-499974,499976-499978,499980-500263,500265-500283,500285-500309,500311-501000,501002,501012-501057,501059-501095,501097-501390,501392-501410,501413-501447,501449-501454,501456,501458-501464,501466-501471,501473-501803,501805-501913,501915-501916,501918-501919,501921-501944,501946-502171,502173-502177,502181,502183-502247,502250-502252,502254-502260,502262-502267,502270,502272,502274-502575,502577-502609,502611-502619,502621-502626,502628-502654,502656-503592,503594-503603,503605-503608,503610-503636,503638-503645,503647-503705,503707-503789,503791-504024,504026-504111,504113-504506,504508-504735,504737-504863,504865-504867,504869-504914,504916-505241,505243-505254,505257-505267,505269-505354,505356-505891,505893-505971,505973-506400,506402-506404,506407-506438,506440-506516,506518-506541,506543-506966,506968-506971,506973-507095,507097-507108,507111-507454,507456,507459-507471,507473-507556,507558,507560-507581,507585-507594,507597,507599-507608,507610-507728,507730-507893,507895-507937,507940-508234,508236-508350,508352-508365,508367-508380,508383,508386-508415,508417-508648,508650-508941,508943-509146,509148-509171,509173-509175,509179-509201,509203-509207,509209-509215,509217-509222,509224-509477,509480-509627,509629-509634,509636-509641,509643-509736,509738-509931,509933-510059,510061-510075,510077-510158,510161-510896,510898-510938,510940-511388,511390-511922,511924-512287,512289-512698,512702-512813,512815-512817,512819-513359,513361-513370,513372-514702,514704-514886,514888-514902,514904-515126,515129-515141,515143-515516,515518-515534,515536-515538,515540-515648,515650-515651,515653-516070,516072-516411,516413-516448,516450,516452-517637,517639-517647,517649-517659,517661-517663,517665-517677,517679-517682,517684-517744,517746-518085,518087-518175,518177-518558,518560-518568,518571-518666,518668,518670-518699,518701-518987,518990-518992,518994-519908,519910-519932,519934-520414,520416-520842,520844-520937,520939-521362,521364-521681,521683-521704,521706-521709,521711-521714,521716-521781,521783-521792,521794-522462,522464-522527,522529-522534,522536-522566,522568-522958,522960,522962-522966,522968-522976,522978-522980,522982-522988,522992-522993,522995-523244,523246-523746,523748-524049,524051-524738,524741-524742,524744-524762,524764,524766,524768-525486,525488-525530,525532,525534,525537-525552,525554-525765,525767-525776,525778-525784,525789-525803,525805-525816,525818-525828,525830-525861,525863-525866,525868-526090,526092-526112,526114-526116,526119-526121,526123-526149,526151-526153,526155-526156,526160-526165,526167-526186,526188-526193,526196-526197,526200-526665,526667-526682,526686-526690,526693,526695-526708,526710-526713,526715-526775,526777-526802,526804-526806,526808-527048,527051-527052,527054-527181,527183-527486,527488-527492,527494-527498,527500-527508,527510-527517,527519-527536,527538-527555,527559-527802,527804-527842,527844-527847,527849-527875,527877-527940,527942-527958,527960-527971,527973-528002,528004,528006-528423,528425-529232,529234-529245,529247-529296,529298-529634,529636-529658,529660-529665,529667-529668,529670-530033,530035-530036,530038-530040,530045-530046,530050-530051,530053-530431,530433-530436,530439-530440,530443,530445-530446,530448,530450-530682,530684,530687-530696,530698-530733,530735-530776,530778-530795,530799,530801-530811,530813-530818,530820-530837,530839-531436,531438-531455,531457,531459-531511,531514,531516,531519-531523,531525,531528-531858,531860-531864,531866-531907,531909-531916,531918-531936,531938-531988,531990-532001,532003-532371,532373-532465,532467-532727,532729-532765,532767-532785,532788-532790,532792-532793,532795-533064,533066-533074,533076,533080-533130,533132-533139,533142-533703,533705-533720,533722-533763,533766-533818,533820-533839,533841-533859,533862-534035,534037-534112,534114-534116,534118-534472,534474-534477,534479-534762,534764-534896,534898-534902,534904-535253,535255-535308,535310-535808,535810-535873,535875-536007,536009-536140,536142-536162,536165-536242,536244-536252,536254-536278,536280-536338,536340-536448,536450-536479,536481-536482,536484-536485,536487-536495,536497,536500-536505,536507-536561,536563-536570,536572,536574-536583,536586-536823,536825-537014,537016-537018,537020-537025,537027-537028,537030-537160,537162-537170,537172-537672,537674-537781,537783-537833,537836-537840,537842-537844,537846-537953,537955-538034,538036-538078,538080-538083,538085-538097,538099-538108,538110-538239,538241-538881,538883-538906,538908-538911,538913-538921,538923-539177,539179-539190,539192-539469,539471-539475,539477-539480,539482-539483,539485-539500,539502-539593,539595-539782,539784-539787,539789-540106,540108-540168,540170-540510,540512-541246,541248-542483,542485-542788,542790-543495,543497-544108,544110-544421,544423-544507,544509-544865,544867-545145,545147-546095,546097-546189,546191-546440,546442-546457,546459-547177,547179-547626,547628-548275,548277-548278,548280-548301,548303-548307,548309-548311,548313-548314,548316,548318,548320-548380,548382-549010,549012-549529,549531-549848,549850-550508,550510-550747,550749-550772,550774-550848,550850-551116,551122-553446,553448-561282 via svnmerge from \nhttps://svn.apache.org/repos/asf/incubator/qpid/branches/M2\n\n........\n  r541920 | tomasr | 2007-05-26 18:35:51 +0100 (Sat, 26 May 2007) | 1 line\n  \n  QPID-136 Initial Prefetch Implementation\n........\n  r549112 | arnaudsimon | 2007-06-20 15:11:03 +0100 (Wed, 20 Jun 2007) | 1 line\n  \n  changed setText to use UTF8 as default encoder \n........\n  r551167 | arnaudsimon | 2007-06-27 15:08:50 +0100 (Wed, 27 Jun 2007) | 1 line\n  \n  added public void declareAndBind(AMQDestination amqd)\n........\n  r551174 | ritchiem | 2007-06-27 15:23:21 +0100 (Wed, 27 Jun 2007) | 3 lines\n  \n  Caused each of these tests to run 10 times to help identify any race conditions that were occuring.\n  \n  Updated the CommitRollbackTest to be more robust in the detection of failure.\n........\n  r551175 | ritchiem | 2007-06-27 15:23:52 +0100 (Wed, 27 Jun 2007) | 1 line\n  \n  Allowed more of the constants to be set via system properties.\n........\n  r551176 | ritchiem | 2007-06-27 15:25:13 +0100 (Wed, 27 Jun 2007) | 1 line\n  \n  renamed the passwd programme qpid-passwd to match the change in bin directory.\n........\n  r552441 | rupertlssmith | 2007-07-02 10:23:54 +0100 (Mon, 02 Jul 2007) | 1 line\n  \n  Added log4j as slfj logger for perftests.\n........\n  r552499 | rupertlssmith | 2007-07-02 15:17:45 +0100 (Mon, 02 Jul 2007) | 1 line\n  \n  Added some documentation.\n........\n  r553172 | rupertlssmith | 2007-07-04 12:11:04 +0100 (Wed, 04 Jul 2007) | 1 line\n  \n  Messages moved by management console now commited on the message store.\n........\n  r553248 | ritchiem | 2007-07-04 17:05:55 +0100 (Wed, 04 Jul 2007) | 6 lines\n  \n  Addition of the MessageStore Tool.\n  Small changes to the Exchanges to allow the extraction of currently listed items.\n  \n  Extracted initial broker configuration mechanism to a reusable class. Have modified broker to use it.\n  \n  Move the Passwd.java to new tools package structure on the broker.\n........\n  r553265 | ritchiem | 2007-07-04 17:42:59 +0100 (Wed, 04 Jul 2007) | 1 line\n  \n  Tidied up some extranious logging.\n........\n  r553432 | rupertlssmith | 2007-07-05 10:28:33 +0100 (Thu, 05 Jul 2007) | 1 line\n  \n  Fixed test state carrying over to mandatory message test from immediate. Also added in-vm clean up to other tests.\n........\n  r553480 | ritchiem | 2007-07-05 13:40:50 +0100 (Thu, 05 Jul 2007) | 2 lines\n  \n  Minor changes and tidy up when running via command line.\n  Added Copy command.\n........\n  r553482 | ritchiem | 2007-07-05 13:44:42 +0100 (Thu, 05 Jul 2007) | 2 lines\n  \n  Forgot to compile before committing. Missed a method change in the Select command.\n........\n  r554964 | rupertlssmith | 2007-07-10 15:40:04 +0100 (Tue, 10 Jul 2007) | 1 line\n  \n  Added message copy method.\n........\n  r555249 | rupertlssmith | 2007-07-11 12:52:39 +0100 (Wed, 11 Jul 2007) | 1 line\n  \n  Update perftests to center better around current performance.\n........\n  r556011 | rupertlssmith | 2007-07-13 15:24:03 +0100 (Fri, 13 Jul 2007) | 1 line\n  \n  Moved test framework into its own package and cleaned it up.\n........\n  r556024 | rupertlssmith | 2007-07-13 16:02:06 +0100 (Fri, 13 Jul 2007) | 1 line\n  \n  Completed javadoc for test framework.\n........\n  r556628 | rgodfrey | 2007-07-16 14:50:57 +0100 (Mon, 16 Jul 2007) | 1 line\n  \n  QPID-537 : Make AMQMessage.incrementReference public\n........\n  r556675 | cctrieloff | 2007-07-16 18:36:21 +0100 (Mon, 16 Jul 2007) | 2 lines\n  \n  added notice entries\n........\n  r556680 | cctrieloff | 2007-07-16 18:56:40 +0100 (Mon, 16 Jul 2007) | 2 lines\n  \n  clean up\n........\n  r556682 | cctrieloff | 2007-07-16 18:58:37 +0100 (Mon, 16 Jul 2007) | 2 lines\n  \n  removed optional cppunit as not in distributed packages\n........\n  r556845 | ritchiem | 2007-07-17 09:26:33 +0100 (Tue, 17 Jul 2007) | 3 lines\n  \n  Additional logging in case of broker failure at startup.\n  \n  Use broker logger at error level as well as System.out\n........\n  r556847 | ritchiem | 2007-07-17 09:35:35 +0100 (Tue, 17 Jul 2007) | 3 lines\n  \n  Update to the MessageStore Tool to provide Move and Purge functionality.\n  \n  Updated to remove the AMQExceptions that will be removed from the Exchange class.\n........\n  r556861 | ritchiem | 2007-07-17 10:26:47 +0100 (Tue, 17 Jul 2007) | 2 lines\n  \n  QPID-538 Check to ensure a duplicate binding is not created.\n........\n  r556868 | ritchiem | 2007-07-17 10:55:56 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Addition of simple pub/sub examples.\n........\n  r556869 | ritchiem | 2007-07-17 10:56:17 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  QPID-540 Prevent NPE when purging message from the main _message queue in the ConcurrentSelectorDeliveryManager that have been delivered via a Subscribers _messageQueue. Ensuring that any expired messages are still correctly handled. i.e. the Queue size/depth is reduced and the message correctly dequeued from the underlying store.\n........\n  r556871 | ritchiem | 2007-07-17 10:57:35 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  White space & code formatting change\n........\n  r556872 | ritchiem | 2007-07-17 10:58:35 +0100 (Tue, 17 Jul 2007) | 3 lines\n  \n  Added additional information to hard-error logging in exceptionReceived.\n  \n  Fully expanded imports\n........\n  r556888 | ritchiem | 2007-07-17 12:33:08 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Change to allow the management port to be specified on the command line, via -m or --mport\n........\n  r556890 | ritchiem | 2007-07-17 12:38:10 +0100 (Tue, 17 Jul 2007) | 4 lines\n  \n  QPID-541 A large portion of memory was being wasted in 32k ByteBuffers being held by the AMQShortStrings. \n  \n  Patch submitted by Robert Godfrey to intern() the AMQSSs to reduce memory usage. Current implementation *will* impact performance due to the usage of a static Map for storage. However, a thread local implementation is in the works.\n........\n  r556898 | rgodfrey | 2007-07-17 13:00:57 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  QPID-541 : Change to use threadlocal maps for intern for the common case to avoid excessive synchronization.  In the uncommon case will require more lookup.\n........\n  r556958 | rupertlssmith | 2007-07-17 17:22:16 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Refactored the distributed test clients and coordinator to support different distribution and sequencing engines.\n........\n  r556967 | rupertlssmith | 2007-07-17 17:40:14 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Removed unused package.\n........\n  r556968 | rupertlssmith | 2007-07-17 17:42:00 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Retired old interop tests.\n........\n  r556969 | rupertlssmith | 2007-07-17 17:43:49 +0100 (Tue, 17 Jul 2007) | 1 line\n  \n  Properties file not needed any more. Test properties all driven from MessagingTestConfigProperties.\n........\n  r557276 | ritchiem | 2007-07-18 15:36:11 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  Updates to pom files and Licensing/Notice files for M2 release.\n........\n  r557279 | ritchiem | 2007-07-18 15:51:42 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  This is left over from ANT\n........\n  r557281 | ritchiem | 2007-07-18 15:54:06 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  updated comment to refelect property values\n........\n  r557286 | ritchiem | 2007-07-18 16:02:22 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  Set default mvn build to assembly:assembly\n........\n  r557288 | ritchiem | 2007-07-18 16:09:07 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  Ensure the top level release-docs directory is included in the builds\n........\n  r557306 | ritchiem | 2007-07-18 17:01:58 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  Update fix incorrect license headers.\n........\n  r557312 | ritchiem | 2007-07-18 17:07:01 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  added license\n........\n  r557314 | ritchiem | 2007-07-18 17:11:17 +0100 (Wed, 18 Jul 2007) | 1 line\n  \n  added license\n........\n  r557452 | aconway | 2007-07-19 03:03:02 +0100 (Thu, 19 Jul 2007) | 14 lines\n  \n  \n  \t* lib/broker/Daemon.cpp, .h\n  \t - Rewrote to remove libdaemon dependency.\n  \t - PID file stored in /var/run if root, /tmp otherwise.\n  \n  \t* src/qpidd.cpp: Use new Daemon.cpp.\n  \t - lock files stored in /var/run (for root) or /tmp.\n  \t - updated to trunk daemon flag behavior.\n  \n  \t* lib/broker/Makefile.am (libqpidbroker_la_LIBADD): \n  \t - Daemon.cpp now needs -lboost_iostreams\n  \t \n  \t* NOTICE, README: Removed mention of libdaemon.\n........\n  r558027 | ritchiem | 2007-07-20 17:08:05 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  Added a logger but only used to control the toString inclusion of password. If in debug mode it will include password otherwise the password is \"********\".\n........\n  r558072 | astitcher | 2007-07-20 18:49:41 +0100 (Fri, 20 Jul 2007) | 2 lines\n  \n  Fixed the license from the \"old\" apache copyright notice\n........\n  r558083 | aconway | 2007-07-20 19:29:08 +0100 (Fri, 20 Jul 2007) | 2 lines\n  \n  Remove -ldaemon, we no longer require libdaemon.\n........\n  r558099 | aconway | 2007-07-20 20:20:01 +0100 (Fri, 20 Jul 2007) | 2 lines\n  \n  Ignore QPID_ env variables that don't correspond to known options.\n........\n  r558108 | cctrieloff | 2007-07-20 20:55:40 +0100 (Fri, 20 Jul 2007) | 2 lines\n  \n  typo fix\n........\n  r558114 | rajith | 2007-07-20 21:11:03 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  added release notes\n........\n  r558115 | rajith | 2007-07-20 21:12:20 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  Checking in the release notes\n........\n  r558116 | aconway | 2007-07-20 21:16:20 +0100 (Fri, 20 Jul 2007) | 3 lines\n  \n  Removed .txt from RELEASE_NOTES\n  Added RELEASE_NOTES to EXTRA_DIST in Makefile.am\n........\n  r558168 | rajith | 2007-07-20 23:03:42 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  added release notes\n........\n  r558170 | rajith | 2007-07-20 23:04:11 +0100 (Fri, 20 Jul 2007) | 1 line\n  \n  added release notes\n........\n  r558630 | gsim | 2007-07-23 08:21:49 +0100 (Mon, 23 Jul 2007) | 3 lines\n  \n  Revised release notes: removed bug fixed on this branch, removed outstanding feature lists as it is not terribly accurate or helpful.\n........\n  r559419 | rupertlssmith | 2007-07-25 13:17:59 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Refactored interop tests into general distributed test framework. Moved framework under systests from integrationtests.\n........\n  r559427 | ritchiem | 2007-07-25 13:40:24 +0100 (Wed, 25 Jul 2007) | 2 lines\n  \n  AMQMessage - added //todo-s and removed unused parameter StoreContext from expired() method call.\n  ConcurrentSelectorDeliveryManager - Update to reflect expired() call change. Created new _reaperContextStore to be used when performing reaper operations such as message dequeue due to expiration. Removed old commented code.\n........\n  r559455 | rupertlssmith | 2007-07-25 14:40:16 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Added to comments.\n........\n  r559456 | rupertlssmith | 2007-07-25 14:41:21 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Removed redundant method.\n........\n  r559458 | rupertlssmith | 2007-07-25 14:57:21 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Refactored packaging of test framework.\n........\n  r559461 | rupertlssmith | 2007-07-25 15:00:16 +0100 (Wed, 25 Jul 2007) | 1 line\n  \n  Removed redundant packages.\n........\n  r559943 | rhs | 2007-07-26 20:15:17 +0100 (Thu, 26 Jul 2007) | 1 line\n  \n  adding missing ack\n........\n  r559944 | rhs | 2007-07-26 20:15:44 +0100 (Thu, 26 Jul 2007) | 1 line\n  \n  removed old script\n........\n  r560198 | ritchiem | 2007-07-27 12:30:34 +0100 (Fri, 27 Jul 2007) | 1 line\n  \n  Added files to ignore list\n........\n  r560225 | ritchiem | 2007-07-27 14:33:50 +0100 (Fri, 27 Jul 2007) | 1 line\n  \n  Converted namespaces from Qpid.* to Apache.Qpid.*\n........\n  r560471 | tomasr | 2007-07-28 03:35:41 +0100 (Sat, 28 Jul 2007) | 1 line\n  \n  Removed using directives causing compilation failure in .NET 1.1\n........\n  r561278 | ritchiem | 2007-07-31 10:07:57 +0100 (Tue, 31 Jul 2007) | 8 lines\n  \n  Changes to POMs.\n  Client pom now builds a single jar with all dependancies included in the single bundle.\n  systests/pom.xml adjusted to include only *Test.class items. This will fix the current Error on OptOutTestCase\n  management/eclipse-plugin/pom.xml - editied to include there required MANIFEST.MF to identify plugin to eclipse\n  distribution/src/main/assembly/management-eclipse-plugin.xml editied to include there required MANIFEST.MF to identify the plugin\n  distribution/pom.xml - white space\n  \n  Also updated log4j.xml default to create an alert.log file from the AMQQueue alerting. Added a debug.log4j.xml that gives example of debugging the broker via log4j.\n........", "bug_id": "qpid-jms-amqp-0-x_91", "file": [{"additions": 56, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/bin/msTool.sh", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/bin/msTool.sh", "previous_filename": "integrationtests/src/resources/org/apache/qpid/interop/connection.properties", "sha": "4d55ee7811c1a8fab4aaf042ca605fd149ec9dcd", "changes": 76, "status": "renamed", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/bin/msTool.sh?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,20 +1,56 @@\n-#\r\n-# Licensed to the Apache Software Foundation (ASF) under one\r\n-# or more contributor license agreements.  See the NOTICE file\r\n-# distributed with this work for additional information\r\n-# regarding copyright ownership.  The ASF licenses this file\r\n-# to you under the Apache License, Version 2.0 (the\r\n-# \"License\"); you may not use this file except in compliance\r\n-# with the License.  You may obtain a copy of the License at\r\n-#\r\n-#   http://www.apache.org/licenses/LICENSE-2.0\r\n-#\r\n-# Unless required by applicable law or agreed to in writing,\r\n-# software distributed under the License is distributed on an\r\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-# KIND, either express or implied.  See the License for the\r\n-# specific language governing permissions and limitations\r\n-# under the License.\r\n-#\r\n-java.naming.factory.initial = org.apache.qpid.jndi.PropertiesFileInitialContextFactory\r\n-connectionfactory.broker = amqp://guest:guest@clientid/?brokerlist='tcp://localhost:5672'\r\n+#!/bin/bash\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+# Set classpath to include Qpid jar with all required jars in manifest\n+QPID_LIBS=$QPID_TOOLS/lib/qpid-incubating.jar\n+\n+die() {\n+  if [[ $1 = -usage ]]; then\n+    shift\n+    usage=true\n+  else\n+    usage=false\n+  fi\n+  echo \"$@\"\n+  $usage && echo\n+  $usage && usage\n+  exit 1\n+}\n+\n+cygwin=false\n+if [[ \"$(uname -a | fgrep Cygwin)\" != \"\" ]]; then\n+  cygwin=true\n+fi\n+\n+if $cygwin; then\n+  QPID_TOOLS=$(cygpath -w $QPID_TOOLS)\n+fi\n+\n+# Set other variables used by the qpid-run script before calling\n+export JAVA=java \\\n+       JAVA_VM=-server \\\n+       JAVA_OPTS=-Dlog4j.configuration=file:$QPID_TOOLS/etc/mstool-log4j.xml \\\n+       QPID_CLASSPATH=$QPID_LIBS\n+\n+if [ -z \"$QPID_TOOLS\" ]; then\n+  die \"QPID_TOOLS be set\"\n+fi\n+\n+. qpid-run org.apache.qpid.tools.messagestore.MessageStoreTool \"$@\"", "filename": "broker/bin/msTool.sh"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/bin/qpid-passwd", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/bin/qpid-passwd", "sha": "f0462525227e3b71dee4f6082cbfcda75d676e7a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/bin/qpid-passwd?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -27,4 +27,4 @@ export JAVA=java \\\n        JAVA_MEM=-Xmx1024m \\\r\n        QPID_CLASSPATH=$QPID_LIBS\r\n \r\n-. qpid-run org.apache.qpid.server.security.Passwd \"$@\"\r\n+. qpid-run org.apache.qpid.tools.security.Passwd \"$@\"\r", "filename": "broker/bin/qpid-passwd"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/bin/qpid-server", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/bin/qpid-server", "sha": "fabf7e941c9d0f8da7c2b6d34ae2f6b81edf445a", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/bin/qpid-server?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -7,9 +7,9 @@\n # to you under the Apache License, Version 2.0 (the\n # \"License\"); you may not use this file except in compliance\n # with the License.  You may obtain a copy of the License at\n-# \n+#\n #   http://www.apache.org/licenses/LICENSE-2.0\n-# \n+#\n # Unless required by applicable law or agreed to in writing,\n # software distributed under the License is distributed on an\n # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -25,7 +25,7 @@ QPID_LIBS=$QPID_HOME/lib/qpid-incubating.jar:$QPID_HOME/lib/bdbstore-launch.jar\n export JAVA=java \\\n        JAVA_VM=-server \\\n        JAVA_MEM=-Xmx1024m \\\n-       JAVA_GC=-XX:-UseConcMarkSweepGC\n+       JAVA_GC=-XX:-UseConcMarkSweepGC \\\n        QPID_CLASSPATH=$QPID_LIBS\n \n . qpid-run org.apache.qpid.server.Main \"$@\"", "filename": "broker/bin/qpid-server"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/distribution/src/main/assembly/broker-bin.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/distribution/src/main/assembly/broker-bin.xml", "sha": "e66190a3f4017f9ee6317514e2331dea7f65574d", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/distribution/src/main/assembly/broker-bin.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -114,9 +114,9 @@\n       <fileMode>473</fileMode>\n     </file>\n     <file>\n-      <source>../bin/passwd</source>\n+      <source>../bin/qpid-passwd</source>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>passwd</destName>\n+      <destName>qpid-passwd</destName>\n       <fileMode>473</fileMode>\n     </file>\n     <file>", "filename": "broker/distribution/src/main/assembly/broker-bin.xml"}, {"additions": 114, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/etc/debug.log4j.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/etc/debug.log4j.xml", "sha": "e8fd7e119d2dd029c26a40269076681c1a0f6d8b", "changes": 114, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/debug.log4j.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,114 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n+    <appender name=\"ArchivingFileAppender\" class=\"org.apache.log4j.QpidCompositeRollingAppender\">\n+        <!-- Ensure that logs allways have the dateFormat set-->\n+        <param name=\"StaticLogFileName\" value=\"false\"/>\n+        <param name=\"File\" value=\"${QPID_WORK}/log/${logprefix}qpid${logsuffix}.log\"/>\n+        <param name=\"Append\" value=\"false\"/>\n+        <!-- Change the direction so newer files have bigger numbers -->\n+        <!-- So log.1 is written then log.2 etc This prevents a lot of file renames at log rollover -->\n+        <param name=\"CountDirection\" value=\"1\"/>\n+        <!-- Use default 10MB -->\n+        <!--param name=\"MaxFileSize\" value=\"100000\"/-->\n+        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd-HH-mm\"/>\n+        <!-- Unlimited number of backups -->\n+        <param name=\"MaxSizeRollBackups\" value=\"-1\"/>\n+        <!-- Compress(gzip) the backup files-->\n+        <param name=\"CompressBackupFiles\" value=\"true\"/>\n+        <!-- Compress the backup files using a second thread -->\n+        <param name=\"CompressAsync\" value=\"true\"/>\n+        <!-- Start at zero numbered files-->\n+        <param name=\"ZeroBased\" value=\"true\"/>\n+        <!-- Backup Location -->\n+        <param name=\"backupFilesToPath\" value=\"${QPID_WORK}/backup/log\"/>\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <appender name=\"FileAppender\" class=\"org.apache.log4j.FileAppender\">\n+        <param name=\"File\" value=\"${QPID_WORK}/log/${logprefix}qpid${logsuffix}.log\"/>\n+        <param name=\"Append\" value=\"false\"/>\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <appender name=\"AlertFile\" class=\"org.apache.log4j.FileAppender\">\n+        <param name=\"File\" value=\"${QPID_WORK}/log/alert.log\"/>\n+        <param name=\"Append\" value=\"false\"/>\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <category name=\"Qpid.Broker\">\n+        <priority value=\"debug\"/>\n+        <appender-ref ref=\"AlertFile\"/>\n+        <!--appender-ref ref=\"STDOUT\"/-->        \n+    </category>\n+\n+\n+    <category name=\"org.apache.qpid.server.queue.AMQQueueMBean\">\n+        <priority value=\"info\"/>\n+        <appender-ref ref=\"AlertFile\"/>\n+    </category>\n+\n+\n+    <!-- Provide warnings to standard output -->\n+    <!--category name=\"org.apache.qpid\">\n+        <priority value=\"warn\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n+    </category-->\n+\n+\n+    <!-- Additional level settings for debugging -->\n+    <!-- Each class in the Broker is a category that can have its logging level adjusted. -->\n+    <!-- This will provide more details if available about that classes processing. -->\n+    <!--category name=\"org.apache.qpid.server.txn\">\n+        <priority value=\"debug\"/>\n+    </category>-->\n+\n+    <!--<category name=\"org.apache.qpid.server.store\">\n+        <priority value=\"debug\"/>\n+    </category-->\n+\n+    <!-- Log all info events to file -->\n+    <root>\n+        <priority value=\"info\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n+        <appender-ref ref=\"FileAppender\"/>\n+    </root>\n+\n+</log4j:configuration>", "filename": "broker/etc/debug.log4j.xml"}, {"additions": 29, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/etc/log4j.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/etc/log4j.xml", "sha": "2060246b7ffde5fe7a1bc5636f19b92e9e822732", "changes": 36, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/log4j.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -44,7 +44,7 @@\n         <param name=\"backupFilesToPath\" value=\"${QPID_WORK}/backup/log\"/>\n \n         <layout class=\"org.apache.log4j.PatternLayout\">\n-            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>            \n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n         </layout>\n     </appender>\n \n@@ -57,33 +57,55 @@\n         </layout>\n     </appender>\n \n+    <appender name=\"AlertFile\" class=\"org.apache.log4j.FileAppender\">\n+        <param name=\"File\" value=\"${QPID_WORK}/log/alert.log\"/>\n+        <param name=\"Append\" value=\"false\"/>\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n     <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n \n         <layout class=\"org.apache.log4j.PatternLayout\">\n             <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n         </layout>\n     </appender>\n \n-     <category name=\"Qpid.Broker\">\n+    <category name=\"Qpid.Broker\">\n+        <priority value=\"debug\"/>\n+        <appender-ref ref=\"AlertFile\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.queue.AMQQueueMBean\">\n         <priority value=\"info\"/>\n+        <appender-ref ref=\"AlertFile\"/>\n+    </category>\n+\n+    <!-- Provide warnings to standard output -->\n+    <category name=\"org.apache.qpid\">\n+        <priority value=\"warn\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n     </category>\n \n-    <!--<category name=\"org.apache.qpid.server.store\">\n-        <priority value=\"debug\"/>\n-    </category-->\n \n-    <!--category name=\"org.apache.qpid.server.queue\">\n+    <!-- Examples of additional logging settings -->\n+    <!-- Used to generate extra debug. See debug.log4j.xml -->\n+    \n+    <!--<category name=\"org.apache.qpid.server.store\">\n         <priority value=\"debug\"/>\n     </category-->\n \n     <!--category name=\"org.apache.qpid.server.txn\">\n         <priority value=\"debug\"/>\n     </category>-->\n \n+    <!-- Log all info events to file -->\n     <root>\n         <priority value=\"info\"/>\n-        <appender-ref ref=\"STDOUT\"/>\n         <appender-ref ref=\"FileAppender\"/>\n         <!--appender-ref ref=\"ArchivingFileAppender\"/-->\n     </root>\n+\n </log4j:configuration>", "filename": "broker/etc/log4j.xml"}, {"additions": 53, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/etc/messagestoretool-log4j.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/etc/messagestoretool-log4j.xml", "sha": "0313de4f95d7d068062d8361466c2f0233ac5fd5", "changes": 53, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/messagestoretool-log4j.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n+\n+    <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <category name=\"org.apache.qpid.tools\">\n+        <priority value=\"info\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid\">\n+        <priority value=\"info\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.security\">\n+        <priority value=\"info\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.management\">\n+        <priority value=\"error\"/>\n+    </category>\n+\n+\n+    <root>\n+        <priority value=\"info\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n+    </root>\n+</log4j:configuration>", "filename": "broker/etc/messagestoretool-log4j.xml"}, {"additions": 54, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/etc/mstool-log4j.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/etc/mstool-log4j.xml", "sha": "8c46010e2db09bb051ba6870d55ca9f49e5c2be9", "changes": 54, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/etc/mstool-log4j.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+ -\n+ - Licensed to the Apache Software Foundation (ASF) under one\n+ - or more contributor license agreements.  See the NOTICE file\n+ - distributed with this work for additional information\n+ - regarding copyright ownership.  The ASF licenses this file\n+ - to you under the Apache License, Version 2.0 (the\n+ - \"License\"); you may not use this file except in compliance\n+ - with the License.  You may obtain a copy of the License at\n+ -\n+ -   http://www.apache.org/licenses/LICENSE-2.0\n+ -\n+ - Unless required by applicable law or agreed to in writing,\n+ - software distributed under the License is distributed on an\n+ - \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ - KIND, either express or implied.  See the License for the\n+ - specific language governing permissions and limitations\n+ - under the License.\n+ -\n+ -->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\n+\n+    <appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\">\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <!--param name=\"ConversionPattern\" value=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/-->\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%t] (%F:%L) - %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <category name=\"org.apache.qpid.tools\">\n+        <priority value=\"info\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid\">\n+        <priority value=\"error\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.security\">\n+        <priority value=\"error\"/>\n+    </category>\n+\n+    <category name=\"org.apache.qpid.server.management\">\n+        <priority value=\"error\"/>\n+    </category>\n+\n+\n+    <root>\n+        <priority value=\"info\"/>\n+        <appender-ref ref=\"STDOUT\"/>\n+    </root>\n+</log4j:configuration>", "filename": "broker/etc/mstool-log4j.xml"}, {"additions": 19, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/pom.xml", "sha": "35c29d504f54f018052f86d7f49c2cc4b95927f4", "changes": 19, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/pom.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -101,6 +101,25 @@\n     <build>\n \n         <plugins>\n+\n+\n+           <!--plugin>\n+                <artifactId>minijar-maven-plugin</artifactId>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <executions>\n+                    <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>minijars</goal>\n+                        </goals>\n+                        <configuration>\n+                            <stripUnusedClasses>true</stripUnusedClasses>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin-->\n+\n+\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>", "filename": "broker/pom.xml"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java", "sha": "7e0c4defe13eb1076a3d16f6c14292d3ae9e354a", "changes": 3, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -31,16 +31,13 @@\n import java.util.concurrent.Executor;\n import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n import java.util.zip.GZIPOutputStream;\n \n import org.apache.log4j.helpers.CountingQuietWriter;\n import org.apache.log4j.helpers.LogLog;\n import org.apache.log4j.helpers.OptionConverter;\n import org.apache.log4j.spi.LoggingEvent;\n \n-import org.apache.qpid.framing.FieldTable;\n-\n /**\n  * <p>CompositeRollingAppender combines RollingFileAppender and DailyRollingFileAppender<br> It can function as either\n  * or do both at the same time (making size based rolling files like RollingFileAppender until a data/time boundary is", "filename": "broker/src/main/java/org/apache/log4j/QpidCompositeRollingAppender.java"}, {"additions": 188, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/configuration/Configuration.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/configuration/Configuration.java", "sha": "40ff590a0a3098dfa007f98cc5269f374b6bd2cf", "changes": 188, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/configuration/Configuration.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,188 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ * \n+ */\n+package org.apache.qpid.configuration;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+\n+public class Configuration\n+{\n+    public static final String QPID_HOME = \"QPID_HOME\";\n+\n+    final String QPIDHOME = System.getProperty(QPID_HOME);\n+\n+    private static Logger _devlog = LoggerFactory.getLogger(Configuration.class);\n+\n+    public static final String DEFAULT_LOG_CONFIG_FILENAME = \"log4j.xml\";\n+    public static final String DEFAULT_CONFIG_FILE = \"etc/config.xml\";\n+\n+    protected final Options _options = new Options();\n+    protected CommandLine _commandLine;\n+    protected File _configFile;\n+\n+\n+    public Configuration()\n+    {\n+\n+    }\n+\n+    public void processCommandline(String[] args) throws InitException\n+    {\n+        try\n+        {\n+            _commandLine = new PosixParser().parse(_options, args);\n+        }\n+        catch (ParseException e)\n+        {\n+            throw new InitException(\"Unable to parse commmandline\", e);\n+        }\n+\n+        final File defaultConfigFile = new File(QPIDHOME, DEFAULT_CONFIG_FILE);\n+        setConfig(new File(_commandLine.getOptionValue(\"c\", defaultConfigFile.getPath())));\n+    }\n+\n+    public void setConfig(File file)\n+    {\n+        _configFile = file;\n+    }\n+\n+    /**\n+     * @param option The option to set.\n+     */\n+    public void setOption(Option option)\n+    {\n+        _options.addOption(option);\n+    }\n+\n+    /**\n+     * getOptionValue from the configuration\n+     * @param option variable argument, first string is option to get, second if present is the default value.\n+     * @return the String for the given option or null if not present (if default value not specified)\n+     */\n+    public String getOptionValue(String... option)\n+    {\n+        if (option.length == 1)\n+        {\n+            return _commandLine.getOptionValue(option[0]);\n+        }\n+        else if (option.length == 2)\n+        {\n+            return _commandLine.getOptionValue(option[0], option[1]);\n+        }\n+        return null;\n+    }\n+\n+    public void loadConfig(File file) throws InitException\n+    {\n+        setConfig(file);\n+        loadConfig();\n+    }\n+\n+    private void loadConfig() throws InitException\n+    {\n+        if (!_configFile.exists())\n+        {\n+            String error = \"File \" + _configFile + \" could not be found. Check the file exists and is readable.\";\n+\n+            if (QPIDHOME == null)\n+            {\n+                error = error + \"\\nNote: \" + QPID_HOME + \" is not set.\";\n+            }\n+\n+            throw new InitException(error, null);\n+        }\n+        else\n+        {\n+            _devlog.debug(\"Using configuration file \" + _configFile.getAbsolutePath());\n+        }\n+\n+//        String logConfig = _commandLine.getOptionValue(\"l\");\n+//        String logWatchConfig = _commandLine.getOptionValue(\"w\", \"0\");\n+//        if (logConfig != null)\n+//        {\n+//            File logConfigFile = new File(logConfig);\n+//            configureLogging(logConfigFile, logWatchConfig);\n+//        }\n+//        else\n+//        {\n+//            File configFileDirectory = _configFile.getParentFile();\n+//            File logConfigFile = new File(configFileDirectory, DEFAULT_LOG_CONFIG_FILENAME);\n+//            configureLogging(logConfigFile, logWatchConfig);\n+//        }\n+    }\n+\n+\n+//    private void configureLogging(File logConfigFile, String logWatchConfig)\n+//    {\n+//        int logWatchTime = 0;\n+//        try\n+//        {\n+//            logWatchTime = Integer.parseInt(logWatchConfig);\n+//        }\n+//        catch (NumberFormatException e)\n+//        {\n+//            _devlog.error(\"Log watch configuration value of \" + logWatchConfig + \" is invalid. Must be \"\n+//                          + \"a non-negative integer. Using default of zero (no watching configured\");\n+//        }\n+//\n+//        if (logConfigFile.exists() && logConfigFile.canRead())\n+//        {\n+//            _devlog.info(\"Configuring logger using configuration file \" + logConfigFile.getAbsolutePath());\n+//            if (logWatchTime > 0)\n+//            {\n+//                _devlog.info(\"log file \" + logConfigFile.getAbsolutePath() + \" will be checked for changes every \"\n+//                             + logWatchTime + \" seconds\");\n+//                // log4j expects the watch interval in milliseconds\n+//                DOMConfigurator.configureAndWatch(logConfigFile.getAbsolutePath(), logWatchTime * 1000);\n+//            }\n+//            else\n+//            {\n+//                DOMConfigurator.configure(logConfigFile.getAbsolutePath());\n+//            }\n+//        }\n+//        else\n+//        {\n+//            System.err.println(\"Logging configuration error: unable to read file \" + logConfigFile.getAbsolutePath());\n+//            System.err.println(\"Using basic log4j configuration\");\n+//            BasicConfigurator.configure();\n+//        }\n+//    }\n+\n+    public File getConfigFile()\n+    {\n+        return _configFile;\n+    }\n+\n+\n+    public class InitException extends Exception\n+    {\n+        InitException(String msg, Throwable cause)\n+        {\n+            super(msg, cause);\n+        }\n+    }\n+}\n\\ No newline at end of file", "filename": "broker/src/main/java/org/apache/qpid/configuration/Configuration.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/AMQChannel.java", "sha": "7f14946834ac3147265e87dc65f819ccd7312d37", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/AMQChannel.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -582,9 +582,9 @@ public void resend(final boolean requeue) throws AMQException\n         final List<UnacknowledgedMessage> msgToRequeue = new LinkedList<UnacknowledgedMessage>();\n         final List<UnacknowledgedMessage> msgToResend = new LinkedList<UnacknowledgedMessage>();\n \n-        if (_log.isInfoEnabled())\n+        if (_log.isDebugEnabled())\n         {\n-            _log.info(\"unacked map Size:\" + _unacknowledgedMessageMap.size());\n+            _log.debug(\"unacked map Size:\" + _unacknowledgedMessageMap.size());\n         }\n \n         // Process the Unacked-Map.\n@@ -640,15 +640,15 @@ public void visitComplete()\n             });\n \n         // Process Messages to Resend\n-        if (_log.isInfoEnabled())\n+        if (_log.isDebugEnabled())\n         {\n             if (!msgToResend.isEmpty())\n             {\n-                _log.info(\"Preparing (\" + msgToResend.size() + \") message to resend.\");\n+                _log.debug(\"Preparing (\" + msgToResend.size() + \") message to resend.\");\n             }\n             else\n             {\n-                _log.info(\"No message to resend.\");\n+                _log.debug(\"No message to resend.\");\n             }\n         }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/AMQChannel.java"}, {"additions": 54, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/Main.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/Main.java", "sha": "dd6546585f3a3e7cb1be5b8b01e59bcab3bd4c64", "changes": 56, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/Main.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -34,6 +34,7 @@\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.log4j.BasicConfigurator;\n import org.apache.log4j.Logger;\n@@ -48,18 +49,27 @@\n import org.apache.qpid.framing.ProtocolVersion;\n import org.apache.qpid.pool.ReadWriteThreadModel;\n import org.apache.qpid.server.configuration.VirtualHostConfiguration;\n+import org.apache.qpid.server.management.JMXManagedObjectRegistry;\n import org.apache.qpid.server.protocol.AMQPFastProtocolHandler;\n import org.apache.qpid.server.protocol.AMQPProtocolProvider;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.registry.ConfigurationFileApplicationRegistry;\n import org.apache.qpid.server.transport.ConnectorConfiguration;\n import org.apache.qpid.url.URLSyntaxException;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.net.BindException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.Collection;\n+import java.util.List;\n+\n /**\n  * Main entry point for AMQPD.\n  *\n  */\n-@SuppressWarnings({ \"AccessStaticViaInstance\" })\n+@SuppressWarnings({\"AccessStaticViaInstance\"})\n public class Main\n {\n     /** Used for debugging. */\n@@ -133,6 +143,12 @@ protected void setOptions(Options options)\n             OptionBuilder.withArgName(\"port\").hasArg()\n                          .withDescription(\"listen on the specified port. Overrides any value in the config file\")\n                          .withLongOpt(\"port\").create(\"p\");\n+        Option mport =\n+                OptionBuilder.withArgName(\"mport\").hasArg()\n+                        .withDescription(\"listen on the specified management port. Overrides any value in the config file\")\n+                        .withLongOpt(\"mport\").create(\"m\");\n+\n+\n         Option bind =\n             OptionBuilder.withArgName(\"bind\").hasArg()\n                          .withDescription(\"bind to the specified address. Overrides any value in the config file\")\n@@ -153,6 +169,7 @@ protected void setOptions(Options options)\n         options.addOption(logconfig);\n         options.addOption(logwatchconfig);\n         options.addOption(port);\n+        options.addOption(mport);\n         options.addOption(bind);\n     }\n \n@@ -203,15 +220,19 @@ else if (commandLine.hasOption(\"v\"))\n             catch (InitException e)\n             {\n                 System.out.println(e.getMessage());\n+                _brokerLogger.error(\"Initialisation Error : \" + e.getMessage());\n+\n             }\n             catch (ConfigurationException e)\n             {\n                 System.out.println(\"Error configuring message broker: \" + e);\n+                _brokerLogger.error(\"Error configuring message broker: \" + e);\n                 e.printStackTrace();\n             }\n             catch (Exception e)\n             {\n                 System.out.println(\"Error intialising message broker: \" + e);\n+                _brokerLogger.error(\"Error intialising message broker: \" + e);\n                 e.printStackTrace();\n             }\n         }\n@@ -260,7 +281,15 @@ protected void startup() throws InitException, ConfigurationException, Exception\n             configureLogging(logConfigFile, logWatchConfig);\n         }\n \n-        ApplicationRegistry.initialise(new ConfigurationFileApplicationRegistry(configFile));\n+        ConfigurationFileApplicationRegistry config = new ConfigurationFileApplicationRegistry(configFile);\n+\n+\n+        updateManagementPort(config.getConfiguration(), commandLine.getOptionValue(\"m\"));\n+\n+\n+\n+        ApplicationRegistry.initialise(config);\n+\n \n         // fixme .. use QpidProperties.getVersionString when we have fixed the classpath issues\n         // that are causing the broker build to pick up the wrong properties file and hence say\n@@ -318,6 +347,29 @@ protected void startup() throws InitException, ConfigurationException, Exception\n         bind(port, connectorConfig);\n     }\n \n+    /**\n+     * Update the configuration data with the management port.\n+     * @param configuration\n+     * @param managementPort The string from the command line\n+     */\n+    private void updateManagementPort(Configuration configuration, String managementPort)\n+    {\n+        if (managementPort != null)\n+        {\n+            int mport;\n+            int defaultMPort = configuration.getInt(JMXManagedObjectRegistry.MANAGEMENT_PORT_CONFIG_PATH);\n+            try\n+            {\n+                mport = Integer.parseInt(managementPort);\n+                configuration.setProperty(JMXManagedObjectRegistry.MANAGEMENT_PORT_CONFIG_PATH, mport);\n+            }\n+            catch (NumberFormatException e)\n+            {\n+                _logger.warn(\"Invalid management port: \" + managementPort + \" will use default:\" + defaultMPort, e);\n+            }\n+        }\n+    }\n+\n     protected void setupVirtualHosts(String configFileParent, String configFilePath)\n         throws ConfigurationException, AMQException, URLSyntaxException\n     {", "filename": "broker/src/main/java/org/apache/qpid/server/Main.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java", "sha": "9ebb8933622d6f6b12290efbd707384a85b28762", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -38,9 +38,13 @@\n import org.apache.qpid.server.management.ManagedObject;\n import org.apache.qpid.server.management.ManagedObjectRegistry;\n import org.apache.qpid.server.queue.QueueRegistry;\n+import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n+import java.util.List;\n+import java.util.Map;\n+\n public abstract class AbstractExchange implements Exchange, Managable\n {\n     private AMQShortString _name;\n@@ -189,6 +193,8 @@ public void close() throws AMQException\n         }\n     }\n \n+    abstract public Map<AMQShortString, List<AMQQueue>> getBindings();\n+\n     public String toString()\n     {\n         return getClass().getName() + \"[\" + getName() +\"]\";", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/AbstractExchange.java"}, {"additions": 13, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/DefaultExchangeRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/DefaultExchangeRegistry.java", "sha": "377a73dd31646763ec9a0e33104bd90febf6b38e", "changes": 19, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/DefaultExchangeRegistry.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,18 +20,20 @@\n  */\n package org.apache.qpid.server.exchange;\n \n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-\n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.protocol.ExchangeInitialiser;\n import org.apache.qpid.server.queue.AMQMessage;\n+import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.messageStore.MessageStore;\n import org.apache.qpid.server.exception.InternalErrorException;\n \n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n public class DefaultExchangeRegistry implements ExchangeRegistry\n {\n     private static final Logger _log = Logger.getLogger(DefaultExchangeRegistry.class);\n@@ -64,7 +66,7 @@ public MessageStore getMessageStore()\n     public void registerExchange(Exchange exchange) throws AMQException\n     {\n         _exchangeMap.put(exchange.getName(), exchange);\n-        if(exchange.isDurable())\n+        if (exchange.isDurable())\n         {\n             try\n             {\n@@ -86,13 +88,18 @@ public Exchange getDefaultExchange()\n         return _defaultExchange;\n     }\n \n+    public Collection<AMQShortString> getExchangeNames()\n+    {\n+        return _exchangeMap.keySet();\n+    }\n+\n     public void unregisterExchange(AMQShortString name, boolean inUse) throws AMQException\n     {\n         // TODO: check inUse argument\n         Exchange e = _exchangeMap.remove(name);\n         if (e != null)\n         {\n-            if(e.isDurable())\n+            if (e.isDurable())\n             {\n                 try\n                 {\n@@ -112,7 +119,7 @@ public void unregisterExchange(AMQShortString name, boolean inUse) throws AMQExc\n \n     public Exchange getExchange(AMQShortString name)\n     {\n-        if((name == null) || name.length() == 0)\n+        if ((name == null) || name.length() == 0)\n         {\n             return getDefaultExchange();\n         }", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/DefaultExchangeRegistry.java"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java", "sha": "c24f9a37e155822e41bb3e728cf16945ef38147e", "changes": 11, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -26,22 +26,16 @@\n \n import javax.management.JMException;\n import javax.management.MBeanException;\n-import javax.management.openmbean.ArrayType;\n import javax.management.openmbean.CompositeData;\n import javax.management.openmbean.CompositeDataSupport;\n-import javax.management.openmbean.CompositeType;\n import javax.management.openmbean.OpenDataException;\n-import javax.management.openmbean.OpenType;\n-import javax.management.openmbean.SimpleType;\n import javax.management.openmbean.TabularData;\n import javax.management.openmbean.TabularDataSupport;\n-import javax.management.openmbean.TabularType;\n \n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.BasicPublishBody;\n import org.apache.qpid.framing.FieldTable;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n import org.apache.qpid.server.management.MBeanConstructor;\n@@ -222,4 +216,9 @@ public boolean hasBindings() throws AMQException\n     {\n         return !_index.getBindingsMap().isEmpty();\n     }\n+\n+    public Map<AMQShortString, List<AMQQueue>> getBindings()\n+    {\n+        return _index.getBindingsMap();\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/DestNameExchange.java"}, {"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/DestWildExchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/DestWildExchange.java", "sha": "e1a3a24d3e26b5d41658b6e2916fc6c2b9d1c1cb", "changes": 21, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/DestWildExchange.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -21,11 +21,9 @@\n package org.apache.qpid.server.exchange;\n \n import org.apache.log4j.Logger;\n-\n import org.apache.qpid.AMQException;\n import org.apache.qpid.exchange.ExchangeDefaults;\n import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.BasicPublishBody;\n import org.apache.qpid.framing.FieldTable;\n import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n import org.apache.qpid.server.management.MBeanConstructor;\n@@ -35,17 +33,11 @@\n \n import javax.management.JMException;\n import javax.management.MBeanException;\n-import javax.management.openmbean.ArrayType;\n import javax.management.openmbean.CompositeData;\n import javax.management.openmbean.CompositeDataSupport;\n-import javax.management.openmbean.CompositeType;\n import javax.management.openmbean.OpenDataException;\n-import javax.management.openmbean.OpenType;\n-import javax.management.openmbean.SimpleType;\n import javax.management.openmbean.TabularData;\n import javax.management.openmbean.TabularDataSupport;\n-import javax.management.openmbean.TabularType;\n-\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n@@ -59,7 +51,7 @@\n     private static final Logger _logger = Logger.getLogger(DestWildExchange.class);\n \n     private ConcurrentHashMap<AMQShortString, List<AMQQueue>> _routingKey2queues =\n-        new ConcurrentHashMap<AMQShortString, List<AMQQueue>>();\n+            new ConcurrentHashMap<AMQShortString, List<AMQQueue>>();\n     // private ConcurrentHashMap<AMQShortString, AMQQueue> _routingKey2queue = new ConcurrentHashMap<AMQShortString, AMQQueue>();\n     private static final String TOPIC_SEPARATOR = \".\";\n     private static final String AMQP_STAR = \"*\";\n@@ -92,7 +84,7 @@ public TabularData bindings() throws OpenDataException\n                     queueList.add(q.getName().toString());\n                 }\n \n-                Object[] bindingItemValues = { key.toString(), queueList.toArray(new String[0]) };\n+                Object[] bindingItemValues = {key.toString(), queueList.toArray(new String[0])};\n                 CompositeData bindingData = new CompositeDataSupport(_bindingDataType, _bindingItemNames, bindingItemValues);\n                 _bindingList.put(bindingData);\n             }\n@@ -311,6 +303,11 @@ protected ExchangeMBean createMBean() throws AMQException\n         }\n     }\n \n+    public Map<AMQShortString, List<AMQQueue>> getBindings()\n+    {\n+        return _routingKey2queues;\n+    }\n+\n     private List<AMQQueue> getMatchedQueues(AMQShortString routingKey)\n     {\n         List<AMQQueue> list = new LinkedList<AMQQueue>();\n@@ -358,8 +355,8 @@ protected ExchangeMBean createMBean() throws AMQException\n                         if (queueList.size() > (depth + queueskip))\n                         { // a hash and it is the last entry\n                             matching =\n-                                queueList.get(depth + queueskip).equals(AMQP_HASH)\n-                                && (queueList.size() == (depth + queueskip + 1));\n+                                    queueList.get(depth + queueskip).equals(AMQP_HASH)\n+                                    && (queueList.size() == (depth + queueskip + 1));\n                         }\n                     }\n                     else if (routingkeyList.size() > (depth + routingskip))", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/DestWildExchange.java"}, {"additions": 23, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/Exchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/Exchange.java", "sha": "37cd85a8f8efe3077f878a44108403475f458088", "changes": 28, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/Exchange.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -27,9 +27,13 @@\n import org.apache.qpid.server.queue.AMQQueue;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n+import java.util.List;\n+import java.util.Map;\n+\n public interface Exchange\n {\n     AMQShortString getName();\n+\n     AMQShortString getType();\n \n     void initialise(VirtualHost host, AMQShortString name, boolean durable, int ticket, boolean autoDelete) throws AMQException;\n@@ -51,29 +55,43 @@\n \n     void route(AMQMessage message) throws AMQException;\n \n+\n+    /**\n+     * Determines whether a message would be isBound to a particular queue using a specific routing key and arguments\n+     * @param routingKey\n+     * @param arguments\n+     * @param queue\n+     * @return\n+     * @throws AMQException\n+     */\n+    boolean isBound(AMQShortString routingKey, FieldTable arguments, AMQQueue queue);\n+\n     /**\n      * Determines whether a message would be isBound to a particular queue using a specific routing key\n      * @param routingKey\n      * @param queue\n      * @return\n      * @throws AMQException\n      */\n-    boolean isBound(AMQShortString routingKey, AMQQueue queue) throws AMQException;\n+    boolean isBound(AMQShortString routingKey, AMQQueue queue);\n \n     /**\n-     * Determines whether a message is routing to any queue using a specific routing key\n+     * Determines whether a message is routing to any queue using a specific _routing key\n      * @param routingKey\n      * @return\n      * @throws AMQException\n      */\n-    boolean isBound(AMQShortString routingKey) throws AMQException;\n+    boolean isBound(AMQShortString routingKey);\n \n-    boolean isBound(AMQQueue queue) throws AMQException;\n+    boolean isBound(AMQQueue queue);\n \n     /**\n      * Returns true if this exchange has at least one binding associated with it.\n      * @return\n      * @throws AMQException\n      */\n-    boolean hasBindings() throws AMQException;\n+    boolean hasBindings();\n+\n+    Map<AMQShortString, List<AMQQueue>> getBindings();\n+\n }", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/Exchange.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/ExchangeRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/ExchangeRegistry.java", "sha": "fe3b19e74e70f8b918e667fc5b8fa19704a5a12a", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/ExchangeRegistry.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -23,6 +23,8 @@\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n \n+import java.util.Collection;\n+\n \n public interface ExchangeRegistry extends MessageRouter\n {\n@@ -43,5 +45,7 @@\n \n     Exchange getDefaultExchange();\n \n+    Collection<AMQShortString> getExchangeNames();\n+\n     void initialise() throws AMQException;\n }", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/ExchangeRegistry.java"}, {"additions": 17, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java", "sha": "1a705248c19311260bfb50286b9c576c0957c184", "changes": 29, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -21,7 +21,6 @@\n package org.apache.qpid.server.exchange;\r\n \r\n import org.apache.log4j.Logger;\r\n-\r\n import org.apache.qpid.AMQException;\r\n import org.apache.qpid.exchange.ExchangeDefaults;\r\n import org.apache.qpid.framing.AMQShortString;\r\n@@ -34,17 +33,13 @@\n \r\n import javax.management.JMException;\r\n import javax.management.MBeanException;\r\n-import javax.management.openmbean.ArrayType;\r\n import javax.management.openmbean.CompositeData;\r\n import javax.management.openmbean.CompositeDataSupport;\r\n-import javax.management.openmbean.CompositeType;\r\n import javax.management.openmbean.OpenDataException;\r\n-import javax.management.openmbean.OpenType;\r\n-import javax.management.openmbean.SimpleType;\r\n import javax.management.openmbean.TabularData;\r\n import javax.management.openmbean.TabularDataSupport;\r\n-import javax.management.openmbean.TabularType;\r\n-\r\n+import java.util.List;\r\n+import java.util.Map;\r\n import java.util.concurrent.CopyOnWriteArraySet;\r\n \r\n public class FanoutExchange extends AbstractExchange\r\n@@ -79,7 +74,7 @@ public TabularData bindings() throws OpenDataException\n             {\r\n                 String queueName = queue.getName().toString();\r\n \r\n-                Object[] bindingItemValues = { queueName, new String[] { queueName } };\r\n+                Object[] bindingItemValues = {queueName, new String[]{queueName}};\r\n                 CompositeData bindingData = new CompositeDataSupport(_bindingDataType, _bindingItemNames, bindingItemValues);\r\n                 _bindingList.put(bindingData);\r\n             }\r\n@@ -120,6 +115,11 @@ protected ExchangeMBean createMBean() throws AMQException\n         }\r\n     }\r\n \r\n+    public Map<AMQShortString, List<AMQQueue>> getBindings()\r\n+    {\r\n+        return null;\r\n+    }\r\n+\r\n     public AMQShortString getType()\r\n     {\r\n         return ExchangeDefaults.FANOUT_EXCHANGE_CLASS;\r\n@@ -181,24 +181,29 @@ public void route(AMQMessage payload) throws AMQException\n         }\r\n     }\r\n \r\n-    public boolean isBound(AMQShortString routingKey, AMQQueue queue) throws AMQException\r\n+    public boolean isBound(AMQShortString routingKey, FieldTable arguments, AMQQueue queue)\r\n+    {\r\n+        return isBound(routingKey, queue);\r\n+    }\r\n+\r\n+    public boolean isBound(AMQShortString routingKey, AMQQueue queue)\r\n     {\r\n         return _queues.contains(queue);\r\n     }\r\n \r\n-    public boolean isBound(AMQShortString routingKey) throws AMQException\r\n+    public boolean isBound(AMQShortString routingKey)\r\n     {\r\n \r\n         return (_queues != null) && !_queues.isEmpty();\r\n     }\r\n \r\n-    public boolean isBound(AMQQueue queue) throws AMQException\r\n+    public boolean isBound(AMQQueue queue)\r\n     {\r\n \r\n         return _queues.contains(queue);\r\n     }\r\n \r\n-    public boolean hasBindings() throws AMQException\r\n+    public boolean hasBindings()\r\n     {\r\n         return !_queues.isEmpty();\r\n     }\r", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/FanoutExchange.java"}, {"additions": 36, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/HeadersExchange.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/exchange/HeadersExchange.java", "sha": "9bb1ee6a62b2c1cc59a9fdb8ca69524d81cb8c2b", "changes": 61, "status": "modified", "deletions": 25, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/exchange/HeadersExchange.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,23 +20,6 @@\n  */\n package org.apache.qpid.server.exchange;\n \n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-\n-import javax.management.JMException;\n-import javax.management.openmbean.ArrayType;\n-import javax.management.openmbean.CompositeData;\n-import javax.management.openmbean.CompositeDataSupport;\n-import javax.management.openmbean.CompositeType;\n-import javax.management.openmbean.OpenDataException;\n-import javax.management.openmbean.OpenType;\n-import javax.management.openmbean.SimpleType;\n-import javax.management.openmbean.TabularData;\n-import javax.management.openmbean.TabularDataSupport;\n-import javax.management.openmbean.TabularType;\n-\n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.exchange.ExchangeDefaults;\n@@ -50,6 +33,23 @@\n import org.apache.qpid.server.queue.AMQMessage;\n import org.apache.qpid.server.queue.AMQQueue;\n \n+import javax.management.JMException;\n+import javax.management.openmbean.ArrayType;\n+import javax.management.openmbean.CompositeData;\n+import javax.management.openmbean.CompositeDataSupport;\n+import javax.management.openmbean.CompositeType;\n+import javax.management.openmbean.OpenDataException;\n+import javax.management.openmbean.OpenType;\n+import javax.management.openmbean.SimpleType;\n+import javax.management.openmbean.TabularData;\n+import javax.management.openmbean.TabularDataSupport;\n+import javax.management.openmbean.TabularType;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n /**\n  * An exchange that binds queues based on a set of required headers and header values\n  * and routes messages to these queues by matching the headers of the message against\n@@ -91,13 +91,13 @@\n     private final class HeadersExchangeMBean extends ExchangeMBean\n     {\n         @MBeanConstructor(\"Creates an MBean for AMQ Headers exchange\")\n-        public HeadersExchangeMBean()  throws JMException\n+        public HeadersExchangeMBean() throws JMException\n         {\n             super();\n             _exchangeType = \"headers\";\n             init();\n         }\n-        \n+\n         /**\n          * initialises the OpenType objects.\n          */\n@@ -113,7 +113,7 @@ protected void init() throws OpenDataException\n             _bindingDataType = new CompositeType(\"Exchange Binding\", \"Queue name and header bindings\",\n                                                  _bindingItemNames, _bindingItemNames, _bindingItemTypes);\n             _bindinglistDataType = new TabularType(\"Exchange Bindings\", \"List of exchange bindings for \" + getName(),\n-                                                 _bindingDataType, _bindingItemIndexNames);\n+                                                   _bindingDataType, _bindingItemIndexNames);\n         }\n \n         public TabularData bindings() throws OpenDataException\n@@ -169,7 +169,7 @@ public void createNewBinding(String queueName, String binding) throws JMExceptio\n                 throw new JMException(\"Queue \\\"\" + queueName + \"\\\" is not registered with the exchange.\");\n             }\n \n-            String[] bindings  = binding.split(\",\");\n+            String[] bindings = binding.split(\",\");\n             FieldTable bindingMap = new FieldTable();\n             for (int i = 0; i < bindings.length; i++)\n             {\n@@ -241,17 +241,23 @@ public void route(AMQMessage payload) throws AMQException\n         }\n     }\n \n-    public boolean isBound(AMQShortString routingKey, AMQQueue queue) throws AMQException\n+    public boolean isBound(AMQShortString routingKey, FieldTable arguments, AMQQueue queue)\n+    {\n+        //fixme isBound here should take the arguements in to consideration.\n+        return isBound(routingKey, queue);\n+    }\n+\n+    public boolean isBound(AMQShortString routingKey, AMQQueue queue)\n     {\n         return isBound(queue);\n     }\n \n-    public boolean isBound(AMQShortString routingKey) throws AMQException\n+    public boolean isBound(AMQShortString routingKey)\n     {\n         return hasBindings();\n     }\n \n-    public boolean isBound(AMQQueue queue) throws AMQException\n+    public boolean isBound(AMQQueue queue)\n     {\n         for (Registration r : _bindings)\n         {\n@@ -263,7 +269,7 @@ public boolean isBound(AMQQueue queue) throws AMQException\n         return false;\n     }\n \n-    public boolean hasBindings() throws AMQException\n+    public boolean hasBindings()\n     {\n         return !_bindings.isEmpty();\n     }\n@@ -288,6 +294,11 @@ protected ExchangeMBean createMBean() throws AMQException\n         }\n     }\n \n+    public Map<AMQShortString, List<AMQQueue>> getBindings()\n+    {\n+        return null;\n+    }\n+\n     private static class Registration\n     {\n         private final HeadersBinding binding;", "filename": "broker/src/main/java/org/apache/qpid/server/exchange/HeadersExchange.java"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/BasicConsumeMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/BasicConsumeMethodHandler.java", "sha": "ab4f2c4e64aafe921edbbb475fddb2b4cfdf5ce6", "changes": 18, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/BasicConsumeMethodHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -100,6 +100,12 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicCon\n             }\n             else\n             {\n+\n+                if (body.consumerTag != null)\n+                {\n+                    body.consumerTag = body.consumerTag.intern();\n+                }\n+\n                 try\n                 {\n                     AMQShortString consumerTag = channel.subscribeToQueue(body.consumerTag, queue, session, !body.noAck,\n@@ -138,15 +144,15 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicCon\n                     // If the above doesn't work then perhaps this is wrong too.\n //                    throw body.getConnectionException(AMQConstant.NOT_ALLOWED,\n //                                                      \"Non-unique consumer tag, '\" + body.consumerTag + \"'\");\n-                                        // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)\n+                    // AMQP version change: Hardwire the version to 0-8 (major=8, minor=0)\n                     // TODO: Connect this to the session version obtained from ProtocolInitiation for this session.\n                     // Be aware of possible changes to parameter order as versions change.\n                     session.writeFrame(ConnectionCloseBody.createAMQFrame(channelId,\n-                        (byte)8, (byte)0,\t// AMQP version (major, minor)\n-                        BasicConsumeBody.getClazz((byte)8, (byte)0),\t// classId\n-                        BasicConsumeBody.getMethod((byte)8, (byte)0),\t// methodId\n-                        AMQConstant.NOT_ALLOWED.getCode(),\t// replyCode\n-                        msg));\t// replyText\n+                                                                          (byte) 8, (byte) 0,    // AMQP version (major, minor)\n+                                                                          BasicConsumeBody.getClazz((byte) 8, (byte) 0),    // classId\n+                                                                          BasicConsumeBody.getMethod((byte) 8, (byte) 0),    // methodId\n+                                                                          AMQConstant.NOT_ALLOWED.getCode(),    // replyCode\n+                                                                          msg));    // replyText\n                 }\n                 catch (ExistingExclusiveSubscriptionException e)\n                 {", "filename": "broker/src/main/java/org/apache/qpid/server/handler/BasicConsumeMethodHandler.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/BasicPublishMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/BasicPublishMethodHandler.java", "sha": "68d4483df3640c85c6112a423caa5ca25a90e820", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/BasicPublishMethodHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -67,6 +67,10 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicPub\n             body.exchange = ExchangeDefaults.DEFAULT_EXCHANGE_NAME;\n \n         }\n+        else\n+        {\n+            body.exchange = body.exchange.intern();\n+        }\n         VirtualHost vHost = session.getVirtualHost();\n         Exchange e = vHost.getExchangeRegistry().getExchange(body.exchange);\n         // if the exchange does not exist we raise a channel exception\n@@ -86,10 +90,16 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<BasicPub\n                 throw body.getChannelNotFoundException(evt.getChannelId());\n             }\n \n+            if(body.routingKey != null)\n+            {\n+                body.routingKey = body.routingKey.intern();\n+            }\n+            \n             MessagePublishInfo info = session.getRegistry().getProtocolVersionMethodConverter().convertToInfo(body);\n             channel.setPublishFrame(info, session);\n         }\n     }\n }\n \n \n+", "filename": "broker/src/main/java/org/apache/qpid/server/handler/BasicPublishMethodHandler.java"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java", "sha": "cd0d0e3b7679d286a4cc98647b1ce43e36e121f2", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -35,6 +35,7 @@\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n import org.apache.qpid.server.protocol.HeartbeatConfig;\n+import org.apache.qpid.server.protocol.AMQMinaProtocolSession;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.security.auth.manager.AuthenticationManager;\n import org.apache.qpid.server.security.auth.AuthenticationResult;\n@@ -72,7 +73,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Connecti\n \n         SaslServer ss = null;\n         try\n-        {\n+        {                       \n             ss = authMgr.createSaslServer(String.valueOf(body.mechanism), session.getLocalFQDN());\n \n             if (ss == null)", "filename": "broker/src/main/java/org/apache/qpid/server/handler/ConnectionStartOkMethodHandler.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/ExchangeBoundHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/ExchangeBoundHandler.java", "sha": "0ff19bdf9ea2c1bf638c135d834ee53f7a0112a6", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/ExchangeBoundHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.handler;", "filename": "broker/src/main/java/org/apache/qpid/server/handler/ExchangeBoundHandler.java"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/ExchangeDeclareHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/ExchangeDeclareHandler.java", "sha": "f0f6fde08c3a95fa2b72cf61a77889e616fbbd0a", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/ExchangeDeclareHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -83,7 +83,9 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<Exchange\n                     try\n                     {\n \n-                    exchange = exchangeFactory.createExchange(body.exchange, body.type, body.durable,\n+                    exchange = exchangeFactory.createExchange(body.exchange == null ? null : body.exchange.intern(),\n+                                                              body.type == null ? null : body.type.intern(), \n+                                                              body.durable,\n                                                               body.passive, body.ticket);\n                     exchangeRegistry.registerExchange(exchange);\n                     }", "filename": "broker/src/main/java/org/apache/qpid/server/handler/ExchangeDeclareHandler.java"}, {"additions": 13, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/QueueBindHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/QueueBindHandler.java", "sha": "3e6806983821d76dddf5d8a59dad5bd31d17f0bd", "changes": 17, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/QueueBindHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -28,6 +28,7 @@\n import org.apache.qpid.framing.QueueBindOkBody;\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.protocol.AMQMethodEvent;\n+import org.apache.qpid.server.AMQChannel;\n import org.apache.qpid.server.exchange.Exchange;\n import org.apache.qpid.server.exchange.ExchangeRegistry;\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n@@ -36,7 +37,6 @@\n import org.apache.qpid.server.state.AMQStateManager;\n import org.apache.qpid.server.state.StateAwareMethodListener;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n-import org.apache.qpid.server.AMQChannel;\n \n public class QueueBindHandler implements StateAwareMethodListener<QueueBindBody>\n {\n@@ -77,7 +77,7 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<QueueBin\n             {\n                 throw body.getChannelException(AMQConstant.NOT_FOUND, \"No default queue defined on channel and queue was null\");\n             }\n-            \n+\n             if (body.routingKey == null)\n             {\n                 body.routingKey = queue.getName();\n@@ -97,9 +97,18 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<QueueBin\n         {\n             throw body.getChannelException(AMQConstant.NOT_FOUND, \"Exchange \" + body.exchange + \" does not exist.\");\n         }\n+\n+        if (body.routingKey != null)\n+        {\n+            body.routingKey = body.routingKey.intern();\n+        }\n+\n         try\n-        {            \n-            queue.bind(body.routingKey, body.arguments, exch);\n+        {\n+            if (!exch.isBound(body.routingKey, body.arguments, queue))\n+            {\n+                queue.bind(body.routingKey, body.arguments, exch);\n+            }\n         }\n         catch (AMQInvalidRoutingKeyException rke)\n         {", "filename": "broker/src/main/java/org/apache/qpid/server/handler/QueueBindHandler.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java", "sha": "28967841a25b079693e3e7f8284b90b670ad7d37", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -93,8 +93,15 @@ public void methodReceived(AMQStateManager stateManager, AMQMethodEvent<QueueDec\n         synchronized (queueRegistry)\n         {\n \n+\n+\n             if (((queue = queueRegistry.getQueue(body.queue)) == null))\n             {\n+                if(body.queue != null)\n+                {\n+                    body.queue = body.queue.intern();\n+                }\n+\n                 if (body.passive)\n                 {\n                     String msg = \"Queue: \" + body.queue + \" not found on VirtualHost(\" + virtualHost + \").\";", "filename": "broker/src/main/java/org/apache/qpid/server/handler/QueueDeclareHandler.java"}, {"additions": 22, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java", "sha": "4caae2b26f74b05c2169b1116aa8c4674e5339e7", "changes": 44, "status": "modified", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,14 +20,14 @@\n  */\n package org.apache.qpid.server.management;\n \n-import java.io.IOException;\n-import java.lang.management.ManagementFactory;\n-import java.rmi.RemoteException;\n-import java.rmi.registry.LocateRegistry;\n-import java.rmi.registry.Registry;\n-import java.rmi.server.UnicastRemoteObject;\n-import java.util.HashMap;\n-import java.util.Map;\n+import org.apache.log4j.Logger;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.registry.IApplicationRegistry;\n+import org.apache.qpid.server.security.auth.database.Base64MD5PasswordFilePrincipalDatabase;\n+import org.apache.qpid.server.security.auth.database.PlainPasswordFilePrincipalDatabase;\n+import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n+import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5HashedInitialiser;\n \n import javax.management.JMException;\n import javax.management.MBeanServer;\n@@ -43,17 +43,14 @@\n import javax.security.auth.callback.UnsupportedCallbackException;\n import javax.security.auth.login.AccountNotFoundException;\n import javax.security.sasl.AuthorizeCallback;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.server.registry.ApplicationRegistry;\n-import org.apache.qpid.server.registry.IApplicationRegistry;\n-import org.apache.qpid.server.security.auth.database.PrincipalDatabase;\n-import org.apache.qpid.server.security.auth.database.Base64MD5PasswordFilePrincipalDatabase;\n-import org.apache.qpid.server.security.auth.database.PlainPasswordFilePrincipalDatabase;\n-import org.apache.qpid.server.security.auth.sasl.UsernamePrincipal;\n-import org.apache.qpid.server.security.auth.sasl.crammd5.CRAMMD5HashedInitialiser;\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.rmi.RemoteException;\n+import java.rmi.registry.LocateRegistry;\n+import java.rmi.registry.Registry;\n+import java.rmi.server.UnicastRemoteObject;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * This class starts up an MBeanserver. If out of the box agent is being used then there are no security features\n@@ -68,6 +65,9 @@\n     private final MBeanServer _mbeanServer;\n     private Registry _rmiRegistry;\n     private JMXServiceURL _jmxURL;\n+    \n+    public static final String MANAGEMENT_PORT_CONFIG_PATH = \"management.jmxport\";\n+    public static final int MANAGEMENT_PORT_DEFAULT = 8999;\n \n     public JMXManagedObjectRegistry() throws AMQException\n     {\n@@ -95,7 +95,7 @@ public void start() throws IOException\n         IApplicationRegistry appRegistry = ApplicationRegistry.getInstance();\n \n         boolean security = appRegistry.getConfiguration().getBoolean(\"management.security-enabled\", false);\n-        int port = appRegistry.getConfiguration().getInt(\"management.jmxport\", 8999);\n+        int port = appRegistry.getConfiguration().getInt(MANAGEMENT_PORT_CONFIG_PATH, MANAGEMENT_PORT_DEFAULT);\n \n         if (security)\n         {\n@@ -144,13 +144,13 @@ else if (db instanceof PlainPasswordFilePrincipalDatabase)\n             MBeanServerForwarder mbsf = MBeanInvocationHandlerImpl.newProxyInstance();\n             cs.setMBeanServerForwarder(mbsf);\n             cs.start();\n-            _log.warn(\"JMX: Started JMXConnector server with SASL\");\n+            _log.warn(\"JMX: Started JMXConnector server  on port '\" + port + \"' with SASL\");\n \n         }\n         else\n         {\n             startJMXConnectorServer(port);\n-            _log.warn(\"JMX: Started JMXConnector server with security disabled\");\n+            _log.warn(\"JMX: Started JMXConnector server on port '\" + port + \"' with security disabled\");\n         }\n     }\n ", "filename": "broker/src/main/java/org/apache/qpid/server/management/JMXManagedObjectRegistry.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java", "sha": "4fb260472d84709616c79a96a62da08e31029b2c", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.management;", "filename": "broker/src/main/java/org/apache/qpid/server/management/MBeanInvocationHandlerImpl.java"}, {"additions": 16, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/protocol/AMQPFastProtocolHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/protocol/AMQPFastProtocolHandler.java", "sha": "5c88edf86f97a146bc8b2887882415b7ea23dcf8", "changes": 28, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/protocol/AMQPFastProtocolHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -44,6 +44,9 @@\n import org.apache.qpid.server.transport.ConnectorConfiguration;\n import org.apache.qpid.ssl.SSLContextFactory;\n \n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+\n /**\n  * The protocol handler handles \"protocol events\" for all connections. The state\n  * associated with an individual connection is accessed through the protocol session.\n@@ -80,7 +83,7 @@ public void sessionCreated(IoSession protocolSession) throws Exception\n         final AMQCodecFactory codecFactory = new AMQCodecFactory(true);\n \n         createSession(protocolSession, _applicationRegistry, codecFactory);\n-        _logger.info(\"Protocol session created\");\n+        _logger.info(\"Protocol session created for:\" + protocolSession.getRemoteAddress());\n \n         final ProtocolCodecFilter pcf = new ProtocolCodecFilter(codecFactory);\n \n@@ -127,12 +130,12 @@ protected void createSession(IoSession session, IApplicationRegistry application\n \n     public void sessionOpened(IoSession protocolSession) throws Exception\n     {\n-        _logger.info(\"Session opened\");\n+        _logger.info(\"Session opened for:\" + protocolSession.getRemoteAddress());\n     }\n \n     public void sessionClosed(IoSession protocolSession) throws Exception\n     {\n-        _logger.info(\"Protocol Session closed\");\n+        _logger.info(\"Protocol Session closed for:\" + protocolSession.getRemoteAddress());\n         final AMQProtocolSession amqProtocolSession = AMQMinaProtocolSession.getAMQProtocolSession(protocolSession);\n         // fixme  -- this can be null\n         if (amqProtocolSession != null)\n@@ -143,7 +146,7 @@ public void sessionClosed(IoSession protocolSession) throws Exception\n \n     public void sessionIdle(IoSession session, IdleStatus status) throws Exception\n     {\n-        _logger.debug(\"Protocol Session [\" + this + \"] idle: \" + status);\n+        _logger.debug(\"Protocol Session [\" + this + \"] idle: \" + status + \" :for:\" + session.getRemoteAddress());\n         if (IdleStatus.WRITER_IDLE.equals(status))\n         {\n             // write heartbeat frame:\n@@ -167,7 +170,7 @@ public void exceptionCaught(IoSession protocolSession, Throwable throwable) thro\n \n             protocolSession.close();\n \n-            _logger.error(\"Error in protocol initiation \" + session + \": \" + throwable.getMessage(), throwable);\n+            _logger.error(\"Error in protocol initiation \" + session + \":\" + protocolSession.getRemoteAddress() + \" :\" + throwable.getMessage(), throwable);\n         }\n         else if (throwable instanceof IOException)\n         {\n@@ -178,13 +181,14 @@ else if (throwable instanceof IOException)\n             _logger.error(\"Exception caught in\" + session + \", closing session explictly: \" + throwable, throwable);\n \n             // Be aware of possible changes to parameter order as versions change.\n-            protocolSession.write(ConnectionCloseBody.createAMQFrame(0, session.getProtocolMajorVersion(),\n-                    session.getProtocolMinorVersion(), // AMQP version (major, minor)\n-                    0, // classId\n-                    0, // methodId\n-                    200, // replyCode\n-                    new AMQShortString(throwable.getMessage()) // replyText\n-                ));\n+            protocolSession.write(ConnectionCloseBody.createAMQFrame(0,\n+                                                                     session.getProtocolMajorVersion(),\n+                                                                     session.getProtocolMinorVersion(),    // AMQP version (major, minor)\n+                                                                     0,    // classId\n+                                                                     0,    // methodId\n+                                                                     200,    // replyCode\n+                                                                     new AMQShortString(throwable.getMessage())    // replyText\n+            ));\n             protocolSession.close();\n         }\n     }", "filename": "broker/src/main/java/org/apache/qpid/server/protocol/AMQPFastProtocolHandler.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java", "sha": "44634eb877cbdc4c905708b5c6771c91dd07513a", "changes": 16, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -53,6 +53,7 @@\n  */\n public class AMQMessage implements StorableMessage\n {\n+    /** Used for debugging purposes. */\n     private static final Logger _log = Logger.getLogger(AMQMessage.class);\n \n     // The ordered list of queues into which this message is enqueued.\n@@ -76,19 +77,16 @@\n \n     private AMQMessageHandle _messageHandle;\n \n-    // TODO: ideally this should be able to go into the transient message date - check this! (RG)\n+    /** Holds the transactional context in which this message is being processed. */\n     private TransactionalContext _txnContext;\n \n     /**\n-     * Flag to indicate whether message has been delivered to a consumer. Used in implementing return functionality for\n-     * messages published with the 'immediate' flag.\n+     * Flag to indicate whether this message has been delivered to a consumer. Used in implementing return functionality\n+     * for messages published with the 'immediate' flag.\n      */\n     private boolean _deliveredToConsumer;\n-    /**\n-     * We need to keep track of whether the message was 'immediate' as in extreme circumstances, when the\n-     * checkDelieveredToConsumer is called, the message may already have been received and acknowledged, and the body\n-     * removed from the store.\n-     */\n+\n+    /** Flag to indicate that this message requires 'immediate' delivery. */\n     private boolean _immediate;\n \n     // private Subscription _takenBySubcription;\n@@ -494,7 +492,7 @@ public boolean isAllContentReceived() throws AMQException\n      */\n     public AMQMessage takeReference()\n     {\n-        _referenceCount.incrementAndGet();\n+        incrementReference(); // _referenceCount.incrementAndGet();\n \n         return this;\n     }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/AMQMessage.java"}, {"additions": 215, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java", "sha": "0c2fd294d21cdfbe51369848aeec6ae4de5ccb81", "changes": 250, "status": "modified", "deletions": 35, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -33,7 +33,6 @@\n import javax.management.JMException;\n \n import org.apache.log4j.Logger;\n-\n import org.apache.qpid.AMQException;\n import org.apache.qpid.configuration.Configured;\n import org.apache.qpid.framing.AMQShortString;\n@@ -46,11 +45,11 @@\n import org.apache.qpid.server.messageStore.StorableMessage;\n import org.apache.qpid.server.messageStore.StorableQueue;\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n+import org.apache.qpid.server.store.MessageStore;\n import org.apache.qpid.server.store.StoreContext;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n import javax.management.JMException;\n-\n import java.text.MessageFormat;\n import java.util.List;\n import java.util.concurrent.CopyOnWriteArrayList;\n@@ -163,22 +162,22 @@ public int compareTo(Object o)\n     }\n \n     public AMQQueue(AMQShortString name, boolean durable, AMQShortString owner, boolean autoDelete, VirtualHost virtualHost)\n-        throws AMQException\n+            throws AMQException\n     {\n         this(name, durable, owner, autoDelete, virtualHost, AsyncDeliveryConfig.getAsyncDeliveryExecutor(),\n-            new SubscriptionSet(), new SubscriptionImpl.Factory());\n+             new SubscriptionSet(), new SubscriptionImpl.Factory());\n     }\n \n     protected AMQQueue(AMQShortString name, boolean durable, AMQShortString owner, boolean autoDelete,\n-        VirtualHost virtualHost, SubscriptionSet subscribers) throws AMQException\n+                       VirtualHost virtualHost, SubscriptionSet subscribers) throws AMQException\n     {\n         this(name, durable, owner, autoDelete, virtualHost, AsyncDeliveryConfig.getAsyncDeliveryExecutor(), subscribers,\n-            new SubscriptionImpl.Factory());\n+             new SubscriptionImpl.Factory());\n     }\n \n     protected AMQQueue(AMQShortString name, boolean durable, AMQShortString owner, boolean autoDelete,\n-        VirtualHost virtualHost, Executor asyncDelivery, SubscriptionSet subscribers,\n-        SubscriptionFactory subscriptionFactory) throws AMQException\n+                       VirtualHost virtualHost, Executor asyncDelivery, SubscriptionSet subscribers,\n+                       SubscriptionFactory subscriptionFactory) throws AMQException\n     {\n         if (name == null)\n         {\n@@ -260,7 +259,7 @@ public int getMessageCount()\n     }\n \n     /**\n-     * Returns messages within the given range of message Ids\n+     * Returns messages within the given range of message Ids.\n      *\n      * @param fromMessageId\n      * @param toMessageId\n@@ -292,38 +291,220 @@ public AMQMessage getMessageOnTheQueue(long messageId)\n     }\n \n     /**\n-     * moves messages from this queue to another queue. to do this the approach is following- - setup the queue for\n-     * moving messages (stop the async delivery) - get all the messages available in the given message id range - setup\n-     * the other queue for moving messages (stop the async delivery) - send these available messages to the other queue\n-     * (enqueue in other queue) - Once sending to other Queue is successful, remove messages from this queue - remove\n-     * locks from both queues and start async delivery\n+     * Moves messages from this queue to another queue, and also commits the move on the message store. Delivery activity\n+     * on the queues being moved between is suspended during the move.\n      *\n-     * @param fromMessageId\n-     * @param toMessageId\n-     * @param queueName\n-     * @param storeContext\n+     * @param fromMessageId The first message id to move.\n+     * @param toMessageId   The last message id to move.\n+     * @param queueName     The queue to move the messages to.\n+     * @param storeContext  The context of the message store under which to perform the move. This is associated with\n+     *                      the stores transactional context.\n      */\n     public synchronized void moveMessagesToAnotherQueue(long fromMessageId, long toMessageId, String queueName,\n-        StoreContext storeContext)\n+                                                        StoreContext storeContext)\n     {\n-        // prepare the delivery manager for moving messages by stopping the async delivery and creating a lock\n-        AMQQueue anotherQueue = getVirtualHost().getQueueRegistry().getQueue(new AMQShortString(queueName));\n+        AMQQueue toQueue = getVirtualHost().getQueueRegistry().getQueue(new AMQShortString(queueName));\n+\n+        MessageStore fromStore = getVirtualHost().getMessageStore();\n+        MessageStore toStore = toQueue.getVirtualHost().getMessageStore();\n+\n+        if (toStore != fromStore)\n+        {\n+            throw new RuntimeException(\"Can only move messages between queues on the same message store.\");\n+        }\n+\n         try\n         {\n+            // Obtain locks to prevent activity on the queues being moved between.\n             startMovingMessages();\n+            toQueue.startMovingMessages();\n+\n+            // Get the list of messages to move.\n             List<AMQMessage> foundMessagesList = getMessagesOnTheQueue(fromMessageId, toMessageId);\n \n-            // move messages to another queue\n-            anotherQueue.startMovingMessages();\n-            anotherQueue.enqueueMovedMessages(storeContext, foundMessagesList);\n+            try\n+            {\n+                fromStore.beginTran(storeContext);\n+\n+                // Move the messages in on the message store.\n+                for (AMQMessage message : foundMessagesList)\n+                {\n+                    fromStore.dequeueMessage(storeContext, _name, message.getMessageId());\n+                    toStore.enqueueMessage(storeContext, toQueue._name, message.getMessageId());\n+                }\n+\n+                // Commit and flush the move transcations.\n+                try\n+                {\n+                    fromStore.commitTran(storeContext);\n+                }\n+                catch (AMQException e)\n+                {\n+                    throw new RuntimeException(\"Failed to commit transaction whilst moving messages on message store.\", e);\n+                }\n+\n+                // Move the messages on the in-memory queues.\n+                toQueue.enqueueMovedMessages(storeContext, foundMessagesList);\n+                _deliveryMgr.removeMovedMessages(foundMessagesList);\n+            }\n+            // Abort the move transactions on move failures.\n+            catch (AMQException e)\n+            {\n+                try\n+                {\n+                    fromStore.abortTran(storeContext);\n+                }\n+                catch (AMQException ae)\n+                {\n+                    throw new RuntimeException(\"Failed to abort transaction whilst moving messages on message store.\", ae);\n+                }\n+            }\n+        }\n+        // Release locks to allow activity on the queues being moved between to continue.\n+        finally\n+        {\n+            toQueue.stopMovingMessages();\n+            stopMovingMessages();\n+        }\n+    }\n+\n+    /**\n+     * Copies messages on this queue to another queue, and also commits the move on the message store. Delivery activity\n+     * on the queues being moved between is suspended during the move.\n+     *\n+     * @param fromMessageId The first message id to move.\n+     * @param toMessageId   The last message id to move.\n+     * @param queueName     The queue to move the messages to.\n+     * @param storeContext  The context of the message store under which to perform the move. This is associated with\n+     *                      the stores transactional context.\n+     */\n+    public synchronized void copyMessagesToAnotherQueue(long fromMessageId, long toMessageId, String queueName,\n+                                                        StoreContext storeContext)\n+    {\n+        AMQQueue toQueue = getVirtualHost().getQueueRegistry().getQueue(new AMQShortString(queueName));\n+\n+        MessageStore fromStore = getVirtualHost().getMessageStore();\n+        MessageStore toStore = toQueue.getVirtualHost().getMessageStore();\n \n-            // moving is successful, now remove from original queue\n-            _deliveryMgr.removeMovedMessages(foundMessagesList);\n+        if (toStore != fromStore)\n+        {\n+            throw new RuntimeException(\"Can only move messages between queues on the same message store.\");\n         }\n+\n+        try\n+        {\n+            // Obtain locks to prevent activity on the queues being moved between.\n+            startMovingMessages();\n+            toQueue.startMovingMessages();\n+\n+            // Get the list of messages to move.\n+            List<AMQMessage> foundMessagesList = getMessagesOnTheQueue(fromMessageId, toMessageId);\n+\n+            try\n+            {\n+                fromStore.beginTran(storeContext);\n+\n+                // Move the messages in on the message store.\n+                for (AMQMessage message : foundMessagesList)\n+                {\n+                    toStore.enqueueMessage(storeContext, toQueue._name, message.getMessageId());\n+                    message.takeReference();\n+                }\n+\n+                // Commit and flush the move transcations.\n+                try\n+                {\n+                    fromStore.commitTran(storeContext);\n+                }\n+                catch (AMQException e)\n+                {\n+                    throw new RuntimeException(\"Failed to commit transaction whilst moving messages on message store.\", e);\n+                }\n+\n+                // Move the messages on the in-memory queues.\n+                toQueue.enqueueMovedMessages(storeContext, foundMessagesList);\n+            }\n+            // Abort the move transactions on move failures.\n+            catch (AMQException e)\n+            {\n+                try\n+                {\n+                    fromStore.abortTran(storeContext);\n+                }\n+                catch (AMQException ae)\n+                {\n+                    throw new RuntimeException(\"Failed to abort transaction whilst moving messages on message store.\", ae);\n+                }\n+            }\n+        }\n+        // Release locks to allow activity on the queues being moved between to continue.\n+        finally\n+        {\n+            toQueue.stopMovingMessages();\n+            stopMovingMessages();\n+        }\n+    }\n+\n+    /**\n+     * Removes messages from this queue, and also commits the remove on the message store. Delivery activity\n+     * on the queues being moved between is suspended during the remove.\n+     *\n+     * @param fromMessageId The first message id to move.\n+     * @param toMessageId   The last message id to move.\n+     * @param storeContext  The context of the message store under which to perform the move. This is associated with\n+     *                      the stores transactional context.\n+     */\n+    public synchronized void removeMessagesFromQueue(long fromMessageId, long toMessageId, StoreContext storeContext)\n+    {\n+        MessageStore fromStore = getVirtualHost().getMessageStore();\n+\n+        try\n+        {\n+            // Obtain locks to prevent activity on the queues being moved between.\n+            startMovingMessages();\n+\n+            // Get the list of messages to move.\n+            List<AMQMessage> foundMessagesList = getMessagesOnTheQueue(fromMessageId, toMessageId);\n+\n+            try\n+            {\n+                fromStore.beginTran(storeContext);\n+\n+                // remove the messages in on the message store.\n+                for (AMQMessage message : foundMessagesList)\n+                {\n+                    fromStore.dequeueMessage(storeContext, _name, message.getMessageId());\n+                }\n+\n+                // Commit and flush the move transcations.\n+                try\n+                {\n+                    fromStore.commitTran(storeContext);\n+                }\n+                catch (AMQException e)\n+                {\n+                    throw new RuntimeException(\"Failed to commit transaction whilst moving messages on message store.\", e);\n+                }\n+\n+                // remove the messages on the in-memory queues.\n+                _deliveryMgr.removeMovedMessages(foundMessagesList);\n+            }\n+            // Abort the move transactions on move failures.\n+            catch (AMQException e)\n+            {\n+                try\n+                {\n+                    fromStore.abortTran(storeContext);\n+                }\n+                catch (AMQException ae)\n+                {\n+                    throw new RuntimeException(\"Failed to abort transaction whilst moving messages on message store.\", ae);\n+                }\n+            }\n+        }\n+        // Release locks to allow activity on the queues being moved between to continue.\n         finally\n         {\n-            // remove the lock and start the async delivery\n-            anotherQueue.stopMovingMessages();\n             stopMovingMessages();\n         }\n     }\n@@ -458,7 +639,7 @@ public void unBind(AMQShortString routingKey, FieldTable arguments, Exchange exc\n     }\n \n     public void registerProtocolSession(AMQProtocolSession ps, int channel, AMQShortString consumerTag, boolean acks,\n-        FieldTable filters, boolean noLocal, boolean exclusive) throws AMQException\n+                                        FieldTable filters, boolean noLocal, boolean exclusive) throws AMQException\n     {\n         if (incrementSubscriberCount() > 1)\n         {\n@@ -481,13 +662,12 @@ else if (exclusive)\n \n         if (_logger.isDebugEnabled())\n         {\n-            _logger.debug(MessageFormat.format(\n-                    \"Registering protocol session {0} with channel {1} and \" + \"consumer tag {2} with {3}\", ps, channel,\n-                    consumerTag, this));\n+            _logger.debug(MessageFormat.format(\"Registering protocol session {0} with channel {1} and \"\n+                                               + \"consumer tag {2} with {3}\", ps, channel, consumerTag, this));\n         }\n \n         Subscription subscription =\n-            _subscriptionFactory.createSubscription(channel, ps, consumerTag, acks, filters, noLocal, this);\n+                _subscriptionFactory.createSubscription(channel, ps, consumerTag, acks, filters, noLocal, this);\n \n         if (subscription.filtersMessages())\n         {\n@@ -525,8 +705,8 @@ public void unregisterProtocolSession(AMQProtocolSession ps, int channel, AMQSho\n         if (_logger.isDebugEnabled())\n         {\n             _logger.debug(MessageFormat.format(\n-                    \"Unregistering protocol session {0} with channel {1} and consumer tag {2} from {3}\", ps, channel,\n-                    consumerTag, this));\n+                    \"Unregistering protocol session {0} with channel {1} and consumer tag {2} from {3}\",\n+                    ps, channel, consumerTag, this));\n         }\n \n         Subscription removedSubscription;", "filename": "broker/src/main/java/org/apache/qpid/server/queue/AMQQueue.java"}, {"additions": 27, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java", "sha": "07872d7644367c768adec092e88f0629954ac613", "changes": 66, "status": "modified", "deletions": 39, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,30 +18,23 @@\n  * under the License.\n  *\n  */\n-/*\n- *\n- * Copyright (c) 2006 The Apache Software Foundation\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n package org.apache.qpid.server.queue;\n \n-import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.Iterator;\n-import java.util.List;\n+import org.apache.log4j.Logger;\n+\n+import org.apache.mina.common.ByteBuffer;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.CommonContentHeaderProperties;\n+import org.apache.qpid.framing.ContentHeaderBody;\n+import org.apache.qpid.framing.abstraction.ContentChunk;\n+import org.apache.qpid.server.management.AMQManagedObject;\n+import org.apache.qpid.server.management.MBeanConstructor;\n+import org.apache.qpid.server.management.MBeanDescription;\n+import org.apache.qpid.server.management.ManagedObject;\n+import org.apache.qpid.server.store.StoreContext;\n \n import javax.management.JMException;\n import javax.management.MBeanException;\n@@ -60,30 +53,25 @@\n import javax.management.openmbean.TabularDataSupport;\n import javax.management.openmbean.TabularType;\n \n-import org.apache.log4j.Logger;\n-\n-import org.apache.mina.common.ByteBuffer;\n-\n-import org.apache.qpid.AMQException;\n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.framing.BasicContentHeaderProperties;\n-import org.apache.qpid.framing.CommonContentHeaderProperties;\n-import org.apache.qpid.framing.ContentHeaderBody;\n-import org.apache.qpid.framing.abstraction.ContentChunk;\n-import org.apache.qpid.server.management.AMQManagedObject;\n-import org.apache.qpid.server.management.MBeanConstructor;\n-import org.apache.qpid.server.management.MBeanDescription;\n-import org.apache.qpid.server.management.ManagedObject;\n-import org.apache.qpid.server.store.StoreContext;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n \n /**\n- * MBean class for AMQQueue. It implements all the management features exposed\n- * for an AMQQueue.\n+ * AMQQueueMBean is the management bean for an {@link AMQQueue}.\n+ *\n+ * <p/><tablse id=\"crc\"><caption>CRC Caption</caption>\n+ * <tr><th> Responsibilities <th> Collaborations\n+ * </table>\n  */\n @MBeanDescription(\"Management Interface for AMQQueue\")\n public class AMQQueueMBean extends AMQManagedObject implements ManagedQueue, QueueNotificationListener\n {\n+    /** Used for debugging purposes. */\n     private static final Logger _logger = Logger.getLogger(AMQQueueMBean.class);\n+\n     private static final SimpleDateFormat _dateFormat = new SimpleDateFormat(\"MM-dd-yy HH:mm:ss.SSS z\");\n \n     /**", "filename": "broker/src/main/java/org/apache/qpid/server/queue/AMQQueueMBean.java"}, {"additions": 62, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java", "sha": "907d68b7339f1e5c5f128e84cd3754b6ba613943", "changes": 109, "status": "modified", "deletions": 47, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,19 +20,6 @@\n  */\n package org.apache.qpid.server.queue;\n \n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Queue;\n-import java.util.Set;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n import org.apache.log4j.Logger;\n import org.apache.qpid.AMQException;\n import org.apache.qpid.configuration.Configured;\n@@ -42,8 +29,21 @@\n import org.apache.qpid.server.configuration.Configurator;\n import org.apache.qpid.server.protocol.AMQProtocolSession;\n import org.apache.qpid.server.store.StoreContext;\n-import org.apache.qpid.util.MessageQueue;\n import org.apache.qpid.util.ConcurrentLinkedMessageQueueAtomicSize;\n+import org.apache.qpid.util.MessageQueue;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantLock;\n \n \n /** Manages delivery of messages on behalf of a queue */\n@@ -87,6 +87,10 @@\n     private final Object _queueHeadLock = new Object();\n     private String _processingThreadName = \"\";\n \n+\n+    /** Used by any reaping thread to purge messages */\n+    private StoreContext _reapingStoreContext = new StoreContext();\n+\n     ConcurrentSelectorDeliveryManager(SubscriptionManager subscriptions, AMQQueue queue)\n     {\n \n@@ -453,12 +457,31 @@ private AMQMessage getNextMessage(Queue<AMQMessage> messages, Subscription sub)\n         //while (we have a message) && ((The subscriber is not a browser or message is taken ) or we are clearing) && (Check message is taken.)\n         while (purgeMessage(message, sub))\n         {\n+            // if we are purging then ensure we mark this message taken for the current subscriber\n+            // the current subscriber may be null in the case of a get or a purge but this is ok.\n+//            boolean alreadyTaken = message.taken(_queue, sub);\n+\n             //remove the already taken message or expired\n             AMQMessage removed = messages.poll();\n \n             assert removed == message;\n \n-            _totalMessageSize.addAndGet(-message.getSize());\n+            // if the message expired then the _totalMessageSize needs adjusting\n+            if (message.expired(_queue))\n+            {\n+                _totalMessageSize.addAndGet(-message.getSize());\n+\n+                // Use the reapingStoreContext as any sub(if we have one) may be in a tx.\n+                message.dequeue(_reapingStoreContext, _queue);\n+\n+                if (_log.isInfoEnabled())\n+                {\n+                    _log.info(debugIdentity() + \" Doing clean up of the main _message queue.\");\n+                }\n+            }\n+\n+            //else the clean up is not required as the message has already been taken for this queue therefore\n+            // it was the responsibility of the code that took the message to ensure the _totalMessageSize was updated.\n \n             if (_log.isTraceEnabled())\n             {\n@@ -473,7 +496,10 @@ private AMQMessage getNextMessage(Queue<AMQMessage> messages, Subscription sub)\n     }\n \n     /**\n-     * \n+     *  This method will return true if the message is to be purged from the queue.\n+     *\n+     *\n+     *  SIDE-EFFECT: The message will be taken by the Subscription(sub) for the current Queue(_queue)\n      * @param message\n      * @param sub\n      * @return\n@@ -493,15 +519,15 @@ private boolean purgeMessage(AMQMessage message, Subscription sub) throws AMQExc\n         // if the message is null then don't purge as we have no messagse.\n         if (message != null)\n         {\n+            // Check that the message hasn't expired.\n+            if (message.expired(_queue))\n+            {\n+                return true;\n+            }\n+\n             // if we have a subscriber perform message checks\n             if (sub != null)\n             {\n-                // Check that the message hasn't expired.\n-                if (message.expired(sub.getChannel().getStoreContext(), _queue))\n-                {\n-                    return true;\n-                }\n-\n                 // if we have a queue browser(we don't purge) so check mark the message as taken\n                 purge = ((!sub.isBrowser() || message.isTaken(_queue)));\n             }\n@@ -606,7 +632,10 @@ else if (messageQueue == sub.getPreDeliveryQueue() && !sub.isBrowser())\n             {\n                 if (_log.isInfoEnabled())\n                 {\n-                    _log.info(debugIdentity() + \"We could do clean up of the main _message queue here\");\n+                    //fixme - we should do the clean up as the message remains on the _message queue\n+                    // this is resulting in the next consumer receiving the message and then attempting to purge it\n+                    //\n+                    _log.info(debugIdentity() + \"We should do clean up of the main _message queue here\");\n                 }\n             }\n \n@@ -617,7 +646,14 @@ else if (messageQueue == sub.getPreDeliveryQueue() && !sub.isBrowser())\n         }\n         catch (AMQException e)\n         {\n-            message.release(_queue);\n+            if (message != null)\n+            {\n+                message.release(_queue);\n+            }\n+            else\n+            {\n+                _log.error(debugIdentity() + \"Unable to release message as it is null. \" + e, e);\n+            }\n             _log.error(debugIdentity() + \"Unable to deliver message as dequeue failed: \" + e, e);\n         }\n     }\n@@ -696,25 +732,6 @@ private void processQueue()\n \n     }\n \n-//    private void sendNextMessage(Subscription sub)\n-//    {\n-//        if (sub.filtersMessages())\n-//        {\n-//            sendNextMessage(sub, sub.getPreDeliveryQueue());\n-//            if (sub.isAutoClose())\n-//            {\n-//                if (sub.getPreDeliveryQueue().isEmpty())\n-//                {\n-//                    sub.close();\n-//                }\n-//            }\n-//        }\n-//        else\n-//        {\n-//            sendNextMessage(sub, _messages);\n-//        }\n-//    }\n-\n     public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, boolean deliverFirst) throws AMQException\n     {\n \n@@ -723,8 +740,6 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, b\n         {\n             _log.debug(debugIdentity() + \"deliver :first(\" + deliverFirst + \") :\" + msg);\n         }\n-        // This shouldn't be done here.\n-//        msg.release();\n \n         //Check if we have someone to deliver the message to.\n         _lock.lock();\n@@ -800,7 +815,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, b\n                         if (debugEnabled)\n                         {\n                             _log.debug(debugIdentity() + \" Subscription(\" + System.identityHashCode(s) + \") became \" +\n-                                      \"suspended between nextSubscriber and send for message:\" + msg.debugIdentity());\n+                                       \"suspended between nextSubscriber and send for message:\" + msg.debugIdentity());\n                         }\n                     }\n                 }\n@@ -810,7 +825,7 @@ public void deliver(StoreContext context, AMQShortString name, AMQMessage msg, b\n                     if (debugEnabled)\n                     {\n                         _log.debug(debugIdentity() + \" Message(\" + msg.debugIdentity() + \") has not been taken so recursing!:\" +\n-                                  \" Subscriber:\" + System.identityHashCode(s));\n+                                   \" Subscriber:\" + System.identityHashCode(s));\n                     }\n \n                     deliver(context, name, msg, deliverFirst);", "filename": "broker/src/main/java/org/apache/qpid/server/queue/ConcurrentSelectorDeliveryManager.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/DefaultQueueRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/DefaultQueueRegistry.java", "sha": "cbe9246f097dc4a8c2634c7a364ca8228d4db620", "changes": 17, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/DefaultQueueRegistry.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,13 +20,14 @@\n  */\n package org.apache.qpid.server.queue;\n \n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-\n import org.apache.qpid.AMQException;\n import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n \n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n public class DefaultQueueRegistry implements QueueRegistry\n {\n     private ConcurrentMap<AMQShortString, AMQQueue> _queueMap = new ConcurrentHashMap<AMQShortString, AMQQueue>();\n@@ -57,4 +58,14 @@ public AMQQueue getQueue(AMQShortString name)\n     {\n         return _queueMap.get(name);\n     }\n+\n+    public Collection<AMQShortString> getQueueNames()\n+    {\n+        return _queueMap.keySet();\n+    }\n+\n+    public Collection<AMQQueue> getQueues()\n+    {\n+        return _queueMap.values();\n+    }\n }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/DefaultQueueRegistry.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/ExchangeBindings.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/ExchangeBindings.java", "sha": "60c1a8f5741b6154b75524e0a6cd321b6d1a3141", "changes": 13, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/ExchangeBindings.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -46,7 +46,7 @@\n \n         ExchangeBinding(AMQShortString routingKey, Exchange exchange)\n         {\n-            this(routingKey, exchange,EMPTY_ARGUMENTS);\n+            this(routingKey, exchange, EMPTY_ARGUMENTS);\n         }\n \n         ExchangeBinding(AMQShortString routingKey, Exchange exchange, FieldTable arguments)\n@@ -80,7 +80,10 @@ public int hashCode()\n \n         public boolean equals(Object o)\n         {\n-            if (!(o instanceof ExchangeBinding)) return false;\n+            if (!(o instanceof ExchangeBinding))\n+            {\n+                return false;\n+            }\n             ExchangeBinding eb = (ExchangeBinding) o;\n             return _exchange.equals(eb._exchange)\n                    && _routingKey.equals(eb._routingKey)\n@@ -104,16 +107,16 @@ public boolean equals(Object o)\n      */\n     void addBinding(AMQShortString routingKey, FieldTable arguments, Exchange exchange)\n     {\n-        _bindings.add(new ExchangeBinding(routingKey, exchange, arguments ));\n+        _bindings.add(new ExchangeBinding(routingKey, exchange, arguments));\n     }\n \n \n     public void remove(AMQShortString routingKey, FieldTable arguments, Exchange exchange)\n     {\n-        _bindings.remove(new ExchangeBinding(routingKey, exchange, arguments ));\n+        _bindings.remove(new ExchangeBinding(routingKey, exchange, arguments));\n     }\n \n-    \n+\n     /**\n      * Deregisters this queue from any exchange it has been bound to\n      */", "filename": "broker/src/main/java/org/apache/qpid/server/queue/ExchangeBindings.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/MessageMetaData.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/MessageMetaData.java", "sha": "6118a4c11f10e0793133422797a757da2c5a3fc4", "changes": 24, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/MessageMetaData.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,22 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n  */\n package org.apache.qpid.server.queue;\n ", "filename": "broker/src/main/java/org/apache/qpid/server/queue/MessageMetaData.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/NotificationCheck.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/NotificationCheck.java", "sha": "6b3d65661fc4bc4a73eb372f4da9a38682e0862b", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/NotificationCheck.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\r\n  *\r\n- * Copyright (c) 2006 The Apache Software Foundation\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n  *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n  *\r\n- *    http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n  *\r\n  */\r\n package org.apache.qpid.server.queue;\r", "filename": "broker/src/main/java/org/apache/qpid/server/queue/NotificationCheck.java"}, {"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/QueueNotificationListener.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/QueueNotificationListener.java", "sha": "959ca03c805523dfc49e2d55e55357a9f455f01a", "changes": 26, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/QueueNotificationListener.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,22 +1,26 @@\n /*\r\n  *\r\n- * Copyright (c) 2006 The Apache Software Foundation\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n  *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n  *\r\n- *    http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n  *\r\n  */\r\n package org.apache.qpid.server.queue;\r\n \r\n+\r\n public interface QueueNotificationListener\r\n {\r\n     void notifyClients(NotificationCheck notification, AMQQueue queue, String notificationMsg);\r", "filename": "broker/src/main/java/org/apache/qpid/server/queue/QueueNotificationListener.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/QueueRegistry.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/QueueRegistry.java", "sha": "13c150f82b0404d1780edeffa33d08b8eb0ac0fd", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/QueueRegistry.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -25,6 +25,7 @@\n import org.apache.qpid.server.virtualhost.VirtualHost;\n import org.apache.qpid.server.messageStore.StorableQueue;\n \n+import java.util.Collection;\n \n public interface QueueRegistry\n {\n@@ -35,4 +36,9 @@\n     void unregisterQueue(AMQShortString name) throws AMQException;\n \n     AMQQueue getQueue(AMQShortString name);\n+\n+    Collection<AMQShortString> getQueueNames();\n+\n+    Collection<AMQQueue> getQueues();\n+\n }", "filename": "broker/src/main/java/org/apache/qpid/server/queue/QueueRegistry.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/TransientMessageData.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/queue/TransientMessageData.java", "sha": "79ee6b93a3b29c5f7624b3c7a1797f99f31bcc3b", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/queue/TransientMessageData.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.queue;", "filename": "broker/src/main/java/org/apache/qpid/server/queue/TransientMessageData.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java", "sha": "d9500429af1e8d5170b88e0eb2217994d449882d", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.txn;", "filename": "broker/src/main/java/org/apache/qpid/server/txn/NonTransactionalContext.java"}, {"additions": 122, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java", "sha": "fee25c07df6dc2642fc9a1b8dc17fa5d66b83148", "changes": 124, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -28,24 +28,144 @@\n import org.apache.qpid.server.store.StoreContext;\n \n /**\n- * @author Robert Greig (robert.j.greig@jpmorgan.com)\n+ * TransactionalContext provides a context in which transactional operations on {@link AMQMessage}s are performed.\n+ * Different levels of transactional support for the delivery of messages may be provided by different implementations\n+ * of this interface.\n+ *\n+ * <p/>The fundamental transactional operations that can be performed on a message queue are 'enqueue' and 'dequeue'.\n+ * In this interface, these have been recast as the {@link #messageFullyReceived} and {@link #acknowledgeMessage}\n+ * operations. This interface essentially provides a way to make enqueueing and dequeuing transactional.\n+ *\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\n+ * <tr><th> Responsibilities\n+ * <tr><td> Explicitly accept a transaction start notification.\n+ * <tr><td> Commit all pending operations in a transaction.\n+ * <tr><td> Rollback all pending operations in a transaction.\n+ * <tr><td> Deliver a message to a queue as part of a transaction.\n+ * <tr><td> Redeliver a message to a queue as part of a transaction.\n+ * <tr><td> Mark a message as acknowledged as part of a transaction.\n+ * <tr><td> Accept notification that a message has been completely received as part of a transaction.\n+ * <tr><td> Accept notification that a message has been fully processed as part of a transaction.\n+ * <tr><td> Associate a message store context with this transaction context.\n+ * </table>\n+ *\n+ * @todo The 'fullyReceived' and 'messageProcessed' events sit uncomfortably in the responsibilities of a transactional\n+ *       context. They are non-transactional operations, used to trigger other side-effects. Consider moving them\n+ *       somewhere else, a seperate interface for example.\n+ *\n+ * @todo This transactional context could be written as a wrapper extension to a Queue implementation, that provides\n+ *       transactional management of the enqueue and dequeue operations, with added commit/rollback methods. Any\n+ *       queue implementation could be made transactional by wrapping it as a transactional queue. This would mean\n+ *       that the enqueue/dequeue operations do not need to be recast as deliver/acknowledge operations, which may be\n+ *       conceptually neater.\n+ *\n+ * For example:\n+ * <pre>\n+ * public interface Transactional\n+ * {\n+ *    public void commit();\n+ *    public void rollback();\n+ * }\n+ *\n+ * public interface TransactionalQueue<E> extends Transactional, SizeableQueue<E>\n+ * {}\n+ *\n+ * public class Queues\n+ * {\n+ *    ...\n+ *    // For transactional messaging, take a transactional view onto the queue.\n+ *    public static <E> TransactionalQueue<E> getTransactionalQueue(SizeableQueue<E> queue) { ... }\n+ *\n+ *    // For non-transactional messaging, take a non-transactional view onto the queue.\n+ *    public static <E> TransactionalQueue<E> getNonTransactionalQueue(SizeableQueue<E> queue) { ... }\n+ * }\n+ * </pre>\n  */\n public interface TransactionalContext\n {\n+    /**\n+     * Explicitly begins the transaction, if it has not already been started. {@link #commit} or {@link #rollback}\n+     * should automatically begin the next transaction in the chain.\n+     *\n+     * @throws AMQException If the transaction cannot be started for any reason.\n+     */\n     void beginTranIfNecessary() throws AMQException;\n \n+    /**\n+     * Makes all pending operations on the transaction permanent and visible.\n+     *\n+     * @throws AMQException If the transaction cannot be committed for any reason.\n+     */\n     void commit() throws AMQException;\n \n+    /**\n+     * Erases all pending operations on the transaction.\n+     *\n+     * @throws AMQException If the transaction cannot be committed for any reason.\n+     */\n     void rollback() throws AMQException;\n \n+    /**\n+     * Delivers the specified message to the specified queue. A 'deliverFirst' flag may be set if the message is a\n+     * redelivery, and should be placed on the front of the queue.\n+     *\n+     * <p/>This is an 'enqueue' operation.\n+     *\n+     * @param message      The message to deliver.\n+     * @param queue        The queue to deliver the message to.\n+     * @param deliverFirst <tt>true</tt> to place the message on the front of the queue for redelivery, <tt>false</tt>\n+     *                     for normal FIFO message ordering.\n+     *\n+     * @throws AMQException If the message cannot be delivered for any reason.\n+     */\n     void deliver(AMQMessage message, AMQQueue queue, boolean deliverFirst) throws AMQException;\n \n+    /**\n+     * Acknowledges a message or many messages as delivered. All messages up to a specified one, may be acknowledged by\n+     * setting the 'multiple' flag. It is also possible for the acknowledged message id to be zero, when the 'multiple'\n+     * flag is set, in which case an acknowledgement up to the latest delivered message should be done.\n+     *\n+     * <p/>This is a 'dequeue' operation.\n+     *\n+     * @param deliveryTag              The id of the message to acknowledge, or zero, if using multiple acknowledgement\n+     *                                 up to the latest message.\n+     * @param lastDeliveryTag          The latest message delivered.\n+     * @param multiple                 <tt>true</tt> if all message ids up the acknowledged one or latest delivered, are\n+     *                                 to be acknowledged, <tt>false</tt> otherwise.\n+     * @param unacknowledgedMessageMap The unacknowledged messages in the transaction, to remove the acknowledged message\n+     *                                 from.\n+     *\n+     * @throws AMQException If the message cannot be acknowledged for any reason.\n+     */\n     void acknowledgeMessage(long deliveryTag, long lastDeliveryTag, boolean multiple,\n-                            UnacknowledgedMessageMap unacknowledgedMessageMap) throws AMQException;\n+        UnacknowledgedMessageMap unacknowledgedMessageMap) throws AMQException;\n \n+    /**\n+     * Notifies the transactional context that a message has been fully received. The actual message that was received\n+     * is not specified. This event may be used to trigger a process related to the receipt of the message, for example,\n+     * flushing its data to disk.\n+     *\n+     * @param persistent <tt>true</tt> if the received message is persistent, <tt>false</tt> otherwise.\n+     *\n+     * @throws AMQException If the fully received event cannot be processed for any reason.\n+     */\n     void messageFullyReceived(boolean persistent) throws AMQException;\n \n+    /**\n+     * Notifies the transactional context that a message has been delivered, succesfully or otherwise. The actual\n+     * message that was delivered is not specified. This event may be used to trigger a process related to the\n+     * outcome of the delivery of the message, for example, cleaning up failed deliveries.\n+     *\n+     * @param protocolSession The protocol session of the deliverable message.\n+     *\n+     * @throws AMQException If the message processed event cannot be handled for any reason.\n+     */\n     void messageProcessed(AMQProtocolSession protocolSession) throws AMQException;\n \n+    /**\n+     * Gets the message store context associated with this transactional context.\n+     *\n+     * @return The message store context associated with this transactional context.\n+     */\n     StoreContext getStoreContext();\n }", "filename": "broker/src/main/java/org/apache/qpid/server/txn/TransactionalContext.java"}, {"additions": 262, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java", "sha": "235555c58b837031f9f2a52777abcf162ed7364b", "changes": 262, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,3 +1,4 @@\n+<<<<<<< .working\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -286,3 +287,264 @@ public ManagedObject getManagedObject()\n     }\n }\n \n+=======\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.server.virtualhost;\r\n+\r\n+import javax.management.NotCompliantMBeanException;\r\n+\r\n+import org.apache.commons.configuration.Configuration;\r\n+import org.apache.log4j.Logger;\r\n+import org.apache.qpid.server.AMQBrokerManagerMBean;\r\n+import org.apache.qpid.server.security.access.AccessManager;\r\n+import org.apache.qpid.server.security.access.AccessManagerImpl;\r\n+import org.apache.qpid.server.security.access.Accessable;\r\n+import org.apache.qpid.server.security.auth.manager.PrincipalDatabaseAuthenticationManager;\r\n+import org.apache.qpid.server.security.auth.manager.AuthenticationManager;\r\n+import org.apache.qpid.server.configuration.Configurator;\r\n+import org.apache.qpid.server.exchange.DefaultExchangeFactory;\r\n+import org.apache.qpid.server.exchange.DefaultExchangeRegistry;\r\n+import org.apache.qpid.server.exchange.ExchangeFactory;\r\n+import org.apache.qpid.server.exchange.ExchangeRegistry;\r\n+import org.apache.qpid.server.management.AMQManagedObject;\r\n+import org.apache.qpid.server.management.ManagedObject;\r\n+import org.apache.qpid.server.queue.DefaultQueueRegistry;\r\n+import org.apache.qpid.server.queue.QueueRegistry;\r\n+import org.apache.qpid.server.registry.ApplicationRegistry;\r\n+import org.apache.qpid.server.store.MessageStore;\r\n+\r\n+public class VirtualHost implements Accessable\r\n+{\r\n+    private static final Logger _logger = Logger.getLogger(VirtualHost.class);\r\n+\r\n+\r\n+    private final String _name;\r\n+\r\n+    private QueueRegistry _queueRegistry;\r\n+\r\n+    private ExchangeRegistry _exchangeRegistry;\r\n+\r\n+    private ExchangeFactory _exchangeFactory;\r\n+\r\n+    private MessageStore _messageStore;\r\n+\r\n+    protected VirtualHostMBean _virtualHostMBean;\r\n+\r\n+    private AMQBrokerManagerMBean _brokerMBean;\r\n+\r\n+    private AuthenticationManager _authenticationManager;\r\n+\r\n+    private AccessManager _accessManager;\r\n+\r\n+\r\n+    public void setAccessableName(String name)\r\n+    {\r\n+        _logger.warn(\"Setting Accessable Name for VirualHost is not allowed. (\"\r\n+                     + name + \") ignored remains :\" + getAccessableName());\r\n+    }\r\n+\r\n+    public String getAccessableName()\r\n+    {\r\n+        return _name;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Abstract MBean class. This has some of the methods implemented from management intrerface for exchanges. Any\r\n+     * implementaion of an Exchange MBean should extend this class.\r\n+     */\r\n+    public class VirtualHostMBean extends AMQManagedObject implements ManagedVirtualHost\r\n+    {\r\n+        public VirtualHostMBean() throws NotCompliantMBeanException\r\n+        {\r\n+            super(ManagedVirtualHost.class, \"VirtualHost\");\r\n+        }\r\n+\r\n+        public String getObjectInstanceName()\r\n+        {\r\n+            return _name.toString();\r\n+        }\r\n+\r\n+        public String getName()\r\n+        {\r\n+            return _name.toString();\r\n+        }\r\n+\r\n+        public VirtualHost getVirtualHost()\r\n+        {\r\n+            return VirtualHost.this;\r\n+        }\r\n+\r\n+\r\n+    } // End of MBean class\r\n+\r\n+    /**\r\n+     * Used for testing only\r\n+     * @param name\r\n+     * @param store\r\n+     * @throws Exception\r\n+     */\r\n+    public VirtualHost(String name, MessageStore store) throws Exception\r\n+    {\r\n+        this(name, null, store);\r\n+    }\r\n+\r\n+    /**\r\n+     * Normal Constructor\r\n+     * @param name\r\n+     * @param hostConfig\r\n+     * @throws Exception\r\n+     */\r\n+    public VirtualHost(String name, Configuration hostConfig) throws Exception\r\n+    {\r\n+        this(name, hostConfig, null);\r\n+    }\r\n+\r\n+    private VirtualHost(String name, Configuration hostConfig, MessageStore store) throws Exception\r\n+    {\r\n+        _name = name;\r\n+\r\n+        _virtualHostMBean = new VirtualHostMBean();\r\n+        // This isn't needed to be registered\r\n+        //_virtualHostMBean.register();\r\n+\r\n+        _queueRegistry = new DefaultQueueRegistry(this);\r\n+        _exchangeFactory = new DefaultExchangeFactory(this);\r\n+        _exchangeRegistry = new DefaultExchangeRegistry(this);\r\n+\r\n+        if (store != null)\r\n+        {\r\n+            _messageStore = store;\r\n+        }\r\n+        else\r\n+        {\r\n+            if (hostConfig == null)\r\n+            {\r\n+                throw new IllegalAccessException(\"HostConfig and MessageStore cannot be null\");\r\n+            }\r\n+            initialiseMessageStore(hostConfig);\r\n+        }\r\n+\r\n+        _exchangeRegistry.initialise();\r\n+\r\n+        _authenticationManager = new PrincipalDatabaseAuthenticationManager(name, hostConfig);\r\n+\r\n+        _accessManager = new AccessManagerImpl(name, hostConfig);\r\n+\r\n+        _brokerMBean = new AMQBrokerManagerMBean(_virtualHostMBean);\r\n+        _brokerMBean.register();\r\n+    }\r\n+\r\n+    private void initialiseMessageStore(Configuration config) throws Exception\r\n+    {\r\n+        String messageStoreClass = config.getString(\"store.class\");\r\n+\r\n+        Class clazz = Class.forName(messageStoreClass);\r\n+        Object o = clazz.newInstance();\r\n+\r\n+        if (!(o instanceof MessageStore))\r\n+        {\r\n+            throw new ClassCastException(\"Message store class must implement \" + MessageStore.class + \". Class \" + clazz +\r\n+                                         \" does not.\");\r\n+        }\r\n+        _messageStore = (MessageStore) o;\r\n+        _messageStore.configure(this, \"store\", config);\r\n+    }\r\n+\r\n+\r\n+    public <T> T getConfiguredObject(Class<T> instanceType, Configuration config)\r\n+    {\r\n+        T instance;\r\n+        try\r\n+        {\r\n+            instance = instanceType.newInstance();\r\n+        }\r\n+        catch (Exception e)\r\n+        {\r\n+            _logger.error(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\");\r\n+            throw new IllegalArgumentException(\"Unable to instantiate configuration class \" + instanceType + \" - ensure it has a public default constructor\", e);\r\n+        }\r\n+        Configurator.configure(instance);\r\n+\r\n+        return instance;\r\n+    }\r\n+\r\n+\r\n+    public String getName()\r\n+    {\r\n+        return _name;\r\n+    }\r\n+\r\n+    public QueueRegistry getQueueRegistry()\r\n+    {\r\n+        return _queueRegistry;\r\n+    }\r\n+\r\n+    public ExchangeRegistry getExchangeRegistry()\r\n+    {\r\n+        return _exchangeRegistry;\r\n+    }\r\n+\r\n+    public ExchangeFactory getExchangeFactory()\r\n+    {\r\n+        return _exchangeFactory;\r\n+    }\r\n+\r\n+    public ApplicationRegistry getApplicationRegistry()\r\n+    {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    public MessageStore getMessageStore()\r\n+    {\r\n+        return _messageStore;\r\n+    }\r\n+\r\n+    public AuthenticationManager getAuthenticationManager()\r\n+    {\r\n+        return _authenticationManager;\r\n+    }\r\n+\r\n+    public AccessManager getAccessManager()\r\n+    {\r\n+        return _accessManager;\r\n+    }\r\n+\r\n+    public void close() throws Exception\r\n+    {\r\n+        if (_messageStore != null)\r\n+        {\r\n+            _messageStore.close();\r\n+        }\r\n+    }\r\n+\r\n+    public ManagedObject getBrokerMBean()\r\n+    {\r\n+        return _brokerMBean;\r\n+    }\r\n+\r\n+    public ManagedObject getManagedObject()\r\n+    {\r\n+        return _virtualHostMBean;\r\n+    }\r\n+}\r\n+>>>>>>> .merge-right.r553432", "filename": "broker/src/main/java/org/apache/qpid/server/virtualhost/VirtualHost.java"}, {"additions": 648, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/MessageStoreTool.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/MessageStoreTool.java", "sha": "afa7916074ad8231692db53ebd413769312a4e27", "changes": 648, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/MessageStoreTool.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,648 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.tools.messagestore;\n+\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.qpid.configuration.Configuration;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.registry.ConfigurationFileApplicationRegistry;\n+import org.apache.qpid.server.store.MemoryMessageStore;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.tools.messagestore.commands.Clear;\n+import org.apache.qpid.tools.messagestore.commands.Command;\n+import org.apache.qpid.tools.messagestore.commands.Copy;\n+import org.apache.qpid.tools.messagestore.commands.Dump;\n+import org.apache.qpid.tools.messagestore.commands.Help;\n+import org.apache.qpid.tools.messagestore.commands.List;\n+import org.apache.qpid.tools.messagestore.commands.Load;\n+import org.apache.qpid.tools.messagestore.commands.Quit;\n+import org.apache.qpid.tools.messagestore.commands.Select;\n+import org.apache.qpid.tools.messagestore.commands.Show;\n+import org.apache.qpid.tools.utils.CommandParser;\n+import org.apache.qpid.tools.utils.Console;\n+import org.apache.qpid.tools.utils.SimpleCommandParser;\n+import org.apache.qpid.tools.utils.SimpleConsole;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+/**\n+ * MessageStoreTool.\n+ */\n+public class MessageStoreTool\n+{\n+    /** Text outputted at the start of each console.*/\n+    private static final String BOILER_PLATE = \"MessageStoreTool - for examining Persistent Qpid Broker MessageStore instances\";\n+\n+    /** I/O Wrapper. */\n+    protected Console _console;\n+\n+    /** Batch mode flag. */\n+    protected boolean _batchMode;\n+\n+    /** Internal State object. */\n+    private State _state = new State();\n+\n+    private HashMap<String, Command> _commands = new HashMap<String, Command>();\n+\n+    /** SLF4J Logger. */\n+    private static Logger _devlog = LoggerFactory.getLogger(MessageStoreTool.class);\n+\n+    /** Loaded configuration file. */\n+    private Configuration _config;\n+\n+    /** Control used for main run loop. */\n+    private boolean _running = true;\n+    private boolean _initialised = false;\n+\n+    //---------------------------------------------------------------------------------------------------/\n+\n+    public static void main(String[] args) throws Configuration.InitException\n+    {\n+\n+        MessageStoreTool tool = new MessageStoreTool(args);\n+\n+        tool.start();\n+    }\n+\n+\n+    public MessageStoreTool(String[] args) throws Configuration.InitException\n+    {\n+        this(args, System.in, System.out);\n+    }\n+\n+    public MessageStoreTool(String[] args, InputStream in, OutputStream out) throws Configuration.InitException\n+    {\n+        BufferedReader consoleReader = new BufferedReader(new InputStreamReader(in));\n+        BufferedWriter consoleWriter = new BufferedWriter(new OutputStreamWriter(out));\n+\n+        Runtime.getRuntime().addShutdownHook(new Thread(new ShutdownHook(this)));\n+        _batchMode = false;\n+\n+        _console = new SimpleConsole(consoleWriter, consoleReader);\n+\n+        _config = new Configuration();\n+\n+        setOptions();\n+        _config.processCommandline(args);\n+    }\n+\n+\n+    private void setOptions()\n+    {\n+        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n+        Option version = new Option(\"v\", \"version\", false, \"print the version information and exit\");\n+        Option configFile =\n+                OptionBuilder.withArgName(\"file\").hasArg()\n+                        .withDescription(\"use given configuration file By \"\n+                                         + \"default looks for a file named \"\n+                                         + Configuration.DEFAULT_CONFIG_FILE + \" in \" + Configuration.QPID_HOME)\n+                        .withLongOpt(\"config\")\n+                        .create(\"c\");\n+\n+        _config.setOption(help);\n+        _config.setOption(version);\n+        _config.setOption(configFile);\n+    }\n+\n+    public State getState()\n+    {\n+        return _state;\n+    }\n+\n+    public Map<String, Command> getCommands()\n+    {\n+        return _commands;\n+    }\n+\n+    public void setConfigurationFile(String configfile) throws Configuration.InitException\n+    {\n+        _config.loadConfig(new File(configfile));\n+        setup();\n+    }\n+\n+    public Console getConsole()\n+    {\n+        return _console;\n+    }\n+\n+    public void setConsole(Console console)\n+    {\n+        _console = console;\n+    }\n+\n+    /**\n+     * Simple ShutdownHook to cleanly shutdown the databases\n+     */\n+    class ShutdownHook implements Runnable\n+    {\n+        MessageStoreTool _tool;\n+\n+        ShutdownHook(MessageStoreTool messageStoreTool)\n+        {\n+            _tool = messageStoreTool;\n+        }\n+\n+        public void run()\n+        {\n+            _tool.quit();\n+        }\n+    }\n+\n+    public void quit()\n+    {\n+        _running = false;\n+\n+        if (_initialised)\n+        {\n+            ApplicationRegistry.remove(1);\n+        }\n+\n+        _console.println(\"...exiting\");\n+\n+        _console.close();\n+    }\n+\n+    public void setBatchMode(boolean batchmode)\n+    {\n+        _batchMode = batchmode;\n+    }\n+\n+    /**\n+     * Main loop\n+     */\n+    protected void start()\n+    {\n+        setup();\n+\n+        if (!_initialised)\n+        {\n+            System.exit(1);\n+        }\n+\n+        _console.println(\"\");\n+\n+        _console.println(BOILER_PLATE);        \n+\n+        runCLI();\n+    }\n+\n+    private void setup()\n+    {\n+        loadDefaultVirtualHosts();\n+\n+        loadCommands();\n+\n+        _state.clearAll();\n+    }\n+\n+    private void loadCommands()\n+    {\n+        _commands.clear();\n+        //todo Dynamically load the classes that exis in com.redhat.etp.qpid.commands\n+        _commands.put(\"close\", new Clear(this));\n+        _commands.put(\"copy\", new Copy(this));\n+        _commands.put(\"dump\", new Dump(this));\n+        _commands.put(\"help\", new Help(this));\n+        _commands.put(\"list\", new List(this));\n+        _commands.put(\"load\", new Load(this));\n+        _commands.put(\"quit\", new Quit(this));\n+        _commands.put(\"select\", new Select(this));\n+        _commands.put(\"show\", new Show(this));\n+    }\n+\n+    private void loadDefaultVirtualHosts()\n+    {\n+        final File configFile = _config.getConfigFile();\n+\n+        loadVirtualHosts(configFile);\n+    }\n+\n+    private void loadVirtualHosts(File configFile)\n+    {\n+\n+        if (!configFile.exists())\n+        {\n+            _devlog.error(\"Config file not found:\" + configFile.getAbsolutePath());\n+            return;\n+        }\n+        else\n+        {\n+            _devlog.debug(\"using config file :\" + configFile.getAbsolutePath());\n+        }\n+\n+        try\n+        {\n+            ConfigurationFileApplicationRegistry registry = new ConfigurationFileApplicationRegistry(configFile);\n+\n+            ApplicationRegistry.remove(1);\n+\n+            ApplicationRegistry.initialise(registry);\n+\n+            checkMessageStores();\n+            _initialised = true;\n+        }\n+        catch (ConfigurationException e)\n+        {\n+            _console.println(\"Unable to load configuration due to configuration error: \" + e.getMessage());\n+            e.printStackTrace();\n+        }\n+        catch (Exception e)\n+        {\n+            _console.println(\"Unable to load configuration due to: \" + e.getMessage());\n+            e.printStackTrace();\n+        }\n+\n+\n+    }\n+\n+    private void checkMessageStores()\n+    {\n+        Collection<VirtualHost> vhosts = ApplicationRegistry.getInstance().getVirtualHostRegistry().getVirtualHosts();\n+\n+        boolean warning = false;\n+        for (VirtualHost vhost : vhosts)\n+        {\n+            if (vhost.getMessageStore() instanceof MemoryMessageStore)\n+            {\n+                _console.println(\"WARNING: Virtualhost '\" + vhost.getName() + \"' is using a MemoryMessageStore. \"\n+                                 + \"Changes will not persist.\");\n+                warning = true;\n+            }\n+        }\n+\n+        if (warning)\n+        {\n+            _console.println(\"\");\n+            _console.println(\"Please ensure you are using the correct config file currently using '\"\n+                             + _config.getConfigFile().getAbsolutePath() + \"'\");\n+            _console.println(\"New config file can be specifed by 'load <config file>' or -c on the commandline.\");\n+            _console.println(\"\");\n+        }\n+    }\n+\n+    private void runCLI()\n+    {\n+        while (_running)\n+        {\n+            if (!_batchMode)\n+            {\n+                printPrompt();\n+            }\n+\n+            String[] args = _console.readCommand();\n+\n+            while (args != null)\n+            {\n+                exec(args);\n+\n+                if (_running)\n+                {\n+                    if (!_batchMode)\n+                    {\n+                        printPrompt();\n+                    }\n+\n+                    args = _console.readCommand();\n+                }\n+            }\n+        }\n+    }\n+\n+    private void printPrompt()\n+    {\n+        _console.print(prompt());\n+    }\n+\n+\n+    /**\n+     * Execute a script (batch mode).\n+     *\n+     * @param script The file script\n+     */\n+    protected void runScripts(String script)\n+    {\n+        //Store Current State\n+        boolean oldBatch = _batchMode;\n+        CommandParser oldParser = _console.getCommandParser();\n+        setBatchMode(true);\n+\n+        try\n+        {\n+            _devlog.debug(\"Running script '\" + script + \"'\");\n+\n+            _console.setCommandParser(new SimpleCommandParser(new BufferedReader(new FileReader(script))));\n+\n+            start();\n+        }\n+        catch (java.io.FileNotFoundException e)\n+        {\n+            _devlog.error(\"Script not found: '\" + script + \"' due to:\" + e.getMessage());\n+        }\n+\n+        //Restore previous state\n+        _console.setCommandParser(oldParser);\n+        setBatchMode(oldBatch);\n+    }\n+\n+    public String prompt()\n+    {\n+        String state = _state.toString();\n+        if (state != null && state.length() != 0)\n+        {\n+            return state + \":bdb$ \";\n+        }\n+        else\n+        {\n+            return \"bdb$ \";\n+        }\n+    }\n+\n+    /**\n+     * Execute the command.\n+     *\n+     * @param args [command, arg0, arg1...].\n+     */\n+    protected void exec(String[] args)\n+    {\n+        // Comment lines start with a #\n+        if (args.length == 0 || args[0].startsWith(\"#\"))\n+        {\n+            return;\n+        }\n+\n+        final String command = args[0];\n+\n+        Command cmd = _commands.get(command);\n+\n+        if (cmd == null)\n+        {\n+            _console.println(\"Command not understood: \" + command);\n+        }\n+        else\n+        {\n+            cmd.execute(args);\n+        }\n+    }\n+\n+\n+    /**\n+     * Displays usage info.\n+     */\n+    protected static void help()\n+    {\n+        System.out.println(BOILER_PLATE);\n+        System.out.println(\"Usage: java \" + MessageStoreTool.class + \" [Options]\");\n+        System.out.println(\"       [-c <broker config file>] : Defaults to \\\"$QPID_HOME/etc/config.xml\\\"\");\n+    }\n+\n+\n+    /**\n+     * This class is used to store the current state of the tool.\n+     *\n+     * This is then interrogated by the various commands to augment their behaviour.\n+     *\n+     *\n+     */\n+    public class State\n+    {\n+        private VirtualHost _vhost = null;\n+        private AMQQueue _queue = null;\n+        private Exchange _exchange = null;\n+        private java.util.List<Long> _msgids = null;\n+\n+        public State()\n+        {\n+        }\n+\n+        public void setQueue(AMQQueue queue)\n+        {\n+            _queue = queue;\n+        }\n+\n+        public AMQQueue getQueue()\n+        {\n+            return _queue;\n+        }\n+\n+        public void setVhost(VirtualHost vhost)\n+        {\n+            _vhost = vhost;\n+        }\n+\n+        public VirtualHost getVhost()\n+        {\n+            return _vhost;\n+        }\n+\n+        public Exchange getExchange()\n+        {\n+            return _exchange;\n+        }\n+\n+        public void setExchange(Exchange exchange)\n+        {\n+            _exchange = exchange;\n+        }\n+\n+        public String toString()\n+        {\n+            StringBuilder status = new StringBuilder();\n+\n+            if (_vhost != null)\n+            {\n+                status.append(_vhost.getName());\n+\n+                if (_exchange != null)\n+                {\n+                    status.append(\"[\");\n+                    status.append(_exchange.getName());\n+                    status.append(\"]\");\n+\n+                    if (_queue != null)\n+                    {\n+                        status.append(\"->'\");\n+                        status.append(_queue.getName());\n+                        status.append(\"'\");\n+\n+                        if (_msgids != null)\n+                        {\n+                            status.append(printMessages());\n+                        }\n+                    }\n+                }\n+            }\n+\n+            return status.toString();\n+        }\n+\n+\n+        public String printMessages()\n+        {\n+            StringBuilder sb = new StringBuilder();\n+\n+            Long previous = null;\n+\n+            Long start = null;\n+            for (Long id : _msgids)\n+            {\n+                if (previous != null)\n+                {\n+                    if (id == previous + 1)\n+                    {\n+                        if (start == null)\n+                        {\n+                            start = previous;\n+                        }\n+                    }\n+                    else\n+                    {\n+                        if (start != null)\n+                        {\n+                            sb.append(\",\");\n+                            sb.append(start);\n+                            sb.append(\"-\");\n+                            sb.append(id);\n+                            start = null;\n+                        }\n+                        else\n+                        {\n+                            sb.append(\",\");\n+                            sb.append(previous);\n+                        }\n+                    }\n+                }\n+\n+                previous = id;\n+            }\n+\n+            if (start != null)\n+            {\n+                sb.append(\",\");\n+                sb.append(start);\n+                sb.append(\"-\");\n+                sb.append(_msgids.get(_msgids.size() - 1));\n+            }\n+            else\n+            {\n+                sb.append(\",\");\n+                sb.append(previous);\n+            }\n+\n+            // surround list in ()\n+            sb.replace(0, 1, \"(\");\n+            sb.append(\")\");\n+            return sb.toString();\n+        }\n+\n+        public void clearAll()\n+        {\n+            _vhost = null;\n+            clearExchange();\n+        }\n+\n+        public void clearExchange()\n+        {\n+            _exchange = null;\n+            clearQueue();\n+        }\n+\n+        public void clearQueue()\n+        {\n+            _queue = null;\n+            clearMessages();\n+        }\n+\n+        public void clearMessages()\n+        {\n+            _msgids = null;\n+        }\n+\n+        /**\n+         * A common location to provide parsing of the message id string\n+         * utilised by a number of the commands.\n+         * The String is comma separated list of ids that can be individual ids\n+         * or a range (4-10)\n+         *\n+         * @param msgString string of msg ids to parse 1,2,4-10\n+         */\n+        public void setMessages(String msgString)\n+        {\n+            StringTokenizer tok = new StringTokenizer(msgString, \",\");\n+\n+            if (tok.hasMoreTokens())\n+            {\n+                _msgids = new LinkedList<Long>();\n+            }\n+\n+            while (tok.hasMoreTokens())\n+            {\n+                String next = tok.nextToken();\n+                if (next.contains(\"-\"))\n+                {\n+                    Long start = Long.parseLong(next.substring(0, next.indexOf(\"-\")));\n+                    Long end = Long.parseLong(next.substring(next.indexOf(\"-\") + 1));\n+\n+                    if (end >= start)\n+                    {\n+                        for (long l = start; l <= end; l++)\n+                        {\n+                            _msgids.add(l);\n+                        }\n+                    }\n+                }\n+                else\n+                {\n+                    _msgids.add(Long.parseLong(next));\n+                }\n+            }\n+\n+        }\n+\n+        public void setMessages(java.util.List<Long> msgids)\n+        {\n+            _msgids = msgids;\n+        }\n+\n+        public java.util.List<Long> getMessages()\n+        {\n+            return _msgids;\n+        }\n+    }//Class State\n+\n+}//Class MessageStoreTool", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/MessageStoreTool.java"}, {"additions": 66, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/AbstractCommand.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/AbstractCommand.java", "sha": "5444197cb4908cec0f8b55ff2305f2f3a81ca1dc", "changes": 66, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/AbstractCommand.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,66 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+import org.apache.qpid.tools.utils.Console;\n+\n+public abstract class AbstractCommand implements Command\n+{\n+    protected Console _console;\n+    protected MessageStoreTool _tool;\n+\n+    public AbstractCommand(MessageStoreTool tool)\n+    {\n+        _console = tool.getConsole();\n+        _tool = tool;\n+    }\n+\n+    public void setOutput(Console out)\n+    {\n+        _console = out;\n+    }\n+\n+    protected void commandError(String message, String[] args)\n+    {\n+        _console.print(getCommand() + \" : \" + message);\n+\n+        if (args != null)\n+        {\n+            for (int i = 1; i < args.length; i++)\n+            {\n+                _console.print(args[i]);\n+            }\n+        }\n+        _console.println(\"\");\n+        _console.println(help());\n+    }\n+\n+\n+    public abstract String help();\n+\n+    public abstract String usage();\n+\n+    public abstract String getCommand();\n+\n+\n+    public abstract void execute(String... args);\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/AbstractCommand.java"}, {"additions": 85, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Clear.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Clear.java", "sha": "b0006b3fe6d16e36a27a52c58af098989ed3d3a8", "changes": 85, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Clear.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+\n+public class Clear extends AbstractCommand\n+{\n+    public Clear(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Clears any selection.\";\n+    }\n+\n+    public String usage()\n+    {\n+        return \"clear [ all | virtualhost | exchange | queue | msgs ]\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"clear\";\n+    }\n+\n+    public void execute(String... args)\n+    {\n+        assert args.length > 0;\n+        assert args[0].equals(getCommand());\n+\n+        if (args.length < 1)\n+        {\n+            doClose(\"all\");\n+        }\n+        else\n+        {\n+            doClose(args[1]);\n+        }\n+    }\n+\n+    private void doClose(String type)\n+    {\n+        if (type.equals(\"virtualhost\")\n+            || type.equals(\"all\"))\n+        {\n+            _tool.getState().clearAll();\n+        }\n+\n+        if (type.equals(\"exchange\"))\n+        {\n+            _tool.getState().clearExchange();\n+        }\n+\n+        if (type.equals(\"queue\"))\n+        {\n+            _tool.getState().clearQueue();\n+        }\n+\n+        if (type.equals(\"msgs\"))\n+        {\n+            _tool.getState().clearMessages();\n+        }\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Clear.java"}, {"additions": 12, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Command.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Command.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/ListeningCoordinatorTest.java", "sha": "bfa775a34a5d73836af7b2180c6e5465f6c96b4a", "changes": 16, "status": "renamed", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Command.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,11 +18,19 @@\n  *\n  * \n  */\n-package org.apache.qpid.interop.coordinator;\n+package org.apache.qpid.tools.messagestore.commands;\n \n-import javax.jms.Message;\n+import org.apache.qpid.tools.utils.Console;\n \n-public interface ListeningCoordinatorTest\n+public interface Command\n {\n-    public void latejoin(Message message);\n+    public void setOutput(Console out);\n+\n+    public String help();\n+\n+    public abstract String usage();        \n+\n+    String getCommand();\n+\n+    public void execute(String... args);\n }", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Command.java"}, {"additions": 56, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Copy.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Copy.java", "sha": "96ecb36952fb17f1206a015b862dd80516a195f1", "changes": 56, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Copy.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,56 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.store.StoreContext;\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+\n+public class Copy extends Move\n+{\n+    public Copy(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Copy messages between queues.\\n\" +\n+               \"The currently selected message set will be copied to the specifed queue.\\n\" +\n+               \"Alternatively the values can be provided on the command line.\";\n+    }\n+\n+    public String usage()\n+    {\n+        return \"copy to=<queue> [from=<queue>] [msgids=<msgids eg, 1,2,4-10>]\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"copy\";\n+    }\n+\n+    protected void doCommand(AMQQueue fromQueue, long start, long end, AMQQueue toQueue, StoreContext storeContext)\n+    {\n+        fromQueue.copyMessagesToAnotherQueue(start, end, toQueue.getName().toString(), storeContext);\n+    }\n+\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Copy.java"}, {"additions": 299, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Dump.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Dump.java", "sha": "eea53252c6569680008f4375fccc1f0fa4cc189d", "changes": 299, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Dump.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,299 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.mina.common.ByteBuffer;\n+import org.apache.qpid.framing.abstraction.ContentChunk;\n+import org.apache.qpid.server.queue.AMQMessage;\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+import org.apache.qpid.tools.utils.Console;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class Dump extends Show\n+{\n+    private static final int LINE_SIZE = 8;\n+    private static final String DEFAULT_ENCODING = \"utf-8\";\n+    private static final boolean SPACE_BYTES = true;\n+    private static final String BYTE_SPACER = \" \";\n+    private static final String NON_PRINTING_ASCII_CHAR = \"?\";\n+\n+    protected boolean _content = true;\n+\n+    public Dump(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Dump selected message content. Default: show=content\";\n+    }\n+\n+    public String usage()\n+    {\n+        return getCommand() + \" [show=[all],[msgheaders],[_amqHeaders],[routing],[content]] [id=<msgid e.g. 1,2,4-10>]\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"dump\";\n+    }\n+\n+    public void execute(String... args)\n+    {\n+        assert args.length > 0;\n+        assert args[0].equals(getCommand());\n+\n+\n+        if (args.length >= 2)\n+        {\n+            for (String arg : args)\n+            {\n+                if (arg.startsWith(\"show=\"))\n+                {\n+                    _content = arg.contains(\"content\") || arg.contains(\"all\");\n+                }\n+            }\n+\n+            parseArgs(args);\n+        }\n+\n+        performShow();\n+    }\n+\n+\n+    protected List<List> createMessageData(java.util.List<Long> msgids, List<AMQMessage> messages, boolean showHeaders, boolean showRouting,\n+                                           boolean showMessageHeaders)\n+    {\n+\n+        List<List> display = new LinkedList<List>();\n+\n+        List<String> hex = new LinkedList<String>();\n+        List<String> ascii = new LinkedList<String>();\n+        display.add(hex);\n+        display.add(ascii);\n+\n+        for (AMQMessage msg : messages)\n+        {\n+            if (!includeMsg(msg, msgids))\n+            {\n+                continue;\n+            }\n+\n+            //Add divider between messages\n+            hex.add(Console.ROW_DIVIDER);\n+            ascii.add(Console.ROW_DIVIDER);\n+\n+            // Show general message information\n+            hex.add(Show.Columns.ID.name());\n+            ascii.add(msg.getMessageId().toString());\n+\n+            hex.add(Console.ROW_DIVIDER);\n+            ascii.add(Console.ROW_DIVIDER);\n+\n+            if (showRouting)\n+            {\n+                addShowInformation(hex, ascii, msg, \"Routing Details\", true, false, false);\n+            }\n+            if (showHeaders)\n+            {\n+                addShowInformation(hex, ascii, msg, \"Headers\", false, true, false);\n+            }\n+            if (showMessageHeaders)\n+            {\n+                addShowInformation(hex, ascii, msg, null, false, false, true);\n+            }\n+\n+            // Add Content Body seciont\n+            hex.add(\"Content Body\");\n+            ascii.add(\"\");\n+            hex.add(Console.ROW_DIVIDER);\n+            ascii.add(Console.ROW_DIVIDER);\n+\n+            Iterator bodies = msg.getContentBodyIterator();\n+            if (bodies.hasNext())\n+            {\n+\n+                hex.add(\"Hex\");\n+                hex.add(Console.ROW_DIVIDER);\n+\n+\n+                ascii.add(\"ASCII\");\n+                ascii.add(Console.ROW_DIVIDER);\n+\n+                while (bodies.hasNext())\n+                {\n+                    ContentChunk chunk = (ContentChunk) bodies.next();\n+\n+                    //Duplicate so we don't destroy original data :)\n+                    ByteBuffer hexBuffer = chunk.getData().duplicate();\n+\n+                    ByteBuffer charBuffer = hexBuffer.duplicate();\n+\n+                    Hex hexencoder = new Hex();\n+\n+                    while (hexBuffer.hasRemaining())\n+                    {\n+                        byte[] line = new byte[LINE_SIZE];\n+\n+                        int bufsize = hexBuffer.remaining();\n+                        if (bufsize < LINE_SIZE)\n+                        {\n+                            hexBuffer.get(line, 0, bufsize);\n+                        }\n+                        else\n+                        {\n+                            bufsize = line.length;\n+                            hexBuffer.get(line);\n+                        }\n+\n+                        byte[] encoded = hexencoder.encode(line);\n+\n+                        try\n+                        {\n+                            String encStr = new String(encoded, 0, bufsize * 2, DEFAULT_ENCODING);\n+                            String hexLine = \"\";\n+\n+                            int strKength = encStr.length();\n+                            for (int c = 0; c < strKength; c++)\n+                            {\n+                                hexLine += encStr.charAt(c);\n+\n+                                if (c % 2 == 1 && SPACE_BYTES)\n+                                {\n+                                    hexLine += BYTE_SPACER;\n+                                }\n+                            }\n+\n+                            hex.add(hexLine);\n+                        }\n+                        catch (UnsupportedEncodingException e)\n+                        {\n+                            _console.println(e.getMessage());\n+                            return null;\n+                        }\n+                    }\n+\n+                    while (charBuffer.hasRemaining())\n+                    {\n+                        String asciiLine = \"\";\n+\n+                        for (int pos = 0; pos < LINE_SIZE; pos++)\n+                        {\n+                            if (charBuffer.hasRemaining())\n+                            {\n+                                byte ch = charBuffer.get();\n+\n+                                if (isPrintable(ch))\n+                                {\n+                                    asciiLine += (char) ch;\n+                                }\n+                                else\n+                                {\n+                                    asciiLine += NON_PRINTING_ASCII_CHAR;\n+                                }\n+\n+                                if (SPACE_BYTES)\n+                                {\n+                                    asciiLine += BYTE_SPACER;\n+                                }\n+                            }\n+                            else\n+                            {\n+                                break;\n+                            }\n+                        }\n+\n+                        ascii.add(asciiLine);\n+                    }\n+                }\n+            }\n+            else\n+            {\n+                List<String> result = new LinkedList<String>();\n+\n+                display.add(result);\n+                result.add(\"No ContentBodies\");\n+            }\n+        }\n+\n+        // if hex is empty then we have no data to display\n+        if (hex.size() == 0)\n+        {\n+            return null;\n+        }\n+\n+        return display;\n+    }\n+\n+    private void addShowInformation(List<String> column1, List<String> column2, AMQMessage msg,\n+                                    String title, boolean routing, boolean headers, boolean messageHeaders)\n+    {\n+        List<AMQMessage> single = new LinkedList<AMQMessage>();\n+        single.add(msg);\n+\n+        List<List> routingData = super.createMessageData(null, single, headers, routing, messageHeaders);\n+\n+        //Reformat data\n+        if (title != null)\n+        {\n+            column1.add(title);\n+            column2.add(\"\");\n+            column1.add(Console.ROW_DIVIDER);\n+            column2.add(Console.ROW_DIVIDER);\n+        }\n+\n+        // look at all columns in the routing Data\n+        for (List item : routingData)\n+        {\n+            // the item should be:\n+            //   Title\n+            //   *divider\n+            //   value\n+            // otherwise we can't reason about the correct value\n+            if (item.size() == 3)\n+            {\n+                //Filter out the columns we are not interested in.\n+\n+                String columnName = item.get(0).toString();\n+\n+                if (!(columnName.equals(Show.Columns.ID.name())\n+                      || columnName.equals(Show.Columns.Size.name())))\n+                {\n+                    column1.add(columnName);\n+                    column2.add(item.get(2).toString());\n+                }\n+            }\n+        }\n+        column1.add(Console.ROW_DIVIDER);\n+        column2.add(Console.ROW_DIVIDER);\n+    }\n+\n+    private boolean isPrintable(byte c)\n+    {\n+        return c > 31 && c < 127;\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Dump.java"}, {"additions": 98, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Help.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Help.java", "sha": "0f9546541b073f8a14afeda41b91255d2bca3d34", "changes": 98, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Help.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,98 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+import org.apache.qpid.tools.utils.Console;\n+\n+import java.util.LinkedList;\n+import java.util.Map;\n+\n+public class Help extends AbstractCommand\n+{\n+    public Help(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Provides detailed help on commands.\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"help\";\n+    }\n+\n+    public String usage()\n+    {\n+        return \"help [<command>]\";\n+    }\n+\n+    public void execute(String... args)\n+    {\n+        assert args.length > 0;\n+        assert args[0].equals(getCommand());\n+\n+        if (args.length > 1)\n+        {\n+            Command command = _tool.getCommands().get(args[1]);\n+            if (command != null)\n+            {\n+                _console.println(command.help());\n+                _console.println(\"Usage:\" + command.usage());\n+            }\n+            else\n+            {\n+                commandError(\"Command not found: \", args);\n+            }\n+        }\n+        else\n+        {\n+            java.util.List<java.util.List> data = new LinkedList<java.util.List>();\n+\n+            java.util.List<String> commandName = new LinkedList<String>();\n+            java.util.List<String> commandDescription = new LinkedList<String>();\n+\n+            data.add(commandName);\n+            data.add(commandDescription);\n+\n+            //Set up Headers\n+            commandName.add(\"Command\");\n+            commandDescription.add(\"Description\");\n+\n+            commandName.add(Console.ROW_DIVIDER);\n+            commandDescription.add(Console.ROW_DIVIDER);\n+\n+            //Add current Commands with descriptions\n+            Map<String, Command> commands = _tool.getCommands();\n+\n+            for (Command command : commands.values())\n+            {\n+                commandName.add(command.getCommand());\n+                commandDescription.add(command.help());\n+            }\n+\n+            _console.printMap(\"Available Commands\", data);\n+        }\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Help.java"}, {"additions": 314, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/List.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/List.java", "sha": "df8b59ec19ebd85c6f93dc627982b29039f9ad05", "changes": 314, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/List.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,314 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+import org.apache.qpid.tools.utils.Console;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+public class List extends AbstractCommand\n+{\n+\n+    public List(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public void setOutput(Console out)\n+    {\n+        _console = out;\n+    }\n+\n+    public String help()\n+    {\n+        return \"list available items.\";\n+    }\n+\n+    public String usage()\n+    {\n+        return \"list queues [<exchange>] | exchanges | bindings [<exchange>] | all\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"list\";\n+    }\n+\n+    public void execute(String... args)\n+    {\n+        assert args.length > 0;\n+        assert args[0].equals(getCommand());\n+\n+        if (args.length > 1)\n+        {\n+            if ((args[1].equals(\"exchanges\"))\n+                || (args[1].equals(\"queues\"))\n+                || (args[1].equals(\"bindings\"))\n+                || (args[1].equals(\"all\")))\n+            {\n+                if (args.length == 2)\n+                {\n+                    doList(args[1]);\n+                }\n+                else if (args.length == 3)\n+                {\n+                    doList(args[1], args[2]);\n+                }\n+            }\n+            else\n+            {\n+                commandError(\"Unknown options. \", args);\n+            }\n+        }\n+        else if (args.length < 2)\n+        {\n+            doList(\"all\");\n+        }\n+        else\n+        {\n+            doList(args[1]);\n+        }\n+    }\n+\n+    private void doList(String... listItem)\n+    {\n+        if (_tool.getState().getVhost() == null)\n+        {\n+            _console.println(\"No Virtualhost open. Open a Virtualhost first.\");\n+            listVirtualHosts();\n+            return;\n+        }\n+\n+        VirtualHost vhost = _tool.getState().getVhost();\n+\n+        java.util.List<String> data = null;\n+\n+        if (listItem[0].equals(\"queues\"))\n+        {\n+            if (listItem.length > 1)\n+            {\n+                data = listQueues(vhost, new AMQShortString(listItem[1]));\n+            }\n+            else\n+            {\n+                Exchange exchange = _tool.getState().getExchange();\n+                data = listQueues(vhost, exchange);\n+            }\n+        }\n+\n+        if (listItem[0].equals(\"exchanges\"))\n+        {\n+            data = listExchanges(vhost);\n+        }\n+\n+        if (listItem[0].equals(\"bindings\"))\n+        {\n+\n+            if (listItem.length > 1)\n+            {\n+                data = listBindings(vhost, new AMQShortString(listItem[1]));\n+            }\n+            else\n+            {\n+                Exchange exchange = _tool.getState().getExchange();\n+\n+                data = listBindings(vhost, exchange);\n+            }\n+        }\n+\n+        if (data != null)\n+        {\n+            if (data.size() == 1)\n+            {\n+                _console.println(\"No '\" + listItem[0] + \"' to display,\");\n+            }\n+            else\n+            {\n+                _console.displayList(true, data.toArray(new String[0]));\n+            }\n+        }\n+\n+\n+        if (listItem[0].equals(\"all\"))\n+        {\n+\n+            boolean displayed = false;\n+            Exchange exchange = _tool.getState().getExchange();\n+\n+            //Do the display here for each one so that they are pretty printed\n+            data = listQueues(vhost, exchange);\n+            if (data != null)\n+            {\n+                displayed = true;\n+                _console.displayList(true, data.toArray(new String[0]));\n+            }\n+\n+            if (exchange == null)\n+            {\n+                data = listExchanges(vhost);\n+                if (data != null)\n+                {\n+                    displayed = true;\n+                    _console.displayList(true, data.toArray(new String[0]));\n+                }\n+            }\n+\n+            data = listBindings(vhost, exchange);\n+            if (data != null)\n+            {\n+                displayed = true;\n+                _console.displayList(true, data.toArray(new String[0]));\n+            }\n+\n+            if (!displayed)\n+            {\n+                _console.println(\"Nothing to list\");\n+            }\n+        }\n+    }\n+\n+    private void listVirtualHosts()\n+    {\n+        Collection<VirtualHost> vhosts = ApplicationRegistry.getInstance()\n+                .getVirtualHostRegistry().getVirtualHosts();\n+\n+        String[] data = new String[vhosts.size() + 1];\n+\n+        data[0] = \"Available VirtualHosts\";\n+\n+        int index = 1;\n+        for (VirtualHost vhost : vhosts)\n+        {\n+            data[index] = vhost.getName();\n+            index++;\n+        }\n+\n+        _console.displayList(true, data);\n+    }\n+\n+    private java.util.List<String> listBindings(VirtualHost vhost, AMQShortString exchangeName)\n+    {\n+        return listBindings(vhost, vhost.getExchangeRegistry().getExchange(exchangeName));\n+    }\n+\n+    private java.util.List<String> listBindings(VirtualHost vhost, Exchange exchange)\n+    {\n+        Collection<AMQShortString> queues = vhost.getQueueRegistry().getQueueNames();\n+\n+        if (queues == null || queues.size() == 0)\n+        {\n+            return null;\n+        }\n+\n+        java.util.List<String> data = new LinkedList<String>();\n+\n+        data.add(\"Current Bindings\");\n+\n+        for (AMQShortString queue : queues)\n+        {\n+            if (exchange != null)\n+            {\n+                if (exchange.isBound(queue))\n+                {\n+                    data.add(queue.toString());\n+                }\n+            }\n+            else\n+            {\n+                data.add(queue.toString());\n+            }\n+        }\n+\n+        return data;\n+    }\n+\n+    private java.util.List<String> listExchanges(VirtualHost vhost)\n+    {\n+        Collection<AMQShortString> queues = vhost.getExchangeRegistry().getExchangeNames();\n+\n+        if (queues == null || queues.size() == 0)\n+        {\n+            return null;\n+        }\n+\n+        java.util.List<String> data = new LinkedList<String>();\n+\n+        data.add(\"Available Exchanges\");\n+\n+        for (AMQShortString queue : queues)\n+        {\n+            data.add(queue.toString());\n+        }\n+\n+        return data;\n+    }\n+\n+    private java.util.List<String> listQueues(VirtualHost vhost, AMQShortString exchangeName)\n+    {\n+        return listQueues(vhost, vhost.getExchangeRegistry().getExchange(exchangeName));\n+    }\n+\n+    private java.util.List<String> listQueues(VirtualHost vhost, Exchange exchange)\n+    {\n+        Collection<AMQQueue> queues = vhost.getQueueRegistry().getQueues();\n+\n+        if (queues == null || queues.size() == 0)\n+        {\n+            return null;\n+        }\n+\n+        java.util.List<String> data = new LinkedList<String>();\n+\n+        data.add(\"Available Queues\");\n+\n+        for (AMQQueue queue : queues)\n+        {\n+            if (exchange != null)\n+            {\n+                if (exchange.isBound(queue))\n+                {\n+                    data.add(queue.getName().toString());\n+                }\n+            }\n+            else\n+            {\n+                data.add(queue.getName().toString());\n+            }\n+        }\n+\n+        if (exchange != null)\n+        {\n+            if (queues.size() == 1)\n+            {\n+                return null;\n+            }\n+        }\n+\n+        return data;\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/List.java"}, {"additions": 94, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Load.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Load.java", "sha": "244a311c306c57014ff3260a4f00d6d343953710", "changes": 94, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Load.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,94 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.configuration.Configuration;\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+\n+public class Load extends AbstractCommand\n+{\n+    public Load(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Loads specified broker configuration file.\";\n+    }\n+\n+    public String usage()\n+    {\n+        return \"load <configuration file>\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"load\";\n+    }\n+\n+    public void execute(String... args)\n+    {\n+        assert args.length > 0;\n+        assert args[0].equals(getCommand());\n+\n+        if (args.length > 2)\n+        {\n+            _console.print(\"load \" + args[1] + \": additional options not understood:\");\n+            for (int i = 2; i < args.length; i++)\n+            {\n+                _console.print(args[i] + \" \");\n+            }\n+            _console.println(\"\");\n+        }\n+        else if (args.length < 2)\n+        {\n+            _console.println(\"Enter Configuration file.\");\n+            String input = _console.readln();\n+            if (input != null)\n+            {\n+                doLoad(input);\n+            }\n+            else\n+            {\n+                _console.println(\"Did not recognise config file.\");\n+            }\n+        }\n+        else\n+        {\n+            doLoad(args[1]);\n+        }\n+    }\n+\n+    private void doLoad(String configfile)\n+    {\n+        _console.println(\"Loading Configuration:\" + configfile);\n+\n+        try\n+        {\n+            _tool.setConfigurationFile(configfile);\n+        }\n+        catch (Configuration.InitException e)\n+        {\n+            _console.println(\"Unable to open config file due to: '\" + e.getMessage() + \"'\");\n+        }\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Load.java"}, {"additions": 166, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Move.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Move.java", "sha": "a9497fd23e4075e563ca7f114029435e1566a831", "changes": 166, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Move.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,166 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.store.StoreContext;\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+\n+import java.util.List;\n+\n+public class Move extends AbstractCommand\n+{\n+\n+    /**\n+     * Since the Coopy command is not associated with a real channel we can safely create our own store context\n+     * for use in the few methods that require one.\n+     */\n+    private StoreContext _storeContext = new StoreContext();\n+\n+    public Move(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Move messages between queues.\\n\" +\n+               \"The currently selected message set will be moved to the specifed queue.\\n\" +\n+               \"Alternatively the values can be provided on the command line.\";\n+    }\n+\n+    public String usage()\n+    {\n+        return \"move to=<queue> [from=<queue>] [msgids=<msgids eg, 1,2,4-10>]\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"move\";\n+    }\n+\n+    public void execute(String... args)\n+    {\n+        AMQQueue toQueue = null;\n+        AMQQueue fromQueue = _tool.getState().getQueue();\n+        java.util.List<Long> msgids = _tool.getState().getMessages();\n+\n+        if (args.length >= 2)\n+        {\n+            for (String arg : args)\n+            {\n+                if (arg.startsWith(\"to=\"))\n+                {\n+                    String queueName = arg.substring(arg.indexOf(\"=\") + 1);\n+                    toQueue = _tool.getState().getVhost().getQueueRegistry().getQueue(new AMQShortString(queueName));\n+                }\n+\n+                if (arg.startsWith(\"from=\"))\n+                {\n+                    String queueName = arg.substring(arg.indexOf(\"=\") + 1);\n+                    fromQueue = _tool.getState().getVhost().getQueueRegistry().getQueue(new AMQShortString(queueName));\n+                }\n+\n+                if (arg.startsWith(\"msgids=\"))\n+                {\n+                    String msgidStr = arg.substring(arg.indexOf(\"=\") + 1);\n+\n+                    // Record the current message selection\n+                    java.util.List<Long> currentIDs = _tool.getState().getMessages();\n+\n+                    // Use the ToolState class to perform the messasge parsing\n+                    _tool.getState().setMessages(msgidStr);\n+                    msgids = _tool.getState().getMessages();\n+\n+                    // Reset the original selection of messages\n+                    _tool.getState().setMessages(currentIDs);\n+                }\n+            }\n+        }\n+\n+        if (!checkRequirements(fromQueue, toQueue, msgids))\n+        {\n+            return;\n+        }\n+\n+        processIDs(fromQueue, toQueue, msgids);\n+    }\n+\n+    private void processIDs(AMQQueue fromQueue, AMQQueue toQueue, java.util.List<Long> msgids)\n+    {\n+        Long previous = null;\n+        Long start = null;\n+\n+        for (long id : msgids)\n+        {\n+            if (previous != null)\n+            {\n+                if (id == previous + 1)\n+                {\n+                    if (start == null)\n+                    {\n+                        start = previous;\n+                    }\n+                }\n+                else\n+                {\n+                    if (start != null)\n+                    {\n+                        //move a range of ids\n+                        doCommand(fromQueue, start, id, toQueue, _storeContext);\n+                    }\n+                    else\n+                    {\n+                        //move a single id\n+                        doCommand(fromQueue, id, id, toQueue, _storeContext);\n+                    }\n+                }\n+            }\n+\n+            previous = id;\n+        }\n+    }\n+\n+    protected boolean checkRequirements(AMQQueue fromQueue, AMQQueue toQueue, List<Long> msgids)\n+    {\n+        if (toQueue == null)\n+        {\n+            _console.println(\"Destination queue not specifed.\");\n+            _console.println(usage());\n+            return false;\n+        }\n+\n+        if (fromQueue == null)\n+        {\n+            _console.println(\"Source queue not specifed.\");\n+            _console.println(usage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected void doCommand(AMQQueue fromQueue, long start, long id, AMQQueue toQueue, StoreContext storeContext)\n+    {\n+        fromQueue.moveMessagesToAnotherQueue(start, id, toQueue.getName().toString(), _storeContext);\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Move.java"}, {"additions": 68, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Purge.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Purge.java", "sha": "7154159b40a747e384cd5ed0609f5ccba200f7b2", "changes": 68, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Purge.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,68 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.store.StoreContext;\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+\n+public class Purge extends Move\n+{\n+    public Purge(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Purge messages from a queue.\\n\" +\n+               \"The currently selected message set will be purged from the specifed queue.\\n\" +\n+               \"Alternatively the values can be provided on the command line.\";\n+    }\n+\n+    public String usage()\n+    {\n+        return \"purge from=<queue> [msgids=<msgids eg, 1,2,4-10>]\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"purge\";\n+    }\n+\n+\n+    protected boolean checkRequirements(AMQQueue fromQueue, AMQQueue toQueue, java.util.List<Long> msgids)\n+    {\n+        if (fromQueue == null)\n+        {\n+            _console.println(\"Source queue not specifed.\");\n+            _console.println(usage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected void doCommand(AMQQueue fromQueue, long start, long end, AMQQueue toQueue, StoreContext storeContext)\n+    {\n+        fromQueue.removeMessagesFromQueue(start, end, storeContext);\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Purge.java"}, {"additions": 54, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Quit.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Quit.java", "sha": "a81bc07c3863d518df4f03db2a4e2f29e6eb8afc", "changes": 54, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Quit.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,54 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+\n+public class Quit extends AbstractCommand\n+{\n+    public Quit(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Quit the tool.\";\n+    }\n+\n+    public String usage()\n+    {\n+        return \"quit\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"quit\";\n+    }\n+\n+    public void execute(String... args)\n+    {\n+        assert args.length > 0;\n+        assert args[0].equals(\"quit\");\n+\n+        _tool.quit();\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Quit.java"}, {"additions": 233, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Select.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Select.java", "sha": "5e9b7028e9a3377c422f3d30bae8b4c90b720c93", "changes": 233, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Select.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,233 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.server.exchange.Exchange;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n+import org.apache.qpid.server.virtualhost.VirtualHost;\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+\n+import java.util.LinkedList;\n+import java.util.StringTokenizer;\n+\n+public class Select extends AbstractCommand\n+{\n+\n+    public Select(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Perform a selection.\";\n+    }\n+\n+    public String usage()\n+    {\n+        return \"select virtualhost <name> |exchange <name> |queue <name> | msgs id=<msgids eg. 1,2,4-10>\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"select\";\n+    }\n+\n+    public void execute(String... args)\n+    {\n+        assert args.length > 2;\n+        assert args[0].equals(\"select\");\n+\n+        if (args.length < 3)\n+        {\n+            if (args[1].equals(\"show\"))\n+            {\n+                doSelect(args[1], null);\n+            }\n+            else\n+            {\n+                _console.print(\"select : unknown command:\");\n+                _console.println(help());\n+            }\n+        }\n+        else\n+        {\n+            if (args[1].equals(\"virtualhost\")\n+                || args[1].equals(\"vhost\")\n+                || args[1].equals(\"exchange\")\n+                || args[1].equals(\"queue\")\n+                || args[1].equals(\"msg\")\n+                    )\n+            {\n+                doSelect(args[1], args[2]);\n+            }\n+            else\n+            {\n+                _console.println(help());\n+            }\n+        }\n+    }\n+\n+    private void doSelect(String type, String item)\n+    {\n+        if (type.equals(\"virtualhost\"))\n+        {\n+\n+            VirtualHost vhost = ApplicationRegistry.getInstance()\n+                    .getVirtualHostRegistry().getVirtualHost(item);\n+\n+            if (vhost == null)\n+            {\n+                _console.println(\"Virtualhost '\" + item + \"' not found.\");\n+            }\n+            else\n+            {\n+                _tool.getState().setVhost(vhost);\n+            }\n+        }\n+\n+        if (type.equals(\"exchange\"))\n+        {\n+\n+            VirtualHost vhost = _tool.getState().getVhost();\n+\n+            if (vhost == null)\n+            {\n+                _console.println(\"No Virtualhost open. Open a Virtualhost first.\");\n+                return;\n+            }\n+\n+\n+            Exchange exchange = vhost.getExchangeRegistry().getExchange(new AMQShortString(item));\n+\n+            if (exchange == null)\n+            {\n+                _console.println(\"Exchange  '\" + item + \"' not found.\");\n+            }\n+            else\n+            {\n+                _tool.getState().setExchange(exchange);\n+            }\n+\n+            if (_tool.getState().getQueue() != null)\n+            {\n+                if (!exchange.isBound(_tool.getState().getQueue()))\n+                {\n+                    _tool.getState().setQueue(null);\n+                }\n+            }\n+        }\n+\n+        if (type.equals(\"queue\"))\n+        {\n+            VirtualHost vhost = _tool.getState().getVhost();\n+\n+            if (vhost == null)\n+            {\n+                _console.println(\"No Virtualhost open. Open a Virtualhost first.\");\n+                return;\n+            }\n+\n+            AMQQueue queue = vhost.getQueueRegistry().getQueue(new AMQShortString(item));\n+\n+            if (queue == null)\n+            {\n+                _console.println(\"Queue '\" + item + \"' not found.\");\n+            }\n+            else\n+            {\n+                _tool.getState().setQueue(queue);\n+\n+                if (_tool.getState().getExchange() == null)\n+                {\n+                    for (AMQShortString exchangeName : vhost.getExchangeRegistry().getExchangeNames())\n+                    {\n+                        Exchange exchange = vhost.getExchangeRegistry().getExchange(exchangeName);\n+                        if (exchange.isBound(queue))\n+                        {\n+                            _tool.getState().setExchange(exchange);\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                //remove the message selection\n+                _tool.getState().setMessages((java.util.List<Long>) null);\n+            }\n+        }\n+\n+        if (type.equals(\"msg\"))\n+        {\n+            if (item.startsWith(\"id=\"))\n+            {\n+                StringTokenizer tok = new StringTokenizer(item.substring(item.indexOf(\"=\") + 1), \",\");\n+\n+                java.util.List<Long> msgids = null;\n+\n+                if (tok.hasMoreTokens())\n+                {\n+                    msgids = new LinkedList<Long>();\n+                }\n+\n+                while (tok.hasMoreTokens())\n+                {\n+                    String next = tok.nextToken();\n+                    if (next.contains(\"-\"))\n+                    {\n+                        Long start = Long.parseLong(next.substring(0, next.indexOf(\"-\")));\n+                        Long end = Long.parseLong(next.substring(next.indexOf(\"-\") + 1));\n+\n+                        if (end >= start)\n+                        {\n+                            for (long l = start; l <= end; l++)\n+                            {\n+                                msgids.add(l);\n+                            }\n+                        }\n+                    }\n+                    else\n+                    {\n+                        msgids.add(Long.parseLong(next));\n+                    }\n+                }\n+\n+                _tool.getState().setMessages(msgids);\n+            }\n+\n+        }\n+\n+        if (type.equals(\"show\"))\n+        {\n+            _console.println(_tool.getState().toString());\n+            if (_tool.getState().getMessages() != null)\n+            {\n+                _console.print(\"Msgs:\");\n+                for (Long l : _tool.getState().getMessages())\n+                {\n+                    _console.print(\" \" + l);\n+                }\n+                _console.println(\"\");\n+            }\n+        }\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Select.java"}, {"additions": 513, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Show.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Show.java", "sha": "5988cdabfc359cdb8cf9d6e8f22e9d7f647cb77a", "changes": 513, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Show.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,513 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ *\n+ */\n+package org.apache.qpid.tools.messagestore.commands;\n+\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.framing.BasicContentHeaderProperties;\n+import org.apache.qpid.framing.FieldTable;\n+import org.apache.qpid.framing.abstraction.MessagePublishInfo;\n+import org.apache.qpid.server.queue.AMQMessage;\n+import org.apache.qpid.server.queue.AMQQueue;\n+import org.apache.qpid.tools.messagestore.MessageStoreTool;\n+import org.apache.qpid.tools.utils.Console;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+\n+public class Show extends AbstractCommand\n+{\n+    protected boolean _amqHeaders = false;\n+    protected boolean _routing = false;\n+    protected boolean _msgHeaders = false;\n+\n+    public Show(MessageStoreTool tool)\n+    {\n+        super(tool);\n+    }\n+\n+    public String help()\n+    {\n+        return \"Shows the messages headers.\";\n+    }\n+\n+    public String usage()\n+    {\n+        return getCommand() + \" [show=[all],[msgheaders],[amqheaders],[routing]] [id=<msgid e.g. 1,2,4-10>]\";\n+    }\n+\n+    public String getCommand()\n+    {\n+        return \"show\";\n+    }\n+\n+    public void execute(String... args)\n+    {\n+        assert args.length > 0;\n+        assert args[0].equals(getCommand());\n+\n+        if (args.length < 2)\n+        {\n+            parseArgs(\"all\");\n+        }\n+        else\n+        {\n+            parseArgs(args);\n+        }\n+\n+        performShow();\n+    }\n+\n+    protected void parseArgs(String... args)\n+    {\n+        List<Long> msgids = null;\n+\n+        if (args.length >= 2)\n+        {\n+            for (String arg : args)\n+            {\n+                if (arg.startsWith(\"show=\"))\n+                {\n+                    _msgHeaders = arg.contains(\"msgheaders\") || arg.contains(\"all\");\n+                    _amqHeaders = arg.contains(\"amqheaders\") || arg.contains(\"all\");\n+                    _routing = arg.contains(\"routing\") || arg.contains(\"all\");\n+                }\n+\n+                if (arg.startsWith(\"id=\"))\n+                {\n+                    _tool.getState().setMessages(msgids);\n+                }\n+            }//for args\n+        }// if args > 2\n+    }\n+\n+    protected void performShow()\n+    {\n+        if (_tool.getState().getVhost() == null)\n+        {\n+            _console.println(\"No Virtualhost selected. 'DuSelect' a Virtualhost first.\");\n+            return;\n+        }\n+\n+        AMQQueue _queue = _tool.getState().getQueue();\n+\n+        List<Long> msgids = _tool.getState().getMessages();\n+\n+        if (_queue != null)\n+        {\n+            List<AMQMessage> messages = _queue.getMessagesOnTheQueue();\n+            if (messages == null || messages.size() == 0)\n+            {\n+                _console.println(\"No messages on queue\");\n+                return;\n+            }\n+\n+            List<List> data = createMessageData(msgids, messages, _amqHeaders, _routing, _msgHeaders);\n+            if (data != null)\n+            {\n+                _console.printMap(null, data);\n+            }\n+            else\n+            {\n+                String message = \"No data to display.\";\n+                if (msgids != null)\n+                {\n+                    message += \" Is message selection correct? \" + _tool.getState().printMessages();\n+                }\n+                _console.println(message);\n+            }\n+\n+        }\n+        else\n+        {\n+            _console.println(\"No Queue specified to show.\");\n+        }\n+    }\n+\n+    /**\n+     * Create the list data for display from the messages.\n+     *\n+     * @param msgids The list of message ids to display\n+     * @param messages A list of messages to format and display.\n+     * @param showHeaders should the header info be shown\n+     * @param showRouting show the routing info be shown\n+     * @param showMessageHeaders show the msg headers be shown\n+     * @return the formated data lists for printing\n+     */\n+    protected List<List> createMessageData(List<Long> msgids, List<AMQMessage> messages, boolean showHeaders, boolean showRouting,\n+                                           boolean showMessageHeaders)\n+    {\n+\n+        // Currenly exposed message properties\n+//        //Printing the content Body\n+//        msg.getContentBodyIterator();\n+//        //Print the Headers\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getAppId();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getAppIdAsString();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getClusterId();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getContentType();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getCorrelationId();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getDeliveryMode();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getEncoding();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getExpiration();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getHeaders();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getMessageId();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getPriority();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getPropertyFlags();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getReplyTo();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getTimestamp();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getType();\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getUserId();\n+//\n+//        //Print out all the property names\n+//        ((BasicContentHeaderProperties)msg.getContentHeaderBody().properties).getHeaders().getPropertyNames();\n+//\n+//        msg.getMessageId();\n+//        msg.getSize();\n+//        msg.getArrivalTime();\n+\n+//        msg.getDeliveredSubscription();\n+//        msg.getDeliveredToConsumer();\n+//        msg.getMessageHandle();\n+//        msg.getMessageId();\n+//        msg.getMessagePublishInfo();\n+//        msg.getPublisher();\n+\n+//        msg.getStoreContext();\n+//        msg.isAllContentReceived();\n+//        msg.isPersistent();\n+//        msg.isRedelivered();\n+//        msg.isRejectedBy();\n+//        msg.isTaken();\n+\n+        //Header setup\n+\n+        List<List> data = new LinkedList<List>();\n+\n+        List<String> id = new LinkedList<String>();\n+        data.add(id);\n+        id.add(Columns.ID.name());\n+        id.add(Console.ROW_DIVIDER);\n+\n+        List<String> exchange = new LinkedList<String>();\n+        List<String> routingkey = new LinkedList<String>();\n+        List<String> immediate = new LinkedList<String>();\n+        List<String> mandatory = new LinkedList<String>();\n+        if (showRouting)\n+        {\n+            data.add(exchange);\n+            exchange.add(Columns.Exchange.name());\n+            exchange.add(Console.ROW_DIVIDER);\n+\n+            data.add(routingkey);\n+            routingkey.add(Columns.RoutingKey.name());\n+            routingkey.add(Console.ROW_DIVIDER);\n+\n+            data.add(immediate);\n+            immediate.add(Columns.isImmediate.name());\n+            immediate.add(Console.ROW_DIVIDER);\n+\n+            data.add(mandatory);\n+            mandatory.add(Columns.isMandatory.name());\n+            mandatory.add(Console.ROW_DIVIDER);\n+        }\n+\n+        List<String> size = new LinkedList<String>();\n+        List<String> appid = new LinkedList<String>();\n+        List<String> clusterid = new LinkedList<String>();\n+        List<String> contenttype = new LinkedList<String>();\n+        List<String> correlationid = new LinkedList<String>();\n+        List<String> deliverymode = new LinkedList<String>();\n+        List<String> encoding = new LinkedList<String>();\n+        List<String> arrival = new LinkedList<String>();\n+        List<String> expiration = new LinkedList<String>();\n+        List<String> priority = new LinkedList<String>();\n+        List<String> propertyflag = new LinkedList<String>();\n+        List<String> replyto = new LinkedList<String>();\n+        List<String> timestamp = new LinkedList<String>();\n+        List<String> type = new LinkedList<String>();\n+        List<String> userid = new LinkedList<String>();\n+        List<String> ispersitent = new LinkedList<String>();\n+        List<String> isredelivered = new LinkedList<String>();\n+        List<String> isdelivered = new LinkedList<String>();\n+\n+        data.add(size);\n+        size.add(Columns.Size.name());\n+        size.add(Console.ROW_DIVIDER);\n+\n+        if (showHeaders)\n+        {\n+            data.add(ispersitent);\n+            ispersitent.add(Columns.isPersistent.name());\n+            ispersitent.add(Console.ROW_DIVIDER);\n+\n+            data.add(isredelivered);\n+            isredelivered.add(Columns.isRedelivered.name());\n+            isredelivered.add(Console.ROW_DIVIDER);\n+\n+            data.add(isdelivered);\n+            isdelivered.add(Columns.isDelivered.name());\n+            isdelivered.add(Console.ROW_DIVIDER);\n+\n+            data.add(appid);\n+            appid.add(Columns.App_ID.name());\n+            appid.add(Console.ROW_DIVIDER);\n+\n+            data.add(clusterid);\n+            clusterid.add(Columns.Cluster_ID.name());\n+            clusterid.add(Console.ROW_DIVIDER);\n+\n+            data.add(contenttype);\n+            contenttype.add(Columns.Content_Type.name());\n+            contenttype.add(Console.ROW_DIVIDER);\n+\n+            data.add(correlationid);\n+            correlationid.add(Columns.Correlation_ID.name());\n+            correlationid.add(Console.ROW_DIVIDER);\n+\n+            data.add(deliverymode);\n+            deliverymode.add(Columns.Delivery_Mode.name());\n+            deliverymode.add(Console.ROW_DIVIDER);\n+\n+            data.add(encoding);\n+            encoding.add(Columns.Encoding.name());\n+            encoding.add(Console.ROW_DIVIDER);\n+\n+            data.add(arrival);\n+            expiration.add(Columns.Arrival.name());\n+            expiration.add(Console.ROW_DIVIDER);\n+\n+            data.add(expiration);\n+            expiration.add(Columns.Expiration.name());\n+            expiration.add(Console.ROW_DIVIDER);\n+\n+            data.add(priority);\n+            priority.add(Columns.Priority.name());\n+            priority.add(Console.ROW_DIVIDER);\n+\n+            data.add(propertyflag);\n+            propertyflag.add(Columns.Property_Flag.name());\n+            propertyflag.add(Console.ROW_DIVIDER);\n+\n+            data.add(replyto);\n+            replyto.add(Columns.ReplyTo.name());\n+            replyto.add(Console.ROW_DIVIDER);\n+\n+            data.add(timestamp);\n+            timestamp.add(Columns.Timestamp.name());\n+            timestamp.add(Console.ROW_DIVIDER);\n+\n+            data.add(type);\n+            type.add(Columns.Type.name());\n+            type.add(Console.ROW_DIVIDER);\n+\n+            data.add(userid);\n+            userid.add(Columns.UserID.name());\n+            userid.add(Console.ROW_DIVIDER);\n+        }\n+\n+        List<String> msgHeaders = new LinkedList<String>();\n+        if (showMessageHeaders)\n+        {\n+            data.add(msgHeaders);\n+            msgHeaders.add(Columns.MsgHeaders.name());\n+            msgHeaders.add(Console.ROW_DIVIDER);\n+        }\n+\n+        //Add create the table of data\n+        for (AMQMessage msg : messages)\n+        {\n+            if (!includeMsg(msg, msgids))\n+            {\n+                continue;\n+            }\n+\n+            id.add(msg.getMessageId().toString());\n+\n+            size.add(\"\" + msg.getSize());\n+\n+            arrival.add(\"\" + msg.getArrivalTime());\n+\n+            try\n+            {\n+                ispersitent.add(msg.isPersistent() ? \"true\" : \"false\");\n+            }\n+            catch (AMQException e)\n+            {\n+                ispersitent.add(\"n/a\");\n+            }\n+\n+            isredelivered.add(msg.isRedelivered() ? \"true\" : \"false\");\n+\n+            isdelivered.add(msg.getDeliveredToConsumer() ? \"true\" : \"false\");\n+\n+//        msg.getMessageHandle();\n+\n+            BasicContentHeaderProperties headers = null;\n+\n+            try\n+            {\n+                headers = ((BasicContentHeaderProperties) msg.getContentHeaderBody().properties);\n+            }\n+            catch (AMQException e)\n+            {\n+                //ignore\n+//                commandError(\"Unable to read properties for message: \" + e.getMessage(), null);\n+            }\n+\n+            if (headers != null)\n+            {\n+                String appidS = headers.getAppIdAsString();\n+                appid.add(appidS == null ? \"null\" : appidS);\n+\n+                String clusterS = headers.getClusterIdAsString();\n+                clusterid.add(clusterS == null ? \"null\" : clusterS);\n+\n+                String contentS = headers.getContentTypeAsString();\n+                contenttype.add(contentS == null ? \"null\" : contentS);\n+\n+                String correlationS = headers.getCorrelationIdAsString();\n+                correlationid.add(correlationS == null ? \"null\" : correlationS);\n+\n+                deliverymode.add(\"\" + headers.getDeliveryMode());\n+\n+                AMQShortString encodeSS = headers.getEncoding();\n+                encoding.add(encodeSS == null ? \"null\" : encodeSS.toString());\n+\n+                expiration.add(\"\" + headers.getExpiration());\n+\n+                FieldTable headerFT = headers.getHeaders();\n+                msgHeaders.add(headerFT == null ? \"none\" : \"\" + headerFT.toString());\n+\n+                priority.add(\"\" + headers.getPriority());\n+                propertyflag.add(\"\" + headers.getPropertyFlags());\n+\n+                AMQShortString replytoSS = headers.getReplyTo();\n+                replyto.add(replytoSS == null ? \"null\" : replytoSS.toString());\n+\n+                timestamp.add(\"\" + headers.getTimestamp());\n+\n+                AMQShortString typeSS = headers.getType();\n+                type.add(typeSS == null ? \"null\" : typeSS.toString());\n+\n+                AMQShortString useridSS = headers.getUserId();\n+                userid.add(useridSS == null ? \"null\" : useridSS.toString());\n+\n+                MessagePublishInfo info = null;\n+                try\n+                {\n+                    info = msg.getMessagePublishInfo();\n+                }\n+                catch (AMQException e)\n+                {\n+                    //ignore\n+                }\n+\n+                if (info != null)\n+                {\n+                    AMQShortString exchangeSS = info.getExchange();\n+                    exchange.add(exchangeSS == null ? \"null\" : exchangeSS.toString());\n+\n+                    AMQShortString routingkeySS = info.getRoutingKey();\n+                    routingkey.add(routingkeySS == null ? \"null\" : routingkeySS.toString());\n+\n+                    immediate.add(info.isImmediate() ? \"true\" : \"false\");\n+                    mandatory.add(info.isMandatory() ? \"true\" : \"false\");\n+                }\n+\n+//        msg.getPublisher(); -- only used in clustering\n+//        msg.getStoreContext();\n+//        msg.isAllContentReceived();\n+\n+            }// if headers!=null\n+\n+// need to access internal map and do lookups.\n+//        msg.isTaken();\n+//        msg.getDeliveredSubscription();\n+//        msg.isRejectedBy();\n+\n+        }\n+\n+        // if id only had the header and the divider in it then we have no data to display\n+        if (id.size() == 2)\n+        {\n+            return null;\n+        }\n+        return data;\n+    }\n+\n+    protected boolean includeMsg(AMQMessage msg, List<Long> msgids)\n+    {\n+        if (msgids == null)\n+        {\n+            return true;\n+        }\n+\n+        Long msgid = msg.getMessageId();\n+\n+        boolean found = false;\n+\n+        if (msgids != null)\n+        {\n+            //check msgid is in msgids\n+            for (Long l : msgids)\n+            {\n+                if (l.equals(msgid))\n+                {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+        }\n+        return found;\n+    }\n+\n+    public enum Columns\n+    {\n+        ID,\n+        Size,\n+        Exchange,\n+        RoutingKey,\n+        isImmediate,\n+        isMandatory,\n+        isPersistent,\n+        isRedelivered,\n+        isDelivered,\n+        App_ID,\n+        Cluster_ID,\n+        Content_Type,\n+        Correlation_ID,\n+        Delivery_Mode,\n+        Encoding,\n+        Arrival,\n+        Expiration,\n+        Priority,\n+        Property_Flag,\n+        ReplyTo,\n+        Timestamp,\n+        Type,\n+        UserID,\n+        MsgHeaders\n+    }\n+}\n+\n+", "filename": "broker/src/main/java/org/apache/qpid/tools/messagestore/commands/Show.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/security/Passwd.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/security/Passwd.java", "previous_filename": "broker/src/main/java/org/apache/qpid/server/security/Passwd.java", "sha": "c27c52eb8e4bb6706797789ee943b5f44569b7ab", "changes": 2, "status": "renamed", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/security/Passwd.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,7 +18,7 @@\n  *\n  * \n  */\n-package org.apache.qpid.server.security;\n+package org.apache.qpid.tools.security;\n \n import org.apache.commons.codec.binary.Base64;\n ", "filename": "broker/src/main/java/org/apache/qpid/tools/security/Passwd.java"}, {"additions": 51, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/CommandParser.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/CommandParser.java", "sha": "986fea32ccebea165bafedafe33fd5d2dffde70f", "changes": 51, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/utils/CommandParser.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,51 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.utils;\n+\n+public interface CommandParser\n+{\n+    /**\n+     * If there is more than one command received on the last parse request.\n+     *\n+     * Subsequent calls to parse will utilise this input rather than reading new data from the input source\n+     * @return boolean\n+     */\n+    boolean more();\n+\n+    /**\n+     * True if the currently parsed command has been requested as a background operation\n+     *\n+     * @return boolean\n+     */\n+    boolean isBackground();\n+\n+    /**\n+     * Parses user commands, and groups tokens in the\n+     * String[] format that all Java main's love.\n+     *\n+     * If more than one command is provided in one input line then the more() method will return true.\n+     * A subsequent call to parse() will continue to parse that input line before reading new input.\n+     *\n+     * @return <code>input</code> split in args[] format; null if eof.\n+     * @throws java.io.IOException if there is a problem reading from the input stream\n+     */\n+    String[] parse() throws java.io.IOException;\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/utils/CommandParser.java"}, {"additions": 90, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/Console.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/Console.java", "sha": "cf457d1ea56fda4e04249a99938ed1f8cfa6dac2", "changes": 90, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/utils/Console.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,90 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.utils;\n+\n+import java.util.List;\n+\n+public interface Console\n+{\n+    public enum CellFormat\n+    {\n+        CENTRED, LEFT, RIGHT\n+    }    \n+\n+    public static String ROW_DIVIDER = \"*divider\";\n+\n+    public void print(String... message);\n+\n+    public void println(String... message);\n+\n+    public String readln();\n+\n+    /**\n+     * Reads and parses the command line.\n+     * \n+     *\n+     * @return The next command or null\n+     */\n+    public String[] readCommand();\n+\n+    public CommandParser getCommandParser();\n+\n+    public void setCommandParser(CommandParser parser);\n+\n+    /**\n+     *\n+     *  Prints the list of String nicely.\n+     *\n+     *  +-------------+\n+     *  |  Heading    |\n+     *  +-------------+\n+     *  |  Item 1     |\n+     *  |  Item 2     |\n+     *  |  Item 3     |\n+     *  +-------------+\n+     *\n+     * @param hasTitle should list[0] be used as a heading\n+     * @param list The list of Strings to display     \n+     */\n+    public void displayList(boolean hasTitle, String... list);\n+\n+    /**\n+     *\n+     *  Prints the list of String nicely.\n+     *\n+     *  +----------------------------+\n+     *  |  Heading                   |\n+     *  +----------------------------+\n+     *  |  title      |  title       |   ..\n+     *  +----------------------------+\n+     *  |  Item 2     |  value 2     |   ..\n+     *  +----------------------------+ (*divider)\n+     *  |  Item 3     |  value 2     |   ..\n+     *  +----------------------------+\n+     *\n+     * @param title The title to display if any\n+     * @param entries the entries to display in a map.\n+     */\n+    void printMap(String title, List<List> entries);\n+\n+\n+    public void close();\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/utils/Console.java"}, {"additions": 121, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/SimpleCommandParser.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/SimpleCommandParser.java", "sha": "09444ccdd72aae463c8272f8bce83c6c255f3348", "changes": 121, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/utils/SimpleCommandParser.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,121 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.StringTokenizer;\n+\n+public class SimpleCommandParser implements CommandParser\n+{\n+    private static final String COMMAND_SEPERATOR = \";\";\n+\n+    /** Input source of commands */\n+    protected BufferedReader _reader;\n+\n+    /** The next list of commands from the command line */\n+    private StringBuilder _nextCommand = null;\n+\n+    public SimpleCommandParser(BufferedReader reader)\n+    {\n+        _reader = reader;\n+    }\n+\n+    public boolean more()\n+    {\n+        return _nextCommand != null;\n+    }\n+\n+    public boolean isBackground()\n+    {\n+        return false;\n+    }\n+\n+    public String[] parse() throws IOException\n+    {\n+        String[] commands = null;\n+\n+        String input = null;\n+\n+        if (_nextCommand == null)\n+        {\n+            input = _reader.readLine();\n+        }\n+        else\n+        {\n+            input = _nextCommand.toString();\n+            _nextCommand = null;\n+        }\n+\n+        if (input == null)\n+        {\n+            return null;\n+        }\n+\n+        StringTokenizer tok = new StringTokenizer(input, \" \");\n+\n+        int tokenCount = tok.countTokens();\n+        int index = 0;\n+\n+        if (tokenCount > 0)\n+        {\n+            commands = new String[tokenCount];\n+            boolean commandComplete = false;\n+\n+            while (tok.hasMoreTokens())\n+            {\n+                String next = tok.nextToken();\n+\n+                if (next.equals(COMMAND_SEPERATOR))\n+                {\n+                    commandComplete = true;\n+                    _nextCommand = new StringBuilder();\n+                    continue;\n+                }\n+\n+                if (commandComplete)\n+                {\n+                    _nextCommand.append(next);\n+                    _nextCommand.append(\" \");\n+                }\n+                else\n+                {\n+                    commands[index] = next;\n+                    index++;\n+                }\n+            }\n+\n+        }\n+\n+        //Reduce the String[] if not all the tokens were used in this command.\n+        // i.e. there is more than one command on the line.\n+        if (index != tokenCount)\n+        {\n+            String[] shortCommands = new String[index];\n+            System.arraycopy(commands, 0, shortCommands, 0, index);\n+            return shortCommands;\n+        }\n+        else\n+        {\n+            return commands;\n+        }\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/utils/SimpleCommandParser.java"}, {"additions": 363, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/SimpleConsole.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/SimpleConsole.java", "sha": "ec080a46112bcdef708935279803c879b5d740a4", "changes": 363, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/utils/SimpleConsole.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,363 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.tools.utils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class SimpleConsole implements Console\n+{\n+    /** SLF4J Logger. */\n+    private static Logger _devlog = LoggerFactory.getLogger(SimpleConsole.class);\n+\n+    /** Console Writer. */\n+    protected static BufferedWriter _consoleWriter;\n+\n+    /** Console Reader. */\n+    protected static BufferedReader _consoleReader;\n+\n+    /** Parser for command-line input. */\n+    protected CommandParser _parser;\n+\n+    public SimpleConsole(BufferedWriter writer, BufferedReader reader)\n+    {\n+        _consoleWriter = writer;\n+        _consoleReader = reader;\n+        _parser = new SimpleCommandParser(_consoleReader);\n+    }\n+\n+    public void print(String... message)\n+    {\n+        try\n+        {\n+            for (String s : message)\n+            {\n+                _consoleWriter.write(s);\n+            }\n+            _consoleWriter.flush();\n+        }\n+        catch (IOException e)\n+        {\n+            _devlog.error(e.getMessage() + \": Occured whilst trying to write:\" + message);\n+        }\n+\n+    }\n+\n+    public void println(String... message)\n+    {\n+        print(message);\n+        print(System.getProperty(\"line.separator\"));\n+    }\n+\n+\n+    public String readln()\n+    {\n+        try\n+        {\n+            return _consoleReader.readLine();\n+        }\n+        catch (IOException e)\n+        {\n+            _devlog.debug(\"Unable to read input due to:\" + e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    public String[] readCommand()\n+    {\n+        try\n+        {\n+            return _parser.parse();\n+        }\n+        catch (IOException e)\n+        {\n+            _devlog.error(\"Error reading command:\" + e.getMessage());\n+            return new String[0];\n+        }\n+    }\n+\n+    public CommandParser getCommandParser()\n+    {\n+        return _parser;\n+    }\n+\n+    public void setCommandParser(CommandParser parser)\n+    {\n+        _parser = parser;\n+    }\n+\n+    public void displayList(boolean hasTitle, String... list)\n+    {\n+        java.util.List<java.util.List> data = new LinkedList<List>();\n+\n+        java.util.List<String> values = new LinkedList<String>();\n+\n+        data.add(values);\n+\n+        for (String value : list)\n+        {\n+            values.add(value);\n+        }\n+\n+        if (hasTitle)\n+        {\n+            values.add(1, \"*divider\");\n+        }\n+\n+        printMap(null, data);\n+    }\n+\n+    /**\n+     *\n+     *  Prints the list of String nicely.\n+     *\n+     *  +----------------------------+\n+     *  |  Heading                   |\n+     *  +----------------------------+\n+     *  |  title      |  title       |   ..\n+     *  +----------------------------+\n+     *  |  Item 2     |  value 2     |   ..\n+     *  |  Item 3     |  value 2     |   ..\n+     *  +----------------------------+\n+     *\n+     * @param title The title to display if any\n+     * @param entries the entries to display in a map.\n+     */\n+    public void printMap(String title, java.util.List<java.util.List> entries)\n+    {\n+        try\n+        {\n+            int columns = entries.size();\n+\n+            int[] columnWidth = new int[columns];\n+\n+            // calculate row count\n+            int rowMax = 0;\n+\n+            //the longest item\n+            int itemMax = 0;\n+\n+            for (int i = 0; i < columns; i++)\n+            {\n+                int columnIRowMax = entries.get(i).size();\n+\n+                if (columnIRowMax > rowMax)\n+                {\n+                    rowMax = columnIRowMax;\n+                }\n+                for (Object values : entries.get(i))\n+                {\n+                    if (values.toString().equals(Console.ROW_DIVIDER))\n+                    {\n+                        continue;\n+                    }\n+\n+                    int itemLength = values.toString().length();\n+\n+                    //note for single width\n+                    if (itemLength > itemMax)\n+                    {\n+                        itemMax = itemLength;\n+                    }\n+\n+                    //note for mulit width\n+                    if (itemLength > columnWidth[i])\n+                    {\n+                        columnWidth[i] = itemLength;\n+                    }\n+\n+                }\n+            }\n+\n+            int tableWidth = 0;\n+\n+\n+            for (int i = 0; i < columns; i++)\n+            {\n+                // plus 2 for the space padding\n+                columnWidth[i] += 2;\n+            }\n+            for (int size : columnWidth)\n+            {\n+                tableWidth += size;\n+            }\n+            tableWidth += (columns - 1);\n+\n+            if (title != null)\n+            {\n+                if (title.length() > tableWidth)\n+                {\n+                    tableWidth = title.length();\n+                }\n+\n+                printCellRow(\"+\", \"-\", tableWidth);\n+\n+                printCell(CellFormat.CENTRED, \"|\", tableWidth, \" \" + title + \" \", 0);\n+                _consoleWriter.newLine();\n+\n+            }\n+\n+            //put top line | or bottom of title\n+            printCellRow(\"+\", \"-\", tableWidth);\n+\n+            //print the table data\n+            int row = 0;\n+\n+            for (; row < rowMax; row++)\n+            {\n+                for (int i = 0; i < columns; i++)\n+                {\n+                    java.util.List columnData = entries.get(i);\n+\n+                    String value;\n+                    // does this column have a value for this row\n+                    if (columnData.size() > row)\n+                    {\n+                        value = \" \" + columnData.get(row).toString() + \" \";\n+                    }\n+                    else\n+                    {\n+                        value = \"  \";\n+                    }\n+\n+                    if (i == 0 && value.equals(\" \" + Console.ROW_DIVIDER + \" \"))\n+                    {\n+                        printCellRow(\"+\", \"-\", tableWidth);\n+                        //move on to the next row\n+                        break;\n+                    }\n+                    else\n+                    {\n+                        printCell(CellFormat.LEFT, \"|\", columnWidth[i], value, i);\n+                    }\n+\n+                    // if it is the last row then do a new line.\n+                    if (i == columns - 1)\n+                    {\n+                        _consoleWriter.newLine();\n+                    }\n+                }\n+            }\n+\n+            printCellRow(\"+\", \"-\", tableWidth);\n+\n+        }\n+        catch (IOException e)\n+        {\n+            _devlog.error(e.getMessage() + \": Occured whilst trying to write.\");\n+        }\n+    }\n+\n+    public void close()\n+    {\n+\n+        try\n+        {\n+            _consoleReader.close();\n+        }\n+        catch (IOException e)\n+        {\n+            _devlog.error(e.getMessage() + \": Occured whilst trying to close reader.\");\n+        }\n+\n+        try\n+        {\n+\n+            _consoleWriter.close();\n+        }\n+        catch (IOException e)\n+        {\n+            _devlog.error(e.getMessage() + \": Occured whilst trying to close writer.\");\n+        }\n+\n+    }\n+\n+    private void printCell(CellFormat format, String edge, int cellWidth, String cell, int column) throws IOException\n+    {\n+        int pad = cellWidth - cell.length();\n+\n+        if (column == 0)\n+        {\n+            _consoleWriter.write(edge);\n+        }\n+\n+        switch (format)\n+        {\n+            case CENTRED:\n+                printPad(\" \", pad / 2);\n+                break;\n+            case RIGHT:\n+                printPad(\" \", pad);\n+                break;\n+        }\n+\n+        _consoleWriter.write(cell);\n+\n+\n+        switch (format)\n+        {\n+            case CENTRED:\n+                // if pad isn't even put the extra one on the right\n+                if (pad % 2 == 0)\n+                {\n+                    printPad(\" \", pad / 2);\n+                }\n+                else\n+                {\n+                    printPad(\" \", (pad / 2) + 1);\n+                }\n+                break;\n+            case LEFT:\n+                printPad(\" \", pad);\n+                break;\n+        }\n+\n+\n+        _consoleWriter.write(edge);\n+\n+    }\n+\n+    private void printCellRow(String edge, String mid, int cellWidth) throws IOException\n+    {\n+        _consoleWriter.write(edge);\n+\n+        printPad(mid, cellWidth);\n+\n+        _consoleWriter.write(edge);\n+        _consoleWriter.newLine();\n+    }\n+\n+    private void printPad(String padChar, int count) throws IOException\n+    {\n+        for (int i = 0; i < count; i++)\n+        {\n+            _consoleWriter.write(padChar);\n+        }\n+    }\n+\n+\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/utils/SimpleConsole.java"}, {"additions": 51, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/utils/CommandParser.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/utils/CommandParser.java", "sha": "6a9552905969bf9971fbc42ad3e6b037701adac6", "changes": 51, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/utils/utils/CommandParser.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,51 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package com.redhat.etp.qpid.utils;\n+\n+public interface CommandParser\n+{\n+    /**\n+     * If there is more than one command received on the last parse request.\n+     *\n+     * Subsequent calls to parse will utilise this input rather than reading new data from the input source\n+     * @return boolean\n+     */\n+    boolean more();\n+\n+    /**\n+     * True if the currently parsed command has been requested as a background operation\n+     *\n+     * @return boolean\n+     */\n+    boolean isBackground();\n+\n+    /**\n+     * Parses user commands, and groups tokens in the\n+     * String[] format that all Java main's love.\n+     *\n+     * If more than one command is provided in one input line then the more() method will return true.\n+     * A subsequent call to parse() will continue to parse that input line before reading new input.\n+     *\n+     * @return <code>input</code> split in args[] format; null if eof.\n+     * @throws java.io.IOException if there is a problem reading from the input stream\n+     */\n+    String[] parse() throws java.io.IOException;\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/utils/utils/CommandParser.java"}, {"additions": 75, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/utils/Console.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/utils/Console.java", "sha": "892a48254c44fcd24212c0fbcb5311159896ba6e", "changes": 75, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/utils/utils/Console.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,75 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package com.redhat.etp.qpid;\n+\n+import java.util.List;\n+\n+public interface Console\n+{\n+    public enum CellFormat\n+    {\n+        CENTRED, LEFT, RIGHT\n+    }    \n+\n+    public static String ROW_DIVIDER = \"*divider\";\n+\n+    public void print(String... message);\n+\n+    public void println(String... message);\n+\n+    public String[] readln();\n+\n+    /**\n+     *\n+     *  Prints the list of String nicely.\n+     *\n+     *  +-------------+\n+     *  |  Heading    |\n+     *  +-------------+\n+     *  |  Item 1     |\n+     *  |  Item 2     |\n+     *  |  Item 3     |\n+     *  +-------------+\n+     *\n+     * @param hasTitle should list[0] be used as a heading\n+     * @param list The list of Strings to display     \n+     */\n+    public void displayList(boolean hasTitle, String... list);\n+\n+    /**\n+     *\n+     *  Prints the list of String nicely.\n+     *\n+     *  +----------------------------+\n+     *  |  Heading                   |\n+     *  +----------------------------+\n+     *  |  title      |  title       |   ..\n+     *  +----------------------------+\n+     *  |  Item 2     |  value 2     |   ..\n+     *  +----------------------------+ (*divider)\n+     *  |  Item 3     |  value 2     |   ..\n+     *  +----------------------------+\n+     *\n+     * @param title The title to display if any\n+     * @param entries the entries to display in a map.\n+     */\n+    void printMap(String title, List<List> entries);\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/utils/utils/Console.java"}, {"additions": 352, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/utils/RSHCommandParser.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/utils/RSHCommandParser.java", "sha": "ea4045c917decf42d0935b6eceb023e7b94c68ee", "changes": 352, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/utils/utils/RSHCommandParser.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,352 @@\n+/*\n+ * The Java Shell: jsh core -- RELEASE: alpha3\n+ * (C)1999 Osvaldo Pinali Doederlein.\n+ *\n+ * LICENSE\n+ * =======\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU General Public License\n+ * as published by the Free Software Foundation; either version 2\n+ * of the License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; if not, write to the Free Software\n+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n+ *\n+ * CHANGES\n+ * =======\n+ * 1.0.2 - Added support for non-quoted '\\' escape char (Not interpreted by the shell)\n+ * 1.0.1 - Added support for arguments in aliases\n+ * 1.0.0 - Initial release; split from Shell and enhanced a lot.\n+ *\n+ * LINKS\n+ * =====\n+ * Contact: mailto@osvaldo.visionnaire.com.br, mailto@g.collin@appliweb.net\n+ * Site #1: http://www.geocities.com/ResearchTriangle/Node/2005/\n+ * Site #2: http://www.appliweb.net/jsh\n+ */\n+\n+package com.redhat.etp.qpid.utils;\n+\n+import java.io.BufferedReader;\n+import java.util.Vector;\n+\n+/**\n+ * The Java Shell.\n+ * <p>\n+ * Provides an environment for launching and controlling Java apps.\n+ * <p>\n+ * TODO: - Support for applets!\n+ *       - Support for variable replacement\n+ *\n+ * @author Osvaldo Pinali Doederlein.\n+ */\n+public class RSHCommandParser implements CommandParser\n+{\n+    /** Where commands come from. */\n+    protected BufferedReader reader;\n+    /** Continuation for command line. */\n+    protected String contLine = null;\n+    /** Run next command in background? */\n+    protected boolean background;\n+    protected String[] env; // Commands passed in args.\n+\n+    public RSHCommandParser(BufferedReader reader)\n+    {\n+        this(reader, null);\n+    }\n+\n+    public RSHCommandParser(BufferedReader reader, String env[])\n+    {\n+        this.reader = reader;\n+        this.env = env;\n+        if (env == null)\n+        {\n+            this.env = new String[0];\n+        }\n+    }\n+\n+\n+    public boolean more()\n+    {\n+        return contLine != null;\n+    }\n+\n+    public boolean isBackground()\n+    {\n+        return background;\n+    }\n+\n+    /**\n+     * Solves and expands aliases in an argument array.\n+     * This expansion affects only the first (if any) argument; the\n+     * typical thing to do, as we don't want to expand parameters.\n+     * We recursively parse the result to be sure we expand everything.\n+     * For example, an alias can be expanded to further aliases, or it can contains args.\n+     *\n+     * @param args Raw arguments.\n+     * @return <code>args</code> resolved and expanded.\n+     */\n+    public static String[] expand(String[] args)\n+    {\n+        if (args.length > 0)\n+        {\n+            String expanded = args[0];//Alias.resolve(args[0]);\n+\n+            // Try to expand recursively the command line\n+            if (expanded != args[0])\n+            {\n+                RSHCommandParser recurse = new RSHCommandParser(new BufferedReader(\n+                        new java.io.StringReader(expanded)));\n+\n+                try\n+                {\n+                    String cmdLine[] = recurse.parse();\n+                    cmdLine = recurse.expand(cmdLine);\n+\n+                    // do we need to handle new arguments and insert them in the command array ?\n+                    if (cmdLine.length > 1)\n+                    {\n+                        String[] newArgs = new String[cmdLine.length + args.length - 1];\n+                        System.arraycopy(cmdLine, 0, newArgs, 0, cmdLine.length);\n+\n+                        if (args.length > 1)\n+                        {\n+                            System.arraycopy(args, 1, newArgs, cmdLine.length, args.length - 1);\n+                        }\n+\n+                        args = newArgs;\n+                    }\n+                    else if (cmdLine.length == 1)\n+                    {\n+                        args[0] = cmdLine[0];\n+                    }\n+                }\n+                catch (java.io.IOException e)\n+                {\n+                }\n+            }\n+        }\n+\n+        return args;\n+    }\n+\n+    public String[] parse() throws java.io.IOException\n+    {\n+        final int READ = 0, QUOTE = 1, SKIP = 2, ESCAPE = 3, NONQUOTEDESCAPE = 4, VARIABLE = 5;\n+        final int EOF = 0xFFFF;\n+        int mode = SKIP;\n+        Vector<String> args = new Vector<String>();\n+        StringBuffer current = new StringBuffer();\n+        StringBuffer varName = null;\n+        background = false;\n+        String line;\n+\n+        if (contLine == null)\n+        {\n+            line = reader.readLine();\n+        }\n+        else\n+        {\n+            line = contLine;\n+            contLine = null;\n+        }\n+\n+        if (line == null)\n+        {\n+            reader = null;\n+            return null;\n+        }\n+\n+        for (int pos = 0; pos < line.length(); ++pos)\n+        {\n+            char c = line.charAt(pos);\n+\n+            switch (mode)\n+            {\n+                case SKIP:\n+                    switch (c)\n+                    {\n+                        case' ':\n+                        case'\\t':\n+                            break;\n+                        case'\\\"':\n+                            mode = QUOTE;\n+                            break;\n+                        case'&':\n+                            background = true;\n+                        case';':\n+                            contLine = line.substring(pos + 1);\n+                            pos = line.length();\n+                            break;\n+                        default:\n+                            mode = READ;\n+                            --pos;\n+                    }\n+                    break;\n+\n+                case READ:\n+                    switch (c)\n+                    {\n+                        case'\\\"':\n+                            mode = QUOTE;\n+                            break;\n+                        case';':\n+                        case'&':\n+                            --pos;\n+                        case' ':\n+                        case'\\t':\n+                            mode = SKIP;\n+                            break;\n+                        case'\\\\':\n+                            mode = NONQUOTEDESCAPE;\n+                            break;\n+                        case'$':\n+                            mode = VARIABLE;\n+                            varName = new StringBuffer();\n+                            break;\n+                        default:\n+                            current.append(c);\n+                    }\n+                    if ((mode != READ) && (mode != NONQUOTEDESCAPE))\n+                    {\n+                        args.addElement(current.toString());\n+                        current = new StringBuffer();\n+                    }\n+                    break;\n+\n+                case QUOTE:\n+                    switch (c)\n+                    {\n+                        case'\\\"':\n+                            mode = READ;\n+                            break;\n+                        case'\\\\':\n+                            mode = ESCAPE;\n+                            break;\n+                        default:\n+                            current.append(c);\n+                    }\n+                    break;\n+\n+                case ESCAPE:\n+                    switch (c)\n+                    {\n+                        case'n':\n+                            c = '\\n';\n+                            break;\n+                        case'r':\n+                            c = '\\r';\n+                            break;\n+                        case't':\n+                            c = '\\t';\n+                            break;\n+                        case'b':\n+                            c = '\\b';\n+                            break;\n+                        case'f':\n+                            c = '\\f';\n+                            break;\n+                        default:\n+                            current.append('\\\\');\n+                            break;\n+                    }\n+                    mode = QUOTE;\n+                    current.append(c);\n+                    break;\n+                case NONQUOTEDESCAPE:\n+                    switch (c)\n+                    {\n+                        case';':\n+                            mode = READ;\n+                            current.append(c);\n+                            break;\n+                        default: // This is not a escaped char.\n+                            mode = READ;\n+                            current.append('\\\\');\n+                            current.append(c);\n+                            break;\n+                    }\n+                    break;\n+                case VARIABLE:\n+                    switch (c)\n+                    {\n+                        case'$':\n+                        {\n+//                            String val = Set.get(new String(varName));\n+//                            if (val != null)\n+//                            {\n+//                                current.append(val);\n+//                            }\n+                            mode = READ;\n+                            break;\n+                        }\n+                        case'@':\n+                        {\n+                            StringBuffer val = new StringBuffer();\n+                            int i;\n+                            for (i = 0; i < env.length; i++)\n+                            {\n+                                val.append(env[i]);\n+                                val.append(' ');\n+                            }\n+                            current.append(val);\n+                            mode = READ;\n+                            break;\n+                        }\n+                        case'0':\n+                        case'1':\n+                        case'2':\n+                        case'3':\n+                        case'4':\n+                        case'5':\n+                        case'6':\n+                        case'7':\n+                        case'8':\n+                        case'9':\n+                        {\n+                            if (varName.length() == 0)\n+                            {\n+                                int value = Integer.parseInt(new String(new char[]{c}));\n+                                if (env.length > value)\n+                                {\n+                                    current.append(env[value]);\n+                                }\n+                                mode = READ;\n+                                break;\n+                            }\n+                            // else fall back\n+                        }\n+                        default:\n+                            varName.append(c);\n+                            break;\n+                    }\n+                    break;\n+            }\n+        }\n+\n+        if (current.length() > 0)\n+        {\n+            args.addElement(current.toString());\n+        }\n+        return expand(toArray(args));\n+    }\n+\n+    private String[] toArray(Vector strings)\n+    {\n+        String[] arr = new String[strings.size()];\n+\n+        for (int i = 0; i < strings.size(); ++i)\n+        {\n+            arr[i] = (String) strings.elementAt(i);\n+        }\n+\n+        return arr;\n+    }\n+\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/utils/utils/RSHCommandParser.java"}, {"additions": 116, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/utils/SimpleCommandParser.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/main/java/org/apache/qpid/tools/utils/utils/SimpleCommandParser.java", "sha": "98e816554e2e72199527e0f48f4684fbc6a4d6a9", "changes": 116, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/main/java/org/apache/qpid/tools/utils/utils/SimpleCommandParser.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,116 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package com.redhat.etp.qpid.utils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.StringTokenizer;\n+\n+public class SimpleCommandParser implements CommandParser\n+{\n+    private static final String COMMAND_SEPERATOR = \";\";\n+\n+    /** Input source of commands */\n+    protected BufferedReader _reader;\n+\n+    /** The next list of commands from the command line */\n+    private StringBuilder _nextCommand = null;\n+\n+    public SimpleCommandParser(BufferedReader reader)\n+    {\n+        _reader = reader;\n+    }\n+\n+    public boolean more()\n+    {\n+        return _nextCommand != null;\n+    }\n+\n+    public boolean isBackground()\n+    {\n+        return false;\n+    }\n+\n+    public String[] parse() throws IOException\n+    {\n+        String[] commands = null;\n+\n+        String input = null;\n+\n+        if (_nextCommand == null)\n+        {\n+            input = _reader.readLine();\n+        }\n+        else\n+        {\n+            input = _nextCommand.toString();\n+            _nextCommand = null;\n+        }\n+\n+        StringTokenizer tok = new StringTokenizer(input, \" \");\n+\n+        int tokenCount = tok.countTokens();\n+        int index = 0;\n+\n+        if (tokenCount > 0)\n+        {\n+            commands = new String[tokenCount];\n+            boolean commandComplete = false;\n+\n+            while (tok.hasMoreTokens())\n+            {\n+                String next = tok.nextToken();\n+\n+                if (next.equals(COMMAND_SEPERATOR))\n+                {\n+                    commandComplete = true;\n+                    _nextCommand = new StringBuilder();\n+                    continue;\n+                }\n+\n+                if (commandComplete)\n+                {\n+                    _nextCommand.append(next);\n+                    _nextCommand.append(\" \");\n+                }\n+                else\n+                {\n+                    commands[index] = next;\n+                    index++;\n+                }\n+            }\n+\n+        }\n+\n+        //Reduce the String[] if not all the tokens were used in this command.\n+        // i.e. there is more than one command on the line.\n+        if (index != tokenCount)\n+        {\n+            String[] shortCommands = new String[index];\n+            System.arraycopy(commands, 0, shortCommands, 0, index);\n+            return shortCommands;\n+        }\n+        else\n+        {\n+            return commands;\n+        }\n+    }\n+}", "filename": "broker/src/main/java/org/apache/qpid/tools/utils/utils/SimpleCommandParser.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/test/java/org/apache/qpid/server/exchange/ExchangeMBeanTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/test/java/org/apache/qpid/server/exchange/ExchangeMBeanTest.java", "sha": "3bca0a4545735ba98e682dbedc67e2a5169f951a", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/exchange/ExchangeMBeanTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.exchange;", "filename": "broker/src/test/java/org/apache/qpid/server/exchange/ExchangeMBeanTest.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/test/java/org/apache/qpid/server/protocol/TestMinaProtocolSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/test/java/org/apache/qpid/server/protocol/TestMinaProtocolSession.java", "sha": "0c0d8f471eb04c6a6ea0d5ae5ba8d7cb17887f29", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/protocol/TestMinaProtocolSession.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.protocol;", "filename": "broker/src/test/java/org/apache/qpid/server/protocol/TestMinaProtocolSession.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java", "sha": "94d67848c608032ec9d70c94fcf554e3b3eac0b1", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.queue;", "filename": "broker/src/test/java/org/apache/qpid/server/queue/AMQQueueAlertTest.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java", "sha": "76b67314e69f92e32d0a397af528216f2e136baf", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker/src/test/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.queue;", "filename": "broker/src/test/java/org/apache/qpid/server/queue/AMQQueueMBeanTest.java"}, {"additions": 33, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/publisher/MonitorMessageDispatcher.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/publisher/MonitorMessageDispatcher.java", "sha": "b6544db995616a5914e846f7bc132abc390d7881", "changes": 59, "status": "modified", "deletions": 26, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/example/src/main/java/org/apache/qpid/example/publisher/MonitorMessageDispatcher.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,18 +18,18 @@\n  */\n package org.apache.qpid.example.publisher;\n \n-import org.apache.log4j.Logger;\n import org.apache.log4j.BasicConfigurator;\n+import org.apache.log4j.Logger;\n \n-import javax.jms.*;\n-\n-import java.util.Properties;\n+import javax.jms.DeliveryMode;\n+import javax.jms.JMSException;\n \n /**\n- * Class that sends heartbeat messages to allow monitoring of message consumption\n- * Sends regular (currently 20 seconds apart) heartbeat message\n+ * Class that sends heartbeat messages to allow monitoring of message consumption Sends regular (currently 20 seconds\n+ * apart) heartbeat message\n  */\n-public class MonitorMessageDispatcher {\n+public class MonitorMessageDispatcher\n+{\n \n     private static final Logger _logger = Logger.getLogger(MonitorMessageDispatcher.class);\n \n@@ -39,17 +39,18 @@\n \n     /**\n      * Easy entry point for running a message dispatcher for monitoring consumption\n+     *\n      * @param args\n      */\n     public static void main(String[] args)\n     {\n-\n         //Switch on logging appropriately for your app\n         BasicConfigurator.configure();\n \n         try\n         {\n-            while(true)\n+            int i =0;\n+            while (i < 1000)\n             {\n                 try\n                 {\n@@ -62,17 +63,18 @@ public static void main(String[] args)\n                     }\n \n                     //sleep for twenty seconds and then publish again - change if appropriate\n-                    Thread.sleep(20000);\n+                    //Thread.sleep(1000);\n+                    i++   ;\n                 }\n-                catch(UndeliveredMessageException a)\n+                catch (UndeliveredMessageException a)\n                 {\n                     //trigger application specific failure handling here\n                     _logger.error(\"Problem delivering monitor message\");\n                     break;\n                 }\n             }\n         }\n-        catch(Exception e)\n+        catch (Exception e)\n         {\n             _logger.error(\"Error trying to dispatch AMS monitor message: \" + e);\n             System.exit(1);\n@@ -81,7 +83,7 @@ public static void main(String[] args)\n         {\n             if (getMonitorPublisher() != null)\n             {\n-               getMonitorPublisher().cleanup();\n+                getMonitorPublisher().cleanup();\n             }\n         }\n \n@@ -90,19 +92,24 @@ public static void main(String[] args)\n \n     /**\n      * Publish heartbeat message\n+     *\n      * @throws JMSException\n      * @throws UndeliveredMessageException\n      */\n     public static void publish() throws JMSException, UndeliveredMessageException\n     {\n         //Send the message generated from the payload using the _publisher\n-        getMonitorPublisher().sendImmediateMessage\n-          (FileMessageFactory.createSimpleEventMessage(getMonitorPublisher().getSession(),\"monitor:\" +System.currentTimeMillis()));\n+//        getMonitorPublisher().sendImmediateMessage\n+//          (FileMessageFactory.createSimpleEventMessage(getMonitorPublisher().getSession(),\"monitor:\" +System.currentTimeMillis()));\n+\n+        getMonitorPublisher().sendMessage\n+                (getMonitorPublisher()._session,\n+                 FileMessageFactory.createSimpleEventMessage(getMonitorPublisher().getSession(), \"monitor:\" + System.currentTimeMillis()),\n+                 DeliveryMode.PERSISTENT, false, true);\n+\n     }\n \n-    /**\n-     * Cleanup publishers\n-     */\n+    /** Cleanup publishers */\n     public static void cleanup()\n     {\n         if (getMonitorPublisher() != null)\n@@ -119,16 +126,16 @@ public static void cleanup()\n     //Returns a _publisher for the monitor queue\n     private static MonitorPublisher getMonitorPublisher()\n     {\n-       if (_monitorPublisher != null)\n-       {\n-           return _monitorPublisher;\n-       }\n+        if (_monitorPublisher != null)\n+        {\n+            return _monitorPublisher;\n+        }\n \n-       //Create a _publisher using failover details and constant for monitor queue\n-       _monitorPublisher = new MonitorPublisher();\n+        //Create a _publisher using failover details and constant for monitor queue\n+        _monitorPublisher = new MonitorPublisher();\n \n-       _monitorPublisher.setName(MonitorMessageDispatcher.DEFAULT_MONITOR_PUB_NAME);\n-       return _monitorPublisher;\n+        _monitorPublisher.setName(MonitorMessageDispatcher.DEFAULT_MONITOR_PUB_NAME);\n+        return _monitorPublisher;\n     }\n \n }", "filename": "client/example/src/main/java/org/apache/qpid/example/publisher/MonitorMessageDispatcher.java"}, {"additions": 43, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/publisher/MonitorPublisher.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/publisher/MonitorPublisher.java", "sha": "a67b602e58485329d9eedf81469d90221c302cb6", "changes": 53, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/example/src/main/java/org/apache/qpid/example/publisher/MonitorPublisher.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,15 +18,17 @@\n  */\n package org.apache.qpid.example.publisher;\n \n-import javax.jms.Message;\n+import org.apache.log4j.Logger;\n+import org.apache.qpid.client.BasicMessageProducer;\n+\n import javax.jms.DeliveryMode;\n import javax.jms.JMSException;\n-import org.apache.qpid.client.BasicMessageProducer;\n-import org.apache.log4j.Logger;\n+import javax.jms.Message;\n+import javax.jms.Session;\n \n /**\n- * Subclass of Publisher which uses QPID functionality to send a heartbeat message\n- * Note immediate flag not available via JMS MessageProducer\n+ * Subclass of Publisher which uses QPID functionality to send a heartbeat message Note immediate flag not available via\n+ * JMS MessageProducer\n  */\n public class MonitorPublisher extends Publisher\n {\n@@ -40,14 +42,45 @@ public MonitorPublisher()\n         super();\n     }\n \n-     /*\n-     * Publishes a non-persistent message using transacted session\n-     */\n+    /*\n+    * Publishes a message using given details\n+    */\n+    public boolean sendMessage(Session session, Message message, int deliveryMode,\n+                                        boolean immediate, boolean commit) throws UndeliveredMessageException\n+    {\n+        try\n+        {\n+            _producer = (BasicMessageProducer) session.createProducer(_destination);\n+\n+            _producer.send(message, deliveryMode, immediate);\n+\n+            if (commit)\n+            {\n+                //commit the message send and close the transaction\n+                _session.commit();\n+            }\n+\n+        }\n+        catch (JMSException e)\n+        {\n+            //Have to assume our commit failed but do not rollback here as channel closed\n+            _log.error(e);\n+            e.printStackTrace();\n+            throw new UndeliveredMessageException(\"Cannot deliver immediate message\", e);\n+        }\n+\n+        _log.info(_name + \" finished sending message: \" + message);\n+        return true;\n+    }\n+\n+    /*\n+    * Publishes a non-persistent message using transacted session\n+    */\n     public boolean sendImmediateMessage(Message message) throws UndeliveredMessageException\n     {\n         try\n         {\n-             _producer = (BasicMessageProducer)_session.createProducer(_destination);\n+            _producer = (BasicMessageProducer) _session.createProducer(_destination);\n \n             //Send message via our producer which is not persistent and is immediate\n             //NB: not available via jms interface MessageProducer\n@@ -62,7 +95,7 @@ public boolean sendImmediateMessage(Message message) throws UndeliveredMessageEx\n             //Have to assume our commit failed but do not rollback here as channel closed\n             _log.error(e);\n             e.printStackTrace();\n-            throw new UndeliveredMessageException(\"Cannot deliver immediate message\",e);\n+            throw new UndeliveredMessageException(\"Cannot deliver immediate message\", e);\n         }\n \n         _log.info(_name + \" finished sending message: \" + message);", "filename": "client/example/src/main/java/org/apache/qpid/example/publisher/MonitorPublisher.java"}, {"additions": 72, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/pubsub/Client.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/pubsub/Client.java", "sha": "e32ee0ba737f8cf42e0d0249995dcb3d13dcc759", "changes": 72, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/example/src/main/java/org/apache/qpid/example/pubsub/Client.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,72 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.example.pubsub;\n+\n+import javax.jms.Connection;\n+import javax.jms.Destination;\n+import javax.jms.JMSException;\n+import javax.jms.Session;\n+import javax.naming.NamingException;\n+\n+/**\n+ * An abstract base class that wraps up the creation of a JMS client utilising JNDI\n+ */\n+public abstract class Client\n+{\n+    protected ConnectionSetup _setup;\n+\n+    protected Connection _connection;\n+    protected Destination _destination;\n+    protected Session _session;\n+\n+    public Client(String destination)\n+    {\n+        if (destination == null)\n+        {\n+            destination = ConnectionSetup.TOPIC_JNDI_NAME;\n+        }\n+\n+        try\n+        {\n+            _setup = new ConnectionSetup();\n+        }\n+        catch (NamingException e)\n+        {\n+            //ignore\n+        }\n+\n+        if (_setup != null)\n+        {\n+            try\n+            {\n+                _connection = _setup.getConnectionFactory().createConnection();\n+                _destination = _setup.getDestination(destination);\n+            }\n+            catch (JMSException e)\n+            {\n+                System.err.println(e.getMessage());\n+            }\n+        }\n+    }\n+\n+    public abstract void start();\n+\n+}\n\\ No newline at end of file", "filename": "client/example/src/main/java/org/apache/qpid/example/pubsub/Client.java"}, {"additions": 123, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/pubsub/ConnectionSetup.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/pubsub/ConnectionSetup.java", "sha": "c4edd9034fae5e2b96ad93f20d4349c951cda2c0", "changes": 123, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/example/src/main/java/org/apache/qpid/example/pubsub/ConnectionSetup.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,123 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.example.pubsub;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.jms.Destination;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import java.util.Properties;\n+\n+/**\n+ * This ConnectionSetup is a wrapper around JNDI it creates a number of entries.\n+ *\n+ * It is equivalent to a PropertyFile of value:\n+ *\n+ * connectionfactory.local=amqp://guest:guest@clientid/test?brokerlist='localhost'\n+ * connectionfactory.vm=amqp://guest:guest@clientid/test?brokerlist='vm://:1'\n+ *\n+ * queue.queue=example.MyQueue\n+ * topic.topic=example.hierarical.topic\n+ *\n+ */\n+public class ConnectionSetup\n+{\n+    final static String INITIAL_CONTEXT_FACTORY = \"org.apache.qpid.jndi.PropertiesFileInitialContextFactory\";\n+\n+    final static String CONNECTION_JNDI_NAME = \"local\";\n+    final static String CONNECTION_NAME = \"amqp://guest:guest@clientid/test?brokerlist='localhost'\";\n+\n+    public static final String QUEUE_JNDI_NAME = \"queue\";\n+    final static String QUEUE_NAME = \"example.MyQueue\";\n+\n+    public static final String TOPIC_JNDI_NAME = \"topic\";\n+    final static String TOPIC_NAME = \"example.hierarical.topic\";\n+\n+    private Context _ctx;\n+\n+    public ConnectionSetup() throws NamingException\n+    {\n+\n+        // Set the properties ...\n+        Properties properties = new Properties();\n+        properties.put(Context.INITIAL_CONTEXT_FACTORY, INITIAL_CONTEXT_FACTORY);\n+        properties.put(\"connectionfactory.\" + CONNECTION_JNDI_NAME, CONNECTION_NAME);\n+        properties.put(\"connectionfactory.\" + \"vm\", \"amqp://guest:guest@clientid/test?brokerlist='vm://:1'\");\n+\n+        properties.put(\"queue.\" + QUEUE_JNDI_NAME, QUEUE_NAME);\n+        properties.put(\"topic.\" + TOPIC_JNDI_NAME, TOPIC_NAME);\n+        // Create the initial context\n+        _ctx = new InitialContext(properties);\n+\n+    }\n+\n+    public ConnectionSetup(Properties properties) throws NamingException\n+    {\n+        _ctx = new InitialContext(properties);\n+    }\n+\n+    public ConnectionFactory getConnectionFactory()\n+    {\n+\n+        // Perform the lookups\n+        try\n+        {\n+            return (ConnectionFactory) _ctx.lookup(CONNECTION_JNDI_NAME);\n+        }\n+        catch (NamingException e)\n+        {\n+            //ignore\n+        }\n+        return null;\n+    }\n+\n+    public Destination getDestination(String jndiName)\n+    {\n+        // Perform the lookups\n+        try\n+        {\n+            return (Destination) _ctx.lookup(jndiName);\n+        }\n+        catch (ClassCastException cce)\n+        {\n+            //ignore\n+        }\n+        catch (NamingException ne)\n+        {\n+            //ignore\n+        }\n+        return null;\n+    }\n+\n+\n+    public void close()\n+    {\n+        try\n+        {\n+            _ctx.close();\n+        }\n+        catch (NamingException e)\n+        {\n+            //ignore\n+        }\n+    }\n+}", "filename": "client/example/src/main/java/org/apache/qpid/example/pubsub/ConnectionSetup.java"}, {"additions": 81, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/pubsub/Publisher.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/pubsub/Publisher.java", "sha": "dd936e429f1879606212da13a829471ae95c4a73", "changes": 81, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/example/src/main/java/org/apache/qpid/example/pubsub/Publisher.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,81 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.example.pubsub;\n+\n+import javax.jms.JMSException;\n+import javax.jms.MessageProducer;\n+import javax.jms.Session;\n+\n+/**\n+ * A simple Publisher example.\n+ *\n+ * The class can take two arguments.\n+ * java Publisher <destination> <msgCount>\n+ * Where:\n+ * destination is either 'topic' or 'queue'  (Default: topic)\n+ * msgCount is the number of messages to send (Default : 100)\n+ *\n+ */\n+public class Publisher extends Client\n+{\n+    int _msgCount;\n+\n+    public Publisher(String destination, int msgCount)\n+    {\n+        super(destination);\n+        _msgCount = msgCount;\n+    }\n+\n+    public void start()\n+    {\n+        try\n+        {\n+            _session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+            MessageProducer _producer = _session.createProducer(_destination);\n+\n+            for (int msgCount = 0; msgCount < _msgCount; msgCount++)\n+            {\n+                _producer.send(_session.createTextMessage(\"msg:\" + msgCount));\n+                System.out.println(\"Sent:\" + msgCount);\n+            }\n+\n+            System.out.println(\"Done.\");\n+            _connection.close();\n+        }\n+        catch (JMSException e)\n+        {\n+            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.\n+        }\n+    }\n+\n+\n+    public static void main(String[] args)\n+    {\n+\n+        String destination = args.length > 2 ? args[1] : null;\n+\n+        int msgCount = args.length > 2 ? Integer.parseInt(args[2]) : 100;\n+\n+        new Publisher(destination, msgCount).start();\n+    }\n+\n+}", "filename": "client/example/src/main/java/org/apache/qpid/example/pubsub/Publisher.java"}, {"additions": 98, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/pubsub/Subscriber.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/example/src/main/java/org/apache/qpid/example/pubsub/Subscriber.java", "sha": "f2d736701f1c386bf7e627cb8d8dee300e0edece", "changes": 98, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/example/src/main/java/org/apache/qpid/example/pubsub/Subscriber.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,98 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.    \n+ *\n+ * \n+ */\n+package org.apache.qpid.example.pubsub;\n+\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+import javax.jms.MessageListener;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+import javax.jms.Topic;\n+import java.util.concurrent.CountDownLatch;\n+\n+\n+/**\n+ * Simple client that listens for the specified number of msgs on the given Destinaton\n+ *\n+ * The class can take two arguments.\n+ * java Subscriber <destination> <msgCount>\n+ * Where:\n+ * destination is either 'topic' or 'queue'  (Default: topic)\n+ * msgCount is the number of messages to send (Default : 100)\n+ */\n+public class Subscriber extends Client implements MessageListener\n+{\n+\n+    CountDownLatch _count;\n+\n+    public Subscriber(String destination, int msgCount)\n+    {\n+        super(destination);\n+        _count = new CountDownLatch(msgCount);\n+    }\n+\n+\n+    public void start()\n+    {\n+        try\n+        {\n+            _session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+            _session.createDurableSubscriber((Topic) _setup.getDestination(ConnectionSetup.TOPIC_JNDI_NAME),\n+                                             \"exampleClient\").setMessageListener(this);\n+            _connection.start();\n+            _count.await();\n+\n+            System.out.println(\"Done\");\n+\n+            _connection.close();\n+        }\n+        catch (JMSException e)\n+        {\n+            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.\n+        }\n+        catch (InterruptedException e)\n+        {\n+            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.\n+        }\n+    }\n+\n+    public static void main(String[] args)\n+    {\n+        String destination = args.length > 2 ? args[1] : null;\n+        int msgCount = args.length > 2 ? Integer.parseInt(args[2]) : 100;\n+\n+        new Subscriber(destination, msgCount).start();\n+    }\n+\n+    public void onMessage(Message message)\n+    {\n+        try\n+        {\n+            _count.countDown();\n+            System.out.println(\"Received msg:\" + ((TextMessage) message).getText());\n+        }\n+        catch (JMSException e)\n+        {\n+            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.\n+        }\n+    }\n+}", "filename": "client/example/src/main/java/org/apache/qpid/example/pubsub/Subscriber.java"}, {"additions": 44, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/pom.xml", "sha": "b51e540c2dc3f7a45977873bca057f5ff37e2fb3", "changes": 44, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/pom.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -123,6 +123,50 @@\n \n     <build>\n         <plugins>\n+\n+           <plugin>\n+                <artifactId>minijar-maven-plugin</artifactId>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <executions>\n+                    <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>ueberjar</goal>\n+                        </goals>\n+                        <configuration>\n+                            <stripUnusedClasses>false</stripUnusedClasses>\n+                            <name>[artifactId]-[version]-single.jar</name>\n+                            <classifier>single</classifier>\n+                            <attach>true</attach>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>build-helper-maven-plugin</artifactId>\n+                <executions>\n+                  <execution>\n+                    <id>attach-artifacts</id>\n+                    <phase>package</phase>\n+                    <goals>\n+                      <goal>attach-artifact</goal>\n+                    </goals>\n+                    <configuration>\n+                        <artifacts>\n+                          <artifact>\n+                            <file>target/${artifactId}-${version}-single.jar</file>\n+                            <type>jar</type>\n+                            <classifier>single</classifier>\n+                          </artifact>\n+                        </artifacts>\n+                    </configuration>\n+                  </execution>\n+                </executions>\n+            </plugin>\n+\n+\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>", "filename": "client/pom.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/AMQConnection.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/AMQConnection.java", "sha": "ddce0db7ff2930abf1af39bad91f47bc5adbdc26", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQConnection.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -46,7 +46,6 @@\n import org.apache.qpid.jms.FailoverPolicy;\n import org.apache.qpid.protocol.AMQConstant;\n import org.apache.qpid.url.URLSyntaxException;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -68,7 +67,6 @@\n import javax.naming.Reference;\n import javax.naming.Referenceable;\n import javax.naming.StringRefAddr;\n-\n import java.io.IOException;\n import java.net.ConnectException;\n import java.nio.channels.UnresolvedAddressException;\n@@ -1148,7 +1146,7 @@ public void exceptionReceived(Throwable cause)\n         }\n         else\n         {\n-            _logger.info(\"Not a hard-error connection not closing.\");\n+            _logger.info(\"Not a hard-error connection not closing: \" + cause.getMessage());\n         }\n     }\n ", "filename": "client/src/main/java/org/apache/qpid/client/AMQConnection.java"}, {"additions": 21, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java", "sha": "24f5ead2d0f7a6a28acf845c325fbcce487162ef", "changes": 31, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,21 +20,25 @@\n  */\n package org.apache.qpid.client;\n \n+import org.apache.qpid.framing.AMQShortString;\n+import org.apache.qpid.jms.BrokerDetails;\n+import org.apache.qpid.jms.ConnectionURL;\n+import org.apache.qpid.url.URLHelper;\n+import org.apache.qpid.url.URLSyntaxException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.StringTokenizer;\n \n-import org.apache.qpid.framing.AMQShortString;\n-import org.apache.qpid.jms.BrokerDetails;\n-import org.apache.qpid.jms.ConnectionURL;\n-import org.apache.qpid.url.URLHelper;\n-import org.apache.qpid.url.URLSyntaxException;\n-\n public class AMQConnectionURL implements ConnectionURL\n {\n+    private static final Logger _logger = LoggerFactory.getLogger(AMQConnectionURL.class);\n+\n     private String _url;\n     private String _failoverMethod;\n     private HashMap<String, String> _failoverOptions;\n@@ -162,7 +166,7 @@ public AMQConnectionURL(String fullURL) throws URLSyntaxException\n                 if ((slash != 0) && (fullURL.charAt(slash - 1) == ':'))\n                 {\n                     throw URLHelper.parseError(slash - 2, fullURL.indexOf('?') - slash + 2,\n-                        \"Virtual host looks like a windows path, forward slash not allowed in URL\", fullURL);\n+                                               \"Virtual host looks like a windows path, forward slash not allowed in URL\", fullURL);\n                 }\n                 else\n                 {\n@@ -182,7 +186,7 @@ private void parseUserInfo(String userinfo) throws URLSyntaxException\n         if (colonIndex == -1)\n         {\n             throw URLHelper.parseError(AMQ_PROTOCOL.length() + 3, userinfo.length(),\n-                \"Null password in user information not allowed.\", _url);\n+                                       \"Null password in user information not allowed.\", _url);\n         }\n         else\n         {\n@@ -387,7 +391,14 @@ public String toString()\n             if (_password != null)\n             {\n                 sb.append(':');\n-                sb.append(_password);\n+                if (_logger.isDebugEnabled())\n+                {\n+                    sb.append(_password);\n+                }\n+                else\n+                {\n+                    sb.append(\"********\");\n+                }\n             }\n \n             sb.append('@');\n@@ -432,7 +443,7 @@ private String optionsToString()\n     public static void main(String[] args) throws URLSyntaxException\n     {\n         String url2 =\n-            \"amqp://ritchiem:bob@temp?brokerlist='tcp://localhost:5672;jcp://fancyserver:3000/',failover='roundrobin'\";\n+                \"amqp://ritchiem:bob@temp?brokerlist='tcp://localhost:5672;jcp://fancyserver:3000/',failover='roundrobin'\";\n         // \"amqp://user:pass@clientid/virtualhost?brokerlist='tcp://host:1?option1=\\'value\\',option2=\\'value\\';vm://:3?option1=\\'value\\'',failover='method?option1=\\'value\\',option2='value''\";\n \n         ConnectionURL connectionurl2 = new AMQConnectionURL(url2);", "filename": "client/src/main/java/org/apache/qpid/client/AMQConnectionURL.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/AMQSession.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/AMQSession.java", "sha": "8f0ad3947afad092e11eea0607359ff77741cb16", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/AMQSession.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -2319,6 +2319,16 @@ private void markClosedProducersAndConsumers()\n         }\n     }\n \n+    public void declareAndBind(AMQDestination amqd)\n+            throws\n+            AMQException\n+    {\n+        AMQProtocolHandler protocolHandler = getProtocolHandler();\n+        declareExchange(amqd, protocolHandler, false);\n+        AMQShortString queueName = declareQueue(amqd, protocolHandler);\n+        bindQueue(queueName, amqd.getRoutingKey(), new FieldTable(), amqd.getExchangeName());\n+    }\n+\n     /**\n      * Callers must hold the failover mutex before calling this method.\n      *", "filename": "client/src/main/java/org/apache/qpid/client/AMQSession.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/handler/ExchangeBoundOkMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/handler/ExchangeBoundOkMethodHandler.java", "sha": "862a9be8d427db3ac2e4c434e69cbe0da25102ad", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/handler/ExchangeBoundOkMethodHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.client.handler;", "filename": "client/src/main/java/org/apache/qpid/client/handler/ExchangeBoundOkMethodHandler.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/handler/QueueDeleteOkMethodHandler.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/main/java/org/apache/qpid/client/handler/QueueDeleteOkMethodHandler.java", "sha": "65060d44d2697030fdfe0a3bd830389b12214a6b", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/main/java/org/apache/qpid/client/handler/QueueDeleteOkMethodHandler.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.client.handler;", "filename": "client/src/main/java/org/apache/qpid/client/handler/QueueDeleteOkMethodHandler.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/test/java/org/apache/qpid/test/unit/client/channelclose/CloseWithBlockingReceiveTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/test/java/org/apache/qpid/test/unit/client/channelclose/CloseWithBlockingReceiveTest.java", "sha": "9600d1e9d32c1ecb32057e60b21951f5388d2253", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/client/channelclose/CloseWithBlockingReceiveTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.test.unit.client.channelclose;", "filename": "client/src/test/java/org/apache/qpid/test/unit/client/channelclose/CloseWithBlockingReceiveTest.java"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/test/java/org/apache/qpid/test/unit/client/forwardall/CombinedTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/test/java/org/apache/qpid/test/unit/client/forwardall/CombinedTest.java", "sha": "9cde24dd9204bbcc12b2c55a8a8462d778dc4075", "changes": 17, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/client/forwardall/CombinedTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -21,9 +21,7 @@\n package org.apache.qpid.test.unit.client.forwardall;\n \n import junit.framework.TestCase;\n-\n import org.apache.qpid.testutil.VMBrokerSetup;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -34,6 +32,7 @@\n public class CombinedTest extends TestCase\n {\n     private static final Logger _logger = LoggerFactory.getLogger(CombinedTest.class);\n+    private int run = 0;\n \n     protected void setUp() throws Exception\n     {\n@@ -48,14 +47,18 @@ protected void tearDown() throws Exception\n \n     public void testForwardAll() throws Exception\n     {\n-        int services = 2;\n-        ServiceCreator.start(\"vm://:1\", services);\n+        while (run < 10)\n+        {\n+            int services = 2;\n+            ServiceCreator.start(\"vm://:1\", services);\n+\n+            _logger.info(\"Starting \" + ++run + \" client...\");\n \n-        _logger.info(\"Starting client...\");\n+            new Client(\"vm://:1\", services).shutdownWhenComplete();\n \n-        new Client(\"vm://:1\", services).shutdownWhenComplete();\n \n-        _logger.info(\"Completed successfully!\");\n+            _logger.info(\"Completed \" + run + \" successfully!\");\n+        }\n     }\n \n     public static junit.framework.Test suite()", "filename": "client/src/test/java/org/apache/qpid/test/unit/client/forwardall/CombinedTest.java"}, {"additions": 80, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java", "sha": "1a457739071bbd85c585a6d4a0f13d69cda1abb6", "changes": 118, "status": "modified", "deletions": 38, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -21,12 +21,10 @@\n package org.apache.qpid.test.unit.transacted;\n \n import junit.framework.TestCase;\n-\n import org.apache.qpid.AMQException;\n import org.apache.qpid.client.AMQConnection;\n import org.apache.qpid.client.transport.TransportConnection;\n import org.apache.qpid.url.URLSyntaxException;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -57,6 +55,9 @@\n \n     private static final Logger _logger = LoggerFactory.getLogger(CommitRollbackTest.class);\n     private static final String BROKER = \"vm://:1\";\n+    private boolean _gotone = false;\n+    private boolean _gottwo = false;\n+    private boolean _gottwoRedelivered = false;\n \n     protected void setUp() throws Exception\n     {\n@@ -340,57 +341,98 @@ public void testGetThenCloseRollback() throws Exception\n      *\n      * @throws Exception On error\n      */\n-    /*public void testSend2ThenRollback() throws Exception\n+    public void testSend2ThenRollback() throws Exception\n     {\n-        assertTrue(\"session is not transacted\", _session.getTransacted());\n-        assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n+        int run = 0;\n+        while (run < 10)\n+        {\n+            run++;\n+            _logger.info(\"Run:\" + run);\n+            assertTrue(\"session is not transacted\", _session.getTransacted());\n+            assertTrue(\"session is not transacted\", _pubSession.getTransacted());\n \n-        _logger.info(\"sending two test messages\");\n-        _publisher.send(_pubSession.createTextMessage(\"1\"));\n-        _publisher.send(_pubSession.createTextMessage(\"2\"));\n-        _pubSession.commit();\n+            _logger.info(\"sending two test messages\");\n+            _publisher.send(_pubSession.createTextMessage(\"1\"));\n+            _publisher.send(_pubSession.createTextMessage(\"2\"));\n+            _pubSession.commit();\n \n-        _logger.info(\"getting test message\");\n-        assertEquals(\"1\", ((TextMessage) _consumer.receive(1000)).getText());\n+            _logger.info(\"getting test message\");\n+            assertEquals(\"1\", ((TextMessage) _consumer.receive(1000)).getText());\n \n-        _logger.info(\"rolling back\");\n-        _session.rollback();\n+            _logger.info(\"rolling back\");\n+            _session.rollback();\n \n-        _logger.info(\"receiving result\");\n-        Message result = _consumer.receive(1000);\n+            _logger.info(\"receiving result\");\n+            Message result = _consumer.receive(1000);\n \n-        assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n+            assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n \n+            // Message Order is:\n \n-        if (((TextMessage) result).getText().equals(\"2\"))\n-        {\n-            assertTrue(\"Messasge is marked as redelivered\", !result.getJMSRedelivered());\n+            // Send 1 , 2\n+            // Retrieve 1 and then rollback\n+            // Receieve 1 (redelivered) , 2 (may or may not be redelivered??)\n \n-            result = _consumer.receive(1000);\n-            assertEquals(\"1\", ((TextMessage) result).getText());\n-            assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+            verifyMessages(result);\n+\n+            // Occassionally get message 2 first!\n+//            assertEquals(\"Should get message one first\", \"1\", ((TextMessage) result).getText());\n+//            assertTrue(\"Message is not marked as redelivered\", result.getJMSRedelivered());\n+//\n+//            result = _consumer.receive(1000);\n+//            assertEquals(\"Second message should be message 2\", \"2\", ((TextMessage) result).getText());\n+//            assertTrue(\"Message is not marked as redelivered\", result.getJMSRedelivered());\n+//\n+//            result = _consumer.receive(1000);\n+//            assertNull(\"There should be no more messages\", result);\n+\n+            _session.commit();\n         }\n-        else\n+    }\n+\n+    private void verifyMessages(Message result) throws JMSException\n+    {\n+\n+        if (result == null)\n         {\n-            assertEquals(\"1\", ((TextMessage) result).getText());\n-            assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n-            result = _consumer.receive(1000);\n-            assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n-            assertEquals(\"2\", ((TextMessage) result).getText());\n-            assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n+            assertTrue(\"Didn't receive redelivered message one\", _gotone);\n+            assertTrue(\"Didn't receive message two at all\", _gottwo | _gottwoRedelivered);\n+            _gotone = false;\n+            _gottwo = false;\n+            _gottwoRedelivered = false;\n+            return;\n         }\n \n-        result = _consumer.receive(1000);\n+        if (((TextMessage) result).getText().equals(\"1\"))\n+        {\n+            _logger.info(\"Got 1 redelivered\");\n+            assertTrue(\"Message is not marked as redelivered\", result.getJMSRedelivered());\n+            assertFalse(\"Already received message one\", _gotone);\n+            _gotone = true;\n \n-        if (result != null)\n+        }\n+        else\n         {\n             assertEquals(\"2\", ((TextMessage) result).getText());\n-            assertTrue(\"Messasge is not marked as redelivered\", result.getJMSRedelivered());\n-            result = _consumer.receive(1000);\n+\n+            if (result.getJMSRedelivered())\n+            {\n+                _logger.info(\"Got 2 redelivered, message was prefetched\");\n+                assertFalse(\"Already received message redelivered two\", _gottwoRedelivered);\n+\n+                _gottwoRedelivered = true;\n+            }\n+            else\n+            {\n+                _logger.warn(\"Got 2, message prefetched wasn't cleared or messages was in transit when rollback occured\");                \n+                assertFalse(\"Already received message two\", _gottwo);\n+\n+                _gottwo = true;\n+            }\n         }\n \n-        assertNull(\"test message should be null\", result);\n-    }*/\n+        verifyMessages(_consumer.receive(1000));\n+    }\n \n     public void testSend2ThenCloseAfter1andTryAgain() throws Exception\n     {\n@@ -417,12 +459,12 @@ public void testSend2ThenCloseAfter1andTryAgain() throws Exception\n \n         _logger.info(\"receiving result\");\n \n-        // NOTE: Both msg 1 & 2 will be marked as redelivered as they have both will have been rejected.\n-        // Only the occasion where it is not rejected will it mean it hasn't arrived at the client yet.\n+// NOTE: Both msg 1 & 2 will be marked as redelivered as they have both will have been rejected.\n+// Only the occasion where it is not rejected will it mean it hasn't arrived at the client yet.\n         result = _consumer.receive(1000);\n         assertNotNull(\"test message was consumed and rolled back, but is gone\", result);\n \n-        // The first message back will be either 1 or 2 being redelivered\n+// The first message back will be either 1 or 2 being redelivered\n         if (result.getJMSRedelivered())\n         {\n             assertTrue(\"Messasge is not marked as redelivered\" + result, result.getJMSRedelivered());", "filename": "client/src/test/java/org/apache/qpid/test/unit/transacted/CommitRollbackTest.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/cluster/src/main/java/org/apache/qpid/server/cluster/SimpleBodySendable.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/cluster/src/main/java/org/apache/qpid/server/cluster/SimpleBodySendable.java", "sha": "bd3757bf97c3a8a3733398814a50ff339d7c4bde", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/cluster/src/main/java/org/apache/qpid/server/cluster/SimpleBodySendable.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.cluster;", "filename": "cluster/src/main/java/org/apache/qpid/server/cluster/SimpleBodySendable.java"}, {"additions": 19, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/pom.xml", "sha": "77065345d63431b9ed62e63dc403aa4ce7a4d76b", "changes": 26, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/pom.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -100,22 +100,34 @@\n \n                 </executions>\n             </plugin>\n-            \n+\n         </plugins>\n     </build>\n \n     <dependencies>\n \n-        <dependency>  \n+        <dependency>\n+            <groupId>commons-configuration</groupId>\n+            <artifactId>commons-configuration</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>commons-cli</groupId>\n+            <artifactId>commons-cli</artifactId>\n+        </dependency>\n+\n+\n+\n+        <dependency>\n             <groupId>org.slf4j</groupId>\n-            <artifactId>slf4j-api</artifactId>  \n+            <artifactId>slf4j-api</artifactId>\n             <version>1.4.0</version> \n         </dependency>\n \n-        <dependency>  \n-            <groupId>org.slf4j</groupId> \n-            <artifactId>slf4j-log4j12</artifactId>  \n-            <version>1.4.0</version>  \n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>\n+            <version>1.4.0</version>\n             <scope>test</scope> \n         </dependency>\n ", "filename": "common/pom.xml"}, {"additions": 56, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/src/main/java/org/apache/qpid/framing/AMQShortString.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/src/main/java/org/apache/qpid/framing/AMQShortString.java", "sha": "df99f6589d1dc8c7a374d405ff1754dda0452e4f", "changes": 56, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/AMQShortString.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -26,6 +26,10 @@\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n \r\n+import java.util.Map;\r\n+import java.util.WeakHashMap;\r\n+import java.lang.ref.WeakReference;\r\n+\r\n /**\r\n  * A short string is a representation of an AMQ Short String\r\n  * Short strings differ from the Java String class by being limited to on ASCII characters (0-127)\r\n@@ -34,6 +38,19 @@\n  */\r\n public final class AMQShortString implements CharSequence, Comparable<AMQShortString>\r\n {\r\n+\r\n+    private static final ThreadLocal<Map<AMQShortString, WeakReference<AMQShortString>>> _localInternMap =\r\n+            new ThreadLocal<Map<AMQShortString, WeakReference<AMQShortString>>>()\r\n+            {\r\n+                protected Map<AMQShortString, WeakReference<AMQShortString>> initialValue()\r\n+                {\r\n+                    return new WeakHashMap<AMQShortString, WeakReference<AMQShortString>>();\r\n+                };\r\n+            };\r\n+\r\n+    private static final Map<AMQShortString, WeakReference<AMQShortString>> _globalInternMap =\r\n+            new WeakHashMap<AMQShortString, WeakReference<AMQShortString>>();\r\n+\r\n     private static final Logger _logger = LoggerFactory.getLogger(AMQShortString.class);\r\n \r\n     private final ByteBuffer _data;\r\n@@ -376,4 +393,43 @@ public int compareTo(AMQShortString name)\n             return (length() == name.length()) ? 0 : -1;\r\n         }\r\n     }\r\n+\r\n+\r\n+    public AMQShortString intern()\r\n+    {\r\n+\r\n+        hashCode();\r\n+\r\n+        Map<AMQShortString, WeakReference<AMQShortString>> localMap =\r\n+                _localInternMap.get();\r\n+\r\n+        WeakReference<AMQShortString> ref = localMap.get(this);\r\n+        AMQShortString internString;\r\n+\r\n+        if(ref != null)\r\n+        {\r\n+            internString = ref.get();\r\n+            if(internString != null)\r\n+            {\r\n+                return internString;\r\n+            }\r\n+        }\r\n+\r\n+\r\n+        synchronized(_globalInternMap)\r\n+        {\r\n+\r\n+            ref = _globalInternMap.get(this);\r\n+            if((ref == null) || ((internString = ref.get()) == null))\r\n+            {\r\n+                internString = new AMQShortString(getBytes());\r\n+                ref = new WeakReference(internString);\r\n+                _globalInternMap.put(internString, ref);\r\n+            }\r\n+\r\n+        }\r\n+        localMap.put(internString, ref);\r\n+        return internString;\r\n+\r\n+    }\r\n }\r", "filename": "common/src/main/java/org/apache/qpid/framing/AMQShortString.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/src/main/java/org/apache/qpid/framing/abstraction/MessagePublishInfoConverter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/src/main/java/org/apache/qpid/framing/abstraction/MessagePublishInfoConverter.java", "sha": "42e2f7ad97812e8ac4b83e157e947201c68bba81", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/abstraction/MessagePublishInfoConverter.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\r\n  *\r\n- * Copyright (c) 2006 The Apache Software Foundation\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n  *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n  *\r\n- *    http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n  *\r\n  */\r\n \r", "filename": "common/src/main/java/org/apache/qpid/framing/abstraction/MessagePublishInfoConverter.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/src/main/java/org/apache/qpid/framing/abstraction/ProtocolVersionMethodConverter.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/src/main/java/org/apache/qpid/framing/abstraction/ProtocolVersionMethodConverter.java", "sha": "99588a09083a6c5c203e93812c8c3fa3ac5d996d", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/framing/abstraction/ProtocolVersionMethodConverter.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\r\n  *\r\n- * Copyright (c) 2006 The Apache Software Foundation\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n  *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n  *\r\n- *    http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n  *\r\n  */\r\n \r", "filename": "common/src/main/java/org/apache/qpid/framing/abstraction/ProtocolVersionMethodConverter.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/src/main/java/org/apache/qpid/util/CommandLineParser.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/common/src/main/java/org/apache/qpid/util/CommandLineParser.java", "sha": "64e61fe5ff719ff4837fb53fc8bee735b8f2662c", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/common/src/main/java/org/apache/qpid/util/CommandLineParser.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -483,9 +483,9 @@ else if (optionInfo.mandatory && !options.containsKey(optionInfo.option))\n     }\r\n \r\n     /**\r\n-     * If a command line has been parsed, calling this method sets all of its parsed options as system properties.\r\n+     * If a command line has been parsed, calling this method sets all of its parsed options into the specified properties.\r\n      */\r\n-    public void addCommandLineToSysProperties()\r\n+    public void addCommandLineToProperties(Properties properties)\r\n     {\r\n         if (parsedProperties != null)\r\n         {\r\n@@ -494,7 +494,7 @@ public void addCommandLineToSysProperties()\n                 String name = (String) propKey;\r\n                 String value = parsedProperties.getProperty(name);\r\n \r\n-                System.setProperty(name, value);\r\n+                properties.setProperty(name, value);\r\n             }\r\n         }\r\n     }\r\n@@ -607,7 +607,9 @@ private void checkArgumentFormat(CommandLineOption optionInfo, String matchedArg\n      * instrucitons and calling System.exit on errors. Extracts all trailing name=value pairs from the command line,\r\n      * and sets them all as system properties and also returns a map of properties containing them.\r\n      *\r\n-     * @param args The command line.\r\n+     * @param args        The command line.\r\n+     * @param commandLine The command line parser.\r\n+     * @param properties  The properties object to inject all parsed properties into (optional may be <tt>null</tt>).\r\n      *\r\n      * @return A set of properties containing all name=value pairs from the command line.\r\n      *\r\n@@ -619,7 +621,7 @@ private void checkArgumentFormat(CommandLineOption optionInfo, String matchedArg\n      * @todo Allow the Properties to add trailing options to be specified as an argument rather than hard coding\r\n      *       system properties. Again, gives the caller the option to decide.\r\n      */\r\n-    public static Properties processCommandLine(String[] args, CommandLineParser commandLine)\r\n+    public static Properties processCommandLine(String[] args, CommandLineParser commandLine, Properties properties)\r\n     {\r\n         // Capture the command line arguments or display errors and correct usage and then exit.\r\n         Properties options = null;\r\n@@ -630,7 +632,7 @@ public static Properties processCommandLine(String[] args, CommandLineParser com\n \r\n             // Add all the trailing command line options (name=value pairs) to system properties. They may be picked up\r\n             // from there.\r\n-            commandLine.addCommandLineToSysProperties();\r\n+            commandLine.addCommandLineToProperties(properties);\r\n         }\r\n         catch (IllegalArgumentException e)\r\n         {\r", "filename": "common/src/main/java/org/apache/qpid/util/CommandLineParser.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/pom.xml", "sha": "7899ef891258e2db38ff7f13e2a3d1baa05e9ea3", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/pom.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -39,8 +39,11 @@\n         <java.source.version>1.5</java.source.version>\n         <qpid.version>${pom.version}</qpid.version>\n         <qpid.targetDir>${project.build.directory}</qpid.targetDir>\n+\n+        <!-- This is an assembly/distribution pom so no test code exists -->\n+        <maven.test.skip>true</maven.test.skip>\n     </properties>\n-   \n+\n     <repositories>\n       <repository>\n         <id>repo1.maven.org</id>\n@@ -131,6 +134,8 @@\n                 </executions>\n             </plugin>\n         </plugins>\n+\n+         <defaultGoal>assembly:assembly</defaultGoal>\n     </build>\n \n     <profiles>", "filename": "distribution/pom.xml"}, {"additions": 39, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/bin-test.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/bin-test.xml", "sha": "04d83916e49174c16da6fc8d72e3e6230d007ecd", "changes": 151, "status": "modified", "deletions": 112, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/assembly/bin-test.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -27,146 +27,73 @@\n   </formats>\n \n   <fileSets>\n+   <!-- Include the currently hardwired Apache Legal bits -->\n     <fileSet>\n-      <directory>src/main/release</directory>\n+      <directory>../resources</directory>\n       <outputDirectory>qpid-${qpid.version}</outputDirectory>\n       <includes>\n           <include>DISCLAIMER</include>\n-          <include>LICENSE.txt</include>\n-          <include>NOTICE.txt</include>\n-          <include>README.txt</include>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+          <include>README</include>\n       </includes>\n+      <fileMode>0444</fileMode>\n     </fileSet>\n+\n+  <!-- Include any release information -->\n     <fileSet>\n-      <directory>..</directory>\n+      <directory>src/main/release</directory>\n       <outputDirectory>qpid-${qpid.version}</outputDirectory>\n-      <includes>\n-          <include>*.txt</include>\n-      </includes>\n-    </fileSet>\n-    <fileSet>\n-      <directory>src/main/release/etc</directory>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <includes>\n-    <include>logging.properties</include>\n-    <include>log4j.properties</include>\n-      </includes>\n     </fileSet>\n+\n+    <!-- Include any release information -->\n     <fileSet>\n-      <directory>src/main/release/docs</directory>\n-      <outputDirectory>qpid-${qpid.version}/docs</outputDirectory>\n-      <includes>\n-          <include>RELEASE_NOTES.txt</include>\n-      </includes>\n+      <directory>../release-docs</directory>\n+      <outputDirectory>qpid-${qpid.version}</outputDirectory>\n     </fileSet>\n+\n+    <!-- Include the classpath jar qpid-incubating.jar -->\n     <fileSet>\n       <directory>target</directory>\n       <outputDirectory>qpid-${qpid.version}/lib</outputDirectory>\n       <includes>\n           <include>qpid-incubating.jar</include>\n       </includes>\n     </fileSet>\n-  </fileSets>\n-  <files>\n-    <!-- due to a bug in the assembly plugin (MASSEMBLY-153) you have\n-         to use decimal numbers to specify fileMode -->\n-    <file>\n-      <source>../common/etc/qpid-run.conf</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>qpid-run.conf</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/config.xml</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>config.xml</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/log4j.xml</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>log4j.xml</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/passwd</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>passwd</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/qpid-server.conf</source>\n+\n+    <!-- Include etc -->\n+    <fileSet>\n+      <directory>../common/etc</directory>\n       <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>qpid-server.conf</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/virtualhosts.xml</source>\n+      <fileMode>0640</fileMode>\n+    </fileSet>\n+    <fileSet>\n+      <directory>../broker/etc</directory>\n       <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>virtualhosts.xml</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid.start</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid.start</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid.stop</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid.stop</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid.stopall</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid.stopall</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../common/bin/qpid-run</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid-run</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid-server</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid-server</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid-server.bat</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid-server.bat</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/run.bat</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>run.bat</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/run.sh</source>\n+      <fileMode>0640</fileMode>\n+    </fileSet>\n+\n+    <!-- Include bin scripts-->\n+    <fileSet>\n+      <directory>../broker/bin</directory>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>run.sh</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/runAll</source>\n+      <fileMode>0750</fileMode>\n+    </fileSet>\n+    <fileSet>\n+      <directory>../common/bin</directory>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>runAll</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-  </files>\n+      <fileMode>0750</fileMode>\n+    </fileSet>\n+  </fileSets>\n+\n   <dependencySets>\n     <dependencySet>\n       <outputDirectory>qpid-${qpid.version}/lib</outputDirectory>\n       <unpack>false</unpack>\n       <excludes>\n+        <!-- Exclude the jar output of this build process -->\n         <exclude>org.apache.qpid:qpid-distribution</exclude>\n+        <!-- Exclude the Console dependancies -->\n         <exclude>org.apache.qpid.management:org.apache.qpid.management.ui</exclude>\n         <exclude>org.eclipse.core:org.eclipse.core.commands</exclude>\n         <exclude>org.eclipse.core:org.eclipse.core.contenttype</exclude>", "filename": "distribution/src/main/assembly/bin-test.xml"}, {"additions": 44, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/bin.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/bin.xml", "sha": "3620659e48b0b2a5bd4f91b78f9f8ff561034b8e", "changes": 178, "status": "modified", "deletions": 134, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/assembly/bin.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -27,170 +27,80 @@\n   </formats>\n \n   <fileSets>\n+    <!-- Include the currently hardwired Apache Legal bits -->\n     <fileSet>\n-      <directory>src/main/release</directory>\n+      <directory>../resources</directory>\n       <outputDirectory>qpid-${qpid.version}</outputDirectory>\n       <includes>\n           <include>DISCLAIMER</include>\n-          <include>LICENSE.txt</include>\n-          <include>NOTICE.txt</include>\n-          <include>README.txt</include>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+          <include>README</include>\n       </includes>\n+      <fileMode>0444</fileMode>\n     </fileSet>\n+\n+    <!-- Include any release information -->\n     <fileSet>\n-      <directory>..</directory>\n+      <directory>src/main/release</directory>\n       <outputDirectory>qpid-${qpid.version}</outputDirectory>\n-      <includes>\n-          <include>*.txt</include>\n-      </includes>\n     </fileSet>\n+\n+    <!-- Include any release information -->\n     <fileSet>\n-      <directory>src/main/release/etc</directory>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <includes>\n-    <include>logging.properties</include>\n-    <include>log4j.properties</include>\n-      </includes>\n+      <directory>..//release-docs</directory>\n+      <outputDirectory>qpid-${qpid.version}</outputDirectory>\n     </fileSet>\n+\n+    <!-- Include any release information -->\n     <fileSet>\n-      <directory>src/main/release/docs</directory>\n-      <outputDirectory>qpid-${qpid.version}/docs</outputDirectory>\n-      <includes>\n-          <include>RELEASE_NOTES.txt</include>\n-      </includes>\n+      <directory>../release-docs</directory>\n+      <outputDirectory>qpid-${qpid.version}</outputDirectory>\n     </fileSet>\n+\n+    <!-- Include the classpath jar qpid-incubating.jar -->\n     <fileSet>\n       <directory>target</directory>\n       <outputDirectory>qpid-${qpid.version}/lib</outputDirectory>\n       <includes>\n           <include>qpid-incubating.jar</include>\n       </includes>\n     </fileSet>\n-  </fileSets>\n-  <files>\n-    <!-- due to a bug in the assembly 2.1 plugin (MASSEMBLY-153) you have\n-         to use octal numbers to specify fileMode note not valid in 2.2 assembly plugin -->\n-    <file>\n-      <source>../common/etc/qpid-run.conf</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>qpid-run.conf</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/config.xml</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>config.xml</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/jmxremote.access</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>jmxremote.access</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/transient_config.xml</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>transient_config.xml</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/persistent_config.xml</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>persistent_config.xml</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/log4j.xml</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>log4j.xml</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/passwd</source>\n-      <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>passwd</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-        <source>../broker/etc/passwdVhost</source>\n-        <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-        <destName>passwdVhost</destName>\n-        <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/qpid-server.conf</source>\n+\n+    <!-- Include etc -->\n+    <fileSet>\n+      <directory>../common/etc</directory>\n       <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>qpid-server.conf</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/etc/virtualhosts.xml</source>\n+      <fileMode>0640</fileMode>\n+    </fileSet>\n+    <fileSet>\n+      <directory>../broker/etc</directory>\n       <outputDirectory>qpid-${qpid.version}/etc</outputDirectory>\n-      <destName>virtualhosts.xml</destName>\n-      <fileMode>420</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid.start</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid.start</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid.stop</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid.stop</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid.stopall</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid.stopall</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../common/bin/qpid-run</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid-run</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid-server</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid-server</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/qpid-server.bat</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>qpid-server.bat</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/run.bat</source>\n-      <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>run.bat</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/run.sh</source>\n+      <fileMode>0640</fileMode>\n+    </fileSet>\n+\n+    <!-- Include bin scripts-->\n+    <fileSet>\n+      <directory>../broker/bin</directory>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>run.sh</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-    <file>\n-      <source>../broker/bin/runAll</source>\n+      <fileMode>0750</fileMode>\n+    </fileSet>\n+    <fileSet>\n+      <directory>../common/bin</directory>\n       <outputDirectory>qpid-${qpid.version}/bin</outputDirectory>\n-      <destName>runAll</destName>\n-      <fileMode>493</fileMode>\n-    </file>\n-  </files>\n+      <fileMode>0750</fileMode>\n+    </fileSet>\n+\n+  </fileSets>\n+\n   <dependencySets>\n     <dependencySet>\n       <outputDirectory>qpid-${qpid.version}/lib</outputDirectory>\n       <unpack>false</unpack>\n       <excludes>\n+        <!-- Exclude the jar output of this build process -->\n         <exclude>org.apache.qpid:qpid-distribution</exclude>\n+        <!-- Exclude the Console dependancies -->\n         <exclude>org.apache.qpid.management:org.apache.qpid.management.ui</exclude>\n         <exclude>org.eclipse.core:org.eclipse.core.commands</exclude>\n         <exclude>org.eclipse.core:org.eclipse.core.contenttype</exclude>", "filename": "distribution/src/main/assembly/bin.xml"}, {"additions": 26, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/management-eclipse-plugin-unix.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/management-eclipse-plugin-unix.xml", "sha": "02ede019e53fcc8fcce19aa540013679fc94f42b", "changes": 39, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/assembly/management-eclipse-plugin-unix.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -38,55 +38,68 @@\n   </moduleSets>\n  -->\n   <fileSets>\n+\n+\n+  <!-- Include the currently hardwired Apache Legal bits -->\n     <fileSet>\n-      <directory>src/main/release</directory>\n-      <outputDirectory>qpidmc</outputDirectory>\n+      <directory>../resources</directory>\n+      <outputDirectory>qpid-${qpid.version}</outputDirectory>\n       <includes>\n-        <include>DISCLAIMER</include>\n+          <include>DISCLAIMER</include>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+          <include>README</include>\n       </includes>\n+      <fileMode>0444</fileMode>\n     </fileSet>\n+\n     <fileSet>\n       <directory>..</directory>\n       <outputDirectory>qpidmc</outputDirectory>\n       <includes>\n         <include>*.txt</include>\n       </includes>\n     </fileSet>\n+\n     <fileSet>\n-      <directory>src/main/release/docs</directory>\n-      <outputDirectory>qpidmc/docs</outputDirectory>\n-      <includes>\n-        <include>RELEASE_NOTES.txt</include>\n-      </includes>\n+      <directory>src/main/release</directory>\n+      <outputDirectory>qpidmc</outputDirectory>\n     </fileSet>\n+\n+    <!-- Include any release information -->\n+    <fileSet>\n+      <directory>../release-docs</directory>\n+      <outputDirectory>qpidmc</outputDirectory>\n+    </fileSet>\n+\n     <fileSet>\n       <directory>../management/eclipse-plugin/src/main/resources/unix/configuration</directory>\n       <outputDirectory>qpidmc/configuration</outputDirectory>\n-      <includes>\n-        <include>**</include>\n-      </includes>\n     </fileSet>\n+\n     <fileSet>\n       <directory>../management/eclipse-plugin/src/main/resources</directory>\n       <outputDirectory>qpidmc</outputDirectory>\n       <includes>\n         <include>license.eclipse.txt</include>\n       </includes>\n     </fileSet>\n+\n     <fileSet>\n       <directory>../management/eclipse-plugin</directory>\n       <outputDirectory>qpidmc</outputDirectory>\n       <includes>\n         <include>README.txt</include>\n       </includes>\n     </fileSet>\n+\n     <fileSet>\n       <directory>../management/eclipse-plugin/bin</directory>\n       <outputDirectory>qpidmc/bin</outputDirectory>\n       <includes>\n         <include>qpidmc*.sh</include>\n       </includes>\n-      <fileMode>777</fileMode>\n+      <fileMode>0777</fileMode>\n     </fileSet>\n   </fileSets>\n \n@@ -100,7 +113,7 @@\n       </includes>\n       <scope>runtime</scope>\n     </dependencySet>\n-  \n+\n   <dependencySet>\n         <outputDirectory>qpidmc/eclipse/plugins</outputDirectory>\n         <outputFileNameMapping>${artifactId}_${version}.${extension}</outputFileNameMapping>", "filename": "distribution/src/main/assembly/management-eclipse-plugin-unix.xml"}, {"additions": 37, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/management-eclipse-plugin.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/management-eclipse-plugin.xml", "sha": "05df2c030b9d5d4bfb28333929d38db03e5fcfdd", "changes": 68, "status": "modified", "deletions": 31, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/assembly/management-eclipse-plugin.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -24,70 +24,76 @@\n   <formats>\n     <format>zip</format>\n   </formats>\n-<!--\n-  <moduleSets>\n-      <moduleSet>\n-          <includes>\n-              <include>org.apache.qpid.management:org.apache.qpid.management.ui</include>\n-          </includes>\n-          <binaries>\n-              <includeDependencies>true</includeDependencies>\n-              <unpack>false</unpack>\n-          </binaries>\n-      </moduleSet>\n-  </moduleSets>\n- -->\n+\n   <fileSets>\n+\n+  <!-- Include the currently hardwired Apache Legal bits -->\n     <fileSet>\n-      <directory>src/main/release</directory>\n+      <directory>../resources</directory>\n       <outputDirectory>qpidmc</outputDirectory>\n       <includes>\n-        <include>DISCLAIMER</include>\n+          <include>DISCLAIMER</include>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+          <include>README</include>\n       </includes>\n+      <fileMode>0444</fileMode>\n     </fileSet>\n+\n     <fileSet>\n-      <directory>..</directory>\n+      <directory>src/main/release</directory>\n+      <outputDirectory>qpidmc</outputDirectory>\n+    </fileSet>\n+\n+    <!-- Include any release information -->\n+    <fileSet>\n+      <directory>../release-docs</directory>\n       <outputDirectory>qpidmc</outputDirectory>\n-      <includes>\n-        <include>*.txt</include>\n-      </includes>\n     </fileSet>\n+\n+\n     <fileSet>\n-      <directory>src/main/release/docs</directory>\n-      <outputDirectory>qpidmc/docs</outputDirectory>\n+      <directory>..</directory>\n+      <outputDirectory>qpidmc</outputDirectory>\n       <includes>\n-        <include>RELEASE_NOTES.txt</include>\n+        <include>*.txt</include>\n       </includes>\n     </fileSet>\n+\n     <fileSet>\n       <directory>../management/eclipse-plugin/src/main/resources/win32/configuration</directory>\n       <outputDirectory>qpidmc/configuration</outputDirectory>\n-      <includes>\n-        <include>**</include>\n-      </includes>\n     </fileSet>\n+\n     <fileSet>\n       <directory>../management/eclipse-plugin/src/main/resources</directory>\n       <outputDirectory>qpidmc/eclipse</outputDirectory>\n       <includes>\n         <include>*.*</include>\n-      </includes>      \n+      </includes>\n     </fileSet>\n+\n     <fileSet>\n       <directory>../management/eclipse-plugin</directory>\n       <outputDirectory>qpidmc</outputDirectory>\n       <includes>\n         <include>README.txt</include>\n       </includes>\n     </fileSet>\n+\n     <fileSet>\n       <directory>../management/eclipse-plugin/bin</directory>\n       <outputDirectory>qpidmc/bin</outputDirectory>\n-      <includes>\n-        <include>**</include>\n-      </includes>\n-      <fileMode>777</fileMode>\n+      <excludes>\n+        <!-- Exclude the Unix scripts -->\n+        <exclude>qpidmc*.sh</exclude>\n+      </excludes>\n+      <fileMode>0777</fileMode>\n     </fileSet>\n+\n+    <!-- Required to make eclipse load the JMXRemote SASL pluging -->\n+    <!-- This should be removed as JMXRemote SASL module is not ASF license friendly -->\n+    <!-- However management console doesn't seem to work without it -->\n     <fileSet>\n       <directory>../management/eclipse-plugin/src/main/resources/sasl</directory>\n       <outputDirectory>qpidmc/eclipse/plugins/jmxremote.sasl_1.0.1/META-INF</outputDirectory>\n@@ -107,7 +113,7 @@\n         <exclude>org.apache.qpid:qpid-common</exclude>\n         <exclude>org.apache.qpid:qpid-broker</exclude>\n         <exclude>org.apache.qpid:qpid-client</exclude>\n-        <exclude>commons-cli:commons-cli</exclude>        \n+        <exclude>commons-cli:commons-cli</exclude>\n         <exclude>commons-configuration:commons-configuration</exclude>\n         <exclude>commons-lang:commons-lang</exclude>\n         <exclude>org.apache.mina:mina-filter-ssl</exclude>", "filename": "distribution/src/main/assembly/management-eclipse-plugin.xml"}, {"additions": 27, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/src.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/distribution/src/main/assembly/src.xml", "sha": "efdc4d98f4d7548b3f4432fefd6320b2b9518467", "changes": 42, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/assembly/src.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -27,24 +27,31 @@\n   </formats>\n \n   <fileSets>\n-    <fileSet>\n-      <directory>src/main/release</directory>\n+   <fileSet>\n+      <directory>../resources</directory>\n       <outputDirectory>qpid-${qpid.version}-src</outputDirectory>\n       <includes>\n-        <include>DISCLAIMER</include>\n-        <include>LICENSE.txt</include>\n-        <include>licenses/*.*</include>\n-        <include>NOTICE.txt</include>\n-        <include>README.txt</include>\n-        <include>BUILDING.txt</include>\n+          <include>DISCLAIMER</include>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+          <include>README</include>\n       </includes>\n     </fileSet>\n+\n+    <fileSet>\n+      <directory>src/main/release</directory>\n+      <outputDirectory>qpid-${qpid.version}-src</outputDirectory>\n+    </fileSet>\n+\n+    <!-- Include any release information -->\n+    <fileSet>\n+      <directory>../release-docs</directory>\n+      <outputDirectory>qpid-${qpid.version}-src</outputDirectory>\n+    </fileSet>\n+\n     <fileSet>\n       <directory>..</directory>\n       <outputDirectory>qpid-${qpid.version}-src/java</outputDirectory>\n-      <includes>\n-        <include>**/*</include>\n-      </includes>\n       <excludes>\n         <exclude>build.xml</exclude>\n         <exclude>distribution/build.xml</exclude>\n@@ -71,24 +78,29 @@\n         <exclude>**/eclipse-plugin/src/main/resources/**</exclude>\n       </excludes>\n     </fileSet>\n+\n     <fileSet>\n       <directory>../../gentools</directory>\n       <outputDirectory>qpid-${qpid.version}-src/gentools</outputDirectory>\n-      <includes>\n-        <include>**/*</include>\n-      </includes>\n       <excludes>\n         <exclude>**/build</exclude>\n         <exclude>**/build/**/*</exclude>\n         <exclude>**/*.class</exclude>\n       </excludes>\n     </fileSet>\n+\n     <fileSet>\n       <directory>../../specs</directory>\n       <outputDirectory>qpid-${qpid.version}-src/specs</outputDirectory>\n       <includes>\n-        <include>**/*</include>\n+        <include>amqp.0-8.xml</include>\n+        <include>cluster.0-8.xml</include>\n       </includes>\n+  </fileSet>\n+\n+  <fileSet>\n+      <directory>../../python</directory>\n+      <outputDirectory>qpid-${qpid.version}-src/python</outputDirectory>\n     </fileSet>\n   </fileSets>\n </assembly>", "filename": "distribution/src/main/assembly/src.xml"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/distribution/src/main/release/DISCLAIMER", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/distribution/src/main/release/DISCLAIMER", "sha": "c321113c9e9a319722ac8c33463d4ad2c5a2e59b", "changes": 5, "status": "removed", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/release/DISCLAIMER?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,5 +0,0 @@\n-Apache Qpid is an effort undergoing incubation at the Apache Software Foundation (ASF), sponsored by the Apache Incubator PMC. \n-\n-Incubation is required of all newly accepted projects until a further review indicates that the infrastructure, communications, and decision making process have stabilized in a manner consistent with other successful ASF projects. \n-\n-While incubation status is not necessarily a reflection of the completeness or stability of the code, it does indicate that the project has yet to be fully endorsed by the ASF.", "filename": "distribution/src/main/release/DISCLAIMER"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/distribution/src/main/release/NOTICE.txt", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/distribution/src/main/release/NOTICE.txt", "sha": "82d3dbc63280726f178c56ddad208bbe630d1078", "changes": 36, "status": "removed", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/release/NOTICE.txt?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,36 +0,0 @@\n-=========================================================================\n-==  NOTICE file corresponding to the section 4 d of                    ==\n-==  the Apache License, Version 2.0,                                   ==\n-==  in this case for the Apache Qpid distribution.                     ==\n-=========================================================================\n-\n-This product includes software developed by the Apache Software Foundation\n-(http://www.apache.org/).\n-\n-Please read the LICENSE.txt file present in the root directory of this\n-distribution.\n-\n-\n-Aside from contributions to the Apache Qpid project, this software also \n-includes (binary only):\n-\n-\t- The SAXON XSLT Processor from Michael Kay distributed under the \n-\t  Mozilla Public License v1.0, which is available for download at \n-          http://saxon.sourceforge.net/\n-\n-\t- The JUnit regression testing framework written by Erich Gamma \n-          and Kent Beck and distributed under the Common Public License v1.0.\n-          JUnit is available for download at \n-          http://sourceforge.net/projects/junit/\n-\n-\t- The Simple Logging Facade For Java (slf4j), Copyright (c) \n-          2004-2005 SLF4J.ORG, Copyright (c) 2004-2005 QOS.ch. slf4j is \n-          licensed under identical terms to the MIT/X11 license and \n-          available for download at http://www.slf4j.org/\n-\n-\t- Software from the Eclipse project. The binaries from this project are\n-          distributed under the Eclipse Public License and can be donwloaded\n-          from http://www.eclipse.org/\n-\n-             \n-", "filename": "distribution/src/main/release/NOTICE.txt"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/distribution/src/main/release/README.txt", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/distribution/src/main/release/README.txt", "sha": "14706170bc9266c18bd39a581c3f644b75eaf426", "changes": 104, "status": "removed", "deletions": 104, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/distribution/src/main/release/README.txt?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,104 +0,0 @@\n-\n-Documentation\n---------------\n-All of our user documentation for the Qpid Java components can be accessed on our wiki at:\n-\n-http://cwiki.apache.org/confluence/display/qpid/Qpid+Java+Documentation\n-\n-This includes a Getting Started Guide and FAQ as well as detailed developer documentation.\n-However, here's a VERY quick guide to running the installed Qpid broker, once you have installed it somewhere !\n-\n-\n-Running the Broker\n-------------------\n-\n-To run the broker, set the QPID_HOME environment variable to\n-distribution directory and add $QPID_HOME/bin to your PATH. Then run\n-the qpid-server shell script or qpid-server.bat batch file to start\n-the broker. By default, the broker will use $QPID_HOME/etc to find\n-the configuration files. You can supply a custom configuration using\n-the -c argument.\n-\n-For example:\n-\n-qpid-server -c ~/etc/config.xml\n-\n-You can get a list of all command line arguments by using the -h argument.\n-\n-\n-Developing\n-----------\n-\n-In order to build Qpid you need Ant 1.6.5. Use ant -p to list the\n-available targets. The default ant target, build, creates a working\n-development-mode distribution in the build directory. To run the\n-scripts in build/bin set QPID_HOME to the build directory and put\n-${QPID_HOME}/bin on your PATH. The scripts in that directory include\n-the standard ones in the distribution and a number of testing scripts.\n-\n-\n-Running Tests\n--------------\n-\n-The simplest test to ensure everything is working is the \"service\n-request reply\" test. This involves one client that is known as a\n-\"service provider\" and it listens on a well-known queue for\n-requests. Another client, known as the \"service requester\" creates a\n-private (temporary) response queue, creates a message with the private\n-response queue set as the \"reply to\" field and then publishes the\n-message to the well known service queue. The test allows you to time\n-how long it takes to send messages and receive the response back. It\n-also allows varying of the message size.\n-\n-You must start the service provider first:\n-\n-serviceProvidingClient.sh nop host:port\n-\n-where host:port is the host and port you are running the broker\n-on.\n-\n-To run the service requester:\n-\n-serviceRequestingClient.sh nop host:post <count> <bytes>\n-\n-This requests <count> messages, each of size <bytes>. After\n-receiving all the messages the client outputs the rate it achieved.\n-\n-A more realistic test is the \"headers test\", which tests the\n-performance of routing messages based on message headers to a\n-configurable number of clients (e.g. 50). A publisher sends 10000\n-messages to each client and waits to receive a message from each\n-client when it has received all the messages.\n-\n-You run the listener processes first:\n-\n-run_many.sh 10 header \"headersListener.sh -host 10.0.0.1 -port 5672\"\n-\n-In this command, the first argument means start 10 processes, the\n-second is just a name use in the log files generated and the third\n-argument is the command to run. In this case it runs another shell\n-script but it could be anything.\n-\n-Then run the publisher process:\n-\n-headersPublisher.sh -host 10.0.0.1 -port 5672 10000 10\n-\n-The last two arguments are: the number of messages to send to each\n-client, and the number of clients.\n-\n-Note that before starting the publisher you should wait about 30\n-seconds to ensure all the clients are registered with the broker (you\n-can see this from the broker output). Otherwise the numbers will be\n-slightly skewed.\n-\n-A third useful test, which can easily be ported to other JMS\n-implementations is the \"topic test\". It does the same as the headers\n-test but using a standard topic (e.g. pub sub).\n-\n-To run the listeners:\n-\n-run_many.sh 10 topic \"topicListener.sh -host 10.0.0.1 -port 5672\"\n-\n-and to run the publisher:\n-\n-topicPublisher.sh -host 10.0.0.1 -port 5672 -clients 10 -messages 10000", "filename": "distribution/src/main/release/README.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/etc/coding_standards.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/etc/coding_standards.xml", "sha": "8f8b8088848b6e5d226abbf448c194735c30066d", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/etc/coding_standards.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,8 +1,9 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.1//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_1.dtd\">\r\n <module name=\"Checker\">\r\n+\r\n     <!-- Checks package.html defined for all packages. -->\r\n-    <module name=\"PackageHtml\"/>\r\n+    <!-- <module name=\"PackageHtml\"/> -->\r\n \r\n     <module name=\"TreeWalker\">\r\n \r", "filename": "etc/coding_standards.xml"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/docs/RunningSustainedTests.txt", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/docs/RunningSustainedTests.txt", "sha": "db4405a32d9db3389940f340cf8378363b0c282e", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/docs/RunningSustainedTests.txt?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,15 +1,17 @@\n In addition to the integration tests the framework provided by this package also allows for\n sustained tests to be run. Currently avaible tests:\n-- org.apache.qpid.sustained.SustainedTestClient : Pub Sub test to determine steady state throughput.\n+- org.apache.qpid.sustained.SustainedClientTestCase : Pub Sub test to determine steady state throughput.\n \n \n Running Tests.\n \n Run the tests as per the integration tests.\n- - Start a broker\n- - Start at least one Client [java org.apache.qpid.sustained.TestClient], ensuring unique naming\n- - Start Test Controller [java org.apache.qpid.sustained.TestCoordinator]\n- - Additional Test clients can be started:\n-    [java org.apache.qpid.sustained.TestClient -j org.apache.qpid.sustained.SustainedTestClient]\n+- Start a broker\n+- Start at least one test client [java org.apache.qpid.interop.TestClient], ensuring unique naming.\n+\n+- Start the test coordinator with the 'fanout' engine, on the sustained test case [java org.apache.qpid.test.framework.distributedtesting.Coordinator]\n+\n+- Additional Test clients can be started and joined into the running test:  [java org.apache.qpid.interop.TestClient -j]\n+\n \n ", "filename": "integrationtests/docs/RunningSustainedTests.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/pom.xml", "sha": "89fd5ede28c5d71af6df155679e6639a205492ab", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/pom.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -40,12 +40,16 @@\n \r\n     <dependencies>\r\n \r\n-        <!-- These tests depend on the client API only. -->\r\n         <dependency>\r\n             <groupId>org.apache.qpid</groupId>\r\n             <artifactId>qpid-client</artifactId>\r\n         </dependency>\r\n \r\n+        <dependency>\r\n+            <groupId>org.apache.qpid</groupId>\r\n+            <artifactId>qpid-systests</artifactId>\r\n+        </dependency>\r\n+\r\n         <dependency>  \r\n             <groupId>org.slf4j</groupId> \r\n             <artifactId>slf4j-log4j12</artifactId>  \r", "filename": "integrationtests/pom.xml"}, {"additions": 44, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase1DummyRun.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase1DummyRun.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/testclient/testcases/TestCase1DummyRun.java", "sha": "b119d13a3d68792e4c429872a595c7af5c0de463", "changes": 51, "status": "renamed", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase1DummyRun.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,11 +18,11 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.interop.testclient.testcases;\r\n+package org.apache.qpid.interop.clienttestcases;\r\n \r\n import org.apache.log4j.Logger;\r\n \r\n-import org.apache.qpid.interop.testclient.InteropClientTestCase;\r\n+import org.apache.qpid.test.framework.distributedtesting.InteropClientTestCase;\r\n \r\n import javax.jms.JMSException;\r\n import javax.jms.Message;\r\n@@ -43,15 +43,31 @@\n  */\r\n public class TestCase1DummyRun implements InteropClientTestCase\r\n {\r\n+    /** Used for debugging. */\r\n     private static final Logger log = Logger.getLogger(TestCase1DummyRun.class);\r\n \r\n+    /**\r\n+     * Should provide the name of the test case that this class implements. The exact names are defined in the\r\n+     * interop testing spec.\r\n+     *\r\n+     * @return The name of the test case that this implements.\r\n+     */\r\n     public String getName()\r\n     {\r\n         log.debug(\"public String getName(): called\");\r\n \r\n         return \"TC1_DummyRun\";\r\n     }\r\n \r\n+    /**\r\n+     * Determines whether the test invite that matched this test case is acceptable.\r\n+     *\r\n+     * @param inviteMessage The invitation to accept or reject.\r\n+     *\r\n+     * @return <tt>true</tt> to accept the invitation, <tt>false</tt> to reject it.\r\n+     *\r\n+     * @throws JMSException Any JMSException resulting from reading the message are allowed to fall through.\r\n+     */\r\n     public boolean acceptInvite(Message inviteMessage) throws JMSException\r\n     {\r\n         log.debug(\"public boolean acceptInvite(Message inviteMessage): called\");\r\n@@ -60,25 +76,41 @@ public boolean acceptInvite(Message inviteMessage) throws JMSException\n         return true;\r\n     }\r\n \r\n+    /**\r\n+     * Assigns the role to be played by this test case. The test parameters are fully specified in the\r\n+     * assignment message. When this method return the test case will be ready to execute.\r\n+     *\r\n+     * @param role              The role to be played; sender or receivers.\r\n+     * @param assignRoleMessage The role assingment message, contains the full test parameters.\r\n+     *\r\n+     * @throws JMSException Any JMSException resulting from reading the message are allowed to fall through.\r\n+     */\r\n     public void assignRole(Roles role, Message assignRoleMessage) throws JMSException\r\n     {\r\n         log.debug(\"public void assignRole(Roles role, Message assignRoleMessage): called\");\r\n \r\n         // Do nothing, both roles are the same.\r\n     }\r\n \r\n+    /**\r\n+     * Performs the test case actions. Returning from here, indicates that the sending role has completed its test.\r\n+     */\r\n     public void start()\r\n     {\r\n         log.debug(\"public void start(): called\");\r\n \r\n         // Do nothing.\r\n     }\r\n \r\n-    public void terminate() throws JMSException\r\n-    {\r\n-        //todo\r\n-    }\r\n-\r\n+    /**\r\n+     * Gets a report on the actions performed by the test case in its assigned role.\r\n+     *\r\n+     * @param session The session to create the report message in.\r\n+     *\r\n+     * @return The report message.\r\n+     *\r\n+     * @throws JMSException Any JMSExceptions resulting from creating the report are allowed to fall through.\r\n+     */\r\n     public Message getReport(Session session) throws JMSException\r\n     {\r\n         log.debug(\"public Message getReport(Session session): called\");\r\n@@ -87,6 +119,11 @@ public Message getReport(Session session) throws JMSException\n         return session.createTextMessage(\"Dummy Run, Ok.\");\r\n     }\r\n \r\n+    /**\r\n+     * Handles incoming test messages. Does nothing.\r\n+     *\r\n+     * @param message The incoming test message.\r\n+     */\r\n     public void onMessage(Message message)\r\n     {\r\n         log.debug(\"public void onMessage(Message message = \" + message + \"): called\");\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase1DummyRun.java"}, {"additions": 13, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase2BasicP2P.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase2BasicP2P.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/testclient/testcases/TestCase2BasicP2P.java", "sha": "080bd846eef99e05c7f962b51f7b603455ba8542", "changes": 33, "status": "renamed", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase2BasicP2P.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,14 +18,15 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.interop.testclient.testcases;\r\n-\r\n-import javax.jms.*;\r\n+package org.apache.qpid.interop.clienttestcases;\r\n \r\n import org.apache.log4j.Logger;\r\n \r\n-import org.apache.qpid.interop.testclient.InteropClientTestCase;\r\n-import org.apache.qpid.interop.testclient.TestClient;\r\n+import org.apache.qpid.test.framework.distributedtesting.InteropClientTestCase;\r\n+import org.apache.qpid.test.framework.distributedtesting.TestClient;\r\n+import org.apache.qpid.test.framework.TestUtils;\r\n+\r\n+import javax.jms.*;\r\n \r\n /**\r\n  * Implements test case 2, basic P2P. Sends/received a specified number of messages to a specified route on the\r\n@@ -54,9 +55,6 @@\n     /** The number of test messages to send. */\r\n     private int numMessages;\r\n \r\n-    /** The routing key to send them to on the default direct exchange. */\r\n-    private Destination sendDestination;\r\n-\r\n     /** The connection to send the test messages on. */\r\n     private Connection connection;\r\n \r\n@@ -100,7 +98,7 @@ public boolean acceptInvite(Message inviteMessage) throws JMSException\n      * Assigns the role to be played by this test case. The test parameters are fully specified in the\r\n      * assignment message. When this method return the test case will be ready to execute.\r\n      *\r\n-     * @param role              The role to be played; sender or receiver.\r\n+     * @param role              The role to be played; sender or receivers.\r\n      *\r\n      * @param assignRoleMessage The role assingment message, contains the full test parameters.\r\n      *\r\n@@ -118,14 +116,12 @@ public void assignRole(Roles role, Message assignRoleMessage) throws JMSExceptio\n         this.role = role;\r\n \r\n         // Create a new connection to pass the test messages on.\r\n-        connection =\r\n-            TestClient.createConnection(TestClient.DEFAULT_CONNECTION_PROPS_RESOURCE, TestClient.brokerUrl,\r\n-                TestClient.virtualHost);\r\n+        connection = TestUtils.createConnection(TestClient.testContextProperties);\r\n         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n \r\n         // Extract and retain the test parameters.\r\n         numMessages = assignRoleMessage.getIntProperty(\"P2P_NUM_MESSAGES\");\r\n-        sendDestination = session.createQueue(assignRoleMessage.getStringProperty(\"P2P_QUEUE_AND_KEY_NAME\"));\r\n+        Destination sendDestination = session.createQueue(assignRoleMessage.getStringProperty(\"P2P_QUEUE_AND_KEY_NAME\"));\r\n \r\n         log.debug(\"numMessages = \" + numMessages);\r\n         log.debug(\"sendDestination = \" + sendDestination);\r\n@@ -138,7 +134,7 @@ public void assignRole(Roles role, Message assignRoleMessage) throws JMSExceptio\n             producer = session.createProducer(sendDestination);\r\n             break;\r\n \r\n-        // Otherwise the receiver role is being assigned, so set this up to listen for messages.\r\n+        // Otherwise the receivers role is being assigned, so set this up to listen for messages.\r\n         case RECEIVER:\r\n             MessageConsumer consumer = session.createConsumer(sendDestination);\r\n             consumer.setMessageListener(this);\r\n@@ -149,7 +145,9 @@ public void assignRole(Roles role, Message assignRoleMessage) throws JMSExceptio\n     }\r\n \r\n     /**\r\n-     * Performs the test case actions.\r\n+     * Performs the test case actions. Returning from here, indicates that the sending role has completed its test.\r\n+     *\r\n+     * @throws JMSException Any JMSException resulting from reading the message are allowed to fall through.\r\n      */\r\n     public void start() throws JMSException\r\n     {\r\n@@ -170,11 +168,6 @@ public void start() throws JMSException\n         }\r\n     }\r\n \r\n-    public void terminate() throws JMSException\r\n-    {\r\n-        //todo\r\n-    }\r\n-\r\n     /**\r\n      * Gets a report on the actions performed by the test case in its assigned role.\r\n      *\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase2BasicP2P.java"}, {"additions": 22, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase3BasicPubSub.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase3BasicPubSub.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/testclient/testcases/TestCase3BasicPubSub.java", "sha": "a11d045e89d37919e7fa06a1ae00a13ecaa88837", "changes": 56, "status": "renamed", "deletions": 34, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase3BasicPubSub.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,18 +18,19 @@\n  * under the License.\r\n  *\r\n  */\r\n-\r\n-package org.apache.qpid.interop.testclient.testcases;\r\n-\r\n-import javax.jms.*;\r\n+package org.apache.qpid.interop.clienttestcases;\r\n \r\n import org.apache.log4j.Logger;\r\n \r\n-import org.apache.qpid.interop.testclient.InteropClientTestCase;\r\n+import org.apache.qpid.test.framework.distributedtesting.InteropClientTestCase;\r\n+import org.apache.qpid.test.framework.distributedtesting.TestClient;\r\n+import org.apache.qpid.test.framework.TestUtils;\r\n+\r\n+import javax.jms.*;\r\n \r\n /**\r\n  * Implements test case 3, basic pub/sub. Sends/received a specified number of messages to a specified route on the\r\n- * default topic exchange, using the specified number of receiver connections. Produces reports on the actual number of\r\n+ * default topic exchange, using the specified number of receivers connections. Produces reports on the actual number of\r\n  * messages sent/received.\r\n  *\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n@@ -55,12 +56,6 @@\n     /** The number of test messages to send. */\r\n     private int numMessages;\r\n \r\n-    /** The number of receiver connection to use. */\r\n-    private int numReceivers;\r\n-\r\n-    /** The routing key to send them to on the default direct exchange. */\r\n-    private Destination sendDestination;\r\n-\r\n     /** The connections to send/receive the test messages on. */\r\n     private Connection[] connection;\r\n \r\n@@ -104,7 +99,7 @@ public boolean acceptInvite(Message inviteMessage) throws JMSException\n      * Assigns the role to be played by this test case. The test parameters are fully specified in the\r\n      * assignment message. When this method return the test case will be ready to execute.\r\n      *\r\n-     * @param role              The role to be played; sender or receiver.\r\n+     * @param role              The role to be played; sender or receivers.\r\n      *\r\n      * @param assignRoleMessage The role assingment message, contains the full test parameters.\r\n      *\r\n@@ -123,7 +118,7 @@ public void assignRole(Roles role, Message assignRoleMessage) throws JMSExceptio\n \r\n         // Extract and retain the test parameters.\r\n         numMessages = assignRoleMessage.getIntProperty(\"PUBSUB_NUM_MESSAGES\");\r\n-        numReceivers = assignRoleMessage.getIntProperty(\"PUBSUB_NUM_RECEIVERS\");\r\n+        int numReceivers = assignRoleMessage.getIntProperty(\"PUBSUB_NUM_RECEIVERS\");\r\n         String sendKey = assignRoleMessage.getStringProperty(\"PUBSUB_KEY\");\r\n \r\n         log.debug(\"numMessages = \" + numMessages);\r\n@@ -139,29 +134,25 @@ public void assignRole(Roles role, Message assignRoleMessage) throws JMSExceptio\n             connection = new Connection[1];\r\n             session = new Session[1];\r\n \r\n-            connection[0] =\r\n-                org.apache.qpid.interop.testclient.TestClient.createConnection(org.apache.qpid.interop.testclient.TestClient.DEFAULT_CONNECTION_PROPS_RESOURCE, org.apache.qpid.interop.testclient.TestClient.brokerUrl,\r\n-                    org.apache.qpid.interop.testclient.TestClient.virtualHost);\r\n+            connection[0] = TestUtils.createConnection(TestClient.testContextProperties);\r\n             session[0] = connection[0].createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n \r\n             // Extract and retain the test parameters.\r\n-            sendDestination = session[0].createTopic(sendKey);\r\n+            Destination sendDestination = session[0].createTopic(sendKey);\r\n \r\n             producer = session[0].createProducer(sendDestination);\r\n             break;\r\n \r\n-        // Otherwise the receiver role is being assigned, so set this up to listen for messages on the required number\r\n-        // of receiver connections.\r\n+        // Otherwise the receivers role is being assigned, so set this up to listen for messages on the required number\r\n+        // of receivers connections.\r\n         case RECEIVER:\r\n-            // Create the required number of receiver connections.\r\n+            // Create the required number of receivers connections.\r\n             connection = new Connection[numReceivers];\r\n             session = new Session[numReceivers];\r\n \r\n             for (int i = 0; i < numReceivers; i++)\r\n             {\r\n-                connection[i] =\r\n-                    org.apache.qpid.interop.testclient.TestClient.createConnection(org.apache.qpid.interop.testclient.TestClient.DEFAULT_CONNECTION_PROPS_RESOURCE, org.apache.qpid.interop.testclient.TestClient.brokerUrl,\r\n-                        org.apache.qpid.interop.testclient.TestClient.virtualHost);\r\n+                connection[i] = TestUtils.createConnection(TestClient.testContextProperties);\r\n                 session[i] = connection[i].createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n \r\n                 sendDestination = session[i].createTopic(sendKey);\r\n@@ -174,14 +165,16 @@ public void assignRole(Roles role, Message assignRoleMessage) throws JMSExceptio\n         }\r\n \r\n         // Start all the connection dispatcher threads running.\r\n-        for (int i = 0; i < connection.length; i++)\r\n+        for (Connection conn : connection)\r\n         {\r\n-            connection[i].start();\r\n+            conn.start();\r\n         }\r\n     }\r\n \r\n     /**\r\n-     * Performs the test case actions.\r\n+     * Performs the test case actions. Returning from here, indicates that the sending role has completed its test.\r\n+     *\r\n+     * @throws JMSException Any JMSException resulting from reading the message are allowed to fall through.\r\n      */\r\n     public void start() throws JMSException\r\n     {\r\n@@ -202,11 +195,6 @@ public void start() throws JMSException\n         }\r\n     }\r\n \r\n-    public void terminate() throws JMSException, InterruptedException\r\n-    {\r\n-        //todo\r\n-    }\r\n-\r\n     /**\r\n      * Gets a report on the actions performed by the test case in its assigned role.\r\n      *\r\n@@ -221,9 +209,9 @@ public Message getReport(Session session) throws JMSException\n         log.debug(\"public Message getReport(Session session): called\");\r\n \r\n         // Close the test connections.\r\n-        for (int i = 0; i < connection.length; i++)\r\n+        for (Connection conn : connection)\r\n         {\r\n-            connection[i].close();\r\n+            conn.close();\r\n         }\r\n \r\n         // Generate a report message containing the count of the number of messages passed.\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/clienttestcases/TestCase3BasicPubSub.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/interop/coordinator/CoordinatingTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/interop/coordinator/CoordinatingTestCase.java", "sha": "d2042be741f9585fcaee364d4f99fc49edbe2ebc", "changes": 263, "status": "removed", "deletions": 263, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/coordinator/CoordinatingTestCase.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,263 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-package org.apache.qpid.interop.coordinator;\r\n-\r\n-import junit.framework.TestCase;\r\n-\r\n-import org.apache.log4j.Logger;\r\n-\r\n-import org.apache.qpid.util.ConversationFactory;\r\n-\r\n-import javax.jms.*;\r\n-\r\n-import java.util.Map;\r\n-\r\n-/**\r\n- * A CoordinatingTestCase is a JUnit test case extension that knows how to coordinate test clients that take part in a\r\n- * test case as defined in the interop testing specification\r\n- * (http://cwiki.apache.org/confluence/display/qpid/Interop+Testing+Specification).\r\n- *\r\n- * <p/>The real logic of the test cases built on top of this, is embeded in the comparison of the sender and receiver\r\n- * reports. An example test method might look like:\r\n- *\r\n- * <p/><pre>\r\n- * public void testExample()\r\n- * {\r\n- *   Properties testConfig = new Properties();\r\n- *   testConfig.add(\"TEST_CASE\", \"example\");\r\n- *   ...\r\n- *\r\n- *   Report[] reports = sequenceTest(testConfig);\r\n- *\r\n- *   // Compare sender and receiver reports.\r\n- *   if (report[0] ... report[1] ...)\r\n- *   {\r\n- *     Assert.fail(\"Sender and receiver reports did not match up.\");\r\n- *   }\r\n- * }\r\n- *\r\n- * </pre>\r\n- *\r\n- * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n- * <tr><th> Responsibilities <th> Collaborations\r\n- * <tr><td> Accept notification of test case participants. <td> {@link InvitingTestDecorator}\r\n- * <tr><td> Accpet JMS Connection to carry out the coordination over.\r\n- * <tr><td> Coordinate the test sequence amongst participants. <td> {@link ConversationFactory}\r\n- * <tr><td> Supply test properties\r\n- * </table>\r\n- */\r\n-public abstract class CoordinatingTestCase extends TestCase\r\n-{\r\n-    /** Used for debugging. */\r\n-    private static final Logger log = Logger.getLogger(CoordinatingTestCase.class);\r\n-\r\n-    /** Holds the contact details for the sending test client. */\r\n-    protected TestClientDetails sender;\r\n-\r\n-    /** Holds the contact details for the receving test client. */\r\n-    protected TestClientDetails receiver;\r\n-\r\n-    /** Holds the conversation factory over which to coordinate the test. */\r\n-    protected ConversationFactory conversationFactory;\r\n-\r\n-    /**\r\n-     * Creates a new coordinating test case with the specified name.\r\n-     *\r\n-     * @param name The test case name.\r\n-     */\r\n-    public CoordinatingTestCase(String name)\r\n-    {\r\n-        super(name);\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the sender test client to coordinate the test with.\r\n-     *\r\n-     * @param sender The contact details of the sending client in the test.\r\n-     */\r\n-    public void setSender(TestClientDetails sender)\r\n-    {\r\n-        log.debug(\"public void setSender(TestClientDetails sender = \" + sender + \"): called\");\r\n-\r\n-        this.sender = sender;\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the receiving test client to coordinate the test with.\r\n-     *\r\n-     * @param receiver The contact details of the sending client in the test.\r\n-     */\r\n-    public void setReceiver(TestClientDetails receiver)\r\n-    {\r\n-        log.debug(\"public void setReceiver(TestClientDetails receiver = \" + receiver + \"): called\");\r\n-\r\n-        this.receiver = receiver;\r\n-    }\r\n-\r\n-    /**\r\n-     * Supplies the sending test client.\r\n-     *\r\n-     * @return The sending test client.\r\n-     */\r\n-    public TestClientDetails getSender()\r\n-    {\r\n-        return sender;\r\n-    }\r\n-\r\n-    /**\r\n-     * Supplies the receiving test client.\r\n-     *\r\n-     * @return The receiving test client.\r\n-     */\r\n-    public TestClientDetails getReceiver()\r\n-    {\r\n-        return receiver;\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the name of the current test method of this test class, with the sending and receiving client names\r\n-     * appended on to it, so that the resulting name unqiuely identifies the test and the clients that participated\r\n-     * in it.\r\n-     *\r\n-     * @return The unique test and client name.\r\n-     */\r\n-    public String getName()\r\n-    {\r\n-        if ((sender == null) || (receiver == null))\r\n-        {\r\n-            return super.getName();\r\n-        }\r\n-        else\r\n-        {\r\n-            return super.getName() + \"_sender_\" + sender.clientName + \"_receiver_\" + receiver.clientName;\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Should provide a translation from the junit method name of a test to its test case name as defined in the\r\n-     * interop testing specification. For example the method \"testP2P\" might map onto the interop test case name\r\n-     * \"TC2_BasicP2P\".\r\n-     *\r\n-     * @param methodName The name of the JUnit test method.\r\n-     *\r\n-     * @return The name of the corresponding interop test case.\r\n-     */\r\n-    public abstract String getTestCaseNameForTestMethod(String methodName);\r\n-\r\n-    /**\r\n-     * Accepts the conversation factory over which to hold the test coordinating conversation.\r\n-     *\r\n-     * @param conversationFactory The conversation factory to coordinate the test over.\r\n-     */\r\n-    public void setConversationFactory(ConversationFactory conversationFactory)\r\n-    {\r\n-        this.conversationFactory = conversationFactory;\r\n-    }\r\n-\r\n-    /**\r\n-     * Holds a test coordinating conversation with the test clients. This is the basic implementation of the inner\r\n-     * loop of Use Case 5. It consists of assigning the test roles, begining the test and gathering the test reports\r\n-     * from the participants.\r\n-     *\r\n-     * @param testProperties The test case definition.\r\n-     *\r\n-     * @return The test results from the senders and receivers.\r\n-     *\r\n-     * @throws JMSException All underlying JMSExceptions are allowed to fall through.\r\n-     */\r\n-    protected Message[] sequenceTest(Map<String, Object> testProperties) throws JMSException\r\n-    {\r\n-        log.debug(\"protected Message[] sequenceTest(Object... testProperties = \" + testProperties + \"): called\");\r\n-\r\n-        Session session = conversationFactory.getSession();\r\n-        Destination senderControlTopic = session.createTopic(sender.privateControlKey);\r\n-        Destination receiverControlTopic = session.createTopic(receiver.privateControlKey);\r\n-\r\n-        ConversationFactory.Conversation senderConversation = conversationFactory.startConversation();\r\n-        ConversationFactory.Conversation receiverConversation = conversationFactory.startConversation();\r\n-\r\n-        // Assign the sender role to the sending test client.\r\n-        Message assignSender = conversationFactory.getSession().createMessage();\r\n-        setPropertiesOnMessage(assignSender, testProperties);\r\n-        assignSender.setStringProperty(\"CONTROL_TYPE\", \"ASSIGN_ROLE\");\r\n-        assignSender.setStringProperty(\"ROLE\", \"SENDER\");\r\n-\r\n-        senderConversation.send(senderControlTopic, assignSender);\r\n-\r\n-        // Assign the receiver role the receiving client.\r\n-        Message assignReceiver = session.createMessage();\r\n-        setPropertiesOnMessage(assignReceiver, testProperties);\r\n-        assignReceiver.setStringProperty(\"CONTROL_TYPE\", \"ASSIGN_ROLE\");\r\n-        assignReceiver.setStringProperty(\"ROLE\", \"RECEIVER\");\r\n-\r\n-        receiverConversation.send(receiverControlTopic, assignReceiver);\r\n-\r\n-        // Wait for the senders and receivers to confirm their roles.\r\n-        senderConversation.receive();\r\n-        receiverConversation.receive();\r\n-\r\n-        // Start the test.\r\n-        Message start = session.createMessage();\r\n-        start.setStringProperty(\"CONTROL_TYPE\", \"START\");\r\n-\r\n-        senderConversation.send(senderControlTopic, start);\r\n-\r\n-        // Wait for the test sender to return its report.\r\n-        Message senderReport = senderConversation.receive();\r\n-\r\n-        try\r\n-        {\r\n-            Thread.sleep(500);\r\n-        }\r\n-        catch (InterruptedException e)\r\n-        { }\r\n-\r\n-        // Ask the receiver for its report.\r\n-        Message statusRequest = session.createMessage();\r\n-        statusRequest.setStringProperty(\"CONTROL_TYPE\", \"STATUS_REQUEST\");\r\n-\r\n-        receiverConversation.send(receiverControlTopic, statusRequest);\r\n-\r\n-        // Wait for the receiver to send its report.\r\n-        Message receiverReport = receiverConversation.receive();\r\n-\r\n-        return new Message[] { senderReport, receiverReport };\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets properties of different types on a JMS Message.\r\n-     *\r\n-     * @param message    The message to set properties on.\r\n-     * @param properties The property name/value pairs to set.\r\n-     *\r\n-     * @throws JMSException All underlying JMSExceptions are allowed to fall through.\r\n-     */\r\n-    public void setPropertiesOnMessage(Message message, Map<String, Object> properties) throws JMSException\r\n-    {\r\n-        for (Map.Entry<String, Object> entry : properties.entrySet())\r\n-        {\r\n-            String name = entry.getKey();\r\n-            Object value = entry.getValue();\r\n-\r\n-            message.setObjectProperty(name, value);\r\n-        }\r\n-    }\r\n-}\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/CoordinatingTestCase.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/interop/coordinator/ListeningTestDecorator.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/interop/coordinator/ListeningTestDecorator.java", "sha": "4312dfbcc6e55aa2b71b00d28252858722595339", "changes": 200, "status": "removed", "deletions": 200, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/coordinator/ListeningTestDecorator.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,200 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.interop.coordinator;\n-\n-import junit.framework.Test;\n-import junit.framework.TestResult;\n-import org.apache.log4j.Logger;\n-import org.apache.qpid.util.ConversationFactory;\n-import uk.co.thebadgerset.junit.extensions.WrappedSuiteTestDecorator;\n-\n-import javax.jms.Connection;\n-import javax.jms.Destination;\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.MessageListener;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.Set;\n-\n-/**\n- * <p><table id=\"crc\"><caption>CRC Card</caption> <tr><th> Responsibilities <th> Collaborations <tr><td> Broadcast test\n- * invitations and collect enlists. <td> {@link ConversationFactory}. <tr><td> Output test failures for clients\n- * unwilling to run the test case. <td> {@link Coordinator} <tr><td> Execute coordinated test cases. <td> {@link\n- * CoordinatingTestCase} </table>\n- */\n-public class ListeningTestDecorator extends WrappedSuiteTestDecorator implements MessageListener\n-{\n-    private static final Logger log = Logger.getLogger(ListeningTestDecorator.class);\n-\n-    /** Holds the contact information for all test clients that are available and that may take part in the test. */\n-    Set<TestClientDetails> allClients;\n-\n-    /** Holds the conversation helper for the control level conversation for coordinating the test through. */\n-    ConversationFactory conversationFactory;\n-\n-    /** Holds the connection that the control conversation is held over. */\n-    Connection connection;\n-\n-    /** Holds the underlying {@link CoordinatingTestCase}s that this decorator wraps. */\n-    WrappedSuiteTestDecorator testSuite;\n-\n-    /** Hold the current running test case. */\n-    CoordinatingTestCase _currentTest = null;\n-\n-    /**\n-     * Creates a wrapped suite test decorator from another one.\n-     *\n-     * @param suite               The test suite.\n-     * @param availableClients    The list of all clients that responded to the compulsory invite.\n-     * @param controlConversation The conversation helper for the control level, test coordination conversation.\n-     * @param controlConnection   The connection that the coordination messages are sent over.\n-     */\n-    public ListeningTestDecorator(WrappedSuiteTestDecorator suite, Set<TestClientDetails> availableClients,\n-                                  ConversationFactory controlConversation, Connection controlConnection)\n-    {\n-        super(suite);\n-\n-        log.debug(\"public InvitingTestDecorator(WrappedSuiteTestDecorator suite, Set<TestClientDetails> allClients = \"\n-                  + availableClients + \", ConversationHelper controlConversation = \" + controlConversation + \"): called\");\n-\n-        testSuite = suite;\n-        allClients = availableClients;\n-        conversationFactory = controlConversation;\n-        connection = controlConnection;\n-    }\n-\n-    /**\n-     * Broadcasts a test invitation and accetps enlisting from participating clients. The wrapped test case is then\n-     * repeated for every combination of test clients (provided the wrapped test case extends {@link\n-     * CoordinatingTestCase}.\n-     *\n-     * <p/>Any JMSExceptions during the invite/enlist conversation will be allowed to fall through as runtime\n-     * exceptions, resulting in the non-completion of the test run.\n-     *\n-     * @param testResult The the results object to monitor the test results with.\n-     *\n-     * @todo Better error recovery for failure of the invite/enlist conversation could be added.\n-     */\n-    public void run(TestResult testResult)\n-    {\n-        log.debug(\"public void run(TestResult testResult): called\");\n-\n-        Collection<Test> tests = testSuite.getAllUnderlyingTests();\n-\n-        for (Test test : tests)\n-        {\n-            CoordinatingTestCase coordTest = (CoordinatingTestCase) test;\n-\n-            Set<TestClientDetails> enlists = signupClients(coordTest);\n-\n-            if (enlists.size() == 0)\n-            {\n-                throw new RuntimeException(\"No clients to test with\");\n-            }\n-\n-            Iterator<TestClientDetails> clients = enlists.iterator();\n-            coordTest.setSender(clients.next());\n-\n-            while (clients.hasNext())\n-            {\n-                // Set the sending and receiving client details on the test case.\n-                coordTest.setReceiver(clients.next());\n-            }\n-\n-            // Pass down the connection to hold the coordination conversation over.\n-            coordTest.setConversationFactory(conversationFactory);\n-\n-\n-            if (coordTest instanceof ListeningCoordinatorTest)\n-            {\n-                _currentTest = coordTest;\n-            }\n-            // Execute the test case.\n-            coordTest.run(testResult);\n-\n-            _currentTest = null;\n-        }\n-    }\n-\n-    private Set<TestClientDetails> signupClients(CoordinatingTestCase coordTest)\n-    {\n-        // Broadcast the invitation to find out what clients are available to test.\n-        Set<TestClientDetails> enlists;\n-        try\n-        {\n-            Message invite = conversationFactory.getSession().createMessage();\n-            Destination controlTopic = conversationFactory.getSession().createTopic(\"iop.control\");\n-            ConversationFactory.Conversation conversation = conversationFactory.startConversation();\n-\n-            invite.setStringProperty(\"CONTROL_TYPE\", \"INVITE\");\n-            invite.setStringProperty(\"TEST_NAME\", coordTest.getTestCaseNameForTestMethod(coordTest.getName()));\n-\n-            conversation.send(controlTopic, invite);\n-\n-            // Wait for a short time, to give test clients an opportunity to reply to the invitation.\n-            Collection<Message> replies = conversation.receiveAll(allClients.size(), 5000);\n-\n-            log.debug(\"Received \" + replies.size() + \" enlist replies\");\n-            \n-            enlists = Coordinator.extractEnlists(replies);\n-\n-            //Create topic to listen on for latejoiners\n-            Destination listenTopic = conversationFactory.getSession().createTopic(\"iop.control.test.\" + coordTest.getTestCaseNameForTestMethod(coordTest.getName()));\n-\n-            //Listen for joiners\n-            conversationFactory.getSession().createConsumer(listenTopic).setMessageListener(this);\n-            log.debug(\"Created consumer on :\" + listenTopic);\n-        }\n-        catch (JMSException e)\n-        {\n-            throw new RuntimeException(\"There was a JMSException during the invite/enlist conversation.\", e);\n-        }\n-\n-        return enlists;\n-    }\n-\n-    /**\n-     * Prints a string summarizing this test decorator, mainly for debugging purposes.\n-     *\n-     * @return String representation for debugging purposes.\n-     */\n-    public String toString()\n-    {\n-        return \"ListeningTestDecorator: [ testSuite = \" + testSuite + \" ]\";\n-    }\n-\n-\n-    public void onMessage(Message message)\n-    {\n-        try\n-        {\n-            if (message.getStringProperty(\"CONTROL_TYPE\").equals(\"LATEJOIN\"))\n-            {\n-                ((ListeningCoordinatorTest) _currentTest).latejoin(message);\n-            }\n-        }\n-        catch (JMSException e)\n-        {\n-            log.debug(\"Unable to process message:\" + message);\n-        }\n-    }\n-}", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/ListeningTestDecorator.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/interop/old/Listener.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/interop/old/Listener.java", "sha": "5545f8d2dc29eac22157be5710b70a233b37c09a", "changes": 291, "status": "removed", "deletions": 291, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/old/Listener.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,291 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-package org.apache.qpid.interop.old;\r\n-\r\n-import java.util.Random;\r\n-\r\n-import javax.jms.*;\r\n-\r\n-import org.apache.log4j.Logger;\r\n-import org.apache.log4j.NDC;\r\n-\r\n-import org.apache.qpid.AMQException;\r\n-import org.apache.qpid.client.AMQConnection;\r\n-import org.apache.qpid.client.AMQQueue;\r\n-import org.apache.qpid.client.AMQSession;\r\n-import org.apache.qpid.client.AMQTopic;\r\n-import org.apache.qpid.exchange.ExchangeDefaults;\r\n-import org.apache.qpid.url.URLSyntaxException;\r\n-\r\n-/**\r\n- * Listener implements the listening end of the Qpid interop tests. It is capable of being run as a standalone listener\r\n- * that responds to the test messages send by the publishing end of the tests implemented by {@link org.apache.qpid.interop.old.Publisher}.\r\n- *\r\n- * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n- * <tr><th> Responsibilities <th> Collaborations\r\n- * <tr><td> Count messages received on a topic. <td> {@link org.apache.qpid.interop.old.Publisher}\r\n- * <tr><td> Send reports on messages received, when requested to. <td> {@link org.apache.qpid.interop.old.Publisher}\r\n- * <tr><td> Shutdown, when requested to. <td> {@link org.apache.qpid.interop.old.Publisher}\r\n- * <tr><td>\r\n- *\r\n- * @todo This doesn't implement the interop test spec yet. Its a port of the old topic tests but has been adapted with\r\n- *       interop spec in mind.\r\n- *\r\n- * @todo I've added lots of field table types in the report message, just to check if the other end can decode them\r\n- *       correctly. Not really the right place to test this, so remove them from {@link #sendReport()} once a better\r\n- *       test exists.\r\n- */\r\n-public class Listener implements MessageListener\r\n-{\r\n-    private static Logger log = Logger.getLogger(Listener.class);\r\n-\r\n-    /** The default AMQ connection URL to use for tests. */\r\n-    public static final String DEFAULT_URI = \"amqp://guest:guest@default/test?brokerlist='tcp://localhost:5672'\";\r\n-\r\n-    /** Holds the name of (routing key for) the topic to receive test messages on. */\r\n-    public static final String CONTROL_TOPIC = \"topic_control\";\r\n-\r\n-    /** Holds the name of (routing key for) the queue to send reports to. */\r\n-    public static final String RESPONSE_QUEUE = \"response\";\r\n-\r\n-    /** Holds the JMS Topic to receive test messages on. */\r\n-    private final Topic _topic;\r\n-\r\n-    /** Holds the JMS Queue to send reports to. */\r\n-    private final Queue _response;\r\n-\r\n-    /** Holds the connection to listen on. */\r\n-    private final Connection _connection;\r\n-\r\n-    /** Holds the producer to send control messages on. */\r\n-    private final MessageProducer _controller;\r\n-\r\n-    /** Holds the JMS session. */\r\n-    private final javax.jms.Session _session;\r\n-\r\n-    /** Holds a flag to indicate that a timer has begun on the first message. Reset when report is sent. */\r\n-    private boolean init;\r\n-\r\n-    /** Holds the count of messages received by this listener. */\r\n-    private int count;\r\n-\r\n-    /** Used to hold the start time of the first message. */\r\n-    private long start;\r\n-\r\n-    /**\r\n-     * Creates a topic listener using the specified broker URL.\r\n-     *\r\n-     * @param connectionUrl The broker URL to listen on.\r\n-     *\r\n-     * @throws AMQException If the broker connection cannot be established.\r\n-     * @throws URLSyntaxException If the broker URL syntax is not correct.\r\n-     * @throws JMSException Any underlying JMSException is allowed to fall through.\r\n-     */\r\n-    Listener(String connectionUrl) throws AMQException, JMSException, URLSyntaxException\r\n-    {\r\n-        log.debug(\"Listener(String connectionUrl = \" + connectionUrl + \"): called\");\r\n-\r\n-        // Create a connection to the broker.\r\n-        _connection = new AMQConnection(connectionUrl);\r\n-\r\n-        // Establish a session on the broker.\r\n-        _session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n-\r\n-        // Set up the destinations to listen for test and control messages on.\r\n-        _topic = _session.createTopic(CONTROL_TOPIC);\r\n-        _response = _session.createQueue(RESPONSE_QUEUE);\r\n-\r\n-        // Set this listener up to listen for incoming messages on the test topic.\r\n-        _session.createConsumer(_topic).setMessageListener(this);\r\n-\r\n-        // Set up this listener with a producer to send the reports on.\r\n-        _controller = _session.createProducer(_response);\r\n-\r\n-        _connection.start();\r\n-        System.out.println(\"Waiting for messages...\");\r\n-    }\r\n-\r\n-    /**\r\n-     * Starts a test subscriber. The broker URL must be specified as the first command line argument.\r\n-     *\r\n-     * @param argv The command line arguments, ignored.\r\n-     *\r\n-     * @todo Add command line arguments to configure all aspects of the test.\r\n-     */\r\n-    public static void main(String[] argv)\r\n-    {\r\n-        try\r\n-        {\r\n-            new Listener(DEFAULT_URI);\r\n-        }\r\n-        catch (Exception e)\r\n-        {\r\n-            e.printStackTrace();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Handles all message received by this listener. Test messages are counted, report messages result in a report being sent and\r\n-     * shutdown messages result in this listener being terminated.\r\n-     *\r\n-     * @param message The received message.\r\n-     */\r\n-    public void onMessage(Message message)\r\n-    {\r\n-        log.debug(\"public void onMessage(Message message = \" + message + \"): called\");\r\n-\r\n-        // Take the start time of the first message if this is the first message.\r\n-        if (!init)\r\n-        {\r\n-            start = System.nanoTime() / 1000000;\r\n-            count = 0;\r\n-            init = true;\r\n-        }\r\n-\r\n-        try\r\n-        {\r\n-            // Check if the message is a control message telling this listener to shut down.\r\n-            if (isShutdown(message))\r\n-            {\r\n-                log.debug(\"Got a shutdown message.\");\r\n-                shutdown();\r\n-            }\r\n-            // Check if the message is a report request message asking this listener to respond with the message count.\r\n-            else if (isReport(message))\r\n-            {\r\n-                log.debug(\"Got a report request message.\");\r\n-\r\n-                // Send the message count report.\r\n-                sendReport();\r\n-\r\n-                // Reset the initialization flag so that the next message is considered to be the first.\r\n-                init = false;\r\n-            }\r\n-            // Otherwise it is an ordinary test message, so increment the message count.\r\n-            else\r\n-            {\r\n-                count++;\r\n-            }\r\n-        }\r\n-        catch (JMSException e)\r\n-        {\r\n-            log.warn(\"There was a JMSException during onMessage.\", e);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Checks a message to see if it is a termination request control message.\r\n-     *\r\n-     * @param m The message to check.\r\n-     *\r\n-     * @return <tt>true</tt> if it is a termination request control message, <tt>false</tt> otherwise.\r\n-     *\r\n-     * @throws JMSException Any underlying JMSException is allowed to fall through.\r\n-     */\r\n-    boolean isShutdown(Message m) throws JMSException\r\n-    {\r\n-        boolean result = checkTextField(m, \"TYPE\", \"TERMINATION_REQUEST\");\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    /**\r\n-     * Checks a message to see if it is a report request control message.\r\n-     *\r\n-     * @param m The message to check.\r\n-     *\r\n-     * @return <tt>true</tt> if it is a report request control message, <tt>false</tt> otherwise.\r\n-     *\r\n-     * @throws JMSException Any underlying JMSException is allowed to fall through.\r\n-     */\r\n-    boolean isReport(Message m) throws JMSException\r\n-    {\r\n-        boolean result = checkTextField(m, \"TYPE\", \"REPORT_REQUEST\");\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    /**\r\n-     * Checks whether or not a text field on a message has the specified value.\r\n-     *\r\n-     * @param m         The message to check.\r\n-     * @param fieldName The name of the field to check.\r\n-     * @param value     The expected value of the field to compare with.\r\n-     *\r\n-     * @return <tt>true</tt>If the specified field has the specified value, <tt>fals</tt> otherwise.\r\n-     *\r\n-     * @throws JMSException Any JMSExceptions are allowed to fall through.\r\n-     */\r\n-    private static boolean checkTextField(Message m, String fieldName, String value) throws JMSException\r\n-    {\r\n-        //log.debug(\"private static boolean checkTextField(Message m = \" + m + \", String fieldName = \" + fieldName\r\n-        //          + \", String value = \" + value + \"): called\");\r\n-\r\n-        String comp = m.getStringProperty(fieldName);\r\n-        //log.debug(\"comp = \" + comp);\r\n-\r\n-        boolean result = (comp != null) && comp.equals(value);\r\n-        //log.debug(\"result = \" + result);\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    /**\r\n-     * Closes down the connection to the broker.\r\n-     *\r\n-     * @throws JMSException Any underlying JMSException is allowed to fall through.\r\n-     */\r\n-    private void shutdown() throws JMSException\r\n-    {\r\n-        _session.close();\r\n-        _connection.stop();\r\n-        _connection.close();\r\n-    }\r\n-\r\n-    /**\r\n-     * Send the report message to the response queue.\r\n-     *\r\n-     * @throws JMSException Any underlying JMSException is allowed to fall through.\r\n-     */\r\n-    private void sendReport() throws JMSException\r\n-    {\r\n-        log.debug(\"private void report(): called\");\r\n-\r\n-        // Create the report message.\r\n-        long time = ((System.nanoTime() / 1000000) - start);\r\n-        String msg = \"Received \" + count + \" in \" + time + \"ms\";\r\n-        Message message = _session.createTextMessage(msg);\r\n-\r\n-        // Shove some more field table types in the message just to see if the other end can handle it.\r\n-        message.setBooleanProperty(\"BOOLEAN\", true);\r\n-        //message.setByteProperty(\"BYTE\", (byte) 5);\r\n-        message.setDoubleProperty(\"DOUBLE\", Math.PI);\r\n-        message.setFloatProperty(\"FLOAT\", 1.0f);\r\n-        message.setIntProperty(\"INT\", 1);\r\n-        message.setShortProperty(\"SHORT\", (short) 1);\r\n-        message.setLongProperty(\"LONG\", (long) 1827361278);\r\n-        message.setStringProperty(\"STRING\", \"hello\");\r\n-\r\n-        // Send the report message.\r\n-        _controller.send(message);\r\n-        log.debug(\"Sent report: \" + msg);\r\n-    }\r\n-}\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/old/Listener.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/interop/old/Publisher.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/interop/old/Publisher.java", "sha": "f3a545f580002261200ec1cf4e05652633b8fba3", "changes": 244, "status": "removed", "deletions": 244, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/old/Publisher.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,244 +0,0 @@\n-/*\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- *\r\n- */\r\n-package org.apache.qpid.interop.old;\r\n-\r\n-import java.util.concurrent.CountDownLatch;\r\n-import java.util.concurrent.TimeUnit;\r\n-\r\n-import javax.jms.*;\r\n-\r\n-import org.apache.log4j.Logger;\r\n-\r\n-import org.apache.qpid.AMQException;\r\n-import org.apache.qpid.client.AMQConnection;\r\n-import org.apache.qpid.url.URLSyntaxException;\r\n-\r\n-/**\r\n- * Publisher is the sending end of Qpid interop tests. It is capable of being run as a standalone publisher\r\n- * that sends test messages to the listening end of the tests implemented by {@link org.apache.qpid.interop.old.Listener}.\r\n- *\r\n- * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n- * <tr><th> Responsibilities <th> Collaborations\r\n- * <tr><td>\r\n- *\r\n- * @todo This doesn't implement the interop test spec yet. Its a port of the old topic tests but has been adapted with\r\n- *       interop spec in mind.\r\n- *\r\n- * @todo I've added lots of field table types in the report request message, just to check if the other end can decode\r\n- *       them correctly. Not really the right place to test this, so remove them from {@link #doTest()} once a better\r\n- *       test exists.\r\n- */\r\n-public class Publisher implements MessageListener\r\n-{\r\n-    private static Logger log = Logger.getLogger(Publisher.class);\r\n-\r\n-    /** The default AMQ connection URL to use for tests. */\r\n-    public static final String DEFAULT_URI = \"amqp://guest:guest@default/test?brokerlist='tcp://localhost:5672'\";\r\n-\r\n-    /** Holds the default test timeout for broker communications before tests give up. */\r\n-    public static final int TIMEOUT = 3000;\r\n-\r\n-    /** Holds the routing key for the topic to send test messages on. */\r\n-    public static final String CONTROL_TOPIC = \"topic_control\";\r\n-\r\n-    /** Holds the routing key for the queue to receive reports on. */\r\n-    public static final String RESPONSE_QUEUE = \"response\";\r\n-\r\n-    /** Holds the JMS Topic to send test messages on. */\r\n-    private final Topic _topic;\r\n-\r\n-    /** Holds the JMS Queue to receive reports on. */\r\n-    private final Queue _response;\r\n-\r\n-    /** Holds the number of messages to send in each test run. */\r\n-    private int numMessages;\r\n-\r\n-    /** A monitor used to wait for all reports to arrive back from consumers on. */\r\n-    private CountDownLatch allReportsReceivedEvt;\r\n-\r\n-    /** Holds the connection to listen on. */\r\n-    private Connection _connection;\r\n-\r\n-    /** Holds the channel for all test messages.*/\r\n-    private Session _session;\r\n-\r\n-    /** Holds the producer to send test messages on. */\r\n-    private MessageProducer publisher;\r\n-\r\n-    /**\r\n-     * Creates a topic publisher that will send the specifed number of messages and expect the specifed number of report back from test\r\n-     * subscribers.\r\n-     *\r\n-     * @param connectionUri  The broker URL.\r\n-     * @param numMessages    The number of messages to send in each test.\r\n-     * @param numSubscribers The number of subscribes that are expected to reply with a report.\r\n-     */\r\n-    Publisher(String connectionUri, int numMessages, int numSubscribers)\r\n-       throws AMQException, JMSException, URLSyntaxException\r\n-    {\r\n-        log.debug(\"Publisher(String connectionUri = \" + connectionUri + \", int numMessages = \" + numMessages\r\n-                  + \", int numSubscribers = \" + numSubscribers + \"): called\");\r\n-\r\n-        // Create a connection to the broker.\r\n-        _connection = new AMQConnection(connectionUri);\r\n-\r\n-        // Establish a session on the broker.\r\n-        _session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n-\r\n-        // Set up the destinations to send test messages and listen for reports on.\r\n-        _topic = _session.createTopic(CONTROL_TOPIC);\r\n-        _response = _session.createQueue(RESPONSE_QUEUE);\r\n-\r\n-        // Set this listener up to listen for reports on the response queue.\r\n-        _session.createConsumer(_response).setMessageListener(this);\r\n-\r\n-        // Set up this listener with a producer to send the test messages and report requests on.\r\n-        publisher = _session.createProducer(_topic);\r\n-\r\n-        // Keep the test parameters.\r\n-        this.numMessages = numMessages;\r\n-\r\n-        // Set up a countdown to count all subscribers sending their reports.\r\n-        allReportsReceivedEvt = new CountDownLatch(numSubscribers);\r\n-\r\n-        _connection.start();\r\n-        System.out.println(\"Sending messages and waiting for reports...\");\r\n-    }\r\n-\r\n-    /**\r\n-     * Start a test publisher. The broker URL must be specified as the first command line argument.\r\n-     *\r\n-     * @param argv The command line arguments, ignored.\r\n-     *\r\n-     * @todo Add command line arguments to configure all aspects of the test.\r\n-     */\r\n-    public static void main(String[] argv)\r\n-    {\r\n-        try\r\n-        {\r\n-            // Create an instance of this publisher with the command line parameters.\r\n-            Publisher publisher = new Publisher(DEFAULT_URI, 1, 1);\r\n-\r\n-            // Publish the test messages.\r\n-            publisher.doTest();\r\n-        }\r\n-        catch (Exception e)\r\n-        {\r\n-            e.printStackTrace();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Sends the test messages and waits for all subscribers to reply with a report.\r\n-     *\r\n-     * @throws JMSException Any underlying JMSException is allowed to fall through.\r\n-     */\r\n-    public void doTest() throws JMSException\r\n-    {\r\n-        log.debug(\"public void DoTest(): called\");\r\n-\r\n-        // Create a test message to send.\r\n-        Message testMessage = _session.createTextMessage(\"test\");\r\n-\r\n-        // Send the desired number of test messages.\r\n-        for (int i = 0; i < numMessages; i++)\r\n-        {\r\n-            publisher.send(testMessage);\r\n-        }\r\n-\r\n-        log.debug(\"Sent \" + numMessages + \" test messages.\");\r\n-\r\n-        // Send the report request.\r\n-        Message reportRequestMessage = _session.createTextMessage(\"Report request message.\");\r\n-        reportRequestMessage.setStringProperty(\"TYPE\", \"REPORT_REQUEST\");\r\n-\r\n-        reportRequestMessage.setBooleanProperty(\"BOOLEAN\", false);\r\n-        //reportRequestMessage.Headers.SetByte(\"BYTE\", 5);\r\n-        reportRequestMessage.setDoubleProperty(\"DOUBLE\", 3.141);\r\n-        reportRequestMessage.setFloatProperty(\"FLOAT\", 1.0f);\r\n-        reportRequestMessage.setIntProperty(\"INT\", 1);\r\n-        reportRequestMessage.setLongProperty(\"LONG\", 1);\r\n-        reportRequestMessage.setStringProperty(\"STRING\", \"hello\");\r\n-        reportRequestMessage.setShortProperty(\"SHORT\", (short) 2);\r\n-\r\n-        publisher.send(reportRequestMessage);\r\n-\r\n-        log.debug(\"Sent the report request message, waiting for all replies...\");\r\n-\r\n-        // Wait until all the reports come in.\r\n-        try\r\n-        {\r\n-            allReportsReceivedEvt.await(TIMEOUT, TimeUnit.MILLISECONDS);\r\n-        }\r\n-        catch (InterruptedException e)\r\n-        { }\r\n-\r\n-        // Check if all reports were really received or if the timeout occurred.\r\n-        if (allReportsReceivedEvt.getCount() == 0)\r\n-        {\r\n-            log.debug(\"Got all reports.\");\r\n-        }\r\n-        else\r\n-        {\r\n-            log.debug(\"Waiting for reports timed out, still waiting for \" + allReportsReceivedEvt.getCount() + \".\");\r\n-        }\r\n-\r\n-        // Send the termination request.\r\n-        Message terminationRequestMessage = _session.createTextMessage(\"Termination request message.\");\r\n-        terminationRequestMessage.setStringProperty(\"TYPE\", \"TERMINATION_REQUEST\");\r\n-        publisher.send(terminationRequestMessage);\r\n-\r\n-        log.debug(\"Sent the termination request message.\");\r\n-\r\n-        // Close all message producers and consumers and the connection to the broker.\r\n-        shutdown();\r\n-    }\r\n-\r\n-    /**\r\n-     * Handles all report messages from subscribers. This decrements the count of subscribers that are still to reply, until this becomes\r\n-     * zero, at which time waiting threads are notified of this event.\r\n-     *\r\n-     * @param message The received report message.\r\n-     */\r\n-    public void onMessage(Message message)\r\n-    {\r\n-        log.debug(\"public void OnMessage(Message message = \" + message + \"): called\");\r\n-\r\n-        // Decrement the count of expected messages and release the wait monitor when this becomes zero.\r\n-        allReportsReceivedEvt.countDown();\r\n-\r\n-        if (allReportsReceivedEvt.getCount() == 0)\r\n-        {\r\n-            log.debug(\"Got reports from all subscribers.\");\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Stops the message consumers and closes the connection.\r\n-     *\r\n-     * @throws JMSException Any underlying JMSException is allowed to fall through.\r\n-     */\r\n-    private void shutdown() throws JMSException\r\n-    {\r\n-        _session.close();\r\n-        _connection.close();\r\n-    }\r\n-}\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/old/Publisher.java"}, {"additions": 101, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/testcases/CircuitTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/testcases/CircuitTestCase.java", "sha": "966a545e16e73749ba178a9c7e2d5a1efd2b5416", "changes": 101, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/testcases/CircuitTestCase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,101 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.interop.testcases;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.test.framework.sequencers.TestCaseSequencer;\r\n+import org.apache.qpid.test.framework.Circuit;\r\n+import org.apache.qpid.test.framework.FrameworkBaseCase;\r\n+import org.apache.qpid.test.framework.MessagingTestConfigProperties;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n+import uk.co.thebadgerset.junit.extensions.util.TestContextProperties;\r\n+\r\n+/**\r\n+ * CircuitTestCase runs a test over a {@link Circuit} controlled by the test parameters.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td>\r\n+ * </table>\r\n+ *\r\n+ * @todo When working with test context properties, add overrides to defaults to the singleton instance, but when taking\r\n+ *       a starting point to add specific test case parameters to, take a copy. Use the copy with test case specifics\r\n+ *       to control the test.\r\n+ */\r\n+public class CircuitTestCase extends FrameworkBaseCase\r\n+{\r\n+    /** Used for debugging. */\r\n+    private static final Logger log = Logger.getLogger(CircuitTestCase.class);\r\n+\r\n+    /**\r\n+     * Creates a new test case with the specified name.\r\n+     *\r\n+     * @param name The test case name.\r\n+     */\r\n+    public CircuitTestCase(String name)\r\n+    {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /**\r\n+     * Performs the a basic P2P test case.\r\n+     *\r\n+     * @throws Exception Any exceptions are allowed to fall through and fail the test.\r\n+     */\r\n+    public void testBasicP2P() throws Exception\r\n+    {\r\n+        log.debug(\"public void testBasicP2P(): called\");\r\n+\r\n+        // Get the test parameters, any overrides on the command line will have been applied.\r\n+        ParsedProperties testProps = TestContextProperties.getInstance(MessagingTestConfigProperties.defaults);\r\n+\r\n+        // Customize the test parameters.\r\n+        testProps.setProperty(\"TEST_NAME\", \"DEFAULT_CIRCUIT_TEST\");\r\n+        testProps.setProperty(MessagingTestConfigProperties.SEND_DESTINATION_NAME_ROOT_PROPNAME, \"testqueue\");\r\n+\r\n+        // Get the test sequencer to create test circuits and run the standard test procedure through.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+\r\n+        // Send the test messages, and check that there were no errors doing so.\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n+\r\n+        // Check that all of the message were sent.\r\n+        // Check that the receiving end got the same number of messages as the publishing end.\r\n+    }\r\n+\r\n+    /**\r\n+     * Should provide a translation from the junit method name of a test to its test case name as known to the test\r\n+     * clients that will run the test. The purpose of this is to convert the JUnit method name into the correct test\r\n+     * case name to place into the test invite. For example the method \"testP2P\" might map onto the interop test case\r\n+     * name \"TC2_BasicP2P\".\r\n+     *\r\n+     * @param methodName The name of the JUnit test method.\r\n+     *\r\n+     * @return The name of the corresponding interop test case.\r\n+     */\r\n+    public String getTestCaseNameForTestMethod(String methodName)\r\n+    {\r\n+        return \"DEFAULT_CIRCUIT_TEST\";\r\n+    }\r\n+}\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/testcases/CircuitTestCase.java"}, {"additions": 17, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase1DummyRun.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase1DummyRun.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/testcases/CoordinatingTestCase1DummyRun.java", "sha": "73e08b578e26aabdfe222d80647da372b7d680ea", "changes": 35, "status": "renamed", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase1DummyRun.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,56 +18,55 @@\n  * under the License.\r\n  *\r\n  */\r\n-\r\n-package org.apache.qpid.interop.coordinator.testcases;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.jms.Message;\r\n-\r\n-import junit.framework.Assert;\r\n+package org.apache.qpid.interop.testcases;\r\n \r\n import org.apache.log4j.Logger;\r\n \r\n-import org.apache.qpid.interop.coordinator.CoordinatingTestCase;\r\n+import org.apache.qpid.test.framework.distributedtesting.DistributedTestCase;\r\n+\r\n+import java.util.Properties;\r\n \r\n /**\r\n+ * Coordinates test case 1, from the interop test specification. This test connects up the sender and receivers roles,\r\n+ * and gets some dummy test reports from them, in order to check that the test framework itself is operational.\r\n+ *\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n  * <tr><th> Responsibilities <th> Collaborations\r\n  * <tr><td> Exercises the interop testing framework without actually sending any test messages.\r\n- *     <td> {@link org.apache.qpid.interop.coordinator.CoordinatingTestCase}\r\n+ *     <td> {@link org.apache.qpid.test.framework.distributedtesting.DistributedTestCase}\r\n  * </table>\r\n  */\r\n-public class CoordinatingTestCase1DummyRun extends CoordinatingTestCase\r\n+public class InteropTestCase1DummyRun extends DistributedTestCase\r\n {\r\n     /** Used for debugging. */\r\n-    private static final Logger log = Logger.getLogger(CoordinatingTestCase1DummyRun.class);\r\n+    private static final Logger log = Logger.getLogger(InteropTestCase1DummyRun.class);\r\n \r\n     /**\r\n      * Creates a new coordinating test case with the specified name.\r\n      *\r\n      * @param name The test case name.\r\n      */\r\n-    public CoordinatingTestCase1DummyRun(String name)\r\n+    public InteropTestCase1DummyRun(String name)\r\n     {\r\n         super(name);\r\n     }\r\n \r\n     /**\r\n      * Performs the basic P2P test case, \"Test Case 2\" in the specification.\r\n+     *\r\n+     * @throws Exception Any exceptions are allowed to fall through and fail the test.\r\n      */\r\n     public void testDummyRun() throws Exception\r\n     {\r\n         log.debug(\"public void testDummyRun(): called\");\r\n \r\n-        Map<String, Object> testConfig = new HashMap<String, Object>();\r\n+        Properties testConfig = new Properties();\r\n         testConfig.put(\"TEST_NAME\", \"TC1_DummyRun\");\r\n \r\n-        Message[] reports = sequenceTest(testConfig);\r\n+        /*Message[] reports =*/ getTestSequencer().sequenceTest(null, null, testConfig);\r\n \r\n-        // Compare sender and receiver reports.\r\n-        Assert.assertEquals(\"Expected to get 2 dummy reports.\", 2, reports.length);\r\n+        // Compare sender and receivers reports.\r\n+        // Assert.assertEquals(\"Expected to get 2 dummy reports.\", 2, reports.length);\r\n     }\r\n \r\n     /**\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase1DummyRun.java"}, {"additions": 21, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase2BasicP2P.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase2BasicP2P.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/testcases/CoordinatingTestCase2BasicP2P.java", "sha": "f77bbf032f9bb729d5e9292231d0683ac5912990", "changes": 42, "status": "renamed", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase2BasicP2P.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,61 +18,61 @@\n  * under the License.\r\n  *\r\n  */\r\n-\r\n-package org.apache.qpid.interop.coordinator.testcases;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.jms.Message;\r\n-\r\n-import junit.framework.Assert;\r\n+package org.apache.qpid.interop.testcases;\r\n \r\n import org.apache.log4j.Logger;\r\n \r\n-import org.apache.qpid.interop.coordinator.CoordinatingTestCase;\r\n+import org.apache.qpid.test.framework.distributedtesting.DistributedTestCase;\r\n+\r\n+import java.util.Properties;\r\n \r\n /**\r\n+ * Implements test case 2, from the interop test specification. This test sets up the TC2_BasicP2P test for 50\r\n+ * messages. It checks that the sender and receivers reports both indicate that all the test messages were transmitted\r\n+ * successfully.\r\n+ *\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n  * <tr><th> Responsibilities <th> Collaborations\r\n- * <tr><td> Setup p2p test parameters and compare with test output. <td> {@link CoordinatingTestCase}\r\n+ * <tr><td> Setup p2p test parameters and compare with test output. <td> {@link DistributedTestCase}\r\n  * </table>\r\n  */\r\n-public class CoordinatingTestCase2BasicP2P extends CoordinatingTestCase\r\n+public class InteropTestCase2BasicP2P extends DistributedTestCase\r\n {\r\n     /** Used for debugging. */\r\n-    private static final Logger log = Logger.getLogger(CoordinatingTestCase2BasicP2P.class);\r\n+    private static final Logger log = Logger.getLogger(InteropTestCase2BasicP2P.class);\r\n \r\n     /**\r\n      * Creates a new coordinating test case with the specified name.\r\n      *\r\n      * @param name The test case name.\r\n      */\r\n-    public CoordinatingTestCase2BasicP2P(String name)\r\n+    public InteropTestCase2BasicP2P(String name)\r\n     {\r\n         super(name);\r\n     }\r\n \r\n     /**\r\n      * Performs the basic P2P test case, \"Test Case 2\" in the specification.\r\n+     *\r\n+     * @throws Exception Any exceptions are allowed to fall through and fail the test.\r\n      */\r\n     public void testBasicP2P() throws Exception\r\n     {\r\n         log.debug(\"public void testBasicP2P(): called\");\r\n \r\n-        Map<String, Object> testConfig = new HashMap<String, Object>();\r\n-        testConfig.put(\"TEST_NAME\", \"TC2_BasicP2P\");\r\n-        testConfig.put(\"P2P_QUEUE_AND_KEY_NAME\", \"tc2queue\");\r\n+        Properties testConfig = new Properties();\r\n+        testConfig.setProperty(\"TEST_NAME\", \"TC2_BasicP2P\");\r\n+        testConfig.setProperty(\"P2P_QUEUE_AND_KEY_NAME\", \"tc2queue\");\r\n         testConfig.put(\"P2P_NUM_MESSAGES\", 50);\r\n \r\n-        Message[] reports = sequenceTest(testConfig);\r\n+        /*Message[] reports =*/ getTestSequencer().sequenceTest(null, null, testConfig);\r\n \r\n-        // Compare sender and receiver reports.\r\n-        int messagesSent = reports[0].getIntProperty(\"MESSAGE_COUNT\");\r\n+        // Compare sender and receivers reports.\r\n+        /*int messagesSent = reports[0].getIntProperty(\"MESSAGE_COUNT\");\r\n         int messagesReceived = reports[1].getIntProperty(\"MESSAGE_COUNT\");\r\n \r\n         Assert.assertEquals(\"The requested number of messages were not sent.\", 50, messagesSent);\r\n-        Assert.assertEquals(\"Sender and receiver messages sent did not match up.\", messagesSent, messagesReceived);\r\n+        Assert.assertEquals(\"Sender and receivers messages sent did not match up.\", messagesSent, messagesReceived);*/\r\n     }\r\n \r\n     /**\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase2BasicP2P.java"}, {"additions": 15, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase3BasicPubSub.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase3BasicPubSub.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/testcases/CoordinatingTestCase3BasicPubSub.java", "sha": "ad27ca63bd1c9cffa04951a4a53074b8b5e4e661", "changes": 34, "status": "renamed", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase3BasicPubSub.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,63 +18,59 @@\n  * under the License.\r\n  *\r\n  */\r\n-\r\n-package org.apache.qpid.interop.coordinator.testcases;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.jms.Message;\r\n-\r\n-import junit.framework.Assert;\r\n+package org.apache.qpid.interop.testcases;\r\n \r\n import org.apache.log4j.Logger;\r\n \r\n-import org.apache.qpid.interop.coordinator.CoordinatingTestCase;\r\n+import org.apache.qpid.test.framework.distributedtesting.DistributedTestCase;\r\n+\r\n+import java.util.Properties;\r\n \r\n /**\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n  * <tr><th> Responsibilities <th> Collaborations\r\n- * <tr><td> Setup pub/sub test parameters and compare with test output. <td> {@link CoordinatingTestCase}\r\n+ * <tr><td> Setup pub/sub test parameters and compare with test output. <td> {@link DistributedTestCase}\r\n  * </table>\r\n  */\r\n-public class CoordinatingTestCase3BasicPubSub extends CoordinatingTestCase\r\n+public class InteropTestCase3BasicPubSub extends DistributedTestCase\r\n {\r\n     /** Used for debugging. */\r\n-    private static final Logger log = Logger.getLogger(CoordinatingTestCase3BasicPubSub.class);\r\n+    private static final Logger log = Logger.getLogger(InteropTestCase3BasicPubSub.class);\r\n \r\n     /**\r\n      * Creates a new coordinating test case with the specified name.\r\n      *\r\n      * @param name The test case name.\r\n      */\r\n-    public CoordinatingTestCase3BasicPubSub(String name)\r\n+    public InteropTestCase3BasicPubSub(String name)\r\n     {\r\n         super(name);\r\n     }\r\n \r\n     /**\r\n      * Performs the basic P2P test case, \"Test Case 2\" in the specification.\r\n+     *\r\n+     * @throws Exception Any exceptions are allowed to fall through and fail the test.\r\n      */\r\n     public void testBasicPubSub() throws Exception\r\n     {\r\n         log.debug(\"public void testBasicPubSub(): called\");\r\n \r\n-        Map<String, Object> testConfig = new HashMap<String, Object>();\r\n+        Properties testConfig = new Properties();\r\n         testConfig.put(\"TEST_NAME\", \"TC3_BasicPubSub\");\r\n         testConfig.put(\"PUBSUB_KEY\", \"tc3route\");\r\n         testConfig.put(\"PUBSUB_NUM_MESSAGES\", 10);\r\n         testConfig.put(\"PUBSUB_NUM_RECEIVERS\", 5);\r\n \r\n-        Message[] reports = sequenceTest(testConfig);\r\n+        /*Message[] reports =*/ getTestSequencer().sequenceTest(null, null, testConfig);\r\n \r\n-        // Compare sender and receiver reports.\r\n-        int messagesSent = reports[0].getIntProperty(\"MESSAGE_COUNT\");\r\n+        // Compare sender and receivers reports.\r\n+        /*int messagesSent = reports[0].getIntProperty(\"MESSAGE_COUNT\");\r\n         int messagesReceived = reports[1].getIntProperty(\"MESSAGE_COUNT\");\r\n \r\n         Assert.assertEquals(\"The requested number of messages were not sent.\", 10, messagesSent);\r\n         Assert.assertEquals(\"Received messages did not match up to num sent * num receivers.\", messagesSent * 5,\r\n-            messagesReceived);\r\n+            messagesReceived);*/\r\n     }\r\n \r\n     /**\r", "filename": "integrationtests/src/main/java/org/apache/qpid/interop/testcases/InteropTestCase3BasicPubSub.java"}, {"additions": 905, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedClientTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedClientTestCase.java", "sha": "65e05fab4b3a92d10b5dec53861c4cfa693fa4f4", "changes": 905, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedClientTestCase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,905 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.sustained;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.client.AMQNoConsumersException;\r\n+import org.apache.qpid.client.AMQNoRouteException;\r\n+import org.apache.qpid.test.framework.distributedtesting.TestClient;\r\n+import org.apache.qpid.interop.clienttestcases.TestCase3BasicPubSub;\r\n+import org.apache.qpid.test.framework.TestUtils;\r\n+\r\n+import javax.jms.Connection;\r\n+import javax.jms.Destination;\r\n+import javax.jms.ExceptionListener;\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+import javax.jms.MessageConsumer;\r\n+import javax.jms.MessageListener;\r\n+import javax.jms.MessageProducer;\r\n+import javax.jms.Session;\r\n+import javax.jms.TextMessage;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CountDownLatch;\r\n+\r\n+/**\r\n+ * Implements test case 3, basic pub/sub. Sends/received a specified number of messages to a specified route on the\r\n+ * default topic exchange, using the specified number of receivers connections. Produces reports on the actual number of\r\n+ * messages sent/received.\r\n+ *\r\n+ * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Supply the name of the test case that this implements.\r\n+ * <tr><td> Accept/Reject invites based on test parameters.\r\n+ * <tr><td> Adapt to assigned roles.\r\n+ * <tr><td> Send required number of test messages using pub/sub. <tr><td> Generate test reports.\r\n+ * </table>\r\n+ */\r\n+public class SustainedClientTestCase extends TestCase3BasicPubSub implements ExceptionListener\r\n+{\r\n+    /** Used for debugging. */\r\n+    private static final Logger log = Logger.getLogger(SustainedClientTestCase.class);\r\n+\r\n+    /** Used to log to the console. */\r\n+    private static final Logger console = Logger.getLogger(\"SustainedTest\");\r\n+\r\n+    /** The role to be played by the test. */\r\n+    private Roles role;\r\n+\r\n+    /** The number of receivers connection to use. */\r\n+    private int numReceivers;\r\n+\r\n+    /** The routing key to send them to on the default direct exchange. */\r\n+    private Destination sendDestination;\r\n+\r\n+    /** The routing key to send updates to on the default direct exchange. */\r\n+    private Destination sendUpdateDestination;\r\n+\r\n+    /** The connections to send/receive the test messages on. */\r\n+    private Connection[] connection;\r\n+\r\n+    /** The sessions to send/receive the test messages on. */\r\n+    private Session[] session;\r\n+\r\n+    /** The producer to send the test messages with. */\r\n+    MessageProducer producer;\r\n+\r\n+    /** Adapter that adjusts the send rate based on the updates from clients. */\r\n+    SustainedRateAdapter _rateAdapter;\r\n+\r\n+    /**  */\r\n+    int _batchSize;\r\n+\r\n+    private static final long TEN_MILLI_SEC = 10000000;\r\n+    private static final int DEBUG_LOG_UPATE_INTERVAL = 10;\r\n+    private static final int LOG_UPATE_INTERVAL = 10;\r\n+    private static final boolean SLEEP_PER_MESSAGE = Boolean.getBoolean(\"sleepPerMessage\");\r\n+\r\n+    /**\r\n+     * Should provide the name of the test case that this class implements. The exact names are defined in the interop\r\n+     * testing spec.\r\n+     *\r\n+     * @return The name of the test case that this implements.\r\n+     */\r\n+    public String getName()\r\n+    {\r\n+        log.debug(\"public String getName(): called\");\r\n+\r\n+        return \"Perf_SustainedPubSub\";\r\n+    }\r\n+\r\n+    /**\r\n+     * Assigns the role to be played by this test case. The test parameters are fully specified in the assignment\r\n+     * message. When this method return the test case will be ready to execute.\r\n+     *\r\n+     * @param role              The role to be played; sender or receivers.\r\n+     * @param assignRoleMessage The role assingment message, contains the full test parameters.\r\n+     *\r\n+     * @throws JMSException Any JMSException resulting from reading the message are allowed to fall through.\r\n+     */\r\n+    public void assignRole(Roles role, Message assignRoleMessage) throws JMSException\r\n+    {\r\n+        log.debug(\"public void assignRole(Roles role = \" + role + \", Message assignRoleMessage = \" + assignRoleMessage\r\n+            + \"): called\");\r\n+\r\n+        // Take note of the role to be played.\r\n+        this.role = role;\r\n+\r\n+        // Extract and retain the test parameters.\r\n+        numReceivers = assignRoleMessage.getIntProperty(\"SUSTAINED_NUM_RECEIVERS\");\r\n+        _batchSize = assignRoleMessage.getIntProperty(\"SUSTAINED_UPDATE_INTERVAL\");\r\n+        String sendKey = assignRoleMessage.getStringProperty(\"SUSTAINED_KEY\");\r\n+        String sendUpdateKey = assignRoleMessage.getStringProperty(\"SUSTAINED_UPDATE_KEY\");\r\n+        int ackMode = assignRoleMessage.getIntProperty(\"ACKNOWLEDGE_MODE\");\r\n+        String clientName = assignRoleMessage.getStringProperty(\"CLIENT_NAME\");\r\n+\r\n+        if (log.isDebugEnabled())\r\n+        {\r\n+            log.debug(\"numReceivers = \" + numReceivers);\r\n+            log.debug(\"_batchSize = \" + _batchSize);\r\n+            log.debug(\"ackMode = \" + ackMode);\r\n+            log.debug(\"sendKey = \" + sendKey);\r\n+            log.debug(\"sendUpdateKey = \" + sendUpdateKey);\r\n+            log.debug(\"role = \" + role);\r\n+        }\r\n+\r\n+        switch (role)\r\n+        {\r\n+        // Check if the sender role is being assigned, and set up a single message producer if so.\r\n+        case SENDER:\r\n+            console.info(\"Creating Sender\");\r\n+            // Create a new connection to pass the test messages on.\r\n+            connection = new Connection[1];\r\n+            session = new Session[1];\r\n+\r\n+            connection[0] = TestUtils.createConnection(TestClient.testContextProperties);\r\n+            session[0] = connection[0].createSession(false, ackMode);\r\n+\r\n+            // Extract and retain the test parameters.\r\n+            sendDestination = session[0].createTopic(sendKey);\r\n+\r\n+            connection[0].setExceptionListener(this);\r\n+\r\n+            producer = session[0].createProducer(sendDestination);\r\n+\r\n+            sendUpdateDestination = session[0].createTopic(sendUpdateKey);\r\n+            MessageConsumer updateConsumer = session[0].createConsumer(sendUpdateDestination);\r\n+\r\n+            _rateAdapter = new SustainedRateAdapter(this);\r\n+            updateConsumer.setMessageListener(_rateAdapter);\r\n+\r\n+            break;\r\n+\r\n+        // Otherwise the receivers role is being assigned, so set this up to listen for messages on the required number\r\n+        // of receivers connections.\r\n+        case RECEIVER:\r\n+            console.info(\"Creating Receiver\");\r\n+            // Create the required number of receivers connections.\r\n+            connection = new Connection[numReceivers];\r\n+            session = new Session[numReceivers];\r\n+\r\n+            for (int i = 0; i < numReceivers; i++)\r\n+            {\r\n+                connection[i] = TestUtils.createConnection(TestClient.testContextProperties);\r\n+                session[i] = connection[i].createSession(false, ackMode);\r\n+\r\n+                sendDestination = session[i].createTopic(sendKey);\r\n+\r\n+                sendUpdateDestination = session[i].createTopic(sendUpdateKey);\r\n+\r\n+                MessageConsumer consumer = session[i].createConsumer(sendDestination);\r\n+\r\n+                consumer.setMessageListener(new SustainedListener(clientName + \"-\" + i, _batchSize, session[i],\r\n+                        sendUpdateDestination));\r\n+            }\r\n+\r\n+            break;\r\n+        }\r\n+\r\n+        // Start all the connection dispatcher threads running.\r\n+        for (int i = 0; i < connection.length; i++)\r\n+        {\r\n+            connection[i].start();\r\n+        }\r\n+    }\r\n+\r\n+    /** Performs the test case actions. */\r\n+    public void start() throws JMSException\r\n+    {\r\n+        log.debug(\"public void start(): called\");\r\n+\r\n+        // Check that the sender role is being performed.\r\n+        switch (role)\r\n+        {\r\n+        // Check if the sender role is being assigned, and set up a single message producer if so.\r\n+        case SENDER:\r\n+            _rateAdapter.run();\r\n+            break;\r\n+        case RECEIVER:\r\n+\r\n+        }\r\n+\r\n+        // return from here when you have finished the test.. this will signal the controller and\r\n+    }\r\n+\r\n+    public void terminate() throws JMSException, InterruptedException\r\n+    {\r\n+        if (_rateAdapter != null)\r\n+        {\r\n+            _rateAdapter.stop();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets a report on the actions performed by the test case in its assigned role.\r\n+     *\r\n+     * @param session The session to create the report message in.\r\n+     *\r\n+     * @return The report message.\r\n+     *\r\n+     * @throws JMSException Any JMSExceptions resulting from creating the report are allowed to fall through.\r\n+     */\r\n+    public Message getReport(Session session) throws JMSException\r\n+    {\r\n+        log.debug(\"public Message getReport(Session session): called\");\r\n+\r\n+        // Close the test connections.\r\n+        for (int i = 0; i < connection.length; i++)\r\n+        {\r\n+            connection[i].close();\r\n+        }\r\n+\r\n+        Message report = session.createMessage();\r\n+        report.setStringProperty(\"CONTROL_TYPE\", \"REPORT\");\r\n+\r\n+        return report;\r\n+    }\r\n+\r\n+    public void onException(JMSException jmsException)\r\n+    {\r\n+        Exception linked = jmsException.getLinkedException();\r\n+\r\n+        if (linked != null)\r\n+        {\r\n+            if (log.isDebugEnabled())\r\n+            {\r\n+                log.debug(\"Linked Exception:\" + linked);\r\n+            }\r\n+\r\n+            if ((linked instanceof AMQNoRouteException) || (linked instanceof AMQNoConsumersException))\r\n+            {\r\n+                if (log.isDebugEnabled())\r\n+                {\r\n+                    if (linked instanceof AMQNoConsumersException)\r\n+                    {\r\n+                        log.warn(\"No clients currently available for message:\"\r\n+                            + ((AMQNoConsumersException) linked).getUndeliveredMessage());\r\n+                    }\r\n+                    else\r\n+                    {\r\n+                        log.warn(\"No route for message\");\r\n+                    }\r\n+                }\r\n+\r\n+                // Tell the rate adapter that there are no clients ready yet\r\n+                _rateAdapter.NO_CLIENTS = true;\r\n+            }\r\n+        }\r\n+        else\r\n+        {\r\n+            log.warn(\"Exception:\" + linked);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Inner class that listens for messages and sends a report for the time taken between receiving the 'start' and\r\n+     * 'end' messages.\r\n+     */\r\n+    class SustainedListener implements MessageListener\r\n+    {\r\n+        /** Number of messages received */\r\n+        private long _received = 0;\r\n+        /** The number of messages in the batch */\r\n+        private int _batchSize = 0;\r\n+        /** Record of the when the 'start' messagse was sen */\r\n+        private Long _startTime;\r\n+        /** Message producer to use to send reports */\r\n+        MessageProducer _updater;\r\n+        /** Session to create the report message on */\r\n+        Session _session;\r\n+        /** Record of the client ID used for this SustainedListnener */\r\n+        String _client;\r\n+\r\n+        /**\r\n+         * Main Constructor\r\n+         *\r\n+         * @param clientname      The _client id used to identify this connection.\r\n+         * @param batchSize       The number of messages that are to be sent per batch. Note: This is not used to\r\n+         *                        control the interval between sending reports.\r\n+         * @param session         The session used for communication.\r\n+         * @param sendDestination The destination that update reports should be sent to.\r\n+         *\r\n+         * @throws JMSException My occur if creatingthe Producer fails\r\n+         */\r\n+        public SustainedListener(String clientname, int batchSize, Session session, Destination sendDestination)\r\n+            throws JMSException\r\n+        {\r\n+            _batchSize = batchSize;\r\n+            _client = clientname;\r\n+            _session = session;\r\n+            _updater = session.createProducer(sendDestination);\r\n+        }\r\n+\r\n+        public void onMessage(Message message)\r\n+        {\r\n+            if (log.isTraceEnabled())\r\n+            {\r\n+                log.trace(\"Message \" + _received + \"received in listener\");\r\n+            }\r\n+\r\n+            if (message instanceof TextMessage)\r\n+            {\r\n+                try\r\n+                {\r\n+                    _received++;\r\n+                    if (((TextMessage) message).getText().equals(\"start\"))\r\n+                    {\r\n+                        log.debug(\"Starting Batch\");\r\n+                        _startTime = System.nanoTime();\r\n+                    }\r\n+                    else if (((TextMessage) message).getText().equals(\"end\"))\r\n+                    {\r\n+                        if (_startTime != null)\r\n+                        {\r\n+                            long currentTime = System.nanoTime();\r\n+                            sendStatus(currentTime - _startTime, _received, message.getIntProperty(\"BATCH\"));\r\n+                            log.debug(\"End Batch\");\r\n+                        }\r\n+                    }\r\n+                }\r\n+                catch (JMSException e)\r\n+                {\r\n+                    // ignore error\r\n+                }\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        /**\r\n+         * sendStatus creates and sends the report back to the publisher\r\n+         *\r\n+         * @param time     taken for the the last batch\r\n+         * @param received Total number of messages received.\r\n+         * @param batchNumber the batch number\r\n+         * @throws JMSException if an error occurs during the send\r\n+         */\r\n+        private void sendStatus(long time, long received, int batchNumber) throws JMSException\r\n+        {\r\n+            Message updateMessage = _session.createTextMessage(\"update\");\r\n+            updateMessage.setStringProperty(\"CLIENT_ID\", \":\" + _client);\r\n+            updateMessage.setStringProperty(\"CONTROL_TYPE\", \"UPDATE\");\r\n+            updateMessage.setLongProperty(\"RECEIVED\", received);\r\n+            updateMessage.setIntProperty(\"BATCH\", batchNumber);\r\n+            updateMessage.setLongProperty(\"DURATION\", time);\r\n+\r\n+            if (log.isInfoEnabled())\r\n+            {\r\n+                log.info(\"**** SENDING [\" + batchNumber + \"]**** \" + \"CLIENT_ID:\" + _client + \" RECEIVED:\" + received\r\n+                    + \" BATCH:\" + batchNumber + \" DURATION:\" + time);\r\n+            }\r\n+\r\n+            // Output on the main console.info the details of this batch\r\n+            if ((batchNumber % 10) == 0)\r\n+            {\r\n+                console.info(\"Sending Report [\" + batchNumber + \"] \" + \"CLIENT_ID:\" + _client + \" RECEIVED:\" + received\r\n+                    + \" BATCH:\" + batchNumber + \" DURATION:\" + time);\r\n+            }\r\n+\r\n+            _updater.send(updateMessage);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * This class is used here to adjust the _delay value which in turn is used to control the number of messages/second\r\n+     * that are sent through the test system.\r\n+     *\r\n+     * By keeping a record of the messages recevied and the average time taken to process the batch size can be\r\n+     * calculated and so the delay can be adjusted to maintain that rate.\r\n+     *\r\n+     * Given that delays of < 10ms can be rounded up the delay is only used between messages if the _delay > 10ms * no\r\n+     * messages in the batch. Otherwise the delay is used at the end of the batch.\r\n+     */\r\n+    class SustainedRateAdapter implements MessageListener, Runnable\r\n+    {\r\n+        private SustainedClientTestCase _client;\r\n+        private long _batchVariance = Integer.getInteger(\"batchVariance\", 3); // no. batches to allow drifting\r\n+        private long _timeVariance = TEN_MILLI_SEC * 5; // no. nanos between send and report delay (10ms)\r\n+        private volatile long _delay; // in nanos\r\n+        private long _sent;\r\n+        private Map<String, Long> _slowClients = new HashMap<String, Long>();\r\n+        private static final long PAUSE_SLEEP = TEN_MILLI_SEC / 1000; // 10 ms\r\n+        private static final long NO_CLIENT_SLEEP = 1000; // 1s\r\n+        private volatile boolean NO_CLIENTS = true;\r\n+        private int _delayShifting;\r\n+        private final int REPORTS_WITHOUT_CHANGE = Integer.getInteger(\"stableReportCount\", 5);\r\n+        private boolean _warmedup = false;\r\n+        private static final long EXPECTED_TIME_PER_BATCH = 100000L;\r\n+        private int _warmUpBatches = Integer.getInteger(\"warmUpBatches\", 10);\r\n+\r\n+        SustainedRateAdapter(SustainedClientTestCase client)\r\n+        {\r\n+            _client = client;\r\n+        }\r\n+\r\n+        public void onMessage(Message message)\r\n+        {\r\n+            if (log.isDebugEnabled())\r\n+            {\r\n+                log.debug(\"SustainedRateAdapter onMessage(Message message = \" + message + \"): called\");\r\n+            }\r\n+\r\n+            try\r\n+            {\r\n+                String controlType = message.getStringProperty(\"CONTROL_TYPE\");\r\n+\r\n+                // Check if the message is a test invite.\r\n+                if (\"UPDATE\".equals(controlType))\r\n+                {\r\n+                    NO_CLIENTS = false;\r\n+                    long duration = message.getLongProperty(\"DURATION\");\r\n+                    long totalReceived = message.getLongProperty(\"RECEIVED\");\r\n+                    String client = message.getStringProperty(\"CLIENT_ID\");\r\n+                    int batchNumber = message.getIntProperty(\"BATCH\");\r\n+\r\n+                    if (log.isInfoEnabled() && ((batchNumber % DEBUG_LOG_UPATE_INTERVAL) == 0))\r\n+                    {\r\n+                        log.info(\"Update Report: CLIENT_ID:\" + client + \" RECEIVED:\" + totalReceived + \" Recevied BATCH:\"\r\n+                            + batchNumber + \" DURATION:\" + duration);\r\n+                    }\r\n+\r\n+                    recordSlow(client, totalReceived, batchNumber);\r\n+\r\n+                    adjustDelay(client, batchNumber, duration);\r\n+\r\n+                    // Warm up completes when:\r\n+                    // we haven't warmed up\r\n+                    // and the number of batches sent to each client is at least half of the required warmup batches\r\n+                    if (!_warmedup && (batchNumber >= _warmUpBatches))\r\n+                    {\r\n+                        _warmedup = true;\r\n+                        _warmup.countDown();\r\n+\r\n+                    }\r\n+                }\r\n+            }\r\n+            catch (JMSException e)\r\n+            {\r\n+                //\r\n+            }\r\n+        }\r\n+\r\n+        CountDownLatch _warmup = new CountDownLatch(1);\r\n+\r\n+        int _numBatches = 10000;\r\n+\r\n+        // long[] _timings = new long[_numBatches];\r\n+        private boolean _running = true;\r\n+\r\n+        public void run()\r\n+        {\r\n+            console.info(\"Warming up\");\r\n+\r\n+            doBatch(_warmUpBatches);\r\n+\r\n+            try\r\n+            {\r\n+                // wait for warmup to complete.\r\n+                _warmup.await();\r\n+\r\n+                // set delay to the average length of the batches\r\n+                _delay = _totalDuration / _warmUpBatches / delays.size();\r\n+\r\n+                console.info(\"Warmup complete delay set : \" + _delay + \" based on _totalDuration: \" + _totalDuration\r\n+                    + \" over no. batches: \" + _warmUpBatches + \" with client count: \" + delays.size());\r\n+\r\n+                _totalDuration = 0L;\r\n+                _totalReceived = 0L;\r\n+                _sent = 0L;\r\n+            }\r\n+            catch (InterruptedException e)\r\n+            {\r\n+                //\r\n+            }\r\n+\r\n+            doBatch(_numBatches);\r\n+\r\n+        }\r\n+\r\n+        private void doBatch(int batchSize) // long[] timings,\r\n+        {\r\n+            TextMessage testMessage = null;\r\n+            try\r\n+            {\r\n+                testMessage = _client.session[0].createTextMessage(\"start\");\r\n+\r\n+                for (int batch = 0; batch <= batchSize; batch++)\r\n+                // while (_running)\r\n+                {\r\n+                    long start = System.nanoTime();\r\n+\r\n+                    testMessage.setText(\"start\");\r\n+                    testMessage.setIntProperty(\"BATCH\", batch);\r\n+\r\n+                    _client.producer.send(testMessage);\r\n+                    _rateAdapter.sentMessage();\r\n+\r\n+                    testMessage.setText(\"test\");\r\n+                    // start at 2 so start and end count as part of batch\r\n+                    for (int m = 2; m < _batchSize; m++)\r\n+                    {\r\n+                        _client.producer.send(testMessage);\r\n+                        _rateAdapter.sentMessage();\r\n+                    }\r\n+\r\n+                    testMessage.setText(\"end\");\r\n+                    _client.producer.send(testMessage);\r\n+                    _rateAdapter.sentMessage();\r\n+\r\n+                    long end = System.nanoTime();\r\n+\r\n+                    long sendtime = end - start;\r\n+\r\n+                    if (log.isDebugEnabled())\r\n+                    {\r\n+                        log.info(\"Sent batch[\" + batch + \"](\" + _batchSize + \") in \" + sendtime); // timings[batch]);\r\n+                    }\r\n+\r\n+                    if ((batch % LOG_UPATE_INTERVAL) == 0)\r\n+                    {\r\n+                        console.info(\"Sent Batch[\" + batch + \"](\" + _batchSize + \")\" + status());\r\n+                    }\r\n+\r\n+                    _rateAdapter.sleepBatch();\r\n+\r\n+                }\r\n+            }\r\n+            catch (JMSException e)\r\n+            {\r\n+                console.error(\"Runner ended\");\r\n+            }\r\n+        }\r\n+\r\n+        private String status()\r\n+        {\r\n+            return \" TotalDuration: \" + _totalDuration + \" for \" + delays.size() + \" consumers\" + \" Delay is \" + _delay\r\n+                + \" resulting in \"\r\n+                + ((_delay > (TEN_MILLI_SEC * _batchSize)) ? ((_delay / _batchSize) + \"/msg\") : (_delay + \"/batch\"));\r\n+        }\r\n+\r\n+        private void sleepBatch()\r\n+        {\r\n+            if (checkForSlowClients())\r\n+            { // if there werwe slow clients we have already slept so don't sleep anymore again.\r\n+                return;\r\n+            }\r\n+\r\n+            if (!SLEEP_PER_MESSAGE)\r\n+            {\r\n+                // per batch sleep.. if sleep is to small to spread over the batch.\r\n+                if (_delay <= (TEN_MILLI_SEC * _batchSize))\r\n+                {\r\n+                    sleepLong(_delay);\r\n+                }\r\n+                else\r\n+                {\r\n+                    log.info(\"Not sleeping _delay > ten*batch is:\" + _delay);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        public void stop()\r\n+        {\r\n+            _running = false;\r\n+        }\r\n+\r\n+        Map<String, Long> delays = new HashMap<String, Long>();\r\n+        Long _totalReceived = 0L;\r\n+        Long _totalDuration = 0L;\r\n+        int _skipUpdate = 0;\r\n+\r\n+        /**\r\n+         * Adjust the delay for sending messages based on this update from the client\r\n+         *\r\n+         * @param client        The client that send this update\r\n+         * @param duration      The time taken for the last batch of messagse\r\n+         * @param batchNumber   The reported batchnumber from the client\r\n+         */\r\n+        private void adjustDelay(String client, int batchNumber, long duration)\r\n+        {\r\n+            // Retrieve the current total time taken for this client.\r\n+            Long currentTime = delays.get(client);\r\n+\r\n+            // Add the new duration time to this client\r\n+            if (currentTime == null)\r\n+            {\r\n+                currentTime = duration;\r\n+            }\r\n+            else\r\n+            {\r\n+                currentTime += duration;\r\n+            }\r\n+\r\n+            delays.put(client, currentTime);\r\n+\r\n+            long batchesSent = _sent / _batchSize;\r\n+\r\n+            // ensure we don't divide by zero\r\n+            if (batchesSent == 0)\r\n+            {\r\n+                batchesSent = 1L;\r\n+            }\r\n+\r\n+            _totalReceived += _batchSize;\r\n+            _totalDuration += duration;\r\n+\r\n+            // calculate average duration accross clients per batch\r\n+            long averageDuration = _totalDuration / delays.size() / batchesSent;\r\n+\r\n+            // calculate the difference between current send delay and average report delay\r\n+            long diff = (duration) - averageDuration;\r\n+\r\n+            if (log.isInfoEnabled() && ((batchNumber % DEBUG_LOG_UPATE_INTERVAL) == 0))\r\n+            {\r\n+                log.info(\"TotalDuration:\" + _totalDuration + \" for \" + delays.size() + \" consumers.\" + \" on batch: \"\r\n+                    + batchesSent + \" received batch: \" + batchNumber + \" Batch Duration: \" + duration + \" Average: \"\r\n+                    + averageDuration + \" so diff: \" + diff + \" for : \" + client + \" Delay is \" + _delay + \" resulting in \"\r\n+                    + ((_delay > (TEN_MILLI_SEC * _batchSize)) ? ((_delay / _batchSize) + \"/msg\") : (_delay + \"/batch\")));\r\n+            }\r\n+\r\n+            // if the averageDuration differs from the current by more than the specified variane then adjust delay.\r\n+            if (Math.abs(diff) > _timeVariance)\r\n+            {\r\n+\r\n+                // if the the _delay is larger than the required duration to send report\r\n+                // speed up\r\n+                if (diff > TEN_MILLI_SEC)\r\n+                {\r\n+                    _delay -= TEN_MILLI_SEC;\r\n+\r\n+                    if (_delay < 0)\r\n+                    {\r\n+                        _delay = 0;\r\n+                        log.info(\"Reset _delay to 0\");\r\n+                        delayStable();\r\n+                    }\r\n+                    else\r\n+                    {\r\n+                        delayChanged();\r\n+                    }\r\n+\r\n+                }\r\n+                else if (diff < 0) // diff < 0 diff cannot be 0 as it is > _timeVariance\r\n+                {\r\n+                    // the report took longer\r\n+                    _delay += TEN_MILLI_SEC;\r\n+                    delayChanged();\r\n+                }\r\n+            }\r\n+            else\r\n+            {\r\n+                delayStable();\r\n+            }\r\n+\r\n+            // If we have a consumer that is behind with the batches.\r\n+            if ((batchesSent - batchNumber) > _batchVariance)\r\n+            {\r\n+                log.debug(\"Increasing _delay as sending more than receiving\");\r\n+\r\n+                _delay += 2 * TEN_MILLI_SEC;\r\n+                delayChanged();\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        /** Reset the number of iterations before we say the delay has stabilised. */\r\n+        private void delayChanged()\r\n+        {\r\n+            _delayShifting = REPORTS_WITHOUT_CHANGE;\r\n+        }\r\n+\r\n+        /**\r\n+         * Record the fact that delay has stabilised If delay has stablised for REPORTS_WITHOUT_CHANGE then it will\r\n+         * output Delay stabilised\r\n+         */\r\n+        private void delayStable()\r\n+        {\r\n+            _delayShifting--;\r\n+\r\n+            if (_delayShifting < 0)\r\n+            {\r\n+                _delayShifting = 0;\r\n+                console.debug(\"Delay stabilised:\" + _delay);\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Checks that the client has received enough messages. If the client has fallen behind then they are put in the\r\n+         * _slowClients lists which will increase the delay.\r\n+         *\r\n+         * @param client   The client identifier to check\r\n+         * @param received the number of messages received by that client\r\n+         * @param batchNumber\r\n+         */\r\n+        private void recordSlow(String client, long received, int batchNumber)\r\n+        {\r\n+            if (Math.abs(batchNumber - (_sent / _batchSize)) > _batchVariance)\r\n+            {\r\n+                _slowClients.put(client, received);\r\n+            }\r\n+            else\r\n+            {\r\n+                _slowClients.remove(client);\r\n+            }\r\n+        }\r\n+\r\n+        /** Incrment the number of sent messages and then sleep, if required. */\r\n+        public void sentMessage()\r\n+        {\r\n+\r\n+            _sent++;\r\n+\r\n+            if (_delay > (TEN_MILLI_SEC * _batchSize))\r\n+            {\r\n+                long batchDelay = _delay / _batchSize;\r\n+                // less than 10ms sleep doesn't always work.\r\n+                // _delay is in nano seconds\r\n+                // if (batchDelay < (TEN_MILLI_SEC))\r\n+                // {\r\n+                // sleep(0, (int) batchDelay);\r\n+                // }\r\n+                // else\r\n+                {\r\n+                    // if (batchDelay < 30000000000L)\r\n+                    {\r\n+                        sleepLong(batchDelay);\r\n+                    }\r\n+                }\r\n+            }\r\n+            else\r\n+            {\r\n+                if (SLEEP_PER_MESSAGE && (_delay > 0))\r\n+                {\r\n+                    sleepLong(_delay / _batchSize);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * Check at the end of each batch and pause sending messages to allow slow clients to catch up.\r\n+         *\r\n+         * @return true if there were slow clients that caught up.\r\n+         */\r\n+        private boolean checkForSlowClients()\r\n+        {\r\n+            // This will allways be true as we are running this at the end of each batchSize\r\n+            // if (_sent % _batchSize == 0)\r\n+            {\r\n+                // Cause test to pause when we have slow\r\n+                if (!_slowClients.isEmpty() || NO_CLIENTS)\r\n+                {\r\n+\r\n+                    while (!_slowClients.isEmpty())\r\n+                    {\r\n+                        if (log.isInfoEnabled() && ((_sent / _batchSize % DEBUG_LOG_UPATE_INTERVAL) == 0))\r\n+                        {\r\n+                            String clients = \"\";\r\n+                            Iterator it = _slowClients.keySet().iterator();\r\n+                            while (it.hasNext())\r\n+                            {\r\n+                                clients += it.next();\r\n+                                if (it.hasNext())\r\n+                                {\r\n+                                    clients += \", \";\r\n+                                }\r\n+                            }\r\n+\r\n+                            log.info(\"Pausing for slow clients:\" + clients);\r\n+                        }\r\n+\r\n+                        if (console.isDebugEnabled() && ((_sent / _batchSize % LOG_UPATE_INTERVAL) == 0))\r\n+                        {\r\n+                            console.debug(_slowClients.size() + \" slow clients.\");\r\n+                        }\r\n+\r\n+                        sleep(PAUSE_SLEEP);\r\n+                    }\r\n+\r\n+                    if (NO_CLIENTS)\r\n+                    {\r\n+                        sleep(NO_CLIENT_SLEEP);\r\n+                    }\r\n+\r\n+                    log.debug(\"Continuing\");\r\n+\r\n+                    return true;\r\n+                }\r\n+                else\r\n+                {\r\n+                    if ((_sent / _batchSize % LOG_UPATE_INTERVAL) == 0)\r\n+                    {\r\n+                        console.info(\"Total Delay :\" + _delay + \" \"\r\n+                            + ((_delayShifting == 0) ? \"Stablised\" : (\"Not Stablised(\" + _delayShifting + \")\")));\r\n+                    }\r\n+                }\r\n+\r\n+            }\r\n+\r\n+            return false;\r\n+        }\r\n+\r\n+        /**\r\n+         * Sleep normally takes micro-seconds this allows the use of a nano-second value.\r\n+         *\r\n+         * @param delay nanoseconds to sleep for.\r\n+         */\r\n+        private void sleepLong(long delay)\r\n+        {\r\n+            sleep(delay / 1000000, (int) (delay % 1000000));\r\n+        }\r\n+\r\n+        /**\r\n+         * Sleep for the specified micro-seconds.\r\n+         * @param sleep microseconds to sleep for.\r\n+         */\r\n+        private void sleep(long sleep)\r\n+        {\r\n+            sleep(sleep, 0);\r\n+        }\r\n+\r\n+        /**\r\n+         * Perform the sleep , swallowing any InteruptException.\r\n+         *\r\n+         * NOTE: If a sleep request is > 10s then reset only sleep for 5s\r\n+         *\r\n+         * @param milli to sleep for\r\n+         * @param nano sub miliseconds to sleep for\r\n+         */\r\n+        private void sleep(long milli, int nano)\r\n+        {\r\n+            try\r\n+            {\r\n+                log.debug(\"Sleep:\" + milli + \":\" + nano);\r\n+                if (milli > 10000)\r\n+                {\r\n+\r\n+                    if (_delay == milli)\r\n+                    {\r\n+                        _totalDuration = _totalReceived / _batchSize * EXPECTED_TIME_PER_BATCH;\r\n+                        log.error(\"Sleeping for more than 10 seconds adjusted to 5s!:\" + (milli / 1000)\r\n+                            + \"s. Reset _totalDuration:\" + _totalDuration);\r\n+                    }\r\n+                    else\r\n+                    {\r\n+                        log.error(\"Sleeping for more than 10 seconds adjusted to 5s!:\" + (milli / 1000) + \"s\");\r\n+                    }\r\n+\r\n+                    milli = 5000;\r\n+                }\r\n+\r\n+                Thread.sleep(milli, nano);\r\n+            }\r\n+            catch (InterruptedException e)\r\n+            {\r\n+                //\r\n+            }\r\n+        }\r\n+\r\n+        public void setClient(SustainedClientTestCase client)\r\n+        {\r\n+            _client = client;\r\n+        }\r\n+    }\r\n+\r\n+}\r", "filename": "integrationtests/src/main/java/org/apache/qpid/sustained/SustainedClientTestCase.java"}, {"additions": 126, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestCase.java", "sha": "36f9b4eaf1e98ea55b8ef07af10e8504c82551ed", "changes": 126, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestCase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,126 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.sustained;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.client.AMQSession;\r\n+import org.apache.qpid.test.framework.distributedtesting.DistributedTestCase;\r\n+import org.apache.qpid.test.framework.DropInTest;\r\n+\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+\r\n+import java.util.Properties;\r\n+\r\n+/**\r\n+ * SustainedTestCase is a {@link org.apache.qpid.test.framework.distributedtesting.DistributedTestCase} that runs the \"Perf_SustainedPubSub\" test case. This consists of one\r\n+ * test client sending, and several receiving, and attempts to find the highest rate at which messages can be broadcast\r\n+ * to the receivers. It is also a {@link DropInTest} to which more test clients may be added during a test run.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td>\r\n+ * </table>\r\n+ */\r\n+public class SustainedTestCase extends DistributedTestCase implements DropInTest\r\n+{\r\n+    /** Used for debugging. */\r\n+    Logger log = Logger.getLogger(SustainedTestCase.class);\r\n+\r\n+    /** Holds the root name of the topic on which to send the test messages. */\r\n+    private static final String SUSTAINED_KEY = \"Perf_SustainedPubSub\";\r\n+\r\n+    /**\r\n+     * Creates a new coordinating test case with the specified name.\r\n+     *\r\n+     * @param name The test case name.\r\n+     */\r\n+    public SustainedTestCase(String name)\r\n+    {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /**\r\n+     * Performs a single test run of the sustained test.\r\n+     *\r\n+     * @throws Exception Any exceptions are allowed to fall through and fail the test.\r\n+     */\r\n+    public void testBasicPubSub() throws Exception\r\n+    {\r\n+        log.debug(\"public void testSinglePubSubCycle(): called\");\r\n+\r\n+        Properties testConfig = new Properties();\r\n+        testConfig.put(\"TEST_NAME\", \"Perf_SustainedPubSub\");\r\n+        testConfig.put(\"SUSTAINED_KEY\", SUSTAINED_KEY);\r\n+        testConfig.put(\"SUSTAINED_NUM_RECEIVERS\", Integer.getInteger(\"numReceives\", 2));\r\n+        testConfig.put(\"SUSTAINED_UPDATE_INTERVAL\", Integer.getInteger(\"batchSize\", 1000));\r\n+        testConfig.put(\"SUSTAINED_UPDATE_KEY\", SUSTAINED_KEY + \".UPDATE\");\r\n+        testConfig.put(\"ACKNOWLEDGE_MODE\", Integer.getInteger(\"ackMode\", AMQSession.AUTO_ACKNOWLEDGE));\r\n+\r\n+        log.info(\"Created Config: \" + testConfig.entrySet().toArray());\r\n+\r\n+        getTestSequencer().sequenceTest(null, null, testConfig);\r\n+    }\r\n+\r\n+    /**\r\n+     * Accepts a late joining client into this test case. The client will be enlisted with a control message\r\n+     * with the 'CONTROL_TYPE' field set to the value 'LATEJOIN'. It should also provide values for the fields:\r\n+     *\r\n+     * <p/><table>\r\n+     * <tr><td> CLIENT_NAME <td> A unique name for the new client.\r\n+     * <tr><td> CLIENT_PRIVATE_CONTROL_KEY <td> The key for the route on which the client receives its control messages.\r\n+     * </table>\r\n+     *\r\n+     * @param message The late joiners join message.\r\n+     *\r\n+     * @throws JMSException Any JMS Exception are allowed to fall through, indicating that the join failed.\r\n+     */\r\n+    public void lateJoin(Message message) throws JMSException\r\n+    {\r\n+        throw new RuntimeException(\"Not implemented.\");\r\n+        /*\r\n+        // Extract the joining clients details from its join request message.\r\n+        TestClientDetails clientDetails = new TestClientDetails();\r\n+        clientDetails.clientName = message.getStringProperty(\"CLIENT_NAME\");\r\n+        clientDetails.privateControlKey = message.getStringProperty(\"CLIENT_PRIVATE_CONTROL_KEY\");\r\n+\r\n+        // Register the joining client, but do block for confirmation as cannot do a synchronous receivers during this\r\n+        // method call, as it may have been called from an 'onMessage' method.\r\n+        assignReceiverRole(clientDetails, new Properties(), false);\r\n+         */\r\n+    }\r\n+\r\n+    /**\r\n+     * Should provide a translation from the junit method name of a test to its test case name as known to the test\r\n+     * clients that will run the test. The purpose of this is to convert the JUnit method name into the correct test\r\n+     * case name to place into the test invite. For example the method \"testP2P\" might map onto the interop test case\r\n+     * name \"TC2_BasicP2P\".\r\n+     *\r\n+     * @param methodName The name of the JUnit test method.\r\n+     *\r\n+     * @return The name of the corresponding interop test case.\r\n+     */\r\n+    public String getTestCaseNameForTestMethod(String methodName)\r\n+    {\r\n+        return \"Perf_SustainedPubSub\";\r\n+    }\r\n+}\r", "filename": "integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestCase.java"}, {"additions": 4, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestClient.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestClient.java", "sha": "79707bafa554908da1e098fe93796b7fdd840add", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestClient.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -425,7 +425,7 @@ private void sendStatus(long time, long received, int batchNumber) throws JMSExc\n     class SustainedRateAdapter implements MessageListener, Runnable\n     {\n         private SustainedTestClient _client;\n-        private long _batchVariance = 3; //no. batches to allow drifting\n+        private long _batchVariance = Integer.getInteger(\"batchVariance\", 3); //no. batches to allow drifting\n         private long _timeVariance = TEN_MILLI_SEC * 5; // no. nanos between send and report delay (10ms)\n         private volatile long _delay;   //in nanos\n         private long _sent;\n@@ -434,9 +434,11 @@ private void sendStatus(long time, long received, int batchNumber) throws JMSExc\n         private static final long NO_CLIENT_SLEEP = 1000; // 1s\n         private volatile boolean NO_CLIENTS = true;\n         private int _delayShifting;\n-        private static final int REPORTS_WITHOUT_CHANGE = 5;\n+        private final int REPORTS_WITHOUT_CHANGE =  Integer.getInteger(\"stableReportCount\", 5);\n         private boolean _warmedup = false;\n         private static final long EXPECTED_TIME_PER_BATCH = 100000L;\n+        private int _warmUpBatches = Integer.getInteger(\"warmUpBatches\", 10);\n+\n \n         SustainedRateAdapter(SustainedTestClient client)\n         {\n@@ -493,8 +495,6 @@ public void onMessage(Message message)\n \n         CountDownLatch _warmup = new CountDownLatch(1);\n \n-        int _warmUpBatches = Integer.getInteger(\"warmUpBatches\", 10);\n-\n         int _numBatches = 10000;\n \n         //        long[] _timings = new long[_numBatches];", "filename": "integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestClient.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestCoordinator.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestCoordinator.java", "sha": "0075e45a8c5ac8f33f453b910af465b051a058ac", "changes": 222, "status": "removed", "deletions": 222, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestCoordinator.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,222 +0,0 @@\n-/*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.    \n- *\n- * \n- */\n-package org.apache.qpid.sustained;\n-\n-import org.apache.log4j.Logger;\n-import org.apache.qpid.client.AMQSession;\n-import org.apache.qpid.interop.coordinator.ListeningCoordinatorTest;\n-import org.apache.qpid.interop.coordinator.TestClientDetails;\n-import org.apache.qpid.interop.coordinator.testcases.CoordinatingTestCase3BasicPubSub;\n-import org.apache.qpid.util.ConversationFactory;\n-\n-import javax.jms.Destination;\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.Session;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class SustainedTestCoordinator extends CoordinatingTestCase3BasicPubSub implements ListeningCoordinatorTest\n-{\n-    /** Used for debugging. */\n-    private static final Logger log = Logger.getLogger(SustainedTestCoordinator.class);\n-    private List<TestClientDetails> _receivers;\n-    private static final String SUSTAINED_KEY = \"Perf_SustainedPubSub\";\n-    Map<String, Object> _testProperties;\n-\n-    /**\n-     * Creates a new coordinating test case with the specified name.\n-     *\n-     * @param name The test case name.\n-     */\n-    public SustainedTestCoordinator(String name)\n-    {\n-        super(name);\n-        _receivers = new LinkedList();\n-    }\n-\n-    /**\n-     * Adds a receiver to this test.\n-     *\n-     * @param receiver The contact details of the sending client in the test.\n-     */\n-    public void setReceiver(TestClientDetails receiver)\n-    {\n-        _receivers.add(receiver);\n-    }\n-\n-\n-    /**\n-     * Performs the a single test run\n-     *\n-     * @throws Exception if there was a problem running the test.\n-     */\n-    public void testBasicPubSub() throws Exception\n-    {\n-        log.debug(\"public void testSinglePubSubCycle(): called\");\n-\n-        Map<String, Object> testConfig = new HashMap<String, Object>();\n-        testConfig.put(\"TEST_NAME\", \"Perf_SustainedPubSub\");\n-        testConfig.put(\"SUSTAINED_KEY\", SUSTAINED_KEY);\n-        testConfig.put(\"SUSTAINED_NUM_RECEIVERS\", Integer.getInteger(\"numReceives\", 2));\n-        testConfig.put(\"SUSTAINED_UPDATE_INTERVAL\", Integer.getInteger(\"batchSize\", 1000));\n-        testConfig.put(\"SUSTAINED_UPDATE_KEY\", SUSTAINED_KEY + \".UPDATE\");\n-        testConfig.put(\"ACKNOWLEDGE_MODE\", Integer.getInteger(\"ackMode\", AMQSession.AUTO_ACKNOWLEDGE));\n-\n-        log.info(\"Created Config: \" + testConfig.entrySet().toArray());\n-\n-        sequenceTest(testConfig);\n-    }\n-\n-    /**\n-     * Holds a test coordinating conversation with the test clients. This is the basic implementation of the inner loop\n-     * of Use Case 5. It consists of assigning the test roles, begining the test and gathering the test reports from the\n-     * participants.\n-     *\n-     * @param testProperties The test case definition.\n-     *\n-     * @return The test results from the senders and receivers.\n-     *\n-     * @throws javax.jms.JMSException All underlying JMSExceptions are allowed to fall through.\n-     */\n-    protected Message[] sequenceTest(Map<String, Object> testProperties) throws JMSException\n-    {\n-        log.debug(\"protected Message[] sequenceTest(Object... testProperties = \" + testProperties + \"): called\");\n-\n-        Session session = conversationFactory.getSession();\n-        Destination senderControlTopic = session.createTopic(sender.privateControlKey);\n-\n-        ConversationFactory.Conversation senderConversation = conversationFactory.startConversation();\n-\n-        // Assign the sender role to the sending test client.\n-        Message assignSender = conversationFactory.getSession().createMessage();\n-        setPropertiesOnMessage(assignSender, testProperties);\n-        assignSender.setStringProperty(\"CONTROL_TYPE\", \"ASSIGN_ROLE\");\n-        assignSender.setStringProperty(\"ROLE\", \"SENDER\");\n-        assignSender.setStringProperty(\"CLIENT_NAME\", \"Sustained_SENDER\");\n-\n-        senderConversation.send(senderControlTopic, assignSender);\n-\n-        //Assign and wait for the receiver ckuebts to be ready.\n-        _testProperties = testProperties;\n-\n-        // Wait for the senders to confirm their roles.\n-        senderConversation.receive();\n-\n-        assignReceivers();\n-\n-        // Start the test.\n-        Message start = session.createMessage();\n-        start.setStringProperty(\"CONTROL_TYPE\", \"START\");\n-\n-        senderConversation.send(senderControlTopic, start);\n-\n-        // Wait for the test sender to return its report.\n-        Message senderReport = senderConversation.receive();\n-\n-        try\n-        {\n-            Thread.sleep(500);\n-        }\n-        catch (InterruptedException e)\n-        {\n-        }\n-\n-        // Ask the receiver for its report.\n-        Message statusRequest = session.createMessage();\n-        statusRequest.setStringProperty(\"CONTROL_TYPE\", \"STATUS_REQUEST\");\n-\n-\n-        return new Message[]{senderReport};\n-    }\n-\n-    private void assignReceivers()\n-    {\n-        for (TestClientDetails receiver : _receivers)\n-        {\n-            registerReceiver(receiver);\n-        }\n-    }\n-\n-    private void registerReceiver(TestClientDetails receiver)\n-    {\n-        log.info(\"registerReceiver called for receiver:\" + receiver);\n-        try\n-        {\n-            Session session = conversationFactory.getSession();\n-            Destination receiverControlTopic = session.createTopic(receiver.privateControlKey);\n-            ConversationFactory.Conversation receiverConversation = conversationFactory.startConversation();\n-            // Assign the receiver role the receiving client.\n-            Message assignReceiver = session.createMessage();\n-            setPropertiesOnMessage(assignReceiver, _testProperties);\n-            assignReceiver.setStringProperty(\"CONTROL_TYPE\", \"ASSIGN_ROLE\");\n-            assignReceiver.setStringProperty(\"ROLE\", \"RECEIVER\");\n-            assignReceiver.setStringProperty(\"CLIENT_NAME\", \"Sustained_RECEIVER_\" + receiver.clientName);\n-\n-            receiverConversation.send(receiverControlTopic, assignReceiver);\n-\n-            //Don't wait for receiver to be ready.... we can't this is being done in\n-            // the dispatcher thread, and most likely the acceptance message we\n-            // want is sitting in the Dispatcher._queue waiting its turn for being\n-            // dispatched so if we block here we won't can't get the message.             \n-            // So assume consumer is ready for action.\n-            //receiverConversation.receive();\n-        }\n-        catch (JMSException e)\n-        {\n-            log.warn(\"Unable to assign receiver:\" + receiver + \". Due to:\" + e.getMessage());\n-        }\n-    }\n-\n-    public void latejoin(Message message)\n-    {\n-        try\n-        {\n-\n-            TestClientDetails clientDetails = new TestClientDetails();\n-            clientDetails.clientName = message.getStringProperty(\"CLIENT_NAME\");\n-            clientDetails.privateControlKey = message.getStringProperty(\"CLIENT_PRIVATE_CONTROL_KEY\");\n-\n-\n-            registerReceiver(clientDetails);\n-        }\n-        catch (JMSException e)\n-        {\n-            //swallow\n-        }\n-    }\n-\n-    /**\n-     * Should provide a translation from the junit method name of a test to its test case name as defined in the interop\n-     * testing specification. For example the method \"testP2P\" might map onto the interop test case name\n-     * \"TC2_BasicP2P\".\n-     *\n-     * @param methodName The name of the JUnit test method.\n-     *\n-     * @return The name of the corresponding interop test case.\n-     */\n-    public String getTestCaseNameForTestMethod(String methodName)\n-    {\n-        return \"Perf_SustainedPubSub\";\n-    }\n-}", "filename": "integrationtests/src/main/java/org/apache/qpid/sustained/SustainedTestCoordinator.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/sustained/TestClient.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/sustained/TestClient.java", "sha": "44fc09041082078bc623a1a755cf6d29ee62d9cd", "changes": 157, "status": "removed", "deletions": 157, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/sustained/TestClient.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,157 +0,0 @@\n-/*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.    \n- *\n- * \n- */\n-package org.apache.qpid.sustained;\n-\n-import org.apache.log4j.Logger;\n-import org.apache.qpid.interop.testclient.InteropClientTestCase;\n-import org.apache.qpid.util.CommandLineParser;\n-\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Properties;\n-\n-public class TestClient extends org.apache.qpid.interop.testclient.TestClient\n-{\n-    private static Logger log = Logger.getLogger(TestClient.class);\n-\n-    /**\n-     * Creates a new interop test client, listenting to the specified broker and virtual host, with the specified client\n-     * identifying name.\n-     *\n-     * @param brokerUrl   The url of the broker to connect to.\n-     * @param virtualHost The virtual host to conect to.\n-     * @param clientName  The client name to use.\n-     */\n-    public TestClient(String brokerUrl, String virtualHost, String clientName)\n-    {\n-        super(brokerUrl, virtualHost, clientName);\n-    }\n-\n-    /**\n-     * The entry point for the interop test coordinator. This client accepts the following command line arguments:\n-     *\n-     * <p/><table> <tr><td> -b         <td> The broker URL.       <td> Optional. <tr><td> -h         <td> The virtual\n-     * host.     <td> Optional. <tr><td> -n         <td> The test client name. <td> Optional. <tr><td> name=value <td>\n-     * Trailing argument define name/value pairs. Added to system properties. <td> Optional. </table>\n-     *\n-     * @param args The command line arguments.\n-     */\n-    public static void main(String[] args)\n-    {\n-        // Use the command line parser to evaluate the command line.\n-        CommandLineParser commandLine =\n-                new CommandLineParser(\n-                        new String[][]\n-                                {\n-                                        {\"b\", \"The broker URL.\", \"broker\", \"false\"},\n-                                        {\"h\", \"The virtual host to use.\", \"virtual host\", \"false\"},\n-                                        {\"n\", \"The test client name.\", \"name\", \"false\"},\n-                                        {\"j\", \"Join this test client to running test.\", \"join\", \"\"}\n-                                });\n-\n-        // Capture the command line arguments or display errors and correct usage and then exit.\n-        Properties options = null;\n-\n-        try\n-        {\n-            options = commandLine.parseCommandLine(args);\n-        }\n-        catch (IllegalArgumentException e)\n-        {\n-            System.out.println(commandLine.getErrors());\n-            System.out.println(commandLine.getUsage());\n-            System.exit(1);\n-        }\n-\n-        // Extract the command line options.\n-        String brokerUrl = options.getProperty(\"b\");\n-        String virtualHost = options.getProperty(\"h\");\n-        String clientName = options.getProperty(\"n\");\n-        String join = options.getProperty(\"j\");\n-\n-        // Add all the trailing command line options (name=value pairs) to system properties. Tests may pick up\n-        // overridden values from there.\n-        commandLine.addCommandLineToSysProperties();\n-\n-        // Create a test client and start it running.\n-        TestClient client = new TestClient(brokerUrl, virtualHost, (clientName == null) ? CLIENT_NAME : clientName);\n-\n-        // Use a class path scanner to find all the interop test case implementations.\n-        Collection<Class<? extends InteropClientTestCase>> testCaseClasses =\n-                new ArrayList<Class<? extends InteropClientTestCase>>();\n-        // ClasspathScanner.getMatches(InteropClientTestCase.class, \"^TestCase.*\", true);\n-        // Hard code the test classes till the classpath scanner is fixed.\n-        Collections.addAll(testCaseClasses,\n-                           SustainedTestClient.class);\n-\n-\n-        try\n-        {\n-            client.start(testCaseClasses, join);\n-        }\n-        catch (Exception e)\n-        {\n-            log.error(\"The test client was unable to start.\", e);\n-            System.exit(1);\n-        }\n-    }\n-\n-    protected void start(Collection<Class<? extends InteropClientTestCase>> testCaseClasses, String join) throws JMSException, ClassNotFoundException\n-    {\n-        super.start(testCaseClasses);\n-        log.debug(\"private void start(): called\");\n-\n-        if (join != null && !join.equals(\"\"))\n-        {\n-            Message latejoin = session.createMessage();\n-\n-            try\n-            {\n-                Object test = Class.forName(join).newInstance();\n-                if (test instanceof InteropClientTestCase)\n-                {\n-                    currentTestCase = (InteropClientTestCase) test;\n-                }\n-                else\n-                {\n-                    throw new RuntimeException(\"Requested to join class '\" + join + \"' but this is not a InteropClientTestCase.\");\n-                }\n-\n-                latejoin.setStringProperty(\"CONTROL_TYPE\", \"LATEJOIN\");\n-                latejoin.setStringProperty(\"CLIENT_NAME\", clientName);\n-                latejoin.setStringProperty(\"CLIENT_PRIVATE_CONTROL_KEY\", \"iop.control.\" + clientName);\n-                producer.send(session.createTopic(\"iop.control.test.\" + currentTestCase.getName()), latejoin);\n-            }\n-            catch (InstantiationException e)\n-            {\n-                log.warn(\"Unable to request latejoining of test:\" + currentTestCase);\n-            }\n-            catch (IllegalAccessException e)\n-            {\n-                log.warn(\"Unable to request latejoining of test:\" + currentTestCase);\n-            }\n-        }\n-    }\n-\n-}", "filename": "integrationtests/src/main/java/org/apache/qpid/sustained/TestClient.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/sustained/TestCoordinator.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/integrationtests/src/main/java/org/apache/qpid/sustained/TestCoordinator.java", "sha": "7e12fe39fbd2ea12b5fcefe1b39f6494d186cf63", "changes": 117, "status": "removed", "deletions": 117, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/sustained/TestCoordinator.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,117 +0,0 @@\n-/*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.    \n- *\n- * \n- */\n-package org.apache.qpid.sustained;\n-\n-import org.apache.qpid.interop.coordinator.Coordinator;\n-import org.apache.qpid.interop.coordinator.ListeningTestDecorator;\n-import org.apache.qpid.interop.coordinator.TestClientDetails;\n-import org.apache.qpid.util.CommandLineParser;\n-import org.apache.qpid.util.ConversationFactory;\n-import org.apache.log4j.Logger;\n-\n-import java.util.Properties;\n-import java.util.Set;\n-\n-import junit.framework.TestResult;\n-import uk.co.thebadgerset.junit.extensions.WrappedSuiteTestDecorator;\n-\n-import javax.jms.Connection;\n-\n-public class TestCoordinator extends Coordinator\n-{\n-\n-    private static final Logger log = Logger.getLogger(TestCoordinator.class);\n-\n-    /**\n-     * Creates an interop test coordinator on the specified broker and virtual host.\n-     *\n-     * @param brokerUrl   The URL of the broker to connect to.\n-     * @param virtualHost The virtual host to run all tests on. Optional, may be <tt>null</tt>.\n-     */\n-    TestCoordinator(String brokerUrl, String virtualHost)\n-    {\n-        super(brokerUrl, virtualHost);\n-    }\n-\n-    protected WrappedSuiteTestDecorator newTestDecorator(WrappedSuiteTestDecorator targetTest, Set<TestClientDetails> enlistedClients, ConversationFactory conversationFactory, Connection connection)\n-    {\n-        return  new ListeningTestDecorator(targetTest, enlistedClients, conversationFactory, connection);\n-    }\n-\n-\n-    /**\n-     * The entry point for the interop test coordinator. This client accepts the following command line arguments:\n-     *\n-     * <p/><table> <tr><td> -b         <td> The broker URL.   <td> Mandatory. <tr><td> -h         <td> The virtual host.\n-     * <td> Optional. <tr><td> name=value <td> Trailing argument define name/value pairs. Added to system properties.\n-     * <td> Optional. </table>\n-     *\n-     * @param args The command line arguments.\n-     */\n-    public static void main(String[] args)\n-    {\n-        try\n-        {\n-            // Use the command line parser to evaluate the command line with standard handling behaviour (print errors\n-            // and usage then exist if there are errors).\n-            Properties options =\n-                    CommandLineParser.processCommandLine(args,\n-                                                         new CommandLineParser(\n-                                                                 new String[][]\n-                                                                         {\n-                                                                                 {\"b\", \"The broker URL.\", \"broker\", \"false\"},\n-                                                                                 {\"h\", \"The virtual host to use.\", \"virtual host\", \"false\"},\n-                                                                                 {\"o\", \"The name of the directory to output test timings to.\", \"dir\", \"false\"}\n-                                                                         }));\n-\n-            // Extract the command line options.\n-            String brokerUrl = options.getProperty(\"b\");\n-            String virtualHost = options.getProperty(\"h\");\n-            String reportDir = options.getProperty(\"o\");\n-            reportDir = (reportDir == null) ? \".\" : reportDir;\n-\n-\n-            String[] testClassNames = {SustainedTestCoordinator.class.getName()};\n-\n-            // Create a coordinator and begin its test procedure.\n-            Coordinator coordinator = new TestCoordinator(brokerUrl, virtualHost);\n-\n-            coordinator.setReportDir(reportDir);\n-\n-            TestResult testResult = coordinator.start(testClassNames);\n-\n-            if (testResult.failureCount() > 0)\n-            {\n-                System.exit(FAILURE_EXIT);\n-            }\n-            else\n-            {\n-                System.exit(SUCCESS_EXIT);\n-            }\n-        }\n-        catch (Exception e)\n-        {\n-            System.err.println(e.getMessage());\n-            log.error(\"Top level handler caught execption.\", e);\n-            System.exit(EXCEPTION_EXIT);\n-        }\n-    }\n-}", "filename": "integrationtests/src/main/java/org/apache/qpid/sustained/TestCoordinator.java"}, {"additions": 9, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/test/framework/distributedtesting/InteropClientTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/test/framework/distributedtesting/InteropClientTestCase.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/testclient/InteropClientTestCase.java", "sha": "5e6d61a9e09df960663b3b0dbcfe3c78aa44116b", "changes": 21, "status": "renamed", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/test/framework/distributedtesting/InteropClientTestCase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,7 +18,7 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.interop.testclient;\r\n+package org.apache.qpid.test.framework.distributedtesting;\r\n \r\n import javax.jms.JMSException;\r\n import javax.jms.Message;\r\n@@ -44,7 +44,11 @@\n     /** Defines the possible test case roles that an interop test case can take on. */\r\n     public enum Roles\r\n     {\r\n-        SENDER, RECEIVER;\r\n+        /** Specifies the sender role. */\r\n+        SENDER,\r\n+\r\n+        /** Specifies the receivers role. */\r\n+        RECEIVER\r\n     }\r\n \r\n     /**\r\n@@ -70,27 +74,20 @@\n      * Assigns the role to be played by this test case. The test parameters are fully specified in the\r\n      * assignment message. When this method return the test case will be ready to execute.\r\n      *\r\n-     * @param role              The role to be played; sender or receiver.\r\n+     * @param role              The role to be played; sender or receivers.\r\n      * @param assignRoleMessage The role assingment message, contains the full test parameters.\r\n      *\r\n      * @throws JMSException Any JMSException resulting from reading the message are allowed to fall through.\r\n      */\r\n     public void assignRole(Roles role, Message assignRoleMessage) throws JMSException;\r\n \r\n     /**\r\n-     * Performs the test case actions.\r\n-     * return from here when you have finished the test.. this will signal the controller that the test has ended. \r\n+     * Performs the test case actions. Returning from here, indicates that the sending role has completed its test.\r\n+     *\r\n      * @throws JMSException Any JMSException resulting from reading the message are allowed to fall through.\r\n      */\r\n     public void start() throws JMSException;\r\n \r\n-    /**\r\n-     * Gives notice of termination of the test case actions.\r\n-     *\r\n-     * @throws JMSException Any JMSException resulting from allowed to fall through.\r\n-     */\r\n-    public void terminate() throws JMSException, InterruptedException;\r\n-\r\n     /**\r\n      * Gets a report on the actions performed by the test case in its assigned role.\r\n      *\r", "filename": "integrationtests/src/main/java/org/apache/qpid/test/framework/distributedtesting/InteropClientTestCase.java"}, {"additions": 92, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/test/framework/distributedtesting/TestClient.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/integrationtests/src/main/java/org/apache/qpid/test/framework/distributedtesting/TestClient.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/testclient/TestClient.java", "sha": "12c0d0aa6986887528f6553b0e6ffa4f2f0e0a69", "changes": 229, "status": "renamed", "deletions": 137, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/integrationtests/src/main/java/org/apache/qpid/test/framework/distributedtesting/TestClient.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,45 +18,41 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.interop.testclient;\r\n+package org.apache.qpid.test.framework.distributedtesting;\r\n \r\n import org.apache.log4j.Logger;\r\n-import org.apache.qpid.interop.testclient.testcases.TestCase1DummyRun;\r\n-import org.apache.qpid.interop.testclient.testcases.TestCase2BasicP2P;\r\n-import org.apache.qpid.util.CommandLineParser;\r\n-import org.apache.qpid.util.PropertiesUtils;\r\n-\r\n-import javax.jms.Connection;\r\n-import javax.jms.ConnectionFactory;\r\n-import javax.jms.JMSException;\r\n-import javax.jms.Message;\r\n-import javax.jms.MessageConsumer;\r\n-import javax.jms.MessageListener;\r\n-import javax.jms.MessageProducer;\r\n-import javax.jms.Session;\r\n-import javax.naming.Context;\r\n-import javax.naming.InitialContext;\r\n-import javax.naming.NamingException;\r\n-import java.io.IOException;\r\n+\r\n+import org.apache.qpid.interop.clienttestcases.TestCase1DummyRun;\r\n+import org.apache.qpid.interop.clienttestcases.TestCase2BasicP2P;\r\n+import org.apache.qpid.interop.clienttestcases.TestCase3BasicPubSub;\r\n+import org.apache.qpid.sustained.SustainedClientTestCase;\r\n+import org.apache.qpid.test.framework.MessagingTestConfigProperties;\r\n+import org.apache.qpid.test.framework.TestUtils;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n+import uk.co.thebadgerset.junit.extensions.util.TestContextProperties;\r\n+\r\n+import javax.jms.*;\r\n+\r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.Collections;\r\n import java.util.HashMap;\r\n import java.util.Map;\r\n-import java.util.Properties;\r\n \r\n /**\r\n  * Implements a test client as described in the interop testing spec\r\n  * (http://cwiki.apache.org/confluence/display/qpid/Interop+Testing+Specification). A test client is an agent that\r\n- * reacts to control message sequences send by the test {@link org.apache.qpid.interop.coordinator.Coordinator}.\r\n+ * reacts to control message sequences send by the test {@link org.apache.qpid.test.framework.distributedtesting.Coordinator}.\r\n  *\r\n- * <p/><table><caption>Messages Handled by TestClient</caption>\r\n+ * <p/><table><caption>Messages Handled by SustainedTestClient</caption>\r\n  * <tr><th> Message               <th> Action\r\n  * <tr><td> Invite(compulsory)    <td> Reply with Enlist.\r\n  * <tr><td> Invite(test case)     <td> Reply with Enlist if test case available.\r\n  * <tr><td> AssignRole(test case) <td> Reply with Accept Role if matches an enlisted test. Keep test parameters.\r\n  * <tr><td> Start                 <td> Send test messages defined by test parameters. Send report on messages sent.\r\n  * <tr><td> Status Request        <td> Send report on messages received.\r\n+ * <tr><td> Terminate             <td> Terminate the test client.\r\n  * </table>\r\n  *\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n@@ -67,30 +63,49 @@\n  */\r\n public class TestClient implements MessageListener\r\n {\r\n-    private static Logger log = Logger.getLogger(TestClient.class);\r\n+    /** Used for debugging. */\r\n+    private static final Logger log = Logger.getLogger(TestClient.class);\r\n \r\n-    public static final String CONNECTION_PROPERTY = \"connectionfactory.broker\";\r\n-    public static final String CONNECTION_NAME = \"broker\";\r\n+    /** Used for reporting to the console. */\r\n+    private static final Logger console = Logger.getLogger(\"CONSOLE\");\r\n+\r\n+    /** Holds the default identifying name of the test client. */\r\n     public static final String CLIENT_NAME = \"java\";\r\n-    public static final String DEFAULT_CONNECTION_PROPS_RESOURCE = \"org/apache/qpid/interop/connection.properties\";\r\n \r\n     /** Holds the URL of the broker to run the tests on. */\r\n     public static String brokerUrl;\r\n \r\n     /** Holds the virtual host to run the tests on. If <tt>null</tt>, then the default virtual host is used. */\r\n     public static String virtualHost;\r\n \r\n+    /**\r\n+     * Holds the test context properties that provides the default test parameters, plus command line overrides.\r\n+     * This is initialized with the default test parameters, to which command line overrides may be applied.\r\n+     */\r\n+    public static ParsedProperties testContextProperties =\r\n+        TestContextProperties.getInstance(MessagingTestConfigProperties.defaults);\r\n+\r\n     /** Holds all the test cases loaded from the classpath. */\r\n     Map<String, InteropClientTestCase> testCases = new HashMap<String, InteropClientTestCase>();\r\n \r\n+    /** Holds the test case currently being run by this client. */\r\n     protected InteropClientTestCase currentTestCase;\r\n \r\n-    protected Connection _connection;\r\n+    /** Holds the connection to the broker that the test is being coordinated on. */\r\n+    protected Connection connection;\r\n+\r\n+    /** Holds the message producer to hold the test coordination over. */\r\n     protected MessageProducer producer;\r\n+\r\n+    /** Holds the JMS session for the test coordination. */\r\n     protected Session session;\r\n \r\n+    /** Holds the name of this client, with a default value. */\r\n     protected String clientName = CLIENT_NAME;\r\n \r\n+    /** This flag indicates that the test client should attempt to join the currently running test case on start up. */\r\n+    protected boolean join;\r\n+\r\n     /**\r\n      * Creates a new interop test client, listenting to the specified broker and virtual host, with the specified client\r\n      * identifying name.\r\n@@ -99,15 +114,16 @@\n      * @param virtualHost The virtual host to conect to.\r\n      * @param clientName  The client name to use.\r\n      */\r\n-    public TestClient(String brokerUrl, String virtualHost, String clientName)\r\n+    public TestClient(String brokerUrl, String virtualHost, String clientName, boolean join)\r\n     {\r\n-        log.debug(\"public TestClient(String brokerUrl = \" + brokerUrl + \", String virtualHost = \" + virtualHost\r\n-                  + \", String clientName = \" + clientName + \"): called\");\r\n+        log.debug(\"public SustainedTestClient(String brokerUrl = \" + brokerUrl + \", String virtualHost = \" + virtualHost\r\n+            + \", String clientName = \" + clientName + \"): called\");\r\n \r\n         // Retain the connection parameters.\r\n         this.brokerUrl = brokerUrl;\r\n         this.virtualHost = virtualHost;\r\n         this.clientName = clientName;\r\n+        this.join = join;\r\n     }\r\n \r\n     /**\r\n@@ -124,49 +140,41 @@ public TestClient(String brokerUrl, String virtualHost, String clientName)\n      */\r\n     public static void main(String[] args)\r\n     {\r\n-        // Use the command line parser to evaluate the command line.\r\n-        CommandLineParser commandLine =\r\n-                new CommandLineParser(\r\n+        // Override the default broker url to be localhost:5672.\r\n+        testContextProperties.setProperty(MessagingTestConfigProperties.BROKER_PROPNAME, \"tcp://localhost:5672\");\r\n+\r\n+        // Use the command line parser to evaluate the command line with standard handling behaviour (print errors\r\n+        // and usage then exist if there are errors).\r\n+        // Any options and trailing name=value pairs are also injected into the test context properties object,\r\n+        // to override any defaults that may have been set up.\r\n+        ParsedProperties options =\r\n+            new ParsedProperties(uk.co.thebadgerset.junit.extensions.util.CommandLineParser.processCommandLine(args,\r\n+                    new uk.co.thebadgerset.junit.extensions.util.CommandLineParser(\r\n                         new String[][]\r\n-                                {\r\n-                                        {\"b\", \"The broker URL.\", \"broker\", \"false\"},\r\n-                                        {\"h\", \"The virtual host to use.\", \"virtual host\", \"false\"},\r\n-                                        {\"n\", \"The test client name.\", \"name\", \"false\"}\r\n-                                });\r\n-\r\n-        // Capture the command line arguments or display errors and correct usage and then exit.\r\n-        Properties options = null;\r\n-\r\n-        try\r\n-        {\r\n-            options = commandLine.parseCommandLine(args);\r\n-        }\r\n-        catch (IllegalArgumentException e)\r\n-        {\r\n-            System.out.println(commandLine.getErrors());\r\n-            System.out.println(commandLine.getUsage());\r\n-            System.exit(1);\r\n-        }\r\n+                        {\r\n+                            { \"b\", \"The broker URL.\", \"broker\", \"false\" },\r\n+                            { \"h\", \"The virtual host to use.\", \"virtual host\", \"false\" },\r\n+                            { \"o\", \"The name of the directory to output test timings to.\", \"dir\", \"false\" },\r\n+                            { \"n\", \"The name of the test client.\", \"name\", \"false\" },\r\n+                            { \"j\", \"Join this test client to running test.\", \"false\" }\r\n+                        }), testContextProperties));\r\n \r\n         // Extract the command line options.\r\n         String brokerUrl = options.getProperty(\"b\");\r\n         String virtualHost = options.getProperty(\"h\");\r\n         String clientName = options.getProperty(\"n\");\r\n-\r\n-        // Add all the trailing command line options (name=value pairs) to system properties. Tests may pick up\r\n-        // overridden values from there.\r\n-        commandLine.addCommandLineToSysProperties();\r\n+        boolean join = options.getPropertyAsBoolean(\"j\");\r\n \r\n         // Create a test client and start it running.\r\n-        TestClient client = new TestClient(brokerUrl, virtualHost, (clientName == null) ? CLIENT_NAME : clientName);\r\n+        TestClient client = new TestClient(brokerUrl, virtualHost, (clientName == null) ? CLIENT_NAME : clientName, join);\r\n \r\n         // Use a class path scanner to find all the interop test case implementations.\r\n+        // Hard code the test classes till the classpath scanner is fixed.\r\n         Collection<Class<? extends InteropClientTestCase>> testCaseClasses =\r\n-                new ArrayList<Class<? extends InteropClientTestCase>>();\r\n+            new ArrayList<Class<? extends InteropClientTestCase>>();\r\n         // ClasspathScanner.getMatches(InteropClientTestCase.class, \"^TestCase.*\", true);\r\n-        // Hard code the test classes till the classpath scanner is fixed.\r\n-        Collections.addAll(testCaseClasses,\r\n-                           new Class[]{TestCase1DummyRun.class, TestCase2BasicP2P.class, TestClient.class});\r\n+        Collections.addAll(testCaseClasses, TestCase1DummyRun.class, TestCase2BasicP2P.class, TestCase3BasicPubSub.class,\r\n+            SustainedClientTestCase.class);\r\n \r\n         try\r\n         {\r\n@@ -182,7 +190,10 @@ public static void main(String[] args)\n     /**\r\n      * Starts the interop test client running. This causes it to start listening for incoming test invites.\r\n      *\r\n-     * @throws JMSException Any underlying JMSExceptions are allowed to fall through. @param testCaseClasses\r\n+     * @param testCaseClasses The classes of the available test cases. The test case names from these are used to\r\n+     *                        matchin incoming test invites against.\r\n+     *\r\n+     * @throws JMSException Any underlying JMSExceptions are allowed to fall through.\r\n      */\r\n     protected void start(Collection<Class<? extends InteropClientTestCase>> testCaseClasses) throws JMSException\r\n     {\r\n@@ -209,84 +220,36 @@ protected void start(Collection<Class<? extends InteropClientTestCase>> testCase\n         }\r\n \r\n         // Open a connection to communicate with the coordinator on.\r\n-        _connection = createConnection(DEFAULT_CONNECTION_PROPS_RESOURCE, clientName, brokerUrl, virtualHost);\r\n-\r\n-        session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n+        connection = TestUtils.createConnection(testContextProperties);\r\n+        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n \r\n         // Set this up to listen for control messages.\r\n-        MessageConsumer consumer = session.createConsumer(session.createTopic(\"iop.control.\" + clientName));\r\n+        Topic privateControlTopic = session.createTopic(\"iop.control.\" + clientName);\r\n+        MessageConsumer consumer = session.createConsumer(privateControlTopic);\r\n         consumer.setMessageListener(this);\r\n \r\n-        MessageConsumer consumer2 = session.createConsumer(session.createTopic(\"iop.control\"));\r\n+        Topic controlTopic = session.createTopic(\"iop.control\");\r\n+        MessageConsumer consumer2 = session.createConsumer(controlTopic);\r\n         consumer2.setMessageListener(this);\r\n \r\n         // Create a producer to send replies with.\r\n         producer = session.createProducer(null);\r\n \r\n-        // Start listening for incoming control messages.\r\n-        _connection.start();\r\n-    }\r\n-\r\n-\r\n-    public static Connection createConnection(String connectionPropsResource, String brokerUrl, String virtualHost)\r\n-    {\r\n-        return createConnection(connectionPropsResource, \"clientID\", brokerUrl, virtualHost);\r\n-    }\r\n-\r\n-    /**\r\n-     * Establishes a JMS connection using a properties file and qpids built in JNDI implementation. This is a simple\r\n-     * convenience method for code that does anticipate handling connection failures. All exceptions that indicate that\r\n-     * the connection has failed, are wrapped as rutime exceptions, preumably handled by a top level failure handler.\r\n-     *\r\n-     * @param connectionPropsResource The name of the connection properties file.\r\n-     * @param clientID\r\n-     * @param brokerUrl               The broker url to connect to, <tt>null</tt> to use the default from the\r\n-     *                                properties.\r\n-     * @param virtualHost             The virtual host to connectio to, <tt>null</tt> to use the default.\r\n-     *\r\n-     * @return A JMS conneciton.\r\n-     *\r\n-     * @todo Make username/password configurable. Allow multiple urls for fail over. Once it feels right, move it to a\r\n-     * Utils library class.\r\n-     */\r\n-    public static Connection createConnection(String connectionPropsResource, String clientID, String brokerUrl, String virtualHost)\r\n-    {\r\n-        log.debug(\"public static Connection createConnection(String connectionPropsResource = \" + connectionPropsResource\r\n-                  + \", String brokerUrl = \" + brokerUrl + \", String clientID = \" + clientID\r\n-                  + \", String virtualHost = \" + virtualHost + \" ): called\");\r\n-\r\n-        try\r\n+        // If the join flag was set, then broadcast a join message to notify the coordinator that a new test client\r\n+        // is available to join the current test case, if it supports it. This message may be ignored, or it may result\r\n+        // in this test client receiving a test invite.\r\n+        if (join)\r\n         {\r\n-            Properties connectionProps =\r\n-                    PropertiesUtils.getProperties(TestClient.class.getClassLoader().getResourceAsStream(\r\n-                            connectionPropsResource));\r\n-\r\n-            if (brokerUrl != null)\r\n-            {\r\n-                String connectionString =\r\n-                        \"amqp://guest:guest@\" + clientID + \"/\" + ((virtualHost != null) ? virtualHost : \"\") + \"?brokerlist='\" + brokerUrl + \"'\";\r\n-                connectionProps.setProperty(CONNECTION_PROPERTY, connectionString);\r\n-            }\r\n-\r\n-            Context ctx = new InitialContext(connectionProps);\r\n-\r\n-            ConnectionFactory cf = (ConnectionFactory) ctx.lookup(CONNECTION_NAME);\r\n-            Connection connection = cf.createConnection();\r\n+            Message joinMessage = session.createMessage();\r\n \r\n-            return connection;\r\n-        }\r\n-        catch (IOException e)\r\n-        {\r\n-            throw new RuntimeException(e);\r\n-        }\r\n-        catch (NamingException e)\r\n-        {\r\n-            throw new RuntimeException(e);\r\n-        }\r\n-        catch (JMSException e)\r\n-        {\r\n-            throw new RuntimeException(e);\r\n+            joinMessage.setStringProperty(\"CONTROL_TYPE\", \"JOIN\");\r\n+            joinMessage.setStringProperty(\"CLIENT_NAME\", clientName);\r\n+            joinMessage.setStringProperty(\"CLIENT_PRIVATE_CONTROL_KEY\", \"iop.control.\" + clientName);\r\n+            producer.send(controlTopic, joinMessage);\r\n         }\r\n+\r\n+        // Start listening for incoming control messages.\r\n+        connection.start();\r\n     }\r\n \r\n     /**\r\n@@ -327,7 +290,7 @@ public void onMessage(Message message)\n                     }\r\n                     else\r\n                     {\r\n-                        log.warn(\"'\" + testName + \"' not part of this clients tests.\");\r\n+                        log.debug(\"Received an invite to the test '\" + testName + \"' but this test is not known.\");\r\n                     }\r\n                 }\r\n                 else\r\n@@ -394,16 +357,8 @@ else if (\"TERMINATE\".equals(controlType))\n             {\r\n                 log.info(\"Received termination instruction from coordinator.\");\r\n \r\n-//                try\r\n-//                {\r\n-//                    currentTestCase.terminate();\r\n-//                }\r\n-//                catch (InterruptedException e)\r\n-//                {\r\n-//                    //\r\n-//                }\r\n                 // Is a cleaner shutdown needed?\r\n-                _connection.close();\r\n+                connection.close();\r\n                 System.exit(0);\r\n             }\r\n             else\r", "filename": "integrationtests/src/main/java/org/apache/qpid/test/framework/distributedtesting/TestClient.java"}, {"additions": 22, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/management/eclipse-plugin/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/management/eclipse-plugin/pom.xml", "sha": "2ec30d212adbfc978953dba25f37ba7ea75ba86c", "changes": 41, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/pom.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -15,7 +15,7 @@\n     KIND, either express or implied. See the License for the\n     specific language governing permissions and limitations\n     under the License.\n--->\n+  -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n \n@@ -38,17 +38,17 @@\n     </properties>\n     \n     <repositories>\n-        <repository>\n+          <repository>\n             <id>repo1.maven.org</id>\n             <name>Maven eclipse Repository</name>\n             <url>http://repo1.maven.org/eclipse</url>\n-        </repository>\n-        <repository>\n+          </repository>\n+          <repository>\n             <id>apache.snapshots</id>\n             <name>Apache SNAPSHOT Repository</name>\n             <url>http://people.apache.org/repo/m2-snapshot-repository</url>\n             <snapshots>\n-                <enabled>true</enabled>\n+              <enabled>true</enabled>\n             </snapshots>\n         </repository>\n     </repositories>\n@@ -197,43 +197,46 @@\n                 <directory>icons/</directory>\n                 <targetPath>icons/</targetPath>\n                 <includes>\n-                    <include>**</include>\n+                  <include>**</include>\n                 </includes>\n             </resource>\n             <resource>                \n                 <directory>icons/</directory>\n                 <targetPath>/</targetPath>\n                 <includes>\n-                    <include>splash.bmp</include>\n+                  <include>splash.bmp</include>\n                 </includes>\n             </resource>\n             <resource>\n-                <directory>${basedir}</directory>\n-                <targetPath>/</targetPath>\n-                <includes>\n-                    <include>plugin.xml</include>\n-                    <include>plugin.properties</include>\n-                </includes>  \n+              <directory>${basedir}</directory>\n+              <targetPath>/</targetPath>\n+              <includes>\n+                <include>plugin.xml</include>\n+                <include>plugin.properties</include>\n+              </includes>  \n             </resource>\n-        </resources>\n+      </resources>\n         <plugins>\n             <!--\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-antrun-plugin</artifactId>\n             </plugin>\n+            -->\n \n+            <!-- This is required to identify the JAR to eclipse as a plugin -->\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-jar-plugin</artifactId>\n                 <configuration>\n-                    <archive>\n-                        <manifestFile>META-INF/MANIFEST.MF</manifestFile>\n-                    </archive>\n-                    <finalName>${artifactId}_${version}</finalName>\n+                  <archive>\n+                    <manifestFile>META-INF/MANIFEST.MF</manifestFile>\n+                  </archive>\n+                  <finalName>${artifactId}_${version}</finalName>\n                 </configuration>\n-            </plugin>\n+              </plugin>\n \n+            <!--\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>", "filename": "management/eclipse-plugin/pom.xml"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/management/eclipse-plugin/src/test/java/org/apache/qpid/management/ui/ManagementConsoleTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/management/eclipse-plugin/src/test/java/org/apache/qpid/management/ui/ManagementConsoleTest.java", "sha": "56eadbb3b2fb60b1de46359361e101f6f6c7ec34", "changes": 24, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/management/eclipse-plugin/src/test/java/org/apache/qpid/management/ui/ManagementConsoleTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,17 +1,21 @@\n /*\n- * Copyright (c) 2006 The Apache Software Foundation\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.management.ui;", "filename": "management/eclipse-plugin/src/test/java/org/apache/qpid/management/ui/ManagementConsoleTest.java"}, {"additions": 118, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/pom.xml", "sha": "e07b0696e5a166c9b6105cc3e644097f3a136c70", "changes": 230, "status": "modified", "deletions": 112, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/pom.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -87,6 +87,12 @@\n             <artifactId>junit</artifactId>\n         </dependency>\n \n+        <dependency>  \n+            <groupId>org.slf4j</groupId> \n+            <artifactId>slf4j-log4j12</artifactId>  \n+            <version>1.4.0</version>  \n+        </dependency>\n+\n     </dependencies>\n \n     <build>\n@@ -186,124 +192,124 @@\n                         -->\n \n                         <!-- Transient, P2P Tests -->\n-                        <TQR-Qpid-01>-n TQR-Qpid-01           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </TQR-Qpid-01>\n-                        <TQR-Qpid-02>-n TQR-Qpid-02           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </TQR-Qpid-02>\n-                        <TQR-Qpid-03>-n TQR-Qpid-03           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=100000 messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </TQR-Qpid-03>\n-                        <TQR-Qpid-04>-n TQR-Qpid-04           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=100000 messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </TQR-Qpid-04>\n-\n-                        <TQC-Qpid-01>-n TQC-Qpid-01           -d1M  -s[1000]   -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=1000  maxPending=1000000 </TQC-Qpid-01>\n-                        <TQC-Qpid-02>-n TQC-Qpid-02           -d1M  -s[1000]   -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=1000  maxPending=1000000 </TQC-Qpid-02>\n-                        <TQC-Qpid-03>-n TQC-Qpid-03           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=1000000 </TQC-Qpid-03>\n-                        <TQC-Qpid-04>-n TQC-Qpid-04           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=1000000 </TQC-Qpid-04>\n-                        <TQC-Qpid-05>-n TQC-Qpid-05         -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=100000  </TQC-Qpid-05>\n-                        <TQC-Qpid-06>-n TQC-Qpid-06         -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=100000  </TQC-Qpid-06>\n-\n-                        <TQM-Qpid-01-512b>-n TQM-Qpid-01-512b -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512     destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-512b>\n-                        <TQM-Qpid-02-512b>-n TQM-Qpid-02-512b -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=512     destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-512b>\n-                        <TQM-Qpid-01-1K>-n TQM-Qpid-01-1K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1024    destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-1K>\n-                        <TQM-Qpid-02-1K>-n TQM-Qpid-02-1K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=1024    destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-1K>\n-                        <TQM-Qpid-01-5K>-n TQM-Qpid-01-5K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=5120    destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-5K>\n-                        <TQM-Qpid-02-5K>-n TQM-Qpid-02-5K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=5120    destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-5K>\n-                        <TQM-Qpid-01-10K>-n TQM-Qpid-01-10K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=10240   destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-10K>\n-                        <TQM-Qpid-02-10K>-n TQM-Qpid-02-10K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=10240   destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-10K>\n-                        <TQM-Qpid-01-50K>-n TQM-Qpid-01-50K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=51200   destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-50K>\n-                        <TQM-Qpid-02-50K>-n TQM-Qpid-02-50K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=51200   destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-50K>\n-                        <TQM-Qpid-01-100K>-n TQM-Qpid-01-100K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=102400  destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-100K>\n-                        <TQM-Qpid-02-100K>-n TQM-Qpid-02-100K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=102400  destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-100K>\n-                        <TQM-Qpid-01-500K>-n TQM-Qpid-01-500K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512000  destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-500K>\n-                        <TQM-Qpid-02-500K>-n TQM-Qpid-02-500K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=512000  destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-500K>\n-                        <TQM-Qpid-01-1M>-n TQM-Qpid-01-1M     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-1M>\n-                        <TQM-Qpid-02-1M>-n TQM-Qpid-02-1M     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationsCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-1M>\n+                        <TQR-Qpid-01>-n TQR-Qpid-01           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </TQR-Qpid-01>\n+                        <TQR-Qpid-02>-n TQR-Qpid-02           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </TQR-Qpid-02>\n+                        <TQR-Qpid-03>-n TQR-Qpid-03           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=100000 messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </TQR-Qpid-03>\n+                        <TQR-Qpid-04>-n TQR-Qpid-04           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=100000 messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </TQR-Qpid-04>\n+\n+                        <TQC-Qpid-01>-n TQC-Qpid-01           -d1M  -s[1000]   -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=2000  maxPending=1000000 </TQC-Qpid-01>\n+                        <TQC-Qpid-02>-n TQC-Qpid-02           -d1M  -s[1000]   -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=2000  maxPending=1000000 </TQC-Qpid-02>\n+                        <TQC-Qpid-03>-n TQC-Qpid-03           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=1000000 </TQC-Qpid-03>\n+                        <TQC-Qpid-04>-n TQC-Qpid-04           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=1000000 </TQC-Qpid-04>\n+                        <TQC-Qpid-05>-n TQC-Qpid-05           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=100000  </TQC-Qpid-05>\n+                        <TQC-Qpid-06>-n TQC-Qpid-06           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=100000  </TQC-Qpid-06>\n+\n+                        <TQM-Qpid-01-512b>-n TQM-Qpid-01-512b -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512     destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-512b>\n+                        <TQM-Qpid-02-512b>-n TQM-Qpid-02-512b -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=512     destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-512b>\n+                        <TQM-Qpid-01-1K>-n TQM-Qpid-01-1K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1024    destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-1K>\n+                        <TQM-Qpid-02-1K>-n TQM-Qpid-02-1K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=1024    destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-1K>\n+                        <TQM-Qpid-01-5K>-n TQM-Qpid-01-5K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=5120    destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-5K>\n+                        <TQM-Qpid-02-5K>-n TQM-Qpid-02-5K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=5120    destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-5K>\n+                        <TQM-Qpid-01-10K>-n TQM-Qpid-01-10K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=10240   destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-10K>\n+                        <TQM-Qpid-02-10K>-n TQM-Qpid-02-10K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=10240   destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-10K>\n+                        <TQM-Qpid-01-50K>-n TQM-Qpid-01-50K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=51200   destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-50K>\n+                        <TQM-Qpid-02-50K>-n TQM-Qpid-02-50K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=51200   destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-50K>\n+                        <TQM-Qpid-01-100K>-n TQM-Qpid-01-100K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=102400  destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-100K>\n+                        <TQM-Qpid-02-100K>-n TQM-Qpid-02-100K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=102400  destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-100K>\n+                        <TQM-Qpid-01-500K>-n TQM-Qpid-01-500K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512000  destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-500K>\n+                        <TQM-Qpid-02-500K>-n TQM-Qpid-02-500K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=512000  destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-500K>\n+                        <TQM-Qpid-01-1M>-n TQM-Qpid-01-1M     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-01-1M>\n+                        <TQM-Qpid-02-1M>-n TQM-Qpid-02-1M     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationCount=1  rate=0     maxPending=20000000</TQM-Qpid-02-1M>\n \n                         <!-- Transient, Pub/Sub Tests -->\n-                        <TTR-Qpid-01>-n TTR-Qpid-01           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </TTR-Qpid-01>\n-                        <TTR-Qpid-02>-n TTR-Qpid-02           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </TTR-Qpid-02>\n-                        <TTR-Qpid-03>-n TTR-Qpid-03           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=10000  messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </TTR-Qpid-03>\n-                        <TTR-Qpid-04>-n TTR-Qpid-04           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=10000  messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </TTR-Qpid-04>\n-\n-                        <TTC-Qpid-01>-n TTC-Qpid-01           -d1M  -s[1000]   -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=1000  maxPending=1000000 </TTC-Qpid-01>\n-                        <TTC-Qpid-02>-n TTC-Qpid-02           -d1M  -s[1000]   -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=1000  maxPending=1000000 </TTC-Qpid-02>\n-                        <TTC-Qpid-03>-n TTC-Qpid-03           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=1000000 </TTC-Qpid-03>\n-                        <TTC-Qpid-04>-n TTC-Qpid-04           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=1000000 </TTC-Qpid-04>\n-                        <TTC-Qpid-05>-n TTC-Qpid-05           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=100000  </TTC-Qpid-05>\n-                        <TTC-Qpid-06>-n TTC-Qpid-06           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=100000  </TTC-Qpid-06>\n-\n-                        <TTM-Qpid-01-512b>-n TTM-Qpid-01-512b -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512     destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-512b>\n-                        <TTM-Qpid-02-512b>-n TTM-Qpid-02-512b -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=512     destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-512b>\n-                        <TTM-Qpid-01-1K>-n TTM-Qpid-01-1K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1024    destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-1K>\n-                        <TTM-Qpid-02-1K>-n TTM-Qpid-02-1K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=1024    destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-1K>\n-                        <TTM-Qpid-01-5K>-n TTM-Qpid-01-5K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=5120    destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-5K>\n-                        <TTM-Qpid-02-5K>-n TTM-Qpid-02-5K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=5120    destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-5K>\n-                        <TTM-Qpid-01-10K>-n TTM-Qpid-01-10K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=10240   destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-10K>\n-                        <TTM-Qpid-02-10K>-n TTM-Qpid-02-10K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=10240   destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-10K>\n-                        <TTM-Qpid-01-50K>-n TTM-Qpid-01-50K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=51200   destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-50K>\n-                        <TTM-Qpid-02-50K>-n TTM-Qpid-02-50K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=51200   destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-50K>\n-                        <TTM-Qpid-01-100K>-n TTM-Qpid-01-100K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=102400  destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-100K>\n-                        <TTM-Qpid-02-100K>-n TTM-Qpid-02-100K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=102400  destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-100K>\n-                        <TTM-Qpid-01-500K>-n TTM-Qpid-01-500K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512000  destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-500K>\n-                        <TTM-Qpid-02-500K>-n TTM-Qpid-02-500K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=512000  destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-500K>\n-                        <TTM-Qpid-01-1M>-n TTM-Qpid-01-1M     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-1M>\n-                        <TTM-Qpid-02-1M>-n TTM-Qpid-02-1M     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=1048476 destinationsCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-1M>\n+                        <TTR-Qpid-01>-n TTR-Qpid-01           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </TTR-Qpid-01>\n+                        <TTR-Qpid-02>-n TTR-Qpid-02           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </TTR-Qpid-02>\n+                        <TTR-Qpid-03>-n TTR-Qpid-03           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=10000  messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </TTR-Qpid-03>\n+                        <TTR-Qpid-04>-n TTR-Qpid-04           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=10000  messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </TTR-Qpid-04>\n+\n+                        <TTC-Qpid-01>-n TTC-Qpid-01           -d1M  -s[1000]   -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=2000  maxPending=1000000 </TTC-Qpid-01>\n+                        <TTC-Qpid-02>-n TTC-Qpid-02           -d1M  -s[1000]   -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=2000  maxPending=1000000 </TTC-Qpid-02>\n+                        <TTC-Qpid-03>-n TTC-Qpid-03           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=1000000 </TTC-Qpid-03>\n+                        <TTC-Qpid-04>-n TTC-Qpid-04           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=1000000 </TTC-Qpid-04>\n+                        <TTC-Qpid-05>-n TTC-Qpid-05           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=100000  </TTC-Qpid-05>\n+                        <TTC-Qpid-06>-n TTC-Qpid-06           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=100000  </TTC-Qpid-06>\n+\n+                        <TTM-Qpid-01-512b>-n TTM-Qpid-01-512b -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512     destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-512b>\n+                        <TTM-Qpid-02-512b>-n TTM-Qpid-02-512b -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=512     destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-512b>\n+                        <TTM-Qpid-01-1K>-n TTM-Qpid-01-1K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1024    destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-1K>\n+                        <TTM-Qpid-02-1K>-n TTM-Qpid-02-1K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=1024    destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-1K>\n+                        <TTM-Qpid-01-5K>-n TTM-Qpid-01-5K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=5120    destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-5K>\n+                        <TTM-Qpid-02-5K>-n TTM-Qpid-02-5K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=5120    destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-5K>\n+                        <TTM-Qpid-01-10K>-n TTM-Qpid-01-10K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=10240   destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-10K>\n+                        <TTM-Qpid-02-10K>-n TTM-Qpid-02-10K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=10240   destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-10K>\n+                        <TTM-Qpid-01-50K>-n TTM-Qpid-01-50K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=51200   destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-50K>\n+                        <TTM-Qpid-02-50K>-n TTM-Qpid-02-50K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=51200   destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-50K>\n+                        <TTM-Qpid-01-100K>-n TTM-Qpid-01-100K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=102400  destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-100K>\n+                        <TTM-Qpid-02-100K>-n TTM-Qpid-02-100K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=102400  destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-100K>\n+                        <TTM-Qpid-01-500K>-n TTM-Qpid-01-500K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512000  destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-500K>\n+                        <TTM-Qpid-02-500K>-n TTM-Qpid-02-500K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=512000  destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-500K>\n+                        <TTM-Qpid-01-1M>-n TTM-Qpid-01-1M     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-01-1M>\n+                        <TTM-Qpid-02-1M>-n TTM-Qpid-02-1M     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=false pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=1048476 destinationCount=1  rate=0     maxPending=20000000</TTM-Qpid-02-1M>\n \n                         <!-- Persistent, P2P Tests -->\n-                        <PQR-Qpid-01>-n PQR-Qpid-01           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </PQR-Qpid-01>\n-                        <PQR-Qpid-02>-n PQR-Qpid-02           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </PQR-Qpid-02>\n-                        <PQR-Qpid-03>-n PQR-Qpid-03           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=100000 messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </PQR-Qpid-03>\n-                        <PQR-Qpid-04>-n PQR-Qpid-04           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=100000 messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </PQR-Qpid-04>\n-\n-                        <PQC-Qpid-01>-n PQC-Qpid-01           -d1M  -s[100]    -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=300   maxPending=1000000 </PQC-Qpid-01>\n-                        <PQC-Qpid-02>-n PQC-Qpid-02           -d1M  -s[100]    -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=100   maxPending=1000000 </PQC-Qpid-02>\n-                        <PQC-Qpid-03>-n PQC-Qpid-03           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=100    messageSize=256     destinationsCount=10 rate=0     maxPending=1000000 </PQC-Qpid-03>\n-                        <PQC-Qpid-04>-n PQC-Qpid-04           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=1000000 </PQC-Qpid-04>\n-                        <PQC-Qpid-05>-n PQC-Qpid-05           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=100000  </PQC-Qpid-05>\n-                        <PQC-Qpid-06>-n PQC-Qpid-06           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=100000  </PQC-Qpid-06>\n-\n-                        <PQM-Qpid-01-512b>-n PQM-Qpid-01-512b -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512     destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-512b>\n-                        <PQM-Qpid-02-512b>-n PQM-Qpid-02-512b -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=512     destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-512b>\n-                        <PQM-Qpid-01-1K>-n PQM-Qpid-01-1K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1024    destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-1K>\n-                        <PQM-Qpid-02-1K>-n PQM-Qpid-02-1K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=1024    destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-1K>\n-                        <PQM-Qpid-01-5K>-n PQM-Qpid-01-5K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=5120    destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-5K>\n-                        <PQM-Qpid-02-5K>-n PQM-Qpid-02-5K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=5120    destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-5K>\n-                        <PQM-Qpid-01-10K>-n PQM-Qpid-01-10K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=10240   destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-10K>\n-                        <PQM-Qpid-02-10K>-n PQM-Qpid-02-10K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=10240   destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-10K>\n-                        <PQM-Qpid-01-50K>-n PQM-Qpid-01-50K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=51200   destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-50K>\n-                        <PQM-Qpid-02-50K>-n PQM-Qpid-02-50K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=51200   destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-50K>\n-                        <PQM-Qpid-01-100K>-n PQM-Qpid-01-100K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=102400  destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-100K>\n-                        <PQM-Qpid-02-100K>-n PQM-Qpid-02-100K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=102400  destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-100K>\n-                        <PQM-Qpid-01-500K>-n PQM-Qpid-01-500K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512000  destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-500K>\n-                        <PQM-Qpid-02-500K>-n PQM-Qpid-02-500K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=512000  destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-500K>\n-                        <PQM-Qpid-01-1M>-n PQM-Qpid-01-1M     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-1M>\n-                        <PQM-Qpid-02-1M>-n PQM-Qpid-02-1M     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationsCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-1M>\n+                        <PQR-Qpid-01>-n PQR-Qpid-01           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </PQR-Qpid-01>\n+                        <PQR-Qpid-02>-n PQR-Qpid-02           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </PQR-Qpid-02>\n+                        <PQR-Qpid-03>-n PQR-Qpid-03           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=100000 messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </PQR-Qpid-03>\n+                        <PQR-Qpid-04>-n PQR-Qpid-04           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=100000 messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </PQR-Qpid-04>\n+\n+                        <PQC-Qpid-01>-n PQC-Qpid-01           -d1M  -s[100]    -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=600   maxPending=1000000 </PQC-Qpid-01>\n+                        <PQC-Qpid-02>-n PQC-Qpid-02           -d1M  -s[100]    -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=100   maxPending=1000000 </PQC-Qpid-02>\n+                        <PQC-Qpid-03>-n PQC-Qpid-03           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=100    messageSize=256     destinationCount=10 rate=0     maxPending=1000000 </PQC-Qpid-03>\n+                        <PQC-Qpid-04>-n PQC-Qpid-04           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=1000000 </PQC-Qpid-04>\n+                        <PQC-Qpid-05>-n PQC-Qpid-05           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=100000  </PQC-Qpid-05>\n+                        <PQC-Qpid-06>-n PQC-Qpid-06           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=100000  </PQC-Qpid-06>\n+\n+                        <PQM-Qpid-01-512b>-n PQM-Qpid-01-512b -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512     destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-512b>\n+                        <PQM-Qpid-02-512b>-n PQM-Qpid-02-512b -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=512     destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-512b>\n+                        <PQM-Qpid-01-1K>-n PQM-Qpid-01-1K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1024    destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-1K>\n+                        <PQM-Qpid-02-1K>-n PQM-Qpid-02-1K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=1024    destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-1K>\n+                        <PQM-Qpid-01-5K>-n PQM-Qpid-01-5K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=5120    destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-5K>\n+                        <PQM-Qpid-02-5K>-n PQM-Qpid-02-5K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=5120    destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-5K>\n+                        <PQM-Qpid-01-10K>-n PQM-Qpid-01-10K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=10240   destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-10K>\n+                        <PQM-Qpid-02-10K>-n PQM-Qpid-02-10K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=10240   destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-10K>\n+                        <PQM-Qpid-01-50K>-n PQM-Qpid-01-50K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=51200   destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-50K>\n+                        <PQM-Qpid-02-50K>-n PQM-Qpid-02-50K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=51200   destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-50K>\n+                        <PQM-Qpid-01-100K>-n PQM-Qpid-01-100K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=102400  destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-100K>\n+                        <PQM-Qpid-02-100K>-n PQM-Qpid-02-100K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=102400  destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-100K>\n+                        <PQM-Qpid-01-500K>-n PQM-Qpid-01-500K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512000  destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-500K>\n+                        <PQM-Qpid-02-500K>-n PQM-Qpid-02-500K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=512000  destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-500K>\n+                        <PQM-Qpid-01-1M>-n PQM-Qpid-01-1M     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-01-1M>\n+                        <PQM-Qpid-02-1M>-n PQM-Qpid-02-1M     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=false transacted=false commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationCount=1  rate=0     maxPending=20000000</PQM-Qpid-02-1M>\n \n                         <!-- Persistent, Pub/Sub Tests -->\n-                        <PTR-Qpid-01>-n PTR-Qpid-01           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </PTR-Qpid-01>\n-                        <PTR-Qpid-02>-n PTR-Qpid-02           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </PTR-Qpid-02>\n-                        <PTR-Qpid-03>-n PTR-Qpid-03           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=10000  messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </PTR-Qpid-03>\n-                        <PTR-Qpid-04>-n PTR-Qpid-04           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=10000  messageSize=256     destinationsCount=1  rate=0     maxPending=1000000 </PTR-Qpid-04>\n-\n-                        <PTC-Qpid-01>-n PTC-Qpid-01           -d1M  -s[100]    -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=300   maxPending=1000000 </PTC-Qpid-01>\n-                        <PTC-Qpid-02>-n PTC-Qpid-02           -d1M  -s[100]    -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=1  rate=100   maxPending=1000000 </PTC-Qpid-02>\n-                        <PTC-Qpid-03>-n PTC-Qpid-03           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=1000000 </PTC-Qpid-03>\n-                        <PTC-Qpid-04>-n PTC-Qpid-04           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=1000000 </PTC-Qpid-04>\n-                        <PTC-Qpid-05>-n PTC-Qpid-05           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=100000  </PTC-Qpid-05>\n-                        <PTC-Qpid-06>-n PTC-Qpid-06           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationsCount=10 rate=0     maxPending=100000  </PTC-Qpid-06>\n-\n-                        <PTM-Qpid-01-512b>-n PTM-Qpid-01-512b -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512     destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-512b>\n-                        <PTM-Qpid-02-512b>-n PTM-Qpid-02-512b -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=512     destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-512b>\n-                        <PTM-Qpid-01-1K>-n PTM-Qpid-01-1K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1024    destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-1K>\n-                        <PTM-Qpid-02-1K>-n PTM-Qpid-02-1K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=1024    destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-1K>\n-                        <PTM-Qpid-01-5K>-n PTM-Qpid-01-5K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=5120    destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-5K>\n-                        <PTM-Qpid-02-5K>-n PTM-Qpid-02-5K     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=5120    destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-5K>\n-                        <PTM-Qpid-01-10K>-n PTM-Qpid-01-10K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=10240   destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-10K>\n-                        <PTM-Qpid-02-10K>-n PTM-Qpid-02-10K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=10240   destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-10K>\n-                        <PTM-Qpid-01-50K>-n PTM-Qpid-01-50K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=51200   destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-50K>\n-                        <PTM-Qpid-02-50K>-n PTM-Qpid-02-50K   -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=51200   destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-50K>\n-                        <PTM-Qpid-01-100K>-n PTM-Qpid-01-100K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=102400  destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-100K>\n-                        <PTM-Qpid-02-100K>-n PTM-Qpid-02-100K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=102400  destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-100K>\n-                        <PTM-Qpid-01-500K>-n PTM-Qpid-01-500K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512000  destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-500K>\n-                        <PTM-Qpid-02-500K>-n PTM-Qpid-02-500K -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=512000  destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-500K>\n-                        <PTM-Qpid-01-1M>-n PTM-Qpid-01-1M     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-1M>\n-                        <PTM-Qpid-02-1M>-n PTM-Qpid-02-1M     -d10M -s[1000]   -c[1]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=1048476 destinationsCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-1M>\n+                        <PTR-Qpid-01>-n PTR-Qpid-01           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </PTR-Qpid-01>\n+                        <PTR-Qpid-02>-n PTR-Qpid-02           -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </PTR-Qpid-02>\n+                        <PTR-Qpid-03>-n PTR-Qpid-03           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=10000  messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </PTR-Qpid-03>\n+                        <PTR-Qpid-04>-n PTR-Qpid-04           -d24H -s[100000] -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=10000  messageSize=256     destinationCount=1  rate=0     maxPending=1000000 </PTR-Qpid-04>\n+\n+                        <PTC-Qpid-01>-n PTC-Qpid-01           -d1M  -s[100]    -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=600   maxPending=1000000 </PTC-Qpid-01>\n+                        <PTC-Qpid-02>-n PTC-Qpid-02           -d1M  -s[100]    -c[1,30],samples=30 -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=1  rate=100   maxPending=1000000 </PTC-Qpid-02>\n+                        <PTC-Qpid-03>-n PTC-Qpid-03           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=1000000 </PTC-Qpid-03>\n+                        <PTC-Qpid-04>-n PTC-Qpid-04           -d10M -s[1000]   -c[10]              -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=1000000 </PTC-Qpid-04>\n+                        <PTC-Qpid-05>-n PTC-Qpid-05           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=100000  </PTC-Qpid-05>\n+                        <PTC-Qpid-06>-n PTC-Qpid-06           -d10M -s[1000]   -c[100]             -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=100 batchSize=1000   messageSize=256     destinationCount=10 rate=0     maxPending=100000  </PTC-Qpid-06>\n+\n+                        <PTM-Qpid-01-512b>-n PTM-Qpid-01-512b -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512     destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-512b>\n+                        <PTM-Qpid-02-512b>-n PTM-Qpid-02-512b -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=512     destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-512b>\n+                        <PTM-Qpid-01-1K>-n PTM-Qpid-01-1K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1024    destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-1K>\n+                        <PTM-Qpid-02-1K>-n PTM-Qpid-02-1K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=1024    destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-1K>\n+                        <PTM-Qpid-01-5K>-n PTM-Qpid-01-5K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=5120    destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-5K>\n+                        <PTM-Qpid-02-5K>-n PTM-Qpid-02-5K     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=5120    destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-5K>\n+                        <PTM-Qpid-01-10K>-n PTM-Qpid-01-10K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=10240   destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-10K>\n+                        <PTM-Qpid-02-10K>-n PTM-Qpid-02-10K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=10240   destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-10K>\n+                        <PTM-Qpid-01-50K>-n PTM-Qpid-01-50K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=51200   destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-50K>\n+                        <PTM-Qpid-02-50K>-n PTM-Qpid-02-50K   -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=51200   destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-50K>\n+                        <PTM-Qpid-01-100K>-n PTM-Qpid-01-100K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=102400  destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-100K>\n+                        <PTM-Qpid-02-100K>-n PTM-Qpid-02-100K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=102400  destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-100K>\n+                        <PTM-Qpid-01-500K>-n PTM-Qpid-01-500K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=512000  destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-500K>\n+                        <PTM-Qpid-02-500K>-n PTM-Qpid-02-500K -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=512000  destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-500K>\n+                        <PTM-Qpid-01-1M>-n PTM-Qpid-01-1M     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=true  commitBatchSize=10  batchSize=1000   messageSize=1048576 destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-01-1M>\n+                        <PTM-Qpid-02-1M>-n PTM-Qpid-02-1M     -d10M -s[1000]   -c[8]               -o $QPID_WORK/results -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf persistent=true  pubsub=true  transacted=false commitBatchSize=10  batchSize=1000   messageSize=1048476 destinationCount=1  rate=0     maxPending=20000000</PTM-Qpid-02-1M>\n \n                         <!-- Failover Tests. -->\n                         <FT-Qpid-01>-n FT-Qpid-01 -s[250000] -t testAsyncPingOk org.apache.qpid.ping.PingAsyncTestPerf messageSize=256 batchSize=10000 transacted=true broker=\"tcp://127.0.0.1:5001;tcp://127.0.0.1:5002\" failBeforeSend=true -o $QPID_WORK/results</FT-Qpid-01>", "filename": "perftests/pom.xml"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java", "sha": "64ccb719b63fdad239c6fed42de78a625cbb4d37", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.client.message;", "filename": "perftests/src/main/java/org/apache/qpid/client/message/TestMessageFactory.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java", "sha": "c5f71b477464c2b654fe7ea3391c189601afe027", "changes": 27, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,18 +20,6 @@\n  */\r\n package org.apache.qpid.ping;\r\n \r\n-import java.io.BufferedReader;\r\n-import java.io.IOException;\r\n-import java.io.InputStreamReader;\r\n-import java.util.List;\r\n-import java.util.Properties;\r\n-import java.util.concurrent.atomic.AtomicInteger;\r\n-\r\n-import javax.jms.Destination;\r\n-import javax.jms.ExceptionListener;\r\n-import javax.jms.JMSException;\r\n-import javax.jms.Message;\r\n-\r\n import org.apache.log4j.Logger;\r\n \r\n import org.apache.qpid.requestreply.PingPongProducer;\r\n@@ -40,6 +28,18 @@\n import uk.co.thebadgerset.junit.extensions.util.MathUtils;\r\n import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n \r\n+import javax.jms.Destination;\r\n+import javax.jms.ExceptionListener;\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStreamReader;\r\n+import java.util.List;\r\n+import java.util.Properties;\r\n+import java.util.concurrent.atomic.AtomicInteger;\r\n+\r\n /**\r\n  * PingDurableClient is a variation of the {@link PingPongProducer} ping tool. Instead of sending its pings and\r\n  * receiving replies to them at the same time, this tool sends pings until it is signalled by some 'event' to stop\r\n@@ -167,7 +167,8 @@ public static void main(String[] args)\n         try\r\n         {\r\n             // Create a ping producer overriding its defaults with all options passed on the command line.\r\n-            Properties options = CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][] {}));\r\n+            Properties options =\r\n+                CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][] {}), System.getProperties());\r\n             PingDurableClient pingProducer = new PingDurableClient(options);\r\n \r\n             // Create a shutdown hook to terminate the ping-pong producer.\r", "filename": "perftests/src/main/java/org/apache/qpid/ping/PingDurableClient.java"}, {"additions": 1, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java", "sha": "2879f0c322901ed1a9f780621c31123483f02516", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -57,7 +57,7 @@ public static void main(String[] args)\n         try\r\n         {\r\n             // Create a ping producer overriding its defaults with all options passed on the command line.\r\n-            Properties options = CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][] {}));\r\n+            Properties options = CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][] {}), System.getProperties());\r\n             PingSendOnlyClient pingProducer = new PingSendOnlyClient(options);\r\n \r\n             // Create a shutdown hook to terminate the ping-pong producer.\r", "filename": "perftests/src/main/java/org/apache/qpid/ping/PingSendOnlyClient.java"}, {"additions": 17, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java", "sha": "03f5f0549d34fbc72e89d08e7f23d210fa6eb06b", "changes": 35, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,20 +20,6 @@\n  */\r\n package org.apache.qpid.requestreply;\r\n \r\n-import java.io.IOException;\r\n-import java.net.InetAddress;\r\n-import java.text.DateFormat;\r\n-import java.text.SimpleDateFormat;\r\n-import java.util.*;\r\n-import java.util.concurrent.BrokenBarrierException;\r\n-import java.util.concurrent.CountDownLatch;\r\n-import java.util.concurrent.CyclicBarrier;\r\n-import java.util.concurrent.TimeUnit;\r\n-import java.util.concurrent.atomic.AtomicInteger;\r\n-import java.util.concurrent.atomic.AtomicLong;\r\n-\r\n-import javax.jms.*;\r\n-\r\n import org.apache.log4j.Logger;\r\n \r\n import org.apache.qpid.AMQException;\r\n@@ -51,6 +37,18 @@\n import uk.co.thebadgerset.junit.extensions.Throttle;\r\n import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n \r\n+import javax.jms.*;\r\n+\r\n+import java.io.IOException;\r\n+import java.net.InetAddress;\r\n+import java.text.DateFormat;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.*;\r\n+import java.util.concurrent.CountDownLatch;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.atomic.AtomicInteger;\r\n+import java.util.concurrent.atomic.AtomicLong;\r\n+\r\n /**\r\n  * PingPongProducer is a client that sends test messages, and waits for replies to these messages. The replies may\r\n  * either be generated by another client (see {@link PingPongBouncer}, or an extension of it may be used that listens\r\n@@ -89,7 +87,7 @@\n  * <tr><td> destinationCount <td> 1        <td> The number of receivers listening to the pings.\r\n  * <tr><td> timeout          <td> 30000    <td> In milliseconds. The timeout to stop waiting for replies.\r\n  * <tr><td> commitBatchSize  <td> 1        <td> The number of messages per transaction in transactional mode.\r\n- * <tr><td> uniqueDests      <td> true     <td> Whether each receiver only listens to one ping destination or all.\r\n+ * <tr><td> uniqueDests      <td> true     <td> Whether each receivers only listens to one ping destination or all.\r\n  * <tr><td> durableDests     <td> false    <td> Whether or not durable destinations are used.\r\n  * <tr><td> ackMode          <td> AUTO_ACK <td> The message acknowledgement mode. Possible values are:\r\n  *                                               0 - SESSION_TRANSACTED\r\n@@ -237,7 +235,7 @@\n     /** Holds the default message selector. */\r\n     public static final String SELECTOR_DEFAULT = \"\";\r\n \r\n-    /** Holds the name of the proeprty to get the destination count from. */\r\n+    /** Holds the name of the property to get the destination count from. */\r\n     public static final String DESTINATION_COUNT_PROPNAME = \"destinationCount\";\r\n \r\n     /** Defines the default number of destinations to ping. */\r\n@@ -373,7 +371,7 @@\n     protected int _maxPendingSize;\r\n \r\n     /**\r\n-     * Holds a monitor which is used to synchronize sender and receiver threads, where the sender has elected\r\n+     * Holds a monitor which is used to synchronize sender and receivers threads, where the sender has elected\r\n      * to wait until the number of unreceived message is reduced before continuing to send.\r\n      */\r\n     protected Object _sendPauseMonitor = new Object();\r\n@@ -570,7 +568,8 @@ public static void main(String[] args)\n     {\r\n         try\r\n         {\r\n-            Properties options = CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][] {}));\r\n+            Properties options =\r\n+                CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][] {}), System.getProperties());\r\n \r\n             // Create a ping producer overriding its defaults with all options passed on the command line.\r\n             PingPongProducer pingProducer = new PingPongProducer(options);\r", "filename": "perftests/src/main/java/org/apache/qpid/requestreply/PingPongProducer.java"}, {"additions": 40, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/pom.xml", "sha": "f6f719eb80a3f752f65e78794318b238aff700cc", "changes": 62, "status": "modified", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/pom.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -155,14 +155,26 @@ under the License.\n         <module>perftests</module>\n         <module>integrationtests</module>\n         <module>management/eclipse-plugin</module>\n-\t\t<module>client/example</module>\n-\t\t<module>client-java14</module>\n+        <module>client/example</module>\n+        <module>client-java14</module>\n \n     </modules>\n \n \n     <build>\n         <resources>\n+\n+            <resource>\n+                <targetPath>META-INF/</targetPath>\n+                <filtering>false</filtering>\n+                <directory>../resources</directory>\n+                <includes>\n+                    <include>DISCLAIMER</include>\n+                    <include>LICENSE</include>\n+                    <include>NOTICE</include>\n+                </includes>\n+            </resource>\n+ \n             <resource>\n                 <directory>src/main/java</directory>\n                 <excludes>\n@@ -172,26 +184,28 @@ under the License.\n             </resource>\n             <resource>\n                 <directory>src/main/resources</directory>\n-                <includes>\n-                    <include>**</include>\n-                </includes>\n             </resource>\n             <resource>\n                 <directory>src/main/resources-filtered</directory>\n-                <includes>\n-                    <include>**</include>\n-                </includes>\n                 <filtering>true</filtering>\n             </resource>\n             <resource>\n                 <directory>target/generated/src/main/resources</directory>\n-                <includes>\n-                    <include>**</include>\n-                </includes>\n             </resource>\n         </resources>\n \n         <testResources>\n+           <testResource>\n+                <targetPath>META-INF/</targetPath>\n+                <filtering>false</filtering>\n+                <directory>../resources</directory>\n+                <includes>\n+                    <include>DISCLAIMER</include>\n+                    <include>LICENSE</include>\n+                    <include>NOTICE</include>\n+                </includes>\n+            </testResource>\n+\n             <testResource>\n                 <directory>src/test/java</directory>\n                 <excludes>\n@@ -200,9 +214,6 @@ under the License.\n             </testResource>\n             <testResource>\n                 <directory>src/test/resources</directory>\n-                <includes>\n-                    <include>**</include>\n-                </includes>\n             </testResource>\n             <testResource>\n                 <directory>src/test/java</directory>\n@@ -391,7 +402,19 @@ under the License.\n                     <version>0.5</version>\n                 </plugin>\n \n-         <plugin>\n+        \n+\n+\n+            </plugins>\n+        </pluginManagement>\n+\n+\n+        <plugins>\n+\n+            <!-- Disabled as plugin crashes on the systest module. \n+             Also, the resulting NOTICE file doesn't include all license info due to missing data in dependant poms.\n+\n+            <plugin>\n                <artifactId>maven-remote-resources-plugin</artifactId>\n                <version>1.0-alpha-5</version>\n                <executions>\n@@ -411,11 +434,8 @@ under the License.\n                        </configuration>\n                    </execution>\n                </executions>\n-           </plugin>\n-\n-\n-            </plugins>\n-        </pluginManagement>\n+           </plugin-->\n+        </plugins>\n \n         <defaultGoal>install</defaultGoal>\n \n@@ -586,7 +606,6 @@ under the License.\n             -->\n \n             <!-- Run the javadoc report. -->\n-            <!--\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-javadoc-plugin</artifactId>\n@@ -600,7 +619,6 @@ under the License.\n                     </tags>\n                 </configuration>\n             </plugin>\n-            -->\n \n             <!-- Generate the clover coverage report. -->\n             <!--", "filename": "pom.xml"}, {"additions": 79, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/release-docs/RELEASE_NOTES.txt", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/release-docs/RELEASE_NOTES.txt", "sha": "811bc4f4c0c84f27d8fc2937d1c483d67ecbe912", "changes": 127, "status": "modified", "deletions": 48, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/release-docs/RELEASE_NOTES.txt?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,8 +1,9 @@\n-Apache Incubator Qpid Java M1 Release Notes\n+Apache Incubator Qpid Java M2 Release Notes\n -------------------------------------------\n \n-The Qpid M1 release is intended to serve as a useful baseline release\n-for the project, allowing interested users to use the current featureset.\n+The Qpid M2 release contains support the for AMQP 0-8 specification.\n+You can access the 0-8 specification using the following link.\n+http://www.amqp.org/tikiwiki/tiki-index.php?page=Download\n \n For full details of Qpid capabilities, as they currently stand, see our\n detailed project documentation at:\n@@ -17,58 +18,88 @@ Known Issues/OUtstanding Work\n -----------------------------\n \n You can view the outstanding task list for Qpid by visiting our JIRA:\n-\n http://issues.apache.org/jira/browse/QPID\n \n+These issues are moved to M3 release.\n \n-M1 Tasks Completed\n--------------------\n-\n-The set of JIRA tasks completed as part of the M1 effort is available at:\n-\n-http://cwiki.apache.org/confluence/display/qpid/Qpid+Java+M1+Release+Notes\n-\n-This list is copied below for convenience:\n-\n-Bugs\n-----\n-http://issues.apache.org/jira/browse/QPID-4 - Remove '/' and ':' from generated queue names\n-http://issues.apache.org/jira/browse/QPID-7 - Occasionally messages are ack'd more than once\n-http://issues.apache.org/jira/browse/QPID-10- Broker throughput falls off with transactions\n-http://issues.apache.org/jira/browse/QPID-56 - AMQQueueMBean - MessageCount on the management interface is not correct.\n-http://issues.apache.org/jira/browse/QPID-58 - Creating a QueueReceiver results in ClassCastException\n-http://issues.apache.org/jira/browse/QPID-66 - AMQSession implementation of TopicSession and QueueSession interfaces not JMS compliant\n-http://issues.apache.org/jira/browse/QPID-68 - Ant build system fails if the project path contains a space\n-http://issues.apache.org/jira/browse/QPID-69 - Race condition in Delivery Manager  \n-\n-Improvements\n-------------\n-http://issues.apache.org/jira/browse/QPID-36 - Add high and low watermark to flow control\n-http://issues.apache.org/jira/browse/QPID-44 - Add high and low watermark to flow control\n-http://issues.apache.org/jira/browse/QPID-57 - AMQQueueMBean - Message header attributes should be sent along with message content.\n-\n-    \n-New Features\n-------------\n-http://issues.apache.org/jira/browse/QPID-13 - Add option to include prefix and suffix in log file name for broker\n-http://issues.apache.org/jira/browse/QPID-23 - Extend JNDI support provided to include initial context factory\n-http://issues.apache.org/jira/browse/QPID-29 - Provide support for using Qpid JMX with Tivoli for application monitoring\n-http://issues.apache.org/jira/browse/QPID-30 - Allow configuration of working/log directories written to by broker\n-http://issues.apache.org/jira/browse/QPID-40 - Implement tx.select, tx.commit & tx.rollback from AMQP\n-\n-            \n-Tasks\n------\n-http://issues.apache.org/jira/browse/QPID-18 - Update Java client and broker to MINA 1.0 release\n-http://issues.apache.org/jira/browse/QPID-73 - Create Build Artifacts for release process using ant/maven\n-http://issues.apache.org/jira/browse/QPID-74 - Create source distribtuion using build system\n-http://issues.apache.org/jira/browse/QPID-75 - Create Standard Binary distribution using build system\n-\n-\n+Here is a filtered list for your convinience\n+---------------------------------------\n+New Feature\tQPID-274 \tadd connection configuratble timeout on waituntilStateHasChanged\n+New Feature\tQPID-156 \tImplement persistence to disk for Qpid\n+New Feature\tQPID-155 \tAdd ability to configure (on/off) queue creation on demand\n+New Feature\tQPID-43 \tMultiple-AMQP version support in the broker\n+New Feature\tQPID-28 \tAllow user to select policy for undeliverable message handling\n+New Feature\tQPID-27 \tIntroduce user configurable redlivery delay\n+New Feature\tQPID-22 \tProvide run scripts for clustered broker\n \n+Improvement\tQPID-430 \tMessage Age Alerting should not depend upon queue activity\n+Improvement\tQPID-19 \tAdd protocol logging capability to client and broker\n+Improvement\tQPID-11 \tMove protocol literals from code to AMQConstant\n \n+Bug\t\tQPID-539 \tHeadersExchange doesnot correctly implement isBound\n+Bug\t\tQPID-517 \tBroker doesn't return NO_CONSUMERS code for an immediate message, when the consumer is disconnected.\n+Bug\t\tQPID-469 \tRedelivered information is currently recorded per message it should be per message per queue.\n+Bug\t\tQPID-463 \tJava client doesn't close connection gracefully when faced with broker with unsuported protocol version\n+Bug\t\tQPID-462 \tExclusive queues and with subscription that 'filtersMessages' will build up messages it doesn't hasInterest() in.\n \n+Bug\t\tQPID-397 \tClient closeure can be processed before final message ack.\n+Bug\t\tQPID-396 \tBroker OutOfMemory Error handling\n+Bug\t\tQPID-377 \tNumberFormatException thrown by broker when running one performance test\n+Bug\t\tQPID-293 \tsetting MessageListener after connection has started can cause messages to be \"lost\" on a internal delivery queue.\n \n+Bug\t\tQPID-185 \tAmend Java Broker handling of ifUnused & ifEmpty flags\n+Bug\t\tQPID-168 \tqpid-server.bat needs updated to support same arguments/features as qpid-server (via qpid-run) bash script\n \n \n+M2 Tasks Completed\n+-------------------\n \n+The set of JIRA tasks completed as part of the M2 effort is available at:\n+https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12310520&styleName=Html&version=12312116\n+\n+\n+Here is a filtered (by Java components) version of the JIRA items\n+\n+Task\t\tQPID-190 \trefactoring the java broker mbean classes\n+Task\t\tQPID-125 \tMoving eclipse plugin for broker management to Maven\n+Task\t\tQPID-93 \tDelete the old management modules (trunk\\qpid\\java\\management)\n+\n+New Feature\tQPID-428 \tAdd login functionality for a qpid server from the management console\n+New Feature\tQPID-418 \tAdd ability to save user preferences to Java Management Console\n+New Feature\tQPID-170 \tEnhance Management features to support moving a message from one queue to another\n+\n+Improvement\tQPID-482 \t[Java] Small performance tweaks\n+Improvement\tQPID-466 \tCreate STRICT_AMQP System property to disable JMS extensions in Java client\n+Improvement\tQPID-453 \tAMQShortString should implement Comparable\n+Improvement\tQPID-422 \tConsolidate notification view to display all user configured notifications on one view\n+Improvement\tQPID-421 \tProvide enumerated description for static constants including delivery mode\n+Improvement\tQPID-420 \tAdd client id to information displayed about connections on management console\n+Improvement\tQPID-419 \tIntroduce read-only and modify authorisation for all objects in a virtual host\n+Improvement\tQPID-129 \timproving Broker MBeans\n+\n+Bug\t\tQPID-540 \tTransient Broker throws NullPointerException and locks up.\n+Bug\t\tQPID-538 \t[Memory Leak] Connecting lots of consumers causes the broker memory to leak\n+Bug\t\tQPID-537 \tMake AMQMessage.incrementReference public\n+Bug\t\tQPID-531 \t[Memory Leak] Broker retains messages that are consumed with NO_ACK\n+Bug\t\tQPID-527 \tencoding issue\n+Bug\t\tQPID-508 \t[Memory Leak] Broker does not return mandatory messages sent outside of a transaction.\n+Bug\t\tQPID-476 \tAMQProtocolSession channelId2SessionMap does not have sessions removed\n+Bug\t\tQPID-472 \tCreation of TemporaryQueues will not guarantee unqiue queue names if created rapidly.\n+Bug\t\tQPID-471 \tUserManagement panel lists all users but only after a View Users has been executed and is not updated on Create/Delete User\n+\n+Bug\t\tQPID-467 \tComplete Interop Testing\n+Bug\t\tQPID-465 \tIncorrect Exception thrown from send() method.\n+Bug\t\tQPID-459 \tBroker doesn't correctly handle noLocal consumers when messages are pre-exisiting on queues.\n+Bug\t\tQPID-458 \tQueue Browsing Broken\n+Bug\t\tQPID-454 \tMessage 'taken' notion is per message. But should be per message per queue\n+Bug\t\tQPID-443 \tAbruptly disconnecting client on transaction publish causes error\n+Bug\t\tQPID-440 \tCan create dangling transactions on unroutable messages.\n+Bug\t\tQPID-436 \ttopic exchange doesn't obey the mandatory flag\n+Bug\t\tQPID-414 \tAuthentication requires plain text passwords in password file\n+Bug\t\tQPID-408 \tQueue Depth data incorrect\n+Bug\t\tQPID-290 \tJava broker does not honor maximum number of channels threshold\n+Bug\t\tQPID-276 \tPotential race condition in AMQChannel\n+Bug\t\tQPID-200 \tset/get Destination not implemented in JMSMessage impl\n+Bug\t\tQPID-166 \tCheck for pre conditions to satisfy JMS spec requirments\n+Bug\t\tQPID-162 \tover 600 warnings when building under Eclipse\n+Bug\t\tQPID-159 \tThe following Interface implementations do not throw Exceptions as required by the spec", "filename": "release-docs/RELEASE_NOTES.txt"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/LICENSE", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/LICENSE", "previous_filename": "distribution/src/main/release/LICENSE.txt", "sha": "6b0b1270ff0ca8f03867efcd09ba6ddb6392b1e1", "changes": 0, "status": "renamed", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/resources/LICENSE?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "filename": "resources/LICENSE"}, {"additions": 10, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/META-INF/DISCLAIMER", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/META-INF/DISCLAIMER", "sha": "1ca63e46e2f54dfe03dca7b10cd0400b8d85cc53", "changes": 10, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/resources/META-INF/DISCLAIMER?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,10 @@\n+Apache Qpid is an effort undergoing incubation at the Apache Software\n+Foundation (ASF), sponsored by the Apache Incubator PMC.\n+\n+Incubation is required of all newly accepted projects until a further review\n+indicates that the infrastructure, communications, and decision making process\n+have stabilized in a manner consistent with other successful ASF projects.\n+\n+While incubation status is not necessarily a reflection of the completeness\n+or stability of the code, it does indicate that the project has yet to be\n+fully endorsed by the ASF.", "filename": "resources/META-INF/DISCLAIMER"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/resources/META-INF/DISCLAIMER.txt", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/resources/META-INF/DISCLAIMER.txt", "sha": "d33c54a80721b2c60c9abd289ca143364d3cedd7", "changes": 7, "status": "removed", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/resources/META-INF/DISCLAIMER.txt?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,7 +0,0 @@\n-Qpid is an effort undergoing incubation at the Apache Software Foundation\n-(ASF). Incubation is required of all newly accepted projects until a further \n-review indicates that the infrastructure, communications, and decision making\n-process have stabilized in a manner consistent with other successful ASF \n-projects. While incubation status is not necessarily a reflection of the \n-completeness or stability of the code, it does indicate that the project \n-has yet to be fully endorsed by the ASF.\n\\ No newline at end of file", "filename": "resources/META-INF/DISCLAIMER.txt"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/META-INF/LICENSE", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/META-INF/LICENSE", "previous_filename": "resources/LICENSE.txt", "sha": "6b0b1270ff0ca8f03867efcd09ba6ddb6392b1e1", "changes": 0, "status": "renamed", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/resources/META-INF/LICENSE?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "filename": "resources/META-INF/LICENSE"}, {"additions": 105, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/META-INF/NOTICE", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/META-INF/NOTICE", "sha": "f62ec14896ff06a0367fa366489320cec39d2f3b", "changes": 105, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/resources/META-INF/NOTICE?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,105 @@\n+// ------------------------------------------------------------------\n+// NOTICE file corresponding to the section 4d of The Apache License,\n+// Version 2.0, in this case for Qpid Common Utilities\n+// ------------------------------------------------------------------\n+\n+Apache Qpid\n+Copyright 2006-2007 Apache Software Foundation\n+\n+This product includes software developed at\n+Apache Software Foundation (http://www.apache.org/)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Unnamed - relaxngDatatype:relaxngDatatype:jar:20020414 (http://sourceforge.net/projects/relaxng)\n+License: BSD License (http://www.opensource.org/licenses/bsd-license.php)\n+\n+This product includes/uses software, Apache MINA Core API (http://directory.apache.org/projects/mina/)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Unnamed - isorelax:isorelax:jar:20020414\n+License: MIT license (http://www.opensource.org/licenses/mit-license.html)\n+\n+This product includes/uses software, SLF4J API Module (http://www.slf4j.org),\n+developed by QOS.ch  (http://www.qos.ch)\n+License: MIT License (http://www.slf4j.org/license.html)\n+\n+This product includes/uses software, Commons Collections - commons-collections:commons-collections:jar:3.1,\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons Digester - commons-digester:commons-digester:jar:1.6\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons CLI - commons-cli:commons-cli:jar:1.0\n+Ideveloped by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Unnamed - msv:msv:jar:20020414\n+developed by (https://msv.dev.java.net/)\n+License: \n+\n+This product includes/uses software, Codec (http://jakarta.apache.org/commons/codec/),\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: The Apache Software License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons Logging - commons-logging:commons-logging:jar:1.0\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Backport of JSR 166 (http://www.mathcs.emory.edu/dcl/util/backport-util-concurrent/),\n+developed by Dawid Kurzyniec (http://www.mathcs.emory.edu/~dawidk/)\n+License: Public Domain  (http://creativecommons.org/licenses/publicdomain)\n+\n+This product includes/uses software, Commons Lang - commons-lang:commons-lang:jar:2.1\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Apache MINA SSL Filter (http://directory.apache.org/subprojects/mina/mina-filter-ssl)\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Unnamed - xerces:xercesImpl:jar:2.2.1\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software,  - javax.servlet:servlet-api:jar:2.3\n+\n+This product includes/uses software, Xalan - xalan:xalan:jar:2.7.0\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons Configuration (http://jakarta.apache.org/commons/),\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Apache MINA Java5 Extensions (http://directory.apache.org/subprojects/mina/mina-java5)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Jaxen - jaxen:jaxen:jar:1.0-FCS\n+License: Apache License (http://jaxen.org/faq.html)\n+\n+This product includes/uses software, BeanUtils (http://jakarta.apache.org/commons/beanutils/)\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, XML Commons External Components XML APIs (http://xml.apache.org/commons/#external),\n+developed by Apache Software Foundation  (http://www.apache.org/)\n+License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)\n+\n+This product includes/uses software, Commons Beanutils Core - commons-beanutils:commons-beanutils-core:jar:1.7.0\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons Logging API - commons-logging:commons-logging-api:jar:1.0.4\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Dom4j - dom4j:dom4j:jar:1.4\n+developed by MetaStuff, Ltd. (http://www.dom4j.org/)\n+License: BSD License (http://www.dom4j.org/license.html)\n+\n+This product includes/uses software, Saxon - saxpath:saxpath:jar:1.0-FCS\n+developed by Michael Kay (http://saxon.sourceforge.net/)\n+License: Mozilla Public License v1.0, (http://www.opensource.org/licenses/mozilla1.0.php)\n+", "filename": "resources/META-INF/NOTICE"}, {"additions": 105, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/NOTICE", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/NOTICE", "sha": "f62ec14896ff06a0367fa366489320cec39d2f3b", "changes": 105, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/resources/NOTICE?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,105 @@\n+// ------------------------------------------------------------------\n+// NOTICE file corresponding to the section 4d of The Apache License,\n+// Version 2.0, in this case for Qpid Common Utilities\n+// ------------------------------------------------------------------\n+\n+Apache Qpid\n+Copyright 2006-2007 Apache Software Foundation\n+\n+This product includes software developed at\n+Apache Software Foundation (http://www.apache.org/)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Unnamed - relaxngDatatype:relaxngDatatype:jar:20020414 (http://sourceforge.net/projects/relaxng)\n+License: BSD License (http://www.opensource.org/licenses/bsd-license.php)\n+\n+This product includes/uses software, Apache MINA Core API (http://directory.apache.org/projects/mina/)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Unnamed - isorelax:isorelax:jar:20020414\n+License: MIT license (http://www.opensource.org/licenses/mit-license.html)\n+\n+This product includes/uses software, SLF4J API Module (http://www.slf4j.org),\n+developed by QOS.ch  (http://www.qos.ch)\n+License: MIT License (http://www.slf4j.org/license.html)\n+\n+This product includes/uses software, Commons Collections - commons-collections:commons-collections:jar:3.1,\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons Digester - commons-digester:commons-digester:jar:1.6\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons CLI - commons-cli:commons-cli:jar:1.0\n+Ideveloped by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Unnamed - msv:msv:jar:20020414\n+developed by (https://msv.dev.java.net/)\n+License: \n+\n+This product includes/uses software, Codec (http://jakarta.apache.org/commons/codec/),\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: The Apache Software License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons Logging - commons-logging:commons-logging:jar:1.0\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Backport of JSR 166 (http://www.mathcs.emory.edu/dcl/util/backport-util-concurrent/),\n+developed by Dawid Kurzyniec (http://www.mathcs.emory.edu/~dawidk/)\n+License: Public Domain  (http://creativecommons.org/licenses/publicdomain)\n+\n+This product includes/uses software, Commons Lang - commons-lang:commons-lang:jar:2.1\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Apache MINA SSL Filter (http://directory.apache.org/subprojects/mina/mina-filter-ssl)\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Unnamed - xerces:xercesImpl:jar:2.2.1\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software,  - javax.servlet:servlet-api:jar:2.3\n+\n+This product includes/uses software, Xalan - xalan:xalan:jar:2.7.0\n+developed by Apache Software Foundation  (http://www.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons Configuration (http://jakarta.apache.org/commons/),\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Apache MINA Java5 Extensions (http://directory.apache.org/subprojects/mina/mina-java5)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Jaxen - jaxen:jaxen:jar:1.0-FCS\n+License: Apache License (http://jaxen.org/faq.html)\n+\n+This product includes/uses software, BeanUtils (http://jakarta.apache.org/commons/beanutils/)\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, XML Commons External Components XML APIs (http://xml.apache.org/commons/#external),\n+developed by Apache Software Foundation  (http://www.apache.org/)\n+License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)\n+\n+This product includes/uses software, Commons Beanutils Core - commons-beanutils:commons-beanutils-core:jar:1.7.0\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Commons Logging API - commons-logging:commons-logging-api:jar:1.0.4\n+developed by The Apache Software Foundation  (http://jakarta.apache.org)\n+License: Apache 2.0 License  (http://www.apache.org/licenses/LICENSE-2.0)\n+\n+This product includes/uses software, Dom4j - dom4j:dom4j:jar:1.4\n+developed by MetaStuff, Ltd. (http://www.dom4j.org/)\n+License: BSD License (http://www.dom4j.org/license.html)\n+\n+This product includes/uses software, Saxon - saxpath:saxpath:jar:1.0-FCS\n+developed by Michael Kay (http://saxon.sourceforge.net/)\n+License: Mozilla Public License v1.0, (http://www.opensource.org/licenses/mozilla1.0.php)\n+", "filename": "resources/NOTICE"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/resources/NOTICE.txt", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/resources/NOTICE.txt", "sha": "82d3dbc63280726f178c56ddad208bbe630d1078", "changes": 36, "status": "removed", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/resources/NOTICE.txt?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,36 +0,0 @@\n-=========================================================================\n-==  NOTICE file corresponding to the section 4 d of                    ==\n-==  the Apache License, Version 2.0,                                   ==\n-==  in this case for the Apache Qpid distribution.                     ==\n-=========================================================================\n-\n-This product includes software developed by the Apache Software Foundation\n-(http://www.apache.org/).\n-\n-Please read the LICENSE.txt file present in the root directory of this\n-distribution.\n-\n-\n-Aside from contributions to the Apache Qpid project, this software also \n-includes (binary only):\n-\n-\t- The SAXON XSLT Processor from Michael Kay distributed under the \n-\t  Mozilla Public License v1.0, which is available for download at \n-          http://saxon.sourceforge.net/\n-\n-\t- The JUnit regression testing framework written by Erich Gamma \n-          and Kent Beck and distributed under the Common Public License v1.0.\n-          JUnit is available for download at \n-          http://sourceforge.net/projects/junit/\n-\n-\t- The Simple Logging Facade For Java (slf4j), Copyright (c) \n-          2004-2005 SLF4J.ORG, Copyright (c) 2004-2005 QOS.ch. slf4j is \n-          licensed under identical terms to the MIT/X11 license and \n-          available for download at http://www.slf4j.org/\n-\n-\t- Software from the Eclipse project. The binaries from this project are\n-          distributed under the Eclipse Public License and can be donwloaded\n-          from http://www.eclipse.org/\n-\n-             \n-", "filename": "resources/NOTICE.txt"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/README", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/resources/README", "previous_filename": "resources/README.txt", "sha": "1d52d487fb19d54efa218879faedba58de4e8f39", "changes": 0, "status": "renamed", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/resources/README?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "filename": "resources/README"}, {"additions": 3, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/pom.xml", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/pom.xml", "sha": "c2fedec25a3fedbce6d265b3f7e112a86eeb5cb1", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/pom.xml?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -79,6 +79,9 @@\n                 <configuration>\n                     <testSourceDirectory>${basedir}/src/main</testSourceDirectory>\n                     <testClassesDirectory>target/classes</testClassesDirectory>\n+                    <includes>\n+                        <include>**/*Test.class</include>\n+                    </includes>\n                 </configuration>\n             </plugin>\n ", "filename": "systests/pom.xml"}, {"additions": 26, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java", "sha": "370c2b43a7d417350d49b013b23ffe933eb023f8", "changes": 48, "status": "modified", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,30 +1,34 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server;\n \n import junit.framework.TestCase;\n+\n+import org.apache.qpid.framing.AMQShortString;\n import org.apache.qpid.server.exchange.ExchangeRegistry;\n import org.apache.qpid.server.management.ManagedBroker;\n import org.apache.qpid.server.queue.QueueRegistry;\n import org.apache.qpid.server.registry.ApplicationRegistry;\n import org.apache.qpid.server.registry.IApplicationRegistry;\n import org.apache.qpid.server.virtualhost.VirtualHost;\n-import org.apache.qpid.framing.AMQShortString;\n \n public class AMQBrokerManagerMBeanTest extends TestCase\n {\n@@ -33,20 +37,20 @@\n \n     public void testExchangeOperations() throws Exception\n     {\n-        String exchange1 = \"testExchange1_\" +  System.currentTimeMillis();\n-        String exchange2 = \"testExchange2_\" +  System.currentTimeMillis();\n-        String exchange3 = \"testExchange3_\" +  System.currentTimeMillis();\n+        String exchange1 = \"testExchange1_\" + System.currentTimeMillis();\n+        String exchange2 = \"testExchange2_\" + System.currentTimeMillis();\n+        String exchange3 = \"testExchange3_\" + System.currentTimeMillis();\n \n         assertTrue(_exchangeRegistry.getExchange(new AMQShortString(exchange1)) == null);\n         assertTrue(_exchangeRegistry.getExchange(new AMQShortString(exchange2)) == null);\n         assertTrue(_exchangeRegistry.getExchange(new AMQShortString(exchange3)) == null);\n \n         VirtualHost vHost = ApplicationRegistry.getInstance().getVirtualHostRegistry().getVirtualHost(\"test\");\n \n-        ManagedBroker mbean = new AMQBrokerManagerMBean((VirtualHost.VirtualHostMBean)vHost.getManagedObject());\n-        mbean.createNewExchange(exchange1,\"direct\",false);\n-        mbean.createNewExchange(exchange2,\"topic\",false);\n-        mbean.createNewExchange(exchange3,\"headers\",false);\n+        ManagedBroker mbean = new AMQBrokerManagerMBean((VirtualHost.VirtualHostMBean) vHost.getManagedObject());\n+        mbean.createNewExchange(exchange1, \"direct\", false);\n+        mbean.createNewExchange(exchange2, \"topic\", false);\n+        mbean.createNewExchange(exchange3, \"headers\", false);\n \n         assertTrue(_exchangeRegistry.getExchange(new AMQShortString(exchange1)) != null);\n         assertTrue(_exchangeRegistry.getExchange(new AMQShortString(exchange2)) != null);\n@@ -66,10 +70,10 @@ public void testQueueOperations() throws Exception\n         String queueName = \"testQueue_\" + System.currentTimeMillis();\n         VirtualHost vHost = ApplicationRegistry.getInstance().getVirtualHostRegistry().getVirtualHost(\"test\");\n \n-        ManagedBroker mbean = new AMQBrokerManagerMBean((VirtualHost.VirtualHostMBean)vHost.getManagedObject());\n+        ManagedBroker mbean = new AMQBrokerManagerMBean((VirtualHost.VirtualHostMBean) vHost.getManagedObject());\n \n         assertTrue(_queueRegistry.getQueue(new AMQShortString(queueName)) == null);\n-                \n+\n         mbean.createNewQueue(queueName, \"test\", false);\n         assertTrue(_queueRegistry.getQueue(new AMQShortString(queueName)) != null);\n \n@@ -82,7 +86,7 @@ protected void setUp() throws Exception\n     {\n         super.setUp();\n         IApplicationRegistry appRegistry = ApplicationRegistry.getInstance();\n-        _queueRegistry    = appRegistry.getVirtualHostRegistry().getVirtualHost(\"test\").getQueueRegistry();\n+        _queueRegistry = appRegistry.getVirtualHostRegistry().getVirtualHost(\"test\").getQueueRegistry();\n         _exchangeRegistry = appRegistry.getVirtualHostRegistry().getVirtualHost(\"test\").getExchangeRegistry();\n     }\n }", "filename": "systests/src/main/java/org/apache/qpid/server/AMQBrokerManagerMBeanTest.java"}, {"additions": 92, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/exchange/ImmediateMessageTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/exchange/ImmediateMessageTest.java", "sha": "4a0a27bb061b3c51b5073b1cbef4f798d0265762", "changes": 827, "status": "modified", "deletions": 735, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/exchange/ImmediateMessageTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,34 +20,15 @@\n  */\r\n package org.apache.qpid.server.exchange;\r\n \r\n-import junit.framework.TestCase;\r\n-\r\n-import org.apache.log4j.NDC;\r\n-\r\n-import org.apache.qpid.client.AMQNoConsumersException;\r\n-import org.apache.qpid.client.AMQNoRouteException;\r\n-import org.apache.qpid.client.AMQSession;\r\n-import org.apache.qpid.client.transport.TransportConnection;\r\n-import static org.apache.qpid.server.exchange.MessagingTestConfigProperties.*;\r\n-import org.apache.qpid.server.registry.ApplicationRegistry;\r\n-\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n+import org.apache.qpid.test.framework.sequencers.TestCaseSequencer;\r\n+import org.apache.qpid.test.framework.Circuit;\r\n+import org.apache.qpid.test.framework.FrameworkBaseCase;\r\n+import org.apache.qpid.test.framework.MessagingTestConfigProperties;\r\n+import static org.apache.qpid.test.framework.MessagingTestConfigProperties.*;\r\n \r\n import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n import uk.co.thebadgerset.junit.extensions.util.TestContextProperties;\r\n \r\n-import javax.jms.*;\r\n-import javax.naming.Context;\r\n-import javax.naming.InitialContext;\r\n-import javax.naming.NamingException;\r\n-\r\n-import java.io.PrintWriter;\r\n-import java.io.StringWriter;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import java.util.concurrent.atomic.AtomicLong;\r\n-\r\n /**\r\n  * ImmediateMessageTest tests for the desired behaviour of immediate messages. Immediate messages are a non-JMS\r\n  * feature. A message may be marked with an immediate delivery flag, which means that a consumer must be connected\r\n@@ -58,60 +39,68 @@\n  * <tr><th> Responsibilities <th> Collaborations\r\n  * <tr><td> Check that an immediate message is sent succesfully not using transactions when a consumer is connected.\r\n  * <tr><td> Check that an immediate message is committed succesfully in a transaction when a consumer is connected.\r\n- * <tr><td> Check that an immediate message results in no consumers code, not using transactions, when no consumer is\r\n+ * <tr><td> Check that an immediate message results in no consumers code, not using transactions, when a consumer is\r\n+ *          disconnected.\r\n+ * <tr><td> Check that an immediate message results in no consumers code, in a transaction, when a consumer is\r\n+ *          disconnected.\r\n+ * <tr><td> Check that an immediate message results in no route code, not using transactions, when no outgoing route is\r\n  *          connected.\r\n- * <tr><td> Check that an immediate message results in no consumers code, upon transaction commit, when a consumer is\r\n+ * <tr><td> Check that an immediate message results in no route code, upon transaction commit, when no outgoing route is\r\n  *          connected.\r\n+ * <tr><td> Check that an immediate message is sent succesfully not using transactions when a consumer is connected.\r\n+ * <tr><td> Check that an immediate message is committed succesfully in a transaction when a consumer is connected.\r\n  * <tr><td> Check that an immediate message results in no consumers code, not using transactions, when a consumer is\r\n  *          disconnected.\r\n- * <tr><dt> Check that an immediate message results in no consumers code, in a transaction, when a consumer is\r\n+ * <tr><td> Check that an immediate message results in no consumers code, in a transaction, when a consumer is\r\n  *          disconnected.\r\n+ * <tr><td> Check that an immediate message results in no route code, not using transactions, when no outgoing route is\r\n+ *          connected.\r\n+ * <tr><td> Check that an immediate message results in no route code, upon transaction commit, when no outgoing route is\r\n+ *          connected.\r\n  * </table>\r\n  *\r\n- * @todo Write a test decorator, the sole function of which is to populate test context properties, from sys properties,\r\n- *       from trailing prop=value pairs on the command line, from test properties files or other sources. This should\r\n- *       run through stanard JUnit without the JUnit toolkit extensions, and through Maven surefire, and also through\r\n- *       the JUnit toolkit extended test runners.\r\n- *\r\n- * @todo Veto test topologies using bounce back. Or else the bounce back client will act as an immediate consumer.\r\n+ * @todo All of these test cases will be generated by a test generator that thoroughly tests all combinations of test\r\n+ *       circuits.\r\n  */\r\n-public class ImmediateMessageTest extends TestCase\r\n+public class ImmediateMessageTest extends FrameworkBaseCase\r\n {\r\n-    /** Used for debugging. */\r\n-    private static final Logger log = LoggerFactory.getLogger(ImmediateMessageTest.class);\r\n-\r\n     /** Used to read the tests configurable properties through. */\r\n     ParsedProperties testProps;\r\n \r\n-    /** Used to create unique destination names for each test.\r\n-     * @todo Move into the test framework.\r\n+    /**\r\n+     * Creates a new test case with the specified name.\r\n+     *\r\n+     * @param name The test case name.\r\n      */\r\n-    private static AtomicLong uniqueDestsId = new AtomicLong();\r\n+    public ImmediateMessageTest(String name)\r\n+    {\r\n+        super(name);\r\n+    }\r\n \r\n     /** Check that an immediate message is sent succesfully not using transactions when a consumer is connected. */\r\n-    public void test_QPID_517_ImmediateOkNoTxP2P() throws Exception\r\n+    public void test_QPID_517_ImmediateOkNoTxP2P()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        // Run the default test sequence over the test circuit checking for no errors.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an immediate message is committed succesfully in a transaction when a consumer is connected. */\r\n-    public void test_QPID_517_ImmediateOkTxP2P() throws Exception\r\n+    public void test_QPID_517_ImmediateOkTxP2P()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n         // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an immediate message results in no consumers code, not using transactions, when a consumer is disconnected. */\r\n@@ -121,13 +110,14 @@ public void test_QPID_517_ImmediateFailsConsumerDisconnectedNoTxP2P() throws Exc\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n \r\n         // Disconnect the consumer.\r\n-        testClients.getReceiver().getConsumer().close();\r\n+        testCircuit.getReceiver().getConsumer().close();\r\n \r\n         // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoConsumersException.class);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noConsumersAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an immediate message results in no consumers code, in a transaction, when a consumer is disconnected. */\r\n@@ -137,73 +127,74 @@ public void test_QPID_517_ImmediateFailsConsumerDisconnectedTxP2P() throws Excep\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n \r\n         // Disconnect the consumer.\r\n-        testClients.getReceiver().getConsumer().close();\r\n+        testCircuit.getReceiver().getConsumer().close();\r\n \r\n         // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoConsumersException.class);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noConsumersAssertion()), testProps);\r\n     }\r\n \r\n-    /** Check that an immediate message results in no consumers code, not using transactions, when no consumer is connected. */\r\n-    public void test_QPID_517_ImmediateFailsNoRouteNoTxP2P() throws Exception\r\n+    /** Check that an immediate message results in no route code, not using transactions, when no outgoing route is connected. */\r\n+    public void test_QPID_517_ImmediateFailsNoRouteNoTxP2P()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receiver to\r\n+        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receivers to\r\n         // collect its messages).\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, false);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoRouteException.class);\r\n+        // Send one message and get a linked no route exception.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noRouteAssertion()), testProps);\r\n     }\r\n \r\n-    /** Check that an immediate message results in no consumers code, upon transaction commit, when a consumer is connected. */\r\n-    public void test_QPID_517_ImmediateFailsNoRouteTxP2P() throws Exception\r\n+    /** Check that an immediate message results in no route code, upon transaction commit, when no outgoing route is connected. */\r\n+    public void test_QPID_517_ImmediateFailsNoRouteTxP2P()\r\n     {\r\n         // Ensure transactional sessions are on.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receiver to\r\n+        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receivers to\r\n         // collect its messages).\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, false);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoRouteException.class);\r\n+        // Send one message and get a linked no route exception.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noRouteAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an immediate message is sent succesfully not using transactions when a consumer is connected. */\r\n-    public void test_QPID_517_ImmediateOkNoTxPubSub() throws Exception\r\n+    public void test_QPID_517_ImmediateOkNoTxPubSub()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, true);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n         // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an immediate message is committed succesfully in a transaction when a consumer is connected. */\r\n-    public void test_QPID_517_ImmediateOkTxPubSub() throws Exception\r\n+    public void test_QPID_517_ImmediateOkTxPubSub()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, true);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n         // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an immediate message results in no consumers code, not using transactions, when a consumer is disconnected. */\r\n@@ -216,13 +207,14 @@ public void test_QPID_517_ImmediateFailsConsumerDisconnectedNoTxPubSub() throws\n         // Use durable subscriptions, so that the route remains open with no subscribers.\r\n         testProps.setProperty(DURABLE_SUBSCRIPTION_PROPNAME, true);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n \r\n         // Disconnect the consumer.\r\n-        testClients.getReceiver().getConsumer().close();\r\n+        testCircuit.getReceiver().getConsumer().close();\r\n \r\n         // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoConsumersException.class);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noConsumersAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an immediate message results in no consumers code, in a transaction, when a consumer is disconnected. */\r\n@@ -235,696 +227,61 @@ public void test_QPID_517_ImmediateFailsConsumerDisconnectedTxPubSub() throws Ex\n         // Use durable subscriptions, so that the route remains open with no subscribers.\r\n         testProps.setProperty(DURABLE_SUBSCRIPTION_PROPNAME, true);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n \r\n         // Disconnect the consumer.\r\n-        testClients.getReceiver().getConsumer().close();\r\n+        testCircuit.getReceiver().getConsumer().close();\r\n \r\n         // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoConsumersException.class);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noConsumersAssertion()), testProps);\r\n     }\r\n \r\n-    /** Check that an immediate message results in no consumers code, not using transactions, when no consumer is connected. */\r\n-    public void test_QPID_517_ImmediateFailsNoRouteNoTxPubSub() throws Exception\r\n+    /** Check that an immediate message results in no route code, not using transactions, when no outgoing route is connected. */\r\n+    public void test_QPID_517_ImmediateFailsNoRouteNoTxPubSub()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, true);\r\n \r\n-        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receiver to\r\n+        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receivers to\r\n         // collect its messages).\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, false);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoRouteException.class);\r\n+        // Send one message and get a linked no route exception.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noRouteAssertion()), testProps);\r\n     }\r\n \r\n-    /** Check that an immediate message results in no consumers code, upon transaction commit, when a consumer is connected. */\r\n-    public void test_QPID_517_ImmediateFailsNoRouteTxPubSub() throws Exception\r\n+    /** Check that an immediate message results in no route code, upon transaction commit, when no outgoing route is connected. */\r\n+    public void test_QPID_517_ImmediateFailsNoRouteTxPubSub()\r\n     {\r\n         // Ensure transactional sessions are on.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, true);\r\n \r\n-        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receiver to\r\n+        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receivers to\r\n         // collect its messages).\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, false);\r\n \r\n-        PublisherReceiver testClients = PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoRouteException.class);\r\n+        // Send one message and get a linked no route exception.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noRouteAssertion()), testProps);\r\n     }\r\n \r\n     protected void setUp() throws Exception\r\n     {\r\n-        NDC.push(getName());\r\n+        super.setUp();\r\n \r\n         testProps = TestContextProperties.getInstance(MessagingTestConfigProperties.defaults);\r\n \r\n         /** All these tests should have the immediate flag on. */\r\n         testProps.setProperty(IMMEDIATE_PROPNAME, true);\r\n+        testProps.setProperty(MANDATORY_PROPNAME, false);\r\n \r\n         /** Bind the receivers consumer by default. */\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, true);\r\n-\r\n-        // Ensure that the in-vm broker is created.\r\n-        TransportConnection.createVMBroker(1);\r\n-    }\r\n-\r\n-    protected void tearDown() throws Exception\r\n-    {\r\n-        try\r\n-        {\r\n-            // Ensure that the in-vm broker is cleaned up so that the next test starts afresh.\r\n-            TransportConnection.killVMBroker(1);\r\n-            ApplicationRegistry.remove(1);\r\n-        }\r\n-        finally\r\n-        {\r\n-            NDC.pop();\r\n-        }\r\n-    }\r\n-\r\n-    /*\r\n-     * Stuff below:\r\n-     *\r\n-     * This will get tidied into some sort on JMS convenience framework, through which practically any usefull test\r\n-     * topology can be created. This will become a replacement for PingPongProducer.\r\n-     *\r\n-     * Base everything on standard connection properties defined in PingPongProducer. Split JMS and AMQP-only properties.\r\n-     *\r\n-     * Integrate with ConversationFactory, so that it will work with prod/con pairs.\r\n-     *\r\n-     * Support pub/rec pairs.\r\n-     * Support m*n pub/rec setups. All pubs/recs on one machine.\r\n-     *\r\n-     * Support bounce back clients, with configurable bounce back behavior. All, one in X, round robin one in m, etc.\r\n-     *\r\n-     * Support pairing of m*n pub/rec setups with bounce back clients. JVM running a test, can simulate m publishers,\r\n-     * will receive (a known subset of) all messages sent, bounced back to n receivers. Co-location of pub/rec will be\r\n-     * the normal model to allow accurate timings to be taken.\r\n-     *\r\n-     * Support creation of pub or rec only.\r\n-     * Support clock synching of pub/rec on different JVMs, by calculating clock offsets. Must also provide an accuracy\r\n-     * estimate to +- the results.\r\n-     *\r\n-     * Augment the interop Coordinator, to become a full distributed test coordinator. Capable of querying available\r\n-     * tests machines, looking at test parameters and farming out tests onto the test machines, passing all test\r\n-     * parameters, standard naming of pub/rec config parameters used to set up m*n test topologies, run test cases,\r\n-     * report results, tear down m*n topologies. Need to split the re-usable general purpose distributed test coordinator\r\n-     * from the Qpid specific test framework for creating test-topoloigies and passing Qpid specific parameters.\r\n-     *\r\n-     * Write all tests against pub/rec pairs, without coding to the fact that the topology may be anything from 1:1 in\r\n-     * JVM to m*n with bounce back clients accross many machines. That is, make the test topology orthogonal to the test\r\n-     * case.\r\n-     */\r\n-\r\n-    private static class ExceptionMonitor implements ExceptionListener\r\n-    {\r\n-        List<JMSException> exceptions = new ArrayList<JMSException>();\r\n-\r\n-        public void onException(JMSException e)\r\n-        {\r\n-            log.debug(\"ExceptionMonitor got JMSException: \", e);\r\n-\r\n-            exceptions.add(e);\r\n-        }\r\n-\r\n-        public boolean assertNoExceptions()\r\n-        {\r\n-            return exceptions.isEmpty();\r\n-        }\r\n-\r\n-        public boolean assertOneJMSException()\r\n-        {\r\n-            return exceptions.size() == 1;\r\n-        }\r\n-\r\n-        public boolean assertOneJMSExceptionWithLinkedCause(Class aClass)\r\n-        {\r\n-            if (exceptions.size() == 1)\r\n-            {\r\n-                JMSException e = exceptions.get(0);\r\n-\r\n-                Exception linkedCause = e.getLinkedException();\r\n-\r\n-                if ((linkedCause != null) && aClass.isInstance(linkedCause))\r\n-                {\r\n-                    return true;\r\n-                }\r\n-            }\r\n-\r\n-            return false;\r\n-        }\r\n-\r\n-        /**\r\n-         * Reports the number of exceptions held by this monitor.\r\n-         *\r\n-         * @return The number of exceptions held by this monitor.\r\n-         */\r\n-        public int size()\r\n-        {\r\n-            return exceptions.size();\r\n-        }\r\n-\r\n-        public void reset()\r\n-        {\r\n-            exceptions = new ArrayList();\r\n-        }\r\n-\r\n-        /**\r\n-         * Provides a dump of the stack traces of all exceptions that this exception monitor was notified of. Mainly\r\n-         * use for debugging/test failure reporting purposes.\r\n-         *\r\n-         * @return A string containing a dump of the stack traces of all exceptions.\r\n-         */\r\n-        public String toString()\r\n-        {\r\n-            String result = \"ExceptionMonitor: holds \" + exceptions.size() + \" exceptions.\\n\\n\";\r\n-\r\n-            for (JMSException ex : exceptions)\r\n-            {\r\n-                result += getStackTrace(ex) + \"\\n\";\r\n-            }\r\n-\r\n-            return result;\r\n-        }\r\n-\r\n-        /**\r\n-         * Prints an exception stack trace into a string.\r\n-         *\r\n-         * @param t The throwable to get the stack trace from.\r\n-         *\r\n-         * @return A string containing the throwables stack trace.\r\n-         */\r\n-        public static String getStackTrace(Throwable t)\r\n-        {\r\n-            StringWriter sw = new StringWriter();\r\n-            PrintWriter pw = new PrintWriter(sw, true);\r\n-            t.printStackTrace(pw);\r\n-            pw.flush();\r\n-            sw.flush();\r\n-\r\n-            return sw.toString();\r\n-        }\r\n-    }\r\n-\r\n-    public static class MessageMonitor implements MessageListener\r\n-    {\r\n-        public void onMessage(Message message)\r\n-        {\r\n-            log.debug(\"public void onMessage(Message message): called\");\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Establishes a JMS connection using a properties file and qpids built in JNDI implementation. This is a simple\r\n-     * convenience method for code that does anticipate handling connection failures. All exceptions that indicate\r\n-     * that the connection has failed, are wrapped as rutime exceptions, preumably handled by a top level failure\r\n-     * handler.\r\n-     *\r\n-     * @param messagingProps Any additional connection properties.\r\n-     *\r\n-     * @return A JMS conneciton.\r\n-     *\r\n-     * @todo Move this to a Utils library class or base test class. Also move the copy in interop.TestClient too.\r\n-     *\r\n-     * @todo Make in VM broker creation step optional on whether one is to be used or not.\r\n-     */\r\n-    public static Connection createConnection(ParsedProperties messagingProps)\r\n-    {\r\n-        log.debug(\"public static Connection createConnection(Properties messagingProps = \" + messagingProps + \"): called\");\r\n-\r\n-        try\r\n-        {\r\n-            // Extract the configured connection properties from the test configuration.\r\n-            String conUsername = messagingProps.getProperty(USERNAME_PROPNAME);\r\n-            String conPassword = messagingProps.getProperty(PASSWORD_PROPNAME);\r\n-            String virtualHost = messagingProps.getProperty(VIRTUAL_HOST_PROPNAME);\r\n-            String brokerUrl = messagingProps.getProperty(BROKER_PROPNAME);\r\n-\r\n-            // Set up the broker connection url.\r\n-            String connectionString =\r\n-                \"amqp://\" + conUsername + \":\" + conPassword + \"/\" + ((virtualHost != null) ? virtualHost : \"\")\r\n-                + \"?brokerlist='\" + brokerUrl + \"'\";\r\n-\r\n-            // messagingProps.setProperty(CONNECTION_PROPNAME, connectionString);\r\n-\r\n-            Context ctx = new InitialContext(messagingProps);\r\n-\r\n-            ConnectionFactory cf = (ConnectionFactory) ctx.lookup(CONNECTION_NAME);\r\n-            Connection connection = cf.createConnection();\r\n-\r\n-            return connection;\r\n-        }\r\n-        catch (NamingException e)\r\n-        {\r\n-            log.debug(\"Got NamingException: \", e);\r\n-            throw new RuntimeException(\"Got JNDI NamingException whilst looking up the connection factory.\", e);\r\n-        }\r\n-        catch (JMSException e)\r\n-        {\r\n-            log.debug(\"Got JMSException: \", e);\r\n-            throw new RuntimeException(\"Could not establish connection due to JMSException.\", e);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Creates a publisher and a receiver on the same connection, configured according the to specified standard\r\n-     * properties.\r\n-     *\r\n-     * @param messagingProps The connection properties.\r\n-     *\r\n-     * @return A publisher/receiver client pair.\r\n-     */\r\n-    public static PublisherReceiver createPublisherReceiverPairSharedConnection(ParsedProperties messagingProps)\r\n-    {\r\n-        try\r\n-        {\r\n-            // Get a unique offset to append to destination names to make them unique to the connection.\r\n-            long uniqueId = uniqueDestsId.incrementAndGet();\r\n-\r\n-            // Extract the standard test configuration parameters relevant to the connection.\r\n-            String destinationSendRoot = messagingProps.getProperty(SEND_DESTINATION_NAME_ROOT_PROPNAME) + \"_\" + uniqueId;\r\n-            String destinationReceiveRoot =\r\n-                messagingProps.getProperty(RECEIVE_DESTINATION_NAME_ROOT_PROPNAME) + \"_\" + uniqueId;\r\n-            boolean createPublisherProducer = messagingProps.getPropertyAsBoolean(PUBLISHER_PRODUCER_BIND_PROPNAME);\r\n-            boolean createPublisherConsumer = messagingProps.getPropertyAsBoolean(PUBLISHER_CONSUMER_BIND_PROPNAME);\r\n-            boolean createReceiverProducer = messagingProps.getPropertyAsBoolean(RECEIVER_PRODUCER_BIND_PROPNAME);\r\n-            boolean createReceiverConsumer = messagingProps.getPropertyAsBoolean(RECEIVER_CONSUMER_BIND_PROPNAME);\r\n-\r\n-            // Check which JMS flags and options are to be set.\r\n-            int ackMode = messagingProps.getPropertyAsInteger(ACK_MODE_PROPNAME);\r\n-            boolean useTopics = messagingProps.getPropertyAsBoolean(PUBSUB_PROPNAME);\r\n-            boolean transactional = messagingProps.getPropertyAsBoolean(TRANSACTED_PROPNAME);\r\n-            boolean durableSubscription = messagingProps.getPropertyAsBoolean(DURABLE_SUBSCRIPTION_PROPNAME);\r\n-\r\n-            // Check if any Qpid/AMQP specific flags or options need to be set.\r\n-            boolean immediate = messagingProps.getPropertyAsBoolean(IMMEDIATE_PROPNAME);\r\n-            boolean mandatory = messagingProps.getPropertyAsBoolean(MANDATORY_PROPNAME);\r\n-            boolean needsQpidOptions = immediate | mandatory;\r\n-\r\n-            /*log.debug(\"ackMode = \" + ackMode);\r\n-            log.debug(\"useTopics = \" + useTopics);\r\n-            log.debug(\"destinationSendRoot = \" + destinationSendRoot);\r\n-            log.debug(\"destinationReceiveRoot = \" + destinationReceiveRoot);\r\n-            log.debug(\"createPublisherProducer = \" + createPublisherProducer);\r\n-            log.debug(\"createPublisherConsumer = \" + createPublisherConsumer);\r\n-            log.debug(\"createReceiverProducer = \" + createReceiverProducer);\r\n-            log.debug(\"createReceiverConsumer = \" + createReceiverConsumer);\r\n-            log.debug(\"transactional = \" + transactional);\r\n-            log.debug(\"immediate = \" + immediate);\r\n-            log.debug(\"mandatory = \" + mandatory);\r\n-            log.debug(\"needsQpidOptions = \" + needsQpidOptions);*/\r\n-\r\n-            // Create connection, sessions and producer/consumer pairs on each session.\r\n-            Connection connection = createConnection(messagingProps);\r\n-\r\n-            // Add the connection exception listener to assert on exception conditions with.\r\n-            ExceptionMonitor exceptionMonitor = new ExceptionMonitor();\r\n-            connection.setExceptionListener(exceptionMonitor);\r\n-\r\n-            Session publisherSession = connection.createSession(transactional, ackMode);\r\n-            Session receiverSession = connection.createSession(transactional, ackMode);\r\n-\r\n-            Destination publisherProducerDestination =\r\n-                useTopics ? (Destination) publisherSession.createTopic(destinationSendRoot)\r\n-                          : publisherSession.createQueue(destinationSendRoot);\r\n-\r\n-            MessageProducer publisherProducer =\r\n-                createPublisherProducer\r\n-                ? (needsQpidOptions\r\n-                    ? ((AMQSession) publisherSession).createProducer(publisherProducerDestination, mandatory, immediate)\r\n-                    : publisherSession.createProducer(publisherProducerDestination)) : null;\r\n-\r\n-            MessageConsumer publisherConsumer =\r\n-                createPublisherConsumer\r\n-                ? publisherSession.createConsumer(publisherSession.createQueue(destinationReceiveRoot)) : null;\r\n-\r\n-            if (publisherConsumer != null)\r\n-            {\r\n-                publisherConsumer.setMessageListener(new MessageMonitor());\r\n-            }\r\n-\r\n-            MessageProducer receiverProducer =\r\n-                createReceiverProducer ? receiverSession.createProducer(receiverSession.createQueue(destinationReceiveRoot))\r\n-                                       : null;\r\n-\r\n-            Destination receiverConsumerDestination =\r\n-                useTopics ? (Destination) receiverSession.createTopic(destinationSendRoot)\r\n-                          : receiverSession.createQueue(destinationSendRoot);\r\n-\r\n-            MessageConsumer receiverConsumer =\r\n-                createReceiverConsumer\r\n-                ? ((durableSubscription && useTopics)\r\n-                    ? receiverSession.createDurableSubscriber((Topic) receiverConsumerDestination, \"testsub\")\r\n-                    : receiverSession.createConsumer(receiverConsumerDestination)) : null;\r\n-\r\n-            if (receiverConsumer != null)\r\n-            {\r\n-                receiverConsumer.setMessageListener(new MessageMonitor());\r\n-            }\r\n-\r\n-            // Start listening for incoming messages.\r\n-            connection.start();\r\n-\r\n-            // Package everything up.\r\n-            ProducerConsumerPair publisher =\r\n-                new ProducerConsumerPairImpl(publisherProducer, publisherConsumer, publisherSession);\r\n-            ProducerConsumerPair receiver =\r\n-                new ProducerConsumerPairImpl(receiverProducer, receiverConsumer, receiverSession);\r\n-\r\n-            PublisherReceiver result = new PublisherReceiverImpl(publisher, receiver, connection, exceptionMonitor);\r\n-\r\n-            return result;\r\n-        }\r\n-        catch (JMSException e)\r\n-        {\r\n-            log.debug(\"Got JMSException: \", e);\r\n-            throw new RuntimeException(\"Could not create publisher/receiver pair due to a JMSException.\", e);\r\n-        }\r\n-    }\r\n-\r\n-    public static Message createTestMessage(ProducerConsumerPair client, ParsedProperties testProps) throws JMSException\r\n-    {\r\n-        return client.getSession().createTextMessage(\"Hello\");\r\n-            // return client.getSession().createMessage();\r\n-    }\r\n-\r\n-    /**\r\n-     * A ProducerConsumerPair is a pair consisting of one message producer and one message consumer. It is a standard\r\n-     * unit of connectivity allowing a full-duplex conversation to be held, provided both the consumer and producer\r\n-     * are instantiated and configured.\r\n-     *\r\n-     * In some situations a test, or piece of application code will be written with differing numbers of publishers\r\n-     * and receivers in different roles, where one role produces only and one consumes only. This messaging topology\r\n-     * can still make use of producer/consumer pairs as standard building blocks, combined into publisher/receiver\r\n-     * units to fulfill the different messaging roles, with the publishers consumer uninstantiated and the receivers\r\n-     * producer uninstantiated. Use a {@link PublisherReceiver} for this.\r\n-     *\r\n-     * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n-     * <tr><th> Responsibilities\r\n-     * <tr><td> Provide a message producer for sending messages.\r\n-     * <tr><td> Provide a message consumer for receiving messages.\r\n-     * </table>\r\n-     *\r\n-     * @todo Update the {@link org.apache.qpid.util.ConversationFactory} so that it accepts these as the basic\r\n-     *       conversation connection units.\r\n-     */\r\n-    public static interface ProducerConsumerPair\r\n-    {\r\n-        public MessageProducer getProducer();\r\n-\r\n-        public MessageConsumer getConsumer();\r\n-\r\n-        public void send(Message message) throws JMSException;\r\n-\r\n-        public Session getSession();\r\n-\r\n-        public void close() throws JMSException;\r\n-    }\r\n-\r\n-    /**\r\n-     * A single producer and consumer.\r\n-     */\r\n-    public static class ProducerConsumerPairImpl implements ProducerConsumerPair\r\n-    {\r\n-        MessageProducer producer;\r\n-\r\n-        MessageConsumer consumer;\r\n-\r\n-        Session session;\r\n-\r\n-        public ProducerConsumerPairImpl(MessageProducer producer, MessageConsumer consumer, Session session)\r\n-        {\r\n-            this.producer = producer;\r\n-            this.consumer = consumer;\r\n-            this.session = session;\r\n-        }\r\n-\r\n-        public MessageProducer getProducer()\r\n-        {\r\n-            return producer;\r\n-        }\r\n-\r\n-        public MessageConsumer getConsumer()\r\n-        {\r\n-            return consumer;\r\n-        }\r\n-\r\n-        public void send(Message message) throws JMSException\r\n-        {\r\n-            producer.send(message);\r\n-        }\r\n-\r\n-        public Session getSession()\r\n-        {\r\n-            return session;\r\n-        }\r\n-\r\n-        public void close() throws JMSException\r\n-        {\r\n-            if (producer != null)\r\n-            {\r\n-                producer.close();\r\n-            }\r\n-\r\n-            if (consumer != null)\r\n-            {\r\n-                consumer.close();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Multiple producers and consumers made to look like a single producer and consumer. All methods repeated accross\r\n-     * all producers and consumers.\r\n-     */\r\n-    public static class MultiProducerConsumerPairImpl implements ProducerConsumerPair\r\n-    {\r\n-        public MessageProducer getProducer()\r\n-        {\r\n-            throw new RuntimeException(\"Not implemented.\");\r\n-        }\r\n-\r\n-        public MessageConsumer getConsumer()\r\n-        {\r\n-            throw new RuntimeException(\"Not implemented.\");\r\n-        }\r\n-\r\n-        public void send(Message message) throws JMSException\r\n-        {\r\n-            throw new RuntimeException(\"Not implemented.\");\r\n-        }\r\n-\r\n-        public Session getSession()\r\n-        {\r\n-            throw new RuntimeException(\"Not implemented.\");\r\n-        }\r\n-\r\n-        public void close()\r\n-        {\r\n-            throw new RuntimeException(\"Not implemented.\");\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * A PublisherReceiver consists of two sets of producer/consumer pairs, one for an 'instigating' publisher\r\n-     * role, and one for a more 'passive' receiver role.\r\n-     *\r\n-     * <p/>A set of publishers and receivers forms a typical test configuration where both roles are to be controlled\r\n-     * from within a single JVM. This is not a particularly usefull arrangement for applications which want to place\r\n-     * these roles on physically seperate machines and pass messages between them. It is a faily normal arrangement for\r\n-     * test code though, either to publish and receive messages through an in-VM message broker in order to test its\r\n-     * expected behaviour, or to publish and receive (possibly bounced back) messages through a seperate broker instance\r\n-     * in order to take performance timings. In the case of performance timings, the co-location of the publisher and\r\n-     * receiver means that the timings are taken on the same machine for accurate timing without the need for clock\r\n-     * synchronization.\r\n-     *\r\n-     * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n-     * <tr><th> Responsibilities\r\n-     * <tr><td> Manage an m*n array of publisher and recievers.\r\n-     * </table>\r\n-     */\r\n-    public static interface PublisherReceiver\r\n-    {\r\n-        public ProducerConsumerPair getPublisher();\r\n-\r\n-        public ProducerConsumerPair getReceiver();\r\n-\r\n-        public void start();\r\n-\r\n-        public void send(ParsedProperties testProps, int numMessages);\r\n-\r\n-        public ExceptionMonitor getConnectionExceptionMonitor();\r\n-\r\n-        public ExceptionMonitor getExceptionMonitor();\r\n-\r\n-        public void testWithAssertions(ParsedProperties testProps, Class aClass /*, assertions */);\r\n-\r\n-        public void testNoExceptions(ParsedProperties testProps);\r\n-\r\n-        public void close();\r\n-    }\r\n-\r\n-    public static class PublisherReceiverImpl implements PublisherReceiver\r\n-    {\r\n-        private ProducerConsumerPair publisher;\r\n-        private ProducerConsumerPair receiver;\r\n-        private Connection connection;\r\n-        private ExceptionMonitor connectionExceptionMonitor;\r\n-        private ExceptionMonitor exceptionMonitor;\r\n-\r\n-        public PublisherReceiverImpl(ProducerConsumerPair publisher, ProducerConsumerPair receiver, Connection connection,\r\n-            ExceptionMonitor connectionExceptionMonitor)\r\n-        {\r\n-            this.publisher = publisher;\r\n-            this.receiver = receiver;\r\n-            this.connection = connection;\r\n-            this.connectionExceptionMonitor = connectionExceptionMonitor;\r\n-            this.exceptionMonitor = new ExceptionMonitor();\r\n-        }\r\n-\r\n-        public ProducerConsumerPair getPublisher()\r\n-        {\r\n-            return publisher;\r\n-        }\r\n-\r\n-        public ProducerConsumerPair getReceiver()\r\n-        {\r\n-            return receiver;\r\n-        }\r\n-\r\n-        public void start()\r\n-        { }\r\n-\r\n-        public void close()\r\n-        {\r\n-            try\r\n-            {\r\n-                publisher.close();\r\n-                receiver.close();\r\n-                connection.close();\r\n-            }\r\n-            catch (JMSException e)\r\n-            {\r\n-                throw new RuntimeException(\"Got JMSException during close.\", e);\r\n-            }\r\n-        }\r\n-\r\n-        public ExceptionMonitor getConnectionExceptionMonitor()\r\n-        {\r\n-            return connectionExceptionMonitor;\r\n-        }\r\n-\r\n-        public ExceptionMonitor getExceptionMonitor()\r\n-        {\r\n-            return exceptionMonitor;\r\n-        }\r\n-\r\n-        public void send(ParsedProperties testProps, int numMessages)\r\n-        {\r\n-            boolean transactional = testProps.getPropertyAsBoolean(TRANSACTED_PROPNAME);\r\n-\r\n-            // Send an immediate message through the publisher and ensure that it results in a JMSException.\r\n-            try\r\n-            {\r\n-                getPublisher().send(createTestMessage(getPublisher(), testProps));\r\n-\r\n-                if (transactional)\r\n-                {\r\n-                    getPublisher().getSession().commit();\r\n-                }\r\n-            }\r\n-            catch (JMSException e)\r\n-            {\r\n-                log.debug(\"Got JMSException: \", e);\r\n-                exceptionMonitor.onException(e);\r\n-            }\r\n-        }\r\n-\r\n-        public void testWithAssertions(ParsedProperties testProps, Class aClass /*, assertions */)\r\n-        {\r\n-            start();\r\n-            send(testProps, 1);\r\n-            pause(1000L);\r\n-\r\n-            String errors = \"\";\r\n-\r\n-            ExceptionMonitor connectionExceptionMonitor = getConnectionExceptionMonitor();\r\n-            if (!connectionExceptionMonitor.assertOneJMSExceptionWithLinkedCause(aClass))\r\n-            {\r\n-                errors += \"Was expecting linked exception type \" + aClass.getName() + \" on the connection.\\n\";\r\n-                errors +=\r\n-                    (connectionExceptionMonitor.size() > 0)\r\n-                    ? (\"Actually got the following exceptions on the connection, \" + connectionExceptionMonitor)\r\n-                    : \"Got no exceptions on the connection.\";\r\n-            }\r\n-\r\n-            // Clean up the publisher/receiver client pair.\r\n-            close();\r\n-\r\n-            assertEquals(errors, \"\", errors);\r\n-        }\r\n-\r\n-        /**\r\n-         */\r\n-        public void testNoExceptions(ParsedProperties testProps)\r\n-        {\r\n-            start();\r\n-            send(testProps, 1);\r\n-            pause(1000L);\r\n-\r\n-            String errors = \"\";\r\n-\r\n-            if (!getConnectionExceptionMonitor().assertNoExceptions())\r\n-            {\r\n-                errors += \"Was expecting no exceptions.\\n\";\r\n-                errors += \"Got the following exceptions on the connection, \" + getConnectionExceptionMonitor();\r\n-            }\r\n-\r\n-            if (!getExceptionMonitor().assertNoExceptions())\r\n-            {\r\n-                errors += \"Was expecting no exceptions.\\n\";\r\n-                errors += \"Got the following exceptions on the producer, \" + getExceptionMonitor();\r\n-            }\r\n-\r\n-            // Clean up the publisher/receiver client pair.\r\n-            close();\r\n-\r\n-            assertEquals(errors, \"\", errors);\r\n-        }\r\n-\r\n-        public static PublisherReceiver connectClients(ParsedProperties testProps)\r\n-        {\r\n-            // Create a standard publisher/receiver test client pair on a shared connection, individual sessions.\r\n-            return createPublisherReceiverPairSharedConnection(testProps);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Pauses for the specified length of time. In the event of failing to pause for at least that length of time\r\n-     * due to interuption of the thread, a RutimeException is raised to indicate the failure. The interupted status\r\n-     * of the thread is restores in that case. This method should only be used when it is expected that the pause\r\n-     * will be succesfull, for example in test code that relies on inejecting a pause.\r\n-     *\r\n-     * @param t The minimum time to pause for in milliseconds.\r\n-     */\r\n-    public static void pause(long t)\r\n-    {\r\n-        try\r\n-        {\r\n-            Thread.sleep(t);\r\n-        }\r\n-        catch (InterruptedException e)\r\n-        {\r\n-            // Restore the interrupted status\r\n-            Thread.currentThread().interrupt();\r\n-\r\n-            throw new RuntimeException(\"Failed to generate the requested pause length.\", e);\r\n-        }\r\n     }\r\n }\r", "filename": "systests/src/main/java/org/apache/qpid/server/exchange/ImmediateMessageTest.java"}, {"additions": 100, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/exchange/MandatoryMessageTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/exchange/MandatoryMessageTest.java", "sha": "94a33806d07f2fb3bddef0d1da34030c49f5a564", "changes": 210, "status": "modified", "deletions": 110, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/exchange/MandatoryMessageTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -20,17 +20,11 @@\n  */\r\n package org.apache.qpid.server.exchange;\r\n \r\n-import junit.framework.TestCase;\r\n-\r\n-import org.apache.log4j.NDC;\r\n-\r\n-import org.apache.qpid.client.AMQNoRouteException;\r\n-import org.apache.qpid.client.transport.TransportConnection;\r\n-import static org.apache.qpid.server.exchange.MessagingTestConfigProperties.*;\r\n-import org.apache.qpid.server.registry.ApplicationRegistry;\r\n-\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n+import org.apache.qpid.test.framework.sequencers.TestCaseSequencer;\r\n+import org.apache.qpid.test.framework.Circuit;\r\n+import org.apache.qpid.test.framework.FrameworkBaseCase;\r\n+import org.apache.qpid.test.framework.MessagingTestConfigProperties;\r\n+import static org.apache.qpid.test.framework.MessagingTestConfigProperties.*;\r\n \r\n import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n import uk.co.thebadgerset.junit.extensions.util.TestContextProperties;\r\n@@ -43,52 +37,70 @@\n  *\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n  * <tr><th> Responsibilities <th> Collaborations\r\n- * <tr><td> Check that a mandatory message is sent succesfully not using transactions when a consumer is connected.\r\n- * <tr><td> Check that a mandatory message is committed succesfully in a transaction when a consumer is connected.\r\n- * <tr><td> Check that a mandatory message results in no route code, not using transactions, when no consumer is\r\n+ * <tr><td> Check that an mandatory message is sent succesfully not using transactions when a consumer is connected.\r\n+ * <tr><td> Check that an mandatory message is committed succesfully in a transaction when a consumer is connected.\r\n+ * <tr><td> Check that a mandatory message is sent succesfully, not using transactions, when a consumer is disconnected\r\n+ *          but the route exists.\r\n+ * <tr><td> Check that a mandatory message is sent succesfully, in a transaction, when a consumer is disconnected but\r\n+ *          the route exists.\r\n+ * <tr><td> Check that an mandatory message results in no route code, not using transactions, when no consumer is\r\n+ *          connected.\r\n+ * <tr><td> Check that an mandatory message results in no route code, upon transaction commit, when a consumer is\r\n  *          connected.\r\n- * <tr><td> Check that a mandatory message results in no route code, upon transaction commit, when a consumer is\r\n+ * <tr><td> Check that an mandatory message is sent succesfully not using transactions when a consumer is connected.\r\n+ * <tr><td> Check that an mandatory message is committed succesfully in a transaction when a consumer is connected.\r\n+ * <tr><td> Check that a mandatory message is sent succesfully, not using transactions, when a consumer is disconnected\r\n+ *          but the route exists.\r\n+ * <tr><td> Check that a mandatory message is sent succesfully, in a transaction, when a consumer is disconnected but\r\n+ *          the route exists.\r\n+ * <tr><td> Check that an mandatory message results in no route code, not using transactions, when no consumer is\r\n+ *          connected.\r\n+ * <tr><td> Check that an mandatory message results in no route code, upon transaction commit, when a consumer is\r\n  *          connected.\r\n- * <tr><td> Check that a mandatory message is sent succesfully, not using transactions, when a consumer is\r\n- *          disconnected but the route exists.\r\n- * <tr><dt> Check that a mandatory message is send successfully, in a transactions, when a consumer is\r\n- *          disconnected but when the route exists.\r\n  * </table>\r\n+ *\r\n+ * @todo All of these test cases will be generated by a test generator that thoroughly tests all combinations of test\r\n+ *       circuits.\r\n  */\r\n-public class MandatoryMessageTest extends TestCase\r\n+public class MandatoryMessageTest extends FrameworkBaseCase\r\n {\r\n-    /** Used for debugging. */\r\n-    private static final Logger log = LoggerFactory.getLogger(MandatoryMessageTest.class);\r\n-\r\n     /** Used to read the tests configurable properties through. */\r\n     ParsedProperties testProps;\r\n \r\n+    /**\r\n+     * Creates a new test case with the specified name.\r\n+     *\r\n+     * @param name The test case name.\r\n+     */\r\n+    public MandatoryMessageTest(String name)\r\n+    {\r\n+        super(name);\r\n+    }\r\n+\r\n     /** Check that an mandatory message is sent succesfully not using transactions when a consumer is connected. */\r\n-    public void test_QPID_508_MandatoryOkNoTxP2P() throws Exception\r\n+    public void test_QPID_508_MandatoryOkNoTxP2P()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        // Run the default test sequence over the test circuit checking for no errors.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an mandatory message is committed succesfully in a transaction when a consumer is connected. */\r\n-    public void test_QPID_508_MandatoryOkTxP2P() throws Exception\r\n+    public void test_QPID_508_MandatoryOkTxP2P()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        // Run the default test sequence over the test circuit checking for no errors.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /**\r\n@@ -101,14 +113,14 @@ public void test_QPID_517_MandatoryOkConsumerDisconnectedNoTxP2P() throws Except\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n \r\n         // Disconnect the consumer.\r\n-        testClients.getReceiver().getConsumer().close();\r\n+        testCircuit.getReceiver().getConsumer().close();\r\n \r\n         // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /**\r\n@@ -121,78 +133,74 @@ public void test_QPID_517_MandatoryOkConsumerDisconnectedTxP2P() throws Exceptio\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n \r\n         // Disconnect the consumer.\r\n-        testClients.getReceiver().getConsumer().close();\r\n+        testCircuit.getReceiver().getConsumer().close();\r\n \r\n         // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an mandatory message results in no route code, not using transactions, when no consumer is connected. */\r\n-    public void test_QPID_508_MandatoryFailsNoRouteNoTxP2P() throws Exception\r\n+    public void test_QPID_508_MandatoryFailsNoRouteNoTxP2P()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receiver to\r\n+        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receivers to\r\n         // collect its messages).\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, false);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoRouteException.class);\r\n+        // Send one message and get a linked no route exception.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noRouteAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an mandatory message results in no route code, upon transaction commit, when a consumer is connected. */\r\n-    public void test_QPID_508_MandatoryFailsNoRouteTxP2P() throws Exception\r\n+    public void test_QPID_508_MandatoryFailsNoRouteTxP2P()\r\n     {\r\n         // Ensure transactional sessions are on.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, false);\r\n \r\n-        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receiver to\r\n+        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receivers to\r\n         // collect its messages).\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, false);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoRouteException.class);\r\n+        // Send one message and get a linked no route exception.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noRouteAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an mandatory message is sent succesfully not using transactions when a consumer is connected. */\r\n-    public void test_QPID_508_MandatoryOkNoTxPubSub() throws Exception\r\n+    public void test_QPID_508_MandatoryOkNoTxPubSub()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, true);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        // Run the default test sequence over the test circuit checking for no errors.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an mandatory message is committed succesfully in a transaction when a consumer is connected. */\r\n-    public void test_QPID_508_MandatoryOkTxPubSub() throws Exception\r\n+    public void test_QPID_508_MandatoryOkTxPubSub()\r\n     {\r\n-        // Ensure transactional sessions are off.\r\n+        // Ensure transactional sessions are on.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, true);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        // Run the default test sequence over the test circuit checking for no errors.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /**\r\n@@ -208,14 +216,14 @@ public void test_QPID_517_MandatoryOkConsumerDisconnectedNoTxPubSub() throws Exc\n         // Use durable subscriptions, so that the route remains open with no subscribers.\r\n         testProps.setProperty(DURABLE_SUBSCRIPTION_PROPNAME, true);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n \r\n         // Disconnect the consumer.\r\n-        testClients.getReceiver().getConsumer().close();\r\n+        testCircuit.getReceiver().getConsumer().close();\r\n \r\n         // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /**\r\n@@ -231,79 +239,61 @@ public void test_QPID_517_MandatoryOkConsumerDisconnectedTxPubSub() throws Excep\n         // Use durable subscriptions, so that the route remains open with no subscribers.\r\n         testProps.setProperty(DURABLE_SUBSCRIPTION_PROPNAME, true);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n \r\n         // Disconnect the consumer.\r\n-        testClients.getReceiver().getConsumer().close();\r\n+        testCircuit.getReceiver().getConsumer().close();\r\n \r\n         // Send one message with no errors.\r\n-        testClients.testNoExceptions(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noExceptionsAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an mandatory message results in no route code, not using transactions, when no consumer is connected. */\r\n-    public void test_QPID_508_MandatoryFailsNoRouteNoTxPubSub() throws Exception\r\n+    public void test_QPID_508_MandatoryFailsNoRouteNoTxPubSub()\r\n     {\r\n         // Ensure transactional sessions are off.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, false);\r\n         testProps.setProperty(PUBSUB_PROPNAME, true);\r\n \r\n-        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receiver to\r\n+        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receivers to\r\n         // collect its messages).\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, false);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoRouteException.class);\r\n+        // Send one message and get a linked no route exception.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noRouteAssertion()), testProps);\r\n     }\r\n \r\n     /** Check that an mandatory message results in no route code, upon transaction commit, when a consumer is connected. */\r\n-    public void test_QPID_508_MandatoryFailsNoRouteTxPubSub() throws Exception\r\n+    public void test_QPID_508_MandatoryFailsNoRouteTxPubSub()\r\n     {\r\n         // Ensure transactional sessions are on.\r\n         testProps.setProperty(TRANSACTED_PROPNAME, true);\r\n         testProps.setProperty(PUBSUB_PROPNAME, true);\r\n \r\n-        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receiver to\r\n+        // Set up the messaging topology so that only the publishers producer is bound (do not set up the receivers to\r\n         // collect its messages).\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, false);\r\n \r\n-        ImmediateMessageTest.PublisherReceiver testClients =\r\n-            ImmediateMessageTest.PublisherReceiverImpl.connectClients(testProps);\r\n-\r\n-        // Send one message and get a linked no consumers exception.\r\n-        testClients.testWithAssertions(testProps, AMQNoRouteException.class);\r\n+        // Send one message and get a linked no route exception.\r\n+        TestCaseSequencer sequencer = getTestSequencer();\r\n+        Circuit testCircuit = sequencer.createCircuit(testProps);\r\n+        sequencer.sequenceTest(testCircuit, assertionList(testCircuit.getPublisher().noRouteAssertion()), testProps);\r\n     }\r\n \r\n     protected void setUp() throws Exception\r\n     {\r\n-        NDC.push(getName());\r\n+        super.setUp();\r\n \r\n         testProps = TestContextProperties.getInstance(MessagingTestConfigProperties.defaults);\r\n \r\n         /** All these tests should have the mandatory flag on. */\r\n+        testProps.setProperty(IMMEDIATE_PROPNAME, false);\r\n         testProps.setProperty(MANDATORY_PROPNAME, true);\r\n \r\n         /** Bind the receivers consumer by default. */\r\n         testProps.setProperty(RECEIVER_CONSUMER_BIND_PROPNAME, true);\r\n-\r\n-        // Ensure that the in-vm broker is created.\r\n-        TransportConnection.createVMBroker(1);\r\n-    }\r\n-\r\n-    protected void tearDown() throws Exception\r\n-    {\r\n-        try\r\n-        {\r\n-            // Ensure that the in-vm broker is cleaned up so that the next test starts afresh.\r\n-            TransportConnection.killVMBroker(1);\r\n-            ApplicationRegistry.remove(1);\r\n-        }\r\n-        finally\r\n-        {\r\n-            NDC.pop();\r\n-        }\r\n     }\r\n }\r", "filename": "systests/src/main/java/org/apache/qpid/server/exchange/MandatoryMessageTest.java"}, {"additions": 6, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/exchange/ReturnUnroutableMandatoryMessageTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/exchange/ReturnUnroutableMandatoryMessageTest.java", "sha": "191f38f1b2791324813147290dc64b7b6b182907", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/exchange/ReturnUnroutableMandatoryMessageTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -126,8 +126,8 @@ public void testReturnUnroutableMandatoryMessage_HEADERS() throws Exception\n         con.start();\r\n         TextMessage tm = (TextMessage) consumer.receive(1000L);\r\n \r\n-        assertTrue(\"No message routed to receiver\", tm != null);\r\n-        assertTrue(\"Wrong message routed to receiver: \" + tm.getText(), \"msg3\".equals(tm.getText()));\r\n+        assertTrue(\"No message routed to receivers\", tm != null);\r\n+        assertTrue(\"Wrong message routed to receivers: \" + tm.getText(), \"msg3\".equals(tm.getText()));\r\n \r\n         try\r\n         {\r\n@@ -193,8 +193,8 @@ public void testReturnUnroutableMandatoryMessage_QUEUE() throws Exception\n         con.start();\r\n         TextMessage tm = (TextMessage) consumer.receive(1000L);\r\n \r\n-        assertTrue(\"No message routed to receiver\", tm != null);\r\n-        assertTrue(\"Wrong message routed to receiver: \" + tm.getText(), \"msg1\".equals(tm.getText()));\r\n+        assertTrue(\"No message routed to receivers\", tm != null);\r\n+        assertTrue(\"Wrong message routed to receivers: \" + tm.getText(), \"msg1\".equals(tm.getText()));\r\n \r\n         try\r\n         {\r\n@@ -259,8 +259,8 @@ public void testReturnUnroutableMandatoryMessage_TOPIC() throws Exception\n         con.start();\r\n         TextMessage tm = (TextMessage) consumer.receive(1000L);\r\n \r\n-        assertTrue(\"No message routed to receiver\", tm != null);\r\n-        assertTrue(\"Wrong message routed to receiver: \" + tm.getText(), \"msg1\".equals(tm.getText()));\r\n+        assertTrue(\"No message routed to receivers\", tm != null);\r\n+        assertTrue(\"Wrong message routed to receivers: \" + tm.getText(), \"msg1\".equals(tm.getText()));\r\n \r\n         try\r\n         {\r", "filename": "systests/src/main/java/org/apache/qpid/server/exchange/ReturnUnroutableMandatoryMessageTest.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java", "sha": "14d45807dde2c7af03528b13d93714d69310d23f", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.protocol;", "filename": "systests/src/main/java/org/apache/qpid/server/protocol/AMQProtocolSessionMBeanTest.java"}, {"additions": 14, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/protocol/MaxChannelsTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/protocol/MaxChannelsTest.java", "sha": "b507bee16e140dff939f3b55fd726d0d82250e5f", "changes": 25, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/protocol/MaxChannelsTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,18 +1,21 @@\n /*\n  *\n- * Copyright (c) 2006 The Apache Software Foundation\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n  */\n package org.apache.qpid.server.protocol;", "filename": "systests/src/main/java/org/apache/qpid/server/protocol/MaxChannelsTest.java"}, {"additions": 36, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/queue/PersistentTestManual.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/server/queue/PersistentTestManual.java", "sha": "d01284cb8a0e5ef55e5bb4f33c43c62fc2bb1575", "changes": 69, "status": "modified", "deletions": 33, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/server/queue/PersistentTestManual.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,47 +1,48 @@\n /*\n- *  Licensed to the Apache Software Foundation (ASF) under one\n- *  or more contributor license agreements.  See the NOTICE file\n- *  distributed with this work for additional information\n- *  regarding copyright ownership.  The ASF licenses this file\n- *  to you under the Apache License, Version 2.0 (the\n- *  \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *  Unless required by applicable law or agreed to in writing,\n- *  software distributed under the License is distributed on an\n- *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- *  KIND, either express or implied.  See the License for the\n- *  specific language governing permissions and limitations\n- *  under the License.    \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  *\n- * \n  */\n package org.apache.qpid.server.queue;\n \n-import org.apache.qpid.client.AMQConnection;\n-import org.apache.qpid.client.AMQSession;\n-import org.apache.qpid.AMQException;\n+import org.apache.log4j.Logger;\n+\n import org.apache.qpid.AMQChannelClosedException;\n import org.apache.qpid.AMQConnectionClosedException;\n-import org.apache.qpid.util.CommandLineParser;\n+import org.apache.qpid.AMQException;\n+import org.apache.qpid.client.AMQConnection;\n+import org.apache.qpid.client.AMQSession;\n import org.apache.qpid.url.URLSyntaxException;\n-import org.apache.log4j.Logger;\n+import org.apache.qpid.util.CommandLineParser;\n \n-import javax.jms.Session;\n import javax.jms.JMSException;\n-import javax.jms.Queue;\n import javax.jms.MessageProducer;\n+import javax.jms.Queue;\n+import javax.jms.Session;\n import javax.jms.TextMessage;\n+\n import java.io.IOException;\n import java.util.Properties;\n \n public class PersistentTestManual\n {\n     private static final Logger _logger = Logger.getLogger(PersistentTestManual.class);\n \n-\n     private static final String QUEUE = \"direct://amq.direct//PersistentTest-Queue2?durable='true',exclusive='true'\";\n \n     protected AMQConnection _connection;\n@@ -89,7 +90,7 @@ protected void createConnection()\n     public void test() throws AMQException, URLSyntaxException\n     {\n \n-        //Create the Durable Queue\n+        // Create the Durable Queue\n         try\n         {\n             _session.createConsumer(_session.createQueue(QUEUE)).close();\n@@ -121,16 +122,17 @@ public void test() throws AMQException, URLSyntaxException\n                     System.out.println(\"Continuing....\");\n                 }\n \n-                //Test queue is still there.\n-                AMQConnection connection = new AMQConnection(_brokerDetails, _username, _password, \"DifferentClientID\", _virtualpath);\n+                // Test queue is still there.\n+                AMQConnection connection =\n+                    new AMQConnection(_brokerDetails, _username, _password, \"DifferentClientID\", _virtualpath);\n \n                 AMQSession session = (AMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n \n                 try\n                 {\n                     session.createConsumer(session.createQueue(QUEUE));\n-                    _logger.error(\"Create consumer succeeded.\" +\n-                                  \" This shouldn't be allowed as this means the queue didn't exist when it should\");\n+                    _logger.error(\"Create consumer succeeded.\"\n+                        + \" This shouldn't be allowed as this means the queue didn't exist when it should\");\n \n                     connection.close();\n \n@@ -189,25 +191,25 @@ private void exit()\n         {\n             //\n         }\n+\n         System.exit(0);\n     }\n \n     private boolean testQueue() throws JMSException\n     {\n         String TEST_TEXT = \"init\";\n \n-        //Create a new session to send producer\n+        // Create a new session to send producer\n         Session session = _connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n \n         Queue q = session.createQueue(QUEUE);\n         MessageProducer producer = session.createProducer(q);\n \n         producer.send(session.createTextMessage(TEST_TEXT));\n \n-        //create a new consumer on the original session\n+        // create a new consumer on the original session\n         TextMessage m = (TextMessage) _session.createConsumer(q).receive();\n \n-\n         if ((m != null) && m.getText().equals(TEST_TEXT))\n         {\n             return true;\n@@ -216,6 +218,7 @@ private boolean testQueue() throws JMSException\n         {\n             _logger.error(\"Incorrect values returned from Queue Test:\" + m);\n             System.exit(0);\n+\n             return false;\n         }\n     }\n@@ -259,8 +262,8 @@ public static void main(String[] args)\n     {\n         PersistentTestManual test;\n \n-        Properties options = CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][]{}));\n-\n+        Properties options =\n+            CommandLineParser.processCommandLine(args, new CommandLineParser(new String[][] {}), System.getProperties());\n \n         test = new PersistentTestManual(options);\n         try", "filename": "systests/src/main/java/org/apache/qpid/server/queue/PersistentTestManual.java"}, {"additions": 17, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/VMTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/VMTestCase.java", "sha": "9629f87d46e0317dd3b99d7d311c65a46956c738", "changes": 28, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/VMTestCase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -1,4 +1,5 @@\n /*\n+ *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -20,29 +21,32 @@\n package org.apache.qpid.test;\n \n import junit.extensions.TestSetup;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n \n import org.apache.qpid.client.transport.TransportConnection;\n import org.apache.qpid.jndi.PropertiesFileInitialContextFactory;\n+import org.apache.qpid.server.registry.ApplicationRegistry;\n \n-import javax.naming.Context;\n-import javax.naming.spi.InitialContextFactory;\n-import javax.jms.Queue;\n-import javax.jms.ConnectionFactory;\n-import javax.jms.Session;\n import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n import javax.jms.MessageProducer;\n+import javax.jms.Queue;\n+import javax.jms.Session;\n+import javax.naming.Context;\n+import javax.naming.spi.InitialContextFactory;\n+\n+import java.util.HashMap;\n import java.util.Hashtable;\n-import java.util.List;\n import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n-import java.util.HashMap;\n \n public class VMTestCase extends TestCase\n {\n-    protected long RECEIVE_TIMEOUT = 1000l;    // 1 sec\n-    protected long CLOSE_TIMEOUT = 10000l;     // 10 secs\n+    protected long RECEIVE_TIMEOUT = 1000L; // 1 sec\n+    protected long CLOSE_TIMEOUT = 10000L; // 10 secs\n \n     protected Context _context;\n     protected String _clientID;\n@@ -84,8 +88,8 @@ protected void setUp() throws Exception\n             _brokerlist = \"vm://:1\";\n         }\n \n-        env.put(\"connectionfactory.connection\", \"amqp://guest:guest@\" +\n-                                                _clientID + _virtualhost + \"?brokerlist='\" + _brokerlist + \"'\");\n+        env.put(\"connectionfactory.connection\", \"amqp://guest:guest@\" + _clientID + _virtualhost + \"?brokerlist='\"\n+            + _brokerlist + \"'\");\n \n         for (Map.Entry<String, String> c : _connections.entrySet())\n         {\n@@ -112,6 +116,8 @@ protected void setUp() throws Exception\n     protected void tearDown() throws Exception\n     {\n         TransportConnection.killVMBroker(1);\n+        ApplicationRegistry.remove(1);\n+\n         super.tearDown();\n     }\n ", "filename": "systests/src/main/java/org/apache/qpid/test/VMTestCase.java"}, {"additions": 39, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/Assertion.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/Assertion.java", "sha": "75c1c97999b6d6ded7bbeb33edc97ce7798ce8b5", "changes": 39, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/Assertion.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,39 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+/**\r\n+ * Assertion models an assertion on a test {@link Circuit}.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities\r\n+ * <tr><td> Indicate whether or not the assertion passes when applied.\r\n+ * </table>\r\n+ */\r\n+public interface Assertion\r\n+{\r\n+    /**\r\n+     * Applies the assertion.\r\n+     *\r\n+     * @return <tt>true</tt> if the assertion passes, <tt>false</tt> if it fails.\r\n+     */\r\n+    public boolean apply();\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/Assertion.java"}, {"additions": 66, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/AssertionBase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/AssertionBase.java", "sha": "3d83224513baeb1a997e4f6719fb03251ad47646", "changes": 66, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/AssertionBase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,66 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * AssertionBase is a base class for implenmenting assertions. It provides a mechanism to store error messages, and\r\n+ * report all error messages when its {@link #toString()} method is called.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Collect error messages.\r\n+ * </table>\r\n+ */\r\n+public abstract class AssertionBase implements Assertion\r\n+{\r\n+    /** Holds the error messages. */\r\n+    List<String> errors = new LinkedList<String>();\r\n+\r\n+    /**\r\n+     * Adds an error message to the assertion.\r\n+     *\r\n+     * @param error An error message to add to the assertion.\r\n+     */\r\n+    public void addError(String error)\r\n+    {\r\n+        errors.add(error);\r\n+    }\r\n+\r\n+    /**\r\n+     * Prints all of the error messages in the assertion into a string.\r\n+     *\r\n+     * @return All of the error messages in the assertion as a string.\r\n+     */\r\n+    public String toString()\r\n+    {\r\n+        String result = \"\";\r\n+\r\n+        for (String error : errors)\r\n+        {\r\n+            result += error;\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/AssertionBase.java"}, {"additions": 109, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/Circuit.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/Circuit.java", "sha": "d665acb62c5a432e1773fe90dc0d8ba9d56c144f", "changes": 109, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/Circuit.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,109 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * A Circuit is the basic test unit against which test cases are to be written. A circuit consists of two 'ends', an\r\n+ * instigating 'publisher' end and a more passive 'receivers' end.\r\n+ *\r\n+ * <p/>Once created, the life-cycle of a circuit may be controlled by {@link #start()}ing it, or {@link #close()}ing it.\r\n+ * Once started, the circuit is ready to send messages over. Once closed the circuit can no longer be used.\r\n+ *\r\n+ * <p/>The state of the circuit may be taken with the {@link #check()} method, and asserted against by the\r\n+ * {@link #applyAssertions(java.util.List)} method.\r\n+ *\r\n+ * <p/>There is a default test procedure which may be performed against the circuit. The outline of this procedure is:\r\n+ *\r\n+ * <p/><pre>\r\n+ * Start the circuit.\r\n+ * Send test messages.\r\n+ * Request a status report.\r\n+ * Assert conditions on the publishing end of the circuit.\r\n+ * Assert conditions on the receiving end of the circuit.\r\n+ * Close the circuit.\r\n+ * Pass with no failed assertions or fail with a list of failed assertions.\r\n+ * </pre>\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities\r\n+ * <tr><td> Supply the publishing and receiving ends of a test messaging circuit.\r\n+ * <tr><td> Start the circuit running.\r\n+ * <tr><td> Close the circuit down.\r\n+ * <tr><td> Take a reading of the circuits state.\r\n+ * <tr><td> Apply assertions against the circuits state.\r\n+ * <tr><td> Send test messages over the circuit.\r\n+ * <tr><td> Perform the default test procedue on the circuit.\r\n+ * </table>\r\n+ */\r\n+public interface Circuit\r\n+{\r\n+    /**\r\n+     * Gets the interface on the publishing end of the circuit.\r\n+     *\r\n+     * @return The publishing end of the circuit.\r\n+     */\r\n+    public Publisher getPublisher();\r\n+\r\n+    /**\r\n+     * Gets the interface on the receiving end of the circuit.\r\n+     *\r\n+     * @return The receiving end of the circuit.\r\n+     */\r\n+    public Receiver getReceiver();\r\n+\r\n+    /**\r\n+     * Connects and starts the circuit. After this method is called the circuit is ready to send messages.\r\n+     */\r\n+    public void start();\r\n+\r\n+    /**\r\n+     * Checks the test circuit. The effect of this is to gather the circuits state, for both ends of the circuit,\r\n+     * into a report, against which assertions may be checked.\r\n+     */\r\n+    public void check();\r\n+\r\n+    /**\r\n+     * Closes the circuit. All associated resources are closed.\r\n+     */\r\n+    public void close();\r\n+\r\n+    /**\r\n+     * Applied a list of assertions against the test circuit. The {@link #check()} method should be called before doing\r\n+     * this, to ensure that the circuit has gathered its state into a report to assert against.\r\n+     *\r\n+     * @param assertions The list of assertions to apply to the circuit.\r\n+     *\r\n+     * @return Any assertions that failed.\r\n+     */\r\n+    public List<Assertion> applyAssertions(List<Assertion> assertions);\r\n+\r\n+    /**\r\n+     * Runs the default test procedure against the circuit, and checks that all of the specified assertions hold.\r\n+     *\r\n+     * @param numMessages The number of messages to send using the default test procedure.\r\n+     * @param assertions  The list of assertions to apply.\r\n+     *\r\n+     * @return Any assertions that failed.\r\n+     */\r\n+    public List<Assertion> test(int numMessages, List<Assertion> assertions);\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/Circuit.java"}, {"additions": 77, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/CircuitEnd.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/CircuitEnd.java", "sha": "43c3fa4c6640ec8822b8f599c8c7072ddf20047a", "changes": 77, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/CircuitEnd.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,77 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+import javax.jms.*;\r\n+\r\n+/**\r\n+ * A CircuitEnd is a pair consisting of one message producer and one message consumer, that represents one end of a\r\n+ * test circuit. It is a standard unit of connectivity allowing a full-duplex conversation to be held, provided both\r\n+ * the consumer and producer are instantiated and configured.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities\r\n+ * <tr><td> Provide a message producer for sending messages.\r\n+ * <tr><td> Provide a message consumer for receiving messages.\r\n+ * </table>\r\n+ *\r\n+ * @todo Update the {@link org.apache.qpid.util.ConversationFactory} so that it accepts these as the basic conversation\r\n+ *       connection units.\r\n+ */\r\n+public interface CircuitEnd\r\n+{\r\n+    /**\r\n+     * Gets the message producer at this circuit end point.\r\n+     *\r\n+     * @return The message producer at with this circuit end point.\r\n+     */\r\n+    public MessageProducer getProducer();\r\n+\r\n+    /**\r\n+     * Gets the message consumer at this circuit end point.\r\n+     *\r\n+     * @return The message consumer at this circuit end point.\r\n+     */\r\n+    public MessageConsumer getConsumer();\r\n+\r\n+    /**\r\n+     * Send the specified message over the producer at this end point.\r\n+     *\r\n+     * @param message The message to send.\r\n+     *\r\n+     * @throws JMSException Any JMS exception occuring during the send is allowed to fall through.\r\n+     */\r\n+    public void send(Message message) throws JMSException;\r\n+\r\n+    /**\r\n+     * Gets the JMS Session associated with this circuit end point.\r\n+     *\r\n+     * @return The JMS Session associated with this circuit end point.\r\n+     */\r\n+    public Session getSession();\r\n+\r\n+    /**\r\n+     * Closes the message producers and consumers and the sessions, associated with this circuit end point.\r\n+     *\r\n+     * @throws JMSException Any JMSExceptions occurring during the close are allowed to fall through.\r\n+     */\r\n+    public void close() throws JMSException;\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/CircuitEnd.java"}, {"additions": 119, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/CircuitEndBase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/CircuitEndBase.java", "sha": "54a30d9c6e4ffb0a279663a7fc439d89ceeded82", "changes": 119, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/CircuitEndBase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,119 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+import javax.jms.*;\r\n+\r\n+/**\r\n+ * A CircuitEndBase is a pair consisting of one message producer and one message consumer, that represents one end of a\r\n+ * test circuit. It is a standard unit of connectivity allowing a full-duplex conversation to be held, provided both\r\n+ * the consumer and producer are instantiated and configured.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities\r\n+ * <tr><td> Provide a message producer for sending messages.\r\n+ * <tr><td> Provide a message consumer for receiving messages.\r\n+ * </table>\r\n+ */\r\n+public class CircuitEndBase implements CircuitEnd\r\n+{\r\n+    /** Holds the single message producer. */\r\n+    MessageProducer producer;\r\n+\r\n+    /** Holds the single message consumer. */\r\n+    MessageConsumer consumer;\r\n+\r\n+    /** Holds the session for the circuit end. */\r\n+    Session session;\r\n+\r\n+    /**\r\n+     * Creates a circuit end point on the specified producer, consumer and session.\r\n+     *\r\n+     * @param producer The message producer for the circuit end point.\r\n+     * @param consumer The message consumer for the circuit end point.\r\n+     * @param session  The session for the circuit end point.\r\n+     */\r\n+    public CircuitEndBase(MessageProducer producer, MessageConsumer consumer, Session session)\r\n+    {\r\n+        this.producer = producer;\r\n+        this.consumer = consumer;\r\n+        this.session = session;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the message producer at this circuit end point.\r\n+     *\r\n+     * @return The message producer at with this circuit end point.\r\n+     */\r\n+    public MessageProducer getProducer()\r\n+    {\r\n+        return producer;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the message consumer at this circuit end point.\r\n+     *\r\n+     * @return The message consumer at this circuit end point.\r\n+     */\r\n+    public MessageConsumer getConsumer()\r\n+    {\r\n+        return consumer;\r\n+    }\r\n+\r\n+    /**\r\n+     * Send the specified message over the producer at this end point.\r\n+     *\r\n+     * @param message The message to send.\r\n+     * @throws javax.jms.JMSException Any JMS exception occuring during the send is allowed to fall through.\r\n+     */\r\n+    public void send(Message message) throws JMSException\r\n+    {\r\n+        producer.send(message);\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the JMS Session associated with this circuit end point.\r\n+     *\r\n+     * @return The JMS Session associated with this circuit end point.\r\n+     */\r\n+    public Session getSession()\r\n+    {\r\n+        return session;\r\n+    }\r\n+\r\n+    /**\r\n+     * Closes the message producers and consumers and the sessions, associated with this circuit end point.\r\n+     *\r\n+     * @throws javax.jms.JMSException Any JMSExceptions occurring during the close are allowed to fall through.\r\n+     */\r\n+    public void close() throws JMSException\r\n+    {\r\n+        if (producer != null)\r\n+        {\r\n+            producer.close();\r\n+        }\r\n+\r\n+        if (consumer != null)\r\n+        {\r\n+            consumer.close();\r\n+        }\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/CircuitEndBase.java"}, {"additions": 51, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/DropInTest.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/DropInTest.java", "sha": "12cf0d79d534d3fdd3b9474adb5ab3e9a087fadb", "changes": 51, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/DropInTest.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,51 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+\r\n+/**\r\n+ * A DropIn test is a test case that can accept late joining test clients into a running test. This can be usefull,\r\n+ * for interactive experimentation.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities\r\n+ * <tr><td> Accept late joining test clients.\r\n+ * </table>\r\n+ */\r\n+public interface DropInTest\r\n+{\r\n+    /**\r\n+     * Should accept a late joining client into a running test case. The client will be enlisted with a control message\r\n+     * with the 'CONTROL_TYPE' field set to the value 'LATEJOIN'. It should also provide values for the fields:\r\n+     *\r\n+     * <p/><table>\r\n+     * <tr><td> CLIENT_NAME <td> A unique name for the new client.\r\n+     * <tr><td> CLIENT_PRIVATE_CONTROL_KEY <td> The key for the route on which the client receives its control messages.\r\n+     * </table>\r\n+     *\r\n+     * @param message The late joiners join message.\r\n+     *\r\n+     * @throws JMSException Any JMS Exception are allowed to fall through, indicating that the join failed.\r\n+     */\r\n+    public void lateJoin(Message message) throws JMSException;\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/DropInTest.java"}, {"additions": 151, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/ExceptionMonitor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/ExceptionMonitor.java", "sha": "606f2eabda76185224b6c9345dad27c610068e88", "changes": 151, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/ExceptionMonitor.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,151 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+import javax.jms.ExceptionListener;\r\n+import javax.jms.JMSException;\r\n+\r\n+import java.io.PrintWriter;\r\n+import java.io.StringWriter;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * An exception monitor, listens for JMS exception on a connection or consumer. It record all exceptions that it receives\r\n+ * and provides methods to test the number and type of exceptions received.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Record all exceptions received. <td> {@link ExceptionListener}\r\n+ * </table>\r\n+ */\r\n+public class ExceptionMonitor implements ExceptionListener\r\n+{\r\n+    /** Holds the received exceptions. */\r\n+    List<JMSException> exceptions = new ArrayList<JMSException>();\r\n+\r\n+    /**\r\n+     * Receives incoming exceptions.\r\n+     *\r\n+     * @param e The exception to record.\r\n+     */\r\n+    public void onException(JMSException e)\r\n+    {\r\n+        exceptions.add(e);\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks that no exceptions have been received.\r\n+     *\r\n+     * @return <tt>true</tt> if no exceptions have been received, <tt>false</tt> otherwise.\r\n+     */\r\n+    public boolean assertNoExceptions()\r\n+    {\r\n+        return exceptions.isEmpty();\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks that exactly one exception has been received.\r\n+     *\r\n+     * @return <tt>true</tt> if exactly one exception been received, <tt>false</tt> otherwise.\r\n+     */\r\n+    public boolean assertOneJMSException()\r\n+    {\r\n+        return exceptions.size() == 1;\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks that exactly one exception, with a linked cause of the specified type, has been received.\r\n+     *\r\n+     * @return <tt>true</tt> if exactly one exception, with a linked cause of the specified type, been received,\r\n+     *         <tt>false</tt> otherwise.\r\n+     */\r\n+    public boolean assertOneJMSExceptionWithLinkedCause(Class aClass)\r\n+    {\r\n+        if (exceptions.size() == 1)\r\n+        {\r\n+            JMSException e = exceptions.get(0);\r\n+\r\n+            Exception linkedCause = e.getLinkedException();\r\n+\r\n+            if ((linkedCause != null) && aClass.isInstance(linkedCause))\r\n+            {\r\n+                return true;\r\n+            }\r\n+        }\r\n+\r\n+        return false;\r\n+    }\r\n+\r\n+    /**\r\n+     * Reports the number of exceptions held by this monitor.\r\n+     *\r\n+     * @return The number of exceptions held by this monitor.\r\n+     */\r\n+    public int size()\r\n+    {\r\n+        return exceptions.size();\r\n+    }\r\n+\r\n+    /**\r\n+     * Clears the record of received exceptions.\r\n+     */\r\n+    public void reset()\r\n+    {\r\n+        exceptions = new ArrayList();\r\n+    }\r\n+\r\n+    /**\r\n+     * Provides a dump of the stack traces of all exceptions that this exception monitor was notified of. Mainly\r\n+     * use for debugging/test failure reporting purposes.\r\n+     *\r\n+     * @return A string containing a dump of the stack traces of all exceptions.\r\n+     */\r\n+    public String toString()\r\n+    {\r\n+        String result = \"ExceptionMonitor: holds \" + exceptions.size() + \" exceptions.\\n\\n\";\r\n+\r\n+        for (JMSException ex : exceptions)\r\n+        {\r\n+            result += getStackTrace(ex) + \"\\n\";\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Prints an exception stack trace into a string.\r\n+     *\r\n+     * @param t The throwable to get the stack trace from.\r\n+     *\r\n+     * @return A string containing the throwables stack trace.\r\n+     */\r\n+    public static String getStackTrace(Throwable t)\r\n+    {\r\n+        StringWriter sw = new StringWriter();\r\n+        PrintWriter pw = new PrintWriter(sw, true);\r\n+        t.printStackTrace(pw);\r\n+        pw.flush();\r\n+        sw.flush();\r\n+\r\n+        return sw.toString();\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/ExceptionMonitor.java"}, {"additions": 207, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/FrameworkBaseCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/FrameworkBaseCase.java", "sha": "d6cb0cad13df4ce3d9457a16a1334e2298291996", "changes": 207, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/FrameworkBaseCase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,207 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+import org.apache.log4j.NDC;\r\n+\r\n+import org.apache.qpid.client.transport.TransportConnection;\r\n+import org.apache.qpid.test.framework.sequencers.TestCaseSequencer;\r\n+import org.apache.qpid.server.registry.ApplicationRegistry;\r\n+import org.apache.qpid.test.framework.localcircuit.CircuitImpl;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.Properties;\r\n+\r\n+/**\r\n+ * FrameworkBaseCase provides a starting point for writing test cases against the test framework. Its main purpose is\r\n+ * to provide some convenience methods for testing.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Create and clean up in-vm brokers on every test case.\r\n+ * <tr><td> Produce lists of assertions from assertion creation calls.\r\n+ * <tr><td> Produce JUnit failures from assertion failures.\r\n+ * <tr><td> Convert failed assertions to error messages.\r\n+ * </table>\r\n+ */\r\n+public class FrameworkBaseCase extends TestCase\r\n+{\r\n+    /** Holds the test sequencer to create and run test circuits with. */\r\n+    protected TestCaseSequencer testSequencer = new DefaultTestSequencer();\r\n+\r\n+    /**\r\n+     * Creates a new test case with the specified name.\r\n+     *\r\n+     * @param name The test case name.\r\n+     */\r\n+    public FrameworkBaseCase(String name)\r\n+    {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the test case sequencer that provides test circuit, and test sequence implementations. The sequencer\r\n+     * that this base case returns by default is suitable for running a test circuit with both circuit ends colocated\r\n+     * on the same JVM.\r\n+     *\r\n+     * @return The test case sequencer.\r\n+     */\r\n+    protected TestCaseSequencer getTestSequencer()\r\n+    {\r\n+        return testSequencer;\r\n+    }\r\n+\r\n+    /**\r\n+     * Overrides the default test sequencer. Test decorators can use this to supply distributed test sequencers or other\r\n+     * test sequencer specializations.\r\n+     *\r\n+     * @param sequencer The new test sequencer.\r\n+     */\r\n+    public void setTestSequencer(TestCaseSequencer sequencer)\r\n+    {\r\n+        this.testSequencer = sequencer;\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a list of assertions.\r\n+     *\r\n+     * @param asserts The assertions to compile in a list.\r\n+     *\r\n+     * @return A list of assertions.\r\n+     */\r\n+    protected List<Assertion> assertionList(Assertion... asserts)\r\n+    {\r\n+        List<Assertion> result = new ArrayList<Assertion>();\r\n+\r\n+        for (Assertion assertion : asserts)\r\n+        {\r\n+            result.add(assertion);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Generates a JUnit assertion exception (failure) if any assertions are passed into this method, also concatenating\r\n+     * all of the error messages in the assertions together to form an error message to diagnose the test failure with.\r\n+     *\r\n+     * @param asserts The list of failed assertions.\r\n+     */\r\n+    protected void assertNoFailures(List<Assertion> asserts)\r\n+    {\r\n+        // Check if there are no assertion failures, and return without doing anything if so.\r\n+        if ((asserts == null) || asserts.isEmpty())\r\n+        {\r\n+            return;\r\n+        }\r\n+\r\n+        // Compile all of the assertion failure messages together.\r\n+        String errorMessage = assertionsToString(asserts);\r\n+\r\n+        // Fail with the error message from all of the assertions.\r\n+        fail(errorMessage);\r\n+    }\r\n+\r\n+    /**\r\n+     * Converts a list of failed assertions into an error message.\r\n+     *\r\n+     * @param asserts The failed assertions.\r\n+     *\r\n+     * @return The error message.\r\n+     */\r\n+    protected String assertionsToString(List<Assertion> asserts)\r\n+    {\r\n+        String errorMessage = \"\";\r\n+\r\n+        for (Assertion assertion : asserts)\r\n+        {\r\n+            errorMessage += assertion.toString() + \"\\n\";\r\n+        }\r\n+\r\n+        return errorMessage;\r\n+    }\r\n+\r\n+    /**\r\n+     * Ensures that the in-vm broker is created and initialized.\r\n+     *\r\n+     * @throws Exception Any exceptions allowed to fall through and fail the test.\r\n+     */\r\n+    protected void setUp() throws Exception\r\n+    {\r\n+        NDC.push(getName());\r\n+\r\n+        // Ensure that the in-vm broker is created.\r\n+        TransportConnection.createVMBroker(1);\r\n+    }\r\n+\r\n+    /**\r\n+     * Ensures that the in-vm broker is cleaned up after each test run.\r\n+     */\r\n+    protected void tearDown()\r\n+    {\r\n+        try\r\n+        {\r\n+            // Ensure that the in-vm broker is cleaned up so that the next test starts afresh.\r\n+            TransportConnection.killVMBroker(1);\r\n+            ApplicationRegistry.remove(1);\r\n+        }\r\n+        finally\r\n+        {\r\n+            NDC.pop();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * DefaultTestSequencer is a test sequencer that creates test circuits with publishing and receiving ends rooted\r\n+     * on the same JVM.\r\n+     */\r\n+    public class DefaultTestSequencer implements TestCaseSequencer\r\n+    {\r\n+        /**\r\n+         * Holds a test coordinating conversation with the test clients. This should consist of assigning the test roles,\r\n+         * begining the test and gathering the test reports from the participants.\r\n+         *\r\n+         * @param testCircuit    The test circuit.\r\n+         * @param assertions     The list of assertions to apply to the test circuit.\r\n+         * @param testProperties The test case definition.\r\n+         */\r\n+        public void sequenceTest(Circuit testCircuit, List<Assertion> assertions, Properties testProperties)\r\n+        {\r\n+            assertNoFailures(testCircuit.test(1, assertions));\r\n+        }\r\n+\r\n+        /**\r\n+         * Creates a test circuit for the test, configered by the test parameters specified.\r\n+         *\r\n+         * @param testProperties The test parameters.\r\n+         * @return A test circuit.\r\n+         */\r\n+        public Circuit createCircuit(ParsedProperties testProperties)\r\n+        {\r\n+            return CircuitImpl.createCircuit(testProperties);\r\n+        }\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/FrameworkBaseCase.java"}, {"additions": 46, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/MessageMonitor.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/MessageMonitor.java", "sha": "873f876012de388b18f5011768ff162b5968cb7d", "changes": 46, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/MessageMonitor.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,46 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+import javax.jms.Message;\r\n+import javax.jms.MessageListener;\r\n+\r\n+/**\r\n+ * MessageMonitor is used to record information about messages received. This will provide methods to check various\r\n+ * properties, such as the type, number and content of messages received in order to verify the correct behaviour of\r\n+ * tests.\r\n+ *\r\n+ * <p/>At the moment this monitor does not do anything.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * </table>\r\n+ */\r\n+public class MessageMonitor implements MessageListener\r\n+{\r\n+    /**\r\n+     * Handles received messages. Does Nothing.\r\n+     *\r\n+     * @param message The message. Ignored.\r\n+     */\r\n+    public void onMessage(Message message)\r\n+    { }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/MessageMonitor.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/MessagingTestConfigProperties.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/MessagingTestConfigProperties.java", "previous_filename": "systests/src/main/java/org/apache/qpid/server/exchange/MessagingTestConfigProperties.java", "sha": "3cc4a92886927508f8457a33e8e9ef4d2fe77ad1", "changes": 20, "status": "renamed", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/MessagingTestConfigProperties.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,7 +18,7 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.server.exchange;\r\n+package org.apache.qpid.test.framework;\r\n \r\n import org.apache.qpid.jms.Session;\r\n \r\n@@ -48,7 +48,7 @@\n  * <tr><td> destinationCount <td> 1        <td> The number of receivers listening to the pings.\r\n  * <tr><td> timeout          <td> 30000    <td> In milliseconds. The timeout to stop waiting for replies.\r\n  * <tr><td> commitBatchSize  <td> 1        <td> The number of messages per transaction in transactional mode.\r\n- * <tr><td> uniqueDests      <td> true     <td> Whether each receiver only listens to one ping destination or all.\r\n+ * <tr><td> uniqueDests      <td> true     <td> Whether each receivers only listens to one ping destination or all.\r\n  * <tr><td> durableDests     <td> false    <td> Whether or not durable destinations are used.\r\n  * <tr><td> ackMode          <td> AUTO_ACK <td> The message acknowledgement mode. Possible values are:\r\n  *                                               0 - SESSION_TRANSACTED\r\n@@ -81,12 +81,6 @@\n     /** Defines the class to use as the initial context factory by default. */\r\n     public static final String INITIAL_CONTEXT_FACTORY_DEFAULT = \"org.apache.qpid.jndi.PropertiesFileInitialContextFactory\";\r\n \r\n-    /** Holds the name of the default connection factory configuration property. */\r\n-    public static final String CONNECTION_PROPNAME = \"connectionfactory.broker\";\r\n-\r\n-    /** Defeins the default connection configuration. */\r\n-    public static final String CONNECTION_DEFAULT = \"amqp://guest:guest@clientid/?brokerlist='vm://:1'\";\r\n-\r\n     /** Holds the name of the property to get the test broker url from. */\r\n     public static final String BROKER_PROPNAME = \"qpid.test.broker\";\r\n \r\n@@ -125,16 +119,16 @@\n     /** Holds the default value of the publisher consumer flag. */\r\n     public static final boolean PUBLISHER_CONSUMER_BIND_DEFAULT = false;\r\n \r\n-    /** Holds the name of the property to get the bind receiver procuder flag from. */\r\n+    /** Holds the name of the property to get the bind receivers procuder flag from. */\r\n     public static final String RECEIVER_PRODUCER_BIND_PROPNAME = \"receiverProducerBind\";\r\n \r\n-    /** Holds the default value of the receiver producer flag. */\r\n+    /** Holds the default value of the receivers producer flag. */\r\n     public static final boolean RECEIVER_PRODUCER_BIND_DEFAULT = false;\r\n \r\n-    /** Holds the name of the property to get the bind receiver procuder flag from. */\r\n+    /** Holds the name of the property to get the bind receivers procuder flag from. */\r\n     public static final String RECEIVER_CONSUMER_BIND_PROPNAME = \"receiverConsumerBind\";\r\n \r\n-    /** Holds the default value of the receiver consumer flag. */\r\n+    /** Holds the default value of the receivers consumer flag. */\r\n     public static final boolean RECEIVER_CONSUMER_BIND_DEFAULT = true;\r\n \r\n     /** Holds the name of the property to get the destination name root from. */\r\n@@ -275,7 +269,7 @@\n     static\r\n     {\r\n         defaults.setPropertyIfNull(INITIAL_CONTEXT_FACTORY_PROPNAME, INITIAL_CONTEXT_FACTORY_DEFAULT);\r\n-        defaults.setPropertyIfNull(CONNECTION_PROPNAME, CONNECTION_DEFAULT);\r\n+        // defaults.setPropertyIfNull(CONNECTION_PROPNAME, CONNECTION_DEFAULT);\r\n         defaults.setPropertyIfNull(MESSAGE_SIZE_PROPNAME, MESSAGE_SIZE_DEAFULT);\r\n         defaults.setPropertyIfNull(PUBLISHER_PRODUCER_BIND_PROPNAME, PUBLISHER_PRODUCER_BIND_DEFAULT);\r\n         defaults.setPropertyIfNull(PUBLISHER_CONSUMER_BIND_PROPNAME, PUBLISHER_CONSUMER_BIND_DEFAULT);\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/MessagingTestConfigProperties.java"}, {"additions": 56, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/Publisher.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/Publisher.java", "sha": "59aa9065dd294ca8c206946410d2291e504f4a5c", "changes": 56, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/Publisher.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,56 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+/**\r\n+ * A Publisher is a {@link CircuitEnd} that represents one end of a test circuit. Its main purpose is to\r\n+ * provide assertions that can be applied to test the behaviour of the publisher.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities\r\n+ * <tr><td> Provide assertion that the publisher received no exceptions.\r\n+ * <tr><td> Provide assertion that the publisher received a no consumers error code.\r\n+ * <tr><td> Provide assertion that the publisher received a no route error code.\r\n+ * </table>\r\n+ */\r\n+public interface Publisher extends CircuitEnd\r\n+{\r\n+    /**\r\n+     * Provides an assertion that the publisher encountered no exceptions.\r\n+     *\r\n+     * @return An assertion that the publisher encountered no exceptions.\r\n+     */\r\n+    public Assertion noExceptionsAssertion();\r\n+\r\n+    /**\r\n+     * Provides an assertion that the publisher got a no consumers exception on every message.\r\n+     *\r\n+     * @return An assertion that the publisher got a no consumers exception on every message.\r\n+     */\r\n+    public Assertion noConsumersAssertion();\r\n+\r\n+    /**\r\n+     * Provides an assertion that the publisher got a no rout exception on every message.\r\n+     *\r\n+     * @return An assertion that the publisher got a no rout exception on every message.\r\n+     */\r\n+    public Assertion noRouteAssertion();\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/Publisher.java"}, {"additions": 48, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/Receiver.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/Receiver.java", "sha": "6e01a7ea4f8733e253f99ab20e40c0e76d38001e", "changes": 48, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/Receiver.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,48 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+/**\r\n+ * A Receiver is a {@link CircuitEnd} that represents one end of a test circuit. Its main purpose is to\r\n+ * provide assertions that can be applied to test the behaviour of the receivers.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities\r\n+ * <tr><td> Provide assertion that the receivers received no exceptions.\r\n+ * <tr><td> Provide assertion that the receivers received all test messages sent to it.\r\n+ * </table>\r\n+ */\r\n+public interface Receiver extends CircuitEnd\r\n+{\r\n+    /**\r\n+     * Provides an assertion that the receivers encountered no exceptions.\r\n+     *\r\n+     * @return An assertion that the receivers encountered no exceptions.\r\n+     */\r\n+    public Assertion noExceptionsAssertion();\r\n+\r\n+    /**\r\n+     * Provides an assertion that the receivers got all messages that were sent to it.\r\n+     *\r\n+     * @return An assertion that the receivers got all messages that were sent to it.\r\n+     */\r\n+    public Assertion allMessagesAssertion();\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/Receiver.java"}, {"additions": 7, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/TestClientDetails.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/TestClientDetails.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/TestClientDetails.java", "sha": "1e5807cba8151c727adf4fcc3f9f60196e1729f7", "changes": 15, "status": "renamed", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/TestClientDetails.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,11 +18,15 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.interop.coordinator;\r\n+package org.apache.qpid.test.framework;\r\n \r\n /**\r\n+ * TestClientDetails is used to encapsulate information about an interop test client. It pairs together the unique\r\n+ * name of the client, and the route on which it listens to its control messages.\r\n+ *\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n  * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Record test clients control addresses together with their names.\r\n  * </table>\r\n  */\r\n public class TestClientDetails\r\n@@ -56,13 +60,8 @@ public boolean equals(Object o)\n \r\n         final TestClientDetails testClientDetails = (TestClientDetails) o;\r\n \r\n-        if ((clientName != null) ? (!clientName.equals(testClientDetails.clientName))\r\n-                                 : (testClientDetails.clientName != null))\r\n-        {\r\n-            return false;\r\n-        }\r\n-\r\n-        return true;\r\n+        return !((clientName != null) ? (!clientName.equals(testClientDetails.clientName))\r\n+                                      : (testClientDetails.clientName != null));\r\n     }\r\n \r\n     /**\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/TestClientDetails.java"}, {"additions": 156, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/TestUtils.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/TestUtils.java", "sha": "8b3e72ef087ef01daf15009bd3b2071fc97f0005", "changes": 156, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/TestUtils.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,156 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import static org.apache.qpid.test.framework.MessagingTestConfigProperties.*;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n+\r\n+import javax.jms.Connection;\r\n+import javax.jms.ConnectionFactory;\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+import javax.naming.Context;\r\n+import javax.naming.InitialContext;\r\n+import javax.naming.NamingException;\r\n+\r\n+import java.util.Properties;\r\n+import java.util.Map;\r\n+\r\n+/**\r\n+ * TestUtils provides static helper methods that are usefull for writing tests against QPid.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Create connections from test properties. <td> {@link MessagingTestConfigProperties}\r\n+ * <tr><td> Inject a short pause in a test.\r\n+ * </table>\r\n+ */\r\n+public class TestUtils\r\n+{\r\n+    /** Used for debugging. */\r\n+    private static Logger log = Logger.getLogger(TestUtils.class);\r\n+\r\n+    /**\r\n+     * Establishes a JMS connection using a set of properties and qpids built in JNDI implementation. This is a simple\r\n+     * convenience method for code that does not anticipate handling connection failures. All exceptions that indicate\r\n+     * that the connection has failed, are wrapped as rutime exceptions, presumably handled by a top level failure\r\n+     * handler.\r\n+     *\r\n+     * <p/>This utility makes use of the following test parameters from {@link MessagingTestConfigProperties} to control\r\n+     * the connection creation:\r\n+     *\r\n+     * <p/><table>\r\n+     * <tr><td> {@link MessagingTestConfigProperties#USERNAME_PROPNAME} <td> The username.\r\n+     * <tr><td> {@link MessagingTestConfigProperties#PASSWORD_PROPNAME} <td> The password.\r\n+     * <tr><td> {@link MessagingTestConfigProperties#VIRTUAL_HOST_PROPNAME} <td> The virtual host name.\r\n+     * <tr><td> {@link MessagingTestConfigProperties#BROKER_PROPNAME} <td> The broker URL.\r\n+     * <tr><td> {@link MessagingTestConfigProperties#CONNECTION_NAME} <td> The broker name in the initial context.\r\n+     *\r\n+     * @param messagingProps Connection properties as defined in {@link MessagingTestConfigProperties}.\r\n+     *\r\n+     * @return A JMS conneciton.\r\n+     */\r\n+    public static Connection createConnection(ParsedProperties messagingProps)\r\n+    {\r\n+        log.debug(\"public static Connection createConnection(ParsedProperties messagingProps = \" + messagingProps\r\n+            + \"): called\");\r\n+\r\n+        try\r\n+        {\r\n+            // Extract the configured connection properties from the test configuration.\r\n+            String conUsername = messagingProps.getProperty(USERNAME_PROPNAME);\r\n+            String conPassword = messagingProps.getProperty(PASSWORD_PROPNAME);\r\n+            String virtualHost = messagingProps.getProperty(VIRTUAL_HOST_PROPNAME);\r\n+            String brokerUrl = messagingProps.getProperty(BROKER_PROPNAME);\r\n+\r\n+            // Create the broker connection url.\r\n+            String connectionString =\r\n+                \"amqp://\" + conUsername + \":\" + conPassword + \"@clientid/\" + ((virtualHost != null) ? virtualHost : \"\")\r\n+                + \"?brokerlist='\" + brokerUrl + \"'\";\r\n+\r\n+            // Create properties to create the initial context from, and inject the connection factory configuration\r\n+            // for the defined connection name into it.\r\n+            messagingProps.setProperty(\"connectionfactory.\" + CONNECTION_NAME, connectionString);\r\n+\r\n+            Context ctx = new InitialContext(messagingProps);\r\n+\r\n+            ConnectionFactory cf = (ConnectionFactory) ctx.lookup(CONNECTION_NAME);\r\n+            Connection connection = cf.createConnection();\r\n+\r\n+            return connection;\r\n+        }\r\n+        catch (NamingException e)\r\n+        {\r\n+            throw new RuntimeException(\"Got JNDI NamingException whilst looking up the connection factory.\", e);\r\n+        }\r\n+        catch (JMSException e)\r\n+        {\r\n+            throw new RuntimeException(\"Could not establish connection due to JMSException.\", e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Pauses for the specified length of time. In the event of failing to pause for at least that length of time\r\n+     * due to interuption of the thread, a RutimeException is raised to indicate the failure. The interupted status\r\n+     * of the thread is restores in that case. This method should only be used when it is expected that the pause\r\n+     * will be succesfull, for example in test code that relies on inejecting a pause.\r\n+     *\r\n+     * @param t The minimum time to pause for in milliseconds.\r\n+     */\r\n+    public static void pause(long t)\r\n+    {\r\n+        try\r\n+        {\r\n+            Thread.sleep(t);\r\n+        }\r\n+        catch (InterruptedException e)\r\n+        {\r\n+            // Restore the interrupted status\r\n+            Thread.currentThread().interrupt();\r\n+\r\n+            throw new RuntimeException(\"Failed to generate the requested pause length.\", e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets properties of different types on a JMS Message.\r\n+     *\r\n+     * @param message    The message to set properties on.\r\n+     * @param properties The property name/value pairs to set.\r\n+     *\r\n+     * @throws javax.jms.JMSException All underlying JMSExceptions are allowed to fall through.\r\n+     *\r\n+     * @todo Move this helper method somewhere else. For example, TestUtils.\r\n+     */\r\n+    public static void setPropertiesOnMessage(Message message, Map<Object, Object> properties) throws JMSException\r\n+    {\r\n+        for (Map.Entry<Object, Object> entry : properties.entrySet())\r\n+        {\r\n+            String name = entry.getKey().toString();\r\n+            Object value = entry.getValue();\r\n+\r\n+            message.setObjectProperty(name, value);\r\n+        }\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/TestUtils.java"}, {"additions": 116, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedcircuit/DistributedCircuitImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedcircuit/DistributedCircuitImpl.java", "sha": "aadd378aed2217fb61dd5630f3e6f3977404fe9e", "changes": 116, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/distributedcircuit/DistributedCircuitImpl.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,116 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.distributedcircuit;\r\n+\r\n+import org.apache.qpid.test.framework.Assertion;\r\n+import org.apache.qpid.test.framework.Circuit;\r\n+import org.apache.qpid.test.framework.Publisher;\r\n+import org.apache.qpid.test.framework.Receiver;\r\n+\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * DistributedCircuitImpl is a distributed implementation of the test {@link Circuit}. Many publishers and receivers\r\n+ * accross multiple machines may be combined to form a single test circuit. The test circuit extracts reports from\r\n+ * all of its publishers and receivers, and applies its assertions to these reports.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Supply the publishing and receiving ends of a test messaging circuit.\r\n+ * <tr><td> Start the circuit running.\r\n+ * <tr><td> Close the circuit down.\r\n+ * <tr><td> Take a reading of the circuits state.\r\n+ * <tr><td> Apply assertions against the circuits state.\r\n+ * <tr><td> Send test messages over the circuit.\r\n+ * <tr><td> Perform the default test procedue on the circuit.\r\n+ * </table>\r\n+ */\r\n+public class DistributedCircuitImpl implements Circuit\r\n+{\r\n+    /**\r\n+     * Gets the interface on the publishing end of the circuit.\r\n+     *\r\n+     * @return The publishing end of the circuit.\r\n+     */\r\n+    public Publisher getPublisher()\r\n+    {\r\n+        throw new RuntimeException(\"Not Implemented.\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the interface on the receiving end of the circuit.\r\n+     *\r\n+     * @return The receiving end of the circuit.\r\n+     */\r\n+    public Receiver getReceiver()\r\n+    {\r\n+        throw new RuntimeException(\"Not Implemented.\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Connects and starts the circuit. After this method is called the circuit is ready to send messages.\r\n+     */\r\n+    public void start()\r\n+    {\r\n+        throw new RuntimeException(\"Not Implemented.\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks the test circuit. The effect of this is to gather the circuits state, for both ends of the circuit,\r\n+     * into a report, against which assertions may be checked.\r\n+     */\r\n+    public void check()\r\n+    {\r\n+        throw new RuntimeException(\"Not Implemented.\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Closes the circuit. All associated resources are closed.\r\n+     */\r\n+    public void close()\r\n+    {\r\n+        throw new RuntimeException(\"Not Implemented.\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Applied a list of assertions against the test circuit. The {@link #check()} method should be called before doing\r\n+     * this, to ensure that the circuit has gathered its state into a report to assert against.\r\n+     *\r\n+     * @param assertions The list of assertions to apply.\r\n+     * @return Any assertions that failed.\r\n+     */\r\n+    public List<Assertion> applyAssertions(List<Assertion> assertions)\r\n+    {\r\n+        throw new RuntimeException(\"Not Implemented.\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Runs the default test procedure against the circuit, and checks that all of the specified assertions hold.\r\n+     *\r\n+     * @param numMessages The number of messages to send using the default test procedure.\r\n+     * @param assertions  The list of assertions to apply.\r\n+     * @return Any assertions that failed.\r\n+     */\r\n+    public List<Assertion> test(int numMessages, List<Assertion> assertions)\r\n+    {\r\n+        throw new RuntimeException(\"Not Implemented.\");\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/distributedcircuit/DistributedCircuitImpl.java"}, {"additions": 176, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/Coordinator.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/Coordinator.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/Coordinator.java", "sha": "7d28aee432128a1a6c39b13340ace94488a9c982", "changes": 242, "status": "renamed", "deletions": 66, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/Coordinator.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,28 +18,34 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.interop.coordinator;\r\n+package org.apache.qpid.test.framework.distributedtesting;\r\n \r\n-import java.io.*;\r\n-import java.util.*;\r\n-import java.util.concurrent.LinkedBlockingQueue;\r\n-import javax.jms.*;\r\n import junit.framework.Test;\r\n import junit.framework.TestResult;\r\n import junit.framework.TestSuite;\r\n+\r\n import org.apache.log4j.Logger;\r\n-import org.apache.qpid.interop.coordinator.testcases.CoordinatingTestCase1DummyRun;\r\n-import org.apache.qpid.interop.coordinator.testcases.CoordinatingTestCase2BasicP2P;\r\n-import org.apache.qpid.interop.coordinator.testcases.CoordinatingTestCase3BasicPubSub;\r\n-import org.apache.qpid.interop.testclient.TestClient;\r\n-import org.apache.qpid.util.CommandLineParser;\r\n+\r\n+import org.apache.qpid.test.framework.MessagingTestConfigProperties;\r\n+import org.apache.qpid.test.framework.TestUtils;\r\n+import org.apache.qpid.test.framework.TestClientDetails;\r\n+import org.apache.qpid.test.framework.listeners.XMLTestListener;\r\n import org.apache.qpid.util.ConversationFactory;\r\n import org.apache.qpid.util.PrettyPrintingUtils;\r\n+\r\n import uk.co.thebadgerset.junit.extensions.TKTestResult;\r\n import uk.co.thebadgerset.junit.extensions.TKTestRunner;\r\n import uk.co.thebadgerset.junit.extensions.WrappedSuiteTestDecorator;\r\n+import uk.co.thebadgerset.junit.extensions.util.CommandLineParser;\r\n+import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n import uk.co.thebadgerset.junit.extensions.util.TestContextProperties;\r\n \r\n+import javax.jms.*;\r\n+\r\n+import java.io.*;\r\n+import java.util.*;\r\n+import java.util.concurrent.LinkedBlockingQueue;\r\n+\r\n /**\r\n  * <p/>Implements the coordinator client described in the interop testing specification\r\n  * (http://cwiki.apache.org/confluence/display/qpid/Interop+Testing+Specification). This coordinator is built on\r\n@@ -48,16 +54,41 @@\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n  * <tr><th> Responsibilities <th> Collaborations\r\n  * <tr><td> Find out what test clients are available. <td> {@link ConversationFactory}\r\n- * <tr><td> Decorate available tests to run all available clients. <td> {@link InvitingTestDecorator}\r\n+ * <tr><td> Decorate available tests to run all available clients. <td> {@link DistributedTestDecorator}\r\n  * <tr><td> Attach XML test result logger.\r\n  * <tr><td> Terminate the interop testing framework.\r\n  * </table>\r\n+ *\r\n+ * @todo Should accumulate failures over all tests, and return with success or fail code based on all results. May need\r\n+ *       to write a special TestResult to do this properly. At the moment only the last one used will be tested for\r\n+ *       errors, as the start method creates a fresh one for each test case run.\r\n+ *\r\n+ * @todo Remove hard coding of test cases and put on command line instead.\r\n  */\r\n public class Coordinator extends TKTestRunner\r\n {\r\n+    /** Used for debugging. */\r\n     private static final Logger log = Logger.getLogger(Coordinator.class);\r\n \r\n-    public static final String DEFAULT_CONNECTION_PROPS_RESOURCE = \"org/apache/qpid/interop/connection.properties\";\r\n+    /** Used for reporting to the console. */\r\n+    private static final Logger console = Logger.getLogger(\"CONSOLE\");\r\n+\r\n+    /** Defines the possible distributed test engines available to run coordinated test cases with. */\r\n+    public enum TestEngine\r\n+    {\r\n+        /** Specifies the interop test engine. This tests all available clients in pairs. */\r\n+        INTEROP,\r\n+\r\n+        /** Specifies the fanout test engine. This sets up one publisher role, and many reciever roles. */\r\n+        FANOUT\r\n+    }\r\n+\r\n+    /**\r\n+     * Holds the test context properties that provides the default test parameters, plus command line overrides.\r\n+     * This is initialized with the default test parameters, to which command line overrides may be applied.\r\n+     */\r\n+    protected static ParsedProperties testContextProperties =\r\n+        TestContextProperties.getInstance(MessagingTestConfigProperties.defaults);\r\n \r\n     /** Holds the URL of the broker to coordinate the tests on. */\r\n     protected String brokerUrl;\r\n@@ -81,21 +112,32 @@\n     protected String currentTestClassName;\r\n \r\n     /** Holds the path of the directory to output test results too, if one is defined. */\r\n-    protected static String _reportDir;\r\n+    protected String reportDir;\r\n+\r\n+    /** Holds the coordinating test engine type to run the tests through. */\r\n+    protected TestEngine engine;\r\n+\r\n+    /** Flag that indicates that all test clients should be terminated upon completion of the test cases. */\r\n+    protected boolean terminate;\r\n \r\n     /**\r\n      * Creates an interop test coordinator on the specified broker and virtual host.\r\n      *\r\n      * @param brokerUrl   The URL of the broker to connect to.\r\n      * @param virtualHost The virtual host to run all tests on. Optional, may be <tt>null</tt>.\r\n+     * @param reportDir   The directory to write out test results to.\r\n+     * @param engine      The distributed test engine type to run the tests with.\r\n      */\r\n-    public Coordinator(String brokerUrl, String virtualHost)\r\n+    public Coordinator(String brokerUrl, String virtualHost, String reportDir, TestEngine engine, boolean terminate)\r\n     {\r\n         log.debug(\"Coordinator(String brokerUrl = \" + brokerUrl + \", String virtualHost = \" + virtualHost + \"): called\");\r\n \r\n         // Retain the connection parameters.\r\n         this.brokerUrl = brokerUrl;\r\n         this.virtualHost = virtualHost;\r\n+        this.reportDir = reportDir;\r\n+        this.engine = engine;\r\n+        this.terminate = terminate;\r\n     }\r\n \r\n     /**\r\n@@ -104,50 +146,101 @@ public Coordinator(String brokerUrl, String virtualHost)\n      * <p/><table>\r\n      * <tr><td> -b         <td> The broker URL.   <td> Mandatory.\r\n      * <tr><td> -h         <td> The virtual host. <td> Optional.\r\n-     * <tr><td> name=value <td> Trailing argument define name/value pairs. Added to system properties. <td> Optional.\r\n+     * <tr><td> -o         <td> The directory to output test results to. <td> Optional.\r\n+     * <tr><td> -e         <td> The type of test distribution engine to use. <td> Optional. One of: interop, fanout.\r\n+     * <tr><td> ...        <td> Free arguments. The distributed test cases to run.\r\n+     *                     <td> Mandatory. At least one must be defined.\r\n+     * <tr><td> name=value <td> Trailing argument define name/value pairs. Added to the test contenxt properties.\r\n+     *                     <td> Optional.\r\n      * </table>\r\n      *\r\n      * @param args The command line arguments.\r\n      */\r\n     public static void main(String[] args)\r\n     {\r\n+        console.info(\"Qpid Distributed Test Coordinator.\");\r\n+\r\n+        // Override the default broker url to be localhost:5672.\r\n+        testContextProperties.setProperty(MessagingTestConfigProperties.BROKER_PROPNAME, \"tcp://localhost:5672\");\r\n+\r\n         try\r\n         {\r\n             // Use the command line parser to evaluate the command line with standard handling behaviour (print errors\r\n-            // and usage then exit if there are errors).\r\n-            Properties options =\r\n-                    CommandLineParser.processCommandLine(args,\r\n-                                                         new CommandLineParser(\r\n-                                                                 new String[][]\r\n-                                                                         {\r\n-                                                                                 {\"b\", \"The broker URL.\", \"broker\", \"false\"},\r\n-                                                                                 {\"h\", \"The virtual host to use.\", \"virtual host\", \"false\"},\r\n-                                                                                 {\"o\", \"The name of the directory to output test timings to.\", \"dir\", \"false\"}\r\n-                                                                         }));\r\n+            // and usage then exist if there are errors).\r\n+            // Any options and trailing name=value pairs are also injected into the test context properties object,\r\n+            // to override any defaults that may have been set up.\r\n+            ParsedProperties options =\r\n+                new ParsedProperties(CommandLineParser.processCommandLine(args,\r\n+                        new CommandLineParser(\r\n+                            new String[][]\r\n+                            {\r\n+                                { \"b\", \"The broker URL.\", \"broker\", \"false\" },\r\n+                                { \"h\", \"The virtual host to use.\", \"virtual host\", \"false\" },\r\n+                                { \"o\", \"The name of the directory to output test timings to.\", \"dir\", \"false\" },\r\n+                                {\r\n+                                    \"e\", \"The test execution engine to use. Default is interop.\", \"engine\", \"interop\",\r\n+                                    \"^interop$|^fanout$\", \"true\"\r\n+                                },\r\n+                                { \"t\", \"Terminate test clients on completion of tests.\", \"flag\", \"false\" }\r\n+                            }), testContextProperties));\r\n \r\n             // Extract the command line options.\r\n             String brokerUrl = options.getProperty(\"b\");\r\n             String virtualHost = options.getProperty(\"h\");\r\n-            _reportDir = options.getProperty(\"o\");\r\n-            _reportDir = (_reportDir == null) ? \".\" : _reportDir;\r\n+            String reportDir = options.getProperty(\"o\");\r\n+            reportDir = (reportDir == null) ? \".\" : reportDir;\r\n+            String testEngine = options.getProperty(\"e\");\r\n+            TestEngine engine = \"fanout\".equals(testEngine) ? TestEngine.FANOUT : TestEngine.INTEROP;\r\n+            boolean terminate = options.getPropertyAsBoolean(\"t\");\r\n+\r\n+            // If broker or virtual host settings were specified as command line options, override the defaults in the\r\n+            // test context properties with them.\r\n+\r\n+            // Collection all of the test cases to be run.\r\n+            Collection<Class<? extends DistributedTestCase>> testCaseClasses =\r\n+                new ArrayList<Class<? extends DistributedTestCase>>();\r\n \r\n             // Scan for available test cases using a classpath scanner.\r\n-            Collection<Class<? extends CoordinatingTestCase>> testCaseClasses =\r\n-                    new ArrayList<Class<? extends CoordinatingTestCase>>();\r\n-            // ClasspathScanner.getMatches(CoordinatingTestCase.class, \"^Test.*\", true);\r\n+            // ClasspathScanner.getMatches(InteropTestCase.class, \"^Test.*\", true);\r\n+\r\n             // Hard code the test classes till the classpath scanner is fixed.\r\n-            Collections.addAll(testCaseClasses,\r\n-                               CoordinatingTestCase1DummyRun.class,\r\n-                               CoordinatingTestCase2BasicP2P.class,\r\n-                               CoordinatingTestCase3BasicPubSub.class);\r\n+            // Collections.addAll(testCaseClasses, InteropTestCase1DummyRun.class, InteropTestCase2BasicP2P.class,\r\n+            // InteropTestCase3BasicPubSub.class);\r\n+\r\n+            // Parse all of the free arguments as test cases to run.\r\n+            for (int i = 1; true; i++)\r\n+            {\r\n+                String nextFreeArg = options.getProperty(Integer.toString(i));\r\n+\r\n+                // Terminate the loop once all free arguments have been consumed.\r\n+                if (nextFreeArg == null)\r\n+                {\r\n+                    break;\r\n+                }\r\n+\r\n+                try\r\n+                {\r\n+                    Class nextClass = Class.forName(nextFreeArg);\r\n+\r\n+                    if (DistributedTestCase.class.isAssignableFrom(nextClass))\r\n+                    {\r\n+                        testCaseClasses.add(nextClass);\r\n+                        console.info(\"Found distributed test case: \" + nextFreeArg);\r\n+                    }\r\n+                }\r\n+                catch (ClassNotFoundException e)\r\n+                {\r\n+                    console.info(\"Unable to instantiate the test case: \" + nextFreeArg + \".\");\r\n+                }\r\n+            }\r\n \r\n             // Check that some test classes were actually found.\r\n             if (testCaseClasses.isEmpty())\r\n             {\r\n-                throw new RuntimeException(\r\n-                        \"No test classes implementing CoordinatingTestCase were found on the class path.\");\r\n+                throw new RuntimeException(\"No test cases implementing InteropTestCase were specified on the command line.\");\r\n             }\r\n \r\n+            // Extract the names of all the test classes, to pass to the start method.\r\n             int i = 0;\r\n             String[] testClassNames = new String[testCaseClasses.size()];\r\n \r\n@@ -157,13 +250,12 @@ public static void main(String[] args)\n             }\r\n \r\n             // Create a coordinator and begin its test procedure.\r\n-            Coordinator coordinator = new Coordinator(brokerUrl, virtualHost);\r\n-\r\n-            boolean failure = false;\r\n+            Coordinator coordinator = new Coordinator(brokerUrl, virtualHost, reportDir, engine, terminate);\r\n \r\n             TestResult testResult = coordinator.start(testClassNames);\r\n \r\n-            if (failure)\r\n+            // Return different error codes, depending on whether or not there were test failures.\r\n+            if (testResult.failureCount() > 0)\r\n             {\r\n                 System.exit(FAILURE_EXIT);\r\n             }\r\n@@ -174,14 +266,14 @@ public static void main(String[] args)\n         }\r\n         catch (Exception e)\r\n         {\r\n-            System.err.println(e.getMessage());\r\n-            log.error(\"Top level handler caught execption.\", e);\r\n+            log.debug(\"Top level handler caught execption.\", e);\r\n+            console.info(e.getMessage());\r\n             System.exit(EXCEPTION_EXIT);\r\n         }\r\n     }\r\n \r\n     /**\r\n-     * Starts all of the test classes to be run by this coordinator running.\r\n+     * Starts all of the test classes to be run by this coordinator.\r\n      *\r\n      * @param testClassNames An array of all the coordinating test case implementations.\r\n      *\r\n@@ -192,10 +284,10 @@ public static void main(String[] args)\n     public TestResult start(String[] testClassNames) throws Exception\r\n     {\r\n         log.debug(\"public TestResult start(String[] testClassNames = \" + PrettyPrintingUtils.printArray(testClassNames)\r\n-                  + \": called\");\r\n+            + \": called\");\r\n \r\n         // Connect to the broker.\r\n-        connection = TestClient.createConnection(DEFAULT_CONNECTION_PROPS_RESOURCE, brokerUrl, virtualHost);\r\n+        connection = TestUtils.createConnection(TestContextProperties.getInstance());\r\n         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n \r\n         Destination controlTopic = session.createTopic(\"iop.control\");\r\n@@ -226,14 +318,18 @@ public TestResult start(String[] testClassNames) throws Exception\n             // Record the current test class, so that the test results can be output to a file incorporating this name.\r\n             this.currentTestClassName = testClassName;\r\n \r\n-            result = super.start(new String[]{testClassName});\r\n+            result = super.start(new String[] { testClassName });\r\n         }\r\n \r\n-        // At this point in time, all tests have completed. Broadcast the shutdown message.\r\n-        Message terminate = session.createMessage();\r\n-        terminate.setStringProperty(\"CONTROL_TYPE\", \"TERMINATE\");\r\n+        // At this point in time, all tests have completed. Broadcast the shutdown message, if the termination option\r\n+        // was set on the command line.\r\n+        if (terminate)\r\n+        {\r\n+            Message terminate = session.createMessage();\r\n+            terminate.setStringProperty(\"CONTROL_TYPE\", \"TERMINATE\");\r\n \r\n-        conversation.send(controlTopic, terminate);\r\n+            conversation.send(controlTopic, terminate);\r\n+        }\r\n \r\n         return result;\r\n     }\r\n@@ -250,7 +346,7 @@ public TestResult start(String[] testClassNames) throws Exception\n     public static Set<TestClientDetails> extractEnlists(Collection<Message> enlists) throws JMSException\r\n     {\r\n         log.debug(\"public static Set<TestClientDetails> extractEnlists(Collection<Message> enlists = \" + enlists\r\n-                  + \"): called\");\r\n+            + \"): called\");\r\n \r\n         Set<TestClientDetails> enlistedClients = new HashSet<TestClientDetails>();\r\n \r\n@@ -299,17 +395,17 @@ public TestResult doRun(Test test, boolean wait)\n                 Test nextTest = suite.testAt(i);\r\n                 log.debug(\"suite.testAt(\" + i + \") = \" + nextTest);\r\n \r\n-                if (nextTest instanceof CoordinatingTestCase)\r\n+                if (nextTest instanceof DistributedTestCase)\r\n                 {\r\n-                    log.debug(\"nextTest is a CoordinatingTestCase\");\r\n+                    log.debug(\"nextTest is a DistributedTestCase\");\r\n                 }\r\n             }\r\n \r\n             targetTest = new WrappedSuiteTestDecorator(suite);\r\n             log.debug(\"Wrapped with a WrappedSuiteTestDecorator.\");\r\n         }\r\n-        // Wrap the tests in an inviting test decorator, to perform the invite/test cycle.\r\n \r\n+        // Wrap the tests in a suitable distributed test decorator, to perform the invite/test cycle.\r\n         targetTest = newTestDecorator(targetTest, enlistedClients, conversationFactory, connection);\r\n \r\n         TestSuite suite = new TestSuite();\r\n@@ -321,9 +417,28 @@ public TestResult doRun(Test test, boolean wait)\n         return super.doRun(suite, wait);\r\n     }\r\n \r\n-    protected WrappedSuiteTestDecorator newTestDecorator(WrappedSuiteTestDecorator targetTest, Set<TestClientDetails> enlistedClients, ConversationFactory conversationFactory, Connection connection)\r\n+    /**\r\n+     * Creates a wrapped test decorator, that is capable of inviting enlisted clients to participate in a specified\r\n+     * test. This is the test engine that sets up the roles and sequences a distributed test case.\r\n+     *\r\n+     * @param targetTest          The test decorator to wrap.\r\n+     * @param enlistedClients     The enlisted clients available to run the test.\r\n+     * @param conversationFactory The conversation factory used to build conversation helper over the specified connection.\r\n+     * @param connection          The connection to talk to the enlisted clients over.\r\n+     *\r\n+     * @return An invititing test decorator, that invites all the enlisted clients to participate in tests, in pairs.\r\n+     */\r\n+    protected DistributedTestDecorator newTestDecorator(WrappedSuiteTestDecorator targetTest,\r\n+        Set<TestClientDetails> enlistedClients, ConversationFactory conversationFactory, Connection connection)\r\n     {\r\n-        return new InvitingTestDecorator(targetTest, enlistedClients, conversationFactory, connection);\r\n+        switch (engine)\r\n+        {\r\n+        case FANOUT:\r\n+            return new FanOutTestDecorator(targetTest, enlistedClients, conversationFactory, connection);\r\n+        case INTEROP:\r\n+        default:\r\n+            return new InteropTestDecorator(targetTest, enlistedClients, conversationFactory, connection);\r\n+        }\r\n     }\r\n \r\n     /**\r\n@@ -338,18 +453,18 @@ protected TestResult createTestResult()\n         TKTestResult result = new TKTestResult(fPrinter.getWriter(), delay, verbose, testCaseName);\r\n \r\n         // Check if a directory to output reports to has been specified and attach test listeners if so.\r\n-        if (_reportDir != null)\r\n+        if (reportDir != null)\r\n         {\r\n             // Create the report directory if it does not already exist.\r\n-            File reportDirFile = new File(_reportDir);\r\n+            File reportDirFile = new File(reportDir);\r\n \r\n             if (!reportDirFile.exists())\r\n             {\r\n                 reportDirFile.mkdir();\r\n             }\r\n \r\n-            // Create the timings file (make the name of this configurable as a command line parameter).\r\n-            Writer timingsWriter = null;\r\n+            // Create the results file (make the name of this configurable as a command line parameter).\r\n+            Writer timingsWriter;\r\n \r\n             try\r\n             {\r\n@@ -361,7 +476,7 @@ protected TestResult createTestResult()\n                 throw new RuntimeException(\"Unable to create the log file to write test results to: \" + e, e);\r\n             }\r\n \r\n-            // Set up a CSV results listener to output the timings to the results file.\r\n+            // Set up an XML results listener to output the timings to the results file.\r\n             XMLTestListener listener = new XMLTestListener(timingsWriter, currentTestClassName);\r\n             result.addListener(listener);\r\n             result.addTKTestListener(listener);\r\n@@ -380,9 +495,4 @@ protected TestResult createTestResult()\n \r\n         return result;\r\n     }\r\n-\r\n-    public void setReportDir(String reportDir)\r\n-    {\r\n-        _reportDir = reportDir;\r\n-    }\r\n }\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/Coordinator.java"}, {"additions": 81, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/DistributedTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/DistributedTestCase.java", "sha": "c47650ba1cea2292f6e4c03e043cc24d2fa7c240", "changes": 81, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/DistributedTestCase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,81 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.distributedtesting;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.test.framework.sequencers.DistributedTestSequencer;\r\n+import org.apache.qpid.test.framework.FrameworkBaseCase;\r\n+\r\n+/**\r\n+ * DistributedTestCase provides a base class implementation of the {@link org.apache.qpid.test.framework.sequencers.DistributedTestSequencer}, taking care of its\r\n+ * more mundane aspects, such as recording the test pariticipants.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Accept notification of test case participants.\r\n+ *     <td> {@link DistributedTestDecorator}\r\n+ * <tr><td> Accept JMS Connection to carry out the coordination over.\r\n+ * </table>\r\n+ */\r\n+public abstract class DistributedTestCase extends FrameworkBaseCase\r\n+{\r\n+    /** Used for debugging. */\r\n+    private final Logger log = Logger.getLogger(DistributedTestCase.class);\r\n+\r\n+    /**\r\n+     * Creates a new test case with the specified name.\r\n+     *\r\n+     * @param name The test case name.\r\n+     */\r\n+    public DistributedTestCase(String name)\r\n+    {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the test sequencer for this distributed test, cast as a {@link DistributedTestSequencer}, provided that it\r\n+     * is one. If the test sequencer is not distributed, this returns null.\r\n+     */\r\n+    public DistributedTestSequencer getDistributedTestSequencer()\r\n+    {\r\n+        try\r\n+        {\r\n+            return (DistributedTestSequencer) testSequencer;\r\n+        }\r\n+        catch (ClassCastException e)\r\n+        {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Should provide a translation from the junit method name of a test to its test case name as known to the test\r\n+     * clients that will run the test. The purpose of this is to convert the JUnit method name into the correct test\r\n+     * case name to place into the test invite. For example the method \"testP2P\" might map onto the interop test case\r\n+     * name \"TC2_BasicP2P\".\r\n+     *\r\n+     * @param methodName The name of the JUnit test method.\r\n+     *\r\n+     * @return The name of the corresponding interop test case.\r\n+     */\r\n+    public abstract String getTestCaseNameForTestMethod(String methodName);\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/DistributedTestCase.java"}, {"additions": 166, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/DistributedTestDecorator.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/DistributedTestDecorator.java", "sha": "bcc409dff91b7a4312a79177c4af16d901bbb44a", "changes": 166, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/DistributedTestDecorator.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,166 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.distributedtesting;\r\n+\r\n+import junit.framework.TestResult;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.test.framework.sequencers.DistributedTestSequencer;\r\n+import org.apache.qpid.test.framework.TestClientDetails;\r\n+import org.apache.qpid.util.ConversationFactory;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.WrappedSuiteTestDecorator;\r\n+\r\n+import javax.jms.Connection;\r\n+import javax.jms.Destination;\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+\r\n+import java.util.*;\r\n+\r\n+/**\r\n+ * DistributedTestDecorator is a base class for writing test decorators that invite test clients to participate in\r\n+ * distributed test cases. It provides a helper method, {@link #signupClients}, that broadcasts an invitation and\r\n+ * returns the set of test clients that are available to particiapte in the test.\r\n+ *\r\n+ * <p/>When used to wrap a {@link org.apache.qpid.test.framework.FrameworkBaseCase} test, it replaces the default\r\n+ * {@link org.apache.qpid.test.framework.sequencers.TestCaseSequencer} implementations with a suitable\r\n+ * {@link org.apache.qpid.test.framework.sequencers.DistributedTestSequencer}. Concrete implementations\r\n+ * can use this to configure the sending and receiving roles on the test.\r\n+ *\r\n+ * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Broadcast test invitations and collect enlists. <td> {@link ConversationFactory}.\r\n+ * </table>\r\n+ */\r\n+public abstract class DistributedTestDecorator extends WrappedSuiteTestDecorator\r\n+{\r\n+    /** Used for debugging. */\r\n+    private static final Logger log = Logger.getLogger(DistributedTestDecorator.class);\r\n+\r\n+    /** Holds the contact information for all test clients that are available and that may take part in the test. */\r\n+    Set<TestClientDetails> allClients;\r\n+\r\n+    /** Holds the conversation helper for the control level conversation for coordinating the test through. */\r\n+    ConversationFactory conversationFactory;\r\n+\r\n+    /** Holds the connection that the control conversation is held over. */\r\n+    Connection connection;\r\n+\r\n+    /** Holds the underlying {@link DistributedTestCase}s that this decorator wraps. */\r\n+    WrappedSuiteTestDecorator testSuite;\r\n+\r\n+    /** Holds the control topic, on which test invitations are broadcast. */\r\n+    protected Destination controlTopic;\r\n+\r\n+    /**\r\n+     * Creates a wrapped suite test decorator from another one.\r\n+     *\r\n+     * @param suite               The test suite.\r\n+     * @param availableClients    The list of all clients that responded to the compulsory invite.\r\n+     * @param controlConversation The conversation helper for the control level, test coordination conversation.\r\n+     * @param controlConnection   The connection that the coordination messages are sent over.\r\n+     */\r\n+    public DistributedTestDecorator(WrappedSuiteTestDecorator suite, Set<TestClientDetails> availableClients,\r\n+        ConversationFactory controlConversation, Connection controlConnection)\r\n+    {\r\n+        super(suite);\r\n+\r\n+        log.debug(\"public DistributedTestDecorator(WrappedSuiteTestDecorator suite, Set<TestClientDetails> allClients = \"\r\n+            + availableClients + \", ConversationHelper controlConversation = \" + controlConversation + \"): called\");\r\n+\r\n+        testSuite = suite;\r\n+        allClients = availableClients;\r\n+        conversationFactory = controlConversation;\r\n+        connection = controlConnection;\r\n+\r\n+        // Set up the test control topic.\r\n+        try\r\n+        {\r\n+            controlTopic = conversationFactory.getSession().createTopic(\"iop.control\");\r\n+        }\r\n+        catch (JMSException e)\r\n+        {\r\n+            throw new RuntimeException(\"Unable to create the coordinating control topic to broadcast test invites on.\", e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Should run all of the tests in the wrapped test suite.\r\n+     *\r\n+     * @param testResult The the results object to monitor the test results with.\r\n+     */\r\n+    public abstract void run(TestResult testResult);\r\n+\r\n+    /**\r\n+     * Should provide the distributed test sequencer to pass to {@link org.apache.qpid.test.framework.FrameworkBaseCase}\r\n+     * tests.\r\n+     *\r\n+     * @return A distributed test sequencer.\r\n+     */\r\n+    public abstract DistributedTestSequencer getDistributedTestSequencer();\r\n+\r\n+    /**\r\n+     * Broadcasts an invitation to participate in a coordinating test case to find out what clients are available to\r\n+     * run the test case.\r\n+     *\r\n+     * @param coordTest The coordinating test case to broadcast an inviate for.\r\n+     *\r\n+     * @return A set of test clients that accepted the invitation.\r\n+     */\r\n+    protected Set<TestClientDetails> signupClients(DistributedTestCase coordTest)\r\n+    {\r\n+        // Broadcast the invitation to find out what clients are available to test.\r\n+        Set<TestClientDetails> enlists;\r\n+        try\r\n+        {\r\n+            Message invite = conversationFactory.getSession().createMessage();\r\n+\r\n+            ConversationFactory.Conversation conversation = conversationFactory.startConversation();\r\n+\r\n+            invite.setStringProperty(\"CONTROL_TYPE\", \"INVITE\");\r\n+            invite.setStringProperty(\"TEST_NAME\", coordTest.getTestCaseNameForTestMethod(coordTest.getName()));\r\n+\r\n+            conversation.send(controlTopic, invite);\r\n+\r\n+            // Wait for a short time, to give test clients an opportunity to reply to the invitation.\r\n+            Collection<Message> replies = conversation.receiveAll(allClients.size(), 3000);\r\n+            enlists = Coordinator.extractEnlists(replies);\r\n+        }\r\n+        catch (JMSException e)\r\n+        {\r\n+            throw new RuntimeException(\"There was a JMSException during the invite/enlist conversation.\", e);\r\n+        }\r\n+\r\n+        return enlists;\r\n+    }\r\n+\r\n+    /**\r\n+     * Prints a string summarizing this test decorator, mainly for debugging purposes.\r\n+     *\r\n+     * @return String representation for debugging purposes.\r\n+     */\r\n+    public String toString()\r\n+    {\r\n+        return \"DistributedTestDecorator: [ testSuite = \" + testSuite + \" ]\";\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/DistributedTestDecorator.java"}, {"additions": 201, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/FanOutTestDecorator.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/FanOutTestDecorator.java", "sha": "83d6602e57eb3bf5813675792c952404916b20d8", "changes": 201, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/FanOutTestDecorator.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,201 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.distributedtesting;\r\n+\r\n+import junit.framework.Test;\r\n+import junit.framework.TestResult;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.test.framework.sequencers.DistributedTestSequencer;\r\n+import org.apache.qpid.test.framework.sequencers.FanOutTestSequencer;\r\n+import org.apache.qpid.test.framework.DropInTest;\r\n+import org.apache.qpid.util.ConversationFactory;\r\n+import org.apache.qpid.test.framework.TestClientDetails;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.WrappedSuiteTestDecorator;\r\n+\r\n+import javax.jms.Connection;\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+import javax.jms.MessageListener;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.Set;\r\n+\r\n+/**\r\n+ * FanOutTestDecorator is an {@link DistributedTestDecorator} that runs one test client in the sender role, and the remainder\r\n+ * in the receivers role. It also has the capability to listen for new test cases joining the test beyond the initial start\r\n+ * point. This feature can be usefull when experimenting with adding more load, in the form of more test clients, to assess\r\n+ * its impact on a running test.\r\n+ *\r\n+ * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Execute coordinated test cases. <td> {@link DistributedTestCase}\r\n+ * <tr><td> Accept test clients joining a running test.\r\n+ * </table>\r\n+ */\r\n+public class FanOutTestDecorator extends DistributedTestDecorator implements MessageListener\r\n+{\r\n+    /** Used for debugging. */\r\n+    private static final Logger log = Logger.getLogger(FanOutTestDecorator.class);\r\n+\r\n+    /** Holds the currently running test case. */\r\n+    DistributedTestCase currentTest = null;\r\n+\r\n+    /**\r\n+     * Creates a wrapped suite test decorator from another one.\r\n+     *\r\n+     * @param suite               The test suite.\r\n+     * @param availableClients    The list of all clients that responded to the compulsory invite.\r\n+     * @param controlConversation The conversation helper for the control level, test coordination conversation.\r\n+     * @param controlConnection   The connection that the coordination messages are sent over.\r\n+     */\r\n+    public FanOutTestDecorator(WrappedSuiteTestDecorator suite, Set<TestClientDetails> availableClients,\r\n+        ConversationFactory controlConversation, Connection controlConnection)\r\n+    {\r\n+        super(suite, availableClients, controlConversation, controlConnection);\r\n+\r\n+        log.debug(\"public DistributedTestDecorator(WrappedSuiteTestDecorator suite, Set<TestClientDetails> allClients = \"\r\n+            + availableClients + \", ConversationHelper controlConversation = \" + controlConversation + \"): called\");\r\n+\r\n+        testSuite = suite;\r\n+        allClients = availableClients;\r\n+        conversationFactory = controlConversation;\r\n+        connection = controlConnection;\r\n+    }\r\n+\r\n+    /**\r\n+     * Broadcasts a test invitation and accepts enlists from participating clients. The wrapped test cases are run\r\n+     * with one test client in the sender role, and the remaining test clients in the receiving role.\r\n+     *\r\n+     * <p/>Any JMSExceptions during the invite/enlist conversation will be allowed to fall through as runtime\r\n+     * exceptions, resulting in the non-completion of the test run.\r\n+     *\r\n+     * @param testResult The the results object to monitor the test results with.\r\n+     *\r\n+     * @todo Better error recovery for failure of the invite/enlist conversation could be added.\r\n+     */\r\n+    public void run(TestResult testResult)\r\n+    {\r\n+        log.debug(\"public void run(TestResult testResult): called\");\r\n+\r\n+        Collection<Test> tests = testSuite.getAllUnderlyingTests();\r\n+\r\n+        // Listen for late joiners on the control topic.\r\n+        try\r\n+        {\r\n+            conversationFactory.getSession().createConsumer(controlTopic).setMessageListener(this);\r\n+        }\r\n+        catch (JMSException e)\r\n+        {\r\n+            throw new RuntimeException(\"Unable to set up the message listener on the control topic.\", e);\r\n+        }\r\n+\r\n+        // Run all of the test cases in the test suite.\r\n+        for (Test test : tests)\r\n+        {\r\n+            DistributedTestCase coordTest = (DistributedTestCase) test;\r\n+\r\n+            // Get all of the clients able to participate in the test.\r\n+            Set<TestClientDetails> enlists = signupClients(coordTest);\r\n+\r\n+            // Check that there were some clients available.\r\n+            if (enlists.size() == 0)\r\n+            {\r\n+                throw new RuntimeException(\"No clients to test with\");\r\n+            }\r\n+\r\n+            // Create a distributed test sequencer for the test.\r\n+            DistributedTestSequencer sequencer = getDistributedTestSequencer();\r\n+\r\n+            // Set up the first client in the sender role, and the remainder in the receivers role.\r\n+            Iterator<TestClientDetails> clients = enlists.iterator();\r\n+            sequencer.setSender(clients.next());\r\n+\r\n+            while (clients.hasNext())\r\n+            {\r\n+                // Set the sending and receiving client details on the test case.\r\n+                sequencer.setReceiver(clients.next());\r\n+            }\r\n+\r\n+            // Pass down the connection to hold the coordinating conversation over.\r\n+            sequencer.setConversationFactory(conversationFactory);\r\n+\r\n+            // If the current test case is a drop-in test, set it up as the currently running test for late joiners to\r\n+            // add in to. Otherwise the current test field is set to null, to indicate that late joiners are not allowed.\r\n+            currentTest = (coordTest instanceof DropInTest) ? coordTest : null;\r\n+\r\n+            // Execute the test case.\r\n+            coordTest.setTestSequencer(sequencer);\r\n+            coordTest.run(testResult);\r\n+\r\n+            currentTest = null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Should provide the distributed test sequencer to pass to {@link org.apache.qpid.test.framework.FrameworkBaseCase}\r\n+     * tests.\r\n+     *\r\n+     * @return A distributed test sequencer.\r\n+     */\r\n+    public DistributedTestSequencer getDistributedTestSequencer()\r\n+    {\r\n+        return new FanOutTestSequencer();\r\n+    }\r\n+\r\n+    /**\r\n+     * Listens to incoming messages on the control topic. If the messages are 'join' messages, signalling a new\r\n+     * test client wishing to join the current test, then the new client will be added to the current test in the\r\n+     * receivers role.\r\n+     *\r\n+     * @param message The incoming control message.\r\n+     */\r\n+    public void onMessage(Message message)\r\n+    {\r\n+        try\r\n+        {\r\n+            // Check if the message is from a test client attempting to join a running test, and join it to the current\r\n+            // test case if so.\r\n+            if (message.getStringProperty(\"CONTROL_TYPE\").equals(\"JOIN\") && (currentTest != null))\r\n+            {\r\n+                ((DropInTest) currentTest).lateJoin(message);\r\n+            }\r\n+        }\r\n+        // There is not a lot can be done with this error, so it is deliberately ignored.\r\n+        catch (JMSException e)\r\n+        {\r\n+            log.debug(\"Unable to process message:\" + message);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Prints a string summarizing this test decorator, mainly for debugging purposes.\r\n+     *\r\n+     * @return String representation for debugging purposes.\r\n+     */\r\n+    public String toString()\r\n+    {\r\n+        return \"FanOutTestDecorator: [ testSuite = \" + testSuite + \" ]\";\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/FanOutTestDecorator.java"}, {"additions": 54, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/InteropTestDecorator.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/InteropTestDecorator.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/InvitingTestDecorator.java", "sha": "7743d2bba3469d49525144b7c217b3f750958d19", "changes": 121, "status": "renamed", "deletions": 67, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/InteropTestDecorator.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,47 +18,44 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.interop.coordinator;\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.jms.Connection;\r\n-import javax.jms.Destination;\r\n-import javax.jms.JMSException;\r\n-import javax.jms.Message;\r\n+package org.apache.qpid.test.framework.distributedtesting;\r\n \r\n import junit.framework.Test;\r\n import junit.framework.TestResult;\r\n \r\n import org.apache.log4j.Logger;\r\n \r\n+import org.apache.qpid.test.framework.sequencers.DistributedTestSequencer;\r\n+import org.apache.qpid.test.framework.sequencers.InteropTestSequencer;\r\n+import org.apache.qpid.test.framework.TestClientDetails;\r\n import org.apache.qpid.util.ConversationFactory;\r\n \r\n import uk.co.thebadgerset.junit.extensions.WrappedSuiteTestDecorator;\r\n \r\n+import javax.jms.Connection;\r\n+\r\n+import java.util.*;\r\n+\r\n /**\r\n+ * DistributedTestDecorator is a test decorator, written to implement the interop test specification. Given a list\r\n+ * of enlisted test clients, that are available to run interop tests, this decorator invites them to participate\r\n+ * in each test in the wrapped test suite. Amongst all the clients that respond to the invite, all pairs are formed,\r\n+ * and each pairing (in both directions, but excluding the reflexive pairings) is split into a sender and receivers\r\n+ * role and a test case run between them. Any enlisted combinations that do not accept a test invite are automatically\r\n+ * failed.\r\n+ *\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n  * <tr><th> Responsibilities <th> Collaborations\r\n- * <tr><td> Broadcast test invitations and collect enlists. <td> {@link ConversationFactory}.\r\n+ * <tr><td> Broadcast test invitations and collect enlists. <td> {@link org.apache.qpid.util.ConversationFactory}.\r\n  * <tr><td> Output test failures for clients unwilling to run the test case. <td> {@link Coordinator}\r\n- * <tr><td> Execute coordinated test cases. <td> {@link CoordinatingTestCase}\r\n+ * <tr><td> Execute distributed test cases. <td> {@link DistributedTestCase}\r\n+ * <tr><td> Fail non participating pairings. <td> {@link OptOutTestCase}\r\n  * </table>\r\n  */\r\n-public class InvitingTestDecorator extends WrappedSuiteTestDecorator\r\n+public class InteropTestDecorator extends DistributedTestDecorator\r\n {\r\n-    private static final Logger log = Logger.getLogger(InvitingTestDecorator.class);\r\n-\r\n-    /** Holds the contact information for all test clients that are available and that may take part in the test. */\r\n-    Set<TestClientDetails> allClients;\r\n-\r\n-    /** Holds the conversation helper for the control level conversation for coordinating the test through. */\r\n-    ConversationFactory conversationFactory;\r\n-\r\n-    /** Holds the connection that the control conversation is held over. */\r\n-    Connection connection;\r\n-\r\n-    /** Holds the underlying {@link CoordinatingTestCase}s that this decorator wraps. */\r\n-    WrappedSuiteTestDecorator testSuite;\r\n+    /** Used for debugging. */\r\n+    private static final Logger log = Logger.getLogger(InteropTestDecorator.class);\r\n \r\n     /**\r\n      * Creates a wrapped suite test decorator from another one.\r\n@@ -68,24 +65,16 @@\n      * @param controlConversation The conversation helper for the control level, test coordination conversation.\r\n      * @param controlConnection   The connection that the coordination messages are sent over.\r\n      */\r\n-    public InvitingTestDecorator(WrappedSuiteTestDecorator suite, Set<TestClientDetails> availableClients,\r\n+    public InteropTestDecorator(WrappedSuiteTestDecorator suite, Set<TestClientDetails> availableClients,\r\n         ConversationFactory controlConversation, Connection controlConnection)\r\n     {\r\n-        super(suite);\r\n-\r\n-        log.debug(\"public InvitingTestDecorator(WrappedSuiteTestDecorator suite, Set<TestClientDetails> allClients = \"\r\n-            + availableClients + \", ConversationHelper controlConversation = \" + controlConversation + \"): called\");\r\n-\r\n-        testSuite = suite;\r\n-        allClients = availableClients;\r\n-        conversationFactory = controlConversation;\r\n-        connection = controlConnection;\r\n+        super(suite, availableClients, controlConversation, controlConnection);\r\n     }\r\n \r\n     /**\r\n      * Broadcasts a test invitation and accetps enlisting from participating clients. The wrapped test case is\r\n      * then repeated for every combination of test clients (provided the wrapped test case extends\r\n-     * {@link CoordinatingTestCase}.\r\n+     * {@link DistributedTestCase}.\r\n      *\r\n      * <p/>Any JMSExceptions during the invite/enlist conversation will be allowed to fall through as runtime exceptions,\r\n      * resulting in the non-completion of the test run.\r\n@@ -102,29 +91,10 @@ public void run(TestResult testResult)\n \r\n         for (Test test : tests)\r\n         {\r\n-            CoordinatingTestCase coordTest = (CoordinatingTestCase) test;\r\n+            DistributedTestCase coordTest = (DistributedTestCase) test;\r\n \r\n             // Broadcast the invitation to find out what clients are available to test.\r\n-            Set<TestClientDetails> enlists;\r\n-            try\r\n-            {\r\n-                Message invite = conversationFactory.getSession().createMessage();\r\n-                Destination controlTopic = conversationFactory.getSession().createTopic(\"iop.control\");\r\n-                ConversationFactory.Conversation conversation = conversationFactory.startConversation();\r\n-\r\n-                invite.setStringProperty(\"CONTROL_TYPE\", \"INVITE\");\r\n-                invite.setStringProperty(\"TEST_NAME\", coordTest.getTestCaseNameForTestMethod(coordTest.getName()));\r\n-\r\n-                conversation.send(controlTopic, invite);\r\n-\r\n-                // Wait for a short time, to give test clients an opportunity to reply to the invitation.\r\n-                Collection<Message> replies = conversation.receiveAll(allClients.size(), 3000);\r\n-                enlists = Coordinator.extractEnlists(replies);\r\n-            }\r\n-            catch (JMSException e)\r\n-            {\r\n-                throw new RuntimeException(\"There was a JMSException during the invite/enlist conversation.\", e);\r\n-            }\r\n+            Set<TestClientDetails> enlists = signupClients(coordTest);\r\n \r\n             // Compare the list of willing clients to the list of all available.\r\n             Set<TestClientDetails> optOuts = new HashSet<TestClientDetails>(allClients);\r\n@@ -135,9 +105,14 @@ public void run(TestResult testResult)\n \r\n             for (List<TestClientDetails> failPair : failPairs)\r\n             {\r\n-                CoordinatingTestCase failTest = new OptOutTestCase(\"testOptOut\");\r\n-                failTest.setSender(failPair.get(0));\r\n-                failTest.setReceiver(failPair.get(1));\r\n+                // Create a distributed test sequencer for the test.\r\n+                DistributedTestSequencer sequencer = getDistributedTestSequencer();\r\n+\r\n+                // Create an automatic failure test for the opted out test pair.\r\n+                DistributedTestCase failTest = new OptOutTestCase(\"testOptOut\");\r\n+                sequencer.setSender(failPair.get(0));\r\n+                sequencer.setReceiver(failPair.get(1));\r\n+                failTest.setTestSequencer(sequencer);\r\n \r\n                 failTest.run(testResult);\r\n             }\r\n@@ -147,27 +122,32 @@ public void run(TestResult testResult)\n \r\n             for (List<TestClientDetails> enlistedPair : enlistedPairs)\r\n             {\r\n-                // Set the sending and receiving client details on the test case.\r\n-                coordTest.setSender(enlistedPair.get(0));\r\n-                coordTest.setReceiver(enlistedPair.get(1));\r\n+                // Create a distributed test sequencer for the test.\r\n+                DistributedTestSequencer sequencer = getDistributedTestSequencer();\r\n+\r\n+                // Set the sending and receiving client details on the test sequencer.\r\n+                sequencer.setSender(enlistedPair.get(0));\r\n+                sequencer.setReceiver(enlistedPair.get(1));\r\n \r\n                 // Pass down the connection to hold the coordination conversation over.\r\n-                coordTest.setConversationFactory(conversationFactory);\r\n+                sequencer.setConversationFactory(conversationFactory);\r\n \r\n                 // Execute the test case.\r\n+                coordTest.setTestSequencer(sequencer);\r\n                 coordTest.run(testResult);\r\n             }\r\n         }\r\n     }\r\n \r\n     /**\r\n-     * Prints a string summarizing this test decorator, mainly for debugging purposes.\r\n+     * Should provide the distributed test sequencer to pass to {@link org.apache.qpid.test.framework.FrameworkBaseCase}\r\n+     * tests.\r\n      *\r\n-     * @return String representation for debugging purposes.\r\n+     * @return A distributed test sequencer.\r\n      */\r\n-    public String toString()\r\n+    public DistributedTestSequencer getDistributedTestSequencer()\r\n     {\r\n-        return \"InvitingTestDecorator: [ testSuite = \" + testSuite + \" ]\";\r\n+        return new InteropTestSequencer();\r\n     }\r\n \r\n     /**\r\n@@ -177,6 +157,7 @@ public String toString()\n      *\r\n      * @param left  The left set.\r\n      * @param right The right set.\r\n+     * @param <E>   The type of the content of the pairs.\r\n      *\r\n      * @return All pairs formed from the permutations of all elements of the left and right sets.\r\n      */\r\n@@ -210,6 +191,12 @@ public String toString()\n      */\r\n     private class Pair<T> extends ArrayList<T>\r\n     {\r\n+        /**\r\n+         * Creates a new pair of elements.\r\n+         *\r\n+         * @param first  The first element.\r\n+         * @param second The second element.\r\n+         */\r\n         public Pair(T first, T second)\r\n         {\r\n             super();\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/InteropTestDecorator.java"}, {"additions": 8, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/OptOutTestCase.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/OptOutTestCase.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/OptOutTestCase.java", "sha": "83ec12ad56c8ce0e96d0f5069d06c99977e2c4e3", "changes": 13, "status": "renamed", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/OptOutTestCase.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,21 +18,21 @@\n  * under the License.\r\n  *\r\n  */\r\n-package org.apache.qpid.interop.coordinator;\r\n+package org.apache.qpid.test.framework.distributedtesting;\r\n \r\n-import junit.framework.Assert;\r\n+import org.apache.qpid.test.framework.sequencers.DistributedTestSequencer;\r\n \r\n /**\r\n  * An OptOutTestCase is a test case that automatically fails. It is used when a list of test clients has been generated\r\n  * from a compulsory invite, but only some of those clients have responded to a specific test case invite. The clients\r\n- * that did not respond, are automatically given a fail for the test.\r\n+ * that did not respond, may automatically be given a fail for some tests.\r\n  *\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n  * <tr><th> Responsibilities <th> Collaborations\r\n  * <tr><td> Fail the test with a suitable reason.\r\n  * </table>\r\n  */\r\n-public class OptOutTestCase extends CoordinatingTestCase\r\n+public class OptOutTestCase extends DistributedTestCase\r\n {\r\n     /**\r\n      * Creates a new coordinating test case with the specified name.\r\n@@ -47,7 +47,10 @@ public OptOutTestCase(String name)\n     /** Generates an appropriate test failure assertion. */\r\n     public void testOptOut()\r\n     {\r\n-        Assert.fail(\"One of \" + getSender() + \" and \" + getReceiver() + \" opted out of the test.\");\r\n+        DistributedTestSequencer sequencer = getDistributedTestSequencer();\r\n+\r\n+        fail(\"One of \" + sequencer.getSender() + \" and \" + getDistributedTestSequencer().getReceivers()\r\n+            + \" opted out of the test.\");\r\n     }\r\n \r\n     /**\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/distributedtesting/OptOutTestCase.java"}, {"additions": 38, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/listeners/XMLTestListener.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/listeners/XMLTestListener.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/interop/coordinator/XMLTestListener.java", "sha": "ee274a1e0155d3723ece698b12286c2ecdf4a0f5", "changes": 96, "status": "renamed", "deletions": 58, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/listeners/XMLTestListener.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -18,13 +18,7 @@\n  * under the License.\r\n  *\r\n  */\r\n-\r\n-package org.apache.qpid.interop.coordinator;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.PrintWriter;\r\n-import java.io.Writer;\r\n-import java.util.*;\r\n+package org.apache.qpid.test.framework.listeners;\r\n \r\n import junit.framework.AssertionFailedError;\r\n import junit.framework.Test;\r\n@@ -34,6 +28,11 @@\n \r\n import uk.co.thebadgerset.junit.extensions.listeners.TKTestListener;\r\n \r\n+import java.io.IOException;\r\n+import java.io.PrintWriter;\r\n+import java.io.Writer;\r\n+import java.util.*;\r\n+\r\n /**\r\n  * Listens for test results for a named test and outputs these in the standard JUnit XML format to the specified\r\n  * writer.\r\n@@ -50,6 +49,12 @@\n  *\r\n  * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n  * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Listen to test lifecycle notifications.\r\n+ * <tr><td> Listen to test errors and failures.\r\n+ * <tr><td> Listen to test timings.\r\n+ * <tr><td> Listen to test memory usages.\r\n+ * <tr><td> Listen to parameterized test parameters.\r\n+ * <tr><th> Responsibilities\r\n  * </table>\r\n  *\r\n  * @todo Merge this class with CSV test listener, making the collection of results common to both, and only factoring\r\n@@ -97,7 +102,8 @@\n     /**\r\n      * Creates a new XML results output listener that writes to the specified location.\r\n      *\r\n-     * @param writer The location to write results to.\r\n+     * @param writer        The location to write results to.\r\n+     * @param testClassName The name of the test class to include in the test results.\r\n      */\r\n     public XMLTestListener(Writer writer, String testClassName)\r\n     {\r\n@@ -126,7 +132,9 @@ public void reset(Test test, Long threadId)\n     }\r\n \r\n     /**\r\n-     * A test started.\r\n+     * Notification that a test started.\r\n+     *\r\n+     * @param test The test that started.\r\n      */\r\n     public void startTest(Test test)\r\n     {\r\n@@ -189,7 +197,9 @@ public void properties(Properties properties)\n     { }\r\n \r\n     /**\r\n-     * A test ended.\r\n+     * Notification that a test ended.\r\n+     *\r\n+     * @param test The test that ended.\r\n      */\r\n     public void endTest(Test test)\r\n     {\r\n@@ -225,6 +235,9 @@ public void endTest(Test test, Long threadId)\n \r\n     /**\r\n      * An error occurred.\r\n+     *\r\n+     * @param test The test in which the error occurred.\r\n+     * @param t    The throwable that resulted from the error.\r\n      */\r\n     public void addError(Test test, Throwable t)\r\n     {\r\n@@ -237,6 +250,9 @@ public void addError(Test test, Throwable t)\n \r\n     /**\r\n      * A failure occurred.\r\n+     *\r\n+     * @param test The test in which the failure occurred.\r\n+     * @param t    The JUnit assertions that led to the failure.\r\n      */\r\n     public void addFailure(Test test, AssertionFailedError t)\r\n     {\r\n@@ -339,13 +355,10 @@ else if (result.failure != null)\n      */\r\n     protected static class Result\r\n     {\r\n-        public Result(String testClass, String testName)\r\n-        {\r\n-            this.testClass = testClass;\r\n-            this.testName = testName;\r\n-        }\r\n-\r\n+        /** Holds the name of the test class. */\r\n         public String testClass;\r\n+\r\n+        /** Holds the name of the test method. */\r\n         public String testName;\r\n \r\n         /** Holds the exception that caused error in this test. */\r\n@@ -354,49 +367,16 @@ public Result(String testClass, String testName)\n         /** Holds the assertion exception that caused failure in this test. */\r\n         public AssertionFailedError failure;\r\n \r\n-        /** Holds the error count for this test. */\r\n-        // public int errors = 0;\r\n-\r\n-        /** Holds the failure count for this tests. */\r\n-        // public int failures = 0;\r\n-\r\n-        /** Holds the overall tests run count for this test. */\r\n-        // public int runs = 0;\r\n-\r\n-        /*public boolean equals(Object o)\r\n+        /**\r\n+         * Creates a placeholder for the results of a test.\r\n+         *\r\n+         * @param testClass The test class.\r\n+         * @param testName  The name of the test that was run.\r\n+         */\r\n+        public Result(String testClass, String testName)\r\n         {\r\n-            if (this == o)\r\n-            {\r\n-                return true;\r\n-            }\r\n-\r\n-            if (!(o instanceof Result))\r\n-            {\r\n-                return false;\r\n-            }\r\n-\r\n-            final Result result = (Result) o;\r\n-\r\n-            if ((testClass != null) ? (!testClass.equals(result.testClass)) : (result.testClass != null))\r\n-            {\r\n-                return false;\r\n-            }\r\n-\r\n-            if ((testName != null) ? (!testName.equals(result.testName)) : (result.testName != null))\r\n-            {\r\n-                return false;\r\n-            }\r\n-\r\n-            return true;\r\n+            this.testClass = testClass;\r\n+            this.testName = testName;\r\n         }\r\n-\r\n-        public int hashCode()\r\n-        {\r\n-            int result;\r\n-            result = ((testClass != null) ? testClass.hashCode() : 0);\r\n-            result = (29 * result) + ((testName != null) ? testName.hashCode() : 0);\r\n-\r\n-            return result;\r\n-        }*/\r\n     }\r\n }\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/listeners/XMLTestListener.java"}, {"additions": 394, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/localcircuit/CircuitImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/localcircuit/CircuitImpl.java", "sha": "3c678eef7d6ed21b3a6bc8f4ac661e7e9b4ef671", "changes": 394, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/localcircuit/CircuitImpl.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,394 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.localcircuit;\r\n+\r\n+import org.apache.qpid.client.AMQSession;\r\n+import org.apache.qpid.test.framework.*;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n+\r\n+import javax.jms.*;\r\n+\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.concurrent.atomic.AtomicLong;\r\n+\r\n+/**\r\n+ * CircuitImpl provides an implementation of the test circuit. This is a first prototype implementation and only supports\r\n+ * a single producer/consumer on each end of the circuit, with both ends of the circuit on the same JVM.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Supply the publishing and receiving ends of a test messaging circuit.\r\n+ *     <td> {@link PublisherImpl}, {@link ReceiverImpl}\r\n+ * <tr><td> Start the circuit running.\r\n+ * <tr><td> Close the circuit down.\r\n+ * <tr><td> Take a reading of the circuits state.\r\n+ * <tr><td> Apply assertions against the circuits state. <td> {@link org.apache.qpid.test.framework.Assertion}\r\n+ * <tr><td> Send test messages over the circuit.\r\n+ * <tr><td> Perform the default test procedure on the circuit.\r\n+ * <tr><td> Provide access to connection and session exception monitors <td> {@link org.apache.qpid.test.framework.ExceptionMonitor}\r\n+ * </table>\r\n+ *\r\n+ * @todo Add ability to create routes with no consumers active on them. Immediate/Mandatory tests are closing consumers\r\n+ *       themsleves to create this scenario. Should make it part of the test configuration.\r\n+ */\r\n+public class CircuitImpl implements Circuit\r\n+{\r\n+    /** Used to create unique destination names for each test. */\r\n+    private static AtomicLong uniqueDestsId = new AtomicLong();\r\n+\r\n+    /** Holds the test configuration for the circuit. */\r\n+    private ParsedProperties testProps;\r\n+\r\n+    /** Holds the publishing end of the circuit. */\r\n+    private PublisherImpl publisher;\r\n+\r\n+    /** Holds the receiving end of the circuit. */\r\n+    private ReceiverImpl receiver;\r\n+\r\n+    /** Holds the connection for the publishing end of the circuit. */\r\n+    private Connection connection;\r\n+\r\n+    /** Holds the exception listener for the connection on the publishing end of the circuit. */\r\n+    private ExceptionMonitor connectionExceptionMonitor;\r\n+\r\n+    /** Holds the exception listener for the session on the publishing end of the circuit. */\r\n+    private ExceptionMonitor exceptionMonitor;\r\n+\r\n+    /**\r\n+     * Creates a test circuit using the specified test parameters. The publisher, receivers, connection and\r\n+     * connection monitor must already have been created, to assemble the circuit.\r\n+     *\r\n+     * @param testProps                  The test parameters.\r\n+     * @param publisher                  The test publisher.\r\n+     * @param receiver                   The test receivers.\r\n+     * @param connection                 The connection.\r\n+     * @param connectionExceptionMonitor The connection exception monitor.\r\n+     */\r\n+    protected CircuitImpl(ParsedProperties testProps, PublisherImpl publisher, ReceiverImpl receiver, Connection connection,\r\n+        ExceptionMonitor connectionExceptionMonitor)\r\n+    {\r\n+        this.testProps = testProps;\r\n+        this.publisher = publisher;\r\n+        this.receiver = receiver;\r\n+        this.connection = connection;\r\n+        this.connectionExceptionMonitor = connectionExceptionMonitor;\r\n+        this.exceptionMonitor = new ExceptionMonitor();\r\n+\r\n+        // Set this as the parent circuit on the publisher and receivers.\r\n+        publisher.setCircuit(this);\r\n+        receiver.setCircuit(this);\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a test circuit from the specified test parameters.\r\n+     *\r\n+     * @param testProps The test parameters.\r\n+     *\r\n+     * @return A connected and ready to start, test circuit.\r\n+     */\r\n+    public static Circuit createCircuit(ParsedProperties testProps)\r\n+    {\r\n+        // Create a standard publisher/receivers test client pair on a shared connection, individual sessions.\r\n+        try\r\n+        {\r\n+            // ParsedProperties testProps = new ParsedProperties(testProps);\r\n+\r\n+            // Get a unique offset to append to destination names to make them unique to the connection.\r\n+            long uniqueId = uniqueDestsId.incrementAndGet();\r\n+\r\n+            // Extract the standard test configuration parameters relevant to the connection.\r\n+            String destinationSendRoot =\r\n+                testProps.getProperty(MessagingTestConfigProperties.SEND_DESTINATION_NAME_ROOT_PROPNAME) + \"_\" + uniqueId;\r\n+            String destinationReceiveRoot =\r\n+                testProps.getProperty(MessagingTestConfigProperties.RECEIVE_DESTINATION_NAME_ROOT_PROPNAME) + \"_\" + uniqueId;\r\n+            boolean createPublisherProducer =\r\n+                testProps.getPropertyAsBoolean(MessagingTestConfigProperties.PUBLISHER_PRODUCER_BIND_PROPNAME);\r\n+            boolean createPublisherConsumer =\r\n+                testProps.getPropertyAsBoolean(MessagingTestConfigProperties.PUBLISHER_CONSUMER_BIND_PROPNAME);\r\n+            boolean createReceiverProducer =\r\n+                testProps.getPropertyAsBoolean(MessagingTestConfigProperties.RECEIVER_PRODUCER_BIND_PROPNAME);\r\n+            boolean createReceiverConsumer =\r\n+                testProps.getPropertyAsBoolean(MessagingTestConfigProperties.RECEIVER_CONSUMER_BIND_PROPNAME);\r\n+\r\n+            // Check which JMS flags and options are to be set.\r\n+            int ackMode = testProps.getPropertyAsInteger(MessagingTestConfigProperties.ACK_MODE_PROPNAME);\r\n+            boolean useTopics = testProps.getPropertyAsBoolean(MessagingTestConfigProperties.PUBSUB_PROPNAME);\r\n+            boolean transactional = testProps.getPropertyAsBoolean(MessagingTestConfigProperties.TRANSACTED_PROPNAME);\r\n+            boolean durableSubscription =\r\n+                testProps.getPropertyAsBoolean(MessagingTestConfigProperties.DURABLE_SUBSCRIPTION_PROPNAME);\r\n+\r\n+            // Check if any Qpid/AMQP specific flags or options need to be set.\r\n+            boolean immediate = testProps.getPropertyAsBoolean(MessagingTestConfigProperties.IMMEDIATE_PROPNAME);\r\n+            boolean mandatory = testProps.getPropertyAsBoolean(MessagingTestConfigProperties.MANDATORY_PROPNAME);\r\n+            boolean needsQpidOptions = immediate | mandatory;\r\n+\r\n+            /*log.debug(\"ackMode = \" + ackMode);\r\n+            log.debug(\"useTopics = \" + useTopics);\r\n+            log.debug(\"destinationSendRoot = \" + destinationSendRoot);\r\n+            log.debug(\"destinationReceiveRoot = \" + destinationReceiveRoot);\r\n+            log.debug(\"createPublisherProducer = \" + createPublisherProducer);\r\n+            log.debug(\"createPublisherConsumer = \" + createPublisherConsumer);\r\n+            log.debug(\"createReceiverProducer = \" + createReceiverProducer);\r\n+            log.debug(\"createReceiverConsumer = \" + createReceiverConsumer);\r\n+            log.debug(\"transactional = \" + transactional);\r\n+            log.debug(\"immediate = \" + immediate);\r\n+            log.debug(\"mandatory = \" + mandatory);\r\n+            log.debug(\"needsQpidOptions = \" + needsQpidOptions);*/\r\n+\r\n+            // Create connection, sessions and producer/consumer pairs on each session.\r\n+            Connection connection = TestUtils.createConnection(testProps);\r\n+\r\n+            // Add the connection exception listener to assert on exception conditions with.\r\n+            ExceptionMonitor exceptionMonitor = new ExceptionMonitor();\r\n+            connection.setExceptionListener(exceptionMonitor);\r\n+\r\n+            Session publisherSession = connection.createSession(transactional, ackMode);\r\n+            Session receiverSession = connection.createSession(transactional, ackMode);\r\n+\r\n+            Destination publisherProducerDestination =\r\n+                useTopics ? publisherSession.createTopic(destinationSendRoot)\r\n+                          : publisherSession.createQueue(destinationSendRoot);\r\n+\r\n+            MessageProducer publisherProducer =\r\n+                createPublisherProducer\r\n+                ? (needsQpidOptions\r\n+                    ? ((AMQSession) publisherSession).createProducer(publisherProducerDestination, mandatory, immediate)\r\n+                    : publisherSession.createProducer(publisherProducerDestination)) : null;\r\n+\r\n+            MessageConsumer publisherConsumer =\r\n+                createPublisherConsumer\r\n+                ? publisherSession.createConsumer(publisherSession.createQueue(destinationReceiveRoot)) : null;\r\n+\r\n+            if (publisherConsumer != null)\r\n+            {\r\n+                publisherConsumer.setMessageListener(new MessageMonitor());\r\n+            }\r\n+\r\n+            MessageProducer receiverProducer =\r\n+                createReceiverProducer ? receiverSession.createProducer(receiverSession.createQueue(destinationReceiveRoot))\r\n+                                       : null;\r\n+\r\n+            Destination receiverConsumerDestination =\r\n+                useTopics ? receiverSession.createTopic(destinationSendRoot)\r\n+                          : receiverSession.createQueue(destinationSendRoot);\r\n+\r\n+            MessageConsumer receiverConsumer =\r\n+                createReceiverConsumer\r\n+                ? ((durableSubscription && useTopics)\r\n+                    ? receiverSession.createDurableSubscriber((Topic) receiverConsumerDestination, \"testsub\")\r\n+                    : receiverSession.createConsumer(receiverConsumerDestination)) : null;\r\n+\r\n+            if (receiverConsumer != null)\r\n+            {\r\n+                receiverConsumer.setMessageListener(new MessageMonitor());\r\n+            }\r\n+\r\n+            // Start listening for incoming messages.\r\n+            connection.start();\r\n+\r\n+            // Package everything up.\r\n+            PublisherImpl publisher = new PublisherImpl(publisherProducer, publisherConsumer, publisherSession);\r\n+            ReceiverImpl receiver = new ReceiverImpl(receiverProducer, receiverConsumer, receiverSession);\r\n+\r\n+            return new CircuitImpl(testProps, publisher, receiver, connection, exceptionMonitor);\r\n+        }\r\n+        catch (JMSException e)\r\n+        {\r\n+            throw new RuntimeException(\"Could not create publisher/receivers pair due to a JMSException.\", e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the interface on the publishing end of the circuit.\r\n+     *\r\n+     * @return The publishing end of the circuit.\r\n+     */\r\n+    public Publisher getPublisher()\r\n+    {\r\n+        return publisher;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the interface on the receiving end of the circuit.\r\n+     *\r\n+     * @return The receiving end of the circuit.\r\n+     */\r\n+    public Receiver getReceiver()\r\n+    {\r\n+        return receiver;\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks the test circuit. The effect of this is to gather the circuits state, for both ends of the circuit,\r\n+     * into a report, against which assertions may be checked.\r\n+     */\r\n+    public void check()\r\n+    { }\r\n+\r\n+    /**\r\n+     * Applied a list of assertions against the test circuit. The {@link #check()} method should be called before doing\r\n+     * this, to ensure that the circuit has gathered its state into a report to assert against.\r\n+     *\r\n+     * @param assertions The list of assertions to apply.\r\n+     * @return Any assertions that failed.\r\n+     */\r\n+    public List<Assertion> applyAssertions(List<Assertion> assertions)\r\n+    {\r\n+        List<Assertion> failures = new LinkedList<Assertion>();\r\n+\r\n+        for (Assertion assertion : assertions)\r\n+        {\r\n+            if (!assertion.apply())\r\n+            {\r\n+                failures.add(assertion);\r\n+            }\r\n+        }\r\n+\r\n+        return failures;\r\n+    }\r\n+\r\n+    /**\r\n+     * Connects and starts the circuit. After this method is called the circuit is ready to send messages.\r\n+     */\r\n+    public void start()\r\n+    { }\r\n+\r\n+    /**\r\n+     * Closes the circuit. All associated resources are closed.\r\n+     */\r\n+    public void close()\r\n+    {\r\n+        try\r\n+        {\r\n+            publisher.close();\r\n+            receiver.close();\r\n+            connection.close();\r\n+        }\r\n+        catch (JMSException e)\r\n+        {\r\n+            throw new RuntimeException(\"Got JMSException during close.\", e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Sends a message on the test circuit. The exact nature of the message sent is controlled by the test parameters.\r\n+     */\r\n+    public void send()\r\n+    {\r\n+        boolean transactional = testProps.getPropertyAsBoolean(MessagingTestConfigProperties.TRANSACTED_PROPNAME);\r\n+\r\n+        // Send an immediate message through the publisher and ensure that it results in a JMSException.\r\n+        try\r\n+        {\r\n+            getPublisher().send(createTestMessage(getPublisher()));\r\n+\r\n+            if (transactional)\r\n+            {\r\n+                getPublisher().getSession().commit();\r\n+            }\r\n+        }\r\n+        catch (JMSException e)\r\n+        {\r\n+            exceptionMonitor.onException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Runs the default test procedure against the circuit, and checks that all of the specified assertions hold. The\r\n+     * outline of the default test procedure is:\r\n+     *\r\n+     * <p/><pre>\r\n+     * Start the circuit.\r\n+     * Send test messages.\r\n+     * Request a status report.\r\n+     * Assert conditions on the publishing end of the circuit.\r\n+     * Assert conditions on the receiving end of the circuit.\r\n+     * Close the circuit.\r\n+     * Pass with no failed assertions or fail with a list of failed assertions.\r\n+     * </pre>\r\n+     *\r\n+     * @param numMessages The number of messages to send using the default test procedure.\r\n+     * @param assertions  The list of assertions to apply.\r\n+     * @return Any assertions that failed.\r\n+     */\r\n+    public List<Assertion> test(int numMessages, List<Assertion> assertions)\r\n+    {\r\n+        // Start the test circuit.\r\n+        start();\r\n+\r\n+        // Send the requested number of test messages.\r\n+        for (int i = 0; i < numMessages; i++)\r\n+        {\r\n+            send();\r\n+        }\r\n+\r\n+        // Inject a short pause to allow time for exceptions to come back asynchronously.\r\n+        TestUtils.pause(100L);\r\n+\r\n+        // Request a status report.\r\n+        check();\r\n+\r\n+        // Apply all of the requested assertions, keeping record of any that fail.\r\n+        List<Assertion> failures = applyAssertions(assertions);\r\n+\r\n+        // Clean up the publisher/receivers/session/connections.\r\n+        close();\r\n+\r\n+        // Return any failed assertions to the caller.\r\n+        return failures;\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a message with the properties defined as per the test parameters.\r\n+     *\r\n+     * @param client The circuit end to create the message on.\r\n+     *\r\n+     * @return The test message.\r\n+     *\r\n+     * @throws JMSException Any JMSException occurring during creation of the message is allowed to fall through.\r\n+     */\r\n+    private Message createTestMessage(CircuitEnd client) throws JMSException\r\n+    {\r\n+        return client.getSession().createTextMessage(\"Hello\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the exception monitor for the publishing ends connection.\r\n+     *\r\n+     * @return The exception monitor for the publishing ends connection.\r\n+     */\r\n+    public ExceptionMonitor getConnectionExceptionMonitor()\r\n+    {\r\n+        return connectionExceptionMonitor;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the exception monitor for the publishing ends session.\r\n+     *\r\n+     * @return The exception monitor for the publishing ends session.\r\n+     */\r\n+    public ExceptionMonitor getExceptionMonitor()\r\n+    {\r\n+        return exceptionMonitor;\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/localcircuit/CircuitImpl.java"}, {"additions": 162, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/localcircuit/PublisherImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/localcircuit/PublisherImpl.java", "sha": "5b636078677efc8625bff9fc9c9ce9024b69f80a", "changes": 162, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/localcircuit/PublisherImpl.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,162 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.localcircuit;\r\n+\r\n+import org.apache.qpid.client.AMQNoConsumersException;\r\n+import org.apache.qpid.client.AMQNoRouteException;\r\n+import org.apache.qpid.test.framework.localcircuit.CircuitImpl;\r\n+import org.apache.qpid.test.framework.*;\r\n+\r\n+import javax.jms.MessageConsumer;\r\n+import javax.jms.MessageProducer;\r\n+import javax.jms.Session;\r\n+\r\n+/**\r\n+ * Provides an implementation of the {@link org.apache.qpid.test.framework.Publisher} interface that wraps a single message producer and consumer on\r\n+ * a single session.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Provide a message producer for sending messages.\r\n+ * <tr><td> Provide a message consumer for receiving messages.\r\n+ * <tr><td> Provide assertion that the publisher received no exceptions.\r\n+ * <tr><td> Provide assertion that the publisher received a no consumers error code.\r\n+ * <tr><td> Provide assertion that the publisher received a no route error code.\r\n+ * </table>\r\n+ */\r\n+public class PublisherImpl extends CircuitEndBase implements Publisher\r\n+{\r\n+    /** Holds a reference to the containing circuit. */\r\n+    private CircuitImpl circuit;\r\n+\r\n+    /**\r\n+     * Creates a circuit end point on the specified producer, consumer and session.\r\n+     *\r\n+     * @param producer The message producer for the circuit end point.\r\n+     * @param consumer The message consumer for the circuit end point.\r\n+     * @param session  The session for the circuit end point.\r\n+     */\r\n+    public PublisherImpl(MessageProducer producer, MessageConsumer consumer, Session session)\r\n+    {\r\n+        super(producer, consumer, session);\r\n+    }\r\n+\r\n+    /**\r\n+     * Provides an assertion that the publisher encountered no exceptions.\r\n+     *\r\n+     * @return An assertion that the publisher encountered no exceptions.\r\n+     */\r\n+    public Assertion noExceptionsAssertion()\r\n+    {\r\n+        return new AssertionBase()\r\n+            {\r\n+                public boolean apply()\r\n+                {\r\n+                    boolean passed = true;\r\n+                    ExceptionMonitor sessionExceptionMonitor = circuit.getExceptionMonitor();\r\n+                    ExceptionMonitor connectionExceptionMonitor = circuit.getConnectionExceptionMonitor();\r\n+\r\n+                    if (!connectionExceptionMonitor.assertNoExceptions())\r\n+                    {\r\n+                        passed = false;\r\n+                        addError(\"Was expecting no exceptions.\\n\");\r\n+                        addError(\"Got the following exceptions on the connection, \"\r\n+                            + circuit.getConnectionExceptionMonitor());\r\n+                    }\r\n+\r\n+                    if (!sessionExceptionMonitor.assertNoExceptions())\r\n+                    {\r\n+                        passed = false;\r\n+                        addError(\"Was expecting no exceptions.\\n\");\r\n+                        addError(\"Got the following exceptions on the producer, \" + circuit.getExceptionMonitor());\r\n+                    }\r\n+\r\n+                    return passed;\r\n+                }\r\n+            };\r\n+    }\r\n+\r\n+    /**\r\n+     * Provides an assertion that the publisher got a no consumers exception on every message.\r\n+     *\r\n+     * @return An assertion that the publisher got a no consumers exception on every message.\r\n+     */\r\n+    public Assertion noConsumersAssertion()\r\n+    {\r\n+        return new AssertionBase()\r\n+            {\r\n+                public boolean apply()\r\n+                {\r\n+                    boolean passed = true;\r\n+                    ExceptionMonitor connectionExceptionMonitor = circuit.getConnectionExceptionMonitor();\r\n+\r\n+                    if (!connectionExceptionMonitor.assertOneJMSExceptionWithLinkedCause(AMQNoConsumersException.class))\r\n+                    {\r\n+                        addError(\"Was expecting linked exception type \" + AMQNoConsumersException.class.getName()\r\n+                            + \" on the connection.\\n\");\r\n+                        addError((connectionExceptionMonitor.size() > 0)\r\n+                            ? (\"Actually got the following exceptions on the connection, \" + connectionExceptionMonitor)\r\n+                            : \"Got no exceptions on the connection.\");\r\n+                    }\r\n+\r\n+                    return passed;\r\n+                }\r\n+            };\r\n+    }\r\n+\r\n+    /**\r\n+     * Provides an assertion that the publisher got a no rout exception on every message.\r\n+     *\r\n+     * @return An assertion that the publisher got a no rout exception on every message.\r\n+     */\r\n+    public Assertion noRouteAssertion()\r\n+    {\r\n+        return new AssertionBase()\r\n+            {\r\n+                public boolean apply()\r\n+                {\r\n+                    boolean passed = true;\r\n+                    ExceptionMonitor connectionExceptionMonitor = circuit.getConnectionExceptionMonitor();\r\n+\r\n+                    if (!connectionExceptionMonitor.assertOneJMSExceptionWithLinkedCause(AMQNoRouteException.class))\r\n+                    {\r\n+                        addError(\"Was expecting linked exception type \" + AMQNoRouteException.class.getName()\r\n+                            + \" on the connection.\\n\");\r\n+                        addError((connectionExceptionMonitor.size() > 0)\r\n+                            ? (\"Actually got the following exceptions on the connection, \" + connectionExceptionMonitor)\r\n+                            : \"Got no exceptions on the connection.\");\r\n+                    }\r\n+\r\n+                    return passed;\r\n+                }\r\n+            };\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the contianing circuit.\r\n+     *\r\n+     * @param circuit The containing circuit.\r\n+     */\r\n+    public void setCircuit(CircuitImpl circuit)\r\n+    {\r\n+        this.circuit = circuit;\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/localcircuit/PublisherImpl.java"}, {"additions": 90, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/localcircuit/ReceiverImpl.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/localcircuit/ReceiverImpl.java", "sha": "6dd705680618c33c734813018f2b90ec3271dde4", "changes": 90, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/localcircuit/ReceiverImpl.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,90 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.localcircuit;\r\n+\r\n+import org.apache.qpid.test.framework.localcircuit.CircuitImpl;\r\n+import org.apache.qpid.test.framework.CircuitEndBase;\r\n+import org.apache.qpid.test.framework.Receiver;\r\n+import org.apache.qpid.test.framework.Assertion;\r\n+\r\n+import javax.jms.MessageConsumer;\r\n+import javax.jms.MessageProducer;\r\n+import javax.jms.Session;\r\n+\r\n+/**\r\n+ * Provides an implementation of the {@link org.apache.qpid.test.framework.Receiver} interface that wraps a single message producer and consumer on\r\n+ * a single session.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Provide a message producer for sending messages.\r\n+ * <tr><td> Provide a message consumer for receiving messages.\r\n+ * <tr><td> Provide assertion that the receivers received no exceptions.\r\n+ * <tr><td> Provide assertion that the receivers received all test messages sent to it.\r\n+ * </table>\r\n+ */\r\n+public class ReceiverImpl extends CircuitEndBase implements Receiver\r\n+{\r\n+    /** Holds a reference to the containing circuit. */\r\n+    private CircuitImpl circuit;\r\n+\r\n+    /**\r\n+     * Creates a circuit end point on the specified producer, consumer and session.\r\n+     *\r\n+     * @param producer The message producer for the circuit end point.\r\n+     * @param consumer The message consumer for the circuit end point.\r\n+     * @param session  The session for the circuit end point.\r\n+     */\r\n+    public ReceiverImpl(MessageProducer producer, MessageConsumer consumer, Session session)\r\n+    {\r\n+        super(producer, consumer, session);\r\n+    }\r\n+\r\n+    /**\r\n+     * Provides an assertion that the receivers encountered no exceptions.\r\n+     *\r\n+     * @return An assertion that the receivers encountered no exceptions.\r\n+     */\r\n+    public Assertion noExceptionsAssertion()\r\n+    {\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Provides an assertion that the receivers got all messages that were sent to it.\r\n+     *\r\n+     * @return An assertion that the receivers got all messages that were sent to it.\r\n+     */\r\n+    public Assertion allMessagesAssertion()\r\n+    {\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the contianing circuit.\r\n+     *\r\n+     * @param circuit The containing circuit.\r\n+     */\r\n+    public void setCircuit(CircuitImpl circuit)\r\n+    {\r\n+        this.circuit = circuit;\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/localcircuit/ReceiverImpl.java"}, {"additions": 22, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/package.html", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/package.html", "sha": "f07a5118e7777ab45d9bd8aae8183d2a8d90d16e", "changes": 22, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/package.html?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,22 @@\n+<html>\r\n+<body>\r\n+<p/>A framework for testing Qpid, built around a standard 'test circuit' design. The idea behind this framework is the\r\n+use of a test circuit which is configured by a set of test parameters, that may be projected onto a topology of\r\n+test nodes, with tests scripted to run over test circuits, making as few assumptions as possible about the underlying\r\n+topology. The standardization of the design, whilst limiting in some respectes, allows a large variety of test \r\n+scenarios to be written with minimal amounts of coding.\r\n+\r\n+<p/>The standard consruction block for a test, is a test circuit. This consists of a publisher, and a receiver. The\r\n+publisher and receiver may reside on the same machine, or may be distributed. Will use a standard set of properties to\r\n+define the desired circuit topology.\r\n+\r\n+<p/>Tests are always to be controlled from the publishing side only. The receiving end of the circuit is to be exposed\r\n+to the test code through an interface, that abstracts as much as possible the receiving end of the test. The interface\r\n+exposes a set of 'assertions' that may be applied to the receiving end of the test circuit.\r\n+\r\n+<p/>In the case where the receiving end of the circuit resides on the same JVM, the assertions will call the receivers\r\n+code locally. Where the receiving end is distributed accross one or more machines, the assertions will be applied to a\r\n+test report gethered from all of the receivers. Test code will be written to the assertions making as few assumptions\r\n+as possible about the exact test topology.\r\n+</body>\r\n+</html>\n\\ No newline at end of file", "filename": "systests/src/main/java/org/apache/qpid/test/framework/package.html"}, {"additions": 129, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/BaseDistributedTestSequencer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/BaseDistributedTestSequencer.java", "sha": "a0e3d3b4a6821d424c99cc1cb40790e00cc5d681", "changes": 129, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/sequencers/BaseDistributedTestSequencer.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,129 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.sequencers;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.test.framework.distributedtesting.DistributedTestCase;\r\n+import org.apache.qpid.test.framework.TestClientDetails;\r\n+import org.apache.qpid.test.framework.Circuit;\r\n+import org.apache.qpid.util.ConversationFactory;\r\n+\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Properties;\r\n+\r\n+/**\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td>\r\n+ * </table>\r\n+ */\r\n+public abstract class BaseDistributedTestSequencer implements DistributedTestSequencer\r\n+{\r\n+    /** Used for debugging. */\r\n+    private final Logger log = Logger.getLogger(DistributedTestCase.class);\r\n+\r\n+    /** Holds the contact details for the sending test client. */\r\n+    protected TestClientDetails sender;\r\n+\r\n+    /** Holds the contact details for the receving test client. */\r\n+    protected List<TestClientDetails> receivers = new LinkedList<TestClientDetails>();\r\n+\r\n+    /** Holds the conversation factory over which to coordinate the test. */\r\n+    protected ConversationFactory conversationFactory;\r\n+\r\n+    /**\r\n+     * Creates a test circuit for the test, configered by the test parameters specified.\r\n+     *\r\n+     * @param testProperties The test parameters.\r\n+     * @return A test circuit.\r\n+     */\r\n+    public Circuit createCircuit(Properties testProperties)\r\n+    {\r\n+        throw new RuntimeException(\"Not implemented.\");\r\n+    }\r\n+\r\n+    /**\r\n+      * Sets the sender test client to coordinate the test with.\r\n+      *\r\n+      * @param sender The contact details of the sending client in the test.\r\n+      */\r\n+    public void setSender(TestClientDetails sender)\r\n+    {\r\n+        log.debug(\"public void setSender(TestClientDetails sender = \" + sender + \"): called\");\r\n+\r\n+        this.sender = sender;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the receiving test client to coordinate the test with.\r\n+     *\r\n+     * @param receiver The contact details of the sending client in the test.\r\n+     */\r\n+    public void setReceiver(TestClientDetails receiver)\r\n+    {\r\n+        log.debug(\"public void setReceiver(TestClientDetails receivers = \" + receiver + \"): called\");\r\n+\r\n+        this.receivers.add(receiver);\r\n+    }\r\n+\r\n+    /**\r\n+     * Supplies the sending test client.\r\n+     *\r\n+     * @return The sending test client.\r\n+     */\r\n+    public TestClientDetails getSender()\r\n+    {\r\n+        return sender;\r\n+    }\r\n+\r\n+    /**\r\n+     * Supplies the receiving test client.\r\n+     *\r\n+     * @return The receiving test client.\r\n+     */\r\n+    public List<TestClientDetails> getReceivers()\r\n+    {\r\n+        return receivers;\r\n+    }\r\n+\r\n+    /**\r\n+     * Accepts the conversation factory over which to hold the test coordinating conversation.\r\n+     *\r\n+     * @param conversationFactory The conversation factory to coordinate the test over.\r\n+     */\r\n+    public void setConversationFactory(ConversationFactory conversationFactory)\r\n+    {\r\n+        this.conversationFactory = conversationFactory;\r\n+    }\r\n+\r\n+    /**\r\n+     * Provides the conversation factory for providing the distributed test sequencing conversations over the test\r\n+     * connection.\r\n+     *\r\n+     * @return The conversation factory to create test sequencing conversations with.\r\n+     */\r\n+    public ConversationFactory getConversationFactory()\r\n+    {\r\n+        return conversationFactory;\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/sequencers/BaseDistributedTestSequencer.java"}, {"additions": 75, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/DistributedTestSequencer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/DistributedTestSequencer.java", "sha": "73e61ec921f3f9aa3d3654a15a4f1d27877bb3d5", "changes": 75, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/sequencers/DistributedTestSequencer.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,75 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.sequencers;\r\n+\r\n+import org.apache.qpid.test.framework.TestClientDetails;\r\n+import org.apache.qpid.util.ConversationFactory;\r\n+\r\n+import java.util.List;\r\n+\r\n+/**\r\n+ * A DistributedTestSequencer is a test sequencer that coordinates activity amongst many\r\n+ * {@link org.apache.qpid.test.framework.distributedtesting.TestClient}s.\r\n+ *\r\n+ * <p><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td> Accept notification of test case participants.\r\n+ * <tr><td> Accept JMS Connection to carry out the coordination over.\r\n+ * <tr><td> Coordinate a test sequence amongst participants. <td> {@link ConversationFactory}\r\n+ * </table>\r\n+ */\r\n+public interface DistributedTestSequencer extends TestCaseSequencer\r\n+{\r\n+    /**\r\n+     * Sets the sender test client to coordinate the test with.\r\n+     *\r\n+     * @param sender The contact details of the sending client in the test.\r\n+     */\r\n+    public void setSender(TestClientDetails sender);\r\n+\r\n+    /**\r\n+     * Sets the receiving test client to coordinate the test with.\r\n+     *\r\n+     * @param receiver The contact details of the sending client in the test.\r\n+     */\r\n+    public void setReceiver(TestClientDetails receiver);\r\n+\r\n+    /**\r\n+     * Supplies the sending test client.\r\n+     *\r\n+     * @return The sending test client.\r\n+     */\r\n+    public TestClientDetails getSender();\r\n+\r\n+    /**\r\n+     * Supplies the receiving test client.\r\n+     *\r\n+     * @return The receiving test client.\r\n+     */\r\n+    public List<TestClientDetails> getReceivers();\r\n+\r\n+    /**\r\n+     * Accepts the conversation factory over which to hold the test coordinating conversation.\r\n+     *\r\n+     * @param conversationFactory The conversation factory to coordinate the test over.\r\n+     */\r\n+    public void setConversationFactory(ConversationFactory conversationFactory);\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/sequencers/DistributedTestSequencer.java"}, {"additions": 171, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/FanOutTestSequencer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/FanOutTestSequencer.java", "sha": "a116b2306530cb7c5f7240f33c14befc39c98e7d", "changes": 171, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/sequencers/FanOutTestSequencer.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,171 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.sequencers;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.test.framework.TestClientDetails;\r\n+import org.apache.qpid.test.framework.Assertion;\r\n+import org.apache.qpid.test.framework.Circuit;\r\n+import org.apache.qpid.test.framework.TestUtils;\r\n+import org.apache.qpid.util.ConversationFactory;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n+\r\n+import javax.jms.Destination;\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+import javax.jms.Session;\r\n+\r\n+import java.util.List;\r\n+import java.util.Properties;\r\n+\r\n+/**\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td>\r\n+ * </table>\r\n+ */\r\n+public class FanOutTestSequencer extends BaseDistributedTestSequencer\r\n+{\r\n+    /** Used for debugging. */\r\n+    Logger log = Logger.getLogger(FanOutTestSequencer.class);\r\n+\r\n+    /**\r\n+     * Holds a test coordinating conversation with the test clients. This should consist of assigning the test roles,\r\n+     * begining the test, gathering the test reports from the participants, and checking for assertion failures against\r\n+     * the test reports.\r\n+     *\r\n+     * @param testCircuit    The test circuit.\r\n+     * @param assertions     The list of assertions to apply to the test circuit.\r\n+     * @param testProperties The test case definition.\r\n+     */\r\n+    public void sequenceTest(Circuit testCircuit, List<Assertion> assertions, Properties testProperties)\r\n+    {\r\n+        log.debug(\"protected Message[] sequenceTest(Object... testProperties = \" + testProperties + \"): called\");\r\n+\r\n+        TestClientDetails sender = getSender();\r\n+        List<TestClientDetails> receivers = getReceivers();\r\n+        ConversationFactory conversationFactory = getConversationFactory();\r\n+\r\n+        try\r\n+        {\r\n+            // Create a conversation on the sender clients private control rouete.\r\n+            Session session = conversationFactory.getSession();\r\n+            Destination senderControlTopic = session.createTopic(sender.privateControlKey);\r\n+            ConversationFactory.Conversation senderConversation = conversationFactory.startConversation();\r\n+\r\n+            // Assign the sender role to the sending test client.\r\n+            Message assignSender = conversationFactory.getSession().createMessage();\r\n+            TestUtils.setPropertiesOnMessage(assignSender, testProperties);\r\n+            assignSender.setStringProperty(\"CONTROL_TYPE\", \"ASSIGN_ROLE\");\r\n+            assignSender.setStringProperty(\"ROLE\", \"SENDER\");\r\n+            assignSender.setStringProperty(\"CLIENT_NAME\", \"Sustained_SENDER\");\r\n+\r\n+            senderConversation.send(senderControlTopic, assignSender);\r\n+\r\n+            // Wait for the sender to confirm its role.\r\n+            senderConversation.receive();\r\n+\r\n+            // Assign the receivers roles.\r\n+            for (TestClientDetails receiver : receivers)\r\n+            {\r\n+                assignReceiverRole(receiver, testProperties, true);\r\n+            }\r\n+\r\n+            // Start the test on the sender.\r\n+            Message start = session.createMessage();\r\n+            start.setStringProperty(\"CONTROL_TYPE\", \"START\");\r\n+\r\n+            senderConversation.send(senderControlTopic, start);\r\n+\r\n+            // Wait for the test sender to return its report.\r\n+            Message senderReport = senderConversation.receive();\r\n+            TestUtils.pause(500);\r\n+\r\n+            // Ask the receivers for their reports.\r\n+            Message statusRequest = session.createMessage();\r\n+            statusRequest.setStringProperty(\"CONTROL_TYPE\", \"STATUS_REQUEST\");\r\n+\r\n+            // Gather the reports from all of the receiving clients.\r\n+\r\n+            // Return all of the test reports, the senders report first.\r\n+            // return new Message[] { senderReport };\r\n+        }\r\n+        catch (JMSException e)\r\n+        {\r\n+            throw new RuntimeException(\"Unhandled JMSException.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a test circuit for the test, configered by the test parameters specified.\r\n+     *\r\n+     * @param testProperties The test parameters.\r\n+     * @return A test circuit.\r\n+     */\r\n+    public Circuit createCircuit(ParsedProperties testProperties)\r\n+    {\r\n+        throw new RuntimeException(\"Not implemented.\");\r\n+    }\r\n+\r\n+    /**\r\n+     * Assigns the receivers role to the specified test client that is to act as a receivers during the test. This method\r\n+     * does not always wait for the receiving clients to confirm their role assignments. This is because this method\r\n+     * may be called from an 'onMessage' method, when a client is joining the test at a later point in time, and it\r\n+     * is not possible to do a synchronous receive during an 'onMessage' method. There is a flag to indicate whether\r\n+     * or not to wait for role confirmations.\r\n+     *\r\n+     * @param receiver       The test client to assign the receivers role to.\r\n+     * @param testProperties The test parameters.\r\n+     * @param confirm        Indicates whether role confirmation should be waited for.\r\n+     *\r\n+     * @throws JMSException Any JMSExceptions occurring during the conversation are allowed to fall through.\r\n+     */\r\n+    protected void assignReceiverRole(TestClientDetails receiver, Properties testProperties, boolean confirm)\r\n+        throws JMSException\r\n+    {\r\n+        log.info(\"assignReceiverRole(TestClientDetails receivers = \" + receiver + \", Map<String, Object> testProperties = \"\r\n+            + testProperties + \"): called\");\r\n+\r\n+        ConversationFactory conversationFactory = getConversationFactory();\r\n+\r\n+        // Create a conversation with the receiving test client.\r\n+        Session session = conversationFactory.getSession();\r\n+        Destination receiverControlTopic = session.createTopic(receiver.privateControlKey);\r\n+        ConversationFactory.Conversation receiverConversation = conversationFactory.startConversation();\r\n+\r\n+        // Assign the receivers role to the receiving client.\r\n+        Message assignReceiver = session.createMessage();\r\n+        TestUtils.setPropertiesOnMessage(assignReceiver, testProperties);\r\n+        assignReceiver.setStringProperty(\"CONTROL_TYPE\", \"ASSIGN_ROLE\");\r\n+        assignReceiver.setStringProperty(\"ROLE\", \"RECEIVER\");\r\n+        assignReceiver.setStringProperty(\"CLIENT_NAME\", receiver.clientName);\r\n+\r\n+        receiverConversation.send(receiverControlTopic, assignReceiver);\r\n+\r\n+        // Wait for the role confirmation to come back.\r\n+        if (confirm)\r\n+        {\r\n+            receiverConversation.receive();\r\n+        }\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/sequencers/FanOutTestSequencer.java"}, {"additions": 137, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/InteropTestSequencer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/InteropTestSequencer.java", "sha": "f2253d416b6f13b407c30290345aa9c74950bc76", "changes": 137, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/sequencers/InteropTestSequencer.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,137 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.sequencers;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+\r\n+import org.apache.qpid.test.framework.TestClientDetails;\r\n+import org.apache.qpid.test.framework.Assertion;\r\n+import org.apache.qpid.test.framework.Circuit;\r\n+import org.apache.qpid.test.framework.TestUtils;\r\n+import org.apache.qpid.util.ConversationFactory;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n+\r\n+import javax.jms.Destination;\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+import javax.jms.Session;\r\n+\r\n+import java.util.List;\r\n+import java.util.Properties;\r\n+\r\n+/**\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities <th> Collaborations\r\n+ * <tr><td>\r\n+ * </table>\r\n+ */\r\n+public class InteropTestSequencer extends BaseDistributedTestSequencer\r\n+{\r\n+    /** Used for debugging. */\r\n+    Logger log = Logger.getLogger(InteropTestSequencer.class);\r\n+\r\n+    /**\r\n+     * Holds a test coordinating conversation with the test clients. This should consist of assigning the test roles,\r\n+     * begining the test, gathering the test reports from the participants, and checking for assertion failures against\r\n+     * the test reports.\r\n+     *\r\n+     * @param testCircuit    The test circuit.\r\n+     * @param assertions     The list of assertions to apply to the test circuit.\r\n+     * @param testProperties The test case definition.\r\n+     */\r\n+    public void sequenceTest(Circuit testCircuit, List<Assertion> assertions, Properties testProperties)\r\n+    {\r\n+        log.debug(\"protected Message[] sequenceTest(Object... testProperties = \" + testProperties + \"): called\");\r\n+\r\n+        TestClientDetails sender = getSender();\r\n+        List<TestClientDetails> receivers = getReceivers();\r\n+        ConversationFactory conversationFactory = getConversationFactory();\r\n+\r\n+        try\r\n+        {\r\n+            Session session = conversationFactory.getSession();\r\n+            Destination senderControlTopic = session.createTopic(sender.privateControlKey);\r\n+            Destination receiverControlTopic = session.createTopic(receivers.get(0).privateControlKey);\r\n+\r\n+            ConversationFactory.Conversation senderConversation = conversationFactory.startConversation();\r\n+            ConversationFactory.Conversation receiverConversation = conversationFactory.startConversation();\r\n+\r\n+            // Assign the sender role to the sending test client.\r\n+            Message assignSender = conversationFactory.getSession().createMessage();\r\n+            TestUtils.setPropertiesOnMessage(assignSender, testProperties);\r\n+            assignSender.setStringProperty(\"CONTROL_TYPE\", \"ASSIGN_ROLE\");\r\n+            assignSender.setStringProperty(\"ROLE\", \"SENDER\");\r\n+\r\n+            senderConversation.send(senderControlTopic, assignSender);\r\n+\r\n+            // Assign the receivers role the receiving client.\r\n+            Message assignReceiver = session.createMessage();\r\n+            TestUtils.setPropertiesOnMessage(assignReceiver, testProperties);\r\n+            assignReceiver.setStringProperty(\"CONTROL_TYPE\", \"ASSIGN_ROLE\");\r\n+            assignReceiver.setStringProperty(\"ROLE\", \"RECEIVER\");\r\n+\r\n+            receiverConversation.send(receiverControlTopic, assignReceiver);\r\n+\r\n+            // Wait for the senders and receivers to confirm their roles.\r\n+            senderConversation.receive();\r\n+            receiverConversation.receive();\r\n+\r\n+            // Start the test.\r\n+            Message start = session.createMessage();\r\n+            start.setStringProperty(\"CONTROL_TYPE\", \"START\");\r\n+\r\n+            senderConversation.send(senderControlTopic, start);\r\n+\r\n+            // Wait for the test sender to return its report.\r\n+            Message senderReport = senderConversation.receive();\r\n+            TestUtils.pause(500);\r\n+\r\n+            // Ask the receivers for its report.\r\n+            Message statusRequest = session.createMessage();\r\n+            statusRequest.setStringProperty(\"CONTROL_TYPE\", \"STATUS_REQUEST\");\r\n+\r\n+            receiverConversation.send(receiverControlTopic, statusRequest);\r\n+\r\n+            // Wait for the receivers to send its report.\r\n+            Message receiverReport = receiverConversation.receive();\r\n+\r\n+            // return new Message[] { senderReport, receiverReport };\r\n+\r\n+            // Apply assertions.\r\n+        }\r\n+        catch (JMSException e)\r\n+        {\r\n+            throw new RuntimeException(\"JMSException not handled.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a test circuit for the test, configered by the test parameters specified.\r\n+     *\r\n+     * @param testProperties The test parameters.\r\n+     * @return A test circuit.\r\n+     */\r\n+    public Circuit createCircuit(ParsedProperties testProperties)\r\n+    {\r\n+        throw new RuntimeException(\"Not implemented.\");\r\n+    }\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/sequencers/InteropTestSequencer.java"}, {"additions": 66, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/TestCaseSequencer.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/test/framework/sequencers/TestCaseSequencer.java", "sha": "4f09642467b12fbf7571e77d7c086e9f2423e6e6", "changes": 66, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/test/framework/sequencers/TestCaseSequencer.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "patch": "@@ -0,0 +1,66 @@\n+/*\r\n+ *\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ *\r\n+ */\r\n+package org.apache.qpid.test.framework.sequencers;\r\n+\r\n+import org.apache.qpid.test.framework.Assertion;\r\n+import org.apache.qpid.test.framework.Circuit;\r\n+\r\n+import uk.co.thebadgerset.junit.extensions.util.ParsedProperties;\r\n+\r\n+import javax.jms.JMSException;\r\n+import javax.jms.Message;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Properties;\r\n+\r\n+/**\r\n+ * A TestCaseSequence is responsibile for creating test circuits appropriate to the context that a test case is\r\n+ * running in, and providing an implementation of a standard test procedure over a test circuit.\r\n+ *\r\n+ * <p/><table id=\"crc\"><caption>CRC Card</caption>\r\n+ * <tr><th> Responsibilities\r\n+ * <tr><td> Provide a standard test procedure over a test circuit.\r\n+ * <tr><td> Construct test circuits appropriate to a tests context.\r\n+ * </table>\r\n+ */\r\n+public interface TestCaseSequencer\r\n+{\r\n+    /**\r\n+     * Holds a test coordinating conversation with the test clients. This should consist of assigning the test roles,\r\n+     * begining the test, gathering the test reports from the participants, and checking for assertion failures against\r\n+     * the test reports.\r\n+     *\r\n+     * @param testCircuit    The test circuit.\r\n+     * @param assertions     The list of assertions to apply to the test circuit.\r\n+     * @param testProperties The test case definition.\r\n+     */\r\n+    public void sequenceTest(Circuit testCircuit, List<Assertion> assertions, Properties testProperties);\r\n+\r\n+    /**\r\n+     * Creates a test circuit for the test, configered by the test parameters specified.\r\n+     *\r\n+     * @param testProperties The test parameters.\r\n+     *\r\n+     * @return A test circuit.\r\n+     */\r\n+    public Circuit createCircuit(ParsedProperties testProperties);\r\n+}\r", "filename": "systests/src/main/java/org/apache/qpid/test/framework/sequencers/TestCaseSequencer.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/util/ClasspathScanner.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/util/ClasspathScanner.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/util/ClasspathScanner.java", "sha": "bad49060ca3d459a9417c004c498a5eec8fb0a50", "changes": 0, "status": "renamed", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/util/ClasspathScanner.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "filename": "systests/src/main/java/org/apache/qpid/util/ClasspathScanner.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/util/ConversationFactory.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/12199502e6c6dbca9a3650e4a401f478b0dd06b4/systests/src/main/java/org/apache/qpid/util/ConversationFactory.java", "previous_filename": "integrationtests/src/main/java/org/apache/qpid/util/ConversationFactory.java", "sha": "0090bec3d04ecab93e9acf801763fec589882c9e", "changes": 0, "status": "renamed", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/systests/src/main/java/org/apache/qpid/util/ConversationFactory.java?ref=12199502e6c6dbca9a3650e4a401f478b0dd06b4", "filename": "systests/src/main/java/org/apache/qpid/util/ConversationFactory.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/tasks/src/org/apache/qpid/tasks/BaseTask.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/tasks/src/org/apache/qpid/tasks/BaseTask.java", "sha": "be604b14cf08b0565f24a943a2942b0d9168124e", "changes": 74, "status": "removed", "deletions": 74, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/tasks/src/org/apache/qpid/tasks/BaseTask.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,74 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.tasks;\n-\n-import org.apache.tools.ant.BuildException;\n-import org.apache.tools.ant.Task;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-/**\n- * BaseTask -- an abstract base task for blaze specific tasks.\n- **/\n-\n-public abstract class BaseTask extends Task {\n-\n-    private static Set EMPTY = new HashSet();\n-    {\n-        EMPTY.add(0);\n-        EMPTY.add(\"\");\n-    }\n-\n-    public static class Validator {\n-\n-        private String name;\n-        private Object value;\n-\n-        private  Validator(String name, Object value) {\n-            this.name = name;\n-            this.value = value;\n-        }\n-\n-        public Validator required() {\n-            if (value == null) {\n-                error(\"value is required\");\n-            }\n-            return this;\n-        }\n-\n-        public Validator nonempty() {\n-            if (EMPTY.contains(value)) {\n-                error(\"value is empty\");\n-            }\n-            return this;\n-        }\n-\n-        private void error(String msg) {\n-            throw new BuildException(name + \": \" + msg);\n-        }\n-    }\n-\n-    public Validator validate(String name, Object value) {\n-        return new Validator(name, value);\n-    }\n-\n-}", "filename": "tasks/src/org/apache/qpid/tasks/BaseTask.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/tasks/src/org/apache/qpid/tasks/Foreach.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/tasks/src/org/apache/qpid/tasks/Foreach.java", "sha": "91b8a25ce20b387eeef7adb41031ff3d2b64b515", "changes": 84, "status": "removed", "deletions": 84, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/tasks/src/org/apache/qpid/tasks/Foreach.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,84 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.tasks;\n-\n-import org.apache.tools.ant.BuildException;\n-import org.apache.tools.ant.Task;\n-import org.apache.tools.ant.TaskContainer;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-/**\n- * Foreach -- an ant task that allows iteration.\n- **/\n-\n-public class Foreach extends BaseTask implements TaskContainer {\n-\n-    private String property;\n-    private String list;\n-    private String delim = \"\\\\s+\";\n-    private String stop;\n-    private List<Task> tasks = new ArrayList<Task>();\n-\n-    public void setProperty(String p) {\n-        property = p;\n-    }\n-\n-    public void setList(String l) {\n-        list = l;\n-    }\n-\n-    public void setDelim(String d) {\n-        delim = d;\n-    }\n-\n-    public void setStop(String s) {\n-        stop = s;\n-    }\n-\n-    public void addTask(Task t) {\n-        tasks.add(t);\n-    }\n-\n-    public void execute() {\n-        validate(\"property\", property).required().nonempty();\n-        validate(\"list\", property).required();\n-\n-        if (list.length() == 0) {\n-            return;\n-        }\n-\n-        String[] values = list.split(delim);\n-        for (int i = 0; i < values.length; i++) {\n-            String value = values[i];\n-            if (stop != null && stop.length() > 0 &&\n-                value.equals(stop)) {\n-                break;\n-            }\n-            getProject().setProperty(property, value);\n-            for (Task t : tasks) {\n-                t.perform();\n-            }\n-        }\n-    }\n-\n-}", "filename": "tasks/src/org/apache/qpid/tasks/Foreach.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/tasks/src/org/apache/qpid/tasks/Map.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/tasks/src/org/apache/qpid/tasks/Map.java", "sha": "e456b9e6ab1a1cb0f59efc0814cf60b769fa6b63", "changes": 94, "status": "removed", "deletions": 94, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/tasks/src/org/apache/qpid/tasks/Map.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "patch": "@@ -1,94 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.qpid.tasks;\n-\n-import org.apache.tools.ant.BuildException;\n-\n-import org.apache.tools.ant.util.ChainedMapper;\n-import org.apache.tools.ant.util.FileNameMapper;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-/**\n- * Map -- an ant task that allows arbitrary use of FileNameMappers\n- **/\n-\n-public class Map extends BaseTask {\n-\n-    private String property;\n-    private String value;\n-    private String split = \"\\\\s+\";\n-    private String join = \" \";\n-    private boolean setonempty = true;\n-    private ChainedMapper mapper = new ChainedMapper();\n-\n-    public void setProperty(String p) {\n-        property = p;\n-    }\n-\n-    public void setValue(String v) {\n-        value = v;\n-    }\n-\n-    public void setSplit(String s) {\n-        split = s;\n-    }\n-\n-    public void setJoin(String j) {\n-        join = j;\n-    }\n-\n-    public void setSetonempty(boolean b) {\n-        setonempty = b;\n-    }\n-\n-    public void add(FileNameMapper m) {\n-        mapper.add(m);\n-    }\n-\n-    public void execute() {\n-        validate(\"property\", property).required().nonempty();\n-        validate(\"value\", value).required();\n-\n-        if (mapper.getMappers().size() == 0) {\n-            throw new BuildException(\"at least one mapper must is required\");\n-        }\n-\n-        String[] parts = value.split(split);\n-        StringBuffer buf = new StringBuffer();\n-        for (int i = 0; i < parts.length; i++) {\n-            if (parts[i].length() == 0) { continue; }\n-            String[] names = mapper.mapFileName(parts[i]);\n-            for (int j = 0; j < names.length; j++) {\n-                if (buf.length() > 0) {\n-                    buf.append(join);\n-                }\n-                buf.append(names[j]);\n-            }\n-        }\n-\n-        if (buf.length() > 0 || setonempty) {\n-            getProject().setNewProperty(property, buf.toString());\n-        }\n-    }\n-\n-}", "filename": "tasks/src/org/apache/qpid/tasks/Map.java"}, {"additions": 0, "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/tasks/src/org/apache/qpid/tasks/Require.java", "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/fd986aae23bf15a33a3ee8853a3116c58e3aeadb/tasks/src/org/apache/qpid/tasks/Require.java", "sha": "84870c90e4ec15eb591b3db5c74a8b4d57c3a213", "changes": 0, "status": "removed", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/tasks/src/org/apache/qpid/tasks/Require.java?ref=fd986aae23bf15a33a3ee8853a3116c58e3aeadb", "filename": "tasks/src/org/apache/qpid/tasks/Require.java"}], "repo": "qpid-jms-amqp-0-x"}]
