{
    "geronimo_29e40de": {
        "repo": "geronimo",
        "message": "Throw a meaningful NPE when the configurationManager is not set\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/branches/1.1@398559 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/29e40de11b6bd518fcf974dbf3857f67f4cdd1c5",
        "parent": "https://github.com/apache/geronimo/commit/891f3b69a66111de3245a325f1a8850f265b9b79",
        "bug_id": "geronimo_29e40de",
        "file": [
            {
                "sha": "0db24af509c54907ef31978e05993dae66508f56",
                "filename": "modules/deployment/src/java/org/apache/geronimo/deployment/DeploymentContext.java",
                "blob_url": "https://github.com/apache/geronimo/blob/29e40de11b6bd518fcf974dbf3857f67f4cdd1c5/modules/deployment/src/java/org/apache/geronimo/deployment/DeploymentContext.java",
                "raw_url": "https://github.com/apache/geronimo/raw/29e40de11b6bd518fcf974dbf3857f67f4cdd1c5/modules/deployment/src/java/org/apache/geronimo/deployment/DeploymentContext.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/deployment/src/java/org/apache/geronimo/deployment/DeploymentContext.java?ref=29e40de11b6bd518fcf974dbf3857f67f4cdd1c5",
                "patch": "@@ -83,10 +83,10 @@ public DeploymentContext(File baseDir, File inPlaceConfigurationDir, Environment\n     }\n \n     public DeploymentContext(File baseDir, File inPlaceConfigurationDir, Environment environment, ConfigurationModuleType moduleType, Naming naming, ConfigurationManager configurationManager) throws DeploymentException {\n-        this.configurationManager = configurationManager;\n         if (baseDir == null) throw new NullPointerException(\"baseDir is null\");\n         if (environment == null) throw new NullPointerException(\"environment is null\");\n         if (moduleType == null) throw new NullPointerException(\"type is null\");\n+        if (configurationManager == null) throw new NullPointerException(\"configurationManager is null\");\n \n         if (!baseDir.exists()) {\n             baseDir.mkdirs();\n@@ -99,6 +99,8 @@ public DeploymentContext(File baseDir, File inPlaceConfigurationDir, Environment\n \n         this.configuration = createTempConfiguration(environment, moduleType, baseDir, inPlaceConfigurationDir, configurationManager, naming);\n \n+        this.configurationManager = configurationManager;\n+        \n         if (null == inPlaceConfigurationDir) {\n             resourceContext = new CopyResourceContext(configuration, baseDir);\n         } else {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "DeploymentContext.java"
        ],
        "unit_tests": [
            "DeploymentContextTest.java"
        ]
    },
    "geronimo_452cd12": {
        "repo": "geronimo",
        "message": "Fix potential NPE in ConnectorModuleBuilder. Need to guard against potentially non-existent elements...\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@518034 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/452cd127715598557e7a7b8764d6e4b2997d6be2",
        "parent": "https://github.com/apache/geronimo/commit/68ff3c6f7ef71263cff6cf35de23f24f5ddcd5f5",
        "bug_id": "geronimo_452cd12",
        "file": [
            {
                "sha": "3ffca88e472c47edf9a3bc3c1f77d0fccf197302",
                "filename": "modules/geronimo-connector-builder/src/main/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java",
                "blob_url": "https://github.com/apache/geronimo/blob/452cd127715598557e7a7b8764d6e4b2997d6be2/modules/geronimo-connector-builder/src/main/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java",
                "raw_url": "https://github.com/apache/geronimo/raw/452cd127715598557e7a7b8764d6e4b2997d6be2/modules/geronimo-connector-builder/src/main/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-connector-builder/src/main/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java?ref=452cd127715598557e7a7b8764d6e4b2997d6be2",
                "patch": "@@ -421,12 +421,14 @@ TODO include admin objects (n) from JCAResource presumably\n \n             // Add map from messageListenerInterface to activationSpec class\n             Map<String,String> messageListenerToActivationSpecMap = new TreeMap<String,String>();\n-            for (MessagelistenerType messagelistenerType : resourceadapter.getInboundResourceadapter().getMessageadapter().getMessagelistenerArray()) {\n-                String messageListenerInterface = messagelistenerType.getMessagelistenerType().getStringValue().trim();\n-                ActivationspecType activationspec = messagelistenerType.getActivationspec();\n-                String activationSpecClassName = activationspec.getActivationspecClass().getStringValue().trim();\n-                messageListenerToActivationSpecMap.put(messageListenerInterface, activationSpecClassName);\n-                resourceAdapterGBeanData.setAttribute(\"messageListenerToActivationSpecMap\", messageListenerToActivationSpecMap);\n+            if (resourceadapter.isSetInboundResourceadapter() && resourceadapter.getInboundResourceadapter().isSetMessageadapter()) {\n+                for (MessagelistenerType messagelistenerType : resourceadapter.getInboundResourceadapter().getMessageadapter().getMessagelistenerArray()) {\n+                    String messageListenerInterface = messagelistenerType.getMessagelistenerType().getStringValue().trim();\n+                    ActivationspecType activationspec = messagelistenerType.getActivationspec();\n+                    String activationSpecClassName = activationspec.getActivationspecClass().getStringValue().trim();\n+                    messageListenerToActivationSpecMap.put(messageListenerInterface, activationSpecClassName);\n+                    resourceAdapterGBeanData.setAttribute(\"messageListenerToActivationSpecMap\", messageListenerToActivationSpecMap);\n+                }\n             }\n \n             resourceAdapterModuleData.setAttribute(\"resourceAdapterGBeanData\", resourceAdapterGBeanData);",
                "deletions": 6
            }
        ],
        "patched_files": [
            "ConnectorModuleBuilder.java"
        ],
        "unit_tests": [
            "ConnectorModuleBuilderTest.java"
        ]
    },
    "geronimo_ac13e39": {
        "repo": "geronimo",
        "message": "prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@527745 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/ac13e3938f108c2cc9787ba3812a2e0a7fe5c633",
        "parent": "https://github.com/apache/geronimo/commit/4a6f8769a4288f5e9aa5d39389601b17dce2b9ea",
        "bug_id": "geronimo_ac13e39",
        "file": [
            {
                "sha": "56cbe1ee9eceaf3e1b29c8befe1bc745142f287a",
                "filename": "modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ac13e3938f108c2cc9787ba3812a2e0a7fe5c633/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ac13e3938f108c2cc9787ba3812a2e0a7fe5c633/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java?ref=ac13e3938f108c2cc9787ba3812a2e0a7fe5c633",
                "patch": "@@ -472,7 +472,10 @@ protected void processGetRequest(Request request, Response response, AxisService\n             if (portInfo.getWsdlFile() != null && !portInfo.getWsdlFile().equals(\"\")) { //wsdl file has been provided\n                 Definition wsdlDefinition = new AxisServiceGenerator().getWSDLDefition(portInfo, configurationBaseUrl, classLoader);\n                 if(wsdlDefinition != null){\n-                    String portName = portInfo.getWsdlPort().getLocalPart();\n+                    String portName = null;\n+                    if(portInfo.getWsdlPort() != null) {\n+                        portName = portInfo.getWsdlPort().getLocalPart();\n+                    }\n                     QName qName = portInfo.getWsdlService();\n                     if (qName == null) {\n                         qName = new QName(service.getTargetNamespace(), service.getName());",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Axis2WebServiceContainer.java"
        ],
        "unit_tests": [
            "Axis2WebServiceContainerTest.java"
        ]
    },
    "geronimo_7441bbd": {
        "repo": "geronimo",
        "message": "GERONIMO-1599 HOWLLog throws NPE because XidFactory is missing\n\nWrongly rolled-back the implementation of recover.\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@376288 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/7441bbda0b665524b15e8259e071132f3ee079ce",
        "parent": "https://github.com/apache/geronimo/commit/ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
        "bug_id": "geronimo_7441bbd",
        "file": [
            {
                "sha": "372894fd39797c6b72d1d38bab2c6e1b2c8a3233",
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7441bbda0b665524b15e8259e071132f3ee079ce/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7441bbda0b665524b15e8259e071132f3ee079ce/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java?ref=7441bbda0b665524b15e8259e071132f3ee079ce",
                "patch": "@@ -309,6 +309,11 @@ public void rollback(Xid xid, Object logMark) throws LogException {\n     }\n \n     public Collection recover(XidFactory xidFactory) throws LogException {\n+        log.debug(\"Initiating transaction manager recovery\");\n+        Map recovered = new HashMap();\n+        ReplayListener replayListener = new GeronimoReplayListener(xidFactory, recovered);\n+        logger.replayActiveTx(replayListener);\n+        log.debug(\"In doubt transactions recovered from log\");\n         return recovered.values();\n     }\n ",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HOWLLog.java"
        ],
        "unit_tests": [
            "HOWLLogTest.java"
        ]
    },
    "geronimo_c3a2bb5": {
        "repo": "geronimo",
        "message": "GERONIMO-3808 fix npe on shutdown.  Not convinced this is compatible with resource bindings\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@619712 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/c3a2bb5bd58f7ab6c6523f841cb1833697272645",
        "parent": "https://github.com/apache/geronimo/commit/abde11c0547370f87012c536d47b9c0c18f0bd81",
        "bug_id": "geronimo_c3a2bb5",
        "file": [
            {
                "sha": "938518c790644cb4db1e60fa58b2548e547cd8fe",
                "filename": "framework/configs/rmi-naming/src/main/plan/plan.xml",
                "blob_url": "https://github.com/apache/geronimo/blob/c3a2bb5bd58f7ab6c6523f841cb1833697272645/framework/configs/rmi-naming/src/main/plan/plan.xml",
                "raw_url": "https://github.com/apache/geronimo/raw/c3a2bb5bd58f7ab6c6523f841cb1833697272645/framework/configs/rmi-naming/src/main/plan/plan.xml",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/framework/configs/rmi-naming/src/main/plan/plan.xml?ref=c3a2bb5bd58f7ab6c6523f841cb1833697272645",
                "patch": "@@ -32,9 +32,7 @@\n \n     <gbean name=\"GlobalContext\" class=\"org.apache.geronimo.gjndi.GlobalContextGBean\"/>\n \n-    <gbean name=\"JavaCompContext\" class=\"org.apache.geronimo.gjndi.JavaCompContextGBean\">\n-        <dependency><name>GlobalContext</name></dependency>\n-    </gbean>\n+    <gbean name=\"JavaCompContext\" class=\"org.apache.geronimo.gjndi.JavaCompContextGBean\"/>\n \n     <gbean name=\"JavaContext\" class=\"org.apache.geronimo.gjndi.WritableContextGBean\">\n         <attribute name=\"nameInNamespace\">java:</attribute>",
                "deletions": 3
            },
            {
                "sha": "d4eaa7dba3d9a6eb71daf7ae8e8d31c6ccfb9b18",
                "filename": "framework/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/KernelContextGBean.java",
                "blob_url": "https://github.com/apache/geronimo/blob/c3a2bb5bd58f7ab6c6523f841cb1833697272645/framework/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/KernelContextGBean.java",
                "raw_url": "https://github.com/apache/geronimo/raw/c3a2bb5bd58f7ab6c6523f841cb1833697272645/framework/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/KernelContextGBean.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/framework/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/KernelContextGBean.java?ref=c3a2bb5bd58f7ab6c6523f841cb1833697272645",
                "patch": "@@ -203,7 +203,7 @@ protected synchronized void removeBinding(AbstractName abstractName) {\n                 } else {\n                     bindingsByName.remove(name);\n                     try {\n-                        removeDeepBinding(name, true);\n+                        removeDeepBinding(name, true, true);\n                     } catch (ContextNotEmptyException e) {\n                         //ignore\n                     } catch (NamingException e) {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "KernelContextGBean.java"
        ],
        "unit_tests": [
            "KernelContextGBeanTest.java"
        ]
    },
    "geronimo_cbedbea": {
        "repo": "geronimo",
        "message": "GERONIMO-2104 fix NPE when bad directory is listed\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@413323 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/cbedbea434efb4ec73426796058e6d2112d6b20c",
        "parent": "https://github.com/apache/geronimo/commit/172356efd9d2f5e26bf926dd4613ee2b15eeb67c",
        "bug_id": "geronimo_cbedbea",
        "file": [
            {
                "sha": "d824b19f2f8207fcf0e0e4883abef6578cec4d54",
                "filename": "modules/system/src/java/org/apache/geronimo/system/repository/Maven1Repository.java",
                "blob_url": "https://github.com/apache/geronimo/blob/cbedbea434efb4ec73426796058e6d2112d6b20c/modules/system/src/java/org/apache/geronimo/system/repository/Maven1Repository.java",
                "raw_url": "https://github.com/apache/geronimo/raw/cbedbea434efb4ec73426796058e6d2112d6b20c/modules/system/src/java/org/apache/geronimo/system/repository/Maven1Repository.java",
                "status": "modified",
                "changes": 20,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/system/src/java/org/apache/geronimo/system/repository/Maven1Repository.java?ref=cbedbea434efb4ec73426796058e6d2112d6b20c",
                "patch": "@@ -66,16 +66,18 @@ public SortedSet list(Artifact query) {\n             path = new File(path, query.getType() + \"s\");\n \n             File[] files = path.listFiles();\n-            for (int i = 0; i < files.length; i++) {\n-                File file = files[i];\n-                String fileName = file.getName();\n-                if (fileName.startsWith(query.getArtifactId() + \"-\") && fileName.endsWith(\".\" + query.getType())) {\n-                    String version = fileName.substring(query.getArtifactId().length() + 1);\n-                    version = version.substring(0, version.length() - 1 - query.getType().length());\n-                    if(query.getVersion() != null && !query.getVersion().toString().equals(version)) {\n-                        continue;\n+            if (files != null) {\n+                for (int i = 0; i < files.length; i++) {\n+                    File file = files[i];\n+                    String fileName = file.getName();\n+                    if (fileName.startsWith(query.getArtifactId() + \"-\") && fileName.endsWith(\".\" + query.getType())) {\n+                        String version = fileName.substring(query.getArtifactId().length() + 1);\n+                        version = version.substring(0, version.length() - 1 - query.getType().length());\n+                        if(query.getVersion() != null && !query.getVersion().toString().equals(version)) {\n+                            continue;\n+                        }\n+                        artifacts.add(new Artifact(query.getGroupId(), query.getArtifactId(), version, query.getType()));\n                     }\n-                    artifacts.add(new Artifact(query.getGroupId(), query.getArtifactId(), version, query.getType()));\n                 }\n             }\n         } else {",
                "deletions": 9
            }
        ],
        "patched_files": [
            "Maven1Repository.java"
        ],
        "unit_tests": [
            "Maven1RepositoryTest.java"
        ]
    },
    "geronimo_7ad6c23": {
        "repo": "geronimo",
        "message": "GERONIMO-3913 - NPE in org.apache.geronimo.security.SubjectId.hashCode() caused by incorrect JAVA_HOME or JRE_HOME.  Patch from Toby Cabot.\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@643431 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/7ad6c23197760c8972a0bbf5c83c65a52c943620",
        "parent": "https://github.com/apache/geronimo/commit/3d2dc841b74f7daad25f533736bed861a625651b",
        "bug_id": "geronimo_7ad6c23",
        "file": [
            {
                "sha": "1466869b4e4cdc680501cfffeed206ed845db01b",
                "filename": "framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/ContextManager.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7ad6c23197760c8972a0bbf5c83c65a52c943620/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/ContextManager.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7ad6c23197760c8972a0bbf5c83c65a52c943620/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/ContextManager.java",
                "status": "modified",
                "changes": 30,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/ContextManager.java?ref=7ad6c23197760c8972a0bbf5c83c65a52c943620",
                "patch": "@@ -24,6 +24,7 @@\n import java.security.NoSuchAlgorithmException;\n import java.security.Principal;\n import java.security.PrivilegedAction;\n+import java.security.ProviderException;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.IdentityHashMap;\n@@ -260,8 +261,13 @@ public Object run() {\n             context.principal = principals.iterator().next();\n         }\n         Long id = nextSubjectId++;\n-        context.id = new SubjectId(id, hash(id));\n-\n+        try {\n+            context.id = new SubjectId(id, hash(id));\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new ProviderException(\"No such algorithm: \" + algorithm + \".  This can be caused by a misconfigured java.ext.dirs, JAVA_HOME or JRE_HOME environment variable\");\n+        } catch (InvalidKeyException e) {\n+            throw new ProviderException(\"Invalid key: \" + key.toString());\n+        }\n         subjectIds.put(context.id, subject);\n         subjectContexts.put(subject, context);\n \n@@ -333,8 +339,10 @@ public static void setAlgorithm(String algorithm) {\n             mac.init(key);\n         } catch (NoSuchAlgorithmException e) {\n             assert false : \"Should never have reached here\";\n+            throw new ProviderException(\"No such algorithm: \" + algorithm + \".  This can be caused by a misconfigured java.ext.dirs, JAVA_HOME or JRE_HOME environment variable.\");\n         } catch (InvalidKeyException e) {\n             assert false : \"Should never have reached here\";\n+            throw new ProviderException(\"Invalid key: \" + key.toString());\n         }\n     }\n \n@@ -354,27 +362,19 @@ public static void setPassword(String password) {\n         key = new SecretKeySpec(password.getBytes(), algorithm);\n     }\n \n-    private static byte[] hash(Long id) {\n+    private static byte[] hash(Long id) throws NoSuchAlgorithmException, InvalidKeyException {\n         long n = id;\n         byte[] bytes = new byte[8];\n         for (int i = 7; i >= 0; i--) {\n             bytes[i] = (byte) (n);\n             n >>>= 8;\n         }\n \n-        try {\n-            Mac mac = Mac.getInstance(algorithm);\n-            mac.init(key);\n-            mac.update(bytes);\n+        Mac mac = Mac.getInstance(algorithm);\n+        mac.init(key);\n+        mac.update(bytes);\n \n-            return mac.doFinal();\n-        } catch (NoSuchAlgorithmException e) {\n-            //shouldn't happen\n-        } catch (InvalidKeyException e) {\n-            //shouldn't happen\n-        }\n-        assert false : \"Should never have reached here\";\n-        return null;\n+        return mac.doFinal();\n     }\n \n     private static class Context {",
                "deletions": 15
            },
            {
                "sha": "9004545e94497d3bafd1f687afdd092e5ee67c59",
                "filename": "framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/SubjectId.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7ad6c23197760c8972a0bbf5c83c65a52c943620/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/SubjectId.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7ad6c23197760c8972a0bbf5c83c65a52c943620/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/SubjectId.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/SubjectId.java?ref=7ad6c23197760c8972a0bbf5c83c65a52c943620",
                "patch": "@@ -30,6 +30,9 @@\n     private transient String name;\n \n     public SubjectId(Long subjectId, byte[] hash) {\n+        if (subjectId == null) throw new IllegalArgumentException(\"subjectId cannot be null\");\n+        if (hash == null) throw new IllegalArgumentException(\"hash cannot be null\");\n+\n         this.subjectId = subjectId;\n         this.hash = hash;\n     }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ContextManager.java"
        ],
        "unit_tests": [
            "ContextManagerTest.java"
        ]
    },
    "geronimo_883ad6d": {
        "repo": "geronimo",
        "message": "prevent NPE if the hashmap is empty\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@488106 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/883ad6d06eeb30a03b3ae5f3adb65b6f695d4461",
        "parent": "https://github.com/apache/geronimo/commit/a5ee0360bb71b04ee874899bf48b4608ac002977",
        "bug_id": "geronimo_883ad6d",
        "file": [
            {
                "sha": "917472d9ca8f2c9abbe02f3222f6b7e9dcb7e75d",
                "filename": "modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/binding/GBeanBinding.java",
                "blob_url": "https://github.com/apache/geronimo/blob/883ad6d06eeb30a03b3ae5f3adb65b6f695d4461/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/binding/GBeanBinding.java",
                "raw_url": "https://github.com/apache/geronimo/raw/883ad6d06eeb30a03b3ae5f3adb65b6f695d4461/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/binding/GBeanBinding.java",
                "status": "modified",
                "changes": 11,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/binding/GBeanBinding.java?ref=883ad6d06eeb30a03b3ae5f3adb65b6f695d4461",
                "patch": "@@ -156,12 +156,13 @@ private synchronized void addBinding(AbstractName abstractName, Object value) th\n      * @param abstractName the abstract name of the gbean to unbind\n      */\n     protected synchronized void removeBinding(AbstractName abstractName) {\n-        if (first(bindings).getKey().equals(abstractName)) {\n+        Map.Entry entry = first(bindings);\n+        if (entry != null && entry.getKey().equals(abstractName)) {\n             Object oldValue = bindings.remove(abstractName);\n-            Map.Entry newEntry = first(bindings);\n-            if (newEntry != null) {\n-                Object newAbstractName = newEntry.getValue();\n-                Object newValue = newEntry.getValue();\n+            entry = first(bindings);\n+            if (entry != null) {\n+                Object newAbstractName = entry.getValue();\n+                Object newValue = entry.getValue();\n                 try {\n                     context.rebind(name, newValue);\n                 } catch (NamingException e) {",
                "deletions": 5
            }
        ],
        "patched_files": [
            "GBeanBinding.java"
        ],
        "unit_tests": [
            "GBeanBindingTest.java"
        ]
    },
    "geronimo_8a541eb": {
        "repo": "geronimo",
        "message": "GERONIMO-5647 avoid an NPE in jetty if no security realm is specified anywhere\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@1022726 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/8a541eb24c8a750b897fd6d29b9622e7081b1e53",
        "parent": "https://github.com/apache/geronimo/commit/2b970ae9221f96a074b6199dd8f34d9af483eb54",
        "bug_id": "geronimo_8a541eb",
        "file": [
            {
                "sha": "8dee3e295eb246dc6c45d67ce545247685c7de49",
                "filename": "plugins/jetty8/geronimo-jetty8-builder/src/main/java/org/apache/geronimo/jetty8/deployment/JettyModuleBuilder.java",
                "blob_url": "https://github.com/apache/geronimo/blob/8a541eb24c8a750b897fd6d29b9622e7081b1e53/plugins/jetty8/geronimo-jetty8-builder/src/main/java/org/apache/geronimo/jetty8/deployment/JettyModuleBuilder.java",
                "raw_url": "https://github.com/apache/geronimo/raw/8a541eb24c8a750b897fd6d29b9622e7081b1e53/plugins/jetty8/geronimo-jetty8-builder/src/main/java/org/apache/geronimo/jetty8/deployment/JettyModuleBuilder.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/jetty8/geronimo-jetty8-builder/src/main/java/org/apache/geronimo/jetty8/deployment/JettyModuleBuilder.java?ref=8a541eb24c8a750b897fd6d29b9622e7081b1e53",
                "patch": "@@ -692,8 +692,8 @@ private void configureConfigurationFactory(JettyWebAppType jettyWebApp, LoginCon\n         if (jettyWebApp.isSetSecurityRealmName()) {\n             securityRealmName = jettyWebApp.getSecurityRealmName().trim();\n         } else {\n-            if (loginConfigInfo == null) return;\n-            securityRealmName = loginConfigInfo.realmName.trim();\n+            if (loginConfigInfo == null ||loginConfigInfo.realmName == null) return;\n+            securityRealmName = loginConfigInfo.realmName;\n         }\n         AbstractNameQuery configurationFactoryName = new AbstractNameQuery(null, Collections.singletonMap(\"name\", securityRealmName), ConfigurationFactory.class.getName());\n         securityFactoryData.setReferencePattern(\"ConfigurationFactory\", configurationFactoryName);",
                "deletions": 2
            }
        ],
        "patched_files": [
            "JettyModuleBuilder.java"
        ],
        "unit_tests": [
            "JettyModuleBuilderTest.java"
        ]
    },
    "geronimo_219f212": {
        "repo": "geronimo",
        "message": "added generateServiceFromClass method (right now disabled as it generated NPE when get wsdl is called (bug in axis2))\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@544948 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/219f21255817eae4ec813bc88c4e9ff0c016ded0",
        "parent": "https://github.com/apache/geronimo/commit/20e538ffc4759a26a630ffb31b8c8eaea22b5876",
        "bug_id": "geronimo_219f212",
        "file": [
            {
                "sha": "ee204ab2e5932310490c2b8f7a6af5e56191c2bb",
                "filename": "modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "blob_url": "https://github.com/apache/geronimo/blob/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "raw_url": "https://github.com/apache/geronimo/raw/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "status": "modified",
                "changes": 29,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java?ref=219f21255817eae4ec813bc88c4e9ff0c016ded0",
                "patch": "@@ -97,23 +97,28 @@ public void init() {\n         try {\n             this.endpointClass = classLoader.loadClass(this.endpointClassName);\n             configurationContext = ConfigurationContextFactory.createDefaultConfigurationContext();\n-            \n-            //check to see if the wsdlLocation property is set in portInfo, \n-            //if not checking if wsdlLocation exists in annotation\n-            //if already set, annotation should not overwrite it.\n-            if (portInfo.getWsdlFile() == null || portInfo.getWsdlFile().equals(\"\")){\n-                //getwsdllocation from annotation if it exists\n+\n+            // check to see if the wsdlLocation property is set in portInfo,\n+            // if not checking if wsdlLocation exists in annotation\n+            // if already set, annotation should not overwrite it.\n+            if (portInfo.getWsdlFile() == null || portInfo.getWsdlFile().equals(\"\")) {\n+                // getwsdllocation from annotation if it exists\n                 if (JAXWSUtils.containsWsdlLocation(this.endpointClass, classLoader)) {\n                     portInfo.setWsdlFile(JAXWSUtils.getServiceWsdlLocation(this.endpointClass, classLoader));\n                 }\n             }\n \n-            if(portInfo.getWsdlFile() != null && !portInfo.getWsdlFile().equals(\"\")){ //WSDL file Has been provided\n-                AxisServiceGenerator serviceGen = createServiceGenerator();\n+            AxisServiceGenerator serviceGen = createServiceGenerator();            \n+            if (portInfo.getWsdlFile() != null && !portInfo.getWsdlFile().equals(\"\")) { \n+                // WSDL file has been provided \n                 service = serviceGen.getServiceFromWSDL(portInfo, endpointClass, configurationBaseUrl);\n-                                            \n-            }else { //No WSDL, Axis2 will handle it. Is it ?\n-                service = AxisService.createService(endpointClassName, configurationContext.getAxisConfiguration(), JAXWSMessageReceiver.class);\n+            } else {\n+                // No WSDL, let Axis2 handle it.\n+                \n+                // FIXME: AxisServiceGenerator method should be used as it understands annotations\n+                // but right now that method causes some problems when WSDL is requested.\n+                service = AxisService.createService(endpointClassName, configurationContext.getAxisConfiguration(), JAXWSMessageReceiver.class);                \n+                // service = serviceGen.getServiceFromClass(this.endpointClass);\n             }\n \n             service.setScope(Constants.SCOPE_APPLICATION);\n@@ -124,7 +129,7 @@ public void init() {\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n-        \n+\n         this.wsdlQueryHandler = new WSDLQueryHandler(this.service);\n     }  \n ",
                "deletions": 12
            },
            {
                "sha": "1ce0f507adca4c2560f4865fa85afdbb07f5d608",
                "filename": "modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/AxisServiceGenerator.java",
                "blob_url": "https://github.com/apache/geronimo/blob/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/AxisServiceGenerator.java",
                "raw_url": "https://github.com/apache/geronimo/raw/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/AxisServiceGenerator.java",
                "status": "modified",
                "changes": 23,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/AxisServiceGenerator.java?ref=219f21255817eae4ec813bc88c4e9ff0c016ded0",
                "patch": "@@ -24,7 +24,6 @@\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n \n import javax.wsdl.Binding;\n import javax.wsdl.Definition;\n@@ -45,6 +44,7 @@\n import org.apache.axis2.description.Parameter;\n import org.apache.axis2.description.WSDL11ToAxisServiceBuilder;\n import org.apache.axis2.description.WSDLToAxisServiceBuilder;\n+import org.apache.axis2.description.java2wsdl.Java2WSDLConstants;\n import org.apache.axis2.engine.MessageReceiver;\n import org.apache.axis2.jaxws.description.DescriptionFactory;\n import org.apache.axis2.jaxws.description.EndpointDescription;\n@@ -65,6 +65,7 @@\n import org.apache.geronimo.axis2.util.SimpleWSDLLocator;\n import org.apache.geronimo.jaxws.JAXWSUtils;\n import org.apache.geronimo.jaxws.PortInfo;\n+import org.apache.ws.commons.schema.utils.NamespaceMap;\n \n //TODO: Handle RPC Style Messaging\n \n@@ -86,6 +87,26 @@ public void setMessageReceiver(MessageReceiver messageReceiver) {\n         this.messageReceiver = messageReceiver;\n     }\n    \n+    public AxisService getServiceFromClass(Class endpointClass) throws Exception {\n+        AxisService service = DescriptionFactory.createAxisService(endpointClass);\n+        \n+        for(Iterator<AxisOperation> opIterator = service.getOperations() ; opIterator.hasNext() ;){\n+            AxisOperation operation = opIterator.next();\n+            operation.setMessageReceiver(this.messageReceiver);\n+        }\n+        \n+        if (service.getNameSpacesMap() == null) {\n+            NamespaceMap map = new NamespaceMap();\n+            map.put(Java2WSDLConstants.AXIS2_NAMESPACE_PREFIX,\n+                    Java2WSDLConstants.AXIS2_XSD);\n+            map.put(Java2WSDLConstants.DEFAULT_SCHEMA_NAMESPACE_PREFIX,\n+                    Java2WSDLConstants.URI_2001_SCHEMA_XSD);\n+            service.setNameSpacesMap(map);\n+        }\n+        \n+        return service;\n+    }\n+    \n     public AxisService getServiceFromWSDL(PortInfo portInfo, Class endpointClass, URL configurationBaseUrl) throws Exception {\n         String wsdlFile = portInfo.getWsdlFile();\n         if (wsdlFile == null || wsdlFile.equals(\"\")) {",
                "deletions": 1
            },
            {
                "sha": "d68f7b1b28a46a9c4744f7df2a065ea81f80ed0e",
                "filename": "modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/GeronimoHandlerChainBuilder.java",
                "blob_url": "https://github.com/apache/geronimo/blob/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/GeronimoHandlerChainBuilder.java",
                "raw_url": "https://github.com/apache/geronimo/raw/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/GeronimoHandlerChainBuilder.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/GeronimoHandlerChainBuilder.java?ref=219f21255817eae4ec813bc88c4e9ff0c016ded0",
                "patch": "@@ -53,7 +53,7 @@ public ClassLoader getHandlerClassLoader() {\n                 && matchBinding(portInfo, hc.getProtocolBindings())) {\n             return super.buildHandlerChain(hc, classLoader);\n         } else {\n-            return Collections.EMPTY_LIST;\n+            return Collections.emptyList();\n         }\n     }\n ",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Axis2WebServiceContainer.java"
        ],
        "unit_tests": [
            "Axis2WebServiceContainerTest.java"
        ]
    },
    "geronimo_601e2f7": {
        "repo": "geronimo",
        "message": "to avoid NPE when building plugin with ext-module tag in DD.\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@1103356 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/601e2f78272a5dfd0cd432934d91f433b619d2fa",
        "parent": "https://github.com/apache/geronimo/commit/16534cb495c2ed2c421eb955157018a95977d7f2",
        "bug_id": "geronimo_601e2f7",
        "file": [
            {
                "sha": "744d86f6831e9a65ed29dd5a21654212e50102ad",
                "filename": "plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java",
                "blob_url": "https://github.com/apache/geronimo/blob/601e2f78272a5dfd0cd432934d91f433b619d2fa/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java",
                "raw_url": "https://github.com/apache/geronimo/raw/601e2f78272a5dfd0cd432934d91f433b619d2fa/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java?ref=601e2f78272a5dfd0cd432934d91f433b619d2fa",
                "patch": "@@ -444,7 +444,7 @@ private ApplicationInfo getEarPlan(File planFile, JarFile earFile, ModuleIDBuild\n         // todo change module so you can extract the real module path back out.. then we can eliminate\n         // the moduleLocations and have addModules return the modules\n         String applicationName = null;\n-        if (application.getApplicationName() != null) {\n+        if (application!=null && application.getApplicationName() != null) {\n             applicationName = application.getApplicationName().trim();\n         } else if (earFile != null) {\n             applicationName = FileUtils.removeExtension(new File(earFile.getName()).getName(), \".ear\");\n@@ -458,14 +458,14 @@ private ApplicationInfo getEarPlan(File planFile, JarFile earFile, ModuleIDBuild\n                 earFile,\n                 application,\n                 gerApplication,\n-                application.toString()\n+                application==null ? null : application.toString()\n         );\n         try {\n             addModules(earFile, application, gerApplication, environment, applicationInfo, idBuilder);\n             if (applicationInfo.getModules().isEmpty()) {\n                 //if no application.xml and no modules detected, return null for stand-alone module processing\n                 return null;\n-            } else {\n+            } else if (application!=null){\n                 addModulesToDefaultPlan(application, applicationInfo.getModules());\n             }\n         } catch (Throwable e) {",
                "deletions": 3
            },
            {
                "sha": "6d2b11cf57087919584823f587c56fdebea44fe9",
                "filename": "plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/NamingBuilderCollection.java",
                "blob_url": "https://github.com/apache/geronimo/blob/601e2f78272a5dfd0cd432934d91f433b619d2fa/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/NamingBuilderCollection.java",
                "raw_url": "https://github.com/apache/geronimo/raw/601e2f78272a5dfd0cd432934d91f433b619d2fa/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/NamingBuilderCollection.java",
                "status": "modified",
                "changes": 135,
                "additions": 135,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/NamingBuilderCollection.java?ref=601e2f78272a5dfd0cd432934d91f433b619d2fa",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -32,7 +33,17 @@\n import org.apache.geronimo.gbean.annotation.GBean;\n import org.apache.geronimo.gbean.annotation.ParamReference;\n import org.apache.geronimo.j2ee.j2eeobjectnames.NameFactory;\n+import org.apache.openejb.jee.DataSource;\n+import org.apache.openejb.jee.EjbLocalRef;\n+import org.apache.openejb.jee.EjbRef;\n+import org.apache.openejb.jee.EnvEntry;\n import org.apache.openejb.jee.JndiConsumer;\n+import org.apache.openejb.jee.MessageDestinationRef;\n+import org.apache.openejb.jee.PersistenceContextRef;\n+import org.apache.openejb.jee.PersistenceUnitRef;\n+import org.apache.openejb.jee.ResourceEnvRef;\n+import org.apache.openejb.jee.ResourceRef;\n+import org.apache.openejb.jee.ServiceRef;\n import org.apache.xmlbeans.QNameSet;\n import org.apache.xmlbeans.XmlObject;\n \n@@ -47,18 +58,35 @@ public NamingBuilderCollection(@ParamReference(name = \"NamingBuilders\", namingTy\n     }\n \n     public void buildEnvironment(JndiConsumer specDD, XmlObject plan, Environment environment) throws DeploymentException {\n+        if(specDD == null){\n+            // java ee 5 and 6 might not have spec DD, adding this to avoid the NPE.\n+            specDD = new JndiConsumerNonNull();\n+        }\n+        \n         for (NamingBuilder namingBuilder : getSortedBuilders()) {\n             namingBuilder.buildEnvironment(specDD, plan, environment);\n         }\n     }\n \n     public void initContext(JndiConsumer specDD, XmlObject plan, Module module) throws DeploymentException {\n+        \n+        if(specDD == null){\n+            // java ee 5 and 6 might not have spec DD, adding this to avoid the NPE.\n+            specDD = new JndiConsumerNonNull();\n+        }\n+        \n         for (NamingBuilder namingBuilder : getSortedBuilders()) {\n             namingBuilder.initContext(specDD, plan, module);\n         }\n     }\n \n     public void buildNaming(JndiConsumer specDD, XmlObject plan, Module module, Map<EARContext.Key, Object> sharedContext) throws DeploymentException {\n+        \n+        if(specDD == null){\n+            // java ee 5 and 6 might not have spec DD, adding this to avoid the NPE.\n+            specDD = new JndiConsumerNonNull();\n+        }\n+        \n         for (NamingBuilder namingBuilder : getSortedBuilders()) {\n             if (EARConfigBuilder.createPlanMode.get().booleanValue()) {\n                 try {\n@@ -78,6 +106,113 @@ public void buildNaming(JndiConsumer specDD, XmlObject plan, Module module, Map<\n         return list;        \n     }\n     \n+    private final class JndiConsumerNonNull implements JndiConsumer {\n+        @Override\n+        public String getJndiConsumerName() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Collection<EnvEntry> getEnvEntry() {\n+            return new ArrayList<EnvEntry>();\n+        }\n+\n+        @Override\n+        public Map<String, EnvEntry> getEnvEntryMap() {\n+            return new HashMap<String, EnvEntry>();\n+        }\n+\n+        @Override\n+        public Collection<EjbRef> getEjbRef() {\n+            return new ArrayList<EjbRef>();\n+        }\n+\n+        @Override\n+        public Map<String, EjbRef> getEjbRefMap() {\n+             return new HashMap<String, EjbRef>();\n+        }\n+\n+        @Override\n+        public Collection<EjbLocalRef> getEjbLocalRef() {\n+            return new ArrayList<EjbLocalRef>();\n+        }\n+\n+        @Override\n+        public Map<String, EjbLocalRef> getEjbLocalRefMap() {\n+            return new HashMap<String, EjbLocalRef>();\n+        }\n+\n+        @Override\n+        public Collection<ServiceRef> getServiceRef() {\n+            return new ArrayList<ServiceRef>();\n+        }\n+\n+        @Override\n+        public Map<String, ServiceRef> getServiceRefMap() {\n+            return new HashMap<String, ServiceRef>();\n+        }\n+\n+        @Override\n+        public Collection<ResourceRef> getResourceRef() {\n+            return new ArrayList<ResourceRef>();\n+        }\n+\n+        @Override\n+        public Map<String, ResourceRef> getResourceRefMap() {\n+            return new HashMap<String, ResourceRef>();\n+        }\n+\n+        @Override\n+        public Collection<ResourceEnvRef> getResourceEnvRef() {\n+            return new ArrayList<ResourceEnvRef>();\n+        }\n+\n+        @Override\n+        public Map<String, ResourceEnvRef> getResourceEnvRefMap() {\n+            return new HashMap<String, ResourceEnvRef>();\n+        }\n+\n+        @Override\n+        public Collection<MessageDestinationRef> getMessageDestinationRef() {\n+            return new ArrayList<MessageDestinationRef>();\n+        }\n+\n+        @Override\n+        public Map<String, MessageDestinationRef> getMessageDestinationRefMap() {\n+            return new HashMap<String, MessageDestinationRef>();\n+        }\n+\n+        @Override\n+        public Collection<PersistenceContextRef> getPersistenceContextRef() {\n+            return new ArrayList<PersistenceContextRef>();\n+        }\n+\n+        @Override\n+        public Map<String, PersistenceContextRef> getPersistenceContextRefMap() {\n+            return new HashMap<String, PersistenceContextRef>();\n+        }\n+\n+        @Override\n+        public Collection<PersistenceUnitRef> getPersistenceUnitRef() {\n+            return new ArrayList<PersistenceUnitRef>();\n+        }\n+\n+        @Override\n+        public Map<String, PersistenceUnitRef> getPersistenceUnitRefMap() {\n+            return new HashMap<String, PersistenceUnitRef>();\n+        }\n+\n+        @Override\n+        public Collection<DataSource> getDataSource() {\n+            return new ArrayList<DataSource>();\n+        }\n+\n+        @Override\n+        public Map<String, DataSource> getDataSourceMap() {\n+            return new HashMap<String, DataSource>();\n+        }\n+    }\n+\n     private static class NamingBuilderComparator implements Comparator<NamingBuilder> {\n         public int compare(NamingBuilder o1, NamingBuilder o2) {\n             return o1.getPriority() - o2.getPriority();",
                "deletions": 0
            }
        ],
        "patched_files": [
            "NamingBuilderCollection.java"
        ],
        "unit_tests": [
            "NamingBuilderCollectionTest.java"
        ]
    },
    "geronimo_e04d2ef": {
        "repo": "geronimo",
        "message": "GERONIMO-3880 another NPE fix, for persistenceUnitRootUrl\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@632359 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9",
        "parent": "https://github.com/apache/geronimo/commit/006fac90997163bbb0d0822911579c60ca5c17b0",
        "bug_id": "geronimo_e04d2ef",
        "file": [
            {
                "sha": "28499a9ad872ba5ecb758eec2eee587b8eb8a580",
                "filename": "plugins/openjpa/geronimo-persistence-jpa10/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "blob_url": "https://github.com/apache/geronimo/blob/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9/plugins/openjpa/geronimo-persistence-jpa10/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "raw_url": "https://github.com/apache/geronimo/raw/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9/plugins/openjpa/geronimo-persistence-jpa10/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa/geronimo-persistence-jpa10/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java?ref=e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9",
                "patch": "@@ -87,10 +87,9 @@ public PersistenceUnitGBean(String persistenceUnitName,\n         List<String> mappingFileNames = mappingFileNamesUntyped == null? new ArrayList<String>(): new ArrayList<String>(mappingFileNamesUntyped);\n         this.persistenceUnitRoot = persistenceUnitRoot;\n         URI configurationBaseURI = new File(configurationBaseURL.getFile()).toURI();\n-        URL rootURL = null;\n+        URL rootURL = configurationBaseURI.resolve(persistenceUnitRoot).normalize().toURL();\n         List<URL> jarFileUrls = NO_URLS;\n         if (!excludeUnlistedClassesValue) {\n-            rootURL = configurationBaseURI.resolve(persistenceUnitRoot).normalize().toURL();\n             jarFileUrls = new ArrayList<URL>();\n             for (String urlString: jarFileUrlsUntyped) {\n                 URL url = configurationBaseURI.resolve(urlString).normalize().toURL();",
                "deletions": 2
            },
            {
                "sha": "0f4fc0eff7d24496338aa3fee9bfabbb0229f38a",
                "filename": "plugins/openjpa/geronimo-persistence-jpa10/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9/plugins/openjpa/geronimo-persistence-jpa10/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9/plugins/openjpa/geronimo-persistence-jpa10/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa/geronimo-persistence-jpa10/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java?ref=e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9",
                "patch": "@@ -49,5 +49,6 @@ public void testNonNullJavaFileUrls() throws Exception {\n                 new File(\"/foo/bar/Root\").toURL(),\n                 getClass().getClassLoader());\n         assertNotNull(gbean.getJarFileUrls());\n+        assertNotNull(gbean.getPersistenceUnitRootUrl());\n     }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "PersistenceUnitGBean.java"
        ],
        "unit_tests": [
            "PersistenceUnitGBeanTest.java"
        ]
    },
    "geronimo_28e0bb4": {
        "repo": "geronimo",
        "message": "GERONINMO-4680 slightly osgi-ify PersistenceUnitInfo, at least eliminating an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@935103 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
        "parent": "https://github.com/apache/geronimo/commit/c9b4080edc550f9fc1111aae29d659f8f1d78bdb",
        "bug_id": "geronimo_28e0bb4",
        "file": [
            {
                "sha": "cbfdf8f2a714287f9229d2fb4d0e850d67ed61b7",
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20-builder/pom.xml",
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20-builder/pom.xml",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20-builder/pom.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20-builder/pom.xml?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "patch": "@@ -47,6 +47,7 @@\n             <artifactId>geronimo-persistence-jpa20</artifactId>\n             <version>${version}</version>\n         </dependency>\n+        \n     </dependencies>\n \n </project>",
                "deletions": 0
            },
            {
                "sha": "38673c3bcc454903af1ad28cee035c2fffebee1a",
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20-builder/src/main/java/org/apache/geronimo/persistence/builder/PersistenceUnitBuilder.java",
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20-builder/src/main/java/org/apache/geronimo/persistence/builder/PersistenceUnitBuilder.java",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20-builder/src/main/java/org/apache/geronimo/persistence/builder/PersistenceUnitBuilder.java",
                "status": "modified",
                "changes": 34,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20-builder/src/main/java/org/apache/geronimo/persistence/builder/PersistenceUnitBuilder.java?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "patch": "@@ -228,23 +228,23 @@ protected PersistenceDocument convertToPersistenceDocument(XmlObject xmlObject)\n     }\n \n     protected PersistenceDocument.Persistence convertToPersistenceUnit(XmlObject xmlObject) throws XmlException {\n-        XmlCursor cursor = null;\n-        try {\n-            cursor = xmlObject.newCursor();\n-            cursor.toStartDoc();\n-            cursor.toFirstChild();\n-            SchemaConversionUtils.convertSchemaVersion(cursor, SchemaConversionUtils.JPA_PERSISTENCE_NAMESPACE, \"http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\", \"2.0\");\n+//        XmlCursor cursor = null;\n+//        try {\n+//            cursor = xmlObject.newCursor();\n+//            cursor.toStartDoc();\n+//            cursor.toFirstChild();\n+//            SchemaConversionUtils.convertSchemaVersion(cursor, SchemaConversionUtils.JPA_PERSISTENCE_NAMESPACE, \"http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\", \"2.0\");\n             XmlObject result = xmlObject.changeType(PersistenceDocument.Persistence.type);\n             XmlBeansUtil.validateDD(result);\n             return (PersistenceDocument.Persistence) result;\n-        } finally {\n-            if (cursor != null) {\n-                try {\n-                    cursor.dispose();\n-                } catch (Exception e) {\n-                }\n-            }\n-        }\n+//        } finally {\n+//            if (cursor != null) {\n+//                try {\n+//                    cursor.dispose();\n+//                } catch (Exception e) {\n+//                }\n+//            }\n+//        }\n     }\n \n     private void buildPersistenceUnits(PersistenceDocument.Persistence persistence, Map<String, PersistenceDocument.Persistence.PersistenceUnit> overrides, Module module, String persistenceModulePath) throws DeploymentException {\n@@ -267,12 +267,12 @@ private GBeanData installPersistenceUnitGBean(PersistenceDocument.Persistence.Pe\n         }\n         AbstractName abstractName;\n         if (persistenceModulePath == null || persistenceModulePath.length() == 0) {\n-            abstractName = moduleContext.getNaming().createChildName(module.getModuleName(), persistenceUnitName, PersistenceUnitGBean.GBEAN_INFO.getJ2eeType());\n+            abstractName = moduleContext.getNaming().createChildName(module.getModuleName(), persistenceUnitName, NameFactory.PERSISTENCE_UNIT);\n         } else {\n             abstractName = moduleContext.getNaming().createChildName(module.getModuleName(), persistenceModulePath, NameFactory.PERSISTENCE_UNIT_MODULE);\n-            abstractName = moduleContext.getNaming().createChildName(abstractName, moduleContext.getConfigID(), persistenceUnitName, PersistenceUnitGBean.GBEAN_INFO.getJ2eeType());\n+            abstractName = moduleContext.getNaming().createChildName(abstractName, moduleContext.getConfigID(), persistenceUnitName, NameFactory.PERSISTENCE_UNIT);\n         }\n-        GBeanData gbeanData = new GBeanData(abstractName, PersistenceUnitGBean.GBEAN_INFO);\n+        GBeanData gbeanData = new GBeanData(abstractName, PersistenceUnitGBean.class);\n         try {\n             moduleContext.addGBean(gbeanData);\n         } catch (GBeanAlreadyExistsException e) {",
                "deletions": 17
            },
            {
                "sha": "8fa0760395e2e339f11b2391b104de40efd62ee8",
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20/pom.xml",
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/pom.xml",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/pom.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20/pom.xml?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "patch": "@@ -91,6 +91,15 @@\n             <artifactId>jcl-over-slf4j</artifactId>\n             <scope>test</scope>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.geronimo.framework</groupId>\n+            <artifactId>geronimo-kernel</artifactId>\n+            <version>${version}</version>\n+            <classifier>tests</classifier>\n+            <scope>test</scope>\n+        </dependency>\n+\n     </dependencies>\n \n </project>",
                "deletions": 0
            },
            {
                "sha": "fa429e020cdc90c8b0ff81d4b642f875cba489d1",
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "status": "modified",
                "changes": 173,
                "additions": 65,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "patch": "@@ -17,44 +17,53 @@\n \n package org.apache.geronimo.persistence;\n \n-import java.io.File;\n import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n-import java.util.Collections;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.PersistenceException;\n+import javax.persistence.SharedCacheMode;\n+import javax.persistence.ValidationMode;\n import javax.persistence.spi.ClassTransformer;\n import javax.persistence.spi.PersistenceProvider;\n import javax.persistence.spi.PersistenceUnitInfo;\n import javax.persistence.spi.PersistenceUnitTransactionType;\n-import javax.persistence.SharedCacheMode;\n-import javax.persistence.ValidationMode;\n import javax.resource.ResourceException;\n import javax.sql.DataSource;\n-\n import org.apache.geronimo.gbean.GBeanInfo;\n import org.apache.geronimo.gbean.GBeanInfoBuilder;\n import org.apache.geronimo.gbean.GBeanLifecycle;\n import org.apache.geronimo.gbean.SingleElementCollection;\n-import org.apache.geronimo.naming.ResourceSource;\n+import org.apache.geronimo.gbean.annotation.GBean;\n+import org.apache.geronimo.gbean.annotation.ParamAttribute;\n+import org.apache.geronimo.gbean.annotation.ParamReference;\n+import org.apache.geronimo.gbean.annotation.ParamSpecial;\n+import org.apache.geronimo.gbean.annotation.SpecialAttributeType;\n import org.apache.geronimo.j2ee.j2eeobjectnames.NameFactory;\n import org.apache.geronimo.kernel.classloader.TemporaryClassLoader;\n+import org.apache.geronimo.naming.ResourceSource;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n import org.apache.geronimo.transformer.TransformerAgent;\n+import org.osgi.framework.Bundle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * @version $Rev$ $Date$\n  */\n+@GBean(j2eeType = NameFactory.PERSISTENCE_UNIT)\n public class PersistenceUnitGBean implements GBeanLifecycle {\n+    private static final Logger log = LoggerFactory.getLogger(PersistenceUnitGBean.class);\n+\n     private static final List<URL> NO_URLS = Collections.emptyList();\n     private static final List<String> NO_STRINGS = Collections.emptyList();\n     private final String persistenceUnitRoot;\n@@ -63,45 +72,39 @@\n     private final TransactionManagerImpl transactionManager;\n     private final SingleElementCollection<ExtendedEntityManagerRegistry> entityManagerRegistry;\n \n-\n-    public PersistenceUnitGBean() {\n-        persistenceUnitRoot = null;\n-        persistenceUnitInfo = null;\n-        entityManagerFactory = null;\n-        transactionManager = null;\n-        entityManagerRegistry = null;\n-    }\n-\n-    public PersistenceUnitGBean(String persistenceUnitName,\n-            String persistenceProviderClassName,\n-            String persistenceUnitTransactionTypeString,\n-            ResourceSource<ResourceException> jtaDataSourceWrapper,\n-            ResourceSource<ResourceException> nonJtaDataSourceWrapper,\n-            List<String> mappingFileNamesUntyped,\n-            List<String> jarFileUrlsUntyped,\n-            String persistenceUnitRoot,\n-            List<String> managedClassNames,\n-            boolean excludeUnlistedClassesValue,\n-            Properties properties,\n-            TransactionManagerImpl transactionManager,\n-            Collection<ExtendedEntityManagerRegistry > entityManagerRegistry,\n-            URL configurationBaseURL,\n-            String persistenceXMLSchemaVersion,\n-            SharedCacheMode sharedCacheMode,\n-            ValidationMode validationMode,\n-            ClassLoader classLoader) throws URISyntaxException, MalformedURLException, ResourceException {\n-        List<String> mappingFileNames = mappingFileNamesUntyped == null? NO_STRINGS: new ArrayList<String>(mappingFileNamesUntyped);\n+    public PersistenceUnitGBean(@ParamAttribute(name = \"persistenceUnitName\") String persistenceUnitName,\n+                                @ParamAttribute(name = \"persistenceProviderClassName\") String persistenceProviderClassName,\n+                                @ParamAttribute(name = \"persistenceUnitTransactionType\") String persistenceUnitTransactionTypeString,\n+                                @ParamReference(name = \"JtaDataSourceWrapper\", namingType = NameFactory.JCA_CONNECTION_FACTORY) ResourceSource<ResourceException> jtaDataSourceWrapper,\n+                                @ParamReference(name = \"NonJtaDataSourceWrapper\", namingType = NameFactory.JCA_CONNECTION_FACTORY) ResourceSource<ResourceException> nonJtaDataSourceWrapper,\n+                                @ParamAttribute(name = \"mappingFileNames\") List<String> mappingFileNamesUntyped,\n+                                @ParamAttribute(name = \"jarFileUrls\") List<String> jarFileUrlsUntyped,\n+                                @ParamAttribute(name = \"persistenceUnitRoot\") String persistenceUnitRoot,\n+                                @ParamAttribute(name = \"managedClassNames\") List<String> managedClassNames,\n+                                @ParamAttribute(name = \"excludeUnlistedClasses\") boolean excludeUnlistedClassesValue,\n+                                @ParamAttribute(name = \"properties\") Properties properties,\n+                                @ParamReference(name = \"TransactionManager\", namingType = NameFactory.JTA_RESOURCE) TransactionManagerImpl transactionManager,\n+                                @ParamReference(name = \"EntityManagerRegistry\", namingType = GBeanInfoBuilder.DEFAULT_J2EE_TYPE) Collection<ExtendedEntityManagerRegistry> entityManagerRegistry,\n+                                @ParamAttribute(name = \"persistenceXMLSchemaVersion\") String persistenceXMLSchemaVersion,\n+                                @ParamAttribute(name = \"sharedCacheMode\") SharedCacheMode sharedCacheMode,\n+                                @ParamAttribute(name = \"validationMode\") ValidationMode validationMode,\n+                                @ParamSpecial(type = SpecialAttributeType.bundle) Bundle bundle,\n+                                @ParamSpecial(type = SpecialAttributeType.classLoader) ClassLoader classLoader) throws URISyntaxException, MalformedURLException, ResourceException {\n+        List<String> mappingFileNames = mappingFileNamesUntyped == null ? NO_STRINGS : new ArrayList<String>(mappingFileNamesUntyped);\n         this.persistenceUnitRoot = persistenceUnitRoot;\n-        URI configurationBaseURI = new File(configurationBaseURL.getFile()).toURI();\n-        URL rootURL = configurationBaseURI.resolve(persistenceUnitRoot).normalize().toURL();\n+        URI rootUri = new URI(persistenceUnitRoot);\n+        URL rootURL = bundle.getResource(persistenceUnitRoot);\n         List<URL> jarFileUrls = NO_URLS;\n         if (!excludeUnlistedClassesValue) {\n             jarFileUrls = new ArrayList<URL>();\n             //Per the EJB3.0 Persistence Specification section 6.2, the jar-file should be related to the Persistence Unit Root, which is the jar or directory where the persistence.xml is found             \n-            URI persistenceUnitBaseURI = configurationBaseURI.resolve(persistenceUnitRoot);\n-            for (String urlString: jarFileUrlsUntyped) {\n-                URL url = persistenceUnitBaseURI.resolve(urlString).normalize().toURL();\n-                jarFileUrls.add(url);\n+            for (String urlString : jarFileUrlsUntyped) {\n+                URL url = bundle.getResource(rootUri.resolve(urlString).toString());\n+                if (url != null) {\n+                    jarFileUrls.add(url);\n+                } else {\n+                    log.warn(\"jar file {} not found in bundle: {}\", urlString, bundle.toString());\n+                }\n             }\n         }\n         if (managedClassNames == null) {\n@@ -110,15 +113,15 @@ public PersistenceUnitGBean(String persistenceUnitName,\n         if (properties == null) {\n             properties = new Properties();\n         }\n-        PersistenceUnitTransactionType persistenceUnitTransactionType = persistenceUnitTransactionTypeString == null? PersistenceUnitTransactionType.JTA: PersistenceUnitTransactionType.valueOf(persistenceUnitTransactionTypeString);\n+        PersistenceUnitTransactionType persistenceUnitTransactionType = persistenceUnitTransactionTypeString == null ? PersistenceUnitTransactionType.JTA : PersistenceUnitTransactionType.valueOf(persistenceUnitTransactionTypeString);\n \n         if (persistenceProviderClassName == null) persistenceProviderClassName = \"org.apache.openjpa.persistence.PersistenceProviderImpl\";\n-        \n+\n         persistenceUnitInfo = new PersistenceUnitInfoImpl(persistenceUnitName,\n                 persistenceProviderClassName,\n                 persistenceUnitTransactionType,\n-                jtaDataSourceWrapper == null? null: (DataSource)jtaDataSourceWrapper.$getResource(),\n-                nonJtaDataSourceWrapper == null? null: (DataSource)nonJtaDataSourceWrapper.$getResource(),\n+                jtaDataSourceWrapper == null ? null : (DataSource) jtaDataSourceWrapper.$getResource(),\n+                nonJtaDataSourceWrapper == null ? null : (DataSource) nonJtaDataSourceWrapper.$getResource(),\n                 mappingFileNames,\n                 jarFileUrls,\n                 rootURL,\n@@ -256,13 +259,22 @@ public void doFail() {\n         private final ValidationMode validationMode;\n \n \n-        public PersistenceUnitInfoImpl(String persistenceUnitName, String persistenceProviderClassName,\n-                PersistenceUnitTransactionType persistenceUnitTransactionType, DataSource jtaDataSource,\n-                DataSource nonJtaDataSource, List<String> mappingFileNames, List<URL> jarFileUrls,\n-                URL persistenceUnitRootUrl, List<String> managedClassNames, boolean excludeUnlistedClassesValue,\n-                Properties properties, String persistenceXMLSchemaVersion, SharedCacheMode sharedCacheMode,\n-                ValidationMode validationMode, ClassLoader classLoader) {\n-            \n+        public PersistenceUnitInfoImpl(String persistenceUnitName,\n+                                       String persistenceProviderClassName,\n+                                       PersistenceUnitTransactionType persistenceUnitTransactionType,\n+                                       DataSource jtaDataSource,\n+                                       DataSource nonJtaDataSource,\n+                                       List<String> mappingFileNames,\n+                                       List<URL> jarFileUrls,\n+                                       URL persistenceUnitRootUrl,\n+                                       List<String> managedClassNames,\n+                                       boolean excludeUnlistedClassesValue,\n+                                       Properties properties,\n+                                       String persistenceXMLSchemaVersion,\n+                                       SharedCacheMode sharedCacheMode,\n+                                       ValidationMode validationMode,\n+                                       ClassLoader classLoader) {\n+\n             this.persistenceUnitName = persistenceUnitName;\n             this.persistenceProviderClassName = persistenceProviderClassName;\n             this.persistenceUnitTransactionType = persistenceUnitTransactionType;\n@@ -280,10 +292,10 @@ public PersistenceUnitInfoImpl(String persistenceUnitName, String persistencePro\n \n             this.classLoader = classLoader;\n             this.transformers = new ArrayList<TransformerWrapper>();\n-            \n+\n             // This classloader can only be used during PersistenceProvider.createContainerEntityManagerFactory() calls\n             // Possible that it could be cleaned up sooner, but for now it's destroyed when the PUGBean is stopped\n-            this.tempClassLoader = new TemporaryClassLoader(classLoader); \n+            this.tempClassLoader = new TemporaryClassLoader(classLoader);\n         }\n \n         @Override\n@@ -384,59 +396,4 @@ public ValidationMode getValidationMode() {\n \n     }\n \n-    public static final GBeanInfo GBEAN_INFO;\n-\n-    static {\n-        GBeanInfoBuilder infoBuilder = GBeanInfoBuilder.createStatic(PersistenceUnitGBean.class, NameFactory.PERSISTENCE_UNIT);\n-        infoBuilder.setPriority(GBeanInfo.PRIORITY_CLASSLOADER);\n-\n-        infoBuilder.addAttribute(\"persistenceUnitName\", String.class, true, true);\n-        infoBuilder.addAttribute(\"persistenceProviderClassName\", String.class, true, true);\n-        infoBuilder.addAttribute(\"persistenceUnitTransactionType\", String.class, true, true);\n-        infoBuilder.addAttribute(\"mappingFileNames\", List.class, true, true);\n-        infoBuilder.addAttribute(\"jarFileUrls\", List.class, true, true);\n-        infoBuilder.addAttribute(\"persistenceUnitRoot\", String.class, true, true);\n-        infoBuilder.addAttribute(\"managedClassNames\", List.class, true, true);\n-        infoBuilder.addAttribute(\"excludeUnlistedClasses\", boolean.class, true, true);\n-        infoBuilder.addAttribute(\"properties\", Properties.class, true, true);\n-        infoBuilder.addAttribute(\"configurationBaseUrl\", URL.class, true);\n-\n-        infoBuilder.addAttribute(\"persistenceXMLSchemaVersion\", String.class, true, true);\n-        infoBuilder.addAttribute(\"sharedCacheMode\", SharedCacheMode.class, true, true);\n-        infoBuilder.addAttribute(\"validationMode\", ValidationMode.class, true, true);\n-\n-        infoBuilder.addReference(\"TransactionManager\", TransactionManagerImpl.class, NameFactory.JTA_RESOURCE);\n-        infoBuilder.addReference(\"JtaDataSourceWrapper\", ResourceSource.class, NameFactory.JCA_CONNECTION_FACTORY);\n-        infoBuilder.addReference(\"NonJtaDataSourceWrapper\", ResourceSource.class, NameFactory.JCA_CONNECTION_FACTORY);\n-        infoBuilder.addReference(\"EntityManagerRegistry\", ExtendedEntityManagerRegistry.class, GBeanInfoBuilder.DEFAULT_J2EE_TYPE);\n-\n-        infoBuilder.setConstructor(new String[] {\n-                \"persistenceUnitName\",\n-                \"persistenceProviderClassName\",\n-                \"persistenceUnitTransactionType\",\n-                \"JtaDataSourceWrapper\",\n-                \"NonJtaDataSourceWrapper\",\n-                \"mappingFileNames\",\n-                \"jarFileUrls\",\n-                \"persistenceUnitRoot\",\n-                \"managedClassNames\",\n-                \"excludeUnlistedClasses\",\n-                \"properties\",\n-                \"TransactionManager\",\n-                \"EntityManagerRegistry\",\n-                \"configurationBaseUrl\",\n-                \"persistenceXMLSchemaVersion\",\n-                \"sharedCacheMode\",\n-                \"validationMode\",\n-                \"classLoader\"\n-        });\n-\n-        GBEAN_INFO = infoBuilder.getBeanInfo();\n-\n-    }\n-\n-    public static GBeanInfo getGBeanInfo() {\n-        return GBEAN_INFO;\n-    }\n-\n }",
                "deletions": 108
            },
            {
                "sha": "4e4443cf086725432fb93b449663976cbb3637e2",
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "patch": "@@ -24,15 +24,16 @@\n import javax.persistence.ValidationMode;\n \n import junit.framework.TestCase;\n+import org.apache.geronimo.kernel.osgi.MockBundle;\n \n /**\n  * @version $Rev$ $Date$\n  */\n public class PersistenceUnitGBeanTest extends TestCase {\n \n-    public void testNoArgConstructor() throws Exception {\n-        new PersistenceUnitGBean();\n-    }\n+//    public void testNoArgConstructor() throws Exception {\n+//        new PersistenceUnitGBean();\n+//    }\n     \n     public void testNonNullJavaFileUrls() throws Exception {\n         PersistenceUnitGBean gbean = new PersistenceUnitGBean(\"foo\",\n@@ -42,21 +43,21 @@ public void testNonNullJavaFileUrls() throws Exception {\n                 null,\n                 null,\n                 null,\n-                \"/foo/bar/Root\",\n+                \"/\",\n                 null,\n                 true,\n                 null,\n                 null,\n                 null,\n-                new File(\"/foo/bar/Root\").toURL(),\n                 \"2.0\",\n                 SharedCacheMode.NONE,\n                 ValidationMode.AUTO,\n+                new MockBundle(getClass().getClassLoader(), \"\", 0L),\n                 getClass().getClassLoader());\n         assertNotNull(gbean.getManagedClassNames());\n         assertNotNull(gbean.getProperties());\n         assertNotNull(gbean.getJarFileUrls());\n-        assertNotNull(gbean.getPersistenceUnitRootUrl());\n+//        assertNotNull(gbean.getPersistenceUnitRootUrl());\n         assertNotNull(gbean.getPersistenceProviderClassName());\n     }\n }",
                "deletions": 6
            }
        ],
        "patched_files": [
            "PersistenceUnitBuilder.java",
            "PersistenceUnitGBean.java"
        ],
        "unit_tests": [
            "PersistenceUnitGBeanTest.java"
        ]
    },
    "geronimo_7e50e74": {
        "repo": "geronimo",
        "message": "Fixes to JSR-88 DConfigBeans for connectors (and thus DB pool portlet):\n - Don't write out config settings with a value of \"null\" (as opposed to\n   the current behavior of writing with \"nil=true\" which blows up)\n   GERONIMO-1382\n - Add test for this, which also involves being able to read a Geronimo\n   deployment plan into the DConfigBeans successfully (GERONIMO-1383)\n - Add some missing JavaDoc headers\nFix for DB pool portlet so that it doesn't NPE on user or password of null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/branches/1.0@357484 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
        "parent": "https://github.com/apache/geronimo/commit/78fdd819c9072f10e0a75d5c2a558270f2a593a1",
        "bug_id": "geronimo_7e50e74",
        "file": [
            {
                "sha": "d5a17a46ef586cfab26d4113dccd3a3e8e2d59e3",
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConfigPropertySetting.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConfigPropertySetting.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConfigPropertySetting.java",
                "status": "modified",
                "changes": 18,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConfigPropertySetting.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "patch": "@@ -36,9 +36,9 @@ public ConfigPropertySetting() {\n         super(null);\n     }\n \n-    public ConfigPropertySetting(DDBean configProperty, GerConfigPropertySettingType property) {\n+    public ConfigPropertySetting(DDBean configProperty, GerConfigPropertySettingType property, boolean setDefault) {\n         super(null);\n-        configure(configProperty, property);\n+        configure(configProperty, property, setDefault);\n     }\n \n     protected GerConfigPropertySettingType getPropertySetting() {\n@@ -49,14 +49,18 @@ DDBean getDDBean() {\n         return configProperty;\n     }\n \n-    void configure(DDBean configProperty, GerConfigPropertySettingType property) {\n+    void configure(DDBean configProperty, GerConfigPropertySettingType property, boolean setDefault) {\n         this.configProperty = configProperty;\n         setXmlObject(property);\n         final String name = configProperty.getText(\"config-property-name\")[0];\n         getPropertySetting().setName(name);\n-        String[] test = configProperty.getText(\"config-property-value\");\n-        if(test != null && test.length == 1) {\n-            getPropertySetting().setStringValue(test[0]);\n+        if(setDefault) {\n+            String[] test = configProperty.getText(\"config-property-value\");\n+            if(test != null && test.length == 1) {\n+                getPropertySetting().setStringValue(test[0]);\n+            } else {\n+                getPropertySetting().setStringValue(null);\n+            }\n         }\n     }\n \n@@ -74,7 +78,7 @@ void setName(String name) {\n     }\n \n     public String getValue() {\n-        return getPropertySetting().getStringValue();\n+        return getPropertySetting().isNil() ? null : getPropertySetting().getStringValue();\n     }\n \n     public void setValue(String value) {",
                "deletions": 7
            },
            {
                "sha": "f2b4e86effdb0b404eb409e4a084344d44b26cca",
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinition.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinition.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinition.java",
                "status": "modified",
                "changes": 26,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinition.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "patch": "@@ -19,13 +19,22 @@\n import java.util.Set;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.Map;\n+import java.util.HashMap;\n import javax.enterprise.deploy.model.DDBean;\n import org.apache.geronimo.deployment.plugin.XmlBeanSupport;\n import org.apache.geronimo.xbeans.geronimo.GerConnectionDefinitionType;\n import org.apache.geronimo.xbeans.geronimo.GerConnectiondefinitionInstanceType;\n import org.apache.xmlbeans.SchemaTypeLoader;\n \n /**\n+ * Represents /connector/resourceadapter/outbound-resourceadapter/connection-definition\n+ * in the Geronimo Connector deployment plan.  A Geronimo connection definition\n+ * corresponds to a ra.xml connection definition (though there may be several\n+ * Geronimo CDs for each ra.xml CD so this cannot be a DConfigBean [which would\n+ * require a 1:1 mapping]).  Each Geronimo connection definition may have one\n+ * or more instances with different config property settings, etc.\n+ *\n  * @version $Rev$ $Date$\n  */\n public class ConnectionDefinition extends XmlBeanSupport {\n@@ -48,11 +57,26 @@ protected GerConnectionDefinitionType getConnectionDefinition() {\n     void configure(DDBean resourceAdapter, GerConnectionDefinitionType definition) {\n         this.resourceAdapter = resourceAdapter;\n         setXmlObject(definition);\n-        //todo: initialize connectiondefinition-instance from definition\n+        //todo: handle unmatched interfaces below\n+        instances = new ConnectionDefinitionInstance[definition.getConnectiondefinitionInstanceArray().length];\n+        DDBean[] beans = resourceAdapter.getChildBean(\"outbound-resourceadapter/connection-definition\");\n+        DDBean match = null;\n+        for (int i = 0; i < beans.length; i++) {\n+            DDBean bean = beans[i];\n+            if(bean.getText(\"connectionfactory-interface\")[0].equals(definition.getConnectionfactoryInterface())) {\n+                match = bean;\n+                break;\n+            }\n+        }\n+        for (int i = 0; i < instances.length; i++) {\n+            GerConnectiondefinitionInstanceType gerInstance = definition.getConnectiondefinitionInstanceArray()[i];\n+            instances[i] = new ConnectionDefinitionInstance(match, gerInstance);\n+        }\n     }\n \n     // ----------------------- JavaBean Properties for connection-definition ----------------------\n \n+    //todo: instead of String, make this an Enum type aware of the interfaces available in the J2EE DD\n     public String getConnectionFactoryInterface() {\n         return getConnectionDefinition().getConnectionfactoryInterface();\n     }",
                "deletions": 1
            },
            {
                "sha": "14544998c118946295235b2efcae9a34afb86b33",
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinitionInstance.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinitionInstance.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinitionInstance.java",
                "status": "modified",
                "changes": 37,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinitionInstance.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "patch": "@@ -73,9 +73,33 @@ protected GerConnectiondefinitionInstanceType getConnectionInstance() {\n         return (GerConnectiondefinitionInstanceType) getXmlObject();\n     }\n \n+    void clearNullSettings() {\n+        List list = new ArrayList();\n+        for (int i = 0; i < settings.length; i++) {\n+            ConfigPropertySetting setting = settings[i];\n+            if(setting.getValue() != null) {\n+                list.add(setting);\n+            }\n+        }\n+        settings = (ConfigPropertySetting[]) list.toArray(new ConfigPropertySetting[list.size()]);\n+        GerConnectiondefinitionInstanceType instance = getConnectionInstance();\n+        for (int i = instance.getConfigPropertySettingArray().length-1; i>=0; --i) {\n+            GerConfigPropertySettingType type = instance.getConfigPropertySettingArray(i);\n+            if(type.isNil() || type.getStringValue() == null) {\n+                instance.removeConfigPropertySetting(i);\n+            }\n+        }\n+    }\n+\n+    void reconfigure() {\n+        configure(connectionDefinition, getConnectionInstance());\n+    }\n+\n     void configure(DDBean connectionDefinition, GerConnectiondefinitionInstanceType definition) {\n+        ConfigPropertySetting[] old = null;\n         if(this.connectionDefinition != null) {\n             this.connectionDefinition.removeXpathListener(\"config-property\", xpathListener);\n+            old = settings;\n         }\n         this.connectionDefinition = connectionDefinition;\n         setXmlObject(definition);\n@@ -93,7 +117,7 @@ void configure(DDBean connectionDefinition, GerConnectiondefinitionInstanceType\n             GerConfigPropertySettingType setting = previous[i];\n             DDBean ddBean = (DDBean) byName.remove(setting.getName());\n             if(ddBean != null) {\n-                list.add(new ConfigPropertySetting(ddBean, setting));\n+                list.add(new ConfigPropertySetting(ddBean, setting, false));\n             } else {\n                 System.out.println(\"Ignoring connectiondefinition-instance/config-setting \"+setting.getName()+\" (no matching config-property in J2EE DD)\");\n                 //todo: delete it from the XMLBeans tree\n@@ -102,16 +126,19 @@ void configure(DDBean connectionDefinition, GerConnectiondefinitionInstanceType\n         for (Iterator it = byName.keySet().iterator(); it.hasNext();) {\n             String name = (String) it.next();\n             DDBean bean = (DDBean) byName.get(name);\n-            list.add(new ConfigPropertySetting(bean, getConnectionInstance().addNewConfigPropertySetting()));\n+            list.add(new ConfigPropertySetting(bean, getConnectionInstance().addNewConfigPropertySetting(), true));\n         }\n         settings = (ConfigPropertySetting[]) list.toArray(new ConfigPropertySetting[list.size()]);\n+        if(old != null) {\n+            pcs.firePropertyChange(\"configPropertySetting\", old, settings);\n+        }\n         if(connectionDefinition != null) {\n             connectionDefinition.addXpathListener(\"config-property\", xpathListener);\n         }\n         if(connectionDefinition != null) {\n             DDBean parent = connectionDefinition.getChildBean(\"..\")[0];\n-            ConnectionManager old = manager;\n-            if(old == null) {\n+            ConnectionManager oldMgr = manager;\n+            if(oldMgr == null) {\n                 if(definition.getConnectionmanager() != null) {\n                     manager = new ConnectionManager(parent, definition.getConnectionmanager());\n                 } else {\n@@ -124,7 +151,7 @@ void configure(DDBean connectionDefinition, GerConnectiondefinitionInstanceType\n                     manager.configure(parent, definition.addNewConnectionmanager());\n                 }\n             }\n-            pcs.firePropertyChange(\"connectionManager\", old, manager);\n+            pcs.firePropertyChange(\"connectionManager\", oldMgr, manager);\n         }\n     }\n ",
                "deletions": 5
            },
            {
                "sha": "bc04759b8b33dc7a9032c9989a4f40130681b885",
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBRoot.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBRoot.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBRoot.java",
                "status": "modified",
                "changes": 67,
                "additions": 67,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBRoot.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "patch": "@@ -18,16 +18,28 @@\n \n import java.io.InputStream;\n import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.Arrays;\n import javax.enterprise.deploy.model.DDBeanRoot;\n import javax.enterprise.deploy.model.DDBean;\n import javax.enterprise.deploy.spi.DConfigBean;\n import javax.enterprise.deploy.spi.exceptions.ConfigurationException;\n import org.apache.geronimo.deployment.plugin.DConfigBeanRootSupport;\n import org.apache.geronimo.xbeans.geronimo.GerConnectorDocument;\n+import org.apache.geronimo.xbeans.geronimo.GerAdminobjectInstanceType;\n+import org.apache.geronimo.xbeans.geronimo.GerConnectiondefinitionInstanceType;\n+import org.apache.geronimo.xbeans.geronimo.GerResourceadapterInstanceType;\n+import org.apache.geronimo.xbeans.geronimo.GerConfigPropertySettingType;\n import org.apache.xmlbeans.XmlObject;\n import org.apache.xmlbeans.XmlException;\n import org.apache.xmlbeans.SchemaTypeLoader;\n import org.apache.xmlbeans.XmlBeans;\n+import org.apache.xmlbeans.XmlCursor;\n \n /**\n  * Represents \"/\" in a Geronimo Connector deployment plan (geronimo-ra.xml).\n@@ -96,4 +108,59 @@ public DConfigBean getDConfigBean(DDBean bean) throws ConfigurationException {\n     protected SchemaTypeLoader getSchemaTypeLoader() {\n         return SCHEMA_TYPE_LOADER;\n     }\n+\n+    /**\n+     * When loaded, reset the cached \"connector\" child\n+     */\n+    public void fromXML(InputStream inputStream) throws XmlException, IOException {\n+        DDBean ddb = connector.getDDBean();\n+        super.fromXML(inputStream);\n+        if(getConnectorDocument().getConnector() != null) {\n+            connector = new ConnectorDCB(ddb, getConnectorDocument().getConnector());\n+        } else {\n+            connector = new ConnectorDCB(ddb, getConnectorDocument().addNewConnector());\n+        }\n+        //todo: fire some kind of notification for the DDBeans to catch?\n+    }\n+\n+    /**\n+     * A little trickery -- on a save event, temporarily remove any config-property-setting\n+     * elements with a null value, and then immediately replace them again.  This is because\n+     * we don't want to write them out as null, but we also want to keep the objects in\n+     * sync 1:1 with the config params declared in the J2EE deployment descriptor.\n+     */\n+    public void toXML(OutputStream outputStream) throws IOException {\n+        List parents = new ArrayList();\n+        clearNulls(parents);\n+        try {\n+            super.toXML(outputStream);\n+        } finally {\n+            for (int i = 0; i < parents.size(); i++) {\n+                Object parent = parents.get(i);\n+                if(parent instanceof ConnectionDefinitionInstance) {\n+                    ConnectionDefinitionInstance instance = (ConnectionDefinitionInstance) parent;\n+                    instance.reconfigure();\n+                } //todo: else if instanceof ResourceAdapterInstance, else if instanceof AdminObjectInstance\n+            }\n+        }\n+    }\n+\n+    private void clearNulls(List parents) {\n+        ResourceAdapter[] adapters = connector.getResourceAdapter();\n+        for (int i = 0; i < adapters.length; i++) {\n+            ResourceAdapter adapter = adapters[i];\n+            // todo: check resource adapter instances\n+            ConnectionDefinition defs[] = adapter.getConnectionDefinition();\n+            for (int j = 0; j < defs.length; j++) {\n+                ConnectionDefinition def = defs[j];\n+                ConnectionDefinitionInstance instances[] = def.getConnectionInstances();\n+                for (int k = 0; k < instances.length; k++) {\n+                    ConnectionDefinitionInstance instance = instances[k];\n+                    parents.add(instance);\n+                    instance.clearNullSettings();\n+                }\n+            }\n+        }\n+        //todo: check admin object instances\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "acebbfa7a67ce806d38fc7ef76f5a6ee907f6207",
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectorDCB.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectorDCB.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectorDCB.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectorDCB.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "patch": "@@ -47,7 +47,6 @@ public ConnectorDCB(DDBean connectorDDBean, final GerConnectorType connector) {\n         }\n         //todo: do something if resourceAdapterDDBean is null\n         loadExistingData(connector);\n-        //todo: load defaults from J2EE DD /connector/resourceadapter\n \n         // Make sure we're told if /connector/resourceadapter is replaced!\n         connectorDDBean.addXpathListener(\"resourceadapter\", new XpathListener() {\n@@ -257,6 +256,8 @@ public void setDependency(int index, Dependency dep) {\n \n     // ----------------------- End of JavaBean Properties ----------------------\n \n+    \n+\n     protected SchemaTypeLoader getSchemaTypeLoader() {\n         return Connector15DCBRoot.SCHEMA_TYPE_LOADER;\n     }",
                "deletions": 1
            },
            {
                "sha": "ab1e65345f3555669923afff38bc0fa8423cf2fd",
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ResourceAdapter.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ResourceAdapter.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ResourceAdapter.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ResourceAdapter.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "patch": "@@ -27,7 +27,9 @@\n import org.apache.xmlbeans.SchemaTypeLoader;\n \n /**\n- * Represents /connector/resourceadapter in the Geronimo Connector deployment plan\n+ * Represents /connector/resourceadapter in the Geronimo Connector deployment plan.\n+ * Note: is not a DConfigBean, because there may be more than one ResourceAdapter\n+ * in the Geronimo plan per ResourceAdapter in the J2EE deployment descriptor.\n  *\n  * @version $Rev$ $Date$\n  */\n@@ -51,7 +53,6 @@ protected GerResourceadapterType getResourceAdapter() {\n     void configure(DDBean resourceAdapter, GerResourceadapterType ra) {\n         this.resourceAdapter = resourceAdapter;\n         setXmlObject(ra);\n-        //todo: configure myself from the ra\n         if(ra.isSetOutboundResourceadapter()) {\n             DDBean[] test = resourceAdapter.getChildBean(\"outbound-resourceadapter\");\n             if(test != null && test.length > 0) {",
                "deletions": 2
            },
            {
                "sha": "dd8bac283cbd2c635228347a8974f2b89c78ac64",
                "filename": "modules/connector-builder/src/test-resources/plan-with-nulls.xml",
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/test-resources/plan-with-nulls.xml",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/test-resources/plan-with-nulls.xml",
                "status": "added",
                "changes": 32,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/test-resources/plan-with-nulls.xml?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "patch": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<connector configId=\"user/database-pool-TestPool/1/car\" xmlns=\"http://geronimo.apache.org/xml/ns/j2ee/connector-1.0\">\n+    <dep:dependency xmlns:dep=\"http://geronimo.apache.org/xml/ns/deployment-1.0\">\n+        <dep:uri>org.apache.derby/derbyclient/10.1.1.0/jar</dep:uri>\n+    </dep:dependency>\n+    <resourceadapter>\n+        <outbound-resourceadapter>\n+            <connection-definition>\n+                <connectionfactory-interface>javax.sql.DataSource</connectionfactory-interface>\n+                <connectiondefinition-instance>\n+                    <name>TestPool</name>\n+<!--\n+                    <config-property-setting name=\"Password\" xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/>\n+-->\n+                    <config-property-setting name=\"CommitBeforeAutocommit\">false</config-property-setting>\n+                    <config-property-setting name=\"Driver\">org.apache.derby.jdbc.EmbeddedDriver</config-property-setting>\n+                    <config-property-setting name=\"ExceptionSorterClass\">org.tranql.connector.AllExceptionsAreFatalSorter</config-property-setting>\n+<!--\n+                    <config-property-setting name=\"UserName\" xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/>\n+-->\n+                    <config-property-setting name=\"ConnectionURL\">jdbc:derby:TestDatabase;create=true</config-property-setting>\n+                    <connectionmanager>\n+                        <local-transaction/>\n+                        <single-pool>\n+                            <match-one/>\n+                        </single-pool>\n+                    </connectionmanager>\n+                </connectiondefinition-instance>\n+            </connection-definition>\n+        </outbound-resourceadapter>\n+    </resourceadapter>\n+</connector>",
                "deletions": 0
            },
            {
                "sha": "3000c7fc24dae30bf51525215ae47ec1feda23bd",
                "filename": "modules/connector-builder/src/test/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/test/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/test/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBTest.java",
                "status": "modified",
                "changes": 137,
                "additions": 126,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/test/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBTest.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "patch": "@@ -16,14 +16,21 @@\n  */\n package org.apache.geronimo.connector.deployment.jsr88;\n \n-import java.net.URL;\n-import java.util.Set;\n-import java.util.HashSet;\n-import java.util.Collections;\n-import javax.enterprise.deploy.shared.ModuleType;\n-import javax.enterprise.deploy.model.DDBeanRoot;\n import junit.framework.TestCase;\n+import org.apache.geronimo.connector.deployment.RARConfiguration;\n import org.apache.geronimo.deployment.tools.loader.ConnectorDeployable;\n+import org.apache.geronimo.xbeans.geronimo.GerConnectorDocument;\n+import org.apache.geronimo.xbeans.geronimo.GerConfigPropertySettingType;\n+\n+import javax.enterprise.deploy.model.DDBeanRoot;\n+import javax.enterprise.deploy.shared.ModuleType;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n \n /**\n  * @version $Rev$ $Date$\n@@ -105,19 +112,19 @@ public void testCreateDatabase() throws Exception {\n         for (int i = 0; i < 6; i++) {\n             ConfigPropertySetting setting = instance.getConfigPropertySetting(i);\n             if(setting.getName().equals(\"Driver\")) {\n-                assertEquals(\"\", setting.getValue());\n+                assertNull(setting.getValue());\n                 setting.setValue(\"org.postgresql.Driver\");\n                 ++found;\n             } else if(setting.getName().equals(\"ConnectionURL\")) {\n-                assertEquals(\"\", setting.getValue());\n+                assertNull(setting.getValue());\n                 setting.setValue(\"jdbc:postgresql://localhost/TestDatabase\");\n                 ++found;\n             } else if(setting.getName().equals(\"UserName\")) {\n-                assertEquals(\"\", setting.getValue());\n+                assertNull(setting.getValue());\n                 setting.setValue(\"dbuser\");\n                 ++found;\n             } else if(setting.getName().equals(\"Password\")) {\n-                assertEquals(\"\", setting.getValue());\n+                assertNull(setting.getValue());\n                 setting.setValue(\"dbpass\");\n                 ++found;\n             } else {\n@@ -150,7 +157,115 @@ public void testCreateDatabase() throws Exception {\n         pool.setMaxSize(new Integer(30));\n         pool.setBlockingTimeoutMillis(new Integer(5000));\n         //todo: Look at the XmlBeans tree and make sure the right stuff is in there\n-        System.out.println(dcbRoot.getConnectorDocument());\n+//        System.out.println(dcbRoot.getConnectorDocument());\n+    }\n+\n+    public void testWriteWithNulls() throws Exception {\n+        InputStream in = classLoader.getResource(\"plan-with-nulls.xml\").openStream();\n+\n+        // Create and test the DDBeanRoot\n+        URL resource = classLoader.getResource(\"database.rar\");\n+        assertNotNull(resource);\n+        ConnectorDeployable deployable = new ConnectorDeployable(resource);\n+        assertEquals(ModuleType.RAR, deployable.getType());\n+        DDBeanRoot root = deployable.getDDBeanRoot();\n+        assertNotNull(root);\n+        assertEquals(ModuleType.RAR, root.getType());\n+        assertEquals(deployable, root.getDeployableObject());\n+        // Create the DConfigBeanRoot\n+        Connector15DCBRoot dcbRoot = new Connector15DCBRoot(root);\n+        RARConfiguration configuration = new RARConfiguration(deployable, dcbRoot);\n+        configuration.restore(in);\n+        // Try the /connector element\n+        ConnectorDCB connector = (ConnectorDCB) dcbRoot.getDConfigBean(root.getChildBean(dcbRoot.getXpaths()[0])[0]);\n+        assertNotNull(connector);\n+        // Try the /connector/resourceadapter element\n+        assertNotNull(connector.getResourceAdapter());\n+        assertEquals(1, connector.getResourceAdapter().length);\n+        ResourceAdapter adapter = connector.getResourceAdapter()[0];\n+        assertNotNull(adapter);\n+        // Try the /connector/resourceadapter/outbound-resourceadapter/connection-definition element\n+        assertNotNull(adapter.getConnectionDefinition());\n+        assertEquals(1, adapter.getConnectionDefinition().length);\n+        ConnectionDefinition definition = adapter.getConnectionDefinition(0);\n+        // Try the .../connection-definition/connectiondefinition-instance elements\n+        assertNotNull(definition.getConnectionInstances());\n+        assertEquals(1, definition.getConnectionInstances().length);\n+        ConnectionDefinitionInstance instance = definition.getConnectionInstances()[0];\n+        // Try the .../connection-definition/connectiondefinition-instance/config-property-setting elements\n+        assertNotNull(instance.getConfigPropertySetting());\n+        assertEquals(6, instance.getConfigPropertySetting().length);\n+        int nullCount = 0;\n+        for (int i = 0; i < 6; i++) {\n+            if(instance.getConfigPropertySetting(i).getValue() == null) {\n+                ++nullCount;\n+            } else if(instance.getConfigPropertySetting(i).getValue().equals(\"\")) {\n+                instance.getConfigPropertySetting()[i].setValue(null);\n+                ++nullCount;\n+            }\n+        }\n+        // Read the generated XML and count config property setting elements (should be 4)\n+        assertEquals(2, nullCount);\n+        ByteArrayOutputStream pout = new ByteArrayOutputStream();\n+        dcbRoot.toXML(pout);\n+        pout.close();\n+        ByteArrayInputStream pin = new ByteArrayInputStream(pout.toByteArray());\n+        GerConnectorDocument doc = GerConnectorDocument.Factory.parse(pin);\n+        pin.close();\n+        GerConfigPropertySettingType[] settings = doc.getConnector().getResourceadapterArray(0).\n+                getOutboundResourceadapter().getConnectionDefinitionArray(0).\n+                getConnectiondefinitionInstanceArray(0).getConfigPropertySettingArray();\n+        assertEquals(4, settings.length);\n+        for (int i = 0; i < settings.length; i++) {\n+            GerConfigPropertySettingType setting = settings[i];\n+            if(setting.getName().equals(\"CommitBeforeAutocommit\")) {\n+                assertEquals(\"false\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"Driver\")) {\n+                assertEquals(\"org.apache.derby.jdbc.EmbeddedDriver\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"ExceptionSorterClass\")) {\n+                assertEquals(\"org.tranql.connector.AllExceptionsAreFatalSorter\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"ConnectionURL\")) {\n+                assertEquals(\"jdbc:derby:TestDatabase;create=true\", setting.getStringValue());\n+            } else fail(\"Unknown connection setting '\"+setting.getName()+\"'\");\n+        }\n+        // Make sure the original objects didn't lose track of the null config settings\n+        assertEquals(6, instance.getConfigPropertySetting().length);\n+        // Now set them to blank\n+        nullCount = 0;\n+        for (int i = 0; i < 6; i++) {\n+            if(instance.getConfigPropertySetting()[i].getValue() == null) {\n+                instance.getConfigPropertySetting()[i].setValue(\"\");\n+                ++nullCount;\n+            }\n+        }\n+        assertEquals(2, nullCount);\n+        // Now make sure we write out with 6\n+        pout = new ByteArrayOutputStream();\n+        dcbRoot.toXML(pout);\n+        pout.close();\n+        pin = new ByteArrayInputStream(pout.toByteArray());\n+        doc = GerConnectorDocument.Factory.parse(pin);\n+        pin.close();\n+        settings = doc.getConnector().getResourceadapterArray(0).\n+                getOutboundResourceadapter().getConnectionDefinitionArray(0).\n+                getConnectiondefinitionInstanceArray(0).getConfigPropertySettingArray();\n+        assertEquals(6, settings.length);\n+        for (int i = 0; i < settings.length; i++) {\n+            GerConfigPropertySettingType setting = settings[i];\n+            if(setting.getName().equals(\"UserName\")) {\n+                assertEquals(\"\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"Password\")) {\n+                assertEquals(\"\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"CommitBeforeAutocommit\")) {\n+                assertEquals(\"false\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"Driver\")) {\n+                assertEquals(\"org.apache.derby.jdbc.EmbeddedDriver\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"ExceptionSorterClass\")) {\n+                assertEquals(\"org.tranql.connector.AllExceptionsAreFatalSorter\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"ConnectionURL\")) {\n+                assertEquals(\"jdbc:derby:TestDatabase;create=true\", setting.getStringValue());\n+            } else fail(\"Unknown connection setting '\"+setting.getName()+\"'\");\n+        }\n     }\n \n     protected void setUp() throws Exception {",
                "deletions": 11
            }
        ],
        "patched_files": [
            "ResourceAdapter.java",
            "Connector15DCBRoot.java",
            "ConnectionDefinitionInstance.java",
            "ConnectorDCB.java",
            "ConfigPropertySetting.java",
            "ConnectionDefinition.java"
        ],
        "unit_tests": [
            "Connector15DCBTest.java"
        ]
    },
    "geronimo_ec981b3": {
        "repo": "geronimo",
        "message": "GERONIMO-1599 HOWLLog throws NPE because XidFactory is missing\n\nExtract XidFactory from TransactionManagerImpl.\n\nDefine an XidFactory GBean shared by HOWLTransactionLog and TransactionManager\n~                                                                          \n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@376284 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/geronimo/commit/ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
        "parent": "https://github.com/apache/geronimo/commit/900b36b246dd285cde492593f5332e06d64c69f6",
        "bug_id": "geronimo_ec981b3",
        "file": [
            {
                "sha": "8cfb1a8d8fec9c2edc22c00f218cb9f10f0db621",
                "filename": "configs/client/src/plan/plan.xml",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/configs/client/src/plan/plan.xml",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/configs/client/src/plan/plan.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/configs/client/src/plan/plan.xml?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -56,9 +56,14 @@ by the app client.\n         </reference>\n     </gbean>\n \n+    <gbean name=\"XidFactory\" class=\"org.apache.geronimo.transaction.manager.XidFactoryImplGBean\">\n+        <attribute name=\"tmId\">71,84,77,73,68</attribute>\n+    </gbean>\n+\n     <gbean name=\"TransactionManager\" class=\"org.apache.geronimo.transaction.manager.TransactionManagerImplGBean\">\n         <!--no transaction log on the client-->\n         <attribute name=\"defaultTransactionTimeoutSeconds\">600</attribute>\n+        <reference name=\"XidFactory\"><name>XidFactory</name></reference>\n         <references name=\"ResourceManagers\">\n             <pattern>\n                 <gbean-name>*:j2eeType=JCAManagedConnectionFactory,*</gbean-name>",
                "deletions": 0
            },
            {
                "sha": "c1fe1ab39b15c40376e7a53071572340d9b18a30",
                "filename": "configs/j2ee-server/src/plan/plan.xml",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/configs/j2ee-server/src/plan/plan.xml",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/configs/j2ee-server/src/plan/plan.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/configs/j2ee-server/src/plan/plan.xml?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -60,11 +60,17 @@ by the server.\n         <attribute name=\"maxLogFiles\">2</attribute>\n         <attribute name=\"minBuffers\">4</attribute>\n         <attribute name=\"threadsWaitingForceThreshold\">-1</attribute>\n+        <reference name=\"XidFactory\"><name>XidFactory</name></reference>\n         <reference name=\"ServerInfo\"><module>geronimo/j2ee-system/${pom.currentVersion}/car</module><name>ServerInfo</name></reference>\n     </gbean>\n+    \n+    <gbean name=\"XidFactory\" class=\"org.apache.geronimo.transaction.manager.XidFactoryImplGBean\">\n+        <attribute name=\"tmId\">71,84,77,73,68</attribute>\n+    </gbean>\n \n     <gbean name=\"TransactionManager\" class=\"org.apache.geronimo.transaction.manager.TransactionManagerImplGBean\">\n         <attribute name=\"defaultTransactionTimeoutSeconds\">600</attribute>\n+        <reference name=\"XidFactory\"><name>XidFactory</name></reference>\n         <reference name=\"TransactionLog\"><name>HOWLTransactionLog</name></reference>\n         <references name=\"ResourceManagers\">\n             <pattern><gbean-name>geronimo.server:j2eeType=JCAManagedConnectionFactory,*</gbean-name></pattern>",
                "deletions": 0
            },
            {
                "sha": "977abf40907a06afe1ebc3ac448793b202388201",
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.context.UserTransactionImpl;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -90,7 +91,8 @@ public Object invoke(InstanceContext newInstanceContext) throws Throwable {\n \n     protected void setUp() throws Exception {\n         connectionTrackingCoordinator = new ConnectionTrackingCoordinator();\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000,\n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         mockManagedConnectionFactory = new MockManagedConnectionFactory();\n         subject = new Subject();",
                "deletions": 1
            },
            {
                "sha": "7596bb4d48cd1920c315b1a574ef5fbc44372776",
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.context.TransactionContext;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -37,7 +38,8 @@\n \n     protected void setUp() throws Exception {\n         super.setUp();\n-        transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         transactionCachingInterceptor = new TransactionCachingInterceptor(this, transactionContextManager);\n     }",
                "deletions": 1
            },
            {
                "sha": "1a4e1045d366b0b3c47becca12879c2cc38a67a3",
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.manager.NamedXAResource;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -45,7 +46,8 @@\n \n     protected void setUp() throws Exception {\n         super.setUp();\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         transactionEnlistingInterceptor = new TransactionEnlistingInterceptor(this, transactionContextManager);\n     }",
                "deletions": 1
            },
            {
                "sha": "afba2bc163b89b61db664fecc00473b22a228821",
                "filename": "modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -29,7 +30,8 @@\n public class NontransactionalThreadPooledTimerTest extends AbstractThreadPooledTimerTest {\n \n     protected void setUp() throws Exception {\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         executableWorkFactory = new NontransactionalExecutorTaskFactory(transactionContextManager);\n         super.setUp();",
                "deletions": 1
            },
            {
                "sha": "177945c51c918adf29649938a9dc83ef5a8b9b52",
                "filename": "modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -29,7 +30,8 @@\n public class TransactionalThreadPooledTimerTest extends AbstractThreadPooledTimerTest {\n \n     protected void setUp() throws Exception {\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         executableWorkFactory = new TransactionalExecutorTaskFactory(transactionContextManager, 1);\n         super.setUp();",
                "deletions": 1
            },
            {
                "sha": "54c9cd3b08652bc1e37e3deedb31dbcf4aa0264c",
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "status": "modified",
                "changes": 29,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -66,12 +66,12 @@\n     private final ServerInfo serverInfo;\n     private String logFileDir;\n \n-//    private final XidFactory xidFactory;\n+    private final XidFactory xidFactory;\n \n     private final XALogger logger;\n     private final Configuration configuration = new Configuration();\n     private boolean started = false;\n-//    private HashMap recovered;\n+    private HashMap recovered;\n \n     public HOWLLog(String bufferClassName,\n                    int bufferSize,\n@@ -85,7 +85,7 @@ public HOWLLog(String bufferClassName,\n                    int maxLogFiles,\n                    int minBuffers,\n                    int threadsWaitingForceThreshold,\n-//                   XidFactory xidFactory,\n+                   XidFactory xidFactory,\n                    ServerInfo serverInfo) throws IOException, LogConfigurationException {\n         this.serverInfo = serverInfo;\n         setBufferClassName(bufferClassName);\n@@ -101,7 +101,7 @@ public HOWLLog(String bufferClassName,\n         setMaxLogFiles(maxLogFiles);\n         setMinBuffers(minBuffers);\n         setThreadsWaitingForceThreshold(threadsWaitingForceThreshold);\n-//        this.xidFactory = xidFactory;\n+        this.xidFactory = xidFactory;\n         this.logger = new XALogger(configuration);\n     }\n \n@@ -211,21 +211,21 @@ public ServerInfo getServerInfo() {\n     public void doStart() throws Exception {\n         started = true;\n         setLogFileDir(logFileDir);\n-//        log.debug(\"Initiating transaction manager recovery\");\n-//        recovered = new HashMap();\n+        log.debug(\"Initiating transaction manager recovery\");\n+        recovered = new HashMap();\n \n         logger.open(null);\n \n-//        ReplayListener replayListener = new GeronimoReplayListener(xidFactory, recovered);\n-//        logger.replayActiveTx(replayListener);\n+        ReplayListener replayListener = new GeronimoReplayListener(xidFactory, recovered);\n+        logger.replayActiveTx(replayListener);\n \n-//        log.debug(\"In doubt transactions recovered from log\");\n+        log.debug(\"In doubt transactions recovered from log\");\n     }\n \n     public void doStop() throws Exception {\n         started = false;\n         logger.close();\n-//        recovered = null;\n+        recovered = null;\n     }\n \n     public void doFail() {\n@@ -309,11 +309,6 @@ public void rollback(Xid xid, Object logMark) throws LogException {\n     }\n \n     public Collection recover(XidFactory xidFactory) throws LogException {\n-        log.debug(\"Initiating transaction manager recovery\");\n-        Map recovered = new HashMap();\n-        ReplayListener replayListener = new GeronimoReplayListener(xidFactory, recovered);\n-        logger.replayActiveTx(replayListener);\n-        log.debug(\"In doubt transactions recovered from log\");\n         return recovered.values();\n     }\n \n@@ -413,7 +408,7 @@ public LogRecord getLogRecord() {\n         infoFactory.addAttribute(\"minBuffers\", Integer.TYPE, true);\n         infoFactory.addAttribute(\"threadsWaitingForceThreshold\", Integer.TYPE, true);\n \n-//        infoFactory.addReference(\"XidFactory\", XidFactory.class, NameFactory.XID_FACTORY);\n+        infoFactory.addReference(\"XidFactory\", XidFactory.class, NameFactory.XID_FACTORY);\n         infoFactory.addReference(\"ServerInfo\", ServerInfo.class, NameFactory.GERONIMO_SERVICE);\n \n         infoFactory.addInterface(TransactionLog.class);\n@@ -431,7 +426,7 @@ public LogRecord getLogRecord() {\n             \"maxLogFiles\",\n             \"minBuffers\",\n             \"threadsWaitingForceThreshold\",\n-//            \"XidFactory\",\n+            \"XidFactory\",\n             \"ServerInfo\"});\n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }",
                "deletions": 17
            },
            {
                "sha": "9af823c7695827945cc4f3d7fdcf06957f49b529",
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImpl.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImpl.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImpl.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -46,14 +46,14 @@\n     /**\n      * TODO NOTE!!! this should be called in an unspecified transaction context, but we cannot enforce this restriction!\n      */\n-    public TransactionManagerImpl(int defaultTransactionTimeoutSeconds, TransactionLog transactionLog, Collection resourceManagers) throws XAException {\n+    public TransactionManagerImpl(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog, Collection resourceManagers) throws XAException {\n         if (defaultTransactionTimeoutSeconds <= 0) {\n             throw new IllegalArgumentException(\"defaultTransactionTimeoutSeconds must be positive: attempted value: \" + defaultTransactionTimeoutSeconds);\n         }\n \n         this.defaultTransactionTimeoutMilliseconds = defaultTransactionTimeoutSeconds * 1000;\n         this.transactionLog = transactionLog == null ? new UnrecoverableLog() : transactionLog;\n-        this.xidFactory = new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes());\n+        this.xidFactory = xidFactory;\n         this.resourceManagers = resourceManagers;\n         recovery = new RecoveryImpl(this.transactionLog, this.xidFactory);\n ",
                "deletions": 2
            },
            {
                "sha": "2d1d00daa08e6764c235b887c2427045e3266d82",
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImplGBean.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImplGBean.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImplGBean.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImplGBean.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -36,10 +36,11 @@\n     /**\n      * TODO NOTE!!! this should be called in an unspecified transaction context, but we cannot enforce this restriction!\n      */\n-    public TransactionManagerImplGBean(int defaultTransactionTimeoutSeconds, TransactionLog transactionLog, Collection resourceManagers) throws XAException {\n-        super(defaultTransactionTimeoutSeconds, transactionLog, resourceManagers);\n+    public TransactionManagerImplGBean(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog, Collection resourceManagers) throws XAException {\n+        super(defaultTransactionTimeoutSeconds, xidFactory, transactionLog, resourceManagers);\n     }\n \n+    \n     /**\n      * We can track as resources are added into the geronimo kernel.\n      *\n@@ -74,13 +75,18 @@ public void memberRemoved(ReferenceCollectionEvent event) {\n         GBeanInfoBuilder infoBuilder = GBeanInfoBuilder.createStatic(TransactionManagerImplGBean.class, NameFactory.TRANSACTION_MANAGER);\n \n         infoBuilder.addAttribute(\"defaultTransactionTimeoutSeconds\", int.class, true);\n+        infoBuilder.addReference(\"XidFactory\", XidFactory.class, NameFactory.XID_FACTORY);\n         infoBuilder.addReference(\"TransactionLog\", TransactionLog.class, NameFactory.TRANSACTION_LOG);\n         infoBuilder.addReference(\"ResourceManagers\", ResourceManager.class);//two kinds of things, so specify the type in each pattern.\n \n         infoBuilder.addInterface(ExtendedTransactionManager.class);\n         infoBuilder.addInterface(XidImporter.class);\n \n-        infoBuilder.setConstructor(new String[]{\"defaultTransactionTimeoutSeconds\", \"TransactionLog\", \"ResourceManagers\"});\n+        infoBuilder.setConstructor(new String[]{\n+                \"defaultTransactionTimeoutSeconds\",\n+                \"XidFactory\",\n+                \"TransactionLog\",\n+                \"ResourceManagers\"});\n \n         GBEAN_INFO = infoBuilder.getBeanInfo();\n     }",
                "deletions": 3
            },
            {
                "sha": "b149c4b5c63790da80457b7a4d11446aaf21bab4",
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/manager/XidFactoryImplGBean.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/XidFactoryImplGBean.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/XidFactoryImplGBean.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/manager/XidFactoryImplGBean.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -29,8 +29,13 @@\n     public static final GBeanInfo GBEAN_INFO;\n \n     static {\n-        GBeanInfoBuilder infoFactory = GBeanInfoBuilder.createStatic(XidFactoryImplGBean.class, NameFactory.XID_FACTORY);\n+        GBeanInfoBuilder infoFactory = GBeanInfoBuilder.createStatic(XidFactoryImpl.class, NameFactory.XID_FACTORY);\n+        \n+        infoFactory.addAttribute(\"tmId\", byte[].class, true);\n         infoFactory.addInterface(XidFactory.class);\n+\n+        infoFactory.setConstructor(new String[]{\"tmId\"});\n+        \n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "24b99a39fe9ad5b3ef28f1fb859e6a4437aa6cd7",
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/context/TransactionContextManagerTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/context/TransactionContextManagerTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/context/TransactionContextManagerTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/context/TransactionContextManagerTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -38,7 +38,8 @@\n     private XidFactory xidFactory = new XidFactoryImpl(\"geronimo.test.tm\".getBytes());\n \n     protected void setUp() throws Exception {\n-        TransactionManagerImpl tm = new TransactionManagerImpl(1000, null, null);\n+        TransactionManagerImpl tm = new TransactionManagerImpl(1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(tm, tm);\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "31d5bf1b2efbc2ded5af8adf08530bc31c48c7b8",
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/log/HOWLLogTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/log/HOWLLogTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/log/HOWLLogTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/log/HOWLLogTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -62,7 +62,7 @@ protected TransactionLog createTransactionLog() throws Exception {\n                 2, //                \"maxLogFiles\",\n                 2, //                \"minBuffers\",\n                 10,//                \"threadsWaitingForceThreshold\"});\n-//                xidFactory,\n+                xidFactory,\n                 new BasicServerInfo(new File(basedir, \"target\").getAbsolutePath())\n         );\n         howlLog.doStart();",
                "deletions": 1
            },
            {
                "sha": "711a2b541b9eb48bc15a6e9112763df2d40c33c5",
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/HOWLLogRecoveryTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/HOWLLogRecoveryTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/HOWLLogRecoveryTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/HOWLLogRecoveryTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -71,7 +71,7 @@ private void setUpHowlLog() throws Exception {\n                 2, //                \"maxLogFiles\",\n                 2, //                \"minBuffers\",\n                 10,//                \"threadsWaitingForceThreshold\"});\n-//                xidFactory,\n+                xidFactory,\n                 new BasicServerInfo(targetDir)\n         );\n         howlLog.doStart();",
                "deletions": 1
            },
            {
                "sha": "33018150e83724cd33e370de2c509a8088861eab",
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/ProtocolTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/ProtocolTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/ProtocolTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/ProtocolTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -31,7 +31,8 @@\n     private MockResource mr11, mr12, mr21, mr22;\n \n     protected void setUp() throws Exception {\n-        tm = new TransactionManagerImpl(1000, null, null);\n+        tm = new TransactionManagerImpl(1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         mrm1 = new MockResourceManager(true);\n         mrm2 = new MockResourceManager(true);\n         mr11 = new MockResource(mrm1, \"mr11\");",
                "deletions": 1
            },
            {
                "sha": "0f482e7ed89f17e7aa14a90daabe82789fa8e1c9",
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/TestTransactionManager.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TestTransactionManager.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TestTransactionManager.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TestTransactionManager.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -112,7 +112,8 @@ public void testOneResource() throws Exception {\n     }\n \n     protected void setUp() throws Exception {\n-        tm = new TransactionManagerImpl(10 * 1000, null, null);\n+        tm = new TransactionManagerImpl(10 * 1000,\n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         rm1 = new MockResourceManager(true);\n         rm2 = new MockResourceManager(true);\n         rm3 = new MockResourceManager(false);",
                "deletions": 1
            },
            {
                "sha": "be1effb5bfc91315dd49526fa74ea02d4da78847",
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/TransactionManagerImplTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TransactionManagerImplTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TransactionManagerImplTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TransactionManagerImplTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -49,7 +49,8 @@\n     TransactionManagerImpl tm;\n \n     protected void setUp() throws Exception {\n-        tm = new TransactionManagerImplGBean(10, transactionLog, resourceManagers);\n+        tm = new TransactionManagerImplGBean(10,\n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), transactionLog, resourceManagers);\n     }\n \n     protected void tearDown() throws Exception {",
                "deletions": 1
            },
            {
                "sha": "cfa454985b8bd532328e34d5a8f7abe0f86bf5b8",
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/XATransactionTester.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XATransactionTester.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XATransactionTester.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XATransactionTester.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -47,7 +47,9 @@ public void run(String[] args) throws Exception {\n         ds = getDataSource(args);\n         XAConnection xaConn = ds.getXAConnection(\"test\", \"test\");\n         XAResource xaRes = xaConn.getXAResource();\n-        manager = new TransactionManagerImpl(10, new DummyLog(), null);\n+        manager = new TransactionManagerImpl(10,\n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), \n+                new DummyLog(), null);\n         Connection c = xaConn.getConnection();\n         Statement s = c.createStatement();\n ",
                "deletions": 1
            },
            {
                "sha": "abdc77a7afe896b0b2d1c3cb3e7e9834f5b76cbe",
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/XidImporterTest.java",
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XidImporterTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XidImporterTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XidImporterTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "patch": "@@ -44,7 +44,8 @@\n     XidFactory xidFactory = new XidFactoryImpl();\n \n     protected void setUp() throws Exception {\n-        tm = new TransactionManagerImpl(10 * 1000, null, null);\n+        tm = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n     }\n \n     public void testImportXid() throws Exception {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "TransactionCachingInterceptor.java",
            "ConnectionManagerTestUtils.java",
            "XATransactionTester.java",
            "TransactionManagerImplGBean.java",
            "TransactionManagerImpl.java",
            "XidImporter.java",
            "TransactionEnlistingInterceptor.java",
            "TransactionContextManager.java",
            "XidFactoryImplGBean.java",
            "HOWLLog.java",
            "Protocol.java"
        ],
        "unit_tests": [
            "ProtocolTest.java",
            "TransactionCachingInterceptorTest.java",
            "TransactionalThreadPooledTimerTest.java",
            "TransactionEnlistingInterceptorTest.java",
            "TransactionContextManagerTest.java",
            "XidImporterTest.java",
            "HOWLLogRecoveryTest.java",
            "TestTransactionManager.java",
            "TransactionManagerImplTest.java",
            "NontransactionalThreadPooledTimerTest.java",
            "HOWLLogTest.java"
        ]
    }
}