{
    "geronimo_219f212": {
        "bug_id": "geronimo_219f212",
        "commit": "https://github.com/apache/geronimo/commit/219f21255817eae4ec813bc88c4e9ff0c016ded0",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/geronimo/blob/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java?ref=219f21255817eae4ec813bc88c4e9ff0c016ded0",
                "deletions": 12,
                "filename": "modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "patch": "@@ -97,23 +97,28 @@ public void init() {\n         try {\n             this.endpointClass = classLoader.loadClass(this.endpointClassName);\n             configurationContext = ConfigurationContextFactory.createDefaultConfigurationContext();\n-            \n-            //check to see if the wsdlLocation property is set in portInfo, \n-            //if not checking if wsdlLocation exists in annotation\n-            //if already set, annotation should not overwrite it.\n-            if (portInfo.getWsdlFile() == null || portInfo.getWsdlFile().equals(\"\")){\n-                //getwsdllocation from annotation if it exists\n+\n+            // check to see if the wsdlLocation property is set in portInfo,\n+            // if not checking if wsdlLocation exists in annotation\n+            // if already set, annotation should not overwrite it.\n+            if (portInfo.getWsdlFile() == null || portInfo.getWsdlFile().equals(\"\")) {\n+                // getwsdllocation from annotation if it exists\n                 if (JAXWSUtils.containsWsdlLocation(this.endpointClass, classLoader)) {\n                     portInfo.setWsdlFile(JAXWSUtils.getServiceWsdlLocation(this.endpointClass, classLoader));\n                 }\n             }\n \n-            if(portInfo.getWsdlFile() != null && !portInfo.getWsdlFile().equals(\"\")){ //WSDL file Has been provided\n-                AxisServiceGenerator serviceGen = createServiceGenerator();\n+            AxisServiceGenerator serviceGen = createServiceGenerator();            \n+            if (portInfo.getWsdlFile() != null && !portInfo.getWsdlFile().equals(\"\")) { \n+                // WSDL file has been provided \n                 service = serviceGen.getServiceFromWSDL(portInfo, endpointClass, configurationBaseUrl);\n-                                            \n-            }else { //No WSDL, Axis2 will handle it. Is it ?\n-                service = AxisService.createService(endpointClassName, configurationContext.getAxisConfiguration(), JAXWSMessageReceiver.class);\n+            } else {\n+                // No WSDL, let Axis2 handle it.\n+                \n+                // FIXME: AxisServiceGenerator method should be used as it understands annotations\n+                // but right now that method causes some problems when WSDL is requested.\n+                service = AxisService.createService(endpointClassName, configurationContext.getAxisConfiguration(), JAXWSMessageReceiver.class);                \n+                // service = serviceGen.getServiceFromClass(this.endpointClass);\n             }\n \n             service.setScope(Constants.SCOPE_APPLICATION);\n@@ -124,7 +129,7 @@ public void init() {\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n         }\n-        \n+\n         this.wsdlQueryHandler = new WSDLQueryHandler(this.service);\n     }  \n ",
                "raw_url": "https://github.com/apache/geronimo/raw/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "sha": "ee204ab2e5932310490c2b8f7a6af5e56191c2bb",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/geronimo/blob/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/AxisServiceGenerator.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/AxisServiceGenerator.java?ref=219f21255817eae4ec813bc88c4e9ff0c016ded0",
                "deletions": 1,
                "filename": "modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/AxisServiceGenerator.java",
                "patch": "@@ -24,7 +24,6 @@\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n \n import javax.wsdl.Binding;\n import javax.wsdl.Definition;\n@@ -45,6 +44,7 @@\n import org.apache.axis2.description.Parameter;\n import org.apache.axis2.description.WSDL11ToAxisServiceBuilder;\n import org.apache.axis2.description.WSDLToAxisServiceBuilder;\n+import org.apache.axis2.description.java2wsdl.Java2WSDLConstants;\n import org.apache.axis2.engine.MessageReceiver;\n import org.apache.axis2.jaxws.description.DescriptionFactory;\n import org.apache.axis2.jaxws.description.EndpointDescription;\n@@ -65,6 +65,7 @@\n import org.apache.geronimo.axis2.util.SimpleWSDLLocator;\n import org.apache.geronimo.jaxws.JAXWSUtils;\n import org.apache.geronimo.jaxws.PortInfo;\n+import org.apache.ws.commons.schema.utils.NamespaceMap;\n \n //TODO: Handle RPC Style Messaging\n \n@@ -86,6 +87,26 @@ public void setMessageReceiver(MessageReceiver messageReceiver) {\n         this.messageReceiver = messageReceiver;\n     }\n    \n+    public AxisService getServiceFromClass(Class endpointClass) throws Exception {\n+        AxisService service = DescriptionFactory.createAxisService(endpointClass);\n+        \n+        for(Iterator<AxisOperation> opIterator = service.getOperations() ; opIterator.hasNext() ;){\n+            AxisOperation operation = opIterator.next();\n+            operation.setMessageReceiver(this.messageReceiver);\n+        }\n+        \n+        if (service.getNameSpacesMap() == null) {\n+            NamespaceMap map = new NamespaceMap();\n+            map.put(Java2WSDLConstants.AXIS2_NAMESPACE_PREFIX,\n+                    Java2WSDLConstants.AXIS2_XSD);\n+            map.put(Java2WSDLConstants.DEFAULT_SCHEMA_NAMESPACE_PREFIX,\n+                    Java2WSDLConstants.URI_2001_SCHEMA_XSD);\n+            service.setNameSpacesMap(map);\n+        }\n+        \n+        return service;\n+    }\n+    \n     public AxisService getServiceFromWSDL(PortInfo portInfo, Class endpointClass, URL configurationBaseUrl) throws Exception {\n         String wsdlFile = portInfo.getWsdlFile();\n         if (wsdlFile == null || wsdlFile.equals(\"\")) {",
                "raw_url": "https://github.com/apache/geronimo/raw/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/AxisServiceGenerator.java",
                "sha": "1ce0f507adca4c2560f4865fa85afdbb07f5d608",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/GeronimoHandlerChainBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/GeronimoHandlerChainBuilder.java?ref=219f21255817eae4ec813bc88c4e9ff0c016ded0",
                "deletions": 1,
                "filename": "modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/GeronimoHandlerChainBuilder.java",
                "patch": "@@ -53,7 +53,7 @@ public ClassLoader getHandlerClassLoader() {\n                 && matchBinding(portInfo, hc.getProtocolBindings())) {\n             return super.buildHandlerChain(hc, classLoader);\n         } else {\n-            return Collections.EMPTY_LIST;\n+            return Collections.emptyList();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/219f21255817eae4ec813bc88c4e9ff0c016ded0/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/GeronimoHandlerChainBuilder.java",
                "sha": "d68f7b1b28a46a9c4744f7df2a065ea81f80ed0e",
                "status": "modified"
            }
        ],
        "message": "added generateServiceFromClass method (right now disabled as it generated NPE when get wsdl is called (bug in axis2))\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@544948 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/20e538ffc4759a26a630ffb31b8c8eaea22b5876",
        "patched_files": [
            "Axis2WebServiceContainer.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "Axis2WebServiceContainerTest.java"
        ]
    },
    "geronimo_28e0bb4": {
        "bug_id": "geronimo_28e0bb4",
        "commit": "https://github.com/apache/geronimo/commit/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20-builder/pom.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20-builder/pom.xml?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "deletions": 0,
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20-builder/pom.xml",
                "patch": "@@ -47,6 +47,7 @@\n             <artifactId>geronimo-persistence-jpa20</artifactId>\n             <version>${version}</version>\n         </dependency>\n+        \n     </dependencies>\n \n </project>",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20-builder/pom.xml",
                "sha": "cbfdf8f2a714287f9229d2fb4d0e850d67ed61b7",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20-builder/src/main/java/org/apache/geronimo/persistence/builder/PersistenceUnitBuilder.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20-builder/src/main/java/org/apache/geronimo/persistence/builder/PersistenceUnitBuilder.java?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "deletions": 17,
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20-builder/src/main/java/org/apache/geronimo/persistence/builder/PersistenceUnitBuilder.java",
                "patch": "@@ -228,23 +228,23 @@ protected PersistenceDocument convertToPersistenceDocument(XmlObject xmlObject)\n     }\n \n     protected PersistenceDocument.Persistence convertToPersistenceUnit(XmlObject xmlObject) throws XmlException {\n-        XmlCursor cursor = null;\n-        try {\n-            cursor = xmlObject.newCursor();\n-            cursor.toStartDoc();\n-            cursor.toFirstChild();\n-            SchemaConversionUtils.convertSchemaVersion(cursor, SchemaConversionUtils.JPA_PERSISTENCE_NAMESPACE, \"http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\", \"2.0\");\n+//        XmlCursor cursor = null;\n+//        try {\n+//            cursor = xmlObject.newCursor();\n+//            cursor.toStartDoc();\n+//            cursor.toFirstChild();\n+//            SchemaConversionUtils.convertSchemaVersion(cursor, SchemaConversionUtils.JPA_PERSISTENCE_NAMESPACE, \"http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\", \"2.0\");\n             XmlObject result = xmlObject.changeType(PersistenceDocument.Persistence.type);\n             XmlBeansUtil.validateDD(result);\n             return (PersistenceDocument.Persistence) result;\n-        } finally {\n-            if (cursor != null) {\n-                try {\n-                    cursor.dispose();\n-                } catch (Exception e) {\n-                }\n-            }\n-        }\n+//        } finally {\n+//            if (cursor != null) {\n+//                try {\n+//                    cursor.dispose();\n+//                } catch (Exception e) {\n+//                }\n+//            }\n+//        }\n     }\n \n     private void buildPersistenceUnits(PersistenceDocument.Persistence persistence, Map<String, PersistenceDocument.Persistence.PersistenceUnit> overrides, Module module, String persistenceModulePath) throws DeploymentException {\n@@ -267,12 +267,12 @@ private GBeanData installPersistenceUnitGBean(PersistenceDocument.Persistence.Pe\n         }\n         AbstractName abstractName;\n         if (persistenceModulePath == null || persistenceModulePath.length() == 0) {\n-            abstractName = moduleContext.getNaming().createChildName(module.getModuleName(), persistenceUnitName, PersistenceUnitGBean.GBEAN_INFO.getJ2eeType());\n+            abstractName = moduleContext.getNaming().createChildName(module.getModuleName(), persistenceUnitName, NameFactory.PERSISTENCE_UNIT);\n         } else {\n             abstractName = moduleContext.getNaming().createChildName(module.getModuleName(), persistenceModulePath, NameFactory.PERSISTENCE_UNIT_MODULE);\n-            abstractName = moduleContext.getNaming().createChildName(abstractName, moduleContext.getConfigID(), persistenceUnitName, PersistenceUnitGBean.GBEAN_INFO.getJ2eeType());\n+            abstractName = moduleContext.getNaming().createChildName(abstractName, moduleContext.getConfigID(), persistenceUnitName, NameFactory.PERSISTENCE_UNIT);\n         }\n-        GBeanData gbeanData = new GBeanData(abstractName, PersistenceUnitGBean.GBEAN_INFO);\n+        GBeanData gbeanData = new GBeanData(abstractName, PersistenceUnitGBean.class);\n         try {\n             moduleContext.addGBean(gbeanData);\n         } catch (GBeanAlreadyExistsException e) {",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20-builder/src/main/java/org/apache/geronimo/persistence/builder/PersistenceUnitBuilder.java",
                "sha": "38673c3bcc454903af1ad28cee035c2fffebee1a",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/pom.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20/pom.xml?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "deletions": 0,
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20/pom.xml",
                "patch": "@@ -91,6 +91,15 @@\n             <artifactId>jcl-over-slf4j</artifactId>\n             <scope>test</scope>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.geronimo.framework</groupId>\n+            <artifactId>geronimo-kernel</artifactId>\n+            <version>${version}</version>\n+            <classifier>tests</classifier>\n+            <scope>test</scope>\n+        </dependency>\n+\n     </dependencies>\n \n </project>",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/pom.xml",
                "sha": "8fa0760395e2e339f11b2391b104de40efd62ee8",
                "status": "modified"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "changes": 173,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "deletions": 108,
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "patch": "@@ -17,44 +17,53 @@\n \n package org.apache.geronimo.persistence;\n \n-import java.io.File;\n import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n-import java.util.Collections;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.PersistenceException;\n+import javax.persistence.SharedCacheMode;\n+import javax.persistence.ValidationMode;\n import javax.persistence.spi.ClassTransformer;\n import javax.persistence.spi.PersistenceProvider;\n import javax.persistence.spi.PersistenceUnitInfo;\n import javax.persistence.spi.PersistenceUnitTransactionType;\n-import javax.persistence.SharedCacheMode;\n-import javax.persistence.ValidationMode;\n import javax.resource.ResourceException;\n import javax.sql.DataSource;\n-\n import org.apache.geronimo.gbean.GBeanInfo;\n import org.apache.geronimo.gbean.GBeanInfoBuilder;\n import org.apache.geronimo.gbean.GBeanLifecycle;\n import org.apache.geronimo.gbean.SingleElementCollection;\n-import org.apache.geronimo.naming.ResourceSource;\n+import org.apache.geronimo.gbean.annotation.GBean;\n+import org.apache.geronimo.gbean.annotation.ParamAttribute;\n+import org.apache.geronimo.gbean.annotation.ParamReference;\n+import org.apache.geronimo.gbean.annotation.ParamSpecial;\n+import org.apache.geronimo.gbean.annotation.SpecialAttributeType;\n import org.apache.geronimo.j2ee.j2eeobjectnames.NameFactory;\n import org.apache.geronimo.kernel.classloader.TemporaryClassLoader;\n+import org.apache.geronimo.naming.ResourceSource;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n import org.apache.geronimo.transformer.TransformerAgent;\n+import org.osgi.framework.Bundle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * @version $Rev$ $Date$\n  */\n+@GBean(j2eeType = NameFactory.PERSISTENCE_UNIT)\n public class PersistenceUnitGBean implements GBeanLifecycle {\n+    private static final Logger log = LoggerFactory.getLogger(PersistenceUnitGBean.class);\n+\n     private static final List<URL> NO_URLS = Collections.emptyList();\n     private static final List<String> NO_STRINGS = Collections.emptyList();\n     private final String persistenceUnitRoot;\n@@ -63,45 +72,39 @@\n     private final TransactionManagerImpl transactionManager;\n     private final SingleElementCollection<ExtendedEntityManagerRegistry> entityManagerRegistry;\n \n-\n-    public PersistenceUnitGBean() {\n-        persistenceUnitRoot = null;\n-        persistenceUnitInfo = null;\n-        entityManagerFactory = null;\n-        transactionManager = null;\n-        entityManagerRegistry = null;\n-    }\n-\n-    public PersistenceUnitGBean(String persistenceUnitName,\n-            String persistenceProviderClassName,\n-            String persistenceUnitTransactionTypeString,\n-            ResourceSource<ResourceException> jtaDataSourceWrapper,\n-            ResourceSource<ResourceException> nonJtaDataSourceWrapper,\n-            List<String> mappingFileNamesUntyped,\n-            List<String> jarFileUrlsUntyped,\n-            String persistenceUnitRoot,\n-            List<String> managedClassNames,\n-            boolean excludeUnlistedClassesValue,\n-            Properties properties,\n-            TransactionManagerImpl transactionManager,\n-            Collection<ExtendedEntityManagerRegistry > entityManagerRegistry,\n-            URL configurationBaseURL,\n-            String persistenceXMLSchemaVersion,\n-            SharedCacheMode sharedCacheMode,\n-            ValidationMode validationMode,\n-            ClassLoader classLoader) throws URISyntaxException, MalformedURLException, ResourceException {\n-        List<String> mappingFileNames = mappingFileNamesUntyped == null? NO_STRINGS: new ArrayList<String>(mappingFileNamesUntyped);\n+    public PersistenceUnitGBean(@ParamAttribute(name = \"persistenceUnitName\") String persistenceUnitName,\n+                                @ParamAttribute(name = \"persistenceProviderClassName\") String persistenceProviderClassName,\n+                                @ParamAttribute(name = \"persistenceUnitTransactionType\") String persistenceUnitTransactionTypeString,\n+                                @ParamReference(name = \"JtaDataSourceWrapper\", namingType = NameFactory.JCA_CONNECTION_FACTORY) ResourceSource<ResourceException> jtaDataSourceWrapper,\n+                                @ParamReference(name = \"NonJtaDataSourceWrapper\", namingType = NameFactory.JCA_CONNECTION_FACTORY) ResourceSource<ResourceException> nonJtaDataSourceWrapper,\n+                                @ParamAttribute(name = \"mappingFileNames\") List<String> mappingFileNamesUntyped,\n+                                @ParamAttribute(name = \"jarFileUrls\") List<String> jarFileUrlsUntyped,\n+                                @ParamAttribute(name = \"persistenceUnitRoot\") String persistenceUnitRoot,\n+                                @ParamAttribute(name = \"managedClassNames\") List<String> managedClassNames,\n+                                @ParamAttribute(name = \"excludeUnlistedClasses\") boolean excludeUnlistedClassesValue,\n+                                @ParamAttribute(name = \"properties\") Properties properties,\n+                                @ParamReference(name = \"TransactionManager\", namingType = NameFactory.JTA_RESOURCE) TransactionManagerImpl transactionManager,\n+                                @ParamReference(name = \"EntityManagerRegistry\", namingType = GBeanInfoBuilder.DEFAULT_J2EE_TYPE) Collection<ExtendedEntityManagerRegistry> entityManagerRegistry,\n+                                @ParamAttribute(name = \"persistenceXMLSchemaVersion\") String persistenceXMLSchemaVersion,\n+                                @ParamAttribute(name = \"sharedCacheMode\") SharedCacheMode sharedCacheMode,\n+                                @ParamAttribute(name = \"validationMode\") ValidationMode validationMode,\n+                                @ParamSpecial(type = SpecialAttributeType.bundle) Bundle bundle,\n+                                @ParamSpecial(type = SpecialAttributeType.classLoader) ClassLoader classLoader) throws URISyntaxException, MalformedURLException, ResourceException {\n+        List<String> mappingFileNames = mappingFileNamesUntyped == null ? NO_STRINGS : new ArrayList<String>(mappingFileNamesUntyped);\n         this.persistenceUnitRoot = persistenceUnitRoot;\n-        URI configurationBaseURI = new File(configurationBaseURL.getFile()).toURI();\n-        URL rootURL = configurationBaseURI.resolve(persistenceUnitRoot).normalize().toURL();\n+        URI rootUri = new URI(persistenceUnitRoot);\n+        URL rootURL = bundle.getResource(persistenceUnitRoot);\n         List<URL> jarFileUrls = NO_URLS;\n         if (!excludeUnlistedClassesValue) {\n             jarFileUrls = new ArrayList<URL>();\n             //Per the EJB3.0 Persistence Specification section 6.2, the jar-file should be related to the Persistence Unit Root, which is the jar or directory where the persistence.xml is found             \n-            URI persistenceUnitBaseURI = configurationBaseURI.resolve(persistenceUnitRoot);\n-            for (String urlString: jarFileUrlsUntyped) {\n-                URL url = persistenceUnitBaseURI.resolve(urlString).normalize().toURL();\n-                jarFileUrls.add(url);\n+            for (String urlString : jarFileUrlsUntyped) {\n+                URL url = bundle.getResource(rootUri.resolve(urlString).toString());\n+                if (url != null) {\n+                    jarFileUrls.add(url);\n+                } else {\n+                    log.warn(\"jar file {} not found in bundle: {}\", urlString, bundle.toString());\n+                }\n             }\n         }\n         if (managedClassNames == null) {\n@@ -110,15 +113,15 @@ public PersistenceUnitGBean(String persistenceUnitName,\n         if (properties == null) {\n             properties = new Properties();\n         }\n-        PersistenceUnitTransactionType persistenceUnitTransactionType = persistenceUnitTransactionTypeString == null? PersistenceUnitTransactionType.JTA: PersistenceUnitTransactionType.valueOf(persistenceUnitTransactionTypeString);\n+        PersistenceUnitTransactionType persistenceUnitTransactionType = persistenceUnitTransactionTypeString == null ? PersistenceUnitTransactionType.JTA : PersistenceUnitTransactionType.valueOf(persistenceUnitTransactionTypeString);\n \n         if (persistenceProviderClassName == null) persistenceProviderClassName = \"org.apache.openjpa.persistence.PersistenceProviderImpl\";\n-        \n+\n         persistenceUnitInfo = new PersistenceUnitInfoImpl(persistenceUnitName,\n                 persistenceProviderClassName,\n                 persistenceUnitTransactionType,\n-                jtaDataSourceWrapper == null? null: (DataSource)jtaDataSourceWrapper.$getResource(),\n-                nonJtaDataSourceWrapper == null? null: (DataSource)nonJtaDataSourceWrapper.$getResource(),\n+                jtaDataSourceWrapper == null ? null : (DataSource) jtaDataSourceWrapper.$getResource(),\n+                nonJtaDataSourceWrapper == null ? null : (DataSource) nonJtaDataSourceWrapper.$getResource(),\n                 mappingFileNames,\n                 jarFileUrls,\n                 rootURL,\n@@ -256,13 +259,22 @@ public void doFail() {\n         private final ValidationMode validationMode;\n \n \n-        public PersistenceUnitInfoImpl(String persistenceUnitName, String persistenceProviderClassName,\n-                PersistenceUnitTransactionType persistenceUnitTransactionType, DataSource jtaDataSource,\n-                DataSource nonJtaDataSource, List<String> mappingFileNames, List<URL> jarFileUrls,\n-                URL persistenceUnitRootUrl, List<String> managedClassNames, boolean excludeUnlistedClassesValue,\n-                Properties properties, String persistenceXMLSchemaVersion, SharedCacheMode sharedCacheMode,\n-                ValidationMode validationMode, ClassLoader classLoader) {\n-            \n+        public PersistenceUnitInfoImpl(String persistenceUnitName,\n+                                       String persistenceProviderClassName,\n+                                       PersistenceUnitTransactionType persistenceUnitTransactionType,\n+                                       DataSource jtaDataSource,\n+                                       DataSource nonJtaDataSource,\n+                                       List<String> mappingFileNames,\n+                                       List<URL> jarFileUrls,\n+                                       URL persistenceUnitRootUrl,\n+                                       List<String> managedClassNames,\n+                                       boolean excludeUnlistedClassesValue,\n+                                       Properties properties,\n+                                       String persistenceXMLSchemaVersion,\n+                                       SharedCacheMode sharedCacheMode,\n+                                       ValidationMode validationMode,\n+                                       ClassLoader classLoader) {\n+\n             this.persistenceUnitName = persistenceUnitName;\n             this.persistenceProviderClassName = persistenceProviderClassName;\n             this.persistenceUnitTransactionType = persistenceUnitTransactionType;\n@@ -280,10 +292,10 @@ public PersistenceUnitInfoImpl(String persistenceUnitName, String persistencePro\n \n             this.classLoader = classLoader;\n             this.transformers = new ArrayList<TransformerWrapper>();\n-            \n+\n             // This classloader can only be used during PersistenceProvider.createContainerEntityManagerFactory() calls\n             // Possible that it could be cleaned up sooner, but for now it's destroyed when the PUGBean is stopped\n-            this.tempClassLoader = new TemporaryClassLoader(classLoader); \n+            this.tempClassLoader = new TemporaryClassLoader(classLoader);\n         }\n \n         @Override\n@@ -384,59 +396,4 @@ public ValidationMode getValidationMode() {\n \n     }\n \n-    public static final GBeanInfo GBEAN_INFO;\n-\n-    static {\n-        GBeanInfoBuilder infoBuilder = GBeanInfoBuilder.createStatic(PersistenceUnitGBean.class, NameFactory.PERSISTENCE_UNIT);\n-        infoBuilder.setPriority(GBeanInfo.PRIORITY_CLASSLOADER);\n-\n-        infoBuilder.addAttribute(\"persistenceUnitName\", String.class, true, true);\n-        infoBuilder.addAttribute(\"persistenceProviderClassName\", String.class, true, true);\n-        infoBuilder.addAttribute(\"persistenceUnitTransactionType\", String.class, true, true);\n-        infoBuilder.addAttribute(\"mappingFileNames\", List.class, true, true);\n-        infoBuilder.addAttribute(\"jarFileUrls\", List.class, true, true);\n-        infoBuilder.addAttribute(\"persistenceUnitRoot\", String.class, true, true);\n-        infoBuilder.addAttribute(\"managedClassNames\", List.class, true, true);\n-        infoBuilder.addAttribute(\"excludeUnlistedClasses\", boolean.class, true, true);\n-        infoBuilder.addAttribute(\"properties\", Properties.class, true, true);\n-        infoBuilder.addAttribute(\"configurationBaseUrl\", URL.class, true);\n-\n-        infoBuilder.addAttribute(\"persistenceXMLSchemaVersion\", String.class, true, true);\n-        infoBuilder.addAttribute(\"sharedCacheMode\", SharedCacheMode.class, true, true);\n-        infoBuilder.addAttribute(\"validationMode\", ValidationMode.class, true, true);\n-\n-        infoBuilder.addReference(\"TransactionManager\", TransactionManagerImpl.class, NameFactory.JTA_RESOURCE);\n-        infoBuilder.addReference(\"JtaDataSourceWrapper\", ResourceSource.class, NameFactory.JCA_CONNECTION_FACTORY);\n-        infoBuilder.addReference(\"NonJtaDataSourceWrapper\", ResourceSource.class, NameFactory.JCA_CONNECTION_FACTORY);\n-        infoBuilder.addReference(\"EntityManagerRegistry\", ExtendedEntityManagerRegistry.class, GBeanInfoBuilder.DEFAULT_J2EE_TYPE);\n-\n-        infoBuilder.setConstructor(new String[] {\n-                \"persistenceUnitName\",\n-                \"persistenceProviderClassName\",\n-                \"persistenceUnitTransactionType\",\n-                \"JtaDataSourceWrapper\",\n-                \"NonJtaDataSourceWrapper\",\n-                \"mappingFileNames\",\n-                \"jarFileUrls\",\n-                \"persistenceUnitRoot\",\n-                \"managedClassNames\",\n-                \"excludeUnlistedClasses\",\n-                \"properties\",\n-                \"TransactionManager\",\n-                \"EntityManagerRegistry\",\n-                \"configurationBaseUrl\",\n-                \"persistenceXMLSchemaVersion\",\n-                \"sharedCacheMode\",\n-                \"validationMode\",\n-                \"classLoader\"\n-        });\n-\n-        GBEAN_INFO = infoBuilder.getBeanInfo();\n-\n-    }\n-\n-    public static GBeanInfo getGBeanInfo() {\n-        return GBEAN_INFO;\n-    }\n-\n }",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "sha": "fa429e020cdc90c8b0ff81d4b642f875cba489d1",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/geronimo/blob/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa2/geronimo-persistence-jpa20/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java?ref=28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9",
                "deletions": 6,
                "filename": "plugins/openjpa2/geronimo-persistence-jpa20/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "patch": "@@ -24,15 +24,16 @@\n import javax.persistence.ValidationMode;\n \n import junit.framework.TestCase;\n+import org.apache.geronimo.kernel.osgi.MockBundle;\n \n /**\n  * @version $Rev$ $Date$\n  */\n public class PersistenceUnitGBeanTest extends TestCase {\n \n-    public void testNoArgConstructor() throws Exception {\n-        new PersistenceUnitGBean();\n-    }\n+//    public void testNoArgConstructor() throws Exception {\n+//        new PersistenceUnitGBean();\n+//    }\n     \n     public void testNonNullJavaFileUrls() throws Exception {\n         PersistenceUnitGBean gbean = new PersistenceUnitGBean(\"foo\",\n@@ -42,21 +43,21 @@ public void testNonNullJavaFileUrls() throws Exception {\n                 null,\n                 null,\n                 null,\n-                \"/foo/bar/Root\",\n+                \"/\",\n                 null,\n                 true,\n                 null,\n                 null,\n                 null,\n-                new File(\"/foo/bar/Root\").toURL(),\n                 \"2.0\",\n                 SharedCacheMode.NONE,\n                 ValidationMode.AUTO,\n+                new MockBundle(getClass().getClassLoader(), \"\", 0L),\n                 getClass().getClassLoader());\n         assertNotNull(gbean.getManagedClassNames());\n         assertNotNull(gbean.getProperties());\n         assertNotNull(gbean.getJarFileUrls());\n-        assertNotNull(gbean.getPersistenceUnitRootUrl());\n+//        assertNotNull(gbean.getPersistenceUnitRootUrl());\n         assertNotNull(gbean.getPersistenceProviderClassName());\n     }\n }",
                "raw_url": "https://github.com/apache/geronimo/raw/28e0bb4abbe4a5c72301c7fe2f180dcf54c9a6f9/plugins/openjpa2/geronimo-persistence-jpa20/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "sha": "4e4443cf086725432fb93b449663976cbb3637e2",
                "status": "modified"
            }
        ],
        "message": "GERONINMO-4680 slightly osgi-ify PersistenceUnitInfo, at least eliminating an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@935103 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/c9b4080edc550f9fc1111aae29d659f8f1d78bdb",
        "patched_files": [
            "pom.xml",
            "PersistenceUnitBuilder.java",
            "PersistenceUnitGBean.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "PersistenceUnitGBeanTest.java"
        ]
    },
    "geronimo_29e40de": {
        "bug_id": "geronimo_29e40de",
        "commit": "https://github.com/apache/geronimo/commit/29e40de11b6bd518fcf974dbf3857f67f4cdd1c5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/29e40de11b6bd518fcf974dbf3857f67f4cdd1c5/modules/deployment/src/java/org/apache/geronimo/deployment/DeploymentContext.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/deployment/src/java/org/apache/geronimo/deployment/DeploymentContext.java?ref=29e40de11b6bd518fcf974dbf3857f67f4cdd1c5",
                "deletions": 1,
                "filename": "modules/deployment/src/java/org/apache/geronimo/deployment/DeploymentContext.java",
                "patch": "@@ -83,10 +83,10 @@ public DeploymentContext(File baseDir, File inPlaceConfigurationDir, Environment\n     }\n \n     public DeploymentContext(File baseDir, File inPlaceConfigurationDir, Environment environment, ConfigurationModuleType moduleType, Naming naming, ConfigurationManager configurationManager) throws DeploymentException {\n-        this.configurationManager = configurationManager;\n         if (baseDir == null) throw new NullPointerException(\"baseDir is null\");\n         if (environment == null) throw new NullPointerException(\"environment is null\");\n         if (moduleType == null) throw new NullPointerException(\"type is null\");\n+        if (configurationManager == null) throw new NullPointerException(\"configurationManager is null\");\n \n         if (!baseDir.exists()) {\n             baseDir.mkdirs();\n@@ -99,6 +99,8 @@ public DeploymentContext(File baseDir, File inPlaceConfigurationDir, Environment\n \n         this.configuration = createTempConfiguration(environment, moduleType, baseDir, inPlaceConfigurationDir, configurationManager, naming);\n \n+        this.configurationManager = configurationManager;\n+        \n         if (null == inPlaceConfigurationDir) {\n             resourceContext = new CopyResourceContext(configuration, baseDir);\n         } else {",
                "raw_url": "https://github.com/apache/geronimo/raw/29e40de11b6bd518fcf974dbf3857f67f4cdd1c5/modules/deployment/src/java/org/apache/geronimo/deployment/DeploymentContext.java",
                "sha": "0db24af509c54907ef31978e05993dae66508f56",
                "status": "modified"
            }
        ],
        "message": "Throw a meaningful NPE when the configurationManager is not set\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/branches/1.1@398559 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/891f3b69a66111de3245a325f1a8850f265b9b79",
        "patched_files": [
            "DeploymentContext.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "DeploymentContextTest.java"
        ]
    },
    "geronimo_452cd12": {
        "bug_id": "geronimo_452cd12",
        "commit": "https://github.com/apache/geronimo/commit/452cd127715598557e7a7b8764d6e4b2997d6be2",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/geronimo/blob/452cd127715598557e7a7b8764d6e4b2997d6be2/modules/geronimo-connector-builder/src/main/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-connector-builder/src/main/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java?ref=452cd127715598557e7a7b8764d6e4b2997d6be2",
                "deletions": 6,
                "filename": "modules/geronimo-connector-builder/src/main/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java",
                "patch": "@@ -421,12 +421,14 @@ TODO include admin objects (n) from JCAResource presumably\n \n             // Add map from messageListenerInterface to activationSpec class\n             Map<String,String> messageListenerToActivationSpecMap = new TreeMap<String,String>();\n-            for (MessagelistenerType messagelistenerType : resourceadapter.getInboundResourceadapter().getMessageadapter().getMessagelistenerArray()) {\n-                String messageListenerInterface = messagelistenerType.getMessagelistenerType().getStringValue().trim();\n-                ActivationspecType activationspec = messagelistenerType.getActivationspec();\n-                String activationSpecClassName = activationspec.getActivationspecClass().getStringValue().trim();\n-                messageListenerToActivationSpecMap.put(messageListenerInterface, activationSpecClassName);\n-                resourceAdapterGBeanData.setAttribute(\"messageListenerToActivationSpecMap\", messageListenerToActivationSpecMap);\n+            if (resourceadapter.isSetInboundResourceadapter() && resourceadapter.getInboundResourceadapter().isSetMessageadapter()) {\n+                for (MessagelistenerType messagelistenerType : resourceadapter.getInboundResourceadapter().getMessageadapter().getMessagelistenerArray()) {\n+                    String messageListenerInterface = messagelistenerType.getMessagelistenerType().getStringValue().trim();\n+                    ActivationspecType activationspec = messagelistenerType.getActivationspec();\n+                    String activationSpecClassName = activationspec.getActivationspecClass().getStringValue().trim();\n+                    messageListenerToActivationSpecMap.put(messageListenerInterface, activationSpecClassName);\n+                    resourceAdapterGBeanData.setAttribute(\"messageListenerToActivationSpecMap\", messageListenerToActivationSpecMap);\n+                }\n             }\n \n             resourceAdapterModuleData.setAttribute(\"resourceAdapterGBeanData\", resourceAdapterGBeanData);",
                "raw_url": "https://github.com/apache/geronimo/raw/452cd127715598557e7a7b8764d6e4b2997d6be2/modules/geronimo-connector-builder/src/main/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java",
                "sha": "3ffca88e472c47edf9a3bc3c1f77d0fccf197302",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE in ConnectorModuleBuilder. Need to guard against potentially non-existent elements...\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@518034 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/68ff3c6f7ef71263cff6cf35de23f24f5ddcd5f5",
        "patched_files": [
            "ConnectorModuleBuilder.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "ConnectorModuleBuilderTest.java"
        ]
    },
    "geronimo_5d33390": {
        "bug_id": "geronimo_5d33390",
        "commit": "https://github.com/apache/geronimo/commit/5d33390328acf360419e46239b6ee43b125a27ba",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/geronimo/blob/5d33390328acf360419e46239b6ee43b125a27ba/modules/j2ee/src/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/j2ee/src/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java?ref=5d33390328acf360419e46239b6ee43b125a27ba",
                "deletions": 5,
                "filename": "modules/j2ee/src/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java",
                "patch": "@@ -67,7 +67,7 @@\n import java.util.zip.ZipEntry;\n \n /**\n- * @version $Revision: 1.20 $ $Date: 2004/08/09 04:19:35 $\n+ * @version $Revision: 1.21 $ $Date: 2004/08/13 08:16:29 $\n  */\n public class EARConfigBuilder implements ConfigurationBuilder {\n     static final SchemaTypeLoader SCHEMA_TYPE_LOADER = XmlBeans.typeLoaderUnion(new SchemaTypeLoader[]{\n@@ -498,11 +498,13 @@ private ApplicationType addModules(URI configId, XmlObject plan, ApplicationType\n                     moduleLocations.add(uri.toString());\n                     connectorModules.add(currentModule);\n                 }\n-                moduleMap.put(currentModule.getName(), currentModule);\n                 // TODO remove test against null when application clients will be supported.\n-                if ( module.isSetAltDd() && null != currentModule ) {\n-                    URL altDDURL = appLocator.toURL(module.getAltDd().getStringValue());\n-                    currentModule.setAltSpecDD(altDDURL);\n+                if ( null != currentModule ) {\n+                    moduleMap.put(currentModule.getName(), currentModule);\n+                    if ( module.isSetAltDd() ) {\n+                        URL altDDURL = appLocator.toURL(module.getAltDd().getStringValue());\n+                        currentModule.setAltSpecDD(altDDURL);\n+                    }\n                 }\n             }\n             ",
                "raw_url": "https://github.com/apache/geronimo/raw/5d33390328acf360419e46239b6ee43b125a27ba/modules/j2ee/src/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java",
                "sha": "8f46be7a3f97f54a1d43fd12e039f6f9c0625635",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-286 detected by Toby Cabot.\n\nIf an EAR DD defines a client application module, a NullPointerException was raised. This is now fixed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@45781 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/a65e8e3b969bb9419b8f7c65d588d88cc9fd836e",
        "patched_files": [
            "EARConfigBuilder.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "EARConfigBuilderTest.java"
        ]
    },
    "geronimo_601e2f7": {
        "bug_id": "geronimo_601e2f7",
        "commit": "https://github.com/apache/geronimo/commit/601e2f78272a5dfd0cd432934d91f433b619d2fa",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/601e2f78272a5dfd0cd432934d91f433b619d2fa/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java?ref=601e2f78272a5dfd0cd432934d91f433b619d2fa",
                "deletions": 3,
                "filename": "plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java",
                "patch": "@@ -444,7 +444,7 @@ private ApplicationInfo getEarPlan(File planFile, JarFile earFile, ModuleIDBuild\n         // todo change module so you can extract the real module path back out.. then we can eliminate\n         // the moduleLocations and have addModules return the modules\n         String applicationName = null;\n-        if (application.getApplicationName() != null) {\n+        if (application!=null && application.getApplicationName() != null) {\n             applicationName = application.getApplicationName().trim();\n         } else if (earFile != null) {\n             applicationName = FileUtils.removeExtension(new File(earFile.getName()).getName(), \".ear\");\n@@ -458,14 +458,14 @@ private ApplicationInfo getEarPlan(File planFile, JarFile earFile, ModuleIDBuild\n                 earFile,\n                 application,\n                 gerApplication,\n-                application.toString()\n+                application==null ? null : application.toString()\n         );\n         try {\n             addModules(earFile, application, gerApplication, environment, applicationInfo, idBuilder);\n             if (applicationInfo.getModules().isEmpty()) {\n                 //if no application.xml and no modules detected, return null for stand-alone module processing\n                 return null;\n-            } else {\n+            } else if (application!=null){\n                 addModulesToDefaultPlan(application, applicationInfo.getModules());\n             }\n         } catch (Throwable e) {",
                "raw_url": "https://github.com/apache/geronimo/raw/601e2f78272a5dfd0cd432934d91f433b619d2fa/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/EARConfigBuilder.java",
                "sha": "744d86f6831e9a65ed29dd5a21654212e50102ad",
                "status": "modified"
            },
            {
                "additions": 135,
                "blob_url": "https://github.com/apache/geronimo/blob/601e2f78272a5dfd0cd432934d91f433b619d2fa/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/NamingBuilderCollection.java",
                "changes": 135,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/NamingBuilderCollection.java?ref=601e2f78272a5dfd0cd432934d91f433b619d2fa",
                "deletions": 0,
                "filename": "plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/NamingBuilderCollection.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -32,7 +33,17 @@\n import org.apache.geronimo.gbean.annotation.GBean;\n import org.apache.geronimo.gbean.annotation.ParamReference;\n import org.apache.geronimo.j2ee.j2eeobjectnames.NameFactory;\n+import org.apache.openejb.jee.DataSource;\n+import org.apache.openejb.jee.EjbLocalRef;\n+import org.apache.openejb.jee.EjbRef;\n+import org.apache.openejb.jee.EnvEntry;\n import org.apache.openejb.jee.JndiConsumer;\n+import org.apache.openejb.jee.MessageDestinationRef;\n+import org.apache.openejb.jee.PersistenceContextRef;\n+import org.apache.openejb.jee.PersistenceUnitRef;\n+import org.apache.openejb.jee.ResourceEnvRef;\n+import org.apache.openejb.jee.ResourceRef;\n+import org.apache.openejb.jee.ServiceRef;\n import org.apache.xmlbeans.QNameSet;\n import org.apache.xmlbeans.XmlObject;\n \n@@ -47,18 +58,35 @@ public NamingBuilderCollection(@ParamReference(name = \"NamingBuilders\", namingTy\n     }\n \n     public void buildEnvironment(JndiConsumer specDD, XmlObject plan, Environment environment) throws DeploymentException {\n+        if(specDD == null){\n+            // java ee 5 and 6 might not have spec DD, adding this to avoid the NPE.\n+            specDD = new JndiConsumerNonNull();\n+        }\n+        \n         for (NamingBuilder namingBuilder : getSortedBuilders()) {\n             namingBuilder.buildEnvironment(specDD, plan, environment);\n         }\n     }\n \n     public void initContext(JndiConsumer specDD, XmlObject plan, Module module) throws DeploymentException {\n+        \n+        if(specDD == null){\n+            // java ee 5 and 6 might not have spec DD, adding this to avoid the NPE.\n+            specDD = new JndiConsumerNonNull();\n+        }\n+        \n         for (NamingBuilder namingBuilder : getSortedBuilders()) {\n             namingBuilder.initContext(specDD, plan, module);\n         }\n     }\n \n     public void buildNaming(JndiConsumer specDD, XmlObject plan, Module module, Map<EARContext.Key, Object> sharedContext) throws DeploymentException {\n+        \n+        if(specDD == null){\n+            // java ee 5 and 6 might not have spec DD, adding this to avoid the NPE.\n+            specDD = new JndiConsumerNonNull();\n+        }\n+        \n         for (NamingBuilder namingBuilder : getSortedBuilders()) {\n             if (EARConfigBuilder.createPlanMode.get().booleanValue()) {\n                 try {\n@@ -78,6 +106,113 @@ public void buildNaming(JndiConsumer specDD, XmlObject plan, Module module, Map<\n         return list;        \n     }\n     \n+    private final class JndiConsumerNonNull implements JndiConsumer {\n+        @Override\n+        public String getJndiConsumerName() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Collection<EnvEntry> getEnvEntry() {\n+            return new ArrayList<EnvEntry>();\n+        }\n+\n+        @Override\n+        public Map<String, EnvEntry> getEnvEntryMap() {\n+            return new HashMap<String, EnvEntry>();\n+        }\n+\n+        @Override\n+        public Collection<EjbRef> getEjbRef() {\n+            return new ArrayList<EjbRef>();\n+        }\n+\n+        @Override\n+        public Map<String, EjbRef> getEjbRefMap() {\n+             return new HashMap<String, EjbRef>();\n+        }\n+\n+        @Override\n+        public Collection<EjbLocalRef> getEjbLocalRef() {\n+            return new ArrayList<EjbLocalRef>();\n+        }\n+\n+        @Override\n+        public Map<String, EjbLocalRef> getEjbLocalRefMap() {\n+            return new HashMap<String, EjbLocalRef>();\n+        }\n+\n+        @Override\n+        public Collection<ServiceRef> getServiceRef() {\n+            return new ArrayList<ServiceRef>();\n+        }\n+\n+        @Override\n+        public Map<String, ServiceRef> getServiceRefMap() {\n+            return new HashMap<String, ServiceRef>();\n+        }\n+\n+        @Override\n+        public Collection<ResourceRef> getResourceRef() {\n+            return new ArrayList<ResourceRef>();\n+        }\n+\n+        @Override\n+        public Map<String, ResourceRef> getResourceRefMap() {\n+            return new HashMap<String, ResourceRef>();\n+        }\n+\n+        @Override\n+        public Collection<ResourceEnvRef> getResourceEnvRef() {\n+            return new ArrayList<ResourceEnvRef>();\n+        }\n+\n+        @Override\n+        public Map<String, ResourceEnvRef> getResourceEnvRefMap() {\n+            return new HashMap<String, ResourceEnvRef>();\n+        }\n+\n+        @Override\n+        public Collection<MessageDestinationRef> getMessageDestinationRef() {\n+            return new ArrayList<MessageDestinationRef>();\n+        }\n+\n+        @Override\n+        public Map<String, MessageDestinationRef> getMessageDestinationRefMap() {\n+            return new HashMap<String, MessageDestinationRef>();\n+        }\n+\n+        @Override\n+        public Collection<PersistenceContextRef> getPersistenceContextRef() {\n+            return new ArrayList<PersistenceContextRef>();\n+        }\n+\n+        @Override\n+        public Map<String, PersistenceContextRef> getPersistenceContextRefMap() {\n+            return new HashMap<String, PersistenceContextRef>();\n+        }\n+\n+        @Override\n+        public Collection<PersistenceUnitRef> getPersistenceUnitRef() {\n+            return new ArrayList<PersistenceUnitRef>();\n+        }\n+\n+        @Override\n+        public Map<String, PersistenceUnitRef> getPersistenceUnitRefMap() {\n+            return new HashMap<String, PersistenceUnitRef>();\n+        }\n+\n+        @Override\n+        public Collection<DataSource> getDataSource() {\n+            return new ArrayList<DataSource>();\n+        }\n+\n+        @Override\n+        public Map<String, DataSource> getDataSourceMap() {\n+            return new HashMap<String, DataSource>();\n+        }\n+    }\n+\n     private static class NamingBuilderComparator implements Comparator<NamingBuilder> {\n         public int compare(NamingBuilder o1, NamingBuilder o2) {\n             return o1.getPriority() - o2.getPriority();",
                "raw_url": "https://github.com/apache/geronimo/raw/601e2f78272a5dfd0cd432934d91f433b619d2fa/plugins/j2ee/geronimo-j2ee-builder/src/main/java/org/apache/geronimo/j2ee/deployment/NamingBuilderCollection.java",
                "sha": "6d2b11cf57087919584823f587c56fdebea44fe9",
                "status": "modified"
            }
        ],
        "message": "to avoid NPE when building plugin with ext-module tag in DD.\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@1103356 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/16534cb495c2ed2c421eb955157018a95977d7f2",
        "patched_files": [
            "NamingBuilderCollection.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "NamingBuilderCollectionTest.java"
        ]
    },
    "geronimo_7441bbd": {
        "bug_id": "geronimo_7441bbd",
        "commit": "https://github.com/apache/geronimo/commit/7441bbda0b665524b15e8259e071132f3ee079ce",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/geronimo/blob/7441bbda0b665524b15e8259e071132f3ee079ce/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java?ref=7441bbda0b665524b15e8259e071132f3ee079ce",
                "deletions": 0,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "patch": "@@ -309,6 +309,11 @@ public void rollback(Xid xid, Object logMark) throws LogException {\n     }\n \n     public Collection recover(XidFactory xidFactory) throws LogException {\n+        log.debug(\"Initiating transaction manager recovery\");\n+        Map recovered = new HashMap();\n+        ReplayListener replayListener = new GeronimoReplayListener(xidFactory, recovered);\n+        logger.replayActiveTx(replayListener);\n+        log.debug(\"In doubt transactions recovered from log\");\n         return recovered.values();\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/7441bbda0b665524b15e8259e071132f3ee079ce/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "sha": "372894fd39797c6b72d1d38bab2c6e1b2c8a3233",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-1599 HOWLLog throws NPE because XidFactory is missing\n\nWrongly rolled-back the implementation of recover.\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@376288 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
        "patched_files": [
            "HOWLLog.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "HOWLLogTest.java"
        ]
    },
    "geronimo_7ad6c23": {
        "bug_id": "geronimo_7ad6c23",
        "commit": "https://github.com/apache/geronimo/commit/7ad6c23197760c8972a0bbf5c83c65a52c943620",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/geronimo/blob/7ad6c23197760c8972a0bbf5c83c65a52c943620/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/ContextManager.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/ContextManager.java?ref=7ad6c23197760c8972a0bbf5c83c65a52c943620",
                "deletions": 15,
                "filename": "framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/ContextManager.java",
                "patch": "@@ -24,6 +24,7 @@\n import java.security.NoSuchAlgorithmException;\n import java.security.Principal;\n import java.security.PrivilegedAction;\n+import java.security.ProviderException;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.IdentityHashMap;\n@@ -260,8 +261,13 @@ public Object run() {\n             context.principal = principals.iterator().next();\n         }\n         Long id = nextSubjectId++;\n-        context.id = new SubjectId(id, hash(id));\n-\n+        try {\n+            context.id = new SubjectId(id, hash(id));\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new ProviderException(\"No such algorithm: \" + algorithm + \".  This can be caused by a misconfigured java.ext.dirs, JAVA_HOME or JRE_HOME environment variable\");\n+        } catch (InvalidKeyException e) {\n+            throw new ProviderException(\"Invalid key: \" + key.toString());\n+        }\n         subjectIds.put(context.id, subject);\n         subjectContexts.put(subject, context);\n \n@@ -333,8 +339,10 @@ public static void setAlgorithm(String algorithm) {\n             mac.init(key);\n         } catch (NoSuchAlgorithmException e) {\n             assert false : \"Should never have reached here\";\n+            throw new ProviderException(\"No such algorithm: \" + algorithm + \".  This can be caused by a misconfigured java.ext.dirs, JAVA_HOME or JRE_HOME environment variable.\");\n         } catch (InvalidKeyException e) {\n             assert false : \"Should never have reached here\";\n+            throw new ProviderException(\"Invalid key: \" + key.toString());\n         }\n     }\n \n@@ -354,27 +362,19 @@ public static void setPassword(String password) {\n         key = new SecretKeySpec(password.getBytes(), algorithm);\n     }\n \n-    private static byte[] hash(Long id) {\n+    private static byte[] hash(Long id) throws NoSuchAlgorithmException, InvalidKeyException {\n         long n = id;\n         byte[] bytes = new byte[8];\n         for (int i = 7; i >= 0; i--) {\n             bytes[i] = (byte) (n);\n             n >>>= 8;\n         }\n \n-        try {\n-            Mac mac = Mac.getInstance(algorithm);\n-            mac.init(key);\n-            mac.update(bytes);\n+        Mac mac = Mac.getInstance(algorithm);\n+        mac.init(key);\n+        mac.update(bytes);\n \n-            return mac.doFinal();\n-        } catch (NoSuchAlgorithmException e) {\n-            //shouldn't happen\n-        } catch (InvalidKeyException e) {\n-            //shouldn't happen\n-        }\n-        assert false : \"Should never have reached here\";\n-        return null;\n+        return mac.doFinal();\n     }\n \n     private static class Context {",
                "raw_url": "https://github.com/apache/geronimo/raw/7ad6c23197760c8972a0bbf5c83c65a52c943620/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/ContextManager.java",
                "sha": "1466869b4e4cdc680501cfffeed206ed845db01b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/7ad6c23197760c8972a0bbf5c83c65a52c943620/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/SubjectId.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/SubjectId.java?ref=7ad6c23197760c8972a0bbf5c83c65a52c943620",
                "deletions": 0,
                "filename": "framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/SubjectId.java",
                "patch": "@@ -30,6 +30,9 @@\n     private transient String name;\n \n     public SubjectId(Long subjectId, byte[] hash) {\n+        if (subjectId == null) throw new IllegalArgumentException(\"subjectId cannot be null\");\n+        if (hash == null) throw new IllegalArgumentException(\"hash cannot be null\");\n+\n         this.subjectId = subjectId;\n         this.hash = hash;\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/7ad6c23197760c8972a0bbf5c83c65a52c943620/framework/modules/geronimo-security/src/main/java/org/apache/geronimo/security/SubjectId.java",
                "sha": "9004545e94497d3bafd1f687afdd092e5ee67c59",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-3913 - NPE in org.apache.geronimo.security.SubjectId.hashCode() caused by incorrect JAVA_HOME or JRE_HOME.  Patch from Toby Cabot.\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@643431 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/3d2dc841b74f7daad25f533736bed861a625651b",
        "patched_files": [
            "ContextManager.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "ContextManagerTest.java"
        ]
    },
    "geronimo_7e50e74": {
        "bug_id": "geronimo_7e50e74",
        "commit": "https://github.com/apache/geronimo/commit/7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConfigPropertySetting.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConfigPropertySetting.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "deletions": 7,
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConfigPropertySetting.java",
                "patch": "@@ -36,9 +36,9 @@ public ConfigPropertySetting() {\n         super(null);\n     }\n \n-    public ConfigPropertySetting(DDBean configProperty, GerConfigPropertySettingType property) {\n+    public ConfigPropertySetting(DDBean configProperty, GerConfigPropertySettingType property, boolean setDefault) {\n         super(null);\n-        configure(configProperty, property);\n+        configure(configProperty, property, setDefault);\n     }\n \n     protected GerConfigPropertySettingType getPropertySetting() {\n@@ -49,14 +49,18 @@ DDBean getDDBean() {\n         return configProperty;\n     }\n \n-    void configure(DDBean configProperty, GerConfigPropertySettingType property) {\n+    void configure(DDBean configProperty, GerConfigPropertySettingType property, boolean setDefault) {\n         this.configProperty = configProperty;\n         setXmlObject(property);\n         final String name = configProperty.getText(\"config-property-name\")[0];\n         getPropertySetting().setName(name);\n-        String[] test = configProperty.getText(\"config-property-value\");\n-        if(test != null && test.length == 1) {\n-            getPropertySetting().setStringValue(test[0]);\n+        if(setDefault) {\n+            String[] test = configProperty.getText(\"config-property-value\");\n+            if(test != null && test.length == 1) {\n+                getPropertySetting().setStringValue(test[0]);\n+            } else {\n+                getPropertySetting().setStringValue(null);\n+            }\n         }\n     }\n \n@@ -74,7 +78,7 @@ void setName(String name) {\n     }\n \n     public String getValue() {\n-        return getPropertySetting().getStringValue();\n+        return getPropertySetting().isNil() ? null : getPropertySetting().getStringValue();\n     }\n \n     public void setValue(String value) {",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConfigPropertySetting.java",
                "sha": "d5a17a46ef586cfab26d4113dccd3a3e8e2d59e3",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinition.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinition.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "deletions": 1,
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinition.java",
                "patch": "@@ -19,13 +19,22 @@\n import java.util.Set;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.Map;\n+import java.util.HashMap;\n import javax.enterprise.deploy.model.DDBean;\n import org.apache.geronimo.deployment.plugin.XmlBeanSupport;\n import org.apache.geronimo.xbeans.geronimo.GerConnectionDefinitionType;\n import org.apache.geronimo.xbeans.geronimo.GerConnectiondefinitionInstanceType;\n import org.apache.xmlbeans.SchemaTypeLoader;\n \n /**\n+ * Represents /connector/resourceadapter/outbound-resourceadapter/connection-definition\n+ * in the Geronimo Connector deployment plan.  A Geronimo connection definition\n+ * corresponds to a ra.xml connection definition (though there may be several\n+ * Geronimo CDs for each ra.xml CD so this cannot be a DConfigBean [which would\n+ * require a 1:1 mapping]).  Each Geronimo connection definition may have one\n+ * or more instances with different config property settings, etc.\n+ *\n  * @version $Rev$ $Date$\n  */\n public class ConnectionDefinition extends XmlBeanSupport {\n@@ -48,11 +57,26 @@ protected GerConnectionDefinitionType getConnectionDefinition() {\n     void configure(DDBean resourceAdapter, GerConnectionDefinitionType definition) {\n         this.resourceAdapter = resourceAdapter;\n         setXmlObject(definition);\n-        //todo: initialize connectiondefinition-instance from definition\n+        //todo: handle unmatched interfaces below\n+        instances = new ConnectionDefinitionInstance[definition.getConnectiondefinitionInstanceArray().length];\n+        DDBean[] beans = resourceAdapter.getChildBean(\"outbound-resourceadapter/connection-definition\");\n+        DDBean match = null;\n+        for (int i = 0; i < beans.length; i++) {\n+            DDBean bean = beans[i];\n+            if(bean.getText(\"connectionfactory-interface\")[0].equals(definition.getConnectionfactoryInterface())) {\n+                match = bean;\n+                break;\n+            }\n+        }\n+        for (int i = 0; i < instances.length; i++) {\n+            GerConnectiondefinitionInstanceType gerInstance = definition.getConnectiondefinitionInstanceArray()[i];\n+            instances[i] = new ConnectionDefinitionInstance(match, gerInstance);\n+        }\n     }\n \n     // ----------------------- JavaBean Properties for connection-definition ----------------------\n \n+    //todo: instead of String, make this an Enum type aware of the interfaces available in the J2EE DD\n     public String getConnectionFactoryInterface() {\n         return getConnectionDefinition().getConnectionfactoryInterface();\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinition.java",
                "sha": "f2b4e86effdb0b404eb409e4a084344d44b26cca",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinitionInstance.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinitionInstance.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "deletions": 5,
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinitionInstance.java",
                "patch": "@@ -73,9 +73,33 @@ protected GerConnectiondefinitionInstanceType getConnectionInstance() {\n         return (GerConnectiondefinitionInstanceType) getXmlObject();\n     }\n \n+    void clearNullSettings() {\n+        List list = new ArrayList();\n+        for (int i = 0; i < settings.length; i++) {\n+            ConfigPropertySetting setting = settings[i];\n+            if(setting.getValue() != null) {\n+                list.add(setting);\n+            }\n+        }\n+        settings = (ConfigPropertySetting[]) list.toArray(new ConfigPropertySetting[list.size()]);\n+        GerConnectiondefinitionInstanceType instance = getConnectionInstance();\n+        for (int i = instance.getConfigPropertySettingArray().length-1; i>=0; --i) {\n+            GerConfigPropertySettingType type = instance.getConfigPropertySettingArray(i);\n+            if(type.isNil() || type.getStringValue() == null) {\n+                instance.removeConfigPropertySetting(i);\n+            }\n+        }\n+    }\n+\n+    void reconfigure() {\n+        configure(connectionDefinition, getConnectionInstance());\n+    }\n+\n     void configure(DDBean connectionDefinition, GerConnectiondefinitionInstanceType definition) {\n+        ConfigPropertySetting[] old = null;\n         if(this.connectionDefinition != null) {\n             this.connectionDefinition.removeXpathListener(\"config-property\", xpathListener);\n+            old = settings;\n         }\n         this.connectionDefinition = connectionDefinition;\n         setXmlObject(definition);\n@@ -93,7 +117,7 @@ void configure(DDBean connectionDefinition, GerConnectiondefinitionInstanceType\n             GerConfigPropertySettingType setting = previous[i];\n             DDBean ddBean = (DDBean) byName.remove(setting.getName());\n             if(ddBean != null) {\n-                list.add(new ConfigPropertySetting(ddBean, setting));\n+                list.add(new ConfigPropertySetting(ddBean, setting, false));\n             } else {\n                 System.out.println(\"Ignoring connectiondefinition-instance/config-setting \"+setting.getName()+\" (no matching config-property in J2EE DD)\");\n                 //todo: delete it from the XMLBeans tree\n@@ -102,16 +126,19 @@ void configure(DDBean connectionDefinition, GerConnectiondefinitionInstanceType\n         for (Iterator it = byName.keySet().iterator(); it.hasNext();) {\n             String name = (String) it.next();\n             DDBean bean = (DDBean) byName.get(name);\n-            list.add(new ConfigPropertySetting(bean, getConnectionInstance().addNewConfigPropertySetting()));\n+            list.add(new ConfigPropertySetting(bean, getConnectionInstance().addNewConfigPropertySetting(), true));\n         }\n         settings = (ConfigPropertySetting[]) list.toArray(new ConfigPropertySetting[list.size()]);\n+        if(old != null) {\n+            pcs.firePropertyChange(\"configPropertySetting\", old, settings);\n+        }\n         if(connectionDefinition != null) {\n             connectionDefinition.addXpathListener(\"config-property\", xpathListener);\n         }\n         if(connectionDefinition != null) {\n             DDBean parent = connectionDefinition.getChildBean(\"..\")[0];\n-            ConnectionManager old = manager;\n-            if(old == null) {\n+            ConnectionManager oldMgr = manager;\n+            if(oldMgr == null) {\n                 if(definition.getConnectionmanager() != null) {\n                     manager = new ConnectionManager(parent, definition.getConnectionmanager());\n                 } else {\n@@ -124,7 +151,7 @@ void configure(DDBean connectionDefinition, GerConnectiondefinitionInstanceType\n                     manager.configure(parent, definition.addNewConnectionmanager());\n                 }\n             }\n-            pcs.firePropertyChange(\"connectionManager\", old, manager);\n+            pcs.firePropertyChange(\"connectionManager\", oldMgr, manager);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectionDefinitionInstance.java",
                "sha": "14544998c118946295235b2efcae9a34afb86b33",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBRoot.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBRoot.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "deletions": 0,
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBRoot.java",
                "patch": "@@ -18,16 +18,28 @@\n \n import java.io.InputStream;\n import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.Arrays;\n import javax.enterprise.deploy.model.DDBeanRoot;\n import javax.enterprise.deploy.model.DDBean;\n import javax.enterprise.deploy.spi.DConfigBean;\n import javax.enterprise.deploy.spi.exceptions.ConfigurationException;\n import org.apache.geronimo.deployment.plugin.DConfigBeanRootSupport;\n import org.apache.geronimo.xbeans.geronimo.GerConnectorDocument;\n+import org.apache.geronimo.xbeans.geronimo.GerAdminobjectInstanceType;\n+import org.apache.geronimo.xbeans.geronimo.GerConnectiondefinitionInstanceType;\n+import org.apache.geronimo.xbeans.geronimo.GerResourceadapterInstanceType;\n+import org.apache.geronimo.xbeans.geronimo.GerConfigPropertySettingType;\n import org.apache.xmlbeans.XmlObject;\n import org.apache.xmlbeans.XmlException;\n import org.apache.xmlbeans.SchemaTypeLoader;\n import org.apache.xmlbeans.XmlBeans;\n+import org.apache.xmlbeans.XmlCursor;\n \n /**\n  * Represents \"/\" in a Geronimo Connector deployment plan (geronimo-ra.xml).\n@@ -96,4 +108,59 @@ public DConfigBean getDConfigBean(DDBean bean) throws ConfigurationException {\n     protected SchemaTypeLoader getSchemaTypeLoader() {\n         return SCHEMA_TYPE_LOADER;\n     }\n+\n+    /**\n+     * When loaded, reset the cached \"connector\" child\n+     */\n+    public void fromXML(InputStream inputStream) throws XmlException, IOException {\n+        DDBean ddb = connector.getDDBean();\n+        super.fromXML(inputStream);\n+        if(getConnectorDocument().getConnector() != null) {\n+            connector = new ConnectorDCB(ddb, getConnectorDocument().getConnector());\n+        } else {\n+            connector = new ConnectorDCB(ddb, getConnectorDocument().addNewConnector());\n+        }\n+        //todo: fire some kind of notification for the DDBeans to catch?\n+    }\n+\n+    /**\n+     * A little trickery -- on a save event, temporarily remove any config-property-setting\n+     * elements with a null value, and then immediately replace them again.  This is because\n+     * we don't want to write them out as null, but we also want to keep the objects in\n+     * sync 1:1 with the config params declared in the J2EE deployment descriptor.\n+     */\n+    public void toXML(OutputStream outputStream) throws IOException {\n+        List parents = new ArrayList();\n+        clearNulls(parents);\n+        try {\n+            super.toXML(outputStream);\n+        } finally {\n+            for (int i = 0; i < parents.size(); i++) {\n+                Object parent = parents.get(i);\n+                if(parent instanceof ConnectionDefinitionInstance) {\n+                    ConnectionDefinitionInstance instance = (ConnectionDefinitionInstance) parent;\n+                    instance.reconfigure();\n+                } //todo: else if instanceof ResourceAdapterInstance, else if instanceof AdminObjectInstance\n+            }\n+        }\n+    }\n+\n+    private void clearNulls(List parents) {\n+        ResourceAdapter[] adapters = connector.getResourceAdapter();\n+        for (int i = 0; i < adapters.length; i++) {\n+            ResourceAdapter adapter = adapters[i];\n+            // todo: check resource adapter instances\n+            ConnectionDefinition defs[] = adapter.getConnectionDefinition();\n+            for (int j = 0; j < defs.length; j++) {\n+                ConnectionDefinition def = defs[j];\n+                ConnectionDefinitionInstance instances[] = def.getConnectionInstances();\n+                for (int k = 0; k < instances.length; k++) {\n+                    ConnectionDefinitionInstance instance = instances[k];\n+                    parents.add(instance);\n+                    instance.clearNullSettings();\n+                }\n+            }\n+        }\n+        //todo: check admin object instances\n+    }\n }",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBRoot.java",
                "sha": "bc04759b8b33dc7a9032c9989a4f40130681b885",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectorDCB.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectorDCB.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "deletions": 1,
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectorDCB.java",
                "patch": "@@ -47,7 +47,6 @@ public ConnectorDCB(DDBean connectorDDBean, final GerConnectorType connector) {\n         }\n         //todo: do something if resourceAdapterDDBean is null\n         loadExistingData(connector);\n-        //todo: load defaults from J2EE DD /connector/resourceadapter\n \n         // Make sure we're told if /connector/resourceadapter is replaced!\n         connectorDDBean.addXpathListener(\"resourceadapter\", new XpathListener() {\n@@ -257,6 +256,8 @@ public void setDependency(int index, Dependency dep) {\n \n     // ----------------------- End of JavaBean Properties ----------------------\n \n+    \n+\n     protected SchemaTypeLoader getSchemaTypeLoader() {\n         return Connector15DCBRoot.SCHEMA_TYPE_LOADER;\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ConnectorDCB.java",
                "sha": "acebbfa7a67ce806d38fc7ef76f5a6ee907f6207",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ResourceAdapter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ResourceAdapter.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "deletions": 2,
                "filename": "modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ResourceAdapter.java",
                "patch": "@@ -27,7 +27,9 @@\n import org.apache.xmlbeans.SchemaTypeLoader;\n \n /**\n- * Represents /connector/resourceadapter in the Geronimo Connector deployment plan\n+ * Represents /connector/resourceadapter in the Geronimo Connector deployment plan.\n+ * Note: is not a DConfigBean, because there may be more than one ResourceAdapter\n+ * in the Geronimo plan per ResourceAdapter in the J2EE deployment descriptor.\n  *\n  * @version $Rev$ $Date$\n  */\n@@ -51,7 +53,6 @@ protected GerResourceadapterType getResourceAdapter() {\n     void configure(DDBean resourceAdapter, GerResourceadapterType ra) {\n         this.resourceAdapter = resourceAdapter;\n         setXmlObject(ra);\n-        //todo: configure myself from the ra\n         if(ra.isSetOutboundResourceadapter()) {\n             DDBean[] test = resourceAdapter.getChildBean(\"outbound-resourceadapter\");\n             if(test != null && test.length > 0) {",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/java/org/apache/geronimo/connector/deployment/jsr88/ResourceAdapter.java",
                "sha": "ab1e65345f3555669923afff38bc0fa8423cf2fd",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/test-resources/plan-with-nulls.xml",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/test-resources/plan-with-nulls.xml?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "deletions": 0,
                "filename": "modules/connector-builder/src/test-resources/plan-with-nulls.xml",
                "patch": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<connector configId=\"user/database-pool-TestPool/1/car\" xmlns=\"http://geronimo.apache.org/xml/ns/j2ee/connector-1.0\">\n+    <dep:dependency xmlns:dep=\"http://geronimo.apache.org/xml/ns/deployment-1.0\">\n+        <dep:uri>org.apache.derby/derbyclient/10.1.1.0/jar</dep:uri>\n+    </dep:dependency>\n+    <resourceadapter>\n+        <outbound-resourceadapter>\n+            <connection-definition>\n+                <connectionfactory-interface>javax.sql.DataSource</connectionfactory-interface>\n+                <connectiondefinition-instance>\n+                    <name>TestPool</name>\n+<!--\n+                    <config-property-setting name=\"Password\" xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/>\n+-->\n+                    <config-property-setting name=\"CommitBeforeAutocommit\">false</config-property-setting>\n+                    <config-property-setting name=\"Driver\">org.apache.derby.jdbc.EmbeddedDriver</config-property-setting>\n+                    <config-property-setting name=\"ExceptionSorterClass\">org.tranql.connector.AllExceptionsAreFatalSorter</config-property-setting>\n+<!--\n+                    <config-property-setting name=\"UserName\" xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/>\n+-->\n+                    <config-property-setting name=\"ConnectionURL\">jdbc:derby:TestDatabase;create=true</config-property-setting>\n+                    <connectionmanager>\n+                        <local-transaction/>\n+                        <single-pool>\n+                            <match-one/>\n+                        </single-pool>\n+                    </connectionmanager>\n+                </connectiondefinition-instance>\n+            </connection-definition>\n+        </outbound-resourceadapter>\n+    </resourceadapter>\n+</connector>",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/test-resources/plan-with-nulls.xml",
                "sha": "dd8bac283cbd2c635228347a8974f2b89c78ac64",
                "status": "added"
            },
            {
                "additions": 126,
                "blob_url": "https://github.com/apache/geronimo/blob/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/test/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBTest.java",
                "changes": 137,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector-builder/src/test/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBTest.java?ref=7e50e74aa287b2eb6d27ed89d66ef84baed03f28",
                "deletions": 11,
                "filename": "modules/connector-builder/src/test/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBTest.java",
                "patch": "@@ -16,14 +16,21 @@\n  */\n package org.apache.geronimo.connector.deployment.jsr88;\n \n-import java.net.URL;\n-import java.util.Set;\n-import java.util.HashSet;\n-import java.util.Collections;\n-import javax.enterprise.deploy.shared.ModuleType;\n-import javax.enterprise.deploy.model.DDBeanRoot;\n import junit.framework.TestCase;\n+import org.apache.geronimo.connector.deployment.RARConfiguration;\n import org.apache.geronimo.deployment.tools.loader.ConnectorDeployable;\n+import org.apache.geronimo.xbeans.geronimo.GerConnectorDocument;\n+import org.apache.geronimo.xbeans.geronimo.GerConfigPropertySettingType;\n+\n+import javax.enterprise.deploy.model.DDBeanRoot;\n+import javax.enterprise.deploy.shared.ModuleType;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n \n /**\n  * @version $Rev$ $Date$\n@@ -105,19 +112,19 @@ public void testCreateDatabase() throws Exception {\n         for (int i = 0; i < 6; i++) {\n             ConfigPropertySetting setting = instance.getConfigPropertySetting(i);\n             if(setting.getName().equals(\"Driver\")) {\n-                assertEquals(\"\", setting.getValue());\n+                assertNull(setting.getValue());\n                 setting.setValue(\"org.postgresql.Driver\");\n                 ++found;\n             } else if(setting.getName().equals(\"ConnectionURL\")) {\n-                assertEquals(\"\", setting.getValue());\n+                assertNull(setting.getValue());\n                 setting.setValue(\"jdbc:postgresql://localhost/TestDatabase\");\n                 ++found;\n             } else if(setting.getName().equals(\"UserName\")) {\n-                assertEquals(\"\", setting.getValue());\n+                assertNull(setting.getValue());\n                 setting.setValue(\"dbuser\");\n                 ++found;\n             } else if(setting.getName().equals(\"Password\")) {\n-                assertEquals(\"\", setting.getValue());\n+                assertNull(setting.getValue());\n                 setting.setValue(\"dbpass\");\n                 ++found;\n             } else {\n@@ -150,7 +157,115 @@ public void testCreateDatabase() throws Exception {\n         pool.setMaxSize(new Integer(30));\n         pool.setBlockingTimeoutMillis(new Integer(5000));\n         //todo: Look at the XmlBeans tree and make sure the right stuff is in there\n-        System.out.println(dcbRoot.getConnectorDocument());\n+//        System.out.println(dcbRoot.getConnectorDocument());\n+    }\n+\n+    public void testWriteWithNulls() throws Exception {\n+        InputStream in = classLoader.getResource(\"plan-with-nulls.xml\").openStream();\n+\n+        // Create and test the DDBeanRoot\n+        URL resource = classLoader.getResource(\"database.rar\");\n+        assertNotNull(resource);\n+        ConnectorDeployable deployable = new ConnectorDeployable(resource);\n+        assertEquals(ModuleType.RAR, deployable.getType());\n+        DDBeanRoot root = deployable.getDDBeanRoot();\n+        assertNotNull(root);\n+        assertEquals(ModuleType.RAR, root.getType());\n+        assertEquals(deployable, root.getDeployableObject());\n+        // Create the DConfigBeanRoot\n+        Connector15DCBRoot dcbRoot = new Connector15DCBRoot(root);\n+        RARConfiguration configuration = new RARConfiguration(deployable, dcbRoot);\n+        configuration.restore(in);\n+        // Try the /connector element\n+        ConnectorDCB connector = (ConnectorDCB) dcbRoot.getDConfigBean(root.getChildBean(dcbRoot.getXpaths()[0])[0]);\n+        assertNotNull(connector);\n+        // Try the /connector/resourceadapter element\n+        assertNotNull(connector.getResourceAdapter());\n+        assertEquals(1, connector.getResourceAdapter().length);\n+        ResourceAdapter adapter = connector.getResourceAdapter()[0];\n+        assertNotNull(adapter);\n+        // Try the /connector/resourceadapter/outbound-resourceadapter/connection-definition element\n+        assertNotNull(adapter.getConnectionDefinition());\n+        assertEquals(1, adapter.getConnectionDefinition().length);\n+        ConnectionDefinition definition = adapter.getConnectionDefinition(0);\n+        // Try the .../connection-definition/connectiondefinition-instance elements\n+        assertNotNull(definition.getConnectionInstances());\n+        assertEquals(1, definition.getConnectionInstances().length);\n+        ConnectionDefinitionInstance instance = definition.getConnectionInstances()[0];\n+        // Try the .../connection-definition/connectiondefinition-instance/config-property-setting elements\n+        assertNotNull(instance.getConfigPropertySetting());\n+        assertEquals(6, instance.getConfigPropertySetting().length);\n+        int nullCount = 0;\n+        for (int i = 0; i < 6; i++) {\n+            if(instance.getConfigPropertySetting(i).getValue() == null) {\n+                ++nullCount;\n+            } else if(instance.getConfigPropertySetting(i).getValue().equals(\"\")) {\n+                instance.getConfigPropertySetting()[i].setValue(null);\n+                ++nullCount;\n+            }\n+        }\n+        // Read the generated XML and count config property setting elements (should be 4)\n+        assertEquals(2, nullCount);\n+        ByteArrayOutputStream pout = new ByteArrayOutputStream();\n+        dcbRoot.toXML(pout);\n+        pout.close();\n+        ByteArrayInputStream pin = new ByteArrayInputStream(pout.toByteArray());\n+        GerConnectorDocument doc = GerConnectorDocument.Factory.parse(pin);\n+        pin.close();\n+        GerConfigPropertySettingType[] settings = doc.getConnector().getResourceadapterArray(0).\n+                getOutboundResourceadapter().getConnectionDefinitionArray(0).\n+                getConnectiondefinitionInstanceArray(0).getConfigPropertySettingArray();\n+        assertEquals(4, settings.length);\n+        for (int i = 0; i < settings.length; i++) {\n+            GerConfigPropertySettingType setting = settings[i];\n+            if(setting.getName().equals(\"CommitBeforeAutocommit\")) {\n+                assertEquals(\"false\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"Driver\")) {\n+                assertEquals(\"org.apache.derby.jdbc.EmbeddedDriver\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"ExceptionSorterClass\")) {\n+                assertEquals(\"org.tranql.connector.AllExceptionsAreFatalSorter\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"ConnectionURL\")) {\n+                assertEquals(\"jdbc:derby:TestDatabase;create=true\", setting.getStringValue());\n+            } else fail(\"Unknown connection setting '\"+setting.getName()+\"'\");\n+        }\n+        // Make sure the original objects didn't lose track of the null config settings\n+        assertEquals(6, instance.getConfigPropertySetting().length);\n+        // Now set them to blank\n+        nullCount = 0;\n+        for (int i = 0; i < 6; i++) {\n+            if(instance.getConfigPropertySetting()[i].getValue() == null) {\n+                instance.getConfigPropertySetting()[i].setValue(\"\");\n+                ++nullCount;\n+            }\n+        }\n+        assertEquals(2, nullCount);\n+        // Now make sure we write out with 6\n+        pout = new ByteArrayOutputStream();\n+        dcbRoot.toXML(pout);\n+        pout.close();\n+        pin = new ByteArrayInputStream(pout.toByteArray());\n+        doc = GerConnectorDocument.Factory.parse(pin);\n+        pin.close();\n+        settings = doc.getConnector().getResourceadapterArray(0).\n+                getOutboundResourceadapter().getConnectionDefinitionArray(0).\n+                getConnectiondefinitionInstanceArray(0).getConfigPropertySettingArray();\n+        assertEquals(6, settings.length);\n+        for (int i = 0; i < settings.length; i++) {\n+            GerConfigPropertySettingType setting = settings[i];\n+            if(setting.getName().equals(\"UserName\")) {\n+                assertEquals(\"\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"Password\")) {\n+                assertEquals(\"\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"CommitBeforeAutocommit\")) {\n+                assertEquals(\"false\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"Driver\")) {\n+                assertEquals(\"org.apache.derby.jdbc.EmbeddedDriver\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"ExceptionSorterClass\")) {\n+                assertEquals(\"org.tranql.connector.AllExceptionsAreFatalSorter\", setting.getStringValue());\n+            } else if(setting.getName().equals(\"ConnectionURL\")) {\n+                assertEquals(\"jdbc:derby:TestDatabase;create=true\", setting.getStringValue());\n+            } else fail(\"Unknown connection setting '\"+setting.getName()+\"'\");\n+        }\n     }\n \n     protected void setUp() throws Exception {",
                "raw_url": "https://github.com/apache/geronimo/raw/7e50e74aa287b2eb6d27ed89d66ef84baed03f28/modules/connector-builder/src/test/org/apache/geronimo/connector/deployment/jsr88/Connector15DCBTest.java",
                "sha": "3000c7fc24dae30bf51525215ae47ec1feda23bd",
                "status": "modified"
            }
        ],
        "message": "Fixes to JSR-88 DConfigBeans for connectors (and thus DB pool portlet):\n - Don't write out config settings with a value of \"null\" (as opposed to\n   the current behavior of writing with \"nil=true\" which blows up)\n   GERONIMO-1382\n - Add test for this, which also involves being able to read a Geronimo\n   deployment plan into the DConfigBeans successfully (GERONIMO-1383)\n - Add some missing JavaDoc headers\nFix for DB pool portlet so that it doesn't NPE on user or password of null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/branches/1.0@357484 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/78fdd819c9072f10e0a75d5c2a558270f2a593a1",
        "patched_files": [
            "ConnectionDefinition.java",
            "ResourceAdapter.java",
            "plan-with-nulls.xml",
            "Connector15DCBRoot.java",
            "ConfigPropertySetting.java",
            "ConnectionDefinitionInstance.java",
            "ConnectorDCB.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "Connector15DCBTest.java"
        ]
    },
    "geronimo_883ad6d": {
        "bug_id": "geronimo_883ad6d",
        "commit": "https://github.com/apache/geronimo/commit/883ad6d06eeb30a03b3ae5f3adb65b6f695d4461",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/geronimo/blob/883ad6d06eeb30a03b3ae5f3adb65b6f695d4461/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/binding/GBeanBinding.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/binding/GBeanBinding.java?ref=883ad6d06eeb30a03b3ae5f3adb65b6f695d4461",
                "deletions": 5,
                "filename": "modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/binding/GBeanBinding.java",
                "patch": "@@ -156,12 +156,13 @@ private synchronized void addBinding(AbstractName abstractName, Object value) th\n      * @param abstractName the abstract name of the gbean to unbind\n      */\n     protected synchronized void removeBinding(AbstractName abstractName) {\n-        if (first(bindings).getKey().equals(abstractName)) {\n+        Map.Entry entry = first(bindings);\n+        if (entry != null && entry.getKey().equals(abstractName)) {\n             Object oldValue = bindings.remove(abstractName);\n-            Map.Entry newEntry = first(bindings);\n-            if (newEntry != null) {\n-                Object newAbstractName = newEntry.getValue();\n-                Object newValue = newEntry.getValue();\n+            entry = first(bindings);\n+            if (entry != null) {\n+                Object newAbstractName = entry.getValue();\n+                Object newValue = entry.getValue();\n                 try {\n                     context.rebind(name, newValue);\n                 } catch (NamingException e) {",
                "raw_url": "https://github.com/apache/geronimo/raw/883ad6d06eeb30a03b3ae5f3adb65b6f695d4461/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/binding/GBeanBinding.java",
                "sha": "917472d9ca8f2c9abbe02f3222f6b7e9dcb7e75d",
                "status": "modified"
            }
        ],
        "message": "prevent NPE if the hashmap is empty\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@488106 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/a5ee0360bb71b04ee874899bf48b4608ac002977",
        "patched_files": [
            "GBeanBinding.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "GBeanBindingTest.java"
        ]
    },
    "geronimo_8a541eb": {
        "bug_id": "geronimo_8a541eb",
        "commit": "https://github.com/apache/geronimo/commit/8a541eb24c8a750b897fd6d29b9622e7081b1e53",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/8a541eb24c8a750b897fd6d29b9622e7081b1e53/plugins/jetty8/geronimo-jetty8-builder/src/main/java/org/apache/geronimo/jetty8/deployment/JettyModuleBuilder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/jetty8/geronimo-jetty8-builder/src/main/java/org/apache/geronimo/jetty8/deployment/JettyModuleBuilder.java?ref=8a541eb24c8a750b897fd6d29b9622e7081b1e53",
                "deletions": 2,
                "filename": "plugins/jetty8/geronimo-jetty8-builder/src/main/java/org/apache/geronimo/jetty8/deployment/JettyModuleBuilder.java",
                "patch": "@@ -692,8 +692,8 @@ private void configureConfigurationFactory(JettyWebAppType jettyWebApp, LoginCon\n         if (jettyWebApp.isSetSecurityRealmName()) {\n             securityRealmName = jettyWebApp.getSecurityRealmName().trim();\n         } else {\n-            if (loginConfigInfo == null) return;\n-            securityRealmName = loginConfigInfo.realmName.trim();\n+            if (loginConfigInfo == null ||loginConfigInfo.realmName == null) return;\n+            securityRealmName = loginConfigInfo.realmName;\n         }\n         AbstractNameQuery configurationFactoryName = new AbstractNameQuery(null, Collections.singletonMap(\"name\", securityRealmName), ConfigurationFactory.class.getName());\n         securityFactoryData.setReferencePattern(\"ConfigurationFactory\", configurationFactoryName);",
                "raw_url": "https://github.com/apache/geronimo/raw/8a541eb24c8a750b897fd6d29b9622e7081b1e53/plugins/jetty8/geronimo-jetty8-builder/src/main/java/org/apache/geronimo/jetty8/deployment/JettyModuleBuilder.java",
                "sha": "8dee3e295eb246dc6c45d67ce545247685c7de49",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-5647 avoid an NPE in jetty if no security realm is specified anywhere\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@1022726 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/2b970ae9221f96a074b6199dd8f34d9af483eb54",
        "patched_files": [
            "JettyModuleBuilder.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "JettyModuleBuilderTest.java"
        ]
    },
    "geronimo_aba2137": {
        "bug_id": "geronimo_aba2137",
        "commit": "https://github.com/apache/geronimo/commit/aba213751c2414fab49b443a94051413da9bcf67",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/aba213751c2414fab49b443a94051413da9bcf67/modules/network/src/java/org/apache/geronimo/network/protocol/SocketProtocol.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/network/src/java/org/apache/geronimo/network/protocol/SocketProtocol.java?ref=aba213751c2414fab49b443a94051413da9bcf67",
                "deletions": 7,
                "filename": "modules/network/src/java/org/apache/geronimo/network/protocol/SocketProtocol.java",
                "patch": "@@ -37,7 +37,7 @@\n \n \n /**\n- * @version $Revision: 1.11 $ $Date: 2004/05/01 17:23:55 $\n+ * @version $Revision: 1.12 $ $Date: 2004/05/01 23:16:37 $\n  */\n public class SocketProtocol implements AcceptableProtocol, SelectionEventListner {\n \n@@ -284,7 +284,6 @@ public void selectionEvent(SelectionKey selection) {\n                 }\n             }\n         } catch (CancelledKeyException e) {\n-            log.trace(\"Key Cancelled:\", e);\n             // who knows, by the time we get here,\n             // the key could have been canceled.\n         }\n@@ -403,11 +402,9 @@ public void serviceRead() {\n             if (tracing) log.trace(\"No more data available to be read.\");\n \n         } catch (CancelledKeyException e) {\n-            log.trace(\"Key Cancelled: \", e);\n             // who knows, by the time we get here,\n             // the key could have been canceled.\n         } catch (ClosedChannelException e) {\n-            log.trace(\"Channel Closed: \", e);\n             // who knows, by the time we get here,\n             // the channel could have been closed.\n         } catch (IOException e) {\n@@ -426,11 +423,10 @@ public void serviceRead() {\n \n     public void close() {\n         synchronized (this) {\n-            if (socketChannel != null) {\n+            if (state == STARTED) {\n                 log.trace(\"Closing\");\n                 try {\n-                    selectionKey.cancel();\n-                    socketChannel.close();\n+                    selectorManager.closeChannel(socketChannel);\n                 } catch (Throwable e) {\n                     log.info(\"Closing error: \", e);\n                 }",
                "raw_url": "https://github.com/apache/geronimo/raw/aba213751c2414fab49b443a94051413da9bcf67/modules/network/src/java/org/apache/geronimo/network/protocol/SocketProtocol.java",
                "sha": "103aa3c5b7204d025e808a69b34dde57fc074457",
                "status": "modified"
            }
        ],
        "message": "Put in work-around for NPE from NIO impl.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@45375 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/797d4cca2e578e07e23bb7a40e009d8ecf5e3b2e",
        "patched_files": [
            "SocketProtocol.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "SocketProtocolTest.java"
        ]
    },
    "geronimo_ac13e39": {
        "bug_id": "geronimo_ac13e39",
        "commit": "https://github.com/apache/geronimo/commit/ac13e3938f108c2cc9787ba3812a2e0a7fe5c633",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/geronimo/blob/ac13e3938f108c2cc9787ba3812a2e0a7fe5c633/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java?ref=ac13e3938f108c2cc9787ba3812a2e0a7fe5c633",
                "deletions": 1,
                "filename": "modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "patch": "@@ -472,7 +472,10 @@ protected void processGetRequest(Request request, Response response, AxisService\n             if (portInfo.getWsdlFile() != null && !portInfo.getWsdlFile().equals(\"\")) { //wsdl file has been provided\n                 Definition wsdlDefinition = new AxisServiceGenerator().getWSDLDefition(portInfo, configurationBaseUrl, classLoader);\n                 if(wsdlDefinition != null){\n-                    String portName = portInfo.getWsdlPort().getLocalPart();\n+                    String portName = null;\n+                    if(portInfo.getWsdlPort() != null) {\n+                        portName = portInfo.getWsdlPort().getLocalPart();\n+                    }\n                     QName qName = portInfo.getWsdlService();\n                     if (qName == null) {\n                         qName = new QName(service.getTargetNamespace(), service.getName());",
                "raw_url": "https://github.com/apache/geronimo/raw/ac13e3938f108c2cc9787ba3812a2e0a7fe5c633/modules/geronimo-axis2/src/main/java/org/apache/geronimo/axis2/Axis2WebServiceContainer.java",
                "sha": "56cbe1ee9eceaf3e1b29c8befe1bc745142f287a",
                "status": "modified"
            }
        ],
        "message": "prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@527745 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/4a6f8769a4288f5e9aa5d39389601b17dce2b9ea",
        "patched_files": [
            "Axis2WebServiceContainer.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "Axis2WebServiceContainerTest.java"
        ]
    },
    "geronimo_afe8202": {
        "bug_id": "geronimo_afe8202",
        "commit": "https://github.com/apache/geronimo/commit/afe820227771b9b44e7ffbda239da4e6eaba70ac",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/client-system-plan.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/assembly/src/plan/client-system-plan.xml?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 0,
                "filename": "modules/assembly/src/plan/client-system-plan.xml",
                "patch": "@@ -74,4 +74,12 @@ specific services - those should be provided by children.\n         <attribute name=\"maxFileSize\" type=\"java.lang.String\">10MB</attribute>\n         <reference name=\"ServerInfo\">geronimo.client:role=ServerInfo</reference>\n     </gbean>\n+\n+    <!-- Naming properties -->\n+    <gbean name=\"geronimo.client:role=NamingProperties\" class=\"org.apache.geronimo.system.properties.NamingProperties\">\n+        <attribute name=\"namingFactoryInitial\" type=\"java.lang.String\">com.sun.jndi.rmi.registry.RegistryContextFactory</attribute>\n+        <attribute name=\"namingFactoryUrlPkgs\" type=\"java.lang.String\">org.apache.geronimo.naming</attribute>\n+        <attribute name=\"namingProviderUrl\" type=\"java.lang.String\">rmi://localhost:1099</attribute>\n+    </gbean>\n+\n </configuration>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/client-system-plan.xml",
                "sha": "6dbbf0b4229f7f0fd75b11755214d07b981f5898",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/default-database-plan.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/assembly/src/plan/default-database-plan.xml?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 0,
                "filename": "modules/assembly/src/plan/default-database-plan.xml",
                "patch": "@@ -80,6 +80,7 @@\n \n     <gbean name=\"geronimo.server:type=ThreadPooledTimer,name=JDBCNonTransactionalThreadPooledTimer\" class=\"org.apache.geronimo.timer.jdbc.JDBCStoreThreadPooledNonTransactionalTimer\">\n         <reference name=\"ManagedConnectionFactoryWrapper\">geronimo.server:J2EEServer=geronimo,j2eeType=JCAManagedConnectionFactory,name=DefaultDatasource</reference>\n+        <reference name=\"TransactionContextManager\">geronimo.server:type=TransactionContextManager</reference>\n         <reference name=\"ThreadPool\">geronimo.server:type=ThreadPool,name=DefaultThreadPool</reference>\n     </gbean>\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/default-database-plan.xml",
                "sha": "99acd2d1adf9df6fcb2ed9cb4f8bf7382bdde2f3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/j2ee-client-plan.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/assembly/src/plan/j2ee-client-plan.xml?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/assembly/src/plan/j2ee-client-plan.xml",
                "patch": "@@ -90,7 +90,7 @@ by the app client.\n         <attribute name=\"syncMaximumPoolSize\" type=\"int\">10</attribute>\n         <attribute name=\"startMaximumPoolSize\" type=\"int\">10</attribute>\n         <attribute name=\"scheduledMaximumPoolSize\" type=\"int\">10</attribute>\n-        <reference name=\"XAServices\">geronimo.client:type=TransactionManager</reference>\n+        <reference name=\"TransactionContextManager\">geronimo.client:type=TransactionContextManager</reference>\n     </gbean>\n \n     <gbean name=\"geronimo.client:type=TransactionManager\" class=\"org.apache.geronimo.transaction.GeronimoTransactionManager\">\n@@ -102,6 +102,8 @@ by the app client.\n \n     <gbean name=\"geronimo.client:type=TransactionContextManager\" class=\"org.apache.geronimo.transaction.context.TransactionContextManager\">\n         <reference name=\"TransactionManager\">geronimo.client:type=TransactionManager</reference>\n+        <reference name=\"XidImporter\">geronimo.client:type=TransactionManager</reference>\n+        <reference name=\"Recovery\">geronimo.client:type=TransactionManager</reference>\n     </gbean>\n \n </configuration>",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/j2ee-client-plan.xml",
                "sha": "3eea9086438556579688d302bee18b0e1bb24fdd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/j2ee-server-plan.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/assembly/src/plan/j2ee-server-plan.xml?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/assembly/src/plan/j2ee-server-plan.xml",
                "patch": "@@ -150,7 +150,7 @@ by the server.\n         <attribute name=\"syncMaximumPoolSize\" type=\"int\">10</attribute>\n         <attribute name=\"startMaximumPoolSize\" type=\"int\">10</attribute>\n         <attribute name=\"scheduledMaximumPoolSize\" type=\"int\">10</attribute>\n-        <reference name=\"XAServices\">geronimo.server:type=TransactionManager</reference>\n+        <reference name=\"TransactionContextManager\">geronimo.server:type=TransactionContextManager</reference>\n     </gbean>\n \n     <gbean name=\"geronimo.server:type=HOWLTransactionLog\" class=\"org.apache.geronimo.transaction.log.HOWLLog\">\n@@ -179,6 +179,8 @@ by the server.\n \n     <gbean name=\"geronimo.server:type=TransactionContextManager\" class=\"org.apache.geronimo.transaction.context.TransactionContextManager\">\n         <reference name=\"TransactionManager\">geronimo.server:type=TransactionManager</reference>\n+        <reference name=\"XidImporter\">geronimo.server:type=TransactionManager</reference>\n+        <reference name=\"Recovery\">geronimo.server:type=TransactionManager</reference>\n     </gbean>\n \n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/j2ee-server-plan.xml",
                "sha": "7fd66288008342238e2920d400cdc5b363a44fc7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/system-database-plan.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/assembly/src/plan/system-database-plan.xml?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 0,
                "filename": "modules/assembly/src/plan/system-database-plan.xml",
                "patch": "@@ -78,6 +78,7 @@\n \r\n     <gbean name=\"geronimo.server:type=ThreadPooledTimer,name=JDBCNonTransactionalThreadPooledTimer\" class=\"org.apache.geronimo.timer.jdbc.JDBCStoreThreadPooledNonTransactionalTimer\">\r\n         <reference name=\"ManagedConnectionFactoryWrapper\">geronimo.server:J2EEServer=geronimo,j2eeType=JCAManagedConnectionFactory,name=DefaultDatasource</reference>\r\n+        <reference name=\"TransactionContextManager\">geronimo.server:type=TransactionContextManager</reference>\r\n         <reference name=\"ThreadPool\">geronimo.server:type=ThreadPool,name=DefaultThreadPool</reference>\r\n     </gbean>\r\n -->\r",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/assembly/src/plan/system-database-plan.xml",
                "sha": "8148e17982cb5182e1812136037909eab6a048a4",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/client/project.xml",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/client/project.xml?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 4,
                "filename": "modules/client/project.xml",
                "patch": "@@ -67,12 +67,18 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>geronimo</groupId>\n-            <artifactId>geronimo-transaction</artifactId>\n-            <version>${pom.currentVersion}</version>\n+             <groupId>geronimo</groupId>\n+             <artifactId>geronimo-transaction</artifactId>\n+             <version>${pom.currentVersion}</version>\n+         </dependency>\n+\n+        <dependency>\n+            <groupId>geronimo-spec</groupId>\n+            <artifactId>geronimo-spec-jta</artifactId>\n+            <version>&geronimo-spec-jta-version;</version>\n         </dependency>\n \n-        <!-- Thirdparty -->\n+          <!-- Thirdparty -->\n \n         <dependency>\n             <groupId>cglib</groupId>",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/client/project.xml",
                "sha": "96bc46ff1c346f615665cd4c3c639e0b1139f2b8",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/client/src/java/org/apache/geronimo/client/AppClientContainer.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/client/src/java/org/apache/geronimo/client/AppClientContainer.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 10,
                "filename": "modules/client/src/java/org/apache/geronimo/client/AppClientContainer.java",
                "patch": "@@ -23,7 +23,7 @@\n import org.apache.geronimo.gbean.GBeanInfo;\n import org.apache.geronimo.gbean.GBeanInfoFactory;\n import org.apache.geronimo.transaction.context.TransactionContext;\n-import org.apache.geronimo.transaction.context.UnspecifiedTransactionContext;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  * @version $Rev: 46019 $ $Date: 2004-09-14 02:56:06 -0700 (Tue, 14 Sep 2004) $\n@@ -36,12 +36,14 @@\n     private final ObjectName appClientModuleName;\n     private final Method mainMethod;\n     private final ClassLoader classLoader;\n+    private final TransactionContextManager transactionContextManager;\n \n-    public AppClientContainer(String mainClassName, ObjectName appClientModuleName, AppClientPlugin jndiContext, ClassLoader classLoader) throws Exception {\n+    public AppClientContainer(String mainClassName, ObjectName appClientModuleName, ClassLoader classLoader, AppClientPlugin jndiContext, TransactionContextManager transactionContextManager) throws Exception {\n         this.mainClassName = mainClassName;\n-        this.jndiContext = jndiContext;\n         this.appClientModuleName = appClientModuleName;\n         this.classLoader = classLoader;\n+        this.jndiContext = jndiContext;\n+        this.transactionContextManager = transactionContextManager;\n \n         try {\n             Class mainClass = classLoader.loadClass(mainClassName);\n@@ -66,11 +68,11 @@ public void main(String[] args) throws Exception {\n \n         ClassLoader contextClassLoader = thread.getContextClassLoader();\n         thread.setContextClassLoader(classLoader);\n-        TransactionContext oldTransactionContext = TransactionContext.getContext();\n-\n+        TransactionContext oldTransactionContext = transactionContextManager.getContext();\n+        TransactionContext currentTransactionContext = null;\n         try {\n             jndiContext.startClient(appClientModuleName);\n-            TransactionContext.setContext(new UnspecifiedTransactionContext());\n+            currentTransactionContext = transactionContextManager.newUnspecifiedTransactionContext();\n             mainMethod.invoke(null, new Object[]{args});\n \n         } catch (InvocationTargetException e) {\n@@ -85,8 +87,8 @@ public void main(String[] args) throws Exception {\n             jndiContext.stopClient(appClientModuleName);\n \n             thread.setContextClassLoader(contextClassLoader);\n-            TransactionContext.setContext(oldTransactionContext);\n-\n+            transactionContextManager.setContext(oldTransactionContext);\n+            currentTransactionContext.commit();\n         }\n     }\n \n@@ -98,10 +100,11 @@ public void main(String[] args) throws Exception {\n         infoFactory.addOperation(\"main\", new Class[]{String[].class});\n         infoFactory.addAttribute(\"mainClassName\", String.class, true);\n         infoFactory.addAttribute(\"appClientModuleName\", ObjectName.class, true);\n-        infoFactory.addReference(\"JNDIContext\", AppClientPlugin.class);\n         infoFactory.addAttribute(\"classLoader\", ClassLoader.class, false);\n+        infoFactory.addReference(\"JNDIContext\", AppClientPlugin.class);\n+        infoFactory.addReference(\"TransactionContextManager\", TransactionContextManager.class);\n \n-        infoFactory.setConstructor(new String[]{\"mainClassName\", \"appClientModuleName\", \"JNDIContext\", \"classLoader\"});\n+        infoFactory.setConstructor(new String[]{\"mainClassName\", \"appClientModuleName\", \"classLoader\", \"JNDIContext\", \"TransactionContextManager\"});\n \n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/client/src/java/org/apache/geronimo/client/AppClientContainer.java",
                "sha": "64707070a3c1ead703ec5db94b026f93be48582e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java",
                "patch": "@@ -220,7 +220,7 @@ public void initContext(EARContext earContext, Module module, ClassLoader cl) th\n     }\n \n     public String addGBeans(EARContext earContext, Module module, ClassLoader cl) throws DeploymentException {\n-        ObjectName resourceAdapterModuleName = addResourceAdapterModuleGBean(earContext, module, cl);\n+        addResourceAdapterModuleGBean(earContext, module, cl);\n \n         GerConnectorType geronimoConnector = (GerConnectorType) module.getVendorDD();\n         XmlObject specDD = module.getSpecDD();\n@@ -626,6 +626,7 @@ private ObjectName configureConnectionManager(GerConnectiondefinitionInstanceTyp\n             if (connectionManager.getRealmBridge() != null) {\n                 connectionManagerGBean.setReferencePattern(\"RealmBridge\", ObjectName.getInstance(BASE_REALM_BRIDGE_NAME + connectionManager.getRealmBridge()));\n             }\n+            connectionManagerGBean.setReferencePattern(\"TransactionContextManager\", earContext.getTransactionContextManagerObjectName());\n         } catch (Exception e) {\n             throw new DeploymentException(\"Problem setting up ConnectionManager\", e);\n         }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/deployment/ConnectorModuleBuilder.java",
                "sha": "264557302aa90a35f56061f7a67d6614f97d07e5",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/GenericConnectionManager.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/outbound/GenericConnectionManager.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 17,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/outbound/GenericConnectionManager.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.geronimo.gbean.GBeanInfo;\n import org.apache.geronimo.gbean.GBeanInfoFactory;\n import org.apache.geronimo.security.bridge.RealmBridge;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  * GenericConnectionManager sets up a connection manager stack according to the\n@@ -40,23 +41,30 @@\n     private PoolingSupport pooling;\n     //dependencies\n \n-    protected RealmBridge realmBridge;\n-    protected ConnectionTracker connectionTracker;\n+    private final RealmBridge realmBridge;\n+    private final ConnectionTracker connectionTracker;\n+    private final TransactionContextManager transactionContextManager;\n \n     //default constructor for use as endpoint\n     public GenericConnectionManager() {\n+        this.realmBridge = null;\n+        this.connectionTracker = null;\n+        this.transactionContextManager = null;\n     }\n \n     public GenericConnectionManager(TransactionSupport transactionSupport,\n-            PoolingSupport pooling,\n-            String objectName,\n-            RealmBridge realmBridge,\n-            ConnectionTracker connectionTracker) {\n+                                    PoolingSupport pooling,\n+                                    String objectName,\n+                                    RealmBridge realmBridge,\n+                                    ConnectionTracker connectionTracker,\n+                                    TransactionContextManager transactionContextManager) {\n         this.transactionSupport = transactionSupport;\n         this.pooling = pooling;\n         this.objectName = objectName;\n         this.realmBridge = realmBridge;\n         this.connectionTracker = connectionTracker;\n+        assert transactionContextManager != null;\n+        this.transactionContextManager = transactionContextManager;\n     }\n \n     /**\n@@ -88,7 +96,7 @@ public GenericConnectionManager(TransactionSupport transactionSupport,\n //        if (transactionSupport instanceof XATransactions && ((XATransactions)transactionSupport).isUseThreadCaching()) {\n //            stack = new ThreadLocalCachingConnectionInterceptor(stack, false);\n //        }\n-        stack = transactionSupport.addTransactionInterceptors(stack);\n+        stack = transactionSupport.addTransactionInterceptors(stack, transactionContextManager);\n \n         if (realmBridge != null) {\n             stack = new SubjectInterceptor(stack, realmBridge);\n@@ -103,7 +111,7 @@ public GenericConnectionManager(TransactionSupport transactionSupport,\n                     connectionTracker);\n         }\n         tail.setStack(stack);\n-        return new ConnectionInterceptor[] {stack, recoveryStack};\n+        return new ConnectionInterceptor[]{stack, recoveryStack};\n     }\n \n     public TransactionSupport getTransactionSupport() {\n@@ -126,18 +134,10 @@ public RealmBridge getRealmBridge() {\n         return realmBridge;\n     }\n \n-    public void setRealmBridge(RealmBridge realmBridge) {\n-        this.realmBridge = realmBridge;\n-    }\n-\n     public ConnectionTracker getConnectionTracker() {\n         return connectionTracker;\n     }\n \n-    public void setConnectionTracker(ConnectionTracker connectionTracker) {\n-        this.connectionTracker = connectionTracker;\n-    }\n-\n     public static final GBeanInfo GBEAN_INFO;\n \n     static {\n@@ -151,13 +151,15 @@ public void setConnectionTracker(ConnectionTracker connectionTracker) {\n \n         infoFactory.addReference(\"ConnectionTracker\", ConnectionTracker.class);\n         infoFactory.addReference(\"RealmBridge\", RealmBridge.class);\n+        infoFactory.addReference(\"TransactionContextManager\", TransactionContextManager.class);\n \n         infoFactory.setConstructor(new String[]{\n             \"transactionSupport\",\n             \"pooling\",\n             \"objectName\",\n             \"RealmBridge\",\n-            \"ConnectionTracker\"});\n+            \"ConnectionTracker\",\n+            \"TransactionContextManager\"});\n \n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/GenericConnectionManager.java",
                "sha": "c6d65dd18f6caf0fb78d6dc496db094fd0cee244",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/TransactionCachingInterceptor.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/outbound/TransactionCachingInterceptor.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 4,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/outbound/TransactionCachingInterceptor.java",
                "patch": "@@ -26,6 +26,7 @@\n \n import org.apache.geronimo.transaction.ConnectionReleaser;\n import org.apache.geronimo.transaction.context.TransactionContext;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  * TransactionCachingInterceptor.java\n@@ -50,13 +51,18 @@\n public class TransactionCachingInterceptor implements ConnectionInterceptor, ConnectionReleaser {\n \n     private final ConnectionInterceptor next;\n+    private final TransactionContextManager transactionContextManager;\n \n-    public TransactionCachingInterceptor(final ConnectionInterceptor next) {\n+    public TransactionCachingInterceptor(ConnectionInterceptor next, TransactionContextManager transactionContextManager) {\n         this.next = next;\n+        this.transactionContextManager = transactionContextManager;\n     }\n \n     public void getConnection(ConnectionInfo connectionInfo) throws ResourceException {\n-        TransactionContext transactionContext = TransactionContext.getContext();\n+        TransactionContext transactionContext = transactionContextManager.getContext();\n+        if (transactionContext == null) {\n+            next.getConnection(connectionInfo);\n+        } else {\n         ManagedConnectionInfos managedConnectionInfos = (ManagedConnectionInfos) transactionContext.getManagedConnectionInfo(this);\n         if (managedConnectionInfos == null) {\n             managedConnectionInfos = new ManagedConnectionInfos();\n@@ -77,6 +83,7 @@ public void getConnection(ConnectionInfo connectionInfo) throws ResourceExceptio\n                 managedConnectionInfos.setShared(connectionInfo.getManagedConnectionInfo());\n             }\n         }\n+        }\n     }\n \n     public void returnConnection(ConnectionInfo connectionInfo, ConnectionReturnAction connectionReturnAction) {\n@@ -86,8 +93,8 @@ public void returnConnection(ConnectionInfo connectionInfo, ConnectionReturnActi\n             return;\n         }\n \n-        TransactionContext transactionContext = TransactionContext.getContext();\n-        if (transactionContext.isActive()) {\n+        TransactionContext transactionContext = transactionContextManager.getContext();\n+        if (transactionContext != null && transactionContext.isActive()) {\n             return;\n         }\n         if (connectionInfo.getManagedConnectionInfo().hasConnectionHandles()) {",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/TransactionCachingInterceptor.java",
                "sha": "843102fe19faa5a9b712ae86c9955cb5f4268cda",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptor.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptor.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 16,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptor.java",
                "patch": "@@ -23,60 +23,60 @@\n import javax.transaction.xa.XAResource;\n \n import org.apache.geronimo.transaction.context.TransactionContext;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  * TransactionEnlistingInterceptor.java\n- *\n- *\n+ * <p/>\n+ * <p/>\n  * Created: Fri Sep 26 14:52:24 2003\n  *\n  * @version 1.0\n  */\n public class TransactionEnlistingInterceptor implements ConnectionInterceptor {\n \n     private final ConnectionInterceptor next;\n+    private final TransactionContextManager transactionContextManager;\n \n-    public TransactionEnlistingInterceptor(\n-            ConnectionInterceptor next\n-            ) {\n+    public TransactionEnlistingInterceptor(ConnectionInterceptor next, TransactionContextManager transactionContextManager) {\n         this.next = next;\n+        this.transactionContextManager = transactionContextManager;\n     }\n \n     public void getConnection(ConnectionInfo connectionInfo) throws ResourceException {\n         next.getConnection(connectionInfo);\n         try {\n             ManagedConnectionInfo mci = connectionInfo.getManagedConnectionInfo();\n-            TransactionContext transactionContext = TransactionContext.getContext();\n-            if (transactionContext.isActive()) {\n+            TransactionContext transactionContext = transactionContextManager.getContext();\n+            if (transactionContext != null && transactionContext.isActive()) {\n                 XAResource xares = mci.getXAResource();\n                 transactionContext.getTransaction().enlistResource(xares);\n             }\n \n         } catch (SystemException e) {\n             throw new ResourceException(\"Could not get transaction\", e);\n         } catch (RollbackException e) {\n-            throw new ResourceException(\n-                    \"Could not enlist resource in rolled back transaction\",\n+            throw new ResourceException(\"Could not enlist resource in rolled back transaction\",\n                     e);\n         }\n \n     }\n \n     /**\n      * The <code>returnConnection</code> method\n-     *\n+     * <p/>\n      * todo Probably the logic needs improvement if a connection\n      * error occurred and we are destroying the handle.\n-     * @param connectionInfo a <code>ConnectionInfo</code> value\n+     *\n+     * @param connectionInfo         a <code>ConnectionInfo</code> value\n      * @param connectionReturnAction a <code>ConnectionReturnAction</code> value\n      */\n-    public void returnConnection(\n-            ConnectionInfo connectionInfo,\n-            ConnectionReturnAction connectionReturnAction) {\n+    public void returnConnection(ConnectionInfo connectionInfo,\n+                                 ConnectionReturnAction connectionReturnAction) {\n         try {\n             ManagedConnectionInfo mci = connectionInfo.getManagedConnectionInfo();\n-            TransactionContext transactionContext = TransactionContext.getContext();\n-            if (transactionContext.isActive()) {\n+            TransactionContext transactionContext = transactionContextManager.getContext();\n+            if (transactionContext != null && transactionContext.isActive()) {\n                 XAResource xares = mci.getXAResource();\n                 transactionContext.getTransaction().delistResource(xares, XAResource.TMSUSPEND);\n             }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptor.java",
                "sha": "609653457014ca2423b5e5b02c9bc47578aa72da",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/LocalTransactions.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/LocalTransactions.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 3,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/LocalTransactions.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.geronimo.connector.outbound.LocalXAResourceInsertionInterceptor;\n import org.apache.geronimo.connector.outbound.TransactionCachingInterceptor;\n import org.apache.geronimo.connector.outbound.TransactionEnlistingInterceptor;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  *\n@@ -38,8 +39,8 @@ public ConnectionInterceptor addXAResourceInsertionInterceptor(ConnectionInterce\n         return new LocalXAResourceInsertionInterceptor(stack, name);\n     }\n \n-    public ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack) {\n-        stack = new TransactionEnlistingInterceptor(stack);\n-        return new TransactionCachingInterceptor(stack);\n+    public ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack, TransactionContextManager transactionContextManager) {\n+        stack = new TransactionEnlistingInterceptor(stack, transactionContextManager);\n+        return new TransactionCachingInterceptor(stack, transactionContextManager);\n     }\n }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/LocalTransactions.java",
                "sha": "5503ad2a21ba50af21413c4a031cdf35e1ac7c84",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/NoTransactions.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/NoTransactions.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/NoTransactions.java",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.geronimo.connector.outbound.connectionmanagerconfig;\n \n import org.apache.geronimo.connector.outbound.ConnectionInterceptor;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  *\n@@ -35,7 +36,7 @@ public ConnectionInterceptor addXAResourceInsertionInterceptor(ConnectionInterce\n         return stack;\n     }\n \n-    public ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack) {\n+    public ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack, TransactionContextManager transactionContextManager) {\n         return stack;\n     }\n }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/NoTransactions.java",
                "sha": "00d44365fec05cb84bc3a8910519ddbea64c0ee7",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/TransactionLog.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/TransactionLog.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 3,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/TransactionLog.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.geronimo.connector.outbound.TransactionCachingInterceptor;\n import org.apache.geronimo.connector.outbound.TransactionEnlistingInterceptor;\n import org.apache.geronimo.connector.outbound.transactionlog.LogXAResourceInsertionInterceptor;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  *\n@@ -39,8 +40,8 @@ public ConnectionInterceptor addXAResourceInsertionInterceptor(ConnectionInterce\n         return new LogXAResourceInsertionInterceptor(stack, name);\n     }\n \n-    public ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack) {\n-        stack = new TransactionEnlistingInterceptor(stack);\n-        return new TransactionCachingInterceptor(stack);\n+    public ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack, TransactionContextManager transactionContextManager) {\n+        stack = new TransactionEnlistingInterceptor(stack, transactionContextManager);\n+        return new TransactionCachingInterceptor(stack, transactionContextManager);\n     }\n }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/TransactionLog.java",
                "sha": "77ab4e828fa28e63af9e8d29e59e104d28748702",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/TransactionSupport.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/TransactionSupport.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/TransactionSupport.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.io.Serializable;\n \n import org.apache.geronimo.connector.outbound.ConnectionInterceptor;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  *\n@@ -29,6 +30,6 @@\n  * */\n public abstract class TransactionSupport implements Serializable {\n     public abstract ConnectionInterceptor addXAResourceInsertionInterceptor(ConnectionInterceptor stack, String name);\n-    public abstract ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack);\n+    public abstract ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack, TransactionContextManager transactionContextManager);\n \n }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/TransactionSupport.java",
                "sha": "ea8cd0b57ba7f4a7328e095e045fc261e1efe379",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/XATransactions.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/XATransactions.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 3,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/XATransactions.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.geronimo.connector.outbound.TransactionCachingInterceptor;\n import org.apache.geronimo.connector.outbound.TransactionEnlistingInterceptor;\n import org.apache.geronimo.connector.outbound.XAResourceInsertionInterceptor;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  *\n@@ -58,15 +59,15 @@ public ConnectionInterceptor addXAResourceInsertionInterceptor(ConnectionInterce\n         return new XAResourceInsertionInterceptor(stack, name);\n     }\n \n-    public ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack) {\n+    public ConnectionInterceptor addTransactionInterceptors(ConnectionInterceptor stack, TransactionContextManager transactionContextManager) {\n         //experimental thread local caching\n         if (isUseThreadCaching()) {\n             //useMatching should be configurable\n             stack = new ThreadLocalCachingConnectionInterceptor(stack, false);\n         }\n-        stack = new TransactionEnlistingInterceptor(stack);\n+        stack = new TransactionEnlistingInterceptor(stack, transactionContextManager);\n         if (isUseTransactionCaching()) {\n-            stack = new TransactionCachingInterceptor(stack);\n+            stack = new TransactionCachingInterceptor(stack, transactionContextManager);\n         }\n         return stack;\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/outbound/connectionmanagerconfig/XATransactions.java",
                "sha": "7480b696e86d79c669b950356c824c4abaab34a8",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/work/GeronimoWorkManager.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/work/GeronimoWorkManager.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 15,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/work/GeronimoWorkManager.java",
                "patch": "@@ -36,7 +36,7 @@\n import org.apache.geronimo.gbean.GBeanInfoFactory;\n import org.apache.geronimo.gbean.GBeanLifecycle;\n import org.apache.geronimo.gbean.WaitingException;\n-import org.apache.geronimo.transaction.XAServices;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  * WorkManager implementation which uses under the cover three WorkExecutorPool\n@@ -70,7 +70,7 @@\n      */\n     private WorkExecutorPool scheduledWorkExecutorPool;\n \n-    private final XAServices xaServices;\n+    private final TransactionContextManager transactionContextManager;\n \n     private final WorkExecutor scheduleWorkExecutor = new ScheduleWorkExecutor();\n     private final WorkExecutor startWorkExecutor = new StartWorkExecutor();\n@@ -83,15 +83,15 @@ public GeronimoWorkManager() {\n         this(DEFAULT_POOL_SIZE, null);\n     }\n \n-    public GeronimoWorkManager(int size, XAServices xaServices) {\n-        this(size, size, size, xaServices);\n+    public GeronimoWorkManager(int size, TransactionContextManager transactionContextManager) {\n+        this(size, size, size, transactionContextManager);\n     }\n \n-    public GeronimoWorkManager(int syncSize, int startSize, int schedSize, XAServices xaServices) {\n+    public GeronimoWorkManager(int syncSize, int startSize, int schedSize, TransactionContextManager transactionContextManager) {\n         syncWorkExecutorPool = new NullWorkExecutorPool(syncSize);\n         startWorkExecutorPool = new NullWorkExecutorPool(startSize);\n         scheduledWorkExecutorPool = new NullWorkExecutorPool(schedSize);\n-        this.xaServices = xaServices;\n+        this.transactionContextManager = transactionContextManager;\n     }\n \n     public void doStart() throws WaitingException, Exception {\n@@ -115,7 +115,7 @@ public void doFail() {\n     }\n \n     public XATerminator getXATerminator() {\n-        return xaServices;\n+        return transactionContextManager;\n     }\n \n     public int getSyncThreadCount() {\n@@ -158,7 +158,7 @@ public void setScheduledMaximumPoolSize(int maxSize) {\n      * @see javax.resource.spi.work.WorkManager#doWork(javax.resource.spi.work.Work)\n      */\n     public void doWork(Work work) throws WorkException {\n-        executeWork(new WorkerContext(work), syncWorkExecutor, syncWorkExecutorPool);\n+        executeWork(new WorkerContext(work, transactionContextManager), syncWorkExecutor, syncWorkExecutorPool);\n     }\n \n     /* (non-Javadoc)\n@@ -171,7 +171,7 @@ public void doWork(\n             WorkListener workListener)\n             throws WorkException {\n         WorkerContext workWrapper =\n-                new WorkerContext(work, startTimeout, execContext, xaServices, workListener);\n+                new WorkerContext(work, startTimeout, execContext, transactionContextManager, workListener);\n         workWrapper.setThreadPriority(Thread.currentThread().getPriority());\n         executeWork(workWrapper, syncWorkExecutor, syncWorkExecutorPool);\n     }\n@@ -180,7 +180,7 @@ public void doWork(\n      * @see javax.resource.spi.work.WorkManager#startWork(javax.resource.spi.work.Work)\n      */\n     public long startWork(Work work) throws WorkException {\n-        WorkerContext workWrapper = new WorkerContext(work);\n+        WorkerContext workWrapper = new WorkerContext(work, transactionContextManager);\n         workWrapper.setThreadPriority(Thread.currentThread().getPriority());\n         executeWork(workWrapper, startWorkExecutor, startWorkExecutorPool);\n         return System.currentTimeMillis() - workWrapper.getAcceptedTime();\n@@ -196,7 +196,7 @@ public long startWork(\n             WorkListener workListener)\n             throws WorkException {\n         WorkerContext workWrapper =\n-                new WorkerContext(work, startTimeout, execContext, xaServices, workListener);\n+                new WorkerContext(work, startTimeout, execContext, transactionContextManager, workListener);\n         workWrapper.setThreadPriority(Thread.currentThread().getPriority());\n         executeWork(workWrapper, startWorkExecutor, startWorkExecutorPool);\n         return System.currentTimeMillis() - workWrapper.getAcceptedTime();\n@@ -206,7 +206,7 @@ public long startWork(\n      * @see javax.resource.spi.work.WorkManager#scheduleWork(javax.resource.spi.work.Work)\n      */\n     public void scheduleWork(Work work) throws WorkException {\n-        WorkerContext workWrapper = new WorkerContext(work);\n+        WorkerContext workWrapper = new WorkerContext(work, transactionContextManager);\n         workWrapper.setThreadPriority(Thread.currentThread().getPriority());\n         executeWork(workWrapper, scheduleWorkExecutor, scheduledWorkExecutorPool);\n     }\n@@ -221,7 +221,7 @@ public void scheduleWork(\n             WorkListener workListener)\n             throws WorkException {\n         WorkerContext workWrapper =\n-                new WorkerContext(work, startTimeout, execContext, xaServices, workListener);\n+                new WorkerContext(work, startTimeout, execContext, transactionContextManager, workListener);\n         workWrapper.setThreadPriority(Thread.currentThread().getPriority());\n         executeWork(workWrapper, scheduleWorkExecutor, scheduledWorkExecutorPool);\n     }\n@@ -262,13 +262,13 @@ private void executeWork(WorkerContext work, WorkExecutor workExecutor, Executor\n \n         infoFactory.addOperation(\"getXATerminator\");\n \n-        infoFactory.addReference(\"XAServices\", XAServices.class);\n+        infoFactory.addReference(\"TransactionContextManager\", TransactionContextManager.class);\n \n         infoFactory.setConstructor(new String[]{\n             \"syncMaximumPoolSize\",\n             \"startMaximumPoolSize\",\n             \"scheduledMaximumPoolSize\",\n-            \"XAServices\"});\n+            \"TransactionContextManager\"});\n \n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/work/GeronimoWorkManager.java",
                "sha": "94698c1303caaf367d8bf0def6f2d8d96e3072c4",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/work/WorkerContext.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/java/org/apache/geronimo/connector/work/WorkerContext.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 12,
                "filename": "modules/connector/src/java/org/apache/geronimo/connector/work/WorkerContext.java",
                "patch": "@@ -24,13 +24,13 @@\n import javax.resource.spi.work.WorkEvent;\n import javax.resource.spi.work.WorkException;\n import javax.resource.spi.work.WorkListener;\n-import javax.resource.spi.work.WorkRejectedException;\n import javax.resource.spi.work.WorkManager;\n+import javax.resource.spi.work.WorkRejectedException;\n \n import EDU.oswego.cs.dl.util.concurrent.Latch;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.apache.geronimo.transaction.XAWork;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  * Work wrapper providing an execution context to a Work instance.\n@@ -82,7 +82,7 @@\n      */\n     private final ExecutionContext executionContext;\n \n-    private final XAWork xaWork;\n+    private final TransactionContextManager transactionContextManager;\n \n     /**\n      * Listener to be notified during the life-cycle of the work treatment.\n@@ -107,12 +107,13 @@\n     /**\n      * Create a WorkWrapper.\n      *\n-     * @param aWork Work to be wrapped.\n+     * @param work Work to be wrapped.\n+     * @param transactionContextManager\n      */\n-    public WorkerContext(Work aWork) {\n-        adaptee = aWork;\n+    public WorkerContext(Work work, TransactionContextManager transactionContextManager) {\n+        adaptee = work;\n         executionContext = null;\n-        xaWork = null;\n+        this.transactionContextManager = transactionContextManager;\n     }\n \n     /**\n@@ -125,16 +126,15 @@ public WorkerContext(Work aWork) {\n      * the submitted Work instance must be executed.\n      * @param workListener an object which would be notified when the various\n      * Work processing events (work accepted, work rejected, work started,\n-     * work completed) occur.\n      */\n     public WorkerContext(Work aWork, long aStartTimeout,\n                          ExecutionContext execContext,\n-                         XAWork xaWork,\n+                         TransactionContextManager transactionContextManager,\n                          WorkListener workListener) {\n         adaptee = aWork;\n         startTimeOut = aStartTimeout;\n         executionContext = execContext;\n-        this.xaWork = xaWork;\n+        this.transactionContextManager = transactionContextManager;\n         if (null != workListener) {\n             this.workListener = workListener;\n         }\n@@ -271,15 +271,19 @@ public void run() {\n         workListener.workStarted(\n                 new WorkEvent(this, WorkEvent.WORK_STARTED, adaptee, null));\n         startLatch.release();\n+        //Implementation note: we assume this is being called without an interesting TransactionContext,\n+        //and ignore/replace whatever is associated with the current thread.\n         try {\n             if (executionContext == null || executionContext.getXid() == null) {\n+                transactionContextManager.newUnspecifiedTransactionContext();\n                 adaptee.run();\n+                //TODO should we commit the txContext to flush any leftover state???\n             } else {\n                 try {\n-                    xaWork.begin(executionContext.getXid(), executionContext.getTransactionTimeout());\n+                    transactionContextManager.begin(executionContext.getXid(), executionContext.getTransactionTimeout());\n                     adaptee.run();\n                 } finally {\n-                    xaWork.end(executionContext.getXid());\n+                    transactionContextManager.end(executionContext.getXid());\n                 }\n \n             }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/java/org/apache/geronimo/connector/work/WorkerContext.java",
                "sha": "679b63412c268dbb86260e52cbfc9cdc10d837af",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test-data/connector_1_5/geronimo-ra.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test-data/connector_1_5/geronimo-ra.xml?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/connector/src/test-data/connector_1_5/geronimo-ra.xml",
                "patch": "@@ -108,7 +108,7 @@\n         <attribute name=\"syncMaximumPoolSize\" type=\"int\">10</attribute>\n         <attribute name=\"startMaximumPoolSize\" type=\"int\">10</attribute>\n         <attribute name=\"scheduledMaximumPoolSize\" type=\"int\">10</attribute>\n-        <reference name=\"XAServices\">geronimo.server:type=TransactionManager</reference>\n+        <reference name=\"TransactionContextManager\">geronimo.server:type=TransactionContextManager</reference>\n     </gbean>\n \n     <gbean name=\"geronimo.server:type=TransactionManager\" class=\"org.apache.geronimo.transaction.GeronimoTransactionManager\">\n@@ -118,6 +118,12 @@\n         </references>\n     </gbean>\n \n+    <gbean name=\"geronimo.server:type=TransactionContextManager\" class=\"org.apache.geronimo.transaction.context.TransactionContextManager\">\n+        <reference name=\"TransactionManager\">geronimo.server:type=TransactionManager</reference>\n+        <reference name=\"XidImporter\">geronimo.server:type=TransactionManager</reference>\n+        <reference name=\"Recovery\">geronimo.server:type=TransactionManager</reference>\n+    </gbean>\n+\n     <gbean name=\"geronimo.security:service=RealmBridge,name=TargetRealm\" class=\"org.apache.geronimo.security.bridge.ConfiguredIdentityUserPasswordRealmBridge\">\n         <attribute name=\"targetRealm\" type=\"java.lang.String\">TargetRealm</attribute>\n         <attribute name=\"configuredUser\" type=\"java.lang.String\">testUser</attribute>",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test-data/connector_1_5/geronimo-ra.xml",
                "sha": "3716e812970062d7a322f87fbc6884ae3ed7eb85",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/BootstrapContextTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/BootstrapContextTest.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 7,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/BootstrapContextTest.java",
                "patch": "@@ -18,13 +18,12 @@\n package org.apache.geronimo.connector;\n \n import java.util.Timer;\n-\n import javax.resource.spi.XATerminator;\n import javax.resource.spi.work.WorkManager;\n \n import junit.framework.TestCase;\n import org.apache.geronimo.connector.work.GeronimoWorkManager;\n-import org.apache.geronimo.transaction.XAServices;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  * Unit tests for {@link BootstrapContextImpl}\n@@ -36,8 +35,8 @@\n      * Tests get and set work manager\n      */\n     public void testGetSetWorkManager() {\n-        XAServices xaServices = new MockXATerminator(\"MockXATerminator\");\n-        GeronimoWorkManager manager = new GeronimoWorkManager(1, xaServices);\n+        TransactionContextManager transactionContextManager = new TransactionContextManager();\n+        GeronimoWorkManager manager = new GeronimoWorkManager(1, transactionContextManager);\n         BootstrapContextImpl context = new BootstrapContextImpl(manager);\n         WorkManager wm = context.getWorkManager();\n \n@@ -48,12 +47,12 @@ public void testGetSetWorkManager() {\n      * Tests get and set XATerminator\n      */\n     public void testGetSetXATerminator() {\n-        XAServices xaServices = new MockXATerminator(\"MockXATerminator\");\n-        GeronimoWorkManager manager = new GeronimoWorkManager(1, xaServices);\n+        TransactionContextManager transactionContextManager = new TransactionContextManager();\n+        GeronimoWorkManager manager = new GeronimoWorkManager(1, transactionContextManager);\n         BootstrapContextImpl context = new BootstrapContextImpl(manager);\n         XATerminator xat = context.getXATerminator();\n \n-        assertSame(\"Make sure it is the same object\", xaServices, xat);\n+        assertSame(\"Make sure it is the same object\", transactionContextManager, xat);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/BootstrapContextTest.java",
                "sha": "417ae085087991312ca74e22e5cd1bb83de35880",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/geronimo/blob/46889e646949ddd6270b74c66047e736b011ddee/modules/connector/src/test/org/apache/geronimo/connector/MockXATerminator.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/MockXATerminator.java?ref=46889e646949ddd6270b74c66047e736b011ddee",
                "deletions": 78,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/MockXATerminator.java",
                "patch": "@@ -1,78 +0,0 @@\n-/**\n- *\n- * Copyright 2003-2004 The Apache Software Foundation\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.geronimo.connector;\n-\n-import javax.resource.spi.XATerminator;\n-import javax.transaction.xa.XAException;\n-import javax.transaction.xa.Xid;\n-import javax.transaction.InvalidTransactionException;\n-import javax.transaction.SystemException;\n-\n-import org.apache.geronimo.transaction.XAServices;\n-\n-/**\n- * Dummy implementation of XATerminator interface for use in\n- * {@link BootstrapContextTest}\n- * @version $Rev$ $Date$\n- */\n-public class MockXATerminator implements XAServices {\n-\n-    private String id = null;\n-\n-    /** Creates a new instance of MockWorkManager */\n-    public MockXATerminator(String id) {\n-        this.id = id;\n-    }\n-\n-    public String getId() {\n-        return id;\n-    }\n-\n-    public boolean equals(MockXATerminator xat) {\n-        if (!(xat instanceof MockXATerminator)) {\n-            return false;\n-        }\n-\n-        return ((MockXATerminator) xat).getId() != null &&\n-                ((MockXATerminator) xat).getId().equals(getId());\n-    }\n-\n-    public void commit(Xid xid, boolean onePhase) throws XAException {\n-    }\n-\n-    public void forget(Xid xid) throws XAException {\n-    }\n-\n-    public int prepare(Xid xid) throws XAException {\n-        return -1;\n-    }\n-\n-    public Xid[] recover(int flag) throws XAException {\n-        return null;\n-    }\n-\n-    public void rollback(Xid xid) throws XAException {\n-    }\n-\n-    public void begin(Xid xid, long txTimeout) throws XAException, InvalidTransactionException, SystemException {\n-    }\n-\n-    public void end(Xid xid) throws XAException, SystemException {\n-    }\n-\n-}",
                "raw_url": "https://github.com/apache/geronimo/raw/46889e646949ddd6270b74c66047e736b011ddee/modules/connector/src/test/org/apache/geronimo/connector/MockXATerminator.java",
                "sha": "da8fd2e8929e34bca8c03d6c21a8aa710d5934e0",
                "status": "removed"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 5,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java",
                "patch": "@@ -20,7 +20,6 @@\n import java.util.HashSet;\n import java.util.Set;\n import javax.security.auth.Subject;\n-import javax.transaction.TransactionManager;\n \n import junit.framework.TestCase;\n import org.apache.geronimo.connector.mock.MockConnection;\n@@ -89,8 +88,8 @@ public Object invoke(InstanceContext newInstanceContext) throws Throwable {\n \n     protected void setUp() throws Exception {\n         connectionTrackingCoordinator = new ConnectionTrackingCoordinator();\n-        TransactionManager transactionManager = new TransactionManagerImpl();\n-        transactionContextManager = new TransactionContextManager(transactionManager);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl();\n+        transactionContextManager = new TransactionContextManager(transactionManager, transactionManager, null);\n         mockManagedConnectionFactory = new MockManagedConnectionFactory();\n         subject = new Subject();\n         ContextManager.setCurrentCaller(subject);\n@@ -99,11 +98,12 @@ protected void setUp() throws Exception {\n                 poolingSupport,\n                 name,\n                 realmBridge,\n-                connectionTrackingCoordinator);\n+                connectionTrackingCoordinator,\n+                transactionContextManager);\n         connectionManagerDeployment.doStart();\n         connectionFactory = (MockConnectionFactory) connectionManagerDeployment.createConnectionFactory(mockManagedConnectionFactory);\n         defaultComponentContext = new DefaultInstanceContext(unshareableResources, applicationManagedSecurityResources);\n-        defaultComponentInterceptor = new DefaultComponentInterceptor(this, connectionTrackingCoordinator);\n+        defaultComponentInterceptor = new DefaultComponentInterceptor(this, connectionTrackingCoordinator, transactionContextManager);\n     }\n \n     protected void tearDown() throws Exception {",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java",
                "sha": "65c06d59ded3762202ad2c03e57f4955c243f90f",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 19,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java",
                "patch": "@@ -18,10 +18,10 @@\n package org.apache.geronimo.connector.outbound;\n \n import javax.resource.ResourceException;\n-import javax.transaction.TransactionManager;\n \n import org.apache.geronimo.transaction.context.ContainerTransactionContext;\n import org.apache.geronimo.transaction.context.TransactionContext;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.context.UnspecifiedTransactionContext;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n \n@@ -33,25 +33,26 @@\n  * */\n public class TransactionCachingInterceptorTest extends ConnectionInterceptorTestUtils {\n \n-    private TransactionManager transactionManager;\n+    private TransactionManagerImpl transactionManager;\n+    private TransactionContextManager transactionContextManager;\n     private TransactionCachingInterceptor transactionCachingInterceptor;\n \n     protected void setUp() throws Exception {\n         super.setUp();\n         transactionManager = new TransactionManagerImpl();\n-        transactionCachingInterceptor = new TransactionCachingInterceptor(this);\n+        transactionContextManager = new TransactionContextManager(transactionManager, transactionManager, null);\n+        transactionCachingInterceptor = new TransactionCachingInterceptor(this, transactionContextManager);\n     }\n \n     protected void tearDown() throws Exception {\n         super.tearDown();\n         transactionManager = null;\n+        transactionContextManager = null;\n         transactionCachingInterceptor = null;\n     }\n \n     public void testGetConnectionInTransaction() throws Exception {\n-        ContainerTransactionContext transactionContext = new ContainerTransactionContext(transactionManager);\n-        TransactionContext.setContext(transactionContext);\n-        transactionContext.begin();\n+        ContainerTransactionContext transactionContext = transactionContextManager.newContainerTransactionContext();\n         ConnectionInfo connectionInfo1 = makeConnectionInfo();\n         transactionCachingInterceptor.getConnection(connectionInfo1);\n         assertTrue(\"Expected to get an initial connection\", obtainedConnectionInfo != null);\n@@ -78,9 +79,7 @@ public void testGetConnectionInTransaction() throws Exception {\n     }\n \n     public void testGetUnshareableConnectionsInTransaction() throws Exception {\n-        ContainerTransactionContext transactionContext = new ContainerTransactionContext(transactionManager);\n-        TransactionContext.setContext(transactionContext);\n-        transactionContext.begin();\n+        ContainerTransactionContext transactionContext = transactionContextManager.newContainerTransactionContext();\n         ConnectionInfo connectionInfo1 = makeConnectionInfo();\n         connectionInfo1.setUnshareable(true);\n         transactionCachingInterceptor.getConnection(connectionInfo1);\n@@ -129,7 +128,7 @@ public void testGetConnectionOutsideTransaction() throws Exception {\n         assertTrue(\"Expected to get an initial connection\", obtainedConnectionInfo != null);\n         assertTrue(\"Expected nothing returned yet\", returnedConnectionInfo == null);\n         assertTrue(\"Expected no ManagedConnectionInfo in the TransactionContext\",\n-                null == TransactionContext.getContext().getManagedConnectionInfo(transactionCachingInterceptor));\n+                null == transactionContextManager.getContext().getManagedConnectionInfo(transactionCachingInterceptor));\n         obtainedConnectionInfo = null;\n         ConnectionInfo connectionInfo2 = makeConnectionInfo();\n         transactionCachingInterceptor.getConnection(connectionInfo2);\n@@ -138,32 +137,28 @@ public void testGetConnectionOutsideTransaction() throws Exception {\n         assertTrue(\"Expected different ManagedConnectionInfo in both ConnectionInfos\",\n                 connectionInfo1.getManagedConnectionInfo() != connectionInfo2.getManagedConnectionInfo());\n         assertTrue(\"Expected no ManagedConnectionInfo in the TransactionContext\",\n-                null == TransactionContext.getContext().getManagedConnectionInfo(transactionCachingInterceptor));\n+                null == transactionContextManager.getContext().getManagedConnectionInfo(transactionCachingInterceptor));\n         //we didn't create any handles, so the \"ManagedConnection\" should be returned.\n-        assertTrue(\"Expected TransactionContext to report inactive\", !TransactionContext.getContext().isActive());\n+        assertTrue(\"Expected TransactionContext to report inactive\", !transactionContextManager.getContext().isActive());\n         transactionCachingInterceptor.returnConnection(connectionInfo1, ConnectionReturnAction.RETURN_HANDLE);\n         assertTrue(\"Expected connection to be returned\", returnedConnectionInfo != null);\n         returnedConnectionInfo = null;\n         transactionCachingInterceptor.returnConnection(connectionInfo2, ConnectionReturnAction.RETURN_HANDLE);\n         assertTrue(\"Expected connection to be returned\", returnedConnectionInfo != null);\n \n-        assertTrue(\"Expected TransactionContext to report inactive\", !TransactionContext.getContext().isActive());\n+        assertTrue(\"Expected TransactionContext to report inactive\", !transactionContextManager.getContext().isActive());\n \n     }\n \n     public void testTransactionIndependence() throws Exception {\n-        ContainerTransactionContext transactionContext1 = new ContainerTransactionContext(transactionManager);\n-        TransactionContext.setContext(transactionContext1);\n-        transactionContext1.begin();\n+        ContainerTransactionContext transactionContext1 = transactionContextManager.newContainerTransactionContext();\n         ConnectionInfo connectionInfo1 = makeConnectionInfo();\n         transactionCachingInterceptor.getConnection(connectionInfo1);\n         obtainedConnectionInfo = null;\n \n         //start a second transaction\n         transactionContext1.suspend();\n-        ContainerTransactionContext transactionContext2 = new ContainerTransactionContext(transactionManager);\n-        TransactionContext.setContext(transactionContext2);\n-        transactionContext2.begin();\n+        ContainerTransactionContext transactionContext2 = transactionContextManager.newContainerTransactionContext();\n         ConnectionInfo connectionInfo2 = makeConnectionInfo();\n         transactionCachingInterceptor.getConnection(connectionInfo2);\n         assertTrue(\"Expected to get a second connection\", obtainedConnectionInfo != null);",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java",
                "sha": "a53c2aa916e94b13ce784d6214f28386719692b4",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 16,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java",
                "patch": "@@ -18,16 +18,14 @@\n package org.apache.geronimo.connector.outbound;\n \n import javax.resource.ResourceException;\n-import javax.transaction.TransactionManager;\n import javax.transaction.xa.XAException;\n import javax.transaction.xa.XAResource;\n import javax.transaction.xa.Xid;\n \n import org.apache.geronimo.transaction.context.ContainerTransactionContext;\n-import org.apache.geronimo.transaction.context.TransactionContext;\n-import org.apache.geronimo.transaction.context.UnspecifiedTransactionContext;\n-import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.manager.NamedXAResource;\n+import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n \n /**\n  *\n@@ -43,10 +41,13 @@\n     private boolean ended;\n     private boolean returned;\n     private boolean committed;\n+    private TransactionContextManager transactionContextManager;\n \n     protected void setUp() throws Exception {\n         super.setUp();\n-        transactionEnlistingInterceptor = new TransactionEnlistingInterceptor(this);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl();\n+        transactionContextManager = new TransactionContextManager(transactionManager, transactionManager, null);\n+        transactionEnlistingInterceptor = new TransactionEnlistingInterceptor(this, transactionContextManager);\n     }\n \n     protected void tearDown() throws Exception {\n@@ -60,7 +61,7 @@ protected void tearDown() throws Exception {\n \n     public void testNoTransaction() throws Exception {\n         ConnectionInfo connectionInfo = makeConnectionInfo();\n-        TransactionContext.setContext(new UnspecifiedTransactionContext());\n+        transactionContextManager.newUnspecifiedTransactionContext();\n         transactionEnlistingInterceptor.getConnection(connectionInfo);\n         assertTrue(\"Expected not started\", !started);\n         assertTrue(\"Expected not ended\", !ended);\n@@ -70,10 +71,7 @@ public void testNoTransaction() throws Exception {\n     }\n \n     public void testTransactionShareableConnection() throws Exception {\n-        TransactionManager transactionManager = new TransactionManagerImpl();\n-        ContainerTransactionContext transactionContext = new ContainerTransactionContext(transactionManager);\n-        TransactionContext.setContext(transactionContext);\n-        transactionContext.begin();\n+        ContainerTransactionContext transactionContext = transactionContextManager.newContainerTransactionContext();\n         ConnectionInfo connectionInfo = makeConnectionInfo();\n         transactionEnlistingInterceptor.getConnection(connectionInfo);\n         assertTrue(\"Expected started\", started);\n@@ -83,15 +81,12 @@ public void testTransactionShareableConnection() throws Exception {\n         assertTrue(\"Expected not started\", !started);\n         assertTrue(\"Expected ended\", ended);\n         assertTrue(\"Expected returned\", returned);\n-        transactionManager.commit();\n+        transactionContext.commit();\n         assertTrue(\"Expected committed\", committed);\n     }\n \n     public void testTransactionUnshareableConnection() throws Exception {\n-        TransactionManager transactionManager = new TransactionManagerImpl();\n-        ContainerTransactionContext transactionContext = new ContainerTransactionContext(transactionManager);\n-        TransactionContext.setContext(transactionContext);\n-        transactionContext.begin();\n+        ContainerTransactionContext transactionContext = transactionContextManager.newContainerTransactionContext();\n         ConnectionInfo connectionInfo = makeConnectionInfo();\n         connectionInfo.setUnshareable(true);\n         transactionEnlistingInterceptor.getConnection(connectionInfo);\n@@ -102,7 +97,7 @@ public void testTransactionUnshareableConnection() throws Exception {\n         assertTrue(\"Expected not started\", !started);\n         assertTrue(\"Expected ended\", ended);\n         assertTrue(\"Expected returned\", returned);\n-        transactionManager.commit();\n+        transactionContext.commit();\n         assertTrue(\"Expected committed\", committed);\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java",
                "sha": "a906139a654be30ccee3965980f5888c3260fc08",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/outbound/connectiontracking/DefaultComponentInterceptor.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/connectiontracking/DefaultComponentInterceptor.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 8,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/connectiontracking/DefaultComponentInterceptor.java",
                "patch": "@@ -21,34 +21,46 @@\n import org.apache.geronimo.transaction.TrackedConnectionAssociator;\n import org.apache.geronimo.transaction.context.TransactionContext;\n import org.apache.geronimo.transaction.context.UnspecifiedTransactionContext;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  * Sample functionality for an interceptor that enables connection caching and obtaining\n  * connections outside a UserTransaction.\n  *\n  * @version $Rev$ $Date$\n- *\n- * */\n+ */\n public class DefaultComponentInterceptor implements DefaultInterceptor {\n \n     private final DefaultInterceptor next;\n     private final TrackedConnectionAssociator trackedConnectionAssociator;\n+    private final TransactionContextManager transactionContextManager;\n \n     public DefaultComponentInterceptor(DefaultInterceptor next,\n-            TrackedConnectionAssociator trackedConnectionAssociator) {\n+                                       TrackedConnectionAssociator trackedConnectionAssociator,\n+                                       TransactionContextManager transactionContextManager) {\n         this.next = next;\n         this.trackedConnectionAssociator = trackedConnectionAssociator;\n+        this.transactionContextManager = transactionContextManager;\n     }\n \n     public Object invoke(InstanceContext newInstanceContext) throws Throwable {\n-        if (TransactionContext.getContext() == null) {\n-            TransactionContext.setContext(new UnspecifiedTransactionContext());\n+        TransactionContext transactionContext = transactionContextManager.getContext();\n+        if (transactionContext == null) {\n+            transactionContextManager.newUnspecifiedTransactionContext();\n         }\n-        InstanceContext oldInstanceContext = trackedConnectionAssociator.enter(newInstanceContext);\n         try {\n-            return next.invoke(newInstanceContext);\n+            InstanceContext oldInstanceContext = trackedConnectionAssociator.enter(newInstanceContext);\n+            try {\n+                return next.invoke(newInstanceContext);\n+            } finally {\n+                trackedConnectionAssociator.exit(oldInstanceContext);\n+            }\n         } finally {\n-            trackedConnectionAssociator.exit(oldInstanceContext);\n+            if (transactionContext == null) {\n+                transactionContext = transactionContextManager.getContext();\n+                transactionContext.commit();\n+                transactionContextManager.setContext(null);\n+            }\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/outbound/connectiontracking/DefaultComponentInterceptor.java",
                "sha": "7d96cd44eb0d59c80f829c68604dc987aefb9198",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/work/PooledWorkManagerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/work/PooledWorkManagerTest.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/work/PooledWorkManagerTest.java",
                "patch": "@@ -25,6 +25,7 @@\n import javax.resource.spi.work.WorkListener;\n \n import junit.framework.TestCase;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  * Timing is crucial for this test case, which focuses on the synchronization\n@@ -37,7 +38,8 @@\n     private GeronimoWorkManager workManager;\n \n     protected void setUp() throws Exception {\n-        workManager = new GeronimoWorkManager(1, null);\n+        TransactionContextManager transactionContextManager = new TransactionContextManager();\n+        workManager = new GeronimoWorkManager(1, transactionContextManager);\n         workManager.doStart();\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/connector/src/test/org/apache/geronimo/connector/work/PooledWorkManagerTest.java",
                "sha": "32942c16a1eee24bf23cfa760292174986da74ac",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/jetty/src/java/org/apache/geronimo/jetty/JettyWebAppContext.java",
                "changes": 113,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/jetty/src/java/org/apache/geronimo/jetty/JettyWebAppContext.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 35,
                "filename": "modules/jetty/src/java/org/apache/geronimo/jetty/JettyWebAppContext.java",
                "patch": "@@ -22,7 +22,6 @@\n import java.net.URI;\n import java.net.URL;\n import java.util.Set;\n-\n import javax.resource.ResourceException;\n \n import org.apache.commons.logging.Log;\n@@ -38,6 +37,7 @@\n import org.apache.geronimo.transaction.InstanceContext;\n import org.apache.geronimo.transaction.TrackedConnectionAssociator;\n import org.apache.geronimo.transaction.UserTransactionImpl;\n+import org.apache.geronimo.transaction.context.TransactionContext;\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.mortbay.http.HttpException;\n import org.mortbay.http.HttpRequest;\n@@ -161,16 +161,32 @@ public void handle(String pathInContext,\n             // Turn on the UserTransaction\n             userTransaction.setOnline(true);\n \n-            if (transactionContextManager.getContext() == null) {\n-                transactionContextManager.newUnspecifiedTransactionContext();\n+            TransactionContext transactionContext = transactionContextManager.getContext();\n+            if (transactionContext == null) {\n+                transactionContext = transactionContextManager.newUnspecifiedTransactionContext();\n+            } else {\n+                transactionContext = null;\n             }\n+\n             try {\n-                oldInstanceContext = associator.enter(new DefaultInstanceContext(unshareableResources, applicationManagedSecurityResources));\n-            } catch (ResourceException e) {\n-                throw new RuntimeException(e);\n-            }\n+                try {\n+                    oldInstanceContext = associator.enter(new DefaultInstanceContext(unshareableResources, applicationManagedSecurityResources));\n+                } catch (ResourceException e) {\n+                    throw new RuntimeException(e);\n+                }\n \n-            super.handle(pathInContext, pathParams, httpRequest, httpResponse);\n+                super.handle(pathInContext, pathParams, httpRequest, httpResponse);\n+            } finally {\n+                if (transactionContext != null) {\n+                    transactionContextManager.setContext(null);\n+                    try {\n+                        transactionContext.commit();\n+                    } catch (Exception e) {\n+                        //TODO this is undoubtedly the wrong error code!\n+                        throw (HttpException) new HttpException(500, \"Problem committing unspecified transaction context\").initCause(e);\n+                    }\n+                }\n+            }\n         } finally {\n             try {\n                 associator.exit(oldInstanceContext);\n@@ -187,12 +203,11 @@ public void handle(String pathInContext,\n     public void doStart() throws WaitingException, Exception {\n \n         // merge Geronimo and Jetty Lifecycles\n-        if (!isStarting())\n-        {\n+        if (!isStarting()) {\n             super.start();\n             return;\n         }\n-        \n+\n         if (uri.isAbsolute()) {\n             setWAR(uri.toString());\n         } else {\n@@ -212,18 +227,33 @@ public void doStart() throws WaitingException, Exception {\n                 // Turn on the UserTransaction\n                 userTransaction.setOnline(true);\n \n-                //TODO should this always create an unspecified context, or might this be executed in a tx?\n-                if (transactionContextManager.getContext() == null) {\n-                    transactionContextManager.newUnspecifiedTransactionContext();\n+                TransactionContext transactionContext = transactionContextManager.getContext();\n+                if (transactionContext == null) {\n+                    transactionContext = transactionContextManager.newUnspecifiedTransactionContext();\n+                } else {\n+                    transactionContext = null;\n                 }\n \n                 try {\n-                    oldInstanceContext = associator.enter(new DefaultInstanceContext(unshareableResources, applicationManagedSecurityResources));\n-                } catch (ResourceException e) {\n-                    throw new RuntimeException(e);\n-                }\n \n-                super.doStart();\n+                    try {\n+                        oldInstanceContext = associator.enter(new DefaultInstanceContext(unshareableResources, applicationManagedSecurityResources));\n+                    } catch (ResourceException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+\n+                    super.doStart();\n+                } finally {\n+                    if (transactionContext != null) {\n+                        transactionContextManager.setContext(null);\n+                        try {\n+                            transactionContext.commit();\n+                        } catch (Exception e) {\n+                            //TODO this is undoubtedly the wrong error code!\n+                            throw (HttpException) new HttpException(500, \"Problem committing unspecified transaction context\").initCause(e);\n+                        }\n+                    }\n+                }\n             } finally {\n                 try {\n                     associator.exit(oldInstanceContext);\n@@ -245,12 +275,11 @@ public void doStart() throws WaitingException, Exception {\n     public void doStop() throws Exception {\n \n         // merge Geronimo and Jetty Lifecycles\n-        if (!isStopping())\n-        {\n+        if (!isStopping()) {\n             super.stop();\n             return;\n         }\n-        \n+\n         ClassLoader oldCL = Thread.currentThread().getContextClassLoader();\n         try {\n             Thread.currentThread().setContextClassLoader(classLoader);\n@@ -261,23 +290,37 @@ public void doStop() throws Exception {\n                 // Turn on the UserTransaction\n                 userTransaction.setOnline(true);\n \n-                //TODO should this always create an unspecified context, or might this be executed in a tx?\n-                if (transactionContextManager.getContext() == null) {\n-                    transactionContextManager.newUnspecifiedTransactionContext();\n+                TransactionContext transactionContext = transactionContextManager.getContext();\n+                if (transactionContext == null) {\n+                    transactionContext = transactionContextManager.newUnspecifiedTransactionContext();\n+                } else {\n+                    transactionContext = null;\n                 }\n-\n                 try {\n-                    oldInstanceContext = associator.enter(new DefaultInstanceContext(unshareableResources, applicationManagedSecurityResources));\n-                } catch (ResourceException e) {\n-                    throw new RuntimeException(e);\n-                }\n \n-                while (true) {\n                     try {\n-                        super.doStop();\n-                        break;\n-                    } catch (InterruptedException e) {\n-                        continue;\n+                        oldInstanceContext = associator.enter(new DefaultInstanceContext(unshareableResources, applicationManagedSecurityResources));\n+                    } catch (ResourceException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+\n+                    while (true) {\n+                        try {\n+                            super.doStop();\n+                            break;\n+                        } catch (InterruptedException e) {\n+                            continue;\n+                        }\n+                    }\n+                } finally {\n+                    if (transactionContext != null) {\n+                        transactionContextManager.setContext(null);\n+                        try {\n+                            transactionContext.commit();\n+                        } catch (Exception e) {\n+                            //TODO this is undoubtedly the wrong error code!\n+                            throw (HttpException) new HttpException(500, \"Problem committing unspecified transaction context\").initCause(e);\n+                        }\n                     }\n                 }\n             } finally {",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/jetty/src/java/org/apache/geronimo/jetty/JettyWebAppContext.java",
                "sha": "b984ec2af373019769db27fd44a3e71be0663cfa",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/ThreadPooledTimer.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/java/org/apache/geronimo/timer/ThreadPooledTimer.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 4,
                "filename": "modules/timer/src/java/org/apache/geronimo/timer/ThreadPooledTimer.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.geronimo.gbean.GBeanLifecycle;\n import org.apache.geronimo.gbean.WaitingException;\n import org.apache.geronimo.transaction.context.TransactionContext;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  *\n@@ -49,20 +50,22 @@\n     private final ExecutorTaskFactory executorTaskFactory;\n     private final WorkerPersistence workerPersistence;\n     private final Executor executor;\n+    private final TransactionContextManager transactionContextManager;\n \n     private Timer delegate;\n \n     private final Map idToWorkInfoMap = Collections.synchronizedMap(new HashMap());\n \n     //default constructor for use as reference endpoint.\n     public ThreadPooledTimer() {\n-        this(null, null, null);\n+        this(null, null, null, null);\n     }\n \n-    public ThreadPooledTimer(ExecutorTaskFactory executorTaskFactory, WorkerPersistence workerPersistence, Executor executor) {\n+    public ThreadPooledTimer(ExecutorTaskFactory executorTaskFactory, WorkerPersistence workerPersistence, Executor executor, TransactionContextManager transactionContextManager) {\n         this.executorTaskFactory = executorTaskFactory;\n         this.workerPersistence = workerPersistence;\n         this.executor = executor;\n+        this.transactionContextManager = transactionContextManager;\n     }\n \n     public void doStart() throws WaitingException, Exception {\n@@ -194,8 +197,9 @@ private WorkInfo createWorker(String key, UserTaskFactory userTaskFactory, Execu\n     }\n \n     void registerSynchronization(Synchronization sync) throws RollbackException, SystemException {\n-        TransactionContext transactionContext = TransactionContext.getContext();\n-        Transaction transaction = transactionContext == null ? null : transactionContext.getTransaction();\n+        TransactionContext transactionContext = transactionContextManager.getContext();\n+        //TODO move the registerSynchronization to the TransactionContext\n+        Transaction transaction = transactionContext == null? null: transactionContext.getTransaction();\n         if (transaction == null) {\n             sync.beforeCompletion();\n             sync.afterCompletion(Status.STATUS_COMMITTED);",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/ThreadPooledTimer.java",
                "sha": "5b2a5e6002909a1e1c0307344566217c1fc5f2e7",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/jdbc/JDBCStoreThreadPooledNonTransactionalTimer.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/java/org/apache/geronimo/timer/jdbc/JDBCStoreThreadPooledNonTransactionalTimer.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 8,
                "filename": "modules/timer/src/java/org/apache/geronimo/timer/jdbc/JDBCStoreThreadPooledNonTransactionalTimer.java",
                "patch": "@@ -25,20 +25,19 @@\n import org.apache.geronimo.timer.NontransactionalExecutorTaskFactory;\n import org.apache.geronimo.timer.PersistentTimer;\n import org.apache.geronimo.timer.ThreadPooledTimer;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n- *\n- *\n  * @version $Rev$ $Date$\n- *\n- * */\n+ */\n public class JDBCStoreThreadPooledNonTransactionalTimer extends ThreadPooledTimer {\n \n     public JDBCStoreThreadPooledNonTransactionalTimer(ManagedConnectionFactoryWrapper managedConnectionFactoryWrapper,\n-            Executor threadPool,\n-            Kernel kernel) {\n+                                                      TransactionContextManager transactionContextManager,\n+                                                      Executor threadPool,\n+                                                      Kernel kernel) {\n         super(new NontransactionalExecutorTaskFactory(),\n-                new JDBCWorkerPersistence(kernel, managedConnectionFactoryWrapper), threadPool);\n+                new JDBCWorkerPersistence(kernel, managedConnectionFactoryWrapper), threadPool, transactionContextManager);\n     }\n \n \n@@ -50,9 +49,11 @@ public JDBCStoreThreadPooledNonTransactionalTimer(ManagedConnectionFactoryWrappe\n \n         infoFactory.addReference(\"ManagedConnectionFactoryWrapper\", ManagedConnectionFactoryWrapper.class);\n         infoFactory.addReference(\"ThreadPool\", Executor.class);\n+        infoFactory.addReference(\"TransactionContextManager\", TransactionContextManager.class);\n+\n         infoFactory.addAttribute(\"kernel\", Kernel.class, false);\n \n-        infoFactory.setConstructor(new String[] {\"ManagedConnectionFactoryWrapper\", \"ThreadPool\", \"kernel\"});\n+        infoFactory.setConstructor(new String[]{\"ManagedConnectionFactoryWrapper\", \"TransactionContextManager\", \"ThreadPool\", \"kernel\"});\n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/jdbc/JDBCStoreThreadPooledNonTransactionalTimer.java",
                "sha": "911ad1de5ed09d68ae504877e13f851e16af0c09",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/jdbc/JDBCStoreThreadPooledTransactionalTimer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/java/org/apache/geronimo/timer/jdbc/JDBCStoreThreadPooledTransactionalTimer.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/timer/src/java/org/apache/geronimo/timer/jdbc/JDBCStoreThreadPooledTransactionalTimer.java",
                "patch": "@@ -41,7 +41,7 @@ public JDBCStoreThreadPooledTransactionalTimer(int repeatCount,\n             Executor threadPool,\n             Kernel kernel) {\n         super(new TransactionalExecutorTaskFactory(transactionContextManager, repeatCount),\n-                new JDBCWorkerPersistence(kernel, managedConnectionFactoryWrapper), threadPool);\n+                new JDBCWorkerPersistence(kernel, managedConnectionFactoryWrapper), threadPool, transactionContextManager);\n     }\n \n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/jdbc/JDBCStoreThreadPooledTransactionalTimer.java",
                "sha": "543e41b1f4163f33552318da0262910030a7f5d6",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/vm/VMStoreThreadPooledNonTransactionalTimer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/java/org/apache/geronimo/timer/vm/VMStoreThreadPooledNonTransactionalTimer.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 3,
                "filename": "modules/timer/src/java/org/apache/geronimo/timer/vm/VMStoreThreadPooledNonTransactionalTimer.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.geronimo.timer.NontransactionalExecutorTaskFactory;\n import org.apache.geronimo.timer.PersistentTimer;\n import org.apache.geronimo.timer.ThreadPooledTimer;\n+import org.apache.geronimo.transaction.context.TransactionContextManager;\n \n /**\n  *\n@@ -32,9 +33,9 @@\n  * */\n public class VMStoreThreadPooledNonTransactionalTimer extends ThreadPooledTimer {\n \n-    public VMStoreThreadPooledNonTransactionalTimer(Executor threadPool) {\n+    public VMStoreThreadPooledNonTransactionalTimer(TransactionContextManager transactionContextManager, Executor threadPool) {\n         super(new NontransactionalExecutorTaskFactory(),\n-                new VMWorkerPersistence(), threadPool);\n+                new VMWorkerPersistence(), threadPool, transactionContextManager);\n     }\n \n \n@@ -45,8 +46,9 @@ public VMStoreThreadPooledNonTransactionalTimer(Executor threadPool) {\n         infoFactory.addInterface(PersistentTimer.class);\n \n         infoFactory.addReference(\"ThreadPool\", Executor.class);\n+        infoFactory.addReference(\"TransactionContextManager\", TransactionContextManager.class);\n \n-        infoFactory.setConstructor(new String[] {\"ThreadPool\"});\n+        infoFactory.setConstructor(new String[] {\"TransactionContextManager\", \"ThreadPool\"});\n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/vm/VMStoreThreadPooledNonTransactionalTimer.java",
                "sha": "749f1093681d3b24e23019aa743aee0a06ec7bba",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/vm/VMStoreThreadPooledTransactionalTimer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/java/org/apache/geronimo/timer/vm/VMStoreThreadPooledTransactionalTimer.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/timer/src/java/org/apache/geronimo/timer/vm/VMStoreThreadPooledTransactionalTimer.java",
                "patch": "@@ -37,7 +37,7 @@ public VMStoreThreadPooledTransactionalTimer(int repeatCount,\n             TransactionContextManager transactionContextManager,\n             Executor threadPool) {\n         super(new TransactionalExecutorTaskFactory(transactionContextManager, repeatCount),\n-                new VMWorkerPersistence(), threadPool);\n+                new VMWorkerPersistence(), threadPool, transactionContextManager);\n     }\n \n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/java/org/apache/geronimo/timer/vm/VMStoreThreadPooledTransactionalTimer.java",
                "sha": "3ce52e74940a8de9fee2b2c5c4e64eab7dea3b05",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/test/org/apache/geronimo/timer/AbstractThreadPooledTimerTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/test/org/apache/geronimo/timer/AbstractThreadPooledTimerTest.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/timer/src/test/org/apache/geronimo/timer/AbstractThreadPooledTimerTest.java",
                "patch": "@@ -61,7 +61,7 @@ protected void setUp() throws Exception {\n         threadPool.setPoolName(\"TestPool\");\n         threadPool.doStart();\n         WorkerPersistence workerPersistence = new VMWorkerPersistence();\n-        timer = new ThreadPooledTimer(executableWorkFactory, workerPersistence, threadPool);\n+        timer = new ThreadPooledTimer(executableWorkFactory, workerPersistence, threadPool, transactionContextManager);\n         timer.doStart();\n \n         counter.set(0);",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/test/org/apache/geronimo/timer/AbstractThreadPooledTimerTest.java",
                "sha": "04f875abb5cd72aec2dfb367f02efd5963b75c4c",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 7,
                "filename": "modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java",
                "patch": "@@ -17,12 +17,8 @@\n \n package org.apache.geronimo.timer;\n \n-import javax.transaction.TransactionManager;\n-\n-import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n-import org.apache.geronimo.timer.NontransactionalExecutorTaskFactory;\n-import org.apache.geronimo.timer.AbstractThreadPooledTimerTest;\n+import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n \n /**\n  *\n@@ -33,8 +29,8 @@\n public class NontransactionalThreadPooledTimerTest extends AbstractThreadPooledTimerTest {\n \n     protected void setUp() throws Exception {\n-        TransactionManager transactionManager = new TransactionManagerImpl();\n-        transactionContextManager = new TransactionContextManager(transactionManager);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl();\n+        transactionContextManager = new TransactionContextManager(transactionManager, transactionManager, null);\n         executableWorkFactory = new NontransactionalExecutorTaskFactory();\n         super.setUp();\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java",
                "sha": "bbd22d1116fa3df2d04629d8fbd761e054c0ef14",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 7,
                "filename": "modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java",
                "patch": "@@ -17,12 +17,8 @@\n \n package org.apache.geronimo.timer;\n \n-import javax.transaction.TransactionManager;\n-\n-import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n-import org.apache.geronimo.timer.TransactionalExecutorTaskFactory;\n-import org.apache.geronimo.timer.AbstractThreadPooledTimerTest;\n+import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n \n /**\n  *\n@@ -33,8 +29,8 @@\n public class TransactionalThreadPooledTimerTest extends AbstractThreadPooledTimerTest {\n \n     protected void setUp() throws Exception {\n-        TransactionManager transactionManager = new TransactionManagerImpl();\n-        transactionContextManager = new TransactionContextManager(transactionManager);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl();\n+        transactionContextManager = new TransactionContextManager(transactionManager, transactionManager, null);\n         executableWorkFactory = new TransactionalExecutorTaskFactory(transactionContextManager, 1);\n         super.setUp();\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java",
                "sha": "6757c15305e51be1fc840c9fe96159810df99c6b",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/TransactionManagerProxy.java",
                "changes": 253,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/TransactionManagerProxy.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 189,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/TransactionManagerProxy.java",
                "patch": "@@ -19,12 +19,10 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-\n-import javax.resource.spi.XATerminator;\n+import java.util.HashMap;\n import javax.transaction.HeuristicMixedException;\n import javax.transaction.HeuristicRollbackException;\n import javax.transaction.InvalidTransactionException;\n@@ -35,7 +33,6 @@\n import javax.transaction.Transaction;\n import javax.transaction.TransactionManager;\n import javax.transaction.xa.XAException;\n-import javax.transaction.xa.XAResource;\n import javax.transaction.xa.Xid;\n \n import org.apache.commons.logging.Log;\n@@ -47,12 +44,12 @@\n import org.apache.geronimo.gbean.ReferenceCollectionEvent;\n import org.apache.geronimo.gbean.ReferenceCollectionListener;\n import org.apache.geronimo.gbean.WaitingException;\n+import org.apache.geronimo.transaction.context.TransactionContext;\n+import org.apache.geronimo.transaction.context.UnspecifiedTransactionContext;\n import org.apache.geronimo.transaction.manager.NamedXAResource;\n import org.apache.geronimo.transaction.manager.Recovery;\n import org.apache.geronimo.transaction.manager.ResourceManager;\n import org.apache.geronimo.transaction.manager.XidImporter;\n-import org.apache.geronimo.transaction.context.TransactionContext;\n-import org.apache.geronimo.transaction.context.UnspecifiedTransactionContext;\n \n /**\n  * A wrapper for a TransactionManager that wraps all Transactions in a TransactionProxy\n@@ -62,23 +59,19 @@\n  *\n  * @version $Rev$ $Date$\n  */\n-public class TransactionManagerProxy implements TransactionManager, XATerminator, XAWork, GBeanLifecycle {\n-    private static final boolean NOT_IN_RECOVERY = false;\n-    private static final boolean IN_RECOVERY = true;\n-\n+public class TransactionManagerProxy implements TransactionManager, XidImporter, Recovery, GBeanLifecycle {\n     private static final Log recoveryLog = LogFactory.getLog(\"RecoveryController\");\n \n     private final TransactionManager delegate;\n     private final XidImporter importer;\n     private final ThreadLocal threadTx = new ThreadLocal();\n-    private final Map importedTransactions = new HashMap();\n-    private boolean recoveryState = NOT_IN_RECOVERY;\n     private final Recovery recovery;\n     private final ReferenceCollection resourceManagers;\n     private List recoveryErrors = new ArrayList();\n \n     /**\n      * Constructor taking the TransactionManager to wrap.\n+     *\n      * @param delegate the TransactionManager that should be wrapped\n      */\n     public TransactionManagerProxy(TransactionManager delegate, XidImporter importer, Recovery recovery, Collection resourceManagers) {\n@@ -103,6 +96,7 @@ public TransactionManagerProxy(ConstructorParams params) {\n         this(params.delegate, params.xidImporter, params.recovery, params.resourceManagers);\n     }\n \n+    //TODO NOTE!!! this should be called in an unspecified transaction context, but we cannot enforce this restriction!\n     public void doStart() throws WaitingException, Exception {\n         recovery.recoverLog();\n         List copy = null;\n@@ -127,29 +121,23 @@ public void memberRemoved(ReferenceCollectionEvent event) {\n     }\n \n     private void recoverResourceManager(ResourceManager resourceManager) {\n-        TransactionContext oldTransactionContext = TransactionContext.getContext();\n+        NamedXAResource namedXAResource = null;\n         try {\n-            TransactionContext.setContext(new UnspecifiedTransactionContext());\n-            NamedXAResource namedXAResource = null;\n+            namedXAResource = resourceManager.getRecoveryXAResources();\n+        } catch (SystemException e) {\n+            recoveryLog.error(e);\n+            recoveryErrors.add(e);\n+            return;\n+        }\n+        if (namedXAResource != null) {\n             try {\n-                namedXAResource = resourceManager.getRecoveryXAResources();\n-            } catch (SystemException e) {\n+                recovery.recoverResourceManager(namedXAResource);\n+            } catch (XAException e) {\n                 recoveryLog.error(e);\n                 recoveryErrors.add(e);\n-                return;\n-            }\n-            if (namedXAResource != null) {\n-                try {\n-                    recovery.recoverResourceManager(namedXAResource);\n-                } catch (XAException e) {\n-                    recoveryLog.error(e);\n-                    recoveryErrors.add(e);\n-                } finally {\n-                    resourceManager.returnResource(namedXAResource);\n-                }\n+            } finally {\n+                resourceManager.returnResource(namedXAResource);\n             }\n-        } finally {\n-            TransactionContext.setContext(oldTransactionContext);\n         }\n     }\n \n@@ -225,187 +213,74 @@ public void setRollbackOnly() throws IllegalStateException, SystemException {\n         tx.setRollbackOnly();\n     }\n \n-    /**\n-     * @see javax.resource.spi.XATerminator#commit(javax.transaction.xa.Xid, boolean)\n-     */\n-    public void commit(Xid xid, boolean onePhase) throws XAException {\n-        ImportedTransactionInfo txInfo;\n-        synchronized (importedTransactions) {\n-            txInfo = (ImportedTransactionInfo) importedTransactions.remove(xid);\n-        }\n-        if (txInfo == null) {\n-            throw new XAException(\"No imported transaction for xid: \" + xid);\n-        }\n-        TransactionProxy tx = txInfo.getTransactionProxy();\n \n-        try {\n-            int status = tx.getStatus();\n-            assert status == Status.STATUS_ACTIVE || status == Status.STATUS_PREPARED;\n-        } catch (SystemException e) {\n-            throw new XAException();\n+    //XidImporter implementation. Wrap and unwrap TransactionProxy.\n+    public Transaction importXid(Xid xid) throws XAException, SystemException {\n+        if (threadTx.get() != null) {\n+            throw new IllegalStateException(\"Transaction already associated with current thread\");\n         }\n-        importer.commit(tx.getDelegate(), onePhase);\n+        TransactionProxy transactionProxy = new TransactionProxy(importer.importXid(xid));\n+        threadTx.set(transactionProxy);\n+        return transactionProxy;\n     }\n \n-    /**\n-     * @see javax.resource.spi.XATerminator#forget(javax.transaction.xa.Xid)\n-     */\n-    public void forget(Xid xid) throws XAException {\n-        ImportedTransactionInfo txInfo;\n-        synchronized (importedTransactions) {\n-            txInfo = (ImportedTransactionInfo) importedTransactions.remove(xid);\n-        }\n-        if (txInfo == null) {\n-            throw new XAException(\"No imported transaction for xid: \" + xid);\n-        }\n-        TransactionProxy tx = txInfo.getTransactionProxy();\n-        //todo is there a correct status test here?\n-//        try {\n-//            int status = tx.getStatus();\n-//            assert status == Status.STATUS_ACTIVE || status == Status.STATUS_PREPARED;\n-//        } catch (SystemException e) {\n-//            throw new XAException();\n-//        }\n-        importer.forget(tx.getDelegate());\n+    //TODO how do these relate to threadTx???? probably not at all...\n+    public void commit(Transaction tx, boolean onePhase) throws XAException {\n+        importer.commit(((TransactionProxy) tx).getDelegate(), onePhase);\n     }\n \n-    /**\n-     * @see javax.resource.spi.XATerminator#prepare(javax.transaction.xa.Xid)\n-     */\n-    public int prepare(Xid xid) throws XAException {\n-        ImportedTransactionInfo txInfo;\n-        synchronized (importedTransactions) {\n-            txInfo = (ImportedTransactionInfo) importedTransactions.get(xid);\n-        }\n-        if (txInfo == null) {\n-            throw new XAException(\"No imported transaction for xid: \" + xid);\n-        }\n-        TransactionProxy tx = txInfo.getTransactionProxy();\n-        try {\n-            int status = tx.getStatus();\n-            assert status == Status.STATUS_ACTIVE;\n-        } catch (SystemException e) {\n-            throw new XAException();\n-        }\n-        return importer.prepare(tx.getDelegate());\n+    public void forget(Transaction tx) throws XAException {\n+        importer.forget(((TransactionProxy) tx).getDelegate());\n     }\n \n-    /**\n-     * @see javax.resource.spi.XATerminator#recover(int)\n-     */\n-    public Xid[] recover(int flag) throws XAException {\n-        if (recoveryState == NOT_IN_RECOVERY) {\n-            if ((flag & XAResource.TMSTARTRSCAN) == 0) {\n-                throw new XAException(XAException.XAER_PROTO);\n-            }\n-            recoveryState = IN_RECOVERY;\n-        }\n-        if ((flag & XAResource.TMENDRSCAN) != 0) {\n-            recoveryState = NOT_IN_RECOVERY;\n-        }\n-        //we always return all xids in first call.\n-        //calling \"startrscan\" repeatedly starts at beginning of list again.\n-        if ((flag & XAResource.TMSTARTRSCAN) != 0) {\n-            Map recoveredXidMap = recovery.getExternalXids();\n-            Xid[] recoveredXids = new Xid[recoveredXidMap.size()];\n-            int i = 0;\n-            synchronized (importedTransactions) {\n-                for (Iterator iterator = recoveredXidMap.entrySet().iterator(); iterator.hasNext();) {\n-                    Map.Entry entry = (Map.Entry) iterator.next();\n-                    Xid xid = (Xid) entry.getKey();\n-                    recoveredXids[i++] = xid;\n-                    ImportedTransactionInfo txInfo = new ImportedTransactionInfo(new TransactionProxy((Transaction)entry.getValue()));\n-                    importedTransactions.put(xid, txInfo);\n-                }\n-            }\n-            return recoveredXids;\n-        } else {\n-            return new Xid[0];\n-        }\n+    public int prepare(Transaction tx) throws XAException {\n+        return importer.prepare(((TransactionProxy) tx).getDelegate());\n     }\n \n-    /**\n-     * @see javax.resource.spi.XATerminator#rollback(javax.transaction.xa.Xid)\n-     */\n-    public void rollback(Xid xid) throws XAException {\n-        ImportedTransactionInfo txInfo;\n-        synchronized (importedTransactions) {\n-            txInfo = (ImportedTransactionInfo) importedTransactions.remove(xid);\n-        }\n-        if (txInfo == null) {\n-            throw new XAException(\"No imported transaction for xid: \" + xid);\n-        }\n-        TransactionProxy tx = txInfo.getTransactionProxy();\n+    public void rollback(Transaction tx) throws XAException {\n+        importer.rollback(((TransactionProxy) tx).getDelegate());\n+    }\n \n-        try {\n-            int status = tx.getStatus();\n-            assert status == Status.STATUS_ACTIVE || status == Status.STATUS_PREPARED;\n-        } catch (SystemException e) {\n-            throw new XAException();\n-        }\n-        importer.rollback(tx.getDelegate());\n+    public void setTransactionTimeout(long milliseconds) {\n+        importer.setTransactionTimeout(milliseconds);\n     }\n \n-    public void begin(Xid xid, long txTimeoutMillis) throws XAException, InvalidTransactionException, SystemException {\n-        ImportedTransactionInfo txInfo;\n-        boolean old = true;\n-        synchronized (importedTransactions) {\n-             txInfo = (ImportedTransactionInfo) importedTransactions.get(xid);\n-            if (txInfo == null) {\n-                try {\n-                    txInfo = new ImportedTransactionInfo(new TransactionProxy(importer.importXid(xid)));\n-                    old = false;\n-                } catch (SystemException e) {\n-                    throw (XAException) new XAException(\"Could not import xid\").initCause(e);\n-                }\n-                importedTransactions.put(xid, txInfo);\n-            }\n-            if (txInfo.isActive()) {\n-                throw new XAException(\"Xid already active\");\n-            }\n-            txInfo.setActive(true);\n-        }\n-        threadTx.set(txInfo.getTransactionProxy());\n-        if (old) {\n-            delegate.resume(txInfo.getTransactionProxy().getDelegate());\n-        }\n-        importer.setTransactionTimeout(txTimeoutMillis);\n+    //Recovery implementation\n+    //TODO make an interface of only getExternalIds since other methods don't work.\n+    //Or, decide to expose the other methods.\n+    public void recoverLog() throws XAException {\n+        throw new IllegalStateException(\"Don't call this\");\n     }\n \n-    public void end(Xid xid) throws XAException, SystemException {\n-        synchronized (importedTransactions) {\n-            ImportedTransactionInfo txInfo = (ImportedTransactionInfo) importedTransactions.get(xid);\n-            if (txInfo == null) {\n-                throw new XAException(\"No imported transaction for xid: \" + xid);\n-            }\n-            if (!txInfo.isActive()) {\n-                throw new XAException(\"tx not active for xid: \" + xid);\n-            }\n-            txInfo.setActive(false);\n-        }\n-        threadTx.set(null);\n-        delegate.suspend();\n+    public void recoverResourceManager(NamedXAResource xaResource) throws XAException {\n+        throw new IllegalStateException(\"Don't call this\");\n     }\n \n-    private static class ImportedTransactionInfo {\n-        private final TransactionProxy transactionProxy;\n-        private boolean active;\n+    public boolean hasRecoveryErrors() {\n+        throw new IllegalStateException(\"Don't call this\");\n+    }\n \n-        public ImportedTransactionInfo(TransactionProxy transactionProxy) {\n-            this.transactionProxy = transactionProxy;\n-        }\n+    public List getRecoveryErrors() {\n+        throw new IllegalStateException(\"Don't call this\");\n+    }\n \n-        public TransactionProxy getTransactionProxy() {\n-            return transactionProxy;\n-        }\n+    public boolean localRecoveryComplete() {\n+        throw new IllegalStateException(\"Don't call this\");\n+    }\n \n-        public boolean isActive() {\n-            return active;\n-        }\n+    public int localUnrecoveredCount() {\n+        throw new IllegalStateException(\"Don't call this\");\n+    }\n \n-        public void setActive(boolean active) {\n-            this.active = active;\n+    public Map getExternalXids() {\n+        Map internal = recovery.getExternalXids();\n+        Map external = new HashMap(internal.size());\n+        for (Iterator iterator = internal.entrySet().iterator(); iterator.hasNext();) {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            Transaction tx = (Transaction) entry.getValue();\n+            external.put(entry.getKey(), new TransactionProxy(tx));\n         }\n+        return external;\n     }\n \n     public static final GBeanInfo GBEAN_INFO;",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/TransactionManagerProxy.java",
                "sha": "b07eaec46b03d0749b54f62dc21269abee98ec02",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/geronimo/blob/46889e646949ddd6270b74c66047e736b011ddee/modules/transaction/src/java/org/apache/geronimo/transaction/XAServices.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/XAServices.java?ref=46889e646949ddd6270b74c66047e736b011ddee",
                "deletions": 13,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/XAServices.java",
                "patch": "@@ -1,13 +0,0 @@\n-package org.apache.geronimo.transaction;\n-\n-import javax.transaction.TransactionManager;\n-import javax.resource.spi.XATerminator;\n-\n-/**\n- *\n- *\n- * @version $Rev$ $Date$\n- *\n- * */\n-public interface XAServices extends XATerminator, XAWork {\n-}",
                "raw_url": "https://github.com/apache/geronimo/raw/46889e646949ddd6270b74c66047e736b011ddee/modules/transaction/src/java/org/apache/geronimo/transaction/XAServices.java",
                "sha": "1a7a32788aacddd067ef0084b87301ce5d22509a",
                "status": "removed"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/context/ContainerTransactionContext.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/context/ContainerTransactionContext.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 7,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/context/ContainerTransactionContext.java",
                "patch": "@@ -28,23 +28,23 @@\n import javax.transaction.TransactionManager;\n \n /**\n- *\n- *\n  * @version $Rev$ $Date$\n  */\n public class ContainerTransactionContext extends InheritableTransactionContext {\n     private final TransactionManager txnManager;\n     private Transaction transaction;\n \n-    public ContainerTransactionContext(TransactionManager txnManager) {\n+    public ContainerTransactionContext(TransactionManager txnManager) throws SystemException, NotSupportedException {\n         this.txnManager = txnManager;\n-    }\n-\n-    public void begin() throws SystemException, NotSupportedException {\n         txnManager.begin();\n         transaction = txnManager.getTransaction();\n     }\n \n+    public ContainerTransactionContext(TransactionManager txnManager, Transaction transaction) {\n+        this.txnManager = txnManager;\n+        this.transaction = transaction;\n+    }\n+\n     public void suspend() throws SystemException {\n         Transaction suspendedTransaction = txnManager.suspend();\n         assert (transaction == suspendedTransaction) : \"suspend did not return our transaction\";\n@@ -59,9 +59,13 @@ public void resume() throws SystemException, InvalidTransactionException {\n      * a successful commit...??\n      *\n      * @throws javax.transaction.HeuristicMixedException\n+     *\n      * @throws javax.transaction.HeuristicRollbackException\n+     *\n      * @throws javax.transaction.RollbackException\n+     *\n      * @throws javax.transaction.SystemException\n+     *\n      */\n     public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SystemException {\n         try {\n@@ -139,6 +143,6 @@ public boolean getRollbackOnly() throws SystemException {\n         int status = transaction.getStatus();\n         return (status == Status.STATUS_MARKED_ROLLBACK ||\n                 status == Status.STATUS_ROLLEDBACK ||\n-                status == Status.STATUS_ROLLING_BACK );\n+                status == Status.STATUS_ROLLING_BACK);\n     }\n }",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/context/ContainerTransactionContext.java",
                "sha": "3d35f76c3f0ec34c19ebc65607471f8f787d8727",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContext.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 1,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContext.java",
                "patch": "@@ -62,7 +62,7 @@ public static void setContext(TransactionContext context) {\n     private Map managedConnections;\n     private InTxCache inTxCache;\n \n-    public abstract void begin() throws SystemException, NotSupportedException;\n+//    public abstract void begin() throws SystemException, NotSupportedException;\n \n     public abstract void suspend() throws SystemException;\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContext.java",
                "sha": "09095b0a29408353b96e824b66b5dda1e4a1495a",
                "status": "modified"
            },
            {
                "additions": 217,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContextManager.java",
                "changes": 222,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContextManager.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 5,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContextManager.java",
                "patch": "@@ -17,30 +17,53 @@\n \n package org.apache.geronimo.transaction.context;\n \n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import javax.resource.spi.XATerminator;\n+import javax.transaction.InvalidTransactionException;\n import javax.transaction.NotSupportedException;\n+import javax.transaction.Status;\n import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n import javax.transaction.TransactionManager;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n \n import org.apache.geronimo.gbean.GBeanInfo;\n import org.apache.geronimo.gbean.GBeanInfoFactory;\n+import org.apache.geronimo.transaction.XAWork;\n+import org.apache.geronimo.transaction.manager.Recovery;\n+import org.apache.geronimo.transaction.manager.XidImporter;\n \n /**\n  *\n  *\n  * @version $Rev$ $Date$\n  *\n  * */\n-public class TransactionContextManager {\n+public class TransactionContextManager implements XATerminator, XAWork {\n+    private static final boolean NOT_IN_RECOVERY = false;\n+    private static final boolean IN_RECOVERY = true;\n+\n \n     private final TransactionManager transactionManager;\n+    private final XidImporter importer;\n+    private final Recovery recovery;\n+    private final Map importedTransactions = new HashMap();\n+\n+    private boolean recoveryState = NOT_IN_RECOVERY;\n \n     //use as reference endpoint.\n     public TransactionContextManager() {\n-        transactionManager = null;\n+        this(null, null, null);\n     }\n \n-    public TransactionContextManager(TransactionManager transactionManager) {\n+    public TransactionContextManager(TransactionManager transactionManager, XidImporter importer, Recovery recovery) {\n         this.transactionManager = transactionManager;\n+        this.importer = importer;\n+        this.recovery = recovery;\n     }\n \n     public TransactionContext getContext() {\n@@ -54,7 +77,6 @@ public void setContext(TransactionContext transactionContext) {\n     public ContainerTransactionContext newContainerTransactionContext() throws NotSupportedException, SystemException {\n         ContainerTransactionContext transactionContext = new ContainerTransactionContext(transactionManager);\n         TransactionContext.setContext(transactionContext);\n-        transactionContext.begin();\n         return transactionContext;\n     }\n \n@@ -97,6 +119,194 @@ public void setTransactionTimeout(int seconds) throws SystemException {\n         transactionManager.setTransactionTimeout(seconds);\n     }\n \n+\n+    /**\n+     * TODO write and use ImportedTransactionContext for this!\n+      * @see javax.resource.spi.XATerminator#commit(javax.transaction.xa.Xid, boolean)\n+      */\n+     public void commit(Xid xid, boolean onePhase) throws XAException {\n+         ImportedTransactionInfo txInfo;\n+         synchronized (importedTransactions) {\n+             txInfo = (ImportedTransactionInfo) importedTransactions.remove(xid);\n+         }\n+         if (txInfo == null) {\n+             throw new XAException(\"No imported transaction for xid: \" + xid);\n+         }\n+         ContainerTransactionContext containerTransactionContext = txInfo.getContainerTransactionContext();\n+\n+         try {\n+             int status = containerTransactionContext.getTransaction().getStatus();\n+             assert status == Status.STATUS_ACTIVE || status == Status.STATUS_PREPARED;\n+         } catch (SystemException e) {\n+             throw new XAException();\n+         }\n+         importer.commit(containerTransactionContext.getTransaction(), onePhase);\n+     }\n+\n+     /**\n+      * @see javax.resource.spi.XATerminator#forget(javax.transaction.xa.Xid)\n+      */\n+     public void forget(Xid xid) throws XAException {\n+         ImportedTransactionInfo txInfo;\n+         synchronized (importedTransactions) {\n+             txInfo = (ImportedTransactionInfo) importedTransactions.remove(xid);\n+         }\n+         if (txInfo == null) {\n+             throw new XAException(\"No imported transaction for xid: \" + xid);\n+         }\n+         Transaction tx = txInfo.getContainerTransactionContext().getTransaction();\n+         //todo is there a correct status test here?\n+//        try {\n+//            int status = tx.getStatus();\n+//            assert status == Status.STATUS_ACTIVE || status == Status.STATUS_PREPARED;\n+//        } catch (SystemException e) {\n+//            throw new XAException();\n+//        }\n+         importer.forget(tx);\n+     }\n+\n+     /**\n+      * @see javax.resource.spi.XATerminator#prepare(javax.transaction.xa.Xid)\n+      */\n+     public int prepare(Xid xid) throws XAException {\n+         ImportedTransactionInfo txInfo;\n+         synchronized (importedTransactions) {\n+             txInfo = (ImportedTransactionInfo) importedTransactions.get(xid);\n+         }\n+         if (txInfo == null) {\n+             throw new XAException(\"No imported transaction for xid: \" + xid);\n+         }\n+         Transaction tx = txInfo.getContainerTransactionContext().getTransaction();\n+         try {\n+             int status = tx.getStatus();\n+             assert status == Status.STATUS_ACTIVE;\n+         } catch (SystemException e) {\n+             throw new XAException();\n+         }\n+         return importer.prepare(tx);\n+     }\n+\n+     /**\n+      * @see javax.resource.spi.XATerminator#recover(int)\n+      */\n+     public Xid[] recover(int flag) throws XAException {\n+         if (recoveryState == NOT_IN_RECOVERY) {\n+             if ((flag & XAResource.TMSTARTRSCAN) == 0) {\n+                 throw new XAException(XAException.XAER_PROTO);\n+             }\n+             recoveryState = IN_RECOVERY;\n+         }\n+         if ((flag & XAResource.TMENDRSCAN) != 0) {\n+             recoveryState = NOT_IN_RECOVERY;\n+         }\n+         //we always return all xids in first call.\n+         //calling \"startrscan\" repeatedly starts at beginning of list again.\n+         if ((flag & XAResource.TMSTARTRSCAN) != 0) {\n+             Map recoveredXidMap = recovery.getExternalXids();\n+             Xid[] recoveredXids = new Xid[recoveredXidMap.size()];\n+             int i = 0;\n+             synchronized (importedTransactions) {\n+                 for (Iterator iterator = recoveredXidMap.entrySet().iterator(); iterator.hasNext();) {\n+                     Map.Entry entry = (Map.Entry) iterator.next();\n+                     Xid xid = (Xid) entry.getKey();\n+                     recoveredXids[i++] = xid;\n+                     ImportedTransactionInfo txInfo = new ImportedTransactionInfo(new ContainerTransactionContext(transactionManager, (Transaction)entry.getValue()));\n+                     importedTransactions.put(xid, txInfo);\n+                 }\n+             }\n+             return recoveredXids;\n+         } else {\n+             return new Xid[0];\n+         }\n+     }\n+\n+     /**\n+      * @see javax.resource.spi.XATerminator#rollback(javax.transaction.xa.Xid)\n+      */\n+     public void rollback(Xid xid) throws XAException {\n+         ImportedTransactionInfo txInfo;\n+         synchronized (importedTransactions) {\n+             txInfo = (ImportedTransactionInfo) importedTransactions.remove(xid);\n+         }\n+         if (txInfo == null) {\n+             throw new XAException(\"No imported transaction for xid: \" + xid);\n+         }\n+         Transaction tx = txInfo.getContainerTransactionContext().getTransaction();\n+\n+         try {\n+             int status = tx.getStatus();\n+             assert status == Status.STATUS_ACTIVE || status == Status.STATUS_PREPARED;\n+         } catch (SystemException e) {\n+             throw new XAException();\n+         }\n+         importer.rollback(tx);\n+     }\n+\n+\n+    //XAWork implementation\n+    public void begin(Xid xid, long txTimeoutMillis) throws XAException, InvalidTransactionException, SystemException {\n+        ImportedTransactionInfo txInfo;\n+        boolean old = true;\n+        synchronized (importedTransactions) {\n+             txInfo = (ImportedTransactionInfo) importedTransactions.get(xid);\n+            if (txInfo == null) {\n+                try {\n+                    Transaction transaction = importer.importXid(xid);\n+                    ContainerTransactionContext containerTransactionContext = new ContainerTransactionContext(transactionManager, transaction);\n+                    txInfo = new ImportedTransactionInfo(containerTransactionContext);\n+                    old = false;\n+                } catch (SystemException e) {\n+                    throw (XAException) new XAException(\"Could not import xid\").initCause(e);\n+                }\n+                importedTransactions.put(xid, txInfo);\n+            }\n+            if (txInfo.isActive()) {\n+                throw new XAException(\"Xid already active\");\n+            }\n+            txInfo.setActive(true);\n+        }\n+        if (old) {\n+            txInfo.getContainerTransactionContext().resume();\n+        }\n+        importer.setTransactionTimeout(txTimeoutMillis);\n+    }\n+\n+    public void end(Xid xid) throws XAException, SystemException {\n+        synchronized (importedTransactions) {\n+            ImportedTransactionInfo txInfo = (ImportedTransactionInfo) importedTransactions.get(xid);\n+            if (txInfo == null) {\n+                throw new XAException(\"No imported transaction for xid: \" + xid);\n+            }\n+            if (!txInfo.isActive()) {\n+                throw new XAException(\"tx not active for xid: \" + xid);\n+            }\n+            txInfo.getContainerTransactionContext().suspend();\n+            txInfo.setActive(false);\n+        }\n+    }\n+\n+    //todo make an imported transaction context with this info.\n+    private static class ImportedTransactionInfo {\n+        private final ContainerTransactionContext containerTransactionContext;\n+        private boolean active;\n+\n+        public ImportedTransactionInfo(ContainerTransactionContext containerTransactionContext) {\n+            this.containerTransactionContext = containerTransactionContext;\n+        }\n+\n+        public ContainerTransactionContext getContainerTransactionContext() {\n+            return containerTransactionContext;\n+        }\n+\n+        public boolean isActive() {\n+            return active;\n+        }\n+\n+        public void setActive(boolean active) {\n+            this.active = active;\n+        }\n+    }\n+\n     public static final GBeanInfo GBEAN_INFO;\n \n     static {\n@@ -108,8 +318,10 @@ public void setTransactionTimeout(int seconds) throws SystemException {\n         infoFactory.addOperation(\"newUnspecifiedTransactionContext\");\n \n         infoFactory.addReference(\"TransactionManager\", TransactionManager.class);\n+        infoFactory.addReference(\"XidImporter\", XidImporter.class);\n+        infoFactory.addReference(\"Recovery\", Recovery.class);\n \n-        infoFactory.setConstructor(new String[] {\"TransactionManager\"});\n+        infoFactory.setConstructor(new String[] {\"TransactionManager\", \"XidImporter\", \"Recovery\"});\n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/context/TransactionContextManager.java",
                "sha": "fd5edf96df3a7dc9c1a60783b6e16f33297b2bec",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionImpl.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 0,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionImpl.java",
                "patch": "@@ -88,6 +88,7 @@ public synchronized int getStatus() throws SystemException {\n     }\n \n     public synchronized void setRollbackOnly() throws IllegalStateException, SystemException {\n+        log.info(\"in setRollbackOnly, txImpl\", new Exception(\"stack trace\"));\n         switch (status) {\n             case Status.STATUS_ACTIVE:\n             case Status.STATUS_PREPARING:",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionImpl.java",
                "sha": "27c9be2b261724f80082f46898bde217279270ca",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/geronimo/blob/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/test/org/apache/geronimo/transaction/TransactionManagerProxyTest.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/TransactionManagerProxyTest.java?ref=afe820227771b9b44e7ffbda239da4e6eaba70ac",
                "deletions": 9,
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/TransactionManagerProxyTest.java",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.geronimo.transaction;\n \n import java.util.ArrayList;\n+import java.util.Map;\n \n import javax.transaction.RollbackException;\n import javax.transaction.Status;\n@@ -86,7 +87,7 @@ public void testNoResourcesMarkRollbackOnly() throws Exception {\n         assertEquals(Status.STATUS_MARKED_ROLLBACK, tm.getStatus());\n         try {\n             tm.commit();\n-            fail(\"tx should roll back\");\n+            fail(\"tx should not commit\");\n         } catch (RollbackException e) {\n             //expected\n         }\n@@ -100,7 +101,7 @@ public void testNoResourcesMarkRollbackOnly() throws Exception {\n         assertEquals(Status.STATUS_MARKED_ROLLBACK, tx.getStatus());\n         try {\n             tx.commit();\n-            fail(\"tx should roll back\");\n+            fail(\"tx should not commit\");\n         } catch (RollbackException e) {\n             //expected\n         }\n@@ -252,14 +253,15 @@ public void testFourResourceTwoRMCommit() throws Exception {\n     //BE VERY CAREFUL!! the ResourceManager only \"recovers\" the LAST resource it creates.\n     //This test depends on using the resource that will be recovered by the resource manager.\n     public void testSimpleRecovery() throws Exception {\n+        //create a transaction in our own transaction manager\n         Xid xid = xidFactory.createXid();\n-        tm.begin(xid, 1000);\n+        tm.importXid(xid);\n         Transaction tx = tm.getTransaction();\n         tx.enlistResource(r1_2);\n         tx.enlistResource(r2_2);\n         tx.delistResource(r1_2, XAResource.TMSUCCESS);\n         tx.delistResource(r2_2, XAResource.TMSUCCESS);\n-        tm.prepare(xid);\n+        tm.prepare(tx);\n         //recover\n         resourceManagers.add(rm1);\n         tm.doStart();\n@@ -271,15 +273,16 @@ public void testSimpleRecovery() throws Exception {\n     }\n \n     public void testImportedXidRecovery() throws Exception {\n+        //create a transaction from an external transaction manager.\n         XidFactory xidFactory2 = new XidFactoryImpl(\"tm2\".getBytes());\n         Xid xid = xidFactory2.createXid();\n-        tm.begin(xid, 1000);\n+        tm.importXid(xid);\n         Transaction tx = tm.getTransaction();\n         tx.enlistResource(r1_2);\n         tx.enlistResource(r2_2);\n         tx.delistResource(r1_2, XAResource.TMSUCCESS);\n         tx.delistResource(r2_2, XAResource.TMSUCCESS);\n-        tm.prepare(xid);\n+        tm.prepare(tx);\n         //recover\n         resourceManagers.add(rm1);\n         tm.doStart();\n@@ -289,9 +292,9 @@ public void testImportedXidRecovery() throws Exception {\n         assertTrue(!r2_2.isCommitted());\n         //there are no transactions started here, so local recovery is complete\n         assertTrue(recovery.localRecoveryComplete());\n-        Xid[] recovered = tm.recover(XAResource.TMSTARTRSCAN);\n-        assertEquals(1, recovered.length);\n-        assertEquals(xid, recovered[0]);\n+        Map recovered = tm.getExternalXids();\n+        assertEquals(1, recovered.size());\n+        assertEquals(xid, recovered.keySet().iterator().next());\n     }\n \n     public void testResourceManagerContract() throws Exception {",
                "raw_url": "https://github.com/apache/geronimo/raw/afe820227771b9b44e7ffbda239da4e6eaba70ac/modules/transaction/src/test/org/apache/geronimo/transaction/TransactionManagerProxyTest.java",
                "sha": "f9915e540eada923587100d42f7ed0e000b3ae93",
                "status": "modified"
            }
        ],
        "message": "Move imported tx functionality towards TransactionContextManager.  Replace almost all uses of TransactionContext.get/setContext with methods on TransactionContextManager.  Prevent NPEs when there is no TransactionContext. This represents progress on GERONIMO-347 and GERONIMO-352\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@53780 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/46889e646949ddd6270b74c66047e736b011ddee",
        "patched_files": [
            "MockXATerminator.java",
            "XAServices.java",
            "j2ee-client-plan.xml",
            "JDBCStoreThreadPooledNonTransactionalTimer.java",
            "LocalTransactions.java",
            "ThreadPooledTimer.java",
            "VMStoreThreadPooledTransactionalTimer.java",
            "system-database-plan.xml",
            "geronimo-ra.xml",
            "AppClientContainer.java",
            "TransactionContext.java",
            "JDBCStoreThreadPooledTransactionalTimer.java",
            "TransactionContextManager.java",
            "default-database-plan.xml",
            "TransactionEnlistingInterceptor.java",
            "XATransactions.java",
            "WorkerContext.java",
            "DefaultComponentInterceptor.java",
            "BootstrapContext.java",
            "TransactionSupport.java",
            "JettyWebAppContext.java",
            "ConnectionManagerTestUtils.java",
            "ContainerTransactionContext.java",
            "GeronimoWorkManager.java",
            "TransactionImpl.java",
            "TransactionCachingInterceptor.java",
            "ConnectorModuleBuilder.java",
            "TransactionManagerProxy.java",
            "GenericConnectionManager.java",
            "VMStoreThreadPooledNonTransactionalTimer.java",
            "NoTransactions.java",
            "j2ee-server-plan.xml",
            "TransactionLog.java",
            "project.xml",
            "client-system-plan.xml"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "TransactionEnlistingInterceptorTest.java",
            "TransactionCachingInterceptorTest.java",
            "BootstrapContextTest.java",
            "NontransactionalThreadPooledTimerTest.java",
            "TransactionManagerProxyTest.java",
            "TransactionalThreadPooledTimerTest.java",
            "AbstractThreadPooledTimerTest.java",
            "PooledWorkManagerTest.java"
        ]
    },
    "geronimo_c3a2bb5": {
        "bug_id": "geronimo_c3a2bb5",
        "commit": "https://github.com/apache/geronimo/commit/c3a2bb5bd58f7ab6c6523f841cb1833697272645",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/c3a2bb5bd58f7ab6c6523f841cb1833697272645/framework/configs/rmi-naming/src/main/plan/plan.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/framework/configs/rmi-naming/src/main/plan/plan.xml?ref=c3a2bb5bd58f7ab6c6523f841cb1833697272645",
                "deletions": 3,
                "filename": "framework/configs/rmi-naming/src/main/plan/plan.xml",
                "patch": "@@ -32,9 +32,7 @@\n \n     <gbean name=\"GlobalContext\" class=\"org.apache.geronimo.gjndi.GlobalContextGBean\"/>\n \n-    <gbean name=\"JavaCompContext\" class=\"org.apache.geronimo.gjndi.JavaCompContextGBean\">\n-        <dependency><name>GlobalContext</name></dependency>\n-    </gbean>\n+    <gbean name=\"JavaCompContext\" class=\"org.apache.geronimo.gjndi.JavaCompContextGBean\"/>\n \n     <gbean name=\"JavaContext\" class=\"org.apache.geronimo.gjndi.WritableContextGBean\">\n         <attribute name=\"nameInNamespace\">java:</attribute>",
                "raw_url": "https://github.com/apache/geronimo/raw/c3a2bb5bd58f7ab6c6523f841cb1833697272645/framework/configs/rmi-naming/src/main/plan/plan.xml",
                "sha": "938518c790644cb4db1e60fa58b2548e547cd8fe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/c3a2bb5bd58f7ab6c6523f841cb1833697272645/framework/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/KernelContextGBean.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/framework/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/KernelContextGBean.java?ref=c3a2bb5bd58f7ab6c6523f841cb1833697272645",
                "deletions": 1,
                "filename": "framework/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/KernelContextGBean.java",
                "patch": "@@ -203,7 +203,7 @@ protected synchronized void removeBinding(AbstractName abstractName) {\n                 } else {\n                     bindingsByName.remove(name);\n                     try {\n-                        removeDeepBinding(name, true);\n+                        removeDeepBinding(name, true, true);\n                     } catch (ContextNotEmptyException e) {\n                         //ignore\n                     } catch (NamingException e) {",
                "raw_url": "https://github.com/apache/geronimo/raw/c3a2bb5bd58f7ab6c6523f841cb1833697272645/framework/modules/geronimo-naming/src/main/java/org/apache/geronimo/gjndi/KernelContextGBean.java",
                "sha": "d4eaa7dba3d9a6eb71daf7ae8e8d31c6ccfb9b18",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-3808 fix npe on shutdown.  Not convinced this is compatible with resource bindings\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@619712 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/abde11c0547370f87012c536d47b9c0c18f0bd81",
        "patched_files": [
            "plan.xml",
            "KernelContextGBean.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "KernelContextGBeanTest.java"
        ]
    },
    "geronimo_ca269b2": {
        "bug_id": "geronimo_ca269b2",
        "commit": "https://github.com/apache/geronimo/commit/ca269b2d22fb143557d5e1b0d5a5892cfc58dd4a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/geronimo/blob/ca269b2d22fb143557d5e1b0d5a5892cfc58dd4a/modules/tomcat-builder/src/java/org/apache/geronimo/tomcat/deployment/TomcatModuleBuilder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/tomcat-builder/src/java/org/apache/geronimo/tomcat/deployment/TomcatModuleBuilder.java?ref=ca269b2d22fb143557d5e1b0d5a5892cfc58dd4a",
                "deletions": 1,
                "filename": "modules/tomcat-builder/src/java/org/apache/geronimo/tomcat/deployment/TomcatModuleBuilder.java",
                "patch": "@@ -194,7 +194,11 @@ private Module createModule(Object plan, JarFile moduleFile, String targetPath,\n         }\n \n         if (contextRoot == null) {\n-            contextRoot = tomcatWebApp.getContextRoot();\n+            if (tomcatWebApp.isSetContextRoot()) {\n+                contextRoot = tomcatWebApp.getContextRoot();\n+            } else {\n+                contextRoot = determineDefaultContextRoot(webApp, standAlone, moduleFile, targetPath);\n+            }\n         }\n         //look for a webservices dd\n         Map portMap = Collections.EMPTY_MAP;",
                "raw_url": "https://github.com/apache/geronimo/raw/ca269b2d22fb143557d5e1b0d5a5892cfc58dd4a/modules/tomcat-builder/src/java/org/apache/geronimo/tomcat/deployment/TomcatModuleBuilder.java",
                "sha": "a8ba1e2b10bfb75e0fa0032a666d72dd0a9e2937",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-1031, avoid NPE when looking for context-root\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@292881 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/5409576f984c2705527091bd26d4e1637370277d",
        "patched_files": [
            "TomcatModuleBuilder.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "TomcatModuleBuilderTest.java"
        ]
    },
    "geronimo_cbedbea": {
        "bug_id": "geronimo_cbedbea",
        "commit": "https://github.com/apache/geronimo/commit/cbedbea434efb4ec73426796058e6d2112d6b20c",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/geronimo/blob/cbedbea434efb4ec73426796058e6d2112d6b20c/modules/system/src/java/org/apache/geronimo/system/repository/Maven1Repository.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/system/src/java/org/apache/geronimo/system/repository/Maven1Repository.java?ref=cbedbea434efb4ec73426796058e6d2112d6b20c",
                "deletions": 9,
                "filename": "modules/system/src/java/org/apache/geronimo/system/repository/Maven1Repository.java",
                "patch": "@@ -66,16 +66,18 @@ public SortedSet list(Artifact query) {\n             path = new File(path, query.getType() + \"s\");\n \n             File[] files = path.listFiles();\n-            for (int i = 0; i < files.length; i++) {\n-                File file = files[i];\n-                String fileName = file.getName();\n-                if (fileName.startsWith(query.getArtifactId() + \"-\") && fileName.endsWith(\".\" + query.getType())) {\n-                    String version = fileName.substring(query.getArtifactId().length() + 1);\n-                    version = version.substring(0, version.length() - 1 - query.getType().length());\n-                    if(query.getVersion() != null && !query.getVersion().toString().equals(version)) {\n-                        continue;\n+            if (files != null) {\n+                for (int i = 0; i < files.length; i++) {\n+                    File file = files[i];\n+                    String fileName = file.getName();\n+                    if (fileName.startsWith(query.getArtifactId() + \"-\") && fileName.endsWith(\".\" + query.getType())) {\n+                        String version = fileName.substring(query.getArtifactId().length() + 1);\n+                        version = version.substring(0, version.length() - 1 - query.getType().length());\n+                        if(query.getVersion() != null && !query.getVersion().toString().equals(version)) {\n+                            continue;\n+                        }\n+                        artifacts.add(new Artifact(query.getGroupId(), query.getArtifactId(), version, query.getType()));\n                     }\n-                    artifacts.add(new Artifact(query.getGroupId(), query.getArtifactId(), version, query.getType()));\n                 }\n             }\n         } else {",
                "raw_url": "https://github.com/apache/geronimo/raw/cbedbea434efb4ec73426796058e6d2112d6b20c/modules/system/src/java/org/apache/geronimo/system/repository/Maven1Repository.java",
                "sha": "d824b19f2f8207fcf0e0e4883abef6578cec4d54",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-2104 fix NPE when bad directory is listed\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@413323 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/172356efd9d2f5e26bf926dd4613ee2b15eeb67c",
        "patched_files": [
            "Maven1Repository.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "Maven1RepositoryTest.java"
        ]
    },
    "geronimo_d337cb6": {
        "bug_id": "geronimo_d337cb6",
        "commit": "https://github.com/apache/geronimo/commit/d337cb6a632e296ba21f49e09b861f607d3a6861",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/d337cb6a632e296ba21f49e09b861f607d3a6861/modules/j2ee-builder/src/java/org/apache/geronimo/j2ee/deployment/RefContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/j2ee-builder/src/java/org/apache/geronimo/j2ee/deployment/RefContext.java?ref=d337cb6a632e296ba21f49e09b861f607d3a6861",
                "deletions": 1,
                "filename": "modules/j2ee-builder/src/java/org/apache/geronimo/j2ee/deployment/RefContext.java",
                "patch": "@@ -259,7 +259,7 @@ private GBeanData locateComponentInApplication(String resourceLink, URI moduleUR\n     private GBeanData locateComponentInModule(String resourceLink, URI moduleURI, String moduleType, String type, J2eeContext j2eeContext, String queryType, NamingContext context) throws UnresolvedReferenceException {\n         GBeanData match;\n         String name = resourceLink.substring(resourceLink.lastIndexOf('#') + 1);\n-        String module = moduleURI.getPath();\n+        String module = moduleURI == null? \"\": moduleURI.getPath();\n \n         if (resourceLink.indexOf('#') > -1) {\n             //presence of # means they explicitly want only gbeans in specified module in this application.",
                "raw_url": "https://github.com/apache/geronimo/raw/d337cb6a632e296ba21f49e09b861f607d3a6861/modules/j2ee-builder/src/java/org/apache/geronimo/j2ee/deployment/RefContext.java",
                "sha": "26da9ed3f53822c40d0714aa9ce1311b2bdc7130",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/geronimo/blob/d337cb6a632e296ba21f49e09b861f607d3a6861/modules/naming-builder/src/java/org/apache/geronimo/naming/deployment/ENCConfigBuilder.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/naming-builder/src/java/org/apache/geronimo/naming/deployment/ENCConfigBuilder.java?ref=d337cb6a632e296ba21f49e09b861f607d3a6861",
                "deletions": 11,
                "filename": "modules/naming-builder/src/java/org/apache/geronimo/naming/deployment/ENCConfigBuilder.java",
                "patch": "@@ -165,7 +165,7 @@ public static ObjectName getGBeanId(String j2eeType, GerGbeanLocatorType gerGbea\n     }\n \n \n-    public static void addEnvEntries(EnvEntryType[] envEntries, ComponentContextBuilder builder, ClassLoader classLoader) throws DeploymentException {\n+    static void addEnvEntries(EnvEntryType[] envEntries, ComponentContextBuilder builder, ClassLoader classLoader) throws DeploymentException {\n         for (int i = 0; i < envEntries.length; i++) {\n             EnvEntryType envEntry = envEntries[i];\n             String name = getStringValue(envEntry.getEnvEntryName());\n@@ -182,7 +182,7 @@ public static void addEnvEntries(EnvEntryType[] envEntries, ComponentContextBuil\n \n     }\n \n-    public static void addResourceRefs(EARContext earContext, URI moduleURI, ResourceRefType[] resourceRefs, Map refMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n+    static void addResourceRefs(EARContext earContext, URI moduleURI, ResourceRefType[] resourceRefs, Map refMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n         if (refMap == null) {\n             refMap = Collections.EMPTY_MAP;\n         }\n@@ -264,7 +264,7 @@ private static String getResourceContainerId(String name, String type, URI modul\n         return containerId;\n     }\n \n-    public static void addResourceEnvRefs(EARContext earContext, ResourceEnvRefType[] resourceEnvRefArray, Map refMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n+    static void addResourceEnvRefs(EARContext earContext, ResourceEnvRefType[] resourceEnvRefArray, Map refMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n         if (refMap == null) {\n             refMap = Collections.EMPTY_MAP;\n         }\n@@ -331,7 +331,7 @@ private static String getAdminObjectContainerId(String name, GerResourceEnvRefTy\n         return containerId;\n     }\n \n-    public static void addMessageDestinationRefs(RefContext refContext, NamingContext namingContext, MessageDestinationRefType[] messageDestinationRefs, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n+    static void addMessageDestinationRefs(RefContext refContext, NamingContext namingContext, MessageDestinationRefType[] messageDestinationRefs, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n         for (int i = 0; i < messageDestinationRefs.length; i++) {\n             MessageDestinationRefType messageDestinationRef = messageDestinationRefs[i];\n             String name = getStringValue(messageDestinationRef.getMessageDestinationRefName());\n@@ -358,7 +358,7 @@ public static void addMessageDestinationRefs(RefContext refContext, NamingContex\n                     linkName = destination.getAdminObjectLink().trim();\n                 }\n             } else {\n-                //well, we know for sure an admin object is not going to be defined in a modules that can have a message-destination \n+                //well, we know for sure an admin object is not going to be defined in a modules that can have a message-destination\n                 int pos = linkName.indexOf('#');\n                 if (pos > -1) {\n                     linkName = linkName.substring(pos + 1);\n@@ -375,7 +375,7 @@ public static void addMessageDestinationRefs(RefContext refContext, NamingContex\n \n     }\n \n-    public static void addEJBRefs(NamingContext ejbContext, RefContext refContext, URI moduleURI, EjbRefType[] ejbRefs, Map ejbRefMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n+    static void addEJBRefs(NamingContext earContext, NamingContext ejbContext, RefContext refContext, URI moduleURI, EjbRefType[] ejbRefs, Map ejbRefMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n         J2eeContext j2eeContext = ejbContext.getJ2eeContext();\n         for (int i = 0; i < ejbRefs.length; i++) {\n             EjbRefType ejbRef = ejbRefs[i];\n@@ -418,7 +418,7 @@ public static void addEJBRefs(NamingContext ejbContext, RefContext refContext, U\n                                 String cssLink = remoteRef.getCssLink().trim();\n                                 //TODO is this correct?\n                                 String moduleType = null;\n-                                cssBean = refContext.locateComponentName(cssLink, moduleURI, moduleType, NameFactory.CORBA_CSS, j2eeContext, ejbContext, \"css gbean\");\n+                                cssBean = refContext.locateComponentName(cssLink, moduleURI, moduleType, NameFactory.CORBA_CSS, earContext.getJ2eeContext(), earContext, \"css gbean\");\n                             } else {\n                                 GerCssType css = remoteRef.getCss();\n                                 cssBean = NameFactory.getComponentName(getStringValue(css.getDomain()),\n@@ -427,7 +427,7 @@ public static void addEJBRefs(NamingContext ejbContext, RefContext refContext, U\n                                     getStringValue(css.getModule()),\n                                     getStringValue(css.getName()),\n                                     getStringValue(NameFactory.CORBA_CSS),\n-                                    j2eeContext);\n+                                    earContext.getJ2eeContext());\n                             }\n                             ejbReference = refContext.getCORBARemoteRef(new URI(getStringValue(remoteRef.getNsCorbaloc())),\n                                                                         getStringValue(remoteRef.getName()),\n@@ -462,7 +462,7 @@ public static void addEJBRefs(NamingContext ejbContext, RefContext refContext, U\n         }\n     }\n \n-    public static void addEJBLocalRefs(NamingContext ejbContext, RefContext refContext, URI moduleURI, EjbLocalRefType[] ejbLocalRefs, Map ejbLocalRefMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n+    static void addEJBLocalRefs(NamingContext ejbContext, RefContext refContext, URI moduleURI, EjbLocalRefType[] ejbLocalRefs, Map ejbLocalRefMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n         J2eeContext j2eeContext = ejbContext.getJ2eeContext();\n         for (int i = 0; i < ejbLocalRefs.length; i++) {\n             EjbLocalRefType ejbLocalRef = ejbLocalRefs[i];\n@@ -515,7 +515,7 @@ public static void addEJBLocalRefs(NamingContext ejbContext, RefContext refConte\n     }\n \n     //TODO current implementation does not deal with portComponentRef links.\n-    public static void addServiceRefs(EARContext earContext, Module module, ServiceRefType[] serviceRefs, Map serviceRefMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n+    static void addServiceRefs(EARContext earContext, Module module, ServiceRefType[] serviceRefs, Map serviceRefMap, ClassLoader cl, ComponentContextBuilder builder) throws DeploymentException {\n \n         RefContext refContext = earContext.getRefContext();\n \n@@ -752,7 +752,7 @@ public static Map buildComponentContext(EARContext earContext,\n \n         RefContext refContext = earContext.getRefContext();\n         // ejb-ref\n-        addEJBRefs(ejbContext, refContext, moduleURI, ejbRefs, mapEjbRefs(gerEjbRefs), cl, builder);\n+        addEJBRefs(earContext, ejbContext, refContext, moduleURI, ejbRefs, mapEjbRefs(gerEjbRefs), cl, builder);\n \n         // ejb-local-ref\n         addEJBLocalRefs(ejbContext, refContext, moduleURI, ejbLocalRefs, mapEjbLocalRefs(gerEjbLocalRef), cl, builder);",
                "raw_url": "https://github.com/apache/geronimo/raw/d337cb6a632e296ba21f49e09b861f607d3a6861/modules/naming-builder/src/java/org/apache/geronimo/naming/deployment/ENCConfigBuilder.java",
                "sha": "2d86b064b10dd85b3d71487c8494ed6cd058b850",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/d337cb6a632e296ba21f49e09b861f607d3a6861/modules/naming-builder/src/test/org/apache/geronimo/naming/deployment/MessageDestinationTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/naming-builder/src/test/org/apache/geronimo/naming/deployment/MessageDestinationTest.java?ref=d337cb6a632e296ba21f49e09b861f607d3a6861",
                "deletions": 1,
                "filename": "modules/naming-builder/src/test/org/apache/geronimo/naming/deployment/MessageDestinationTest.java",
                "patch": "@@ -14,7 +14,7 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-package org.apache.geronimo.naming;\n+package org.apache.geronimo.naming.deployment;\n \n import java.net.URI;\n import java.util.Map;",
                "previous_filename": "modules/naming-builder/src/test/org/apache/geronimo/naming/MessageDestinationTest.java",
                "raw_url": "https://github.com/apache/geronimo/raw/d337cb6a632e296ba21f49e09b861f607d3a6861/modules/naming-builder/src/test/org/apache/geronimo/naming/deployment/MessageDestinationTest.java",
                "sha": "a240f34e5c9894da7ef895ae3de2a5ea1f0d924c",
                "status": "renamed"
            }
        ],
        "message": "GERONIMO-989 Make app client css-links work.  Also remove an NPE possibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@279717 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/1a9c592308c7af3e14d9aa6eb891a056994b4cb9",
        "patched_files": [
            "RefContext.java",
            "ENCConfigBuilder.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "MessageDestinationTest.java"
        ]
    },
    "geronimo_e04d2ef": {
        "bug_id": "geronimo_e04d2ef",
        "commit": "https://github.com/apache/geronimo/commit/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9/plugins/openjpa/geronimo-persistence-jpa10/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa/geronimo-persistence-jpa10/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java?ref=e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9",
                "deletions": 2,
                "filename": "plugins/openjpa/geronimo-persistence-jpa10/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "patch": "@@ -87,10 +87,9 @@ public PersistenceUnitGBean(String persistenceUnitName,\n         List<String> mappingFileNames = mappingFileNamesUntyped == null? new ArrayList<String>(): new ArrayList<String>(mappingFileNamesUntyped);\n         this.persistenceUnitRoot = persistenceUnitRoot;\n         URI configurationBaseURI = new File(configurationBaseURL.getFile()).toURI();\n-        URL rootURL = null;\n+        URL rootURL = configurationBaseURI.resolve(persistenceUnitRoot).normalize().toURL();\n         List<URL> jarFileUrls = NO_URLS;\n         if (!excludeUnlistedClassesValue) {\n-            rootURL = configurationBaseURI.resolve(persistenceUnitRoot).normalize().toURL();\n             jarFileUrls = new ArrayList<URL>();\n             for (String urlString: jarFileUrlsUntyped) {\n                 URL url = configurationBaseURI.resolve(urlString).normalize().toURL();",
                "raw_url": "https://github.com/apache/geronimo/raw/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9/plugins/openjpa/geronimo-persistence-jpa10/src/main/java/org/apache/geronimo/persistence/PersistenceUnitGBean.java",
                "sha": "28499a9ad872ba5ecb758eec2eee587b8eb8a580",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9/plugins/openjpa/geronimo-persistence-jpa10/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/plugins/openjpa/geronimo-persistence-jpa10/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java?ref=e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9",
                "deletions": 0,
                "filename": "plugins/openjpa/geronimo-persistence-jpa10/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "patch": "@@ -49,5 +49,6 @@ public void testNonNullJavaFileUrls() throws Exception {\n                 new File(\"/foo/bar/Root\").toURL(),\n                 getClass().getClassLoader());\n         assertNotNull(gbean.getJarFileUrls());\n+        assertNotNull(gbean.getPersistenceUnitRootUrl());\n     }\n }",
                "raw_url": "https://github.com/apache/geronimo/raw/e04d2ef98aadaa5be6848480eaa4d9f1762b4ac9/plugins/openjpa/geronimo-persistence-jpa10/src/test/java/org/apache/geronimo/persistence/PersistenceUnitGBeanTest.java",
                "sha": "0f4fc0eff7d24496338aa3fee9bfabbb0229f38a",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-3880 another NPE fix, for persistenceUnitRootUrl\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/server/trunk@632359 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/006fac90997163bbb0d0822911579c60ca5c17b0",
        "patched_files": [
            "PersistenceUnitGBean.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "PersistenceUnitGBeanTest.java"
        ]
    },
    "geronimo_ec981b3": {
        "bug_id": "geronimo_ec981b3",
        "commit": "https://github.com/apache/geronimo/commit/ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/configs/client/src/plan/plan.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/configs/client/src/plan/plan.xml?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 0,
                "filename": "configs/client/src/plan/plan.xml",
                "patch": "@@ -56,9 +56,14 @@ by the app client.\n         </reference>\n     </gbean>\n \n+    <gbean name=\"XidFactory\" class=\"org.apache.geronimo.transaction.manager.XidFactoryImplGBean\">\n+        <attribute name=\"tmId\">71,84,77,73,68</attribute>\n+    </gbean>\n+\n     <gbean name=\"TransactionManager\" class=\"org.apache.geronimo.transaction.manager.TransactionManagerImplGBean\">\n         <!--no transaction log on the client-->\n         <attribute name=\"defaultTransactionTimeoutSeconds\">600</attribute>\n+        <reference name=\"XidFactory\"><name>XidFactory</name></reference>\n         <references name=\"ResourceManagers\">\n             <pattern>\n                 <gbean-name>*:j2eeType=JCAManagedConnectionFactory,*</gbean-name>",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/configs/client/src/plan/plan.xml",
                "sha": "8cfb1a8d8fec9c2edc22c00f218cb9f10f0db621",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/configs/j2ee-server/src/plan/plan.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/configs/j2ee-server/src/plan/plan.xml?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 0,
                "filename": "configs/j2ee-server/src/plan/plan.xml",
                "patch": "@@ -60,11 +60,17 @@ by the server.\n         <attribute name=\"maxLogFiles\">2</attribute>\n         <attribute name=\"minBuffers\">4</attribute>\n         <attribute name=\"threadsWaitingForceThreshold\">-1</attribute>\n+        <reference name=\"XidFactory\"><name>XidFactory</name></reference>\n         <reference name=\"ServerInfo\"><module>geronimo/j2ee-system/${pom.currentVersion}/car</module><name>ServerInfo</name></reference>\n     </gbean>\n+    \n+    <gbean name=\"XidFactory\" class=\"org.apache.geronimo.transaction.manager.XidFactoryImplGBean\">\n+        <attribute name=\"tmId\">71,84,77,73,68</attribute>\n+    </gbean>\n \n     <gbean name=\"TransactionManager\" class=\"org.apache.geronimo.transaction.manager.TransactionManagerImplGBean\">\n         <attribute name=\"defaultTransactionTimeoutSeconds\">600</attribute>\n+        <reference name=\"XidFactory\"><name>XidFactory</name></reference>\n         <reference name=\"TransactionLog\"><name>HOWLTransactionLog</name></reference>\n         <references name=\"ResourceManagers\">\n             <pattern><gbean-name>geronimo.server:j2eeType=JCAManagedConnectionFactory,*</gbean-name></pattern>",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/configs/j2ee-server/src/plan/plan.xml",
                "sha": "c1fe1ab39b15c40376e7a53071572340d9b18a30",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java",
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.context.UserTransactionImpl;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -90,7 +91,8 @@ public Object invoke(InstanceContext newInstanceContext) throws Throwable {\n \n     protected void setUp() throws Exception {\n         connectionTrackingCoordinator = new ConnectionTrackingCoordinator();\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000,\n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         mockManagedConnectionFactory = new MockManagedConnectionFactory();\n         subject = new Subject();",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/ConnectionManagerTestUtils.java",
                "sha": "977abf40907a06afe1ebc3ac448793b202388201",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.context.TransactionContext;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -37,7 +38,8 @@\n \n     protected void setUp() throws Exception {\n         super.setUp();\n-        transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         transactionCachingInterceptor = new TransactionCachingInterceptor(this, transactionContextManager);\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionCachingInterceptorTest.java",
                "sha": "7596bb4d48cd1920c315b1a574ef5fbc44372776",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.manager.NamedXAResource;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -45,7 +46,8 @@\n \n     protected void setUp() throws Exception {\n         super.setUp();\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         transactionEnlistingInterceptor = new TransactionEnlistingInterceptor(this, transactionContextManager);\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/connector/src/test/org/apache/geronimo/connector/outbound/TransactionEnlistingInterceptorTest.java",
                "sha": "1a4e1045d366b0b3c47becca12879c2cc38a67a3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -29,7 +30,8 @@\n public class NontransactionalThreadPooledTimerTest extends AbstractThreadPooledTimerTest {\n \n     protected void setUp() throws Exception {\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         executableWorkFactory = new NontransactionalExecutorTaskFactory(transactionContextManager);\n         super.setUp();",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/timer/src/test/org/apache/geronimo/timer/NontransactionalThreadPooledTimerTest.java",
                "sha": "afba2bc163b89b61db664fecc00473b22a228821",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n \n /**\n  *\n@@ -29,7 +30,8 @@\n public class TransactionalThreadPooledTimerTest extends AbstractThreadPooledTimerTest {\n \n     protected void setUp() throws Exception {\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         executableWorkFactory = new TransactionalExecutorTaskFactory(transactionContextManager, 1);\n         super.setUp();",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/timer/src/test/org/apache/geronimo/timer/TransactionalThreadPooledTimerTest.java",
                "sha": "177945c51c918adf29649938a9dc83ef5a8b9b52",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 17,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "patch": "@@ -66,12 +66,12 @@\n     private final ServerInfo serverInfo;\n     private String logFileDir;\n \n-//    private final XidFactory xidFactory;\n+    private final XidFactory xidFactory;\n \n     private final XALogger logger;\n     private final Configuration configuration = new Configuration();\n     private boolean started = false;\n-//    private HashMap recovered;\n+    private HashMap recovered;\n \n     public HOWLLog(String bufferClassName,\n                    int bufferSize,\n@@ -85,7 +85,7 @@ public HOWLLog(String bufferClassName,\n                    int maxLogFiles,\n                    int minBuffers,\n                    int threadsWaitingForceThreshold,\n-//                   XidFactory xidFactory,\n+                   XidFactory xidFactory,\n                    ServerInfo serverInfo) throws IOException, LogConfigurationException {\n         this.serverInfo = serverInfo;\n         setBufferClassName(bufferClassName);\n@@ -101,7 +101,7 @@ public HOWLLog(String bufferClassName,\n         setMaxLogFiles(maxLogFiles);\n         setMinBuffers(minBuffers);\n         setThreadsWaitingForceThreshold(threadsWaitingForceThreshold);\n-//        this.xidFactory = xidFactory;\n+        this.xidFactory = xidFactory;\n         this.logger = new XALogger(configuration);\n     }\n \n@@ -211,21 +211,21 @@ public ServerInfo getServerInfo() {\n     public void doStart() throws Exception {\n         started = true;\n         setLogFileDir(logFileDir);\n-//        log.debug(\"Initiating transaction manager recovery\");\n-//        recovered = new HashMap();\n+        log.debug(\"Initiating transaction manager recovery\");\n+        recovered = new HashMap();\n \n         logger.open(null);\n \n-//        ReplayListener replayListener = new GeronimoReplayListener(xidFactory, recovered);\n-//        logger.replayActiveTx(replayListener);\n+        ReplayListener replayListener = new GeronimoReplayListener(xidFactory, recovered);\n+        logger.replayActiveTx(replayListener);\n \n-//        log.debug(\"In doubt transactions recovered from log\");\n+        log.debug(\"In doubt transactions recovered from log\");\n     }\n \n     public void doStop() throws Exception {\n         started = false;\n         logger.close();\n-//        recovered = null;\n+        recovered = null;\n     }\n \n     public void doFail() {\n@@ -309,11 +309,6 @@ public void rollback(Xid xid, Object logMark) throws LogException {\n     }\n \n     public Collection recover(XidFactory xidFactory) throws LogException {\n-        log.debug(\"Initiating transaction manager recovery\");\n-        Map recovered = new HashMap();\n-        ReplayListener replayListener = new GeronimoReplayListener(xidFactory, recovered);\n-        logger.replayActiveTx(replayListener);\n-        log.debug(\"In doubt transactions recovered from log\");\n         return recovered.values();\n     }\n \n@@ -413,7 +408,7 @@ public LogRecord getLogRecord() {\n         infoFactory.addAttribute(\"minBuffers\", Integer.TYPE, true);\n         infoFactory.addAttribute(\"threadsWaitingForceThreshold\", Integer.TYPE, true);\n \n-//        infoFactory.addReference(\"XidFactory\", XidFactory.class, NameFactory.XID_FACTORY);\n+        infoFactory.addReference(\"XidFactory\", XidFactory.class, NameFactory.XID_FACTORY);\n         infoFactory.addReference(\"ServerInfo\", ServerInfo.class, NameFactory.GERONIMO_SERVICE);\n \n         infoFactory.addInterface(TransactionLog.class);\n@@ -431,7 +426,7 @@ public LogRecord getLogRecord() {\n             \"maxLogFiles\",\n             \"minBuffers\",\n             \"threadsWaitingForceThreshold\",\n-//            \"XidFactory\",\n+            \"XidFactory\",\n             \"ServerInfo\"});\n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/log/HOWLLog.java",
                "sha": "54c9cd3b08652bc1e37e3deedb31dbcf4aa0264c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImpl.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 2,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImpl.java",
                "patch": "@@ -46,14 +46,14 @@\n     /**\n      * TODO NOTE!!! this should be called in an unspecified transaction context, but we cannot enforce this restriction!\n      */\n-    public TransactionManagerImpl(int defaultTransactionTimeoutSeconds, TransactionLog transactionLog, Collection resourceManagers) throws XAException {\n+    public TransactionManagerImpl(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog, Collection resourceManagers) throws XAException {\n         if (defaultTransactionTimeoutSeconds <= 0) {\n             throw new IllegalArgumentException(\"defaultTransactionTimeoutSeconds must be positive: attempted value: \" + defaultTransactionTimeoutSeconds);\n         }\n \n         this.defaultTransactionTimeoutMilliseconds = defaultTransactionTimeoutSeconds * 1000;\n         this.transactionLog = transactionLog == null ? new UnrecoverableLog() : transactionLog;\n-        this.xidFactory = new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes());\n+        this.xidFactory = xidFactory;\n         this.resourceManagers = resourceManagers;\n         recovery = new RecoveryImpl(this.transactionLog, this.xidFactory);\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImpl.java",
                "sha": "9af823c7695827945cc4f3d7fdcf06957f49b529",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImplGBean.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImplGBean.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 3,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImplGBean.java",
                "patch": "@@ -36,10 +36,11 @@\n     /**\n      * TODO NOTE!!! this should be called in an unspecified transaction context, but we cannot enforce this restriction!\n      */\n-    public TransactionManagerImplGBean(int defaultTransactionTimeoutSeconds, TransactionLog transactionLog, Collection resourceManagers) throws XAException {\n-        super(defaultTransactionTimeoutSeconds, transactionLog, resourceManagers);\n+    public TransactionManagerImplGBean(int defaultTransactionTimeoutSeconds, XidFactory xidFactory, TransactionLog transactionLog, Collection resourceManagers) throws XAException {\n+        super(defaultTransactionTimeoutSeconds, xidFactory, transactionLog, resourceManagers);\n     }\n \n+    \n     /**\n      * We can track as resources are added into the geronimo kernel.\n      *\n@@ -74,13 +75,18 @@ public void memberRemoved(ReferenceCollectionEvent event) {\n         GBeanInfoBuilder infoBuilder = GBeanInfoBuilder.createStatic(TransactionManagerImplGBean.class, NameFactory.TRANSACTION_MANAGER);\n \n         infoBuilder.addAttribute(\"defaultTransactionTimeoutSeconds\", int.class, true);\n+        infoBuilder.addReference(\"XidFactory\", XidFactory.class, NameFactory.XID_FACTORY);\n         infoBuilder.addReference(\"TransactionLog\", TransactionLog.class, NameFactory.TRANSACTION_LOG);\n         infoBuilder.addReference(\"ResourceManagers\", ResourceManager.class);//two kinds of things, so specify the type in each pattern.\n \n         infoBuilder.addInterface(ExtendedTransactionManager.class);\n         infoBuilder.addInterface(XidImporter.class);\n \n-        infoBuilder.setConstructor(new String[]{\"defaultTransactionTimeoutSeconds\", \"TransactionLog\", \"ResourceManagers\"});\n+        infoBuilder.setConstructor(new String[]{\n+                \"defaultTransactionTimeoutSeconds\",\n+                \"XidFactory\",\n+                \"TransactionLog\",\n+                \"ResourceManagers\"});\n \n         GBEAN_INFO = infoBuilder.getBeanInfo();\n     }",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/TransactionManagerImplGBean.java",
                "sha": "2d1d00daa08e6764c235b887c2427045e3266d82",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/XidFactoryImplGBean.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/java/org/apache/geronimo/transaction/manager/XidFactoryImplGBean.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/transaction/src/java/org/apache/geronimo/transaction/manager/XidFactoryImplGBean.java",
                "patch": "@@ -29,8 +29,13 @@\n     public static final GBeanInfo GBEAN_INFO;\n \n     static {\n-        GBeanInfoBuilder infoFactory = GBeanInfoBuilder.createStatic(XidFactoryImplGBean.class, NameFactory.XID_FACTORY);\n+        GBeanInfoBuilder infoFactory = GBeanInfoBuilder.createStatic(XidFactoryImpl.class, NameFactory.XID_FACTORY);\n+        \n+        infoFactory.addAttribute(\"tmId\", byte[].class, true);\n         infoFactory.addInterface(XidFactory.class);\n+\n+        infoFactory.setConstructor(new String[]{\"tmId\"});\n+        \n         GBEAN_INFO = infoFactory.getBeanInfo();\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/java/org/apache/geronimo/transaction/manager/XidFactoryImplGBean.java",
                "sha": "b149c4b5c63790da80457b7a4d11446aaf21bab4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/context/TransactionContextManagerTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/context/TransactionContextManagerTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/context/TransactionContextManagerTest.java",
                "patch": "@@ -38,7 +38,8 @@\n     private XidFactory xidFactory = new XidFactoryImpl(\"geronimo.test.tm\".getBytes());\n \n     protected void setUp() throws Exception {\n-        TransactionManagerImpl tm = new TransactionManagerImpl(1000, null, null);\n+        TransactionManagerImpl tm = new TransactionManagerImpl(1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(tm, tm);\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/context/TransactionContextManagerTest.java",
                "sha": "24b99a39fe9ad5b3ef28f1fb859e6a4437aa6cd7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/log/HOWLLogTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/log/HOWLLogTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/log/HOWLLogTest.java",
                "patch": "@@ -62,7 +62,7 @@ protected TransactionLog createTransactionLog() throws Exception {\n                 2, //                \"maxLogFiles\",\n                 2, //                \"minBuffers\",\n                 10,//                \"threadsWaitingForceThreshold\"});\n-//                xidFactory,\n+                xidFactory,\n                 new BasicServerInfo(new File(basedir, \"target\").getAbsolutePath())\n         );\n         howlLog.doStart();",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/log/HOWLLogTest.java",
                "sha": "31d5bf1b2efbc2ded5af8adf08530bc31c48c7b8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/HOWLLogRecoveryTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/HOWLLogRecoveryTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/HOWLLogRecoveryTest.java",
                "patch": "@@ -71,7 +71,7 @@ private void setUpHowlLog() throws Exception {\n                 2, //                \"maxLogFiles\",\n                 2, //                \"minBuffers\",\n                 10,//                \"threadsWaitingForceThreshold\"});\n-//                xidFactory,\n+                xidFactory,\n                 new BasicServerInfo(targetDir)\n         );\n         howlLog.doStart();",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/HOWLLogRecoveryTest.java",
                "sha": "711a2b541b9eb48bc15a6e9112763df2d40c33c5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/ProtocolTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/ProtocolTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/ProtocolTest.java",
                "patch": "@@ -31,7 +31,8 @@\n     private MockResource mr11, mr12, mr21, mr22;\n \n     protected void setUp() throws Exception {\n-        tm = new TransactionManagerImpl(1000, null, null);\n+        tm = new TransactionManagerImpl(1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         mrm1 = new MockResourceManager(true);\n         mrm2 = new MockResourceManager(true);\n         mr11 = new MockResource(mrm1, \"mr11\");",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/ProtocolTest.java",
                "sha": "33018150e83724cd33e370de2c509a8088861eab",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TestTransactionManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TestTransactionManager.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/TestTransactionManager.java",
                "patch": "@@ -112,7 +112,8 @@ public void testOneResource() throws Exception {\n     }\n \n     protected void setUp() throws Exception {\n-        tm = new TransactionManagerImpl(10 * 1000, null, null);\n+        tm = new TransactionManagerImpl(10 * 1000,\n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         rm1 = new MockResourceManager(true);\n         rm2 = new MockResourceManager(true);\n         rm3 = new MockResourceManager(false);",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TestTransactionManager.java",
                "sha": "0f482e7ed89f17e7aa14a90daabe82789fa8e1c9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TransactionManagerImplTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TransactionManagerImplTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/TransactionManagerImplTest.java",
                "patch": "@@ -49,7 +49,8 @@\n     TransactionManagerImpl tm;\n \n     protected void setUp() throws Exception {\n-        tm = new TransactionManagerImplGBean(10, transactionLog, resourceManagers);\n+        tm = new TransactionManagerImplGBean(10,\n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), transactionLog, resourceManagers);\n     }\n \n     protected void tearDown() throws Exception {",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/TransactionManagerImplTest.java",
                "sha": "be1effb5bfc91315dd49526fa74ea02d4da78847",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XATransactionTester.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XATransactionTester.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/XATransactionTester.java",
                "patch": "@@ -47,7 +47,9 @@ public void run(String[] args) throws Exception {\n         ds = getDataSource(args);\n         XAConnection xaConn = ds.getXAConnection(\"test\", \"test\");\n         XAResource xaRes = xaConn.getXAResource();\n-        manager = new TransactionManagerImpl(10, new DummyLog(), null);\n+        manager = new TransactionManagerImpl(10,\n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), \n+                new DummyLog(), null);\n         Connection c = xaConn.getConnection();\n         Statement s = c.createStatement();\n ",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XATransactionTester.java",
                "sha": "cfa454985b8bd532328e34d5a8f7abe0f86bf5b8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/geronimo/blob/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XidImporterTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/geronimo/contents/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XidImporterTest.java?ref=ec981b3d664a5586bfda8824e45b3bc2d0a782e8",
                "deletions": 1,
                "filename": "modules/transaction/src/test/org/apache/geronimo/transaction/manager/XidImporterTest.java",
                "patch": "@@ -44,7 +44,8 @@\n     XidFactory xidFactory = new XidFactoryImpl();\n \n     protected void setUp() throws Exception {\n-        tm = new TransactionManagerImpl(10 * 1000, null, null);\n+        tm = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n     }\n \n     public void testImportXid() throws Exception {",
                "raw_url": "https://github.com/apache/geronimo/raw/ec981b3d664a5586bfda8824e45b3bc2d0a782e8/modules/transaction/src/test/org/apache/geronimo/transaction/manager/XidImporterTest.java",
                "sha": "abdc77a7afe896b0b2d1c3cb3e7e9834f5b76cbe",
                "status": "modified"
            }
        ],
        "message": "GERONIMO-1599 HOWLLog throws NPE because XidFactory is missing\n\nExtract XidFactory from TransactionManagerImpl.\n\nDefine an XidFactory GBean shared by HOWLTransactionLog and TransactionManager\n~                                                                          \n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/trunk@376284 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo/commit/900b36b246dd285cde492593f5332e06d64c69f6",
        "patched_files": [
            "XidImporter.java",
            "TransactionEnlistingInterceptor.java",
            "TransactionManagerImplGBean.java",
            "TransactionContextManager.java",
            "TransactionCachingInterceptor.java",
            "Protocol.java",
            "TransactionManagerImpl.java",
            "XATransactionTester.java",
            "XidFactoryImplGBean.java",
            "HOWLLog.java",
            "plan.xml",
            "ConnectionManagerTestUtils.java"
        ],
        "repo": "geronimo",
        "unit_tests": [
            "XidImporterTest.java",
            "TransactionEnlistingInterceptorTest.java",
            "TransactionCachingInterceptorTest.java",
            "TestTransactionManager.java",
            "NontransactionalThreadPooledTimerTest.java",
            "HOWLLogTest.java",
            "HOWLLogRecoveryTest.java",
            "TransactionManagerImplTest.java",
            "ProtocolTest.java",
            "TransactionalThreadPooledTimerTest.java",
            "TransactionContextManagerTest.java"
        ]
    }
}