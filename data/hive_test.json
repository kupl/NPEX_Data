{
    "hive_96f7960": {
        "repo": "hive",
        "message": "HIVE-16587: NPE when inserting complex types with nested null values (Naresh P R, reviewed by Sankar Hariappan)\n\nSigned-off-by: Sankar Hariappan <sankarh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/96f7960c790fadb6bbc9d81fe095288241d86d8c",
        "parent": "https://github.com/apache/hive/commit/7fc5a88a149cf0767a5846cbb6ace22d8e99a63c",
        "bug_id": "hive_96f7960",
        "file": [
            {
                "sha": "84c2042676332b307afc6a34f7bbc7a2279692ba",
                "filename": "itests/src/test/resources/testconfiguration.properties",
                "blob_url": "https://github.com/apache/hive/blob/96f7960c790fadb6bbc9d81fe095288241d86d8c/itests/src/test/resources/testconfiguration.properties",
                "raw_url": "https://github.com/apache/hive/raw/96f7960c790fadb6bbc9d81fe095288241d86d8c/itests/src/test/resources/testconfiguration.properties",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/src/test/resources/testconfiguration.properties?ref=96f7960c790fadb6bbc9d81fe095288241d86d8c",
                "patch": "@@ -42,7 +42,8 @@ minitez.query.files=acid_vectorization_original_tez.q,\\\n   multi_count_distinct.q,\\\n   tez-tag.q,\\\n   tez_union_with_udf.q,\\\n-  tez_union_udtf.q\n+  tez_union_udtf.q,\\\n+  tez_complextype_with_null.q\n \n \n minillap.shared.query.files=insert_into1.q,\\",
                "deletions": 1
            },
            {
                "sha": "1795ae562603846a2562857ec30f8ad44d331dcc",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/96f7960c790fadb6bbc9d81fe095288241d86d8c/ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/96f7960c790fadb6bbc9d81fe095288241d86d8c/ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/stats/StatsUtils.java?ref=96f7960c790fadb6bbc9d81fe095288241d86d8c",
                "patch": "@@ -1345,11 +1345,11 @@ public static long getWritableSize(ObjectInspector oi, Object value) {\n     if (oi instanceof WritableStringObjectInspector) {\n       WritableStringObjectInspector woi = (WritableStringObjectInspector) oi;\n       return JavaDataModel.get().lengthForStringOfLength(\n-          woi.getPrimitiveWritableObject(value).getLength());\n+        value == null ? 0 : woi.getPrimitiveWritableObject(value).getLength());\n     } else if (oi instanceof WritableBinaryObjectInspector) {\n       WritableBinaryObjectInspector woi = (WritableBinaryObjectInspector) oi;\n       return JavaDataModel.get().lengthForByteArrayOfSize(\n-          woi.getPrimitiveWritableObject(value).getLength());\n+        value == null ? 0 : woi.getPrimitiveWritableObject(value).getLength());\n     } else if (oi instanceof WritableBooleanObjectInspector) {\n       return JavaDataModel.get().primitive1();\n     } else if (oi instanceof WritableByteObjectInspector) {",
                "deletions": 2
            },
            {
                "sha": "7a0f240cdb29fa1c61abb95951bbef919baa2207",
                "filename": "ql/src/test/queries/clientpositive/tez_complextype_with_null.q",
                "blob_url": "https://github.com/apache/hive/blob/96f7960c790fadb6bbc9d81fe095288241d86d8c/ql/src/test/queries/clientpositive/tez_complextype_with_null.q",
                "raw_url": "https://github.com/apache/hive/raw/96f7960c790fadb6bbc9d81fe095288241d86d8c/ql/src/test/queries/clientpositive/tez_complextype_with_null.q",
                "status": "added",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/tez_complextype_with_null.q?ref=96f7960c790fadb6bbc9d81fe095288241d86d8c",
                "patch": "@@ -0,0 +1,15 @@\n+CREATE TABLE complex1 (\n+    c0 int,\n+    c1 array<int>,\n+    c2 map<int, string>,\n+    c3 struct<f1:int,f2:string,f3:array<int>>,\n+    c4 array<struct<f1:int,f2:string,f3:array<int>>>);\n+\n+INSERT INTO complex1\n+    SELECT 3,\n+       array(1, 2, null),\n+       map(1, 'one', 2, null),\n+       named_struct('f1', cast(null as int), 'f2', cast(null as string), 'f3', array(1, 2, null)),\n+       array(named_struct('f1', 11, 'f2', 'two', 'f3', array(2, 3, 4)));\n+\n+select * from complex1;",
                "deletions": 0
            },
            {
                "sha": "f20151d746c17b28be1f9dffd97d6bca12913d08",
                "filename": "ql/src/test/results/clientpositive/tez/tez_complextype_with_null.q.out",
                "blob_url": "https://github.com/apache/hive/blob/96f7960c790fadb6bbc9d81fe095288241d86d8c/ql/src/test/results/clientpositive/tez/tez_complextype_with_null.q.out",
                "raw_url": "https://github.com/apache/hive/raw/96f7960c790fadb6bbc9d81fe095288241d86d8c/ql/src/test/results/clientpositive/tez/tez_complextype_with_null.q.out",
                "status": "added",
                "changes": 50,
                "additions": 50,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/tez_complextype_with_null.q.out?ref=96f7960c790fadb6bbc9d81fe095288241d86d8c",
                "patch": "@@ -0,0 +1,50 @@\n+PREHOOK: query: CREATE TABLE complex1 (\n+    c0 int,\n+    c1 array<int>,\n+    c2 map<int, string>,\n+    c3 struct<f1:int,f2:string,f3:array<int>>,\n+    c4 array<struct<f1:int,f2:string,f3:array<int>>>)\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@complex1\n+POSTHOOK: query: CREATE TABLE complex1 (\n+    c0 int,\n+    c1 array<int>,\n+    c2 map<int, string>,\n+    c3 struct<f1:int,f2:string,f3:array<int>>,\n+    c4 array<struct<f1:int,f2:string,f3:array<int>>>)\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@complex1\n+PREHOOK: query: INSERT INTO complex1\n+    SELECT 3,\n+       array(1, 2, null),\n+       map(1, 'one', 2, null),\n+       named_struct('f1', cast(null as int), 'f2', cast(null as string), 'f3', array(1, 2, null)),\n+       array(named_struct('f1', 11, 'f2', 'two', 'f3', array(2, 3, 4)))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@complex1\n+POSTHOOK: query: INSERT INTO complex1\n+    SELECT 3,\n+       array(1, 2, null),\n+       map(1, 'one', 2, null),\n+       named_struct('f1', cast(null as int), 'f2', cast(null as string), 'f3', array(1, 2, null)),\n+       array(named_struct('f1', 11, 'f2', 'two', 'f3', array(2, 3, 4)))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@complex1\n+POSTHOOK: Lineage: complex1.c0 SIMPLE []\n+POSTHOOK: Lineage: complex1.c1 EXPRESSION []\n+POSTHOOK: Lineage: complex1.c2 EXPRESSION []\n+POSTHOOK: Lineage: complex1.c3 EXPRESSION []\n+POSTHOOK: Lineage: complex1.c4 EXPRESSION []\n+PREHOOK: query: select * from complex1\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@complex1\n+PREHOOK: Output: hdfs://### HDFS PATH ###\n+POSTHOOK: query: select * from complex1\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@complex1\n+POSTHOOK: Output: hdfs://### HDFS PATH ###\n+3\t[1,2,null]\t{1:\"one\",2:null}\t{\"f1\":null,\"f2\":null,\"f3\":[1,2,null]}\t[{\"f1\":11,\"f2\":\"two\",\"f3\":[2,3,4]}]",
                "deletions": 0
            }
        ],
        "patched_files": [
            "StatsUtils.java"
        ],
        "unit_tests": [
            "TestStatsUtils.java"
        ]
    },
    "hive_48e4e04": {
        "repo": "hive",
        "message": "HIVE-16142: ATSHook NPE via LLAP (Pengcheng Xiong, reviewed by Ashutosh Chauhan)",
        "commit": "https://github.com/apache/hive/commit/48e4e04c3b446f219c24b5fd0cf03c9e2e210f0c",
        "parent": "https://github.com/apache/hive/commit/35d707950ddd210c37533be3da51cea730bac881",
        "bug_id": "hive_48e4e04",
        "file": [
            {
                "sha": "d35e3ba56a2395ad8665e8df7c29a0ada830a657",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/ExplainTask.java",
                "blob_url": "https://github.com/apache/hive/blob/48e4e04c3b446f219c24b5fd0cf03c9e2e210f0c/ql/src/java/org/apache/hadoop/hive/ql/exec/ExplainTask.java",
                "raw_url": "https://github.com/apache/hive/raw/48e4e04c3b446f219c24b5fd0cf03c9e2e210f0c/ql/src/java/org/apache/hadoop/hive/ql/exec/ExplainTask.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/ExplainTask.java?ref=48e4e04c3b446f219c24b5fd0cf03c9e2e210f0c",
                "patch": "@@ -797,10 +797,11 @@ private JSONObject outputPlan(Object work, PrintStream out,\n                 operator.getOperatorId());\n             if (!this.work.isUserLevelExplain() && this.work.isFormatted()\n                 && operator instanceof ReduceSinkOperator) {\n-              ((JSONObject) jsonOut.get(JSONObject.getNames(jsonOut)[0])).put(\n-                  OUTPUT_OPERATORS,\n-                  Arrays.toString(((ReduceSinkOperator) operator).getConf().getOutputOperators()\n-                      .toArray()));\n+              List<String> outputOperators = ((ReduceSinkOperator) operator).getConf().getOutputOperators();\n+              if (outputOperators != null) {\n+                ((JSONObject) jsonOut.get(JSONObject.getNames(jsonOut)[0])).put(OUTPUT_OPERATORS,\n+                    Arrays.toString(outputOperators.toArray()));\n+              }\n             }\n           }\n         }",
                "deletions": 4
            }
        ],
        "patched_files": [
            "ExplainTask.java"
        ],
        "unit_tests": [
            "TestExplainTask.java"
        ]
    },
    "hive_88e86b9": {
        "repo": "hive",
        "message": "HIVE-15329: NullPointerException might occur when create table (Meilong Huang reviewed by Prasanth Jayachandran)",
        "commit": "https://github.com/apache/hive/commit/88e86b98835b949f8410259c6dab0c802233bb73",
        "parent": "https://github.com/apache/hive/commit/e43861a1023920b23c126733ceca273bc766c58a",
        "bug_id": "hive_88e86b9",
        "file": [
            {
                "sha": "05ee3ace1e22c9da78f8f1441a6510a279b4db71",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/88e86b98835b949f8410259c6dab0c802233bb73/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/88e86b98835b949f8410259c6dab0c802233bb73/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java?ref=88e86b98835b949f8410259c6dab0c802233bb73",
                "patch": "@@ -1493,7 +1493,7 @@ public static Path getOriginalLocation(\n   }\n \n   public static boolean isNonNativeTable(Table table) {\n-    if (table == null) {\n+    if (table == null || table.getParameters() == null) {\n       return false;\n     }\n     return (table.getParameters().get(hive_metastoreConstants.META_TABLE_STORAGE) != null);",
                "deletions": 1
            }
        ],
        "patched_files": [
            "MetaStoreUtils.java"
        ],
        "unit_tests": [
            "TestMetaStoreUtils.java"
        ]
    },
    "hive_f766b8f": {
        "repo": "hive",
        "message": "HIVE-15778: DROP INDEX (non-existent) throws NPE when using DbNotificationListener (Vamsee Yarlagadda, reviewed by Aihua Xu)",
        "commit": "https://github.com/apache/hive/commit/f766b8fe1dd332a31ed04ef8ff53a3136c87ea3c",
        "parent": "https://github.com/apache/hive/commit/7cca0978af944b4a76dd40e014e628f82f43c42f",
        "bug_id": "hive_f766b8f",
        "file": [
            {
                "sha": "f8c3c4e48db0df9d6c18801bcd61f9e5dc6eb7c2",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/f766b8fe1dd332a31ed04ef8ff53a3136c87ea3c/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/f766b8fe1dd332a31ed04ef8ff53a3136c87ea3c/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=f766b8fe1dd332a31ed04ef8ff53a3136c87ea3c",
                "patch": "@@ -4614,9 +4614,12 @@ private boolean drop_index_by_name_core(final RawStore ms,\n           deleteTableData(tblPath);\n           // ok even if the data is not deleted\n         }\n-        for (MetaStoreEventListener listener : listeners) {\n-          DropIndexEvent dropIndexEvent = new DropIndexEvent(index, success, this);\n-          listener.onDropIndex(dropIndexEvent);\n+        // Skip the event listeners if the index is NULL\n+        if (index != null) {\n+          for (MetaStoreEventListener listener : listeners) {\n+            DropIndexEvent dropIndexEvent = new DropIndexEvent(index, success, this);\n+            listener.onDropIndex(dropIndexEvent);\n+          }\n         }\n       }\n       return success;",
                "deletions": 3
            }
        ],
        "patched_files": [
            "HiveMetaStore.java"
        ],
        "unit_tests": [
            "TestHiveMetaStore.java"
        ]
    },
    "hive_bef879d": {
        "repo": "hive",
        "message": "HIVE-12557 : NPE while removing entry in LRFU cache (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
        "commit": "https://github.com/apache/hive/commit/bef879d0a3e1827bffbd278a883e721124ee0eea",
        "parent": "https://github.com/apache/hive/commit/1d02ab578dbd47103a70710abd4d949ea8cea9d2",
        "bug_id": "hive_bef879d",
        "file": [
            {
                "sha": "40cb92d24550489bb9df653e179700594fcb9679",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java",
                "blob_url": "https://github.com/apache/hive/blob/bef879d0a3e1827bffbd278a883e721124ee0eea/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java",
                "raw_url": "https://github.com/apache/hive/raw/bef879d0a3e1827bffbd278a883e721124ee0eea/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java",
                "status": "modified",
                "changes": 75,
                "additions": 60,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java?ref=bef879d0a3e1827bffbd278a883e721124ee0eea",
                "patch": "@@ -140,7 +140,9 @@ public void notifyUnlock(LlapCacheableBuffer buffer) {\n       } else if (heapSize == heap.length) {\n         // The buffer is not in the (full) heap. Demote the top item of the heap into the list.\n         LlapCacheableBuffer demoted = heap[0];\n-        synchronized (listLock) {\n+        listLock.lock();\n+        try {\n+          assert demoted.indexInHeap == 0; // Noone could have moved it, we have the heap lock.\n           demoted.indexInHeap = LlapCacheableBuffer.IN_LIST;\n           demoted.prev = null;\n           if (listHead != null) {\n@@ -151,6 +153,8 @@ public void notifyUnlock(LlapCacheableBuffer buffer) {\n             listHead = listTail = demoted;\n             demoted.next = null;\n           }\n+        } finally {\n+          listLock.unlock();\n         }\n         // Now insert the buffer in its place and restore heap property.\n         buffer.indexInHeap = 0;\n@@ -340,44 +344,62 @@ private void removeFromListAndUnlock(LlapCacheableBuffer buffer) {\n   }\n \n   private void removeFromListUnderLock(LlapCacheableBuffer buffer) {\n-    if (buffer == listTail) {\n+    buffer.indexInHeap = LlapCacheableBuffer.NOT_IN_CACHE;\n+    boolean isTail = buffer == listTail, isHead = buffer == listHead;\n+    if ((isTail != (buffer.next == null)) || (isHead != (buffer.prev == null))) {\n+      debugDumpListOnError(buffer);\n+      throw new AssertionError(\"LRFU list is corrupted.\");\n+    }\n+    if (isTail) {\n       listTail = buffer.prev;\n     } else {\n       buffer.next.prev = buffer.prev;\n     }\n-    if (buffer == listHead) {\n+    if (isHead) {\n       listHead = buffer.next;\n     } else {\n       buffer.prev.next = buffer.next;\n     }\n-    buffer.indexInHeap = LlapCacheableBuffer.NOT_IN_CACHE;\n   }\n \n   private void removeFromListUnderLockNoStateUpdate(\n       LlapCacheableBuffer from, LlapCacheableBuffer to) {\n-    if (to == listTail) {\n+    boolean isToTail = to == listTail, isFromHead = from == listHead;\n+    if ((isToTail != (to.next == null)) || (isFromHead != (from.prev == null))) {\n+      debugDumpListOnError(from, to);\n+      throw new AssertionError(\"LRFU list is corrupted.\");\n+    }\n+    if (isToTail) {\n       listTail = from.prev;\n     } else {\n       to.next.prev = from.prev;\n     }\n-    if (from == listHead) {\n+    if (isFromHead) {\n       listHead = to.next;\n     } else {\n       from.prev.next = to.next;\n     }\n   }\n \n-  public String debugDumpHeap() {\n-    StringBuilder result = new StringBuilder(\"List: \");\n-    if (listHead == null) {\n-      result.append(\"<empty>\");\n-    } else {\n-      LlapCacheableBuffer listItem = listHead;\n-      while (listItem != null) {\n-        result.append(listItem.toStringForCache()).append(\" -> \");\n-        listItem = listItem.next;\n+  private void debugDumpListOnError(LlapCacheableBuffer... buffers) {\n+    // Hopefully this will be helpful in case of NPEs.\n+    StringBuilder listDump = new StringBuilder(\"Invalid list removal. List: \");\n+    try {\n+      dumpList(listDump, listHead, listTail);\n+      int i = 0;\n+      for (LlapCacheableBuffer buffer : buffers) {\n+        listDump.append(\"; list from the buffer #\").append(i).append(\" being removed: \");\n+        dumpList(listDump, buffer, null);\n       }\n+    } catch (Throwable t) {\n+      LlapIoImpl.LOG.error(\"Error dumping the lists on error\", t);\n     }\n+    LlapIoImpl.LOG.error(listDump.toString());\n+  }\n+\n+  public String debugDumpHeap() {\n+    StringBuilder result = new StringBuilder(\"List: \");\n+    dumpList(result, listHead, listTail);\n     result.append(\"\\nHeap:\");\n     if (heapSize == 0) {\n       result.append(\" <empty>\\n\");\n@@ -421,6 +443,29 @@ public String debugDumpHeap() {\n     return result.toString();\n   }\n \n+  private static void dumpList(StringBuilder result,\n+      LlapCacheableBuffer listHeadLocal, LlapCacheableBuffer listTailLocal) {\n+    if (listHeadLocal == null) {\n+      result.append(\"<empty>\");\n+      return;\n+    }\n+    LlapCacheableBuffer listItem = listHeadLocal;\n+    while (listItem.prev != null) {\n+      listItem = listItem.prev;  // To detect incorrect lists.\n+    }\n+    while (listItem != null) {\n+      result.append(listItem.toStringForCache());\n+      if (listItem == listTailLocal) {\n+        result.append(\"(tail)\"); // To detect incorrect lists.\n+      }\n+      if (listItem == listHeadLocal) {\n+        result.append(\"(head)\"); // To detect incorrect lists.\n+      }\n+      result.append(\" -> \");\n+      listItem = listItem.next;\n+    }\n+  }\n+\n   @Override\n   public String debugDumpForOom() {\n     String result = debugDumpHeap();",
                "deletions": 15
            }
        ],
        "patched_files": [
            "LowLevelLrfuCachePolicy.java"
        ],
        "unit_tests": [
            "TestLowLevelLrfuCachePolicy.java"
        ]
    },
    "hive_a496e58": {
        "repo": "hive",
        "message": "HIVE-16433: Not nullify variable \"rj\" to avoid NPE due to race condition in ExecDriver (Zhihai Xu via Jimmy Xiang)",
        "commit": "https://github.com/apache/hive/commit/a496e581152425773080aac48cf479e493cd5b74",
        "parent": "https://github.com/apache/hive/commit/e5a6b30241c166c82d082effd72967dc25804f97",
        "bug_id": "hive_a496e58",
        "file": [
            {
                "sha": "20ecbcdc6fd7a224316ddfd9d3992c5b9cbe261d",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java",
                "blob_url": "https://github.com/apache/hive/blob/a496e581152425773080aac48cf479e493cd5b74/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java",
                "raw_url": "https://github.com/apache/hive/raw/a496e581152425773080aac48cf479e493cd5b74/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java",
                "status": "modified",
                "changes": 38,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java?ref=a496e581152425773080aac48cf479e493cd5b74",
                "patch": "@@ -117,6 +117,8 @@\n   protected transient JobConf job;\n   public static MemoryMXBean memoryMXBean;\n   protected HadoopJobExecHelper jobExecHelper;\n+  private transient boolean isShutdown = false;\n+  private transient boolean jobKilled = false;\n \n   protected static transient final Logger LOG = LoggerFactory.getLogger(ExecDriver.class);\n \n@@ -413,10 +415,7 @@ public int execute(DriverContext driverContext) {\n \n       if (driverContext.isShutdown()) {\n         LOG.warn(\"Task was cancelled\");\n-        if (rj != null) {\n-          rj.killJob();\n-          rj = null;\n-        }\n+        killJob();\n         return 5;\n       }\n \n@@ -449,7 +448,7 @@ public int execute(DriverContext driverContext) {\n \n         if (rj != null) {\n           if (returnVal != 0) {\n-            rj.killJob();\n+            killJob();\n           }\n           jobID = rj.getID().toString();\n         }\n@@ -857,22 +856,37 @@ public void logPlanProgress(SessionState ss) throws IOException {\n     ss.getHiveHistory().logPlanProgress(queryPlan);\n   }\n \n+  public boolean isTaskShutdown() {\n+    return isShutdown;\n+  }\n+\n   @Override\n   public void shutdown() {\n     super.shutdown();\n-    if (rj != null) {\n+    killJob();\n+    isShutdown = true;\n+  }\n+\n+  @Override\n+  public String getExternalHandle() {\n+    return this.jobID;\n+  }\n+\n+  private void killJob() {\n+    boolean needToKillJob = false;\n+    synchronized(this) {\n+      if (rj != null && !jobKilled) {\n+        jobKilled = true;\n+        needToKillJob = true;\n+      }\n+    }\n+    if (needToKillJob) {\n       try {\n         rj.killJob();\n       } catch (Exception e) {\n         LOG.warn(\"failed to kill job \" + rj.getID(), e);\n       }\n-      rj = null;\n     }\n   }\n-\n-  @Override\n-  public String getExternalHandle() {\n-    return this.jobID;\n-  }\n }\n ",
                "deletions": 12
            }
        ],
        "patched_files": [
            "ExecDriver.java"
        ],
        "unit_tests": [
            "TestExecDriver.java"
        ]
    },
    "hive_82b84ac": {
        "repo": "hive",
        "message": "HIVE-14173: NPE was thrown after enabling directsql in the middle of session (Chaoyu Tang, reviewed by Sergey Shelukhin)",
        "commit": "https://github.com/apache/hive/commit/82b84ac766f54c72a76d5e7fe8fd4fe67d264fe7",
        "parent": "https://github.com/apache/hive/commit/fad946bb2c11a9159b78426865975c0782e5f663",
        "bug_id": "hive_82b84ac",
        "file": [
            {
                "sha": "82de857d221889d2c62252aabc0741a83d5f5313",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "blob_url": "https://github.com/apache/hive/blob/82b84ac766f54c72a76d5e7fe8fd4fe67d264fe7/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "raw_url": "https://github.com/apache/hive/raw/82b84ac766f54c72a76d5e7fe8fd4fe67d264fe7/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java?ref=82b84ac766f54c72a76d5e7fe8fd4fe67d264fe7",
                "patch": "@@ -2661,6 +2661,10 @@ public GetHelper(String dbName, String tblName, boolean allowSql, boolean allowJ\n       // the fallback from failed SQL to JDO is not possible.\n       boolean isConfigEnabled = HiveConf.getBoolVar(getConf(), ConfVars.METASTORE_TRY_DIRECT_SQL)\n           && (HiveConf.getBoolVar(getConf(), ConfVars.METASTORE_TRY_DIRECT_SQL_DDL) || !isInTxn);\n+      if (isConfigEnabled && directSql == null) {\n+        directSql = new MetaStoreDirectSql(pm, getConf());\n+      }\n+\n       if (!allowJdo && isConfigEnabled && !directSql.isCompatibleDatastore()) {\n         throw new MetaException(\"SQL is not operational\"); // test path; SQL is enabled and broken.\n       }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ObjectStore.java"
        ],
        "unit_tests": [
            "TestObjectStore.java"
        ]
    },
    "hive_0d93438": {
        "repo": "hive",
        "message": "HIVE-10776 - Schema on insert for bucketed tables throwing NullPointerException(Eugene Koifman, reviewed by Alan Gates)",
        "commit": "https://github.com/apache/hive/commit/0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6",
        "parent": "https://github.com/apache/hive/commit/95929308b43bd741220eeca60896eadb92496510",
        "bug_id": "hive_0d93438",
        "file": [
            {
                "sha": "7f355e5d015f13d86a79efd782a562c5f485b1db",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java?ref=0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6",
                "patch": "@@ -3910,7 +3910,7 @@ static boolean isRegex(String pattern, HiveConf conf) {\n    * @throws SemanticException\n    */\n   private void handleInsertStatementSpec(List<ExprNodeDesc> col_list, String dest,\n-                                         RowResolver out_rwsch, RowResolver inputRR, QB qb,\n+                                         RowResolver outputRR, RowResolver inputRR, QB qb,\n                                          ASTNode selExprList) throws SemanticException {\n     //(z,x)\n     List<String> targetTableSchema = qb.getParseInfo().getDestSchemaForClause(dest);//specified in the query\n@@ -3932,7 +3932,7 @@ private void handleInsertStatementSpec(List<ExprNodeDesc> col_list, String dest,\n     Map<String, ColumnInfo> targetCol2ColumnInfo = new HashMap<String, ColumnInfo>();\n     int colListPos = 0;\n     for(String targetCol : targetTableSchema) {\n-      targetCol2ColumnInfo.put(targetCol, out_rwsch.getColumnInfos().get(colListPos));\n+      targetCol2ColumnInfo.put(targetCol, outputRR.getColumnInfos().get(colListPos));\n       targetCol2Projection.put(targetCol, col_list.get(colListPos++));\n     }\n     Table target = qb.getMetaData().getDestTableForAlias(dest);\n@@ -3976,16 +3976,17 @@ private void handleInsertStatementSpec(List<ExprNodeDesc> col_list, String dest,\n         t.setText(\"TOK_NULL\");\n         ExprNodeDesc exp = genExprNodeDesc(new ASTNode(t), inputRR, tcCtx);\n         new_col_list.add(exp);\n-        final String tableAlias = \"\";//is this OK? this column doesn't come from any table\n+        final String tableAlias = null;//this column doesn't come from any table\n         ColumnInfo colInfo = new ColumnInfo(getColumnInternalName(colListPos),\n           exp.getWritableObjectInspector(), tableAlias, false);\n         newSchema.add(colInfo);\n+        outputRR.addMappingOnly(colInfo.getTabAlias(), colInfo.getInternalName(), colInfo);\n       }\n       colListPos++;\n     }\n     col_list.clear();\n     col_list.addAll(new_col_list);\n-    out_rwsch.setRowSchema(new RowSchema(newSchema));\n+    outputRR.setRowSchema(new RowSchema(newSchema));\n   }\n   String recommendName(ExprNodeDesc exp, String colAlias) {\n     if (!colAlias.startsWith(autogenColAliasPrfxLbl)) {",
                "deletions": 4
            },
            {
                "sha": "b7c6b58aad9d0b99a2e619a09a02c2189fcee277",
                "filename": "ql/src/test/queries/clientpositive/insert_into_with_schema2.q",
                "blob_url": "https://github.com/apache/hive/blob/0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6/ql/src/test/queries/clientpositive/insert_into_with_schema2.q",
                "raw_url": "https://github.com/apache/hive/raw/0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6/ql/src/test/queries/clientpositive/insert_into_with_schema2.q",
                "status": "added",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/insert_into_with_schema2.q?ref=0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6",
                "patch": "@@ -0,0 +1,23 @@\n+-- SORT_QUERY_RESULTS;\n+\n+set hive.enforce.bucketing=true;\n+\n+create table studenttab10k (age2 int);\n+insert into studenttab10k values(1);\n+\n+create table student_acid (age int, grade int)\n+ clustered by (age) into 1 buckets;\n+\n+insert into student_acid(age) select * from studenttab10k;\n+\n+select * from student_acid;\n+\n+insert into student_acid(grade, age) select 3 g, * from studenttab10k;\n+\n+select * from student_acid;\n+\n+insert into student_acid(grade, age) values(20, 2);\n+\n+insert into student_acid(age) values(22);\n+\n+select * from student_acid;",
                "deletions": 0
            },
            {
                "sha": "a55a82f8f9c3c43a728b7d2d106b1bbb24a3337c",
                "filename": "ql/src/test/results/clientpositive/insert_into_with_schema2.q.out",
                "blob_url": "https://github.com/apache/hive/blob/0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6/ql/src/test/results/clientpositive/insert_into_with_schema2.q.out",
                "raw_url": "https://github.com/apache/hive/raw/0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6/ql/src/test/results/clientpositive/insert_into_with_schema2.q.out",
                "status": "added",
                "changes": 98,
                "additions": 98,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/insert_into_with_schema2.q.out?ref=0d93438a3543cb64cbe2ebcdc21e5b40c1dd86e6",
                "patch": "@@ -0,0 +1,98 @@\n+PREHOOK: query: create table studenttab10k (age2 int)\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@studenttab10k\n+POSTHOOK: query: create table studenttab10k (age2 int)\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@studenttab10k\n+PREHOOK: query: insert into studenttab10k values(1)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@values__tmp__table__1\n+PREHOOK: Output: default@studenttab10k\n+POSTHOOK: query: insert into studenttab10k values(1)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@values__tmp__table__1\n+POSTHOOK: Output: default@studenttab10k\n+POSTHOOK: Lineage: studenttab10k.age2 EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]\n+PREHOOK: query: create table student_acid (age int, grade int)\n+ clustered by (age) into 1 buckets\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@student_acid\n+POSTHOOK: query: create table student_acid (age int, grade int)\n+ clustered by (age) into 1 buckets\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@student_acid\n+PREHOOK: query: insert into student_acid(age) select * from studenttab10k\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@studenttab10k\n+PREHOOK: Output: default@student_acid\n+POSTHOOK: query: insert into student_acid(age) select * from studenttab10k\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@studenttab10k\n+POSTHOOK: Output: default@student_acid\n+POSTHOOK: Lineage: student_acid.age SIMPLE [(studenttab10k)studenttab10k.FieldSchema(name:age2, type:int, comment:null), ]\n+POSTHOOK: Lineage: student_acid.grade EXPRESSION []\n+PREHOOK: query: select * from student_acid\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@student_acid\n+#### A masked pattern was here ####\n+POSTHOOK: query: select * from student_acid\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@student_acid\n+#### A masked pattern was here ####\n+1\tNULL\n+PREHOOK: query: insert into student_acid(grade, age) select 3 g, * from studenttab10k\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@studenttab10k\n+PREHOOK: Output: default@student_acid\n+POSTHOOK: query: insert into student_acid(grade, age) select 3 g, * from studenttab10k\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@studenttab10k\n+POSTHOOK: Output: default@student_acid\n+POSTHOOK: Lineage: student_acid.age SIMPLE [(studenttab10k)studenttab10k.FieldSchema(name:age2, type:int, comment:null), ]\n+POSTHOOK: Lineage: student_acid.grade SIMPLE []\n+PREHOOK: query: select * from student_acid\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@student_acid\n+#### A masked pattern was here ####\n+POSTHOOK: query: select * from student_acid\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@student_acid\n+#### A masked pattern was here ####\n+1\t3\n+1\tNULL\n+PREHOOK: query: insert into student_acid(grade, age) values(20, 2)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@values__tmp__table__2\n+PREHOOK: Output: default@student_acid\n+POSTHOOK: query: insert into student_acid(grade, age) values(20, 2)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@values__tmp__table__2\n+POSTHOOK: Output: default@student_acid\n+POSTHOOK: Lineage: student_acid.age EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col2, type:string, comment:), ]\n+POSTHOOK: Lineage: student_acid.grade EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]\n+PREHOOK: query: insert into student_acid(age) values(22)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@values__tmp__table__3\n+PREHOOK: Output: default@student_acid\n+POSTHOOK: query: insert into student_acid(age) values(22)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@values__tmp__table__3\n+POSTHOOK: Output: default@student_acid\n+POSTHOOK: Lineage: student_acid.age EXPRESSION [(values__tmp__table__3)values__tmp__table__3.FieldSchema(name:tmp_values_col1, type:string, comment:), ]\n+POSTHOOK: Lineage: student_acid.grade EXPRESSION []\n+PREHOOK: query: select * from student_acid\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@student_acid\n+#### A masked pattern was here ####\n+POSTHOOK: query: select * from student_acid\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@student_acid\n+#### A masked pattern was here ####\n+1\t3\n+1\tNULL\n+2\t20\n+22\tNULL",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SemanticAnalyzer.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzer.java"
        ]
    },
    "hive_1a3e4be": {
        "repo": "hive",
        "message": "HIVE-14814: metastoreClient is used directly in Hive cause NPE (Prasanth Jayachandran reviewed by Eugene Koifman)",
        "commit": "https://github.com/apache/hive/commit/1a3e4be3dbd485f2630c7249254727ce58374d1c",
        "parent": "https://github.com/apache/hive/commit/c9224d58cce6e0b0520598894e962c48ce9d97e3",
        "bug_id": "hive_1a3e4be",
        "file": [
            {
                "sha": "de6adb5047bf6457d031050b6e72d54a6534ccfa",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java",
                "blob_url": "https://github.com/apache/hive/blob/1a3e4be3dbd485f2630c7249254727ce58374d1c/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java",
                "raw_url": "https://github.com/apache/hive/raw/1a3e4be3dbd485f2630c7249254727ce58374d1c/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java?ref=1a3e4be3dbd485f2630c7249254727ce58374d1c",
                "patch": "@@ -1864,7 +1864,7 @@ public Void call() throws Exception {\n         for (Partition p : partitionsMap.values()) {\n           partNames.add(p.getName());\n         }\n-        metaStoreClient.addDynamicPartitions(txnId, tbl.getDbName(), tbl.getTableName(),\n+        getMSC().addDynamicPartitions(txnId, tbl.getDbName(), tbl.getTableName(),\n           partNames, AcidUtils.toDataOperationType(operation));\n       }\n       LOG.info(\"Loaded \" + partitionsMap.size() + \" partitions\");",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Hive.java"
        ],
        "unit_tests": [
            "TestHive.java"
        ]
    },
    "hive_838da8c": {
        "repo": "hive",
        "message": "HIVE-11200 : LLAP: Cache BuddyAllocator throws NPE (Sergey Shelukhin)",
        "commit": "https://github.com/apache/hive/commit/838da8cb41b6b32b19b0ae8b793d5b7d4e6f613c",
        "parent": "https://github.com/apache/hive/commit/3b8fdc1dc7228fbd9107ee003d9dbe9e2dfb8692",
        "bug_id": "hive_838da8c",
        "file": [
            {
                "sha": "fca624917d58800d2a4ef354bcfe2f30bc29b402",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java",
                "blob_url": "https://github.com/apache/hive/blob/838da8cb41b6b32b19b0ae8b793d5b7d4e6f613c/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java",
                "raw_url": "https://github.com/apache/hive/raw/838da8cb41b6b32b19b0ae8b793d5b7d4e6f613c/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java",
                "status": "modified",
                "changes": 87,
                "additions": 66,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java?ref=838da8cb41b6b32b19b0ae8b793d5b7d4e6f613c",
                "patch": "@@ -118,6 +118,9 @@ public void allocateMultiple(LlapMemoryBuffer[] dest, int size)\n     }\n     // First try to quickly lock some of the correct-sized free lists and allocate from them.\n     int arenaCount = allocatedArenas.get();\n+    if (arenaCount < 0) {\n+      arenaCount = -arenaCount - 1; // Next arena is being allocated.\n+    }\n     long threadId = arenaCount > 1 ? Thread.currentThread().getId() : 0;\n     {\n       int startIndex = (int)(threadId % arenaCount), index = startIndex;\n@@ -317,18 +320,21 @@ private int allocateWithSplit(int arenaIx, int freeListIx,\n       FreeList freeList = freeLists[freeListIx];\n       int remaining = -1;\n       freeList.lock.lock();\n-      // TODO: write some comments for this method\n       try {\n+        // Try to allocate from target-sized free list, maybe we'll get lucky.\n         ix = allocateFromFreeListUnderLock(\n             arenaIx, freeList, freeListIx, dest, ix, allocationSize);\n         remaining = dest.length - ix;\n         if (remaining == 0) return ix;\n       } finally {\n         freeList.lock.unlock();\n       }\n-      byte headerData = makeHeader(freeListIx, true);\n-      int headerStep = 1 << freeListIx;\n-      int splitListIx = freeListIx + 1;\n+      byte headerData = makeHeader(freeListIx, true); // Header for newly allocated used blocks.\n+      int headerStep = 1 << freeListIx; // Number of headers (smallest blocks) per target block.\n+      int splitListIx = freeListIx + 1; // Next free list from which we will be splitting.\n+      // Each iteration of this loop tries to split blocks from one level of the free list into\n+      // target size blocks; if we cannot satisfy the allocation from the free list containing the\n+      // blocks of a particular size, we'll try to split yet larger blocks, until we run out.\n       while (remaining > 0 && splitListIx < freeLists.length) {\n         int splitWaysLog2 = (splitListIx - freeListIx);\n         assert splitWaysLog2 > 0;\n@@ -338,28 +344,33 @@ private int allocateWithSplit(int arenaIx, int freeListIx,\n         FreeList splitList = freeLists[splitListIx];\n         splitList.lock.lock();\n         try {\n-          int headerIx = splitList.listHead;\n+          int headerIx = splitList.listHead; // Index of the next free block to split.\n           while (headerIx >= 0 && remaining > 0) {\n             int origOffset = offsetFromHeaderIndex(headerIx), offset = origOffset;\n-            int toTake = Math.min(splitWays, remaining); // We split it splitWays and take toTake.\n+            // We will split the block at headerIx [splitWays] ways, and take [toTake] blocks,\n+            // which will leave [lastSplitBlocksRemaining] free blocks of target size.\n+            int toTake = Math.min(splitWays, remaining);\n             remaining -= toTake;\n             lastSplitBlocksRemaining = splitWays - toTake; // Whatever remains.\n-            // Take toTake blocks by splitting the block at origOffset.\n+            // Take toTake blocks by splitting the block at offset.\n             for (; toTake > 0; ++ix, --toTake, headerIx += headerStep, offset += allocationSize) {\n               headers[headerIx] = headerData;\n               // TODO: this could be done out of the lock, we only need to take the blocks out.\n               ((LlapDataBuffer)dest[ix]).initialize(arenaIx, data, offset, allocationSize);\n             }\n             lastSplitNextHeader = headerIx; // If anything remains, this is where it starts.\n-            headerIx = data.getInt(origOffset + 4); // Get next item from the free list.\n+            headerIx = getNextFreeListItem(origOffset);\n           }\n           replaceListHeadUnderLock(splitList, headerIx); // In the end, update free list head.\n         } finally {\n           splitList.lock.unlock();\n         }\n         if (remaining == 0) {\n-          // We have just obtained all we needed by splitting at lastSplitBlockOffset; now\n-          // we need to put the space remaining from that block into lower free lists.\n+          // We have just obtained all we needed by splitting some block; now we need\n+          // to put the space remaining from that block into lower free lists.\n+          // We'll put at most one block into each list, since 2 blocks can always be combined\n+          // to make a larger-level block. Each bit in the remaining target-sized blocks count\n+          // is one block in a list offset from target-sized list by bit index.\n           int newListIndex = freeListIx;\n           while (lastSplitBlocksRemaining > 0) {\n             if ((lastSplitBlocksRemaining & 1) == 1) {\n@@ -394,17 +405,43 @@ private void replaceListHeadUnderLock(FreeList freeList, int headerIx) {\n \n     private int allocateWithExpand(\n         int arenaIx, int freeListIx, LlapMemoryBuffer[] dest, int ix, int size) {\n-      if (data == null) {\n-        synchronized (this) {\n-          // Never goes from non-null to null, so this is the only place we need sync.\n-          if (data == null) {\n-            init();\n-            allocatedArenas.incrementAndGet();\n-            metrics.incrAllocatedArena();\n+      while (true) {\n+        int arenaCount = allocatedArenas.get(), allocArenaCount = arenaCount;\n+        if (arenaCount < 0)  {\n+          allocArenaCount = -arenaCount - 1; // Someone is allocating an arena.\n+        }\n+        if (allocArenaCount > arenaIx) {\n+          // Someone already allocated this arena; just do the usual thing.\n+          return allocateWithSplit(arenaIx, freeListIx, dest, ix, size);\n+        }\n+        if ((arenaIx + 1) == -arenaCount) {\n+          // Someone is allocating this arena. Wait a bit and recheck.\n+          try {\n+            synchronized (this) {\n+              this.wait(100);\n+            }\n+          } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt(); // Restore interrupt, won't handle here.\n           }\n+          continue;\n         }\n+        // Either this arena is being allocated, or it is already allocated, or it is next. The\n+        // caller should not try to allocate another arena before waiting for the previous one.\n+        assert arenaCount == arenaIx :\n+          \"Arena count \" + arenaCount + \" but \" + arenaIx + \" is not being allocated\";\n+        if (!allocatedArenas.compareAndSet(arenaCount, -arenaCount - 1)) {\n+          continue; // CAS race, look again.\n+        }\n+        assert data == null;\n+        init();\n+        boolean isCommited = allocatedArenas.compareAndSet(-arenaCount - 1, arenaCount + 1);\n+        assert isCommited;\n+        synchronized (this) {\n+          this.notifyAll();\n+        }\n+        metrics.incrAllocatedArena();\n+        return allocateWithSplit(arenaIx, freeListIx, dest, ix, size);\n       }\n-      return allocateWithSplit(arenaIx, freeListIx, dest, ix, size);\n     }\n \n     public int offsetFromHeaderIndex(int lastSplitNextHeader) {\n@@ -418,14 +455,22 @@ public int allocateFromFreeListUnderLock(int arenaIx, FreeList freeList,\n         int offset = offsetFromHeaderIndex(current);\n         // Noone else has this either allocated or in a different free list; no sync needed.\n         headers[current] = makeHeader(freeListIx, true);\n-        current = data.getInt(offset + 4);\n+        current = getNextFreeListItem(offset);\n         ((LlapDataBuffer)dest[ix]).initialize(arenaIx, data, offset, size);\n         ++ix;\n       }\n       replaceListHeadUnderLock(freeList, current);\n       return ix;\n     }\n \n+    private int getPrevFreeListItem(int offset) {\n+      return data.getInt(offset);\n+    }\n+\n+    private int getNextFreeListItem(int offset) {\n+      return data.getInt(offset + 4);\n+    }\n+\n     private byte makeHeader(int freeListIx, boolean isInUse) {\n       return (byte)(((freeListIx + 1) << 1) | (isInUse ? 1 : 0));\n     }\n@@ -462,7 +507,7 @@ public void deallocate(LlapDataBuffer buffer) {\n     private void addBlockToFreeListUnderLock(FreeList freeList, int headerIx) {\n       if (freeList.listHead >= 0) {\n         int oldHeadOffset = offsetFromHeaderIndex(freeList.listHead);\n-        assert data.getInt(oldHeadOffset) == -1;\n+        assert getPrevFreeListItem(oldHeadOffset) == -1;\n         data.putInt(oldHeadOffset, headerIx);\n       }\n       int offset = offsetFromHeaderIndex(headerIx);\n@@ -473,7 +518,7 @@ private void addBlockToFreeListUnderLock(FreeList freeList, int headerIx) {\n \n     private void removeBlockFromFreeList(FreeList freeList, int headerIx) {\n       int bOffset = offsetFromHeaderIndex(headerIx),\n-          bpHeaderIx = data.getInt(bOffset), bnHeaderIx = data.getInt(bOffset + 4);\n+          bpHeaderIx = getPrevFreeListItem(bOffset), bnHeaderIx = getNextFreeListItem(bOffset);\n       if (freeList.listHead == headerIx) {\n         assert bpHeaderIx == -1;\n         freeList.listHead = bnHeaderIx;",
                "deletions": 21
            },
            {
                "sha": "50d5e19094ad8960d61dcc183bc078d33599387a",
                "filename": "llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestBuddyAllocator.java",
                "blob_url": "https://github.com/apache/hive/blob/838da8cb41b6b32b19b0ae8b793d5b7d4e6f613c/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestBuddyAllocator.java",
                "raw_url": "https://github.com/apache/hive/raw/838da8cb41b6b32b19b0ae8b793d5b7d4e6f613c/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestBuddyAllocator.java",
                "status": "modified",
                "changes": 31,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestBuddyAllocator.java?ref=838da8cb41b6b32b19b0ae8b793d5b7d4e6f613c",
                "patch": "@@ -136,6 +136,37 @@ public Void call() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testMTTArenas() {\n+    final int min = 3, max = 4, maxAlloc = 1 << max, minAllocCount = 2048, threadCount = 4;\n+    Configuration conf = createConf(1 << min, maxAlloc, maxAlloc, (1 << min) * minAllocCount);\n+    final BuddyAllocator a = new BuddyAllocator(conf, new DummyMemoryManager(),\n+        LlapDaemonCacheMetrics.create(\"test\", \"1\"));\n+    ExecutorService executor = Executors.newFixedThreadPool(threadCount);\n+    final CountDownLatch cdlIn = new CountDownLatch(threadCount), cdlOut = new CountDownLatch(1);\n+    Callable<Void> testCallable = new Callable<Void>() {\n+      public Void call() throws Exception {\n+        syncThreadStart(cdlIn, cdlOut);\n+        allocSameSize(a, minAllocCount / threadCount, min);\n+        return null;\n+      }\n+    };\n+    @SuppressWarnings(\"unchecked\")\n+    FutureTask<Void>[] allocTasks = new FutureTask[threadCount];\n+    for (int i = 0; i < threadCount; ++i) {\n+      allocTasks[i] = new FutureTask<>(testCallable);\n+      executor.execute(allocTasks[i]);\n+    }\n+    try {\n+      cdlIn.await(); // Wait for all threads to be ready.\n+      cdlOut.countDown(); // Release them at the same time.\n+      for (int i = 0; i < threadCount; ++i) {\n+        allocTasks[i].get();\n+      }\n+    } catch (Throwable t) {\n+      throw new RuntimeException(t);\n+    }\n+  }\n   private void syncThreadStart(final CountDownLatch cdlIn, final CountDownLatch cdlOut) {\n     cdlIn.countDown();\n     try {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "BuddyAllocator.java"
        ],
        "unit_tests": [
            "TestBuddyAllocator.java"
        ]
    },
    "hive_cce0e37": {
        "repo": "hive",
        "message": "HIVE-19265 : Potential NPE and hiding actual exception in Hive#copyFiles (Igor Kryvenko via Ashutosh Chauhan)\n\nSigned-off-by: Ashutosh Chauhan <hashutosh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/cce0e3777d178e68f38a0c9335d44a12fff42a6b",
        "parent": "https://github.com/apache/hive/commit/f0199500f00ae58cf1a9f73f5baebdc5d5eca417",
        "bug_id": "hive_cce0e37",
        "file": [
            {
                "sha": "466188130184516459dbd307e9cd0cf22844b46d",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java",
                "blob_url": "https://github.com/apache/hive/blob/cce0e3777d178e68f38a0c9335d44a12fff42a6b/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java",
                "raw_url": "https://github.com/apache/hive/raw/cce0e3777d178e68f38a0c9335d44a12fff42a6b/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java?ref=cce0e3777d178e68f38a0c9335d44a12fff42a6b",
                "patch": "@@ -3291,7 +3291,9 @@ private static void copyFiles(final HiveConf conf, final FileSystem destFs,\n         try {\n           files = srcFs.listStatus(src.getPath(), FileUtils.HIDDEN_FILES_PATH_FILTER);\n         } catch (IOException e) {\n-          pool.shutdownNow();\n+          if (null != pool) {\n+            pool.shutdownNow();\n+          }\n           throw new HiveException(e);\n         }\n       } else {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Hive.java"
        ],
        "unit_tests": [
            "TestHive.java"
        ]
    },
    "hive_6fb647f": {
        "repo": "hive",
        "message": "HIVE-16848: NPE during CachedStore refresh (Daniel Dai, reviewed by Vaibhav Gumashta, Thejas Nair)",
        "commit": "https://github.com/apache/hive/commit/6fb647f32ce4e393c4bfcd871821d4da166abaa0",
        "parent": "https://github.com/apache/hive/commit/41f72dc3eda0e2744ea3787560ef12ec1d994038",
        "bug_id": "hive_6fb647f",
        "file": [
            {
                "sha": "3ac4fe1604c7b0b455894b8e6293484e9226836e",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java",
                "blob_url": "https://github.com/apache/hive/blob/6fb647f32ce4e393c4bfcd871821d4da166abaa0/metastore/src/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java",
                "raw_url": "https://github.com/apache/hive/raw/6fb647f32ce4e393c4bfcd871821d4da166abaa0/metastore/src/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java",
                "status": "modified",
                "changes": 41,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java?ref=6fb647f32ce4e393c4bfcd871821d4da166abaa0",
                "patch": "@@ -85,6 +85,7 @@\n import org.apache.hadoop.hive.metastore.partition.spec.PartitionSpecProxy;\n import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n+import org.apache.hadoop.util.StringUtils;\n import org.apache.hive.common.util.HiveStringUtils;\n import org.apache.thrift.TException;\n import org.slf4j.Logger;\n@@ -355,10 +356,10 @@ public void run() {\n             }\n           }\n         }\n-      } catch (MetaException e) {\n-        LOG.error(\"Updating CachedStore: error getting database names\", e);\n       } catch (InstantiationException | IllegalAccessException e) {\n         throw new RuntimeException(\"Cannot instantiate \" + rawStoreClassName, e);\n+      } catch (Exception e) {\n+        LOG.error(\"Updating CachedStore: error happen when refresh\", e);\n       } finally {\n         try {\n           if (rawStore != null) {\n@@ -460,15 +461,17 @@ private void updateTableColStats(RawStore rawStore, String dbName, String tblNam\n         ColumnStatistics tableColStats =\n             rawStore.getTableColumnStatistics(dbName, tblName, colNames);\n         Deadline.stopTimer();\n-        if (tableColStatsCacheLock.writeLock().tryLock()) {\n-          // Skip background updates if we detect change\n-          if (isTableColStatsCacheDirty.compareAndSet(true, false)) {\n-            LOG.debug(\"Skipping table column stats cache update; the table column stats list we \"\n-                + \"have is dirty.\");\n-            return;\n+        if (tableColStats != null) {\n+          if (tableColStatsCacheLock.writeLock().tryLock()) {\n+            // Skip background updates if we detect change\n+            if (isTableColStatsCacheDirty.compareAndSet(true, false)) {\n+              LOG.debug(\"Skipping table column stats cache update; the table column stats list we \"\n+                  + \"have is dirty.\");\n+              return;\n+            }\n+            SharedCache.refreshTableColStats(HiveStringUtils.normalizeIdentifier(dbName),\n+                HiveStringUtils.normalizeIdentifier(tblName), tableColStats.getStatsObj());\n           }\n-          SharedCache.refreshTableColStats(HiveStringUtils.normalizeIdentifier(dbName),\n-              HiveStringUtils.normalizeIdentifier(tblName), tableColStats.getStatsObj());\n         }\n       } catch (MetaException | NoSuchObjectException e) {\n         LOG.info(\"Updating CachedStore: unable to read table column stats of table: \" + tblName, e);\n@@ -486,15 +489,17 @@ private void updateTablePartitionColStats(RawStore rawStore, String dbName, Stri\n         Map<String, List<ColumnStatisticsObj>> colStatsPerPartition =\n             rawStore.getColStatsForTablePartitions(dbName, tblName);\n         Deadline.stopTimer();\n-        if (partitionColStatsCacheLock.writeLock().tryLock()) {\n-          // Skip background updates if we detect change\n-          if (isPartitionColStatsCacheDirty.compareAndSet(true, false)) {\n-            LOG.debug(\"Skipping partition column stats cache update; the partition column stats \"\n-                + \"list we have is dirty.\");\n-            return;\n+        if (colStatsPerPartition != null) {\n+          if (partitionColStatsCacheLock.writeLock().tryLock()) {\n+            // Skip background updates if we detect change\n+            if (isPartitionColStatsCacheDirty.compareAndSet(true, false)) {\n+              LOG.debug(\"Skipping partition column stats cache update; the partition column stats \"\n+                  + \"list we have is dirty.\");\n+              return;\n+            }\n+            SharedCache.refreshPartitionColStats(HiveStringUtils.normalizeIdentifier(dbName),\n+                HiveStringUtils.normalizeIdentifier(tblName), colStatsPerPartition);\n           }\n-          SharedCache.refreshPartitionColStats(HiveStringUtils.normalizeIdentifier(dbName),\n-              HiveStringUtils.normalizeIdentifier(tblName), colStatsPerPartition);\n         }\n       } catch (MetaException | NoSuchObjectException e) {\n         LOG.info(\"Updating CachedStore: unable to read partitions column stats of table: \"",
                "deletions": 18
            }
        ],
        "patched_files": [
            "CachedStore.java"
        ],
        "unit_tests": [
            "TestCachedStore.java"
        ]
    },
    "hive_6433c3b": {
        "repo": "hive",
        "message": "HIVE-11580: ThriftUnionObjectInspector#toString throws NPE (Jimmy, reviewed by Chao)",
        "commit": "https://github.com/apache/hive/commit/6433c3b0b8e305c8dddc6ea2fe94cfcd5062e40d",
        "parent": "https://github.com/apache/hive/commit/5edbf31a755668b213c2a21fb8a4a2e902e081f6",
        "bug_id": "hive_6433c3b",
        "file": [
            {
                "sha": "600abbb2af19ae7e071d81bc8466ad8d1ab0204a",
                "filename": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ThriftUnionObjectInspector.java",
                "blob_url": "https://github.com/apache/hive/blob/6433c3b0b8e305c8dddc6ea2fe94cfcd5062e40d/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ThriftUnionObjectInspector.java",
                "raw_url": "https://github.com/apache/hive/raw/6433c3b0b8e305c8dddc6ea2fe94cfcd5062e40d/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ThriftUnionObjectInspector.java",
                "status": "modified",
                "changes": 26,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/ThriftUnionObjectInspector.java?ref=6433c3b0b8e305c8dddc6ea2fe94cfcd5062e40d",
                "patch": "@@ -18,26 +18,27 @@\n \n package org.apache.hadoop.hive.serde2.objectinspector;\n \n-import com.google.common.primitives.UnsignedBytes;\n-import org.apache.hadoop.util.ReflectionUtils;\n-import org.apache.thrift.TFieldIdEnum;\n-import org.apache.thrift.TUnion;\n-import org.apache.thrift.meta_data.FieldMetaData;\n-\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.thrift.TFieldIdEnum;\n+import org.apache.thrift.TUnion;\n+import org.apache.thrift.meta_data.FieldMetaData;\n+\n+import com.google.common.primitives.UnsignedBytes;\n+\n /**\n  * Always use the ObjectInspectorFactory to create new ObjectInspector objects,\n  * instead of directly creating an instance of this class.\n  */\n public class ThriftUnionObjectInspector extends ReflectionStructObjectInspector implements UnionObjectInspector {\n \n   private static final String FIELD_METADATA_MAP = \"metaDataMap\";\n-  private  List<ObjectInspector> ois;\n+  private List<ObjectInspector> ois;\n+  private List<StandardStructObjectInspector.MyField> fields;\n \n   @Override\n   public boolean shouldIgnoreField(String name) {\n@@ -88,10 +89,14 @@ protected void init(Class<?> objectClass,\n \n     try {\n       final Map<? extends TFieldIdEnum, FieldMetaData> fieldMap = (Map<? extends TFieldIdEnum, FieldMetaData>) fieldMetaData.get(null);\n+      fields = new ArrayList<StandardStructObjectInspector.MyField>(fieldMap.size());\n       this.ois = new ArrayList<ObjectInspector>();\n       for(Map.Entry<? extends TFieldIdEnum, FieldMetaData> metadata : fieldMap.entrySet()) {\n-        final Type fieldType = ThriftObjectInspectorUtils.getFieldType(objectClass, metadata.getValue().fieldName);\n+        int fieldId = metadata.getKey().getThriftFieldId();\n+        String fieldName = metadata.getValue().fieldName;\n+        final Type fieldType = ThriftObjectInspectorUtils.getFieldType(objectClass, fieldName);\n         final ObjectInspector reflectionObjectInspector = ObjectInspectorFactory.getReflectionObjectInspector(fieldType, options);\n+        fields.add(new StandardStructObjectInspector.MyField(fieldId, fieldName, reflectionObjectInspector));\n         this.ois.add(reflectionObjectInspector);\n       }\n     } catch (IllegalAccessException e) {\n@@ -112,10 +117,5 @@ public Category getCategory() {\n   public String getTypeName() {\n     return ObjectInspectorUtils.getStandardUnionTypeName(this);\n   }\n-\n-  @Override\n-  public Object create() {\n-    return ReflectionUtils.newInstance(objectClass, null);\n-  }\n }\n ",
                "deletions": 13
            },
            {
                "sha": "85f2bd63fb86019ee76103cb6b4c3b64b836f730",
                "filename": "serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestThriftObjectInspectors.java",
                "blob_url": "https://github.com/apache/hive/blob/6433c3b0b8e305c8dddc6ea2fe94cfcd5062e40d/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestThriftObjectInspectors.java",
                "raw_url": "https://github.com/apache/hive/raw/6433c3b0b8e305c8dddc6ea2fe94cfcd5062e40d/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestThriftObjectInspectors.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/serde/src/test/org/apache/hadoop/hive/serde2/objectinspector/TestThriftObjectInspectors.java?ref=6433c3b0b8e305c8dddc6ea2fe94cfcd5062e40d",
                "patch": "@@ -23,14 +23,15 @@\n import java.util.List;\n import java.util.Set;\n \n-import junit.framework.TestCase;\n-\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector.Category;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;\n import org.apache.hadoop.hive.serde2.thrift.test.Complex;\n import org.apache.hadoop.hive.serde2.thrift.test.IntString;\n+import org.apache.hadoop.hive.serde2.thrift.test.PropValueUnion;\n import org.apache.hadoop.hive.serde2.thrift.test.SetIntString;\n \n+import junit.framework.TestCase;\n+\n /**\n  * TestThriftObjectInspectors.\n  *\n@@ -60,6 +61,11 @@ public void testThriftObjectInspectors() throws Throwable {\n         assertNull(soi.getStructFieldData(null, fields.get(i)));\n       }\n \n+      ObjectInspector oi = ObjectInspectorFactory\n+          .getReflectionObjectInspector(PropValueUnion.class,\n+          ObjectInspectorFactory.ObjectInspectorOptions.THRIFT);\n+      assertNotNull(oi.toString());\n+\n       // real object\n       Complex c = new Complex();\n       c.setAint(1);",
                "deletions": 2
            }
        ],
        "patched_files": [
            "ThriftUnionObjectInspector.java"
        ],
        "unit_tests": [
            "TestThriftObjectInspectors.java"
        ]
    },
    "hive_8b0b83f": {
        "repo": "hive",
        "message": "HIVE-10495 : Hive index creation code throws NPE if index table is null (Bing Li via Ashutosh Chauhan)\n\nSigned-off-by: Ashutosh Chauhan <hashutosh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/8b0b83fd57553b4cb52129ff36c398e18230b649",
        "parent": "https://github.com/apache/hive/commit/6b87af7477219a3b62acb4b8ff4e614d45816d68",
        "bug_id": "hive_8b0b83f",
        "file": [
            {
                "sha": "58b9044930046758a83ee499692e5593cd82f9e0",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/8b0b83fd57553b4cb52129ff36c398e18230b649/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/8b0b83fd57553b4cb52129ff36c398e18230b649/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=8b0b83fd57553b4cb52129ff36c398e18230b649",
                "patch": "@@ -4706,7 +4706,8 @@ public boolean drop_partition_by_name_with_environment_context(final String db_n\n     @Override\n     public Index add_index(final Index newIndex, final Table indexTable)\n         throws InvalidObjectException, AlreadyExistsException, MetaException, TException {\n-      startFunction(\"add_index\", \": \" + newIndex.toString() + \" \" + indexTable.toString());\n+      String tableName = indexTable != null ? indexTable.getTableName() : \"\";\n+      startFunction(\"add_index\", \": \" + newIndex.toString() + \" \" + tableName);\n       Index ret = null;\n       Exception ex = null;\n       try {\n@@ -4725,7 +4726,6 @@ public Index add_index(final Index newIndex, final Table indexTable)\n           throw newMetaException(e);\n         }\n       } finally {\n-        String tableName = indexTable != null ? indexTable.getTableName() : null;\n         endFunction(\"add_index\", ret != null, ex, tableName);\n       }\n       return ret;",
                "deletions": 2
            }
        ],
        "patched_files": [
            "HiveMetaStore.java"
        ],
        "unit_tests": [
            "TestHiveMetaStore.java"
        ]
    },
    "hive_5d94d4c": {
        "repo": "hive",
        "message": "HIVE-12673: Orcfiledump throws NPE when no files are available (Rajesh Balamohan reviewed by Prasanth Jayachandran)",
        "commit": "https://github.com/apache/hive/commit/5d94d4c205bad635f157f1eedd782aeb88c27cf6",
        "parent": "https://github.com/apache/hive/commit/4d67088efa9b6438ff178e0b55382f167be06925",
        "bug_id": "hive_5d94d4c",
        "file": [
            {
                "sha": "00de5451d2779af2f077c3c88d3135ba5c49c85d",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/JsonFileDump.java",
                "blob_url": "https://github.com/apache/hive/blob/5d94d4c205bad635f157f1eedd782aeb88c27cf6/ql/src/java/org/apache/hadoop/hive/ql/io/orc/JsonFileDump.java",
                "raw_url": "https://github.com/apache/hive/raw/5d94d4c205bad635f157f1eedd782aeb88c27cf6/ql/src/java/org/apache/hadoop/hive/ql/io/orc/JsonFileDump.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/JsonFileDump.java?ref=5d94d4c205bad635f157f1eedd782aeb88c27cf6",
                "patch": "@@ -54,6 +54,9 @@ public static void printJsonMetaData(List<String> files,\n       Configuration conf,\n       List<Integer> rowIndexCols, boolean prettyPrint, boolean printTimeZone)\n       throws JSONException, IOException {\n+    if (files.isEmpty()) {\n+      return;\n+    }\n     JSONStringer writer = new JSONStringer();\n     boolean multiFile = files.size() > 1;\n     if (multiFile) {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "JsonFileDump.java"
        ],
        "unit_tests": [
            "TestJsonFileDump.java"
        ]
    },
    "hive_5db4c77": {
        "repo": "hive",
        "message": "HIVE-21250 : NPE in HiveProtoLoggingHook for eventPerFile mode. (Harish JP, reviewd by Anishek Agarwal)",
        "commit": "https://github.com/apache/hive/commit/5db4c77699ff2adeb30ef2d8ea038cfbd9035d99",
        "parent": "https://github.com/apache/hive/commit/793f192de238874d32d4c2f5137e97ebf048cc70",
        "bug_id": "hive_5db4c77",
        "file": [
            {
                "sha": "ec00ab6d6e9caf8f07169270ae5ba9f306e736e5",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/hooks/HiveProtoLoggingHook.java",
                "blob_url": "https://github.com/apache/hive/blob/5db4c77699ff2adeb30ef2d8ea038cfbd9035d99/ql/src/java/org/apache/hadoop/hive/ql/hooks/HiveProtoLoggingHook.java",
                "raw_url": "https://github.com/apache/hive/raw/5db4c77699ff2adeb30ef2d8ea038cfbd9035d99/ql/src/java/org/apache/hadoop/hive/ql/hooks/HiveProtoLoggingHook.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/hooks/HiveProtoLoggingHook.java?ref=5db4c77699ff2adeb30ef2d8ea038cfbd9035d99",
                "patch": "@@ -305,10 +305,10 @@ private void writeEvent(HiveHookEventProto event) {\n       for (int retryCount = 0; retryCount <= MAX_RETRIES; ++retryCount) {\n         try {\n           if (eventPerFile) {\n-            LOG.debug(\"Event per file enabled. Closing proto event file: {}\", writer.getPath());\n             if (!maybeRolloverWriterForDay()) {\n               writer = logger.getWriter(logFileName + \"_\" + ++logFileCount);\n             }\n+            LOG.debug(\"Event per file enabled. New proto event file: {}\", writer.getPath());\n             writer.writeProto(event);\n             IOUtils.closeQuietly(writer);\n             writer = null;",
                "deletions": 1
            }
        ],
        "patched_files": [
            "HiveProtoLoggingHook.java"
        ],
        "unit_tests": [
            "TestHiveProtoLoggingHook.java"
        ]
    },
    "hive_43e2f96": {
        "repo": "hive",
        "message": "HIVE-19628 : possible NPE in LLAP testSigning (Sergey Shelukhin, reviewed by Jason Dere)",
        "commit": "https://github.com/apache/hive/commit/43e2f9632130d569c93ebeeb11297813ca34b80c",
        "parent": "https://github.com/apache/hive/commit/f4352e5339694d290b1a146feb2577d4f96d14eb",
        "bug_id": "hive_43e2f96",
        "file": [
            {
                "sha": "6be6836bdbcf5dc160bfa2926cf4c4c5f31522dd",
                "filename": "llap-server/src/test/org/apache/hadoop/hive/llap/security/TestLlapSignerImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/43e2f9632130d569c93ebeeb11297813ca34b80c/llap-server/src/test/org/apache/hadoop/hive/llap/security/TestLlapSignerImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/43e2f9632130d569c93ebeeb11297813ca34b80c/llap-server/src/test/org/apache/hadoop/hive/llap/security/TestLlapSignerImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/test/org/apache/hadoop/hive/llap/security/TestLlapSignerImpl.java?ref=43e2f9632130d569c93ebeeb11297813ca34b80c",
                "patch": "@@ -106,9 +106,9 @@ public void testSigning() throws Exception {\n   private FakeSecretManager rollKey(FakeSecretManager fsm, int idToPreserve) throws IOException {\n     // Adding keys is PITA - there's no way to plug into timed rolling; just create a new fsm.\n     DelegationKey dk = fsm.getDelegationKey(idToPreserve), curDk = fsm.getCurrentKey();\n-    if (curDk.getKeyId() != idToPreserve) {\n+    if (curDk == null || curDk.getKeyId() != idToPreserve) {\n       LOG.warn(\"The current key is not the one we expect; key rolled in background? Signed with \"\n-          + idToPreserve + \" but got \" + curDk.getKeyId());\n+          + idToPreserve + \" but got \" + (curDk == null ? \"null\" : curDk.getKeyId()));\n     }\n     // Regardless of the above, we should have the key we've signed with.\n     assertNotNull(dk);",
                "deletions": 2
            }
        ],
        "patched_files": [
            "LlapSignerImpl.java"
        ],
        "unit_tests": [
            "TestLlapSignerImpl.java"
        ]
    },
    "hive_1912d19": {
        "repo": "hive",
        "message": "HIVE-10437 : NullPointerException on queries where map/reduce is not involved on tables with partitions (Ashutosh Chauhan via Gunther Hagleitner)\n\nSigned-off-by: Ashutosh Chauhan <hashutosh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/1912d19f2f4f8e3d32a088623563d022275a3ab5",
        "parent": "https://github.com/apache/hive/commit/0cad50a193ba777f9271808f057caae674738817",
        "bug_id": "hive_1912d19",
        "file": [
            {
                "sha": "81c79438feae7794f3d197477048e1136b78e389",
                "filename": "hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/HCatRecordSerDe.java",
                "blob_url": "https://github.com/apache/hive/blob/1912d19f2f4f8e3d32a088623563d022275a3ab5/hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/HCatRecordSerDe.java",
                "raw_url": "https://github.com/apache/hive/raw/1912d19f2f4f8e3d32a088623563d022275a3ab5/hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/HCatRecordSerDe.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/HCatRecordSerDe.java?ref=1912d19f2f4f8e3d32a088623563d022275a3ab5",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.hadoop.hive.serde.serdeConstants;\n import org.apache.hadoop.hive.serde2.SerDe;\n import org.apache.hadoop.hive.serde2.SerDeException;\n+import org.apache.hadoop.hive.serde2.SerDeSpec;\n import org.apache.hadoop.hive.serde2.SerDeStats;\n import org.apache.hadoop.hive.serde2.objectinspector.ListObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.MapObjectInspector;\n@@ -51,6 +52,10 @@\n /**\n  * SerDe class for serializing to and from HCatRecord\n  */\n+\n+@SerDeSpec(schemaProps = {serdeConstants.LIST_COLUMNS,\n+                          serdeConstants.LIST_COLUMN_TYPES})\n+\n public class HCatRecordSerDe implements SerDe {\n \n   private static final Logger LOG = LoggerFactory.getLogger(HCatRecordSerDe.class);\n@@ -124,7 +129,7 @@ public Object deserialize(Writable data) throws SerDeException {\n       throw new SerDeException(getClass().getName() + \": expects HCatRecord!\");\n     }\n \n-    return (HCatRecord) data;\n+    return data;\n   }\n \n   /**\n@@ -302,7 +307,7 @@ private static Object serializePrimitiveField(Object field,\n    */\n   @Override\n   public ObjectInspector getObjectInspector() throws SerDeException {\n-    return (ObjectInspector) cachedObjectInspector;\n+    return cachedObjectInspector;\n   }\n \n   @Override",
                "deletions": 2
            },
            {
                "sha": "9b325b66607ec0b08faba023aeacd5ff758b3612",
                "filename": "hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/JsonSerDe.java",
                "blob_url": "https://github.com/apache/hive/blob/1912d19f2f4f8e3d32a088623563d022275a3ab5/hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/JsonSerDe.java",
                "raw_url": "https://github.com/apache/hive/raw/1912d19f2f4f8e3d32a088623563d022275a3ab5/hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/JsonSerDe.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/JsonSerDe.java?ref=1912d19f2f4f8e3d32a088623563d022275a3ab5",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.hadoop.hive.serde.serdeConstants;\n import org.apache.hadoop.hive.serde2.SerDe;\n import org.apache.hadoop.hive.serde2.SerDeException;\n+import org.apache.hadoop.hive.serde2.SerDeSpec;\n import org.apache.hadoop.hive.serde2.SerDeStats;\n import org.apache.hadoop.hive.serde2.SerDeUtils;\n import org.apache.hadoop.hive.serde2.objectinspector.ListObjectInspector;\n@@ -84,6 +85,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+@SerDeSpec(schemaProps = {serdeConstants.LIST_COLUMNS,\n+                          serdeConstants.LIST_COLUMN_TYPES,\n+                          serdeConstants.TIMESTAMP_FORMATS})\n+\n public class JsonSerDe implements SerDe {\n \n   private static final Logger LOG = LoggerFactory.getLogger(JsonSerDe.class);\n@@ -497,7 +502,7 @@ private static void buildJSONString(StringBuilder sb, Object o, ObjectInspector\n           break;\n         }\n         case STRING: {\n-          String s = \n+          String s =\n                   SerDeUtils.escapeString(((StringObjectInspector) poi).getPrimitiveJavaObject(o));\n           appendWithQuotes(sb, s);\n           break;",
                "deletions": 1
            },
            {
                "sha": "258d28ec79b034c80481b177c9465c45025db0b5",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/FetchOperator.java",
                "blob_url": "https://github.com/apache/hive/blob/1912d19f2f4f8e3d32a088623563d022275a3ab5/ql/src/java/org/apache/hadoop/hive/ql/exec/FetchOperator.java",
                "raw_url": "https://github.com/apache/hive/raw/1912d19f2f4f8e3d32a088623563d022275a3ab5/ql/src/java/org/apache/hadoop/hive/ql/exec/FetchOperator.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/FetchOperator.java?ref=1912d19f2f4f8e3d32a088623563d022275a3ab5",
                "patch": "@@ -604,7 +604,13 @@ private boolean needConversion(PartitionDesc partitionDesc) {\n   // if table and all partitions have the same schema and serde, no need to convert\n   private boolean needConversion(TableDesc tableDesc, List<PartitionDesc> partDescs) {\n     Class<?> tableSerDe = tableDesc.getDeserializerClass();\n-    String[] schemaProps = AnnotationUtils.getAnnotation(tableSerDe, SerDeSpec.class).schemaProps();\n+    SerDeSpec spec = AnnotationUtils.getAnnotation(tableSerDe, SerDeSpec.class);\n+    if (null == spec) {\n+      // Serde may not have this optional annotation defined in which case be conservative\n+      // and say conversion is needed.\n+      return true;\n+    }\n+    String[] schemaProps = spec.schemaProps();\n     Properties tableProps = tableDesc.getProperties();\n     for (PartitionDesc partitionDesc : partDescs) {\n       if (!tableSerDe.getName().equals(partitionDesc.getDeserializerClassName())) {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "JsonSerDe.java",
            "HCatRecordSerDe.java"
        ],
        "unit_tests": [
            "TestHCatRecordSerDe.java",
            "TestJsonSerDe.java"
        ]
    },
    "hive_97b4750": {
        "repo": "hive",
        "message": "HIVE-9566: HiveServer2 fails to start with NullPointerException (Na via Xuefu)",
        "commit": "https://github.com/apache/hive/commit/97b4750c6314eea9025b426e4df73f795b601927",
        "parent": "https://github.com/apache/hive/commit/8ed337749261ad78becb46a16a350ef23d9f305f",
        "bug_id": "hive_97b4750",
        "file": [
            {
                "sha": "4a4be975a0912eb0981c56cbade85e83d9e3c391",
                "filename": "service/src/java/org/apache/hive/service/server/HiveServer2.java",
                "blob_url": "https://github.com/apache/hive/blob/97b4750c6314eea9025b426e4df73f795b601927/service/src/java/org/apache/hive/service/server/HiveServer2.java",
                "raw_url": "https://github.com/apache/hive/raw/97b4750c6314eea9025b426e4df73f795b601927/service/src/java/org/apache/hive/service/server/HiveServer2.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/service/src/java/org/apache/hive/service/server/HiveServer2.java?ref=97b4750c6314eea9025b426e4df73f795b601927",
                "patch": "@@ -317,7 +317,7 @@ public synchronized void stop() {\n       }\n     }\n     // Remove this server instance from ZooKeeper if dynamic service discovery is set\n-    if (hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY)) {\n+    if (hiveConf != null && hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY)) {\n       try {\n         removeServerInstanceFromZooKeeper();\n       } catch (Exception e) {\n@@ -326,7 +326,7 @@ public synchronized void stop() {\n     }\n     // There should already be an instance of the session pool manager.\n     // If not, ignoring is fine while stopping HiveServer2.\n-    if (hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_TEZ_INITIALIZE_DEFAULT_SESSIONS)) {\n+    if (hiveConf != null && hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_TEZ_INITIALIZE_DEFAULT_SESSIONS)) {\n       try {\n         TezSessionPoolManager.getInstance().stop();\n       } catch (Exception e) {\n@@ -335,7 +335,7 @@ public synchronized void stop() {\n       }\n     }\n \n-    if (hiveConf.getVar(ConfVars.HIVE_EXECUTION_ENGINE).equals(\"spark\")) {\n+    if (hiveConf != null && hiveConf.getVar(ConfVars.HIVE_EXECUTION_ENGINE).equals(\"spark\")) {\n       try {\n         SparkSessionManagerImpl.getInstance().shutdown();\n       } catch(Exception ex) {",
                "deletions": 3
            }
        ],
        "patched_files": [
            "HiveServer2.java"
        ],
        "unit_tests": [
            "TestHiveServer2.java"
        ]
    },
    "hive_bd21f89": {
        "repo": "hive",
        "message": "HIVE-19884 : Invalidation cache may throw NPE when there is no data in table used by materialized view (Jesus Camacho Rodriguez via Ashutosh Chauhan)\n\nSigned-off-by: Ashutosh Chauhan <hashutosh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/bd21f890e21f3baa8b715cb4203405de65b2a30b",
        "parent": "https://github.com/apache/hive/commit/5a9a328a8129eb8bd116158e06cf37a259cf32c6",
        "bug_id": "hive_bd21f89",
        "file": [
            {
                "sha": "3ed2cf398a8edde959ccec75d51878724518a72b",
                "filename": "itests/src/test/resources/testconfiguration.properties",
                "blob_url": "https://github.com/apache/hive/blob/bd21f890e21f3baa8b715cb4203405de65b2a30b/itests/src/test/resources/testconfiguration.properties",
                "raw_url": "https://github.com/apache/hive/raw/bd21f890e21f3baa8b715cb4203405de65b2a30b/itests/src/test/resources/testconfiguration.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/src/test/resources/testconfiguration.properties?ref=bd21f890e21f3baa8b715cb4203405de65b2a30b",
                "patch": "@@ -555,6 +555,7 @@ minillaplocal.query.files=\\\n   materialized_view_describe.q,\\\n   materialized_view_drop.q,\\\n   materialized_view_rebuild.q,\\\n+  materialized_view_rewrite_empty.q,\\\n   materialized_view_rewrite_1.q,\\\n   materialized_view_rewrite_2.q,\\\n   materialized_view_rewrite_3.q,\\",
                "deletions": 0
            },
            {
                "sha": "e5daa8dc7820752b4d55cc92f5a6b56bfd6706a4",
                "filename": "ql/src/test/queries/clientpositive/materialized_view_rewrite_empty.q",
                "blob_url": "https://github.com/apache/hive/blob/bd21f890e21f3baa8b715cb4203405de65b2a30b/ql/src/test/queries/clientpositive/materialized_view_rewrite_empty.q",
                "raw_url": "https://github.com/apache/hive/raw/bd21f890e21f3baa8b715cb4203405de65b2a30b/ql/src/test/queries/clientpositive/materialized_view_rewrite_empty.q",
                "status": "added",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/materialized_view_rewrite_empty.q?ref=bd21f890e21f3baa8b715cb4203405de65b2a30b",
                "patch": "@@ -0,0 +1,28 @@\n+-- SORT_QUERY_RESULTS\n+\n+set hive.vectorized.execution.enabled=false;\n+set hive.support.concurrency=true;\n+set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;\n+set hive.strict.checks.cartesian.product=false;\n+set hive.stats.fetch.column.stats=true;\n+set hive.materializedview.rewriting=true;\n+\n+create table emps_mv_rewrite_empty (\n+  empid int,\n+  deptno int,\n+  name varchar(256),\n+  salary float,\n+  commission int)\n+stored as orc TBLPROPERTIES ('transactional'='true');\n+analyze table emps_mv_rewrite_empty compute statistics for columns;\n+\n+create materialized view emps_mv_rewrite_empty_mv1 as\n+select * from emps_mv_rewrite_empty where empid < 150;\n+\n+explain\n+select * from emps_mv_rewrite_empty where empid < 120;\n+\n+select * from emps_mv_rewrite_empty where empid < 120;\n+\n+drop materialized view emps_mv_rewrite_empty_mv1;\n+drop table emps_mv_rewrite_empty;",
                "deletions": 0
            },
            {
                "sha": "b33d8c3f2d3b0e9eae01b7b878b564350b1a5961",
                "filename": "ql/src/test/results/clientpositive/llap/materialized_view_rewrite_empty.q.out",
                "blob_url": "https://github.com/apache/hive/blob/bd21f890e21f3baa8b715cb4203405de65b2a30b/ql/src/test/results/clientpositive/llap/materialized_view_rewrite_empty.q.out",
                "raw_url": "https://github.com/apache/hive/raw/bd21f890e21f3baa8b715cb4203405de65b2a30b/ql/src/test/results/clientpositive/llap/materialized_view_rewrite_empty.q.out",
                "status": "added",
                "changes": 89,
                "additions": 89,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/llap/materialized_view_rewrite_empty.q.out?ref=bd21f890e21f3baa8b715cb4203405de65b2a30b",
                "patch": "@@ -0,0 +1,89 @@\n+PREHOOK: query: create table emps_mv_rewrite_empty (\n+  empid int,\n+  deptno int,\n+  name varchar(256),\n+  salary float,\n+  commission int)\n+stored as orc TBLPROPERTIES ('transactional'='true')\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@emps_mv_rewrite_empty\n+POSTHOOK: query: create table emps_mv_rewrite_empty (\n+  empid int,\n+  deptno int,\n+  name varchar(256),\n+  salary float,\n+  commission int)\n+stored as orc TBLPROPERTIES ('transactional'='true')\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@emps_mv_rewrite_empty\n+PREHOOK: query: analyze table emps_mv_rewrite_empty compute statistics for columns\n+PREHOOK: type: ANALYZE_TABLE\n+PREHOOK: Input: default@emps_mv_rewrite_empty\n+PREHOOK: Output: default@emps_mv_rewrite_empty\n+#### A masked pattern was here ####\n+POSTHOOK: query: analyze table emps_mv_rewrite_empty compute statistics for columns\n+POSTHOOK: type: ANALYZE_TABLE\n+POSTHOOK: Input: default@emps_mv_rewrite_empty\n+POSTHOOK: Output: default@emps_mv_rewrite_empty\n+#### A masked pattern was here ####\n+PREHOOK: query: create materialized view emps_mv_rewrite_empty_mv1 as\n+select * from emps_mv_rewrite_empty where empid < 150\n+PREHOOK: type: CREATE_MATERIALIZED_VIEW\n+PREHOOK: Input: default@emps_mv_rewrite_empty\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@emps_mv_rewrite_empty_mv1\n+POSTHOOK: query: create materialized view emps_mv_rewrite_empty_mv1 as\n+select * from emps_mv_rewrite_empty where empid < 150\n+POSTHOOK: type: CREATE_MATERIALIZED_VIEW\n+POSTHOOK: Input: default@emps_mv_rewrite_empty\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@emps_mv_rewrite_empty_mv1\n+PREHOOK: query: explain\n+select * from emps_mv_rewrite_empty where empid < 120\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain\n+select * from emps_mv_rewrite_empty where empid < 120\n+POSTHOOK: type: QUERY\n+STAGE DEPENDENCIES:\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        TableScan\n+          alias: emps_mv_rewrite_empty\n+          Filter Operator\n+            predicate: (empid < 120) (type: boolean)\n+            Select Operator\n+              expressions: empid (type: int), deptno (type: int), name (type: varchar(256)), salary (type: float), commission (type: int)\n+              outputColumnNames: _col0, _col1, _col2, _col3, _col4\n+              ListSink\n+\n+PREHOOK: query: select * from emps_mv_rewrite_empty where empid < 120\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@emps_mv_rewrite_empty\n+#### A masked pattern was here ####\n+POSTHOOK: query: select * from emps_mv_rewrite_empty where empid < 120\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@emps_mv_rewrite_empty\n+#### A masked pattern was here ####\n+PREHOOK: query: drop materialized view emps_mv_rewrite_empty_mv1\n+PREHOOK: type: DROP_MATERIALIZED_VIEW\n+PREHOOK: Input: default@emps_mv_rewrite_empty_mv1\n+PREHOOK: Output: default@emps_mv_rewrite_empty_mv1\n+POSTHOOK: query: drop materialized view emps_mv_rewrite_empty_mv1\n+POSTHOOK: type: DROP_MATERIALIZED_VIEW\n+POSTHOOK: Input: default@emps_mv_rewrite_empty_mv1\n+POSTHOOK: Output: default@emps_mv_rewrite_empty_mv1\n+PREHOOK: query: drop table emps_mv_rewrite_empty\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@emps_mv_rewrite_empty\n+PREHOOK: Output: default@emps_mv_rewrite_empty\n+POSTHOOK: query: drop table emps_mv_rewrite_empty\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@emps_mv_rewrite_empty\n+POSTHOOK: Output: default@emps_mv_rewrite_empty",
                "deletions": 0
            },
            {
                "sha": "fc644f0b637616a670a3585dc4978fb917828747",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/MaterializationsInvalidationCache.java",
                "blob_url": "https://github.com/apache/hive/blob/bd21f890e21f3baa8b715cb4203405de65b2a30b/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/MaterializationsInvalidationCache.java",
                "raw_url": "https://github.com/apache/hive/raw/bd21f890e21f3baa8b715cb4203405de65b2a30b/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/MaterializationsInvalidationCache.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/MaterializationsInvalidationCache.java?ref=bd21f890e21f3baa8b715cb4203405de65b2a30b",
                "patch": "@@ -360,6 +360,15 @@ private void enrichWithInvalidationInfo(Materialization materialization) {\n \n       final ConcurrentSkipListMap<Long, Long> usedTableModifications =\n           tableModifications.get(qNameTableUsed);\n+      if (usedTableModifications == null) {\n+        // This is not necessarily an error, since the table may be empty. To be safe,\n+        // instead of including this materialized view, we just log the information and\n+        // skip it (if table is really empty, it will not matter for performance anyway).\n+        LOG.warn(\"No information found in invalidation cache for table {}, possible tables are: {}\",\n+            qNameTableUsed, tableModifications.keySet());\n+        materialization.setInvalidationTime(Long.MIN_VALUE);\n+        return;\n+      }\n       final ConcurrentSkipListSet<Long> usedUDTableModifications =\n           updateDeleteTableModifications.get(qNameTableUsed);\n       final Entry<Long, Long> tn = usedTableModifications.higherEntry(tableMaterializationTxnList.getHighWatermark());",
                "deletions": 0
            },
            {
                "sha": "361ede54efcd739516285e7b6a85e1122e8b870a",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java",
                "blob_url": "https://github.com/apache/hive/blob/bd21f890e21f3baa8b715cb4203405de65b2a30b/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java",
                "raw_url": "https://github.com/apache/hive/raw/bd21f890e21f3baa8b715cb4203405de65b2a30b/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java",
                "status": "modified",
                "changes": 53,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java?ref=bd21f890e21f3baa8b715cb4203405de65b2a30b",
                "patch": "@@ -838,11 +838,7 @@ public void commitTxn(CommitTxnRequest rqst)\n     throws NoSuchTxnException, TxnAbortedException, MetaException {\n     MaterializationsRebuildLockHandler materializationsRebuildLockHandler =\n         MaterializationsRebuildLockHandler.get();\n-    String fullyQualifiedName = null;\n-    String dbName = null;\n-    String tblName = null;\n-    long writeId = 0L;\n-    long timestamp = 0L;\n+    List<TransactionRegistryInfo> txnComponents = new ArrayList<>();\n     boolean isUpdateDelete = false;\n     long txnid = rqst.getTxnid();\n     long sourceTxnId = -1;\n@@ -1007,12 +1003,10 @@ public void commitTxn(CommitTxnRequest rqst)\n         s = \"select ctc_database, ctc_table, ctc_writeid, ctc_timestamp from COMPLETED_TXN_COMPONENTS where ctc_txnid = \" + txnid;\n         LOG.debug(\"Going to extract table modification information for invalidation cache <\" + s + \">\");\n         rs = stmt.executeQuery(s);\n-        if (rs.next()) {\n-          dbName = rs.getString(1);\n-          tblName = rs.getString(2);\n-          fullyQualifiedName = Warehouse.getQualifiedName(dbName, tblName);\n-          writeId = rs.getLong(3);\n-          timestamp = rs.getTimestamp(4, Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"))).getTime();\n+        while (rs.next()) {\n+          // We only enter in this loop if the transaction actually affected any table\n+          txnComponents.add(new TransactionRegistryInfo(rs.getString(1), rs.getString(2),\n+              rs.getLong(3), rs.getTimestamp(4, Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"))).getTime()));\n         }\n         s = \"delete from TXN_COMPONENTS where tc_txnid = \" + txnid;\n         LOG.debug(\"Going to execute update <\" + s + \">\");\n@@ -1042,18 +1036,22 @@ public void commitTxn(CommitTxnRequest rqst)\n \n         MaterializationsInvalidationCache materializationsInvalidationCache =\n             MaterializationsInvalidationCache.get();\n-        if (materializationsInvalidationCache.containsMaterialization(dbName, tblName) &&\n-            !materializationsRebuildLockHandler.readyToCommitResource(dbName, tblName, txnid)) {\n-          throw new MetaException(\n-              \"Another process is rebuilding the materialized view \" + fullyQualifiedName);\n+        for (TransactionRegistryInfo info : txnComponents) {\n+          if (materializationsInvalidationCache.containsMaterialization(info.dbName, info.tblName) &&\n+              !materializationsRebuildLockHandler.readyToCommitResource(info.dbName, info.tblName, txnid)) {\n+            throw new MetaException(\n+                \"Another process is rebuilding the materialized view \" + info.fullyQualifiedName);\n+          }\n         }\n         LOG.debug(\"Going to commit\");\n         close(rs);\n         dbConn.commit();\n \n         // Update registry with modifications\n-        materializationsInvalidationCache.notifyTableModification(\n-            dbName, tblName, writeId, timestamp, isUpdateDelete);\n+        for (TransactionRegistryInfo info : txnComponents) {\n+          materializationsInvalidationCache.notifyTableModification(\n+              info.dbName, info.tblName, info.writeId, info.timestamp, isUpdateDelete);\n+        }\n       } catch (SQLException e) {\n         LOG.debug(\"Going to rollback\");\n         rollbackDBConn(dbConn);\n@@ -1064,8 +1062,8 @@ public void commitTxn(CommitTxnRequest rqst)\n         close(commitIdRs);\n         close(lockHandle, stmt, dbConn);\n         unlockInternal();\n-        if (fullyQualifiedName != null) {\n-          materializationsRebuildLockHandler.unlockResource(dbName, tblName, txnid);\n+        for (TransactionRegistryInfo info : txnComponents) {\n+          materializationsRebuildLockHandler.unlockResource(info.dbName, info.tblName, txnid);\n         }\n       }\n     } catch (RetryException e) {\n@@ -4783,4 +4781,21 @@ public boolean isWrapperFor(Class<?> iface) throws SQLException {\n       throw new UnsupportedOperationException();\n     }\n   };\n+\n+  private class TransactionRegistryInfo {\n+    final String dbName;\n+    final String tblName;\n+    final String fullyQualifiedName;\n+    final long writeId;\n+    final long timestamp;\n+\n+    public TransactionRegistryInfo (String dbName, String tblName, long writeId, long timestamp) {\n+      this.dbName = dbName;\n+      this.tblName = tblName;\n+      this.fullyQualifiedName = Warehouse.getQualifiedName(dbName, tblName);\n+      this.writeId = writeId;\n+      this.timestamp = timestamp;\n+    }\n+  }\n+\n }",
                "deletions": 19
            }
        ],
        "patched_files": [
            "TxnHandler.java"
        ],
        "unit_tests": [
            "TestTxnHandler.java"
        ]
    },
    "hive_2f686d4": {
        "repo": "hive",
        "message": "HIVE-14617: NPE in UDF MapValues() if input is null (reviewed by Chao)",
        "commit": "https://github.com/apache/hive/commit/2f686d4c0c20540079660de202c619e42ed5cd4f",
        "parent": "https://github.com/apache/hive/commit/9343fee5d10ab5ab64692d9723a6c35e77adefc3",
        "bug_id": "hive_2f686d4",
        "file": [
            {
                "sha": "3bd5864499ea7d9e4d6e8e7f2284ec96f445ad06",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java",
                "blob_url": "https://github.com/apache/hive/blob/2f686d4c0c20540079660de202c619e42ed5cd4f/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java",
                "raw_url": "https://github.com/apache/hive/raw/2f686d4c0c20540079660de202c619e42ed5cd4f/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java?ref=2f686d4c0c20540079660de202c619e42ed5cd4f",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.hadoop.hive.ql.udf.generic;\n \n import java.util.ArrayList;\n+import java.util.Map;\n \n import org.apache.hadoop.hive.ql.exec.Description;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentException;\n@@ -61,7 +62,10 @@ public ObjectInspector initialize(ObjectInspector[] arguments)\n   public Object evaluate(DeferredObject[] arguments) throws HiveException {\n     retArray.clear();\n     Object mapObj = arguments[0].get();\n-    retArray.addAll(mapOI.getMap(mapObj).values());\n+    Map<?, ?> map = mapOI.getMap(mapObj);\n+    if (map != null) {\n+      retArray.addAll(map.values());\n+    }\n     return retArray;\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "44676ed6f877666b89f2f3e7109a5d924597e901",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMapValues.java",
                "blob_url": "https://github.com/apache/hive/blob/2f686d4c0c20540079660de202c619e42ed5cd4f/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMapValues.java",
                "raw_url": "https://github.com/apache/hive/raw/2f686d4c0c20540079660de202c619e42ed5cd4f/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMapValues.java",
                "status": "added",
                "changes": 56,
                "additions": 56,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFMapValues.java?ref=2f686d4c0c20540079660de202c619e42ed5cd4f",
                "patch": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.udf.generic;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredJavaObject;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredObject;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;\n+import org.apache.hadoop.hive.serde2.objectinspector.StandardListObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestGenericUDFMapValues {\n+\n+  @Test\n+  public void testNullMap() throws HiveException, IOException {\n+    ObjectInspector[] inputOIs = {\n+        ObjectInspectorFactory.getStandardMapObjectInspector(\n+            PrimitiveObjectInspectorFactory.writableStringObjectInspector,\n+            PrimitiveObjectInspectorFactory.writableStringObjectInspector),\n+    };\n+\n+    Map<String, String> input = null;\n+    DeferredObject[] args = {\n+        new DeferredJavaObject(input)\n+    };\n+\n+  GenericUDFMapValues udf = new GenericUDFMapValues();\n+    StandardListObjectInspector oi = (StandardListObjectInspector) udf.initialize(inputOIs);\n+    Object res = udf.evaluate(args);\n+    Assert.assertTrue(oi.getList(res).isEmpty());\n+    udf.close();\n+  }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "GenericUDFMapValues.java"
        ],
        "unit_tests": [
            "TestGenericUDFMapValues.java"
        ]
    },
    "hive_9c00ee0": {
        "repo": "hive",
        "message": "HIVE-21844 : HMS schema Upgrade Script is failing with NPE. (Mahesh Kumar Behera reviewed by  Sankar Hariappan)",
        "commit": "https://github.com/apache/hive/commit/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
        "parent": "https://github.com/apache/hive/commit/ec3779978797051fdb345172536aafcd50f1b4ae",
        "bug_id": "hive_9c00ee0",
        "file": [
            {
                "sha": "1730d492d77523dc80a937559dcf93ef707449ac",
                "filename": "beeline/src/java/org/apache/hive/beeline/ColorBuffer.java",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/beeline/src/java/org/apache/hive/beeline/ColorBuffer.java?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -78,6 +78,9 @@ ColorBuffer pad(ColorBuffer str, int len) {\n   }\n \n   ColorBuffer center(String str, int len) {\n+    if (str == null) {\n+      str = \"\";\n+    }\n     StringBuilder buf = new StringBuilder(str);\n     while (buf.length() < len) {\n       buf.append(\" \");",
                "deletions": 0
            },
            {
                "sha": "fd0af2ca0c963d0dd2f3ea35c1dc45a179122eb2",
                "filename": "beeline/src/java/org/apache/hive/beeline/Commands.java",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/beeline/src/java/org/apache/hive/beeline/Commands.java",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/beeline/src/java/org/apache/hive/beeline/Commands.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/beeline/src/java/org/apache/hive/beeline/Commands.java?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -1052,7 +1052,9 @@ private boolean executeInternal(String sql, boolean call) {\n             logThread.interrupt();\n           }\n           logThread.join(DEFAULT_QUERY_PROGRESS_THREAD_TIMEOUT);\n-          showRemainingLogsIfAny(stmnt);\n+          if (stmnt != null) {\n+            showRemainingLogsIfAny(stmnt);\n+          }\n         }\n         if (stmnt != null) {\n           stmnt.close();",
                "deletions": 1
            },
            {
                "sha": "20ddd1ada6858a4cccedd26d5f9bbf355fa7a123",
                "filename": "standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-1.2.0-to-2.0.0.mysql.sql",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-1.2.0-to-2.0.0.mysql.sql",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-1.2.0-to-2.0.0.mysql.sql",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-1.2.0-to-2.0.0.mysql.sql?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -1,4 +1,4 @@\n-SELECT 'Upgrading MetaStore schema from 1.2.0 to 2.0.0' AS ' ';\n+SELECT 'Upgrading MetaStore schema from 1.2.0 to 2.0.0' AS MESSAGE;\n --SOURCE 021-HIVE-7018.mysql.sql;\n ALTER TABLE `TBLS` DROP FOREIGN KEY `TBLS_FK3`;\n ALTER TABLE `TBLS` DROP KEY `TBLS_N51`;\n@@ -71,5 +71,5 @@ CREATE TABLE AUX_TABLE (\n \n \n UPDATE VERSION SET SCHEMA_VERSION='2.0.0', VERSION_COMMENT='Hive release version 2.0.0' where VER_ID=1;\n-SELECT 'Finished upgrading MetaStore schema from 1.2.0 to 2.0.0' AS ' ';\n+SELECT 'Finished upgrading MetaStore schema from 1.2.0 to 2.0.0' AS MESSAGE;\n ",
                "deletions": 2
            },
            {
                "sha": "22a3c377b77081891967df50db29837e649ff7cb",
                "filename": "standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.0.0-to-2.1.0.mysql.sql",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.0.0-to-2.1.0.mysql.sql",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.0.0-to-2.1.0.mysql.sql",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.0.0-to-2.1.0.mysql.sql?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -1,4 +1,4 @@\n-SELECT 'Upgrading MetaStore schema from 2.0.0 to 2.1.0' AS ' ';\n+SELECT 'Upgrading MetaStore schema from 2.0.0 to 2.1.0' AS MESSAGE;\n \n --SOURCE 034-HIVE-13076.mysql.sql;\n CREATE TABLE IF NOT EXISTS `KEY_CONSTRAINTS`\n@@ -38,5 +38,5 @@ ALTER TABLE COMPACTION_QUEUE ADD CQ_TBLPROPERTIES varchar(2048);\n ALTER TABLE COMPLETED_COMPACTIONS ADD CC_TBLPROPERTIES varchar(2048);\n \n UPDATE VERSION SET SCHEMA_VERSION='2.1.0', VERSION_COMMENT='Hive release version 2.1.0' where VER_ID=1;\n-SELECT 'Finished upgrading MetaStore schema from 2.0.0 to 2.1.0' AS ' ';\n+SELECT 'Finished upgrading MetaStore schema from 2.0.0 to 2.1.0' AS MESSAGE;\n ",
                "deletions": 2
            },
            {
                "sha": "3346fe0bc2b3e0967531cdb34702fb152edbbdef",
                "filename": "standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.1.0-to-2.2.0.mysql.sql",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.1.0-to-2.2.0.mysql.sql",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.1.0-to-2.2.0.mysql.sql",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.1.0-to-2.2.0.mysql.sql?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -1,4 +1,4 @@\n-SELECT 'Upgrading MetaStore schema from 2.1.0 to 2.2.0' AS ' ';\n+SELECT 'Upgrading MetaStore schema from 2.1.0 to 2.2.0' AS MESSAGE;\n \n --SOURCE 037-HIVE-14496.mysql.sql;\n -- Step 1: Add the column allowing null\n@@ -39,5 +39,5 @@ ALTER TABLE TAB_COL_STATS MODIFY COLUMN_NAME varchar(767) CHARACTER SET latin1 C\n ALTER TABLE PART_COL_STATS MODIFY COLUMN_NAME varchar(767) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL;\n \n UPDATE VERSION SET SCHEMA_VERSION='2.2.0', VERSION_COMMENT='Hive release version 2.2.0' where VER_ID=1;\n-SELECT 'Finished upgrading MetaStore schema from 2.1.0 to 2.2.0' AS ' ';\n+SELECT 'Finished upgrading MetaStore schema from 2.1.0 to 2.2.0' AS MESSAGE;\n ",
                "deletions": 2
            },
            {
                "sha": "37e817b7cfd41ebcf566b338f85ede77ac9bc63c",
                "filename": "standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.2.0-to-2.3.0.mysql.sql",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.2.0-to-2.3.0.mysql.sql",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.2.0-to-2.3.0.mysql.sql",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.2.0-to-2.3.0.mysql.sql?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -1,8 +1,8 @@\n-SELECT 'Upgrading MetaStore schema from 2.2.0 to 2.3.0' AS ' ';\n+SELECT 'Upgrading MetaStore schema from 2.2.0 to 2.3.0' AS MESSAGE;\n \n --SOURCE 040-HIVE-16399.mysql.sql;\n CREATE INDEX TC_TXNID_INDEX ON TXN_COMPONENTS (TC_TXNID);\n \n UPDATE VERSION SET SCHEMA_VERSION='2.3.0', VERSION_COMMENT='Hive release version 2.3.0' where VER_ID=1;\n-SELECT 'Finished upgrading MetaStore schema from 2.2.0 to 2.3.0' AS ' ';\n+SELECT 'Finished upgrading MetaStore schema from 2.2.0 to 2.3.0' AS MESSAGE;\n ",
                "deletions": 2
            },
            {
                "sha": "7140c2af173d8feef8502e9ae75a296d3e9e1552",
                "filename": "standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.3.0-to-3.0.0.mysql.sql",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.3.0-to-3.0.0.mysql.sql",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.3.0-to-3.0.0.mysql.sql",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-2.3.0-to-3.0.0.mysql.sql?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -1,4 +1,4 @@\n-SELECT 'Upgrading MetaStore schema from 2.3.0 to 3.0.0' AS ' ';\n+SELECT 'Upgrading MetaStore schema from 2.3.0 to 3.0.0' AS MESSAGE;\n \n --SOURCE 041-HIVE-16556.mysql.sql;\n --\n@@ -323,4 +323,4 @@ ALTER TABLE `TBLS` ADD COLUMN `OWNER_TYPE` VARCHAR(10) CHARACTER SET latin1 COLL\n \n -- These lines need to be last.  Insert any changes above.\n UPDATE VERSION SET SCHEMA_VERSION='3.0.0', VERSION_COMMENT='Hive release version 3.0.0' where VER_ID=1;\n-SELECT 'Finished upgrading MetaStore schema from 2.3.0 to 3.0.0' AS ' ';\n+SELECT 'Finished upgrading MetaStore schema from 2.3.0 to 3.0.0' AS MESSAGE;",
                "deletions": 2
            },
            {
                "sha": "3eae9f2850e6d35576f7717a34a259f2b86d3ecf",
                "filename": "standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.0.0-to-3.1.0.mysql.sql",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.0.0-to-3.1.0.mysql.sql",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.0.0-to-3.1.0.mysql.sql",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.0.0-to-3.1.0.mysql.sql?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -1,4 +1,4 @@\n-SELECT 'Upgrading MetaStore schema from 3.0.0 to 3.1.0' AS ' ';\n+SELECT 'Upgrading MetaStore schema from 3.0.0 to 3.1.0' AS MESSAGE;\n   \n -- HIVE-19440\n ALTER TABLE `GLOBAL_PRIVS` ADD `AUTHORIZER` varchar(128) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL;\n@@ -53,4 +53,4 @@ CREATE TABLE MATERIALIZATION_REBUILD_LOCKS (\n \n -- These lines need to be last.  Insert any changes above.\n UPDATE VERSION SET SCHEMA_VERSION='3.1.0', VERSION_COMMENT='Hive release version 3.1.0' where VER_ID=1;\n-SELECT 'Finished upgrading MetaStore schema from 3.0.0 to 3.1.0' AS ' ';\n+SELECT 'Finished upgrading MetaStore schema from 3.0.0 to 3.1.0' AS MESSAGE;",
                "deletions": 2
            },
            {
                "sha": "ebfb90c51e51101cdd2802eb6b06f87c6300d812",
                "filename": "standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.1.0-to-3.2.0.mysql.sql",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.1.0-to-3.2.0.mysql.sql",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.1.0-to-3.2.0.mysql.sql",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.1.0-to-3.2.0.mysql.sql?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -1,4 +1,4 @@\n-SELECT 'Upgrading MetaStore schema from 3.1.0 to 3.2.0' AS ' ';\n+SELECT 'Upgrading MetaStore schema from 3.1.0 to 3.2.0' AS MESSAGE;\n \n -- HIVE-19267\n CREATE TABLE TXN_WRITE_NOTIFICATION_LOG (\n@@ -25,5 +25,5 @@ ALTER TABLE `CTLGS` ADD `CREATE_TIME` INT(11);\n \n -- These lines need to be last.  Insert any changes above.\n UPDATE VERSION SET SCHEMA_VERSION='3.2.0', VERSION_COMMENT='Hive release version 3.2.0' where VER_ID=1;\n-SELECT 'Finished upgrading MetaStore schema from 3.1.0 to 3.2.0' AS ' ';\n+SELECT 'Finished upgrading MetaStore schema from 3.1.0 to 3.2.0' AS MESSAGE;\n ",
                "deletions": 2
            },
            {
                "sha": "296cb12ef080043855d627e5e76d9f8d160754bb",
                "filename": "standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.2.0-to-4.0.0.mysql.sql",
                "blob_url": "https://github.com/apache/hive/blob/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.2.0-to-4.0.0.mysql.sql",
                "raw_url": "https://github.com/apache/hive/raw/9c00ee0d3043a7fdb7576baf8aea0805439eeb0a/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.2.0-to-4.0.0.mysql.sql",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/sql/mysql/upgrade-3.2.0-to-4.0.0.mysql.sql?ref=9c00ee0d3043a7fdb7576baf8aea0805439eeb0a",
                "patch": "@@ -1,4 +1,4 @@\n-SELECT 'Upgrading MetaStore schema from 3.2.0 to 4.0.0' AS ' ';\n+SELECT 'Upgrading MetaStore schema from 3.2.0 to 4.0.0' AS MESSAGE;\n \n -- HIVE-19416\n ALTER TABLE TBLS ADD WRITE_ID bigint DEFAULT 0;\n@@ -19,5 +19,5 @@ ALTER TABLE COLUMNS_V2 MODIFY COMMENT varchar(4000) CHARACTER SET latin1 COLLATE\n \n -- These lines need to be last.  Insert any changes above.\n UPDATE VERSION SET SCHEMA_VERSION='4.0.0', VERSION_COMMENT='Hive release version 4.0.0' where VER_ID=1;\n-SELECT 'Finished upgrading MetaStore schema from 3.2.0 to 4.0.0' AS ' ';\n+SELECT 'Finished upgrading MetaStore schema from 3.2.0 to 4.0.0' AS MESSAGE;\n ",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Commands.java"
        ],
        "unit_tests": [
            "TestCommands.java"
        ]
    },
    "hive_fbbb7cf": {
        "repo": "hive",
        "message": "HIVE-11636 NPE in stats conversion with HBase metastore (Sergey Shelukhin via gates)",
        "commit": "https://github.com/apache/hive/commit/fbbb7cf1fa5691037243a6db3993f294ffb00eeb",
        "parent": "https://github.com/apache/hive/commit/e150af9457079c87c267094f3861528286e951ea",
        "bug_id": "hive_fbbb7cf",
        "file": [
            {
                "sha": "df64124536a576300b579a20e34a706d4b4cbdcd",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/fbbb7cf1fa5691037243a6db3993f294ffb00eeb/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/fbbb7cf1fa5691037243a6db3993f294ffb00eeb/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=fbbb7cf1fa5691037243a6db3993f294ffb00eeb",
                "patch": "@@ -4281,8 +4281,8 @@ public TableStatsResult get_table_statistics_req(TableStatsRequest request)\n       }\n       try {\n         ColumnStatistics cs = getMS().getTableColumnStatistics(dbName, tblName, lowerCaseColNames);\n-        result = new TableStatsResult(\n-            cs == null ? Lists.<ColumnStatisticsObj>newArrayList() : cs.getStatsObj());\n+        result = new TableStatsResult((cs == null || cs.getStatsObj() == null)\n+            ? Lists.<ColumnStatisticsObj>newArrayList() : cs.getStatsObj());\n       } finally {\n         endFunction(\"get_table_statistics_req: \", result == null, null, tblName);\n       }",
                "deletions": 2
            },
            {
                "sha": "df0fac31ad2bce2a49626c6cc8305496a8629030",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/hbase/HBaseStore.java",
                "blob_url": "https://github.com/apache/hive/blob/fbbb7cf1fa5691037243a6db3993f294ffb00eeb/metastore/src/java/org/apache/hadoop/hive/metastore/hbase/HBaseStore.java",
                "raw_url": "https://github.com/apache/hive/raw/fbbb7cf1fa5691037243a6db3993f294ffb00eeb/metastore/src/java/org/apache/hadoop/hive/metastore/hbase/HBaseStore.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/hbase/HBaseStore.java?ref=fbbb7cf1fa5691037243a6db3993f294ffb00eeb",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.hadoop.hive.metastore.Warehouse;\n import org.apache.hadoop.hive.metastore.api.AggrStats;\n import org.apache.hadoop.hive.metastore.api.ColumnStatistics;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n import org.apache.hadoop.hive.metastore.api.CurrentNotificationEventId;\n import org.apache.hadoop.hive.metastore.api.Database;\n import org.apache.hadoop.hive.metastore.api.FieldSchema;\n@@ -1693,9 +1694,11 @@ public AggrStats get_aggr_stats_for(String dbName, String tblName, List<String>\n       partVals.add(partNameToVals(partName));\n     }\n     boolean commit = false;\n+    boolean hasAnyStats = false;\n     openTransaction();\n     try {\n       AggrStats aggrStats = new AggrStats();\n+      aggrStats.setPartsFound(0);\n       for (String colName : colNames) {\n         try {\n           AggrStats oneCol =\n@@ -1704,6 +1707,7 @@ public AggrStats get_aggr_stats_for(String dbName, String tblName, List<String>\n             assert oneCol.getColStatsSize() == 1;\n             aggrStats.setPartsFound(oneCol.getPartsFound());\n             aggrStats.addToColStats(oneCol.getColStats().get(0));\n+            hasAnyStats = true;\n           }\n         } catch (CacheLoader.InvalidCacheLoadException e) {\n           LOG.debug(\"Found no stats for column \" + colName);\n@@ -1712,6 +1716,10 @@ public AggrStats get_aggr_stats_for(String dbName, String tblName, List<String>\n         }\n       }\n       commit = true;\n+      if (!hasAnyStats) {\n+        // Set the required field.\n+        aggrStats.setColStats(new ArrayList<ColumnStatisticsObj>());\n+      }\n       return aggrStats;\n     } catch (IOException e) {\n       LOG.error(\"Unable to fetch aggregate column statistics\", e);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HBaseStore.java",
            "HiveMetaStore.java"
        ],
        "unit_tests": [
            "TestHiveMetaStore.java",
            "TestHBaseStore.java"
        ]
    },
    "hive_583a951": {
        "repo": "hive",
        "message": "HIVE-17535 Select 1 EXCEPT Select 1 fails with NPE (Vineet Garg,reviewed by Ashutosh Chauhan)",
        "commit": "https://github.com/apache/hive/commit/583a9511ba8809d81595a5fa4da32ed2c2f8912e",
        "parent": "https://github.com/apache/hive/commit/c5b3ccc41016afd94035637cb011eacbeb9e5893",
        "bug_id": "hive_583a951",
        "file": [
            {
                "sha": "efa690db10836b0c21723bfe51adb22f4ab53bac",
                "filename": "itests/src/test/resources/testconfiguration.properties",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/itests/src/test/resources/testconfiguration.properties",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/itests/src/test/resources/testconfiguration.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/src/test/resources/testconfiguration.properties?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -30,6 +30,7 @@ disabled.query.files=ql_rewrite_gbtoidx.q,\\\n   cbo_rp_subq_not_in.q,\\\n   cbo_rp_subq_exists.q,\\\n   orc_llap.q,\\\n+  min_structvalue.q,\\\n   ql_rewrite_gbtoidx_cbo_2.q,\\\n   rcfile_merge1.q,\\\n   smb_mapjoin_8.q,\\",
                "deletions": 0
            },
            {
                "sha": "28953b9d030f33d1c26789453b97335f4e848a5b",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/CalcitePlanner.java",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/java/org/apache/hadoop/hive/ql/parse/CalcitePlanner.java",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/java/org/apache/hadoop/hive/ql/parse/CalcitePlanner.java",
                "status": "modified",
                "changes": 19,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/CalcitePlanner.java?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -709,7 +709,7 @@ boolean canCBOHandleAst(ASTNode ast, QB qb, PreCboCtx cboCtx) {\n     boolean isSupportedRoot = root == HiveParser.TOK_QUERY || root == HiveParser.TOK_EXPLAIN\n         || qb.isCTAS() || qb.isMaterializedView();\n     // Queries without a source table currently are not supported by CBO\n-    boolean isSupportedType = (qb.getIsQuery() && !qb.containsQueryWithoutSourceTable())\n+    boolean isSupportedType = (qb.getIsQuery())\n         || qb.isCTAS() || qb.isMaterializedView() || cboCtx.type == PreCboCtx.Type.INSERT\n         || cboCtx.type == PreCboCtx.Type.MULTI_INSERT;\n     boolean noBadTokens = HiveCalciteUtil.validateASTForUnsupportedTokens(ast);\n@@ -4164,18 +4164,11 @@ private RelNode genLogicalPlan(QB qb, boolean outerMostQB,\n \n       if (aliasToRel.isEmpty()) {\n         // // This may happen for queries like select 1; (no source table)\n-        // We can do following which is same, as what Hive does.\n-        // With this, we will be able to generate Calcite plan.\n-        // qb.getMetaData().setSrcForAlias(DUMMY_TABLE, getDummyTable());\n-        // RelNode op = genTableLogicalPlan(DUMMY_TABLE, qb);\n-        // qb.addAlias(DUMMY_TABLE);\n-        // qb.setTabAlias(DUMMY_TABLE, DUMMY_TABLE);\n-        // aliasToRel.put(DUMMY_TABLE, op);\n-        // However, Hive trips later while trying to get Metadata for this dummy\n-        // table\n-        // So, for now lets just disable this. Anyway there is nothing much to\n-        // optimize in such cases.\n-        throw new CalciteSemanticException(\"Unsupported\", UnsupportedFeature.Others);\n+        qb.getMetaData().setSrcForAlias(DUMMY_TABLE, getDummyTable());\n+        qb.addAlias(DUMMY_TABLE);\n+        qb.setTabAlias(DUMMY_TABLE, DUMMY_TABLE);\n+        RelNode op = genTableLogicalPlan(DUMMY_TABLE, qb);\n+        aliasToRel.put(DUMMY_TABLE, op);\n \n       }\n ",
                "deletions": 13
            },
            {
                "sha": "d56fd21c63cdce35613c02b115d3f2c4dcaca08e",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -2019,6 +2019,9 @@ private void getMetaData(QB qb, ReadEntity parentInput)\n       }\n \n       if (tab == null) {\n+        if(tabName.equals(DUMMY_DATABASE + \".\" + DUMMY_TABLE)) {\n+          continue;\n+        }\n         ASTNode src = qb.getParseInfo().getSrcForAlias(alias);\n         if (null != src) {\n           throw new SemanticException(ErrorMsg.INVALID_TABLE.getMsg(src));\n@@ -10611,6 +10614,9 @@ public Operator genPlan(QB qb, boolean skipAmbiguityCheck)\n \n     // Recurse over all the source tables\n     for (String alias : qb.getTabAliases()) {\n+      if(alias.equals(DUMMY_TABLE)) {\n+        continue;\n+      }\n       Operator op = genTablePlan(alias, qb);\n       aliasToOpInfo.put(alias, op);\n     }\n@@ -10738,7 +10744,7 @@ private void rewriteRRForSubQ(String alias, Operator operator, boolean skipAmbig\n     opParseCtx.get(operator).setRowResolver(newRR);\n   }\n \n-  private Table getDummyTable() throws SemanticException {\n+  protected Table getDummyTable() throws SemanticException {\n     Path dummyPath = createDummyFile();\n     Table desc = new Table(DUMMY_DATABASE, DUMMY_TABLE);\n     desc.getTTable().getSd().setLocation(dummyPath.toString());",
                "deletions": 1
            },
            {
                "sha": "3b49ac6a0a8f00dbc26a4071042d6e05574f0767",
                "filename": "ql/src/test/queries/clientnegative/subquery_missing_from.q",
                "blob_url": "https://github.com/apache/hive/blob/c5b3ccc41016afd94035637cb011eacbeb9e5893/ql/src/test/queries/clientnegative/subquery_missing_from.q",
                "raw_url": "https://github.com/apache/hive/raw/c5b3ccc41016afd94035637cb011eacbeb9e5893/ql/src/test/queries/clientnegative/subquery_missing_from.q",
                "status": "removed",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientnegative/subquery_missing_from.q?ref=c5b3ccc41016afd94035637cb011eacbeb9e5893",
                "patch": "@@ -1 +0,0 @@\n-select * from src where src.key in (select key);\n\\ No newline at end of file",
                "deletions": 1
            },
            {
                "sha": "75cae51e6af638c5bca38c983bf7dc7161c30fee",
                "filename": "ql/src/test/queries/clientnegative/subquery_select_no_source.q",
                "blob_url": "https://github.com/apache/hive/blob/c5b3ccc41016afd94035637cb011eacbeb9e5893/ql/src/test/queries/clientnegative/subquery_select_no_source.q",
                "raw_url": "https://github.com/apache/hive/raw/c5b3ccc41016afd94035637cb011eacbeb9e5893/ql/src/test/queries/clientnegative/subquery_select_no_source.q",
                "status": "removed",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientnegative/subquery_select_no_source.q?ref=c5b3ccc41016afd94035637cb011eacbeb9e5893",
                "patch": "@@ -1,2 +0,0 @@\n--- since CBO doesn't allow such queries we can not support subqueries here\n-explain select (select max(p_size) from part);",
                "deletions": 2
            },
            {
                "sha": "b09a8e311f5e7b2ef0c35b28ade81dfb4033fed3",
                "filename": "ql/src/test/results/clientnegative/subquery_missing_from.q.out",
                "blob_url": "https://github.com/apache/hive/blob/c5b3ccc41016afd94035637cb011eacbeb9e5893/ql/src/test/results/clientnegative/subquery_missing_from.q.out",
                "raw_url": "https://github.com/apache/hive/raw/c5b3ccc41016afd94035637cb011eacbeb9e5893/ql/src/test/results/clientnegative/subquery_missing_from.q.out",
                "status": "removed",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientnegative/subquery_missing_from.q.out?ref=c5b3ccc41016afd94035637cb011eacbeb9e5893",
                "patch": "@@ -1,3 +0,0 @@\n-FAILED: SemanticException Line 0:-1 Invalid SubQuery expression 'key' in definition of SubQuery sq_1 [\n-src.key in (select key)\n-] used as sq_1 at Line 0:-1: From clause is missing in SubQuery.",
                "deletions": 3
            },
            {
                "sha": "37c4e57813a61d4f6832df610265962fffc92240",
                "filename": "ql/src/test/results/clientnegative/subquery_select_no_source.q.out",
                "blob_url": "https://github.com/apache/hive/blob/c5b3ccc41016afd94035637cb011eacbeb9e5893/ql/src/test/results/clientnegative/subquery_select_no_source.q.out",
                "raw_url": "https://github.com/apache/hive/raw/c5b3ccc41016afd94035637cb011eacbeb9e5893/ql/src/test/results/clientnegative/subquery_select_no_source.q.out",
                "status": "removed",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientnegative/subquery_select_no_source.q.out?ref=c5b3ccc41016afd94035637cb011eacbeb9e5893",
                "patch": "@@ -1 +0,0 @@\n-FAILED: CalciteSubquerySemanticException [Error 10249]: Unsupported SubQuery Expression  Currently SubQuery expressions are only allowed as Where and Having Clause predicates",
                "deletions": 1
            },
            {
                "sha": "7e7084160df06263534e64b490dcb20d810a26ec",
                "filename": "ql/src/test/results/clientpositive/beeline/mapjoin2.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/beeline/mapjoin2.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/beeline/mapjoin2.q.out",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/beeline/mapjoin2.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -53,6 +53,7 @@ POSTHOOK: Input: default@tbl\n #### A masked pattern was here ####\n false\tfalse\ttrue\ttrue\n true\ttrue\tfalse\tfalse\n+Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Stage-3:MAPRED' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table\n@@ -62,6 +63,7 @@ POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n #### A masked pattern was here ####\n 11\t1\t1\t0\t0\n+Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Stage-3:MAPRED' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a left outer join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table\n@@ -71,6 +73,7 @@ POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n #### A masked pattern was here ####\n 11\t1\t1\t0\t0\n+Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Stage-3:MAPRED' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a right outer join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table\n@@ -80,6 +83,7 @@ POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n #### A masked pattern was here ####\n 11\t1\t1\t0\t0\n+Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a full outer join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table",
                "deletions": 0
            },
            {
                "sha": "0b73e84e9aea6855e91fd547bfb7a973b55d6613",
                "filename": "ql/src/test/results/clientpositive/beeline/select_dummy_source.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/beeline/select_dummy_source.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/beeline/select_dummy_source.q.out",
                "status": "modified",
                "changes": 22,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/beeline/select_dummy_source.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -89,13 +89,17 @@ STAGE PLANS:\n               UDTF Operator\n                 Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n                 function name: explode\n-                File Output Operator\n-                  compressed: false\n+                Select Operator\n+                  expressions: col (type: string)\n+                  outputColumnNames: _col0\n                   Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n-                  table:\n-                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n-                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n-                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                  File Output Operator\n+                    compressed: false\n+                    Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n+                    table:\n+                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n \n   Stage: Stage-0\n     Fetch Operator\n@@ -204,7 +208,11 @@ STAGE PLANS:\n             UDTF Operator\n               Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n               function name: explode\n-              ListSink\n+              Select Operator\n+                expressions: col (type: string)\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n+                ListSink\n \n PREHOOK: query: select explode(array('a', 'b'))\n PREHOOK: type: QUERY",
                "deletions": 7
            },
            {
                "sha": "4ce7e1cca7d43da1a88b153e6c6cdeeff5b2adf7",
                "filename": "ql/src/test/results/clientpositive/decimal_precision2.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/decimal_precision2.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/decimal_precision2.q.out",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/decimal_precision2.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -37,9 +37,9 @@ STAGE PLANS:\n           Row Limit Per Split: 1\n           Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: COMPLETE\n           Select Operator\n-            expressions: 100 (type: decimal(3,0))\n+            expressions: 100 (type: int)\n             outputColumnNames: _col0\n-            Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: COMPLETE\n+            Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n             ListSink\n \n PREHOOK: query: explain select 0.000BD\n@@ -59,9 +59,9 @@ STAGE PLANS:\n           Row Limit Per Split: 1\n           Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: COMPLETE\n           Select Operator\n-            expressions: 0 (type: decimal(1,0))\n+            expressions: 0 (type: int)\n             outputColumnNames: _col0\n-            Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: COMPLETE\n+            Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n             ListSink\n \n PREHOOK: query: explain select 0.100BD\n@@ -147,7 +147,7 @@ STAGE PLANS:\n           Row Limit Per Split: 1\n           Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: COMPLETE\n           Select Operator\n-            expressions: 69.0212249755859375 (type: decimal(27,20))\n+            expressions: 69.0212249755859375 (type: decimal(18,16))\n             outputColumnNames: _col0\n             Statistics: Num rows: 1 Data size: 112 Basic stats: COMPLETE Column stats: COMPLETE\n             ListSink",
                "deletions": 5
            },
            {
                "sha": "a47d791fad073baa52e6374252e0c734a9310b8c",
                "filename": "ql/src/test/results/clientpositive/llap/explainuser_1.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/llap/explainuser_1.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/llap/explainuser_1.q.out",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/llap/explainuser_1.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -5150,16 +5150,18 @@ PREHOOK: query: explain select explode(array('a', 'b'))\n PREHOOK: type: QUERY\n POSTHOOK: query: explain select explode(array('a', 'b'))\n POSTHOOK: type: QUERY\n-Plan not optimized by CBO.\n+Plan optimized by CBO.\n \n Stage-0\n   Fetch Operator\n     limit:-1\n-    UDTF Operator [UDTF_2]\n-      function name:explode\n-      Select Operator [SEL_1]\n-        Output:[\"_col0\"]\n-        TableScan [TS_0]\n+    Select Operator [SEL_3]\n+      Output:[\"_col0\"]\n+      UDTF Operator [UDTF_2]\n+        function name:explode\n+        Select Operator [SEL_1]\n+          Output:[\"_col0\"]\n+          TableScan [TS_0]\n \n PREHOOK: query: CREATE TABLE T1(key STRING, val STRING) STORED AS TEXTFILE\n PREHOOK: type: CREATETABLE",
                "deletions": 6
            },
            {
                "sha": "ce65c6ddbfb6b4cdb7c058a05c583835d0631e06",
                "filename": "ql/src/test/results/clientpositive/llap/mapjoin2.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/llap/mapjoin2.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/llap/mapjoin2.q.out",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/llap/mapjoin2.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -53,6 +53,7 @@ POSTHOOK: Input: default@tbl\n #### A masked pattern was here ####\n false\tfalse\ttrue\ttrue\n true\ttrue\tfalse\tfalse\n+Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table\n@@ -62,6 +63,7 @@ POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n #### A masked pattern was here ####\n 11\t1\t1\t0\t0\n+Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a left outer join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table\n@@ -71,6 +73,7 @@ POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n #### A masked pattern was here ####\n 11\t1\t1\t0\t0\n+Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a right outer join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table\n@@ -80,6 +83,7 @@ POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n #### A masked pattern was here ####\n 11\t1\t1\t0\t0\n+Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a full outer join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table",
                "deletions": 0
            },
            {
                "sha": "b7f939fb8e8fd4138e447df9840583a4955ec035",
                "filename": "ql/src/test/results/clientpositive/llap/select_dummy_source.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/llap/select_dummy_source.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/llap/select_dummy_source.q.out",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/llap/select_dummy_source.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -82,7 +82,10 @@ STAGE PLANS:\n             outputColumnNames: _col0\n             UDTF Operator\n               function name: explode\n-              ListSink\n+              Select Operator\n+                expressions: col (type: string)\n+                outputColumnNames: _col0\n+                ListSink\n \n PREHOOK: query: select explode(array('a', 'b'))\n PREHOOK: type: QUERY\n@@ -178,7 +181,10 @@ STAGE PLANS:\n             outputColumnNames: _col0\n             UDTF Operator\n               function name: explode\n-              ListSink\n+              Select Operator\n+                expressions: col (type: string)\n+                outputColumnNames: _col0\n+                ListSink\n \n PREHOOK: query: select explode(array('a', 'b'))\n PREHOOK: type: QUERY",
                "deletions": 2
            },
            {
                "sha": "7e7084160df06263534e64b490dcb20d810a26ec",
                "filename": "ql/src/test/results/clientpositive/mapjoin2.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/mapjoin2.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/mapjoin2.q.out",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/mapjoin2.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -53,6 +53,7 @@ POSTHOOK: Input: default@tbl\n #### A masked pattern was here ####\n false\tfalse\ttrue\ttrue\n true\ttrue\tfalse\tfalse\n+Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Stage-3:MAPRED' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table\n@@ -62,6 +63,7 @@ POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n #### A masked pattern was here ####\n 11\t1\t1\t0\t0\n+Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Stage-3:MAPRED' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a left outer join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table\n@@ -71,6 +73,7 @@ POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n #### A masked pattern was here ####\n 11\t1\t1\t0\t0\n+Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Stage-3:MAPRED' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a right outer join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table\n@@ -80,6 +83,7 @@ POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n #### A masked pattern was here ####\n 11\t1\t1\t0\t0\n+Warning: Shuffle Join JOIN[6][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product\n PREHOOK: query: select a.key, a.a_one, b.b_one, a.a_zero, b.b_zero from ( SELECT 11 key, 0 confuse_you, 1 a_one, 0 a_zero ) a full outer join ( SELECT 11 key, 0 confuse_you, 1 b_one, 0 b_zero ) b on a.key = b.key\n PREHOOK: type: QUERY\n PREHOOK: Input: _dummy_database@_dummy_table",
                "deletions": 0
            },
            {
                "sha": "0b73e84e9aea6855e91fd547bfb7a973b55d6613",
                "filename": "ql/src/test/results/clientpositive/select_dummy_source.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/select_dummy_source.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/select_dummy_source.q.out",
                "status": "modified",
                "changes": 22,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/select_dummy_source.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -89,13 +89,17 @@ STAGE PLANS:\n               UDTF Operator\n                 Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n                 function name: explode\n-                File Output Operator\n-                  compressed: false\n+                Select Operator\n+                  expressions: col (type: string)\n+                  outputColumnNames: _col0\n                   Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n-                  table:\n-                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n-                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n-                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                  File Output Operator\n+                    compressed: false\n+                    Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n+                    table:\n+                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n \n   Stage: Stage-0\n     Fetch Operator\n@@ -204,7 +208,11 @@ STAGE PLANS:\n             UDTF Operator\n               Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n               function name: explode\n-              ListSink\n+              Select Operator\n+                expressions: col (type: string)\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: COMPLETE\n+                ListSink\n \n PREHOOK: query: select explode(array('a', 'b'))\n PREHOOK: type: QUERY",
                "deletions": 7
            },
            {
                "sha": "b4ef3e41ad814de385e094a8bda12242203469b6",
                "filename": "ql/src/test/results/clientpositive/timestamptz_1.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/timestamptz_1.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/timestamptz_1.q.out",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/timestamptz_1.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -18,7 +18,7 @@ POSTHOOK: query: insert overwrite table tstz1 select cast('2016-01-03 12:26:34 A\n POSTHOOK: type: QUERY\n POSTHOOK: Input: _dummy_database@_dummy_table\n POSTHOOK: Output: default@tstz1\n-POSTHOOK: Lineage: tstz1.t EXPRESSION []\n+POSTHOOK: Lineage: tstz1.t SIMPLE []\n PREHOOK: query: select cast(t as string) from tstz1\n PREHOOK: type: QUERY\n PREHOOK: Input: default@tstz1",
                "deletions": 1
            },
            {
                "sha": "3192a44e41d9063af2b17f7350795dc9d2834b19",
                "filename": "ql/src/test/results/clientpositive/udtf_stack.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/udtf_stack.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/udtf_stack.q.out",
                "status": "modified",
                "changes": 18,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/udtf_stack.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -182,13 +182,17 @@ STAGE PLANS:\n               UDTF Operator\n                 Statistics: Num rows: 1 Data size: 185 Basic stats: COMPLETE Column stats: COMPLETE\n                 function name: stack\n-                File Output Operator\n-                  compressed: false\n-                  Statistics: Num rows: 1 Data size: 185 Basic stats: COMPLETE Column stats: COMPLETE\n-                  table:\n-                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n-                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n-                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                Select Operator\n+                  expressions: col0 (type: string), col1 (type: string), null (type: void)\n+                  outputColumnNames: _col0, _col1, _col2\n+                  Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                  File Output Operator\n+                    compressed: false\n+                    Statistics: Num rows: 1 Data size: 4 Basic stats: COMPLETE Column stats: COMPLETE\n+                    table:\n+                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n \n   Stage: Stage-0\n     Fetch Operator",
                "deletions": 7
            },
            {
                "sha": "2d86d8c70834b1dbae3adf3a1d10a2188ffcd385",
                "filename": "ql/src/test/results/clientpositive/vector_tablesample_rows.q.out",
                "blob_url": "https://github.com/apache/hive/blob/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/vector_tablesample_rows.q.out",
                "raw_url": "https://github.com/apache/hive/raw/583a9511ba8809d81595a5fa4da32ed2c2f8912e/ql/src/test/results/clientpositive/vector_tablesample_rows.q.out",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/vector_tablesample_rows.q.out?ref=583a9511ba8809d81595a5fa4da32ed2c2f8912e",
                "patch": "@@ -251,7 +251,7 @@ STAGE PLANS:\n             Select Operator\n               Statistics: Num rows: 1 Data size: 1 Basic stats: COMPLETE Column stats: COMPLETE\n               Group By Operator\n-                aggregations: count(1)\n+                aggregations: count()\n                 Group By Vectorization:\n                     groupByMode: HASH\n                     vectorOutput: false",
                "deletions": 1
            }
        ],
        "patched_files": [
            "SemanticAnalyzer.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzer.java"
        ]
    },
    "hive_309cb0d": {
        "repo": "hive",
        "message": "HIVE-16877 : NPE when issue query like alter table ... cascade onto non-partitioned table (Wang Haihua via Ashutosh Chauhan)\n\nSigned-off-by: Ashutosh Chauhan <hashutosh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6",
        "parent": "https://github.com/apache/hive/commit/db21c3ff6c09ca920b9406efe95694d110219483",
        "bug_id": "hive_309cb0d",
        "file": [
            {
                "sha": "226ba1895fc1b7d613083887c9bd79ea883c32ec",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "blob_url": "https://github.com/apache/hive/blob/309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "raw_url": "https://github.com/apache/hive/raw/309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java?ref=309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6",
                "patch": "@@ -471,6 +471,8 @@\n   INVALID_JOIN_CONDITION(10407, \"Error parsing condition in join\"),\n   INVALID_TARGET_COLUMN_IN_SET_CLAUSE(10408, \"Target column \\\"{0}\\\" of set clause is not found in table \\\"{1}\\\".\", true),\n   HIVE_GROUPING_FUNCTION_EXPR_NOT_IN_GROUPBY(10409, \"Expression in GROUPING function not present in GROUP BY\"),\n+  ALTER_TABLE_NON_PARTITIONED_TABLE_CASCADE_NOT_SUPPORTED(10410,\n+      \"Alter table with non-partitioned table does not support cascade\"),\n   //========================== 20000 range starts here ========================//\n   SCRIPT_INIT_ERROR(20000, \"Unable to initialize custom script.\"),\n   SCRIPT_IO_ERROR(20001, \"An error occurred while reading or writing to your custom script. \"",
                "deletions": 0
            },
            {
                "sha": "55f07afabace4f836deab2f4505fad9112552e78",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java?ref=309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6",
                "patch": "@@ -1494,6 +1494,12 @@ private void addInputsOutputsAlterTable(String tableName, Map<String, String> pa\n     }\n \n     Table tab = getTable(tableName, true);\n+    // cascade only occurs with partitioned table\n+    if (isCascade && !tab.isPartitioned()) {\n+      throw new SemanticException(\n+          ErrorMsg.ALTER_TABLE_NON_PARTITIONED_TABLE_CASCADE_NOT_SUPPORTED);\n+    }\n+\n     // Determine the lock type to acquire\n     WriteEntity.WriteType writeType = WriteEntity.determineAlterTableWriteType(op);\n ",
                "deletions": 0
            },
            {
                "sha": "47ce383c8c656f3d648034e931d7f0a30608a06d",
                "filename": "ql/src/test/queries/clientnegative/alter_table_non_partitioned_table_cascade.q",
                "blob_url": "https://github.com/apache/hive/blob/309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6/ql/src/test/queries/clientnegative/alter_table_non_partitioned_table_cascade.q",
                "raw_url": "https://github.com/apache/hive/raw/309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6/ql/src/test/queries/clientnegative/alter_table_non_partitioned_table_cascade.q",
                "status": "added",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientnegative/alter_table_non_partitioned_table_cascade.q?ref=309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6",
                "patch": "@@ -0,0 +1,4 @@\n+drop table if exists alter_table_non_partition_cascade;\n+create table alter_table_non_partitioned_cascade(c1 string, c2 string);\n+describe alter_table_non_partitioned_cascade;\n+alter table alter_table_non_partitioned_cascade add columns (c3 string) cascade;\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "afa648dfde19b83762abc557b5b7cb10a98fa901",
                "filename": "ql/src/test/results/clientnegative/alter_table_non_partitioned_table_cascade.q.out",
                "blob_url": "https://github.com/apache/hive/blob/309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6/ql/src/test/results/clientnegative/alter_table_non_partitioned_table_cascade.q.out",
                "raw_url": "https://github.com/apache/hive/raw/309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6/ql/src/test/results/clientnegative/alter_table_non_partitioned_table_cascade.q.out",
                "status": "added",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientnegative/alter_table_non_partitioned_table_cascade.q.out?ref=309cb0d432653be4ef8b1028ccc4ed5d5f5ae7e6",
                "patch": "@@ -0,0 +1,21 @@\n+PREHOOK: query: drop table if exists alter_table_non_partition_cascade\n+PREHOOK: type: DROPTABLE\n+POSTHOOK: query: drop table if exists alter_table_non_partition_cascade\n+POSTHOOK: type: DROPTABLE\n+PREHOOK: query: create table alter_table_non_partitioned_cascade(c1 string, c2 string)\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@alter_table_non_partitioned_cascade\n+POSTHOOK: query: create table alter_table_non_partitioned_cascade(c1 string, c2 string)\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@alter_table_non_partitioned_cascade\n+PREHOOK: query: describe alter_table_non_partitioned_cascade\n+PREHOOK: type: DESCTABLE\n+PREHOOK: Input: default@alter_table_non_partitioned_cascade\n+POSTHOOK: query: describe alter_table_non_partitioned_cascade\n+POSTHOOK: type: DESCTABLE\n+POSTHOOK: Input: default@alter_table_non_partitioned_cascade\n+c1                  \tstring              \t                    \n+c2                  \tstring              \t                    \n+FAILED: SemanticException [Error 10410]: Alter table with non-partitioned table does not support cascade",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ErrorMsg.java"
        ],
        "unit_tests": [
            "TestErrorMsg.java"
        ]
    },
    "hive_0870ab9": {
        "repo": "hive",
        "message": "HIVE-18892: Fix NPEs in HiveMetastore.exchange_partitions method (Marta Kuczora, reviewed by Sahil Takiar and Peter Vary)",
        "commit": "https://github.com/apache/hive/commit/0870ab9ca6b622b850d83c0a583e1c3a123c33e7",
        "parent": "https://github.com/apache/hive/commit/68459cf0bfe67dfe72da9095a1dac6b84ede93b0",
        "bug_id": "hive_0870ab9",
        "file": [
            {
                "sha": "6838dd7d14f78ebcb0e53c9f9d11f666f7ab204b",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/0870ab9ca6b622b850d83c0a583e1c3a123c33e7/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/0870ab9ca6b622b850d83c0a583e1c3a123c33e7/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=0870ab9ca6b622b850d83c0a583e1c3a123c33e7",
                "patch": "@@ -3389,12 +3389,25 @@ public Partition exchange_partition(Map<String, String> partitionSpecs,\n     public List<Partition> exchange_partitions(Map<String, String> partitionSpecs,\n         String sourceDbName, String sourceTableName, String destDbName,\n         String destTableName) throws TException {\n+      if (partitionSpecs == null || sourceDbName == null || sourceTableName == null\n+          || destDbName == null || destTableName == null) {\n+        throw new MetaException(\"The DB and table name for the source and destination tables,\"\n+            + \" and the partition specs must not be null.\");\n+      }\n       boolean success = false;\n       boolean pathCreated = false;\n       RawStore ms = getMS();\n       ms.openTransaction();\n       Table destinationTable = ms.getTable(destDbName, destTableName);\n+      if (destinationTable == null) {\n+        throw new MetaException(\n+            \"The destination table \" + destDbName + \".\" + destTableName + \" not found\");\n+      }\n       Table sourceTable = ms.getTable(sourceDbName, sourceTableName);\n+      if (sourceTable == null) {\n+        throw new MetaException(\n+            \"The source table \" + sourceDbName + \".\" + sourceTableName + \" not found\");\n+      }\n       List<String> partVals = MetaStoreUtils.getPvals(sourceTable.getPartitionKeys(),\n           partitionSpecs);\n       List<String> partValsPresent = new ArrayList<> ();",
                "deletions": 0
            },
            {
                "sha": "c9b9e9b28650d84c198b482458561d1b2694f65a",
                "filename": "standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestExchangePartitions.java",
                "blob_url": "https://github.com/apache/hive/blob/0870ab9ca6b622b850d83c0a583e1c3a123c33e7/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestExchangePartitions.java",
                "raw_url": "https://github.com/apache/hive/raw/0870ab9ca6b622b850d83c0a583e1c3a123c33e7/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestExchangePartitions.java",
                "status": "modified",
                "changes": 288,
                "additions": 79,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestExchangePartitions.java?ref=0870ab9ca6b622b850d83c0a583e1c3a123c33e7",
                "patch": "@@ -38,7 +38,6 @@\n import org.apache.hadoop.hive.metastore.client.builder.TableBuilder;\n import org.apache.hadoop.hive.metastore.minihms.AbstractMetaStoreService;\n import org.apache.thrift.TException;\n-import org.apache.thrift.transport.TTransportException;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -290,160 +289,100 @@ public void testExchangePartitionsNonExistingPartLocation() throws Exception {\n         sourceTable.getTableName(), destTable.getDbName(), destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsNonExistingSourceTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, DB_NAME, \"nonexistingtable\",\n-          destTable.getDbName(), destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, DB_NAME, \"nonexistingtable\", destTable.getDbName(),\n+        destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsNonExistingSourceDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, \"nonexistingdb\", sourceTable.getTableName(),\n-          destTable.getDbName(), destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, \"nonexistingdb\", sourceTable.getTableName(),\n+        destTable.getDbName(), destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsNonExistingDestTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), DB_NAME, \"nonexistingtable\");\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        DB_NAME, \"nonexistingtable\");\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsNonExistingDestDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), \"nonexistingdb\", destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        \"nonexistingdb\", destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsEmptySourceTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, DB_NAME, \"\", destTable.getDbName(),\n-          destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, DB_NAME, \"\", destTable.getDbName(),\n+        destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsEmptySourceDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, \"\", sourceTable.getTableName(),\n-          destTable.getDbName(), destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, \"\", sourceTable.getTableName(),\n+        destTable.getDbName(), destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsEmptyDestTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), DB_NAME, \"\");\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        DB_NAME, \"\");\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsEmptyDestDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), \"\", destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        \"\", destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsNullSourceTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, DB_NAME, null, destTable.getDbName(),\n-          destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, DB_NAME, null, destTable.getDbName(),\n+        destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsNullSourceDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, null, sourceTable.getTableName(),\n-          destTable.getDbName(), destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, null, sourceTable.getTableName(),\n+        destTable.getDbName(), destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsNullDestTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), DB_NAME, null);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        DB_NAME, null);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsNullDestDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partitions(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), null, destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partitions(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        null, destTable.getTableName());\n   }\n \n   @Test(expected = MetaException.class)\n@@ -454,15 +393,10 @@ public void testExchangePartitionsEmptyPartSpec() throws Exception {\n         sourceTable.getTableName(), destTable.getDbName(), destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionsNullPartSpec() throws Exception {\n-    try {\n-      client.exchange_partitions(null, sourceTable.getDbName(), sourceTable.getTableName(), null,\n-          destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: NPE should not be thrown\n-    }\n+    client.exchange_partitions(null, sourceTable.getDbName(), sourceTable.getTableName(), null,\n+        destTable.getTableName());\n   }\n \n   @Test(expected = MetaException.class)\n@@ -881,160 +815,100 @@ public void testExchangePartitionNonExistingPartLocation() throws Exception {\n         sourceTable.getTableName(), destTable.getDbName(), destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionNonExistingSourceTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, DB_NAME, \"nonexistingtable\",\n-          destTable.getDbName(), destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, DB_NAME, \"nonexistingtable\", destTable.getDbName(),\n+        destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionNonExistingSourceDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, \"nonexistingdb\", sourceTable.getTableName(),\n-          destTable.getDbName(), destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, \"nonexistingdb\", sourceTable.getTableName(),\n+        destTable.getDbName(), destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionNonExistingDestTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), DB_NAME, \"nonexistingtable\");\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        DB_NAME, \"nonexistingtable\");\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionNonExistingDestDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), \"nonexistingdb\", destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        \"nonexistingdb\", destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionEmptySourceTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, DB_NAME, \"\", destTable.getDbName(),\n-          destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, DB_NAME, \"\", destTable.getDbName(),\n+        destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionEmptySourceDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, \"\", sourceTable.getTableName(),\n-          destTable.getDbName(), destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, \"\", sourceTable.getTableName(), destTable.getDbName(),\n+        destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionEmptyDestTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), DB_NAME, \"\");\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        DB_NAME, \"\");\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionEmptyDestDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), \"\", destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        \"\", destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionNullSourceTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, DB_NAME, null, destTable.getDbName(),\n-          destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, DB_NAME, null, destTable.getDbName(),\n+        destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionNullSourceDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, null, sourceTable.getTableName(),\n-          destTable.getDbName(), destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, null, sourceTable.getTableName(),\n+        destTable.getDbName(), destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionNullDestTable() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), DB_NAME, null);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        DB_NAME, null);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionNullDestDB() throws Exception {\n \n     Map<String, String> partitionSpecs = getPartitionSpec(partitions[1]);\n-    try {\n-      client.exchange_partition(partitionSpecs, sourceTable.getDbName(),\n-          sourceTable.getTableName(), null, destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: Non existing table or db should be handled correctly and NPE should not occur.\n-    }\n+    client.exchange_partition(partitionSpecs, sourceTable.getDbName(), sourceTable.getTableName(),\n+        null, destTable.getTableName());\n   }\n \n   @Test(expected = MetaException.class)\n@@ -1045,15 +919,11 @@ public void testExchangePartitionEmptyPartSpec() throws Exception {\n         sourceTable.getTableName(), destTable.getDbName(), destTable.getTableName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testExchangePartitionNullPartSpec() throws Exception {\n-    try {\n-      client.exchange_partition(null, sourceTable.getDbName(), sourceTable.getTableName(), null,\n-          destTable.getTableName());\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: NPE should not be thrown\n-    }\n+\n+    client.exchange_partition(null, sourceTable.getDbName(), sourceTable.getTableName(), null,\n+        destTable.getTableName());\n   }\n \n   @Test(expected = MetaException.class)",
                "deletions": 209
            }
        ],
        "patched_files": [
            "HiveMetaStore.java"
        ],
        "unit_tests": [
            "TestExchangePartitions.java",
            "TestHiveMetaStore.java"
        ]
    },
    "hive_4271bbf": {
        "repo": "hive",
        "message": "HIVE-21186: External tables replication throws NPE if hive.repl.replica.external.table.base.dir is not fully qualified HDFS path (Sankar Hariappan, reviewed by Mahesh Kumar Behera)\n\nSigned-off-by: Sankar Hariappan <sankarh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/4271bbfb02ae81901b1b44e15e0ca6bd1407de9d",
        "parent": "https://github.com/apache/hive/commit/dfc4b8edbd1ad8c394634c67fbd1f06ba03e4d7f",
        "bug_id": "hive_4271bbf",
        "file": [
            {
                "sha": "40ce4b4518ff557331c75126e924726cda0dbd8f",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java",
                "blob_url": "https://github.com/apache/hive/blob/4271bbfb02ae81901b1b44e15e0ca6bd1407de9d/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java",
                "raw_url": "https://github.com/apache/hive/raw/4271bbfb02ae81901b1b44e15e0ca6bd1407de9d/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosExternalTables.java?ref=4271bbfb02ae81901b1b44e15e0ca6bd1407de9d",
                "patch": "@@ -216,7 +216,13 @@ public void externalTableReplicationWithCustomPaths() throws Throwable {\n     DistributedFileSystem fs = primary.miniDFSCluster.getFileSystem();\n     fs.mkdirs(externalTableLocation, new FsPermission(\"777\"));\n \n-    List<String> loadWithClause = externalTableBasePathWithClause();\n+    // Create base directory but use HDFS path without schema or authority details.\n+    // Hive should pick up the local cluster's HDFS schema/authority.\n+    externalTableBasePathWithClause();\n+    List<String> loadWithClause = Collections.singletonList(\n+            \"'\" + HiveConf.ConfVars.REPL_EXTERNAL_TABLE_BASE_DIR.varname + \"'='\"\n+                    + REPLICA_EXTERNAL_BASE + \"'\"\n+    );\n \n     WarehouseInstance.Tuple bootstrapTuple = primary.run(\"use \" + primaryDbName)\n         .run(\"create external table a (i int, j int) \"",
                "deletions": 1
            },
            {
                "sha": "59b7c1c2ccb38d743bd4582014e790f8f8fb810e",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplExternalTables.java",
                "blob_url": "https://github.com/apache/hive/blob/4271bbfb02ae81901b1b44e15e0ca6bd1407de9d/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplExternalTables.java",
                "raw_url": "https://github.com/apache/hive/raw/4271bbfb02ae81901b1b44e15e0ca6bd1407de9d/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplExternalTables.java",
                "status": "modified",
                "changes": 22,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplExternalTables.java?ref=4271bbfb02ae81901b1b44e15e0ca6bd1407de9d",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.hadoop.hive.common.FileUtils;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.TableType;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n import org.apache.hadoop.hive.ql.metadata.Hive;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n import org.apache.hadoop.hive.ql.metadata.Partition;\n@@ -38,7 +39,6 @@\n import java.io.InputStreamReader;\n import java.io.OutputStream;\n import java.io.StringWriter;\n-import java.net.URI;\n import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n import java.util.HashSet;\n@@ -62,13 +62,21 @@\n \n   private ReplExternalTables(){}\n \n-  public static String externalTableLocation(HiveConf hiveConf, String location) {\n-    String currentPath = new Path(location).toUri().getPath();\n+  public static String externalTableLocation(HiveConf hiveConf, String location) throws SemanticException {\n     String baseDir = hiveConf.get(HiveConf.ConfVars.REPL_EXTERNAL_TABLE_BASE_DIR.varname);\n-    URI basePath = new Path(baseDir).toUri();\n-    String dataPath = currentPath.replaceFirst(Path.SEPARATOR, basePath.getPath() + Path.SEPARATOR);\n-    Path dataLocation = new Path(basePath.getScheme(), basePath.getAuthority(), dataPath);\n-    LOG.debug(\"incoming location: {} , new location: {}\", location, dataLocation.toString());\n+    Path basePath = new Path(baseDir);\n+    Path currentPath = new Path(location);\n+    String targetPathWithoutSchemeAndAuth = basePath.toUri().getPath() + currentPath.toUri().getPath();\n+    Path dataLocation;\n+    try {\n+      dataLocation = PathBuilder.fullyQualifiedHDFSUri(\n+              new Path(targetPathWithoutSchemeAndAuth),\n+              basePath.getFileSystem(hiveConf)\n+      );\n+    } catch (IOException e) {\n+      throw new SemanticException(ErrorMsg.INVALID_PATH.getMsg(), e);\n+    }\n+    LOG.info(\"Incoming external table location: {} , new location: {}\", location, dataLocation.toString());\n     return dataLocation.toString();\n   }\n ",
                "deletions": 7
            }
        ],
        "patched_files": [
            "ReplExternalTables.java"
        ],
        "unit_tests": [
            "TestReplicationScenariosExternalTables.java"
        ]
    },
    "hive_0a81e1e": {
        "repo": "hive",
        "message": "HIVE-19075: Fix NPE when trying to drop or get DB with null name (Marta Kuczora, via Peter Vary)",
        "commit": "https://github.com/apache/hive/commit/0a81e1ec309673007bc3e1a37cf88c92edfc285c",
        "parent": "https://github.com/apache/hive/commit/eb40ea57eac4c3ff46f638cf4ab83bec71b5eda5",
        "bug_id": "hive_0a81e1e",
        "file": [
            {
                "sha": "450da4f0f0491b881200ee1123b8064b023ea3e2",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/0a81e1ec309673007bc3e1a37cf88c92edfc285c/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/0a81e1ec309673007bc3e1a37cf88c92edfc285c/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=0a81e1ec309673007bc3e1a37cf88c92edfc285c",
                "patch": "@@ -1290,6 +1290,9 @@ public Database get_database(final String name) throws NoSuchObjectException, Me\n     @Override\n     public Database get_database_core(String catName, final String name) throws NoSuchObjectException, MetaException {\n       Database db = null;\n+      if (name == null) {\n+        throw new MetaException(\"Database name cannot be null.\");\n+      }\n       try {\n         db = getMS().getDatabase(catName, name);\n       } catch (MetaException | NoSuchObjectException e) {\n@@ -1364,6 +1367,9 @@ private void drop_database_core(RawStore ms, String catName,\n       List<Path> tablePaths = new ArrayList<>();\n       List<Path> partitionPaths = new ArrayList<>();\n       Map<String, String> transactionalListenerResponses = Collections.emptyMap();\n+      if (name == null) {\n+        throw new MetaException(\"Database name cannot be null.\");\n+      }\n       try {\n         ms.openTransaction();\n         db = ms.getDatabase(catName, name);",
                "deletions": 0
            },
            {
                "sha": "d558de66d04c529286d91bce2dad8603a4ebfe0b",
                "filename": "standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestDatabases.java",
                "blob_url": "https://github.com/apache/hive/blob/0a81e1ec309673007bc3e1a37cf88c92edfc285c/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestDatabases.java",
                "raw_url": "https://github.com/apache/hive/raw/0a81e1ec309673007bc3e1a37cf88c92edfc285c/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestDatabases.java",
                "status": "modified",
                "changes": 37,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestDatabases.java?ref=0a81e1ec309673007bc3e1a37cf88c92edfc285c",
                "patch": "@@ -40,7 +40,6 @@\n import org.apache.hadoop.hive.metastore.minihms.AbstractMetaStoreService;\n import org.apache.hadoop.hive.metastore.utils.SecurityUtils;\n import org.apache.thrift.TException;\n-import org.apache.thrift.transport.TTransportException;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -227,51 +226,27 @@ public void testGetDatabaseNoSuchDatabase() throws Exception {\n     client.getDatabase(\"no_such_database\");\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testGetDatabaseNullName() throws Exception {\n     // Missing database name in the query\n-    try {\n-      client.getDatabase(null);\n-      // TODO: Should have a check on the server side.\n-      Assert.fail(\"Expected a NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.getDatabase(null);\n   }\n \n   @Test(expected = NoSuchObjectException.class)\n   public void testDropDatabaseNoSuchDatabase() throws Exception {\n     client.dropDatabase(\"no_such_database\");\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testDropDatabaseNullName() throws Exception {\n     // Missing database in the query\n-    try {\n-      client.dropDatabase(null);\n-      // TODO: Should be checked on server side\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.dropDatabase(null);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testDropDatabaseDefaultDatabase() throws Exception {\n     // Check if it is possible to drop default database\n-    try {\n-      client.dropDatabase(DEFAULT_DATABASE);\n-      // TODO: Should be checked on server side\n-      Assert.fail(\"Expected an MetaException or TTransportException to be thrown\");\n-    } catch (MetaException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.dropDatabase(DEFAULT_DATABASE);\n   }\n \n   @Test",
                "deletions": 31
            }
        ],
        "patched_files": [
            "HiveMetaStore.java"
        ],
        "unit_tests": [
            "TestHiveMetaStore.java",
            "TestDatabases.java"
        ]
    },
    "hive_69a793b": {
        "repo": "hive",
        "message": "HIVE-12178 : LLAP: NPE in LRFU policy (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
        "commit": "https://github.com/apache/hive/commit/69a793b3475d51d61d69aa8ac5d5fee70b90bf80",
        "parent": "https://github.com/apache/hive/commit/f6bd00244c1a6804e71b8294fa1588857ad736da",
        "bug_id": "hive_69a793b",
        "file": [
            {
                "sha": "f0650482b389a7cffc5b2aaef352de292b3d23d7",
                "filename": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "blob_url": "https://github.com/apache/hive/blob/69a793b3475d51d61d69aa8ac5d5fee70b90bf80/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "raw_url": "https://github.com/apache/hive/raw/69a793b3475d51d61d69aa8ac5d5fee70b90bf80/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java?ref=69a793b3475d51d61d69aa8ac5d5fee70b90bf80",
                "patch": "@@ -2305,7 +2305,8 @@ public void setSparkConfigUpdated(boolean isSparkConfigUpdated) {\n     LLAP_USE_LRFU(\"hive.llap.io.use.lrfu\", false,\n         \"Whether ORC low-level cache should use LRFU cache policy instead of default (FIFO).\"),\n     LLAP_LRFU_LAMBDA(\"hive.llap.io.lrfu.lambda\", 0.01f,\n-        \"Lambda for ORC low-level cache LRFU cache policy.\"),\n+        \"Lambda for ORC low-level cache LRFU cache policy. Must be in [0, 1]. 0 makes LRFU\\n\" +\n+        \"behave like LFU, 1 makes it behave like LRU, values in between balance accordingly.\"),\n     LLAP_ORC_ENABLE_TIME_COUNTERS(\"hive.llap.io.orc.time.counters\", true,\n         \"Whether to enable time counters for LLAP IO layer (time spent in HDFS, etc.)\"),\n     LLAP_AUTO_ALLOW_UBER(\"hive.llap.auto.allow.uber\", true,",
                "deletions": 1
            },
            {
                "sha": "76e7605acc669c8be0e190216691c0780e6ef0f2",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java",
                "blob_url": "https://github.com/apache/hive/blob/69a793b3475d51d61d69aa8ac5d5fee70b90bf80/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java",
                "raw_url": "https://github.com/apache/hive/raw/69a793b3475d51d61d69aa8ac5d5fee70b90bf80/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelLrfuCachePolicy.java?ref=69a793b3475d51d61d69aa8ac5d5fee70b90bf80",
                "patch": "@@ -205,7 +205,8 @@ public long evictSomeBlocks(long memoryToReserve) {\n           listHead = listTail = null; // We have evicted the entire list.\n         } else {\n           // Splice the section that we have evicted out of the list.\n-          removeFromListUnderLock(nextCandidate.next, firstCandidate);\n+          // We have already updated the state above so no need to do that again.\n+          removeFromListUnderLockNoStateUpdate(nextCandidate.next, firstCandidate);\n         }\n       }\n     } finally {\n@@ -333,7 +334,6 @@ private void removeFromListAndUnlock(LlapCacheableBuffer buffer) {\n     try {\n       if (buffer.indexInHeap != LlapCacheableBuffer.IN_LIST) return;\n       removeFromListUnderLock(buffer);\n-      buffer.indexInHeap = LlapCacheableBuffer.NOT_IN_CACHE;\n     } finally {\n       listLock.unlock();\n     }\n@@ -350,9 +350,11 @@ private void removeFromListUnderLock(LlapCacheableBuffer buffer) {\n     } else {\n       buffer.prev.next = buffer.next;\n     }\n+    buffer.indexInHeap = LlapCacheableBuffer.NOT_IN_CACHE;\n   }\n \n-  private void removeFromListUnderLock(LlapCacheableBuffer from, LlapCacheableBuffer to) {\n+  private void removeFromListUnderLockNoStateUpdate(\n+      LlapCacheableBuffer from, LlapCacheableBuffer to) {\n     if (to == listTail) {\n       listTail = from.prev;\n     } else {",
                "deletions": 3
            },
            {
                "sha": "bb815e3273883326fd175b9ef35cd8f5d6b94844",
                "filename": "llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestLowLevelLrfuCachePolicy.java",
                "blob_url": "https://github.com/apache/hive/blob/69a793b3475d51d61d69aa8ac5d5fee70b90bf80/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestLowLevelLrfuCachePolicy.java",
                "raw_url": "https://github.com/apache/hive/raw/69a793b3475d51d61d69aa8ac5d5fee70b90bf80/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestLowLevelLrfuCachePolicy.java",
                "status": "modified",
                "changes": 57,
                "additions": 50,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/test/org/apache/hadoop/hive/llap/cache/TestLowLevelLrfuCachePolicy.java?ref=69a793b3475d51d61d69aa8ac5d5fee70b90bf80",
                "patch": "@@ -17,17 +17,14 @@\n  */\n package org.apache.hadoop.hive.llap.cache;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n+import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Random;\n+import java.util.concurrent.locks.ReentrantLock;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -41,6 +38,45 @@\n public class TestLowLevelLrfuCachePolicy {\n   private static final Log LOG = LogFactory.getLog(TestLowLevelLrfuCachePolicy.class);\n \n+  @Test\n+  public void testRegression_HIVE_12178() throws Exception {\n+    LOG.info(\"Testing wrong list status after eviction\");\n+    EvictionTracker et = new EvictionTracker();\n+    int memSize = 2, lambda = 1; // Set lambda to 1 so the heap size becomes 1 (LRU).\n+    Configuration conf = createConf(1, memSize, (double)lambda);\n+    final LowLevelLrfuCachePolicy lrfu = new LowLevelLrfuCachePolicy(conf);\n+    Field f = LowLevelLrfuCachePolicy.class.getDeclaredField(\"listLock\");\n+    f.setAccessible(true);\n+    ReentrantLock listLock = (ReentrantLock)f.get(lrfu);\n+    LowLevelCacheMemoryManager mm = new LowLevelCacheMemoryManager(conf, lrfu,\n+        LlapDaemonCacheMetrics.create(\"test\", \"1\"));\n+    lrfu.setEvictionListener(et);\n+    final LlapDataBuffer buffer1 = LowLevelCacheImpl.allocateFake();\n+    LlapDataBuffer buffer2 = LowLevelCacheImpl.allocateFake();\n+    assertTrue(cache(mm, lrfu, et, buffer1));\n+    assertTrue(cache(mm, lrfu, et, buffer2));\n+    // buffer2 is now in the heap, buffer1 is in the list. \"Use\" buffer1 again;\n+    // before we notify though, lock the list, so lock cannot remove it from the list.\n+    buffer1.incRef();\n+    assertEquals(LlapCacheableBuffer.IN_LIST, buffer1.indexInHeap);\n+    listLock.lock();\n+    try {\n+      Thread otherThread = new Thread(new Runnable() {\n+        public void run() {\n+          lrfu.notifyLock(buffer1);\n+        }\n+      });\n+      otherThread.start();\n+      otherThread.join();\n+    } finally {\n+      listLock.unlock();\n+    }\n+    // Now try to evict with locked buffer still in the list.\n+    mm.reserveMemory(1, false);\n+    assertSame(buffer2, et.evicted.get(0));\n+    unlock(lrfu, buffer1);\n+  }\n+\n   @Test\n   public void testHeapSize2() {\n     testHeapSize(2);\n@@ -100,13 +136,20 @@ public void testLfuExtreme() {\n     verifyOrder(mm, lfu, et, inserted);\n   }\n \n-  private Configuration createConf(int min, int heapSize) {\n+  private Configuration createConf(int min, int heapSize, Double lambda) {\n     Configuration conf = new Configuration();\n     conf.setInt(HiveConf.ConfVars.LLAP_ORC_CACHE_MIN_ALLOC.varname, min);\n     conf.setInt(HiveConf.ConfVars.LLAP_ORC_CACHE_MAX_SIZE.varname, heapSize);\n+    if (lambda != null) {\n+      conf.setDouble(HiveConf.ConfVars.LLAP_LRFU_LAMBDA.varname, lambda.doubleValue());\n+    }\n     return conf;\n   }\n \n+  private Configuration createConf(int min, int heapSize) {\n+    return createConf(min, heapSize, null);\n+  }\n+\n   @Test\n   public void testLruExtreme() {\n     int heapSize = 4;",
                "deletions": 7
            }
        ],
        "patched_files": [
            "LowLevelLrfuCachePolicy.java",
            "HiveConf.java"
        ],
        "unit_tests": [
            "TestLowLevelLrfuCachePolicy.java",
            "TestHiveConf.java"
        ]
    },
    "hive_c29038a": {
        "repo": "hive",
        "message": "HIVE-20698 : Add better message for NPE when inserting rows with null timestamp to druid (Nishant Bangarwa via Ashutosh Chauhan)\n\nSigned-off-by: Ashutosh Chauhan <hashutosh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/c29038af9bc237bc82b83abb4f1370017a8cd379",
        "parent": "https://github.com/apache/hive/commit/9d522216972598a38b6750eb9b5d4af1b79cd6ba",
        "bug_id": "hive_c29038a",
        "file": [
            {
                "sha": "cf37e37c1517d35f7e40e169a447ae36cc3bc202",
                "filename": "druid-handler/src/java/org/apache/hadoop/hive/druid/serde/DruidSerDe.java",
                "blob_url": "https://github.com/apache/hive/blob/c29038af9bc237bc82b83abb4f1370017a8cd379/druid-handler/src/java/org/apache/hadoop/hive/druid/serde/DruidSerDe.java",
                "raw_url": "https://github.com/apache/hive/raw/c29038af9bc237bc82b83abb4f1370017a8cd379/druid-handler/src/java/org/apache/hadoop/hive/druid/serde/DruidSerDe.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/druid-handler/src/java/org/apache/hadoop/hive/druid/serde/DruidSerDe.java?ref=c29038af9bc237bc82b83abb4f1370017a8cd379",
                "patch": "@@ -357,9 +357,13 @@ protected SegmentAnalysis submitMetadataRequest(String address, SegmentMetadataQ\n     assert values.size() > granularityFieldIndex;\n     Preconditions.checkArgument(\n         fields.get(granularityFieldIndex).getFieldName().equals(Constants.DRUID_TIMESTAMP_GRANULARITY_COL_NAME));\n-    value.put(Constants.DRUID_TIMESTAMP_GRANULARITY_COL_NAME,\n+\n+    Timestamp timestamp =\n         ((TimestampObjectInspector) fields.get(granularityFieldIndex).getFieldObjectInspector())\n-            .getPrimitiveJavaObject(values.get(granularityFieldIndex)).toEpochMilli());\n+            .getPrimitiveJavaObject(values.get(granularityFieldIndex));\n+    Preconditions.checkNotNull(timestamp, \"Timestamp column cannot have null value\");\n+    value.put(Constants.DRUID_TIMESTAMP_GRANULARITY_COL_NAME, timestamp.toEpochMilli());\n+\n     if (values.size() == columns.length + 2) {\n       // Then partition number if any.\n       final int partitionNumPos = granularityFieldIndex + 1;",
                "deletions": 2
            },
            {
                "sha": "acde2394d7fb10cfe6f8c1c1349361450f155afb",
                "filename": "druid-handler/src/test/org/apache/hadoop/hive/druid/serde/TestDruidSerDe.java",
                "blob_url": "https://github.com/apache/hive/blob/c29038af9bc237bc82b83abb4f1370017a8cd379/druid-handler/src/test/org/apache/hadoop/hive/druid/serde/TestDruidSerDe.java",
                "raw_url": "https://github.com/apache/hive/raw/c29038af9bc237bc82b83abb4f1370017a8cd379/druid-handler/src/test/org/apache/hadoop/hive/druid/serde/TestDruidSerDe.java",
                "status": "modified",
                "changes": 34,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/druid-handler/src/test/org/apache/hadoop/hive/druid/serde/TestDruidSerDe.java?ref=c29038af9bc237bc82b83abb4f1370017a8cd379",
                "patch": "@@ -74,6 +74,7 @@\n import org.apache.hadoop.io.NullWritable;\n import org.apache.hadoop.io.Text;\n import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n \n import com.fasterxml.jackson.core.JsonParseException;\n@@ -90,6 +91,7 @@\n import io.druid.query.select.SelectResultValue;\n import io.druid.query.timeseries.TimeseriesResultValue;\n import io.druid.query.topn.TopNResultValue;\n+import org.junit.rules.ExpectedException;\n \n /**\n  * Basic tests for Druid SerDe. The examples are taken from Druid 0.9.1.1\n@@ -860,6 +862,38 @@ public void testDruidObjectSerializer()\n     serializeObject(tbl, serDe, ROW_OBJECT, DRUID_WRITABLE);\n   }\n \n+  @Rule\n+  public ExpectedException expectedEx = ExpectedException.none();\n+\n+  @Test\n+  public void testDruidObjectSerializerwithNullTimestamp()\n+      throws Exception {\n+    // Create, initialize, and test the SerDe\n+    DruidSerDe serDe = new DruidSerDe();\n+    Configuration conf = new Configuration();\n+    Properties tbl;\n+    // Mixed source (all types)\n+    tbl = createPropertiesSource(COLUMN_NAMES, COLUMN_TYPES);\n+    SerDeUtils.initializeSerDe(serDe, conf, tbl, null);\n+    Object[] row = new Object[] {\n+        null,\n+        new Text(\"dim1_val\"),\n+        new HiveCharWritable(new HiveChar(\"dim2_v\", 6)),\n+        new HiveVarcharWritable(new HiveVarchar(\"dim3_val\", 8)),\n+        new DoubleWritable(10669.3D),\n+        new FloatWritable(10669.45F),\n+        new LongWritable(1113939),\n+        new IntWritable(1112123),\n+        new ShortWritable((short) 12),\n+        new ByteWritable((byte) 0),\n+        null // granularity\n+    };\n+    expectedEx.expect(NullPointerException.class);\n+    expectedEx.expectMessage(\"Timestamp column cannot have null value\");\n+    // should fail as timestamp is null\n+    serializeObject(tbl, serDe, row, DRUID_WRITABLE);\n+  }\n+\n   private static Properties createPropertiesSource(String columnNames, String columnTypes) {\n     Properties tbl = new Properties();\n ",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DruidSerDe.java"
        ],
        "unit_tests": [
            "TestDruidSerDe.java"
        ]
    },
    "hive_89c275e": {
        "repo": "hive",
        "message": "HIVE-22393: HiveStreamingConnection: Exception in beginTransaction causes AbstractRecordWriter to throw NPE, covering up real exception (Matt Burgess via L\u00e1szl\u00f3 Bodor)\n\nSigned-off-by: Laszlo Bodor <bodorlaszlo0202@gmail.com>",
        "commit": "https://github.com/apache/hive/commit/89c275e21395b28e4ed3a3dd317f67e3cd4bcc4f",
        "parent": "https://github.com/apache/hive/commit/22f5ab51660aa660fdae58bb56a8c5cc44b60630",
        "bug_id": "hive_89c275e",
        "file": [
            {
                "sha": "fc9a2dd5342aa615059db7882d56c962aa6a22c5",
                "filename": "streaming/src/java/org/apache/hive/streaming/AbstractRecordWriter.java",
                "blob_url": "https://github.com/apache/hive/blob/89c275e21395b28e4ed3a3dd317f67e3cd4bcc4f/streaming/src/java/org/apache/hive/streaming/AbstractRecordWriter.java",
                "raw_url": "https://github.com/apache/hive/raw/89c275e21395b28e4ed3a3dd317f67e3cd4bcc4f/streaming/src/java/org/apache/hive/streaming/AbstractRecordWriter.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/streaming/src/java/org/apache/hive/streaming/AbstractRecordWriter.java?ref=89c275e21395b28e4ed3a3dd317f67e3cd4bcc4f",
                "patch": "@@ -366,7 +366,9 @@ public void flush() throws StreamingIOFailure {\n \n   @Override\n   public void close() throws StreamingIOFailure {\n-    heapMemoryMonitor.close();\n+    if(heapMemoryMonitor != null) {\n+      heapMemoryMonitor.close();\n+    }\n     boolean haveError = false;\n     String partition = null;\n     if (LOG.isDebugEnabled()) {\n@@ -395,7 +397,9 @@ public void close() throws StreamingIOFailure {\n       logStats(\"Stats after close:\");\n     }\n     try {\n-      this.fs.close();\n+      if(this.fs != null) {\n+        this.fs.close();\n+      }\n     } catch (IOException e) {\n       throw new StreamingIOFailure(\"Error while closing FileSystem\", e);\n     }\n@@ -630,7 +634,7 @@ protected void logStats(final String prefix) {\n       .filter(Objects::nonNull)\n       .mapToLong(RecordUpdater::getBufferedRowCount)\n       .sum();\n-    MemoryUsage memoryUsage = heapMemoryMonitor.getTenuredGenMemoryUsage();\n+    MemoryUsage memoryUsage = heapMemoryMonitor == null ? null : heapMemoryMonitor.getTenuredGenMemoryUsage();\n     String oldGenUsage = \"NA\";\n     if (memoryUsage != null) {\n       oldGenUsage = \"used/max => \" + LlapUtil.humanReadableByteCount(memoryUsage.getUsed()) + \"/\" +",
                "deletions": 3
            },
            {
                "sha": "35a220facd7d2d8f0a24a2cddfaf47ca47c60c5f",
                "filename": "streaming/src/test/org/apache/hive/streaming/TestStreaming.java",
                "blob_url": "https://github.com/apache/hive/blob/89c275e21395b28e4ed3a3dd317f67e3cd4bcc4f/streaming/src/test/org/apache/hive/streaming/TestStreaming.java",
                "raw_url": "https://github.com/apache/hive/raw/89c275e21395b28e4ed3a3dd317f67e3cd4bcc4f/streaming/src/test/org/apache/hive/streaming/TestStreaming.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/streaming/src/test/org/apache/hive/streaming/TestStreaming.java?ref=89c275e21395b28e4ed3a3dd317f67e3cd4bcc4f",
                "patch": "@@ -1819,6 +1819,27 @@ public void testTransactionBatchAbort() throws Exception {\n \n   }\n \n+  @Test(expected = ClassCastException.class)\n+  public void testFileSystemError() throws Exception {\n+    // Bad file system object, ClassCastException should occur during record writer init\n+    conf.set(\"fs.raw.impl\", Object.class.getName());\n+\n+    StrictDelimitedInputWriter writer = StrictDelimitedInputWriter.newBuilder()\n+            .withFieldDelimiter(',')\n+            .build();\n+\n+    HiveStreamingConnection connection = HiveStreamingConnection.newBuilder()\n+            .withDatabase(dbName)\n+            .withTable(tblName)\n+            .withStaticPartitionValues(partitionVals)\n+            .withAgentInfo(\"UT_\" + Thread.currentThread().getName())\n+            .withRecordWriter(writer)\n+            .withHiveConf(conf)\n+            .connect();\n+\n+    connection.beginTransaction();\n+  }\n+\n \n   @Test\n   public void testTransactionBatchAbortAndCommit() throws Exception {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AbstractRecordWriter.java"
        ],
        "unit_tests": [
            "TestStreaming.java"
        ]
    },
    "hive_afd7b5b": {
        "repo": "hive",
        "message": "HIVE-21507: Hive swallows NPE if no delegation token found (Denes Bodo, reviewed by Zoltan Haindrich, Daniel Dai)\n\nSigned-off-by: Zoltan Haindrich <kirk@rxd.hu>, Daniel Dai <daijyc@gmail.com>",
        "commit": "https://github.com/apache/hive/commit/afd7b5b38556f638782606edbe6850ef70e1c8bb",
        "parent": "https://github.com/apache/hive/commit/6d74222521d2a1333990b9b3577ec9a7f7e619b8",
        "bug_id": "hive_afd7b5b",
        "file": [
            {
                "sha": "4c7119f112844ffcc01e7c3dcd628fa2d83684a1",
                "filename": "jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java",
                "blob_url": "https://github.com/apache/hive/blob/afd7b5b38556f638782606edbe6850ef70e1c8bb/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java",
                "raw_url": "https://github.com/apache/hive/raw/afd7b5b38556f638782606edbe6850ef70e1c8bb/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java",
                "status": "modified",
                "changes": 62,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java?ref=afd7b5b38556f638782606edbe6850ef70e1c8bb",
                "patch": "@@ -760,36 +760,56 @@ SSLConnectionSocketFactory getTwoWaySSLSocketFactory() throws SQLException {\n   }\n \n   // Lookup the delegation token. First in the connection URL, then Configuration\n-  private String getClientDelegationToken(Map<String, String> jdbcConnConf)\n-      throws SQLException {\n+  private String getClientDelegationToken(Map<String, String> jdbcConnConf) throws SQLException {\n     String tokenStr = null;\n-    if (JdbcConnectionParams.AUTH_TOKEN.equalsIgnoreCase(jdbcConnConf.get(JdbcConnectionParams.AUTH_TYPE))) {\n-      // check delegation token in job conf if any\n+    if (!JdbcConnectionParams.AUTH_TOKEN.equalsIgnoreCase(jdbcConnConf.get(JdbcConnectionParams.AUTH_TYPE))) {\n+      return null;\n+    }\n+    DelegationTokenFetcher fetcher = new DelegationTokenFetcher();\n+    try {\n+      tokenStr = fetcher.getTokenStringFromFile();\n+    } catch (IOException e) {\n+      LOG.warn(\"Cannot get token from environment variable $HADOOP_TOKEN_FILE_LOCATION=\" +\n+              System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION));\n+    }\n+    if (tokenStr == null) {\n       try {\n-        if (System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION) != null) {\n-          try {\n-            Credentials cred = new Credentials();\n-            DataInputStream dis = new DataInputStream(new FileInputStream(System.getenv(UserGroupInformation\n-                    .HADOOP_TOKEN_FILE_LOCATION)));\n-            cred.readTokenStorageStream(dis);\n-            dis.close();\n-            Token<? extends TokenIdentifier> token = cred.getToken(new Text(\"hive\"));\n-            tokenStr = token.encodeToUrlString();\n-          } catch (IOException e) {\n-            LOG.warn(\"Cannot get token from environment variable $HADOOP_TOKEN_FILE_LOCATION=\" +\n-                    System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION));\n-          }\n-        }\n-        if (tokenStr == null) {\n-          tokenStr = SessionUtils.getTokenStrForm(HiveAuthConstants.HS2_CLIENT_TOKEN);\n-        }\n+        return fetcher.getTokenFromSession();\n       } catch (IOException e) {\n         throw new SQLException(\"Error reading token \", e);\n       }\n     }\n     return tokenStr;\n   }\n \n+  static class DelegationTokenFetcher {\n+    String getTokenStringFromFile() throws IOException {\n+      if (System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION) == null) {\n+        return null;\n+      }\n+      Credentials cred = new Credentials();\n+      try (DataInputStream dis = new DataInputStream(new FileInputStream(System.getenv(UserGroupInformation\n+              .HADOOP_TOKEN_FILE_LOCATION)))) {\n+        cred.readTokenStorageStream(dis);\n+      }\n+      return getTokenFromCredential(cred, \"hive\");\n+    }\n+\n+    String getTokenFromCredential(Credentials cred, String key) throws IOException {\n+      Token<? extends TokenIdentifier> token = cred.getToken(new Text(key));\n+      if (token == null) {\n+        LOG.warn(\"Delegation token with key: [hive] cannot be found.\");\n+        return null;\n+      }\n+      return token.encodeToUrlString();\n+    }\n+\n+    String getTokenFromSession() throws IOException {\n+      LOG.debug(\"Fetching delegation token from session.\");\n+      return SessionUtils.getTokenStrForm(HiveAuthConstants.HS2_CLIENT_TOKEN);\n+    }\n+  }\n+\n   private void openSession() throws SQLException {\n     TOpenSessionReq openReq = new TOpenSessionReq();\n ",
                "deletions": 21
            },
            {
                "sha": "bcd2608e1ba0101d94574cf3692a3cab66859a01",
                "filename": "jdbc/src/test/org/apache/hive/jdbc/TestHiveConnection.java",
                "blob_url": "https://github.com/apache/hive/blob/afd7b5b38556f638782606edbe6850ef70e1c8bb/jdbc/src/test/org/apache/hive/jdbc/TestHiveConnection.java",
                "raw_url": "https://github.com/apache/hive/raw/afd7b5b38556f638782606edbe6850ef70e1c8bb/jdbc/src/test/org/apache/hive/jdbc/TestHiveConnection.java",
                "status": "added",
                "changes": 60,
                "additions": 60,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/jdbc/src/test/org/apache/hive/jdbc/TestHiveConnection.java?ref=afd7b5b38556f638782606edbe6850ef70e1c8bb",
                "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.jdbc;\n+\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.security.Credentials;\n+import org.apache.hadoop.security.token.Token;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+public class TestHiveConnection {\n+\n+  private static final String EXISTING_TOKEN = \"ExistingToken\";\n+  public static final String EXPECTED_TOKEN_STRING_FORM = \"AAAAAA\";\n+  private static HiveConnection.DelegationTokenFetcher fetcher;\n+\n+  @BeforeClass\n+  public static void init() {\n+    fetcher = new HiveConnection.DelegationTokenFetcher();\n+  }\n+\n+  @Test\n+  public void testIfNPEThrownWhileGettingDelegationToken() throws IOException {\n+    try {\n+      String tokenStr = fetcher.getTokenFromCredential(new Credentials(), \"hive\");\n+      Assert.assertEquals(\"Token with id: hive shall not be found.\", null, tokenStr);\n+    } catch (NullPointerException e) {\n+      Assert.fail(\"This NPE is not handled in the code elsewhere so user is not notified about it!\");\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  @Test\n+  public void testIfGettingDelegationTokenFromCredentialWorks() throws IOException {\n+    Credentials creds = new Credentials();\n+    creds.addToken(new Text(EXISTING_TOKEN), new Token<>());\n+\n+    String tokenStr = fetcher.getTokenFromCredential(creds, EXISTING_TOKEN);\n+    Assert.assertEquals(\"Token string form is not as expected.\", EXPECTED_TOKEN_STRING_FORM, tokenStr);\n+  }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HiveConnection.java"
        ],
        "unit_tests": [
            "TestHiveConnection.java"
        ]
    },
    "hive_7fa8e37": {
        "repo": "hive",
        "message": "HIVE-15992: LLAP: NPE in LlapTaskCommunicator.getCompletedLogsUrl for unsuccessful attempt (Rajesh Balamohan reviewed by Prasanth Jayachandran)",
        "commit": "https://github.com/apache/hive/commit/7fa8e37fd13d9d6a4a4a5b2c72ce02d7c2d199ef",
        "parent": "https://github.com/apache/hive/commit/bda64ee87c74a06b3cf19b08c41d67f192f22018",
        "bug_id": "hive_7fa8e37",
        "file": [
            {
                "sha": "3aae7a42fac9f67cd3a7ce9e915b569ffd994115",
                "filename": "llap-tez/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java",
                "blob_url": "https://github.com/apache/hive/blob/7fa8e37fd13d9d6a4a4a5b2c72ce02d7c2d199ef/llap-tez/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java",
                "raw_url": "https://github.com/apache/hive/raw/7fa8e37fd13d9d6a4a4a5b2c72ce02d7c2d199ef/llap-tez/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-tez/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java?ref=7fa8e37fd13d9d6a4a4a5b2c72ce02d7c2d199ef",
                "patch": "@@ -541,7 +541,7 @@ public void indicateError(Throwable t) {\n   @Override\n   public String getInProgressLogsUrl(TezTaskAttemptID attemptID, NodeId containerNodeId) {\n     String url = \"\";\n-    if (timelineServerUri != null) {\n+    if (timelineServerUri != null && containerNodeId != null) {\n       LlapNodeId llapNodeId = LlapNodeId.getInstance(containerNodeId.getHost(), containerNodeId.getPort());\n       BiMap<ContainerId, TezTaskAttemptID> biMap = entityTracker.getContainerAttemptMapForNode(llapNodeId);\n       ContainerId containerId = biMap.inverse().get(attemptID);\n@@ -559,7 +559,7 @@ public String getInProgressLogsUrl(TezTaskAttemptID attemptID, NodeId containerN\n   @Override\n   public String getCompletedLogsUrl(TezTaskAttemptID attemptID, NodeId containerNodeId) {\n     String url = \"\";\n-    if (timelineServerUri != null) {\n+    if (timelineServerUri != null && containerNodeId != null) {\n       LlapNodeId llapNodeId = LlapNodeId.getInstance(containerNodeId.getHost(), containerNodeId.getPort());\n       BiMap<ContainerId, TezTaskAttemptID> biMap = entityTracker.getContainerAttemptMapForNode(llapNodeId);\n       ContainerId containerId = biMap.inverse().get(attemptID);",
                "deletions": 2
            }
        ],
        "patched_files": [
            "LlapTaskCommunicator.java"
        ],
        "unit_tests": [
            "TestLlapTaskCommunicator.java"
        ]
    },
    "hive_50f52b7": {
        "repo": "hive",
        "message": "Revert \"HIVE-13745: UDF current_date\u3001current_timestamp\u3001unix_timestamp NPE (Biao Wu, reviewed by Yongzhi Chen)\"\n\nThis reverts commit fb79870592d775cd836d5611e21ab1c7030aadba.",
        "commit": "https://github.com/apache/hive/commit/50f52b728f911634e03b8ff6251c15edf3b987cb",
        "parent": "https://github.com/apache/hive/commit/0d787cbc055eb237bcccd5fdbc144fb6b1d7d4ca",
        "bug_id": "hive_50f52b7",
        "file": [
            {
                "sha": "9df9cca278e9a31c024d570fab2d21c4c126b9b6",
                "filename": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "blob_url": "https://github.com/apache/hive/blob/50f52b728f911634e03b8ff6251c15edf3b987cb/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "raw_url": "https://github.com/apache/hive/raw/50f52b728f911634e03b8ff6251c15edf3b987cb/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java?ref=50f52b728f911634e03b8ff6251c15edf3b987cb",
                "patch": "@@ -1843,7 +1843,6 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n     TESTMODE_BUCKET_CODEC_VERSION(\"hive.test.bucketcodec.version\", 1,\n       \"For testing only.  Will make ACID subsystem write RecordIdentifier.bucketId in specified\\n\" +\n         \"format\", false),\n-    HIVE_QUERY_TIMESTAMP(\"hive.query.timestamp\", System.currentTimeMillis(), \"query execute time.\"),\n \n     HIVEMERGEMAPFILES(\"hive.merge.mapfiles\", true,\n         \"Merge small files at the end of a map-only job\"),",
                "deletions": 1
            },
            {
                "sha": "6bb756cc08148ae4bb9c935f270579e8abeb717a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "blob_url": "https://github.com/apache/hive/blob/50f52b728f911634e03b8ff6251c15edf3b987cb/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "raw_url": "https://github.com/apache/hive/raw/50f52b728f911634e03b8ff6251c15edf3b987cb/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java?ref=50f52b728f911634e03b8ff6251c15edf3b987cb",
                "patch": "@@ -1924,7 +1924,6 @@ public String getNextValuesTempTableSuffix() {\n    */\n   public void setupQueryCurrentTimestamp() {\n     queryCurrentTimestamp = new Timestamp(System.currentTimeMillis());\n-    sessionConf.setLongVar(ConfVars.HIVE_QUERY_TIMESTAMP, queryCurrentTimestamp.getTime());\n \n     // Provide a facility to set current timestamp during tests\n     if (sessionConf.getBoolVar(ConfVars.HIVE_IN_TEST)) {",
                "deletions": 1
            },
            {
                "sha": "7d3c3f46aa1318cb1eaf152d3b9f0ab36ef00ff7",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentDate.java",
                "blob_url": "https://github.com/apache/hive/blob/50f52b728f911634e03b8ff6251c15edf3b987cb/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentDate.java",
                "raw_url": "https://github.com/apache/hive/raw/50f52b728f911634e03b8ff6251c15edf3b987cb/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentDate.java",
                "status": "modified",
                "changes": 26,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentDate.java?ref=50f52b728f911634e03b8ff6251c15edf3b987cb",
                "patch": "@@ -18,12 +18,8 @@\n package org.apache.hadoop.hive.ql.udf.generic;\n \n import java.sql.Date;\n-import java.sql.Timestamp;\n \n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.exec.Description;\n-import org.apache.hadoop.hive.ql.exec.MapredContext;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentException;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n@@ -43,13 +39,6 @@\n public class GenericUDFCurrentDate extends GenericUDF {\n \n   protected DateWritable currentDate;\n-  private Configuration conf;\n-\n-  @Override\n-  public void configure(MapredContext context) {\n-    super.configure(context);\n-    conf = context.getJobConf();\n-  }\n \n   @Override\n   public ObjectInspector initialize(ObjectInspector[] arguments)\n@@ -61,21 +50,8 @@ public ObjectInspector initialize(ObjectInspector[] arguments)\n     }\n \n     if (currentDate == null) {\n-      SessionState ss = SessionState.get();\n-      Timestamp queryTimestamp;\n-      if (ss == null) {\n-        if (conf == null) {\n-          queryTimestamp = new Timestamp(System.currentTimeMillis());\n-        } else {\n-          queryTimestamp = new Timestamp(\n-                  HiveConf.getLongVar(conf, HiveConf.ConfVars.HIVE_QUERY_TIMESTAMP));\n-        }\n-      } else {\n-        queryTimestamp = ss.getQueryCurrentTimestamp();\n-      }\n-\n       Date dateVal =\n-              Date.valueOf(queryTimestamp.toString().substring(0, 10));\n+          Date.valueOf(SessionState.get().getQueryCurrentTimestamp().toString().substring(0, 10));\n       currentDate = new DateWritable(dateVal);\n     }\n ",
                "deletions": 25
            },
            {
                "sha": "9da51c84f51d3dae1eac46f8b1e7eef2e482e6c4",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentTimestamp.java",
                "blob_url": "https://github.com/apache/hive/blob/50f52b728f911634e03b8ff6251c15edf3b987cb/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentTimestamp.java",
                "raw_url": "https://github.com/apache/hive/raw/50f52b728f911634e03b8ff6251c15edf3b987cb/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentTimestamp.java",
                "status": "modified",
                "changes": 26,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentTimestamp.java?ref=50f52b728f911634e03b8ff6251c15edf3b987cb",
                "patch": "@@ -17,12 +17,7 @@\n  */\n package org.apache.hadoop.hive.ql.udf.generic;\n \n-import java.sql.Timestamp;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.exec.Description;\n-import org.apache.hadoop.hive.ql.exec.MapredContext;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentException;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n@@ -42,13 +37,6 @@\n public class GenericUDFCurrentTimestamp extends GenericUDF {\n \n   protected TimestampWritable currentTimestamp;\n-  private Configuration conf;\n-\n-  @Override\n-  public void configure(MapredContext context) {\n-    super.configure(context);\n-    conf = context.getJobConf();\n-  }\n \n   @Override\n   public ObjectInspector initialize(ObjectInspector[] arguments)\n@@ -60,19 +48,7 @@ public ObjectInspector initialize(ObjectInspector[] arguments)\n     }\n \n     if (currentTimestamp == null) {\n-      SessionState ss = SessionState.get();\n-      Timestamp queryTimestamp;\n-      if (ss == null) {\n-        if (conf == null) {\n-          queryTimestamp = new Timestamp(System.currentTimeMillis());\n-        } else {\n-          queryTimestamp = new Timestamp(\n-                  HiveConf.getLongVar(conf, HiveConf.ConfVars.HIVE_QUERY_TIMESTAMP));\n-        }\n-      } else {\n-        queryTimestamp = ss.getQueryCurrentTimestamp();\n-      }\n-      currentTimestamp = new TimestampWritable(queryTimestamp);\n+      currentTimestamp = new TimestampWritable(SessionState.get().getQueryCurrentTimestamp());\n     }\n \n     return PrimitiveObjectInspectorFactory.writableTimestampObjectInspector;",
                "deletions": 25
            },
            {
                "sha": "832983105f1f453a756a532cf21bcba8b3ae9fd0",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUnixTimeStamp.java",
                "blob_url": "https://github.com/apache/hive/blob/50f52b728f911634e03b8ff6251c15edf3b987cb/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUnixTimeStamp.java",
                "raw_url": "https://github.com/apache/hive/raw/50f52b728f911634e03b8ff6251c15edf3b987cb/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUnixTimeStamp.java",
                "status": "modified",
                "changes": 27,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUnixTimeStamp.java?ref=50f52b728f911634e03b8ff6251c15edf3b987cb",
                "patch": "@@ -18,11 +18,6 @@\n \n package org.apache.hadoop.hive.ql.udf.generic;\n \n-import java.sql.Timestamp;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.hive.conf.HiveConf;\n-import org.apache.hadoop.hive.ql.exec.MapredContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.hadoop.hive.ql.exec.Description;\n@@ -42,34 +37,14 @@\n public class GenericUDFUnixTimeStamp extends GenericUDFToUnixTimeStamp {\n   private static final Logger LOG = LoggerFactory.getLogger(GenericUDFUnixTimeStamp.class);\n   private LongWritable currentTimestamp; // retValue is transient so store this separately.\n-  private Configuration conf;\n-\n-  @Override\n-  public void configure(MapredContext context) {\n-    super.configure(context);\n-    conf = context.getJobConf();\n-  }\n-\n   @Override\n   protected void initializeInput(ObjectInspector[] arguments) throws UDFArgumentException {\n     if (arguments.length > 0) {\n       super.initializeInput(arguments);\n     } else {\n       if (currentTimestamp == null) {\n         currentTimestamp = new LongWritable(0);\n-        SessionState ss = SessionState.get();\n-        Timestamp queryTimestamp;\n-        if (ss == null) {\n-          if (conf == null) {\n-            queryTimestamp = new Timestamp(System.currentTimeMillis());\n-          } else {\n-            queryTimestamp = new Timestamp(\n-                    HiveConf.getLongVar(conf, HiveConf.ConfVars.HIVE_QUERY_TIMESTAMP));\n-          }\n-        } else {\n-          queryTimestamp = ss.getQueryCurrentTimestamp();\n-        }\n-        setValueFromTs(currentTimestamp, queryTimestamp);\n+        setValueFromTs(currentTimestamp, SessionState.get().getQueryCurrentTimestamp());\n         String msg = \"unix_timestamp(void) is deprecated. Use current_timestamp instead.\";\n         SessionState.getConsole().printInfo(msg, false);\n       }",
                "deletions": 26
            }
        ],
        "patched_files": [
            "SessionState.java",
            "HiveConf.java"
        ],
        "unit_tests": [
            "TestSessionState.java",
            "TestHiveConf.java"
        ]
    },
    "hive_fb35bae": {
        "repo": "hive",
        "message": "HIVE-14109: query execuction throws NPE when hive.exec.submitviachild is set to true (Aihua Xu, reviewed by Sergio Pe\u00f1a)",
        "commit": "https://github.com/apache/hive/commit/fb35bae5ae2fad93de3deef9023f52cba8e4783b",
        "parent": "https://github.com/apache/hive/commit/72cea13e4d968fad86be733c1f1aa65aafbb1fc4",
        "bug_id": "hive_fb35bae",
        "file": [
            {
                "sha": "285f9ad76e07b66dc338c5d33859ff47ac08d9a8",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java",
                "blob_url": "https://github.com/apache/hive/blob/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java",
                "raw_url": "https://github.com/apache/hive/raw/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java?ref=fb35bae5ae2fad93de3deef9023f52cba8e4783b",
                "patch": "@@ -126,7 +126,8 @@\n   public ExecDriver() {\n     super();\n     console = new LogHelper(LOG);\n-    this.jobExecHelper = new HadoopJobExecHelper(queryState, job, console, this, this);\n+    job = new JobConf(ExecDriver.class);\n+    this.jobExecHelper = new HadoopJobExecHelper(job, console, this, this);\n   }\n \n   @Override\n@@ -175,7 +176,7 @@ public void initialize(QueryState queryState, QueryPlan queryPlan, DriverContext\n     initializeFiles(\"tmparchives\", getResource(conf, SessionState.ResourceType.ARCHIVE));\n \n     conf.stripHiddenConfigurations(job);\n-    this.jobExecHelper = new HadoopJobExecHelper(queryState, job, console, this, this);\n+    this.jobExecHelper = new HadoopJobExecHelper(job, console, this, this);\n   }\n \n   /**\n@@ -185,7 +186,7 @@ public ExecDriver(MapredWork plan, JobConf job, boolean isSilent) throws HiveExc\n     setWork(plan);\n     this.job = job;\n     console = new LogHelper(LOG, isSilent);\n-    this.jobExecHelper = new HadoopJobExecHelper(queryState, job, console, this, this);\n+    this.jobExecHelper = new HadoopJobExecHelper(job, console, this, this);\n   }\n \n   /**\n@@ -671,6 +672,7 @@ public static void main(String[] args) throws IOException, HiveException {\n     String queryId = HiveConf.getVar(conf, HiveConf.ConfVars.HIVEQUERYID, \"\").trim();\n     if(queryId.isEmpty()) {\n       queryId = \"unknown-\" + System.currentTimeMillis();\n+      HiveConf.setVar(conf, HiveConf.ConfVars.HIVEQUERYID, queryId);\n     }\n     System.setProperty(HiveConf.ConfVars.HIVEQUERYID.toString(), queryId);\n ",
                "deletions": 3
            },
            {
                "sha": "cfb4a2816817925fe7351f7d17bd8ab35742890b",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/mr/HadoopJobExecHelper.java",
                "blob_url": "https://github.com/apache/hive/blob/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/HadoopJobExecHelper.java",
                "raw_url": "https://github.com/apache/hive/raw/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/HadoopJobExecHelper.java",
                "status": "modified",
                "changes": 18,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/HadoopJobExecHelper.java?ref=fb35bae5ae2fad93de3deef9023f52cba8e4783b",
                "patch": "@@ -34,7 +34,6 @@\n import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n import org.apache.hadoop.hive.ql.Context;\n import org.apache.hadoop.hive.ql.MapRedStats;\n-import org.apache.hadoop.hive.ql.QueryState;\n import org.apache.hadoop.hive.ql.exec.Operator;\n import org.apache.hadoop.hive.ql.exec.Task;\n import org.apache.hadoop.hive.ql.exec.TaskHandle;\n@@ -78,7 +77,7 @@\n   public transient JobID jobId;\n   private final LogHelper console;\n   private final HadoopJobExecHook callBackObj;\n-  private final QueryState queryState;\n+  private final String queryId;\n \n   /**\n    * Update counters relevant to this task.\n@@ -139,9 +138,9 @@ public void setJobId(JobID jobId) {\n     this.jobId = jobId;\n   }\n \n-  public HadoopJobExecHelper(QueryState queryState, JobConf job, LogHelper console,\n+  public HadoopJobExecHelper(JobConf job, LogHelper console,\n       Task<? extends Serializable> task, HadoopJobExecHook hookCallBack) {\n-    this.queryState = queryState;\n+    this.queryId = HiveConf.getVar(job, HiveConf.ConfVars.HIVEQUERYID, \"unknown-\" + System.currentTimeMillis());\n     this.job = job;\n     this.console = console;\n     this.task = task;\n@@ -259,7 +258,6 @@ private MapRedStats progress(ExecDriverTaskHandle th) throws IOException, LockEx\n \n           String logMapper;\n           String logReducer;\n-          String queryId = queryState.getQueryId();\n           TaskReport[] mappers = jc.getMapTaskReports(rj.getID());\n           if (mappers == null) {\n             logMapper = \"no information for number of mappers; \";\n@@ -364,11 +362,11 @@ private MapRedStats progress(ExecDriverTaskHandle th) throws IOException, LockEx\n       String output = report.toString();\n       SessionState ss = SessionState.get();\n       if (ss != null) {\n-        ss.getHiveHistory().setTaskCounters(queryState.getQueryId(), getId(), ctrs);\n-        ss.getHiveHistory().setTaskProperty(queryState.getQueryId(), getId(),\n+        ss.getHiveHistory().setTaskCounters(queryId, getId(), ctrs);\n+        ss.getHiveHistory().setTaskProperty(queryId, getId(),\n             Keys.TASK_HADOOP_PROGRESS, output);\n         if (ss.getConf().getBoolVar(HiveConf.ConfVars.HIVE_LOG_INCREMENTAL_PLAN_PROGRESS)) {\n-          ss.getHiveHistory().progressTask(queryState.getQueryId(), this.task);\n+          ss.getHiveHistory().progressTask(queryId, this.task);\n           this.callBackObj.logPlanProgress(ss);\n         }\n       }\n@@ -397,7 +395,7 @@ private MapRedStats progress(ExecDriverTaskHandle th) throws IOException, LockEx\n       } else {\n         SessionState ss = SessionState.get();\n         if (ss != null) {\n-          ss.getHiveHistory().setTaskCounters(queryState.getQueryId(), getId(), ctrs);\n+          ss.getHiveHistory().setTaskCounters(queryId, getId(), ctrs);\n         }\n         success = rj.isSuccessful();\n       }\n@@ -441,7 +439,7 @@ public void jobInfo(RunningJob rj) {\n       console.printInfo(\"Job running in-process (local Hadoop)\");\n     } else {\n       if (SessionState.get() != null) {\n-        SessionState.get().getHiveHistory().setTaskProperty(queryState.getQueryId(),\n+        SessionState.get().getHiveHistory().setTaskProperty(queryId,\n             getId(), Keys.TASK_HADOOP_ID, rj.getID().toString());\n       }\n       console.printInfo(getJobStartMsg(rj.getID()) + \", Tracking URL = \"",
                "deletions": 10
            },
            {
                "sha": "23a13d66c2dc1434c96164a7e2a8869fd5b4fcae",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/mr/MapredLocalTask.java",
                "blob_url": "https://github.com/apache/hive/blob/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/MapredLocalTask.java",
                "raw_url": "https://github.com/apache/hive/raw/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/MapredLocalTask.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/MapredLocalTask.java?ref=fb35bae5ae2fad93de3deef9023f52cba8e4783b",
                "patch": "@@ -128,7 +128,7 @@ public void initialize(QueryState queryState, QueryPlan queryPlan, DriverContext\n     job = new JobConf(conf, ExecDriver.class);\n     execContext = new ExecMapperContext(job);\n     //we don't use the HadoopJobExecHooks for local tasks\n-    this.jobExecHelper = new HadoopJobExecHelper(queryState, job, console, this, null);\n+    this.jobExecHelper = new HadoopJobExecHelper(job, console, this, null);\n   }\n \n   public static String now() {",
                "deletions": 1
            },
            {
                "sha": "376bab2c39f775a6d6c931f55f60c90c87e41957",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/merge/MergeFileTask.java",
                "blob_url": "https://github.com/apache/hive/blob/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/io/merge/MergeFileTask.java",
                "raw_url": "https://github.com/apache/hive/raw/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/io/merge/MergeFileTask.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/merge/MergeFileTask.java?ref=fb35bae5ae2fad93de3deef9023f52cba8e4783b",
                "patch": "@@ -65,7 +65,7 @@ public void initialize(QueryState queryState, QueryPlan queryPlan,\n       DriverContext driverContext, CompilationOpContext opContext) {\n     super.initialize(queryState, queryPlan, driverContext, opContext);\n     job = new JobConf(conf, MergeFileTask.class);\n-    jobExecHelper = new HadoopJobExecHelper(queryState, job, this.console, this, this);\n+    jobExecHelper = new HadoopJobExecHelper(job, this.console, this, this);\n   }\n \n   @Override",
                "deletions": 1
            },
            {
                "sha": "6131581b1965adccd3f49f8fd730648acffbc78e",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/stats/PartialScanTask.java",
                "blob_url": "https://github.com/apache/hive/blob/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/stats/PartialScanTask.java",
                "raw_url": "https://github.com/apache/hive/raw/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/stats/PartialScanTask.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/stats/PartialScanTask.java?ref=fb35bae5ae2fad93de3deef9023f52cba8e4783b",
                "patch": "@@ -89,7 +89,7 @@ public void initialize(QueryState queryState, QueryPlan queryPlan,\n       DriverContext driverContext, CompilationOpContext opContext) {\n     super.initialize(queryState, queryPlan, driverContext, opContext);\n     job = new JobConf(conf, PartialScanTask.class);\n-    jobExecHelper = new HadoopJobExecHelper(queryState, job, this.console, this, this);\n+    jobExecHelper = new HadoopJobExecHelper(job, this.console, this, this);\n   }\n \n   @Override",
                "deletions": 1
            },
            {
                "sha": "2d29afcbac0fcc6ce7e9554ad78d2b98127103a5",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/truncate/ColumnTruncateTask.java",
                "blob_url": "https://github.com/apache/hive/blob/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/truncate/ColumnTruncateTask.java",
                "raw_url": "https://github.com/apache/hive/raw/fb35bae5ae2fad93de3deef9023f52cba8e4783b/ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/truncate/ColumnTruncateTask.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/rcfile/truncate/ColumnTruncateTask.java?ref=fb35bae5ae2fad93de3deef9023f52cba8e4783b",
                "patch": "@@ -64,7 +64,7 @@ public void initialize(QueryState queryState, QueryPlan queryPlan,\n       DriverContext driverContext, CompilationOpContext opContext) {\n     super.initialize(queryState, queryPlan, driverContext, opContext);\n     job = new JobConf(conf, ColumnTruncateTask.class);\n-    jobExecHelper = new HadoopJobExecHelper(queryState, job, this.console, this, this);\n+    jobExecHelper = new HadoopJobExecHelper(job, this.console, this, this);\n   }\n \n   @Override",
                "deletions": 1
            }
        ],
        "patched_files": [
            "ExecDriver.java"
        ],
        "unit_tests": [
            "TestExecDriver.java"
        ]
    },
    "hive_f8e583f": {
        "repo": "hive",
        "message": "HIVE-22709: NullPointerException during query compilation after HIVE-22578 (Jason Dere, reviewed by Prasanth Jayachandran)",
        "commit": "https://github.com/apache/hive/commit/f8e583f1f80dd29f552f542e188087e204ef6dc4",
        "parent": "https://github.com/apache/hive/commit/0760b2faf41781ebeb815b3f81700e82a6b5cd2c",
        "bug_id": "hive_f8e583f",
        "file": [
            {
                "sha": "6adfb6d16cb615a76650368b628a9c8e7fd546e7",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/f8e583f1f80dd29f552f542e188087e204ef6dc4/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/f8e583f1f80dd29f552f542e188087e204ef6dc4/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java?ref=f8e583f1f80dd29f552f542e188087e204ef6dc4",
                "patch": "@@ -12464,7 +12464,7 @@ void analyzeInternal(final ASTNode astToAnalyze, Supplier<PlannerContext> pcf) t\n     boolean isCacheEnabled = isResultsCacheEnabled();\n     QueryResultsCache.LookupInfo lookupInfo = null;\n     if (isCacheEnabled && !needsTransform && queryTypeCanUseCache()) {\n-      lookupInfo = createLookupInfoForQuery(ast);\n+      lookupInfo = createLookupInfoForQuery(astToAnalyze);\n       if (checkResultsCache(lookupInfo, false)) {\n         return;\n       }\n@@ -12476,9 +12476,9 @@ void analyzeInternal(final ASTNode astToAnalyze, Supplier<PlannerContext> pcf) t\n       // If we use CBO and we may apply masking/filtering policies, we create a copy of the ast.\n       // The reason is that the generation of the operator tree may modify the initial ast,\n       // but if we need to parse for a second time, we would like to parse the unmodified ast.\n-      astForMasking = (ASTNode) ParseDriver.adaptor.dupTree(ast);\n+      astForMasking = (ASTNode) ParseDriver.adaptor.dupTree(astToAnalyze);\n     } else {\n-      astForMasking = ast;\n+      astForMasking = astToAnalyze;\n     }\n \n     // 2. Gen OP Tree from resolved Parse Tree\n@@ -12510,7 +12510,7 @@ void analyzeInternal(final ASTNode astToAnalyze, Supplier<PlannerContext> pcf) t\n     // In the case that row or column masking/filtering was required, we do not support caching.\n     // TODO: Enable caching for queries with masking/filtering\n     if (isCacheEnabled && needsTransform && !usesMasking && queryTypeCanUseCache()) {\n-      lookupInfo = createLookupInfoForQuery(ast);\n+      lookupInfo = createLookupInfoForQuery(astToAnalyze);\n       if (checkResultsCache(lookupInfo, false)) {\n         return;\n       }",
                "deletions": 4
            },
            {
                "sha": "18118f61b819468f531836f9a136c5913c2c58e0",
                "filename": "ql/src/test/queries/clientpositive/results_cache_with_auth.q",
                "blob_url": "https://github.com/apache/hive/blob/f8e583f1f80dd29f552f542e188087e204ef6dc4/ql/src/test/queries/clientpositive/results_cache_with_auth.q",
                "raw_url": "https://github.com/apache/hive/raw/f8e583f1f80dd29f552f542e188087e204ef6dc4/ql/src/test/queries/clientpositive/results_cache_with_auth.q",
                "status": "added",
                "changes": 29,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/results_cache_with_auth.q?ref=f8e583f1f80dd29f552f542e188087e204ef6dc4",
                "patch": "@@ -0,0 +1,29 @@\n+\n+-- Setup results cache\n+set hive.compute.query.using.stats=false;\n+set hive.query.results.cache.enabled=true;\n+set hive.query.results.cache.nontransactional.tables.enabled=true;\n+\n+-- Setup auth\n+set hive.test.authz.sstd.hs2.mode=true;\n+set hive.security.authorization.manager=org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;\n+set hive.security.authenticator.manager=org.apache.hadoop.hive.ql.security.SessionStateConfigUserAuthenticator;\n+set hive.security.authorization.enabled=true;\n+\n+create table results_cache_with_auth_t1 (c1 string);\n+insert into results_cache_with_auth_t1 values ('abc');\n+\n+explain\n+select count(*) from results_cache_with_auth_t1;\n+\n+select count(*) from results_cache_with_auth_t1;\n+\n+set test.comment=\"Cache should be used for this query\";\n+set test.comment;\n+explain\n+select count(*) from results_cache_with_auth_t1;\n+\n+select count(*) from results_cache_with_auth_t1;\n+\n+set hive.security.authorization.enabled=false;\n+drop table results_cache_with_auth_t1;",
                "deletions": 0
            },
            {
                "sha": "a0f9a8e20efa1603a1af5d1f09fcc545fb23c0de",
                "filename": "ql/src/test/results/clientpositive/results_cache_with_auth.q.out",
                "blob_url": "https://github.com/apache/hive/blob/f8e583f1f80dd29f552f542e188087e204ef6dc4/ql/src/test/results/clientpositive/results_cache_with_auth.q.out",
                "raw_url": "https://github.com/apache/hive/raw/f8e583f1f80dd29f552f542e188087e204ef6dc4/ql/src/test/results/clientpositive/results_cache_with_auth.q.out",
                "status": "added",
                "changes": 120,
                "additions": 120,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/results_cache_with_auth.q.out?ref=f8e583f1f80dd29f552f542e188087e204ef6dc4",
                "patch": "@@ -0,0 +1,120 @@\n+PREHOOK: query: create table results_cache_with_auth_t1 (c1 string)\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@results_cache_with_auth_t1\n+POSTHOOK: query: create table results_cache_with_auth_t1 (c1 string)\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@results_cache_with_auth_t1\n+PREHOOK: query: insert into results_cache_with_auth_t1 values ('abc')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@results_cache_with_auth_t1\n+POSTHOOK: query: insert into results_cache_with_auth_t1 values ('abc')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@results_cache_with_auth_t1\n+POSTHOOK: Lineage: results_cache_with_auth_t1.c1 SCRIPT []\n+PREHOOK: query: explain\n+select count(*) from results_cache_with_auth_t1\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@results_cache_with_auth_t1\n+#### A masked pattern was here ####\n+POSTHOOK: query: explain\n+select count(*) from results_cache_with_auth_t1\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@results_cache_with_auth_t1\n+#### A masked pattern was here ####\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: results_cache_with_auth_t1\n+            Statistics: Num rows: 1 Data size: 3 Basic stats: COMPLETE Column stats: COMPLETE\n+            Select Operator\n+              Statistics: Num rows: 1 Data size: 3 Basic stats: COMPLETE Column stats: COMPLETE\n+              Group By Operator\n+                aggregations: count()\n+                minReductionHashAggr: 0.99\n+                mode: hash\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\n+                Reduce Output Operator\n+                  null sort order: \n+                  sort order: \n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\n+                  value expressions: _col0 (type: bigint)\n+      Execution mode: vectorized\n+      Reduce Operator Tree:\n+        Group By Operator\n+          aggregations: count(VALUE._col0)\n+          mode: mergepartial\n+          outputColumnNames: _col0\n+          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\n+          File Output Operator\n+            compressed: false\n+            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\n+            table:\n+                input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+PREHOOK: query: select count(*) from results_cache_with_auth_t1\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@results_cache_with_auth_t1\n+#### A masked pattern was here ####\n+POSTHOOK: query: select count(*) from results_cache_with_auth_t1\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@results_cache_with_auth_t1\n+#### A masked pattern was here ####\n+1\n+test.comment=\"Cache should be used for this query\"\n+PREHOOK: query: explain\n+select count(*) from results_cache_with_auth_t1\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@results_cache_with_auth_t1\n+#### A masked pattern was here ####\n+POSTHOOK: query: explain\n+select count(*) from results_cache_with_auth_t1\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@results_cache_with_auth_t1\n+#### A masked pattern was here ####\n+STAGE DEPENDENCIES:\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+      Cached Query Result: true\n+\n+PREHOOK: query: select count(*) from results_cache_with_auth_t1\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@results_cache_with_auth_t1\n+#### A masked pattern was here ####\n+POSTHOOK: query: select count(*) from results_cache_with_auth_t1\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@results_cache_with_auth_t1\n+#### A masked pattern was here ####\n+1\n+PREHOOK: query: drop table results_cache_with_auth_t1\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@results_cache_with_auth_t1\n+PREHOOK: Output: default@results_cache_with_auth_t1\n+POSTHOOK: query: drop table results_cache_with_auth_t1\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@results_cache_with_auth_t1\n+POSTHOOK: Output: default@results_cache_with_auth_t1",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SemanticAnalyzer.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzer.java"
        ]
    },
    "hive_221dbe0": {
        "repo": "hive",
        "message": "HIVE-20038: Update queries on non-bucketed + partitioned tables throws NPE (Prasanth Jayachandran reviewed by Gopal V)",
        "commit": "https://github.com/apache/hive/commit/221dbe085950e198d0766d60d6b00a70b30e5935",
        "parent": "https://github.com/apache/hive/commit/b122aea4ec8775c158fff975ffa472be7bfc0711",
        "bug_id": "hive_221dbe0",
        "file": [
            {
                "sha": "949a9e84a73bd474523d713f1a895aa72843cbc4",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java",
                "blob_url": "https://github.com/apache/hive/blob/221dbe085950e198d0766d60d6b00a70b30e5935/ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java",
                "raw_url": "https://github.com/apache/hive/raw/221dbe085950e198d0766d60d6b00a70b30e5935/ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java?ref=221dbe085950e198d0766d60d6b00a70b30e5935",
                "patch": "@@ -224,7 +224,9 @@ public void closeWriters(boolean abort) throws HiveException {\n     private void commit(FileSystem fs, List<Path> commitPaths) throws HiveException {\n       for (int idx = 0; idx < outPaths.length; ++idx) {\n         try {\n-          commitOneOutPath(idx, fs, commitPaths);\n+          if (outPaths[idx] != null) {\n+            commitOneOutPath(idx, fs, commitPaths);\n+          }\n         } catch (IOException e) {\n           throw new HiveException(\"Unable to commit output from: \" +\n               outPaths[idx] + \" to: \" + finalPaths[idx], e);",
                "deletions": 1
            },
            {
                "sha": "bbe9d5a58773a0aeca7d090450805102a2df4c95",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java",
                "blob_url": "https://github.com/apache/hive/blob/221dbe085950e198d0766d60d6b00a70b30e5935/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java",
                "raw_url": "https://github.com/apache/hive/raw/221dbe085950e198d0766d60d6b00a70b30e5935/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java",
                "status": "modified",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java?ref=221dbe085950e198d0766d60d6b00a70b30e5935",
                "patch": "@@ -184,6 +184,47 @@ public void testNoBuckets() throws Exception {\n     assertExpectedFileSet(expectedFiles, getWarehouseDir() + \"/nobuckets\");\n   }\n \n+  @Test\n+  public void testNoBucketsDP() throws Exception {\n+    hiveConf.setVar(HiveConf.ConfVars.DYNAMICPARTITIONINGMODE, \"nonstrict\");\n+    int[][] sourceVals1 = {{0,0,0},{3,3,3}};\n+    int[][] sourceVals2 = {{1,1,1},{2,2,2}};\n+    int[][] sourceVals3 = {{3,3,3},{4,4,4}};\n+    int[][] sourceVals4 = {{5,5,5},{6,6,6}};\n+    runStatementOnDriver(\"drop table if exists tmp\");\n+    runStatementOnDriver(\"create table tmp (c1 integer, c2 integer) partitioned by (c3 integer) stored as orc \" +\n+      \"tblproperties('transactional'='false')\");\n+    runStatementOnDriver(\"insert into tmp \" + makeValuesClause(sourceVals1));\n+    runStatementOnDriver(\"insert into tmp \" + makeValuesClause(sourceVals2));\n+    runStatementOnDriver(\"insert into tmp \" + makeValuesClause(sourceVals3));\n+    runStatementOnDriver(\"insert into tmp \" + makeValuesClause(sourceVals4));\n+    runStatementOnDriver(\"drop table if exists nobuckets\");\n+    runStatementOnDriver(\"create table nobuckets (c1 integer, c2 integer) partitioned by (c3 integer) stored \" +\n+      \"as orc tblproperties('transactional'='true', 'transactional_properties'='default')\");\n+    String stmt = \"insert into nobuckets partition(c3) select * from tmp\";\n+    runStatementOnDriver(stmt);\n+    List<String> rs = runStatementOnDriver(\n+      \"select ROW__ID, c1, c2, c3, INPUT__FILE__NAME from nobuckets order by ROW__ID\");\n+    Assert.assertEquals(\"\", 8, rs.size());\n+    LOG.warn(\"after insert\");\n+    for(String s : rs) {\n+      LOG.warn(s);\n+    }\n+\n+    rs = runStatementOnDriver(\n+      \"select * from nobuckets where c2 in (0,3)\");\n+    Assert.assertEquals(3, rs.size());\n+    runStatementOnDriver(\"update nobuckets set c2 = 17 where c2 in(0,3)\");\n+    rs = runStatementOnDriver(\"select ROW__ID, c1, c2, c3, INPUT__FILE__NAME from nobuckets order by INPUT__FILE__NAME, ROW__ID\");\n+    LOG.warn(\"after update\");\n+    for(String s : rs) {\n+      LOG.warn(s);\n+    }\n+    rs = runStatementOnDriver(\n+      \"select * from nobuckets where c2=17\");\n+    Assert.assertEquals(3, rs.size());\n+  }\n+\n   /**\n    * See CTAS tests in TestAcidOnTez\n    */",
                "deletions": 0
            }
        ],
        "patched_files": [
            "FileSinkOperator.java"
        ],
        "unit_tests": [
            "TestTxnNoBuckets.java",
            "TestFileSinkOperator.java"
        ]
    },
    "hive_d9fae04": {
        "repo": "hive",
        "message": "HIVE-19130: NPE is thrown when REPL LOAD applied drop partition event (Sankar Hariappan, reviewed by Mahesh Kumar Behera, Thejas M Nair)",
        "commit": "https://github.com/apache/hive/commit/d9fae049305e20ec8a72e581a2fc938028523402",
        "parent": "https://github.com/apache/hive/commit/244ca8e5c3192acd017d691ccdbaf0fa06c9fe39",
        "bug_id": "hive_d9fae04",
        "file": [
            {
                "sha": "70e1aa7f3aaa0d4e95ffefae47ad891f405a9637",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java",
                "blob_url": "https://github.com/apache/hive/blob/d9fae049305e20ec8a72e581a2fc938028523402/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java",
                "raw_url": "https://github.com/apache/hive/raw/d9fae049305e20ec8a72e581a2fc938028523402/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java",
                "status": "modified",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java?ref=d9fae049305e20ec8a72e581a2fc938028523402",
                "patch": "@@ -620,4 +620,59 @@ public void testReplLoadFromSourceUsingWithClause() throws Throwable {\n             .run(\"show functions like '\" + replicatedDbName + \"*'\")\n             .verifyResult(null);\n   }\n+\n+  @Test\n+  public void testIncrementalReplWithEventsBatchHavingDropCreateTable() throws Throwable {\n+    // Bootstrap dump with empty db\n+    WarehouseInstance.Tuple bootstrapTuple = primary.dump(primaryDbName, null);\n+\n+    // Bootstrap load in replica\n+    replica.load(replicatedDbName, bootstrapTuple.dumpLocation)\n+            .status(replicatedDbName)\n+            .verifyResult(bootstrapTuple.lastReplicationId);\n+\n+    // First incremental dump\n+    WarehouseInstance.Tuple firstIncremental = primary.run(\"use \" + primaryDbName)\n+            .run(\"create table table1 (i int)\")\n+            .run(\"create table table2 (id int) partitioned by (country string)\")\n+            .run(\"insert into table1 values (1)\")\n+            .run(\"insert into table2 partition(country='india') values(1)\")\n+            .dump(primaryDbName, bootstrapTuple.lastReplicationId);\n+\n+    // Second incremental dump\n+    WarehouseInstance.Tuple secondIncremental = primary.run(\"use \" + primaryDbName)\n+            .run(\"drop table table1\")\n+            .run(\"drop table table2\")\n+            .run(\"create table table2 (id int) partitioned by (country string)\")\n+            .run(\"alter table table2 add partition(country='india')\")\n+            .run(\"alter table table2 drop partition(country='india')\")\n+            .run(\"insert into table2 partition(country='us') values(2)\")\n+            .run(\"create table table1 (i int)\")\n+            .run(\"insert into table1 values (2)\")\n+            .dump(primaryDbName, firstIncremental.lastReplicationId);\n+\n+    // First incremental load\n+    replica.load(replicatedDbName, firstIncremental.dumpLocation)\n+            .status(replicatedDbName)\n+            .verifyResult(firstIncremental.lastReplicationId)\n+            .run(\"use \" + replicatedDbName)\n+            .run(\"show tables\")\n+            .verifyResults(new String[] {\"table1\", \"table2\"})\n+            .run(\"select * from table1\")\n+            .verifyResults(new String[] {\"1\"})\n+            .run(\"select id from table2 order by id\")\n+            .verifyResults(new String[] {\"1\"});\n+\n+    // Second incremental load\n+    replica.load(replicatedDbName, secondIncremental.dumpLocation)\n+            .status(replicatedDbName)\n+            .verifyResult(secondIncremental.lastReplicationId)\n+            .run(\"use \" + replicatedDbName)\n+            .run(\"show tables\")\n+            .verifyResults(new String[] {\"table1\", \"table2\"})\n+            .run(\"select * from table1\")\n+            .verifyResults(new String[] {\"2\"})\n+            .run(\"select id from table2 order by id\")\n+            .verifyResults(new String[] {\"2\"});\n+  }\n }",
                "deletions": 0
            },
            {
                "sha": "accdc1ff0824dd6aac9827e8dbe7ea4b7c56e2f4",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java",
                "blob_url": "https://github.com/apache/hive/blob/d9fae049305e20ec8a72e581a2fc938028523402/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java",
                "raw_url": "https://github.com/apache/hive/raw/d9fae049305e20ec8a72e581a2fc938028523402/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java?ref=d9fae049305e20ec8a72e581a2fc938028523402",
                "patch": "@@ -231,6 +231,11 @@ WarehouseInstance load(String replicatedDbName, String dumpLocation, List<String\n     return run(replLoadCmd);\n   }\n \n+  WarehouseInstance status(String replicatedDbName) throws Throwable {\n+    String replStatusCmd = \"REPL STATUS \" + replicatedDbName;\n+    return run(replStatusCmd);\n+  }\n+\n   WarehouseInstance status(String replicatedDbName, List<String> withClauseOptions) throws Throwable {\n     String replStatusCmd = \"REPL STATUS \" + replicatedDbName;\n     if (!withClauseOptions.isEmpty()) {",
                "deletions": 0
            },
            {
                "sha": "61a04326ac51d6423001eb8cfbe6707decf5416a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java",
                "blob_url": "https://github.com/apache/hive/blob/d9fae049305e20ec8a72e581a2fc938028523402/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java",
                "raw_url": "https://github.com/apache/hive/raw/d9fae049305e20ec8a72e581a2fc938028523402/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java?ref=d9fae049305e20ec8a72e581a2fc938028523402",
                "patch": "@@ -4522,6 +4522,12 @@ private void dropPartitions(Hive db, Table tbl, DropTableDesc dropTbl) throws Hi\n       // for dropping. Thus, we need a way to push this filter (replicationSpec.allowEventReplacementInto)\n       // to the  metastore to allow it to do drop a partition or not, depending on a Predicate on the\n       // parameter key values.\n+\n+      if (tbl == null) {\n+        // If table is missing, then partitions are also would've been dropped. Just no-op.\n+        return;\n+      }\n+\n       for (DropTableDesc.PartSpec partSpec : dropTbl.getPartSpecs()){\n         List<Partition> partitions = new ArrayList<>();\n         try {\n@@ -4551,7 +4557,7 @@ private void dropPartitions(Hive db, Table tbl, DropTableDesc dropTbl) throws Hi\n       console.printInfo(\"Dropped the partition \" + partition.getName());\n       // We have already locked the table, don't lock the partitions.\n       addIfAbsentByName(new WriteEntity(partition, WriteEntity.WriteType.DDL_NO_LOCK));\n-    };\n+    }\n   }\n \n   private void dropTable(Hive db, Table tbl, DropTableDesc dropTbl) throws HiveException {",
                "deletions": 1
            },
            {
                "sha": "0d2fafb83b9bc008958cb11c5feb88c884e10425",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java",
                "blob_url": "https://github.com/apache/hive/blob/d9fae049305e20ec8a72e581a2fc938028523402/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java",
                "raw_url": "https://github.com/apache/hive/raw/d9fae049305e20ec8a72e581a2fc938028523402/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/EximUtil.java?ref=d9fae049305e20ec8a72e581a2fc938028523402",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.hadoop.hive.ql.metadata.Hive;\n import org.apache.hadoop.hive.ql.metadata.Partition;\n import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.parse.repl.DumpType;\n import org.apache.hadoop.hive.ql.parse.repl.dump.Utils;\n import org.apache.hadoop.hive.ql.parse.repl.dump.io.DBSerializer;\n import org.apache.hadoop.hive.ql.parse.repl.dump.io.JsonWriter;\n@@ -92,6 +93,7 @@\n     private List<Task<? extends Serializable>> tasks;\n     private Logger LOG;\n     private Context ctx;\n+    private DumpType eventType = DumpType.EVENT_UNKNOWN;\n \n     public HiveConf getConf() {\n       return conf;\n@@ -121,6 +123,14 @@ public Context getCtx() {\n       return ctx;\n     }\n \n+    public void setEventType(DumpType eventType) {\n+      this.eventType = eventType;\n+    }\n+\n+    public DumpType getEventType() {\n+      return eventType;\n+    }\n+\n     public SemanticAnalyzerWrapperContext(HiveConf conf, Hive db,\n                                           HashSet<ReadEntity> inputs,\n                                           HashSet<WriteEntity> outputs,",
                "deletions": 0
            },
            {
                "sha": "832f660079e44785a240aa938287ed2ea770f98d",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/ImportSemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/d9fae049305e20ec8a72e581a2fc938028523402/ql/src/java/org/apache/hadoop/hive/ql/parse/ImportSemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/d9fae049305e20ec8a72e581a2fc938028523402/ql/src/java/org/apache/hadoop/hive/ql/parse/ImportSemanticAnalyzer.java",
                "status": "modified",
                "changes": 31,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/ImportSemanticAnalyzer.java?ref=d9fae049305e20ec8a72e581a2fc938028523402",
                "patch": "@@ -47,12 +47,14 @@\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n import org.apache.hadoop.hive.ql.metadata.InvalidTableException;\n import org.apache.hadoop.hive.ql.metadata.Table;\n+import org.apache.hadoop.hive.ql.parse.repl.DumpType;\n import org.apache.hadoop.hive.ql.parse.repl.load.MetaData;\n import org.apache.hadoop.hive.ql.parse.repl.load.UpdatedMetaDataTracker;\n import org.apache.hadoop.hive.ql.plan.AddPartitionDesc;\n import org.apache.hadoop.hive.ql.plan.CopyWork;\n import org.apache.hadoop.hive.ql.plan.ImportTableDesc;\n import org.apache.hadoop.hive.ql.plan.DDLWork;\n+import org.apache.hadoop.hive.ql.plan.DropTableDesc;\n import org.apache.hadoop.hive.ql.plan.LoadTableDesc;\n import org.apache.hadoop.hive.ql.plan.LoadTableDesc.LoadFileType;\n import org.apache.hadoop.hive.ql.plan.MoveWork;\n@@ -438,6 +440,13 @@ private static boolean isAcid(Long writeId) {\n     return tableDesc.getCreateTableTask(x.getInputs(), x.getOutputs(), x.getConf());\n   }\n \n+  private static Task<?> dropTableTask(Table table, EximUtil.SemanticAnalyzerWrapperContext x,\n+                                       ReplicationSpec replicationSpec) {\n+    DropTableDesc dropTblDesc = new DropTableDesc(table.getTableName(), table.getTableType(),\n+            true, false, replicationSpec);\n+    return TaskFactory.get(new DDLWork(x.getInputs(), x.getOutputs(), dropTblDesc), x.getConf());\n+  }\n+\n   private static Task<? extends Serializable> alterTableTask(ImportTableDesc tableDesc,\n       EximUtil.SemanticAnalyzerWrapperContext x, ReplicationSpec replicationSpec) {\n     tableDesc.setReplaceMode(true);\n@@ -912,7 +921,7 @@ private static void createReplImportTasks(\n       UpdatedMetaDataTracker updatedMetadata)\n       throws HiveException, URISyntaxException, IOException, MetaException {\n \n-    Task<?> dr = null;\n+    Task<?> dropTblTask = null;\n     WriteEntity.WriteType lockType = WriteEntity.WriteType.DDL_NO_LOCK;\n \n     // Normally, on import, trying to create a table or a partition in a db that does not yet exist\n@@ -934,6 +943,15 @@ private static void createReplImportTasks(\n                 tblDesc.getDatabaseName(), tblDesc.getTableName());\n         return;\n       }\n+\n+      // If the table exists and we found a valid create table event, then need to drop the table first\n+      // and then create it. This case is possible if the event sequence is drop_table(t1) -> create_table(t1).\n+      // We need to drop here to handle the case where the previous incremental load created the table but\n+      // didn't set the last repl ID due to some failure.\n+      if (x.getEventType() == DumpType.EVENT_CREATE_TABLE) {\n+        dropTblTask = dropTableTask(table, x, replicationSpec);\n+        table = null;\n+      }\n     } else {\n       // If table doesn't exist, allow creating a new one only if the database state is older than the update.\n       if ((parentDb != null) && (!replicationSpec.allowReplacementInto(parentDb.getParameters()))) {\n@@ -1000,8 +1018,15 @@ private static void createReplImportTasks(\n           t.addDependentTask(loadTable(fromURI, table, true, new Path(tblDesc.getLocation()), replicationSpec, x, writeId, stmtId, isSourceMm));\n         }\n       }\n-      // Simply create\n-      x.getTasks().add(t);\n+\n+      if (dropTblTask != null) {\n+        // Drop first and then create\n+        dropTblTask.addDependentTask(t);\n+        x.getTasks().add(dropTblTask);\n+      } else {\n+        // Simply create\n+        x.getTasks().add(t);\n+      }\n     } else {\n       // Table existed, and is okay to replicate into, not dropping and re-creating.\n       if (table.isPartitioned()) {",
                "deletions": 3
            },
            {
                "sha": "7f6e80a7d156d7940fe4e24481b6a8b9abd80866",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/TableHandler.java",
                "blob_url": "https://github.com/apache/hive/blob/d9fae049305e20ec8a72e581a2fc938028523402/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/TableHandler.java",
                "raw_url": "https://github.com/apache/hive/raw/d9fae049305e20ec8a72e581a2fc938028523402/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/TableHandler.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/TableHandler.java?ref=d9fae049305e20ec8a72e581a2fc938028523402",
                "patch": "@@ -36,6 +36,7 @@\n           new EximUtil.SemanticAnalyzerWrapperContext(\n               context.hiveConf, context.db, readEntitySet, writeEntitySet, importTasks, context.log,\n               context.nestedContext);\n+      x.setEventType(context.dmd.getDumpType());\n \n       // REPL LOAD is not partition level. It is always DB or table level. So, passing null for partition specs.\n       // Also, REPL LOAD doesn't support external table and hence no location set as well.",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DDLTask.java",
            "ImportSemanticAnalyzer.java",
            "TableHandler.java",
            "WarehouseInstance.java",
            "EximUtil.java"
        ],
        "unit_tests": [
            "TestEximUtil.java",
            "TestReplicationScenariosAcrossInstances.java"
        ]
    },
    "hive_2f7abcc": {
        "repo": "hive",
        "message": "HIVE-20829: JdbcStorageHandler range split throws NPE (Daniel Dai, reviewed by Thejas Nair)\n\nSigned-off-by: Thejas M Nair <thejas@hortonworks.com>",
        "commit": "https://github.com/apache/hive/commit/2f7abcc6039ca4fddda2c90d5d0184c70c663614",
        "parent": "https://github.com/apache/hive/commit/1656e1bd892bb47e50ee8352813b0dab6f230bb4",
        "bug_id": "hive_2f7abcc",
        "file": [
            {
                "sha": "14c5a777965b7158092331e06610e08b9f649b94",
                "filename": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/JdbcInputFormat.java",
                "blob_url": "https://github.com/apache/hive/blob/2f7abcc6039ca4fddda2c90d5d0184c70c663614/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/JdbcInputFormat.java",
                "raw_url": "https://github.com/apache/hive/raw/2f7abcc6039ca4fddda2c90d5d0184c70c663614/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/JdbcInputFormat.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/JdbcInputFormat.java?ref=2f7abcc6039ca4fddda2c90d5d0184c70c663614",
                "patch": "@@ -132,7 +132,7 @@\n         intervals.get(intervals.size()-1).setRight(null);\n         splits = new InputSplit[intervals.size()];\n         for (int i = 0; i < intervals.size(); i++) {\n-          splits[i] = new JdbcInputSplit(partitionColumn, intervals.get(i).getLeft(), intervals.get(i).getRight());\n+          splits[i] = new JdbcInputSplit(partitionColumn, intervals.get(i).getLeft(), intervals.get(i).getRight(), tablePaths[0]);\n         }\n       } else {\n         int numRecords = dbAccessor.getTotalNumberOfRecords(job);",
                "deletions": 1
            },
            {
                "sha": "e591413aec6c5686c97693d8227d34bed2e68ca0",
                "filename": "jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/JdbcInputSplit.java",
                "blob_url": "https://github.com/apache/hive/blob/2f7abcc6039ca4fddda2c90d5d0184c70c663614/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/JdbcInputSplit.java",
                "raw_url": "https://github.com/apache/hive/raw/2f7abcc6039ca4fddda2c90d5d0184c70c663614/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/JdbcInputSplit.java",
                "status": "modified",
                "changes": 27,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/jdbc-handler/src/main/java/org/apache/hive/storage/jdbc/JdbcInputSplit.java?ref=2f7abcc6039ca4fddda2c90d5d0184c70c663614",
                "patch": "@@ -32,7 +32,6 @@\n   private String lowerBound = null;\n   private String upperBound = null;\n \n-\n   public JdbcInputSplit() {\n     super(null, 0, 0, EMPTY_ARRAY);\n     this.limit = -1;\n@@ -51,14 +50,8 @@ public JdbcInputSplit(int limit, int offset, Path dummyPath) {\n     this.offset = offset;\n   }\n \n-  public JdbcInputSplit(int limit, int offset) {\n-    super(null, 0, 0, EMPTY_ARRAY);\n-    this.limit = limit;\n-    this.offset = offset;\n-  }\n-\n-  public JdbcInputSplit(String partitionColumn, String lowerBound, String upperBound) {\n-    super(null, 0, 0, EMPTY_ARRAY);\n+  public JdbcInputSplit(String partitionColumn, String lowerBound, String upperBound, Path dummyPath) {\n+    super(dummyPath, 0, 0, EMPTY_ARRAY);\n     this.partitionColumn = partitionColumn;\n     this.lowerBound = lowerBound;\n     this.upperBound = upperBound;\n@@ -72,7 +65,17 @@ public void write(DataOutput out) throws IOException {\n     if (partitionColumn != null) {\n       out.writeBoolean(true);\n       out.writeUTF(partitionColumn);\n+    } else {\n+      out.writeBoolean(false);\n+    }\n+    if (lowerBound != null) {\n+      out.writeBoolean(true);\n       out.writeUTF(lowerBound);\n+    } else {\n+      out.writeBoolean(false);\n+    }\n+    if (upperBound != null) {\n+      out.writeBoolean(true);\n       out.writeUTF(upperBound);\n     } else {\n       out.writeBoolean(false);\n@@ -88,7 +91,13 @@ public void readFields(DataInput in) throws IOException {\n     boolean partitionColumnExists = in.readBoolean();\n     if (partitionColumnExists) {\n       partitionColumn = in.readUTF();\n+    }\n+    boolean lowerBoundExists = in.readBoolean();\n+    if (lowerBoundExists) {\n       lowerBound = in.readUTF();\n+    }\n+    boolean upperBoundExists = in.readBoolean();\n+    if (upperBoundExists) {\n       upperBound = in.readUTF();\n     }\n   }",
                "deletions": 9
            }
        ],
        "patched_files": [
            "JdbcInputFormat.java"
        ],
        "unit_tests": [
            "TestJdbcInputFormat.java"
        ]
    },
    "hive_820db60": {
        "repo": "hive",
        "message": "HIVE-19076: Fix NPE and TApplicationException in function related HiveMetastore methods (Marta Kuczora, via Peter Vary)",
        "commit": "https://github.com/apache/hive/commit/820db608f2878dde1d9c7b3fa3fbfdb3564710d6",
        "parent": "https://github.com/apache/hive/commit/5eed779c611c7c766b69f992d76683c58b5772c9",
        "bug_id": "hive_820db60",
        "file": [
            {
                "sha": "65ca63c61f4cc7dfece9b656668f9f079f5ad97c",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 49,
                "additions": 47,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=820db608f2878dde1d9c7b3fa3fbfdb3564710d6",
                "patch": "@@ -6767,13 +6767,28 @@ private static MetaException newMetaException(Exception e) {\n     }\n \n     private void validateFunctionInfo(Function func) throws InvalidObjectException, MetaException {\n+      if (func == null) {\n+        throw new MetaException(\"Function cannot be null.\");\n+      }\n+      if (func.getFunctionName() == null) {\n+        throw new MetaException(\"Function name cannot be null.\");\n+      }\n+      if (func.getDbName() == null) {\n+        throw new MetaException(\"Database name in Function cannot be null.\");\n+      }\n       if (!MetaStoreUtils.validateName(func.getFunctionName(), null)) {\n         throw new InvalidObjectException(func.getFunctionName() + \" is not a valid object name\");\n       }\n       String className = func.getClassName();\n       if (className == null) {\n         throw new InvalidObjectException(\"Function class name cannot be null\");\n       }\n+      if (func.getOwnerType() == null) {\n+        throw new MetaException(\"Function owner type cannot be null.\");\n+      }\n+      if (func.getFunctionType() == null) {\n+        throw new MetaException(\"Function type cannot be null.\");\n+      }\n     }\n \n     @Override\n@@ -6826,11 +6841,17 @@ public void create_function(Function func) throws TException {\n     public void drop_function(String dbName, String funcName)\n         throws NoSuchObjectException, MetaException,\n         InvalidObjectException, InvalidInputException {\n+      if (funcName == null) {\n+        throw new MetaException(\"Function name cannot be null.\");\n+      }\n       boolean success = false;\n       Function func = null;\n       RawStore ms = getMS();\n       Map<String, String> transactionalListenerResponses = Collections.emptyMap();\n       String[] parsedDbName = parseDbName(dbName, conf);\n+      if (parsedDbName[DB_NAME] == null) {\n+        throw new MetaException(\"Database name cannot be null.\");\n+      }\n       try {\n         ms.openTransaction();\n         func = ms.getFunction(parsedDbName[CAT_NAME], parsedDbName[DB_NAME], funcName);\n@@ -6876,21 +6897,42 @@ public void drop_function(String dbName, String funcName)\n \n     @Override\n     public void alter_function(String dbName, String funcName, Function newFunc) throws TException {\n-      validateFunctionInfo(newFunc);\n+      String[] parsedDbName = parseDbName(dbName, conf);\n+      validateForAlterFunction(parsedDbName[DB_NAME], funcName, newFunc);\n       boolean success = false;\n       RawStore ms = getMS();\n-      String[] parsedDbName = parseDbName(dbName, conf);\n       try {\n         ms.openTransaction();\n         ms.alterFunction(parsedDbName[CAT_NAME], parsedDbName[DB_NAME], funcName, newFunc);\n         success = ms.commitTransaction();\n+      } catch (InvalidObjectException e) {\n+        // Throwing MetaException instead of InvalidObjectException as the InvalidObjectException\n+        // is not defined for the alter_function method in the Thrift interface.\n+        throwMetaException(e);\n       } finally {\n         if (!success) {\n           ms.rollbackTransaction();\n         }\n       }\n     }\n \n+    private void validateForAlterFunction(String dbName, String funcName, Function newFunc)\n+        throws MetaException {\n+      if (dbName == null || funcName == null) {\n+        throw new MetaException(\"Database and function name cannot be null.\");\n+      }\n+      try {\n+        validateFunctionInfo(newFunc);\n+      } catch (InvalidObjectException e) {\n+        // The validateFunctionInfo method is used by the create and alter function methods as well\n+        // and it can throw InvalidObjectException. But the InvalidObjectException is not defined\n+        // for the alter_function method in the Thrift interface, therefore a TApplicationException\n+        // will occur at the caller side. Re-throwing the InvalidObjectException as MetaException\n+        // would eliminate the TApplicationException at caller side.\n+        throw newMetaException(e);\n+      }\n+    }\n+\n     @Override\n     public List<String> get_functions(String dbName, String pattern)\n         throws MetaException {\n@@ -6938,6 +6980,9 @@ public GetAllFunctionsResponse get_all_functions()\n \n     @Override\n     public Function get_function(String dbName, String funcName) throws TException {\n+      if (dbName == null || funcName == null) {\n+        throw new MetaException(\"Database and function name cannot be null.\");\n+      }\n       startFunction(\"get_function\", \": \" + dbName + \".\" + funcName);\n \n       RawStore ms = getMS();",
                "deletions": 2
            },
            {
                "sha": "867771849b5f3ef2cf446cc3bca1a59f5f19a3e2",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "blob_url": "https://github.com/apache/hive/blob/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "raw_url": "https://github.com/apache/hive/raw/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java?ref=820db608f2878dde1d9c7b3fa3fbfdb3564710d6",
                "patch": "@@ -2668,6 +2668,9 @@ public boolean isPartitionMarkedForEvent(String catName, String db_name, String\n \n   @Override\n   public void createFunction(Function func) throws TException {\n+    if (func == null) {\n+      throw new MetaException(\"Function cannot be null.\");\n+    }\n     if (!func.isSetCatName()) func.setCatName(getDefaultCatalog(conf));\n     client.create_function(func);\n   }",
                "deletions": 0
            },
            {
                "sha": "b5705f90a072b2f5da7a04bdf68ea81cf680f5b0",
                "filename": "standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestFunctions.java",
                "blob_url": "https://github.com/apache/hive/blob/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestFunctions.java",
                "raw_url": "https://github.com/apache/hive/raw/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestFunctions.java",
                "status": "modified",
                "changes": 258,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestFunctions.java?ref=820db608f2878dde1d9c7b3fa3fbfdb3564710d6",
                "patch": "@@ -37,9 +37,7 @@\n import org.apache.hadoop.hive.metastore.client.builder.DatabaseBuilder;\n import org.apache.hadoop.hive.metastore.client.builder.FunctionBuilder;\n import org.apache.hadoop.hive.metastore.minihms.AbstractMetaStoreService;\n-import org.apache.thrift.TApplicationException;\n import org.apache.thrift.TException;\n-import org.apache.thrift.transport.TTransportException;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -208,74 +206,39 @@ public void testCreateFunctionEmptyName() throws Exception {\n     client.createFunction(function);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n+  public void testCreateFunctionNullFunction() throws Exception {\n+    client.createFunction(null);\n+  }\n+\n+  @Test(expected = MetaException.class)\n   public void testCreateFunctionNullFunctionName() throws Exception {\n     Function function = testFunctions[0];\n     function.setFunctionName(null);\n-\n-    try {\n-      client.createFunction(function);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.createFunction(function);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testCreateFunctionNullDatabaseName() throws Exception {\n     Function function = testFunctions[0];\n     function.setDbName(null);\n-\n-    try {\n-      client.createFunction(function);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.createFunction(function);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testCreateFunctionNullOwnerType() throws Exception {\n     Function function = testFunctions[0];\n     function.setFunctionName(\"test_function_2\");\n     function.setOwnerType(null);\n-\n-    try {\n-      client.createFunction(function);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.createFunction(function);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testCreateFunctionNullFunctionType() throws Exception {\n     Function function = testFunctions[0];\n     function.setFunctionName(\"test_function_2\");\n     function.setFunctionType(null);\n-\n-    try {\n-      client.createFunction(function);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.createFunction(function);\n   }\n \n   @Test(expected = NoSuchObjectException.class)\n@@ -331,18 +294,9 @@ public void testGetFunctionNoSuchFunctionInThisDatabase() throws Exception {\n     client.getFunction(OTHER_DATABASE, function.getFunctionName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testGetFunctionNullDatabase() throws Exception {\n-    try {\n-      client.getFunction(null, OTHER_DATABASE);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws MetaException\n-      Assert.fail(\"Expected an NullPointerException or MetaException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (MetaException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.getFunction(null, OTHER_DATABASE);\n   }\n \n   @Test(expected = MetaException.class)\n@@ -371,32 +325,14 @@ public void testDropFunctionNoSuchFunctionInThisDatabase() throws Exception {\n     client.dropFunction(OTHER_DATABASE, function.getFunctionName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testDropFunctionNullDatabase() throws Exception {\n-    try {\n-      client.dropFunction(null, \"no_such_function\");\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.dropFunction(null, \"no_such_function\");\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testDropFunctionNullFunctionName() throws Exception {\n-    try {\n-      client.dropFunction(DEFAULT_DATABASE, null);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.dropFunction(DEFAULT_DATABASE, null);\n   }\n \n   @Test\n@@ -601,190 +537,78 @@ public void testAlterFunctionNoSuchFunctionInThisDatabase() throws Exception {\n     client.alterFunction(OTHER_DATABASE, originalFunction.getFunctionName(), newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullDatabase() throws Exception {\n     Function newFunction = getNewFunction();\n-\n-    try {\n-      client.alterFunction(null, OTHER_DATABASE, newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(null, OTHER_DATABASE, newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullFunctionName() throws Exception {\n     Function newFunction = getNewFunction();\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, null, newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, null, newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullFunction() throws Exception {\n     Function originalFunction = testFunctions[1];\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, originalFunction.getFunctionName(), null);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, originalFunction.getFunctionName(), null);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionInvalidNameInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setFunctionName(\"test_function_2;\");\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // InvalidObjectException, remote throws TApplicationException\n-      Assert.fail(\"Expected an InvalidObjectException or TApplicationException to be thrown\");\n-    } catch (InvalidObjectException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TApplicationException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionEmptyNameInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setFunctionName(\"\");\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // InvalidObjectException, remote throws TApplicationException\n-      Assert.fail(\"Expected an InvalidObjectException or TApplicationException to be thrown\");\n-    } catch (InvalidObjectException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TApplicationException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullClassInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setClassName(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // InvalidObjectException, remote throws TApplicationException\n-      Assert.fail(\"Expected an InvalidObjectException or TApplicationException to be thrown\");\n-    } catch (InvalidObjectException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TApplicationException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullFunctionNameInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setFunctionName(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullDatabaseNameInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setDbName(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullOwnerTypeInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setOwnerType(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullFunctionTypeInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setFunctionType(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNoSuchDatabaseInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setDbName(\"no_such_database\");\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // InvalidObjectException, remote throws TApplicationException\n-      Assert.fail(\"Expected an InvalidObjectException or TApplicationException to be thrown\");\n-    } catch (InvalidObjectException exception) {\n-      // Expected exception - Embedded MetaStore\n-      exception.printStackTrace();\n-    } catch (TApplicationException exception) {\n-      // Expected exception - Remote MetaStore\n-      exception.printStackTrace();\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n   @Test(expected = MetaException.class)",
                "deletions": 217
            }
        ],
        "patched_files": [
            "HiveMetaStore.java",
            "HiveMetaStoreClient.java"
        ],
        "unit_tests": [
            "TestHiveMetaStore.java",
            "TestFunctions.java"
        ]
    },
    "hive_509308f": {
        "repo": "hive",
        "message": "HIVE-16788: ODBC call SQLForeignKeys leads to NPE if you use PK arguments rather than FK arguments (Jesus Camacho Rodriguez, reviewed by Ashutosh Chauhan)",
        "commit": "https://github.com/apache/hive/commit/509308f642f4af8eb44a9fb7f0f105198df9fac6",
        "parent": "https://github.com/apache/hive/commit/8aee8d4f2b124fcfa093724b4de0a54287a8084f",
        "bug_id": "hive_509308f",
        "file": [
            {
                "sha": "4676e15942d72b0db56bedf0ff30aa60964c28d8",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "blob_url": "https://github.com/apache/hive/blob/509308f642f4af8eb44a9fb7f0f105198df9fac6/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "raw_url": "https://github.com/apache/hive/raw/509308f642f4af8eb44a9fb7f0f105198df9fac6/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java?ref=509308f642f4af8eb44a9fb7f0f105198df9fac6",
                "patch": "@@ -8539,7 +8539,17 @@ private String getPrimaryKeyConstraintName(String db_name, String tbl_name) thro\n     final String parent_tbl_name = parent_tbl_name_input;\n     final String foreign_db_name = foreign_db_name_input;\n     final String foreign_tbl_name = foreign_tbl_name_input;\n-    return new GetListHelper<SQLForeignKey>(foreign_db_name, foreign_tbl_name, allowSql, allowJdo) {\n+    final String db_name;\n+    final String tbl_name;\n+    if (foreign_tbl_name == null) {\n+      // The FK table name might be null if we are retrieving the constraint from the PK side\n+      db_name = parent_db_name_input;\n+      tbl_name = parent_tbl_name_input;\n+    } else {\n+      db_name = foreign_db_name_input;\n+      tbl_name = foreign_tbl_name_input;\n+    }\n+    return new GetListHelper<SQLForeignKey>(db_name, tbl_name, allowSql, allowJdo) {\n \n       @Override\n       protected List<SQLForeignKey> getSqlResult(GetHelper<List<SQLForeignKey>> ctx) throws MetaException {",
                "deletions": 1
            },
            {
                "sha": "b28ea7359357406fcd0ffc01a864ff572ab5f278",
                "filename": "metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java",
                "blob_url": "https://github.com/apache/hive/blob/509308f642f4af8eb44a9fb7f0f105198df9fac6/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java",
                "raw_url": "https://github.com/apache/hive/raw/509308f642f4af8eb44a9fb7f0f105198df9fac6/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java",
                "status": "modified",
                "changes": 49,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java?ref=509308f642f4af8eb44a9fb7f0f105198df9fac6",
                "patch": "@@ -63,6 +63,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.ImmutableList;\n+\n import javax.jdo.Query;\n \n public class TestObjectStore {\n@@ -204,22 +206,63 @@ public void testDatabaseOps() throws MetaException, InvalidObjectException, NoSu\n   public void testTableOps() throws MetaException, InvalidObjectException, NoSuchObjectException, InvalidInputException {\n     Database db1 = new Database(DB1, \"description\", \"locationurl\", null);\n     objectStore.createDatabase(db1);\n-    StorageDescriptor sd = new StorageDescriptor(null, \"location\", null, null, false, 0, new SerDeInfo(\"SerDeName\", \"serializationLib\", null), null, null, null);\n+    StorageDescriptor sd1 = new StorageDescriptor(ImmutableList.of(new FieldSchema(\"pk_col\", \"double\", null)),\n+            \"location\", null, null, false, 0, new SerDeInfo(\"SerDeName\", \"serializationLib\", null),\n+            null, null, null);\n     HashMap<String,String> params = new HashMap<String,String>();\n     params.put(\"EXTERNAL\", \"false\");\n-    Table tbl1 = new Table(TABLE1, DB1, \"owner\", 1, 2, 3, sd, null, params, null, null, \"MANAGED_TABLE\");\n+    Table tbl1 = new Table(TABLE1, DB1, \"owner\", 1, 2, 3, sd1, null, params, null, null, \"MANAGED_TABLE\");\n     objectStore.createTable(tbl1);\n \n     List<String> tables = objectStore.getAllTables(DB1);\n     Assert.assertEquals(1, tables.size());\n     Assert.assertEquals(TABLE1, tables.get(0));\n \n-    Table newTbl1 = new Table(\"new\" + TABLE1, DB1, \"owner\", 1, 2, 3, sd, null, params, null, null, \"MANAGED_TABLE\");\n+    StorageDescriptor sd2 = new StorageDescriptor(ImmutableList.of(new FieldSchema(\"fk_col\", \"double\", null)),\n+            \"location\", null, null, false, 0, new SerDeInfo(\"SerDeName\", \"serializationLib\", null),\n+            null, null, null);\n+    Table newTbl1 = new Table(\"new\" + TABLE1, DB1, \"owner\", 1, 2, 3, sd2, null, params, null, null, \"MANAGED_TABLE\");\n     objectStore.alterTable(DB1, TABLE1, newTbl1);\n     tables = objectStore.getTables(DB1, \"new*\");\n     Assert.assertEquals(1, tables.size());\n     Assert.assertEquals(\"new\" + TABLE1, tables.get(0));\n \n+    objectStore.createTable(tbl1);\n+    tables = objectStore.getAllTables(DB1);\n+    Assert.assertEquals(2, tables.size());\n+\n+    List<SQLForeignKey> foreignKeys = objectStore.getForeignKeys(DB1, TABLE1, null, null);\n+    Assert.assertEquals(0, foreignKeys.size());\n+\n+    SQLPrimaryKey pk = new SQLPrimaryKey(DB1, TABLE1, \"pk_col\", 1,\n+            \"pk_const_1\", false, false, false);\n+    objectStore.addPrimaryKeys(ImmutableList.of(pk));\n+    SQLForeignKey fk = new SQLForeignKey(DB1, TABLE1, \"pk_col\",\n+            DB1, \"new\" + TABLE1, \"fk_col\", 1,\n+            0, 0, \"fk_const_1\", \"pk_const_1\", false, false, false);\n+    objectStore.addForeignKeys(ImmutableList.of(fk));\n+\n+    // Retrieve from PK side\n+    foreignKeys = objectStore.getForeignKeys(null, null, DB1, \"new\" + TABLE1);\n+    Assert.assertEquals(1, foreignKeys.size());\n+\n+    List<SQLForeignKey> fks = objectStore.getForeignKeys(null, null, DB1, \"new\" + TABLE1);\n+    if (fks != null) {\n+      for (SQLForeignKey fkcol : fks) {\n+        objectStore.dropConstraint(fkcol.getFktable_db(), fkcol.getFktable_name(), fkcol.getFk_name());\n+      }\n+    }\n+    // Retrieve from FK side\n+    foreignKeys = objectStore.getForeignKeys(DB1, TABLE1, null, null);\n+    Assert.assertEquals(0, foreignKeys.size());\n+    // Retrieve from PK side\n+    foreignKeys = objectStore.getForeignKeys(null, null, DB1, \"new\" + TABLE1);\n+    Assert.assertEquals(0, foreignKeys.size());\n+\n+    objectStore.dropTable(DB1, TABLE1);\n+    tables = objectStore.getAllTables(DB1);\n+    Assert.assertEquals(1, tables.size());\n+\n     objectStore.dropTable(DB1, \"new\" + TABLE1);\n     tables = objectStore.getAllTables(DB1);\n     Assert.assertEquals(0, tables.size());",
                "deletions": 3
            }
        ],
        "patched_files": [
            "ObjectStore.java"
        ],
        "unit_tests": [
            "TestObjectStore.java"
        ]
    },
    "hive_8b2cd2a": {
        "repo": "hive",
        "message": "HIVE-11380: NPE when FileSinkOperator is not initialized (Yongzhi Chen, reviewed by Sergio Pena)",
        "commit": "https://github.com/apache/hive/commit/8b2cd2abf2a32e42d24e60f1ac7a026af783dcbd",
        "parent": "https://github.com/apache/hive/commit/251991568c5e9e38b3480e9ef5dc972b9da112db",
        "bug_id": "hive_8b2cd2a",
        "file": [
            {
                "sha": "2604d5d82fd5b4b67e6c7cb048c9840c4837d4b2",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java",
                "blob_url": "https://github.com/apache/hive/blob/8b2cd2abf2a32e42d24e60f1ac7a026af783dcbd/ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java",
                "raw_url": "https://github.com/apache/hive/raw/8b2cd2abf2a32e42d24e60f1ac7a026af783dcbd/ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/FileSinkOperator.java?ref=8b2cd2abf2a32e42d24e60f1ac7a026af783dcbd",
                "patch": "@@ -569,7 +569,7 @@ protected void createBucketFiles(FSPaths fsp) throws HiveException {\n       assert filesIdx == numFiles;\n \n       // in recent hadoop versions, use deleteOnExit to clean tmp files.\n-      if (isNativeTable) {\n+      if (isNativeTable && fs != null && fsp != null) {\n         autoDelete = fs.deleteOnExit(fsp.outPaths[0]);\n       }\n     } catch (Exception e) {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "FileSinkOperator.java"
        ],
        "unit_tests": [
            "TestFileSinkOperator.java"
        ]
    },
    "hive_fb79870": {
        "repo": "hive",
        "message": "HIVE-13745: UDF current_date\u3001current_timestamp\u3001unix_timestamp NPE (Biao Wu, reviewed by Yongzhi Chen)",
        "commit": "https://github.com/apache/hive/commit/fb79870592d775cd836d5611e21ab1c7030aadba",
        "parent": "https://github.com/apache/hive/commit/68b66a64f0d9b0d587a7ce1e085a0e8e45253adb",
        "bug_id": "hive_fb79870",
        "file": [
            {
                "sha": "44b9eb2824c1d0c475fc56d8737e023513f49d78",
                "filename": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "blob_url": "https://github.com/apache/hive/blob/fb79870592d775cd836d5611e21ab1c7030aadba/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "raw_url": "https://github.com/apache/hive/raw/fb79870592d775cd836d5611e21ab1c7030aadba/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java?ref=fb79870592d775cd836d5611e21ab1c7030aadba",
                "patch": "@@ -1843,6 +1843,7 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n     TESTMODE_BUCKET_CODEC_VERSION(\"hive.test.bucketcodec.version\", 1,\n       \"For testing only.  Will make ACID subsystem write RecordIdentifier.bucketId in specified\\n\" +\n         \"format\", false),\n+    HIVE_QUERY_TIMESTAMP(\"hive.query.timestamp\", System.currentTimeMillis(), \"query execute time.\"),\n \n     HIVEMERGEMAPFILES(\"hive.merge.mapfiles\", true,\n         \"Merge small files at the end of a map-only job\"),",
                "deletions": 0
            },
            {
                "sha": "9f65a771f95a7c0bd3fdb4e56e47c0fc70235850",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "blob_url": "https://github.com/apache/hive/blob/fb79870592d775cd836d5611e21ab1c7030aadba/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "raw_url": "https://github.com/apache/hive/raw/fb79870592d775cd836d5611e21ab1c7030aadba/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java?ref=fb79870592d775cd836d5611e21ab1c7030aadba",
                "patch": "@@ -1924,6 +1924,7 @@ public String getNextValuesTempTableSuffix() {\n    */\n   public void setupQueryCurrentTimestamp() {\n     queryCurrentTimestamp = new Timestamp(System.currentTimeMillis());\n+    sessionConf.setLongVar(ConfVars.HIVE_QUERY_TIMESTAMP, queryCurrentTimestamp.getTime());\n \n     // Provide a facility to set current timestamp during tests\n     if (sessionConf.getBoolVar(ConfVars.HIVE_IN_TEST)) {",
                "deletions": 0
            },
            {
                "sha": "91fd08f13e5cdc28cc80acffea0599e14a45a96e",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentDate.java",
                "blob_url": "https://github.com/apache/hive/blob/fb79870592d775cd836d5611e21ab1c7030aadba/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentDate.java",
                "raw_url": "https://github.com/apache/hive/raw/fb79870592d775cd836d5611e21ab1c7030aadba/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentDate.java",
                "status": "modified",
                "changes": 26,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentDate.java?ref=fb79870592d775cd836d5611e21ab1c7030aadba",
                "patch": "@@ -18,8 +18,12 @@\n package org.apache.hadoop.hive.ql.udf.generic;\n \n import java.sql.Date;\n+import java.sql.Timestamp;\n \n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.exec.Description;\n+import org.apache.hadoop.hive.ql.exec.MapredContext;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentException;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n@@ -39,6 +43,13 @@\n public class GenericUDFCurrentDate extends GenericUDF {\n \n   protected DateWritable currentDate;\n+  private Configuration conf;\n+\n+  @Override\n+  public void configure(MapredContext context) {\n+    super.configure(context);\n+    conf = context.getJobConf();\n+  }\n \n   @Override\n   public ObjectInspector initialize(ObjectInspector[] arguments)\n@@ -50,8 +61,21 @@ public ObjectInspector initialize(ObjectInspector[] arguments)\n     }\n \n     if (currentDate == null) {\n+      SessionState ss = SessionState.get();\n+      Timestamp queryTimestamp;\n+      if (ss == null) {\n+        if (conf == null) {\n+          queryTimestamp = new Timestamp(System.currentTimeMillis());\n+        } else {\n+          queryTimestamp = new Timestamp(\n+                  HiveConf.getLongVar(conf, HiveConf.ConfVars.HIVE_QUERY_TIMESTAMP));\n+        }\n+      } else {\n+        queryTimestamp = ss.getQueryCurrentTimestamp();\n+      }\n+\n       Date dateVal =\n-          Date.valueOf(SessionState.get().getQueryCurrentTimestamp().toString().substring(0, 10));\n+              Date.valueOf(queryTimestamp.toString().substring(0, 10));\n       currentDate = new DateWritable(dateVal);\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "ca43840e372a26accda20386ef4c8679310783fe",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentTimestamp.java",
                "blob_url": "https://github.com/apache/hive/blob/fb79870592d775cd836d5611e21ab1c7030aadba/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentTimestamp.java",
                "raw_url": "https://github.com/apache/hive/raw/fb79870592d775cd836d5611e21ab1c7030aadba/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentTimestamp.java",
                "status": "modified",
                "changes": 26,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCurrentTimestamp.java?ref=fb79870592d775cd836d5611e21ab1c7030aadba",
                "patch": "@@ -17,7 +17,12 @@\n  */\n package org.apache.hadoop.hive.ql.udf.generic;\n \n+import java.sql.Timestamp;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.exec.Description;\n+import org.apache.hadoop.hive.ql.exec.MapredContext;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentException;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n@@ -37,6 +42,13 @@\n public class GenericUDFCurrentTimestamp extends GenericUDF {\n \n   protected TimestampWritable currentTimestamp;\n+  private Configuration conf;\n+\n+  @Override\n+  public void configure(MapredContext context) {\n+    super.configure(context);\n+    conf = context.getJobConf();\n+  }\n \n   @Override\n   public ObjectInspector initialize(ObjectInspector[] arguments)\n@@ -48,7 +60,19 @@ public ObjectInspector initialize(ObjectInspector[] arguments)\n     }\n \n     if (currentTimestamp == null) {\n-      currentTimestamp = new TimestampWritable(SessionState.get().getQueryCurrentTimestamp());\n+      SessionState ss = SessionState.get();\n+      Timestamp queryTimestamp;\n+      if (ss == null) {\n+        if (conf == null) {\n+          queryTimestamp = new Timestamp(System.currentTimeMillis());\n+        } else {\n+          queryTimestamp = new Timestamp(\n+                  HiveConf.getLongVar(conf, HiveConf.ConfVars.HIVE_QUERY_TIMESTAMP));\n+        }\n+      } else {\n+        queryTimestamp = ss.getQueryCurrentTimestamp();\n+      }\n+      currentTimestamp = new TimestampWritable(queryTimestamp);\n     }\n \n     return PrimitiveObjectInspectorFactory.writableTimestampObjectInspector;",
                "deletions": 1
            },
            {
                "sha": "6ce72f77037d49571eb1bc5fb647bed0559119cf",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUnixTimeStamp.java",
                "blob_url": "https://github.com/apache/hive/blob/fb79870592d775cd836d5611e21ab1c7030aadba/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUnixTimeStamp.java",
                "raw_url": "https://github.com/apache/hive/raw/fb79870592d775cd836d5611e21ab1c7030aadba/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUnixTimeStamp.java",
                "status": "modified",
                "changes": 27,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFUnixTimeStamp.java?ref=fb79870592d775cd836d5611e21ab1c7030aadba",
                "patch": "@@ -18,6 +18,11 @@\n \n package org.apache.hadoop.hive.ql.udf.generic;\n \n+import java.sql.Timestamp;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.exec.MapredContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.hadoop.hive.ql.exec.Description;\n@@ -37,14 +42,34 @@\n public class GenericUDFUnixTimeStamp extends GenericUDFToUnixTimeStamp {\n   private static final Logger LOG = LoggerFactory.getLogger(GenericUDFUnixTimeStamp.class);\n   private LongWritable currentTimestamp; // retValue is transient so store this separately.\n+  private Configuration conf;\n+\n+  @Override\n+  public void configure(MapredContext context) {\n+    super.configure(context);\n+    conf = context.getJobConf();\n+  }\n+\n   @Override\n   protected void initializeInput(ObjectInspector[] arguments) throws UDFArgumentException {\n     if (arguments.length > 0) {\n       super.initializeInput(arguments);\n     } else {\n       if (currentTimestamp == null) {\n         currentTimestamp = new LongWritable(0);\n-        setValueFromTs(currentTimestamp, SessionState.get().getQueryCurrentTimestamp());\n+        SessionState ss = SessionState.get();\n+        Timestamp queryTimestamp;\n+        if (ss == null) {\n+          if (conf == null) {\n+            queryTimestamp = new Timestamp(System.currentTimeMillis());\n+          } else {\n+            queryTimestamp = new Timestamp(\n+                    HiveConf.getLongVar(conf, HiveConf.ConfVars.HIVE_QUERY_TIMESTAMP));\n+          }\n+        } else {\n+          queryTimestamp = ss.getQueryCurrentTimestamp();\n+        }\n+        setValueFromTs(currentTimestamp, queryTimestamp);\n         String msg = \"unix_timestamp(void) is deprecated. Use current_timestamp instead.\";\n         SessionState.getConsole().printInfo(msg, false);\n       }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "SessionState.java",
            "HiveConf.java"
        ],
        "unit_tests": [
            "TestSessionState.java",
            "TestHiveConf.java"
        ]
    },
    "hive_2d87c12": {
        "repo": "hive",
        "message": "HIVE-10590 fix potential NPE in HiveMetaStore.equals (Alexander Pivovarov, reviewed by Ashutosh Chauhan)",
        "commit": "https://github.com/apache/hive/commit/2d87c12d914044540a4f5ed7fe500e3c245fbead",
        "parent": "https://github.com/apache/hive/commit/bc0138c436add2335d2045b6c7bf86bc6a15cc27",
        "bug_id": "hive_2d87c12",
        "file": [
            {
                "sha": "e7960487680dd26059ee512dd28b66c90848aa57",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/2d87c12d914044540a4f5ed7fe500e3c245fbead/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/2d87c12d914044540a4f5ed7fe500e3c245fbead/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=2d87c12d914044540a4f5ed7fe500e3c245fbead",
                "patch": "@@ -2024,8 +2024,14 @@ public boolean equals(Object obj) {\n         if (!p1.isSetValues() || !p2.isSetValues()) return p1.isSetValues() == p2.isSetValues();\n         if (p1.getValues().size() != p2.getValues().size()) return false;\n         for (int i = 0; i < p1.getValues().size(); ++i) {\n-          String v1 = p1.getValues().get(i), v2 = p2.getValues().get(i);\n-          if ((v1 == null && v2 != null) || !v1.equals(v2)) return false;\n+          String v1 = p1.getValues().get(i);\n+          String v2 = p2.getValues().get(i);\n+          if (v1 == null && v2 == null) {\n+            continue;\n+          }\n+          if (v1 == null || !v1.equals(v2)) {\n+            return false;\n+          }\n         }\n         return true;\n       }",
                "deletions": 2
            }
        ],
        "patched_files": [
            "HiveMetaStore.java"
        ],
        "unit_tests": [
            "TestHiveMetaStore.java"
        ]
    },
    "hive_c50a627": {
        "repo": "hive",
        "message": "HIVE-8008: NPE while reading null decimal value (Chao via Xuefu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1623261 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/c50a627fe687027d08413a7aed9ec83e101b9ec2",
        "parent": "https://github.com/apache/hive/commit/3bebb7898ec5496502bffcda7993523da0585aa1",
        "bug_id": "hive_c50a627",
        "file": [
            {
                "sha": "ad48f69c6fc72e09fd0ce03e50a658d8a3e4a342",
                "filename": "common/src/java/org/apache/hadoop/hive/common/type/HiveDecimal.java",
                "blob_url": "https://github.com/apache/hive/blob/c50a627fe687027d08413a7aed9ec83e101b9ec2/common/src/java/org/apache/hadoop/hive/common/type/HiveDecimal.java",
                "raw_url": "https://github.com/apache/hive/raw/c50a627fe687027d08413a7aed9ec83e101b9ec2/common/src/java/org/apache/hadoop/hive/common/type/HiveDecimal.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/common/src/java/org/apache/hadoop/hive/common/type/HiveDecimal.java?ref=c50a627fe687027d08413a7aed9ec83e101b9ec2",
                "patch": "@@ -254,16 +254,16 @@ public static BigDecimal enforcePrecisionScale(BigDecimal bd, int maxPrecision,\n       return null;\n     }\n \n+    if (bd.scale() > maxScale) {\n+      bd = bd.setScale(maxScale, RoundingMode.HALF_UP);\n+    }\n+\n     int maxIntDigits = maxPrecision - maxScale;\n     int intDigits = bd.precision() - bd.scale();\n     if (intDigits > maxIntDigits) {\n       return null;\n     }\n \n-    if (bd.scale() > maxScale) {\n-      bd = bd.setScale(maxScale, RoundingMode.HALF_UP);\n-    }\n-\n     return bd;\n   }\n }",
                "deletions": 4
            },
            {
                "sha": "46a73f2eba706bf413dde31a26e302b3e4c7bd65",
                "filename": "common/src/test/org/apache/hadoop/hive/common/type/TestHiveDecimal.java",
                "blob_url": "https://github.com/apache/hive/blob/c50a627fe687027d08413a7aed9ec83e101b9ec2/common/src/test/org/apache/hadoop/hive/common/type/TestHiveDecimal.java",
                "raw_url": "https://github.com/apache/hive/raw/c50a627fe687027d08413a7aed9ec83e101b9ec2/common/src/test/org/apache/hadoop/hive/common/type/TestHiveDecimal.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/common/src/test/org/apache/hadoop/hive/common/type/TestHiveDecimal.java?ref=c50a627fe687027d08413a7aed9ec83e101b9ec2",
                "patch": "@@ -68,6 +68,13 @@ public void testPrecisionScaleEnforcement() {\n     Assert.assertEquals(\"0.02\", HiveDecimal.enforcePrecisionScale(new BigDecimal(\"0.015\"), 3, 2).toString());\n     Assert.assertEquals(\"0.01\", HiveDecimal.enforcePrecisionScale(new BigDecimal(\"0.0145\"), 3, 2).toString());\n \n+    // Rounding numbers that increase int digits\n+    Assert.assertEquals(\"10\",\n+        HiveDecimal.enforcePrecisionScale(new BigDecimal(\"9.5\"), 2, 0).toString());\n+    Assert.assertNull(HiveDecimal.enforcePrecisionScale(new BigDecimal(\"9.5\"), 1, 0));\n+    Assert.assertEquals(\"9\",\n+        HiveDecimal.enforcePrecisionScale(new BigDecimal(\"9.4\"), 1, 0).toString());\n+\n     // Integers with no scale values are not modified (zeros are not null)\n     Assert.assertEquals(\"0\", HiveDecimal.enforcePrecisionScale(new BigDecimal(\"0\"), 1, 0).toString());\n     Assert.assertEquals(\"30\", HiveDecimal.enforcePrecisionScale(new BigDecimal(\"30\"), 2, 0).toString());",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HiveDecimal.java"
        ],
        "unit_tests": [
            "TestHiveDecimal.java"
        ]
    },
    "hive_c2e335f": {
        "repo": "hive",
        "message": "HIVE-18606 CTAS on empty table throws NPE from org.apache.hadoop.hive.ql.exec.MoveTask (Eugene Koifman, reviewed by Sergey Shelukhin)",
        "commit": "https://github.com/apache/hive/commit/c2e335fc0b4a8144d8d93ff10e9191432ae6547e",
        "parent": "https://github.com/apache/hive/commit/464a3f61a0c4a1c4e44a1ce427f604295534e969",
        "bug_id": "hive_c2e335f",
        "file": [
            {
                "sha": "4e804ba04b2ee916f7867a8a4a439d7c467f2523",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java",
                "blob_url": "https://github.com/apache/hive/blob/c2e335fc0b4a8144d8d93ff10e9191432ae6547e/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java",
                "raw_url": "https://github.com/apache/hive/raw/c2e335fc0b4a8144d8d93ff10e9191432ae6547e/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/MoveTask.java?ref=c2e335fc0b4a8144d8d93ff10e9191432ae6547e",
                "patch": "@@ -294,8 +294,13 @@ public int execute(DriverContext driverContext) {\n             //'sourcePath' result of 'select ...' part of CTAS statement\n             assert lfd.getIsDfsDir();\n             FileSystem srcFs = sourcePath.getFileSystem(conf);\n-            List<Path> newFiles = new ArrayList<>();\n-            Hive.moveAcidFiles(srcFs, srcFs.globStatus(sourcePath), targetPath, newFiles);\n+            FileStatus[] srcs = srcFs.globStatus(sourcePath);\n+            if(srcs != null) {\n+              List<Path> newFiles = new ArrayList<>();\n+              Hive.moveAcidFiles(srcFs, srcs, targetPath, newFiles);\n+            } else {\n+              LOG.debug(\"No files found to move from \" + sourcePath + \" to \" + targetPath);\n+            }\n           }\n           else {\n             moveFile(sourcePath, targetPath, lfd.getIsDfsDir());",
                "deletions": 2
            },
            {
                "sha": "3c6b6be1ba6c5c4b522f31e90dda0b63d0bb8d3a",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java",
                "blob_url": "https://github.com/apache/hive/blob/c2e335fc0b4a8144d8d93ff10e9191432ae6547e/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java",
                "raw_url": "https://github.com/apache/hive/raw/c2e335fc0b4a8144d8d93ff10e9191432ae6547e/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/TestTxnNoBuckets.java?ref=c2e335fc0b4a8144d8d93ff10e9191432ae6547e",
                "patch": "@@ -178,6 +178,7 @@ public void testNoBuckets() throws Exception {\n    */\n   @Test\n   public void testCTAS() throws Exception {\n+    runStatementOnDriver(\"drop table if exists myctas\");\n     int[][] values = {{1,2},{3,4}};\n     runStatementOnDriver(\"insert into \" + Table.NONACIDORCTBL +  makeValuesClause(values));\n     runStatementOnDriver(\"create table myctas stored as ORC TBLPROPERTIES ('transactional\" +\n@@ -221,6 +222,16 @@ public void testCTAS() throws Exception {\n     };\n     checkExpected(rs, expected4, \"Unexpected row count after ctas from union distinct query\");\n   }\n+  @Test\n+  public void testCtasEmpty() throws Exception {\n+    MetastoreConf.setBoolVar(hiveConf, MetastoreConf.ConfVars.CREATE_TABLES_AS_ACID, true);\n+    runStatementOnDriver(\"drop table if exists myctas\");\n+    runStatementOnDriver(\"create table myctas stored as ORC as\" +\n+        \" select a, b from \" + Table.NONACIDORCTBL);\n+    List<String> rs = runStatementOnDriver(\"select ROW__ID, a, b, INPUT__FILE__NAME\" +\n+        \" from myctas order by ROW__ID\");\n+  }\n+\n   /**\n    * Insert into unbucketed acid table from union all query\n    * Union All is flattend so nested subdirs are created and acid move drops them since",
                "deletions": 0
            }
        ],
        "patched_files": [
            "MoveTask.java"
        ],
        "unit_tests": [
            "TestTxnNoBuckets.java"
        ]
    },
    "hive_3ed7dc2": {
        "repo": "hive",
        "message": "HIVE-15755 NullPointerException on invalid table name in ON clause of Merge statement (Eugene Koifman, reviewed by Wei Zheng)",
        "commit": "https://github.com/apache/hive/commit/3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c",
        "parent": "https://github.com/apache/hive/commit/3c230a62d5200a2e7f138d51746e09a8d028b3ca",
        "bug_id": "hive_3ed7dc2",
        "file": [
            {
                "sha": "6013218cdfce53787a41a06f0a280cebecb5f56a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "blob_url": "https://github.com/apache/hive/blob/3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "raw_url": "https://github.com/apache/hive/raw/3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java?ref=3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c",
                "patch": "@@ -247,6 +247,8 @@\n   TRUNCATE_FOR_NON_MANAGED_TABLE(10146, \"Cannot truncate non-managed table {0}.\", true),\n   TRUNCATE_FOR_NON_NATIVE_TABLE(10147, \"Cannot truncate non-native table {0}.\", true),\n   PARTSPEC_FOR_NON_PARTITIONED_TABLE(10148, \"Partition spec for non partitioned table {0}.\", true),\n+  INVALID_TABLE_IN_ON_CLAUSE_OF_MERGE(10149, \"No columns from target table ''{0}'' found in ON \" +\n+    \"clause ''{1}'' of MERGE statement.\", true),\n \n   LOAD_INTO_STORED_AS_DIR(10195, \"A stored-as-directories table cannot be used as target for LOAD\"),\n   ALTER_TBL_STOREDASDIR_NOT_SKEWED(10196, \"This operation is only valid on skewed table.\"),",
                "deletions": 0
            },
            {
                "sha": "e798328bce0df4d374977dc14de6e66a688bf41a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/UpdateDeleteSemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c/ql/src/java/org/apache/hadoop/hive/ql/parse/UpdateDeleteSemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c/ql/src/java/org/apache/hadoop/hive/ql/parse/UpdateDeleteSemanticAnalyzer.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/UpdateDeleteSemanticAnalyzer.java?ref=3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c",
                "patch": "@@ -1205,6 +1205,15 @@ private void addColumn2Table(String tableName, String columnName) {\n     private String getPredicate() {\n       //normilize table name for mapping\n       List<String> targetCols = table2column.get(targetTableNameInSourceQuery.toLowerCase());\n+      if(targetCols == null) {\n+        /*e.g. ON source.t=1\n+        * this is not strictly speaking invlaid but it does ensure that all columns from target\n+        * table are all NULL for every row.  This would make any WHEN MATCHED clause invalid since\n+        * we don't have a ROW__ID.  The WHEN NOT MATCHED could be meaningful but it's just data from\n+        * source satisfying source.t=1...  not worth the effort to support this*/\n+        throw new IllegalArgumentException(ErrorMsg.INVALID_TABLE_IN_ON_CLAUSE_OF_MERGE\n+          .format(targetTableNameInSourceQuery, onClauseAsString));\n+      }\n       StringBuilder sb = new StringBuilder();\n       for(String col : targetCols) {\n         if(sb.length() > 0) {",
                "deletions": 0
            },
            {
                "sha": "c110089614a5972fbc6d22f3302883a743e3b007",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java",
                "blob_url": "https://github.com/apache/hive/blob/3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java",
                "raw_url": "https://github.com/apache/hive/raw/3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/TestTxnCommands.java?ref=3ed7dc2b82f84ade5f2be0cb85a95b49dc30086c",
                "patch": "@@ -842,4 +842,13 @@ public void testSetClauseFakeColumn() throws Exception {\n     Assert.assertEquals(ErrorMsg.INVALID_TARGET_COLUMN_IN_SET_CLAUSE,\n       ((HiveException)cpr.getException()).getCanonicalErrorMsg());\n   }\n+  @Test\n+  public void testBadOnClause() throws Exception {\n+    CommandProcessorResponse cpr = runStatementOnDriverNegative(\"merge into \" + Table.ACIDTBL +\n+      \" trgt using (select * from \" + Table.NONACIDORCTBL +\n+      \"src) sub on sub.a = target.a when not matched then insert values (sub.a,sub.b)\");\n+    Assert.assertTrue(\"Error didn't match: \" + cpr, cpr.getErrorMessage().contains(\n+      \"No columns from target table 'trgt' found in ON clause '`sub`.`a` = `target`.`a`' of MERGE statement.\"));\n+\n+  }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "UpdateDeleteSemanticAnalyzer.java",
            "ErrorMsg.java"
        ],
        "unit_tests": [
            "TestTxnCommands.java",
            "TestErrorMsg.java",
            "TestUpdateDeleteSemanticAnalyzer.java"
        ]
    },
    "hive_044f1fa": {
        "repo": "hive",
        "message": "HIVE-14974: TestBeeLineHistory throws NPE in ShutdownHook (Prasanth Jayachandran reviewed by Siddharth Seth)",
        "commit": "https://github.com/apache/hive/commit/044f1fa3ce868d4880adbe8c92a24e15e8b88dba",
        "parent": "https://github.com/apache/hive/commit/f562dfb5207e8246e5f12696e0d7f373c3e3bf4c",
        "bug_id": "hive_044f1fa",
        "file": [
            {
                "sha": "5f99a0edb401e1d220b81b2953ca839fd93d0a7b",
                "filename": "beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
                "blob_url": "https://github.com/apache/hive/blob/044f1fa3ce868d4880adbe8c92a24e15e8b88dba/beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
                "raw_url": "https://github.com/apache/hive/raw/044f1fa3ce868d4880adbe8c92a24e15e8b88dba/beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java?ref=044f1fa3ce868d4880adbe8c92a24e15e8b88dba",
                "patch": "@@ -33,7 +33,7 @@\n  */\n public class TestBeeLineHistory {\n \n-  private static final String fileName = \"history\";\n+  private static final String fileName = System.getProperty(\"test.tmp.dir\") + \"/history\";\n \n   @BeforeClass\n   public static void beforeTests() throws Exception {",
                "deletions": 1
            }
        ],
        "patched_files": [],
        "unit_tests": [
            "TestBeeLineHistory.java"
        ]
    },
    "hive_2fc11e4": {
        "repo": "hive",
        "message": "HIVE-7075 - JsonSerde raises NullPointerException when object key is not lower case (Yibing Shi, Navis Ryu via Sushanth Sowmyan)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1601499 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/2fc11e41e110f43f674426b3786387ba80eaa0e0",
        "parent": "https://github.com/apache/hive/commit/ec1097ccf8b333ea183c3d7f87e20db2fb7d7bf4",
        "bug_id": "hive_2fc11e4",
        "file": [
            {
                "sha": "c0209dbf90f29808e21897db79c7e155b90445df",
                "filename": "hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/schema/HCatSchema.java",
                "blob_url": "https://github.com/apache/hive/blob/2fc11e41e110f43f674426b3786387ba80eaa0e0/hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/schema/HCatSchema.java",
                "raw_url": "https://github.com/apache/hive/raw/2fc11e41e110f43f674426b3786387ba80eaa0e0/hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/schema/HCatSchema.java",
                "status": "modified",
                "changes": 19,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/main/java/org/apache/hive/hcatalog/data/schema/HCatSchema.java?ref=2fc11e41e110f43f674426b3786387ba80eaa0e0",
                "patch": "@@ -58,9 +58,9 @@ public HCatSchema(final List<HCatFieldSchema> fieldSchemas) {\n       if (field == null)\n         throw new IllegalArgumentException(\"Field cannot be null\");\n \n-      String fieldName = field.getName();\n+      String fieldName = normalizeName(field.getName());\n       if (fieldPositionMap.containsKey(fieldName))\n-        throw new IllegalArgumentException(\"Field named \" + fieldName +\n+        throw new IllegalArgumentException(\"Field named \" + field.getName() +\n           \" already exists\");\n       fieldPositionMap.put(fieldName, idx);\n       fieldNames.add(fieldName);\n@@ -72,7 +72,7 @@ public void append(final HCatFieldSchema hfs) throws HCatException {\n     if (hfs == null)\n       throw new HCatException(\"Attempt to append null HCatFieldSchema in HCatSchema.\");\n \n-    String fieldName = hfs.getName();\n+    String fieldName = normalizeName(hfs.getName());\n     if (fieldPositionMap.containsKey(fieldName))\n       throw new HCatException(\"Attempt to append HCatFieldSchema with already \" +\n         \"existing name: \" + fieldName + \".\");\n@@ -98,7 +98,7 @@ public void append(final HCatFieldSchema hfs) throws HCatException {\n    * present, returns null.\n    */\n   public Integer getPosition(String fieldName) {\n-    return fieldPositionMap.get(fieldName);\n+    return fieldPositionMap.get(normalizeName(fieldName));\n   }\n \n   public HCatFieldSchema get(String fieldName) throws HCatException {\n@@ -134,9 +134,14 @@ public void remove(final HCatFieldSchema hcatFieldSchema) throws HCatException {\n     }     \n     fieldSchemas.remove(hcatFieldSchema);\n     // Re-align the positionMap by -1 for the columns appearing after hcatFieldSchema.\n-    reAlignPositionMap(fieldPositionMap.get(hcatFieldSchema.getName())+1, -1);\n-    fieldPositionMap.remove(hcatFieldSchema.getName());\n-    fieldNames.remove(hcatFieldSchema.getName());\n+    String fieldName = normalizeName(hcatFieldSchema.getName());\n+    reAlignPositionMap(fieldPositionMap.get(fieldName)+1, -1);\n+    fieldPositionMap.remove(fieldName);\n+    fieldNames.remove(fieldName);\n+  }\n+\n+  private String normalizeName(String name) {\n+    return name == null ? null : name.toLowerCase();\n   }\n \n   @Override",
                "deletions": 7
            },
            {
                "sha": "b4a810a394a4f67d6cf134fad4ff27cda3e97f12",
                "filename": "hcatalog/core/src/test/java/org/apache/hive/hcatalog/data/TestJsonSerDe.java",
                "blob_url": "https://github.com/apache/hive/blob/2fc11e41e110f43f674426b3786387ba80eaa0e0/hcatalog/core/src/test/java/org/apache/hive/hcatalog/data/TestJsonSerDe.java",
                "raw_url": "https://github.com/apache/hive/raw/2fc11e41e110f43f674426b3786387ba80eaa0e0/hcatalog/core/src/test/java/org/apache/hive/hcatalog/data/TestJsonSerDe.java",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/test/java/org/apache/hive/hcatalog/data/TestJsonSerDe.java?ref=2fc11e41e110f43f674426b3786387ba80eaa0e0",
                "patch": "@@ -22,6 +22,7 @@\n import java.sql.Date;\n import java.sql.Timestamp;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -287,4 +288,23 @@ public void testLooseJsonReadability() throws Exception {\n \n   }\n \n+  public void testUpperCaseKey() throws Exception {\n+    Configuration conf = new Configuration();\n+    Properties props = new Properties();\n+\n+    props.put(serdeConstants.LIST_COLUMNS, \"empid,name\");\n+    props.put(serdeConstants.LIST_COLUMN_TYPES, \"int,string\");\n+    JsonSerDe rjsd = new JsonSerDe();\n+    SerDeUtils.initializeSerDe(rjsd, conf, props, null);\n+\n+    Text text1 = new Text(\"{ \\\"empId\\\" : 123, \\\"name\\\" : \\\"John\\\" } \");\n+    Text text2 = new Text(\"{ \\\"empId\\\" : 456, \\\"name\\\" : \\\"Jane\\\" } \");\n+\n+    HCatRecord expected1 = new DefaultHCatRecord(Arrays.<Object>asList(123, \"John\"));\n+    HCatRecord expected2 = new DefaultHCatRecord(Arrays.<Object>asList(456, \"Jane\"));\n+\n+    assertTrue(HCatDataCheckUtil.recordsEqual((HCatRecord)rjsd.deserialize(text1), expected1));\n+    assertTrue(HCatDataCheckUtil.recordsEqual((HCatRecord)rjsd.deserialize(text2), expected2));\n+\n+  }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "JsonSerDe.java",
            "HCatSchema.java"
        ],
        "unit_tests": [
            "TestJsonSerDe.java",
            "TestHCatSchema.java"
        ]
    },
    "hive_8412b37": {
        "repo": "hive",
        "message": "HIVE-21992: REPL DUMP throws NPE when dumping Create Function event (Sankar Hariappan, reviewed by Mahesh Kumar Behera)\n\nSigned-off-by: Sankar Hariappan <sankarh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/8412b3748b7b384689a39b8747c7f8fd41e58f28",
        "parent": "https://github.com/apache/hive/commit/198ab0e862cdf33e8dff37bf24676ffcb392ed82",
        "bug_id": "hive_8412b37",
        "file": [
            {
                "sha": "af5746ff48943d6e5808a861cc56ea2cf810432b",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java",
                "blob_url": "https://github.com/apache/hive/blob/8412b3748b7b384689a39b8747c7f8fd41e58f28/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java",
                "raw_url": "https://github.com/apache/hive/raw/8412b3748b7b384689a39b8747c7f8fd41e58f28/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java?ref=8412b3748b7b384689a39b8747c7f8fd41e58f28",
                "patch": "@@ -84,22 +84,26 @@ public void testCreateFunctionIncrementalReplication() throws Throwable {\n \n     primary.run(\"CREATE FUNCTION \" + primaryDbName\n         + \".testFunctionOne as 'hivemall.tools.string.StopwordUDF' \"\n-        + \"using jar  'ivy://io.github.myui:hivemall:0.4.0-2'\");\n+        + \"using jar  'ivy://io.github.myui:hivemall:0.4.0-2'\")\n+        .run(\"CREATE FUNCTION \" + primaryDbName\n+            + \".testFunctionTwo as 'org.apache.hadoop.hive.ql.udf.generic.GenericUDAFMax'\");\n \n     WarehouseInstance.Tuple incrementalDump =\n         primary.dump(primaryDbName, bootStrapDump.lastReplicationId);\n     replica.load(replicatedDbName, incrementalDump.dumpLocation)\n         .run(\"REPL STATUS \" + replicatedDbName)\n         .verifyResult(incrementalDump.lastReplicationId)\n         .run(\"SHOW FUNCTIONS LIKE '\" + replicatedDbName + \"%'\")\n-        .verifyResult(replicatedDbName + \".testFunctionOne\");\n+        .verifyResults(new String[] { replicatedDbName + \".testFunctionOne\",\n+                                      replicatedDbName + \".testFunctionTwo\" });\n \n     // Test the idempotent behavior of CREATE FUNCTION\n     replica.load(replicatedDbName, incrementalDump.dumpLocation)\n         .run(\"REPL STATUS \" + replicatedDbName)\n         .verifyResult(incrementalDump.lastReplicationId)\n         .run(\"SHOW FUNCTIONS LIKE '\" + replicatedDbName + \"%'\")\n-        .verifyResult(replicatedDbName + \".testFunctionOne\");\n+        .verifyResults(new String[] { replicatedDbName + \".testFunctionOne\",\n+                                      replicatedDbName + \".testFunctionTwo\" });\n   }\n \n   @Test",
                "deletions": 3
            },
            {
                "sha": "576eb0699a8aa263f2a4c083a09e5bfef6f3fffc",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/io/FunctionSerializer.java",
                "blob_url": "https://github.com/apache/hive/blob/8412b3748b7b384689a39b8747c7f8fd41e58f28/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/io/FunctionSerializer.java",
                "raw_url": "https://github.com/apache/hive/raw/8412b3748b7b384689a39b8747c7f8fd41e58f28/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/io/FunctionSerializer.java",
                "status": "modified",
                "changes": 26,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/io/FunctionSerializer.java?ref=8412b3748b7b384689a39b8747c7f8fd41e58f28",
                "patch": "@@ -51,18 +51,20 @@ public void writeTo(JsonWriter writer, ReplicationSpec additionalPropertiesProvi\n       throws SemanticException, IOException, MetaException {\n     TSerializer serializer = new TSerializer(new TJSONProtocol.Factory());\n     List<ResourceUri> resourceUris = new ArrayList<>();\n-    for (ResourceUri uri : function.getResourceUris()) {\n-      Path inputPath = new Path(uri.getUri());\n-      if (\"hdfs\".equals(inputPath.toUri().getScheme())) {\n-        FileSystem fileSystem = inputPath.getFileSystem(hiveConf);\n-        Path qualifiedUri = PathBuilder.fullyQualifiedHDFSUri(inputPath, fileSystem);\n-        // Initialize ReplChangeManager instance since we will require it to encode file URI.\n-        ReplChangeManager.getInstance(hiveConf);\n-        String checkSum = ReplChangeManager.checksumFor(qualifiedUri, fileSystem);\n-        String newFileUri = ReplChangeManager.encodeFileUri(qualifiedUri.toString(), checkSum, null);\n-        resourceUris.add(new ResourceUri(uri.getResourceType(), newFileUri));\n-      } else {\n-        resourceUris.add(uri);\n+    if (function.getResourceUris() != null) {\n+      for (ResourceUri uri : function.getResourceUris()) {\n+        Path inputPath = new Path(uri.getUri());\n+        if (\"hdfs\".equals(inputPath.toUri().getScheme())) {\n+          FileSystem fileSystem = inputPath.getFileSystem(hiveConf);\n+          Path qualifiedUri = PathBuilder.fullyQualifiedHDFSUri(inputPath, fileSystem);\n+          // Initialize ReplChangeManager instance since we will require it to encode file URI.\n+          ReplChangeManager.getInstance(hiveConf);\n+          String checkSum = ReplChangeManager.checksumFor(qualifiedUri, fileSystem);\n+          String newFileUri = ReplChangeManager.encodeFileUri(qualifiedUri.toString(), checkSum, null);\n+          resourceUris.add(new ResourceUri(uri.getResourceType(), newFileUri));\n+        } else {\n+          resourceUris.add(uri);\n+        }\n       }\n     }\n     Function copyObj = new Function(this.function);",
                "deletions": 12
            },
            {
                "sha": "bc891f710a8bbfda05b9e80e2a3bfc5e94590e0d",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/CreateFunctionHandler.java",
                "blob_url": "https://github.com/apache/hive/blob/8412b3748b7b384689a39b8747c7f8fd41e58f28/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/CreateFunctionHandler.java",
                "raw_url": "https://github.com/apache/hive/raw/8412b3748b7b384689a39b8747c7f8fd41e58f28/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/CreateFunctionHandler.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/load/message/CreateFunctionHandler.java?ref=8412b3748b7b384689a39b8747c7f8fd41e58f28",
                "patch": "@@ -129,9 +129,9 @@ private CreateFunctionDesc build() throws SemanticException {\n       // and not do them lazily. The reason being the function class used for transformations additionally\n       // also creates the corresponding replCopyTasks, which cannot be evaluated lazily. since the query\n       // plan needs to be complete before we execute and not modify it while execution in the driver.\n-      List<ResourceUri> transformedUris = ImmutableList.copyOf(\n-          Lists.transform(metadata.function.getResourceUris(), conversionFunction)\n-      );\n+      List<ResourceUri> transformedUris = (metadata.function.getResourceUris() == null)\n+              ? null\n+              : ImmutableList.copyOf(Lists.transform(metadata.function.getResourceUris(), conversionFunction));\n       replCopyTasks.addAll(conversionFunction.replCopyTasks);\n       String fullQualifiedFunctionName = FunctionUtils.qualifyFunctionName(\n           metadata.function.getFunctionName(), destinationDbName",
                "deletions": 3
            }
        ],
        "patched_files": [
            "CreateFunctionHandler.java",
            "FunctionSerializer.java"
        ],
        "unit_tests": [
            "TestReplicationScenariosAcrossInstances.java"
        ]
    },
    "hive_0f3998a": {
        "repo": "hive",
        "message": "HIVE-14990 : run all tests for MM tables and fix the issues that are found - issue with FetchOperator, drop, NPE (Sergey Shelukhin)",
        "commit": "https://github.com/apache/hive/commit/0f3998af3c5e9d8168b32d5085165892c2942101",
        "parent": "https://github.com/apache/hive/commit/c587404d4d2f0995af822aa6871d4aadfbf6aeda",
        "bug_id": "hive_0f3998a",
        "file": [
            {
                "sha": "8ad70590037dcac358c83b28f8e151d26ca9b9ce",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "blob_url": "https://github.com/apache/hive/blob/0f3998af3c5e9d8168b32d5085165892c2942101/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "raw_url": "https://github.com/apache/hive/raw/0f3998af3c5e9d8168b32d5085165892c2942101/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "status": "modified",
                "changes": 26,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java?ref=0f3998af3c5e9d8168b32d5085165892c2942101",
                "patch": "@@ -1161,6 +1161,12 @@ public boolean dropTable(String dbName, String tableName) throws MetaException,\n           pm.deletePersistentAll(partGrants);\n         }\n \n+        // TODO# temporary; will be removed with ACID. Otherwise, need to do direct delete w/o get.\n+        List<MTableWrite> mtw = getTableWrites(dbName, tableName, -1, -1);\n+        if (mtw != null && mtw.size() > 0) {\n+          pm.deletePersistentAll(mtw);\n+        }\n+\n         List<MPartitionColumnPrivilege> partColGrants = listTableAllPartitionColumnGrants(dbName,\n             tableName);\n         if (partColGrants != null && partColGrants.size() > 0) {\n@@ -8866,17 +8872,25 @@ public MTableWrite getTableWrite(\n   public List<MTableWrite> getTableWrites(\n       String dbName, String tblName, long from, long to) throws MetaException {\n     boolean success = false;\n+    dbName = HiveStringUtils.normalizeIdentifier(dbName);\n+    tblName = HiveStringUtils.normalizeIdentifier(tblName);\n     Query query = null;\n     openTransaction();\n     try {\n-      query = pm.newQuery(MTableWrite.class,\n-          \"table.tableName == t1 && table.database.name == t2 && writeId > t3 && writeId < t4\");\n-      query.declareParameters(\n-          \"java.lang.String t1, java.lang.String t2, java.lang.Long t3, java.lang.Long t4\");\n+      String queryStr = \"table.tableName == t1 && table.database.name == t2 && writeId > t3\",\n+          argStr = \"java.lang.String t1, java.lang.String t2, java.lang.Long t3\";\n+      if (to >= 0) {\n+        queryStr += \" && writeId < t4\";\n+        argStr += \", java.lang.Long t4\";\n+      }\n+      query = pm.newQuery(MTableWrite.class, queryStr);\n+      query.declareParameters(argStr);\n       query.setOrdering(\"writeId asc\");\n       @SuppressWarnings(\"unchecked\")\n-      List<MTableWrite> writes =\n-        (List<MTableWrite>) query.executeWithArray(tblName, dbName, from, to);\n+      List<MTableWrite> writes = (List<MTableWrite>)(to >= 0\n+         ? query.executeWithArray(tblName, dbName, from, to)\n+         : query.executeWithArray(tblName, dbName, from));\n+      pm.retrieveAll(writes);\n       success = true;\n       return (writes == null || writes.isEmpty()) ? null : new ArrayList<>(writes);\n     } finally {",
                "deletions": 6
            },
            {
                "sha": "dadae4d950b4a24b32043540098c1ce15feaf294",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/FetchOperator.java",
                "blob_url": "https://github.com/apache/hive/blob/0f3998af3c5e9d8168b32d5085165892c2942101/ql/src/java/org/apache/hadoop/hive/ql/exec/FetchOperator.java",
                "raw_url": "https://github.com/apache/hive/raw/0f3998af3c5e9d8168b32d5085165892c2942101/ql/src/java/org/apache/hadoop/hive/ql/exec/FetchOperator.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/FetchOperator.java?ref=0f3998af3c5e9d8168b32d5085165892c2942101",
                "patch": "@@ -374,6 +374,7 @@ public boolean doNext(WritableComparable key, Writable value) throws IOException\n       Utilities.copyTableJobPropertiesToConf(currDesc.getTableDesc(), job);\n       InputFormat inputFormat = getInputFormatFromCache(formatter, job);\n       String inputs = processCurrPathForMmWriteIds(inputFormat);\n+      Utilities.LOG14535.info(\"Setting fetch inputs to \" + inputs);\n       if (inputs == null) return null;\n       job.set(\"mapred.input.dir\", inputs);\n ",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ObjectStore.java"
        ],
        "unit_tests": [
            "TestObjectStore.java"
        ]
    },
    "hive_cf42684": {
        "repo": "hive",
        "message": "HIVE-13090 : Hive metastore crashes on NPE with ZooKeeperTokenStore (Piotr Wikie\u0142, Thejas Nair, reviewed by Ashutosh Chauhan)",
        "commit": "https://github.com/apache/hive/commit/cf4268487a5d65346b79994a2bfada70b20c428e",
        "parent": "https://github.com/apache/hive/commit/e732616392ddf5139f4d32bfb9fc51f352114887",
        "bug_id": "hive_cf42684",
        "file": [
            {
                "sha": "65a10e344e3fb24e5efd3b051bb1eaf26b0179a3",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/thrift/TestZooKeeperTokenStore.java",
                "blob_url": "https://github.com/apache/hive/blob/cf4268487a5d65346b79994a2bfada70b20c428e/itests/hive-unit/src/test/java/org/apache/hadoop/hive/thrift/TestZooKeeperTokenStore.java",
                "raw_url": "https://github.com/apache/hive/raw/cf4268487a5d65346b79994a2bfada70b20c428e/itests/hive-unit/src/test/java/org/apache/hadoop/hive/thrift/TestZooKeeperTokenStore.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/thrift/TestZooKeeperTokenStore.java?ref=cf4268487a5d65346b79994a2bfada70b20c428e",
                "patch": "@@ -122,6 +122,7 @@ public void testTokenStorage() throws Exception {\n \n     assertTrue(ts.removeToken(tokenId));\n     assertEquals(0, ts.getAllDelegationTokenIdentifiers().size());\n+    assertNull(ts.getToken(tokenId));\n   }\n \n   public void testAclNoAuth() throws Exception {",
                "deletions": 0
            },
            {
                "sha": "87b418ebf29f8744a57bdb809a1d0fec7ed47ab5",
                "filename": "shims/common/src/main/java/org/apache/hadoop/hive/thrift/TokenStoreDelegationTokenSecretManager.java",
                "blob_url": "https://github.com/apache/hive/blob/cf4268487a5d65346b79994a2bfada70b20c428e/shims/common/src/main/java/org/apache/hadoop/hive/thrift/TokenStoreDelegationTokenSecretManager.java",
                "raw_url": "https://github.com/apache/hive/raw/cf4268487a5d65346b79994a2bfada70b20c428e/shims/common/src/main/java/org/apache/hadoop/hive/thrift/TokenStoreDelegationTokenSecretManager.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/shims/common/src/main/java/org/apache/hadoop/hive/thrift/TokenStoreDelegationTokenSecretManager.java?ref=cf4268487a5d65346b79994a2bfada70b20c428e",
                "patch": "@@ -330,7 +330,6 @@ public void run() {\n       } catch (Throwable t) {\n         LOGGER.error(\"ExpiredTokenRemover thread received unexpected exception. \"\n             + t, t);\n-        Runtime.getRuntime().exit(-1);\n       }\n     }\n   }",
                "deletions": 1
            },
            {
                "sha": "528e55d28cb7f56b0bdc4edb4f829acb6d6a61ca",
                "filename": "shims/common/src/main/java/org/apache/hadoop/hive/thrift/ZooKeeperTokenStore.java",
                "blob_url": "https://github.com/apache/hive/blob/cf4268487a5d65346b79994a2bfada70b20c428e/shims/common/src/main/java/org/apache/hadoop/hive/thrift/ZooKeeperTokenStore.java",
                "raw_url": "https://github.com/apache/hive/raw/cf4268487a5d65346b79994a2bfada70b20c428e/shims/common/src/main/java/org/apache/hadoop/hive/thrift/ZooKeeperTokenStore.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/shims/common/src/main/java/org/apache/hadoop/hive/thrift/ZooKeeperTokenStore.java?ref=cf4268487a5d65346b79994a2bfada70b20c428e",
                "patch": "@@ -396,6 +396,10 @@ public boolean removeToken(DelegationTokenIdentifier tokenIdentifier) {\n   @Override\n   public DelegationTokenInformation getToken(DelegationTokenIdentifier tokenIdentifier) {\n     byte[] tokenBytes = zkGetData(getTokenPath(tokenIdentifier));\n+    if(tokenBytes == null) {\n+      // The token is already removed.\n+      return null;\n+    }\n     try {\n       return HiveDelegationTokenSupport.decodeDelegationTokenInformation(tokenBytes);\n     } catch (Exception ex) {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ZooKeeperTokenStore.java",
            "TokenStoreDelegationTokenSecretManager.java"
        ],
        "unit_tests": [
            "TestZooKeeperTokenStore.java"
        ]
    },
    "hive_49cc028": {
        "repo": "hive",
        "message": "HIVE-10828 - Insert with schema and dynamic partitions NullPointerException (Eugene Koifman, reviewed by Ashutosh Chauhan)",
        "commit": "https://github.com/apache/hive/commit/49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2",
        "parent": "https://github.com/apache/hive/commit/1293f3d389b73eea672805c49270124f44cbd687",
        "bug_id": "hive_49cc028",
        "file": [
            {
                "sha": "351c26770c2f78727d09fdb48c8495daf88fe202",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java?ref=49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2",
                "patch": "@@ -3864,7 +3864,7 @@ static boolean isRegex(String pattern, HiveConf conf) {\n     }\n     selectStar = selectStar && exprList.getChildCount() == posn + 1;\n \n-    handleInsertStatementSpec(col_list, dest, out_rwsch, inputRR, qb, selExprList);\n+    out_rwsch = handleInsertStatementSpec(col_list, dest, out_rwsch, inputRR, qb, selExprList);\n \n     ArrayList<String> columnNames = new ArrayList<String>();\n     Map<String, ExprNodeDesc> colExprMap = new HashMap<String, ExprNodeDesc>();\n@@ -3909,14 +3909,14 @@ static boolean isRegex(String pattern, HiveConf conf) {\n    * @see #handleInsertStatementSpecPhase1(ASTNode, QBParseInfo, org.apache.hadoop.hive.ql.parse.SemanticAnalyzer.Phase1Ctx)\n    * @throws SemanticException\n    */\n-  private void handleInsertStatementSpec(List<ExprNodeDesc> col_list, String dest,\n+  private RowResolver handleInsertStatementSpec(List<ExprNodeDesc> col_list, String dest,\n                                          RowResolver outputRR, RowResolver inputRR, QB qb,\n                                          ASTNode selExprList) throws SemanticException {\n     //(z,x)\n     List<String> targetTableSchema = qb.getParseInfo().getDestSchemaForClause(dest);//specified in the query\n     if(targetTableSchema == null) {\n       //no insert schema was specified\n-      return;\n+      return outputRR;\n     }\n     if(targetTableSchema.size() != col_list.size()) {\n       Table target = qb.getMetaData().getDestTableForAlias(dest);\n@@ -3959,6 +3959,7 @@ private void handleInsertStatementSpec(List<ExprNodeDesc> col_list, String dest,\n         }\n       }\n     }\n+    RowResolver newOutputRR = new RowResolver();\n     //now make the select produce <regular columns>,<dynamic partition columns> with\n     //where missing columns are NULL-filled\n     for(String f : targetTableColNames) {\n@@ -3967,7 +3968,7 @@ private void handleInsertStatementSpec(List<ExprNodeDesc> col_list, String dest,\n         new_col_list.add(targetCol2Projection.get(f));\n         ColumnInfo ci = targetCol2ColumnInfo.get(f);//todo: is this OK?\n         ci.setInternalName(getColumnInternalName(colListPos));\n-        newSchema.add(ci);\n+        newOutputRR.put(ci.getTabAlias(), ci.getInternalName(), ci);\n       }\n       else {\n         //add new 'synthetic' columns for projections not provided by Select\n@@ -3979,14 +3980,13 @@ private void handleInsertStatementSpec(List<ExprNodeDesc> col_list, String dest,\n         final String tableAlias = null;//this column doesn't come from any table\n         ColumnInfo colInfo = new ColumnInfo(getColumnInternalName(colListPos),\n           exp.getWritableObjectInspector(), tableAlias, false);\n-        newSchema.add(colInfo);\n-        outputRR.addMappingOnly(colInfo.getTabAlias(), colInfo.getInternalName(), colInfo);\n+        newOutputRR.put(colInfo.getTabAlias(), colInfo.getInternalName(), colInfo);\n       }\n       colListPos++;\n     }\n     col_list.clear();\n     col_list.addAll(new_col_list);\n-    outputRR.setRowSchema(new RowSchema(newSchema));\n+    return newOutputRR;\n   }\n   String recommendName(ExprNodeDesc exp, String colAlias) {\n     if (!colAlias.startsWith(autogenColAliasPrfxLbl)) {",
                "deletions": 7
            },
            {
                "sha": "a5352ec2f1d51cf0a2f863656d0b168c8487b6b4",
                "filename": "ql/src/test/queries/clientpositive/insert_into_with_schema2.q",
                "blob_url": "https://github.com/apache/hive/blob/49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2/ql/src/test/queries/clientpositive/insert_into_with_schema2.q",
                "raw_url": "https://github.com/apache/hive/raw/49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2/ql/src/test/queries/clientpositive/insert_into_with_schema2.q",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/insert_into_with_schema2.q?ref=49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2",
                "patch": "@@ -21,3 +21,14 @@ insert into student_acid(grade, age) values(20, 2);\n insert into student_acid(age) values(22);\n \n select * from student_acid;\n+\n+set hive.exec.dynamic.partition.mode=nonstrict;\n+\n+drop table if exists acid_partitioned;\n+create table acid_partitioned (a int, c string)\n+  partitioned by (p int)\n+  clustered by (a) into 1 buckets;\n+\n+insert into acid_partitioned partition (p) (a,p) values(1,2);\n+\n+select * from acid_partitioned;",
                "deletions": 0
            },
            {
                "sha": "32e6e92bba3cdf8bd411371ec4e6d1c955c33bdb",
                "filename": "ql/src/test/results/clientpositive/insert_into_with_schema2.q.out",
                "blob_url": "https://github.com/apache/hive/blob/49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2/ql/src/test/results/clientpositive/insert_into_with_schema2.q.out",
                "raw_url": "https://github.com/apache/hive/raw/49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2/ql/src/test/results/clientpositive/insert_into_with_schema2.q.out",
                "status": "modified",
                "changes": 37,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/insert_into_with_schema2.q.out?ref=49cc02873fb7b1d43d5e1dbb3ef3435c877f61b2",
                "patch": "@@ -96,3 +96,40 @@ POSTHOOK: Input: default@student_acid\n 1\tNULL\n 2\t20\n 22\tNULL\n+PREHOOK: query: drop table if exists acid_partitioned\n+PREHOOK: type: DROPTABLE\n+POSTHOOK: query: drop table if exists acid_partitioned\n+POSTHOOK: type: DROPTABLE\n+PREHOOK: query: create table acid_partitioned (a int, c string)\n+  partitioned by (p int)\n+  clustered by (a) into 1 buckets\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@acid_partitioned\n+POSTHOOK: query: create table acid_partitioned (a int, c string)\n+  partitioned by (p int)\n+  clustered by (a) into 1 buckets\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@acid_partitioned\n+PREHOOK: query: insert into acid_partitioned partition (p) (a,p) values(1,2)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@values__tmp__table__4\n+PREHOOK: Output: default@acid_partitioned\n+POSTHOOK: query: insert into acid_partitioned partition (p) (a,p) values(1,2)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@values__tmp__table__4\n+POSTHOOK: Output: default@acid_partitioned@p=2\n+POSTHOOK: Lineage: acid_partitioned PARTITION(p=2).a EXPRESSION [(values__tmp__table__4)values__tmp__table__4.FieldSchema(name:tmp_values_col1, type:string, comment:), ]\n+POSTHOOK: Lineage: acid_partitioned PARTITION(p=2).c SIMPLE []\n+PREHOOK: query: select * from acid_partitioned\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@acid_partitioned\n+PREHOOK: Input: default@acid_partitioned@p=2\n+#### A masked pattern was here ####\n+POSTHOOK: query: select * from acid_partitioned\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@acid_partitioned\n+POSTHOOK: Input: default@acid_partitioned@p=2\n+#### A masked pattern was here ####\n+1\tNULL\t2",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SemanticAnalyzer.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzer.java"
        ]
    },
    "hive_50177ef": {
        "repo": "hive",
        "message": "HIVE-12202 NPE thrown when reading legacy ACID delta files(missed a file)(Elliot West via Eugene Koifman)",
        "commit": "https://github.com/apache/hive/commit/50177ef69486730c10ee9460870eefe51050826b",
        "parent": "https://github.com/apache/hive/commit/6577f55cd7f21568994638399f9c31bef578b5cc",
        "bug_id": "hive_50177ef",
        "file": [
            {
                "sha": "6a776701fc4228bb9cdfa16bcf2d027ca8456eb7",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidInputFormat.java",
                "blob_url": "https://github.com/apache/hive/blob/50177ef69486730c10ee9460870eefe51050826b/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidInputFormat.java",
                "raw_url": "https://github.com/apache/hive/raw/50177ef69486730c10ee9460870eefe51050826b/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidInputFormat.java",
                "status": "added",
                "changes": 88,
                "additions": 88,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/io/TestAcidInputFormat.java?ref=50177ef69486730c10ee9460870eefe51050826b",
                "patch": "@@ -0,0 +1,88 @@\n+package org.apache.hadoop.hive.ql.io;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.DataInput;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.hadoop.hive.ql.io.AcidInputFormat.DeltaMetaData;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TestAcidInputFormat {\n+\n+  @Mock\n+  private DataInput mockDataInput;\n+\n+  @Test\n+  public void testDeltaMetaDataReadFieldsNoStatementIds() throws Exception {\n+    when(mockDataInput.readLong()).thenReturn(1L, 2L);\n+    when(mockDataInput.readInt()).thenReturn(0);\n+\n+    DeltaMetaData deltaMetaData = new AcidInputFormat.DeltaMetaData();\n+    deltaMetaData.readFields(mockDataInput);\n+\n+    verify(mockDataInput, times(1)).readInt();\n+    assertThat(deltaMetaData.getMinTxnId(), is(1L));\n+    assertThat(deltaMetaData.getMaxTxnId(), is(2L));\n+    assertThat(deltaMetaData.getStmtIds().isEmpty(), is(true));\n+  }\n+\n+  @Test\n+  public void testDeltaMetaDataReadFieldsWithStatementIds() throws Exception {\n+    when(mockDataInput.readLong()).thenReturn(1L, 2L);\n+    when(mockDataInput.readInt()).thenReturn(2, 100, 101);\n+\n+    DeltaMetaData deltaMetaData = new AcidInputFormat.DeltaMetaData();\n+    deltaMetaData.readFields(mockDataInput);\n+\n+    verify(mockDataInput, times(3)).readInt();\n+    assertThat(deltaMetaData.getMinTxnId(), is(1L));\n+    assertThat(deltaMetaData.getMaxTxnId(), is(2L));\n+    assertThat(deltaMetaData.getStmtIds().size(), is(2));\n+    assertThat(deltaMetaData.getStmtIds().get(0), is(100));\n+    assertThat(deltaMetaData.getStmtIds().get(1), is(101));\n+  }\n+\n+  @Test\n+  public void testDeltaMetaConstructWithState() throws Exception {\n+    DeltaMetaData deltaMetaData = new AcidInputFormat.DeltaMetaData(2000L, 2001L, Arrays.asList(97, 98, 99));\n+\n+    assertThat(deltaMetaData.getMinTxnId(), is(2000L));\n+    assertThat(deltaMetaData.getMaxTxnId(), is(2001L));\n+    assertThat(deltaMetaData.getStmtIds().size(), is(3));\n+    assertThat(deltaMetaData.getStmtIds().get(0), is(97));\n+    assertThat(deltaMetaData.getStmtIds().get(1), is(98));\n+    assertThat(deltaMetaData.getStmtIds().get(2), is(99));\n+  }\n+\n+  @Test\n+  public void testDeltaMetaDataReadFieldsWithStatementIdsResetsState() throws Exception {\n+    when(mockDataInput.readLong()).thenReturn(1L, 2L);\n+    when(mockDataInput.readInt()).thenReturn(2, 100, 101);\n+\n+    List<Integer> statementIds = new ArrayList<>();\n+    statementIds.add(97);\n+    statementIds.add(98);\n+    statementIds.add(99);\n+    DeltaMetaData deltaMetaData = new AcidInputFormat.DeltaMetaData(2000L, 2001L, statementIds);\n+    deltaMetaData.readFields(mockDataInput);\n+\n+    verify(mockDataInput, times(3)).readInt();\n+    assertThat(deltaMetaData.getMinTxnId(), is(1L));\n+    assertThat(deltaMetaData.getMaxTxnId(), is(2L));\n+    assertThat(deltaMetaData.getStmtIds().size(), is(2));\n+    assertThat(deltaMetaData.getStmtIds().get(0), is(100));\n+    assertThat(deltaMetaData.getStmtIds().get(1), is(101));\n+  }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AcidInputFormat.java"
        ],
        "unit_tests": [
            "TestAcidInputFormat.java"
        ]
    },
    "hive_d5a22ee": {
        "repo": "hive",
        "message": "HIVE-9404 NPE in org.apache.hadoop.hive.metastore.txn.TxnHandler.determineDatabaseProduct() (Eugene Koifman, reviewed by Alan Gates)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1653337 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/d5a22eec75e07b8b669cd524f0ca3a85db116830",
        "parent": "https://github.com/apache/hive/commit/ec0eb1b65ff2457537c254d0691bb763677950d6",
        "bug_id": "hive_d5a22ee",
        "file": [
            {
                "sha": "abceaf321db790508f897537f1f7e5f5ac070576",
                "filename": "metastore/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandlerNegative.java",
                "blob_url": "https://github.com/apache/hive/blob/d5a22eec75e07b8b669cd524f0ca3a85db116830/metastore/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandlerNegative.java",
                "raw_url": "https://github.com/apache/hive/raw/d5a22eec75e07b8b669cd524f0ca3a85db116830/metastore/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandlerNegative.java",
                "status": "added",
                "changes": 49,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/test/org/apache/hadoop/hive/metastore/txn/TestTxnHandlerNegative.java?ref=d5a22eec75e07b8b669cd524f0ca3a85db116830",
                "patch": "@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.metastore.txn;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.metastore.api.MetaException;\n+import org.junit.Test;\n+\n+public class TestTxnHandlerNegative {\n+  static final private Log LOG = LogFactory.getLog(TestTxnHandlerNegative.class);\n+\n+  /**\n+   * this intentionally sets a bad URL for connection to test error handling logic\n+   * in TxnHandler\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testBadConnection() throws Exception {\n+    HiveConf conf = new HiveConf();\n+    conf.setVar(HiveConf.ConfVars.METASTORECONNECTURLKEY, \"blah\");\n+    TxnHandler txnHandler1 = new TxnHandler(conf);\n+    MetaException e = null;\n+    try {\n+      txnHandler1.getOpenTxns();\n+    }\n+    catch(MetaException ex) {\n+      LOG.info(\"Expected error: \" + ex.getMessage(), ex);\n+      e = ex;\n+    }\n+    assert e != null : \"did not get exception\";\n+  }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [],
        "unit_tests": [
            "TestTxnHandlerNegative.java"
        ]
    },
    "hive_e91f69e": {
        "repo": "hive",
        "message": "HIVE-13855: select INPUT__FILE__NAME throws NPE exception (Aihua Xu, reviewed by Yongzhi Chen)",
        "commit": "https://github.com/apache/hive/commit/e91f69e213f6ee78ad8299cda81079104f7141bb",
        "parent": "https://github.com/apache/hive/commit/e459a67283900393a79e4f69853103cc4fd8a726",
        "bug_id": "hive_e91f69e",
        "file": [
            {
                "sha": "528d663e701eaa13e2cd7da328973637457ff642",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "blob_url": "https://github.com/apache/hive/blob/e91f69e213f6ee78ad8299cda81079104f7141bb/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "raw_url": "https://github.com/apache/hive/raw/e91f69e213f6ee78ad8299cda81079104f7141bb/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java?ref=e91f69e213f6ee78ad8299cda81079104f7141bb",
                "patch": "@@ -387,7 +387,10 @@ private static BaseWork getBaseWork(Configuration conf, String name) {\n \n       path = getPlanPath(conf, name);\n       LOG.info(\"PLAN PATH = \" + path);\n-      assert path != null;\n+      if (path == null) { // Map/reduce plan may not be generated\n+        return null;\n+      }\n+\n       BaseWork gWork = gWorkMap.get(conf).get(path);\n       if (gWork == null) {\n         Path localPath = path;\n@@ -443,12 +446,11 @@ private static BaseWork getBaseWork(Configuration conf, String name) {\n       return gWork;\n     } catch (FileNotFoundException fnf) {\n       // happens. e.g.: no reduce work.\n-      LOG.debug(\"File not found: \" + fnf.getMessage());\n-      LOG.info(\"No plan file found: \"+path);\n+      LOG.debug(\"No plan file found: \" + path, fnf);\n       return null;\n     } catch (Exception e) {\n-      String msg = \"Failed to load plan: \" + path + \": \" + e;\n-      LOG.error(msg, e);\n+      String msg = \"Failed to load plan: \" + path;\n+      LOG.error(\"Failed to load plan: \" + path, e);\n       throw new RuntimeException(msg, e);\n     } finally {\n       SerializationUtilities.releaseKryo(kryo);",
                "deletions": 5
            }
        ],
        "patched_files": [
            "Utilities.java"
        ],
        "unit_tests": [
            "TestUtilities.java"
        ]
    },
    "hive_eb2b7b8": {
        "repo": "hive",
        "message": "HIVE-12798 : CBO: Calcite Operator To Hive Operator (Calcite Return Path): MiniTezCliDriver.vector* queries failures due to NPE in Vectorizer.onExpressionHasNullSafes() (Hari Subramaniyan, reviewed by Matt McCline )",
        "commit": "https://github.com/apache/hive/commit/eb2b7b81f815238cc2b67d701d45aa7618fc8d13",
        "parent": "https://github.com/apache/hive/commit/c8f15f7b802fa0c2f2426a3b29093aba4aebc57f",
        "bug_id": "hive_eb2b7b8",
        "file": [
            {
                "sha": "ee080aad9c365aa73be4c518fc136e43158edf27",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java",
                "blob_url": "https://github.com/apache/hive/blob/eb2b7b81f815238cc2b67d701d45aa7618fc8d13/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java",
                "raw_url": "https://github.com/apache/hive/raw/eb2b7b81f815238cc2b67d701d45aa7618fc8d13/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java?ref=eb2b7b81f815238cc2b67d701d45aa7618fc8d13",
                "patch": "@@ -1911,6 +1911,9 @@ private boolean isBigTableOnlyResults(MapJoinDesc desc) {\n \n   private boolean onExpressionHasNullSafes(MapJoinDesc desc) {\n     boolean[] nullSafes = desc.getNullSafes();\n+    if (nullSafes == null) {\n+\treturn false;\n+    }\n     for (boolean nullSafe : nullSafes) {\n       if (nullSafe) {\n         return true;",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Vectorizer.java"
        ],
        "unit_tests": [
            "TestVectorizer.java"
        ]
    },
    "hive_6447f5c": {
        "repo": "hive",
        "message": "HIVE-12954: NPE with str_to_map on null strings (Marta Kuczora, reviewed by Aihua Xu)",
        "commit": "https://github.com/apache/hive/commit/6447f5cd57d193c6ceb6aaf141fb12f29ac53cd4",
        "parent": "https://github.com/apache/hive/commit/89080f557ad95141e3752d6f5d43455dc0ffb2c6",
        "bug_id": "hive_6447f5c",
        "file": [
            {
                "sha": "093f2a3d6130cca01d137ebe1eb3d3c8416c54d5",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFStringToMap.java",
                "blob_url": "https://github.com/apache/hive/blob/6447f5cd57d193c6ceb6aaf141fb12f29ac53cd4/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFStringToMap.java",
                "raw_url": "https://github.com/apache/hive/raw/6447f5cd57d193c6ceb6aaf141fb12f29ac53cd4/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFStringToMap.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFStringToMap.java?ref=6447f5cd57d193c6ceb6aaf141fb12f29ac53cd4",
                "patch": "@@ -83,11 +83,23 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen\n   public Object evaluate(DeferredObject[] arguments) throws HiveException {\n     ret.clear();\n     String text = (String) soi_text.convert(arguments[0].get());\n+    if (text == null) {\n+      return ret;\n+    }\n+\n     String delimiter1 = (soi_de1 == null) ?\n       default_de1 : (String) soi_de1.convert(arguments[1].get());\n     String delimiter2 = (soi_de2 == null) ?\n       default_de2 : (String) soi_de2.convert(arguments[2].get());\n \n+    if (delimiter1 == null) {\n+      delimiter1 = default_de1;\n+    }\n+\n+    if (delimiter2 == null) {\n+      delimiter2 = default_de2;\n+    }\n+\n     String[] keyValuePairs = text.split(delimiter1);\n \n     for (String keyValuePair : keyValuePairs) {",
                "deletions": 0
            },
            {
                "sha": "1653936284a437f553f435a480e70f0c6e761aab",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFStringToMap.java",
                "blob_url": "https://github.com/apache/hive/blob/6447f5cd57d193c6ceb6aaf141fb12f29ac53cd4/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFStringToMap.java",
                "raw_url": "https://github.com/apache/hive/raw/6447f5cd57d193c6ceb6aaf141fb12f29ac53cd4/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFStringToMap.java",
                "status": "added",
                "changes": 152,
                "additions": 152,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFStringToMap.java?ref=6447f5cd57d193c6ceb6aaf141fb12f29ac53cd4",
                "patch": "@@ -0,0 +1,152 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hive.ql.udf.generic;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hive.ql.exec.UDFArgumentException;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredJavaObject;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredObject;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;\n+import org.junit.Test;\n+\n+public class TestGenericUDFStringToMap {\n+\n+  @Test\n+  public void testStringToMapWithCustomDelimiters() throws HiveException {\n+    GenericUDFStringToMap udf = new GenericUDFStringToMap();\n+    initGenericUDF(udf);\n+    Map<String, String> expResult = new LinkedHashMap<String, String>();\n+    expResult.put(\"key1\", \"value1\");\n+    expResult.put(\"key2\", \"value2\");\n+    expResult.put(\"key3\", \"value3\");\n+    runAndVerify(\"key1=value1;key2=value2;key3=value3\", \";\", \"=\", expResult, udf);\n+  }\n+\n+  @Test\n+  public void testStringToMapWithDefaultDelimiters() throws HiveException {\n+    GenericUDFStringToMap udf = new GenericUDFStringToMap();\n+    initGenericUDFWithNoDelimiters(udf);\n+    Map<String, String> expResult = new LinkedHashMap<String, String>();\n+    expResult.put(\"key1\", \"value1\");\n+    expResult.put(\"key2\", \"value2\");\n+    expResult.put(\"key3\", \"value3\");\n+    runAndVerify(\"key1:value1,key2:value2,key3:value3\", expResult, udf);\n+  }\n+\n+  @Test\n+  public void testStringToMapWithNullDelimiters() throws HiveException {\n+    GenericUDFStringToMap udf = new GenericUDFStringToMap();\n+    initGenericUDF(udf);\n+    Map<String, String> expResult = new LinkedHashMap<String, String>();\n+    expResult.put(\"key1\", \"value1\");\n+    expResult.put(\"key2\", \"value2\");\n+    expResult.put(\"key3\", \"value3\");\n+    runAndVerify(\"key1:value1,key2:value2,key3:value3\", null, null, expResult, udf);\n+  }\n+\n+  @Test\n+  public void testStringToMapWithNullText() throws HiveException {\n+    GenericUDFStringToMap udf = new GenericUDFStringToMap();\n+    initGenericUDFWithNoDelimiters(udf);\n+    Map<String, String> expResult = new LinkedHashMap<String, String>();\n+    runAndVerify(null, expResult, udf);\n+  }\n+\n+  @Test\n+  public void testStringToMapWithEmptyText() throws HiveException {\n+    GenericUDFStringToMap udf = new GenericUDFStringToMap();\n+    initGenericUDFWithNoDelimiters(udf);\n+    Map<String, String> expResult = new LinkedHashMap<String, String>();\n+    expResult.put(\"\", null);\n+    runAndVerify(\"\", expResult, udf);\n+  }\n+\n+  @Test\n+  public void testStringToMapNoKey() throws HiveException {\n+    GenericUDFStringToMap udf = new GenericUDFStringToMap();\n+    initGenericUDFWithNoDelimiters(udf);\n+    Map<String, String> expResult = new LinkedHashMap<String, String>();\n+    expResult.put(\"\", \"value\");\n+    runAndVerify(\":value\", expResult, udf);\n+  }\n+\n+  @Test\n+  public void testStringToMapNoValue() throws HiveException {\n+    GenericUDFStringToMap udf = new GenericUDFStringToMap();\n+    initGenericUDFWithNoDelimiters(udf);\n+    Map<String, String> expResult = new LinkedHashMap<String, String>();\n+    expResult.put(\"key\", \"\");\n+    runAndVerify(\"key:\", expResult, udf);\n+  }\n+\n+  @Test\n+  public void testStringToMapNotMatchingDelimiter() throws HiveException {\n+    GenericUDFStringToMap udf = new GenericUDFStringToMap();\n+    initGenericUDFWithNoDelimiters(udf);\n+    Map<String, String> expResult = new LinkedHashMap<String, String>();\n+    expResult.put(\"key=value\", null);\n+    runAndVerify(\"key=value\", expResult, udf);\n+  }\n+\n+  private void initGenericUDF(GenericUDFStringToMap udf)\n+      throws UDFArgumentException {\n+\n+    ObjectInspector valueOI0 = PrimitiveObjectInspectorFactory.javaStringObjectInspector;\n+    ObjectInspector valueOI1 = PrimitiveObjectInspectorFactory.javaStringObjectInspector;\n+    ObjectInspector valueOI2 = PrimitiveObjectInspectorFactory.javaStringObjectInspector;\n+    ObjectInspector[] arguments = { valueOI0, valueOI1, valueOI2 };\n+    udf.initialize(arguments);\n+  }\n+\n+  private void initGenericUDFWithNoDelimiters(GenericUDFStringToMap udf)\n+      throws UDFArgumentException {\n+\n+    ObjectInspector valueOI0 = PrimitiveObjectInspectorFactory.javaStringObjectInspector;\n+    ObjectInspector[] arguments = { valueOI0 };\n+    udf.initialize(arguments);\n+  }\n+\n+  private void runAndVerify(String text, String delimiter1, String delimiter2,\n+      Map<String, String> expResult, GenericUDF udf) throws HiveException {\n+\n+    DeferredObject valueObj0 = new DeferredJavaObject(text);\n+    DeferredObject valueObj1 = new DeferredJavaObject(delimiter1);\n+    DeferredObject valueObj2 = new DeferredJavaObject(delimiter2);\n+    DeferredObject[] args = { valueObj0, valueObj1, valueObj2 };\n+\n+    @SuppressWarnings(\"unchecked\")\n+    LinkedHashMap<Object, Object> output = (LinkedHashMap<Object, Object>) udf.evaluate(args);\n+    assertTrue(\"str_to_map() test\", expResult.equals(output));\n+  }\n+\n+  private void runAndVerify(String text, Map<String, String> expResult,\n+      GenericUDF udf) throws HiveException {\n+\n+    DeferredObject valueObj0 = new DeferredJavaObject(text);\n+    DeferredObject[] args = { valueObj0 };\n+    @SuppressWarnings(\"unchecked\")\n+    LinkedHashMap<Object, Object> output = (LinkedHashMap<Object, Object>) udf.evaluate(args);\n+    assertTrue(\"str_to_map() test\", expResult.equals(output));\n+  }\n+}\n\\ No newline at end of file",
                "deletions": 0
            }
        ],
        "patched_files": [
            "GenericUDFStringToMap.java"
        ],
        "unit_tests": [
            "TestGenericUDFStringToMap.java"
        ]
    },
    "hive_c81bd2e": {
        "repo": "hive",
        "message": "HIVE-9111: Potential NPE in OrcStruct for list and map types (Prasanth Jayachandran reviewed by Vikram Dixit)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1646046 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/c81bd2ee50772d2434af04f580d8ddc4d2480746",
        "parent": "https://github.com/apache/hive/commit/15ea88cf1788de4b920a8477a1e2f87f6ccb1520",
        "bug_id": "hive_c81bd2e",
        "file": [
            {
                "sha": "2fbdf543d8345a4beed6a953c473a9a9f747c569",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java",
                "blob_url": "https://github.com/apache/hive/blob/c81bd2ee50772d2434af04f580d8ddc4d2480746/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java",
                "raw_url": "https://github.com/apache/hive/raw/c81bd2ee50772d2434af04f580d8ddc4d2480746/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java",
                "status": "modified",
                "changes": 34,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java?ref=c81bd2ee50772d2434af04f580d8ddc4d2480746",
                "patch": "@@ -17,14 +17,6 @@\n  */\n package org.apache.hadoop.hive.ql.io.orc;\n \n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n import org.apache.hadoop.hive.common.type.HiveDecimal;\n import org.apache.hadoop.hive.serde2.objectinspector.ListObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.MapObjectInspector;\n@@ -43,6 +35,14 @@\n import org.apache.hadoop.hive.serde2.typeinfo.UnionTypeInfo;\n import org.apache.hadoop.io.Writable;\n \n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n final public class OrcStruct implements Writable {\n \n   private Object[] fields;\n@@ -346,17 +346,26 @@ public ObjectInspector getMapValueObjectInspector() {\n \n     @Override\n     public Object getMapValueElement(Object map, Object key) {\n+      if (map == null) {\n+        return null;\n+      }\n       return ((Map) map).get(key);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map<Object, Object> getMap(Object map) {\n+      if (map == null) {\n+        return null;\n+      }\n       return (Map) map;\n     }\n \n     @Override\n     public int getMapSize(Object map) {\n+      if (map == null) {\n+        return -1;\n+      }\n       return ((Map) map).size();\n     }\n \n@@ -429,17 +438,26 @@ public ObjectInspector getListElementObjectInspector() {\n \n     @Override\n     public Object getListElement(Object list, int i) {\n+      if (list == null) {\n+        return null;\n+      }\n       return ((List) list).get(i);\n     }\n \n     @Override\n     public int getListLength(Object list) {\n+      if (list == null) {\n+        return -1;\n+      }\n       return ((List) list).size();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<?> getList(Object list) {\n+      if (list == null) {\n+        return null;\n+      }\n       return (List) list;\n     }\n ",
                "deletions": 8
            },
            {
                "sha": "2cb119024ab2e5e1677acd13a5e8f5f0d4dd69e7",
                "filename": "ql/src/test/queries/clientpositive/orc_null_check.q",
                "blob_url": "https://github.com/apache/hive/blob/c81bd2ee50772d2434af04f580d8ddc4d2480746/ql/src/test/queries/clientpositive/orc_null_check.q",
                "raw_url": "https://github.com/apache/hive/raw/c81bd2ee50772d2434af04f580d8ddc4d2480746/ql/src/test/queries/clientpositive/orc_null_check.q",
                "status": "added",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/orc_null_check.q?ref=c81bd2ee50772d2434af04f580d8ddc4d2480746",
                "patch": "@@ -0,0 +1,8 @@\n+create table listtable(l array<string>);\n+create table listtable_orc(l array<string>) stored as orc;\n+\n+insert overwrite table listtable select array(null) from src;\n+insert overwrite table listtable_orc select * from listtable;\n+\n+select size(l) from listtable_orc limit 10;\n+",
                "deletions": 0
            },
            {
                "sha": "093fdff7269fa059b93fbf2dbd5460fb1e2d486c",
                "filename": "ql/src/test/results/clientpositive/orc_null_check.q.out",
                "blob_url": "https://github.com/apache/hive/blob/c81bd2ee50772d2434af04f580d8ddc4d2480746/ql/src/test/results/clientpositive/orc_null_check.q.out",
                "raw_url": "https://github.com/apache/hive/raw/c81bd2ee50772d2434af04f580d8ddc4d2480746/ql/src/test/results/clientpositive/orc_null_check.q.out",
                "status": "added",
                "changes": 52,
                "additions": 52,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/orc_null_check.q.out?ref=c81bd2ee50772d2434af04f580d8ddc4d2480746",
                "patch": "@@ -0,0 +1,52 @@\n+PREHOOK: query: create table listtable(l array<string>)\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@listtable\n+POSTHOOK: query: create table listtable(l array<string>)\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@listtable\n+PREHOOK: query: create table listtable_orc(l array<string>) stored as orc\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@listtable_orc\n+POSTHOOK: query: create table listtable_orc(l array<string>) stored as orc\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@listtable_orc\n+PREHOOK: query: insert overwrite table listtable select array(null) from src\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@src\n+PREHOOK: Output: default@listtable\n+POSTHOOK: query: insert overwrite table listtable select array(null) from src\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@listtable\n+POSTHOOK: Lineage: listtable.l EXPRESSION []\n+PREHOOK: query: insert overwrite table listtable_orc select * from listtable\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@listtable\n+PREHOOK: Output: default@listtable_orc\n+POSTHOOK: query: insert overwrite table listtable_orc select * from listtable\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@listtable\n+POSTHOOK: Output: default@listtable_orc\n+POSTHOOK: Lineage: listtable_orc.l SIMPLE [(listtable)listtable.FieldSchema(name:l, type:array<string>, comment:null), ]\n+PREHOOK: query: select size(l) from listtable_orc limit 10\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@listtable_orc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select size(l) from listtable_orc limit 10\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@listtable_orc\n+#### A masked pattern was here ####\n+-1\n+-1\n+-1\n+-1\n+-1\n+-1\n+-1\n+-1\n+-1\n+-1",
                "deletions": 0
            }
        ],
        "patched_files": [
            "OrcStruct.java"
        ],
        "unit_tests": [
            "TestOrcStruct.java"
        ]
    },
    "hive_b249f00": {
        "repo": "hive",
        "message": "HIVE-10273: Union with partition tables which have no data fails with NPE (Vikram Dixit, reviewed by Gunther Hagleitner)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1673937 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
        "parent": "https://github.com/apache/hive/commit/b7ed17fe74d8f2572b7b359d1723d5de6a5ac425",
        "bug_id": "hive_b249f00",
        "file": [
            {
                "sha": "0a5d839489e3ea79b2d69156c60a23371aaf2cce",
                "filename": "itests/src/test/resources/testconfiguration.properties",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/itests/src/test/resources/testconfiguration.properties",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/itests/src/test/resources/testconfiguration.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/src/test/resources/testconfiguration.properties?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -313,6 +313,7 @@ minitez.query.files=bucket_map_join_tez1.q,\\\n   tez_schema_evolution.q,\\\n   tez_union.q,\\\n   tez_union2.q,\\\n+  tez_union_view.q,\\\n   tez_union_decimal.q,\\\n   tez_union_group_by.q,\\\n   tez_smb_main.q,\\",
                "deletions": 0
            },
            {
                "sha": "319aacbafedeeaedaeefe9db7c9f38867530bfc1",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/optimizer/physical/Vectorizer.java?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -365,6 +365,17 @@ private boolean validateMapWork(MapWork mapWork, boolean isTez) throws SemanticE\n       addMapWorkRules(opRules, vnp);\n       Dispatcher disp = new DefaultRuleDispatcher(vnp, opRules, null);\n       GraphWalker ogw = new DefaultGraphWalker(disp);\n+      if ((mapWork.getAliasToWork() == null) || (mapWork.getAliasToWork().size() == 0)) {\n+        return false;\n+      } else {\n+        for (Operator<?> op : mapWork.getAliasToWork().values()) {\n+          if (op == null) {\n+            LOG.warn(\"Map work has invalid aliases to work with. Fail validation!\");\n+            return false;\n+          }\n+        }\n+      }\n+\n       // iterator the mapper operator tree\n       ArrayList<Node> topNodes = new ArrayList<Node>();\n       topNodes.addAll(mapWork.getAliasToWork().values());",
                "deletions": 0
            },
            {
                "sha": "3217df27bb5731a1dcd5db1ae17c5bdff2e3fbfc",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/plan/MapWork.java",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/java/org/apache/hadoop/hive/ql/plan/MapWork.java",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/java/org/apache/hadoop/hive/ql/plan/MapWork.java",
                "status": "modified",
                "changes": 12,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/plan/MapWork.java?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -334,16 +334,8 @@ public void replaceRoots(Map<Operator<?>, Operator<?>> replacementMap) {\n   public Set<Operator<?>> getAllRootOperators() {\n     Set<Operator<?>> opSet = new LinkedHashSet<Operator<?>>();\n \n-    Map<String, ArrayList<String>> pa = getPathToAliases();\n-    if (pa != null) {\n-      for (List<String> ls : pa.values()) {\n-        for (String a : ls) {\n-          Operator<?> op = getAliasToWork().get(a);\n-          if (op != null ) {\n-            opSet.add(op);\n-          }\n-        }\n-      }\n+    for (Operator<?> op : getAliasToWork().values()) {\n+      opSet.add(op);\n     }\n     return opSet;\n   }",
                "deletions": 10
            },
            {
                "sha": "96f58b21529a46b25f0dd06dba7d61fb6aaf0d7f",
                "filename": "ql/src/test/queries/clientpositive/tez_union.q",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/queries/clientpositive/tez_union.q",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/queries/clientpositive/tez_union.q",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/tez_union.q?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -92,3 +92,21 @@ right outer join src s on u.key = s.key;\n \n select * from ut order by ukey, skey limit 20;\n drop table ut;\n+\n+set hive.vectorized.execution.enabled=true;\n+\n+create table TABLE1(EMP_NAME STRING, EMP_ID INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';\n+\n+create table table2 (EMP_NAME STRING) PARTITIONED BY (EMP_ID INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';\n+\n+CREATE OR REPLACE VIEW TABLE3 as select EMP_NAME, EMP_ID from TABLE1;\n+\n+explain formatted select count(*) from TABLE3;\n+\n+drop table table2;\n+\n+create table table2 (EMP_NAME STRING) PARTITIONED BY (EMP_ID INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';\n+\n+CREATE OR REPLACE VIEW TABLE3 as select EMP_NAME, EMP_ID from TABLE1 UNION ALL select EMP_NAME,EMP_ID from TABLE2;\n+\n+explain formatted select count(*) from TABLE3;",
                "deletions": 0
            },
            {
                "sha": "391dd0592611d7af8484c52efde3a50fb7dfa44d",
                "filename": "ql/src/test/results/clientnegative/join_nonexistent_part.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientnegative/join_nonexistent_part.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientnegative/join_nonexistent_part.q.out",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientnegative/join_nonexistent_part.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -1,2 +1,2 @@\n-Warning: Shuffle Join JOIN[8][tables = [$hdt$_0]] in Stage 'Stage-1:MAPRED' is a cross product\n+Warning: Shuffle Join JOIN[8][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product\n Authorization failed:No privilege 'Select' found for inputs { database:default, table:srcpart, columnName:key}. Use SHOW GRANT to get more details.",
                "deletions": 1
            },
            {
                "sha": "66e944b83665fb9c1272907e5e4f404ade46fcea",
                "filename": "ql/src/test/results/clientpositive/annotate_stats_join.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/annotate_stats_join.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/annotate_stats_join.q.out",
                "status": "modified",
                "changes": 32,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/annotate_stats_join.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -439,22 +439,6 @@ STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n       Map Operator Tree:\n-          TableScan\n-            alias: e\n-            Statistics: Num rows: 48 Data size: 552 Basic stats: COMPLETE Column stats: COMPLETE\n-            Filter Operator\n-              predicate: deptid is not null (type: boolean)\n-              Statistics: Num rows: 48 Data size: 4752 Basic stats: COMPLETE Column stats: COMPLETE\n-              Select Operator\n-                expressions: lastname (type: string), deptid (type: int), locid (type: int)\n-                outputColumnNames: _col0, _col1, _col2\n-                Statistics: Num rows: 48 Data size: 4752 Basic stats: COMPLETE Column stats: COMPLETE\n-                Reduce Output Operator\n-                  key expressions: _col1 (type: int)\n-                  sort order: +\n-                  Map-reduce partition columns: _col1 (type: int)\n-                  Statistics: Num rows: 48 Data size: 4752 Basic stats: COMPLETE Column stats: COMPLETE\n-                  value expressions: _col0 (type: string), _col2 (type: int)\n           TableScan\n             alias: e\n             Statistics: Num rows: 48 Data size: 552 Basic stats: COMPLETE Column stats: COMPLETE\n@@ -487,6 +471,22 @@ STAGE PLANS:\n                   Map-reduce partition columns: _col0 (type: int)\n                   Statistics: Num rows: 6 Data size: 570 Basic stats: COMPLETE Column stats: COMPLETE\n                   value expressions: _col1 (type: string)\n+          TableScan\n+            alias: e\n+            Statistics: Num rows: 48 Data size: 552 Basic stats: COMPLETE Column stats: COMPLETE\n+            Filter Operator\n+              predicate: deptid is not null (type: boolean)\n+              Statistics: Num rows: 48 Data size: 4752 Basic stats: COMPLETE Column stats: COMPLETE\n+              Select Operator\n+                expressions: lastname (type: string), deptid (type: int), locid (type: int)\n+                outputColumnNames: _col0, _col1, _col2\n+                Statistics: Num rows: 48 Data size: 4752 Basic stats: COMPLETE Column stats: COMPLETE\n+                Reduce Output Operator\n+                  key expressions: _col1 (type: int)\n+                  sort order: +\n+                  Map-reduce partition columns: _col1 (type: int)\n+                  Statistics: Num rows: 48 Data size: 4752 Basic stats: COMPLETE Column stats: COMPLETE\n+                  value expressions: _col0 (type: string), _col2 (type: int)\n       Reduce Operator Tree:\n         Join Operator\n           condition map:",
                "deletions": 16
            },
            {
                "sha": "bfc8be8599d73dd3a809e44fe515f8dd65a22557",
                "filename": "ql/src/test/results/clientpositive/auto_join32.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/auto_join32.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/auto_join32.q.out",
                "status": "modified",
                "changes": 30,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/auto_join32.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -391,6 +391,36 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: v\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: ((p = 'bar') and name is not null) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: name (type: string), registration (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Sorted Merge Bucket Map Join Operator\n+                  condition map:\n+                       Inner Join 0 to 1\n+                  keys:\n+                    0 _col0 (type: string)\n+                    1 _col0 (type: string)\n+                  outputColumnNames: _col1, _col3\n+                  Select Operator\n+                    expressions: _col3 (type: string), _col1 (type: string)\n+                    outputColumnNames: _col0, _col1\n+                    Group By Operator\n+                      aggregations: count(DISTINCT _col1)\n+                      keys: _col0 (type: string), _col1 (type: string)\n+                      mode: hash\n+                      outputColumnNames: _col0, _col1, _col2\n+                      Reduce Output Operator\n+                        key expressions: _col0 (type: string), _col1 (type: string)\n+                        sort order: ++\n+                        Map-reduce partition columns: _col0 (type: string)\n       Reduce Operator Tree:\n         Group By Operator\n           aggregations: count(DISTINCT KEY._col1:0._col0)",
                "deletions": 0
            },
            {
                "sha": "72f2a07524b33317726da843d980e51a23132b98",
                "filename": "ql/src/test/results/clientpositive/bucketmapjoin1.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/bucketmapjoin1.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/bucketmapjoin1.q.out",
                "status": "modified",
                "changes": 88,
                "additions": 88,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/bucketmapjoin1.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -125,6 +125,50 @@ STAGE PLANS:\n \n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: a\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: key is not null (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Map Join Operator\n+                condition map:\n+                     Inner Join 0 to 1\n+                keys:\n+                  0 key (type: int)\n+                  1 key (type: int)\n+                outputColumnNames: _col0, _col1, _col7\n+                Position of Big Table: 0\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                BucketMapJoin: true\n+                Select Operator\n+                  expressions: _col0 (type: int), _col1 (type: string), _col7 (type: string)\n+                  outputColumnNames: _col0, _col1, _col2\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  File Output Operator\n+                    compressed: false\n+                    GlobalTableId: 0\n+#### A masked pattern was here ####\n+                    NumFilesPerFileSink: 1\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+#### A masked pattern was here ####\n+                    table:\n+                        input format: org.apache.hadoop.mapred.TextInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                        properties:\n+                          columns _col0,_col1,_col2\n+                          columns.types int:string:string\n+                          escape.delim \\\n+                          hive.serialization.extend.additional.nesting.levels true\n+                          serialization.format 1\n+                          serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                    TotalFiles: 1\n+                    GatherStats: false\n+                    MultiFileSpray: false\n       Local Work:\n         Map Reduce Local Work\n \n@@ -249,6 +293,50 @@ STAGE PLANS:\n \n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: b\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: (key is not null and (ds = '2008-04-08')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Map Join Operator\n+                condition map:\n+                     Inner Join 0 to 1\n+                keys:\n+                  0 key (type: int)\n+                  1 key (type: int)\n+                outputColumnNames: _col0, _col1, _col7\n+                Position of Big Table: 1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                BucketMapJoin: true\n+                Select Operator\n+                  expressions: _col0 (type: int), _col1 (type: string), _col7 (type: string)\n+                  outputColumnNames: _col0, _col1, _col2\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  File Output Operator\n+                    compressed: false\n+                    GlobalTableId: 0\n+#### A masked pattern was here ####\n+                    NumFilesPerFileSink: 1\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+#### A masked pattern was here ####\n+                    table:\n+                        input format: org.apache.hadoop.mapred.TextInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                        properties:\n+                          columns _col0,_col1,_col2\n+                          columns.types int:string:string\n+                          escape.delim \\\n+                          hive.serialization.extend.additional.nesting.levels true\n+                          serialization.format 1\n+                          serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                    TotalFiles: 1\n+                    GatherStats: false\n+                    MultiFileSpray: false\n       Local Work:\n         Map Reduce Local Work\n ",
                "deletions": 0
            },
            {
                "sha": "5389647fb276a3949c93ea0f20d64eb6733a91c7",
                "filename": "ql/src/test/results/clientpositive/correlationoptimizer3.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/correlationoptimizer3.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/correlationoptimizer3.q.out",
                "status": "modified",
                "changes": 60,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/correlationoptimizer3.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -284,21 +284,6 @@ STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n       Map Operator Tree:\n-          TableScan\n-            alias: y\n-            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n-            Filter Operator\n-              predicate: key is not null (type: boolean)\n-              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n-              Select Operator\n-                expressions: key (type: string)\n-                outputColumnNames: _col0\n-                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n-                Reduce Output Operator\n-                  key expressions: _col0 (type: string)\n-                  sort order: +\n-                  Map-reduce partition columns: _col0 (type: string)\n-                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n           TableScan\n             alias: y\n             Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n@@ -330,6 +315,21 @@ STAGE PLANS:\n                   Map-reduce partition columns: _col0 (type: string)\n                   Statistics: Num rows: 13 Data size: 99 Basic stats: COMPLETE Column stats: NONE\n                   value expressions: _col1 (type: string)\n+          TableScan\n+            alias: y\n+            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+            Filter Operator\n+              predicate: key is not null (type: boolean)\n+              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string)\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                Reduce Output Operator\n+                  key expressions: _col0 (type: string)\n+                  sort order: +\n+                  Map-reduce partition columns: _col0 (type: string)\n+                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n           TableScan\n             alias: x\n             Statistics: Num rows: 25 Data size: 191 Basic stats: COMPLETE Column stats: NONE\n@@ -988,21 +988,6 @@ STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n       Map Operator Tree:\n-          TableScan\n-            alias: y\n-            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n-            Filter Operator\n-              predicate: key is not null (type: boolean)\n-              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n-              Select Operator\n-                expressions: key (type: string)\n-                outputColumnNames: _col0\n-                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n-                Reduce Output Operator\n-                  key expressions: _col0 (type: string)\n-                  sort order: +\n-                  Map-reduce partition columns: _col0 (type: string)\n-                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n           TableScan\n             alias: y\n             Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n@@ -1034,6 +1019,21 @@ STAGE PLANS:\n                   Map-reduce partition columns: _col0 (type: string)\n                   Statistics: Num rows: 13 Data size: 99 Basic stats: COMPLETE Column stats: NONE\n                   value expressions: _col1 (type: string)\n+          TableScan\n+            alias: y\n+            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+            Filter Operator\n+              predicate: key is not null (type: boolean)\n+              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string)\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                Reduce Output Operator\n+                  key expressions: _col0 (type: string)\n+                  sort order: +\n+                  Map-reduce partition columns: _col0 (type: string)\n+                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n           TableScan\n             alias: x\n             Statistics: Num rows: 25 Data size: 191 Basic stats: COMPLETE Column stats: NONE",
                "deletions": 30
            },
            {
                "sha": "be518dc6684e52c2b0d388d472b89f5c85cf268f",
                "filename": "ql/src/test/results/clientpositive/correlationoptimizer6.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/correlationoptimizer6.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/correlationoptimizer6.q.out",
                "status": "modified",
                "changes": 32,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/correlationoptimizer6.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -3031,22 +3031,6 @@ STAGE PLANS:\n                     Map-reduce partition columns: _col0 (type: string)\n                     Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n                     value expressions: _col1 (type: bigint)\n-          TableScan\n-            alias: x\n-            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n-            Filter Operator\n-              predicate: key is not null (type: boolean)\n-              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n-              Select Operator\n-                expressions: key (type: string), value (type: string)\n-                outputColumnNames: _col0, _col1\n-                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n-                Reduce Output Operator\n-                  key expressions: _col0 (type: string)\n-                  sort order: +\n-                  Map-reduce partition columns: _col0 (type: string)\n-                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n-                  value expressions: _col1 (type: string)\n           TableScan\n             alias: y\n             Statistics: Num rows: 25 Data size: 191 Basic stats: COMPLETE Column stats: NONE\n@@ -3069,6 +3053,22 @@ STAGE PLANS:\n                     Map-reduce partition columns: _col0 (type: string)\n                     Statistics: Num rows: 13 Data size: 99 Basic stats: COMPLETE Column stats: NONE\n                     value expressions: _col1 (type: bigint)\n+          TableScan\n+            alias: x\n+            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+            Filter Operator\n+              predicate: key is not null (type: boolean)\n+              Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string), value (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                Reduce Output Operator\n+                  key expressions: _col0 (type: string)\n+                  sort order: +\n+                  Map-reduce partition columns: _col0 (type: string)\n+                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                  value expressions: _col1 (type: string)\n       Reduce Operator Tree:\n         Demux Operator\n           Statistics: Num rows: 513 Data size: 5411 Basic stats: COMPLETE Column stats: NONE",
                "deletions": 16
            },
            {
                "sha": "c5cb8b9908cc25710ec57f21e5849e2069dedcda",
                "filename": "ql/src/test/results/clientpositive/groupby_sort_6.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/groupby_sort_6.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/groupby_sort_6.q.out",
                "status": "modified",
                "changes": 54,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/groupby_sort_6.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -66,6 +66,33 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: t1\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: (ds = '1') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string)\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Group By Operator\n+                  aggregations: count(1)\n+                  keys: _col0 (type: string)\n+                  mode: hash\n+                  outputColumnNames: _col0, _col1\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: _col0 (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: _col0 (type: string)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    tag: -1\n+                    value expressions: _col1 (type: bigint)\n+                    auto parallelism: false\n       Needs Tagging: false\n       Reduce Operator Tree:\n         Group By Operator\n@@ -208,6 +235,33 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: t1\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: (ds = '1') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string)\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Group By Operator\n+                  aggregations: count(1)\n+                  keys: _col0 (type: string)\n+                  mode: hash\n+                  outputColumnNames: _col0, _col1\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: _col0 (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: _col0 (type: string)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    tag: -1\n+                    value expressions: _col1 (type: bigint)\n+                    auto parallelism: false\n       Needs Tagging: false\n       Reduce Operator Tree:\n         Group By Operator",
                "deletions": 0
            },
            {
                "sha": "73038c34cb24804bc1f3338e8864663f701bcac7",
                "filename": "ql/src/test/results/clientpositive/input23.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/input23.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/input23.q.out",
                "status": "modified",
                "changes": 22,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/input23.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -1,4 +1,4 @@\n-Warning: Shuffle Join JOIN[9][tables = [$hdt$_0]] in Stage 'Stage-1:MAPRED' is a cross product\n+Warning: Shuffle Join JOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product\n PREHOOK: query: explain extended\n  select * from srcpart a join srcpart b where a.ds = '2008-04-08' and a.hr = '11' and b.ds = '2008-04-08' and b.hr = '14' limit 5\n PREHOOK: type: QUERY\n@@ -79,6 +79,24 @@ STAGE PLANS:\n                 tag: 0\n                 value expressions: _col0 (type: string), _col1 (type: string)\n                 auto parallelism: false\n+          TableScan\n+            alias: a\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: ((ds = '2008-04-08') and (hr = '14')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string), value (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Reduce Output Operator\n+                  sort order: \n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  tag: 1\n+                  value expressions: _col0 (type: string), _col1 (type: string)\n+                  auto parallelism: false\n       Path -> Alias:\n #### A masked pattern was here ####\n       Path -> Partition:\n@@ -175,7 +193,7 @@ STAGE PLANS:\n       Processor Tree:\n         ListSink\n \n-Warning: Shuffle Join JOIN[9][tables = [$hdt$_0]] in Stage 'Stage-1:MAPRED' is a cross product\n+Warning: Shuffle Join JOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Stage-1:MAPRED' is a cross product\n PREHOOK: query: select * from srcpart a join srcpart b where a.ds = '2008-04-08' and a.hr = '11' and b.ds = '2008-04-08' and b.hr = '14' limit 5\n PREHOOK: type: QUERY\n PREHOOK: Input: default@srcpart",
                "deletions": 2
            },
            {
                "sha": "1b24aa672a3c37bd57dad18abeed827dcc244200",
                "filename": "ql/src/test/results/clientpositive/input26.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/input26.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/input26.q.out",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/input26.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -87,6 +87,24 @@ STAGE PLANS:\n \n   Stage: Stage-3\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: a\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: ((ds = '2008-04-08') and (hr = '14')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string), value (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Limit\n+                  Number of rows: 5\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Reduce Output Operator\n+                    sort order: \n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    value expressions: _col0 (type: string), _col1 (type: string)\n       Reduce Operator Tree:\n         Select Operator\n           expressions: VALUE._col0 (type: string), VALUE._col1 (type: string)",
                "deletions": 0
            },
            {
                "sha": "678ddb8c0a938832fcaaaace1218e9db8f1e0247",
                "filename": "ql/src/test/results/clientpositive/join_cond_pushdown_unqual2.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/join_cond_pushdown_unqual2.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/join_cond_pushdown_unqual2.q.out",
                "status": "modified",
                "changes": 24,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/join_cond_pushdown_unqual2.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -80,18 +80,6 @@ STAGE PLANS:\n                 Map-reduce partition columns: p_name (type: string)\n                 Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n                 value expressions: p_partkey (type: int), p_mfgr (type: string), p_brand (type: string), p_type (type: string), p_size (type: int), p_container (type: string), p_retailprice (type: double), p_comment (type: string)\n-          TableScan\n-            alias: p4\n-            Statistics: Num rows: 26 Data size: 3147 Basic stats: COMPLETE Column stats: NONE\n-            Filter Operator\n-              predicate: p_name is not null (type: boolean)\n-              Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n-              Reduce Output Operator\n-                key expressions: p_name (type: string)\n-                sort order: +\n-                Map-reduce partition columns: p_name (type: string)\n-                Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n-                value expressions: p_partkey (type: int), p_mfgr (type: string), p_brand (type: string), p_type (type: string), p_size (type: int), p_container (type: string), p_retailprice (type: double), p_comment (type: string)\n           TableScan\n             alias: p2\n             Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n@@ -116,6 +104,18 @@ STAGE PLANS:\n                 Map-reduce partition columns: p3_name (type: string)\n                 Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n                 value expressions: p3_partkey (type: int), p3_mfgr (type: string), p3_brand (type: string), p3_type (type: string), p3_size (type: int), p3_container (type: string), p3_retailprice (type: double), p3_comment (type: string)\n+          TableScan\n+            alias: p4\n+            Statistics: Num rows: 26 Data size: 3147 Basic stats: COMPLETE Column stats: NONE\n+            Filter Operator\n+              predicate: p_name is not null (type: boolean)\n+              Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n+              Reduce Output Operator\n+                key expressions: p_name (type: string)\n+                sort order: +\n+                Map-reduce partition columns: p_name (type: string)\n+                Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n+                value expressions: p_partkey (type: int), p_mfgr (type: string), p_brand (type: string), p_type (type: string), p_size (type: int), p_container (type: string), p_retailprice (type: double), p_comment (type: string)\n       Reduce Operator Tree:\n         Join Operator\n           condition map:",
                "deletions": 12
            },
            {
                "sha": "4668eb1d59e1b705c9562d857c3731bbb3fa01b5",
                "filename": "ql/src/test/results/clientpositive/join_cond_pushdown_unqual4.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/join_cond_pushdown_unqual4.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/join_cond_pushdown_unqual4.q.out",
                "status": "modified",
                "changes": 24,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/join_cond_pushdown_unqual4.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -82,18 +82,6 @@ STAGE PLANS:\n                 Map-reduce partition columns: p_name (type: string)\n                 Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n                 value expressions: p_partkey (type: int), p_mfgr (type: string), p_brand (type: string), p_type (type: string), p_size (type: int), p_container (type: string), p_retailprice (type: double), p_comment (type: string)\n-          TableScan\n-            alias: p4\n-            Statistics: Num rows: 26 Data size: 3147 Basic stats: COMPLETE Column stats: NONE\n-            Filter Operator\n-              predicate: p_name is not null (type: boolean)\n-              Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n-              Reduce Output Operator\n-                key expressions: p_name (type: string)\n-                sort order: +\n-                Map-reduce partition columns: p_name (type: string)\n-                Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n-                value expressions: p_partkey (type: int), p_mfgr (type: string), p_brand (type: string), p_type (type: string), p_size (type: int), p_container (type: string), p_retailprice (type: double), p_comment (type: string)\n           TableScan\n             alias: p2\n             Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n@@ -118,6 +106,18 @@ STAGE PLANS:\n                 Map-reduce partition columns: p3_name (type: string)\n                 Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n                 value expressions: p3_partkey (type: int), p3_mfgr (type: string), p3_brand (type: string), p3_type (type: string), p3_size (type: int), p3_container (type: string), p3_retailprice (type: double), p3_comment (type: string)\n+          TableScan\n+            alias: p4\n+            Statistics: Num rows: 26 Data size: 3147 Basic stats: COMPLETE Column stats: NONE\n+            Filter Operator\n+              predicate: p_name is not null (type: boolean)\n+              Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n+              Reduce Output Operator\n+                key expressions: p_name (type: string)\n+                sort order: +\n+                Map-reduce partition columns: p_name (type: string)\n+                Statistics: Num rows: 13 Data size: 1573 Basic stats: COMPLETE Column stats: NONE\n+                value expressions: p_partkey (type: int), p_mfgr (type: string), p_brand (type: string), p_type (type: string), p_size (type: int), p_container (type: string), p_retailprice (type: double), p_comment (type: string)\n       Reduce Operator Tree:\n         Join Operator\n           condition map:",
                "deletions": 12
            },
            {
                "sha": "e703e0b33b5961221b32081b0148dc21ad40a1da",
                "filename": "ql/src/test/results/clientpositive/join_view.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/join_view.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/join_view.q.out",
                "status": "modified",
                "changes": 25,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/join_view.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -49,6 +49,31 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: invites\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: (ds = '2011-09-01') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Reduce Output Operator\n+                key expressions: '2011-09-01' (type: string)\n+                sort order: +\n+                Map-reduce partition columns: '2011-09-01' (type: string)\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                value expressions: bar (type: string)\n+          TableScan\n+            alias: invites2\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: (ds = '2011-09-01') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Reduce Output Operator\n+                key expressions: '2011-09-01' (type: string)\n+                sort order: +\n+                Map-reduce partition columns: '2011-09-01' (type: string)\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                value expressions: foo (type: int)\n       Reduce Operator Tree:\n         Join Operator\n           condition map:",
                "deletions": 0
            },
            {
                "sha": "e55efd599a93dee4bf91900d542cdbaa08ae57a0",
                "filename": "ql/src/test/results/clientpositive/metadataonly1.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/metadataonly1.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/metadataonly1.q.out",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/metadataonly1.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -36,6 +36,26 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: test1\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Select Operator\n+              expressions: ds (type: string)\n+              outputColumnNames: _col0\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Group By Operator\n+                aggregations: max(_col0)\n+                mode: hash\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: NONE\n+                Reduce Output Operator\n+                  sort order: \n+                  Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: NONE\n+                  tag: -1\n+                  value expressions: _col0 (type: string)\n+                  auto parallelism: false\n       Needs Tagging: false\n       Reduce Operator Tree:\n         Group By Operator",
                "deletions": 0
            },
            {
                "sha": "8a94d62f2be4ff0f594c14f5e8342fc8b83c66d9",
                "filename": "ql/src/test/results/clientpositive/nullgroup5.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/nullgroup5.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/nullgroup5.q.out",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/nullgroup5.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -56,6 +56,25 @@ STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n       Map Operator Tree:\n+          TableScan\n+            alias: x\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: (ds = '2009-04-05') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string), value (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  File Output Operator\n+                    compressed: false\n+                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    table:\n+                        input format: org.apache.hadoop.mapred.TextInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n           TableScan\n             alias: y\n             Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE",
                "deletions": 0
            },
            {
                "sha": "1f4becf14aa10158a88db1e2c95b76ec068115bd",
                "filename": "ql/src/test/results/clientpositive/optimize_nullscan.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/optimize_nullscan.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/optimize_nullscan.q.out",
                "status": "modified",
                "changes": 122,
                "additions": 80,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/optimize_nullscan.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -176,6 +176,29 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: srcpart\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: false (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Group By Operator\n+                aggregations: count(key)\n+                keys: key (type: string)\n+                mode: hash\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Reduce Output Operator\n+                  key expressions: _col0 (type: string)\n+                  sort order: +\n+                  Map-reduce partition columns: _col0 (type: string)\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  tag: -1\n+                  value expressions: _col1 (type: bigint)\n+                  auto parallelism: false\n       Needs Tagging: false\n       Reduce Operator Tree:\n         Group By Operator\n@@ -534,15 +557,6 @@ STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n       Map Operator Tree:\n-          TableScan\n-            GatherStats: false\n-            Reduce Output Operator\n-              key expressions: _col0 (type: string)\n-              sort order: +\n-              Map-reduce partition columns: _col0 (type: string)\n-              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n-              tag: 1\n-              auto parallelism: false\n           TableScan\n             alias: src\n             Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n@@ -562,6 +576,15 @@ STAGE PLANS:\n                   Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n                   tag: 0\n                   auto parallelism: false\n+          TableScan\n+            GatherStats: false\n+            Reduce Output Operator\n+              key expressions: _col0 (type: string)\n+              sort order: +\n+              Map-reduce partition columns: _col0 (type: string)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              tag: 1\n+              auto parallelism: false\n       Path -> Alias:\n         -mr-10003default.src{} [a:src]\n #### A masked pattern was here ####\n@@ -1510,14 +1533,6 @@ STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n       Map Operator Tree:\n-          TableScan\n-            GatherStats: false\n-            Reduce Output Operator\n-              sort order: \n-              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n-              tag: 1\n-              value expressions: _col0 (type: string)\n-              auto parallelism: false\n           TableScan\n             alias: src\n             Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n@@ -1536,6 +1551,14 @@ STAGE PLANS:\n                   tag: 0\n                   value expressions: _col0 (type: string)\n                   auto parallelism: false\n+          TableScan\n+            GatherStats: false\n+            Reduce Output Operator\n+              sort order: \n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              tag: 1\n+              value expressions: _col0 (type: string)\n+              auto parallelism: false\n       Path -> Alias:\n         -mr-10003default.src{} [a:src]\n #### A masked pattern was here ####\n@@ -1752,6 +1775,21 @@ STAGE PLANS:\n                 Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n                 tag: 0\n                 auto parallelism: false\n+          TableScan\n+            alias: srcpart\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: false (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Reduce Output Operator\n+                key expressions: key (type: string)\n+                sort order: +\n+                Map-reduce partition columns: key (type: string)\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                tag: 1\n+                auto parallelism: false\n       Path -> Alias:\n         -mr-10004default.src{} [null-subquery2:a-subquery2:src]\n       Path -> Partition:\n@@ -1831,31 +1869,6 @@ STAGE PLANS:\n   Stage: Stage-2\n     Map Reduce\n       Map Operator Tree:\n-          TableScan\n-            GatherStats: false\n-            Union\n-              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n-              File Output Operator\n-                compressed: false\n-                GlobalTableId: 0\n-#### A masked pattern was here ####\n-                NumFilesPerFileSink: 1\n-                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n-#### A masked pattern was here ####\n-                table:\n-                    input format: org.apache.hadoop.mapred.TextInputFormat\n-                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n-                    properties:\n-                      columns _col0\n-                      columns.types string\n-                      escape.delim \\\n-                      hive.serialization.extend.additional.nesting.levels true\n-                      serialization.format 1\n-                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n-                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n-                TotalFiles: 1\n-                GatherStats: false\n-                MultiFileSpray: false\n           TableScan\n             alias: src\n             Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n@@ -1891,6 +1904,31 @@ STAGE PLANS:\n                     TotalFiles: 1\n                     GatherStats: false\n                     MultiFileSpray: false\n+          TableScan\n+            GatherStats: false\n+            Union\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              File Output Operator\n+                compressed: false\n+                GlobalTableId: 0\n+#### A masked pattern was here ####\n+                NumFilesPerFileSink: 1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+#### A masked pattern was here ####\n+                table:\n+                    input format: org.apache.hadoop.mapred.TextInputFormat\n+                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                    properties:\n+                      columns _col0\n+                      columns.types string\n+                      escape.delim \\\n+                      hive.serialization.extend.additional.nesting.levels true\n+                      serialization.format 1\n+                      serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                TotalFiles: 1\n+                GatherStats: false\n+                MultiFileSpray: false\n       Path -> Alias:\n         -mr-10003default.src{} [null-subquery1:a-subquery1:src]\n #### A masked pattern was here ####",
                "deletions": 42
            },
            {
                "sha": "cfd03e23ce354fdb8dde6f64b67af02e6025fa09",
                "filename": "ql/src/test/results/clientpositive/partition_boolexpr.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/partition_boolexpr.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/partition_boolexpr.q.out",
                "status": "modified",
                "changes": 32,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/partition_boolexpr.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -84,6 +84,22 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: srcpart\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: false (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Group By Operator\n+                aggregations: count(1)\n+                mode: hash\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                Reduce Output Operator\n+                  sort order: \n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  value expressions: _col0 (type: bigint)\n       Reduce Operator Tree:\n         Group By Operator\n           aggregations: count(VALUE._col0)\n@@ -253,6 +269,22 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: srcpart\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: false (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Group By Operator\n+                aggregations: count(1)\n+                mode: hash\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                Reduce Output Operator\n+                  sort order: \n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  value expressions: _col0 (type: bigint)\n       Reduce Operator Tree:\n         Group By Operator\n           aggregations: count(VALUE._col0)",
                "deletions": 0
            },
            {
                "sha": "a13ef7ae6e9412ad17d02ac43e202b8e9a63bd36",
                "filename": "ql/src/test/results/clientpositive/ppd_union_view.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/ppd_union_view.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/ppd_union_view.q.out",
                "status": "modified",
                "changes": 80,
                "additions": 80,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/ppd_union_view.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -331,6 +331,45 @@ STAGE PLANS:\n   Stage: Stage-2\n     Map Reduce\n       Map Operator Tree:\n+          TableScan\n+            alias: t1_new\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: (ds = '2011-10-13') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string), value (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 1 Data size: 15 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    expressions: _col0 (type: string), _col1 (type: string), '2011-10-13' (type: string)\n+                    outputColumnNames: _col0, _col1, _col2\n+                    Statistics: Num rows: 1 Data size: 15 Basic stats: COMPLETE Column stats: NONE\n+                    File Output Operator\n+                      compressed: false\n+                      GlobalTableId: 0\n+#### A masked pattern was here ####\n+                      NumFilesPerFileSink: 1\n+                      Statistics: Num rows: 1 Data size: 15 Basic stats: COMPLETE Column stats: NONE\n+#### A masked pattern was here ####\n+                      table:\n+                          input format: org.apache.hadoop.mapred.TextInputFormat\n+                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                          properties:\n+                            columns _col0,_col1,_col2\n+                            columns.types string:string:string\n+                            escape.delim \\\n+                            hive.serialization.extend.additional.nesting.levels true\n+                            serialization.format 1\n+                            serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                      TotalFiles: 1\n+                      GatherStats: false\n+                      MultiFileSpray: false\n           TableScan\n             GatherStats: false\n             Union\n@@ -465,6 +504,47 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-3\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: t1_old\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: ((ds = '2011-10-15') and keymap is not null) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: keymap (type: string), value (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Reduce Output Operator\n+                  key expressions: _col0 (type: string)\n+                  sort order: +\n+                  Map-reduce partition columns: _col0 (type: string)\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  tag: 0\n+                  value expressions: _col1 (type: string)\n+                  auto parallelism: false\n+          TableScan\n+            alias: t1_mapping\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: (('2011-10-15' = ds) and keymap is not null) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: string), keymap (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Reduce Output Operator\n+                  key expressions: _col1 (type: string)\n+                  sort order: +\n+                  Map-reduce partition columns: _col1 (type: string)\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  tag: 1\n+                  value expressions: _col0 (type: string)\n+                  auto parallelism: false\n       Needs Tagging: true\n       Reduce Operator Tree:\n         Join Operator",
                "deletions": 0
            },
            {
                "sha": "fa714b8a9c09761ce55f512a76e149563f0dfe6c",
                "filename": "ql/src/test/results/clientpositive/reduce_deduplicate.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/reduce_deduplicate.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/reduce_deduplicate.q.out",
                "status": "modified",
                "changes": 34,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/reduce_deduplicate.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -382,6 +382,40 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: complex_tbl_2\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: (ds = '2010-03-29') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: aet (type: string), aes (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Transform Operator\n+                  command: cat\n+                  output info:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      properties:\n+                        columns _col0,_col1,_col2,_col3,_col4,_col5,_col6\n+                        columns.types string,string,int,string,bigint,string,string\n+                        field.delim 9\n+                        serialization.format 9\n+                        serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: _col1 (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: _col1 (type: string)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    tag: -1\n+                    value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int), _col3 (type: string), _col4 (type: bigint), _col5 (type: string), _col6 (type: string)\n+                    auto parallelism: false\n       Needs Tagging: false\n       Reduce Operator Tree:\n         Select Operator",
                "deletions": 0
            },
            {
                "sha": "9891cbbeb963be1b3d7a30036464481b138fd155",
                "filename": "ql/src/test/results/clientpositive/sample6.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/sample6.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/sample6.q.out",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/sample6.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -3195,6 +3195,26 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: s\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: true\n+              predicate: (((hash(key) & 2147483647) % 2) = 0) (type: boolean)\n+              sampleDesc: BUCKET 1 OUT OF 2\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: key (type: int), value (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Reduce Output Operator\n+                  key expressions: _col0 (type: int), _col1 (type: string)\n+                  sort order: ++\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  tag: -1\n+                  auto parallelism: false\n       Needs Tagging: false\n       Reduce Operator Tree:\n         Select Operator",
                "deletions": 0
            },
            {
                "sha": "9530be11299c683a19bcce90895adbf8e088370c",
                "filename": "ql/src/test/results/clientpositive/smb_mapjoin9.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/smb_mapjoin9.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/smb_mapjoin9.q.out",
                "status": "modified",
                "changes": 80,
                "additions": 80,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/smb_mapjoin9.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -112,6 +112,46 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: a\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: (key is not null and (ds = '2010-10-15')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Sorted Merge Bucket Map Join Operator\n+                condition map:\n+                     Inner Join 0 to 1\n+                keys:\n+                  0 key (type: int)\n+                  1 key (type: int)\n+                outputColumnNames: _col0, _col6, _col7\n+                Position of Big Table: 0\n+                Select Operator\n+                  expressions: _col6 (type: int), _col7 (type: string), '2010-10-15' (type: string), _col0 (type: int)\n+                  outputColumnNames: _col0, _col1, _col2, _col3\n+                  File Output Operator\n+                    compressed: false\n+                    GlobalTableId: 0\n+#### A masked pattern was here ####\n+                    NumFilesPerFileSink: 1\n+#### A masked pattern was here ####\n+                    table:\n+                        input format: org.apache.hadoop.mapred.TextInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                        properties:\n+                          columns _col0,_col1,_col2,_col3\n+                          columns.types int:string:string:int\n+                          escape.delim \\\n+                          hive.serialization.extend.additional.nesting.levels true\n+                          serialization.format 1\n+                          serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                    TotalFiles: 1\n+                    GatherStats: false\n+                    MultiFileSpray: false\n \n   Stage: Stage-0\n     Fetch Operator\n@@ -231,6 +271,46 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: b\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            GatherStats: false\n+            Filter Operator\n+              isSamplingPred: false\n+              predicate: (key is not null and (ds = '2010-10-15')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Sorted Merge Bucket Map Join Operator\n+                condition map:\n+                     Inner Join 0 to 1\n+                keys:\n+                  0 key (type: int)\n+                  1 key (type: int)\n+                outputColumnNames: _col0, _col6, _col7\n+                Position of Big Table: 1\n+                Select Operator\n+                  expressions: _col6 (type: int), _col7 (type: string), '2010-10-15' (type: string), _col0 (type: int)\n+                  outputColumnNames: _col0, _col1, _col2, _col3\n+                  File Output Operator\n+                    compressed: false\n+                    GlobalTableId: 0\n+#### A masked pattern was here ####\n+                    NumFilesPerFileSink: 1\n+#### A masked pattern was here ####\n+                    table:\n+                        input format: org.apache.hadoop.mapred.TextInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                        properties:\n+                          columns _col0,_col1,_col2,_col3\n+                          columns.types int:string:string:int\n+                          escape.delim \\\n+                          hive.serialization.extend.additional.nesting.levels true\n+                          serialization.format 1\n+                          serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                    TotalFiles: 1\n+                    GatherStats: false\n+                    MultiFileSpray: false\n \n   Stage: Stage-0\n     Fetch Operator",
                "deletions": 0
            },
            {
                "sha": "c537b950d570be6dab5df5aedcb077a6a3451dbf",
                "filename": "ql/src/test/results/clientpositive/spark/auto_join32.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/auto_join32.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/auto_join32.q.out",
                "status": "modified",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/spark/auto_join32.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -426,6 +426,32 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Filter Operator\n+                    predicate: (name is not null and (p = 'bar')) (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Sorted Merge Bucket Map Join Operator\n+                      condition map:\n+                           Inner Join 0 to 1\n+                      keys:\n+                        0 name (type: string)\n+                        1 name (type: string)\n+                      outputColumnNames: _col0, _col9\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      Group By Operator\n+                        aggregations: count(DISTINCT _col9)\n+                        keys: _col0 (type: string), _col9 (type: string)\n+                        mode: hash\n+                        outputColumnNames: _col0, _col1, _col2\n+                        Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                        Reduce Output Operator\n+                          key expressions: _col0 (type: string), _col1 (type: string)\n+                          sort order: ++\n+                          Map-reduce partition columns: _col0 (type: string)\n+                          Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n         Reducer 2 \n             Reduce Operator Tree:\n               Group By Operator",
                "deletions": 0
            },
            {
                "sha": "44f4d0c045b9623a20964117b9f64214e9cc9231",
                "filename": "ql/src/test/results/clientpositive/spark/bucketmapjoin1.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/bucketmapjoin1.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/bucketmapjoin1.q.out",
                "status": "modified",
                "changes": 120,
                "additions": 120,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/spark/bucketmapjoin1.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -101,6 +101,20 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 2 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: b\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: false\n+                    predicate: (key is not null and (ds = '2008-04-08')) (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Spark HashTable Sink Operator\n+                      keys:\n+                        0 key (type: int)\n+                        1 key (type: int)\n+                      Position of Big Table: 0\n             Local Work:\n               Map Reduce Local Work\n                 Bucket Mapjoin Context:\n@@ -112,6 +126,52 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: a\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: false\n+                    predicate: key is not null (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Map Join Operator\n+                      condition map:\n+                           Inner Join 0 to 1\n+                      keys:\n+                        0 key (type: int)\n+                        1 key (type: int)\n+                      outputColumnNames: _col0, _col1, _col7\n+                      input vertices:\n+                        1 Map 2\n+                      Position of Big Table: 0\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      BucketMapJoin: true\n+                      Select Operator\n+                        expressions: _col0 (type: int), _col1 (type: string), _col7 (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                        File Output Operator\n+                          compressed: false\n+                          GlobalTableId: 0\n+#### A masked pattern was here ####\n+                          NumFilesPerFileSink: 1\n+                          Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+#### A masked pattern was here ####\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              properties:\n+                                columns _col0,_col1,_col2\n+                                columns.types int:string:string\n+                                escape.delim \\\n+                                hive.serialization.extend.additional.nesting.levels true\n+                                serialization.format 1\n+                                serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                          TotalFiles: 1\n+                          GatherStats: false\n+                          MultiFileSpray: false\n             Local Work:\n               Map Reduce Local Work\n                 Bucket Mapjoin Context:\n@@ -215,6 +275,20 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: a\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: false\n+                    predicate: key is not null (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Spark HashTable Sink Operator\n+                      keys:\n+                        0 key (type: int)\n+                        1 key (type: int)\n+                      Position of Big Table: 1\n             Local Work:\n               Map Reduce Local Work\n                 Bucket Mapjoin Context:\n@@ -226,6 +300,52 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 2 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: b\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: false\n+                    predicate: (key is not null and (ds = '2008-04-08')) (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Map Join Operator\n+                      condition map:\n+                           Inner Join 0 to 1\n+                      keys:\n+                        0 key (type: int)\n+                        1 key (type: int)\n+                      outputColumnNames: _col0, _col1, _col7\n+                      input vertices:\n+                        0 Map 1\n+                      Position of Big Table: 1\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      BucketMapJoin: true\n+                      Select Operator\n+                        expressions: _col0 (type: int), _col1 (type: string), _col7 (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                        File Output Operator\n+                          compressed: false\n+                          GlobalTableId: 0\n+#### A masked pattern was here ####\n+                          NumFilesPerFileSink: 1\n+                          Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+#### A masked pattern was here ####\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              properties:\n+                                columns _col0,_col1,_col2\n+                                columns.types int:string:string\n+                                escape.delim \\\n+                                hive.serialization.extend.additional.nesting.levels true\n+                                serialization.format 1\n+                                serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                          TotalFiles: 1\n+                          GatherStats: false\n+                          MultiFileSpray: false\n             Local Work:\n               Map Reduce Local Work\n                 Bucket Mapjoin Context:",
                "deletions": 0
            },
            {
                "sha": "f6e0542390889645edfb1845dc9983e30f23480f",
                "filename": "ql/src/test/results/clientpositive/spark/join_view.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/join_view.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/join_view.q.out",
                "status": "modified",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/spark/join_view.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -54,7 +54,33 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: invites\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Filter Operator\n+                    predicate: (ds = '2011-09-01') (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Reduce Output Operator\n+                      key expressions: '2011-09-01' (type: string)\n+                      sort order: +\n+                      Map-reduce partition columns: '2011-09-01' (type: string)\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      value expressions: bar (type: string)\n         Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: invites2\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Filter Operator\n+                    predicate: (ds = '2011-09-01') (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Reduce Output Operator\n+                      key expressions: '2011-09-01' (type: string)\n+                      sort order: +\n+                      Map-reduce partition columns: '2011-09-01' (type: string)\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      value expressions: foo (type: int)\n         Reducer 2 \n             Reduce Operator Tree:\n               Join Operator",
                "deletions": 0
            },
            {
                "sha": "843570e4db1b89afbd3d1684e6ee50c7d9723bc4",
                "filename": "ql/src/test/results/clientpositive/spark/optimize_nullscan.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/optimize_nullscan.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/optimize_nullscan.q.out",
                "status": "modified",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/spark/optimize_nullscan.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -107,6 +107,29 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: srcpart\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: false\n+                    predicate: false (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: count(key)\n+                      keys: key (type: string)\n+                      mode: hash\n+                      outputColumnNames: _col0, _col1\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      Reduce Output Operator\n+                        key expressions: _col0 (type: string)\n+                        sort order: +\n+                        Map-reduce partition columns: _col0 (type: string)\n+                        Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                        tag: -1\n+                        value expressions: _col1 (type: bigint)\n+                        auto parallelism: false\n         Reducer 2 \n             Needs Tagging: false\n             Reduce Operator Tree:\n@@ -1654,6 +1677,22 @@ STAGE PLANS:\n             Truncated Path -> Alias:\n               -mr-10003default.src{} [src]\n         Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: srcpart\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: false\n+                    predicate: false (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Reduce Output Operator\n+                      key expressions: key (type: string)\n+                      sort order: +\n+                      Map-reduce partition columns: key (type: string)\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      tag: 1\n+                      auto parallelism: false\n         Reducer 3 \n             Needs Tagging: true\n             Reduce Operator Tree:",
                "deletions": 0
            },
            {
                "sha": "8d3f56b2fb379acd1d887a77d2abdd778efc7cad",
                "filename": "ql/src/test/results/clientpositive/spark/reduce_deduplicate.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/reduce_deduplicate.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/reduce_deduplicate.q.out",
                "status": "modified",
                "changes": 34,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/spark/reduce_deduplicate.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -393,6 +393,40 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: complex_tbl_2\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: false\n+                    predicate: (ds = '2010-03-29') (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Select Operator\n+                      expressions: aet (type: string), aes (type: string)\n+                      outputColumnNames: _col0, _col1\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      Transform Operator\n+                        command: cat\n+                        output info:\n+                            input format: org.apache.hadoop.mapred.TextInputFormat\n+                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                            properties:\n+                              columns _col0,_col1,_col2,_col3,_col4,_col5,_col6\n+                              columns.types string,string,int,string,bigint,string,string\n+                              field.delim 9\n+                              serialization.format 9\n+                              serialization.lib org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                        Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                        Reduce Output Operator\n+                          key expressions: _col1 (type: string)\n+                          sort order: +\n+                          Map-reduce partition columns: _col1 (type: string)\n+                          Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                          tag: -1\n+                          value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: int), _col3 (type: string), _col4 (type: bigint), _col5 (type: string), _col6 (type: string)\n+                          auto parallelism: false\n         Reducer 2 \n             Needs Tagging: false\n             Reduce Operator Tree:",
                "deletions": 0
            },
            {
                "sha": "4117732faa988a5c62647124218a9fe5796410bf",
                "filename": "ql/src/test/results/clientpositive/spark/sample6.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/sample6.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/sample6.q.out",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/spark/sample6.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -3081,6 +3081,26 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: true\n+                    predicate: (((hash(key) & 2147483647) % 2) = 0) (type: boolean)\n+                    sampleDesc: BUCKET 1 OUT OF 2\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Select Operator\n+                      expressions: key (type: int), value (type: string)\n+                      outputColumnNames: _col0, _col1\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      Reduce Output Operator\n+                        key expressions: _col0 (type: int), _col1 (type: string)\n+                        sort order: ++\n+                        Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                        tag: -1\n+                        auto parallelism: false\n         Reducer 2 \n             Needs Tagging: false\n             Reduce Operator Tree:",
                "deletions": 0
            },
            {
                "sha": "2ca9e1332764e8b826c815aa3b5ce234cb826c29",
                "filename": "ql/src/test/results/clientpositive/spark/union_view.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/union_view.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/spark/union_view.q.out",
                "status": "modified",
                "changes": 264,
                "additions": 264,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/spark/union_view.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -290,7 +290,43 @@ STAGE PLANS:\n                               output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                               serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n         Map 2 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: ((key = 86) and (ds = '1')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '1')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '1' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n         Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: ((key = 86) and (ds = '1')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '1')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '1' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n \n   Stage: Stage-0\n     Fetch Operator\n@@ -308,6 +344,24 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: ((key = 86) and (ds = '2')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '2')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '2' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n         Map 2 \n             Map Operator Tree:\n                 TableScan\n@@ -328,6 +382,24 @@ STAGE PLANS:\n                               output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                               serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n         Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: ((key = 86) and (ds = '2')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '2')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '2' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n \n   Stage: Stage-0\n     Fetch Operator\n@@ -345,7 +417,43 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: ((key = 86) and (ds = '3')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '3')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '3' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n         Map 2 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: ((key = 86) and (ds = '3')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '3')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '3' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n         Map 3 \n             Map Operator Tree:\n                 TableScan\n@@ -490,7 +598,37 @@ STAGE PLANS:\n                           sort order: \n                           value expressions: _col0 (type: bigint)\n         Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: (ds = '1') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '1') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n         Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: (ds = '1') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '1') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n         Reducer 2 \n             Reduce Operator Tree:\n               Group By Operator\n@@ -524,6 +662,21 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: (ds = '2') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '2') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n         Map 3 \n             Map Operator Tree:\n                 TableScan\n@@ -539,6 +692,21 @@ STAGE PLANS:\n                           sort order: \n                           value expressions: _col0 (type: bigint)\n         Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: (ds = '2') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '2') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n         Reducer 2 \n             Reduce Operator Tree:\n               Group By Operator\n@@ -572,7 +740,37 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: (ds = '3') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '3') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n         Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: (ds = '3') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '3') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n         Map 4 \n             Map Operator Tree:\n                 TableScan\n@@ -621,7 +819,43 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: ((key = 86) and (ds = '4')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '4')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '4' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n         Map 2 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: ((key = 86) and (ds = '4')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '4')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '4' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n         Map 3 \n             Map Operator Tree:\n                 TableScan\n@@ -661,7 +895,37 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: (ds = '4') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '4') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n         Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: (ds = '4') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '4') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n         Map 4 \n             Map Operator Tree:\n                 TableScan",
                "deletions": 0
            },
            {
                "sha": "9a04fa2d2132e025fa7c58389ae2a3ef82d337fb",
                "filename": "ql/src/test/results/clientpositive/tez/dynamic_partition_pruning.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/dynamic_partition_pruning.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/dynamic_partition_pruning.q.out",
                "status": "modified",
                "changes": 35,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/dynamic_partition_pruning.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -2588,6 +2588,19 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: srcpart\n+                  filterExpr: ((ds is not null and hr is not null) and (hr = 13)) (type: boolean)\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Filter Operator\n+                    predicate: ((ds is not null and hr is not null) and (hr = 13)) (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Reduce Output Operator\n+                      key expressions: ds (type: string)\n+                      sort order: +\n+                      Map-reduce partition columns: ds (type: string)\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n         Map 5 \n             Map Operator Tree:\n                 TableScan\n@@ -4595,6 +4608,28 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: srcpart\n+                  filterExpr: ((ds is not null and hr is not null) and (hr = 13)) (type: boolean)\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Filter Operator\n+                    predicate: ((ds is not null and hr is not null) and (hr = 13)) (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Map Join Operator\n+                      condition map:\n+                           Inner Join 0 to 1\n+                      keys:\n+                        0 ds (type: string)\n+                        1 ds (type: string)\n+                      input vertices:\n+                        1 Map 2\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      Reduce Output Operator\n+                        key expressions: '13' (type: string)\n+                        sort order: +\n+                        Map-reduce partition columns: '13' (type: string)\n+                        Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n         Map 2 \n             Map Operator Tree:\n                 TableScan",
                "deletions": 0
            },
            {
                "sha": "28503140784d331a82502dde2318a60229eca3a9",
                "filename": "ql/src/test/results/clientpositive/tez/metadataonly1.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/metadataonly1.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/metadataonly1.q.out",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/metadataonly1.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -41,6 +41,26 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: test1\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Select Operator\n+                    expressions: ds (type: string)\n+                    outputColumnNames: _col0\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: max(_col0)\n+                      mode: hash\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: NONE\n+                      Reduce Output Operator\n+                        sort order: \n+                        Statistics: Num rows: 1 Data size: 84 Basic stats: COMPLETE Column stats: NONE\n+                        tag: -1\n+                        value expressions: _col0 (type: string)\n+                        auto parallelism: false\n         Reducer 2 \n             Needs Tagging: false\n             Reduce Operator Tree:",
                "deletions": 0
            },
            {
                "sha": "cca489e3deaa0d8e633be74a0cb19f3173dae0e7",
                "filename": "ql/src/test/results/clientpositive/tez/optimize_nullscan.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/optimize_nullscan.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/optimize_nullscan.q.out",
                "status": "modified",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/optimize_nullscan.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -104,6 +104,29 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: srcpart\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: false\n+                    predicate: false (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: count(key)\n+                      keys: key (type: string)\n+                      mode: hash\n+                      outputColumnNames: _col0, _col1\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      Reduce Output Operator\n+                        key expressions: _col0 (type: string)\n+                        sort order: +\n+                        Map-reduce partition columns: _col0 (type: string)\n+                        Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                        tag: -1\n+                        value expressions: _col1 (type: bigint)\n+                        auto parallelism: true\n         Reducer 2 \n             Needs Tagging: false\n             Reduce Operator Tree:\n@@ -1656,6 +1679,22 @@ STAGE PLANS:\n             Truncated Path -> Alias:\n               -mr-10002default.src{} [src]\n         Map 5 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: srcpart\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  GatherStats: false\n+                  Filter Operator\n+                    isSamplingPred: false\n+                    predicate: false (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Reduce Output Operator\n+                      key expressions: key (type: string)\n+                      sort order: +\n+                      Map-reduce partition columns: key (type: string)\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      tag: 1\n+                      auto parallelism: true\n         Reducer 4 \n             Needs Tagging: false\n             Reduce Operator Tree:",
                "deletions": 0
            },
            {
                "sha": "6f6e8cab6e2e87b904965e28f8325daaccd7d4cc",
                "filename": "ql/src/test/results/clientpositive/tez/tez_union.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/tez_union.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/tez_union.q.out",
                "status": "modified",
                "changes": 65,
                "additions": 65,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/tez_union.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -1253,3 +1253,68 @@ POSTHOOK: query: drop table ut\n POSTHOOK: type: DROPTABLE\n POSTHOOK: Input: default@ut\n POSTHOOK: Output: default@ut\n+PREHOOK: query: create table TABLE1(EMP_NAME STRING, EMP_ID INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@TABLE1\n+POSTHOOK: query: create table TABLE1(EMP_NAME STRING, EMP_ID INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@TABLE1\n+PREHOOK: query: create table table2 (EMP_NAME STRING) PARTITIONED BY (EMP_ID INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@table2\n+POSTHOOK: query: create table table2 (EMP_NAME STRING) PARTITIONED BY (EMP_ID INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@table2\n+PREHOOK: query: CREATE OR REPLACE VIEW TABLE3 as select EMP_NAME, EMP_ID from TABLE1\n+PREHOOK: type: CREATEVIEW\n+PREHOOK: Input: default@table1\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@TABLE3\n+POSTHOOK: query: CREATE OR REPLACE VIEW TABLE3 as select EMP_NAME, EMP_ID from TABLE1\n+POSTHOOK: type: CREATEVIEW\n+POSTHOOK: Input: default@table1\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@TABLE3\n+PREHOOK: query: explain formatted select count(*) from TABLE3\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain formatted select count(*) from TABLE3\n+POSTHOOK: type: QUERY\n+#### A masked pattern was here ####\n+PREHOOK: query: drop table table2\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@table2\n+PREHOOK: Output: default@table2\n+POSTHOOK: query: drop table table2\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@table2\n+POSTHOOK: Output: default@table2\n+PREHOOK: query: create table table2 (EMP_NAME STRING) PARTITIONED BY (EMP_ID INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@table2\n+POSTHOOK: query: create table table2 (EMP_NAME STRING) PARTITIONED BY (EMP_ID INT) ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@table2\n+PREHOOK: query: CREATE OR REPLACE VIEW TABLE3 as select EMP_NAME, EMP_ID from TABLE1 UNION ALL select EMP_NAME,EMP_ID from TABLE2\n+PREHOOK: type: CREATEVIEW\n+PREHOOK: Input: default@table1\n+PREHOOK: Input: default@table2\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@TABLE3\n+POSTHOOK: query: CREATE OR REPLACE VIEW TABLE3 as select EMP_NAME, EMP_ID from TABLE1 UNION ALL select EMP_NAME,EMP_ID from TABLE2\n+POSTHOOK: type: CREATEVIEW\n+POSTHOOK: Input: default@table1\n+POSTHOOK: Input: default@table2\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@TABLE3\n+POSTHOOK: Output: default@table3\n+PREHOOK: query: explain formatted select count(*) from TABLE3\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain formatted select count(*) from TABLE3\n+POSTHOOK: type: QUERY\n+#### A masked pattern was here ####",
                "deletions": 0
            },
            {
                "sha": "654b34bcb0d4152462ec1423fb4dffe2566ecf99",
                "filename": "ql/src/test/results/clientpositive/tez/tez_union_group_by.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/tez_union_group_by.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/tez_union_group_by.q.out",
                "status": "modified",
                "changes": 67,
                "additions": 67,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/tez_union_group_by.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -156,6 +156,24 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: x\n+                  Filter Operator\n+                    predicate: ((date < '2014-09-02') and (u <> 0)) (type: boolean)\n+                    Select Operator\n+                      expressions: u (type: bigint), date (type: string)\n+                      outputColumnNames: _col0, _col1\n+                      Group By Operator\n+                        aggregations: min(_col1)\n+                        keys: _col0 (type: bigint)\n+                        mode: hash\n+                        outputColumnNames: _col0, _col1\n+                        Reduce Output Operator\n+                          key expressions: _col0 (type: bigint)\n+                          sort order: +\n+                          Map-reduce partition columns: _col0 (type: bigint)\n+                          value expressions: _col1 (type: string)\n         Map 10 \n             Map Operator Tree:\n                 TableScan\n@@ -170,8 +188,57 @@ STAGE PLANS:\n                       Map-reduce partition columns: t (type: string), st (type: string)\n                       Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n         Map 5 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: y\n+                  Filter Operator\n+                    predicate: ((date < '2014-09-02') and (u <> 0)) (type: boolean)\n+                    Select Operator\n+                      expressions: u (type: bigint), date (type: string)\n+                      outputColumnNames: _col0, _col1\n+                      Group By Operator\n+                        aggregations: min(_col1)\n+                        keys: _col0 (type: bigint)\n+                        mode: hash\n+                        outputColumnNames: _col0, _col1\n+                        Reduce Output Operator\n+                          key expressions: _col0 (type: bigint)\n+                          sort order: +\n+                          Map-reduce partition columns: _col0 (type: bigint)\n+                          value expressions: _col1 (type: string)\n         Map 6 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: z\n+                  Filter Operator\n+                    predicate: ((date < '2014-09-02') and (u <> 0)) (type: boolean)\n+                    Select Operator\n+                      expressions: u (type: bigint), date (type: string)\n+                      outputColumnNames: _col0, _col1\n+                      Group By Operator\n+                        aggregations: min(_col1)\n+                        keys: _col0 (type: bigint)\n+                        mode: hash\n+                        outputColumnNames: _col0, _col1\n+                        Reduce Output Operator\n+                          key expressions: _col0 (type: bigint)\n+                          sort order: +\n+                          Map-reduce partition columns: _col0 (type: bigint)\n+                          value expressions: _col1 (type: string)\n         Map 7 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: x\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Filter Operator\n+                    predicate: (((t is not null and (date >= '2014-03-04')) and (date < '2014-09-03')) and (u <> 0)) (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Reduce Output Operator\n+                      key expressions: t (type: string), st (type: string)\n+                      sort order: ++\n+                      Map-reduce partition columns: t (type: string), st (type: string)\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      value expressions: u (type: bigint)\n         Reducer 3 \n             Reduce Operator Tree:\n               Group By Operator",
                "deletions": 0
            },
            {
                "sha": "ae6d7c8849269df0729a49f00dad1fc59ff3862c",
                "filename": "ql/src/test/results/clientpositive/tez/union_view.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/union_view.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/union_view.q.out",
                "status": "added",
                "changes": 1004,
                "additions": 1004,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/union_view.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -0,0 +1,1004 @@\n+PREHOOK: query: CREATE TABLE src_union_1 (key int, value string) PARTITIONED BY (ds string)\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@src_union_1\n+POSTHOOK: query: CREATE TABLE src_union_1 (key int, value string) PARTITIONED BY (ds string)\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@src_union_1\n+PREHOOK: query: CREATE INDEX src_union_1_key_idx ON TABLE src_union_1(key) AS 'COMPACT' WITH DEFERRED REBUILD\n+PREHOOK: type: CREATEINDEX\n+PREHOOK: Input: default@src_union_1\n+POSTHOOK: query: CREATE INDEX src_union_1_key_idx ON TABLE src_union_1(key) AS 'COMPACT' WITH DEFERRED REBUILD\n+POSTHOOK: type: CREATEINDEX\n+POSTHOOK: Input: default@src_union_1\n+POSTHOOK: Output: default@default__src_union_1_src_union_1_key_idx__\n+PREHOOK: query: CREATE TABLE src_union_2 (key int, value string) PARTITIONED BY (ds string, part_1 string)\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@src_union_2\n+POSTHOOK: query: CREATE TABLE src_union_2 (key int, value string) PARTITIONED BY (ds string, part_1 string)\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@src_union_2\n+PREHOOK: query: CREATE INDEX src_union_2_key_idx ON TABLE src_union_2(key) AS 'COMPACT' WITH DEFERRED REBUILD\n+PREHOOK: type: CREATEINDEX\n+PREHOOK: Input: default@src_union_2\n+POSTHOOK: query: CREATE INDEX src_union_2_key_idx ON TABLE src_union_2(key) AS 'COMPACT' WITH DEFERRED REBUILD\n+POSTHOOK: type: CREATEINDEX\n+POSTHOOK: Input: default@src_union_2\n+POSTHOOK: Output: default@default__src_union_2_src_union_2_key_idx__\n+PREHOOK: query: CREATE TABLE src_union_3(key int, value string) PARTITIONED BY (ds string, part_1 string, part_2 string)\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@src_union_3\n+POSTHOOK: query: CREATE TABLE src_union_3(key int, value string) PARTITIONED BY (ds string, part_1 string, part_2 string)\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@src_union_3\n+PREHOOK: query: CREATE INDEX src_union_3_key_idx ON TABLE src_union_3(key) AS 'COMPACT' WITH DEFERRED REBUILD\n+PREHOOK: type: CREATEINDEX\n+PREHOOK: Input: default@src_union_3\n+POSTHOOK: query: CREATE INDEX src_union_3_key_idx ON TABLE src_union_3(key) AS 'COMPACT' WITH DEFERRED REBUILD\n+POSTHOOK: type: CREATEINDEX\n+POSTHOOK: Input: default@src_union_3\n+POSTHOOK: Output: default@default__src_union_3_src_union_3_key_idx__\n+STAGE DEPENDENCIES:\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        TableScan\n+          alias: src_union_1\n+          filterExpr: ((key = 86) and (ds = '1')) (type: boolean)\n+          Filter Operator\n+            predicate: (key = 86) (type: boolean)\n+            Select Operator\n+              expressions: 86 (type: int), value (type: string), '1' (type: string)\n+              outputColumnNames: _col0, _col1, _col2\n+              ListSink\n+\n+STAGE DEPENDENCIES:\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        TableScan\n+          alias: src_union_2\n+          filterExpr: ((key = 86) and (ds = '2')) (type: boolean)\n+          Filter Operator\n+            predicate: (key = 86) (type: boolean)\n+            Select Operator\n+              expressions: 86 (type: int), value (type: string), '2' (type: string)\n+              outputColumnNames: _col0, _col1, _col2\n+              ListSink\n+\n+STAGE DEPENDENCIES:\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        TableScan\n+          alias: src_union_3\n+          filterExpr: ((key = 86) and (ds = '3')) (type: boolean)\n+          Filter Operator\n+            predicate: (key = 86) (type: boolean)\n+            Select Operator\n+              expressions: 86 (type: int), value (type: string), '3' (type: string)\n+              outputColumnNames: _col0, _col1, _col2\n+              ListSink\n+\n+86\tval_86\t1\n+86\tval_86\t2\n+86\tval_86\t2\n+86\tval_86\t3\n+86\tval_86\t3\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Reducer 2 <- Map 1 (SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: (ds = '1') (type: boolean)\n+                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: count(1)\n+                      mode: hash\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                      Reduce Output Operator\n+                        sort order: \n+                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                        value expressions: _col0 (type: bigint)\n+        Reducer 2 \n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: count(VALUE._col0)\n+                mode: mergepartial\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Reducer 2 <- Map 1 (SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: (ds = '2') (type: boolean)\n+                  Statistics: Num rows: 1000 Data size: 10624 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    Statistics: Num rows: 1000 Data size: 10624 Basic stats: COMPLETE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: count(1)\n+                      mode: hash\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                      Reduce Output Operator\n+                        sort order: \n+                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                        value expressions: _col0 (type: bigint)\n+        Reducer 2 \n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: count(VALUE._col0)\n+                mode: mergepartial\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Reducer 2 <- Map 1 (SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: (ds = '3') (type: boolean)\n+                  Statistics: Num rows: 1000 Data size: 10624 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    Statistics: Num rows: 1000 Data size: 10624 Basic stats: COMPLETE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: count(1)\n+                      mode: hash\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                      Reduce Output Operator\n+                        sort order: \n+                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                        value expressions: _col0 (type: bigint)\n+        Reducer 2 \n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: count(VALUE._col0)\n+                mode: mergepartial\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+500\n+1000\n+1000\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 3 <- Union 2 (CONTAINS)\n+        Map 4 <- Union 2 (CONTAINS)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: ((key = 86) and (ds = '1')) (type: boolean)\n+                  Filter Operator\n+                    predicate: (key = 86) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '1' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: ((key = 86) and (ds = '1')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '1')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '1' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: ((key = 86) and (ds = '1')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '1')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '1' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 3 <- Union 2 (CONTAINS)\n+        Map 4 <- Union 2 (CONTAINS)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: ((key = 86) and (ds = '2')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '2')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '2' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: ((key = 86) and (ds = '2')) (type: boolean)\n+                  Filter Operator\n+                    predicate: (key = 86) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '2' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: ((key = 86) and (ds = '2')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '2')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '2' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 3 <- Union 2 (CONTAINS)\n+        Map 4 <- Union 2 (CONTAINS)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: ((key = 86) and (ds = '3')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '3')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '3' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: ((key = 86) and (ds = '3')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '3')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '3' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: ((key = 86) and (ds = '3')) (type: boolean)\n+                  Filter Operator\n+                    predicate: (key = 86) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '3' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 4 <- Union 2 (CONTAINS)\n+        Map 5 <- Union 2 (CONTAINS)\n+        Reducer 3 <- Union 2 (SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: ((key = 86) and ds is not null) (type: boolean)\n+                  Filter Operator\n+                    predicate: (key = 86) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string), ds (type: string)\n+                      outputColumnNames: _col1, _col2\n+                      Select Operator\n+                        expressions: _col1 (type: string), _col2 (type: string)\n+                        outputColumnNames: _col1, _col2\n+                        Reduce Output Operator\n+                          key expressions: _col2 (type: string)\n+                          sort order: +\n+                          value expressions: _col1 (type: string)\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: ((key = 86) and ds is not null) (type: boolean)\n+                  Filter Operator\n+                    predicate: (key = 86) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string), ds (type: string)\n+                      outputColumnNames: _col1, _col2\n+                      Select Operator\n+                        expressions: _col1 (type: string), _col2 (type: string)\n+                        outputColumnNames: _col1, _col2\n+                        Reduce Output Operator\n+                          key expressions: _col2 (type: string)\n+                          sort order: +\n+                          value expressions: _col1 (type: string)\n+        Map 5 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: ((key = 86) and ds is not null) (type: boolean)\n+                  Filter Operator\n+                    predicate: (key = 86) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string), ds (type: string)\n+                      outputColumnNames: _col1, _col2\n+                      Select Operator\n+                        expressions: _col1 (type: string), _col2 (type: string)\n+                        outputColumnNames: _col1, _col2\n+                        Reduce Output Operator\n+                          key expressions: _col2 (type: string)\n+                          sort order: +\n+                          value expressions: _col1 (type: string)\n+        Reducer 3 \n+            Reduce Operator Tree:\n+              Select Operator\n+                expressions: 86 (type: int), VALUE._col1 (type: string), KEY.reducesinkkey0 (type: string)\n+                outputColumnNames: _col0, _col1, _col2\n+                Statistics: Num rows: 1250 Data size: 13280 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1250 Data size: 13280 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+86\tval_86\t1\n+86\tval_86\t2\n+86\tval_86\t2\n+86\tval_86\t3\n+86\tval_86\t3\n+86\tval_86\t1\n+86\tval_86\t2\n+86\tval_86\t2\n+86\tval_86\t3\n+86\tval_86\t3\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 4 <- Union 2 (CONTAINS)\n+        Map 5 <- Union 2 (CONTAINS)\n+        Reducer 3 <- Union 2 (SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: (ds = '1') (type: boolean)\n+                  Select Operator\n+                    Select Operator\n+                      Group By Operator\n+                        aggregations: count(1)\n+                        mode: hash\n+                        outputColumnNames: _col0\n+                        Reduce Output Operator\n+                          sort order: \n+                          value expressions: _col0 (type: bigint)\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: (ds = '1') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '1') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n+        Map 5 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: (ds = '1') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '1') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n+        Reducer 3 \n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: count(VALUE._col0)\n+                mode: mergepartial\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 4 <- Union 2 (CONTAINS)\n+        Map 5 <- Union 2 (CONTAINS)\n+        Reducer 3 <- Union 2 (SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: (ds = '2') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '2') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: (ds = '2') (type: boolean)\n+                  Select Operator\n+                    Select Operator\n+                      Group By Operator\n+                        aggregations: count(1)\n+                        mode: hash\n+                        outputColumnNames: _col0\n+                        Reduce Output Operator\n+                          sort order: \n+                          value expressions: _col0 (type: bigint)\n+        Map 5 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: (ds = '2') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '2') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n+        Reducer 3 \n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: count(VALUE._col0)\n+                mode: mergepartial\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 4 <- Union 2 (CONTAINS)\n+        Map 5 <- Union 2 (CONTAINS)\n+        Reducer 3 <- Union 2 (SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: (ds = '3') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '3') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: (ds = '3') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '3') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n+        Map 5 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: (ds = '3') (type: boolean)\n+                  Select Operator\n+                    Select Operator\n+                      Group By Operator\n+                        aggregations: count(1)\n+                        mode: hash\n+                        outputColumnNames: _col0\n+                        Reduce Output Operator\n+                          sort order: \n+                          value expressions: _col0 (type: bigint)\n+        Reducer 3 \n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: count(VALUE._col0)\n+                mode: mergepartial\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+500\n+1000\n+1000\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 3 <- Union 2 (CONTAINS)\n+        Map 4 <- Union 2 (CONTAINS)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: ((key = 86) and (ds = '4')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '4')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '4' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: ((key = 86) and (ds = '4')) (type: boolean)\n+                  Filter Operator\n+                    predicate: ((key = 86) and (ds = '4')) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '4' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: ((key = 86) and (ds = '4')) (type: boolean)\n+                  Filter Operator\n+                    predicate: (key = 86) (type: boolean)\n+                    Select Operator\n+                      expressions: value (type: string)\n+                      outputColumnNames: _col1\n+                      Select Operator\n+                        expressions: 86 (type: int), _col1 (type: string), '4' (type: string)\n+                        outputColumnNames: _col0, _col1, _col2\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+86\tval_86\t4\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 4 <- Union 2 (CONTAINS)\n+        Map 5 <- Union 2 (CONTAINS)\n+        Reducer 3 <- Union 2 (SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_1\n+                  filterExpr: (ds = '4') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '4') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_2\n+                  filterExpr: (ds = '4') (type: boolean)\n+                  Filter Operator\n+                    predicate: (ds = '4') (type: boolean)\n+                    Select Operator\n+                      Select Operator\n+                        Group By Operator\n+                          aggregations: count(1)\n+                          mode: hash\n+                          outputColumnNames: _col0\n+                          Reduce Output Operator\n+                            sort order: \n+                            value expressions: _col0 (type: bigint)\n+        Map 5 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src_union_3\n+                  filterExpr: (ds = '4') (type: boolean)\n+                  Select Operator\n+                    Select Operator\n+                      Group By Operator\n+                        aggregations: count(1)\n+                        mode: hash\n+                        outputColumnNames: _col0\n+                        Reduce Output Operator\n+                          sort order: \n+                          value expressions: _col0 (type: bigint)\n+        Reducer 3 \n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: count(VALUE._col0)\n+                mode: mergepartial\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+500",
                "deletions": 0
            },
            {
                "sha": "a8b25dba663e90979ffd5f25e57583b30a5f1854",
                "filename": "ql/src/test/results/clientpositive/tez/vectorized_dynamic_partition_pruning.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/vectorized_dynamic_partition_pruning.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/tez/vectorized_dynamic_partition_pruning.q.out",
                "status": "modified",
                "changes": 35,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/vectorized_dynamic_partition_pruning.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -2620,6 +2620,19 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: srcpart\n+                  filterExpr: ((ds is not null and hr is not null) and (hr = 13)) (type: boolean)\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Filter Operator\n+                    predicate: ((ds is not null and hr is not null) and (hr = 13)) (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Reduce Output Operator\n+                      key expressions: ds (type: string)\n+                      sort order: +\n+                      Map-reduce partition columns: ds (type: string)\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n         Map 5 \n             Map Operator Tree:\n                 TableScan\n@@ -4652,6 +4665,28 @@ STAGE PLANS:\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: srcpart\n+                  filterExpr: ((ds is not null and hr is not null) and (hr = 13)) (type: boolean)\n+                  Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                  Filter Operator\n+                    predicate: ((ds is not null and hr is not null) and (hr = 13)) (type: boolean)\n+                    Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                    Map Join Operator\n+                      condition map:\n+                           Inner Join 0 to 1\n+                      keys:\n+                        0 ds (type: string)\n+                        1 ds (type: string)\n+                      input vertices:\n+                        1 Map 2\n+                      Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                      Reduce Output Operator\n+                        key expressions: '13' (type: string)\n+                        sort order: +\n+                        Map-reduce partition columns: '13' (type: string)\n+                        Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n         Map 2 \n             Map Operator Tree:\n                 TableScan",
                "deletions": 0
            },
            {
                "sha": "4529074118aa114fbe50c78d4b65d489a99ec18c",
                "filename": "ql/src/test/results/clientpositive/union30.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/union30.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/union30.q.out",
                "status": "modified",
                "changes": 42,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/union30.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -95,27 +95,6 @@ STAGE PLANS:\n   Stage: Stage-2\n     Map Reduce\n       Map Operator Tree:\n-          TableScan\n-            alias: src\n-            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n-            Select Operator\n-              expressions: key (type: string), value (type: string)\n-              outputColumnNames: _col0, _col1\n-              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n-              Union\n-                Statistics: Num rows: 1500 Data size: 15936 Basic stats: COMPLETE Column stats: NONE\n-                Select Operator\n-                  expressions: UDFToInteger(_col0) (type: int), _col1 (type: string)\n-                  outputColumnNames: _col0, _col1\n-                  Statistics: Num rows: 1500 Data size: 15936 Basic stats: COMPLETE Column stats: NONE\n-                  File Output Operator\n-                    compressed: false\n-                    Statistics: Num rows: 1500 Data size: 15936 Basic stats: COMPLETE Column stats: NONE\n-                    table:\n-                        input format: org.apache.hadoop.mapred.TextInputFormat\n-                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n-                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n-                        name: default.union_subq_union\n           TableScan\n             alias: src\n             Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n@@ -167,6 +146,27 @@ STAGE PLANS:\n                       output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                       serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n                       name: default.union_subq_union\n+          TableScan\n+            alias: src\n+            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+            Select Operator\n+              expressions: key (type: string), value (type: string)\n+              outputColumnNames: _col0, _col1\n+              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+              Union\n+                Statistics: Num rows: 1500 Data size: 15936 Basic stats: COMPLETE Column stats: NONE\n+                Select Operator\n+                  expressions: UDFToInteger(_col0) (type: int), _col1 (type: string)\n+                  outputColumnNames: _col0, _col1\n+                  Statistics: Num rows: 1500 Data size: 15936 Basic stats: COMPLETE Column stats: NONE\n+                  File Output Operator\n+                    compressed: false\n+                    Statistics: Num rows: 1500 Data size: 15936 Basic stats: COMPLETE Column stats: NONE\n+                    table:\n+                        input format: org.apache.hadoop.mapred.TextInputFormat\n+                        output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                        name: default.union_subq_union\n \n   Stage: Stage-8\n     Conditional Operator",
                "deletions": 21
            },
            {
                "sha": "734c1f42cca6d13d31e1ee28b036fece10ddd065",
                "filename": "ql/src/test/results/clientpositive/union_lateralview.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/union_lateralview.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/union_lateralview.q.out",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/union_lateralview.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -101,14 +101,6 @@ STAGE PLANS:\n                             Map-reduce partition columns: _col1 (type: string)\n                             Statistics: Num rows: 2000 Data size: 21248 Basic stats: COMPLETE Column stats: NONE\n                             value expressions: _col0 (type: int), _col2 (type: string)\n-          TableScan\n-            alias: b\n-            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n-            Reduce Output Operator\n-              key expressions: key (type: string)\n-              sort order: +\n-              Map-reduce partition columns: key (type: string)\n-              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n           TableScan\n             alias: srcpart\n             Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n@@ -157,6 +149,14 @@ STAGE PLANS:\n                             Map-reduce partition columns: _col1 (type: string)\n                             Statistics: Num rows: 2000 Data size: 21248 Basic stats: COMPLETE Column stats: NONE\n                             value expressions: _col0 (type: int), _col2 (type: string)\n+          TableScan\n+            alias: b\n+            Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+            Reduce Output Operator\n+              key expressions: key (type: string)\n+              sort order: +\n+              Map-reduce partition columns: key (type: string)\n+              Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n       Reduce Operator Tree:\n         Join Operator\n           condition map:",
                "deletions": 8
            },
            {
                "sha": "68854b3cad1a6cd711ccaa0aa862b325f9561cae",
                "filename": "ql/src/test/results/clientpositive/union_view.q.out",
                "blob_url": "https://github.com/apache/hive/blob/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/union_view.q.out",
                "raw_url": "https://github.com/apache/hive/raw/b249f00d5e44cc4c7d4d70db0d2a949c343c11c9/ql/src/test/results/clientpositive/union_view.q.out",
                "status": "modified",
                "changes": 210,
                "additions": 210,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/union_view.q.out?ref=b249f00d5e44cc4c7d4d70db0d2a949c343c11c9",
                "patch": "@@ -503,6 +503,54 @@ STAGE PLANS:\n                           input format: org.apache.hadoop.mapred.TextInputFormat\n                           output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                           serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+          TableScan\n+            alias: src_union_2\n+            filterExpr: ((key = 86) and (ds = '1')) (type: boolean)\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: ((key = 86) and (ds = '1')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: value (type: string)\n+                outputColumnNames: _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    expressions: 86 (type: int), _col1 (type: string), '1' (type: string)\n+                    outputColumnNames: _col0, _col1, _col2\n+                    Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                    File Output Operator\n+                      compressed: false\n+                      Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                      table:\n+                          input format: org.apache.hadoop.mapred.TextInputFormat\n+                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+          TableScan\n+            alias: src_union_3\n+            filterExpr: ((key = 86) and (ds = '1')) (type: boolean)\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: ((key = 86) and (ds = '1')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: value (type: string)\n+                outputColumnNames: _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    expressions: 86 (type: int), _col1 (type: string), '1' (type: string)\n+                    outputColumnNames: _col0, _col1, _col2\n+                    Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                    File Output Operator\n+                      compressed: false\n+                      Statistics: Num rows: 250 Data size: 2656 Basic stats: COMPLETE Column stats: NONE\n+                      table:\n+                          input format: org.apache.hadoop.mapred.TextInputFormat\n+                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n \n   Stage: Stage-0\n     Fetch Operator\n@@ -570,6 +618,30 @@ STAGE PLANS:\n                       sort order: +\n                       Statistics: Num rows: 1250 Data size: 13280 Basic stats: COMPLETE Column stats: NONE\n                       value expressions: _col1 (type: string)\n+          TableScan\n+            alias: src_union_1\n+            filterExpr: ((key = 86) and (ds = '2')) (type: boolean)\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: ((key = 86) and (ds = '2')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: value (type: string)\n+                outputColumnNames: _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    expressions: 86 (type: int), _col1 (type: string), '2' (type: string)\n+                    outputColumnNames: _col0, _col1, _col2\n+                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                    File Output Operator\n+                      compressed: false\n+                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                      table:\n+                          input format: org.apache.hadoop.mapred.TextInputFormat\n+                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n           TableScan\n             alias: src_union_2\n             filterExpr: ((key = 86) and ds is not null) (type: boolean)\n@@ -965,6 +1037,30 @@ STAGE PLANS:\n                           input format: org.apache.hadoop.mapred.TextInputFormat\n                           output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n                           serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+          TableScan\n+            alias: src_union_3\n+            filterExpr: ((key = 86) and (ds = '2')) (type: boolean)\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: ((key = 86) and (ds = '2')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: value (type: string)\n+                outputColumnNames: _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    expressions: 86 (type: int), _col1 (type: string), '2' (type: string)\n+                    outputColumnNames: _col0, _col1, _col2\n+                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                    File Output Operator\n+                      compressed: false\n+                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                      table:\n+                          input format: org.apache.hadoop.mapred.TextInputFormat\n+                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n \n   Stage: Stage-0\n     Fetch Operator\n@@ -1005,6 +1101,54 @@ STAGE PLANS:\n   Stage: Stage-1\n     Map Reduce\n       Map Operator Tree:\n+          TableScan\n+            alias: src_union_1\n+            filterExpr: ((key = 86) and (ds = '3')) (type: boolean)\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: ((key = 86) and (ds = '3')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: value (type: string)\n+                outputColumnNames: _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    expressions: 86 (type: int), _col1 (type: string), '3' (type: string)\n+                    outputColumnNames: _col0, _col1, _col2\n+                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                    File Output Operator\n+                      compressed: false\n+                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                      table:\n+                          input format: org.apache.hadoop.mapred.TextInputFormat\n+                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+          TableScan\n+            alias: src_union_2\n+            filterExpr: ((key = 86) and (ds = '3')) (type: boolean)\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: ((key = 86) and (ds = '3')) (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                expressions: value (type: string)\n+                outputColumnNames: _col1\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    expressions: 86 (type: int), _col1 (type: string), '3' (type: string)\n+                    outputColumnNames: _col0, _col1, _col2\n+                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                    File Output Operator\n+                      compressed: false\n+                      Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                      table:\n+                          input format: org.apache.hadoop.mapred.TextInputFormat\n+                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n           TableScan\n             alias: src_union_3\n             filterExpr: (ds = '4') (type: boolean)\n@@ -1024,6 +1168,72 @@ STAGE PLANS:\n                       sort order: \n                       Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n                       value expressions: _col0 (type: bigint)\n+          TableScan\n+            alias: src_union_2\n+            filterExpr: (ds = '1') (type: boolean)\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: (ds = '1') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: count(1)\n+                      mode: hash\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                      Reduce Output Operator\n+                        sort order: \n+                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                        value expressions: _col0 (type: bigint)\n+          TableScan\n+            alias: src_union_3\n+            filterExpr: (ds = '1') (type: boolean)\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: (ds = '1') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    Statistics: Num rows: 500 Data size: 5312 Basic stats: COMPLETE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: count(1)\n+                      mode: hash\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                      Reduce Output Operator\n+                        sort order: \n+                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                        value expressions: _col0 (type: bigint)\n+          TableScan\n+            alias: src_union_3\n+            filterExpr: (ds = '2') (type: boolean)\n+            Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+            Filter Operator\n+              predicate: (ds = '2') (type: boolean)\n+              Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+              Select Operator\n+                Statistics: Num rows: 0 Data size: 0 Basic stats: NONE Column stats: NONE\n+                Union\n+                  Statistics: Num rows: 1000 Data size: 10624 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    Statistics: Num rows: 1000 Data size: 10624 Basic stats: COMPLETE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: count(1)\n+                      mode: hash\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                      Reduce Output Operator\n+                        sort order: \n+                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                        value expressions: _col0 (type: bigint)\n       Reduce Operator Tree:\n         Group By Operator\n           aggregations: count(VALUE._col0)",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Vectorizer.java"
        ],
        "unit_tests": [
            "TestVectorizer.java"
        ]
    },
    "hive_5708a0b": {
        "repo": "hive",
        "message": "HIVE-21479: NPE during metastore cache update (Daniel Dai, reviewed by Zoltan Haindrich)\n\nSigned-off-by: Zoltan Haindrich <kirk@rxd.hu>",
        "commit": "https://github.com/apache/hive/commit/5708a0b797bf12b4f61afaf0d343ea6bd9b237e2",
        "parent": "https://github.com/apache/hive/commit/12f83719d940034dc8c6273e2772f6b30d07108e",
        "bug_id": "hive_5708a0b",
        "file": [
            {
                "sha": "3564efe8ed42c1e5a18787a1012d6e1af90e4416",
                "filename": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java",
                "blob_url": "https://github.com/apache/hive/blob/5708a0b797bf12b4f61afaf0d343ea6bd9b237e2/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java",
                "raw_url": "https://github.com/apache/hive/raw/5708a0b797bf12b4f61afaf0d343ea6bd9b237e2/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java",
                "status": "modified",
                "changes": 31,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/cache/CachedStore.java?ref=5708a0b797bf12b4f61afaf0d343ea6bd9b237e2",
                "patch": "@@ -812,7 +812,7 @@ private void updateTableColStats(RawStore rawStore, String catName, String dbNam\n       rawStore.openTransaction();\n       try {\n         Table table = rawStore.getTable(catName, dbName, tblName);\n-        if (!table.isSetPartitionKeys()) {\n+        if (table != null && !table.isSetPartitionKeys()) {\n           List<String> colNames = MetaStoreUtils.getColumnNamesForTable(table);\n           Deadline.startTimer(\"getTableColumnStatistics\");\n \n@@ -856,18 +856,20 @@ private void updateTablePartitionColStats(RawStore rawStore, String catName, Str\n       rawStore.openTransaction();\n       try {\n         Table table = rawStore.getTable(catName, dbName, tblName);\n-        List<String> colNames = MetaStoreUtils.getColumnNamesForTable(table);\n-        List<String> partNames = rawStore.listPartitionNames(catName, dbName, tblName, (short) -1);\n-        // Get partition column stats for this table\n-        Deadline.startTimer(\"getPartitionColumnStatistics\");\n-        List<ColumnStatistics> partitionColStats =\n-            rawStore.getPartitionColumnStatistics(catName, dbName, tblName, partNames, colNames);\n-        Deadline.stopTimer();\n-        sharedCache.refreshPartitionColStatsInCache(catName, dbName, tblName, partitionColStats);\n-        List<Partition> parts = rawStore.getPartitionsByNames(catName, dbName, tblName, partNames);\n-        // Also save partitions for consistency as they have the stats state.\n-        for (Partition part : parts) {\n-          sharedCache.alterPartitionInCache(catName, dbName, tblName, part.getValues(), part);\n+        if (table != null) {\n+          List<String> colNames = MetaStoreUtils.getColumnNamesForTable(table);\n+          List<String> partNames = rawStore.listPartitionNames(catName, dbName, tblName, (short) -1);\n+          // Get partition column stats for this table\n+          Deadline.startTimer(\"getPartitionColumnStatistics\");\n+          List<ColumnStatistics> partitionColStats =\n+                  rawStore.getPartitionColumnStatistics(catName, dbName, tblName, partNames, colNames);\n+          Deadline.stopTimer();\n+          sharedCache.refreshPartitionColStatsInCache(catName, dbName, tblName, partitionColStats);\n+          List<Partition> parts = rawStore.getPartitionsByNames(catName, dbName, tblName, partNames);\n+          // Also save partitions for consistency as they have the stats state.\n+          for (Partition part : parts) {\n+            sharedCache.alterPartitionInCache(catName, dbName, tblName, part.getValues(), part);\n+          }\n         }\n         committed = rawStore.commitTransaction();\n       } catch (MetaException | NoSuchObjectException e) {\n@@ -886,6 +888,9 @@ private static void updateTableAggregatePartitionColStats(RawStore rawStore, Str\n                                                        String tblName) {\n       try {\n         Table table = rawStore.getTable(catName, dbName, tblName);\n+        if (table == null) {\n+          return;\n+        }\n         List<String> partNames = rawStore.listPartitionNames(catName, dbName, tblName, (short) -1);\n         List<String> colNames = MetaStoreUtils.getColumnNamesForTable(table);\n         if ((partNames != null) && (partNames.size() > 0)) {",
                "deletions": 13
            }
        ],
        "patched_files": [
            "CachedStore.java"
        ],
        "unit_tests": [
            "TestCachedStore.java"
        ]
    },
    "hive_ec4673b": {
        "repo": "hive",
        "message": "HIVE-14658 : UDF abs throws NPE when input arg type is string (Niklaus Xiao via Ashutosh Chauhan)\n\nSigned-off-by: Ashutosh Chauhan <hashutosh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/ec4673bbc61b2555ef2d992266055a331443b4d6",
        "parent": "https://github.com/apache/hive/commit/20824f27b1649ae8c2670a177463dae0f188183c",
        "bug_id": "hive_ec4673b",
        "file": [
            {
                "sha": "a8e278683a0b6c6b79b392535bc668cd27f32c1d",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java",
                "blob_url": "https://github.com/apache/hive/blob/ec4673bbc61b2555ef2d992266055a331443b4d6/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java",
                "raw_url": "https://github.com/apache/hive/raw/ec4673bbc61b2555ef2d992266055a331443b4d6/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java?ref=ec4673bbc61b2555ef2d992266055a331443b4d6",
                "patch": "@@ -130,6 +130,9 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n     case STRING:\n     case DOUBLE:\n       valObject = inputConverter.convert(valObject);\n+      if (valObject == null) {\n+        return null;\n+      }\n       resultDouble.set(Math.abs(((DoubleWritable) valObject).get()));\n       return resultDouble;\n     case DECIMAL:",
                "deletions": 0
            },
            {
                "sha": "6dbb33f9feaff8d06a88b8db603dd207ac0ab5d7",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAbs.java",
                "blob_url": "https://github.com/apache/hive/blob/ec4673bbc61b2555ef2d992266055a331443b4d6/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAbs.java",
                "raw_url": "https://github.com/apache/hive/raw/ec4673bbc61b2555ef2d992266055a331443b4d6/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAbs.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFAbs.java?ref=ec4673bbc61b2555ef2d992266055a331443b4d6",
                "patch": "@@ -133,6 +133,12 @@ public void testText() throws HiveException {\n     output = (DoubleWritable) udf.evaluate(args);\n \n     assertEquals(\"abs() test for String failed \", \"123.45\", output.toString());\n+\n+    valueObj = new DeferredJavaObject(new Text(\"foo\"));\n+    args[0] = valueObj;\n+    output = (DoubleWritable) udf.evaluate(args);\n+\n+    assertEquals(\"abs() test for String failed \", null, output);\n   }\n \n   public void testHiveDecimal() throws HiveException {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "GenericUDFAbs.java"
        ],
        "unit_tests": [
            "TestGenericUDFAbs.java"
        ]
    },
    "hive_358242f": {
        "repo": "hive",
        "message": "HIVE-9113 : Explain on query failed with NPE (Navis reviewed by Szehon Ho)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1646390 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/358242f905bf0e94282e03c919850f63f4a7a7be",
        "parent": "https://github.com/apache/hive/commit/08b8e0d960042818f37fd0dc68fa872a98009e17",
        "bug_id": "hive_358242f",
        "file": [
            {
                "sha": "1b6b33b1545aa11233f08b6418e3329b0cbd0d64",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/QBSubQuery.java",
                "blob_url": "https://github.com/apache/hive/blob/358242f905bf0e94282e03c919850f63f4a7a7be/ql/src/java/org/apache/hadoop/hive/ql/parse/QBSubQuery.java",
                "raw_url": "https://github.com/apache/hive/raw/358242f905bf0e94282e03c919850f63f4a7a7be/ql/src/java/org/apache/hadoop/hive/ql/parse/QBSubQuery.java",
                "status": "modified",
                "changes": 30,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/QBSubQuery.java?ref=358242f905bf0e94282e03c919850f63f4a7a7be",
                "patch": "@@ -382,7 +382,7 @@ protected ASTNode firstDot(ASTNode dot) {\n     /*\n      * row resolver of the SubQuery.\n      * Set by the SemanticAnalyzer after the Plan for the SubQuery is genned.\n-     * This is neede in case the SubQuery select list contains a TOK_ALLCOLREF\n+     * This is needed in case the SubQuery select list contains a TOK_ALLCOLREF\n      */\n     RowResolver sqRR;\n \n@@ -513,7 +513,10 @@ void validateAndRewriteAST(RowResolver outerQueryRR,\n       String outerQueryAlias,\n       Set<String> outerQryAliases) throws SemanticException {\n \n-    ASTNode selectClause = (ASTNode) subQueryAST.getChild(1).getChild(1);\n+    ASTNode fromClause = getChildFromSubqueryAST(\"From\", HiveParser.TOK_FROM);\n+    ASTNode insertClause = getChildFromSubqueryAST(\"Insert\", HiveParser.TOK_INSERT);\n+\n+    ASTNode selectClause = (ASTNode) insertClause.getChild(1);\n \n     int selectExprStart = 0;\n     if ( selectClause.getChild(0).getType() == HiveParser.TOK_HINTLIST ) {\n@@ -537,15 +540,15 @@ void validateAndRewriteAST(RowResolver outerQueryRR,\n      * Restriction 17.s :: SubQuery cannot use the same table alias as one used in\n      * the Outer Query.\n      */\n-    List<String> sqAliases = SubQueryUtils.getTableAliasesInSubQuery(this);\n+    List<String> sqAliases = SubQueryUtils.getTableAliasesInSubQuery(fromClause);\n     String sharedAlias = null;\n     for(String s : sqAliases ) {\n       if ( outerQryAliases.contains(s) ) {\n         sharedAlias = s;\n       }\n     }\n     if ( sharedAlias != null) {\n-      ASTNode whereClause = SubQueryUtils.subQueryWhere(subQueryAST);\n+      ASTNode whereClause = SubQueryUtils.subQueryWhere(insertClause);\n \n       if ( whereClause != null ) {\n         ASTNode u = SubQueryUtils.hasUnQualifiedColumnReferences(whereClause);\n@@ -581,7 +584,7 @@ void validateAndRewriteAST(RowResolver outerQueryRR,\n       containsAggregationExprs = containsAggregationExprs | ( r == 1 );\n     }\n \n-    rewrite(outerQueryRR, forHavingClause, outerQueryAlias);\n+    rewrite(outerQueryRR, forHavingClause, outerQueryAlias, insertClause, selectClause);\n \n     SubQueryUtils.setOriginDeep(subQueryAST, originalSQASTOrigin);\n \n@@ -631,6 +634,16 @@ void validateAndRewriteAST(RowResolver outerQueryRR,\n \n   }\n \n+  private ASTNode getChildFromSubqueryAST(String errorMsg, int type) throws SemanticException {\n+    ASTNode childAST = (ASTNode) subQueryAST.getFirstChildWithType(type);\n+    if (childAST == null && errorMsg != null) {\n+      subQueryAST.setOrigin(originalSQASTOrigin);\n+      throw new SemanticException(ErrorMsg.INVALID_SUBQUERY_EXPRESSION.getMsg(\n+          subQueryAST, errorMsg + \" clause is missing in SubQuery.\"));\n+    }\n+    return childAST;\n+  }\n+\n   private void setJoinType() {\n     if ( operator.getType() == SubQueryType.NOT_IN ||\n         operator.getType() == SubQueryType.NOT_EXISTS ) {\n@@ -744,7 +757,7 @@ String getNextCorrExprAlias() {\n    *         R2.x = min(R1.y)\n    *      Where R1 is an outer table reference, and R2 is a SubQuery table reference.\n    *   b. When hoisting the correlation predicate to a join predicate, we need to\n-   *      rewrite it to be in the form the Join code allows: so the predicte needs\n+   *      rewrite it to be in the form the Join code allows: so the predict needs\n    *      to contain a qualified column references.\n    *      We handle this by generating a new name for the aggregation expression,\n    *      like R1._gby_sq_col_1 and adding this mapping to the Outer Query's\n@@ -753,9 +766,8 @@ String getNextCorrExprAlias() {\n    */\n   private void rewrite(RowResolver parentQueryRR,\n       boolean forHavingClause,\n-      String outerQueryAlias) throws SemanticException {\n-    ASTNode selectClause = (ASTNode) subQueryAST.getChild(1).getChild(1);\n-    ASTNode whereClause = SubQueryUtils.subQueryWhere(subQueryAST);\n+      String outerQueryAlias, ASTNode insertClause, ASTNode selectClause) throws SemanticException {\n+    ASTNode whereClause = SubQueryUtils.subQueryWhere(insertClause);\n \n     if ( whereClause == null ) {\n       return;",
                "deletions": 9
            },
            {
                "sha": "57868b757b8dbbb012cb63a0c3fd7246e15adfe6",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SubQueryUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/358242f905bf0e94282e03c919850f63f4a7a7be/ql/src/java/org/apache/hadoop/hive/ql/parse/SubQueryUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/358242f905bf0e94282e03c919850f63f4a7a7be/ql/src/java/org/apache/hadoop/hive/ql/parse/SubQueryUtils.java",
                "status": "modified",
                "changes": 15,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SubQueryUtils.java?ref=358242f905bf0e94282e03c919850f63f4a7a7be",
                "patch": "@@ -43,7 +43,7 @@ static void extractConjuncts(ASTNode node, List<ASTNode> conjuncts) {\n   }\n \n   /*\n-   * Remove the SubQuery from the Where CLause Tree.\n+   * Remove the SubQuery from the Where Clause Tree.\n    * return the remaining WhereClause.\n    */\n   static ASTNode rewriteParentQueryWhere(ASTNode whereCond, ASTNode subQuery)\n@@ -271,10 +271,9 @@ static int checkAggOrWindowing(ASTNode expressionTree) throws SemanticException\n     return r;\n   }\n \n-  static List<String> getTableAliasesInSubQuery(QBSubQuery sq) {\n+  static List<String> getTableAliasesInSubQuery(ASTNode fromClause) {\n     List<String> aliases = new ArrayList<String>();\n-    ASTNode joinAST = (ASTNode) sq.getSubQueryAST().getChild(0);\n-    getTableAliasesInSubQuery((ASTNode) joinAST.getChild(0), aliases);\n+    getTableAliasesInSubQuery((ASTNode) fromClause.getChild(0), aliases);\n     return aliases;\n   }\n \n@@ -318,10 +317,10 @@ else if ( type == HiveParser.TOK_TABLE_OR_COL ) {\n     return null;\n   }\n   \n-  static ASTNode subQueryWhere(ASTNode subQueryAST) {\n-    if ( subQueryAST.getChild(1).getChildCount() > 2 &&\n-        subQueryAST.getChild(1).getChild(2).getType() == HiveParser.TOK_WHERE ) {\n-      return (ASTNode) subQueryAST.getChild(1).getChild(2);\n+  static ASTNode subQueryWhere(ASTNode insertClause) {\n+    if (insertClause.getChildCount() > 2 &&\n+        insertClause.getChild(2).getType() == HiveParser.TOK_WHERE ) {\n+      return (ASTNode) insertClause.getChild(2);\n     }\n     return null;\n   }",
                "deletions": 8
            },
            {
                "sha": "3b49ac6a0a8f00dbc26a4071042d6e05574f0767",
                "filename": "ql/src/test/queries/clientnegative/subquery_missing_from.q",
                "blob_url": "https://github.com/apache/hive/blob/358242f905bf0e94282e03c919850f63f4a7a7be/ql/src/test/queries/clientnegative/subquery_missing_from.q",
                "raw_url": "https://github.com/apache/hive/raw/358242f905bf0e94282e03c919850f63f4a7a7be/ql/src/test/queries/clientnegative/subquery_missing_from.q",
                "status": "added",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientnegative/subquery_missing_from.q?ref=358242f905bf0e94282e03c919850f63f4a7a7be",
                "patch": "@@ -0,0 +1 @@\n+select * from src where src.key in (select key);\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "eaf7735adbe8c24db3acab363c9db800b9908956",
                "filename": "ql/src/test/results/clientnegative/subquery_missing_from.q.out",
                "blob_url": "https://github.com/apache/hive/blob/358242f905bf0e94282e03c919850f63f4a7a7be/ql/src/test/results/clientnegative/subquery_missing_from.q.out",
                "raw_url": "https://github.com/apache/hive/raw/358242f905bf0e94282e03c919850f63f4a7a7be/ql/src/test/results/clientnegative/subquery_missing_from.q.out",
                "status": "added",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientnegative/subquery_missing_from.q.out?ref=358242f905bf0e94282e03c919850f63f4a7a7be",
                "patch": "@@ -0,0 +1,3 @@\n+FAILED: SemanticException Line 0:-1 Invalid SubQuery expression 'key' in definition of SubQuery sq_1 [\n+src.key in (select key)\n+] used as sq_1 at Line 1:32: From clause is missing in SubQuery.",
                "deletions": 0
            }
        ],
        "patched_files": [
            "QBSubQuery.java"
        ],
        "unit_tests": [
            "TestQBSubQuery.java"
        ]
    },
    "hive_3b8fdc1": {
        "repo": "hive",
        "message": "HIVE-11222 : LLAP: occasional NPE in parallel queries in ORC reader (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
        "commit": "https://github.com/apache/hive/commit/3b8fdc1dc7228fbd9107ee003d9dbe9e2dfb8692",
        "parent": "https://github.com/apache/hive/commit/fcc45db48ba0ad22a520ce5ec75e615d40a8c277",
        "bug_id": "hive_3b8fdc1",
        "file": [
            {
                "sha": "5cf0780291687438b4ad396443854051660fd9d6",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/io/encoded/OrcEncodedDataReader.java",
                "blob_url": "https://github.com/apache/hive/blob/3b8fdc1dc7228fbd9107ee003d9dbe9e2dfb8692/llap-server/src/java/org/apache/hadoop/hive/llap/io/encoded/OrcEncodedDataReader.java",
                "raw_url": "https://github.com/apache/hive/raw/3b8fdc1dc7228fbd9107ee003d9dbe9e2dfb8692/llap-server/src/java/org/apache/hadoop/hive/llap/io/encoded/OrcEncodedDataReader.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/io/encoded/OrcEncodedDataReader.java?ref=3b8fdc1dc7228fbd9107ee003d9dbe9e2dfb8692",
                "patch": "@@ -550,7 +550,9 @@ private OrcFileMetadata getOrReadFileMetadata() throws IOException {\n           }\n           // Create new key object to reuse for gets; we've used the old one to put in cache.\n           stripeKey = new OrcBatchKey(fileId, 0, 0);\n-        } else {\n+        }\n+        // We might have got an old value from cache; recheck it has indexes.\n+        if (!value.hasAllIndexes(globalInc)) {\n           if (DebugUtils.isTraceOrcEnabled()) {\n             LlapIoImpl.LOG.info(\"Updating indexes in stripe \" + stripeKey.stripeIx\n                 + \" metadata for includes: \" + DebugUtils.toString(globalInc));",
                "deletions": 1
            },
            {
                "sha": "3b9856234a0a03b83b393685fca2ac7c7e0a50d8",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/3b8fdc1dc7228fbd9107ee003d9dbe9e2dfb8692/ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/3b8fdc1dc7228fbd9107ee003d9dbe9e2dfb8692/ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java",
                "status": "modified",
                "changes": 17,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java?ref=3b8fdc1dc7228fbd9107ee003d9dbe9e2dfb8692",
                "patch": "@@ -46,6 +46,7 @@\n import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;\n import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n import org.apache.hadoop.hive.ql.io.filters.BloomFilterIO;\n+import org.apache.hadoop.hive.ql.io.orc.OrcProto.RowIndexEntry;\n import org.apache.hadoop.hive.ql.io.orc.RecordReaderUtils.ByteBufferAllocatorPool;\n import org.apache.hadoop.hive.ql.io.sarg.PredicateLeaf;\n import org.apache.hadoop.hive.ql.io.sarg.SearchArgument;\n@@ -705,18 +706,24 @@ public SargApplier(SearchArgument sarg, String[] columnNames, long rowIndexStrid\n       boolean hasSelected = false, hasSkipped = false;\n       for (int rowGroup = 0; rowGroup < result.length; ++rowGroup) {\n         for (int pred = 0; pred < leafValues.length; ++pred) {\n-          if (filterColumns[pred] != -1) {\n-            OrcProto.ColumnStatistics stats =\n-                indexes[filterColumns[pred]].getEntry(rowGroup).getStatistics();\n+          int columnIx = filterColumns[pred];\n+          if (columnIx != -1) {\n+            if (indexes[columnIx] == null) {\n+              throw new AssertionError(\"Index is not populated for \" + columnIx);\n+            }\n+            RowIndexEntry entry = indexes[columnIx].getEntry(rowGroup);\n+            if (entry == null) {\n+              throw new AssertionError(\"RG is not populated for \" + columnIx + \" rg \" + rowGroup);\n+            }\n+            OrcProto.ColumnStatistics stats = entry.getStatistics();\n             OrcProto.BloomFilter bf = null;\n             if (bloomFilterIndices != null && bloomFilterIndices[filterColumns[pred]] != null) {\n               bf = bloomFilterIndices[filterColumns[pred]].getBloomFilter(rowGroup);\n             }\n             leafValues[pred] = evaluatePredicateProto(stats, sargLeaves.get(pred), bf);\n             if (LOG.isTraceEnabled()) {\n               LOG.trace(\"Stats = \" + stats);\n-              LOG.trace(\"Setting \" + sargLeaves.get(pred) + \" to \" +\n-                  leafValues[pred]);\n+              LOG.trace(\"Setting \" + sargLeaves.get(pred) + \" to \" + leafValues[pred]);\n             }\n           } else {\n             // the column is a virtual column",
                "deletions": 5
            }
        ],
        "patched_files": [
            "RecordReaderImpl.java"
        ],
        "unit_tests": [
            "TestRecordReaderImpl.java"
        ]
    },
    "hive_1d159ff": {
        "repo": "hive",
        "message": "HIVE-16122: NPE Hive Druid split introduced by HIVE-15928 (Slim Bouguerra, reviewed by Jesus Camacho Rodriguez)",
        "commit": "https://github.com/apache/hive/commit/1d159ffd3c5016b78ca2814b837c02ab3f4be1de",
        "parent": "https://github.com/apache/hive/commit/7f4a3e17ec2fa886276a7f278e5846e0e7ebc8a6",
        "bug_id": "hive_1d159ff",
        "file": [
            {
                "sha": "5159b426df985a15817ec13071be783ab18cc51a",
                "filename": "druid-handler/src/java/org/apache/hadoop/hive/druid/io/HiveDruidSplit.java",
                "blob_url": "https://github.com/apache/hive/blob/1d159ffd3c5016b78ca2814b837c02ab3f4be1de/druid-handler/src/java/org/apache/hadoop/hive/druid/io/HiveDruidSplit.java",
                "raw_url": "https://github.com/apache/hive/raw/1d159ffd3c5016b78ca2814b837c02ab3f4be1de/druid-handler/src/java/org/apache/hadoop/hive/druid/io/HiveDruidSplit.java",
                "status": "modified",
                "changes": 19,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/druid-handler/src/java/org/apache/hadoop/hive/druid/io/HiveDruidSplit.java?ref=1d159ffd3c5016b78ca2814b837c02ab3f4be1de",
                "patch": "@@ -49,22 +49,37 @@ public HiveDruidSplit(String druidQuery, Path dummyPath, String hosts[]) {\n   public void write(DataOutput out) throws IOException {\n     super.write(out);\n     out.writeUTF(druidQuery);\n+    out.writeInt(hosts.length);\n+    for (String host : hosts) {\n+      out.writeUTF(host);\n+    }\n   }\n \n   @Override\n   public void readFields(DataInput in) throws IOException {\n     super.readFields(in);\n     druidQuery = in.readUTF();\n+    int length = in.readInt();\n+    String[] listHosts = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      listHosts[i] = in.readUTF();\n+    }\n+    hosts = listHosts;\n   }\n \n   public String getDruidQuery() {\n     return druidQuery;\n   }\n \n+  @Override\n+  public String[] getLocations() throws IOException {\n+    return hosts;\n+  }\n+\n   @Override\n   public String toString() {\n-    return \"HiveDruidSplit{\" + druidQuery + \", \" \n-            + (hosts == null ? \"empty hosts\" : Arrays.toString(hosts))  + \"}\";\n+    return \"HiveDruidSplit{\" + druidQuery + \", \"\n+            + (hosts == null ? \"empty hosts\" : Arrays.toString(hosts)) + \"}\";\n   }\n \n }",
                "deletions": 2
            },
            {
                "sha": "234c783d25354cfa48890f659cc0083eff1c0c66",
                "filename": "druid-handler/src/test/org/apache/hadoop/hive/druid/io/TestHiveDruidSplit.java",
                "blob_url": "https://github.com/apache/hive/blob/1d159ffd3c5016b78ca2814b837c02ab3f4be1de/druid-handler/src/test/org/apache/hadoop/hive/druid/io/TestHiveDruidSplit.java",
                "raw_url": "https://github.com/apache/hive/raw/1d159ffd3c5016b78ca2814b837c02ab3f4be1de/druid-handler/src/test/org/apache/hadoop/hive/druid/io/TestHiveDruidSplit.java",
                "status": "added",
                "changes": 46,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/druid-handler/src/test/org/apache/hadoop/hive/druid/io/TestHiveDruidSplit.java?ref=1d159ffd3c5016b78ca2814b837c02ab3f4be1de",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.druid.io;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+public class TestHiveDruidSplit {\n+  @Test\n+  public void testSerDeser() throws IOException {\n+    HiveDruidSplit hiveDruidSplit = new HiveDruidSplit(\"query string\", new Path(\"test-path\"), new String []{\"host:8080\", \"host2:8090\"});\n+    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+    DataOutput dataOutput = new DataOutputStream(byteArrayOutputStream);\n+    hiveDruidSplit.write(dataOutput);\n+    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n+    HiveDruidSplit actualHiveDruidSplit = new HiveDruidSplit();\n+    actualHiveDruidSplit.readFields(new DataInputStream(byteArrayInputStream));\n+    Assert.assertEquals(actualHiveDruidSplit.getDruidQuery(), \"query string\");\n+    Assert.assertArrayEquals(actualHiveDruidSplit.getLocations(),  new String []{\"host:8080\", \"host2:8090\"});\n+  }\n+\n+}\n\\ No newline at end of file",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HiveDruidSplit.java"
        ],
        "unit_tests": [
            "TestHiveDruidSplit.java"
        ]
    },
    "hive_63080f8": {
        "repo": "hive",
        "message": "HIVE-10018 Activating SQLStandardAuth results in NPE [hbase-metastore branch] (Alan Gates)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/branches/hbase-metastore@1668746 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/63080f82c02c2b7756be09209bf07f03280e4f9b",
        "parent": "https://github.com/apache/hive/commit/10cfdd96b69084bf0da7b864113d073006147e77",
        "bug_id": "hive_63080f8",
        "file": [
            {
                "sha": "c30ac34cb65d10ac9b0eb4a504fe9a385f6879b9",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/IMockUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/63080f82c02c2b7756be09209bf07f03280e4f9b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/IMockUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/63080f82c02c2b7756be09209bf07f03280e4f9b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/IMockUtils.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/IMockUtils.java?ref=63080f82c02c2b7756be09209bf07f03280e4f9b",
                "patch": "@@ -25,6 +25,8 @@\n import org.apache.hadoop.hive.cli.CliSessionState;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.Driver;\n+import org.apache.hadoop.hive.ql.security.SessionStateConfigUserAuthenticator;\n+import org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest;\n import org.apache.hadoop.hive.ql.session.SessionState;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n@@ -107,6 +109,14 @@ protected void setupDriver() {\n         \"org.apache.hadoop.hive.metastore.hbase.HBaseStore\");\n     conf.setBoolVar(HiveConf.ConfVars.METASTORE_FASTPATH, true);\n     conf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY, false);\n+    // Setup so we can test SQL standard auth\n+    conf.setBoolVar(HiveConf.ConfVars.HIVE_TEST_AUTHORIZATION_SQLSTD_HS2_MODE, true);\n+    conf.setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,\n+        SQLStdHiveAuthorizerFactoryForTest.class.getName());\n+    conf.setVar(HiveConf.ConfVars.HIVE_AUTHENTICATOR_MANAGER,\n+        SessionStateConfigUserAuthenticator.class.getName());\n+    conf.setBoolVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_ENABLED, true);\n+    conf.setVar(HiveConf.ConfVars.USERS_IN_ADMIN_ROLE, System.getProperty(\"user.name\"));\n     HBaseReadWrite.setTestConnection(hconn);\n \n     SessionState.start(new CliSessionState(conf));",
                "deletions": 0
            },
            {
                "sha": "fe5e8e2789af748e91ff5d95832e5c23d79088b5",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/TestHBaseMetastoreSql.java",
                "blob_url": "https://github.com/apache/hive/blob/63080f82c02c2b7756be09209bf07f03280e4f9b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/TestHBaseMetastoreSql.java",
                "raw_url": "https://github.com/apache/hive/raw/63080f82c02c2b7756be09209bf07f03280e4f9b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/TestHBaseMetastoreSql.java",
                "status": "modified",
                "changes": 58,
                "additions": 57,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/TestHBaseMetastoreSql.java?ref=63080f82c02c2b7756be09209bf07f03280e4f9b",
                "patch": "@@ -73,7 +73,10 @@ public void insertIntoPartitionTable() throws Exception {\n   public void database() throws Exception {\n     CommandProcessorResponse rsp = driver.run(\"create database db\");\n     Assert.assertEquals(0, rsp.getResponseCode());\n-    rsp = driver.run(\"alter database db set owner user me\");\n+    rsp = driver.run(\"set role admin\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    // security doesn't let me change the properties\n+    rsp = driver.run(\"alter database db set dbproperties ('key' = 'value')\");\n     Assert.assertEquals(0, rsp.getResponseCode());\n     rsp = driver.run(\"drop database db\");\n     Assert.assertEquals(0, rsp.getResponseCode());\n@@ -124,5 +127,58 @@ public void partitionedTable() throws Exception {\n     Assert.assertEquals(0, rsp.getResponseCode());\n   }\n \n+  @Test\n+  public void role() throws Exception {\n+    CommandProcessorResponse rsp = driver.run(\"set role admin\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"create role role1\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"grant role1 to user fred with admin option\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"create role role2\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"grant role1 to role role2\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"show principals role1\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"show role grant role role1\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"show role grant user \" + System.getProperty(\"user.name\"));\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"show roles\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"revoke admin option for role1 from user fred\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"revoke role1 from user fred\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"revoke role1 from role role2\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"show current roles\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+\n+    rsp = driver.run(\"drop role role2\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"drop role role1\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+  }\n+\n+  @Test\n+  public void grant() throws Exception {\n+    CommandProcessorResponse rsp = driver.run(\"set role admin\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    rsp = driver.run(\"create role role3\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    driver.run(\"create table granttbl (c int)\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    driver.run(\"grant select on granttbl to \" + System.getProperty(\"user.name\"));\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    driver.run(\"grant select on granttbl to role3 with grant option\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    driver.run(\"revoke select on granttbl from \" + System.getProperty(\"user.name\"));\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+    driver.run(\"revoke grant option for select on granttbl from role3\");\n+    Assert.assertEquals(0, rsp.getResponseCode());\n+  }\n+\n \n }",
                "deletions": 1
            },
            {
                "sha": "159b9e729876d0da7c68cbc76866b9e2920fd2cb",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/hbase/HBaseStore.java",
                "blob_url": "https://github.com/apache/hive/blob/63080f82c02c2b7756be09209bf07f03280e4f9b/metastore/src/java/org/apache/hadoop/hive/metastore/hbase/HBaseStore.java",
                "raw_url": "https://github.com/apache/hive/raw/63080f82c02c2b7756be09209bf07f03280e4f9b/metastore/src/java/org/apache/hadoop/hive/metastore/hbase/HBaseStore.java",
                "status": "modified",
                "changes": 94,
                "additions": 57,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/hbase/HBaseStore.java?ref=63080f82c02c2b7756be09209bf07f03280e4f9b",
                "patch": "@@ -617,17 +617,22 @@ public PrincipalPrivilegeSet getUserPrivilegeSet(String userName, List<String> g\n       PrincipalPrivilegeSet pps = new PrincipalPrivilegeSet();\n       PrincipalPrivilegeSet global = getHBase().getGlobalPrivs();\n       if (global == null) return null;\n-      List<PrivilegeGrantInfo> pgi = global.getUserPrivileges().get(userName);\n-      if (pgi != null) {\n-        pps.putToUserPrivileges(userName, pgi);\n+      List<PrivilegeGrantInfo> pgi;\n+      if (global.getUserPrivileges() != null) {\n+        pgi = global.getUserPrivileges().get(userName);\n+        if (pgi != null) {\n+          pps.putToUserPrivileges(userName, pgi);\n+        }\n       }\n \n-      List<String> roles = getHBase().getUserRoles(userName);\n-      if (roles != null) {\n-        for (String role : roles) {\n-          pgi = global.getRolePrivileges().get(role);\n-          if (pgi != null) {\n-            pps.putToRolePrivileges(role, pgi);\n+      if (global.getRolePrivileges() != null) {\n+        List<String> roles = getHBase().getUserRoles(userName);\n+        if (roles != null) {\n+          for (String role : roles) {\n+            pgi = global.getRolePrivileges().get(role);\n+            if (pgi != null) {\n+              pps.putToRolePrivileges(role, pgi);\n+            }\n           }\n         }\n       }\n@@ -645,18 +650,25 @@ public PrincipalPrivilegeSet getDBPrivilegeSet(String dbName, String userName,\n     try {\n       PrincipalPrivilegeSet pps = new PrincipalPrivilegeSet();\n       Database db = getHBase().getDb(dbName);\n-      // Find the user privileges for this db\n-      List<PrivilegeGrantInfo> pgi = db.getPrivileges().getUserPrivileges().get(userName);\n-      if (pgi != null) {\n-        pps.putToUserPrivileges(userName, pgi);\n-      }\n-\n-      List<String> roles = getHBase().getUserRoles(userName);\n-      if (roles != null) {\n-        for (String role : roles) {\n-          pgi = db.getPrivileges().getRolePrivileges().get(role);\n+      if (db.getPrivileges() != null) {\n+        List<PrivilegeGrantInfo> pgi;\n+        // Find the user privileges for this db\n+        if (db.getPrivileges().getUserPrivileges() != null) {\n+          pgi = db.getPrivileges().getUserPrivileges().get(userName);\n           if (pgi != null) {\n-            pps.putToRolePrivileges(role, pgi);\n+            pps.putToUserPrivileges(userName, pgi);\n+          }\n+        }\n+\n+        if (db.getPrivileges().getRolePrivileges() != null) {\n+          List<String> roles = getHBase().getUserRoles(userName);\n+          if (roles != null) {\n+            for (String role : roles) {\n+              pgi = db.getPrivileges().getRolePrivileges().get(role);\n+              if (pgi != null) {\n+                pps.putToRolePrivileges(role, pgi);\n+              }\n+            }\n           }\n         }\n       }\n@@ -674,18 +686,24 @@ public PrincipalPrivilegeSet getTablePrivilegeSet(String dbName, String tableNam\n     try {\n       PrincipalPrivilegeSet pps = new PrincipalPrivilegeSet();\n       Table table = getHBase().getTable(dbName, tableName);\n-      // Find the user privileges for this db\n-      List<PrivilegeGrantInfo> pgi = table.getPrivileges().getUserPrivileges().get(userName);\n-      if (pgi != null) {\n-        pps.putToUserPrivileges(userName, pgi);\n-      }\n-\n-      List<String> roles = getHBase().getUserRoles(userName);\n-      if (roles != null) {\n-        for (String role : roles) {\n-          pgi = table.getPrivileges().getRolePrivileges().get(role);\n+      List<PrivilegeGrantInfo> pgi;\n+      if (table.getPrivileges() != null) {\n+        if (table.getPrivileges().getUserPrivileges() != null) {\n+          pgi = table.getPrivileges().getUserPrivileges().get(userName);\n           if (pgi != null) {\n-            pps.putToRolePrivileges(role, pgi);\n+            pps.putToUserPrivileges(userName, pgi);\n+          }\n+        }\n+\n+        if (table.getPrivileges().getRolePrivileges() != null) {\n+          List<String> roles = getHBase().getUserRoles(userName);\n+          if (roles != null) {\n+            for (String role : roles) {\n+              pgi = table.getPrivileges().getRolePrivileges().get(role);\n+              if (pgi != null) {\n+                pps.putToRolePrivileges(role, pgi);\n+              }\n+            }\n           }\n         }\n       }\n@@ -1068,12 +1086,14 @@ public Role getRole(String roleName) throws NoSuchObjectException {\n       List<RolePrincipalGrant> rpgs = new ArrayList<RolePrincipalGrant>(roles.size());\n       for (Role role : roles) {\n         HbaseMetastoreProto.RoleGrantInfoList grants = getHBase().getRolePrincipals(role.getRoleName());\n-        for (HbaseMetastoreProto.RoleGrantInfo grant : grants.getGrantInfoList()) {\n-          if (grant.getPrincipalType().equals(principalType) &&\n-              grant.getPrincipalName().equals(principalName)) {\n-            rpgs.add(new RolePrincipalGrant(role.getRoleName(), principalName, principalType,\n-                grant.getGrantOption(), (int)grant.getAddTime(), grant.getGrantor(),\n-                HBaseUtils.convertPrincipalTypes(grant.getGrantorType())));\n+        if (grants != null) {\n+          for (HbaseMetastoreProto.RoleGrantInfo grant : grants.getGrantInfoList()) {\n+            if (grant.getPrincipalType() == HBaseUtils.convertPrincipalTypes(principalType) &&\n+                grant.getPrincipalName().equals(principalName)) {\n+              rpgs.add(new RolePrincipalGrant(role.getRoleName(), principalName, principalType,\n+                  grant.getGrantOption(), (int) grant.getAddTime(), grant.getGrantor(),\n+                  HBaseUtils.convertPrincipalTypes(grant.getGrantorType())));\n+            }\n           }\n         }\n       }",
                "deletions": 37
            }
        ],
        "patched_files": [
            "HBaseStore.java",
            "IMockUtils.java"
        ],
        "unit_tests": [
            "TestHBaseMetastoreSql.java",
            "TestHBaseStore.java"
        ]
    },
    "hive_10cfdd9": {
        "repo": "hive",
        "message": "HIVE-10010 Alter table results in NPE [hbase-metastore branch] (Alan Gates)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/branches/hbase-metastore@1668071 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/10cfdd96b69084bf0da7b864113d073006147e77",
        "parent": "https://github.com/apache/hive/commit/35ac8b0257614523064c1b3647a91e123b78e999",
        "bug_id": "hive_10cfdd9",
        "file": [
            {
                "sha": "676c3896da53129e6d813ae0dcfe61f278563c35",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/TestHBaseMetastoreSql.java",
                "blob_url": "https://github.com/apache/hive/blob/10cfdd96b69084bf0da7b864113d073006147e77/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/TestHBaseMetastoreSql.java",
                "raw_url": "https://github.com/apache/hive/raw/10cfdd96b69084bf0da7b864113d073006147e77/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/TestHBaseMetastoreSql.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/hbase/TestHBaseMetastoreSql.java?ref=10cfdd96b69084bf0da7b864113d073006147e77",
                "patch": "@@ -79,7 +79,7 @@ public void database() throws Exception {\n     Assert.assertEquals(0, rsp.getResponseCode());\n   }\n \n-  @Ignore\n+  @Test\n   public void table() throws Exception {\n     driver.run(\"create table tbl (c int)\");\n     CommandProcessorResponse rsp = driver.run(\"insert into table tbl values (3)\");\n@@ -92,7 +92,7 @@ public void table() throws Exception {\n     Assert.assertEquals(0, rsp.getResponseCode());\n   }\n \n-  @Ignore\n+  @Test\n   public void partitionedTable() throws Exception {\n     driver.run(\"create table parttbl (c int) partitioned by (ds string)\");\n     CommandProcessorResponse rsp =\n@@ -113,8 +113,11 @@ public void partitionedTable() throws Exception {\n     Assert.assertEquals(0, rsp.getResponseCode());\n     rsp = driver.run(\"alter table parttbl touch partition (ds = 'whenever')\");\n     Assert.assertEquals(0, rsp.getResponseCode());\n+    // TODO - Can't do this until getPartitionsByExpr implemented\n+    /*\n     rsp = driver.run(\"alter table parttbl drop partition (ds = 'whenever')\");\n     Assert.assertEquals(0, rsp.getResponseCode());\n+    */\n     rsp = driver.run(\"select * from parttbl\");\n     Assert.assertEquals(0, rsp.getResponseCode());\n     rsp = driver.run(\"select * from parttbl where ds = 'today'\");",
                "deletions": 2
            },
            {
                "sha": "d772dca50db704313c70c53d42237bfe785430bd",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/hbase/SharedStorageDescriptor.java",
                "blob_url": "https://github.com/apache/hive/blob/10cfdd96b69084bf0da7b864113d073006147e77/metastore/src/java/org/apache/hadoop/hive/metastore/hbase/SharedStorageDescriptor.java",
                "raw_url": "https://github.com/apache/hive/raw/10cfdd96b69084bf0da7b864113d073006147e77/metastore/src/java/org/apache/hadoop/hive/metastore/hbase/SharedStorageDescriptor.java",
                "status": "modified",
                "changes": 770,
                "additions": 122,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/hbase/SharedStorageDescriptor.java?ref=10cfdd96b69084bf0da7b864113d073006147e77",
                "patch": "@@ -27,751 +27,225 @@\n import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n \n /**\n  * A {@link org.apache.hadoop.hive.metastore.api.StorageDescriptor} with most of it's content\n- * shared.  Location and parameters are left alone, everything else is redirected to a shared\n- * reference in the cache.\n+ * shallow copied from the underlying storage descriptor.  Location and parameters are left alone.\n+ * To avoid issues when users change the contents, all lists and nested structures (cols, serde,\n+ * buckets, sortCols, and skewed) are deep copied when they are accessed for reading or writing.\n+ * (It has to be done on read as well because there's no way to guarantee the user won't change the\n+ * nested structure or list, which would result in changing every storage descriptor sharing that\n+ * structure.)  Users wishing better performance can call setReadyOnly(), which will prevent the\n+ * copies.\n  */\n public class SharedStorageDescriptor extends StorageDescriptor {\n   static final private Log LOG = LogFactory.getLog(SharedStorageDescriptor.class.getName());\n-  private StorageDescriptor shared;\n-  private boolean copied = false;\n-  private CopyOnWriteColList colList = null;\n-  private CopyOnWriteOrderList orderList = null;\n-  private CopyOnWriteBucketList bucketList = null;\n+  private boolean colsCopied = false;\n+  private boolean serdeCopied = false;\n+  private boolean bucketsCopied = false;\n+  private boolean sortCopied = false;\n+  private boolean skewedCopied = false;\n \n   SharedStorageDescriptor() {\n   }\n \n-  public SharedStorageDescriptor(SharedStorageDescriptor that) {\n-    this.setLocation(that.getLocation());\n-    this.setParameters(that.getParameters());\n-    this.shared = that.shared;\n+  void setShared(StorageDescriptor shared) {\n+    if (shared.getCols() != null) super.setCols(shared.getCols());\n+    // Skip location\n+    if (shared.getInputFormat() != null) super.setInputFormat(shared.getInputFormat());\n+    if (shared.getOutputFormat() != null) super.setOutputFormat(shared.getOutputFormat());\n+    super.setCompressed(shared.isCompressed());\n+    super.setNumBuckets(shared.getNumBuckets());\n+    if (shared.getSerdeInfo() != null) super.setSerdeInfo(shared.getSerdeInfo());\n+    if (shared.getBucketCols() != null) super.setBucketCols(shared.getBucketCols());\n+    if (shared.getSortCols() != null) super.setSortCols(shared.getSortCols());\n+    // skip parameters\n+    if (shared.getSkewedInfo() != null) super.setSkewedInfo(shared.getSkewedInfo());\n+    super.setStoredAsSubDirectories(shared.isStoredAsSubDirectories());\n   }\n \n-  @Override\n-  public StorageDescriptor deepCopy() {\n-    return new SharedStorageDescriptor(this);\n+  /**\n+   * Promise that you'll only use this shared storage descriptor in a read only mode.\n+   * This prevents the copies of the nested structures and lists when reading them.  However, the\n+   * caller must not change the structures or lists returned to it, as this will change all\n+   * storage descriptor sharing that list.\n+   */\n+  public void setReadOnly() {\n+    colsCopied = serdeCopied = bucketsCopied = sortCopied = skewedCopied = true;\n   }\n \n   @Override\n-  public boolean isSetCols() {\n-    return shared.isSetCols();\n+  public void addToCols(FieldSchema fs) {\n+    copyCols();\n+    super.addToCols(fs);\n   }\n \n   @Override\n   public List<FieldSchema> getCols() {\n-    return copied ? shared.getCols() : (\n-        shared.getCols() == null ? null : copyCols(shared.getCols()));\n-  }\n-\n-  @Override\n-  public int getColsSize() {\n-    return shared.getColsSize();\n-  }\n-\n-  @Override\n-  public Iterator<FieldSchema> getColsIterator() {\n-    return shared.getColsIterator();\n+    copyCols();\n+    return super.getCols();\n   }\n \n   @Override\n   public void setCols(List<FieldSchema> cols) {\n-    copyOnWrite();\n-    shared.setCols(cols);\n-  }\n-\n-  @Override\n-  public void addToCols(FieldSchema fs) {\n-    copyOnWrite();\n-    shared.addToCols(fs);\n+    colsCopied = true;\n+    super.setCols(cols);\n   }\n \n   @Override\n   public void unsetCols() {\n-    copyOnWrite();\n-    shared.unsetCols();\n+    colsCopied = true;\n+    super.unsetCols();\n   }\n \n   @Override\n-  public boolean isSetInputFormat() {\n-    return shared.isSetInputFormat();\n-  }\n-\n-  @Override\n-  public String getInputFormat() {\n-    return shared.getInputFormat();\n-  }\n-\n-  @Override\n-  public void setInputFormat(String inputFormat) {\n-    copyOnWrite();\n-    shared.setInputFormat(inputFormat);\n-  }\n-\n-  @Override\n-  public void unsetInputFormat() {\n-    copyOnWrite();\n-    shared.unsetInputFormat();\n-  }\n-\n-  @Override\n-  public boolean isSetOutputFormat() {\n-    return shared.isSetOutputFormat();\n-  }\n-\n-  @Override\n-  public String getOutputFormat() {\n-    return shared.getOutputFormat();\n-  }\n-\n-  @Override\n-  public void setOutputFormat(String outputFormat) {\n-    copyOnWrite();\n-    shared.setOutputFormat(outputFormat);\n-  }\n-\n-  @Override\n-  public void unsetOutputFormat() {\n-    copyOnWrite();\n-    shared.unsetOutputFormat();\n-  }\n-\n-  @Override\n-  public boolean isSetCompressed() {\n-    return shared.isSetCompressed();\n-  }\n-\n-  @Override\n-  public boolean isCompressed() {\n-    return shared.isCompressed();\n-  }\n-\n-  @Override\n-  public void setCompressed(boolean isCompressed) {\n-    copyOnWrite();\n-    shared.setCompressed(isCompressed);\n-  }\n-\n-  @Override\n-  public void unsetCompressed() {\n-    copyOnWrite();\n-    shared.unsetCompressed();\n-  }\n-\n-  @Override\n-  public boolean isSetNumBuckets() {\n-    return shared.isSetNumBuckets();\n-  }\n-\n-  @Override\n-  public int getNumBuckets() {\n-    return shared.getNumBuckets();\n-  }\n-\n-  @Override\n-  public void setNumBuckets(int numBuckets) {\n-    copyOnWrite();\n-    shared.setNumBuckets(numBuckets);\n-  }\n-\n-  @Override\n-  public void unsetNumBuckets() {\n-    copyOnWrite();\n-    shared.unsetNumBuckets();\n+  public Iterator<FieldSchema> getColsIterator() {\n+    copyCols();\n+    return super.getColsIterator();\n   }\n \n-  @Override\n-  public boolean isSetSerdeInfo() {\n-    return shared.isSetSerdeInfo();\n+  private void copyCols() {\n+    if (!colsCopied) {\n+      colsCopied = true;\n+      if (super.getCols() != null) {\n+        List<FieldSchema> cols = new ArrayList<FieldSchema>(super.getColsSize());\n+        for (FieldSchema fs : super.getCols()) cols.add(new FieldSchema(fs));\n+        super.setCols(cols);\n+      }\n+    }\n   }\n \n   @Override\n   public SerDeInfo getSerdeInfo() {\n-    return copied ? shared.getSerdeInfo() : (\n-        shared.getSerdeInfo() == null ? null : new SerDeInfoWrapper(shared.getSerdeInfo()));\n+    copySerde();\n+    return super.getSerdeInfo();\n   }\n \n   @Override\n   public void setSerdeInfo(SerDeInfo serdeInfo) {\n-    copyOnWrite();\n-    shared.setSerdeInfo(serdeInfo);\n+    serdeCopied = true;\n+    super.setSerdeInfo(serdeInfo);\n   }\n \n   @Override\n   public void unsetSerdeInfo() {\n-    copyOnWrite();\n-    shared.unsetSerdeInfo();\n-  }\n-\n-  @Override\n-  public boolean isSetBucketCols() {\n-    return shared.isSetBucketCols();\n+    serdeCopied = true;\n+    super.unsetSerdeInfo();\n   }\n \n-  @Override\n-  public List<String> getBucketCols() {\n-    return copied ? shared.getBucketCols() : (\n-        shared.getBucketCols() == null ? null : copyBucketCols(shared.getBucketCols()));\n-  }\n-\n-  @Override\n-  public int getBucketColsSize() {\n-    return shared.getBucketColsSize();\n+  private void copySerde() {\n+    if (!serdeCopied) {\n+      serdeCopied = true;\n+      if (super.getSerdeInfo() != null) super.setSerdeInfo(new SerDeInfo(super.getSerdeInfo()));\n+    }\n   }\n \n   @Override\n-  public Iterator<String> getBucketColsIterator() {\n-    return shared.getBucketColsIterator();\n+  public void addToBucketCols(String bucket) {\n+    copyBucketCols();\n+    super.addToBucketCols(bucket);\n   }\n \n   @Override\n-  public void setBucketCols(List<String> bucketCols) {\n-    copyOnWrite();\n-    shared.setBucketCols(bucketCols);\n+  public List<String> getBucketCols() {\n+    copyBucketCols();\n+    return super.getBucketCols();\n   }\n \n   @Override\n-  public void addToBucketCols(String bucketCol) {\n-    copyOnWrite();\n-    shared.addToBucketCols(bucketCol);\n+  public void setBucketCols(List<String> buckets) {\n+    bucketsCopied = true;\n+    super.setBucketCols(buckets);\n   }\n \n   @Override\n   public void unsetBucketCols() {\n-    copyOnWrite();\n-    shared.unsetBucketCols();\n+    bucketsCopied = true;\n+    super.unsetBucketCols();\n   }\n \n   @Override\n-  public boolean isSetSortCols() {\n-    return shared.isSetSortCols();\n+  public Iterator<String> getBucketColsIterator() {\n+    copyBucketCols();\n+    return super.getBucketColsIterator();\n   }\n \n-  @Override\n-  public List<Order> getSortCols() {\n-    return copied ? shared.getSortCols() : (\n-        shared.getSortCols() == null ? null : copySort(shared.getSortCols()));\n+  private void copyBucketCols() {\n+    if (!bucketsCopied) {\n+      bucketsCopied = true;\n+      if (super.getBucketCols() != null) {\n+        List<String> buckets = new ArrayList<String>(super.getBucketColsSize());\n+        for (String bucket : super.getBucketCols()) buckets.add(bucket);\n+        super.setBucketCols(buckets);\n+      }\n+    }\n   }\n \n   @Override\n-  public int getSortColsSize() {\n-    return shared.getSortColsSize();\n+  public void addToSortCols(Order sort) {\n+    copySort();\n+    super.addToSortCols(sort);\n   }\n \n   @Override\n-  public Iterator<Order> getSortColsIterator() {\n-    return shared.getSortColsIterator();\n+  public List<Order> getSortCols() {\n+    copySort();\n+    return super.getSortCols();\n   }\n \n   @Override\n-  public void setSortCols(List<Order> sortCols) {\n-    copyOnWrite();\n-    shared.setSortCols(sortCols);\n+  public void setSortCols(List<Order> sorts) {\n+    sortCopied = true;\n+    super.setSortCols(sorts);\n   }\n \n   @Override\n-  public void addToSortCols(Order sortCol) {\n-    copyOnWrite();\n-    shared.addToSortCols(sortCol);\n+  public void unsetSortCols() {\n+    sortCopied = true;\n+    super.unsetSortCols();\n   }\n \n   @Override\n-  public void unsetSortCols() {\n-    copyOnWrite();\n-    shared.unsetSortCols();\n+  public Iterator<Order> getSortColsIterator() {\n+    copySort();\n+    return super.getSortColsIterator();\n   }\n \n-  @Override\n-  public boolean isSetSkewedInfo() {\n-    return shared.isSetSkewedInfo();\n+  private void copySort() {\n+    if (!sortCopied) {\n+      sortCopied = true;\n+      if (super.getSortCols() != null) {\n+        List<Order> sortCols = new ArrayList<Order>(super.getSortColsSize());\n+        for (Order sortCol : super.getSortCols()) sortCols.add(new Order(sortCol));\n+        super.setSortCols(sortCols);\n+      }\n+    }\n   }\n \n   @Override\n   public SkewedInfo getSkewedInfo() {\n-    return copied ? shared.getSkewedInfo() : (\n-        shared.getSkewedInfo() == null ? null : new SkewWrapper(shared.getSkewedInfo()));\n+    copySkewed();\n+    return super.getSkewedInfo();\n   }\n \n   @Override\n   public void setSkewedInfo(SkewedInfo skewedInfo) {\n-    copyOnWrite();\n-    shared.setSkewedInfo(skewedInfo);\n+    skewedCopied = true;\n+    super.setSkewedInfo(skewedInfo);\n   }\n \n   @Override\n   public void unsetSkewedInfo() {\n-    copyOnWrite();\n-    shared.unsetSkewedInfo();\n-  }\n-\n-  @Override\n-  public boolean isSetStoredAsSubDirectories() {\n-    return shared.isSetStoredAsSubDirectories();\n-  }\n-\n-  @Override\n-  public boolean isStoredAsSubDirectories() {\n-    return shared.isStoredAsSubDirectories();\n-  }\n-\n-  @Override\n-  public void setStoredAsSubDirectories(boolean sasd) {\n-    copyOnWrite();\n-    shared.setStoredAsSubDirectories(sasd);\n-  }\n-\n-  @Override\n-  public void unsetStoredAsSubDirectories() {\n-    copyOnWrite();\n-    shared.unsetStoredAsSubDirectories();\n+    skewedCopied = true;\n+    super.unsetSkewedInfo();\n   }\n \n-  void setShared(StorageDescriptor sd) {\n-    shared = sd;\n-  }\n-\n-  StorageDescriptor getShared() {\n-    return shared;\n-  }\n-\n-  private void copyOnWrite() {\n-    if (!copied) {\n-      shared = new StorageDescriptor(shared);\n-      copied = true;\n-    }\n-  }\n-\n-  private class SerDeInfoWrapper extends SerDeInfo {\n-\n-    SerDeInfoWrapper(SerDeInfo serde) {\n-      super(serde);\n-    }\n-\n-    @Override\n-    public void setName(String name) {\n-      copyOnWrite();\n-      shared.getSerdeInfo().setName(name);\n-    }\n-\n-    @Override\n-    public void unsetName() {\n-      copyOnWrite();\n-      shared.getSerdeInfo().unsetName();\n-    }\n-\n-    @Override\n-    public void setSerializationLib(String lib) {\n-      copyOnWrite();\n-      shared.getSerdeInfo().setSerializationLib(lib);\n-    }\n-\n-    @Override\n-    public void unsetSerializationLib() {\n-      copyOnWrite();\n-      shared.getSerdeInfo().unsetSerializationLib();\n-    }\n-\n-    @Override\n-    public void setParameters(Map<String, String> parameters) {\n-      copyOnWrite();\n-      shared.getSerdeInfo().setParameters(parameters);\n-    }\n-\n-    @Override\n-    public void unsetParameters() {\n-      copyOnWrite();\n-      shared.getSerdeInfo().unsetParameters();\n-    }\n-\n-    @Override\n-    public void putToParameters(String key, String value) {\n-      copyOnWrite();\n-      shared.getSerdeInfo().putToParameters(key, value);\n+  private void copySkewed() {\n+    if (!skewedCopied) {\n+      skewedCopied = true;\n+      if (super.getSkewedInfo() != null) super.setSkewedInfo(new SkewedInfo(super.getSkewedInfo()));\n     }\n   }\n-\n-  private class SkewWrapper extends SkewedInfo {\n-    SkewWrapper(SkewedInfo skew) {\n-      super(skew);\n-    }\n-\n-    @Override\n-    public void setSkewedColNames(List<String> skewedColNames) {\n-      copyOnWrite();\n-      shared.getSkewedInfo().setSkewedColNames(skewedColNames);\n-    }\n-\n-    @Override\n-    public void unsetSkewedColNames() {\n-      copyOnWrite();\n-      shared.getSkewedInfo().unsetSkewedColNames();\n-    }\n-\n-    @Override\n-    public void addToSkewedColNames(String skewCol) {\n-      copyOnWrite();\n-      shared.getSkewedInfo().addToSkewedColNames(skewCol);\n-    }\n-\n-    @Override\n-    public void setSkewedColValues(List<List<String>> skewedColValues) {\n-      copyOnWrite();\n-      shared.getSkewedInfo().setSkewedColValues(skewedColValues);\n-    }\n-\n-    @Override\n-    public void unsetSkewedColValues() {\n-      copyOnWrite();\n-      shared.getSkewedInfo().unsetSkewedColValues();\n-    }\n-\n-    @Override\n-    public void addToSkewedColValues(List<String> skewedColValue) {\n-      copyOnWrite();\n-      shared.getSkewedInfo().addToSkewedColValues(skewedColValue);\n-    }\n-\n-    @Override\n-    public void setSkewedColValueLocationMaps(Map<List<String>, String> maps) {\n-      copyOnWrite();\n-      shared.getSkewedInfo().setSkewedColValueLocationMaps(maps);\n-    }\n-\n-    @Override\n-    public void unsetSkewedColValueLocationMaps() {\n-      copyOnWrite();\n-      shared.getSkewedInfo().unsetSkewedColValueLocationMaps();\n-    }\n-\n-    @Override\n-    public void putToSkewedColValueLocationMaps(List<String> key, String value) {\n-      copyOnWrite();\n-      shared.getSkewedInfo().putToSkewedColValueLocationMaps(key, value);\n-    }\n-  }\n-\n-  private CopyOnWriteOrderList copySort(List<Order> sort) {\n-    if (orderList == null) {\n-      orderList = new CopyOnWriteOrderList(sort.size());\n-      for (int i = 0; i < sort.size(); i++) {\n-        orderList.secretAdd(new OrderWrapper(i, sort.get(i)));\n-      }\n-    }\n-    return orderList;\n-  }\n-\n-  private class CopyOnWriteOrderList extends ArrayList<Order> {\n-\n-    CopyOnWriteOrderList(int size) {\n-      super(size);\n-    }\n-\n-    private void secretAdd(OrderWrapper order) {\n-      super.add(order);\n-    }\n-\n-    @Override\n-    public boolean add(Order t) {\n-      copyOnWrite();\n-      return shared.getSortCols().add(t);\n-    }\n-\n-    @Override\n-    public boolean remove(Object o) {\n-      copyOnWrite();\n-      return shared.getSortCols().remove(o);\n-    }\n-\n-    @Override\n-    public boolean addAll(Collection<? extends Order> c) {\n-      copyOnWrite();\n-      return shared.getSortCols().addAll(c);\n-    }\n-\n-    @Override\n-    public boolean addAll(int index, Collection<? extends Order> c) {\n-      copyOnWrite();\n-      return shared.getSortCols().addAll(c);\n-    }\n-\n-    @Override\n-    public boolean removeAll(Collection<?> c) {\n-      copyOnWrite();\n-      return shared.getSortCols().removeAll(c);\n-    }\n-\n-    @Override\n-    public boolean retainAll(Collection<?> c) {\n-      copyOnWrite();\n-      return shared.getSortCols().retainAll(c);\n-    }\n-\n-    @Override\n-    public void clear() {\n-      copyOnWrite();\n-      shared.getSortCols().clear();\n-    }\n-\n-    @Override\n-    public Order set(int index, Order element) {\n-      copyOnWrite();\n-      return shared.getSortCols().set(index, element);\n-    }\n-\n-    @Override\n-    public void add(int index, Order element) {\n-      copyOnWrite();\n-      shared.getSortCols().add(index, element);\n-    }\n-\n-    @Override\n-    public Order remove(int index) {\n-      copyOnWrite();\n-      return shared.getSortCols().remove(index);\n-    }\n-  }\n-\n-  private class OrderWrapper extends Order {\n-    final private int pos;\n-\n-    OrderWrapper(int pos, Order order) {\n-      super(order);\n-      this.pos = pos;\n-    }\n-\n-    @Override\n-    public void setCol(String col) {\n-      copyOnWrite();\n-      shared.getSortCols().get(pos).setCol(col);\n-    }\n-\n-    @Override\n-    public void unsetCol() {\n-      copyOnWrite();\n-      shared.getSortCols().get(pos).unsetCol();\n-    }\n-\n-    @Override\n-    public void setOrder(int order) {\n-      copyOnWrite();\n-      shared.getSortCols().get(pos).setOrder(order);\n-    }\n-\n-    @Override\n-    public void unsetOrder() {\n-      copyOnWrite();\n-      shared.getSortCols().get(pos).unsetOrder();\n-    }\n-  }\n-\n-  private CopyOnWriteColList copyCols(List<FieldSchema> cols) {\n-    if (colList == null) {\n-      colList = new CopyOnWriteColList(cols.size());\n-      for (int i = 0; i < cols.size(); i++) {\n-        colList.secretAdd(new FieldSchemaWrapper(i, cols.get(i)));\n-      }\n-    }\n-    return colList;\n-  }\n-\n-  private class CopyOnWriteColList extends ArrayList<FieldSchema> {\n-\n-    CopyOnWriteColList(int size) {\n-      super(size);\n-    }\n-\n-    private void secretAdd(FieldSchemaWrapper col) {\n-      super.add(col);\n-    }\n-\n-    @Override\n-    public boolean add(FieldSchema t) {\n-      copyOnWrite();\n-      return shared.getCols().add(t);\n-    }\n-\n-    @Override\n-    public boolean remove(Object o) {\n-      copyOnWrite();\n-      return shared.getCols().remove(o);\n-    }\n-\n-    @Override\n-    public boolean addAll(Collection<? extends FieldSchema> c) {\n-      copyOnWrite();\n-      return shared.getCols().addAll(c);\n-    }\n-\n-    @Override\n-    public boolean addAll(int index, Collection<? extends FieldSchema> c) {\n-      copyOnWrite();\n-      return shared.getCols().addAll(c);\n-    }\n-\n-    @Override\n-    public boolean removeAll(Collection<?> c) {\n-      copyOnWrite();\n-      return shared.getCols().removeAll(c);\n-    }\n-\n-    @Override\n-    public boolean retainAll(Collection<?> c) {\n-      copyOnWrite();\n-      return shared.getCols().retainAll(c);\n-    }\n-\n-    @Override\n-    public void clear() {\n-      copyOnWrite();\n-      shared.getCols().clear();\n-    }\n-\n-    @Override\n-    public FieldSchema set(int index, FieldSchema element) {\n-      copyOnWrite();\n-      return shared.getCols().set(index, element);\n-    }\n-\n-    @Override\n-    public void add(int index, FieldSchema element) {\n-      copyOnWrite();\n-      shared.getCols().add(index, element);\n-    }\n-\n-    @Override\n-    public FieldSchema remove(int index) {\n-      copyOnWrite();\n-      return shared.getCols().remove(index);\n-    }\n-  }\n-\n-  private class FieldSchemaWrapper extends FieldSchema {\n-    final private int pos;\n-\n-    FieldSchemaWrapper(int pos, FieldSchema col) {\n-      super(col);\n-      this.pos = pos;\n-    }\n-\n-    @Override\n-    public void setName(String name) {\n-      copyOnWrite();\n-      shared.getCols().get(pos).setName(name);\n-    }\n-\n-    @Override\n-    public void unsetName() {\n-      copyOnWrite();\n-      shared.getCols().get(pos).unsetName();\n-    }\n-\n-    @Override\n-    public void setType(String type) {\n-      copyOnWrite();\n-      shared.getCols().get(pos).setType(type);\n-    }\n-\n-    @Override\n-    public void unsetType() {\n-      copyOnWrite();\n-      shared.getCols().get(pos).unsetType();\n-    }\n-\n-    @Override\n-    public void setComment(String comment) {\n-      copyOnWrite();\n-      shared.getCols().get(pos).setComment(comment);\n-    }\n-\n-    @Override\n-    public void unsetComment() {\n-      copyOnWrite();\n-      shared.getCols().get(pos).unsetComment();\n-    }\n-  }\n-\n-  private CopyOnWriteBucketList copyBucketCols(List<String> cols) {\n-    if (bucketList == null) {\n-      bucketList = new CopyOnWriteBucketList(cols);\n-    }\n-    return bucketList;\n-  }\n-\n-  private class CopyOnWriteBucketList extends ArrayList<String> {\n-\n-    CopyOnWriteBucketList(Collection<String> c) {\n-      super(c);\n-    }\n-\n-    private void secretAdd(String col) {\n-      super.add(col);\n-    }\n-\n-    @Override\n-    public boolean add(String t) {\n-      copyOnWrite();\n-      return shared.getBucketCols().add(t);\n-    }\n-\n-    @Override\n-    public boolean remove(Object o) {\n-      copyOnWrite();\n-      return shared.getBucketCols().remove(o);\n-    }\n-\n-    @Override\n-    public boolean addAll(Collection<? extends String> c) {\n-      copyOnWrite();\n-      return shared.getBucketCols().addAll(c);\n-    }\n-\n-    @Override\n-    public boolean addAll(int index, Collection<? extends String> c) {\n-      copyOnWrite();\n-      return shared.getBucketCols().addAll(c);\n-    }\n-\n-    @Override\n-    public boolean removeAll(Collection<?> c) {\n-      copyOnWrite();\n-      return shared.getBucketCols().removeAll(c);\n-    }\n-\n-    @Override\n-    public boolean retainAll(Collection<?> c) {\n-      copyOnWrite();\n-      return shared.getBucketCols().retainAll(c);\n-    }\n-\n-    @Override\n-    public void clear() {\n-      copyOnWrite();\n-      shared.getBucketCols().clear();\n-    }\n-\n-    @Override\n-    public String set(int index, String element) {\n-      copyOnWrite();\n-      return shared.getBucketCols().set(index, element);\n-    }\n-\n-    @Override\n-    public void add(int index, String element) {\n-      copyOnWrite();\n-      shared.getBucketCols().add(index, element);\n-    }\n-\n-    @Override\n-    public String remove(int index) {\n-      copyOnWrite();\n-      return shared.getBucketCols().remove(index);\n-    }\n-  }\n-\n }",
                "deletions": 648
            },
            {
                "sha": "fdfb6d12cc6018cdf492bb2838d051419612c5ef",
                "filename": "metastore/src/test/org/apache/hadoop/hive/metastore/hbase/TestSharedStorageDescriptor.java",
                "blob_url": "https://github.com/apache/hive/blob/10cfdd96b69084bf0da7b864113d073006147e77/metastore/src/test/org/apache/hadoop/hive/metastore/hbase/TestSharedStorageDescriptor.java",
                "raw_url": "https://github.com/apache/hive/raw/10cfdd96b69084bf0da7b864113d073006147e77/metastore/src/test/org/apache/hadoop/hive/metastore/hbase/TestSharedStorageDescriptor.java",
                "status": "modified",
                "changes": 122,
                "additions": 74,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/test/org/apache/hadoop/hive/metastore/hbase/TestSharedStorageDescriptor.java?ref=10cfdd96b69084bf0da7b864113d073006147e77",
                "patch": "@@ -20,13 +20,16 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n import org.apache.hadoop.hive.metastore.api.Order;\n import org.apache.hadoop.hive.metastore.api.SerDeInfo;\n import org.apache.hadoop.hive.metastore.api.SkewedInfo;\n import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n \n \n@@ -37,30 +40,6 @@\n   private static final Log LOG = LogFactory.getLog(TestHBaseStore.class.getName());\n \n \n-  @Test\n-  public void location() {\n-    StorageDescriptor sd = new StorageDescriptor();\n-    SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n-    ssd.setLocation(\"here\");\n-    ssd.setShared(sd);\n-    ssd.setLocation(\"there\");\n-    Assert.assertTrue(sd == ssd.getShared());\n-  }\n-\n-  @Test\n-  public void changeOnInputFormat() {\n-    StorageDescriptor sd = new StorageDescriptor();\n-    sd.setInputFormat(\"input\");\n-    SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n-    ssd.setShared(sd);\n-    Assert.assertEquals(\"input\", ssd.getInputFormat());\n-    ssd.setInputFormat(\"different\");\n-    Assert.assertFalse(sd == ssd.getShared());\n-    Assert.assertEquals(\"input\", sd.getInputFormat());\n-    Assert.assertEquals(\"different\", ssd.getInputFormat());\n-    Assert.assertEquals(\"input\", sd.getInputFormat());\n-  }\n-\n   @Test\n   public void changeOnSerde() {\n     StorageDescriptor sd = new StorageDescriptor();\n@@ -69,32 +48,33 @@ public void changeOnSerde() {\n     sd.setSerdeInfo(serde);\n     SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n     ssd.setShared(sd);\n-    Assert.assertEquals(\"serde\", ssd.getSerdeInfo().getName());\n     ssd.getSerdeInfo().setName(\"different\");\n-    Assert.assertFalse(sd == ssd.getShared());\n+    Assert.assertFalse(sd.getSerdeInfo() == ssd.getSerdeInfo());\n     Assert.assertEquals(\"serde\", serde.getName());\n     Assert.assertEquals(\"different\", ssd.getSerdeInfo().getName());\n     Assert.assertEquals(\"serde\", sd.getSerdeInfo().getName());\n   }\n \n   @Test\n-  public void multipleChangesDontCauseMultipleCopies() {\n+  public void changeOnSkewed() {\n+    StorageDescriptor sd = new StorageDescriptor();\n+    SkewedInfo skew = new SkewedInfo();\n+    sd.setSkewedInfo(skew);\n+    SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n+    ssd.setShared(sd);\n+    ssd.setSkewedInfo(new SkewedInfo());\n+    Assert.assertFalse(sd.getSkewedInfo() == ssd.getSkewedInfo());\n+  }\n+\n+  @Test\n+  public void changeOnUnset() {\n     StorageDescriptor sd = new StorageDescriptor();\n-    sd.setInputFormat(\"input\");\n-    sd.setOutputFormat(\"output\");\n+    SkewedInfo skew = new SkewedInfo();\n+    sd.setSkewedInfo(skew);\n     SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n     ssd.setShared(sd);\n-    Assert.assertEquals(\"input\", ssd.getInputFormat());\n-    ssd.setInputFormat(\"different\");\n-    Assert.assertFalse(sd == ssd.getShared());\n-    Assert.assertEquals(\"input\", sd.getInputFormat());\n-    Assert.assertEquals(\"different\", ssd.getInputFormat());\n-    StorageDescriptor keep = ssd.getShared();\n-    ssd.setOutputFormat(\"different_output\");\n-    Assert.assertEquals(\"different\", ssd.getInputFormat());\n-    Assert.assertEquals(\"different_output\", ssd.getOutputFormat());\n-    Assert.assertEquals(\"output\", sd.getOutputFormat());\n-    Assert.assertTrue(keep == ssd.getShared());\n+    ssd.unsetSkewedInfo();\n+    Assert.assertFalse(sd.getSkewedInfo() == ssd.getSkewedInfo());\n   }\n \n   @Test\n@@ -103,25 +83,71 @@ public void changeOrder() {\n     sd.addToSortCols(new Order(\"fred\", 1));\n     SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n     ssd.setShared(sd);\n-    Assert.assertEquals(1, ssd.getSortCols().get(0).getOrder());\n     ssd.getSortCols().get(0).setOrder(2);\n-    Assert.assertFalse(sd == ssd.getShared());\n+    Assert.assertFalse(sd.getSortCols() == ssd.getSortCols());\n     Assert.assertEquals(2, ssd.getSortCols().get(0).getOrder());\n     Assert.assertEquals(1, sd.getSortCols().get(0).getOrder());\n   }\n \n   @Test\n-  public void changeOrderList() {\n+  public void unsetOrder() {\n     StorageDescriptor sd = new StorageDescriptor();\n     sd.addToSortCols(new Order(\"fred\", 1));\n     SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n     ssd.setShared(sd);\n-    Assert.assertEquals(1, ssd.getSortCols().get(0).getOrder());\n-    List<Order> list = ssd.getSortCols();\n-    list.add(new Order(\"bob\", 2));\n-    Assert.assertFalse(sd == ssd.getShared());\n-    Assert.assertEquals(2, ssd.getSortColsSize());\n+    ssd.unsetSortCols();\n+    Assert.assertFalse(sd.getSortCols() == ssd.getSortCols());\n+    Assert.assertEquals(0, ssd.getSortColsSize());\n     Assert.assertEquals(1, sd.getSortColsSize());\n   }\n \n+  @Test\n+  public void changeBucketList() {\n+    StorageDescriptor sd = new StorageDescriptor();\n+    sd.addToBucketCols(new String(\"fred\"));\n+    SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n+    ssd.setShared(sd);\n+    List<String> list = ssd.getBucketCols();\n+    list.add(new String(\"bob\"));\n+    Assert.assertFalse(sd.getBucketCols() == ssd.getBucketCols());\n+    Assert.assertEquals(2, ssd.getBucketColsSize());\n+    Assert.assertEquals(1, sd.getBucketColsSize());\n+  }\n+\n+  @Test\n+  public void addToColList() {\n+    StorageDescriptor sd = new StorageDescriptor();\n+    sd.addToCols(new FieldSchema(\"fred\", \"string\", \"\"));\n+    SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n+    ssd.setShared(sd);\n+    ssd.addToCols(new FieldSchema(\"joe\", \"int\", \"\"));\n+    Assert.assertFalse(sd.getCols() == ssd.getCols());\n+    Assert.assertEquals(2, ssd.getColsSize());\n+    Assert.assertEquals(1, sd.getColsSize());\n+  }\n+\n+  @Test\n+  public void colIterator() {\n+    StorageDescriptor sd = new StorageDescriptor();\n+    sd.addToCols(new FieldSchema(\"fred\", \"string\", \"\"));\n+    SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n+    ssd.setShared(sd);\n+    Iterator<FieldSchema> iter = ssd.getColsIterator();\n+    Assert.assertTrue(iter.hasNext());\n+    Assert.assertEquals(\"fred\", iter.next().getName());\n+    Assert.assertFalse(sd.getCols() == ssd.getCols());\n+  }\n+\n+  @Test\n+  public void setReadOnly() {\n+    StorageDescriptor sd = new StorageDescriptor();\n+    sd.addToCols(new FieldSchema(\"fred\", \"string\", \"\"));\n+    SharedStorageDescriptor ssd = new SharedStorageDescriptor();\n+    ssd.setShared(sd);\n+    ssd.setReadOnly();\n+    List<FieldSchema> cols = ssd.getCols();\n+    Assert.assertEquals(1, cols.size());\n+    Assert.assertTrue(sd.getCols() == ssd.getCols());\n+  }\n+\n }",
                "deletions": 48
            }
        ],
        "patched_files": [
            "SharedStorageDescriptor.java"
        ],
        "unit_tests": [
            "TestSharedStorageDescriptor.java",
            "TestHBaseMetastoreSql.java"
        ]
    },
    "hive_ae82715": {
        "repo": "hive",
        "message": "HIVE-21669: HS2 throws NPE when HiveStatement.getQueryId is invoked and query is closed concurrently (Sankar Hariappan, reviewed by Mahesh Kumar Behera)",
        "commit": "https://github.com/apache/hive/commit/ae82715f1014c4ed514441311b61ed1891e2a12b",
        "parent": "https://github.com/apache/hive/commit/0f8119fe797c5b596d22ec4eaaef8aeeb501ccae",
        "bug_id": "hive_ae82715",
        "file": [
            {
                "sha": "20e9c3c7e01d2b8300fe92cfca29bf621588801c",
                "filename": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java",
                "blob_url": "https://github.com/apache/hive/blob/ae82715f1014c4ed514441311b61ed1891e2a12b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java",
                "raw_url": "https://github.com/apache/hive/raw/ae82715f1014c4ed514441311b61ed1891e2a12b/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java?ref=ae82715f1014c4ed514441311b61ed1891e2a12b",
                "patch": "@@ -1023,9 +1023,6 @@ public String getQueryId() throws SQLException {\n       return client.GetQueryId(new TGetQueryIdReq(stmtHandle)).getQueryId();\n     } catch (TException e) {\n       throw new SQLException(e);\n-    } catch (Exception e) {\n-      // If concurrently the query is closed before we fetch queryID.\n-      return null;\n     }\n   }\n }",
                "deletions": 3
            },
            {
                "sha": "48f4fe29ec165424bc5891c6c6980c3e0a85d482",
                "filename": "service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java",
                "blob_url": "https://github.com/apache/hive/blob/ae82715f1014c4ed514441311b61ed1891e2a12b/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java",
                "raw_url": "https://github.com/apache/hive/raw/ae82715f1014c4ed514441311b61ed1891e2a12b/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java?ref=ae82715f1014c4ed514441311b61ed1891e2a12b",
                "patch": "@@ -854,6 +854,9 @@ public TGetQueryIdResp GetQueryId(TGetQueryIdReq req) throws TException {\n       return new TGetQueryIdResp(cliService.getQueryId(req.getOperationHandle()));\n     } catch (HiveSQLException e) {\n       throw new TException(e);\n+    } catch (Exception e) {\n+      // If concurrently the query is closed before we fetch queryID.\n+      return new TGetQueryIdResp((String)null);\n     }\n   }\n ",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HiveStatement.java",
            "ThriftCLIService.java"
        ],
        "unit_tests": [
            "ThriftCLIServiceTest.java",
            "TestHiveStatement.java"
        ]
    },
    "hive_0b81099": {
        "repo": "hive",
        "message": "HIVE-12740: NPE with HS2 when using null input format (Vikram Dixit K via Gunther Hagleitner)",
        "commit": "https://github.com/apache/hive/commit/0b810991a12bb7c8d52f64b781772a1deabcbe53",
        "parent": "https://github.com/apache/hive/commit/6e513b06c12e508af655a6bea4aef55b86619cc6",
        "bug_id": "hive_0b81099",
        "file": [
            {
                "sha": "fce11c86fcdf1e9c72575ce5025208e1018a3591",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "blob_url": "https://github.com/apache/hive/blob/0b810991a12bb7c8d52f64b781772a1deabcbe53/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "raw_url": "https://github.com/apache/hive/raw/0b810991a12bb7c8d52f64b781772a1deabcbe53/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "status": "modified",
                "changes": 17,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java?ref=0b810991a12bb7c8d52f64b781772a1deabcbe53",
                "patch": "@@ -215,6 +215,7 @@\n   public static final String MAPRED_MAPPER_CLASS = \"mapred.mapper.class\";\n   public static final String MAPRED_REDUCER_CLASS = \"mapred.reducer.class\";\n   public static final String HIVE_ADDED_JARS = \"hive.added.jars\";\n+  public static final String VECTOR_MODE = \"VECTOR_MODE\";\n   public static String MAPNAME = \"Map \";\n   public static String REDUCENAME = \"Reducer \";\n \n@@ -3238,12 +3239,18 @@ private static void resetUmaskInConf(Configuration conf, boolean unsetUmask, Str\n    * but vectorization disallowed eg. for FetchOperator execution.\n    */\n   public static boolean isVectorMode(Configuration conf) {\n-    if (HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVE_VECTORIZATION_ENABLED) &&\n-        Utilities.getPlanPath(conf) != null && Utilities\n-        .getMapWork(conf).getVectorMode()) {\n-      return true;\n+    if (conf.get(VECTOR_MODE) != null) {\n+      // this code path is necessary, because with HS2 and client\n+      // side split generation we end up not finding the map work.\n+      // This is because of thread local madness (tez split\n+      // generation is multi-threaded - HS2 plan cache uses thread\n+      // locals).\n+      return conf.getBoolean(VECTOR_MODE, false);\n+    } else {\n+      return HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVE_VECTORIZATION_ENABLED)\n+        && Utilities.getPlanPath(conf) != null\n+        && Utilities.getMapWork(conf).getVectorMode();\n     }\n-    return false;\n   }\n \n   /**",
                "deletions": 5
            },
            {
                "sha": "e8864aee6428d3cc6b165acbc188cac8d22ffd61",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/0b810991a12bb7c8d52f64b781772a1deabcbe53/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/0b810991a12bb7c8d52f64b781772a1deabcbe53/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java?ref=0b810991a12bb7c8d52f64b781772a1deabcbe53",
                "patch": "@@ -614,6 +614,15 @@ private Vertex createVertex(JobConf conf, MapWork mapWork,\n       }\n     } else {\n       // Setup client side split generation.\n+\n+      // we need to set this, because with HS2 and client side split\n+      // generation we end up not finding the map work. This is\n+      // because of thread local madness (tez split generation is\n+      // multi-threaded - HS2 plan cache uses thread locals). Setting\n+      // VECTOR_MODE causes the split gen code to use the conf instead\n+      // of the map work.\n+      conf.setBoolean(Utilities.VECTOR_MODE, mapWork.getVectorMode());\n+\n       dataSource = MRInputHelpers.configureMRInputWithLegacySplitGeneration(conf, new Path(tezDir,\n           \"split_\" + mapWork.getName().replaceAll(\" \", \"_\")), true);\n       numTasks = dataSource.getNumberOfShards();",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Utilities.java"
        ],
        "unit_tests": [
            "TestUtilities.java"
        ]
    },
    "hive_f50f088": {
        "repo": "hive",
        "message": "HIVE-8778: ORC split elimination can cause NPE when column statistics is null (Prasanth J reviewed by Gopal V)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1637416 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/f50f08876a6b84f66d5be52ac1727c62c2900fc5",
        "parent": "https://github.com/apache/hive/commit/f03ea3976b4f0ad8608128886643a5d47671ec93",
        "bug_id": "hive_f50f088",
        "file": [
            {
                "sha": "a6a0ec1a0e022efd23fddadeb44d5dfff8c092d7",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/f50f08876a6b84f66d5be52ac1727c62c2900fc5/ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/f50f08876a6b84f66d5be52ac1727c62c2900fc5/ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java",
                "status": "modified",
                "changes": 13,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java?ref=f50f08876a6b84f66d5be52ac1727c62c2900fc5",
                "patch": "@@ -2364,20 +2364,21 @@ static TruthValue evaluatePredicate(OrcProto.ColumnStatistics index,\n                                       PredicateLeaf predicate) {\n     ColumnStatistics cs = ColumnStatisticsImpl.deserialize(index);\n     Object minValue = getMin(cs);\n+    Object maxValue = getMax(cs);\n+    return evaluatePredicateRange(predicate, minValue, maxValue);\n+  }\n+\n+  static TruthValue evaluatePredicateRange(PredicateLeaf predicate, Object min,\n+      Object max) {\n     // if we didn't have any values, everything must have been null\n-    if (minValue == null) {\n+    if (min == null) {\n       if (predicate.getOperator() == PredicateLeaf.Operator.IS_NULL) {\n         return TruthValue.YES;\n       } else {\n         return TruthValue.NULL;\n       }\n     }\n-    Object maxValue = getMax(cs);\n-    return evaluatePredicateRange(predicate, minValue, maxValue);\n-  }\n \n-  static TruthValue evaluatePredicateRange(PredicateLeaf predicate, Object min,\n-      Object max) {\n     Location loc;\n     try {\n       // Predicate object and stats object can be one of the following base types",
                "deletions": 6
            },
            {
                "sha": "d1acd88797dd361415eddbaf9b46df10487d1807",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java",
                "blob_url": "https://github.com/apache/hive/blob/f50f08876a6b84f66d5be52ac1727c62c2900fc5/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java",
                "raw_url": "https://github.com/apache/hive/raw/f50f08876a6b84f66d5be52ac1727c62c2900fc5/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java",
                "status": "modified",
                "changes": 147,
                "additions": 125,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java?ref=f50f08876a6b84f66d5be52ac1727c62c2900fc5",
                "patch": "@@ -21,27 +21,6 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.sql.Date;\n-import java.sql.Timestamp;\n-import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-import java.util.Set;\n-import java.util.TimeZone;\n-import java.util.TreeSet;\n-\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.BlockLocation;\n import org.apache.hadoop.fs.FSDataInputStream;\n@@ -66,9 +45,9 @@\n import org.apache.hadoop.hive.ql.io.HiveInputFormat;\n import org.apache.hadoop.hive.ql.io.HiveOutputFormat;\n import org.apache.hadoop.hive.ql.io.InputFormatChecker;\n-import org.apache.hadoop.hive.ql.io.sarg.SearchArgumentFactory;\n import org.apache.hadoop.hive.ql.io.sarg.PredicateLeaf;\n import org.apache.hadoop.hive.ql.io.sarg.SearchArgument;\n+import org.apache.hadoop.hive.ql.io.sarg.SearchArgumentFactory;\n import org.apache.hadoop.hive.ql.plan.MapWork;\n import org.apache.hadoop.hive.ql.plan.PartitionDesc;\n import org.apache.hadoop.hive.ql.plan.TableDesc;\n@@ -104,6 +83,27 @@\n import org.junit.Test;\n import org.junit.rules.TestName;\n \n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.TimeZone;\n+import java.util.TreeSet;\n+\n public class TestInputOutputFormat {\n \n   Path workDir = new Path(System.getProperty(\"test.tmp.dir\",\"target/tmp\"));\n@@ -1032,6 +1032,24 @@ public void testInOutFormat() throws Exception {\n     reader.close();\n   }\n \n+  static class SimpleRow implements Writable {\n+    Text z;\n+\n+    public SimpleRow(Text t) {\n+      this.z = t;\n+    }\n+\n+    @Override\n+    public void write(DataOutput dataOutput) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported\");\n+    }\n+\n+    @Override\n+    public void readFields(DataInput dataInput) throws IOException {\n+      throw new UnsupportedOperationException(\"unsupported\");\n+    }\n+  }\n+\n   static class NestedRow implements Writable {\n     int z;\n     MyRow r;\n@@ -1685,4 +1703,89 @@ public void testSetSearchArgument() throws Exception {\n     assertEquals(\"cost\", leaves.get(0).getColumnName());\n     assertEquals(PredicateLeaf.Operator.IS_NULL, leaves.get(0).getOperator());\n   }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked,deprecation\")\n+  public void testSplitElimination() throws Exception {\n+    Properties properties = new Properties();\n+    StructObjectInspector inspector;\n+    synchronized (TestOrcFile.class) {\n+      inspector = (StructObjectInspector)\n+          ObjectInspectorFactory.getReflectionObjectInspector(NestedRow.class,\n+              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n+    }\n+    SerDe serde = new OrcSerde();\n+    OutputFormat<?, ?> outFormat = new OrcOutputFormat();\n+    conf.setInt(\"mapred.max.split.size\", 50);\n+    RecordWriter writer =\n+        outFormat.getRecordWriter(fs, conf, testFilePath.toString(),\n+            Reporter.NULL);\n+    writer.write(NullWritable.get(),\n+        serde.serialize(new NestedRow(1,2,3), inspector));\n+    writer.write(NullWritable.get(),\n+        serde.serialize(new NestedRow(4,5,6), inspector));\n+    writer.write(NullWritable.get(),\n+        serde.serialize(new NestedRow(7,8,9), inspector));\n+    writer.close(Reporter.NULL);\n+    serde = new OrcSerde();\n+    SearchArgument sarg =\n+        SearchArgumentFactory.newBuilder()\n+            .startAnd()\n+            .lessThan(\"z\", new Integer(0))\n+            .end()\n+            .build();\n+    conf.set(\"sarg.pushdown\", sarg.toKryo());\n+    conf.set(\"hive.io.file.readcolumn.names\", \"z,r\");\n+    properties.setProperty(\"columns\", \"z,r\");\n+    properties.setProperty(\"columns.types\", \"int:struct<x:int,y:int>\");\n+    SerDeUtils.initializeSerDe(serde, conf, properties, null);\n+    inspector = (StructObjectInspector) serde.getObjectInspector();\n+    InputFormat<?,?> in = new OrcInputFormat();\n+    FileInputFormat.setInputPaths(conf, testFilePath.toString());\n+    InputSplit[] splits = in.getSplits(conf, 1);\n+    assertEquals(0, splits.length);\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked,deprecation\")\n+  public void testSplitEliminationNullStats() throws Exception {\n+    Properties properties = new Properties();\n+    StructObjectInspector inspector;\n+    synchronized (TestOrcFile.class) {\n+      inspector = (StructObjectInspector)\n+          ObjectInspectorFactory.getReflectionObjectInspector(SimpleRow.class,\n+              ObjectInspectorFactory.ObjectInspectorOptions.JAVA);\n+    }\n+    SerDe serde = new OrcSerde();\n+    OutputFormat<?, ?> outFormat = new OrcOutputFormat();\n+    conf.setInt(\"mapred.max.split.size\", 50);\n+    RecordWriter writer =\n+        outFormat.getRecordWriter(fs, conf, testFilePath.toString(),\n+            Reporter.NULL);\n+    writer.write(NullWritable.get(),\n+        serde.serialize(new SimpleRow(null), inspector));\n+    writer.write(NullWritable.get(),\n+        serde.serialize(new SimpleRow(null), inspector));\n+    writer.write(NullWritable.get(),\n+        serde.serialize(new SimpleRow(null), inspector));\n+    writer.close(Reporter.NULL);\n+    serde = new OrcSerde();\n+    SearchArgument sarg =\n+        SearchArgumentFactory.newBuilder()\n+            .startAnd()\n+            .lessThan(\"z\", new String(\"foo\"))\n+            .end()\n+            .build();\n+    conf.set(\"sarg.pushdown\", sarg.toKryo());\n+    conf.set(\"hive.io.file.readcolumn.names\", \"z\");\n+    properties.setProperty(\"columns\", \"z\");\n+    properties.setProperty(\"columns.types\", \"string\");\n+    SerDeUtils.initializeSerDe(serde, conf, properties, null);\n+    inspector = (StructObjectInspector) serde.getObjectInspector();\n+    InputFormat<?,?> in = new OrcInputFormat();\n+    FileInputFormat.setInputPaths(conf, testFilePath.toString());\n+    InputSplit[] splits = in.getSplits(conf, 1);\n+    assertEquals(0, splits.length);\n+  }\n+\n }",
                "deletions": 22
            }
        ],
        "patched_files": [
            "RecordReaderImpl.java"
        ],
        "unit_tests": [
            "TestRecordReaderImpl.java",
            "TestInputOutputFormat.java"
        ]
    },
    "hive_70cc5ef": {
        "repo": "hive",
        "message": "HIVE-15275 \"beeline -f <file>\" will throw NPE (Aihua Xu, reviewed by Vihang Karajgaonkar, Yongzhi Chen)",
        "commit": "https://github.com/apache/hive/commit/70cc5eface64b5417916e42312befc022f4a06c0",
        "parent": "https://github.com/apache/hive/commit/1a39cbfcaeda4392e231b70afa343f2862e91f26",
        "bug_id": "hive_70cc5ef",
        "file": [
            {
                "sha": "65818dd48fa91b7cac2d3c07a3caa082b78e6365",
                "filename": "beeline/src/java/org/apache/hive/beeline/BeeLine.java",
                "blob_url": "https://github.com/apache/hive/blob/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/java/org/apache/hive/beeline/BeeLine.java",
                "raw_url": "https://github.com/apache/hive/raw/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/java/org/apache/hive/beeline/BeeLine.java",
                "status": "modified",
                "changes": 155,
                "additions": 62,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/beeline/src/java/org/apache/hive/beeline/BeeLine.java?ref=70cc5eface64b5417916e42312befc022f4a06c0",
                "patch": "@@ -23,12 +23,10 @@\n package org.apache.hive.beeline;\n \n import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.Closeable;\n import java.io.EOFException;\n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PrintStream;\n@@ -80,7 +78,6 @@\n import jline.console.completer.StringsCompleter;\n import jline.console.completer.FileNameCompleter;\n import jline.console.ConsoleReader;\n-import jline.console.history.History;\n import jline.console.history.FileHistory;\n \n import org.apache.commons.cli.CommandLine;\n@@ -146,7 +143,7 @@\n   private String dbName = null;\n   private String currentDatabase = null;\n \n-  private History history;\n+  private FileHistory history;\n   // Indicates if this instance of beeline is running in compatibility mode, or beeline mode\n   private boolean isBeeLine = true;\n \n@@ -517,14 +514,17 @@ public static void main(String[] args) throws IOException {\n   public static void mainWithInputRedirection(String[] args, InputStream inputStream)\n       throws IOException {\n     BeeLine beeLine = new BeeLine();\n-    int status = beeLine.begin(args, inputStream);\n+    try {\n+      int status = beeLine.begin(args, inputStream);\n \n-    if (!Boolean.getBoolean(BeeLineOpts.PROPERTY_NAME_EXIT)) {\n-        System.exit(status);\n+      if (!Boolean.getBoolean(BeeLineOpts.PROPERTY_NAME_EXIT)) {\n+          System.exit(status);\n+      }\n+    } finally {\n+      beeLine.close();\n     }\n   }\n \n-\n   public BeeLine() {\n     this(true);\n   }\n@@ -539,12 +539,11 @@ DatabaseConnection getDatabaseConnection() {\n \n \n   Connection getConnection() throws SQLException {\n-    if (getDatabaseConnections().current() == null) {\n-      throw new IllegalArgumentException(loc(\"no-current-connection\"));\n-    }\n-    if (getDatabaseConnections().current().getConnection() == null) {\n+    if (getDatabaseConnections().current() == null\n+        || getDatabaseConnections().current().getConnection() == null) {\n       throw new IllegalArgumentException(loc(\"no-current-connection\"));\n     }\n+\n     return getDatabaseConnections().current().getConnection();\n   }\n \n@@ -983,38 +982,36 @@ public int begin(String[] args, InputStream inputStream) throws IOException {\n       // nothing\n     }\n \n-    try {\n-      //this method also initializes the consoleReader which is\n-      //needed by initArgs for certain execution paths\n-      ConsoleReader reader = initializeConsoleReader(inputStream);\n-      if (isBeeLine) {\n-        int code = initArgs(args);\n-        if (code != 0) {\n-          return code;\n-        }\n-      } else {\n-        int code = initArgsFromCliVars(args);\n-        if (code != 0 || exit) {\n-          return code;\n-        }\n-        defaultConnect(false);\n-      }\n+    setupHistory();\n \n-      if (getOpts().isHelpAsked()) {\n-        return 0;\n-      }\n-      if (getOpts().getScriptFile() != null) {\n-        return executeFile(getOpts().getScriptFile());\n+    //this method also initializes the consoleReader which is\n+    //needed by initArgs for certain execution paths\n+    ConsoleReader reader = initializeConsoleReader(inputStream);\n+    if (isBeeLine) {\n+      int code = initArgs(args);\n+      if (code != 0) {\n+        return code;\n       }\n-      try {\n-        info(getApplicationTitle());\n-      } catch (Exception e) {\n-        // ignore\n+    } else {\n+      int code = initArgsFromCliVars(args);\n+      if (code != 0 || exit) {\n+        return code;\n       }\n-      return execute(reader, false);\n-    } finally {\n-        close();\n+      defaultConnect(false);\n+    }\n+\n+    if (getOpts().isHelpAsked()) {\n+      return 0;\n     }\n+    if (getOpts().getScriptFile() != null) {\n+      return executeFile(getOpts().getScriptFile());\n+    }\n+    try {\n+      info(getApplicationTitle());\n+    } catch (Exception e) {\n+      // ignore\n+    }\n+    return execute(reader, false);\n   }\n \n   /*\n@@ -1120,7 +1117,7 @@ public int defaultConnect(boolean exitOnError) {\n   }\n \n   private int executeFile(String fileName) {\n-    InputStream initStream = null;\n+    InputStream fileStream = null;\n     try {\n       if (!isBeeLine) {\n         org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(fileName);\n@@ -1132,17 +1129,16 @@ private int executeFile(String fileName) {\n         } else {\n           fs = FileSystem.get(path.toUri(), conf);\n         }\n-        initStream = fs.open(path);\n+        fileStream = fs.open(path);\n       } else {\n-        initStream = new FileInputStream(fileName);\n+        fileStream = new FileInputStream(fileName);\n       }\n-      return execute(initializeConsoleReader(initStream), !getOpts().getForce());\n+      return execute(initializeConsoleReader(fileStream), !getOpts().getForce());\n     } catch (Throwable t) {\n       handleException(t);\n       return ERRNO_OTHER;\n     } finally {\n-      IOUtils.closeStream(initStream);\n-      consoleReader = null;\n+      IOUtils.closeStream(fileStream);\n       output(\"\");   // dummy new line\n     }\n   }\n@@ -1181,6 +1177,25 @@ public void close() {\n     commands.closeall(null);\n   }\n \n+  private void setupHistory() throws IOException {\n+    if (this.history != null) {\n+       return;\n+    }\n+\n+    this.history = new FileHistory(new File(getOpts().getHistoryFile()));\n+    // add shutdown hook to flush the history to history file\n+    ShutdownHookManager.addShutdownHook(new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          history.flush();\n+        } catch (IOException e) {\n+          error(e);\n+        }\n+      }\n+    });\n+  }\n+\n   public ConsoleReader initializeConsoleReader(InputStream inputStream) throws IOException {\n     if (inputStream != null) {\n       // ### NOTE: fix for sf.net bug 879425.\n@@ -1197,29 +1212,9 @@ public ConsoleReader initializeConsoleReader(InputStream inputStream) throws IOE\n     //disable the expandEvents for the purpose of backward compatibility\n     consoleReader.setExpandEvents(false);\n \n-    // setup history\n-    ByteArrayOutputStream hist = new ByteArrayOutputStream();\n-    if (new File(getOpts().getHistoryFile()).isFile()) {\n-      try {\n-        // save the current contents of the history buffer. This gets\n-        // around a bug in JLine where setting the output before the\n-        // input will clobber the history input, but setting the\n-        // input before the output will cause the previous commands\n-        // to not be saved to the buffer.\n-        try (FileInputStream historyIn = new FileInputStream(getOpts().getHistoryFile())) {\n-          int n;\n-          while ((n = historyIn.read()) != -1) {\n-            hist.write(n);\n-          }\n-        }\n-      } catch (Exception e) {\n-        handleException(e);\n-      }\n-    }\n-\n     try {\n       // now set the output for the history\n-      consoleReader.setHistory(new FileHistory(new File(getOpts().getHistoryFile())));\n+      consoleReader.setHistory(this.history);\n     } catch (Exception e) {\n       handleException(e);\n     }\n@@ -1228,32 +1223,6 @@ public ConsoleReader initializeConsoleReader(InputStream inputStream) throws IOE\n       // from script.. no need to load history and no need of completer, either\n       return consoleReader;\n     }\n-    try {\n-      // now load in the previous history\n-      if (hist != null) {\n-        History h = consoleReader.getHistory();\n-        if (!(h instanceof FileHistory)) {\n-          consoleReader.getHistory().add(hist.toString());\n-        }\n-      }\n-    } catch (Exception e) {\n-        handleException(e);\n-    }\n-\n-    // add shutdown hook to flush the history to history file\n-    ShutdownHookManager.addShutdownHook(new Runnable() {\n-        @Override\n-        public void run() {\n-            History h = consoleReader.getHistory();\n-            if (h instanceof FileHistory) {\n-                try {\n-                    ((FileHistory) h).flush();\n-                } catch (IOException e) {\n-                    error(e);\n-                }\n-            }\n-        }\n-    });\n \n     consoleReader.addCompleter(new BeeLineCompleter(this));\n     return consoleReader;",
                "deletions": 93
            },
            {
                "sha": "13fea293eb9df66d61cfd2fdf1a0c0626a571e1b",
                "filename": "beeline/src/java/org/apache/hive/beeline/cli/HiveCli.java",
                "blob_url": "https://github.com/apache/hive/blob/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/java/org/apache/hive/beeline/cli/HiveCli.java",
                "raw_url": "https://github.com/apache/hive/raw/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/java/org/apache/hive/beeline/cli/HiveCli.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/beeline/src/java/org/apache/hive/beeline/cli/HiveCli.java?ref=70cc5eface64b5417916e42312befc022f4a06c0",
                "patch": "@@ -32,6 +32,10 @@ public static void main(String[] args) throws IOException {\n \n   public int runWithArgs(String[] cmd, InputStream inputStream) throws IOException {\n     beeLine = new BeeLine(false);\n-    return beeLine.begin(cmd, inputStream);\n+    try {\n+      return beeLine.begin(cmd, inputStream);\n+    } finally {\n+      beeLine.close();\n+    }\n   }\n }",
                "deletions": 1
            },
            {
                "sha": "623e667b3cc588d6ada5432e87e23f5ab48c59b8",
                "filename": "beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
                "blob_url": "https://github.com/apache/hive/blob/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
                "raw_url": "https://github.com/apache/hive/raw/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java?ref=70cc5eface64b5417916e42312befc022f4a06c0",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.File;\n import java.io.PrintStream;\n import java.io.PrintWriter;\n+import java.lang.reflect.Method;\n \n import org.junit.AfterClass;\n import org.junit.Assert;\n@@ -58,11 +59,14 @@ public void testNumHistories() throws Exception {\n     BeeLine beeline = new BeeLine();\n     beeline.getOpts().setHistoryFile(fileName);\n     beeline.setOutputStream(ops);\n+    Method method = beeline.getClass().getDeclaredMethod(\"setupHistory\");\n+    method.setAccessible(true);\n+    method.invoke(beeline);\n     beeline.initializeConsoleReader(null);\n     beeline.dispatch(\"!history\");\n     String output = os.toString(\"UTF-8\");\n     int numHistories = output.split(\"\\n\").length;\n-    Assert.assertEquals(numHistories, 10);\n+    Assert.assertEquals(10, numHistories);\n     beeline.close();\n   }\n \n@@ -73,6 +77,9 @@ public void testHistory() throws Exception {\n     BeeLine beeline = new BeeLine();\n     beeline.getOpts().setHistoryFile(fileName);\n     beeline.setOutputStream(ops);\n+    Method method = beeline.getClass().getDeclaredMethod(\"setupHistory\");\n+    method.setAccessible(true);\n+    method.invoke(beeline);\n     beeline.initializeConsoleReader(null);\n     beeline.dispatch(\"!history\");\n     String output = os.toString(\"UTF-8\");",
                "deletions": 1
            }
        ],
        "patched_files": [
            "HiveCli.java",
            "BeeLine.java"
        ],
        "unit_tests": [
            "TestHiveCli.java",
            "TestBeeLineHistory.java"
        ]
    },
    "hive_76f780a": {
        "repo": "hive",
        "message": "HIVE-8563: Running annotate_stats_join_pkfk.q in TestMiniTezCliDriver is causing NPE (Vikram Dixit K via Gunther Hagleitner)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1633986 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/76f780a545465d2ee674c896a0bd50540edd72e0",
        "parent": "https://github.com/apache/hive/commit/ce7a8b7f53f9cd52ed5e7f0fb427e25ce32fe30f",
        "bug_id": "hive_76f780a",
        "file": [
            {
                "sha": "f231b0655454085ac447b2df891b1a54e3efed1f",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/ConvertJoinMapJoin.java",
                "blob_url": "https://github.com/apache/hive/blob/76f780a545465d2ee674c896a0bd50540edd72e0/ql/src/java/org/apache/hadoop/hive/ql/optimizer/ConvertJoinMapJoin.java",
                "raw_url": "https://github.com/apache/hive/raw/76f780a545465d2ee674c896a0bd50540edd72e0/ql/src/java/org/apache/hadoop/hive/ql/optimizer/ConvertJoinMapJoin.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/optimizer/ConvertJoinMapJoin.java?ref=76f780a545465d2ee674c896a0bd50540edd72e0",
                "patch": "@@ -228,7 +228,7 @@ private void convertJoinSMBJoin(JoinOperator joinOp, OptimizeTezProcContext cont\n     @SuppressWarnings(\"unchecked\")\n     CommonMergeJoinOperator mergeJoinOp =\n         (CommonMergeJoinOperator) OperatorFactory.get(new CommonMergeJoinDesc(numBuckets,\n-            isSubQuery, mapJoinConversionPos, mapJoinDesc));\n+            isSubQuery, mapJoinConversionPos, mapJoinDesc), joinOp.getSchema());\n     OpTraits opTraits =\n         new OpTraits(joinOp.getOpTraits().getBucketColNames(), numBuckets, joinOp.getOpTraits()\n             .getSortCols());",
                "deletions": 1
            },
            {
                "sha": "e3c87277c1c3df47bacdd673210cd961409b78ee",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/MergeJoinProc.java",
                "blob_url": "https://github.com/apache/hive/blob/76f780a545465d2ee674c896a0bd50540edd72e0/ql/src/java/org/apache/hadoop/hive/ql/optimizer/MergeJoinProc.java",
                "raw_url": "https://github.com/apache/hive/raw/76f780a545465d2ee674c896a0bd50540edd72e0/ql/src/java/org/apache/hadoop/hive/ql/optimizer/MergeJoinProc.java",
                "status": "modified",
                "changes": 21,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/optimizer/MergeJoinProc.java?ref=76f780a545465d2ee674c896a0bd50540edd72e0",
                "patch": "@@ -22,21 +22,6 @@\n import org.apache.hadoop.hive.ql.plan.TezWork.VertexType;\n \n public class MergeJoinProc implements NodeProcessor {\n-\n-  public Operator<? extends OperatorDesc> getLeafOperator(Operator<? extends OperatorDesc> op) {\n-    for (Operator<? extends OperatorDesc> childOp : op.getChildOperators()) {\n-      // FileSink or ReduceSink operators are used to create vertices. See\n-      // TezCompiler.\n-      if ((childOp instanceof ReduceSinkOperator) || (childOp instanceof FileSinkOperator)) {\n-        return childOp;\n-      } else {\n-        return getLeafOperator(childOp);\n-      }\n-    }\n-\n-    return null;\n-  }\n-\n   @Override\n   public Object\n       process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx, Object... nodeOutputs)\n@@ -60,13 +45,13 @@\n     // merge work already exists for this merge join operator, add the dummy store work to the\n     // merge work. Else create a merge work, add above work to the merge work\n     MergeJoinWork mergeWork = null;\n-    if (context.opMergeJoinWorkMap.containsKey(getLeafOperator(mergeJoinOp))) {\n+    if (context.opMergeJoinWorkMap.containsKey(mergeJoinOp)) {\n       // we already have the merge work corresponding to this merge join operator\n-      mergeWork = context.opMergeJoinWorkMap.get(getLeafOperator(mergeJoinOp));\n+      mergeWork = context.opMergeJoinWorkMap.get(mergeJoinOp);\n     } else {\n       mergeWork = new MergeJoinWork();\n       tezWork.add(mergeWork);\n-      context.opMergeJoinWorkMap.put(getLeafOperator(mergeJoinOp), mergeWork);\n+      context.opMergeJoinWorkMap.put(mergeJoinOp, mergeWork);\n     }\n \n     mergeWork.setMergeJoinOperator(mergeJoinOp);",
                "deletions": 18
            },
            {
                "sha": "59a632776f811dafd2fcd23ec3264b7864535b8f",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezWork.java",
                "blob_url": "https://github.com/apache/hive/blob/76f780a545465d2ee674c896a0bd50540edd72e0/ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezWork.java",
                "raw_url": "https://github.com/apache/hive/raw/76f780a545465d2ee674c896a0bd50540edd72e0/ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezWork.java",
                "status": "modified",
                "changes": 19,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezWork.java?ref=76f780a545465d2ee674c896a0bd50540edd72e0",
                "patch": "@@ -137,15 +137,15 @@ public Object process(Node nd, Stack<Node> stack,\n       // we are currently walking the big table side of the merge join. we need to create or hook up\n       // merge join work.\n       MergeJoinWork mergeJoinWork = null;\n-      if (context.opMergeJoinWorkMap.containsKey(operator)) {\n+      if (context.opMergeJoinWorkMap.containsKey(context.currentMergeJoinOperator)) {\n         // we have found a merge work corresponding to this closing operator. Hook up this work.\n-        mergeJoinWork = context.opMergeJoinWorkMap.get(operator);\n+        mergeJoinWork = context.opMergeJoinWorkMap.get(context.currentMergeJoinOperator);\n       } else {\n         // we need to create the merge join work\n         mergeJoinWork = new MergeJoinWork();\n         mergeJoinWork.setMergeJoinOperator(context.currentMergeJoinOperator);\n         tezWork.add(mergeJoinWork);\n-        context.opMergeJoinWorkMap.put(operator, mergeJoinWork);\n+        context.opMergeJoinWorkMap.put(context.currentMergeJoinOperator, mergeJoinWork);\n       }\n       // connect the work correctly.\n       mergeJoinWork.addMergedWork(work, null);\n@@ -334,10 +334,15 @@ public Object process(Node nd, Stack<Node> stack,\n           UnionWork unionWork = (UnionWork) followingWork;\n           int index = getMergeIndex(tezWork, unionWork, rs);\n           // guaranteed to be instance of MergeJoinWork if index is valid\n-          MergeJoinWork mergeJoinWork = (MergeJoinWork) tezWork.getChildren(unionWork).get(index);\n-          // disconnect the connection to union work and connect to merge work\n-          followingWork = mergeJoinWork;\n-          rWork = (ReduceWork) mergeJoinWork.getMainWork();\n+          BaseWork baseWork = tezWork.getChildren(unionWork).get(index);\n+          if (baseWork instanceof MergeJoinWork) {\n+            MergeJoinWork mergeJoinWork = (MergeJoinWork) baseWork;\n+            // disconnect the connection to union work and connect to merge work\n+            followingWork = mergeJoinWork;\n+            rWork = (ReduceWork) mergeJoinWork.getMainWork();\n+          } else {\n+            rWork = (ReduceWork) baseWork;\n+          }\n         } else {\n           rWork = (ReduceWork) followingWork;\n         }",
                "deletions": 7
            }
        ],
        "patched_files": [
            "GenTezWork.java"
        ],
        "unit_tests": [
            "TestGenTezWork.java"
        ]
    },
    "hive_ec953bd": {
        "repo": "hive",
        "message": "HIVE-8332 Reading an ACID table with vectorization on results in NPE (Alan Gates, reviewed by Owen O'Malley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1631536 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/ec953bdc45f69118b84e0d4789f58f11e5207f1b",
        "parent": "https://github.com/apache/hive/commit/8cb8121ae707b1652b1959f23ae9d28f7f51b34c",
        "bug_id": "hive_ec953bd",
        "file": [
            {
                "sha": "b2b1a4132d3a78222118f686621d7b5d17cc4ecb",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.java",
                "blob_url": "https://github.com/apache/hive/blob/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.java",
                "raw_url": "https://github.com/apache/hive/raw/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.java?ref=ec953bdc45f69118b84e0d4789f58f11e5207f1b",
                "patch": "@@ -1134,7 +1134,7 @@ public float getProgress() throws IOException {\n \n       @Override\n       public ObjectInspector getObjectInspector() {\n-        return ((StructObjectInspector) reader.getObjectInspector())\n+        return ((StructObjectInspector) records.getObjectInspector())\n             .getAllStructFieldRefs().get(OrcRecordUpdater.ROW)\n             .getFieldObjectInspector();\n       }",
                "deletions": 1
            },
            {
                "sha": "fd97cb93037ab51f4f64f0fce462c437bac698d8",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcRawRecordMerger.java",
                "blob_url": "https://github.com/apache/hive/blob/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcRawRecordMerger.java",
                "raw_url": "https://github.com/apache/hive/raw/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcRawRecordMerger.java",
                "status": "modified",
                "changes": 17,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcRawRecordMerger.java?ref=ec953bdc45f69118b84e0d4789f58f11e5207f1b",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.hadoop.hive.ql.io.AcidInputFormat;\n import org.apache.hadoop.hive.ql.io.AcidUtils;\n import org.apache.hadoop.hive.ql.io.RecordIdentifier;\n+import org.apache.hadoop.hive.ql.metadata.VirtualColumn;\n import org.apache.hadoop.hive.serde.serdeConstants;\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n import org.apache.hadoop.hive.serde2.typeinfo.StructTypeInfo;\n@@ -37,9 +38,10 @@\n import org.apache.hadoop.io.LongWritable;\n \n import java.io.IOException;\n+import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n+import java.util.Deque;\n import java.util.List;\n import java.util.Map;\n import java.util.TreeMap;\n@@ -627,8 +629,16 @@ public ObjectInspector getObjectInspector() {\n \n     // Parse the configuration parameters\n     ArrayList<String> columnNames = new ArrayList<String>();\n+    Deque<Integer> virtualColumns = new ArrayDeque<Integer>();\n     if (columnNameProperty != null && columnNameProperty.length() > 0) {\n-      Collections.addAll(columnNames, columnNameProperty.split(\",\"));\n+      String[] colNames = columnNameProperty.split(\",\");\n+      for (int i = 0; i < colNames.length; i++) {\n+        if (VirtualColumn.VIRTUAL_COLUMN_NAMES.contains(colNames[i])) {\n+          virtualColumns.addLast(i);\n+        } else {\n+          columnNames.add(colNames[i]);\n+        }\n+      }\n     }\n     if (columnTypeProperty == null) {\n       // Default type: all string\n@@ -644,6 +654,9 @@ public ObjectInspector getObjectInspector() {\n \n     ArrayList<TypeInfo> fieldTypes =\n         TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);\n+    while (virtualColumns.size() > 0) {\n+      fieldTypes.remove(virtualColumns.removeLast());\n+    }\n     StructTypeInfo rowType = new StructTypeInfo();\n     rowType.setAllStructFieldNames(columnNames);\n     rowType.setAllStructFieldTypeInfos(fieldTypes);",
                "deletions": 2
            },
            {
                "sha": "a15a7a7951b5ea35c7d5787ee5357c2f9773658c",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java",
                "blob_url": "https://github.com/apache/hive/blob/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java",
                "raw_url": "https://github.com/apache/hive/raw/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestInputOutputFormat.java?ref=ec953bdc45f69118b84e0d4789f58f11e5207f1b",
                "patch": "@@ -73,6 +73,7 @@\n import org.apache.hadoop.hive.ql.plan.MapWork;\n import org.apache.hadoop.hive.ql.plan.PartitionDesc;\n import org.apache.hadoop.hive.ql.plan.TableDesc;\n+import org.apache.hadoop.hive.serde.serdeConstants;\n import org.apache.hadoop.hive.serde2.ColumnProjectionUtils;\n import org.apache.hadoop.hive.serde2.SerDe;\n import org.apache.hadoop.hive.serde2.SerDeUtils;\n@@ -1266,6 +1267,8 @@ JobConf createMockExecutionEnvironment(Path workDir,\n     }\n     conf.set(\"hive.io.file.readcolumn.ids\", columnIds.toString());\n     conf.set(\"partition_columns\", \"p\");\n+    conf.set(serdeConstants.LIST_COLUMNS, columnNames.toString());\n+    conf.set(serdeConstants.LIST_COLUMN_TYPES, columnTypes.toString());\n     MockFileSystem fs = (MockFileSystem) warehouseDir.getFileSystem(conf);\n     fs.clear();\n ",
                "deletions": 0
            },
            {
                "sha": "4b114125e77830989dc9fccd70c1afe9ed981408",
                "filename": "ql/src/test/queries/clientpositive/acid_vectorization.q",
                "blob_url": "https://github.com/apache/hive/blob/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/test/queries/clientpositive/acid_vectorization.q",
                "raw_url": "https://github.com/apache/hive/raw/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/test/queries/clientpositive/acid_vectorization.q",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/acid_vectorization.q?ref=ec953bdc45f69118b84e0d4789f58f11e5207f1b",
                "patch": "@@ -12,3 +12,5 @@ set hive.vectorized.execution.enabled=true;\n update acid_vectorized set b = 'foo' where b = 'bar';\n set hive.vectorized.execution.enabled=true;\n delete from acid_vectorized where b = 'foo';\n+set hive.vectorized.execution.enabled=true;\n+select a, b from acid_vectorized order by a, b;",
                "deletions": 0
            },
            {
                "sha": "1792979156ec361c85882ac8b6968e93d42b5f31",
                "filename": "ql/src/test/results/clientpositive/acid_vectorization.q.out",
                "blob_url": "https://github.com/apache/hive/blob/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/test/results/clientpositive/acid_vectorization.q.out",
                "raw_url": "https://github.com/apache/hive/raw/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/test/results/clientpositive/acid_vectorization.q.out",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/acid_vectorization.q.out?ref=ec953bdc45f69118b84e0d4789f58f11e5207f1b",
                "patch": "@@ -42,3 +42,21 @@ POSTHOOK: query: delete from acid_vectorized where b = 'foo'\n POSTHOOK: type: QUERY\n POSTHOOK: Input: default@acid_vectorized\n POSTHOOK: Output: default@acid_vectorized\n+PREHOOK: query: select a, b from acid_vectorized order by a, b\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@acid_vectorized\n+#### A masked pattern was here ####\n+POSTHOOK: query: select a, b from acid_vectorized order by a, b\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@acid_vectorized\n+#### A masked pattern was here ####\n+-1073279343\toj1YrV5Wa\n+-1073051226\tA34p7oRr2WvUJNf\n+-1072910839\t0iqrc5\n+-1072081801\tdPkN74F7\n+-1072076362\t2uLyD28144vklju213J1mr\n+-1071480828\taw724t8c5558x2xneC624\n+-1071363017\tAnj0oF\n+-1070883071\t0ruyd6Y50JpdGRf6HqD\n+-1070551679\tiUR3Q\n+-1069736047\tk17Am8uPHWk02cEf1jet",
                "deletions": 0
            },
            {
                "sha": "1792979156ec361c85882ac8b6968e93d42b5f31",
                "filename": "ql/src/test/results/clientpositive/tez/acid_vectorization.q.out",
                "blob_url": "https://github.com/apache/hive/blob/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/test/results/clientpositive/tez/acid_vectorization.q.out",
                "raw_url": "https://github.com/apache/hive/raw/ec953bdc45f69118b84e0d4789f58f11e5207f1b/ql/src/test/results/clientpositive/tez/acid_vectorization.q.out",
                "status": "added",
                "changes": 62,
                "additions": 62,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/acid_vectorization.q.out?ref=ec953bdc45f69118b84e0d4789f58f11e5207f1b",
                "patch": "@@ -0,0 +1,62 @@\n+PREHOOK: query: CREATE TABLE acid_vectorized(a INT, b STRING) CLUSTERED BY(a) INTO 2 BUCKETS STORED AS ORC TBLPROPERTIES ('transactional'='true')\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: CREATE TABLE acid_vectorized(a INT, b STRING) CLUSTERED BY(a) INTO 2 BUCKETS STORED AS ORC TBLPROPERTIES ('transactional'='true')\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@acid_vectorized\n+PREHOOK: query: insert into table acid_vectorized select cint, cstring1 from alltypesorc where cint is not null order by cint limit 10\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@alltypesorc\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: insert into table acid_vectorized select cint, cstring1 from alltypesorc where cint is not null order by cint limit 10\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@alltypesorc\n+POSTHOOK: Output: default@acid_vectorized\n+POSTHOOK: Lineage: acid_vectorized.a SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cint, type:int, comment:null), ]\n+POSTHOOK: Lineage: acid_vectorized.b SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cstring1, type:string, comment:null), ]\n+PREHOOK: query: insert into table acid_vectorized values (1, 'bar')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@values__tmp__table__1\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: insert into table acid_vectorized values (1, 'bar')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@values__tmp__table__1\n+POSTHOOK: Output: default@acid_vectorized\n+POSTHOOK: Lineage: acid_vectorized.a EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]\n+POSTHOOK: Lineage: acid_vectorized.b SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]\n+PREHOOK: query: update acid_vectorized set b = 'foo' where b = 'bar'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@acid_vectorized\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: update acid_vectorized set b = 'foo' where b = 'bar'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@acid_vectorized\n+POSTHOOK: Output: default@acid_vectorized\n+PREHOOK: query: delete from acid_vectorized where b = 'foo'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@acid_vectorized\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: delete from acid_vectorized where b = 'foo'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@acid_vectorized\n+POSTHOOK: Output: default@acid_vectorized\n+PREHOOK: query: select a, b from acid_vectorized order by a, b\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@acid_vectorized\n+#### A masked pattern was here ####\n+POSTHOOK: query: select a, b from acid_vectorized order by a, b\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@acid_vectorized\n+#### A masked pattern was here ####\n+-1073279343\toj1YrV5Wa\n+-1073051226\tA34p7oRr2WvUJNf\n+-1072910839\t0iqrc5\n+-1072081801\tdPkN74F7\n+-1072076362\t2uLyD28144vklju213J1mr\n+-1071480828\taw724t8c5558x2xneC624\n+-1071363017\tAnj0oF\n+-1070883071\t0ruyd6Y50JpdGRf6HqD\n+-1070551679\tiUR3Q\n+-1069736047\tk17Am8uPHWk02cEf1jet",
                "deletions": 0
            }
        ],
        "patched_files": [
            "OrcInputFormat.java",
            "OrcRawRecordMerger.java"
        ],
        "unit_tests": [
            "TestOrcRawRecordMerger.java",
            "TestInputOutputFormat.java"
        ]
    },
    "hive_e9860bb": {
        "repo": "hive",
        "message": "HIVE-10408. Fix NPE in scheduler in case of rejected tasks. (Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/branches/llap@1675176 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/e9860bb80b7a2adeee7732b0dba60cb4d789e249",
        "parent": "https://github.com/apache/hive/commit/fa57c1733c6f08bc9fc840026dd7b7521f60a226",
        "bug_id": "hive_e9860bb",
        "file": [
            {
                "sha": "a9033694ae1457775d75d3a4fc438a0b69115cb4",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/daemon/registry/impl/LlapYarnRegistryImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/java/org/apache/hadoop/hive/llap/daemon/registry/impl/LlapYarnRegistryImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/java/org/apache/hadoop/hive/llap/daemon/registry/impl/LlapYarnRegistryImpl.java",
                "status": "modified",
                "changes": 110,
                "additions": 65,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/daemon/registry/impl/LlapYarnRegistryImpl.java?ref=e9860bb80b7a2adeee7732b0dba60cb4d789e249",
                "patch": "@@ -19,15 +19,16 @@\n import java.net.UnknownHostException;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.PathNotFoundException;\n import org.apache.hadoop.hive.llap.configuration.LlapConfiguration;\n import org.apache.hadoop.hive.llap.daemon.registry.ServiceInstance;\n import org.apache.hadoop.hive.llap.daemon.registry.ServiceInstanceSet;\n@@ -37,7 +38,6 @@\n import org.apache.hadoop.registry.client.binding.RegistryTypeUtils;\n import org.apache.hadoop.registry.client.binding.RegistryUtils;\n import org.apache.hadoop.registry.client.binding.RegistryUtils.ServiceRecordMarshal;\n-import org.apache.hadoop.registry.client.exceptions.InvalidRecordException;\n import org.apache.hadoop.registry.client.impl.zk.RegistryOperationsService;\n import org.apache.hadoop.registry.client.types.AddressTypes;\n import org.apache.hadoop.registry.client.types.Endpoint;\n@@ -55,9 +55,10 @@\n   private static final Logger LOG = Logger.getLogger(LlapYarnRegistryImpl.class);\n \n   private RegistryOperationsService client;\n-  private String instanceName;\n-  private Configuration conf;\n-  private ServiceRecordMarshal encoder;\n+  private final String instanceName;\n+  private final Configuration conf;\n+  private final ServiceRecordMarshal encoder;\n+  private final String path;\n \n   private final DynamicServiceInstanceSet instances = new DynamicServiceInstanceSet();\n \n@@ -68,7 +69,8 @@\n \n   private final static String SERVICE_CLASS = \"org-apache-hive\";\n \n-  final ScheduledExecutorService refresher = Executors.newScheduledThreadPool(1);\n+  final ScheduledExecutorService refresher = Executors.newScheduledThreadPool(1,\n+      new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"LlapYarnRegistryRefresher\").build());\n   final long refreshDelay;\n \n   static {\n@@ -90,6 +92,8 @@ public LlapYarnRegistryImpl(String instanceName, Configuration conf) {\n     // registry reference\n     client = (RegistryOperationsService) RegistryOperationsFactory.createInstance(conf);\n     encoder = new RegistryUtils.ServiceRecordMarshal();\n+    this.path = RegistryPathUtils.join(RegistryUtils.componentPath(RegistryUtils.currentUser(),\n+        SERVICE_CLASS, instanceName, \"workers\"), \"worker-\");\n     refreshDelay =\n         conf.getInt(LlapConfiguration.LLAP_DAEMON_SERVICE_REFRESH_INTERVAL,\n             LlapConfiguration.LLAP_DAEMON_SERVICE_REFRESH_INTERVAL_DEFAULT);\n@@ -114,8 +118,7 @@ public Endpoint getShuffleEndpoint() {\n   }\n \n   private final String getPath() {\n-    return RegistryPathUtils.join(RegistryUtils.componentPath(RegistryUtils.currentUser(),\n-        SERVICE_CLASS, instanceName, \"workers\"), \"worker-\");\n+    return this.path;\n   }\n \n   @Override\n@@ -199,7 +202,8 @@ public boolean isAlive() {\n     }\n \n     public void kill() {\n-      LOG.info(\"Killing \" + this);\n+      // May be possible to generate a notification back to the scheduler from here.\n+      LOG.info(\"Killing service instance: \" + this);\n       this.alive = false;\n     }\n \n@@ -217,74 +221,90 @@ public Resource getResource() {\n \n     @Override\n     public String toString() {\n-      return \"DynamicServiceInstance [alive=\" + alive + \", host=\" + host + \":\" + rpcPort + \"]\";\n+      return \"DynamicServiceInstance [alive=\" + alive + \", host=\" + host + \":\" + rpcPort + \" with resources=\" + getResource() +\"]\";\n     }\n+\n+    // Relying on the identity hashCode and equality, since refreshing instances retains the old copy\n+    // of an already known instance.\n   }\n \n   private class DynamicServiceInstanceSet implements ServiceInstanceSet {\n \n-    Map<String, ServiceInstance> instances;\n+    // LinkedHashMap to retain iteration order.\n+    private final Map<String, ServiceInstance> instances = new LinkedHashMap<>();\n \n     @Override\n-    public Map<String, ServiceInstance> getAll() {\n-      return instances;\n+    public synchronized Map<String, ServiceInstance> getAll() {\n+      // Return a copy. Instances may be modified during a refresh.\n+      return new LinkedHashMap<>(instances);\n     }\n \n     @Override\n-    public ServiceInstance getInstance(String name) {\n+    public synchronized ServiceInstance getInstance(String name) {\n       return instances.get(name);\n     }\n \n     @Override\n-    public synchronized void refresh() throws IOException {\n+    public  void refresh() throws IOException {\n       /* call this from wherever */\n       Map<String, ServiceInstance> freshInstances = new HashMap<String, ServiceInstance>();\n \n       String path = getPath();\n       Map<String, ServiceRecord> records =\n           RegistryUtils.listServiceRecords(client, RegistryPathUtils.parentOf(path));\n-      Set<String> latestKeys = new HashSet<String>();\n-      LOG.info(\"Starting to refresh ServiceInstanceSet \" + System.identityHashCode(this));\n-      for (ServiceRecord rec : records.values()) {\n-        ServiceInstance instance = new DynamicServiceInstance(rec);\n-        if (instance != null) {\n-          if (instances != null && instances.containsKey(instance.getWorkerIdentity()) == false) {\n-            // add a new object\n-            freshInstances.put(instance.getWorkerIdentity(), instance);\n-            if (LOG.isInfoEnabled()) {\n-              LOG.info(\"Adding new worker \" + instance.getWorkerIdentity() + \" which mapped to \"\n-                  + instance);\n+      // Synchronize after reading the service records from the external service (ZK)\n+      synchronized (this) {\n+        Set<String> latestKeys = new HashSet<String>();\n+        LOG.info(\"Starting to refresh ServiceInstanceSet \" + System.identityHashCode(this));\n+        for (ServiceRecord rec : records.values()) {\n+          ServiceInstance instance = new DynamicServiceInstance(rec);\n+          if (instance != null) {\n+            if (instances != null && instances.containsKey(instance.getWorkerIdentity()) == false) {\n+              // add a new object\n+              freshInstances.put(instance.getWorkerIdentity(), instance);\n+              if (LOG.isInfoEnabled()) {\n+                LOG.info(\"Adding new worker \" + instance.getWorkerIdentity() + \" which mapped to \"\n+                    + instance);\n+              }\n+            } else {\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Retaining running worker \" + instance.getWorkerIdentity() +\n+                    \" which mapped to \" + instance);\n+              }\n             }\n-          } else if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Retaining running worker \" + instance.getWorkerIdentity() + \" which mapped to \" + instance);\n           }\n+          latestKeys.add(instance.getWorkerIdentity());\n         }\n-        latestKeys.add(instance.getWorkerIdentity());\n-      }\n \n-      if (instances != null) {\n-        // deep-copy before modifying\n-        Set<String> oldKeys = new HashSet(instances.keySet());\n-        if (oldKeys.removeAll(latestKeys)) {\n-          for (String k : oldKeys) {\n-            // this is so that people can hold onto ServiceInstance references as placeholders for tasks\n-            final DynamicServiceInstance dead = (DynamicServiceInstance) instances.get(k);\n-            dead.kill();\n-            if (LOG.isInfoEnabled()) {\n-              LOG.info(\"Deleting dead worker \" + k + \" which mapped to \" + dead);\n+        if (instances != null) {\n+          // deep-copy before modifying\n+          Set<String> oldKeys = new HashSet(instances.keySet());\n+          if (oldKeys.removeAll(latestKeys)) {\n+            // This is all the records which have not checked in, and are effectively dead.\n+            for (String k : oldKeys) {\n+              // this is so that people can hold onto ServiceInstance references as placeholders for tasks\n+              final DynamicServiceInstance dead = (DynamicServiceInstance) instances.get(k);\n+              dead.kill();\n+              if (LOG.isInfoEnabled()) {\n+                LOG.info(\"Deleting dead worker \" + k + \" which mapped to \" + dead);\n+              }\n             }\n           }\n+          // oldKeys contains the set of dead instances at this point.\n+          this.instances.keySet().removeAll(oldKeys);\n+          this.instances.putAll(freshInstances);\n+        } else {\n+          this.instances.putAll(freshInstances);\n         }\n-        this.instances.keySet().removeAll(oldKeys);\n-        this.instances.putAll(freshInstances);\n-      } else {\n-        this.instances = freshInstances;\n       }\n     }\n \n     @Override\n-    public Set<ServiceInstance> getByHost(String host) {\n+    public synchronized Set<ServiceInstance> getByHost(String host) {\n+      // TODO Maybe store this as a map which is populated during construction, to avoid walking\n+      // the map on each request.\n       Set<ServiceInstance> byHost = new HashSet<ServiceInstance>();\n+\n       for (ServiceInstance i : instances.values()) {\n         if (host.equals(i.getHost())) {\n           // all hosts in instances should be alive in this impl",
                "deletions": 45
            },
            {
                "sha": "d35b04ae743c34601dce154b9cd766cdbf9a1f32",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java",
                "blob_url": "https://github.com/apache/hive/blob/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java",
                "raw_url": "https://github.com/apache/hive/raw/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java?ref=e9860bb80b7a2adeee7732b0dba60cb4d789e249",
                "patch": "@@ -218,7 +218,6 @@ public void setResponse(SubmitWorkResponseProto response) {\n \n           @Override\n           public void indicateError(Throwable t) {\n-            LOG.info(\"Failed to run task: \" + taskSpec.getTaskAttemptID() + \" on containerId: \" + containerId, t);\n             if (t instanceof ServiceException) {\n               ServiceException se = (ServiceException) t;\n               t = se.getCause();\n@@ -228,21 +227,29 @@ public void indicateError(Throwable t) {\n               String message = re.toString();\n               // RejectedExecutions from the remote service treated as KILLED\n               if (message.contains(RejectedExecutionException.class.getName())) {\n+                LOG.info(\n+                    \"Unable to run task: \" + taskSpec.getTaskAttemptID() + \" on containerId: \" +\n+                        containerId + \", Service Busy\");\n                 getTaskCommunicatorContext().taskKilled(taskSpec.getTaskAttemptID(),\n                     TaskAttemptEndReason.SERVICE_BUSY, \"Service Busy\");\n               } else {\n                 // All others from the remote service cause the task to FAIL.\n+                LOG.info(\"Failed to run task: \" + taskSpec.getTaskAttemptID() + \" on containerId: \" + containerId, t);\n                 getTaskCommunicatorContext()\n                     .taskFailed(taskSpec.getTaskAttemptID(), TaskAttemptEndReason.OTHER,\n                         t.toString());\n               }\n             } else {\n               // Exception from the RPC layer - communication failure, consider as KILLED / service down.\n               if (t instanceof IOException) {\n+                LOG.info(\n+                    \"Unable to run task: \" + taskSpec.getTaskAttemptID() + \" on containerId: \" +\n+                        containerId + \", Communication Error\");\n                 getTaskCommunicatorContext().taskKilled(taskSpec.getTaskAttemptID(),\n                     TaskAttemptEndReason.COMMUNICATION_ERROR, \"Communication Error\");\n               } else {\n                 // Anything else is a FAIL.\n+                LOG.info(\"Failed to run task: \" + taskSpec.getTaskAttemptID() + \" on containerId: \" + containerId, t);\n                 getTaskCommunicatorContext()\n                     .taskFailed(taskSpec.getTaskAttemptID(), TaskAttemptEndReason.OTHER,\n                         t.getMessage());",
                "deletions": 1
            },
            {
                "sha": "1ab3d152f2c07e044a3e7c53f3fe144b6e9527ba",
                "filename": "llap-server/src/java/org/apache/tez/dag/app/rm/ContainerFactory.java",
                "blob_url": "https://github.com/apache/hive/blob/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/java/org/apache/tez/dag/app/rm/ContainerFactory.java",
                "raw_url": "https://github.com/apache/hive/raw/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/java/org/apache/tez/dag/app/rm/ContainerFactory.java",
                "status": "added",
                "changes": 54,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/tez/dag/app/rm/ContainerFactory.java?ref=e9860bb80b7a2adeee7732b0dba60cb4d789e249",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.tez.dag.app.rm;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n+import org.apache.hadoop.yarn.api.records.ApplicationId;\n+import org.apache.hadoop.yarn.api.records.Container;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.hadoop.yarn.api.records.NodeId;\n+import org.apache.hadoop.yarn.api.records.Priority;\n+import org.apache.hadoop.yarn.api.records.Resource;\n+import org.apache.tez.dag.app.AppContext;\n+\n+class ContainerFactory {\n+  final ApplicationAttemptId customAppAttemptId;\n+  AtomicLong nextId;\n+\n+  public ContainerFactory(AppContext appContext, long appIdLong) {\n+    this.nextId = new AtomicLong(1);\n+    ApplicationId appId =\n+        ApplicationId.newInstance(appIdLong, appContext.getApplicationAttemptId()\n+            .getApplicationId().getId());\n+    this.customAppAttemptId =\n+        ApplicationAttemptId.newInstance(appId, appContext.getApplicationAttemptId()\n+            .getAttemptId());\n+  }\n+\n+  public Container createContainer(Resource capability, Priority priority, String hostname,\n+      int port) {\n+    ContainerId containerId =\n+        ContainerId.newContainerId(customAppAttemptId, nextId.getAndIncrement());\n+    NodeId nodeId = NodeId.newInstance(hostname, port);\n+    String nodeHttpAddress = \"hostname:0\"; // TODO: include UI ports\n+\n+    Container container =\n+        Container.newInstance(containerId, nodeId, nodeHttpAddress, capability, priority, null);\n+\n+    return container;\n+  }\n+}",
                "deletions": 0
            },
            {
                "sha": "39ad5521cd02a538f6c458e0065f2b0c2081e2ef",
                "filename": "llap-server/src/java/org/apache/tez/dag/app/rm/LlapTaskSchedulerService.java",
                "blob_url": "https://github.com/apache/hive/blob/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/java/org/apache/tez/dag/app/rm/LlapTaskSchedulerService.java",
                "raw_url": "https://github.com/apache/hive/raw/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/java/org/apache/tez/dag/app/rm/LlapTaskSchedulerService.java",
                "status": "modified",
                "changes": 135,
                "additions": 69,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/tez/dag/app/rm/LlapTaskSchedulerService.java?ref=e9860bb80b7a2adeee7732b0dba60cb4d789e249",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n@@ -38,7 +39,6 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n import org.apache.commons.logging.Log;\n@@ -48,8 +48,6 @@\n import org.apache.hadoop.hive.llap.daemon.registry.ServiceInstance;\n import org.apache.hadoop.hive.llap.daemon.registry.ServiceInstanceSet;\n import org.apache.hadoop.hive.llap.daemon.registry.impl.LlapRegistryService;\n-import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n-import org.apache.hadoop.yarn.api.records.ApplicationId;\n import org.apache.hadoop.yarn.api.records.Container;\n import org.apache.hadoop.yarn.api.records.ContainerId;\n import org.apache.hadoop.yarn.api.records.NodeId;\n@@ -78,15 +76,11 @@\n   // interface into the registry service\n   private ServiceInstanceSet activeInstances;\n \n+  // Tracks all instances, including ones which have been disabled in the past.\n+  // LinkedHashMap to provide the same iteration order when selecting a random host.\n   @VisibleForTesting\n-  final Map<ServiceInstance, NodeInfo> instanceToNodeMap = new HashMap<>();\n-  \n-  @VisibleForTesting\n-  final Set<ServiceInstance> instanceBlackList = new HashSet<ServiceInstance>();\n-\n-  @VisibleForTesting\n-  // Tracks currently allocated containers.\n-  final Map<ContainerId, String> containerToInstanceMap = new HashMap<>();\n+  final Map<ServiceInstance, NodeInfo> instanceToNodeMap = new LinkedHashMap<>();\n+  // TODO Ideally, remove elements from this once it's known that no tasks are linked to the instance (all deallocated)\n \n   // Tracks tasks which could not be allocated immediately.\n   @VisibleForTesting\n@@ -100,8 +94,9 @@ public int compare(Priority o1, Priority o2) {\n   // Tracks running and queued tasks. Cleared after a task completes.\n   private final ConcurrentMap<Object, TaskInfo> knownTasks = new ConcurrentHashMap<>();\n \n+  // Queue for disabled nodes. Nodes make it out of this queue when their expiration timeout is hit.\n   @VisibleForTesting\n-  final DelayQueue<NodeInfo> disabledNodes = new DelayQueue<>();\n+  final DelayQueue<NodeInfo> disabledNodesQueue = new DelayQueue<>();\n \n   private final ContainerFactory containerFactory;\n   private final Random random = new Random();\n@@ -263,9 +258,9 @@ public Resource getAvailableResources() {\n     int vcores = 0;\n     readLock.lock();\n     try {\n-      for (ServiceInstance inst : instanceToNodeMap.keySet()) {\n-        if (inst.isAlive()) {\n-          Resource r = inst.getResource();\n+      for (Entry<ServiceInstance, NodeInfo> entry : instanceToNodeMap.entrySet()) {\n+        if (entry.getKey().isAlive() && !entry.getValue().isDisabled()) {\n+          Resource r = entry.getKey().getResource();\n           memory += r.getMemory();\n           vcores += r.getVirtualCores();\n         }\n@@ -375,8 +370,6 @@ public boolean deallocateTask(Object task, boolean taskSucceeded, TaskAttemptEnd\n         }\n         return false;\n       }\n-      String hostForContainer = containerToInstanceMap.remove(taskInfo.containerId);\n-      assert hostForContainer != null;\n       ServiceInstance assignedInstance = taskInfo.assignedInstance;\n       assert assignedInstance != null;\n \n@@ -410,6 +403,8 @@ public boolean deallocateTask(Object task, boolean taskSucceeded, TaskAttemptEnd\n   @Override\n   public Object deallocateContainer(ContainerId containerId) {\n     LOG.info(\"DEBUG: Ignoring deallocateContainer for containerId: \" + containerId);\n+    // Containers are not being tracked for re-use.\n+    // This is safe to ignore since a deallocate task should have come in earlier.\n     return null;\n   }\n \n@@ -435,7 +430,7 @@ TaskSchedulerAppCallback createAppCallbackDelegate(TaskSchedulerAppCallback real\n   }\n \n   /**\n-   * @param requestedHosts the list of preferred hosts. null implies any host\n+   * @param request the list of preferred hosts. null implies any host\n    * @return\n    */\n   private ServiceInstance selectHost(TaskInfo request) {\n@@ -444,6 +439,9 @@ private ServiceInstance selectHost(TaskInfo request) {\n     try {\n       // Check if any hosts are active.\n       if (getAvailableResources().getMemory() <= 0) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Refreshing instances since total memory is 0\");\n+        }\n         refreshInstances();\n       }\n \n@@ -453,49 +451,65 @@ private ServiceInstance selectHost(TaskInfo request) {\n       }\n \n       if (requestedHosts != null) {\n+        int prefHostCount = -1;\n         for (String host : requestedHosts) {\n+          prefHostCount++;\n           // Pick the first host always. Weak attempt at cache affinity.\n           Set<ServiceInstance> instances = activeInstances.getByHost(host);\n           if (!instances.isEmpty()) {\n             for (ServiceInstance inst : instances) {\n-              if (inst.isAlive() && instanceToNodeMap.containsKey(inst)) {\n-                // only allocate from the \"available\" list\n+              NodeInfo nodeInfo = instanceToNodeMap.get(inst);\n+              if (inst.isAlive() && nodeInfo != null && !nodeInfo.isDisabled()) {\n                 // TODO Change this to work off of what we think is remaining capacity for an\n                 // instance\n-                LOG.info(\"Assigning \" + inst + \" when looking for \" + host);\n+                LOG.info(\n+                    \"Assigning \" + inst + \" when looking for \" + host + \". FirstRequestedHost=\" +\n+                        (prefHostCount == 0));\n                 return inst;\n               }\n             }\n           }\n         }\n       }\n       /* fall through - miss in locality (random scheduling) */\n-      ServiceInstance[] all = instanceToNodeMap.keySet().toArray(new ServiceInstance[0]);\n+      Entry<ServiceInstance, NodeInfo> [] all = instanceToNodeMap.entrySet().toArray(new Entry[instanceToNodeMap.size()]);\n       // Check again\n       if (all.length > 0) {\n         int n = random.nextInt(all.length);\n         // start at random offset and iterate whole list\n         for (int i = 0; i < all.length; i++) {\n-          ServiceInstance inst = all[(i + n) % all.length];\n-          if (inst.isAlive()) {\n-            LOG.info(\"Assigning \" + inst + \" when looking for any host\");\n-            return inst;\n+          Entry<ServiceInstance, NodeInfo> inst = all[(i + n) % all.length];\n+          if (inst.getKey().isAlive() && !inst.getValue().isDisabled()) {\n+            LOG.info(\"Assigning \" + inst + \" when looking for any host, from #hosts=\" + all.length);\n+            return inst.getKey();\n           }\n         }\n       }\n     } finally {\n       readLock.unlock();\n     }\n \n+    // TODO Ideally, each refresh operation should addNodes if they don't already exist.\n+    // Even better would be to get notifications from the service impl when a node gets added or removed.\n+    // Instead of having to walk through the entire list. The computation of a node getting added or\n+    // removed already exists in the DynamicRegistry implementation.\n+\n+\n+    // This will only happen if no allocations are possible, which means all other nodes have\n+    // been blacklisted.\n+    // TODO Look for new nodes more often. See comment above.\n+\n     /* check again whether nodes are disabled or just missing */\n     writeLock.lock();\n     try {\n       for (ServiceInstance inst : activeInstances.getAll().values()) {\n-        if (inst.isAlive() && instanceBlackList.contains(inst) == false\n-            && instanceToNodeMap.containsKey(inst) == false) {\n+        if (inst.isAlive() && instanceToNodeMap.containsKey(inst) == false) {\n           /* that's a good node, not added to the allocations yet */\n+          LOG.info(\"Found a new node: \" + inst + \". Adding to node list and disabling to trigger scheduling\");\n           addNode(inst, new NodeInfo(inst, BACKOFF_FACTOR, clock));\n           // mark it as disabled to let the pending tasks go there\n+          // TODO If disabling the instance, have it wake up immediately instead of waiting.\n+          // Ideally get rid of this requirement, by having all tasks allocated via a queue.\n           disableInstance(inst, true);\n         }\n       }\n@@ -515,19 +529,22 @@ private void refreshInstances() {\n   }\n \n   private void addNode(ServiceInstance inst, NodeInfo node) {\n+    LOG.info(\"Adding node: \" + inst);\n     instanceToNodeMap.put(inst, node);\n+    // TODO Trigger a scheduling run each time a new node is added.\n   }\n \n   private void reenableDisabledNode(NodeInfo nodeInfo) {\n     writeLock.lock();\n     try {\n       if (!nodeInfo.isBusy()) {\n+        // If the node being re-enabled was not marked busy previously, then it was disabled due to\n+        // some other failure. Refresh the service list to see if it's been removed permanently.\n         refreshInstances();\n       }\n+      LOG.info(\"Attempting to re-enable node: \" + nodeInfo.host);\n       if (nodeInfo.host.isAlive()) {\n         nodeInfo.enableNode();\n-        instanceBlackList.remove(nodeInfo.host);\n-        instanceToNodeMap.put(nodeInfo.host, nodeInfo);\n       } else {\n         if (LOG.isInfoEnabled()) {\n           LOG.info(\"Removing dead node \" + nodeInfo);\n@@ -541,19 +558,18 @@ private void reenableDisabledNode(NodeInfo nodeInfo) {\n   private void disableInstance(ServiceInstance instance, boolean busy) {\n     writeLock.lock();\n     try {\n-      NodeInfo nodeInfo = instanceToNodeMap.remove(instance);\n-      if (nodeInfo == null) {\n+      NodeInfo nodeInfo = instanceToNodeMap.get(instance);\n+      if (nodeInfo == null || nodeInfo.isDisabled()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Node: \" + instance + \" already disabled, or invalid. Not doing anything.\");\n         }\n       } else {\n-        instanceBlackList.add(instance);\n         nodeInfo.disableNode(nodeReEnableTimeout);\n         nodeInfo.setBusy(busy); // daemon failure vs daemon busy\n         // TODO: handle task to container map events in case of hard failures\n-        disabledNodes.add(nodeInfo);\n+        disabledNodesQueue.add(nodeInfo);\n         if (LOG.isInfoEnabled()) {\n-          LOG.info(\"Disabling instance \" + instance + \" for \" + nodeReEnableTimeout + \" seconds\");\n+          LOG.info(\"Disabling instance \" + instance + \" for \" + nodeReEnableTimeout + \" milli-seconds\");\n         }\n       }\n     } finally {\n@@ -640,7 +656,6 @@ private boolean scheduleTask(TaskInfo taskInfo) {\n             host.getHost());\n         taskInfo.setAssignmentInfo(host, container.getId());\n         knownTasks.putIfAbsent(taskInfo.task, taskInfo);\n-        containerToInstanceMap.put(container.getId(), host.getWorkerIdentity());\n       } finally {\n         writeLock.unlock();\n       }\n@@ -660,7 +675,7 @@ public Void call() {\n       while (!isShutdown.get() && !Thread.currentThread().isInterrupted()) {\n         try {\n           while (true) {\n-            NodeInfo nodeInfo = disabledNodes.take();\n+            NodeInfo nodeInfo = disabledNodesQueue.take();\n             // A node became available. Enable the node and try scheduling.\n             reenableDisabledNode(nodeInfo);\n             schedulePendingTasks();\n@@ -694,8 +709,12 @@ public void shutdown() {\n     private long numSuccessfulTasks = 0;\n     private long numSuccessfulTasksAtLastBlacklist = -1;\n     float cumulativeBackoffFactor = 1.0f;\n+    // A node could be disabled for reasons other than being busy.\n+    private boolean disabled = false;\n+    // If disabled, the node could be marked as busy.\n     private boolean busy;\n \n+\n     NodeInfo(ServiceInstance host, float backoffFactor, Clock clock) {\n       this.host = host;\n       constBackOffFactor = backoffFactor;\n@@ -704,10 +723,12 @@ public void shutdown() {\n \n     void enableNode() {\n       expireTimeMillis = -1;\n+      disabled = false;\n     }\n \n     void disableNode(long duration) {\n       long currentTime = clock.getTime();\n+      disabled = true;\n       if (numSuccessfulTasksAtLastBlacklist == numSuccessfulTasks) {\n         // Blacklisted again, without any progress. Will never kick in for the first run.\n         cumulativeBackoffFactor = cumulativeBackoffFactor * constBackOffFactor;\n@@ -721,7 +742,12 @@ void disableNode(long duration) {\n     }\n \n     void registerTaskSuccess() {\n-      this.busy = false; // if a task exited, we might have free slots\n+      // TODO If a task succeeds, we may have free slots. Mark the node as !busy. Ideally take it out\n+      // of the queue for more allocations.\n+      // For now, not chanigng the busy status,\n+\n+      // this.busy = false;\n+      // this.disabled = false;\n       numSuccessfulTasks++;\n     }\n \n@@ -733,9 +759,13 @@ public boolean isBusy() {\n       return busy;\n     }\n \n+    public boolean isDisabled() {\n+      return disabled;\n+    }\n+\n     @Override\n     public long getDelay(TimeUnit unit) {\n-      return expireTimeMillis - clock.getTime();\n+      return unit.convert(expireTimeMillis - clock.getTime(), TimeUnit.MILLISECONDS);\n     }\n \n     @Override\n@@ -869,31 +899,4 @@ void setAssignmentInfo(ServiceInstance instance, ContainerId containerId) {\n     }\n   }\n \n-  static class ContainerFactory {\n-    final ApplicationAttemptId customAppAttemptId;\n-    AtomicLong nextId;\n-\n-    public ContainerFactory(AppContext appContext, long appIdLong) {\n-      this.nextId = new AtomicLong(1);\n-      ApplicationId appId =\n-          ApplicationId.newInstance(appIdLong, appContext.getApplicationAttemptId()\n-              .getApplicationId().getId());\n-      this.customAppAttemptId =\n-          ApplicationAttemptId.newInstance(appId, appContext.getApplicationAttemptId()\n-              .getAttemptId());\n-    }\n-\n-    public Container createContainer(Resource capability, Priority priority, String hostname,\n-        int port) {\n-      ContainerId containerId =\n-          ContainerId.newContainerId(customAppAttemptId, nextId.getAndIncrement());\n-      NodeId nodeId = NodeId.newInstance(hostname, port);\n-      String nodeHttpAddress = \"hostname:0\"; // TODO: include UI ports\n-\n-      Container container =\n-          Container.newInstance(containerId, nodeId, nodeHttpAddress, capability, priority, null);\n-\n-      return container;\n-    }\n-  }\n }",
                "deletions": 66
            },
            {
                "sha": "b116af0357c459ae27b2a3bfe91297e0ed543a36",
                "filename": "llap-server/src/test/org/apache/tez/dag/app/rm/TestLlapTaskSchedulerService.java",
                "blob_url": "https://github.com/apache/hive/blob/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/test/org/apache/tez/dag/app/rm/TestLlapTaskSchedulerService.java",
                "raw_url": "https://github.com/apache/hive/raw/e9860bb80b7a2adeee7732b0dba60cb4d789e249/llap-server/src/test/org/apache/tez/dag/app/rm/TestLlapTaskSchedulerService.java",
                "status": "modified",
                "changes": 8,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/test/org/apache/tez/dag/app/rm/TestLlapTaskSchedulerService.java?ref=e9860bb80b7a2adeee7732b0dba60cb4d789e249",
                "patch": "@@ -22,9 +22,7 @@\n import static org.mockito.Matchers.any;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.reset;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n@@ -38,15 +36,13 @@\n import org.apache.hadoop.yarn.api.records.Container;\n import org.apache.hadoop.yarn.api.records.Priority;\n import org.apache.hadoop.yarn.api.records.Resource;\n-import org.apache.hadoop.yarn.util.Clock;\n import org.apache.hadoop.yarn.util.SystemClock;\n import org.apache.tez.dag.api.TaskAttemptEndReason;\n import org.apache.tez.dag.app.AppContext;\n import org.apache.tez.dag.app.ControlledClock;\n import org.apache.tez.dag.app.rm.TaskSchedulerService.TaskSchedulerAppCallback;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n-import org.mortbay.log.Log;\n \n public class TestLlapTaskSchedulerService {\n \n@@ -112,7 +108,7 @@ public void testNodeDisabled() {\n       // Verify that the node is blacklisted\n       assertEquals(1, tsWrapper.ts.dagStats.numRejectedTasks);\n       assertEquals(2, tsWrapper.ts.instanceToNodeMap.size());\n-      LlapTaskSchedulerService.NodeInfo disabledNodeInfo = tsWrapper.ts.disabledNodes.peek();\n+      LlapTaskSchedulerService.NodeInfo disabledNodeInfo = tsWrapper.ts.disabledNodesQueue.peek();\n       assertNotNull(disabledNodeInfo);\n       assertEquals(HOST1, disabledNodeInfo.host.getHost());\n       assertEquals((10000l), disabledNodeInfo.getDelay(TimeUnit.NANOSECONDS));\n@@ -164,7 +160,7 @@ public void testNodeReEnabled() throws InterruptedException {\n       // Verify that the node is blacklisted\n       assertEquals(3, tsWrapper.ts.dagStats.numRejectedTasks);\n       assertEquals(0, tsWrapper.ts.instanceToNodeMap.size());\n-      assertEquals(3, tsWrapper.ts.disabledNodes.size());\n+      assertEquals(3, tsWrapper.ts.disabledNodesQueue.size());\n \n \n       Object task4 = new Object();",
                "deletions": 6
            }
        ],
        "patched_files": [
            "LlapYarnRegistryImpl.java",
            "LlapTaskCommunicator.java",
            "LlapTaskSchedulerService.java",
            "ContainerFactory.java"
        ],
        "unit_tests": [
            "TestLlapTaskSchedulerService.java"
        ]
    },
    "hive_c156b32": {
        "repo": "hive",
        "message": "HIVE-10595 Dropping a table can cause NPEs in the compactor (Alan Gates, reviewed by Eugene Koifman)",
        "commit": "https://github.com/apache/hive/commit/c156b32b49aeb5943e45a68fc7600c9244afb128",
        "parent": "https://github.com/apache/hive/commit/72088ca7c39136dd68dbbefb3897cd7abfdd982c",
        "bug_id": "hive_c156b32",
        "file": [
            {
                "sha": "16d2c81333dbc2e3a74b28018933f127f9b146fb",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Cleaner.java",
                "blob_url": "https://github.com/apache/hive/blob/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Cleaner.java",
                "raw_url": "https://github.com/apache/hive/raw/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Cleaner.java",
                "status": "modified",
                "changes": 20,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Cleaner.java?ref=c156b32b49aeb5943e45a68fc7600c9244afb128",
                "patch": "@@ -26,10 +26,12 @@\n import org.apache.hadoop.hive.common.ValidReadTxnList;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.api.MetaException;\n+import org.apache.hadoop.hive.metastore.api.Partition;\n import org.apache.hadoop.hive.metastore.api.ShowLocksRequest;\n import org.apache.hadoop.hive.metastore.api.ShowLocksResponse;\n import org.apache.hadoop.hive.metastore.api.ShowLocksResponseElement;\n import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n+import org.apache.hadoop.hive.metastore.api.Table;\n import org.apache.hadoop.hive.metastore.txn.CompactionInfo;\n import org.apache.hadoop.hive.ql.io.AcidUtils;\n import org.apache.hadoop.security.UserGroupInformation;\n@@ -183,7 +185,23 @@ public void run() {\n   private void clean(CompactionInfo ci) throws MetaException {\n     LOG.info(\"Starting cleaning for \" + ci.getFullPartitionName());\n     try {\n-      StorageDescriptor sd = resolveStorageDescriptor(resolveTable(ci), resolvePartition(ci));\n+      Table t = resolveTable(ci);\n+      if (t == null) {\n+        // The table was dropped before we got around to cleaning it.\n+        LOG.info(\"Unable to find table \" + ci.getFullTableName() + \", assuming it was dropped\");\n+        return;\n+      }\n+      Partition p = null;\n+      if (ci.partName != null) {\n+        p = resolvePartition(ci);\n+        if (p == null) {\n+          // The partition was dropped before we got around to cleaning it.\n+          LOG.info(\"Unable to find partition \" + ci.getFullPartitionName() +\n+              \", assuming it was dropped\");\n+          return;\n+        }\n+      }\n+      StorageDescriptor sd = resolveStorageDescriptor(t, p);\n       final String location = sd.getLocation();\n \n       // Create a bogus validTxnList with a high water mark set to MAX_LONG and no open",
                "deletions": 1
            },
            {
                "sha": "38cd95ea305edd26bb425b1555ce125930aa3de3",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/CompactorThread.java",
                "blob_url": "https://github.com/apache/hive/blob/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/CompactorThread.java",
                "raw_url": "https://github.com/apache/hive/raw/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/CompactorThread.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/CompactorThread.java?ref=c156b32b49aeb5943e45a68fc7600c9244afb128",
                "patch": "@@ -32,13 +32,13 @@\n import org.apache.hadoop.hive.metastore.api.Table;\n import org.apache.hadoop.hive.metastore.txn.CompactionInfo;\n import org.apache.hadoop.hive.metastore.txn.CompactionTxnHandler;\n-import org.apache.hadoop.hive.metastore.txn.TxnHandler;\n import org.apache.hadoop.security.AccessControlException;\n import org.apache.hadoop.security.UserGroupInformation;\n \n import java.io.IOException;\n import java.security.PrivilegedExceptionAction;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n@@ -105,13 +105,15 @@ protected Table resolveTable(CompactionInfo ci) throws MetaException {\n    * one partition.\n    */\n   protected Partition resolvePartition(CompactionInfo ci) throws Exception {\n-    Partition p = null;\n     if (ci.partName != null) {\n-      List<String> names = new ArrayList<String>(1);\n-      names.add(ci.partName);\n       List<Partition> parts = null;\n       try {\n-        parts = rs.getPartitionsByNames(ci.dbname, ci.tableName, names);\n+        parts = rs.getPartitionsByNames(ci.dbname, ci.tableName,\n+            Collections.singletonList(ci.partName));\n+        if (parts == null || parts.size() == 0) {\n+          // The partition got dropped before we went looking for it.\n+          return null;\n+        }\n       } catch (Exception e) {\n         LOG.error(\"Unable to find partition \" + ci.getFullPartitionName() + \", \" + e.getMessage());\n         throw e;",
                "deletions": 5
            },
            {
                "sha": "847d75199d6d614bd17ea852a4e3e87bf6911be7",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java",
                "blob_url": "https://github.com/apache/hive/blob/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java",
                "raw_url": "https://github.com/apache/hive/raw/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java?ref=c156b32b49aeb5943e45a68fc7600c9244afb128",
                "patch": "@@ -85,13 +85,13 @@ public void run() {\n           LOG.debug(\"Found \" + potentials.size() + \" potential compactions, \" +\n               \"checking to see if we should compact any of them\");\n           for (CompactionInfo ci : potentials) {\n-            LOG.debug(\"Checking to see if we should compact \" + ci.getFullPartitionName());\n+            LOG.info(\"Checking to see if we should compact \" + ci.getFullPartitionName());\n             try {\n               Table t = resolveTable(ci);\n               if (t == null) {\n                 // Most likely this means it's a temp table\n-                LOG.debug(\"Can't find table \" + ci.getFullTableName() + \", assuming it's a temp \" +\n-                    \"table and moving on.\");\n+                LOG.info(\"Can't find table \" + ci.getFullTableName() + \", assuming it's a temp \" +\n+                    \"table or has been dropped and moving on.\");\n                 continue;\n               }\n \n@@ -121,6 +121,11 @@ public void run() {\n \n               // Figure out who we should run the file operations as\n               Partition p = resolvePartition(ci);\n+              if (p == null && ci.partName != null) {\n+                LOG.info(\"Can't find partition \" + ci.getFullPartitionName() +\n+                    \", assuming it has been dropped and moving on.\");\n+                continue;\n+              }\n               StorageDescriptor sd = resolveStorageDescriptor(t, p);\n               String runAs = findUserToRunAs(sd.getLocation(), t);\n ",
                "deletions": 3
            },
            {
                "sha": "f26225a72c34252c8fdf615bd34b59532376c5de",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java",
                "blob_url": "https://github.com/apache/hive/blob/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java",
                "raw_url": "https://github.com/apache/hive/raw/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java?ref=c156b32b49aeb5943e45a68fc7600c9244afb128",
                "patch": "@@ -94,6 +94,12 @@ public void run() {\n         Table t1 = null;\n         try {\n           t1 = resolveTable(ci);\n+          if (t1 == null) {\n+            LOG.info(\"Unable to find table \" + ci.getFullTableName() +\n+                \", assuming it was dropped and moving on.\");\n+            txnHandler.markCleaned(ci);\n+            continue;\n+          }\n         } catch (MetaException e) {\n           txnHandler.markCleaned(ci);\n           continue;\n@@ -106,6 +112,12 @@ public void run() {\n         Partition p = null;\n         try {\n           p = resolvePartition(ci);\n+          if (p == null && ci.partName != null) {\n+            LOG.info(\"Unable to find partition \" + ci.getFullPartitionName() +\n+                \", assuming it was dropped and moving on.\");\n+            txnHandler.markCleaned(ci);\n+            continue;\n+          }\n         } catch (Exception e) {\n           txnHandler.markCleaned(ci);\n           continue;",
                "deletions": 0
            },
            {
                "sha": "ffdbb9aacf87610d1c340e97fb715e9c1c25152d",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java",
                "blob_url": "https://github.com/apache/hive/blob/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java",
                "raw_url": "https://github.com/apache/hive/raw/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java",
                "status": "modified",
                "changes": 56,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestCleaner.java?ref=c156b32b49aeb5943e45a68fc7600c9244afb128",
                "patch": "@@ -17,17 +17,17 @@\n  */\n package org.apache.hadoop.hive.ql.txn.compactor;\n \n-import junit.framework.Assert;\n+import org.junit.Assert;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.hive.conf.HiveConf;\n-import org.apache.hadoop.hive.metastore.MetaStoreThread;\n import org.apache.hadoop.hive.metastore.api.*;\n import org.apache.hadoop.hive.metastore.txn.CompactionInfo;\n import org.junit.Test;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n@@ -428,4 +428,56 @@ public void cleanupAfterMajorPartitionCompactionNoBase() throws Exception {\n     Assert.assertEquals(1, paths.size());\n     Assert.assertEquals(\"base_25\", paths.get(0).getName());\n   }\n+\n+  @Test\n+  public void droppedTable() throws Exception {\n+    Table t = newTable(\"default\", \"dt\", false);\n+\n+    addDeltaFile(t, null, 1L, 22L, 22);\n+    addDeltaFile(t, null, 23L, 24L, 2);\n+    addBaseFile(t, null, 25L, 25);\n+\n+    burnThroughTransactions(25);\n+\n+    CompactionRequest rqst = new CompactionRequest(\"default\", \"dt\", CompactionType.MINOR);\n+    txnHandler.compact(rqst);\n+    CompactionInfo ci = txnHandler.findNextToCompact(\"fred\");\n+    txnHandler.markCompacted(ci);\n+    txnHandler.setRunAs(ci.id, System.getProperty(\"user.name\"));\n+\n+    ms.dropTable(\"default\", \"dt\");\n+\n+    startCleaner();\n+\n+    // Check there are no compactions requests left.\n+    ShowCompactResponse rsp = txnHandler.showCompact(new ShowCompactRequest());\n+    Assert.assertEquals(0, rsp.getCompactsSize());\n+  }\n+\n+  @Test\n+  public void droppedPartition() throws Exception {\n+    Table t = newTable(\"default\", \"dp\", true);\n+    Partition p = newPartition(t, \"today\");\n+\n+    addDeltaFile(t, p, 1L, 22L, 22);\n+    addDeltaFile(t, p, 23L, 24L, 2);\n+    addBaseFile(t, p, 25L, 25);\n+\n+    burnThroughTransactions(25);\n+\n+    CompactionRequest rqst = new CompactionRequest(\"default\", \"dp\", CompactionType.MAJOR);\n+    rqst.setPartitionname(\"ds=today\");\n+    txnHandler.compact(rqst);\n+    CompactionInfo ci = txnHandler.findNextToCompact(\"fred\");\n+    txnHandler.markCompacted(ci);\n+    txnHandler.setRunAs(ci.id, System.getProperty(\"user.name\"));\n+\n+    ms.dropPartition(\"default\", \"dp\", Collections.singletonList(\"today\"), true);\n+\n+    startCleaner();\n+\n+    // Check there are no compactions requests left.\n+    ShowCompactResponse rsp = txnHandler.showCompact(new ShowCompactRequest());\n+    Assert.assertEquals(0, rsp.getCompactsSize());\n+  }\n }",
                "deletions": 2
            },
            {
                "sha": "00b13de0992eee9b1aa7144bb2f9ae6549e4e55e",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java",
                "blob_url": "https://github.com/apache/hive/blob/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java",
                "raw_url": "https://github.com/apache/hive/raw/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java",
                "status": "modified",
                "changes": 63,
                "additions": 62,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestInitiator.java?ref=c156b32b49aeb5943e45a68fc7600c9244afb128",
                "patch": "@@ -17,7 +17,7 @@\n  */\n package org.apache.hadoop.hive.ql.txn.compactor;\n \n-import junit.framework.Assert;\n+import org.junit.Assert;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.hive.conf.HiveConf;\n@@ -27,6 +27,7 @@\n import org.junit.Test;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -653,4 +654,64 @@ public void noCompactTableDynamicPartitioning() throws Exception {\n     Assert.assertEquals(0, compacts.size());\n   }\n \n+  @Test\n+  public void dropTable() throws Exception {\n+    Table t = newTable(\"default\", \"dt\", false);\n+\n+    addBaseFile(t, null, 20L, 20);\n+    addDeltaFile(t, null, 21L, 22L, 2);\n+    addDeltaFile(t, null, 23L, 24L, 2);\n+\n+    burnThroughTransactions(23);\n+\n+    long txnid = openTxn();\n+    LockComponent comp = new LockComponent(LockType.SHARED_WRITE, LockLevel.PARTITION, \"default\");\n+    comp.setTablename(\"dt\");\n+    List<LockComponent> components = new ArrayList<LockComponent>(1);\n+    components.add(comp);\n+    LockRequest req = new LockRequest(components, \"me\", \"localhost\");\n+    req.setTxnid(txnid);\n+    LockResponse res = txnHandler.lock(req);\n+    txnHandler.commitTxn(new CommitTxnRequest(txnid));\n+\n+    ms.dropTable(\"default\", \"dt\");\n+\n+    startInitiator();\n+\n+    ShowCompactResponse rsp = txnHandler.showCompact(new ShowCompactRequest());\n+    List<ShowCompactResponseElement> compacts = rsp.getCompacts();\n+    Assert.assertEquals(0, compacts.size());\n+  }\n+\n+  @Test\n+  public void dropPartition() throws Exception {\n+    Table t = newTable(\"default\", \"dp\", true);\n+    Partition p = newPartition(t, \"today\");\n+\n+    addBaseFile(t, p, 20L, 20);\n+    addDeltaFile(t, p, 21L, 22L, 2);\n+    addDeltaFile(t, p, 23L, 24L, 2);\n+\n+    burnThroughTransactions(23);\n+\n+    long txnid = openTxn();\n+    LockComponent comp = new LockComponent(LockType.SHARED_WRITE, LockLevel.PARTITION, \"default\");\n+    comp.setTablename(\"dp\");\n+    comp.setPartitionname(\"ds=today\");\n+    List<LockComponent> components = new ArrayList<LockComponent>(1);\n+    components.add(comp);\n+    LockRequest req = new LockRequest(components, \"me\", \"localhost\");\n+    req.setTxnid(txnid);\n+    LockResponse res = txnHandler.lock(req);\n+    txnHandler.commitTxn(new CommitTxnRequest(txnid));\n+\n+    ms.dropPartition(\"default\", \"dp\", Collections.singletonList(\"today\"), true);\n+\n+    startInitiator();\n+\n+    ShowCompactResponse rsp = txnHandler.showCompact(new ShowCompactRequest());\n+    List<ShowCompactResponseElement> compacts = rsp.getCompacts();\n+    Assert.assertEquals(0, compacts.size());\n+  }\n+\n }",
                "deletions": 1
            },
            {
                "sha": "bebac541265a32d518e634f09b347b4ea4416f00",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java",
                "blob_url": "https://github.com/apache/hive/blob/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java",
                "raw_url": "https://github.com/apache/hive/raw/c156b32b49aeb5943e45a68fc7600c9244afb128/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java",
                "status": "modified",
                "changes": 45,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/txn/compactor/TestWorker.java?ref=c156b32b49aeb5943e45a68fc7600c9244afb128",
                "patch": "@@ -29,6 +29,7 @@\n import java.io.*;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -799,4 +800,48 @@ public void majorWithAborted() throws Exception {\n     Assert.assertEquals(\"delta_23_25\", stat[3].getPath().getName());\n     Assert.assertEquals(\"delta_26_27\", stat[4].getPath().getName());\n   }\n+\n+  @Test\n+  public void droppedTable() throws Exception {\n+    Table t = newTable(\"default\", \"dt\", false);\n+\n+    addDeltaFile(t, null, 1L, 2L, 2);\n+    addDeltaFile(t, null, 3L, 4L, 2);\n+    burnThroughTransactions(4);\n+\n+    CompactionRequest rqst = new CompactionRequest(\"default\", \"dt\", CompactionType.MAJOR);\n+    txnHandler.compact(rqst);\n+\n+    ms.dropTable(\"default\", \"dt\");\n+\n+    startWorker();\n+\n+    ShowCompactResponse rsp = txnHandler.showCompact(new ShowCompactRequest());\n+    List<ShowCompactResponseElement> compacts = rsp.getCompacts();\n+    Assert.assertEquals(0, compacts.size());\n+  }\n+\n+  @Test\n+  public void droppedPartition() throws Exception {\n+    Table t = newTable(\"default\", \"dp\", true);\n+    Partition p = newPartition(t, \"today\");\n+\n+    addBaseFile(t, p, 20L, 20);\n+    addDeltaFile(t, p, 21L, 22L, 2);\n+    addDeltaFile(t, p, 23L, 24L, 2);\n+\n+    burnThroughTransactions(25);\n+\n+    CompactionRequest rqst = new CompactionRequest(\"default\", \"dp\", CompactionType.MINOR);\n+    rqst.setPartitionname(\"ds=today\");\n+    txnHandler.compact(rqst);\n+\n+    ms.dropPartition(\"default\", \"dp\", Collections.singletonList(\"today\"), true);\n+\n+    startWorker();\n+\n+    ShowCompactResponse rsp = txnHandler.showCompact(new ShowCompactRequest());\n+    List<ShowCompactResponseElement> compacts = rsp.getCompacts();\n+    Assert.assertEquals(0, compacts.size());\n+  }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Cleaner.java",
            "CompactorThread.java",
            "Worker.java",
            "Initiator.java"
        ],
        "unit_tests": [
            "TestWorker.java",
            "TestInitiator.java",
            "TestCleaner.java"
        ]
    },
    "hive_cd39b40": {
        "repo": "hive",
        "message": "HIVE-8104 Insert statements against ACID tables NPE when vectorization is on (Alan Gates reviewed by Eugene Koifman)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1625866 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/cd39b40b5bfe4cbf33b97a5498888d99396ca44e",
        "parent": "https://github.com/apache/hive/commit/cb933c10ea021cfa66922f470ec5530983f2028a",
        "bug_id": "hive_cd39b40",
        "file": [
            {
                "sha": "db2ad3f3645315906f196ac08284c7ed7c491985",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/cd39b40b5bfe4cbf33b97a5498888d99396ca44e/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/cd39b40b5bfe4cbf33b97a5498888d99396ca44e/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "status": "modified",
                "changes": 17,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java?ref=cd39b40b5bfe4cbf33b97a5498888d99396ca44e",
                "patch": "@@ -47,7 +47,6 @@\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.hive.common.FileUtils;\n-import org.apache.hadoop.hive.common.JavaUtils;\n import org.apache.hadoop.hive.common.ObjectPair;\n import org.apache.hadoop.hive.common.StatsSetupConst;\n import org.apache.hadoop.hive.common.StatsSetupConst.StatDB;\n@@ -5866,7 +5865,7 @@ private Operator genFileSinkPlan(String dest, QB qb, Operator input)\n       if (!isNonNativeTable) {\n         AcidUtils.Operation acidOp = getAcidType(table_desc.getOutputFileFormatClass());\n         if (acidOp != AcidUtils.Operation.NOT_ACID) {\n-          checkIfAcidAndOverwriting(qb, table_desc);\n+          checkAcidConstraints(qb, table_desc);\n         }\n         ltd = new LoadTableDesc(queryTmpdir,table_desc, dpCtx, acidOp);\n         ltd.setReplace(!qb.getParseInfo().isInsertIntoTable(dest_tab.getDbName(),\n@@ -5973,7 +5972,7 @@ private Operator genFileSinkPlan(String dest, QB qb, Operator input)\n           dest_part.isStoredAsSubDirectories(), conf);\n       AcidUtils.Operation acidOp = getAcidType(table_desc.getOutputFileFormatClass());\n       if (acidOp != AcidUtils.Operation.NOT_ACID) {\n-        checkIfAcidAndOverwriting(qb, table_desc);\n+        checkAcidConstraints(qb, table_desc);\n       }\n       ltd = new LoadTableDesc(queryTmpdir, table_desc, dest_part.getSpec(), acidOp);\n       ltd.setReplace(!qb.getParseInfo().isInsertIntoTable(dest_tab.getDbName(),\n@@ -6233,15 +6232,19 @@ private Operator genFileSinkPlan(String dest, QB qb, Operator input)\n     return output;\n   }\n \n-  // Check if we are overwriting any tables.  If so, throw an exception as that is not allowed\n-  // when using an Acid compliant txn manager and operating on an acid table.\n-  private void checkIfAcidAndOverwriting(QB qb, TableDesc tableDesc) throws SemanticException {\n+  // Check constraints on acid tables.  This includes\n+  // * no insert overwrites\n+  // * no use of vectorization\n+  private void checkAcidConstraints(QB qb, TableDesc tableDesc) throws SemanticException {\n     String tableName = tableDesc.getTableName();\n     if (!qb.getParseInfo().isInsertIntoTable(tableName)) {\n       LOG.debug(\"Couldn't find table \" + tableName + \" in insertIntoTable\");\n       throw new SemanticException(ErrorMsg.NO_INSERT_OVERWRITE_WITH_ACID.getMsg());\n     }\n-\n+    if (conf.getBoolVar(ConfVars.HIVE_VECTORIZATION_ENABLED)) {\n+      LOG.info(\"Turning off vectorization for acid write operation\");\n+      conf.setBoolVar(ConfVars.HIVE_VECTORIZATION_ENABLED, false);\n+    }\n   }\n \n   /**",
                "deletions": 7
            },
            {
                "sha": "9d91d880e07e98962fb2f4a0e23a6b02591f2901",
                "filename": "ql/src/test/queries/clientpositive/acid_vectorization.q",
                "blob_url": "https://github.com/apache/hive/blob/cd39b40b5bfe4cbf33b97a5498888d99396ca44e/ql/src/test/queries/clientpositive/acid_vectorization.q",
                "raw_url": "https://github.com/apache/hive/raw/cd39b40b5bfe4cbf33b97a5498888d99396ca44e/ql/src/test/queries/clientpositive/acid_vectorization.q",
                "status": "added",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/acid_vectorization.q?ref=cd39b40b5bfe4cbf33b97a5498888d99396ca44e",
                "patch": "@@ -0,0 +1,16 @@\n+set hive.support.concurrency=true;\n+set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;\n+set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\n+set hive.enforce.bucketing=true;\n+set hive.exec.dynamic.partition.mode=nonstrict;\n+set hive.vectorized.execution.enabled=true;\n+set hive.mapred.supports.subdirectories=true;\n+\n+CREATE TABLE acid_vectorized(a INT, b STRING) CLUSTERED BY(a) INTO 2 BUCKETS STORED AS ORC;\n+insert into table acid_vectorized select cint, cstring1 from alltypesorc where cint is not null order by cint limit 10;\n+set hive.vectorized.execution.enabled=true;\n+insert into table acid_vectorized values (1, 'bar');\n+set hive.vectorized.execution.enabled=true;\n+update acid_vectorized set b = 'foo' where b = 'bar';\n+set hive.vectorized.execution.enabled=true;\n+delete from acid_vectorized where b = 'foo';",
                "deletions": 0
            },
            {
                "sha": "4a9d19f5529128303fc748cebcef23b8a560b8fa",
                "filename": "ql/src/test/results/clientpositive/acid_vectorization.q.out",
                "blob_url": "https://github.com/apache/hive/blob/cd39b40b5bfe4cbf33b97a5498888d99396ca44e/ql/src/test/results/clientpositive/acid_vectorization.q.out",
                "raw_url": "https://github.com/apache/hive/raw/cd39b40b5bfe4cbf33b97a5498888d99396ca44e/ql/src/test/results/clientpositive/acid_vectorization.q.out",
                "status": "added",
                "changes": 44,
                "additions": 44,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/acid_vectorization.q.out?ref=cd39b40b5bfe4cbf33b97a5498888d99396ca44e",
                "patch": "@@ -0,0 +1,44 @@\n+PREHOOK: query: CREATE TABLE acid_vectorized(a INT, b STRING) CLUSTERED BY(a) INTO 2 BUCKETS STORED AS ORC\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: CREATE TABLE acid_vectorized(a INT, b STRING) CLUSTERED BY(a) INTO 2 BUCKETS STORED AS ORC\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@acid_vectorized\n+PREHOOK: query: insert into table acid_vectorized select cint, cstring1 from alltypesorc where cint is not null order by cint limit 10\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@alltypesorc\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: insert into table acid_vectorized select cint, cstring1 from alltypesorc where cint is not null order by cint limit 10\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@alltypesorc\n+POSTHOOK: Output: default@acid_vectorized\n+POSTHOOK: Lineage: acid_vectorized.a SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cint, type:int, comment:null), ]\n+POSTHOOK: Lineage: acid_vectorized.b SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cstring1, type:string, comment:null), ]\n+PREHOOK: query: insert into table acid_vectorized values (1, 'bar')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@values__tmp__table__1\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: insert into table acid_vectorized values (1, 'bar')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@values__tmp__table__1\n+POSTHOOK: Output: default@acid_vectorized\n+POSTHOOK: Lineage: acid_vectorized.a EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]\n+POSTHOOK: Lineage: acid_vectorized.b SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]\n+PREHOOK: query: update acid_vectorized set b = 'foo' where b = 'bar'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@acid_vectorized\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: update acid_vectorized set b = 'foo' where b = 'bar'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@acid_vectorized\n+POSTHOOK: Output: default@acid_vectorized\n+PREHOOK: query: delete from acid_vectorized where b = 'foo'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@acid_vectorized\n+PREHOOK: Output: default@acid_vectorized\n+POSTHOOK: query: delete from acid_vectorized where b = 'foo'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@acid_vectorized\n+POSTHOOK: Output: default@acid_vectorized",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SemanticAnalyzer.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzer.java"
        ]
    },
    "hive_80aaa1e": {
        "repo": "hive",
        "message": "HIVE-18898: Fix NPEs in HiveMetastore.dropPartition method (Marta Kuczora, reviewed by Sahil Takiar, Alexander Kolbasov and Peter Vary)",
        "commit": "https://github.com/apache/hive/commit/80aaa1e65894400d16df608e48bf838238152ec8",
        "parent": "https://github.com/apache/hive/commit/901a3b3fb04a9d78c64e661ca47e7ebe184abfb8",
        "bug_id": "hive_80aaa1e",
        "file": [
            {
                "sha": "84fac2dfa4f29c1cd67d6a06e1f31e6aad016c75",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/80aaa1e65894400d16df608e48bf838238152ec8/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/80aaa1e65894400d16df608e48bf838238152ec8/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=80aaa1e65894400d16df608e48bf838238152ec8",
                "patch": "@@ -3555,6 +3555,16 @@ private boolean drop_partition_common(RawStore ms, String db_name, String tbl_na\n       boolean isExternalTbl = false;\n       Map<String, String> transactionalListenerResponses = Collections.emptyMap();\n \n+      if (db_name == null) {\n+        throw new MetaException(\"The DB name cannot be null.\");\n+      }\n+      if (tbl_name == null) {\n+        throw new MetaException(\"The table name cannot be null.\");\n+      }\n+      if (part_vals == null) {\n+        throw new MetaException(\"The partition values cannot be null.\");\n+      }\n+\n       try {\n         ms.openTransaction();\n         part = ms.getPartition(db_name, tbl_name, part_vals);",
                "deletions": 0
            },
            {
                "sha": "0e561f82ff28242f1ec62dd0b141b6707506d461",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "blob_url": "https://github.com/apache/hive/blob/80aaa1e65894400d16df608e48bf838238152ec8/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "raw_url": "https://github.com/apache/hive/raw/80aaa1e65894400d16df608e48bf838238152ec8/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java?ref=80aaa1e65894400d16df608e48bf838238152ec8",
                "patch": "@@ -993,13 +993,23 @@ public boolean dropPartition(String db_name, String tbl_name,\n   @Override\n   public boolean dropPartition(String db_name, String tbl_name,\n       List<String> part_vals, PartitionDropOptions options) throws TException {\n+    if (options == null) {\n+      options = PartitionDropOptions.instance();\n+    }\n     return dropPartition(db_name, tbl_name, part_vals, options.deleteData,\n                          options.purgeData? getEnvironmentContextWithIfPurgeSet() : null);\n   }\n \n   public boolean dropPartition(String db_name, String tbl_name, List<String> part_vals,\n       boolean deleteData, EnvironmentContext envContext) throws NoSuchObjectException,\n       MetaException, TException {\n+    if (part_vals != null) {\n+      for (String partVal : part_vals) {\n+        if (partVal == null) {\n+          throw new MetaException(\"The partition value must not be null.\");\n+        }\n+      }\n+    }\n     return client.drop_partition_with_environment_context(db_name, tbl_name, part_vals, deleteData,\n         envContext);\n   }",
                "deletions": 0
            },
            {
                "sha": "d2ba4be7c055ef3ab3ee76ec771066bb41003854",
                "filename": "standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestDropPartitions.java",
                "blob_url": "https://github.com/apache/hive/blob/80aaa1e65894400d16df608e48bf838238152ec8/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestDropPartitions.java",
                "raw_url": "https://github.com/apache/hive/raw/80aaa1e65894400d16df608e48bf838238152ec8/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestDropPartitions.java",
                "status": "modified",
                "changes": 16,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestDropPartitions.java?ref=80aaa1e65894400d16df608e48bf838238152ec8",
                "patch": "@@ -264,18 +264,13 @@ public void testDropPartitionNonExistingPartVals() throws Exception {\n     client.dropPartition(DB_NAME, TABLE_NAME, Lists.newArrayList(\"2017\", \"may\"), false);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testDropPartitionNullVal() throws Exception {\n \n     List<String> partVals = new ArrayList<>();\n     partVals.add(null);\n     partVals.add(null);\n-    try {\n-      client.dropPartition(DB_NAME, TABLE_NAME, partVals, false);\n-      Assert.fail(\"NullPointerException or NoSuchObjectException is expected to be thrown\");\n-    } catch (NullPointerException | NoSuchObjectException e) {\n-      // TODO: Should not throw NPE.\n-    }\n+    client.dropPartition(DB_NAME, TABLE_NAME, partVals, false);\n   }\n \n   @Test(expected = NoSuchObjectException.class)\n@@ -400,10 +395,13 @@ public void testDropPartitionPurgeSetInTable() throws Exception {\n     checkPartitionsAfterDelete(tableName, droppedPartitions, remainingPartitions, true, true);\n   }\n \n-  @Test(expected = NullPointerException.class)\n+  @Test\n   public void testDropPartitionNullPartDropOptions() throws Exception {\n-    // TODO: This should not throw NPE\n+\n     client.dropPartition(DB_NAME, TABLE_NAME, PARTITIONS[0].getValues(), null);\n+    List<Partition> droppedPartitions = Lists.newArrayList(PARTITIONS[0]);\n+    List<Partition> remainingPartitions = Lists.newArrayList(PARTITIONS[1], PARTITIONS[2]);\n+    checkPartitionsAfterDelete(TABLE_NAME, droppedPartitions, remainingPartitions, true, false);\n   }\n \n   // Tests for dropPartition(String db_name, String tbl_name, String name,",
                "deletions": 9
            }
        ],
        "patched_files": [
            "HiveMetaStore.java",
            "HiveMetaStoreClient.java"
        ],
        "unit_tests": [
            "TestHiveMetaStore.java",
            "TestDropPartitions.java"
        ]
    },
    "hive_27f77f0": {
        "repo": "hive",
        "message": "HIVE-7515 Fix NPE in CBO (Laljo John Pullokkaran via Harish Butani)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/branches/cbo@1613482 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/27f77f054baf2e7cd1ea55282fbbb80c055f5aa9",
        "parent": "https://github.com/apache/hive/commit/60be7236a80f57cc23a1a9d0dc8b00062ca5397e",
        "bug_id": "hive_27f77f0",
        "file": [
            {
                "sha": "3da2491f5198f3eed9d119545fec81dc72c7f7dc",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/27f77f054baf2e7cd1ea55282fbbb80c055f5aa9/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/27f77f054baf2e7cd1ea55282fbbb80c055f5aa9/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "status": "modified",
                "changes": 25,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java?ref=27f77f054baf2e7cd1ea55282fbbb80c055f5aa9",
                "patch": "@@ -11831,6 +11831,7 @@ public RelNode apply(RelOptCluster cluster, RelOptSchema relOptSchema, SchemaPlu\n       optiqPreCboPlan = applyPreCBOTransforms(optiqGenPlan, HiveDefaultRelMetadataProvider.INSTANCE);\n       List<RelMetadataProvider> list = Lists.newArrayList();\n       list.add(HiveDefaultRelMetadataProvider.INSTANCE);\n+      RelTraitSet desiredTraits = cluster.traitSetOf(HiveRel.CONVENTION, RelCollationImpl.EMPTY);\n \n       if (!HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVE_CBO_GREEDY_JOIN_ORDER)) {\n         planner.registerMetadataProviders(list);\n@@ -11846,18 +11847,15 @@ public RelNode apply(RelOptCluster cluster, RelOptSchema relOptSchema, SchemaPlu\n           planner.addRule(HivePullUpProjectsAboveJoinRule.LEFT_PROJECT);\n           planner.addRule(HivePullUpProjectsAboveJoinRule.RIGHT_PROJECT);\n           planner.addRule(HiveMergeProjectRule.INSTANCE);\n+        }\n \n-          RelTraitSet desiredTraits = cluster\n-              .traitSetOf(HiveRel.CONVENTION, RelCollationImpl.EMPTY);\n-\n-          RelNode rootRel = optiqPreCboPlan;\n-          if (!optiqPreCboPlan.getTraitSet().equals(desiredTraits)) {\n-            rootRel = planner.changeTraits(optiqPreCboPlan, desiredTraits);\n-          }\n-          planner.setRoot(rootRel);\n-\n-          optiqOptimizedPlan = planner.findBestExp();\n+        RelNode rootRel = optiqPreCboPlan;\n+        if (!optiqPreCboPlan.getTraitSet().equals(desiredTraits)) {\n+          rootRel = planner.changeTraits(optiqPreCboPlan, desiredTraits);\n         }\n+        planner.setRoot(rootRel);\n+\n+        optiqOptimizedPlan = planner.findBestExp();\n       } else {\n         final HepProgram hepPgm = new HepProgramBuilder().addMatchOrder(HepMatchOrder.BOTTOM_UP)\n             .addRuleInstance(new ConvertMultiJoinRule(HiveJoinRel.class))\n@@ -11869,7 +11867,12 @@ public RelNode apply(RelOptCluster cluster, RelOptSchema relOptSchema, SchemaPlu\n         RelMetadataProvider chainedProvider = ChainedRelMetadataProvider.of(list);\n         cluster.setMetadataProvider(new CachingRelMetadataProvider(chainedProvider, hepPlanner));\n \n-        hepPlanner.setRoot(optiqPreCboPlan);\n+        RelNode rootRel = optiqPreCboPlan;\n+        if (!optiqPreCboPlan.getTraitSet().equals(desiredTraits)) {\n+          rootRel = hepPlanner.changeTraits(optiqPreCboPlan, desiredTraits);\n+        }\n+        hepPlanner.setRoot(rootRel);\n+\n         optiqOptimizedPlan = hepPlanner.findBestExp();\n       }\n ",
                "deletions": 11
            }
        ],
        "patched_files": [
            "SemanticAnalyzer.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzer.java"
        ]
    },
    "hive_1f25c46": {
        "repo": "hive",
        "message": "HIVE-19158: Fix NPE in the HiveMetastore add partition tests (Marta Kuczora, reviewed by Peter Vary and Sahil Takiar)",
        "commit": "https://github.com/apache/hive/commit/1f25c46a2bf50483e09c756803d78e078dc37b92",
        "parent": "https://github.com/apache/hive/commit/fb22f576da7383f9cb1d24b66f4090d07b6bde07",
        "bug_id": "hive_1f25c46",
        "file": [
            {
                "sha": "9c88cf9e063f22a5ba60f16c34ce45457b0c9375",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 26,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=1f25c46a2bf50483e09c756803d78e078dc37b92",
                "patch": "@@ -3250,6 +3250,12 @@ public boolean equals(Object obj) {\n                 part.getTableName(), part.toString());\n             throw new MetaException(errorMsg);\n           }\n+          if (part.getValues() == null || part.getValues().isEmpty()) {\n+            throw new MetaException(\"The partition values cannot be null or empty.\");\n+          }\n+          if (part.getValues().contains(null)) {\n+            throw new MetaException(\"Partition value cannot be null.\");\n+          }\n \n           boolean shouldAdd = startAddPartition(ms, part, ifNotExists);\n           if (!shouldAdd) {\n@@ -3410,7 +3416,10 @@ public AddPartitionsResult add_partitions_req(AddPartitionsRequest request)\n     public int add_partitions(final List<Partition> parts) throws MetaException,\n         InvalidObjectException, AlreadyExistsException {\n       startFunction(\"add_partition\");\n-      if (parts.size() == 0) {\n+      if (parts == null) {\n+        throw new MetaException(\"Partition list cannot be null.\");\n+      }\n+      if (parts.isEmpty()) {\n         return 0;\n       }\n \n@@ -3471,6 +3480,9 @@ private int add_partitions_pspec_core(RawStore ms, String catName, String dbName\n                                           boolean ifNotExists)\n         throws TException {\n       boolean success = false;\n+      if (dbName == null || tblName == null) {\n+        throw new MetaException(\"The database and table name cannot be null.\");\n+      }\n       // Ensures that the list doesn't have dups, and keeps track of directories we have created.\n       final Map<PartValEqWrapperLite, Boolean> addedPartitions = new ConcurrentHashMap<>();\n       PartitionSpecProxy partitionSpecProxy = PartitionSpecProxy.Factory.get(partSpecs);\n@@ -3496,12 +3508,18 @@ private int add_partitions_pspec_core(RawStore ms, String catName, String dbName\n           // will be created if the list contains an invalid partition.\n           final Partition part = partitionIterator.getCurrent();\n \n+          if (part.getDbName() == null || part.getTableName() == null) {\n+            throw new MetaException(\"The database and table name must be set in the partition.\");\n+          }\n           if (!part.getTableName().equalsIgnoreCase(tblName) || !part.getDbName().equalsIgnoreCase(dbName)) {\n             String errorMsg = String.format(\n                 \"Partition does not belong to target table %s.%s. It belongs to the table %s.%s : %s\",\n                 dbName, tblName, part.getDbName(), part.getTableName(), part.toString());\n             throw new MetaException(errorMsg);\n           }\n+          if (part.getValues() == null || part.getValues().isEmpty()) {\n+            throw new MetaException(\"The partition values cannot be null or empty.\");\n+          }\n \n           boolean shouldAdd = startAddPartition(ms, part, ifNotExists);\n           if (!shouldAdd) {\n@@ -3733,6 +3751,9 @@ private Partition add_partition_core(final RawStore ms,\n \n         firePreEvent(new PreAddPartitionEvent(tbl, part, this));\n \n+        if (part.getValues() == null || part.getValues().isEmpty()) {\n+          throw new MetaException(\"The partition values cannot be null or empty.\");\n+        }\n         boolean shouldAdd = startAddPartition(ms, part, false);\n         assert shouldAdd; // start would throw if it already existed here\n         boolean madeDir = createLocationForAddedPartition(tbl, part);\n@@ -3789,6 +3810,9 @@ public Partition add_partition_with_environment_context(\n         final Partition part, EnvironmentContext envContext)\n         throws InvalidObjectException, AlreadyExistsException,\n         MetaException {\n+      if (part == null) {\n+        throw new MetaException(\"Partition cannot be null.\");\n+      }\n       startTableFunction(\"add_partition\",\n           part.getCatName(), part.getDbName(), part.getTableName());\n       Partition ret = null;",
                "deletions": 1
            },
            {
                "sha": "4f686a028c9e98ac26564d05e658b19806fca83e",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "blob_url": "https://github.com/apache/hive/blob/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "raw_url": "https://github.com/apache/hive/raw/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java?ref=1f25c46a2bf50483e09c756803d78e078dc37b92",
                "patch": "@@ -649,7 +649,7 @@ public Partition add_partition(Partition new_part) throws TException {\n \n   public Partition add_partition(Partition new_part, EnvironmentContext envContext)\n       throws TException {\n-    if (!new_part.isSetCatName()) new_part.setCatName(getDefaultCatalog(conf));\n+    if (new_part != null && !new_part.isSetCatName()) new_part.setCatName(getDefaultCatalog(conf));\n     Partition p = client.add_partition_with_environment_context(new_part, envContext);\n     return deepCopy(p);\n   }\n@@ -664,6 +664,9 @@ public Partition add_partition(Partition new_part, EnvironmentContext envContext\n    */\n   @Override\n   public int add_partitions(List<Partition> new_parts) throws TException {\n+    if (new_parts == null || new_parts.contains(null)) {\n+      throw new MetaException(\"Partitions cannot be null.\");\n+    }\n     if (new_parts != null && !new_parts.isEmpty() && !new_parts.get(0).isSetCatName()) {\n       final String defaultCat = getDefaultCatalog(conf);\n       new_parts.forEach(p -> p.setCatName(defaultCat));\n@@ -674,6 +677,9 @@ public int add_partitions(List<Partition> new_parts) throws TException {\n   @Override\n   public List<Partition> add_partitions(\n       List<Partition> parts, boolean ifNotExists, boolean needResults) throws TException {\n+    if (parts == null || parts.contains(null)) {\n+      throw new MetaException(\"Partitions cannot be null.\");\n+    }\n     if (parts.isEmpty()) {\n       return needResults ? new ArrayList<>() : null;\n     }\n@@ -688,6 +694,9 @@ public int add_partitions(List<Partition> new_parts) throws TException {\n \n   @Override\n   public int add_partitions_pspec(PartitionSpecProxy partitionSpec) throws TException {\n+    if (partitionSpec == null) {\n+      throw new MetaException(\"PartitionSpec cannot be null.\");\n+    }\n     if (partitionSpec.getCatName() == null) partitionSpec.setCatName(getDefaultCatalog(conf));\n     return client.add_partitions_pspec(partitionSpec.toPartitionSpec());\n   }",
                "deletions": 1
            },
            {
                "sha": "91d790aa6473c4d3941b11c81938b38dea93c135",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/CompositePartitionSpecProxy.java",
                "blob_url": "https://github.com/apache/hive/blob/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/CompositePartitionSpecProxy.java",
                "raw_url": "https://github.com/apache/hive/raw/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/CompositePartitionSpecProxy.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/CompositePartitionSpecProxy.java?ref=1f25c46a2bf50483e09c756803d78e078dc37b92",
                "patch": "@@ -40,7 +40,7 @@\n   private List<PartitionSpecProxy> partitionSpecProxies;\n   private int size = 0;\n \n-  protected CompositePartitionSpecProxy(List<PartitionSpec> partitionSpecs) {\n+  protected CompositePartitionSpecProxy(List<PartitionSpec> partitionSpecs) throws MetaException {\n     this.partitionSpecs = partitionSpecs;\n     if (partitionSpecs.isEmpty()) {\n       catName = null;\n@@ -63,13 +63,13 @@ protected CompositePartitionSpecProxy(List<PartitionSpec> partitionSpecs) {\n   }\n \n   @Deprecated\n-  protected CompositePartitionSpecProxy(String dbName, String tableName, List<PartitionSpec> partitionSpecs) {\n+  protected CompositePartitionSpecProxy(String dbName, String tableName, List<PartitionSpec> partitionSpecs) throws MetaException {\n     this(DEFAULT_CATALOG_NAME, dbName, tableName, partitionSpecs);\n \n   }\n \n   protected CompositePartitionSpecProxy(String catName, String dbName, String tableName,\n-                                        List<PartitionSpec> partitionSpecs) {\n+                                        List<PartitionSpec> partitionSpecs) throws MetaException {\n     this.catName = catName;\n     this.dbName = dbName;\n     this.tableName = tableName;",
                "deletions": 3
            },
            {
                "sha": "585b8fd8b6b29cf4bc563b25f67002042c8cd71f",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionListComposingSpecProxy.java",
                "blob_url": "https://github.com/apache/hive/blob/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionListComposingSpecProxy.java",
                "raw_url": "https://github.com/apache/hive/raw/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionListComposingSpecProxy.java",
                "status": "modified",
                "changes": 22,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionListComposingSpecProxy.java?ref=1f25c46a2bf50483e09c756803d78e078dc37b92",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.hadoop.hive.metastore.api.MetaException;\n import org.apache.hadoop.hive.metastore.api.Partition;\n+import org.apache.hadoop.hive.metastore.api.PartitionListComposingSpec;\n import org.apache.hadoop.hive.metastore.api.PartitionSpec;\n \n import java.util.Arrays;\n@@ -33,9 +34,24 @@\n \n   private PartitionSpec partitionSpec;\n \n-  protected PartitionListComposingSpecProxy(PartitionSpec partitionSpec) {\n+  protected PartitionListComposingSpecProxy(PartitionSpec partitionSpec) throws MetaException {\n     assert partitionSpec.isSetPartitionList()\n         : \"Partition-list should have been set.\";\n+    PartitionListComposingSpec partitionList = partitionSpec.getPartitionList();\n+    if (partitionList == null || partitionList.getPartitions() == null) {\n+      throw new MetaException(\"The partition list cannot be null.\");\n+    }\n+    for (Partition partition : partitionList.getPartitions()) {\n+      if (partition == null) {\n+        throw new MetaException(\"Partition cannot be null.\");\n+      }\n+      if (partition.getValues() == null || partition.getValues().isEmpty()) {\n+        throw new MetaException(\"The partition value list cannot be null or empty.\");\n+      }\n+      if (partition.getValues().contains(null)) {\n+        throw new MetaException(\"Partition value cannot be null.\");\n+      }\n+    }\n     this.partitionSpec = partitionSpec;\n   }\n \n@@ -102,6 +118,10 @@ public void setRootLocation(String newRootPath) throws MetaException {\n       throw new MetaException(\"No common root-path. Can't replace root-path!\");\n     }\n \n+    if (newRootPath == null) {\n+      throw new MetaException(\"Root path cannot be null.\");\n+    }\n+\n     for (Partition partition : partitionSpec.getPartitionList().getPartitions()) {\n       String location = partition.getSd().getLocation();\n       if (location.startsWith(oldRootPath)) {",
                "deletions": 1
            },
            {
                "sha": "18664463633f5de404e4d6b6b0ed3a726082dcf2",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionSpecProxy.java",
                "blob_url": "https://github.com/apache/hive/blob/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionSpecProxy.java",
                "raw_url": "https://github.com/apache/hive/raw/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionSpecProxy.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionSpecProxy.java?ref=1f25c46a2bf50483e09c756803d78e078dc37b92",
                "patch": "@@ -100,8 +100,9 @@\n      * Factory method. Construct PartitionSpecProxy from raw PartitionSpec.\n      * @param partSpec Raw PartitionSpec from the Thrift API.\n      * @return PartitionSpecProxy instance.\n+     * @throws MetaException\n      */\n-    public static PartitionSpecProxy get(PartitionSpec partSpec) {\n+    public static PartitionSpecProxy get(PartitionSpec partSpec) throws MetaException {\n \n       if (partSpec == null) {\n         return null;\n@@ -123,8 +124,9 @@ public static PartitionSpecProxy get(PartitionSpec partSpec) {\n      * Factory method to construct CompositePartitionSpecProxy.\n      * @param partitionSpecs List of raw PartitionSpecs.\n      * @return A CompositePartitionSpecProxy instance.\n+     * @throws MetaException\n      */\n-    public static PartitionSpecProxy get(List<PartitionSpec> partitionSpecs) {\n+    public static PartitionSpecProxy get(List<PartitionSpec> partitionSpecs) throws MetaException {\n       return new CompositePartitionSpecProxy(partitionSpecs);\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "5b462066f4f2f196d4b9154b1b996d6a5053794a",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionSpecWithSharedSDProxy.java",
                "blob_url": "https://github.com/apache/hive/blob/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionSpecWithSharedSDProxy.java",
                "raw_url": "https://github.com/apache/hive/raw/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionSpecWithSharedSDProxy.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/partition/spec/PartitionSpecWithSharedSDProxy.java?ref=1f25c46a2bf50483e09c756803d78e078dc37b92",
                "patch": "@@ -38,8 +38,11 @@\n \n   private PartitionSpec partitionSpec;\n \n-  public PartitionSpecWithSharedSDProxy(PartitionSpec partitionSpec) {\n+  public PartitionSpecWithSharedSDProxy(PartitionSpec partitionSpec) throws MetaException {\n     assert partitionSpec.isSetSharedSDPartitionSpec();\n+    if (partitionSpec.getSharedSDPartitionSpec().getSd() == null) {\n+      throw new MetaException(\"The shared storage descriptor must be set.\");\n+    }\n     this.partitionSpec = partitionSpec;\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "88064d920f30ec1dfa60db51a12baa6848b6c788",
                "filename": "standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestAddPartitions.java",
                "blob_url": "https://github.com/apache/hive/blob/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestAddPartitions.java",
                "raw_url": "https://github.com/apache/hive/raw/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestAddPartitions.java",
                "status": "modified",
                "changes": 71,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestAddPartitions.java?ref=1f25c46a2bf50483e09c756803d78e078dc37b92",
                "patch": "@@ -46,7 +46,6 @@\n import org.apache.hadoop.hive.metastore.client.builder.TableBuilder;\n import org.apache.hadoop.hive.metastore.minihms.AbstractMetaStoreService;\n import org.apache.thrift.TException;\n-import org.apache.thrift.transport.TTransportException;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -512,7 +511,7 @@ public void testAddPartitionTooManyValues() throws Exception {\n   @Test(expected = MetaException.class)\n   public void testAddPartitionNoPartColOnTable() throws Exception {\n \n-    Table origTable = new TableBuilder()\n+    new TableBuilder()\n         .setDbName(DB_NAME)\n         .setTableName(TABLE_NAME)\n         .addCol(\"test_id\", \"int\", \"test col id\")\n@@ -575,27 +574,19 @@ public void testAddPartitionMorePartColInTable() throws Exception {\n     client.add_partition(partition);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionNullPartition() throws Exception {\n-    try {\n-      client.add_partition(null);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: NPE should not be thrown.\n-    }\n+\n+    client.add_partition(null);\n   }\n \n-  @Test\n-  public void testAddPartitionNullValue() throws Exception {\n+  @Test(expected = MetaException.class)\n+  public void testAddPartitionNullValues() throws Exception {\n \n     createTable();\n     Partition partition = buildPartition(DB_NAME, TABLE_NAME, null);\n-    try {\n-      client.add_partition(partition);\n-    } catch (NullPointerException e) {\n-      // TODO: This works different in remote and embedded mode.\n-      // In embedded mode, no exception happens.\n-    }\n+    partition.setValues(null);\n+    client.add_partition(partition);\n   }\n \n   @Test\n@@ -698,14 +689,10 @@ public void testAddPartitionsWithDefaultAttributes() throws Exception {\n     verifyPartitionAttributesDefaultValues(part, table.getSd().getLocation());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionsNullList() throws Exception {\n-    try {\n-      client.add_partitions(null);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: NPE should not be thrown\n-    }\n+\n+    client.add_partitions(null);\n   }\n \n   @Test\n@@ -1159,31 +1146,23 @@ public void testAddPartitionsMorePartColInTable() throws Exception {\n     client.add_partitions(partitions);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionsNullPartition() throws Exception {\n-    try {\n-      List<Partition> partitions = new ArrayList<>();\n-      partitions.add(null);\n-      client.add_partitions(partitions);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (TTransportException | NullPointerException e) {\n-      // TODO: NPE should not be thrown\n-    }\n+\n+    List<Partition> partitions = new ArrayList<>();\n+    partitions.add(null);\n+    client.add_partitions(partitions);\n   }\n \n-  @Test\n-  public void testAddPartitionsNullValue() throws Exception {\n+  @Test(expected = MetaException.class)\n+  public void testAddPartitionsNullValues() throws Exception {\n \n     createTable();\n     Partition partition = buildPartition(DB_NAME, TABLE_NAME, null);\n+    partition.setValues(null);\n     List<Partition> partitions = new ArrayList<>();\n     partitions.add(partition);\n-    try {\n-      client.add_partitions(partitions);\n-    } catch (NullPointerException e) {\n-      // TODO: This works different in remote and embedded mode.\n-      // In embedded mode, no exception happens.\n-    }\n+    client.add_partitions(partitions);\n   }\n \n   @Test\n@@ -1313,9 +1292,9 @@ public void testAddPartsMultipleValues() throws Exception {\n     verifyPartition(table, \"year=2016/month=march\", Lists.newArrayList(\"2016\", \"march\"), 3);\n   }\n \n-  @Test(expected = NullPointerException.class)\n+  @Test(expected = MetaException.class)\n   public void testAddPartsNullList() throws Exception {\n-    // TODO: NPE should not be thrown\n+\n     client.add_partitions(null, false, false);\n   }\n \n@@ -1429,9 +1408,9 @@ public void testAddPartsAlreadyExistsIfExistsTrue() throws Exception {\n     Assert.assertTrue(partitionNames.contains(\"year=2017\"));\n   }\n \n-  @Test(expected = NullPointerException.class)\n+  @Test(expected = MetaException.class)\n   public void testAddPartsNullPartition() throws Exception {\n-    // TODO: NPE should not be thrown\n+\n     List<Partition> partitions = new ArrayList<>();\n     partitions.add(null);\n     client.add_partitions(partitions, false, false);\n@@ -1452,7 +1431,7 @@ private Table createTable(String dbName, String tableName, String location) thro\n \n   private Table createTable(String dbName, String tableName, List<FieldSchema> partCols,\n       String location) throws Exception {\n-    Table table = new TableBuilder()\n+    new TableBuilder()\n         .setDbName(dbName)\n         .setTableName(tableName)\n         .addCol(\"test_id\", \"int\", \"test col id\")",
                "deletions": 46
            },
            {
                "sha": "debcd0eee9d6adde14a7484304ee7d74f1e914fd",
                "filename": "standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestAddPartitionsFromPartSpec.java",
                "blob_url": "https://github.com/apache/hive/blob/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestAddPartitionsFromPartSpec.java",
                "raw_url": "https://github.com/apache/hive/raw/1f25c46a2bf50483e09c756803d78e078dc37b92/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestAddPartitionsFromPartSpec.java",
                "status": "modified",
                "changes": 89,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestAddPartitionsFromPartSpec.java?ref=1f25c46a2bf50483e09c756803d78e078dc37b92",
                "patch": "@@ -27,7 +27,6 @@\n import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n import org.apache.hadoop.hive.metastore.annotation.MetastoreCheckinTest;\n import org.apache.hadoop.hive.metastore.api.AlreadyExistsException;\n-import org.apache.hadoop.hive.metastore.api.Database;\n import org.apache.hadoop.hive.metastore.api.FieldSchema;\n import org.apache.hadoop.hive.metastore.api.InvalidObjectException;\n import org.apache.hadoop.hive.metastore.api.MetaException;\n@@ -45,7 +44,6 @@\n import org.apache.hadoop.hive.metastore.minihms.AbstractMetaStoreService;\n import org.apache.hadoop.hive.metastore.partition.spec.PartitionSpecProxy;\n import org.apache.thrift.TException;\n-import org.apache.thrift.transport.TTransportException;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -170,10 +168,9 @@ public void testAddPartitionSpecsMultipleValues() throws Exception {\n \n   // TODO add tests for partitions in other catalogs\n \n-  @Test(expected = NullPointerException.class)\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionSpecNullSpec() throws Exception {\n \n-    // TODO: NPE should not be thrown.\n     client.add_partitions_pspec(null);\n   }\n \n@@ -186,51 +183,36 @@ public void testAddPartitionSpecEmptyPartList() throws Exception {\n     client.add_partitions_pspec(partitionSpec);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionSpecNullPartList() throws Exception {\n \n     createTable();\n     List<Partition> partitions = null;\n     PartitionSpecProxy partitionSpec = buildPartitionSpec(DB_NAME, TABLE_NAME, null, partitions);\n-    try {\n-      client.add_partitions_pspec(partitionSpec);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (NullPointerException | TTransportException e) {\n-      // TODO: NPE should not be thrown.\n-    }\n+    client.add_partitions_pspec(partitionSpec);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionSpecNoDB() throws Exception {\n \n     createTable();\n     Partition partition = buildPartition(DB_NAME, TABLE_NAME, DEFAULT_YEAR_VALUE);\n     PartitionSpecProxy partitionSpecProxy =\n         buildPartitionSpec(null, TABLE_NAME, null, Lists.newArrayList(partition));\n-    try {\n-      client.add_partitions_pspec(partitionSpecProxy);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (NullPointerException | TTransportException e) {\n-      // TODO: NPE should not be thrown.\n-    }\n+    client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionSpecNoTable() throws Exception {\n \n     createTable();\n     Partition partition = buildPartition(DB_NAME, TABLE_NAME, DEFAULT_YEAR_VALUE);\n     PartitionSpecProxy partitionSpecProxy =\n         buildPartitionSpec(DB_NAME, null, null, Lists.newArrayList(partition));\n-    try {\n-      client.add_partitions_pspec(partitionSpecProxy);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (NullPointerException | TTransportException e) {\n-      // TODO: NPE should not be thrown.\n-    }\n+    client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionSpecNoDBAndTableInPartition() throws Exception {\n \n     createTable();\n@@ -239,12 +221,7 @@ public void testAddPartitionSpecNoDBAndTableInPartition() throws Exception {\n     partition.setTableName(null);\n     PartitionSpecProxy partitionSpecProxy =\n         buildPartitionSpec(DB_NAME, TABLE_NAME, null, Lists.newArrayList(partition));\n-    try {\n-      client.add_partitions_pspec(partitionSpecProxy);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (NullPointerException | TTransportException e) {\n-      // TODO: NPE should not be thrown.\n-    }\n+    client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n   @Test\n@@ -346,7 +323,7 @@ public void testAddPartitionSpecDiffDBName() throws Exception {\n     }\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionSpecNullPart() throws Exception {\n \n     createTable();\n@@ -357,11 +334,7 @@ public void testAddPartitionSpecNullPart() throws Exception {\n     partitions.add(partition2);\n     PartitionSpecProxy partitionSpecProxy =\n         buildPartitionSpec(DB_NAME, TABLE_NAME, null, partitions);\n-    try {\n-      client.add_partitions_pspec(partitionSpecProxy);\n-    } catch (NullPointerException e) {\n-      // TODO: NPE should not be thrown.\n-    }\n+    client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n   @Test\n@@ -457,7 +430,7 @@ public void testAddPartitionSpecChangeRootPathFromNull() throws Exception {\n     client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n-  @Test(expected = NullPointerException.class)\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionSpecChangeRootPathToNull() throws Exception {\n \n     Table table = createTable();\n@@ -467,7 +440,6 @@ public void testAddPartitionSpecChangeRootPathToNull() throws Exception {\n         buildPartitionSpec(DB_NAME, TABLE_NAME, rootPath, Lists.newArrayList(partition));\n     partitionSpecProxy.setRootLocation(null);\n     client.add_partitions_pspec(partitionSpecProxy);\n-    // TODO: NPE should not be thrown.\n   }\n \n   @Test(expected = MetaException.class)\n@@ -596,20 +568,15 @@ public void testAddPartitionSpecNullSd() throws Exception {\n     client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAddPartitionSpecWithSharedSDNullSd() throws Exception {\n \n     createTable();\n     PartitionWithoutSD partition = buildPartitionWithoutSD(Lists.newArrayList(\"2002\"), 0);\n     StorageDescriptor sd = null;\n     PartitionSpecProxy partitionSpecProxy =\n         buildPartitionSpecWithSharedSD(Lists.newArrayList(partition), sd);\n-    try {\n-      client.add_partitions_pspec(partitionSpecProxy);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (NullPointerException | TTransportException e) {\n-      // TODO: NPE should not be thrown.\n-    }\n+    client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n   @Test(expected = MetaException.class)\n@@ -734,7 +701,7 @@ public void testAddPartitionsForViewNullPartSd() throws Exception {\n     Assert.assertNull(part.getSd());\n   }\n \n-  @Test\n+  @Test(expected=MetaException.class)\n   public void testAddPartitionSpecWithSharedSDNoValue() throws Exception {\n \n     Table table = createTable();\n@@ -743,12 +710,7 @@ public void testAddPartitionSpecWithSharedSDNoValue() throws Exception {\n     String location = table.getSd().getLocation() + \"/nullValueTest/\";\n     PartitionSpecProxy partitionSpecProxy =\n         buildPartitionSpecWithSharedSD(Lists.newArrayList(partition), buildSD(location));\n-    try {\n-      client.add_partitions_pspec(partitionSpecProxy);\n-      Assert.fail(\"Exception should have been thrown.\");\n-    } catch (NullPointerException | TTransportException e) {\n-      // TODO: NPE should not be thrown.\n-    }\n+    client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n   @Test(expected=MetaException.class)\n@@ -767,18 +729,15 @@ public void testAddPartitionSpecNoValue() throws Exception {\n     client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n-  @Test\n-  public void testAddPartitionSpecNullValue() throws Exception {\n+  @Test(expected = MetaException.class)\n+  public void testAddPartitionSpecNullValues() throws Exception {\n \n     createTable();\n     Partition partition = buildPartition(DB_NAME, TABLE_NAME, null);\n+    partition.setValues(null);\n     PartitionSpecProxy partitionSpecProxy =\n         buildPartitionSpec(DB_NAME, TABLE_NAME, null, Lists.newArrayList(partition));\n-    try {\n-      client.add_partitions_pspec(partitionSpecProxy);\n-    } catch (NullPointerException e) {\n-      // TODO: NPE should not be thrown\n-    }\n+    client.add_partitions_pspec(partitionSpecProxy);\n   }\n \n   @Test\n@@ -938,7 +897,7 @@ public void testAddPartitionSpecMoreThanThreadCountsOneFails() throws Exception\n \n   // Helper methods\n   private void createDB(String dbName) throws TException {\n-    Database db = new DatabaseBuilder().setName(dbName).create(client, metaStore.getConf());\n+    new DatabaseBuilder().setName(dbName).create(client, metaStore.getConf());\n   }\n \n   private Table createTable() throws Exception {\n@@ -948,7 +907,7 @@ private Table createTable() throws Exception {\n \n   private Table createTable(String dbName, String tableName, List<FieldSchema> partCols,\n       String location) throws Exception {\n-    Table table = new TableBuilder()\n+    new TableBuilder()\n         .setDbName(dbName)\n         .setTableName(tableName)\n         .addCol(\"test_id\", \"int\", \"test col id\")\n@@ -1073,7 +1032,7 @@ private PartitionWithoutSD buildPartitionWithoutSD(List<String> values, int inde\n   }\n \n   private PartitionSpecProxy buildPartitionSpec(String dbName, String tableName, String rootPath,\n-      List<Partition> partitions) {\n+      List<Partition> partitions) throws MetaException {\n \n     PartitionSpec partitionSpec = new PartitionSpec();\n     partitionSpec.setDbName(dbName);\n@@ -1104,7 +1063,7 @@ private StorageDescriptor buildSD(String location) {\n   }\n \n   private PartitionSpecProxy buildPartitionSpecWithSharedSD(List<PartitionWithoutSD> partitions,\n-      StorageDescriptor sd) {\n+      StorageDescriptor sd) throws MetaException {\n \n     PartitionSpec partitionSpec = new PartitionSpec();\n     partitionSpec.setDbName(DB_NAME);",
                "deletions": 65
            }
        ],
        "patched_files": [
            "PartitionSpecWithSharedSDProxy.java",
            "PartitionListComposingSpecProxy.java",
            "HiveMetaStore.java",
            "HiveMetaStoreClient.java",
            "CompositePartitionSpecProxy.java",
            "PartitionSpecProxy.java"
        ],
        "unit_tests": [
            "TestAddPartitionsFromPartSpec.java",
            "TestAddPartitions.java",
            "TestHiveMetaStore.java"
        ]
    },
    "hive_daca6a6": {
        "repo": "hive",
        "message": "HIVE-6841: Vectorized execution throws NPE for partitioning columns with __HIVE_DEFAULT_PARTITION__ (reviewd by Hari, Ashutosh)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1585548 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/daca6a6dedafd862bcf271a8cf117100378d3f57",
        "parent": "https://github.com/apache/hive/commit/fffdf11f26b1a5306af4770c581d0267cdbd7334",
        "bug_id": "hive_daca6a6",
        "file": [
            {
                "sha": "4d5ed40eb19158c7883231849466deef3bfe07c9",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizedRowBatchCtx.java",
                "blob_url": "https://github.com/apache/hive/blob/daca6a6dedafd862bcf271a8cf117100378d3f57/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizedRowBatchCtx.java",
                "raw_url": "https://github.com/apache/hive/raw/daca6a6dedafd862bcf271a8cf117100378d3f57/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizedRowBatchCtx.java",
                "status": "modified",
                "changes": 11,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizedRowBatchCtx.java?ref=daca6a6dedafd862bcf271a8cf117100378d3f57",
                "patch": "@@ -29,6 +29,8 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hive.common.type.Decimal128;\n import org.apache.hadoop.hive.common.type.HiveDecimal;\n@@ -63,7 +65,9 @@\n  * with the partition column.\n  */\n public class VectorizedRowBatchCtx {\n-  \n+\n+  private static final Log LOG = LogFactory.getLog(VectorizedRowBatchCtx.class.getName());\n+\n   // OI for raw row data (EG without partition cols)\n   private StructObjectInspector rawRowOI;\n \n@@ -223,6 +227,9 @@ public void init(Configuration hiveConf, FileSplit split) throws ClassNotFoundEx\n                   convert(partSpec.get(key));              \n           partitionTypes.put(key, TypeInfoFactory.getPrimitiveTypeInfo(partKeyTypes[i]).getPrimitiveCategory());\n         }\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Partition column: name: \" + key + \", value: \" + objectVal + \", type: \" + partitionTypes.get(key));\n+        }\n         partitionValues.put(key, objectVal);\n         partObjectInspectors.add(objectInspector);\n       }\n@@ -263,7 +270,7 @@ public VectorizedRowBatch createVectorizedRowBatch() throws HiveException\n       // in the included list.\n       if ((colsToInclude == null) || colsToInclude.contains(j)\n           || ((partitionValues != null) &&\n-              (partitionValues.get(fieldRefs.get(j).getFieldName()) != null))) {\n+              partitionValues.containsKey(fieldRefs.get(j).getFieldName()))) {\n         ObjectInspector foi = fieldRefs.get(j).getFieldObjectInspector();\n         switch (foi.getCategory()) {\n         case PRIMITIVE: {",
                "deletions": 2
            },
            {
                "sha": "fc1dc6d3b89f31b48131c25df4a04eccd8829ffa",
                "filename": "ql/src/test/queries/clientpositive/vector_non_string_partition.q",
                "blob_url": "https://github.com/apache/hive/blob/daca6a6dedafd862bcf271a8cf117100378d3f57/ql/src/test/queries/clientpositive/vector_non_string_partition.q",
                "raw_url": "https://github.com/apache/hive/raw/daca6a6dedafd862bcf271a8cf117100378d3f57/ql/src/test/queries/clientpositive/vector_non_string_partition.q",
                "status": "added",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/vector_non_string_partition.q?ref=daca6a6dedafd862bcf271a8cf117100378d3f57",
                "patch": "@@ -0,0 +1,17 @@\n+SET hive.vectorized.execution.enabled=true;\n+CREATE TABLE non_string_part(cint INT, cstring1 STRING, cdouble DOUBLE, ctimestamp1 TIMESTAMP) PARTITIONED BY (ctinyint tinyint) STORED AS ORC;\n+SET hive.exec.dynamic.partition.mode=nonstrict;\n+SET hive.exec.dynamic.partition=true;\n+\n+INSERT OVERWRITE TABLE non_string_part PARTITION(ctinyint) SELECT cint, cstring1, cdouble, ctimestamp1, ctinyint fROM alltypesorc \n+WHERE ctinyint IS NULL AND cdouble IS NOT NULL ORDER BY cdouble;\n+\n+SHOW PARTITIONS non_string_part;\n+\n+EXPLAIN SELECT cint, ctinyint FROM non_string_part WHERE cint > 0 ORDER BY cint LIMIT 10;\n+\n+SELECT cint, ctinyint FROM non_string_part WHERE cint > 0 ORDER BY cint LIMIT 10;\n+\n+EXPLAIN SELECT cint, cstring1 FROM non_string_part WHERE cint > 0 ORDER BY cint, cstring1 LIMIT 10;\n+\n+SELECT cint, cstring1 FROM non_string_part WHERE cint > 0 ORDER BY cint, cstring1 LIMIT 10;",
                "deletions": 0
            },
            {
                "sha": "7cd26258255a7e3dfa934f74244da4307d4fed7a",
                "filename": "ql/src/test/results/clientpositive/vector_non_string_partition.q.out",
                "blob_url": "https://github.com/apache/hive/blob/daca6a6dedafd862bcf271a8cf117100378d3f57/ql/src/test/results/clientpositive/vector_non_string_partition.q.out",
                "raw_url": "https://github.com/apache/hive/raw/daca6a6dedafd862bcf271a8cf117100378d3f57/ql/src/test/results/clientpositive/vector_non_string_partition.q.out",
                "status": "added",
                "changes": 180,
                "additions": 180,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/vector_non_string_partition.q.out?ref=daca6a6dedafd862bcf271a8cf117100378d3f57",
                "patch": "@@ -0,0 +1,180 @@\n+PREHOOK: query: CREATE TABLE non_string_part(cint INT, cstring1 STRING, cdouble DOUBLE, ctimestamp1 TIMESTAMP) PARTITIONED BY (ctinyint tinyint) STORED AS ORC\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+POSTHOOK: query: CREATE TABLE non_string_part(cint INT, cstring1 STRING, cdouble DOUBLE, ctimestamp1 TIMESTAMP) PARTITIONED BY (ctinyint tinyint) STORED AS ORC\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@non_string_part\n+PREHOOK: query: INSERT OVERWRITE TABLE non_string_part PARTITION(ctinyint) SELECT cint, cstring1, cdouble, ctimestamp1, ctinyint fROM alltypesorc \n+WHERE ctinyint IS NULL AND cdouble IS NOT NULL ORDER BY cdouble\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@alltypesorc\n+PREHOOK: Output: default@non_string_part\n+POSTHOOK: query: INSERT OVERWRITE TABLE non_string_part PARTITION(ctinyint) SELECT cint, cstring1, cdouble, ctimestamp1, ctinyint fROM alltypesorc \n+WHERE ctinyint IS NULL AND cdouble IS NOT NULL ORDER BY cdouble\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@alltypesorc\n+POSTHOOK: Output: default@non_string_part@ctinyint=__HIVE_DEFAULT_PARTITION__\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cdouble SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cint SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cint, type:int, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cstring1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cstring1, type:string, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).ctimestamp1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:ctimestamp1, type:timestamp, comment:null), ]\n+PREHOOK: query: SHOW PARTITIONS non_string_part\n+PREHOOK: type: SHOWPARTITIONS\n+PREHOOK: Input: default@non_string_part\n+POSTHOOK: query: SHOW PARTITIONS non_string_part\n+POSTHOOK: type: SHOWPARTITIONS\n+POSTHOOK: Input: default@non_string_part\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cdouble SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cint SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cint, type:int, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cstring1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cstring1, type:string, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).ctimestamp1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:ctimestamp1, type:timestamp, comment:null), ]\n+ctinyint=__HIVE_DEFAULT_PARTITION__\n+PREHOOK: query: EXPLAIN SELECT cint, ctinyint FROM non_string_part WHERE cint > 0 ORDER BY cint LIMIT 10\n+PREHOOK: type: QUERY\n+POSTHOOK: query: EXPLAIN SELECT cint, ctinyint FROM non_string_part WHERE cint > 0 ORDER BY cint LIMIT 10\n+POSTHOOK: type: QUERY\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cdouble SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cint SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cint, type:int, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cstring1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cstring1, type:string, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).ctimestamp1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:ctimestamp1, type:timestamp, comment:null), ]\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: non_string_part\n+            Statistics: Num rows: 3073 Data size: 339150 Basic stats: COMPLETE Column stats: NONE\n+            Filter Operator\n+              predicate: (cint > 0) (type: boolean)\n+              Statistics: Num rows: 1024 Data size: 113013 Basic stats: COMPLETE Column stats: NONE\n+              Select Operator\n+                expressions: cint (type: int), ctinyint (type: tinyint)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 1024 Data size: 113013 Basic stats: COMPLETE Column stats: NONE\n+                Reduce Output Operator\n+                  key expressions: _col0 (type: int)\n+                  sort order: +\n+                  Statistics: Num rows: 1024 Data size: 113013 Basic stats: COMPLETE Column stats: NONE\n+                  value expressions: _col0 (type: int), _col1 (type: tinyint)\n+      Execution mode: vectorized\n+      Reduce Operator Tree:\n+        Extract\n+          Statistics: Num rows: 1024 Data size: 113013 Basic stats: COMPLETE Column stats: NONE\n+          Limit\n+            Number of rows: 10\n+            Statistics: Num rows: 10 Data size: 1100 Basic stats: COMPLETE Column stats: NONE\n+            File Output Operator\n+              compressed: false\n+              Statistics: Num rows: 10 Data size: 1100 Basic stats: COMPLETE Column stats: NONE\n+              table:\n+                  input format: org.apache.hadoop.mapred.TextInputFormat\n+                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: 10\n+\n+PREHOOK: query: SELECT cint, ctinyint FROM non_string_part WHERE cint > 0 ORDER BY cint LIMIT 10\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@non_string_part\n+PREHOOK: Input: default@non_string_part@ctinyint=__HIVE_DEFAULT_PARTITION__\n+#### A masked pattern was here ####\n+POSTHOOK: query: SELECT cint, ctinyint FROM non_string_part WHERE cint > 0 ORDER BY cint LIMIT 10\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@non_string_part\n+POSTHOOK: Input: default@non_string_part@ctinyint=__HIVE_DEFAULT_PARTITION__\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cdouble SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cint SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cint, type:int, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cstring1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cstring1, type:string, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).ctimestamp1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:ctimestamp1, type:timestamp, comment:null), ]\n+762\tNULL\n+762\tNULL\n+6981\tNULL\n+6981\tNULL\n+6981\tNULL\n+86028\tNULL\n+504142\tNULL\n+799471\tNULL\n+1248059\tNULL\n+1286921\tNULL\n+PREHOOK: query: EXPLAIN SELECT cint, cstring1 FROM non_string_part WHERE cint > 0 ORDER BY cint, cstring1 LIMIT 10\n+PREHOOK: type: QUERY\n+POSTHOOK: query: EXPLAIN SELECT cint, cstring1 FROM non_string_part WHERE cint > 0 ORDER BY cint, cstring1 LIMIT 10\n+POSTHOOK: type: QUERY\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cdouble SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cint SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cint, type:int, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cstring1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cstring1, type:string, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).ctimestamp1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:ctimestamp1, type:timestamp, comment:null), ]\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: non_string_part\n+            Statistics: Num rows: 3073 Data size: 339150 Basic stats: COMPLETE Column stats: NONE\n+            Filter Operator\n+              predicate: (cint > 0) (type: boolean)\n+              Statistics: Num rows: 1024 Data size: 113013 Basic stats: COMPLETE Column stats: NONE\n+              Select Operator\n+                expressions: cint (type: int), cstring1 (type: string)\n+                outputColumnNames: _col0, _col1\n+                Statistics: Num rows: 1024 Data size: 113013 Basic stats: COMPLETE Column stats: NONE\n+                Reduce Output Operator\n+                  key expressions: _col0 (type: int), _col1 (type: string)\n+                  sort order: ++\n+                  Statistics: Num rows: 1024 Data size: 113013 Basic stats: COMPLETE Column stats: NONE\n+                  value expressions: _col0 (type: int), _col1 (type: string)\n+      Execution mode: vectorized\n+      Reduce Operator Tree:\n+        Extract\n+          Statistics: Num rows: 1024 Data size: 113013 Basic stats: COMPLETE Column stats: NONE\n+          Limit\n+            Number of rows: 10\n+            Statistics: Num rows: 10 Data size: 1100 Basic stats: COMPLETE Column stats: NONE\n+            File Output Operator\n+              compressed: false\n+              Statistics: Num rows: 10 Data size: 1100 Basic stats: COMPLETE Column stats: NONE\n+              table:\n+                  input format: org.apache.hadoop.mapred.TextInputFormat\n+                  output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                  serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: 10\n+\n+PREHOOK: query: SELECT cint, cstring1 FROM non_string_part WHERE cint > 0 ORDER BY cint, cstring1 LIMIT 10\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@non_string_part\n+PREHOOK: Input: default@non_string_part@ctinyint=__HIVE_DEFAULT_PARTITION__\n+#### A masked pattern was here ####\n+POSTHOOK: query: SELECT cint, cstring1 FROM non_string_part WHERE cint > 0 ORDER BY cint, cstring1 LIMIT 10\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@non_string_part\n+POSTHOOK: Input: default@non_string_part@ctinyint=__HIVE_DEFAULT_PARTITION__\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cdouble SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cdouble, type:double, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cint SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cint, type:int, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).cstring1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:cstring1, type:string, comment:null), ]\n+POSTHOOK: Lineage: non_string_part PARTITION(ctinyint=__HIVE_DEFAULT_PARTITION__).ctimestamp1 SIMPLE [(alltypesorc)alltypesorc.FieldSchema(name:ctimestamp1, type:timestamp, comment:null), ]\n+762\t3WsVeqb28VWEEOLI8ail\n+762\t40ks5556SV\n+6981\t1FNNhmiFLGw425NA13g\n+6981\to5mb0QP5Y48Qd4vdB0\n+6981\tsF2CRfgt2K\n+86028\tT2o8XRFAL0HC4ikDQnfoCymw\n+504142\tPlOxor04p5cvVl\n+799471\t2fu24\n+1248059\tUhps6mMh3IfHB3j7yH62K\n+1286921\tODLrXI8882q8LS8",
                "deletions": 0
            }
        ],
        "patched_files": [
            "VectorizedRowBatchCtx.java"
        ],
        "unit_tests": [
            "TestVectorizedRowBatchCtx.java"
        ]
    },
    "hive_4f683fa": {
        "repo": "hive",
        "message": "HIVE-6545 : analyze table throws NPE for non-existent tables. (Ashutosh Chauhan via Harish Butani)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1574257 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/4f683fa1d6f756a5533e94ce95300b14582b8f19",
        "parent": "https://github.com/apache/hive/commit/bda54e30c61b3c8168fdc294ea06695cb8a2771c",
        "bug_id": "hive_4f683fa",
        "file": [
            {
                "sha": "f80dd029bb6b220cd459d06a05de29dabded912a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/4f683fa1d6f756a5533e94ce95300b14582b8f19/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/4f683fa1d6f756a5533e94ce95300b14582b8f19/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java?ref=4f683fa1d6f756a5533e94ce95300b14582b8f19",
                "patch": "@@ -1236,8 +1236,13 @@ public void getMetaData(QB qb, ReadEntity parentInput) throws SemanticException\n             sqAliasToCTEName.put(alias, cte_name);\n             continue;\n           }\n-          throw new SemanticException(ErrorMsg.INVALID_TABLE.getMsg(qb\n-              .getParseInfo().getSrcForAlias(alias)));\n+          ASTNode src = qb.getParseInfo().getSrcForAlias(alias);\n+          if (null != src) {\n+            throw new SemanticException(ErrorMsg.INVALID_TABLE.getMsg(src));\n+          } else {\n+            throw new SemanticException(ErrorMsg.INVALID_TABLE.getMsg(alias));\n+          }\n+\n         }\n \n         // Disallow INSERT INTO on bucketized tables",
                "deletions": 2
            },
            {
                "sha": "78a97019f192e698ab6669c0fa51feb5b3b8c9dd",
                "filename": "ql/src/test/queries/clientnegative/analyze_non_existent_tbl.q",
                "blob_url": "https://github.com/apache/hive/blob/4f683fa1d6f756a5533e94ce95300b14582b8f19/ql/src/test/queries/clientnegative/analyze_non_existent_tbl.q",
                "raw_url": "https://github.com/apache/hive/raw/4f683fa1d6f756a5533e94ce95300b14582b8f19/ql/src/test/queries/clientnegative/analyze_non_existent_tbl.q",
                "status": "added",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientnegative/analyze_non_existent_tbl.q?ref=4f683fa1d6f756a5533e94ce95300b14582b8f19",
                "patch": "@@ -0,0 +1 @@\n+analyze table nonexistent compute statistics;",
                "deletions": 0
            },
            {
                "sha": "ab2ecbed16291746346aaaf5e7e2b55dc064e995",
                "filename": "ql/src/test/results/clientnegative/analyze_non_existent_tbl.q.out",
                "blob_url": "https://github.com/apache/hive/blob/4f683fa1d6f756a5533e94ce95300b14582b8f19/ql/src/test/results/clientnegative/analyze_non_existent_tbl.q.out",
                "raw_url": "https://github.com/apache/hive/raw/4f683fa1d6f756a5533e94ce95300b14582b8f19/ql/src/test/results/clientnegative/analyze_non_existent_tbl.q.out",
                "status": "added",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientnegative/analyze_non_existent_tbl.q.out?ref=4f683fa1d6f756a5533e94ce95300b14582b8f19",
                "patch": "@@ -0,0 +1 @@\n+FAILED: SemanticException [Error 10001]: Table not found nonexistent",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SemanticAnalyzer.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzer.java"
        ]
    },
    "hive_ec0eb1b": {
        "repo": "hive",
        "message": "HIVE-9404 NPE in org.apache.hadoop.hive.metastore.txn.TxnHandler.determineDatabaseProduct() (Eugene Koifman, reviewed by Alan Gates)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1653336 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/ec0eb1b65ff2457537c254d0691bb763677950d6",
        "parent": "https://github.com/apache/hive/commit/66054149b8c3d3cefe7a1d15708f4de9b63901c2",
        "bug_id": "hive_ec0eb1b",
        "file": [
            {
                "sha": "ca6464ee52822f63e34f0e14b55ce100f96a6ff0",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java",
                "blob_url": "https://github.com/apache/hive/blob/ec0eb1b65ff2457537c254d0691bb763677950d6/metastore/src/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java",
                "raw_url": "https://github.com/apache/hive/raw/ec0eb1b65ff2457537c254d0691bb763677950d6/metastore/src/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java?ref=ec0eb1b65ff2457537c254d0691bb763677950d6",
                "patch": "@@ -902,7 +902,7 @@ protected void checkRetryable(Connection conn,\n     // so I've tried to capture the different error messages (there appear to be fewer different\n     // error messages than SQL states).\n     // Derby and newer MySQL driver use the new SQLTransactionRollbackException\n-    if (dbProduct == null) {\n+    if (dbProduct == null && conn != null) {\n       determineDatabaseProduct(conn);\n     }\n     if (e instanceof SQLTransactionRollbackException ||",
                "deletions": 1
            }
        ],
        "patched_files": [
            "TxnHandler.java"
        ],
        "unit_tests": [
            "TestTxnHandler.java"
        ]
    },
    "hive_a1b07ca": {
        "repo": "hive",
        "message": "HIVE-6231: NPE when switching to Tez execution mode after session has been initialized (Patch by Gunther Hagleitner, reviewed by Vikram Dixit K)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1560268 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/a1b07ca59db6f92bb574e136a580f0b2b6ac1490",
        "parent": "https://github.com/apache/hive/commit/45a2616ab18a136b3873fba57c715ece0d09cbbe",
        "bug_id": "hive_a1b07ca",
        "file": [
            {
                "sha": "c6f431c35f37523983a1e6aa40e57cf8abab9cb7",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "blob_url": "https://github.com/apache/hive/blob/a1b07ca59db6f92bb574e136a580f0b2b6ac1490/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "raw_url": "https://github.com/apache/hive/raw/a1b07ca59db6f92bb574e136a580f0b2b6ac1490/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java?ref=a1b07ca59db6f92bb574e136a580f0b2b6ac1490",
                "patch": "@@ -114,7 +114,8 @@ public int execute(DriverContext driverContext) {\n \n       // if we don't have one yet create it.\n       if (session == null) {\n-        ss.setTezSession(new TezSessionState());\n+        session = new TezSessionState();\n+        ss.setTezSession(session);\n       }\n \n       // if it's not running start it.",
                "deletions": 1
            }
        ],
        "patched_files": [
            "TezTask.java"
        ],
        "unit_tests": [
            "TestTezTask.java"
        ]
    },
    "hive_00a116a": {
        "repo": "hive",
        "message": "HIVE-6690 : NPE in tez session state (Sergey Shelukhin, reviewed by Gunther Hagleitner)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1579293 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/00a116a5a4a9e0c5b9c96887dbf1edb5f02e4c09",
        "parent": "https://github.com/apache/hive/commit/4376224ce5f08fff4ddcf32ccee01b41c1c890ad",
        "bug_id": "hive_00a116a",
        "file": [
            {
                "sha": "e20d8bf386c654584999733313536e39e202414f",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/00a116a5a4a9e0c5b9c96887dbf1edb5f02e4c09/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/00a116a5a4a9e0c5b9c96887dbf1edb5f02e4c09/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "status": "modified",
                "changes": 33,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java?ref=00a116a5a4a9e0c5b9c96887dbf1edb5f02e4c09",
                "patch": "@@ -599,6 +599,24 @@ public Path getDefaultDestDir(Configuration conf) throws LoginException, IOExcep\n \n     // we need the directory on hdfs to which we shall put all these files\n     // Use HIVE_JAR_DIRECTORY only if it's set explicitly; otherwise use default directory\n+    String hdfsDirPathStr = getHiveJarDirectory(conf);\n+\n+    String allFiles = auxJars + \",\" + addedJars + \",\" + addedFiles + \",\" + addedArchives;\n+    String[] allFilesArr = allFiles.split(\",\");\n+    for (String file : allFilesArr) {\n+      if (!StringUtils.isNotBlank(file)) {\n+        continue;\n+      }\n+      String hdfsFilePathStr = hdfsDirPathStr + \"/\" + getResourceBaseName(file);\n+      LocalResource localResource = localizeResource(new Path(file),\n+          new Path(hdfsFilePathStr), conf);\n+      tmpResources.add(localResource);\n+    }\n+\n+    return tmpResources;\n+  }\n+\n+  public String getHiveJarDirectory(Configuration conf) throws IOException, LoginException {\n     FileStatus fstatus = null;\n     String hdfsDirPathStr = HiveConf.getVar(conf, HiveConf.ConfVars.HIVE_JAR_DIRECTORY, null);\n     if (hdfsDirPathStr != null) {\n@@ -618,20 +636,7 @@ public Path getDefaultDestDir(Configuration conf) throws LoginException, IOExcep\n       Path destDir = getDefaultDestDir(conf);\n       hdfsDirPathStr = destDir.toString();\n     }\n-\n-    String allFiles = auxJars + \",\" + addedJars + \",\" + addedFiles + \",\" + addedArchives;\n-    String[] allFilesArr = allFiles.split(\",\");\n-    for (String file : allFilesArr) {\n-      if (!StringUtils.isNotBlank(file)) {\n-        continue;\n-      }\n-      String hdfsFilePathStr = hdfsDirPathStr + \"/\" + getResourceBaseName(file);\n-      LocalResource localResource = localizeResource(new Path(file),\n-          new Path(hdfsFilePathStr), conf);\n-      tmpResources.add(localResource);\n-    }\n-\n-    return tmpResources;\n+    return hdfsDirPathStr;\n   }\n \n   // the api that finds the jar being used by this class on disk",
                "deletions": 14
            },
            {
                "sha": "3262ae3ef527059e29e9f2a4af17b1a921ce97e5",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java",
                "blob_url": "https://github.com/apache/hive/blob/00a116a5a4a9e0c5b9c96887dbf1edb5f02e4c09/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java",
                "raw_url": "https://github.com/apache/hive/raw/00a116a5a4a9e0c5b9c96887dbf1edb5f02e4c09/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java?ref=00a116a5a4a9e0c5b9c96887dbf1edb5f02e4c09",
                "patch": "@@ -247,7 +247,7 @@ private Path createTezDir(String sessionId)\n    */\n   private LocalResource createHiveExecLocalResource()\n     throws IOException, LoginException, URISyntaxException {\n-    String hiveJarDir = conf.getVar(HiveConf.ConfVars.HIVE_JAR_DIRECTORY);\n+    String hiveJarDir = utils.getHiveJarDirectory(conf);\n     String currentVersionPathStr = utils.getExecJarPathLocal();\n     String currentJarName = utils.getResourceBaseName(currentVersionPathStr);\n     FileSystem fs = null;",
                "deletions": 1
            }
        ],
        "patched_files": [
            "TezSessionState.java"
        ],
        "unit_tests": [
            "TestTezSessionState.java"
        ]
    },
    "hive_cbd0925": {
        "repo": "hive",
        "message": "HIVE-10801 : 'drop view' fails throwing java.lang.NullPointerException (Hari Subramaniyan, reviewed by Eugene Koifman)",
        "commit": "https://github.com/apache/hive/commit/cbd09253d6178dcd2f5f4043644570769dd52453",
        "parent": "https://github.com/apache/hive/commit/a00bf4f8765bd87bce20166767cc53747f1801a0",
        "bug_id": "hive_cbd0925",
        "file": [
            {
                "sha": "ae03283616b27bf09b0c46822e122ed6f329f2b5",
                "filename": "itests/src/test/resources/testconfiguration.properties",
                "blob_url": "https://github.com/apache/hive/blob/cbd09253d6178dcd2f5f4043644570769dd52453/itests/src/test/resources/testconfiguration.properties",
                "raw_url": "https://github.com/apache/hive/raw/cbd09253d6178dcd2f5f4043644570769dd52453/itests/src/test/resources/testconfiguration.properties",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/src/test/resources/testconfiguration.properties?ref=cbd09253d6178dcd2f5f4043644570769dd52453",
                "patch": "@@ -352,7 +352,8 @@ encrypted.query.files=encryption_join_unencrypted_tbl.q,\\\n   encryption_unencrypted_nonhdfs_external_tables.q \\\n   encryption_move_tbl.q \\\n   encryption_drop_table.q \\\n-  encryption_insert_values.q\n+  encryption_insert_values.q \\\n+  encryption_drop_view.q\n \n beeline.positive.exclude=add_part_exist.q,\\\n   alter1.q,\\",
                "deletions": 1
            },
            {
                "sha": "d81c85696bac1f119380598f2ab16c7c48d73c06",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "blob_url": "https://github.com/apache/hive/blob/cbd09253d6178dcd2f5f4043644570769dd52453/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "raw_url": "https://github.com/apache/hive/raw/cbd09253d6178dcd2f5f4043644570769dd52453/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=cbd09253d6178dcd2f5f4043644570769dd52453",
                "patch": "@@ -1535,7 +1535,8 @@ private boolean drop_table_core(final RawStore ms, final String dbname, final St\n           }\n         }\n \n-        if(!ifPurge) {\n+        // tblPath will be null when tbl is a view. We skip the following if block in that case.\n+        if(tblPath != null && !ifPurge) {\n           String trashInterval = hiveConf.get(\"fs.trash.interval\");\n           boolean trashEnabled = trashInterval != null && trashInterval.length() > 0\n             && Float.parseFloat(trashInterval) > 0;",
                "deletions": 1
            },
            {
                "sha": "911583af08badbb90e64fb00c02a796e54671637",
                "filename": "ql/src/test/queries/clientpositive/encryption_drop_view.q",
                "blob_url": "https://github.com/apache/hive/blob/cbd09253d6178dcd2f5f4043644570769dd52453/ql/src/test/queries/clientpositive/encryption_drop_view.q",
                "raw_url": "https://github.com/apache/hive/raw/cbd09253d6178dcd2f5f4043644570769dd52453/ql/src/test/queries/clientpositive/encryption_drop_view.q",
                "status": "added",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/encryption_drop_view.q?ref=cbd09253d6178dcd2f5f4043644570769dd52453",
                "patch": "@@ -0,0 +1,6 @@\n+DROP TABLE IF EXISTS dve_encrypted_table PURGE;\n+CREATE TABLE dve_encrypted_table (key INT, value STRING) LOCATION '${hiveconf:hive.metastore.warehouse.dir}/default/dve_encrypted_table';\n+CRYPTO CREATE_KEY --keyName key_128 --bitLength 128;\n+CRYPTO CREATE_ZONE --keyName key_128 --path ${hiveconf:hive.metastore.warehouse.dir}/default/dve_encrypted_table;\n+CREATE VIEW dve_view AS SELECT * FROM dve_encrypted_table;\n+DROP VIEW dve_view;",
                "deletions": 0
            },
            {
                "sha": "7958b391d863d6662796f36db4b31a31242af4d5",
                "filename": "ql/src/test/results/clientpositive/encrypted/encryption_drop_view.q.out",
                "blob_url": "https://github.com/apache/hive/blob/cbd09253d6178dcd2f5f4043644570769dd52453/ql/src/test/results/clientpositive/encrypted/encryption_drop_view.q.out",
                "raw_url": "https://github.com/apache/hive/raw/cbd09253d6178dcd2f5f4043644570769dd52453/ql/src/test/results/clientpositive/encrypted/encryption_drop_view.q.out",
                "status": "added",
                "changes": 34,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/encrypted/encryption_drop_view.q.out?ref=cbd09253d6178dcd2f5f4043644570769dd52453",
                "patch": "@@ -0,0 +1,34 @@\n+PREHOOK: query: DROP TABLE IF EXISTS dve_encrypted_table PURGE\n+PREHOOK: type: DROPTABLE\n+POSTHOOK: query: DROP TABLE IF EXISTS dve_encrypted_table PURGE\n+POSTHOOK: type: DROPTABLE\n+#### A masked pattern was here ####\n+PREHOOK: type: CREATETABLE\n+#### A masked pattern was here ####\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@dve_encrypted_table\n+#### A masked pattern was here ####\n+POSTHOOK: type: CREATETABLE\n+#### A masked pattern was here ####\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@dve_encrypted_table\n+Encryption key created: 'key_128'\n+Encryption zone created: '/build/ql/test/data/warehouse/default/dve_encrypted_table' using key: 'key_128'\n+PREHOOK: query: CREATE VIEW dve_view AS SELECT * FROM dve_encrypted_table\n+PREHOOK: type: CREATEVIEW\n+PREHOOK: Input: default@dve_encrypted_table\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@dve_view\n+POSTHOOK: query: CREATE VIEW dve_view AS SELECT * FROM dve_encrypted_table\n+POSTHOOK: type: CREATEVIEW\n+POSTHOOK: Input: default@dve_encrypted_table\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@dve_view\n+PREHOOK: query: DROP VIEW dve_view\n+PREHOOK: type: DROPVIEW\n+PREHOOK: Input: default@dve_view\n+PREHOOK: Output: default@dve_view\n+POSTHOOK: query: DROP VIEW dve_view\n+POSTHOOK: type: DROPVIEW\n+POSTHOOK: Input: default@dve_view\n+POSTHOOK: Output: default@dve_view",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HiveMetaStore.java"
        ],
        "unit_tests": [
            "TestHiveMetaStore.java"
        ]
    },
    "hive_042b2ef": {
        "repo": "hive",
        "message": "HIVE-20249 : LLAP IO: NPE during refCount decrement (Prasanth Jayachandran, reviewed by Sergey Shelukhin)",
        "commit": "https://github.com/apache/hive/commit/042b2ef7df6af8b93adeb936d94c4079153467ff",
        "parent": "https://github.com/apache/hive/commit/d4b7b93e27a8a28dde8f4584d883faba86f0203c",
        "bug_id": "hive_042b2ef",
        "file": [
            {
                "sha": "013f3538b4b75f62f9e4c40ddbdd9d1b0b8ed8b1",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java",
                "blob_url": "https://github.com/apache/hive/blob/042b2ef7df6af8b93adeb936d94c4079153467ff/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java",
                "raw_url": "https://github.com/apache/hive/raw/042b2ef7df6af8b93adeb936d94c4079153467ff/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java",
                "status": "modified",
                "changes": 26,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/BuddyAllocator.java?ref=042b2ef7df6af8b93adeb936d94c4079153467ff",
                "patch": "@@ -1352,21 +1352,23 @@ private int getNextFreeListItem(int offset) {\n \n     public void deallocate(LlapAllocatorBuffer buffer, boolean isAfterMove) {\n       assert data != null;\n-      int pos = buffer.byteBuffer.position();\n-      // Note: this is called by someone who has ensured the buffer is not going to be moved.\n-      int headerIx = pos >>> minAllocLog2;\n-      int freeListIx = freeListFromAllocSize(buffer.allocSize);\n-      if (assertsEnabled && !isAfterMove) {\n-        LlapAllocatorBuffer buf = buffers[headerIx];\n-        if (buf != buffer) {\n-          failWithLog(arenaIx + \":\" + headerIx + \" => \"\n+      if (buffer != null && buffer.byteBuffer != null) {\n+        int pos = buffer.byteBuffer.position();\n+        // Note: this is called by someone who has ensured the buffer is not going to be moved.\n+        int headerIx = pos >>> minAllocLog2;\n+        int freeListIx = freeListFromAllocSize(buffer.allocSize);\n+        if (assertsEnabled && !isAfterMove) {\n+          LlapAllocatorBuffer buf = buffers[headerIx];\n+          if (buf != buffer) {\n+            failWithLog(arenaIx + \":\" + headerIx + \" => \"\n               + toDebugString(buffer) + \", \" + toDebugString(buf));\n+          }\n+          assertBufferLooksValid(freeListFromHeader(headers[headerIx]), buf, arenaIx, headerIx);\n+          checkHeader(headerIx, freeListIx, true);\n         }\n-        assertBufferLooksValid(freeListFromHeader(headers[headerIx]), buf, arenaIx, headerIx);\n-        checkHeader(headerIx, freeListIx, true);\n+        buffers[headerIx] = null;\n+        addToFreeListWithMerge(headerIx, freeListIx, buffer, CasLog.Src.DEALLOC);\n       }\n-      buffers[headerIx] = null;\n-      addToFreeListWithMerge(headerIx, freeListIx, buffer, CasLog.Src.DEALLOC);\n     }\n \n     private void addToFreeListWithMerge(int headerIx, int freeListIx,",
                "deletions": 12
            },
            {
                "sha": "e012d7dbf9f5dab0bcc88c8cf680dc6ffd8baf71",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/042b2ef7df6af8b93adeb936d94c4079153467ff/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/042b2ef7df6af8b93adeb936d94c4079153467ff/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheImpl.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheImpl.java?ref=042b2ef7df6af8b93adeb936d94c4079153467ff",
                "patch": "@@ -20,6 +20,7 @@\n import org.apache.orc.impl.RecordReaderUtils;\n \n import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -40,6 +41,7 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Function;\n+import com.google.common.base.Joiner;\n \n public class LowLevelCacheImpl implements LowLevelCache, BufferUsageManager, LlapIoDebugDump {\n   private static final int DEFAULT_CLEANUP_INTERVAL = 600;\n@@ -457,6 +459,10 @@ public void debugDumpShort(StringBuilder sb) {\n       try {\n         int fileLocked = 0, fileUnlocked = 0, fileEvicted = 0, fileMoving = 0;\n         if (e.getValue().getCache().isEmpty()) continue;\n+        List<LlapDataBuffer> lockedBufs = null;\n+        if (LlapIoImpl.LOCKING_LOGGER.isTraceEnabled()) {\n+          lockedBufs = new ArrayList<>();\n+        }\n         for (Map.Entry<Long, LlapDataBuffer> e2 : e.getValue().getCache().entrySet()) {\n           int newRc = e2.getValue().tryIncRef();\n           if (newRc < 0) {\n@@ -470,6 +476,9 @@ public void debugDumpShort(StringBuilder sb) {\n           try {\n             if (newRc > 1) { // We hold one refcount.\n               ++fileLocked;\n+              if (lockedBufs != null) {\n+                lockedBufs.add(e2.getValue());\n+              }\n             } else {\n               ++fileUnlocked;\n             }\n@@ -483,6 +492,9 @@ public void debugDumpShort(StringBuilder sb) {\n         allMoving += fileMoving;\n         sb.append(\"\\n  file \" + e.getKey() + \": \" + fileLocked + \" locked, \" + fileUnlocked\n             + \" unlocked, \" + fileEvicted + \" evicted, \" + fileMoving + \" being moved\");\n+        if (fileLocked > 0 && LlapIoImpl.LOCKING_LOGGER.isTraceEnabled()) {\n+          LlapIoImpl.LOCKING_LOGGER.trace(\"locked-buffers: {}\", lockedBufs);\n+        }\n       } finally {\n         e.getValue().decRef();\n       }",
                "deletions": 0
            },
            {
                "sha": "759594aea33b468abcf58a4930a8081176c98a51",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/encoded/EncodedReaderImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/042b2ef7df6af8b93adeb936d94c4079153467ff/ql/src/java/org/apache/hadoop/hive/ql/io/orc/encoded/EncodedReaderImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/042b2ef7df6af8b93adeb936d94c4079153467ff/ql/src/java/org/apache/hadoop/hive/ql/io/orc/encoded/EncodedReaderImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/encoded/EncodedReaderImpl.java?ref=042b2ef7df6af8b93adeb936d94c4079153467ff",
                "patch": "@@ -1964,7 +1964,9 @@ public void readIndexStreams(OrcIndex index, StripeInformation stripe,\n     } finally {\n       // Release the unreleased buffers. See class comment about refcounts.\n       try {\n-        releaseInitialRefcounts(toRead.next);\n+        if (toRead != null) {\n+          releaseInitialRefcounts(toRead.next);\n+        }\n         releaseBuffers(toRelease.keySet(), true);\n       } catch (Throwable t) {\n         if (!hasError) throw new IOException(t);",
                "deletions": 1
            }
        ],
        "patched_files": [
            "BuddyAllocator.java",
            "LowLevelCacheImpl.java",
            "EncodedReaderImpl.java"
        ],
        "unit_tests": [
            "TestEncodedReaderImpl.java",
            "TestLowLevelCacheImpl.java",
            "TestBuddyAllocator.java"
        ]
    },
    "hive_348a592": {
        "repo": "hive",
        "message": "HIVE-16114 : NullPointerException in TezSessionPoolManager when getting the session (Zhihua Deng, reviewed by Sergey Shelukhin)",
        "commit": "https://github.com/apache/hive/commit/348a592154be07045bd58ff23134dc78e95de16a",
        "parent": "https://github.com/apache/hive/commit/bfe930c5c3ee03180a0d78aaa12f83af13973b44",
        "bug_id": "hive_348a592",
        "file": [
            {
                "sha": "8f459473b0ab2b788abdd7806fe8ac1eaa82944a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionPoolManager.java",
                "blob_url": "https://github.com/apache/hive/blob/348a592154be07045bd58ff23134dc78e95de16a/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionPoolManager.java",
                "raw_url": "https://github.com/apache/hive/raw/348a592154be07045bd58ff23134dc78e95de16a/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionPoolManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionPoolManager.java?ref=348a592154be07045bd58ff23134dc78e95de16a",
                "patch": "@@ -480,7 +480,7 @@ protected TezSessionPoolSession createSession(String sessionId) {\n    */\n   private static boolean canWorkWithSameSession(TezSessionState session, HiveConf conf)\n        throws HiveException {\n-    if (session == null || conf == null) {\n+    if (session == null || conf == null || !session.isOpen()) {\n       return false;\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "6c8bf29ce2ad6097824a931205e0dc4d9a337910",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "blob_url": "https://github.com/apache/hive/blob/348a592154be07045bd58ff23134dc78e95de16a/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "raw_url": "https://github.com/apache/hive/raw/348a592154be07045bd58ff23134dc78e95de16a/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java?ref=348a592154be07045bd58ff23134dc78e95de16a",
                "patch": "@@ -137,6 +137,9 @@ public int execute(DriverContext driverContext) {\n       // Need to remove this static hack. But this is the way currently to get a session.\n       SessionState ss = SessionState.get();\n       session = ss.getTezSession();\n+      if (session != null && !session.isOpen()) {\n+        LOG.warn(\"The session: \" + session + \" has not been opened\");\n+      }\n       session = TezSessionPoolManager.getInstance().getSession(\n           session, conf, false, getWork().getLlapMode());\n       ss.setTezSession(session);",
                "deletions": 0
            },
            {
                "sha": "2d1c687a4e9cc86622a682f9a2099b5a7d061de4",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/exec/tez/SampleTezSessionState.java",
                "blob_url": "https://github.com/apache/hive/blob/348a592154be07045bd58ff23134dc78e95de16a/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/SampleTezSessionState.java",
                "raw_url": "https://github.com/apache/hive/raw/348a592154be07045bd58ff23134dc78e95de16a/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/SampleTezSessionState.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/SampleTezSessionState.java?ref=348a592154be07045bd58ff23134dc78e95de16a",
                "patch": "@@ -65,6 +65,7 @@ public void open(HiveConf conf) throws IOException, LoginException, URISyntaxExc\n     UserGroupInformation ugi = Utils.getUGI();\n     user = ugi.getShortUserName();\n     this.doAsEnabled = conf.getBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS);\n+    setOpen(true);\n   }\n \n   @Override",
                "deletions": 0
            }
        ],
        "patched_files": [
            "TezTask.java"
        ],
        "unit_tests": [
            "TestTezTask.java"
        ]
    },
    "hive_c20b086": {
        "repo": "hive",
        "message": "HIVE-11015 : LLAP: MiniTez tez_smb_main, tez_bmj_schema_evolution fail with NPE (Sergey Shelukhin, reviewed by Vikram Dixit K)",
        "commit": "https://github.com/apache/hive/commit/c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
        "parent": "https://github.com/apache/hive/commit/638597af7f11f22a3896df7a2ba19bbba7e699f8",
        "bug_id": "hive_c20b086",
        "file": [
            {
                "sha": "1a125cbb98fb03ebf451a8bd5b7e39e26f5ec26e",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/daemon/impl/TaskRunnerCallable.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/llap-server/src/java/org/apache/hadoop/hive/llap/daemon/impl/TaskRunnerCallable.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/llap-server/src/java/org/apache/hadoop/hive/llap/daemon/impl/TaskRunnerCallable.java",
                "status": "modified",
                "changes": 62,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/daemon/impl/TaskRunnerCallable.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -38,6 +38,7 @@\n import org.apache.hadoop.hive.llap.metrics.LlapDaemonExecutorMetrics;\n import org.apache.hadoop.hive.llap.protocol.LlapTaskUmbilicalProtocol;\n import org.apache.hadoop.hive.llap.tezplugins.Converters;\n+import org.apache.hadoop.hive.ql.io.IOContextMap;\n import org.apache.hadoop.ipc.RPC;\n import org.apache.hadoop.net.NetUtils;\n import org.apache.hadoop.security.Credentials;\n@@ -198,38 +199,43 @@ public LlapTaskUmbilicalProtocol run() throws Exception {\n         new AtomicLong(0),\n         request.getContainerIdString());\n \n-    synchronized (this) {\n-      if (shouldRunTask) {\n-        taskRunner = new TezTaskRunner2(conf, taskUgi, fragmentInfo.getLocalDirs(),\n-            taskSpec,\n-            request.getAppAttemptNumber(),\n-            serviceConsumerMetadata, envMap, startedInputsMap, taskReporter, executor,\n-            objectRegistry,\n-            pid,\n-            executionContext, memoryAvailable);\n-      }\n-    }\n-    if (taskRunner == null) {\n-      LOG.info(\"Not starting task {} since it was killed earlier\", taskSpec.getTaskAttemptID());\n-      return new TaskRunner2Result(EndReason.KILL_REQUESTED, null, false);\n-    }\n-\n+    String attemptId = fragmentInfo.getFragmentIdentifierString();\n+    IOContextMap.setThreadAttemptId(attemptId);\n     try {\n-      TaskRunner2Result result = taskRunner.run();\n-      if (result.isContainerShutdownRequested()) {\n-        LOG.warn(\"Unexpected container shutdown requested while running task. Ignoring\");\n+      synchronized (this) {\n+        if (shouldRunTask) {\n+          taskRunner = new TezTaskRunner2(conf, taskUgi, fragmentInfo.getLocalDirs(),\n+              taskSpec,\n+              request.getAppAttemptNumber(),\n+              serviceConsumerMetadata, envMap, startedInputsMap, taskReporter, executor,\n+              objectRegistry,\n+              pid,\n+              executionContext, memoryAvailable);\n+        }\n+      }\n+      if (taskRunner == null) {\n+        LOG.info(\"Not starting task {} since it was killed earlier\", taskSpec.getTaskAttemptID());\n+        return new TaskRunner2Result(EndReason.KILL_REQUESTED, null, false);\n       }\n-      isCompleted.set(true);\n-      return result;\n \n-    } finally {\n-      // TODO Fix UGI and FS Handling. Closing UGI here causes some errors right now.\n-      //        FileSystem.closeAllForUGI(taskUgi);\n-      LOG.info(\"ExecutionTime for Container: \" + request.getContainerIdString() + \"=\" +\n-          runtimeWatch.stop().elapsedMillis());\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"canFinish post completion: \" + taskSpec.getTaskAttemptID() + \": \" + canFinish());\n+      try {\n+        TaskRunner2Result result = taskRunner.run();\n+        if (result.isContainerShutdownRequested()) {\n+          LOG.warn(\"Unexpected container shutdown requested while running task. Ignoring\");\n+        }\n+        isCompleted.set(true);\n+        return result;\n+      } finally {\n+        // TODO Fix UGI and FS Handling. Closing UGI here causes some errors right now.\n+        //        FileSystem.closeAllForUGI(taskUgi);\n+        LOG.info(\"ExecutionTime for Container: \" + request.getContainerIdString() + \"=\" +\n+            runtimeWatch.stop().elapsedMillis());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"canFinish post completion: \" + taskSpec.getTaskAttemptID() + \": \" + canFinish());\n+        }\n       }\n+    } finally {\n+      IOContextMap.clearThreadAttempt(attemptId);\n     }\n   }\n ",
                "deletions": 28
            },
            {
                "sha": "0e7e79dc864a63aaf69e37d90dcf41cc33826739",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/FilterOperator.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/exec/FilterOperator.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/exec/FilterOperator.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/FilterOperator.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.io.IOContext;\n+import org.apache.hadoop.hive.ql.io.IOContextMap;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n import org.apache.hadoop.hive.ql.plan.FilterDesc;\n import org.apache.hadoop.hive.ql.plan.api.OperatorType;\n@@ -61,7 +62,7 @@ protected void initializeOp(Configuration hconf) throws HiveException {\n       }\n \n       conditionInspector = null;\n-      ioContext = IOContext.get(hconf);\n+      ioContext = IOContextMap.get(hconf);\n     } catch (Throwable e) {\n       throw new HiveException(e);\n     }",
                "deletions": 1
            },
            {
                "sha": "fc5abfef583e9a2c4c6a0866b30421b724dd8415",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecMapperContext.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecMapperContext.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecMapperContext.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecMapperContext.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -22,8 +22,8 @@\n import org.apache.commons.logging.Log;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.hive.ql.exec.FetchOperator;\n-import org.apache.hadoop.hive.ql.exec.Utilities;\n import org.apache.hadoop.hive.ql.io.IOContext;\n+import org.apache.hadoop.hive.ql.io.IOContextMap;\n import org.apache.hadoop.hive.ql.plan.MapredLocalWork;\n import org.apache.hadoop.mapred.JobConf;\n \n@@ -63,11 +63,11 @@ public void setCurrentBigBucketFile(String currentBigBucketFile) {\n \n   public ExecMapperContext(JobConf jc) {\n     this.jc = jc;\n-    ioCxt = IOContext.get(jc);\n+    ioCxt = IOContextMap.get(jc);\n   }\n \n   public void clear() {\n-    IOContext.clear();\n+    IOContextMap.clear();\n     ioCxt = null;\n   }\n \n@@ -151,8 +151,4 @@ public void setFetchOperators(Map<String, FetchOperator> fetchOperators) {\n   public IOContext getIoCxt() {\n     return ioCxt;\n   }\n-\n-  public void setIoCxt(IOContext ioCxt) {\n-    this.ioCxt = ioCxt;\n-  }\n }",
                "deletions": 7
            },
            {
                "sha": "e205f1ebaf14434a92957538d443c33678987a6e",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/MapRecordProcessor.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/MapRecordProcessor.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/MapRecordProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/MapRecordProcessor.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -201,7 +201,7 @@ public Object call() {\n             mergeMapOp.setChildren(jconf);\n \n             DummyStoreOperator dummyOp = getJoinParentOp(mergeMapOp);\n-\t          mapOp.setConnectedOperators(mergeMapWork.getTag(), dummyOp);\n+            mapOp.setConnectedOperators(mergeMapWork.getTag(), dummyOp);\n \n             mergeMapOp.passExecContext(new ExecMapperContext(jconf));\n             mergeMapOp.initializeLocalWork(jconf);",
                "deletions": 1
            },
            {
                "sha": "738ca9ce32b4b7a6bfd5f239fd12aa989724c67f",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/HiveContextAwareRecordReader.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/io/HiveContextAwareRecordReader.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/io/HiveContextAwareRecordReader.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/HiveContextAwareRecordReader.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -162,7 +162,7 @@ protected void updateIOContext()\n   }\n \n   public IOContext getIOContext() {\n-    return IOContext.get(jobConf);\n+    return IOContextMap.get(jobConf);\n   }\n \n   private void initIOContext(long startPos, boolean isBlockPointer,",
                "deletions": 1
            },
            {
                "sha": "0d9b6445f143e9abab18cad0124eda11d6538be4",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/HiveInputFormat.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/io/HiveInputFormat.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/io/HiveInputFormat.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/HiveInputFormat.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -264,7 +264,6 @@ public static boolean canWrapForLlap(Class<? extends InputFormat> inputFormatCla\n \n   public RecordReader getRecordReader(InputSplit split, JobConf job,\n       Reporter reporter) throws IOException {\n-\n     HiveInputSplit hsplit = (HiveInputSplit) split;\n \n     InputSplit inputSplit = hsplit.getInputSplit();",
                "deletions": 1
            },
            {
                "sha": "019db8db83af4bbb3c9f2209cae52669befe6695",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/IOContext.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/io/IOContext.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/io/IOContext.java",
                "status": "modified",
                "changes": 55,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/IOContext.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -18,13 +18,7 @@\n \n package org.apache.hadoop.hive.ql.io;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.hive.conf.HiveConf;\n-import org.apache.hadoop.hive.ql.exec.Utilities;\n \n /**\n  * IOContext basically contains the position information of the current\n@@ -35,55 +29,6 @@\n  * nextBlockStart refers the end of current row and beginning of next row.\n  */\n public class IOContext {\n-  public static final String DEFAULT_CONTEXT = \"\";\n-\n-  private static final ThreadLocal<Map<String,IOContext>> threadLocalMap\n-      = new ThreadLocal<Map<String,IOContext>>() {\n-    @Override\n-    protected synchronized Map<String,IOContext> initialValue() {\n-      Map<String, IOContext> map = new HashMap<String, IOContext>(); \n-      map.put(DEFAULT_CONTEXT, new IOContext());\n-      return map;\n-    }\n-  };\n-\n-  /**\n-   * Spark uses this thread local TODO: no it doesn't?\n-   */\n-  private static final ThreadLocal<IOContext> threadLocal = new ThreadLocal<IOContext>(){\n-    @Override\n-    protected IOContext initialValue() { return new IOContext(); }\n-  };\n-\n-  private static IOContext get() {\n-      return IOContext.threadLocalMap.get().get(DEFAULT_CONTEXT);\n-  }\n-\n-  /**\n-   * Tez and MR use this map but are single threaded per JVM thus no synchronization is required.\n-   */\n-  private static final Map<String, IOContext> inputNameIOContextMap = new HashMap<String, IOContext>();\n-\n-  public static IOContext get(Configuration conf) {\n-    String inputName = conf.get(Utilities.INPUT_NAME);\n-    Map<String, IOContext> inputNameIOContextMap = threadLocalMap.get();\n-\n-    if (inputName == null) {\n-      inputName = DEFAULT_CONTEXT;\n-    }\n-\n-    if (!inputNameIOContextMap.containsKey(inputName)) {\n-      IOContext ioContext = new IOContext();\n-      inputNameIOContextMap.put(inputName, ioContext);\n-    }\n-\n-    return inputNameIOContextMap.get(inputName);\n-  }\n-\n-  public static void clear() {\n-      threadLocal.remove();\n-  }\n-\n   private long currentBlockStart;\n   private long nextBlockStart;\n   private long currentRow;",
                "deletions": 55
            },
            {
                "sha": "57e7e2a910023ce2f4a700c2a3dc6b7654fb489a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/IOContextMap.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/io/IOContextMap.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/java/org/apache/hadoop/hive/ql/io/IOContextMap.java",
                "status": "added",
                "changes": 117,
                "additions": 117,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/IOContextMap.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -0,0 +1,117 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.io;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+\n+/**\n+ * There used to be a global static map of IOContext-s inside IOContext (Hive style!).\n+ * Unfortunately, due to variety of factors, this is now a giant fustercluck.\n+ * 1) Spark doesn't apparently care about multiple inputs, but has multiple threads, so one\n+ *    threadlocal IOContext was added for it.\n+ * 2) LLAP has lots of tasks in the same process so globals no longer cut it either.\n+ * 3) However, Tez runs 2+ threads for one task (e.g. TezTaskEventRouter and TezChild), and these\n+ *    surprisingly enough need the same context. Tez, in its infinite wisdom, doesn't allow them\n+ *    to communicate in any way nor provide any shared context.\n+ * So we are going to...\n+ * 1) Keep the good ol' global map for MR and Tez. Hive style!\n+ * 2) Keep the threadlocal for Spark. Hive style!\n+ * 3) Create inheritable (TADA!) threadlocal with attemptId, only set in LLAP; that will propagate\n+ *    to all the little Tez threads, and we will keep a map per attempt. Hive style squared!\n+ */\n+public class IOContextMap {\n+  public static final String DEFAULT_CONTEXT = \"\";\n+  private static final Log LOG = LogFactory.getLog(IOContextMap.class);\n+\n+  /** Used for Tez and MR */\n+  private static final ConcurrentHashMap<String, IOContext> globalMap =\n+      new ConcurrentHashMap<String, IOContext>();\n+\n+  /** Used for Spark */\n+  private static final ThreadLocal<IOContext> sparkThreadLocal = new ThreadLocal<IOContext>(){\n+    @Override\n+    protected IOContext initialValue() { return new IOContext(); }\n+  };\n+\n+  /** Used for Tez+LLAP */\n+  private static final ConcurrentHashMap<String, ConcurrentHashMap<String, IOContext>> attemptMap =\n+      new ConcurrentHashMap<String, ConcurrentHashMap<String, IOContext>>();\n+\n+  // TODO: This depends on Tez creating separate threads, as it does now. If that changes, some\n+  //       other way to propagate/find out attempt ID would be needed (e.g. see TEZ-2587).\n+  private static final InheritableThreadLocal<String> threadAttemptId =\n+      new InheritableThreadLocal<>();\n+\n+  public static void setThreadAttemptId(String attemptId) {\n+    assert attemptId != null;\n+    threadAttemptId.set(attemptId);\n+  }\n+\n+  public static void clearThreadAttempt(String attemptId) {\n+    assert attemptId != null;\n+    String attemptIdCheck = threadAttemptId.get();\n+    if (!attemptId.equals(attemptIdCheck)) {\n+      LOG.error(\"Thread is clearing context for \"\n+          + attemptId + \", but \" + attemptIdCheck + \" expected\");\n+    }\n+    attemptMap.remove(attemptId);\n+    threadAttemptId.remove();\n+  }\n+\n+  public static IOContext get(Configuration conf) {\n+    if (HiveConf.getVar(conf, HiveConf.ConfVars.HIVE_EXECUTION_ENGINE).equals(\"spark\")) {\n+      return sparkThreadLocal.get();\n+    }\n+    String inputName = conf.get(Utilities.INPUT_NAME);\n+    if (inputName == null) {\n+      inputName = DEFAULT_CONTEXT;\n+    }\n+    String attemptId = threadAttemptId.get();\n+    ConcurrentHashMap<String, IOContext> map;\n+    if (attemptId == null) {\n+      map = globalMap;\n+    } else {\n+      map = attemptMap.get(attemptId);\n+      if (map == null) {\n+        map = new ConcurrentHashMap<>();\n+        ConcurrentHashMap<String, IOContext> oldMap = attemptMap.putIfAbsent(attemptId, map);\n+        if (oldMap != null) {\n+          map = oldMap;\n+        }\n+      }\n+    }\n+\n+    IOContext ioContext = map.get(inputName);\n+    if (ioContext != null) return ioContext;\n+    ioContext = new IOContext();\n+    IOContext oldContext = map.putIfAbsent(inputName, ioContext);\n+    return (oldContext == null) ? ioContext : oldContext;\n+  }\n+\n+  public static void clear() {\n+    sparkThreadLocal.remove();\n+    globalMap.clear();\n+  }\n+}",
                "deletions": 0
            },
            {
                "sha": "c3a36c021127935790a90eff7136b91b0cb77e4e",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/exec/TestOperators.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.Driver;\n import org.apache.hadoop.hive.ql.io.IOContext;\n+import org.apache.hadoop.hive.ql.io.IOContextMap;\n import org.apache.hadoop.hive.ql.parse.TypeCheckProcFactory;\n import org.apache.hadoop.hive.ql.plan.CollectDesc;\n import org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc;\n@@ -272,7 +273,7 @@ public void testMapOperator() throws Throwable {\n       JobConf hconf = new JobConf(TestOperators.class);\n       HiveConf.setVar(hconf, HiveConf.ConfVars.HADOOPMAPFILENAME,\n           \"hdfs:///testDir/testFile\");\n-      IOContext.get(hconf).setInputPath(\n+      IOContextMap.get(hconf).setInputPath(\n           new Path(\"hdfs:///testDir/testFile\"));\n \n       // initialize pathToAliases",
                "deletions": 1
            },
            {
                "sha": "9dc4f5b8ad64b75111f5d39a008e697ba5bb18e9",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/io/TestHiveBinarySearchRecordReader.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/test/org/apache/hadoop/hive/ql/io/TestHiveBinarySearchRecordReader.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/test/org/apache/hadoop/hive/ql/io/TestHiveBinarySearchRecordReader.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/io/TestHiveBinarySearchRecordReader.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -116,7 +116,7 @@ public void doClose() throws IOException {\n \n   private void resetIOContext() {\n     conf.set(Utilities.INPUT_NAME, \"TestHiveBinarySearchRecordReader\");\n-    ioContext = IOContext.get(conf);\n+    ioContext = IOContextMap.get(conf);\n     ioContext.setUseSorted(false);\n     ioContext.setBinarySearching(false);\n     ioContext.setEndBinarySearch(false);",
                "deletions": 1
            },
            {
                "sha": "dad55360d5f72bd1b645283b59a2c515bc2040ec",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/io/TestIOContextMap.java",
                "blob_url": "https://github.com/apache/hive/blob/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/test/org/apache/hadoop/hive/ql/io/TestIOContextMap.java",
                "raw_url": "https://github.com/apache/hive/raw/c20b0866824ff5ae7ce8ca0e2ae236a5af908917/ql/src/test/org/apache/hadoop/hive/ql/io/TestIOContextMap.java",
                "status": "added",
                "changes": 207,
                "additions": 207,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/io/TestIOContextMap.java?ref=c20b0866824ff5ae7ce8ca0e2ae236a5af908917",
                "patch": "@@ -0,0 +1,207 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.io;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.exec.Utilities;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Sets;\n+\n+public class TestIOContextMap {\n+\n+  private void syncThreadStart(final CountDownLatch cdlIn, final CountDownLatch cdlOut) {\n+    cdlIn.countDown();\n+    try {\n+      cdlOut.await();\n+    } catch (InterruptedException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @Test\n+  public void testMRTezGlobalMap() throws Exception {\n+    // Tests concurrent modification, and that results are the same per input across threads\n+    // but different between inputs.\n+    final int THREAD_COUNT = 2, ITER_COUNT = 1000;\n+    final AtomicInteger countdown = new AtomicInteger(ITER_COUNT);\n+    final CountDownLatch phase1End = new CountDownLatch(THREAD_COUNT);\n+    final IOContext[] results = new IOContext[ITER_COUNT];\n+    ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);\n+    final CountDownLatch cdlIn = new CountDownLatch(THREAD_COUNT), cdlOut = new CountDownLatch(1);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    FutureTask<Void>[] tasks = new FutureTask[THREAD_COUNT];\n+    for (int i = 0; i < tasks.length; ++i) {\n+      tasks[i] = new FutureTask<Void>(new Callable<Void>() {\n+        public Void call() throws Exception {\n+          Configuration conf = new Configuration();\n+          syncThreadStart(cdlIn, cdlOut);\n+          // Phase 1 - create objects.\n+          while (true) {\n+            int nextIx = countdown.decrementAndGet();\n+            if (nextIx < 0) break;\n+            conf.set(Utilities.INPUT_NAME, \"Input \" + nextIx);\n+            results[nextIx] = IOContextMap.get(conf);\n+            if (nextIx == 0) break;\n+          }\n+          phase1End.countDown();\n+          phase1End.await();\n+          // Phase 2 - verify we get the expected objects created by all threads.\n+          for (int i = 0; i < ITER_COUNT; ++i) {\n+            conf.set(Utilities.INPUT_NAME, \"Input \" + i);\n+            IOContext ctx = IOContextMap.get(conf);\n+            assertSame(results[i], ctx);\n+          }\n+          return null;\n+        }\n+      });\n+      executor.execute(tasks[i]);\n+    }\n+\n+    cdlIn.await(); // Wait for all threads to be ready.\n+    cdlOut.countDown(); // Release them at the same time.\n+    for (int i = 0; i < tasks.length; ++i) {\n+      tasks[i].get();\n+    }\n+    Set<IOContext> resultSet = Sets.newIdentityHashSet();\n+    for (int i = 0; i < results.length; ++i) {\n+      assertTrue(resultSet.add(results[i])); // All the objects must be different.\n+    }\n+  }\n+\n+  @Test\n+  public void testTezLlapAttemptMap() throws Exception {\n+    // Tests that different threads get the same object per attempt per input, and different\n+    // between attempts/inputs; that attempt is inherited between threads; and that clearing\n+    // the attempt produces a different result.\n+    final int THREAD_COUNT = 2, ITER_COUNT = 1000, ATTEMPT_COUNT = 3;\n+    final AtomicInteger countdown = new AtomicInteger(ITER_COUNT);\n+    final IOContext[] results = new IOContext[ITER_COUNT * ATTEMPT_COUNT];\n+    ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);\n+    final CountDownLatch cdlIn = new CountDownLatch(THREAD_COUNT), cdlOut = new CountDownLatch(1);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    FutureTask<Void>[] tasks = new FutureTask[THREAD_COUNT];\n+    for (int i = 0; i < tasks.length; ++i) {\n+      tasks[i] = new FutureTask<Void>(new Callable<Void>() {\n+        public Void call() throws Exception {\n+          final Configuration conf = new Configuration(), conf2 = new Configuration();\n+          syncThreadStart(cdlIn, cdlOut);\n+          while (true) {\n+            int nextIx = countdown.decrementAndGet();\n+            if (nextIx < 0) break;\n+            String input1 = \"Input \" + nextIx;\n+            conf.set(Utilities.INPUT_NAME, input1);\n+            for (int j = 0; j < ATTEMPT_COUNT; ++j) {\n+              String attemptId = \"Attempt \" + nextIx + \":\" + j;\n+              IOContextMap.setThreadAttemptId(attemptId);\n+              final IOContext r1 = results[(nextIx * ATTEMPT_COUNT) + j] = IOContextMap.get(conf);\n+              // For some attempts, check inheritance.\n+              if ((nextIx % (ITER_COUNT / 10)) == 0) {\n+                String input2 = \"Input2 \" + nextIx;\n+                conf2.set(Utilities.INPUT_NAME, input2);\n+                final AtomicReference<IOContext> ref2 = new AtomicReference<>();\n+                Thread t = new Thread(new Runnable() {\n+                  public void run() {\n+                    assertSame(r1, IOContextMap.get(conf));\n+                    ref2.set(IOContextMap.get(conf2));\n+                  }\n+                });\n+                t.start();\n+                t.join();\n+                assertSame(ref2.get(), IOContextMap.get(conf2));\n+              }\n+              // Don't clear the attempt ID, or the stuff will be cleared.\n+            }\n+            if (nextIx == 0) break;\n+          }\n+          return null;\n+        }\n+      });\n+      executor.execute(tasks[i]);\n+    }\n+\n+    cdlIn.await(); // Wait for all threads to be ready.\n+    cdlOut.countDown(); // Release them at the same time.\n+    for (int i = 0; i < tasks.length; ++i) {\n+      tasks[i].get();\n+    }\n+    Configuration conf = new Configuration();\n+    Set<IOContext> resultSet = Sets.newIdentityHashSet();\n+    for (int i = 0; i < ITER_COUNT; ++i) {\n+      conf.set(Utilities.INPUT_NAME, \"Input \" + i);\n+      for (int j = 0; j < ATTEMPT_COUNT; ++j) {\n+        String attemptId = \"Attempt \" + i + \":\" + j;\n+        IOContext result = results[(i * ATTEMPT_COUNT) + j];\n+        assertTrue(resultSet.add(result)); // All the objects must be different.\n+        IOContextMap.setThreadAttemptId(attemptId);\n+        assertSame(result, IOContextMap.get(conf)); // Matching result for attemptId + input.\n+        IOContextMap.clearThreadAttempt(attemptId);\n+        IOContextMap.setThreadAttemptId(attemptId);\n+        assertNotSame(result, IOContextMap.get(conf)); // Different result after clearing.\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testSparkThreadLocal() throws Exception {\n+    // Test that input name does not change IOContext returned, and that each thread gets its own.\n+    final Configuration conf1 = new Configuration();\n+    conf1.set(HiveConf.ConfVars.HIVE_EXECUTION_ENGINE.varname, \"spark\");\n+    final Configuration conf2 = new Configuration(conf1);\n+    conf2.set(Utilities.INPUT_NAME, \"Other input\");\n+    final int THREAD_COUNT = 2;\n+    ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);\n+    final CountDownLatch cdlIn = new CountDownLatch(THREAD_COUNT), cdlOut = new CountDownLatch(1);\n+    @SuppressWarnings(\"unchecked\")\n+    FutureTask<IOContext>[] tasks = new FutureTask[THREAD_COUNT];\n+    for (int i = 0; i < tasks.length; ++i) {\n+      tasks[i] = new FutureTask<IOContext>(new Callable<IOContext>() {\n+        public IOContext call() throws Exception {\n+          syncThreadStart(cdlIn, cdlOut);\n+          IOContext c1 = IOContextMap.get(conf1), c2 = IOContextMap.get(conf2);\n+          assertSame(c1, c2);\n+          return c1;\n+        }\n+      });\n+      executor.execute(tasks[i]);\n+    }\n+\n+    cdlIn.await(); // Wait for all threads to be ready.\n+    cdlOut.countDown(); // Release them at the same time.\n+    Set<IOContext> results = Sets.newIdentityHashSet();\n+    for (int i = 0; i < tasks.length; ++i) {\n+      assertTrue(results.add(tasks[i].get())); // All the objects must be different.\n+    }\n+  }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HiveInputFormat.java",
            "FilterOperator.java",
            "ExecMapperContext.java",
            "HiveContextAwareRecordReader.java",
            "TaskRunnerCallable.java",
            "IOContextMap.java",
            "MapRecordProcessor.java",
            "IOContext.java"
        ],
        "unit_tests": [
            "TestIOContextMap.java",
            "TestOperators.java",
            "TestHiveBinarySearchRecordReader.java"
        ]
    },
    "hive_735ba0d": {
        "repo": "hive",
        "message": "HIVE-10816: NPE in ExecDriver::handleSampling when submitted via child JVM (Rui reviewed by Xuefu)",
        "commit": "https://github.com/apache/hive/commit/735ba0d872ddfbe0470497576904d721350548a4",
        "parent": "https://github.com/apache/hive/commit/8f9d964007f668f11084d55fe5608294edb3434f",
        "bug_id": "hive_735ba0d",
        "file": [
            {
                "sha": "dc1b601b732dc9cda814c41da6ae42d1179d4f56",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/PartitionKeySampler.java",
                "blob_url": "https://github.com/apache/hive/blob/735ba0d872ddfbe0470497576904d721350548a4/ql/src/java/org/apache/hadoop/hive/ql/exec/PartitionKeySampler.java",
                "raw_url": "https://github.com/apache/hive/raw/735ba0d872ddfbe0470497576904d721350548a4/ql/src/java/org/apache/hadoop/hive/ql/exec/PartitionKeySampler.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/PartitionKeySampler.java?ref=735ba0d872ddfbe0470497576904d721350548a4",
                "patch": "@@ -112,7 +112,7 @@ public void collect(HiveKey key, Object value) throws IOException {\n     return partitionKeys;\n   }\n \n-  public void writePartitionKeys(Path path, HiveConf conf, JobConf job) throws IOException {\n+  public void writePartitionKeys(Path path, JobConf job) throws IOException {\n     byte[][] partitionKeys = getPartitionKeys(job.getNumReduceTasks());\n     int numPartition = partitionKeys.length + 1;\n     if (numPartition != job.getNumReduceTasks()) {\n@@ -133,10 +133,11 @@ public void writePartitionKeys(Path path, HiveConf conf, JobConf job) throws IOE\n   }\n \n   // random sampling\n-  public static FetchOperator createSampler(FetchWork work, HiveConf conf, JobConf job,\n+  public static FetchOperator createSampler(FetchWork work, JobConf job,\n       Operator<?> operator) throws HiveException {\n-    int sampleNum = conf.getIntVar(HiveConf.ConfVars.HIVESAMPLINGNUMBERFORORDERBY);\n-    float samplePercent = conf.getFloatVar(HiveConf.ConfVars.HIVESAMPLINGPERCENTFORORDERBY);\n+    int sampleNum = HiveConf.getIntVar(job, HiveConf.ConfVars.HIVESAMPLINGNUMBERFORORDERBY);\n+    float samplePercent =\n+        HiveConf.getFloatVar(job, HiveConf.ConfVars.HIVESAMPLINGPERCENTFORORDERBY);\n     if (samplePercent < 0.0 || samplePercent > 1.0) {\n       throw new IllegalArgumentException(\"Percentile value must be within the range of 0 to 1.\");\n     }",
                "deletions": 4
            },
            {
                "sha": "a2cf71281e8cd960e5f297638005da010b74d6ae",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java",
                "blob_url": "https://github.com/apache/hive/blob/735ba0d872ddfbe0470497576904d721350548a4/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java",
                "raw_url": "https://github.com/apache/hive/raw/735ba0d872ddfbe0470497576904d721350548a4/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/mr/ExecDriver.java?ref=735ba0d872ddfbe0470497576904d721350548a4",
                "patch": "@@ -376,7 +376,7 @@ public int execute(DriverContext driverContext) {\n \n       if (mWork.getSamplingType() > 0 && rWork != null && job.getNumReduceTasks() > 1) {\n         try {\n-          handleSampling(driverContext, mWork, job, conf);\n+          handleSampling(ctx, mWork, job);\n           job.setPartitionerClass(HiveTotalOrderPartitioner.class);\n         } catch (IllegalStateException e) {\n           console.printInfo(\"Not enough sampling data.. Rolling back to single reducer task\");\n@@ -496,7 +496,7 @@ public int execute(DriverContext driverContext) {\n     return (returnVal);\n   }\n \n-  private void handleSampling(DriverContext context, MapWork mWork, JobConf job, HiveConf conf)\n+  private void handleSampling(Context context, MapWork mWork, JobConf job)\n       throws Exception {\n     assert mWork.getAliasToWork().keySet().size() == 1;\n \n@@ -512,7 +512,7 @@ private void handleSampling(DriverContext context, MapWork mWork, JobConf job, H\n       inputPaths.add(new Path(path));\n     }\n \n-    Path tmpPath = context.getCtx().getExternalTmpPath(inputPaths.get(0));\n+    Path tmpPath = context.getExternalTmpPath(inputPaths.get(0));\n     Path partitionFile = new Path(tmpPath, \".partitions\");\n     ShimLoader.getHadoopShims().setTotalOrderPartitionFile(job, partitionFile);\n     PartitionKeySampler sampler = new PartitionKeySampler();\n@@ -541,9 +541,9 @@ private void handleSampling(DriverContext context, MapWork mWork, JobConf job, H\n       fetchWork.setSource(ts);\n \n       // random sampling\n-      FetchOperator fetcher = PartitionKeySampler.createSampler(fetchWork, conf, job, ts);\n+      FetchOperator fetcher = PartitionKeySampler.createSampler(fetchWork, job, ts);\n       try {\n-        ts.initialize(conf, new ObjectInspector[]{fetcher.getOutputObjectInspector()});\n+        ts.initialize(job, new ObjectInspector[]{fetcher.getOutputObjectInspector()});\n         OperatorUtils.setChildrenCollector(ts.getChildOperators(), sampler);\n         while (fetcher.pushRow()) { }\n       } finally {\n@@ -552,7 +552,7 @@ private void handleSampling(DriverContext context, MapWork mWork, JobConf job, H\n     } else {\n       throw new IllegalArgumentException(\"Invalid sampling type \" + mWork.getSamplingType());\n     }\n-    sampler.writePartitionKeys(partitionFile, conf, job);\n+    sampler.writePartitionKeys(partitionFile, job);\n   }\n \n   /**",
                "deletions": 6
            }
        ],
        "patched_files": [
            "ExecDriver.java",
            "PartitionKeySampler.java"
        ],
        "unit_tests": [
            "TestExecDriver.java",
            "TestPartitionKeySampler.java"
        ]
    },
    "hive_1ae7c0e": {
        "repo": "hive",
        "message": "HIVE-10333 : LLAP: NPE due to failure to find position (Sergey Shelukhin)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/branches/llap@1673608 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/1ae7c0e9045057a48c9debc829e4a0afa9aefd1a",
        "parent": "https://github.com/apache/hive/commit/d533b3935dc973a6e14d444ae1492f043a5353c0",
        "bug_id": "hive_1ae7c0e",
        "file": [
            {
                "sha": "db65259a718219530558ac9b0ff362ca7edf8012",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/InStream.java",
                "blob_url": "https://github.com/apache/hive/blob/1ae7c0e9045057a48c9debc829e4a0afa9aefd1a/ql/src/java/org/apache/hadoop/hive/ql/io/orc/InStream.java",
                "raw_url": "https://github.com/apache/hive/raw/1ae7c0e9045057a48c9debc829e4a0afa9aefd1a/ql/src/java/org/apache/hadoop/hive/ql/io/orc/InStream.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/InStream.java?ref=1ae7c0e9045057a48c9debc829e4a0afa9aefd1a",
                "patch": "@@ -697,9 +697,10 @@ public static DiskRangeList uncompressStream(long fileId, long baseOffset, DiskR\n           toDecompress = new ArrayList<ProcCacheChunk>();\n           toRelease = (zcr == null) ? null : new ArrayList<ByteBuffer>();\n         }\n-        lastCached = addOneCompressionBuffer(bc, zcr, bufferSize,\n+        ProcCacheChunk newCached = addOneCompressionBuffer(bc, zcr, bufferSize,\n             cache, streamBuffer.cacheBuffers, toDecompress, toRelease);\n-        next = (lastCached != null) ? lastCached.next : null;\n+        lastCached = (newCached == null) ? lastCached : newCached;\n+        next = (newCached != null) ? newCached.next : null;\n         currentCOffset = (next != null) ? next.getOffset() : -1;\n       }\n ",
                "deletions": 2
            }
        ],
        "patched_files": [
            "InStream.java"
        ],
        "unit_tests": [
            "TestInStream.java"
        ]
    },
    "hive_89e51e4": {
        "repo": "hive",
        "message": "HIVE-7891: Fix NPE in split generation on Tez 0.5 (Gunther Hagleitner)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/branches/tez@1619739 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/89e51e4eb47c6b505bce1928d89c0e7e2975431c",
        "parent": "https://github.com/apache/hive/commit/0754c55b488ba2795b61f1778ec617bd5c88aac8",
        "bug_id": "hive_89e51e4",
        "file": [
            {
                "sha": "78ea21dbf88ef3c5337b97a31b1422bc1202c374",
                "filename": "itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java",
                "blob_url": "https://github.com/apache/hive/blob/89e51e4eb47c6b505bce1928d89c0e7e2975431c/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java",
                "raw_url": "https://github.com/apache/hive/raw/89e51e4eb47c6b505bce1928d89c0e7e2975431c/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java",
                "status": "modified",
                "changes": 25,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java?ref=89e51e4eb47c6b505bce1928d89c0e7e2975431c",
                "patch": "@@ -43,7 +43,6 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Deque;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n@@ -64,19 +63,17 @@\n import org.apache.hadoop.hbase.zookeeper.MiniZooKeeperCluster;\n import org.apache.hadoop.hive.cli.CliDriver;\n import org.apache.hadoop.hive.cli.CliSessionState;\n+import org.apache.hadoop.hive.common.io.CachingPrintStream;\n import org.apache.hadoop.hive.common.io.DigestPrintStream;\n import org.apache.hadoop.hive.common.io.SortAndDigestPrintStream;\n import org.apache.hadoop.hive.common.io.SortPrintStream;\n-import org.apache.hadoop.hive.common.io.CachingPrintStream;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n import org.apache.hadoop.hive.metastore.MetaStoreUtils;\n import org.apache.hadoop.hive.metastore.api.Index;\n import org.apache.hadoop.hive.ql.exec.FunctionRegistry;\n import org.apache.hadoop.hive.ql.exec.Task;\n import org.apache.hadoop.hive.ql.exec.Utilities;\n-import org.apache.hadoop.hive.ql.exec.vector.util.AllVectorTypesRecord;\n-import org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat;\n import org.apache.hadoop.hive.ql.lockmgr.zookeeper.ZooKeeperHiveLockManager;\n import org.apache.hadoop.hive.ql.metadata.Hive;\n import org.apache.hadoop.hive.ql.metadata.Table;\n@@ -87,22 +84,14 @@\n import org.apache.hadoop.hive.ql.parse.SemanticAnalyzer;\n import org.apache.hadoop.hive.ql.parse.SemanticException;\n import org.apache.hadoop.hive.ql.session.SessionState;\n-import org.apache.hadoop.hive.serde.serdeConstants;\n-import org.apache.hadoop.hive.serde2.thrift.ThriftDeserializer;\n-import org.apache.hadoop.hive.serde2.thrift.test.Complex;\n import org.apache.hadoop.hive.shims.HadoopShims;\n import org.apache.hadoop.hive.shims.ShimLoader;\n-import org.apache.hadoop.mapred.SequenceFileInputFormat;\n-import org.apache.hadoop.mapred.SequenceFileOutputFormat;\n-import org.apache.hadoop.mapred.TextInputFormat;\n import org.apache.hadoop.util.Shell;\n import org.apache.hive.common.util.StreamPrinter;\n-import org.apache.thrift.protocol.TBinaryProtocol;\n import org.apache.tools.ant.BuildException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n-import org.junit.Assume;\n \n import com.google.common.collect.ImmutableList;\n \n@@ -145,8 +134,8 @@\n   private QTestSetup setup = null;\n   private boolean isSessionStateStarted = false;\n \n-  private String initScript;\n-  private String cleanupScript;\n+  private final String initScript;\n+  private final String cleanupScript;\n \n   static {\n     for (String srcTable : System.getProperty(\"test.src.tables\", \"\").trim().split(\",\")) {\n@@ -332,14 +321,6 @@ public QTestUtil(String outDir, String logDir, MiniClusterType clusterType,\n     HadoopShims shims = ShimLoader.getHadoopShims();\n     int numberOfDataNodes = 4;\n \n-    // can run tez tests only on hadoop 2\n-    if (clusterType == MiniClusterType.tez) {\n-      Assume.assumeTrue(ShimLoader.getMajorVersion().equals(\"0.23\"));\n-      // this is necessary temporarily - there's a probem with multi datanodes on MiniTezCluster\n-      // will be fixed in 0.3\n-      numberOfDataNodes = 1;\n-    }\n-\n     if (clusterType != MiniClusterType.none) {\n       dfs = shims.getMiniDfs(conf, numberOfDataNodes, true, null);\n       FileSystem fs = dfs.getFileSystem();",
                "deletions": 22
            },
            {
                "sha": "1ef6cc5340096bd7b692941151843c0dd8405f69",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/89e51e4eb47c6b505bce1928d89c0e7e2975431c/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/89e51e4eb47c6b505bce1928d89c0e7e2975431c/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java?ref=89e51e4eb47c6b505bce1928d89c0e7e2975431c",
                "patch": "@@ -346,7 +346,7 @@ private EdgeProperty createEdgeProperty(TezEdgeProperty edgeProp, Configuration\n \n   /**\n    * Utility method to create a stripped down configuration for the MR partitioner.\n-   * \n+   *\n    * @param partitionerClassName\n    *          the real MR partitioner class name\n    * @param baseConf\n@@ -427,7 +427,7 @@ private Vertex createVertex(JobConf conf, MapWork mapWork,\n \n     // use tez to combine splits\n     boolean groupSplitsInInputInitializer;\n-    \n+\n     DataSourceDescriptor dataSource;\n \n     int numTasks = -1;\n@@ -462,11 +462,12 @@ private Vertex createVertex(JobConf conf, MapWork mapWork,\n       }\n     }\n \n-    // set up the operator plan. Before setting up Inputs since the config is updated.\n-    Utilities.setMapWork(conf, mapWork, mrScratchDir, false);\n-    \n     if (HiveConf.getBoolVar(conf, ConfVars.HIVE_AM_SPLIT_GENERATION)\n         && !mapWork.isUseOneNullRowInputFormat()) {\n+\n+      // set up the operator plan. (before setting up splits on the AM)\n+      Utilities.setMapWork(conf, mapWork, mrScratchDir, false);\n+\n       // if we're generating the splits in the AM, we just need to set\n       // the correct plugin.\n       if (groupSplitsInInputInitializer) {\n@@ -484,6 +485,9 @@ private Vertex createVertex(JobConf conf, MapWork mapWork,\n       dataSource = MRInputHelpers.configureMRInputWithLegacySplitGeneration(conf, new Path(tezDir,\n           \"split_\" + mapWork.getName().replaceAll(\" \", \"_\")), true);\n       numTasks = dataSource.getNumberOfShards();\n+\n+      // set up the operator plan. (after generating splits - that changes configs)\n+      Utilities.setMapWork(conf, mapWork, mrScratchDir, false);\n     }\n \n     UserPayload serializedConf = TezUtils.createUserPayloadFromConf(conf);",
                "deletions": 5
            },
            {
                "sha": "7556d7bfba81ac67db511e423c634e4125697e10",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/MapRecordProcessor.java",
                "blob_url": "https://github.com/apache/hive/blob/89e51e4eb47c6b505bce1928d89c0e7e2975431c/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/MapRecordProcessor.java",
                "raw_url": "https://github.com/apache/hive/raw/89e51e4eb47c6b505bce1928d89c0e7e2975431c/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/MapRecordProcessor.java",
                "status": "modified",
                "changes": 32,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/MapRecordProcessor.java?ref=89e51e4eb47c6b505bce1928d89c0e7e2975431c",
                "patch": "@@ -64,6 +64,23 @@\n   protected static final String MAP_PLAN_KEY = \"__MAP_PLAN__\";\n   private MapWork mapWork;\n \n+  public MapRecordProcessor(JobConf jconf) {\n+    ObjectCache cache = ObjectCacheFactory.getCache(jconf);\n+    execContext.setJc(jconf);\n+    // create map and fetch operators\n+    mapWork = (MapWork) cache.retrieve(MAP_PLAN_KEY);\n+    if (mapWork == null) {\n+      mapWork = Utilities.getMapWork(jconf);\n+      cache.cache(MAP_PLAN_KEY, mapWork);\n+      l4j.info(\"Plan: \"+mapWork);\n+      for (String s: mapWork.getAliases()) {\n+        l4j.info(\"Alias: \"+s);\n+      }\n+    } else {\n+      Utilities.setMapWork(jconf, mapWork);\n+    }\n+  }\n+\n   @Override\n   void init(JobConf jconf, ProcessorContext processorContext, MRTaskReporter mrReporter,\n       Map<String, LogicalInput> inputs, Map<String, LogicalOutput> outputs) throws Exception {\n@@ -87,22 +104,7 @@ void init(JobConf jconf, ProcessorContext processorContext, MRTaskReporter mrRep\n       ((TezKVOutputCollector) outMap.get(outputEntry.getKey())).initialize();\n     }\n \n-    ObjectCache cache = ObjectCacheFactory.getCache(jconf);\n     try {\n-\n-      execContext.setJc(jconf);\n-      // create map and fetch operators\n-      mapWork = (MapWork) cache.retrieve(MAP_PLAN_KEY);\n-      if (mapWork == null) {\n-        mapWork = Utilities.getMapWork(jconf);\n-        cache.cache(MAP_PLAN_KEY, mapWork);\n-        l4j.info(\"Plan: \"+mapWork);\n-        for (String s: mapWork.getAliases()) {\n-          l4j.info(\"Alias: \"+s);\n-        }\n-      } else {\n-        Utilities.setMapWork(jconf, mapWork);\n-      }\n       if (mapWork.getVectorMode()) {\n         mapOp = new VectorMapOperator();\n       } else {",
                "deletions": 15
            },
            {
                "sha": "8b023dcd6a27251dda528b7e82946d850e5e1802",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezProcessor.java",
                "blob_url": "https://github.com/apache/hive/blob/89e51e4eb47c6b505bce1928d89c0e7e2975431c/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezProcessor.java",
                "raw_url": "https://github.com/apache/hive/raw/89e51e4eb47c6b505bce1928d89c0e7e2975431c/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezProcessor.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezProcessor.java?ref=89e51e4eb47c6b505bce1928d89c0e7e2975431c",
                "patch": "@@ -130,7 +130,7 @@ public void run(Map<String, LogicalInput> inputs, Map<String, LogicalOutput> out\n       LOG.info(\"Running task: \" + getContext().getUniqueIdentifier());\n \n       if (isMap) {\n-        rproc = new MapRecordProcessor();\n+        rproc = new MapRecordProcessor(jobConf);\n         MRInputLegacy mrInput = getMRInput(inputs);\n         try {\n           mrInput.init();\n@@ -201,6 +201,7 @@ void initialize() throws Exception {\n       this.writer = (KeyValueWriter) output.getWriter();\n     }\n \n+    @Override\n     public void collect(Object key, Object value) throws IOException {\n       writer.write(key, value);\n     }",
                "deletions": 1
            },
            {
                "sha": "f4da332875be221cf668483f4b82bd5ebf32c39e",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "blob_url": "https://github.com/apache/hive/blob/89e51e4eb47c6b505bce1928d89c0e7e2975431c/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "raw_url": "https://github.com/apache/hive/raw/89e51e4eb47c6b505bce1928d89c0e7e2975431c/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java?ref=89e51e4eb47c6b505bce1928d89c0e7e2975431c",
                "patch": "@@ -134,7 +134,7 @@ public int execute(DriverContext driverContext) {\n       }\n \n       List<LocalResource> additionalLr = session.getLocalizedResources();\n-      \n+\n       // log which resources we're adding (apart from the hive exec)\n       if (LOG.isDebugEnabled()) {\n         if (additionalLr == null || additionalLr.size() == 0) {\n@@ -165,7 +165,7 @@ public int execute(DriverContext driverContext) {\n       counters = client.getDAGStatus(statusGetOpts).getDAGCounters();\n       TezSessionPoolManager.getInstance().returnSession(session);\n \n-      if (LOG.isInfoEnabled()) {\n+      if (LOG.isInfoEnabled() && counters != null) {\n         for (CounterGroup group: counters) {\n           LOG.info(group.getDisplayName() +\":\");\n           for (TezCounter counter: group) {",
                "deletions": 2
            }
        ],
        "patched_files": [
            "TezTask.java"
        ],
        "unit_tests": [
            "TestTezTask.java"
        ]
    },
    "hive_406e935": {
        "repo": "hive",
        "message": "HIVE-14621 : LLAP: memory.mode = none has NPE (Sergey Shelukhin, reviewed by Prasanth Jayachandran)",
        "commit": "https://github.com/apache/hive/commit/406e935f27f60bb01c53d54bdb2c91429c95207e",
        "parent": "https://github.com/apache/hive/commit/0705323db28edf13777d29d3a0add48f19936db0",
        "bug_id": "hive_406e935",
        "file": [
            {
                "sha": "cb0d96f50a2d38822cacb09fd98833c925d2af77",
                "filename": "common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -2733,10 +2733,10 @@ private static void populateLlapDaemonVarsSet(Set<String> llapDaemonVarsSetLocal\n         \"Whether the LLAP IO layer is enabled for non-vectorized queries that read inputs\\n\" +\n         \"that can be vectorized\"),\n     LLAP_IO_MEMORY_MODE(\"hive.llap.io.memory.mode\", \"cache\",\n-        new StringSet(\"cache\", \"allocator\", \"none\"),\n+        new StringSet(\"cache\", \"none\"),\n         \"LLAP IO memory usage; 'cache' (the default) uses data and metadata cache with a\\n\" +\n-        \"custom off-heap allocator, 'allocator' uses the custom allocator without the caches,\\n\" +\n-        \"'none' doesn't use either (this mode may result in significant performance degradation)\"),\n+        \"custom off-heap allocator, 'none' doesn't use either (this mode may result in\\n\" +\n+        \"significant performance degradation)\"),\n     LLAP_ALLOCATOR_MIN_ALLOC(\"hive.llap.io.allocator.alloc.min\", \"16Kb\", new SizeValidator(),\n         \"Minimum allocation possible from LLAP buddy allocator. Allocations below that are\\n\" +\n         \"padded to minimum allocation. For ORC, should generally be the same as the expected\\n\" +",
                "deletions": 3
            },
            {
                "sha": "b6fd3e35fcbc4146a03acbf48f4cca8afee21e07",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/EvictionDispatcher.java",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/EvictionDispatcher.java",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/EvictionDispatcher.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/EvictionDispatcher.java?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -26,10 +26,10 @@\n  * Eviction dispatcher - uses double dispatch to route eviction notifications to correct caches.\n  */\n public final class EvictionDispatcher implements EvictionListener {\n-  private final LowLevelCacheImpl dataCache;\n+  private final LowLevelCache dataCache;\n   private final OrcMetadataCache metadataCache;\n \n-  public EvictionDispatcher(LowLevelCacheImpl dataCache, OrcMetadataCache metadataCache) {\n+  public EvictionDispatcher(LowLevelCache dataCache, OrcMetadataCache metadataCache) {\n     this.dataCache = dataCache;\n     this.metadataCache = metadataCache;\n   }",
                "deletions": 2
            },
            {
                "sha": "19c589a9fd7835c7693344355a3ce8034bdde89c",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCache.java",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCache.java",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCache.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCache.java?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -59,4 +59,7 @@ DiskRangeList getFileData(Object fileKey, DiskRangeList range, long baseOffset,\n    */\n   long[] putFileData(Object fileKey, DiskRange[] ranges, MemoryBuffer[] chunks,\n       long baseOffset, Priority priority, LowLevelCacheCounters qfCounters);\n+\n+  /** Notifies the cache that a particular buffer should be removed due to eviction. */\n+  void notifyEvicted(MemoryBuffer buffer);\n }",
                "deletions": 0
            },
            {
                "sha": "ea458cab4a3f6b4c8289eff97ee4bcfd6994aa84",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/LowLevelCacheImpl.java?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -67,7 +67,7 @@ public LowLevelCacheImpl(LlapDaemonCacheMetrics metrics, LowLevelCachePolicy cac\n     this.doAssumeGranularBlocks = doAssumeGranularBlocks;\n   }\n \n-  public void init() {\n+  public void startThreads() {\n     if (cleanupInterval < 0) return;\n     cleanupThread = new CleanupThread(cleanupInterval);\n     cleanupThread.start();\n@@ -368,7 +368,8 @@ public static LlapDataBuffer allocateFake() {\n     return fake;\n   }\n \n-  public final void notifyEvicted(LlapDataBuffer buffer) {\n+  @Override\n+  public final void notifyEvicted(MemoryBuffer buffer) {\n     allocator.deallocateEvicted(buffer);\n     newEvictions.incrementAndGet();\n   }",
                "deletions": 2
            },
            {
                "sha": "d8f59d1fa98e163a39e90b3d623b4c4bebe87169",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/SimpleAllocator.java",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/SimpleAllocator.java",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/SimpleAllocator.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/SimpleAllocator.java?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -68,6 +68,7 @@ public void deallocate(MemoryBuffer buffer) {\n     LlapDataBuffer buf = (LlapDataBuffer)buffer;\n     ByteBuffer bb = buf.byteBuffer;\n     buf.byteBuffer = null;\n+    if (!bb.isDirect()) return;\n     Field field = cleanerField;\n     if (field == null) return;\n     try {",
                "deletions": 0
            },
            {
                "sha": "d1eee045499fadcc238a7ca8e28939222e9b1500",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/cache/SimpleBufferManager.java",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/SimpleBufferManager.java",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/cache/SimpleBufferManager.java",
                "status": "modified",
                "changes": 33,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/cache/SimpleBufferManager.java?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -20,12 +20,15 @@\n import java.util.List;\n \n import org.apache.hadoop.hive.common.io.Allocator;\n+import org.apache.hadoop.hive.common.io.DataCache.BooleanRef;\n+import org.apache.hadoop.hive.common.io.DataCache.DiskRangeListFactory;\n+import org.apache.hadoop.hive.common.io.DiskRange;\n+import org.apache.hadoop.hive.common.io.DiskRangeList;\n import org.apache.hadoop.hive.common.io.encoded.MemoryBuffer;\n-import org.apache.hadoop.hive.llap.DebugUtils;\n import org.apache.hadoop.hive.llap.io.api.impl.LlapIoImpl;\n import org.apache.hadoop.hive.llap.metrics.LlapDaemonCacheMetrics;\n \n-public class SimpleBufferManager implements BufferUsageManager {\n+public class SimpleBufferManager implements BufferUsageManager, LowLevelCache {\n   private final Allocator allocator;\n   private final LlapDaemonCacheMetrics metrics;\n \n@@ -73,4 +76,30 @@ public boolean incRefBuffer(MemoryBuffer buffer) {\n   public Allocator getAllocator() {\n     return allocator;\n   }\n+\n+  @Override\n+  public DiskRangeList getFileData(Object fileKey, DiskRangeList range, long baseOffset,\n+      DiskRangeListFactory factory, LowLevelCacheCounters qfCounters, BooleanRef gotAllData) {\n+    return range; // Nothing changes - no cache.\n+  }\n+\n+  @Override\n+  public long[] putFileData(Object fileKey, DiskRange[] ranges,\n+      MemoryBuffer[] chunks, long baseOffset, Priority priority,\n+      LowLevelCacheCounters qfCounters) {\n+    for (int i = 0; i < chunks.length; ++i) {\n+      LlapDataBuffer buffer = (LlapDataBuffer)chunks[i];\n+      if (LlapIoImpl.LOCKING_LOGGER.isTraceEnabled()) {\n+        LlapIoImpl.LOCKING_LOGGER.trace(\"Locking {} at put time (no cache)\", buffer);\n+      }\n+      boolean canLock = lockBuffer(buffer);\n+      assert canLock;\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public void notifyEvicted(MemoryBuffer buffer) {\n+    throw new UnsupportedOperationException(\"Buffer manager doesn't have cache\");\n+  }\n }",
                "deletions": 2
            },
            {
                "sha": "8048624a2b7c0562525d2ce147f8ca1a9de1c8ff",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/io/api/impl/LlapIoImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/io/api/impl/LlapIoImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/io/api/impl/LlapIoImpl.java",
                "status": "modified",
                "changes": 36,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/io/api/impl/LlapIoImpl.java?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.hadoop.hive.llap.cache.BufferUsageManager;\n import org.apache.hadoop.hive.llap.cache.EvictionAwareAllocator;\n import org.apache.hadoop.hive.llap.cache.EvictionDispatcher;\n+import org.apache.hadoop.hive.llap.cache.LowLevelCache;\n import org.apache.hadoop.hive.llap.cache.LowLevelCacheImpl;\n import org.apache.hadoop.hive.llap.cache.LowLevelCacheMemoryManager;\n import org.apache.hadoop.hive.llap.cache.LowLevelCachePolicy;\n@@ -71,7 +72,7 @@\n   public static final Logger CACHE_LOGGER = LoggerFactory.getLogger(\"LlapIoCache\");\n   public static final Logger LOCKING_LOGGER = LoggerFactory.getLogger(\"LlapIoLocking\");\n \n-  private static final String MODE_CACHE = \"cache\", MODE_ALLOCATOR = \"allocator\";\n+  private static final String MODE_CACHE = \"cache\";\n \n   private final ColumnVectorProducer cvp;\n   private final ExecutorService executor;\n@@ -82,9 +83,8 @@\n \n   private LlapIoImpl(Configuration conf) throws IOException {\n     String ioMode = HiveConf.getVar(conf, HiveConf.ConfVars.LLAP_IO_MEMORY_MODE);\n-    boolean useLowLevelCache = LlapIoImpl.MODE_CACHE.equalsIgnoreCase(ioMode),\n-        useAllocOnly = !useLowLevelCache && LlapIoImpl.MODE_ALLOCATOR.equalsIgnoreCase(ioMode);\n-    LOG.info(\"Initializing LLAP IO in {} mode\", ioMode);\n+    boolean useLowLevelCache = LlapIoImpl.MODE_CACHE.equalsIgnoreCase(ioMode);\n+    LOG.info(\"Initializing LLAP IO in {} mode\", useLowLevelCache ? LlapIoImpl.MODE_CACHE : \"none\");\n     String displayName = \"LlapDaemonCacheMetrics-\" + MetricsUtils.getHostName();\n     String sessionId = conf.get(\"llap.daemon.metrics.sessionid\");\n     this.cacheMetrics = LlapDaemonCacheMetrics.create(displayName, sessionId);\n@@ -109,7 +109,7 @@ private LlapIoImpl(Configuration conf) throws IOException {\n         sessionId);\n \n     OrcMetadataCache metadataCache = null;\n-    LowLevelCacheImpl orcCache = null;\n+    LowLevelCache cache = null;\n     BufferUsageManager bufferManager = null;\n     if (useLowLevelCache) {\n       // Memory manager uses cache policy to trigger evictions, so create the policy first.\n@@ -122,23 +122,21 @@ private LlapIoImpl(Configuration conf) throws IOException {\n       // Cache uses allocator to allocate and deallocate, create allocator and then caches.\n       EvictionAwareAllocator allocator = new BuddyAllocator(conf, memManager, cacheMetrics);\n       this.allocator = allocator;\n-      orcCache = new LowLevelCacheImpl(cacheMetrics, cachePolicy, allocator, true);\n+      LowLevelCacheImpl cacheImpl = new LowLevelCacheImpl(\n+          cacheMetrics, cachePolicy, allocator, true);\n+      cache = cacheImpl;\n       boolean useGapCache = HiveConf.getBoolVar(conf, ConfVars.LLAP_CACHE_ENABLE_ORC_GAP_CACHE);\n       metadataCache = new OrcMetadataCache(memManager, cachePolicy, useGapCache);\n       // And finally cache policy uses cache to notify it of eviction. The cycle is complete!\n-      cachePolicy.setEvictionListener(new EvictionDispatcher(orcCache, metadataCache));\n-      cachePolicy.setParentDebugDumper(orcCache);\n-      orcCache.init(); // Start the cache threads.\n-      bufferManager = orcCache; // Cache also serves as buffer manager.\n+      cachePolicy.setEvictionListener(new EvictionDispatcher(cache, metadataCache));\n+      cachePolicy.setParentDebugDumper(cacheImpl);\n+      cacheImpl.startThreads(); // Start the cache threads.\n+      bufferManager = cacheImpl; // Cache also serves as buffer manager.\n     } else {\n-      if (useAllocOnly) {\n-        LowLevelCacheMemoryManager memManager = new LowLevelCacheMemoryManager(\n-            conf, null, cacheMetrics);\n-        allocator = new BuddyAllocator(conf, memManager, cacheMetrics);\n-      } else {\n-        allocator = new SimpleAllocator(conf);\n-      }\n-      bufferManager = new SimpleBufferManager(allocator, cacheMetrics);\n+      this.allocator = new SimpleAllocator(conf);\n+      SimpleBufferManager sbm = new SimpleBufferManager(allocator, cacheMetrics);\n+      bufferManager = sbm;\n+      cache = sbm;\n     }\n     // IO thread pool. Listening is used for unhandled errors for now (TODO: remove?)\n     int numThreads = HiveConf.getIntVar(conf, HiveConf.ConfVars.LLAP_IO_THREADPOOL_SIZE);\n@@ -148,7 +146,7 @@ private LlapIoImpl(Configuration conf) throws IOException {\n         new ThreadFactoryBuilder().setNameFormat(\"IO-Elevator-Thread-%d\").setDaemon(true).build());\n     // TODO: this should depends on input format and be in a map, or something.\n     this.cvp = new OrcColumnVectorProducer(\n-        metadataCache, orcCache, bufferManager, conf, cacheMetrics, ioMetrics);\n+        metadataCache, cache, bufferManager, conf, cacheMetrics, ioMetrics);\n     LOG.info(\"LLAP IO initialized\");\n \n     registerMXBeans();",
                "deletions": 19
            },
            {
                "sha": "12275acd5a39dcb3e5536c011d12c1c8afd38d55",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/io/decode/OrcColumnVectorProducer.java",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/io/decode/OrcColumnVectorProducer.java",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/io/decode/OrcColumnVectorProducer.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/io/decode/OrcColumnVectorProducer.java?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -25,7 +25,6 @@\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.llap.cache.BufferUsageManager;\n import org.apache.hadoop.hive.llap.cache.LowLevelCache;\n-import org.apache.hadoop.hive.llap.cache.LowLevelCacheImpl;\n import org.apache.hadoop.hive.llap.counters.QueryFragmentCounters;\n import org.apache.hadoop.hive.llap.io.api.impl.ColumnVectorBatch;\n import org.apache.hadoop.hive.llap.io.api.impl.LlapIoImpl;\n@@ -48,7 +47,7 @@\n   private LlapDaemonIOMetrics ioMetrics;\n \n   public OrcColumnVectorProducer(OrcMetadataCache metadataCache,\n-      LowLevelCacheImpl lowLevelCache, BufferUsageManager bufferManager,\n+      LowLevelCache lowLevelCache, BufferUsageManager bufferManager,\n       Configuration conf, LlapDaemonCacheMetrics cacheMetrics, LlapDaemonIOMetrics ioMetrics) {\n     LlapIoImpl.LOG.info(\"Initializing ORC column vector producer\");\n ",
                "deletions": 2
            },
            {
                "sha": "eb8ee6cd4c10e82f8adcfed407c58854828aceb9",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/io/encoded/OrcEncodedDataReader.java",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/io/encoded/OrcEncodedDataReader.java",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/java/org/apache/hadoop/hive/llap/io/encoded/OrcEncodedDataReader.java",
                "status": "modified",
                "changes": 11,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/io/encoded/OrcEncodedDataReader.java?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -835,12 +835,11 @@ public DataWrapperForOrc() throws IOException {\n     @Override\n     public DiskRangeList getFileData(Object fileKey, DiskRangeList range,\n         long baseOffset, DiskRangeListFactory factory, BooleanRef gotAllData) {\n-      DiskRangeList result = (lowLevelCache == null) ? range\n-          : lowLevelCache.getFileData(fileKey, range, baseOffset, factory, counters, gotAllData);\n+      DiskRangeList result = lowLevelCache.getFileData(\n+          fileKey, range, baseOffset, factory, counters, gotAllData);\n       if (LlapIoImpl.ORC_LOGGER.isTraceEnabled()) {\n-        LlapIoImpl.ORC_LOGGER.trace(\"Disk ranges after data cache (file \" + fileKey\n-            + \", base offset \" + baseOffset + \"): \"\n-            + RecordReaderUtils.stringifyDiskRanges(range.next));\n+        LlapIoImpl.ORC_LOGGER.trace(\"Disk ranges after data cache (file \" + fileKey +\n+            \", base offset \" + baseOffset + \"): \" + RecordReaderUtils.stringifyDiskRanges(range));\n       }\n       if (gotAllData.value) return result;\n       return (metadataCache == null) ? range\n@@ -851,7 +850,7 @@ public DiskRangeList getFileData(Object fileKey, DiskRangeList range,\n     public long[] putFileData(Object fileKey, DiskRange[] ranges,\n         MemoryBuffer[] data, long baseOffset) {\n       if (data != null) {\n-        return (lowLevelCache == null) ? null : lowLevelCache.putFileData(\n+        return lowLevelCache.putFileData(\n             fileKey, ranges, data, baseOffset, Priority.NORMAL, counters);\n       } else if (metadataCache != null) {\n         metadataCache.putIncompleteCbs(fileKey, ranges, baseOffset);",
                "deletions": 6
            },
            {
                "sha": "0c953d1fa58f79d60bb059cf1110269285570358",
                "filename": "llap-server/src/main/resources/llap-daemon-log4j2.properties",
                "blob_url": "https://github.com/apache/hive/blob/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/main/resources/llap-daemon-log4j2.properties",
                "raw_url": "https://github.com/apache/hive/raw/406e935f27f60bb01c53d54bdb2c91429c95207e/llap-server/src/main/resources/llap-daemon-log4j2.properties",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/main/resources/llap-daemon-log4j2.properties?ref=406e935f27f60bb01c53d54bdb2c91429c95207e",
                "patch": "@@ -100,7 +100,10 @@ appender.query-routing.routes.route-mdc.file-mdc.app.layout.type = PatternLayout\n appender.query-routing.routes.route-mdc.file-mdc.app.layout.pattern = %d{ISO8601} %5p [%t (%X{fragmentId})] %c{2}: %m%n\n \n # list of all loggers\n-loggers = NIOServerCnxn, ClientCnxnSocketNIO, DataNucleus, Datastore, JPOX, HistoryLogger, LlapIoImpl, LlapIoOrc, LlapIoCache, LlapIoLocking\n+loggers = EncodedReader, NIOServerCnxn, ClientCnxnSocketNIO, DataNucleus, Datastore, JPOX, HistoryLogger, LlapIoImpl, LlapIoOrc, LlapIoCache, LlapIoLocking\n+\n+logger.EncodedReader.name = org.apache.hadoop.hive.ql.io.orc.encoded.EncodedReaderImpl\n+logger.EncodedReader.level = INFO\n \n logger.LlapIoImpl.name = LlapIoImpl\n logger.LlapIoImpl.level = INFO\n@@ -109,7 +112,7 @@ logger.LlapIoOrc.name = LlapIoOrc\n logger.LlapIoOrc.level = WARN\n \n logger.LlapIoCache.name = LlapIoCache\n-logger.LlapIOCache.level = WARN\n+logger.LlapIoCache.level = WARN\n \n logger.LlapIoLocking.name = LlapIoLocking\n logger.LlapIoLocking.level = WARN",
                "deletions": 2
            }
        ],
        "patched_files": [
            "LowLevelCacheImpl.java",
            "HiveConf.java"
        ],
        "unit_tests": [
            "TestLowLevelCacheImpl.java",
            "TestHiveConf.java"
        ]
    },
    "hive_7faa8a1": {
        "repo": "hive",
        "message": "HIVE-9622 - Getting NPE when trying to restart HS2 when metastore is configured to use org.apache.hadoop.hive.thrift.DBTokenStore (Aihua via Brock)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1659302 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/7faa8a1e3bb7d65bed93cb203c9ec11c3c92daf3",
        "parent": "https://github.com/apache/hive/commit/c09884e0b662ecb635ccdb162d06ade2ea71d8b6",
        "bug_id": "hive_7faa8a1",
        "file": [
            {
                "sha": "a30ec7e9e5e079f7c13456c29082121da9b6c202",
                "filename": "itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestHiveAuthFactory.java",
                "blob_url": "https://github.com/apache/hive/blob/7faa8a1e3bb7d65bed93cb203c9ec11c3c92daf3/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestHiveAuthFactory.java",
                "raw_url": "https://github.com/apache/hive/raw/7faa8a1e3bb7d65bed93cb203c9ec11c3c92daf3/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestHiveAuthFactory.java",
                "status": "added",
                "changes": 66,
                "additions": 66,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestHiveAuthFactory.java?ref=7faa8a1e3bb7d65bed93cb203c9ec11c3c92daf3",
                "patch": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hive.minikdc;\n+\n+import org.junit.Assert;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hive.service.auth.HiveAuthFactory;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+\n+public class TestHiveAuthFactory {\n+  private static HiveConf hiveConf;\n+  private static MiniHiveKdc miniHiveKdc = null;\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    hiveConf = new HiveConf();\n+    miniHiveKdc = MiniHiveKdc.getMiniHiveKdc(hiveConf);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws Exception {\n+  }\n+\n+  /**\n+   * Verify that delegation token manager is started with no exception\n+   * @throws Exception\n+   */\n+  @Test\n+  public void testStartTokenManager() throws Exception {\n+    hiveConf.setVar(ConfVars.HIVE_SERVER2_AUTHENTICATION, HiveAuthFactory.AuthTypes.KERBEROS.getAuthName());\n+    String principalName = miniHiveKdc.getFullHiveServicePrincipal();\n+    System.out.println(\"Principal: \" + principalName);\n+    \n+    hiveConf.setVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL, principalName);\n+    String keyTabFile = miniHiveKdc.getKeyTabFile(miniHiveKdc.getHiveServicePrincipal());\n+    System.out.println(\"keyTabFile: \" + keyTabFile);\n+    Assert.assertNotNull(keyTabFile);\n+    hiveConf.setVar(ConfVars.HIVE_SERVER2_KERBEROS_KEYTAB, keyTabFile);\n+\n+    System.out.println(\"rawStoreClassName =\" +  hiveConf.getVar(ConfVars.METASTORE_RAW_STORE_IMPL));\n+\n+    HiveAuthFactory authFactory = new HiveAuthFactory(hiveConf);\n+    Assert.assertNotNull(authFactory);\n+    Assert.assertEquals(\"org.apache.hadoop.hive.thrift.HadoopThriftAuthBridge$Server$TUGIAssumingTransportFactory\", \n+        authFactory.getAuthTransFactory().getClass().getName());\n+  }\n+}",
                "deletions": 0
            },
            {
                "sha": "22c309fbfd941fb517370057ef38fbec903ce088",
                "filename": "service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java",
                "blob_url": "https://github.com/apache/hive/blob/7faa8a1e3bb7d65bed93cb203c9ec11c3c92daf3/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java",
                "raw_url": "https://github.com/apache/hive/raw/7faa8a1e3bb7d65bed93cb203c9ec11c3c92daf3/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java?ref=7faa8a1e3bb7d65bed93cb203c9ec11c3c92daf3",
                "patch": "@@ -18,7 +18,6 @@\n package org.apache.hive.service.auth;\n \n import java.io.IOException;\n-import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n import java.util.ArrayList;\n@@ -33,6 +32,9 @@\n \n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.HiveMetaStore;\n+import org.apache.hadoop.hive.metastore.HiveMetaStore.HMSHandler;\n+import org.apache.hadoop.hive.metastore.api.MetaException;\n import org.apache.hadoop.hive.shims.HadoopShims.KerberosNameShim;\n import org.apache.hadoop.hive.shims.ShimLoader;\n import org.apache.hadoop.hive.thrift.HadoopThriftAuthBridge;\n@@ -108,8 +110,11 @@ public HiveAuthFactory(HiveConf conf) throws TTransportException {\n                         conf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL));\n         // start delegation token manager\n         try {\n-          saslServer.startDelegationTokenSecretManager(conf, null, ServerMode.HIVESERVER2);\n-        } catch (IOException e) {\n+          HMSHandler baseHandler = new HiveMetaStore.HMSHandler(\n+              \"new db based metaserver\", conf, true);\n+          saslServer.startDelegationTokenSecretManager(conf, baseHandler.getMS(), ServerMode.HIVESERVER2);\n+        }\n+        catch (MetaException|IOException e) {\n           throw new TTransportException(\"Failed to start token manager\", e);\n         }\n       }",
                "deletions": 3
            }
        ],
        "patched_files": [
            "HiveAuthFactory.java"
        ],
        "unit_tests": [
            "TestHiveAuthFactory.java"
        ]
    },
    "hive_0af2fb0": {
        "repo": "hive",
        "message": "HIVE-8551 : NPE in FunctionRegistry (affects CBO in negative tests) (Sergey Shelukhin, reviewed by Ashutosh Chauhan)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1633692 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/0af2fb0cac270cd6223a4abaf6e410f05450bfef",
        "parent": "https://github.com/apache/hive/commit/4dd080d286a6db1df33ad643ac618407c1af1a45",
        "bug_id": "hive_0af2fb0",
        "file": [
            {
                "sha": "451598aa964786e118307643cf92c6f31fcab9aa",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java",
                "blob_url": "https://github.com/apache/hive/blob/0af2fb0cac270cd6223a4abaf6e410f05450bfef/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java",
                "raw_url": "https://github.com/apache/hive/raw/0af2fb0cac270cd6223a4abaf6e410f05450bfef/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java",
                "status": "modified",
                "changes": 17,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/FunctionRegistry.java?ref=0af2fb0cac270cd6223a4abaf6e410f05450bfef",
                "patch": "@@ -1992,17 +1992,18 @@ public static void registerTableFunction(String name, Class<? extends TableFunct\n    * @return true if function is a UDAF, has WindowFunctionDescription annotation and the annotations\n    *         confirms a ranking function, false otherwise\n    */\n-  public static boolean isRankingFunction(String name){\n+  public static boolean isRankingFunction(String name) {\n     FunctionInfo info = getFunctionInfo(name);\n+    if (info == null) {\n+      return false;\n+    }\n     GenericUDAFResolver res = info.getGenericUDAFResolver();\n-    if (res != null){\n-      WindowFunctionDescription desc =\n-          AnnotationUtils.getAnnotation(res.getClass(), WindowFunctionDescription.class);\n-      if (desc != null){\n-        return desc.rankingFunction();\n-      }\n+    if (res == null) {\n+      return false;\n     }\n-    return false;\n+    WindowFunctionDescription desc =\n+        AnnotationUtils.getAnnotation(res.getClass(), WindowFunctionDescription.class);\n+    return (desc != null) && desc.rankingFunction();\n   }\n \n   /**",
                "deletions": 8
            }
        ],
        "patched_files": [
            "FunctionRegistry.java"
        ],
        "unit_tests": [
            "TestFunctionRegistry.java"
        ]
    },
    "hive_566544d": {
        "repo": "hive",
        "message": "HIVE-8579: Guaranteed NPE in DDLSemanticAnalyzer (Jason Dere, reviewed by Vaibhav Gumashta)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1635354 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/566544d1b780e873132f84660878261935b500df",
        "parent": "https://github.com/apache/hive/commit/8fb70dca8e0341b17147e9692fb234caecac6407",
        "bug_id": "hive_566544d",
        "file": [
            {
                "sha": "292c83cf967756ad3056f8a57de9590a0b00babf",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "blob_url": "https://github.com/apache/hive/blob/566544d1b780e873132f84660878261935b500df/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "raw_url": "https://github.com/apache/hive/raw/566544d1b780e873132f84660878261935b500df/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java?ref=566544d1b780e873132f84660878261935b500df",
                "patch": "@@ -422,7 +422,7 @@\n   ACID_NO_SORTED_BUCKETS(10298, \"ACID insert, update, delete not supported on tables that are \" +\n       \"sorted, table {0}\", true),\n   ALTER_TABLE_TYPE_PARTIAL_PARTITION_SPEC_NO_SUPPORTED(10299,\n-      \"Alter table partition type {0} does not allow partial partition spec\"),\n+      \"Alter table partition type {0} does not allow partial partition spec\", true),\n \n   //========================== 20000 range starts here ========================//\n   SCRIPT_INIT_ERROR(20000, \"Unable to initialize custom script.\"),",
                "deletions": 1
            },
            {
                "sha": "f3c01a8b4b6ddff2af02f95c091305288e495b27",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/566544d1b780e873132f84660878261935b500df/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/566544d1b780e873132f84660878261935b500df/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java?ref=566544d1b780e873132f84660878261935b500df",
                "patch": "@@ -1396,8 +1396,9 @@ private void addInputsOutputsAlterTable(String tableName, Map<String, String> pa\n         // Partial partition spec supplied. Make sure this is allowed.\n         if (desc == null\n             || !AlterTableDesc.doesAlterTableTypeSupportPartialPartitionSpec(desc.getOp())) {\n+          String alterTabletype = (desc != null) ? desc.getOp().name() : \"\";\n           throw new SemanticException(\n-              ErrorMsg.ALTER_TABLE_TYPE_PARTIAL_PARTITION_SPEC_NO_SUPPORTED, desc.getOp().name());\n+              ErrorMsg.ALTER_TABLE_TYPE_PARTIAL_PARTITION_SPEC_NO_SUPPORTED, alterTabletype);\n         } else if (!conf.getBoolVar(HiveConf.ConfVars.DYNAMICPARTITIONING)) {\n           throw new SemanticException(ErrorMsg.DYNAMIC_PARTITION_DISABLED);\n         }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "ErrorMsg.java"
        ],
        "unit_tests": [
            "TestErrorMsg.java"
        ]
    },
    "hive_c7d2643": {
        "repo": "hive",
        "message": "HIVE-8166 : CBO: 1) Bailout in strict mode 2) OB,LIMIT RR table alias is same as that of sub query 3) If RowCount Not found then fall back to non cbo 4)Fix NPE in unique col name check (John Pullokkaran via Ashutosh Chauhan)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/branches/cbo@1625852 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/c7d2643e0025d6fa16744872c7a131f4b5a377e6",
        "parent": "https://github.com/apache/hive/commit/88e790ad42a829ba0492e4ecfaf05dc750798a0c",
        "bug_id": "hive_c7d2643",
        "file": [
            {
                "sha": "ddef37be78d2ba64332d6b5eb963b98df4223290",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/optiq/RelOptHiveTable.java",
                "blob_url": "https://github.com/apache/hive/blob/c7d2643e0025d6fa16744872c7a131f4b5a377e6/ql/src/java/org/apache/hadoop/hive/ql/optimizer/optiq/RelOptHiveTable.java",
                "raw_url": "https://github.com/apache/hive/raw/c7d2643e0025d6fa16744872c7a131f4b5a377e6/ql/src/java/org/apache/hadoop/hive/ql/optimizer/optiq/RelOptHiveTable.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/optimizer/optiq/RelOptHiveTable.java?ref=c7d2643e0025d6fa16744872c7a131f4b5a377e6",
                "patch": "@@ -131,6 +131,9 @@ public double getRowCount() {\n       }\n     }\n \n+    if (rowCount == -1)\n+      noColsMissingStats.getAndIncrement();\n+\n     return rowCount;\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "c643aa46c484210fe348602ae41bfe2deccca2c5",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/optiq/reloperators/HiveProjectRel.java",
                "blob_url": "https://github.com/apache/hive/blob/c7d2643e0025d6fa16744872c7a131f4b5a377e6/ql/src/java/org/apache/hadoop/hive/ql/optimizer/optiq/reloperators/HiveProjectRel.java",
                "raw_url": "https://github.com/apache/hive/raw/c7d2643e0025d6fa16744872c7a131f4b5a377e6/ql/src/java/org/apache/hadoop/hive/ql/optimizer/optiq/reloperators/HiveProjectRel.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/optimizer/optiq/reloperators/HiveProjectRel.java?ref=c7d2643e0025d6fa16744872c7a131f4b5a377e6",
                "patch": "@@ -86,7 +86,7 @@ public static HiveProjectRel create(RelNode child, List<? extends RexNode> exps,\n     RelOptCluster cluster = child.getCluster();\n \n     // 1 Ensure columnNames are unique - OPTIQ-411\n-    if (!Util.isDistinct(fieldNames)) {\n+    if (fieldNames != null && !Util.isDistinct(fieldNames)) {\n       String msg = \"Select list contains multiple expressions with the same name.\" + fieldNames;\n       throw new OptiqSemanticException(msg);\n     }",
                "deletions": 1
            },
            {
                "sha": "0daad5bfea23f76c846e17f7c7d5f4940a1cce46",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/c7d2643e0025d6fa16744872c7a131f4b5a377e6/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/c7d2643e0025d6fa16744872c7a131f4b5a377e6/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "status": "modified",
                "changes": 20,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java?ref=c7d2643e0025d6fa16744872c7a131f4b5a377e6",
                "patch": "@@ -12139,6 +12139,7 @@ private boolean canHandleQuery(QB qbToChk, boolean topLevelQB) {\n     // 1. If top level QB is query then everything below it must also be Query\n     // 2. Nested Subquery will return false for qbToChk.getIsQuery()\n     if ((!topLevelQB || qbToChk.getIsQuery())\n+        && (!conf.getBoolVar(ConfVars.HIVE_IN_TEST) || conf.getVar(ConfVars.HIVEMAPREDMODE).equalsIgnoreCase(\"nonstrict\"))\n         && (!topLevelQB || (queryProperties.getJoinCount() > 1) || conf.getBoolVar(ConfVars.HIVE_IN_TEST))\n         && !queryProperties.hasClusterBy() && !queryProperties.hasDistributeBy()\n         && !queryProperties.hasSortBy() && !queryProperties.hasPTF()\n@@ -13870,7 +13871,6 @@ private RelNode genLogicalPlan(QB qb) throws SemanticException {\n         aliasToRel.put(tableAlias, op);\n       }\n \n-\n       if (aliasToRel.isEmpty()) {\n         //// This may happen for queries like select 1; (no source table)\n         // We can do following which is same, as what Hive does.\n@@ -13910,7 +13910,15 @@ private RelNode genLogicalPlan(QB qb) throws SemanticException {\n       selectRel = genSelectLogicalPlan(qb, srcRel);\n       srcRel = (selectRel == null) ? srcRel : selectRel;\n \n-      // 6. Incase this QB corresponds to subquery then modify its RR to point\n+      // 6. Build Rel for OB Clause\n+      obRel = genOBLogicalPlan(qb, srcRel);\n+      srcRel = (obRel == null) ? srcRel : obRel;\n+\n+      // 7. Build Rel for Limit Clause\n+      limitRel = genLimitLogicalPlan(qb, srcRel);\n+      srcRel = (limitRel == null) ? srcRel : limitRel;\n+\n+      // 8. Incase this QB corresponds to subquery then modify its RR to point\n       // to subquery alias\n       // TODO: cleanup this\n       if (qb.getParseInfo().getAlias() != null) {\n@@ -13932,14 +13940,6 @@ private RelNode genLogicalPlan(QB qb) throws SemanticException {\n         relToHiveColNameOptiqPosMap.put(srcRel, buildHiveToOptiqColumnMap(newRR, srcRel));\n       }\n \n-      // 7. Build Rel for OB Clause\n-      obRel = genOBLogicalPlan(qb, srcRel);\n-      srcRel = (obRel == null) ? srcRel : obRel;\n-\n-      // 8. Build Rel for Limit Clause\n-      limitRel = genLimitLogicalPlan(qb, srcRel);\n-      srcRel = (limitRel == null) ? srcRel : limitRel;\n-\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Created Plan for Query Block \" + qb.getId());\n       }",
                "deletions": 10
            }
        ],
        "patched_files": [
            "SemanticAnalyzer.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzer.java"
        ]
    },
    "hive_f3b2c70": {
        "repo": "hive",
        "message": "HIVE-7310: Turning CBO on results in NPE on some queries (Laljo John Pullokkaran via Gunther Hagleitner)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/branches/cbo@1606276 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/f3b2c702238f5592a6743adbe5aee42bbec9f4e6",
        "parent": "https://github.com/apache/hive/commit/e34ca1c02edb3b771c2976c75d57dc5212284637",
        "bug_id": "hive_f3b2c70",
        "file": [
            {
                "sha": "c7c76e520d8b4ba3edb5cf883b0f9c5b76dd7bd4",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/f3b2c702238f5592a6743adbe5aee42bbec9f4e6/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/f3b2c702238f5592a6743adbe5aee42bbec9f4e6/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java?ref=f3b2c702238f5592a6743adbe5aee42bbec9f4e6",
                "patch": "@@ -12125,9 +12125,6 @@ private AggregateCall convertAgg(AggInfo agg, RelNode input,\n       List<Integer> argList = new ArrayList<Integer>();\n       RelDataType type = TypeConverter.convert(agg.m_returnType,\n           this.m_cluster.getTypeFactory());\n-      if (aggregation.equals(SqlStdOperatorTable.AVG)) {\n-        type = type.getField(\"sum\", false).getType();\n-      }\n \n       // TODO: Does HQL allows expressions as aggregate args or can it only be\n       // projections from child?",
                "deletions": 3
            }
        ],
        "patched_files": [
            "SemanticAnalyzer.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzer.java"
        ]
    },
    "hive_d375b39": {
        "repo": "hive",
        "message": "HIVE-6753: Unions on Tez NPE when there's a mapjoin the union work (Gunther Hagleitner, reviewed by Vikram Dixit K)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1582488 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/d375b3977d42936b3b00888e2b1bacf736e8ac3e",
        "parent": "https://github.com/apache/hive/commit/1569a0e7a1d72e182ababb43f5f2b14d8bf8494d",
        "bug_id": "hive_d375b39",
        "file": [
            {
                "sha": "803903256b5986e75cf193c5cb73fd27ccdec701",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezProcessor.java",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezProcessor.java",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezProcessor.java",
                "status": "modified",
                "changes": 18,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezProcessor.java?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -123,6 +123,9 @@ private void setupMRLegacyConfigs(TezProcessorContext processorContext) {\n   @Override\n   public void run(Map<String, LogicalInput> inputs, Map<String, LogicalOutput> outputs)\n       throws Exception {\n+    \n+    Exception processingException = null;\n+    \n     try{\n       perfLogger.PerfLogBegin(CLASS_NAME, PerfLogger.TEZ_RUN_PROCESSOR);\n       // in case of broadcast-join read the broadcast edge inputs\n@@ -160,9 +163,20 @@ public void run(Map<String, LogicalInput> inputs, Map<String, LogicalOutput> out\n \n       //done - output does not need to be committed as hive does not use outputcommitter\n       perfLogger.PerfLogEnd(CLASS_NAME, PerfLogger.TEZ_RUN_PROCESSOR);\n+    } catch (Exception e) {\n+      processingException = e;\n     } finally {\n-      if(rproc != null){\n-        rproc.close();\n+      try {\n+        if(rproc != null){\n+          rproc.close();\n+        }\n+      } catch (Exception e) {\n+        if (processingException == null) {\n+          processingException = e;\n+        }\n+      }\n+      if (processingException != null) {\n+        throw processingException;\n       }\n     }\n   }",
                "deletions": 2
            },
            {
                "sha": "135bb4df5252b3ddc21483f237a68e2ab5ddc515",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkMapJoinProc.java",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkMapJoinProc.java",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkMapJoinProc.java",
                "status": "modified",
                "changes": 144,
                "additions": 78,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/optimizer/ReduceSinkMapJoinProc.java?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.hadoop.hive.ql.plan.HashTableDummyDesc;\n import org.apache.hadoop.hive.ql.plan.OperatorDesc;\n import org.apache.hadoop.hive.ql.plan.PlanUtils;\n+import org.apache.hadoop.hive.ql.plan.ReduceSinkDesc;\n import org.apache.hadoop.hive.ql.plan.TableDesc;\n import org.apache.hadoop.hive.ql.plan.TezWork;\n import org.apache.hadoop.hive.ql.plan.TezWork.EdgeType;\n@@ -63,12 +64,16 @@\n   public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procContext, Object... nodeOutputs)\n       throws SemanticException {\n     GenTezProcContext context = (GenTezProcContext) procContext;\n+    MapJoinOperator mapJoinOp = (MapJoinOperator)nd;\n+\n+    if (stack.size() < 2 || !(stack.get(stack.size() - 2) instanceof ReduceSinkOperator)) {\n+      context.currentMapJoinOperators.add(mapJoinOp);\n+      return null;\n+    }\n+\n     context.preceedingWork = null;\n     context.currentRootOperator = null;\n \n-    MapJoinOperator mapJoinOp = (MapJoinOperator)nd;\n-    Operator<? extends OperatorDesc> childOp = mapJoinOp.getChildOperators().get(0);\n-\n     ReduceSinkOperator parentRS = (ReduceSinkOperator)stack.get(stack.size() - 2);\n \n     // remember the original parent list before we start modifying it.\n@@ -77,66 +82,72 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procContext,\n       context.mapJoinParentMap.put(mapJoinOp, parents);\n     }\n \n-    BaseWork myWork = null;\n-\n-    while (childOp != null) {\n-      if ((childOp instanceof ReduceSinkOperator) || (childOp instanceof FileSinkOperator)) {\n-        /*\n-         *  if there was a pre-existing work generated for the big-table mapjoin side,\n-         *  we need to hook the work generated for the RS (associated with the RS-MJ pattern)\n-         *  with the pre-existing work.\n-         *\n-         *  Otherwise, we need to associate that the reduce sink/file sink down the MJ path\n-         *  to be linked to the RS work (associated with the RS-MJ pattern).\n-         *\n-         */\n-\n-        myWork = context.operatorWorkMap.get(childOp);\n-        BaseWork parentWork = context.operatorWorkMap.get(parentRS);\n-\n-        // set the link between mapjoin and parent vertex\n-        int pos = context.mapJoinParentMap.get(mapJoinOp).indexOf(parentRS);\n-        if (pos == -1) {\n-          throw new SemanticException(\"Cannot find position of parent in mapjoin\");\n-        }\n-        LOG.debug(\"Mapjoin \"+mapJoinOp+\", pos: \"+pos+\" --> \"+parentWork.getName());\n-        mapJoinOp.getConf().getParentToInput().put(pos, parentWork.getName());\n-\n-        if (myWork != null) {\n-          // link the work with the work associated with the reduce sink that triggered this rule\n-          TezWork tezWork = context.currentTask.getWork();\n-          tezWork.connect(parentWork, myWork, EdgeType.BROADCAST_EDGE);\n-\n-          // remember the output name of the reduce sink\n-          parentRS.getConf().setOutputName(myWork.getName());\n-          context.connectedReduceSinks.add(parentRS);\n+    List<BaseWork> mapJoinWork = null;\n+\n+    /*\n+     *  if there was a pre-existing work generated for the big-table mapjoin side,\n+     *  we need to hook the work generated for the RS (associated with the RS-MJ pattern)\n+     *  with the pre-existing work.\n+     *\n+     *  Otherwise, we need to associate that the mapjoin op\n+     *  to be linked to the RS work (associated with the RS-MJ pattern).\n+     *\n+     */\n+    mapJoinWork = context.mapJoinWorkMap.get(mapJoinOp);\n+    BaseWork parentWork;\n+    if (context.unionWorkMap.containsKey(parentRS)) {\n+      parentWork = context.unionWorkMap.get(parentRS);\n+    } else {\n+      assert context.childToWorkMap.get(parentRS).size() == 1;\n+      parentWork = context.childToWorkMap.get(parentRS).get(0);\n+    }\n \n+    // set the link between mapjoin and parent vertex\n+    int pos = context.mapJoinParentMap.get(mapJoinOp).indexOf(parentRS);\n+    if (pos == -1) {\n+      throw new SemanticException(\"Cannot find position of parent in mapjoin\");\n+    }\n+    LOG.debug(\"Mapjoin \"+mapJoinOp+\", pos: \"+pos+\" --> \"+parentWork.getName());\n+    mapJoinOp.getConf().getParentToInput().put(pos, parentWork.getName());\n+\n+    if (mapJoinWork != null) {\n+      for (BaseWork myWork: mapJoinWork) {\n+        // link the work with the work associated with the reduce sink that triggered this rule\n+        TezWork tezWork = context.currentTask.getWork();\n+        LOG.debug(\"connecting \"+parentWork.getName()+\" with \"+myWork.getName());\n+        tezWork.connect(parentWork, myWork, EdgeType.BROADCAST_EDGE);\n+        \n+        ReduceSinkOperator r = null;\n+        if (parentRS.getConf().getOutputName() != null) {\n+          LOG.debug(\"Cloning reduce sink for multi-child broadcast edge\");\n+          // we've already set this one up. Need to clone for the next work.\n+          r = (ReduceSinkOperator) OperatorFactory.getAndMakeChild(\n+              (ReduceSinkDesc) parentRS.getConf().clone(), parentRS.getParentOperators());\n+          context.clonedReduceSinks.add(r);\n         } else {\n-          List<BaseWork> linkWorkList = context.linkOpWithWorkMap.get(childOp);\n-          if (linkWorkList == null) {\n-            linkWorkList = new ArrayList<BaseWork>();\n-          }\n-          linkWorkList.add(parentWork);\n-          context.linkOpWithWorkMap.put(childOp, linkWorkList);\n-\n-          List<ReduceSinkOperator> reduceSinks \n-            = context.linkWorkWithReduceSinkMap.get(parentWork);\n-          if (reduceSinks == null) {\n-            reduceSinks = new ArrayList<ReduceSinkOperator>();\n-          }\n-          reduceSinks.add(parentRS);\n-          context.linkWorkWithReduceSinkMap.put(parentWork, reduceSinks);\n+          r = parentRS;\n         }\n-\n-        break;\n+        // remember the output name of the reduce sink\n+        r.getConf().setOutputName(myWork.getName());\n+        context.connectedReduceSinks.add(r);\n       }\n+    }\n \n-      if ((childOp.getChildOperators() != null) && (childOp.getChildOperators().size() >= 1)) {\n-        childOp = childOp.getChildOperators().get(0);\n-      } else {\n-        break;\n-      }\n+    // remember in case we need to connect additional work later\n+    List<BaseWork> linkWorkList = context.linkOpWithWorkMap.get(mapJoinOp);\n+    if (linkWorkList == null) {\n+      linkWorkList = new ArrayList<BaseWork>();\n+    }\n+    linkWorkList.add(parentWork);\n+    context.linkOpWithWorkMap.put(mapJoinOp, linkWorkList);\n+    \n+    List<ReduceSinkOperator> reduceSinks \n+      = context.linkWorkWithReduceSinkMap.get(parentWork);\n+    if (reduceSinks == null) {\n+      reduceSinks = new ArrayList<ReduceSinkOperator>();\n     }\n+    reduceSinks.add(parentRS);\n+    context.linkWorkWithReduceSinkMap.put(parentWork, reduceSinks);\n \n     // create the dummy operators\n     List<Operator<? extends OperatorDesc>> dummyOperators =\n@@ -178,17 +189,18 @@ public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procContext,\n \n     // the \"work\" needs to know about the dummy operators. They have to be separately initialized\n     // at task startup\n-    if (myWork != null) {\n-      myWork.addDummyOp(dummyOp);\n-    } else {\n-      List<Operator<?>> dummyList = dummyOperators;\n-      if (context.linkChildOpWithDummyOp.containsKey(childOp)) {\n-        dummyList = context.linkChildOpWithDummyOp.get(childOp);\n+    if (mapJoinWork != null) {\n+      for (BaseWork myWork: mapJoinWork) {\n+        myWork.addDummyOp(dummyOp);\n+      }\n+    }\n+    if (context.linkChildOpWithDummyOp.containsKey(mapJoinOp)) {\n+      for (Operator<?> op: context.linkChildOpWithDummyOp.get(mapJoinOp)) {\n+        dummyOperators.add(op);\n       }\n-      dummyList.add(dummyOp);\n-      context.linkChildOpWithDummyOp.put(childOp, dummyList);\n     }\n+    context.linkChildOpWithDummyOp.put(mapJoinOp, dummyOperators);\n+\n     return true;\n   }\n-\n }",
                "deletions": 66
            },
            {
                "sha": "ec21aa8e07dd872d32fe7286b2e7538e8e628a8a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezProcContext.java",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezProcContext.java",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezProcContext.java",
                "status": "modified",
                "changes": 16,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezProcContext.java?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -95,12 +95,15 @@\n   // map join work\n   public final Map<BaseWork, List<ReduceSinkOperator>> linkWorkWithReduceSinkMap;\n \n-  // a map that maintains operator (file-sink or reduce-sink) to work mapping\n-  public final Map<Operator<?>, BaseWork> operatorWorkMap;\n+  // map that says which mapjoin belongs to which work item\n+  public final Map<MapJoinOperator, List<BaseWork>> mapJoinWorkMap;\n \n   // a map to keep track of which root generated which work\n   public final Map<Operator<?>, BaseWork> rootToWorkMap;\n \n+  // a map to keep track of which child generated with work\n+  public final Map<Operator<?>, List<BaseWork>> childToWorkMap;\n+\n   // we need to keep the original list of operators in the map join to know\n   // what position in the mapjoin the different parent work items will have.\n   public final Map<MapJoinOperator, List<Operator<?>>> mapJoinParentMap;\n@@ -111,10 +114,14 @@\n   // used to group dependent tasks for multi table inserts\n   public final DependencyCollectionTask dependencyTask;\n \n+  // remember map joins as we encounter them.\n+  public final Set<MapJoinOperator> currentMapJoinOperators;\n+\n   // used to hook up unions\n   public final Map<Operator<?>, BaseWork> unionWorkMap;\n   public final List<UnionOperator> currentUnionOperators;\n   public final Set<BaseWork> workWithUnionOperators;\n+  public final Set<ReduceSinkOperator> clonedReduceSinks;\n \n   // we link filesink that will write to the same final location\n   public final Map<Path, List<FileSinkDesc>> linkedFileSinks;\n@@ -139,15 +146,18 @@ public GenTezProcContext(HiveConf conf, ParseContext parseContext,\n     this.leafOperatorToFollowingWork = new HashMap<Operator<?>, BaseWork>();\n     this.linkOpWithWorkMap = new HashMap<Operator<?>, List<BaseWork>>();\n     this.linkWorkWithReduceSinkMap = new HashMap<BaseWork, List<ReduceSinkOperator>>();\n-    this.operatorWorkMap = new HashMap<Operator<?>, BaseWork>();\n+    this.mapJoinWorkMap = new HashMap<MapJoinOperator, List<BaseWork>>();\n     this.rootToWorkMap = new HashMap<Operator<?>, BaseWork>();\n+    this.childToWorkMap = new HashMap<Operator<?>, List<BaseWork>>();\n     this.mapJoinParentMap = new HashMap<MapJoinOperator, List<Operator<?>>>();\n+    this.currentMapJoinOperators = new HashSet<MapJoinOperator>();\n     this.linkChildOpWithDummyOp = new HashMap<Operator<?>, List<Operator<?>>>();\n     this.dependencyTask = (DependencyCollectionTask)\n         TaskFactory.get(new DependencyCollectionWork(), conf);\n     this.unionWorkMap = new HashMap<Operator<?>, BaseWork>();\n     this.currentUnionOperators = new LinkedList<UnionOperator>();\n     this.workWithUnionOperators = new HashSet<BaseWork>();\n+    this.clonedReduceSinks = new HashSet<ReduceSinkOperator>();\n     this.linkedFileSinks = new HashMap<Path, List<FileSinkDesc>>();\n     this.fileSinkSet = new HashSet<FileSinkOperator>();\n     this.connectedReduceSinks = new HashSet<ReduceSinkOperator>();",
                "deletions": 3
            },
            {
                "sha": "f0b3fdf612c876db4297839ab195c66c25e485a7",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezWork.java",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezWork.java",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezWork.java",
                "status": "modified",
                "changes": 108,
                "additions": 75,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/GenTezWork.java?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -29,7 +29,9 @@\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.hive.ql.exec.FileSinkOperator;\n import org.apache.hadoop.hive.ql.exec.HashTableDummyOperator;\n+import org.apache.hadoop.hive.ql.exec.MapJoinOperator;\n import org.apache.hadoop.hive.ql.exec.Operator;\n+import org.apache.hadoop.hive.ql.exec.OperatorFactory;\n import org.apache.hadoop.hive.ql.exec.ReduceSinkOperator;\n import org.apache.hadoop.hive.ql.exec.TableScanOperator;\n import org.apache.hadoop.hive.ql.exec.UnionOperator;\n@@ -41,6 +43,7 @@\n import org.apache.hadoop.hive.ql.plan.BaseWork;\n import org.apache.hadoop.hive.ql.plan.MapWork;\n import org.apache.hadoop.hive.ql.plan.OperatorDesc;\n+import org.apache.hadoop.hive.ql.plan.ReduceSinkDesc;\n import org.apache.hadoop.hive.ql.plan.ReduceWork;\n import org.apache.hadoop.hive.ql.plan.TezWork;\n import org.apache.hadoop.hive.ql.plan.UnionWork;\n@@ -87,6 +90,12 @@ public Object process(Node nd, Stack<Node> stack,\n     LOG.debug(\"Root operator: \" + root);\n     LOG.debug(\"Leaf operator: \" + operator);\n \n+    if (context.clonedReduceSinks.contains(operator)) {\n+      // if we're visiting a terminal we've created ourselves,\n+      // just skip and keep going\n+      return null;\n+    }\n+\n     TezWork tezWork = context.currentTask.getWork();\n \n     // Right now the work graph is pretty simple. If there is no\n@@ -112,42 +121,75 @@ public Object process(Node nd, Stack<Node> stack,\n       }\n       context.rootToWorkMap.put(root, work);\n     }\n-    context.operatorWorkMap.put(operator, work);\n-\n-    /*\n-     * this happens in case of map join operations.\n-     * The tree looks like this:\n-     *\n-     *       RS <--- we are here perhaps\n-     *       |\n-     *    MapJoin\n-     *    /     \\\n-     *  RS       TS\n-     *  /\n-     * TS\n-     *\n-     * If we are at the RS pointed above, and we may have already visited the\n-     * RS following the TS, we have already generated work for the TS-RS.\n-     * We need to hook the current work to this generated work.\n-     */\n-    List<BaseWork> linkWorkList = context.linkOpWithWorkMap.get(operator);\n-    if (linkWorkList != null) {\n-      if (context.linkChildOpWithDummyOp.containsKey(operator)) {\n-        for (Operator<?> dummy: context.linkChildOpWithDummyOp.get(operator)) {\n-          work.addDummyOp((HashTableDummyOperator) dummy);\n+\n+    if (!context.childToWorkMap.containsKey(operator)) {\n+      List<BaseWork> workItems = new LinkedList<BaseWork>();\n+      workItems.add(work);\n+      context.childToWorkMap.put(operator, workItems);\n+    } else {\n+      context.childToWorkMap.get(operator).add(work);\n+    }\n+\n+    // remember which mapjoin operator links with which work\n+    if (!context.currentMapJoinOperators.isEmpty()) {\n+      for (MapJoinOperator mj: context.currentMapJoinOperators) {\n+        LOG.debug(\"Processing map join: \" + mj);\n+        // remember the mapping in case we scan another branch of the \n+        // mapjoin later\n+        if (!context.mapJoinWorkMap.containsKey(mj)) {\n+          List<BaseWork> workItems = new LinkedList<BaseWork>();\n+          workItems.add(work);\n+          context.mapJoinWorkMap.put(mj, workItems);\n+        } else {\n+          context.mapJoinWorkMap.get(mj).add(work);\n         }\n-      }\n-      for (BaseWork parentWork : linkWorkList) {\n-        tezWork.connect(parentWork, work, EdgeType.BROADCAST_EDGE);\n-\n-        // need to set up output name for reduce sink now that we know the name\n-        // of the downstream work\n-        for (ReduceSinkOperator r:\n-               context.linkWorkWithReduceSinkMap.get(parentWork)) {\n-          r.getConf().setOutputName(work.getName());\n-          context.connectedReduceSinks.add(r);\n+\n+        /*\n+         * this happens in case of map join operations.\n+         * The tree looks like this:\n+         *\n+         *        RS <--- we are here perhaps\n+         *        |\n+         *     MapJoin\n+         *     /     \\\n+         *   RS       TS\n+         *  /\n+         * TS\n+         *\n+         * If we are at the RS pointed above, and we may have already visited the\n+         * RS following the TS, we have already generated work for the TS-RS.\n+         * We need to hook the current work to this generated work.\n+         */\n+        List<BaseWork> linkWorkList = context.linkOpWithWorkMap.get(mj);\n+        if (linkWorkList != null) {\n+          if (context.linkChildOpWithDummyOp.containsKey(mj)) {\n+            for (Operator<?> dummy: context.linkChildOpWithDummyOp.get(mj)) {\n+              work.addDummyOp((HashTableDummyOperator) dummy);\n+            }\n+          }\n+          for (BaseWork parentWork : linkWorkList) {\n+            LOG.debug(\"connecting \"+parentWork.getName()+\" with \"+work.getName());\n+            tezWork.connect(parentWork, work, EdgeType.BROADCAST_EDGE);\n+\n+            // need to set up output name for reduce sink now that we know the name\n+            // of the downstream work\n+            for (ReduceSinkOperator r:\n+                   context.linkWorkWithReduceSinkMap.get(parentWork)) {\n+              if (r.getConf().getOutputName() != null) {\n+                LOG.debug(\"Cloning reduce sink for multi-child broadcast edge\");\n+                // we've already set this one up. Need to clone for the next work.\n+                r = (ReduceSinkOperator) OperatorFactory.getAndMakeChild(\n+                    (ReduceSinkDesc)r.getConf().clone(), r.getParentOperators());\n+                context.clonedReduceSinks.add(r);\n+              }\n+              r.getConf().setOutputName(work.getName());\n+              context.connectedReduceSinks.add(r);\n+            }\n+          }\n         }\n       }\n+      // clear out the set. we don't need it anymore.\n+      context.currentMapJoinOperators.clear();\n     }\n \n     // This is where we cut the tree as described above. We also remember that",
                "deletions": 33
            },
            {
                "sha": "e1ce79a41bf475ba2b0fcd98d8e5ab7329db6d0a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/TezCompiler.java",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/parse/TezCompiler.java",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/parse/TezCompiler.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/TezCompiler.java?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -143,7 +143,6 @@ protected void generateTaskTree(List<Task<? extends Serializable>> rootTasks, Pa\n         genTezWork);\n \n     opRules.put(new RuleRegExp(\"No more walking on ReduceSink-MapJoin\",\n-        ReduceSinkOperator.getOperatorName() + \"%\" +\n         MapJoinOperator.getOperatorName() + \"%\"), new ReduceSinkMapJoinProc());\n \n     opRules.put(new RuleRegExp(\"Split Work + Move/Merge - FileSink\",\n@@ -154,7 +153,7 @@ protected void generateTaskTree(List<Task<? extends Serializable>> rootTasks, Pa\n         TableScanOperator.getOperatorName() + \"%\"),\n         new ProcessAnalyzeTable(GenTezUtils.getUtils()));\n \n-    opRules.put(new RuleRegExp(\"Handle union\",\n+    opRules.put(new RuleRegExp(\"Remember union\",\n         UnionOperator.getOperatorName() + \"%\"), new NodeProcessor()\n     {\n       @Override",
                "deletions": 2
            },
            {
                "sha": "157d07283ba9d752108c860f4ba5f04cc7130382",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/plan/ReduceSinkDesc.java",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/plan/ReduceSinkDesc.java",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/java/org/apache/hadoop/hive/ql/plan/ReduceSinkDesc.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/plan/ReduceSinkDesc.java?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -132,6 +132,7 @@ public Object clone() {\n     desc.setValueSerializeInfo((TableDesc) getValueSerializeInfo().clone());\n     desc.setNumBuckets(numBuckets);\n     desc.setBucketCols(bucketCols);\n+    desc.setStatistics(this.getStatistics());\n     return desc;\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "f80d94c4a15fd1288ea6b0845b2896de438e0c23",
                "filename": "ql/src/test/queries/clientpositive/tez_union.q",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/queries/clientpositive/tez_union.q",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/queries/clientpositive/tez_union.q",
                "status": "modified",
                "changes": 75,
                "additions": 74,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/tez_union.q?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -5,17 +5,90 @@ select s1.key as key, s1.value as value from src s1 join src s3 on s1.key=s3.key\n UNION  ALL  \n select s2.key as key, s2.value as value from src s2;\n \n+create table ut as\n select s1.key as key, s1.value as value from src s1 join src s3 on s1.key=s3.key\n UNION  ALL  \n select s2.key as key, s2.value as value from src s2;\n \n+select * from ut order by key, value limit 20;\n+drop table ut;\n+\n set hive.auto.convert.join=false;\n \n explain\n with u as (select * from src union all select * from src)\n select count(*) from (select u1.key as k1, u2.key as k2 from\n u as u1 join u as u2 on (u1.key = u2.key)) a;\n \n+create table ut as\n with u as (select * from src union all select * from src)\n-select count(*) from (select u1.key as k1, u2.key as k2 from\n+select count(*) as cnt from (select u1.key as k1, u2.key as k2 from\n u as u1 join u as u2 on (u1.key = u2.key)) a;\n+\n+select * from ut order by cnt limit 20;\n+drop table ut;\n+\n+set hive.auto.convert.join=true;\n+\n+explain select s1.key as skey, u1.key as ukey from\n+src s1\n+join (select * from src union all select * from src) u1 on s1.key = u1.key;\n+\n+create table ut as\n+select s1.key as skey, u1.key as ukey from\n+src s1\n+join (select * from src union all select * from src) u1 on s1.key = u1.key;\n+\n+select * from ut order by skey, ukey limit 20;\n+drop table ut;\n+\n+explain select s1.key as skey, u1.key as ukey, s8.key as lkey from \n+src s1\n+join (select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+      union all select s4.key from src s4 join src s5 on s4.key = s5.key\n+      union all select s6.key from src s6 join src s7 on s6.key = s7.key) u1 on (s1.key = u1.key)\n+join src s8 on (u1.key = s8.key)\n+order by lkey;\n+\n+create table ut as\n+select s1.key as skey, u1.key as ukey, s8.key as lkey from \n+src s1\n+join (select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+      union all select s4.key from src s4 join src s5 on s4.key = s5.key\n+      union all select s6.key from src s6 join src s7 on s6.key = s7.key) u1 on (s1.key = u1.key)\n+join src s8 on (u1.key = s8.key)\n+order by lkey;\n+\n+select * from ut order by skey, ukey, lkey limit 100;\n+\n+drop table ut;\n+\n+explain\n+select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+union all select s4.key from src s4 join src s5 on s4.key = s5.key;\n+\n+create table ut as\n+select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+union all select s4.key from src s4 join src s5 on s4.key = s5.key;\n+\n+select * from ut order by key limit 30;\n+\n+drop table ut;\n+\n+explain\n+select * from\n+(select * from src union all select * from src) u\n+left outer join src s on u.key = s.key;\n+\n+explain\n+select u.key as ukey, s.key as skey from\n+(select * from src union all select * from src) u\n+right outer join src s on u.key = s.key;\n+\n+create table ut as\n+select u.key as ukey, s.key as skey from\n+(select * from src union all select * from src) u\n+right outer join src s on u.key = s.key;\n+\n+select * from ut order by ukey, skey limit 20;\n+drop table ut;\n\\ No newline at end of file",
                "deletions": 1
            },
            {
                "sha": "ea0f1b9b4dbecef7b80d5f15396b3991c41ed8ca",
                "filename": "ql/src/test/results/clientpositive/tez/load_dyn_part1.q.out",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/load_dyn_part1.q.out",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/load_dyn_part1.q.out",
                "status": "modified",
                "changes": 3741,
                "additions": 1882,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/load_dyn_part1.q.out?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "deletions": 1859
            },
            {
                "sha": "75de746b7edfd2c6fdfc0f20e6ae08d6a5452877",
                "filename": "ql/src/test/results/clientpositive/tez/load_dyn_part3.q.out",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/load_dyn_part3.q.out",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/load_dyn_part3.q.out",
                "status": "modified",
                "changes": 1872,
                "additions": 942,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/load_dyn_part3.q.out?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -44,6 +44,8 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Tez\n+      Edges:\n+        Reducer 2 <- Map 1 (SIMPLE_EDGE)\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n@@ -55,14 +57,24 @@ STAGE PLANS:\n                     expressions: key (type: string), value (type: string), ds (type: string), hr (type: string)\n                     outputColumnNames: _col0, _col1, _col2, _col3\n                     Statistics: Num rows: 116 Data size: 23248 Basic stats: COMPLETE Column stats: NONE\n-                    File Output Operator\n-                      compressed: false\n+                    Reduce Output Operator\n+                      key expressions: _col2 (type: string), _col3 (type: string)\n+                      sort order: ++\n+                      Map-reduce partition columns: _col2 (type: string), _col3 (type: string)\n                       Statistics: Num rows: 116 Data size: 23248 Basic stats: COMPLETE Column stats: NONE\n-                      table:\n-                          input format: org.apache.hadoop.mapred.TextInputFormat\n-                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n-                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n-                          name: default.nzhang_part3\n+                      value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)\n+        Reducer 2 \n+            Reduce Operator Tree:\n+              Extract\n+                Statistics: Num rows: 116 Data size: 23248 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 116 Data size: 23248 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                      name: default.nzhang_part3\n \n   Stage: Stage-2\n     Dependency Collection\n@@ -634,1006 +646,1006 @@ POSTHOOK: Lineage: nzhang_part3 PARTITION(ds=2008-04-09,hr=12).value SIMPLE [(sr\n 400\tval_400\t2008-04-08\t11\n 200\tval_200\t2008-04-08\t11\n 97\tval_97\t2008-04-08\t11\n-238\tval_238\t2008-04-08\t12\n-86\tval_86\t2008-04-08\t12\n-311\tval_311\t2008-04-08\t12\n-27\tval_27\t2008-04-08\t12\n-165\tval_165\t2008-04-08\t12\n-409\tval_409\t2008-04-08\t12\n-255\tval_255\t2008-04-08\t12\n-278\tval_278\t2008-04-08\t12\n-98\tval_98\t2008-04-08\t12\n-484\tval_484\t2008-04-08\t12\n-265\tval_265\t2008-04-08\t12\n-193\tval_193\t2008-04-08\t12\n-401\tval_401\t2008-04-08\t12\n-150\tval_150\t2008-04-08\t12\n-273\tval_273\t2008-04-08\t12\n-224\tval_224\t2008-04-08\t12\n-369\tval_369\t2008-04-08\t12\n-66\tval_66\t2008-04-08\t12\n-128\tval_128\t2008-04-08\t12\n-213\tval_213\t2008-04-08\t12\n-146\tval_146\t2008-04-08\t12\n-406\tval_406\t2008-04-08\t12\n-429\tval_429\t2008-04-08\t12\n-374\tval_374\t2008-04-08\t12\n+97\tval_97\t2008-04-08\t12\n+200\tval_200\t2008-04-08\t12\n+400\tval_400\t2008-04-08\t12\n+403\tval_403\t2008-04-08\t12\n+169\tval_169\t2008-04-08\t12\n+90\tval_90\t2008-04-08\t12\n+126\tval_126\t2008-04-08\t12\n+222\tval_222\t2008-04-08\t12\n+477\tval_477\t2008-04-08\t12\n+414\tval_414\t2008-04-08\t12\n+194\tval_194\t2008-04-08\t12\n+307\tval_307\t2008-04-08\t12\n+348\tval_348\t2008-04-08\t12\n 152\tval_152\t2008-04-08\t12\n-469\tval_469\t2008-04-08\t12\n-145\tval_145\t2008-04-08\t12\n-495\tval_495\t2008-04-08\t12\n+448\tval_448\t2008-04-08\t12\n 37\tval_37\t2008-04-08\t12\n-327\tval_327\t2008-04-08\t12\n+28\tval_28\t2008-04-08\t12\n+84\tval_84\t2008-04-08\t12\n+315\tval_315\t2008-04-08\t12\n+469\tval_469\t2008-04-08\t12\n+97\tval_97\t2008-04-08\t12\n+344\tval_344\t2008-04-08\t12\n 281\tval_281\t2008-04-08\t12\n-277\tval_277\t2008-04-08\t12\n-209\tval_209\t2008-04-08\t12\n-15\tval_15\t2008-04-08\t12\n-82\tval_82\t2008-04-08\t12\n-403\tval_403\t2008-04-08\t12\n-166\tval_166\t2008-04-08\t12\n-417\tval_417\t2008-04-08\t12\n-430\tval_430\t2008-04-08\t12\n-252\tval_252\t2008-04-08\t12\n-292\tval_292\t2008-04-08\t12\n-219\tval_219\t2008-04-08\t12\n-287\tval_287\t2008-04-08\t12\n-153\tval_153\t2008-04-08\t12\n-193\tval_193\t2008-04-08\t12\n-338\tval_338\t2008-04-08\t12\n-446\tval_446\t2008-04-08\t12\n-459\tval_459\t2008-04-08\t12\n-394\tval_394\t2008-04-08\t12\n-237\tval_237\t2008-04-08\t12\n-482\tval_482\t2008-04-08\t12\n-174\tval_174\t2008-04-08\t12\n-413\tval_413\t2008-04-08\t12\n-494\tval_494\t2008-04-08\t12\n+183\tval_183\t2008-04-08\t12\n+273\tval_273\t2008-04-08\t12\n+18\tval_18\t2008-04-08\t12\n+167\tval_167\t2008-04-08\t12\n+348\tval_348\t2008-04-08\t12\n+285\tval_285\t2008-04-08\t12\n+186\tval_186\t2008-04-08\t12\n+362\tval_362\t2008-04-08\t12\n+458\tval_458\t2008-04-08\t12\n+146\tval_146\t2008-04-08\t12\n+498\tval_498\t2008-04-08\t12\n+341\tval_341\t2008-04-08\t12\n+9\tval_9\t2008-04-08\t12\n+298\tval_298\t2008-04-08\t12\n+100\tval_100\t2008-04-08\t12\n+492\tval_492\t2008-04-08\t12\n+462\tval_462\t2008-04-08\t12\n+18\tval_18\t2008-04-08\t12\n+379\tval_379\t2008-04-08\t12\n+384\tval_384\t2008-04-08\t12\n+67\tval_67\t2008-04-08\t12\n+134\tval_134\t2008-04-08\t12\n+26\tval_26\t2008-04-08\t12\n+256\tval_256\t2008-04-08\t12\n+384\tval_384\t2008-04-08\t12\n+407\tval_407\t2008-04-08\t12\n+421\tval_421\t2008-04-08\t12\n+401\tval_401\t2008-04-08\t12\n+375\tval_375\t2008-04-08\t12\n+454\tval_454\t2008-04-08\t12\n+189\tval_189\t2008-04-08\t12\n+175\tval_175\t2008-04-08\t12\n+133\tval_133\t2008-04-08\t12\n+406\tval_406\t2008-04-08\t12\n+233\tval_233\t2008-04-08\t12\n+462\tval_462\t2008-04-08\t12\n+214\tval_214\t2008-04-08\t12\n+172\tval_172\t2008-04-08\t12\n+353\tval_353\t2008-04-08\t12\n+136\tval_136\t2008-04-08\t12\n+83\tval_83\t2008-04-08\t12\n+480\tval_480\t2008-04-08\t12\n+265\tval_265\t2008-04-08\t12\n+249\tval_249\t2008-04-08\t12\n 207\tval_207\t2008-04-08\t12\n+460\tval_460\t2008-04-08\t12\n+493\tval_493\t2008-04-08\t12\n+333\tval_333\t2008-04-08\t12\n+317\tval_317\t2008-04-08\t12\n+310\tval_310\t2008-04-08\t12\n+468\tval_468\t2008-04-08\t12\n+178\tval_178\t2008-04-08\t12\n+478\tval_478\t2008-04-08\t12\n+230\tval_230\t2008-04-08\t12\n+277\tval_277\t2008-04-08\t12\n+325\tval_325\t2008-04-08\t12\n+323\tval_323\t2008-04-08\t12\n+443\tval_443\t2008-04-08\t12\n+169\tval_169\t2008-04-08\t12\n+429\tval_429\t2008-04-08\t12\n+120\tval_120\t2008-04-08\t12\n+444\tval_444\t2008-04-08\t12\n 199\tval_199\t2008-04-08\t12\n-466\tval_466\t2008-04-08\t12\n-208\tval_208\t2008-04-08\t12\n-174\tval_174\t2008-04-08\t12\n-399\tval_399\t2008-04-08\t12\n-396\tval_396\t2008-04-08\t12\n-247\tval_247\t2008-04-08\t12\n 417\tval_417\t2008-04-08\t12\n-489\tval_489\t2008-04-08\t12\n-162\tval_162\t2008-04-08\t12\n-377\tval_377\t2008-04-08\t12\n-397\tval_397\t2008-04-08\t12\n-309\tval_309\t2008-04-08\t12\n-365\tval_365\t2008-04-08\t12\n-266\tval_266\t2008-04-08\t12\n+305\tval_305\t2008-04-08\t12\n+479\tval_479\t2008-04-08\t12\n+248\tval_248\t2008-04-08\t12\n+360\tval_360\t2008-04-08\t12\n 439\tval_439\t2008-04-08\t12\n-342\tval_342\t2008-04-08\t12\n-367\tval_367\t2008-04-08\t12\n-325\tval_325\t2008-04-08\t12\n-167\tval_167\t2008-04-08\t12\n-195\tval_195\t2008-04-08\t12\n-475\tval_475\t2008-04-08\t12\n-17\tval_17\t2008-04-08\t12\n-113\tval_113\t2008-04-08\t12\n-155\tval_155\t2008-04-08\t12\n-203\tval_203\t2008-04-08\t12\n-339\tval_339\t2008-04-08\t12\n-0\tval_0\t2008-04-08\t12\n-455\tval_455\t2008-04-08\t12\n-128\tval_128\t2008-04-08\t12\n-311\tval_311\t2008-04-08\t12\n-316\tval_316\t2008-04-08\t12\n-57\tval_57\t2008-04-08\t12\n-302\tval_302\t2008-04-08\t12\n-205\tval_205\t2008-04-08\t12\n-149\tval_149\t2008-04-08\t12\n+237\tval_237\t2008-04-08\t12\n+491\tval_491\t2008-04-08\t12\n+200\tval_200\t2008-04-08\t12\n+414\tval_414\t2008-04-08\t12\n+119\tval_119\t2008-04-08\t12\n 438\tval_438\t2008-04-08\t12\n-345\tval_345\t2008-04-08\t12\n-129\tval_129\t2008-04-08\t12\n-170\tval_170\t2008-04-08\t12\n-20\tval_20\t2008-04-08\t12\n-489\tval_489\t2008-04-08\t12\n-157\tval_157\t2008-04-08\t12\n-378\tval_378\t2008-04-08\t12\n-221\tval_221\t2008-04-08\t12\n-92\tval_92\t2008-04-08\t12\n-111\tval_111\t2008-04-08\t12\n-47\tval_47\t2008-04-08\t12\n-72\tval_72\t2008-04-08\t12\n-4\tval_4\t2008-04-08\t12\n-280\tval_280\t2008-04-08\t12\n-35\tval_35\t2008-04-08\t12\n-427\tval_427\t2008-04-08\t12\n-277\tval_277\t2008-04-08\t12\n-208\tval_208\t2008-04-08\t12\n-356\tval_356\t2008-04-08\t12\n-399\tval_399\t2008-04-08\t12\n-169\tval_169\t2008-04-08\t12\n+163\tval_163\t2008-04-08\t12\n+70\tval_70\t2008-04-08\t12\n+104\tval_104\t2008-04-08\t12\n+255\tval_255\t2008-04-08\t12\n+351\tval_351\t2008-04-08\t12\n+24\tval_24\t2008-04-08\t12\n+291\tval_291\t2008-04-08\t12\n+480\tval_480\t2008-04-08\t12\n+397\tval_397\t2008-04-08\t12\n+70\tval_70\t2008-04-08\t12\n+5\tval_5\t2008-04-08\t12\n 382\tval_382\t2008-04-08\t12\n-498\tval_498\t2008-04-08\t12\n-125\tval_125\t2008-04-08\t12\n-386\tval_386\t2008-04-08\t12\n-437\tval_437\t2008-04-08\t12\n-469\tval_469\t2008-04-08\t12\n-192\tval_192\t2008-04-08\t12\n-286\tval_286\t2008-04-08\t12\n 187\tval_187\t2008-04-08\t12\n-176\tval_176\t2008-04-08\t12\n-54\tval_54\t2008-04-08\t12\n-459\tval_459\t2008-04-08\t12\n-51\tval_51\t2008-04-08\t12\n-138\tval_138\t2008-04-08\t12\n-103\tval_103\t2008-04-08\t12\n-239\tval_239\t2008-04-08\t12\n-213\tval_213\t2008-04-08\t12\n-216\tval_216\t2008-04-08\t12\n-430\tval_430\t2008-04-08\t12\n-278\tval_278\t2008-04-08\t12\n-176\tval_176\t2008-04-08\t12\n-289\tval_289\t2008-04-08\t12\n-221\tval_221\t2008-04-08\t12\n-65\tval_65\t2008-04-08\t12\n-318\tval_318\t2008-04-08\t12\n-332\tval_332\t2008-04-08\t12\n-311\tval_311\t2008-04-08\t12\n-275\tval_275\t2008-04-08\t12\n-137\tval_137\t2008-04-08\t12\n-241\tval_241\t2008-04-08\t12\n-83\tval_83\t2008-04-08\t12\n-333\tval_333\t2008-04-08\t12\n-180\tval_180\t2008-04-08\t12\n-284\tval_284\t2008-04-08\t12\n+424\tval_424\t2008-04-08\t12\n+164\tval_164\t2008-04-08\t12\n+431\tval_431\t2008-04-08\t12\n+125\tval_125\t2008-04-08\t12\n+298\tval_298\t2008-04-08\t12\n+478\tval_478\t2008-04-08\t12\n+454\tval_454\t2008-04-08\t12\n+431\tval_431\t2008-04-08\t12\n+164\tval_164\t2008-04-08\t12\n+217\tval_217\t2008-04-08\t12\n+201\tval_201\t2008-04-08\t12\n+396\tval_396\t2008-04-08\t12\n 12\tval_12\t2008-04-08\t12\n-230\tval_230\t2008-04-08\t12\n-181\tval_181\t2008-04-08\t12\n-67\tval_67\t2008-04-08\t12\n-260\tval_260\t2008-04-08\t12\n-404\tval_404\t2008-04-08\t12\n-384\tval_384\t2008-04-08\t12\n-489\tval_489\t2008-04-08\t12\n-353\tval_353\t2008-04-08\t12\n-373\tval_373\t2008-04-08\t12\n-272\tval_272\t2008-04-08\t12\n-138\tval_138\t2008-04-08\t12\n-217\tval_217\t2008-04-08\t12\n-84\tval_84\t2008-04-08\t12\n+424\tval_424\t2008-04-08\t12\n 348\tval_348\t2008-04-08\t12\n+262\tval_262\t2008-04-08\t12\n+203\tval_203\t2008-04-08\t12\n+90\tval_90\t2008-04-08\t12\n+258\tval_258\t2008-04-08\t12\n+114\tval_114\t2008-04-08\t12\n+401\tval_401\t2008-04-08\t12\n+406\tval_406\t2008-04-08\t12\n+190\tval_190\t2008-04-08\t12\n+409\tval_409\t2008-04-08\t12\n+406\tval_406\t2008-04-08\t12\n+257\tval_257\t2008-04-08\t12\n+105\tval_105\t2008-04-08\t12\n+53\tval_53\t2008-04-08\t12\n+483\tval_483\t2008-04-08\t12\n+403\tval_403\t2008-04-08\t12\n+175\tval_175\t2008-04-08\t12\n+366\tval_366\t2008-04-08\t12\n 466\tval_466\t2008-04-08\t12\n-58\tval_58\t2008-04-08\t12\n-8\tval_8\t2008-04-08\t12\n-411\tval_411\t2008-04-08\t12\n-230\tval_230\t2008-04-08\t12\n-208\tval_208\t2008-04-08\t12\n-348\tval_348\t2008-04-08\t12\n-24\tval_24\t2008-04-08\t12\n+104\tval_104\t2008-04-08\t12\n+335\tval_335\t2008-04-08\t12\n+321\tval_321\t2008-04-08\t12\n+193\tval_193\t2008-04-08\t12\n+44\tval_44\t2008-04-08\t12\n+80\tval_80\t2008-04-08\t12\n+235\tval_235\t2008-04-08\t12\n+331\tval_331\t2008-04-08\t12\n+283\tval_283\t2008-04-08\t12\n+35\tval_35\t2008-04-08\t12\n+2\tval_2\t2008-04-08\t12\n+280\tval_280\t2008-04-08\t12\n 463\tval_463\t2008-04-08\t12\n-431\tval_431\t2008-04-08\t12\n-179\tval_179\t2008-04-08\t12\n-172\tval_172\t2008-04-08\t12\n-42\tval_42\t2008-04-08\t12\n-129\tval_129\t2008-04-08\t12\n-158\tval_158\t2008-04-08\t12\n-119\tval_119\t2008-04-08\t12\n-496\tval_496\t2008-04-08\t12\n-0\tval_0\t2008-04-08\t12\n-322\tval_322\t2008-04-08\t12\n-197\tval_197\t2008-04-08\t12\n-468\tval_468\t2008-04-08\t12\n-393\tval_393\t2008-04-08\t12\n-454\tval_454\t2008-04-08\t12\n-100\tval_100\t2008-04-08\t12\n-298\tval_298\t2008-04-08\t12\n-199\tval_199\t2008-04-08\t12\n+469\tval_469\t2008-04-08\t12\n+229\tval_229\t2008-04-08\t12\n+316\tval_316\t2008-04-08\t12\n+202\tval_202\t2008-04-08\t12\n+432\tval_432\t2008-04-08\t12\n+467\tval_467\t2008-04-08\t12\n+128\tval_128\t2008-04-08\t12\n+438\tval_438\t2008-04-08\t12\n+244\tval_244\t2008-04-08\t12\n+5\tval_5\t2008-04-08\t12\n 191\tval_191\t2008-04-08\t12\n-418\tval_418\t2008-04-08\t12\n-96\tval_96\t2008-04-08\t12\n-26\tval_26\t2008-04-08\t12\n-165\tval_165\t2008-04-08\t12\n-327\tval_327\t2008-04-08\t12\n+288\tval_288\t2008-04-08\t12\n+401\tval_401\t2008-04-08\t12\n+480\tval_480\t2008-04-08\t12\n+487\tval_487\t2008-04-08\t12\n+70\tval_70\t2008-04-08\t12\n+263\tval_263\t2008-04-08\t12\n+256\tval_256\t2008-04-08\t12\n+223\tval_223\t2008-04-08\t12\n+116\tval_116\t2008-04-08\t12\n+485\tval_485\t2008-04-08\t12\n+239\tval_239\t2008-04-08\t12\n+219\tval_219\t2008-04-08\t12\n+274\tval_274\t2008-04-08\t12\n+167\tval_167\t2008-04-08\t12\n+344\tval_344\t2008-04-08\t12\n+367\tval_367\t2008-04-08\t12\n+216\tval_216\t2008-04-08\t12\n+113\tval_113\t2008-04-08\t12\n+296\tval_296\t2008-04-08\t12\n+103\tval_103\t2008-04-08\t12\n+368\tval_368\t2008-04-08\t12\n+33\tval_33\t2008-04-08\t12\n 230\tval_230\t2008-04-08\t12\n-205\tval_205\t2008-04-08\t12\n-120\tval_120\t2008-04-08\t12\n-131\tval_131\t2008-04-08\t12\n-51\tval_51\t2008-04-08\t12\n-404\tval_404\t2008-04-08\t12\n-43\tval_43\t2008-04-08\t12\n-436\tval_436\t2008-04-08\t12\n-156\tval_156\t2008-04-08\t12\n-469\tval_469\t2008-04-08\t12\n+69\tval_69\t2008-04-08\t12\n+342\tval_342\t2008-04-08\t12\n+74\tval_74\t2008-04-08\t12\n+76\tval_76\t2008-04-08\t12\n 468\tval_468\t2008-04-08\t12\n-308\tval_308\t2008-04-08\t12\n+64\tval_64\t2008-04-08\t12\n+209\tval_209\t2008-04-08\t12\n+30\tval_30\t2008-04-08\t12\n+453\tval_453\t2008-04-08\t12\n+138\tval_138\t2008-04-08\t12\n+228\tval_228\t2008-04-08\t12\n+218\tval_218\t2008-04-08\t12\n+449\tval_449\t2008-04-08\t12\n+149\tval_149\t2008-04-08\t12\n+492\tval_492\t2008-04-08\t12\n+223\tval_223\t2008-04-08\t12\n+41\tval_41\t2008-04-08\t12\n+76\tval_76\t2008-04-08\t12\n+78\tval_78\t2008-04-08\t12\n+458\tval_458\t2008-04-08\t12\n+489\tval_489\t2008-04-08\t12\n+119\tval_119\t2008-04-08\t12\n+430\tval_430\t2008-04-08\t12\n+321\tval_321\t2008-04-08\t12\n+42\tval_42\t2008-04-08\t12\n+195\tval_195\t2008-04-08\t12\n+160\tval_160\t2008-04-08\t12\n+498\tval_498\t2008-04-08\t12\n+322\tval_322\t2008-04-08\t12\n+472\tval_472\t2008-04-08\t12\n+143\tval_143\t2008-04-08\t12\n+233\tval_233\t2008-04-08\t12\n+229\tval_229\t2008-04-08\t12\n+34\tval_34\t2008-04-08\t12\n+168\tval_168\t2008-04-08\t12\n+11\tval_11\t2008-04-08\t12\n 95\tval_95\t2008-04-08\t12\n-196\tval_196\t2008-04-08\t12\n-288\tval_288\t2008-04-08\t12\n-481\tval_481\t2008-04-08\t12\n-457\tval_457\t2008-04-08\t12\n-98\tval_98\t2008-04-08\t12\n-282\tval_282\t2008-04-08\t12\n-197\tval_197\t2008-04-08\t12\n-187\tval_187\t2008-04-08\t12\n-318\tval_318\t2008-04-08\t12\n-318\tval_318\t2008-04-08\t12\n-409\tval_409\t2008-04-08\t12\n-470\tval_470\t2008-04-08\t12\n-137\tval_137\t2008-04-08\t12\n-369\tval_369\t2008-04-08\t12\n-316\tval_316\t2008-04-08\t12\n-169\tval_169\t2008-04-08\t12\n-413\tval_413\t2008-04-08\t12\n-85\tval_85\t2008-04-08\t12\n-77\tval_77\t2008-04-08\t12\n-0\tval_0\t2008-04-08\t12\n-490\tval_490\t2008-04-08\t12\n-87\tval_87\t2008-04-08\t12\n-364\tval_364\t2008-04-08\t12\n-179\tval_179\t2008-04-08\t12\n-118\tval_118\t2008-04-08\t12\n-134\tval_134\t2008-04-08\t12\n+336\tval_336\t2008-04-08\t12\n+35\tval_35\t2008-04-08\t12\n+58\tval_58\t2008-04-08\t12\n 395\tval_395\t2008-04-08\t12\n-282\tval_282\t2008-04-08\t12\n-138\tval_138\t2008-04-08\t12\n-238\tval_238\t2008-04-08\t12\n-419\tval_419\t2008-04-08\t12\n-15\tval_15\t2008-04-08\t12\n-118\tval_118\t2008-04-08\t12\n-72\tval_72\t2008-04-08\t12\n-90\tval_90\t2008-04-08\t12\n-307\tval_307\t2008-04-08\t12\n-19\tval_19\t2008-04-08\t12\n-435\tval_435\t2008-04-08\t12\n-10\tval_10\t2008-04-08\t12\n-277\tval_277\t2008-04-08\t12\n-273\tval_273\t2008-04-08\t12\n-306\tval_306\t2008-04-08\t12\n-224\tval_224\t2008-04-08\t12\n-309\tval_309\t2008-04-08\t12\n-389\tval_389\t2008-04-08\t12\n-327\tval_327\t2008-04-08\t12\n+317\tval_317\t2008-04-08\t12\n+396\tval_396\t2008-04-08\t12\n+402\tval_402\t2008-04-08\t12\n+497\tval_497\t2008-04-08\t12\n+5\tval_5\t2008-04-08\t12\n+226\tval_226\t2008-04-08\t12\n+177\tval_177\t2008-04-08\t12\n+452\tval_452\t2008-04-08\t12\n 242\tval_242\t2008-04-08\t12\n-369\tval_369\t2008-04-08\t12\n-392\tval_392\t2008-04-08\t12\n-272\tval_272\t2008-04-08\t12\n-331\tval_331\t2008-04-08\t12\n 401\tval_401\t2008-04-08\t12\n+331\tval_331\t2008-04-08\t12\n+272\tval_272\t2008-04-08\t12\n+392\tval_392\t2008-04-08\t12\n+369\tval_369\t2008-04-08\t12\n 242\tval_242\t2008-04-08\t12\n-452\tval_452\t2008-04-08\t12\n-177\tval_177\t2008-04-08\t12\n-226\tval_226\t2008-04-08\t12\n-5\tval_5\t2008-04-08\t12\n-497\tval_497\t2008-04-08\t12\n-402\tval_402\t2008-04-08\t12\n-396\tval_396\t2008-04-08\t12\n-317\tval_317\t2008-04-08\t12\n+327\tval_327\t2008-04-08\t12\n+389\tval_389\t2008-04-08\t12\n+309\tval_309\t2008-04-08\t12\n+224\tval_224\t2008-04-08\t12\n+306\tval_306\t2008-04-08\t12\n+273\tval_273\t2008-04-08\t12\n+277\tval_277\t2008-04-08\t12\n+10\tval_10\t2008-04-08\t12\n+435\tval_435\t2008-04-08\t12\n+19\tval_19\t2008-04-08\t12\n+307\tval_307\t2008-04-08\t12\n+90\tval_90\t2008-04-08\t12\n+72\tval_72\t2008-04-08\t12\n+118\tval_118\t2008-04-08\t12\n+15\tval_15\t2008-04-08\t12\n+419\tval_419\t2008-04-08\t12\n+238\tval_238\t2008-04-08\t12\n+138\tval_138\t2008-04-08\t12\n+282\tval_282\t2008-04-08\t12\n 395\tval_395\t2008-04-08\t12\n-58\tval_58\t2008-04-08\t12\n-35\tval_35\t2008-04-08\t12\n-336\tval_336\t2008-04-08\t12\n-95\tval_95\t2008-04-08\t12\n-11\tval_11\t2008-04-08\t12\n-168\tval_168\t2008-04-08\t12\n-34\tval_34\t2008-04-08\t12\n-229\tval_229\t2008-04-08\t12\n-233\tval_233\t2008-04-08\t12\n-143\tval_143\t2008-04-08\t12\n-472\tval_472\t2008-04-08\t12\n-322\tval_322\t2008-04-08\t12\n-498\tval_498\t2008-04-08\t12\n-160\tval_160\t2008-04-08\t12\n-195\tval_195\t2008-04-08\t12\n-42\tval_42\t2008-04-08\t12\n-321\tval_321\t2008-04-08\t12\n-430\tval_430\t2008-04-08\t12\n-119\tval_119\t2008-04-08\t12\n-489\tval_489\t2008-04-08\t12\n-458\tval_458\t2008-04-08\t12\n-78\tval_78\t2008-04-08\t12\n-76\tval_76\t2008-04-08\t12\n-41\tval_41\t2008-04-08\t12\n-223\tval_223\t2008-04-08\t12\n-492\tval_492\t2008-04-08\t12\n-149\tval_149\t2008-04-08\t12\n-449\tval_449\t2008-04-08\t12\n-218\tval_218\t2008-04-08\t12\n-228\tval_228\t2008-04-08\t12\n-138\tval_138\t2008-04-08\t12\n-453\tval_453\t2008-04-08\t12\n-30\tval_30\t2008-04-08\t12\n-209\tval_209\t2008-04-08\t12\n-64\tval_64\t2008-04-08\t12\n+134\tval_134\t2008-04-08\t12\n+118\tval_118\t2008-04-08\t12\n+179\tval_179\t2008-04-08\t12\n+364\tval_364\t2008-04-08\t12\n+87\tval_87\t2008-04-08\t12\n+490\tval_490\t2008-04-08\t12\n+0\tval_0\t2008-04-08\t12\n+77\tval_77\t2008-04-08\t12\n+85\tval_85\t2008-04-08\t12\n+413\tval_413\t2008-04-08\t12\n+169\tval_169\t2008-04-08\t12\n+316\tval_316\t2008-04-08\t12\n+369\tval_369\t2008-04-08\t12\n+137\tval_137\t2008-04-08\t12\n+470\tval_470\t2008-04-08\t12\n+409\tval_409\t2008-04-08\t12\n+318\tval_318\t2008-04-08\t12\n+318\tval_318\t2008-04-08\t12\n+187\tval_187\t2008-04-08\t12\n+197\tval_197\t2008-04-08\t12\n+282\tval_282\t2008-04-08\t12\n+98\tval_98\t2008-04-08\t12\n+457\tval_457\t2008-04-08\t12\n+481\tval_481\t2008-04-08\t12\n+288\tval_288\t2008-04-08\t12\n+196\tval_196\t2008-04-08\t12\n+95\tval_95\t2008-04-08\t12\n+308\tval_308\t2008-04-08\t12\n 468\tval_468\t2008-04-08\t12\n-76\tval_76\t2008-04-08\t12\n-74\tval_74\t2008-04-08\t12\n-342\tval_342\t2008-04-08\t12\n-69\tval_69\t2008-04-08\t12\n+469\tval_469\t2008-04-08\t12\n+156\tval_156\t2008-04-08\t12\n+436\tval_436\t2008-04-08\t12\n+43\tval_43\t2008-04-08\t12\n+404\tval_404\t2008-04-08\t12\n+51\tval_51\t2008-04-08\t12\n+131\tval_131\t2008-04-08\t12\n+120\tval_120\t2008-04-08\t12\n+205\tval_205\t2008-04-08\t12\n 230\tval_230\t2008-04-08\t12\n-33\tval_33\t2008-04-08\t12\n-368\tval_368\t2008-04-08\t12\n-103\tval_103\t2008-04-08\t12\n-296\tval_296\t2008-04-08\t12\n-113\tval_113\t2008-04-08\t12\n-216\tval_216\t2008-04-08\t12\n-367\tval_367\t2008-04-08\t12\n-344\tval_344\t2008-04-08\t12\n-167\tval_167\t2008-04-08\t12\n-274\tval_274\t2008-04-08\t12\n-219\tval_219\t2008-04-08\t12\n-239\tval_239\t2008-04-08\t12\n-485\tval_485\t2008-04-08\t12\n-116\tval_116\t2008-04-08\t12\n-223\tval_223\t2008-04-08\t12\n-256\tval_256\t2008-04-08\t12\n-263\tval_263\t2008-04-08\t12\n-70\tval_70\t2008-04-08\t12\n-487\tval_487\t2008-04-08\t12\n-480\tval_480\t2008-04-08\t12\n-401\tval_401\t2008-04-08\t12\n-288\tval_288\t2008-04-08\t12\n+327\tval_327\t2008-04-08\t12\n+165\tval_165\t2008-04-08\t12\n+26\tval_26\t2008-04-08\t12\n+96\tval_96\t2008-04-08\t12\n+418\tval_418\t2008-04-08\t12\n 191\tval_191\t2008-04-08\t12\n-5\tval_5\t2008-04-08\t12\n-244\tval_244\t2008-04-08\t12\n-438\tval_438\t2008-04-08\t12\n-128\tval_128\t2008-04-08\t12\n-467\tval_467\t2008-04-08\t12\n-432\tval_432\t2008-04-08\t12\n-202\tval_202\t2008-04-08\t12\n-316\tval_316\t2008-04-08\t12\n-229\tval_229\t2008-04-08\t12\n-469\tval_469\t2008-04-08\t12\n+199\tval_199\t2008-04-08\t12\n+298\tval_298\t2008-04-08\t12\n+100\tval_100\t2008-04-08\t12\n+454\tval_454\t2008-04-08\t12\n+393\tval_393\t2008-04-08\t12\n+468\tval_468\t2008-04-08\t12\n+197\tval_197\t2008-04-08\t12\n+322\tval_322\t2008-04-08\t12\n+0\tval_0\t2008-04-08\t12\n+496\tval_496\t2008-04-08\t12\n+119\tval_119\t2008-04-08\t12\n+158\tval_158\t2008-04-08\t12\n+129\tval_129\t2008-04-08\t12\n+42\tval_42\t2008-04-08\t12\n+172\tval_172\t2008-04-08\t12\n+179\tval_179\t2008-04-08\t12\n+431\tval_431\t2008-04-08\t12\n 463\tval_463\t2008-04-08\t12\n-280\tval_280\t2008-04-08\t12\n-2\tval_2\t2008-04-08\t12\n-35\tval_35\t2008-04-08\t12\n-283\tval_283\t2008-04-08\t12\n-331\tval_331\t2008-04-08\t12\n-235\tval_235\t2008-04-08\t12\n-80\tval_80\t2008-04-08\t12\n-44\tval_44\t2008-04-08\t12\n-193\tval_193\t2008-04-08\t12\n-321\tval_321\t2008-04-08\t12\n-335\tval_335\t2008-04-08\t12\n-104\tval_104\t2008-04-08\t12\n+24\tval_24\t2008-04-08\t12\n+348\tval_348\t2008-04-08\t12\n+208\tval_208\t2008-04-08\t12\n+230\tval_230\t2008-04-08\t12\n+411\tval_411\t2008-04-08\t12\n+8\tval_8\t2008-04-08\t12\n+58\tval_58\t2008-04-08\t12\n 466\tval_466\t2008-04-08\t12\n-366\tval_366\t2008-04-08\t12\n-175\tval_175\t2008-04-08\t12\n-403\tval_403\t2008-04-08\t12\n-483\tval_483\t2008-04-08\t12\n-53\tval_53\t2008-04-08\t12\n-105\tval_105\t2008-04-08\t12\n-257\tval_257\t2008-04-08\t12\n-406\tval_406\t2008-04-08\t12\n-409\tval_409\t2008-04-08\t12\n-190\tval_190\t2008-04-08\t12\n-406\tval_406\t2008-04-08\t12\n-401\tval_401\t2008-04-08\t12\n-114\tval_114\t2008-04-08\t12\n-258\tval_258\t2008-04-08\t12\n-90\tval_90\t2008-04-08\t12\n-203\tval_203\t2008-04-08\t12\n-262\tval_262\t2008-04-08\t12\n 348\tval_348\t2008-04-08\t12\n-424\tval_424\t2008-04-08\t12\n-12\tval_12\t2008-04-08\t12\n-396\tval_396\t2008-04-08\t12\n-201\tval_201\t2008-04-08\t12\n+84\tval_84\t2008-04-08\t12\n 217\tval_217\t2008-04-08\t12\n-164\tval_164\t2008-04-08\t12\n-431\tval_431\t2008-04-08\t12\n-454\tval_454\t2008-04-08\t12\n-478\tval_478\t2008-04-08\t12\n-298\tval_298\t2008-04-08\t12\n-125\tval_125\t2008-04-08\t12\n-431\tval_431\t2008-04-08\t12\n-164\tval_164\t2008-04-08\t12\n-424\tval_424\t2008-04-08\t12\n+138\tval_138\t2008-04-08\t12\n+272\tval_272\t2008-04-08\t12\n+373\tval_373\t2008-04-08\t12\n+353\tval_353\t2008-04-08\t12\n+489\tval_489\t2008-04-08\t12\n+384\tval_384\t2008-04-08\t12\n+404\tval_404\t2008-04-08\t12\n+260\tval_260\t2008-04-08\t12\n+67\tval_67\t2008-04-08\t12\n+181\tval_181\t2008-04-08\t12\n+230\tval_230\t2008-04-08\t12\n+12\tval_12\t2008-04-08\t12\n+284\tval_284\t2008-04-08\t12\n+180\tval_180\t2008-04-08\t12\n+333\tval_333\t2008-04-08\t12\n+83\tval_83\t2008-04-08\t12\n+241\tval_241\t2008-04-08\t12\n+137\tval_137\t2008-04-08\t12\n+275\tval_275\t2008-04-08\t12\n+311\tval_311\t2008-04-08\t12\n+332\tval_332\t2008-04-08\t12\n+318\tval_318\t2008-04-08\t12\n+65\tval_65\t2008-04-08\t12\n+221\tval_221\t2008-04-08\t12\n+289\tval_289\t2008-04-08\t12\n+176\tval_176\t2008-04-08\t12\n+278\tval_278\t2008-04-08\t12\n+430\tval_430\t2008-04-08\t12\n+216\tval_216\t2008-04-08\t12\n+213\tval_213\t2008-04-08\t12\n+239\tval_239\t2008-04-08\t12\n+103\tval_103\t2008-04-08\t12\n+138\tval_138\t2008-04-08\t12\n+51\tval_51\t2008-04-08\t12\n+459\tval_459\t2008-04-08\t12\n+54\tval_54\t2008-04-08\t12\n+176\tval_176\t2008-04-08\t12\n 187\tval_187\t2008-04-08\t12\n+286\tval_286\t2008-04-08\t12\n+192\tval_192\t2008-04-08\t12\n+469\tval_469\t2008-04-08\t12\n+437\tval_437\t2008-04-08\t12\n+386\tval_386\t2008-04-08\t12\n+125\tval_125\t2008-04-08\t12\n+498\tval_498\t2008-04-08\t12\n 382\tval_382\t2008-04-08\t12\n-5\tval_5\t2008-04-08\t12\n-70\tval_70\t2008-04-08\t12\n-397\tval_397\t2008-04-08\t12\n-480\tval_480\t2008-04-08\t12\n-291\tval_291\t2008-04-08\t12\n-24\tval_24\t2008-04-08\t12\n-351\tval_351\t2008-04-08\t12\n-255\tval_255\t2008-04-08\t12\n-104\tval_104\t2008-04-08\t12\n-70\tval_70\t2008-04-08\t12\n-163\tval_163\t2008-04-08\t12\n-438\tval_438\t2008-04-08\t12\n-119\tval_119\t2008-04-08\t12\n-414\tval_414\t2008-04-08\t12\n-200\tval_200\t2008-04-08\t12\n-491\tval_491\t2008-04-08\t12\n-237\tval_237\t2008-04-08\t12\n-439\tval_439\t2008-04-08\t12\n-360\tval_360\t2008-04-08\t12\n-248\tval_248\t2008-04-08\t12\n-479\tval_479\t2008-04-08\t12\n-305\tval_305\t2008-04-08\t12\n-417\tval_417\t2008-04-08\t12\n-199\tval_199\t2008-04-08\t12\n-444\tval_444\t2008-04-08\t12\n-120\tval_120\t2008-04-08\t12\n-429\tval_429\t2008-04-08\t12\n 169\tval_169\t2008-04-08\t12\n-443\tval_443\t2008-04-08\t12\n-323\tval_323\t2008-04-08\t12\n-325\tval_325\t2008-04-08\t12\n+399\tval_399\t2008-04-08\t12\n+356\tval_356\t2008-04-08\t12\n+208\tval_208\t2008-04-08\t12\n 277\tval_277\t2008-04-08\t12\n-230\tval_230\t2008-04-08\t12\n-478\tval_478\t2008-04-08\t12\n-178\tval_178\t2008-04-08\t12\n-468\tval_468\t2008-04-08\t12\n-310\tval_310\t2008-04-08\t12\n-317\tval_317\t2008-04-08\t12\n-333\tval_333\t2008-04-08\t12\n-493\tval_493\t2008-04-08\t12\n-460\tval_460\t2008-04-08\t12\n-207\tval_207\t2008-04-08\t12\n-249\tval_249\t2008-04-08\t12\n-265\tval_265\t2008-04-08\t12\n-480\tval_480\t2008-04-08\t12\n-83\tval_83\t2008-04-08\t12\n-136\tval_136\t2008-04-08\t12\n-353\tval_353\t2008-04-08\t12\n-172\tval_172\t2008-04-08\t12\n-214\tval_214\t2008-04-08\t12\n-462\tval_462\t2008-04-08\t12\n-233\tval_233\t2008-04-08\t12\n-406\tval_406\t2008-04-08\t12\n-133\tval_133\t2008-04-08\t12\n-175\tval_175\t2008-04-08\t12\n-189\tval_189\t2008-04-08\t12\n-454\tval_454\t2008-04-08\t12\n-375\tval_375\t2008-04-08\t12\n-401\tval_401\t2008-04-08\t12\n-421\tval_421\t2008-04-08\t12\n-407\tval_407\t2008-04-08\t12\n-384\tval_384\t2008-04-08\t12\n-256\tval_256\t2008-04-08\t12\n-26\tval_26\t2008-04-08\t12\n-134\tval_134\t2008-04-08\t12\n-67\tval_67\t2008-04-08\t12\n-384\tval_384\t2008-04-08\t12\n-379\tval_379\t2008-04-08\t12\n-18\tval_18\t2008-04-08\t12\n-462\tval_462\t2008-04-08\t12\n-492\tval_492\t2008-04-08\t12\n-100\tval_100\t2008-04-08\t12\n-298\tval_298\t2008-04-08\t12\n-9\tval_9\t2008-04-08\t12\n-341\tval_341\t2008-04-08\t12\n-498\tval_498\t2008-04-08\t12\n-146\tval_146\t2008-04-08\t12\n-458\tval_458\t2008-04-08\t12\n-362\tval_362\t2008-04-08\t12\n-186\tval_186\t2008-04-08\t12\n-285\tval_285\t2008-04-08\t12\n-348\tval_348\t2008-04-08\t12\n+427\tval_427\t2008-04-08\t12\n+35\tval_35\t2008-04-08\t12\n+280\tval_280\t2008-04-08\t12\n+4\tval_4\t2008-04-08\t12\n+72\tval_72\t2008-04-08\t12\n+47\tval_47\t2008-04-08\t12\n+111\tval_111\t2008-04-08\t12\n+92\tval_92\t2008-04-08\t12\n+221\tval_221\t2008-04-08\t12\n+378\tval_378\t2008-04-08\t12\n+157\tval_157\t2008-04-08\t12\n+489\tval_489\t2008-04-08\t12\n+20\tval_20\t2008-04-08\t12\n+170\tval_170\t2008-04-08\t12\n+129\tval_129\t2008-04-08\t12\n+345\tval_345\t2008-04-08\t12\n+438\tval_438\t2008-04-08\t12\n+149\tval_149\t2008-04-08\t12\n+205\tval_205\t2008-04-08\t12\n+302\tval_302\t2008-04-08\t12\n+57\tval_57\t2008-04-08\t12\n+316\tval_316\t2008-04-08\t12\n+311\tval_311\t2008-04-08\t12\n+128\tval_128\t2008-04-08\t12\n+455\tval_455\t2008-04-08\t12\n+0\tval_0\t2008-04-08\t12\n+339\tval_339\t2008-04-08\t12\n+203\tval_203\t2008-04-08\t12\n+155\tval_155\t2008-04-08\t12\n+113\tval_113\t2008-04-08\t12\n+17\tval_17\t2008-04-08\t12\n+475\tval_475\t2008-04-08\t12\n+195\tval_195\t2008-04-08\t12\n 167\tval_167\t2008-04-08\t12\n-18\tval_18\t2008-04-08\t12\n-273\tval_273\t2008-04-08\t12\n-183\tval_183\t2008-04-08\t12\n+325\tval_325\t2008-04-08\t12\n+367\tval_367\t2008-04-08\t12\n+342\tval_342\t2008-04-08\t12\n+439\tval_439\t2008-04-08\t12\n+266\tval_266\t2008-04-08\t12\n+365\tval_365\t2008-04-08\t12\n+309\tval_309\t2008-04-08\t12\n+397\tval_397\t2008-04-08\t12\n+377\tval_377\t2008-04-08\t12\n+162\tval_162\t2008-04-08\t12\n+489\tval_489\t2008-04-08\t12\n+417\tval_417\t2008-04-08\t12\n+247\tval_247\t2008-04-08\t12\n+396\tval_396\t2008-04-08\t12\n+399\tval_399\t2008-04-08\t12\n+174\tval_174\t2008-04-08\t12\n+208\tval_208\t2008-04-08\t12\n+466\tval_466\t2008-04-08\t12\n+199\tval_199\t2008-04-08\t12\n+207\tval_207\t2008-04-08\t12\n+494\tval_494\t2008-04-08\t12\n+413\tval_413\t2008-04-08\t12\n+174\tval_174\t2008-04-08\t12\n+482\tval_482\t2008-04-08\t12\n+237\tval_237\t2008-04-08\t12\n+394\tval_394\t2008-04-08\t12\n+459\tval_459\t2008-04-08\t12\n+446\tval_446\t2008-04-08\t12\n+338\tval_338\t2008-04-08\t12\n+193\tval_193\t2008-04-08\t12\n+153\tval_153\t2008-04-08\t12\n+287\tval_287\t2008-04-08\t12\n+219\tval_219\t2008-04-08\t12\n+292\tval_292\t2008-04-08\t12\n+252\tval_252\t2008-04-08\t12\n+430\tval_430\t2008-04-08\t12\n+417\tval_417\t2008-04-08\t12\n+166\tval_166\t2008-04-08\t12\n+403\tval_403\t2008-04-08\t12\n+82\tval_82\t2008-04-08\t12\n+15\tval_15\t2008-04-08\t12\n+209\tval_209\t2008-04-08\t12\n+277\tval_277\t2008-04-08\t12\n 281\tval_281\t2008-04-08\t12\n-344\tval_344\t2008-04-08\t12\n-97\tval_97\t2008-04-08\t12\n-469\tval_469\t2008-04-08\t12\n-315\tval_315\t2008-04-08\t12\n-84\tval_84\t2008-04-08\t12\n-28\tval_28\t2008-04-08\t12\n+327\tval_327\t2008-04-08\t12\n 37\tval_37\t2008-04-08\t12\n-448\tval_448\t2008-04-08\t12\n+495\tval_495\t2008-04-08\t12\n+145\tval_145\t2008-04-08\t12\n+469\tval_469\t2008-04-08\t12\n 152\tval_152\t2008-04-08\t12\n-348\tval_348\t2008-04-08\t12\n-307\tval_307\t2008-04-08\t12\n-194\tval_194\t2008-04-08\t12\n-414\tval_414\t2008-04-08\t12\n-477\tval_477\t2008-04-08\t12\n-222\tval_222\t2008-04-08\t12\n-126\tval_126\t2008-04-08\t12\n-90\tval_90\t2008-04-08\t12\n-169\tval_169\t2008-04-08\t12\n-403\tval_403\t2008-04-08\t12\n-400\tval_400\t2008-04-08\t12\n-200\tval_200\t2008-04-08\t12\n-97\tval_97\t2008-04-08\t12\n+374\tval_374\t2008-04-08\t12\n+429\tval_429\t2008-04-08\t12\n+406\tval_406\t2008-04-08\t12\n+146\tval_146\t2008-04-08\t12\n+213\tval_213\t2008-04-08\t12\n+128\tval_128\t2008-04-08\t12\n+66\tval_66\t2008-04-08\t12\n+369\tval_369\t2008-04-08\t12\n+224\tval_224\t2008-04-08\t12\n+273\tval_273\t2008-04-08\t12\n+150\tval_150\t2008-04-08\t12\n+401\tval_401\t2008-04-08\t12\n+193\tval_193\t2008-04-08\t12\n+265\tval_265\t2008-04-08\t12\n+484\tval_484\t2008-04-08\t12\n+98\tval_98\t2008-04-08\t12\n+278\tval_278\t2008-04-08\t12\n+255\tval_255\t2008-04-08\t12\n+409\tval_409\t2008-04-08\t12\n+165\tval_165\t2008-04-08\t12\n+27\tval_27\t2008-04-08\t12\n+311\tval_311\t2008-04-08\t12\n+86\tval_86\t2008-04-08\t12\n+238\tval_238\t2008-04-08\t12\n 238\tval_238\t2008-04-09\t11\n-86\tval_86\t2008-04-09\t11\n-311\tval_311\t2008-04-09\t11\n-27\tval_27\t2008-04-09\t11\n-165\tval_165\t2008-04-09\t11\n-409\tval_409\t2008-04-09\t11\n-255\tval_255\t2008-04-09\t11\n-278\tval_278\t2008-04-09\t11\n-98\tval_98\t2008-04-09\t11\n-484\tval_484\t2008-04-09\t11\n-265\tval_265\t2008-04-09\t11\n-193\tval_193\t2008-04-09\t11\n-401\tval_401\t2008-04-09\t11\n-150\tval_150\t2008-04-09\t11\n-273\tval_273\t2008-04-09\t11\n-224\tval_224\t2008-04-09\t11\n-369\tval_369\t2008-04-09\t11\n-66\tval_66\t2008-04-09\t11\n-128\tval_128\t2008-04-09\t11\n-213\tval_213\t2008-04-09\t11\n-146\tval_146\t2008-04-09\t11\n-406\tval_406\t2008-04-09\t11\n-429\tval_429\t2008-04-09\t11\n-374\tval_374\t2008-04-09\t11\n+97\tval_97\t2008-04-09\t11\n+200\tval_200\t2008-04-09\t11\n+400\tval_400\t2008-04-09\t11\n+403\tval_403\t2008-04-09\t11\n+169\tval_169\t2008-04-09\t11\n+90\tval_90\t2008-04-09\t11\n+126\tval_126\t2008-04-09\t11\n+222\tval_222\t2008-04-09\t11\n+477\tval_477\t2008-04-09\t11\n+414\tval_414\t2008-04-09\t11\n+194\tval_194\t2008-04-09\t11\n+307\tval_307\t2008-04-09\t11\n+348\tval_348\t2008-04-09\t11\n 152\tval_152\t2008-04-09\t11\n-469\tval_469\t2008-04-09\t11\n-145\tval_145\t2008-04-09\t11\n-495\tval_495\t2008-04-09\t11\n+448\tval_448\t2008-04-09\t11\n 37\tval_37\t2008-04-09\t11\n-327\tval_327\t2008-04-09\t11\n+28\tval_28\t2008-04-09\t11\n+84\tval_84\t2008-04-09\t11\n+315\tval_315\t2008-04-09\t11\n+469\tval_469\t2008-04-09\t11\n+97\tval_97\t2008-04-09\t11\n+344\tval_344\t2008-04-09\t11\n 281\tval_281\t2008-04-09\t11\n-277\tval_277\t2008-04-09\t11\n-209\tval_209\t2008-04-09\t11\n-15\tval_15\t2008-04-09\t11\n-82\tval_82\t2008-04-09\t11\n-403\tval_403\t2008-04-09\t11\n-166\tval_166\t2008-04-09\t11\n-417\tval_417\t2008-04-09\t11\n-430\tval_430\t2008-04-09\t11\n-252\tval_252\t2008-04-09\t11\n-292\tval_292\t2008-04-09\t11\n-219\tval_219\t2008-04-09\t11\n-287\tval_287\t2008-04-09\t11\n-153\tval_153\t2008-04-09\t11\n-193\tval_193\t2008-04-09\t11\n-338\tval_338\t2008-04-09\t11\n-446\tval_446\t2008-04-09\t11\n-459\tval_459\t2008-04-09\t11\n-394\tval_394\t2008-04-09\t11\n-237\tval_237\t2008-04-09\t11\n-482\tval_482\t2008-04-09\t11\n-174\tval_174\t2008-04-09\t11\n-413\tval_413\t2008-04-09\t11\n-494\tval_494\t2008-04-09\t11\n-207\tval_207\t2008-04-09\t11\n-199\tval_199\t2008-04-09\t11\n-466\tval_466\t2008-04-09\t11\n-208\tval_208\t2008-04-09\t11\n-174\tval_174\t2008-04-09\t11\n-399\tval_399\t2008-04-09\t11\n-396\tval_396\t2008-04-09\t11\n-247\tval_247\t2008-04-09\t11\n-417\tval_417\t2008-04-09\t11\n-489\tval_489\t2008-04-09\t11\n-162\tval_162\t2008-04-09\t11\n-377\tval_377\t2008-04-09\t11\n-397\tval_397\t2008-04-09\t11\n-309\tval_309\t2008-04-09\t11\n-365\tval_365\t2008-04-09\t11\n-266\tval_266\t2008-04-09\t11\n-439\tval_439\t2008-04-09\t11\n-342\tval_342\t2008-04-09\t11\n-367\tval_367\t2008-04-09\t11\n-325\tval_325\t2008-04-09\t11\n+183\tval_183\t2008-04-09\t11\n+273\tval_273\t2008-04-09\t11\n+18\tval_18\t2008-04-09\t11\n 167\tval_167\t2008-04-09\t11\n-195\tval_195\t2008-04-09\t11\n-475\tval_475\t2008-04-09\t11\n-17\tval_17\t2008-04-09\t11\n-113\tval_113\t2008-04-09\t11\n-155\tval_155\t2008-04-09\t11\n-203\tval_203\t2008-04-09\t11\n-339\tval_339\t2008-04-09\t11\n-0\tval_0\t2008-04-09\t11\n-455\tval_455\t2008-04-09\t11\n-128\tval_128\t2008-04-09\t11\n-311\tval_311\t2008-04-09\t11\n-316\tval_316\t2008-04-09\t11\n-57\tval_57\t2008-04-09\t11\n-302\tval_302\t2008-04-09\t11\n-205\tval_205\t2008-04-09\t11\n-149\tval_149\t2008-04-09\t11\n-438\tval_438\t2008-04-09\t11\n-345\tval_345\t2008-04-09\t11\n-129\tval_129\t2008-04-09\t11\n-170\tval_170\t2008-04-09\t11\n-20\tval_20\t2008-04-09\t11\n-489\tval_489\t2008-04-09\t11\n-157\tval_157\t2008-04-09\t11\n-378\tval_378\t2008-04-09\t11\n-221\tval_221\t2008-04-09\t11\n-92\tval_92\t2008-04-09\t11\n-111\tval_111\t2008-04-09\t11\n-47\tval_47\t2008-04-09\t11\n-72\tval_72\t2008-04-09\t11\n-4\tval_4\t2008-04-09\t11\n-280\tval_280\t2008-04-09\t11\n-35\tval_35\t2008-04-09\t11\n-427\tval_427\t2008-04-09\t11\n+348\tval_348\t2008-04-09\t11\n+285\tval_285\t2008-04-09\t11\n+186\tval_186\t2008-04-09\t11\n+362\tval_362\t2008-04-09\t11\n+458\tval_458\t2008-04-09\t11\n+146\tval_146\t2008-04-09\t11\n+498\tval_498\t2008-04-09\t11\n+341\tval_341\t2008-04-09\t11\n+9\tval_9\t2008-04-09\t11\n+298\tval_298\t2008-04-09\t11\n+100\tval_100\t2008-04-09\t11\n+492\tval_492\t2008-04-09\t11\n+462\tval_462\t2008-04-09\t11\n+18\tval_18\t2008-04-09\t11\n+379\tval_379\t2008-04-09\t11\n+384\tval_384\t2008-04-09\t11\n+67\tval_67\t2008-04-09\t11\n+134\tval_134\t2008-04-09\t11\n+26\tval_26\t2008-04-09\t11\n+256\tval_256\t2008-04-09\t11\n+384\tval_384\t2008-04-09\t11\n+407\tval_407\t2008-04-09\t11\n+421\tval_421\t2008-04-09\t11\n+401\tval_401\t2008-04-09\t11\n+375\tval_375\t2008-04-09\t11\n+454\tval_454\t2008-04-09\t11\n+189\tval_189\t2008-04-09\t11\n+175\tval_175\t2008-04-09\t11\n+133\tval_133\t2008-04-09\t11\n+406\tval_406\t2008-04-09\t11\n+233\tval_233\t2008-04-09\t11\n+462\tval_462\t2008-04-09\t11\n+214\tval_214\t2008-04-09\t11\n+172\tval_172\t2008-04-09\t11\n+353\tval_353\t2008-04-09\t11\n+136\tval_136\t2008-04-09\t11\n+83\tval_83\t2008-04-09\t11\n+480\tval_480\t2008-04-09\t11\n+265\tval_265\t2008-04-09\t11\n+249\tval_249\t2008-04-09\t11\n+207\tval_207\t2008-04-09\t11\n+460\tval_460\t2008-04-09\t11\n+493\tval_493\t2008-04-09\t11\n+333\tval_333\t2008-04-09\t11\n+317\tval_317\t2008-04-09\t11\n+310\tval_310\t2008-04-09\t11\n+468\tval_468\t2008-04-09\t11\n+178\tval_178\t2008-04-09\t11\n+478\tval_478\t2008-04-09\t11\n+230\tval_230\t2008-04-09\t11\n 277\tval_277\t2008-04-09\t11\n-208\tval_208\t2008-04-09\t11\n-356\tval_356\t2008-04-09\t11\n-399\tval_399\t2008-04-09\t11\n+325\tval_325\t2008-04-09\t11\n+323\tval_323\t2008-04-09\t11\n+443\tval_443\t2008-04-09\t11\n 169\tval_169\t2008-04-09\t11\n+429\tval_429\t2008-04-09\t11\n+120\tval_120\t2008-04-09\t11\n+444\tval_444\t2008-04-09\t11\n+199\tval_199\t2008-04-09\t11\n+417\tval_417\t2008-04-09\t11\n+305\tval_305\t2008-04-09\t11\n+479\tval_479\t2008-04-09\t11\n+248\tval_248\t2008-04-09\t11\n+360\tval_360\t2008-04-09\t11\n+439\tval_439\t2008-04-09\t11\n+237\tval_237\t2008-04-09\t11\n+491\tval_491\t2008-04-09\t11\n+200\tval_200\t2008-04-09\t11\n+414\tval_414\t2008-04-09\t11\n+119\tval_119\t2008-04-09\t11\n+438\tval_438\t2008-04-09\t11\n+163\tval_163\t2008-04-09\t11\n+70\tval_70\t2008-04-09\t11\n+104\tval_104\t2008-04-09\t11\n+255\tval_255\t2008-04-09\t11\n+351\tval_351\t2008-04-09\t11\n+24\tval_24\t2008-04-09\t11\n+291\tval_291\t2008-04-09\t11\n+480\tval_480\t2008-04-09\t11\n+397\tval_397\t2008-04-09\t11\n+70\tval_70\t2008-04-09\t11\n+5\tval_5\t2008-04-09\t11\n 382\tval_382\t2008-04-09\t11\n-498\tval_498\t2008-04-09\t11\n-125\tval_125\t2008-04-09\t11\n-386\tval_386\t2008-04-09\t11\n-437\tval_437\t2008-04-09\t11\n-469\tval_469\t2008-04-09\t11\n-192\tval_192\t2008-04-09\t11\n-286\tval_286\t2008-04-09\t11\n 187\tval_187\t2008-04-09\t11\n-176\tval_176\t2008-04-09\t11\n-54\tval_54\t2008-04-09\t11\n-459\tval_459\t2008-04-09\t11\n-51\tval_51\t2008-04-09\t11\n-138\tval_138\t2008-04-09\t11\n-103\tval_103\t2008-04-09\t11\n-239\tval_239\t2008-04-09\t11\n-213\tval_213\t2008-04-09\t11\n-216\tval_216\t2008-04-09\t11\n-430\tval_430\t2008-04-09\t11\n-278\tval_278\t2008-04-09\t11\n-176\tval_176\t2008-04-09\t11\n-289\tval_289\t2008-04-09\t11\n-221\tval_221\t2008-04-09\t11\n-65\tval_65\t2008-04-09\t11\n-318\tval_318\t2008-04-09\t11\n-332\tval_332\t2008-04-09\t11\n-311\tval_311\t2008-04-09\t11\n-275\tval_275\t2008-04-09\t11\n-137\tval_137\t2008-04-09\t11\n-241\tval_241\t2008-04-09\t11\n-83\tval_83\t2008-04-09\t11\n-333\tval_333\t2008-04-09\t11\n-180\tval_180\t2008-04-09\t11\n-284\tval_284\t2008-04-09\t11\n-12\tval_12\t2008-04-09\t11\n-230\tval_230\t2008-04-09\t11\n-181\tval_181\t2008-04-09\t11\n-67\tval_67\t2008-04-09\t11\n-260\tval_260\t2008-04-09\t11\n-404\tval_404\t2008-04-09\t11\n-384\tval_384\t2008-04-09\t11\n-489\tval_489\t2008-04-09\t11\n-353\tval_353\t2008-04-09\t11\n-373\tval_373\t2008-04-09\t11\n-272\tval_272\t2008-04-09\t11\n-138\tval_138\t2008-04-09\t11\n+424\tval_424\t2008-04-09\t11\n+164\tval_164\t2008-04-09\t11\n+431\tval_431\t2008-04-09\t11\n+125\tval_125\t2008-04-09\t11\n+298\tval_298\t2008-04-09\t11\n+478\tval_478\t2008-04-09\t11\n+454\tval_454\t2008-04-09\t11\n+431\tval_431\t2008-04-09\t11\n+164\tval_164\t2008-04-09\t11\n 217\tval_217\t2008-04-09\t11\n-84\tval_84\t2008-04-09\t11\n+201\tval_201\t2008-04-09\t11\n+396\tval_396\t2008-04-09\t11\n+12\tval_12\t2008-04-09\t11\n+424\tval_424\t2008-04-09\t11\n 348\tval_348\t2008-04-09\t11\n+262\tval_262\t2008-04-09\t11\n+203\tval_203\t2008-04-09\t11\n+90\tval_90\t2008-04-09\t11\n+258\tval_258\t2008-04-09\t11\n+114\tval_114\t2008-04-09\t11\n+401\tval_401\t2008-04-09\t11\n+406\tval_406\t2008-04-09\t11\n+190\tval_190\t2008-04-09\t11\n+409\tval_409\t2008-04-09\t11\n+406\tval_406\t2008-04-09\t11\n+257\tval_257\t2008-04-09\t11\n+105\tval_105\t2008-04-09\t11\n+53\tval_53\t2008-04-09\t11\n+483\tval_483\t2008-04-09\t11\n+403\tval_403\t2008-04-09\t11\n+175\tval_175\t2008-04-09\t11\n+366\tval_366\t2008-04-09\t11\n 466\tval_466\t2008-04-09\t11\n-58\tval_58\t2008-04-09\t11\n-8\tval_8\t2008-04-09\t11\n-411\tval_411\t2008-04-09\t11\n-230\tval_230\t2008-04-09\t11\n-208\tval_208\t2008-04-09\t11\n-348\tval_348\t2008-04-09\t11\n-24\tval_24\t2008-04-09\t11\n+104\tval_104\t2008-04-09\t11\n+335\tval_335\t2008-04-09\t11\n+321\tval_321\t2008-04-09\t11\n+193\tval_193\t2008-04-09\t11\n+44\tval_44\t2008-04-09\t11\n+80\tval_80\t2008-04-09\t11\n+235\tval_235\t2008-04-09\t11\n+331\tval_331\t2008-04-09\t11\n+283\tval_283\t2008-04-09\t11\n+35\tval_35\t2008-04-09\t11\n+2\tval_2\t2008-04-09\t11\n+280\tval_280\t2008-04-09\t11\n 463\tval_463\t2008-04-09\t11\n-431\tval_431\t2008-04-09\t11\n-179\tval_179\t2008-04-09\t11\n-172\tval_172\t2008-04-09\t11\n-42\tval_42\t2008-04-09\t11\n-129\tval_129\t2008-04-09\t11\n-158\tval_158\t2008-04-09\t11\n-119\tval_119\t2008-04-09\t11\n-496\tval_496\t2008-04-09\t11\n-0\tval_0\t2008-04-09\t11\n-322\tval_322\t2008-04-09\t11\n-197\tval_197\t2008-04-09\t11\n-468\tval_468\t2008-04-09\t11\n-393\tval_393\t2008-04-09\t11\n-454\tval_454\t2008-04-09\t11\n-100\tval_100\t2008-04-09\t11\n-298\tval_298\t2008-04-09\t11\n-199\tval_199\t2008-04-09\t11\n+469\tval_469\t2008-04-09\t11\n+229\tval_229\t2008-04-09\t11\n+316\tval_316\t2008-04-09\t11\n+202\tval_202\t2008-04-09\t11\n+432\tval_432\t2008-04-09\t11\n+467\tval_467\t2008-04-09\t11\n+128\tval_128\t2008-04-09\t11\n+438\tval_438\t2008-04-09\t11\n+244\tval_244\t2008-04-09\t11\n+5\tval_5\t2008-04-09\t11\n 191\tval_191\t2008-04-09\t11\n-418\tval_418\t2008-04-09\t11\n-96\tval_96\t2008-04-09\t11\n-26\tval_26\t2008-04-09\t11\n-165\tval_165\t2008-04-09\t11\n-327\tval_327\t2008-04-09\t11\n+288\tval_288\t2008-04-09\t11\n+401\tval_401\t2008-04-09\t11\n+480\tval_480\t2008-04-09\t11\n+487\tval_487\t2008-04-09\t11\n+70\tval_70\t2008-04-09\t11\n+263\tval_263\t2008-04-09\t11\n+256\tval_256\t2008-04-09\t11\n+223\tval_223\t2008-04-09\t11\n+116\tval_116\t2008-04-09\t11\n+485\tval_485\t2008-04-09\t11\n+239\tval_239\t2008-04-09\t11\n+219\tval_219\t2008-04-09\t11\n+274\tval_274\t2008-04-09\t11\n+167\tval_167\t2008-04-09\t11\n+344\tval_344\t2008-04-09\t11\n+367\tval_367\t2008-04-09\t11\n+216\tval_216\t2008-04-09\t11\n+113\tval_113\t2008-04-09\t11\n+296\tval_296\t2008-04-09\t11\n+103\tval_103\t2008-04-09\t11\n+368\tval_368\t2008-04-09\t11\n+33\tval_33\t2008-04-09\t11\n 230\tval_230\t2008-04-09\t11\n-205\tval_205\t2008-04-09\t11\n-120\tval_120\t2008-04-09\t11\n-131\tval_131\t2008-04-09\t11\n-51\tval_51\t2008-04-09\t11\n-404\tval_404\t2008-04-09\t11\n-43\tval_43\t2008-04-09\t11\n-436\tval_436\t2008-04-09\t11\n-156\tval_156\t2008-04-09\t11\n-469\tval_469\t2008-04-09\t11\n+69\tval_69\t2008-04-09\t11\n+342\tval_342\t2008-04-09\t11\n+74\tval_74\t2008-04-09\t11\n+76\tval_76\t2008-04-09\t11\n 468\tval_468\t2008-04-09\t11\n-308\tval_308\t2008-04-09\t11\n-95\tval_95\t2008-04-09\t11\n-196\tval_196\t2008-04-09\t11\n-288\tval_288\t2008-04-09\t11\n-481\tval_481\t2008-04-09\t11\n-457\tval_457\t2008-04-09\t11\n-98\tval_98\t2008-04-09\t11\n-282\tval_282\t2008-04-09\t11\n-197\tval_197\t2008-04-09\t11\n-187\tval_187\t2008-04-09\t11\n-318\tval_318\t2008-04-09\t11\n-318\tval_318\t2008-04-09\t11\n-409\tval_409\t2008-04-09\t11\n-470\tval_470\t2008-04-09\t11\n-137\tval_137\t2008-04-09\t11\n-369\tval_369\t2008-04-09\t11\n-316\tval_316\t2008-04-09\t11\n-169\tval_169\t2008-04-09\t11\n-413\tval_413\t2008-04-09\t11\n-85\tval_85\t2008-04-09\t11\n-77\tval_77\t2008-04-09\t11\n-0\tval_0\t2008-04-09\t11\n-490\tval_490\t2008-04-09\t11\n-87\tval_87\t2008-04-09\t11\n-364\tval_364\t2008-04-09\t11\n-179\tval_179\t2008-04-09\t11\n-118\tval_118\t2008-04-09\t11\n-134\tval_134\t2008-04-09\t11\n+64\tval_64\t2008-04-09\t11\n+209\tval_209\t2008-04-09\t11\n+30\tval_30\t2008-04-09\t11\n+453\tval_453\t2008-04-09\t11\n+138\tval_138\t2008-04-09\t11\n+228\tval_228\t2008-04-09\t11\n+218\tval_218\t2008-04-09\t11\n+449\tval_449\t2008-04-09\t11\n+149\tval_149\t2008-04-09\t11\n+492\tval_492\t2008-04-09\t11\n+223\tval_223\t2008-04-09\t11\n+41\tval_41\t2008-04-09\t11\n+76\tval_76\t2008-04-09\t11\n+78\tval_78\t2008-04-09\t11\n+458\tval_458\t2008-04-09\t11\n+489\tval_489\t2008-04-09\t11\n+119\tval_119\t2008-04-09\t11\n+430\tval_430\t2008-04-09\t11\n+321\tval_321\t2008-04-09\t11\n+42\tval_42\t2008-04-09\t11\n+195\tval_195\t2008-04-09\t11\n+160\tval_160\t2008-04-09\t11\n+498\tval_498\t2008-04-09\t11\n+322\tval_322\t2008-04-09\t11\n+472\tval_472\t2008-04-09\t11\n+143\tval_143\t2008-04-09\t11\n+233\tval_233\t2008-04-09\t11\n+229\tval_229\t2008-04-09\t11\n+34\tval_34\t2008-04-09\t11\n+168\tval_168\t2008-04-09\t11\n+11\tval_11\t2008-04-09\t11\n+95\tval_95\t2008-04-09\t11\n+336\tval_336\t2008-04-09\t11\n+35\tval_35\t2008-04-09\t11\n+58\tval_58\t2008-04-09\t11\n 395\tval_395\t2008-04-09\t11\n-282\tval_282\t2008-04-09\t11\n-138\tval_138\t2008-04-09\t11\n-238\tval_238\t2008-04-09\t11\n-419\tval_419\t2008-04-09\t11\n-15\tval_15\t2008-04-09\t11\n-118\tval_118\t2008-04-09\t11\n-72\tval_72\t2008-04-09\t11\n-90\tval_90\t2008-04-09\t11\n-307\tval_307\t2008-04-09\t11\n-19\tval_19\t2008-04-09\t11\n-435\tval_435\t2008-04-09\t11\n-10\tval_10\t2008-04-09\t11\n-277\tval_277\t2008-04-09\t11\n-273\tval_273\t2008-04-09\t11\n-306\tval_306\t2008-04-09\t11\n-224\tval_224\t2008-04-09\t11\n-309\tval_309\t2008-04-09\t11\n-389\tval_389\t2008-04-09\t11\n-327\tval_327\t2008-04-09\t11\n+317\tval_317\t2008-04-09\t11\n+396\tval_396\t2008-04-09\t11\n+402\tval_402\t2008-04-09\t11\n+497\tval_497\t2008-04-09\t11\n+5\tval_5\t2008-04-09\t11\n+226\tval_226\t2008-04-09\t11\n+177\tval_177\t2008-04-09\t11\n+452\tval_452\t2008-04-09\t11\n 242\tval_242\t2008-04-09\t11\n-369\tval_369\t2008-04-09\t11\n-392\tval_392\t2008-04-09\t11\n-272\tval_272\t2008-04-09\t11\n-331\tval_331\t2008-04-09\t11\n 401\tval_401\t2008-04-09\t11\n+331\tval_331\t2008-04-09\t11\n+272\tval_272\t2008-04-09\t11\n+392\tval_392\t2008-04-09\t11\n+369\tval_369\t2008-04-09\t11\n 242\tval_242\t2008-04-09\t11\n-452\tval_452\t2008-04-09\t11\n-177\tval_177\t2008-04-09\t11\n-226\tval_226\t2008-04-09\t11\n-5\tval_5\t2008-04-09\t11\n-497\tval_497\t2008-04-09\t11\n-402\tval_402\t2008-04-09\t11\n-396\tval_396\t2008-04-09\t11\n-317\tval_317\t2008-04-09\t11\n+327\tval_327\t2008-04-09\t11\n+389\tval_389\t2008-04-09\t11\n+309\tval_309\t2008-04-09\t11\n+224\tval_224\t2008-04-09\t11\n+306\tval_306\t2008-04-09\t11\n+273\tval_273\t2008-04-09\t11\n+277\tval_277\t2008-04-09\t11\n+10\tval_10\t2008-04-09\t11\n+435\tval_435\t2008-04-09\t11\n+19\tval_19\t2008-04-09\t11\n+307\tval_307\t2008-04-09\t11\n+90\tval_90\t2008-04-09\t11\n+72\tval_72\t2008-04-09\t11\n+118\tval_118\t2008-04-09\t11\n+15\tval_15\t2008-04-09\t11\n+419\tval_419\t2008-04-09\t11\n+238\tval_238\t2008-04-09\t11\n+138\tval_138\t2008-04-09\t11\n+282\tval_282\t2008-04-09\t11\n 395\tval_395\t2008-04-09\t11\n-58\tval_58\t2008-04-09\t11\n-35\tval_35\t2008-04-09\t11\n-336\tval_336\t2008-04-09\t11\n+134\tval_134\t2008-04-09\t11\n+118\tval_118\t2008-04-09\t11\n+179\tval_179\t2008-04-09\t11\n+364\tval_364\t2008-04-09\t11\n+87\tval_87\t2008-04-09\t11\n+490\tval_490\t2008-04-09\t11\n+0\tval_0\t2008-04-09\t11\n+77\tval_77\t2008-04-09\t11\n+85\tval_85\t2008-04-09\t11\n+413\tval_413\t2008-04-09\t11\n+169\tval_169\t2008-04-09\t11\n+316\tval_316\t2008-04-09\t11\n+369\tval_369\t2008-04-09\t11\n+137\tval_137\t2008-04-09\t11\n+470\tval_470\t2008-04-09\t11\n+409\tval_409\t2008-04-09\t11\n+318\tval_318\t2008-04-09\t11\n+318\tval_318\t2008-04-09\t11\n+187\tval_187\t2008-04-09\t11\n+197\tval_197\t2008-04-09\t11\n+282\tval_282\t2008-04-09\t11\n+98\tval_98\t2008-04-09\t11\n+457\tval_457\t2008-04-09\t11\n+481\tval_481\t2008-04-09\t11\n+288\tval_288\t2008-04-09\t11\n+196\tval_196\t2008-04-09\t11\n 95\tval_95\t2008-04-09\t11\n-11\tval_11\t2008-04-09\t11\n-168\tval_168\t2008-04-09\t11\n-34\tval_34\t2008-04-09\t11\n-229\tval_229\t2008-04-09\t11\n-233\tval_233\t2008-04-09\t11\n-143\tval_143\t2008-04-09\t11\n-472\tval_472\t2008-04-09\t11\n-322\tval_322\t2008-04-09\t11\n-498\tval_498\t2008-04-09\t11\n-160\tval_160\t2008-04-09\t11\n-195\tval_195\t2008-04-09\t11\n-42\tval_42\t2008-04-09\t11\n-321\tval_321\t2008-04-09\t11\n-430\tval_430\t2008-04-09\t11\n-119\tval_119\t2008-04-09\t11\n-489\tval_489\t2008-04-09\t11\n-458\tval_458\t2008-04-09\t11\n-78\tval_78\t2008-04-09\t11\n-76\tval_76\t2008-04-09\t11\n-41\tval_41\t2008-04-09\t11\n-223\tval_223\t2008-04-09\t11\n-492\tval_492\t2008-04-09\t11\n-149\tval_149\t2008-04-09\t11\n-449\tval_449\t2008-04-09\t11\n-218\tval_218\t2008-04-09\t11\n-228\tval_228\t2008-04-09\t11\n-138\tval_138\t2008-04-09\t11\n-453\tval_453\t2008-04-09\t11\n-30\tval_30\t2008-04-09\t11\n-209\tval_209\t2008-04-09\t11\n-64\tval_64\t2008-04-09\t11\n+308\tval_308\t2008-04-09\t11\n 468\tval_468\t2008-04-09\t11\n-76\tval_76\t2008-04-09\t11\n-74\tval_74\t2008-04-09\t11\n-342\tval_342\t2008-04-09\t11\n-69\tval_69\t2008-04-09\t11\n+469\tval_469\t2008-04-09\t11\n+156\tval_156\t2008-04-09\t11\n+436\tval_436\t2008-04-09\t11\n+43\tval_43\t2008-04-09\t11\n+404\tval_404\t2008-04-09\t11\n+51\tval_51\t2008-04-09\t11\n+131\tval_131\t2008-04-09\t11\n+120\tval_120\t2008-04-09\t11\n+205\tval_205\t2008-04-09\t11\n 230\tval_230\t2008-04-09\t11\n-33\tval_33\t2008-04-09\t11\n-368\tval_368\t2008-04-09\t11\n-103\tval_103\t2008-04-09\t11\n-296\tval_296\t2008-04-09\t11\n-113\tval_113\t2008-04-09\t11\n-216\tval_216\t2008-04-09\t11\n-367\tval_367\t2008-04-09\t11\n-344\tval_344\t2008-04-09\t11\n-167\tval_167\t2008-04-09\t11\n-274\tval_274\t2008-04-09\t11\n-219\tval_219\t2008-04-09\t11\n-239\tval_239\t2008-04-09\t11\n-485\tval_485\t2008-04-09\t11\n-116\tval_116\t2008-04-09\t11\n-223\tval_223\t2008-04-09\t11\n-256\tval_256\t2008-04-09\t11\n-263\tval_263\t2008-04-09\t11\n-70\tval_70\t2008-04-09\t11\n-487\tval_487\t2008-04-09\t11\n-480\tval_480\t2008-04-09\t11\n-401\tval_401\t2008-04-09\t11\n-288\tval_288\t2008-04-09\t11\n+327\tval_327\t2008-04-09\t11\n+165\tval_165\t2008-04-09\t11\n+26\tval_26\t2008-04-09\t11\n+96\tval_96\t2008-04-09\t11\n+418\tval_418\t2008-04-09\t11\n 191\tval_191\t2008-04-09\t11\n-5\tval_5\t2008-04-09\t11\n-244\tval_244\t2008-04-09\t11\n-438\tval_438\t2008-04-09\t11\n-128\tval_128\t2008-04-09\t11\n-467\tval_467\t2008-04-09\t11\n-432\tval_432\t2008-04-09\t11\n-202\tval_202\t2008-04-09\t11\n-316\tval_316\t2008-04-09\t11\n-229\tval_229\t2008-04-09\t11\n-469\tval_469\t2008-04-09\t11\n+199\tval_199\t2008-04-09\t11\n+298\tval_298\t2008-04-09\t11\n+100\tval_100\t2008-04-09\t11\n+454\tval_454\t2008-04-09\t11\n+393\tval_393\t2008-04-09\t11\n+468\tval_468\t2008-04-09\t11\n+197\tval_197\t2008-04-09\t11\n+322\tval_322\t2008-04-09\t11\n+0\tval_0\t2008-04-09\t11\n+496\tval_496\t2008-04-09\t11\n+119\tval_119\t2008-04-09\t11\n+158\tval_158\t2008-04-09\t11\n+129\tval_129\t2008-04-09\t11\n+42\tval_42\t2008-04-09\t11\n+172\tval_172\t2008-04-09\t11\n+179\tval_179\t2008-04-09\t11\n+431\tval_431\t2008-04-09\t11\n 463\tval_463\t2008-04-09\t11\n-280\tval_280\t2008-04-09\t11\n-2\tval_2\t2008-04-09\t11\n-35\tval_35\t2008-04-09\t11\n-283\tval_283\t2008-04-09\t11\n-331\tval_331\t2008-04-09\t11\n-235\tval_235\t2008-04-09\t11\n-80\tval_80\t2008-04-09\t11\n-44\tval_44\t2008-04-09\t11\n-193\tval_193\t2008-04-09\t11\n-321\tval_321\t2008-04-09\t11\n-335\tval_335\t2008-04-09\t11\n-104\tval_104\t2008-04-09\t11\n+24\tval_24\t2008-04-09\t11\n+348\tval_348\t2008-04-09\t11\n+208\tval_208\t2008-04-09\t11\n+230\tval_230\t2008-04-09\t11\n+411\tval_411\t2008-04-09\t11\n+8\tval_8\t2008-04-09\t11\n+58\tval_58\t2008-04-09\t11\n 466\tval_466\t2008-04-09\t11\n-366\tval_366\t2008-04-09\t11\n-175\tval_175\t2008-04-09\t11\n-403\tval_403\t2008-04-09\t11\n-483\tval_483\t2008-04-09\t11\n-53\tval_53\t2008-04-09\t11\n-105\tval_105\t2008-04-09\t11\n-257\tval_257\t2008-04-09\t11\n-406\tval_406\t2008-04-09\t11\n-409\tval_409\t2008-04-09\t11\n-190\tval_190\t2008-04-09\t11\n-406\tval_406\t2008-04-09\t11\n-401\tval_401\t2008-04-09\t11\n-114\tval_114\t2008-04-09\t11\n-258\tval_258\t2008-04-09\t11\n-90\tval_90\t2008-04-09\t11\n-203\tval_203\t2008-04-09\t11\n-262\tval_262\t2008-04-09\t11\n 348\tval_348\t2008-04-09\t11\n-424\tval_424\t2008-04-09\t11\n+84\tval_84\t2008-04-09\t11\n+217\tval_217\t2008-04-09\t11\n+138\tval_138\t2008-04-09\t11\n+272\tval_272\t2008-04-09\t11\n+373\tval_373\t2008-04-09\t11\n+353\tval_353\t2008-04-09\t11\n+489\tval_489\t2008-04-09\t11\n+384\tval_384\t2008-04-09\t11\n+404\tval_404\t2008-04-09\t11\n+260\tval_260\t2008-04-09\t11\n+67\tval_67\t2008-04-09\t11\n+181\tval_181\t2008-04-09\t11\n+230\tval_230\t2008-04-09\t11\n 12\tval_12\t2008-04-09\t11\n-396\tval_396\t2008-04-09\t11\n-201\tval_201\t2008-04-09\t11\n-217\tval_217\t2008-04-09\t11\n-164\tval_164\t2008-04-09\t11\n-431\tval_431\t2008-04-09\t11\n-454\tval_454\t2008-04-09\t11\n-478\tval_478\t2008-04-09\t11\n-298\tval_298\t2008-04-09\t11\n-125\tval_125\t2008-04-09\t11\n-431\tval_431\t2008-04-09\t11\n-164\tval_164\t2008-04-09\t11\n-424\tval_424\t2008-04-09\t11\n+284\tval_284\t2008-04-09\t11\n+180\tval_180\t2008-04-09\t11\n+333\tval_333\t2008-04-09\t11\n+83\tval_83\t2008-04-09\t11\n+241\tval_241\t2008-04-09\t11\n+137\tval_137\t2008-04-09\t11\n+275\tval_275\t2008-04-09\t11\n+311\tval_311\t2008-04-09\t11\n+332\tval_332\t2008-04-09\t11\n+318\tval_318\t2008-04-09\t11\n+65\tval_65\t2008-04-09\t11\n+221\tval_221\t2008-04-09\t11\n+289\tval_289\t2008-04-09\t11\n+176\tval_176\t2008-04-09\t11\n+278\tval_278\t2008-04-09\t11\n+430\tval_430\t2008-04-09\t11\n+216\tval_216\t2008-04-09\t11\n+213\tval_213\t2008-04-09\t11\n+239\tval_239\t2008-04-09\t11\n+103\tval_103\t2008-04-09\t11\n+138\tval_138\t2008-04-09\t11\n+51\tval_51\t2008-04-09\t11\n+459\tval_459\t2008-04-09\t11\n+54\tval_54\t2008-04-09\t11\n+176\tval_176\t2008-04-09\t11\n 187\tval_187\t2008-04-09\t11\n+286\tval_286\t2008-04-09\t11\n+192\tval_192\t2008-04-09\t11\n+469\tval_469\t2008-04-09\t11\n+437\tval_437\t2008-04-09\t11\n+386\tval_386\t2008-04-09\t11\n+125\tval_125\t2008-04-09\t11\n+498\tval_498\t2008-04-09\t11\n 382\tval_382\t2008-04-09\t11\n-5\tval_5\t2008-04-09\t11\n-70\tval_70\t2008-04-09\t11\n-397\tval_397\t2008-04-09\t11\n-480\tval_480\t2008-04-09\t11\n-291\tval_291\t2008-04-09\t11\n-24\tval_24\t2008-04-09\t11\n-351\tval_351\t2008-04-09\t11\n-255\tval_255\t2008-04-09\t11\n-104\tval_104\t2008-04-09\t11\n-70\tval_70\t2008-04-09\t11\n-163\tval_163\t2008-04-09\t11\n+169\tval_169\t2008-04-09\t11\n+399\tval_399\t2008-04-09\t11\n+356\tval_356\t2008-04-09\t11\n+208\tval_208\t2008-04-09\t11\n+277\tval_277\t2008-04-09\t11\n+427\tval_427\t2008-04-09\t11\n+35\tval_35\t2008-04-09\t11\n+280\tval_280\t2008-04-09\t11\n+4\tval_4\t2008-04-09\t11\n+72\tval_72\t2008-04-09\t11\n+47\tval_47\t2008-04-09\t11\n+111\tval_111\t2008-04-09\t11\n+92\tval_92\t2008-04-09\t11\n+221\tval_221\t2008-04-09\t11\n+378\tval_378\t2008-04-09\t11\n+157\tval_157\t2008-04-09\t11\n+489\tval_489\t2008-04-09\t11\n+20\tval_20\t2008-04-09\t11\n+170\tval_170\t2008-04-09\t11\n+129\tval_129\t2008-04-09\t11\n+345\tval_345\t2008-04-09\t11\n 438\tval_438\t2008-04-09\t11\n-119\tval_119\t2008-04-09\t11\n-414\tval_414\t2008-04-09\t11\n-200\tval_200\t2008-04-09\t11\n-491\tval_491\t2008-04-09\t11\n-237\tval_237\t2008-04-09\t11\n+149\tval_149\t2008-04-09\t11\n+205\tval_205\t2008-04-09\t11\n+302\tval_302\t2008-04-09\t11\n+57\tval_57\t2008-04-09\t11\n+316\tval_316\t2008-04-09\t11\n+311\tval_311\t2008-04-09\t11\n+128\tval_128\t2008-04-09\t11\n+455\tval_455\t2008-04-09\t11\n+0\tval_0\t2008-04-09\t11\n+339\tval_339\t2008-04-09\t11\n+203\tval_203\t2008-04-09\t11\n+155\tval_155\t2008-04-09\t11\n+113\tval_113\t2008-04-09\t11\n+17\tval_17\t2008-04-09\t11\n+475\tval_475\t2008-04-09\t11\n+195\tval_195\t2008-04-09\t11\n+167\tval_167\t2008-04-09\t11\n+325\tval_325\t2008-04-09\t11\n+367\tval_367\t2008-04-09\t11\n+342\tval_342\t2008-04-09\t11\n 439\tval_439\t2008-04-09\t11\n-360\tval_360\t2008-04-09\t11\n-248\tval_248\t2008-04-09\t11\n-479\tval_479\t2008-04-09\t11\n-305\tval_305\t2008-04-09\t11\n+266\tval_266\t2008-04-09\t11\n+365\tval_365\t2008-04-09\t11\n+309\tval_309\t2008-04-09\t11\n+397\tval_397\t2008-04-09\t11\n+377\tval_377\t2008-04-09\t11\n+162\tval_162\t2008-04-09\t11\n+489\tval_489\t2008-04-09\t11\n 417\tval_417\t2008-04-09\t11\n+247\tval_247\t2008-04-09\t11\n+396\tval_396\t2008-04-09\t11\n+399\tval_399\t2008-04-09\t11\n+174\tval_174\t2008-04-09\t11\n+208\tval_208\t2008-04-09\t11\n+466\tval_466\t2008-04-09\t11\n 199\tval_199\t2008-04-09\t11\n-444\tval_444\t2008-04-09\t11\n-120\tval_120\t2008-04-09\t11\n-429\tval_429\t2008-04-09\t11\n-169\tval_169\t2008-04-09\t11\n-443\tval_443\t2008-04-09\t11\n-323\tval_323\t2008-04-09\t11\n-325\tval_325\t2008-04-09\t11\n-277\tval_277\t2008-04-09\t11\n-230\tval_230\t2008-04-09\t11\n-478\tval_478\t2008-04-09\t11\n-178\tval_178\t2008-04-09\t11\n-468\tval_468\t2008-04-09\t11\n-310\tval_310\t2008-04-09\t11\n-317\tval_317\t2008-04-09\t11\n-333\tval_333\t2008-04-09\t11\n-493\tval_493\t2008-04-09\t11\n-460\tval_460\t2008-04-09\t11\n 207\tval_207\t2008-04-09\t11\n-249\tval_249\t2008-04-09\t11\n-265\tval_265\t2008-04-09\t11\n-480\tval_480\t2008-04-09\t11\n-83\tval_83\t2008-04-09\t11\n-136\tval_136\t2008-04-09\t11\n-353\tval_353\t2008-04-09\t11\n-172\tval_172\t2008-04-09\t11\n-214\tval_214\t2008-04-09\t11\n-462\tval_462\t2008-04-09\t11\n-233\tval_233\t2008-04-09\t11\n-406\tval_406\t2008-04-09\t11\n-133\tval_133\t2008-04-09\t11\n-175\tval_175\t2008-04-09\t11\n-189\tval_189\t2008-04-09\t11\n-454\tval_454\t2008-04-09\t11\n-375\tval_375\t2008-04-09\t11\n-401\tval_401\t2008-04-09\t11\n-421\tval_421\t2008-04-09\t11\n-407\tval_407\t2008-04-09\t11\n-384\tval_384\t2008-04-09\t11\n-256\tval_256\t2008-04-09\t11\n-26\tval_26\t2008-04-09\t11\n-134\tval_134\t2008-04-09\t11\n-67\tval_67\t2008-04-09\t11\n-384\tval_384\t2008-04-09\t11\n-379\tval_379\t2008-04-09\t11\n-18\tval_18\t2008-04-09\t11\n-462\tval_462\t2008-04-09\t11\n-492\tval_492\t2008-04-09\t11\n-100\tval_100\t2008-04-09\t11\n-298\tval_298\t2008-04-09\t11\n-9\tval_9\t2008-04-09\t11\n-341\tval_341\t2008-04-09\t11\n-498\tval_498\t2008-04-09\t11\n-146\tval_146\t2008-04-09\t11\n-458\tval_458\t2008-04-09\t11\n-362\tval_362\t2008-04-09\t11\n-186\tval_186\t2008-04-09\t11\n-285\tval_285\t2008-04-09\t11\n-348\tval_348\t2008-04-09\t11\n-167\tval_167\t2008-04-09\t11\n-18\tval_18\t2008-04-09\t11\n-273\tval_273\t2008-04-09\t11\n-183\tval_183\t2008-04-09\t11\n+494\tval_494\t2008-04-09\t11\n+413\tval_413\t2008-04-09\t11\n+174\tval_174\t2008-04-09\t11\n+482\tval_482\t2008-04-09\t11\n+237\tval_237\t2008-04-09\t11\n+394\tval_394\t2008-04-09\t11\n+459\tval_459\t2008-04-09\t11\n+446\tval_446\t2008-04-09\t11\n+338\tval_338\t2008-04-09\t11\n+193\tval_193\t2008-04-09\t11\n+153\tval_153\t2008-04-09\t11\n+287\tval_287\t2008-04-09\t11\n+219\tval_219\t2008-04-09\t11\n+292\tval_292\t2008-04-09\t11\n+252\tval_252\t2008-04-09\t11\n+430\tval_430\t2008-04-09\t11\n+417\tval_417\t2008-04-09\t11\n+166\tval_166\t2008-04-09\t11\n+403\tval_403\t2008-04-09\t11\n+82\tval_82\t2008-04-09\t11\n+15\tval_15\t2008-04-09\t11\n+209\tval_209\t2008-04-09\t11\n+277\tval_277\t2008-04-09\t11\n 281\tval_281\t2008-04-09\t11\n-344\tval_344\t2008-04-09\t11\n-97\tval_97\t2008-04-09\t11\n-469\tval_469\t2008-04-09\t11\n-315\tval_315\t2008-04-09\t11\n-84\tval_84\t2008-04-09\t11\n-28\tval_28\t2008-04-09\t11\n+327\tval_327\t2008-04-09\t11\n 37\tval_37\t2008-04-09\t11\n-448\tval_448\t2008-04-09\t11\n+495\tval_495\t2008-04-09\t11\n+145\tval_145\t2008-04-09\t11\n+469\tval_469\t2008-04-09\t11\n 152\tval_152\t2008-04-09\t11\n-348\tval_348\t2008-04-09\t11\n-307\tval_307\t2008-04-09\t11\n-194\tval_194\t2008-04-09\t11\n-414\tval_414\t2008-04-09\t11\n-477\tval_477\t2008-04-09\t11\n-222\tval_222\t2008-04-09\t11\n-126\tval_126\t2008-04-09\t11\n-90\tval_90\t2008-04-09\t11\n-169\tval_169\t2008-04-09\t11\n-403\tval_403\t2008-04-09\t11\n-400\tval_400\t2008-04-09\t11\n-200\tval_200\t2008-04-09\t11\n-97\tval_97\t2008-04-09\t11\n+374\tval_374\t2008-04-09\t11\n+429\tval_429\t2008-04-09\t11\n+406\tval_406\t2008-04-09\t11\n+146\tval_146\t2008-04-09\t11\n+213\tval_213\t2008-04-09\t11\n+128\tval_128\t2008-04-09\t11\n+66\tval_66\t2008-04-09\t11\n+369\tval_369\t2008-04-09\t11\n+224\tval_224\t2008-04-09\t11\n+273\tval_273\t2008-04-09\t11\n+150\tval_150\t2008-04-09\t11\n+401\tval_401\t2008-04-09\t11\n+193\tval_193\t2008-04-09\t11\n+265\tval_265\t2008-04-09\t11\n+484\tval_484\t2008-04-09\t11\n+98\tval_98\t2008-04-09\t11\n+278\tval_278\t2008-04-09\t11\n+255\tval_255\t2008-04-09\t11\n+409\tval_409\t2008-04-09\t11\n+165\tval_165\t2008-04-09\t11\n+27\tval_27\t2008-04-09\t11\n+311\tval_311\t2008-04-09\t11\n+86\tval_86\t2008-04-09\t11\n 238\tval_238\t2008-04-09\t12\n 86\tval_86\t2008-04-09\t12\n 311\tval_311\t2008-04-09\t12",
                "deletions": 930
            },
            {
                "sha": "29aab50e65eeefad1d823549e3ea734ff9afb02a",
                "filename": "ql/src/test/results/clientpositive/tez/mrr.q.out",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/mrr.q.out",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/mrr.q.out",
                "status": "modified",
                "changes": 50,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/mrr.q.out?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -1338,24 +1338,27 @@ STAGE PLANS:\n                 mode: mergepartial\n                 outputColumnNames: _col0, _col1\n                 Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE\n-                Select Operator\n-                  expressions: _col0 (type: string), _col1 (type: bigint)\n-                  outputColumnNames: _col0, _col1\n-                  Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE\n-                  Reduce Output Operator\n-                    key expressions: _col1 (type: bigint)\n-                    sort order: +\n-                    Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE\n-                    value expressions: _col0 (type: string), _col1 (type: bigint)\n+                Filter Operator\n+                  predicate: (_col1 > 1) (type: boolean)\n+                  Statistics: Num rows: 4 Data size: 801 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    expressions: _col0 (type: string), _col1 (type: bigint)\n+                    outputColumnNames: _col0, _col1\n+                    Statistics: Num rows: 4 Data size: 801 Basic stats: COMPLETE Column stats: NONE\n+                    Reduce Output Operator\n+                      key expressions: _col1 (type: bigint)\n+                      sort order: +\n+                      Statistics: Num rows: 4 Data size: 801 Basic stats: COMPLETE Column stats: NONE\n+                      value expressions: _col0 (type: string), _col1 (type: bigint)\n         Reducer 11 \n             Reduce Operator Tree:\n               Extract\n-                Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE\n+                Statistics: Num rows: 4 Data size: 801 Basic stats: COMPLETE Column stats: NONE\n                 Reduce Output Operator\n                   key expressions: _col0 (type: string)\n                   sort order: +\n                   Map-reduce partition columns: _col0 (type: string)\n-                  Statistics: Num rows: 14 Data size: 2805 Basic stats: COMPLETE Column stats: NONE\n+                  Statistics: Num rows: 4 Data size: 801 Basic stats: COMPLETE Column stats: NONE\n                   value expressions: _col0 (type: string), _col1 (type: bigint)\n         Reducer 2 \n             Reduce Operator Tree:\n@@ -1396,25 +1399,22 @@ STAGE PLANS:\n                   2 {VALUE._col0} {VALUE._col1}\n                 outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5\n                 Statistics: Num rows: 30 Data size: 6171 Basic stats: COMPLETE Column stats: NONE\n-                Filter Operator\n-                  predicate: (_col1 > 1) (type: boolean)\n-                  Statistics: Num rows: 10 Data size: 2057 Basic stats: COMPLETE Column stats: NONE\n-                  Select Operator\n-                    expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: bigint), _col4 (type: string), _col5 (type: bigint)\n-                    outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5\n-                    Statistics: Num rows: 10 Data size: 2057 Basic stats: COMPLETE Column stats: NONE\n-                    Reduce Output Operator\n-                      key expressions: _col0 (type: string)\n-                      sort order: +\n-                      Statistics: Num rows: 10 Data size: 2057 Basic stats: COMPLETE Column stats: NONE\n-                      value expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: bigint), _col4 (type: string), _col5 (type: bigint)\n+                Select Operator\n+                  expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: bigint), _col4 (type: string), _col5 (type: bigint)\n+                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5\n+                  Statistics: Num rows: 30 Data size: 6171 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: _col0 (type: string)\n+                    sort order: +\n+                    Statistics: Num rows: 30 Data size: 6171 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: _col0 (type: string), _col1 (type: bigint), _col2 (type: string), _col3 (type: bigint), _col4 (type: string), _col5 (type: bigint)\n         Reducer 5 \n             Reduce Operator Tree:\n               Extract\n-                Statistics: Num rows: 10 Data size: 2057 Basic stats: COMPLETE Column stats: NONE\n+                Statistics: Num rows: 30 Data size: 6171 Basic stats: COMPLETE Column stats: NONE\n                 File Output Operator\n                   compressed: false\n-                  Statistics: Num rows: 10 Data size: 2057 Basic stats: COMPLETE Column stats: NONE\n+                  Statistics: Num rows: 30 Data size: 6171 Basic stats: COMPLETE Column stats: NONE\n                   table:\n                       input format: org.apache.hadoop.mapred.TextInputFormat\n                       output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                "deletions": 25
            },
            {
                "sha": "6b13942472c7a5d8690038a8f85e49c372401c99",
                "filename": "ql/src/test/results/clientpositive/tez/tez_dml.q.out",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/tez_dml.q.out",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/tez_dml.q.out",
                "status": "modified",
                "changes": 642,
                "additions": 327,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/tez_dml.q.out?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -436,6 +436,8 @@ STAGE DEPENDENCIES:\n STAGE PLANS:\n   Stage: Stage-1\n     Tez\n+      Edges:\n+        Reducer 2 <- Map 1 (SIMPLE_EDGE)\n #### A masked pattern was here ####\n       Vertices:\n         Map 1 \n@@ -447,14 +449,24 @@ STAGE PLANS:\n                     expressions: value (type: string), cnt (type: bigint)\n                     outputColumnNames: _col0, _col1\n                     Statistics: Num rows: 309 Data size: 2718 Basic stats: COMPLETE Column stats: NONE\n-                    File Output Operator\n-                      compressed: false\n+                    Reduce Output Operator\n+                      key expressions: _col1 (type: bigint)\n+                      sort order: +\n+                      Map-reduce partition columns: _col1 (type: bigint)\n                       Statistics: Num rows: 309 Data size: 2718 Basic stats: COMPLETE Column stats: NONE\n-                      table:\n-                          input format: org.apache.hadoop.mapred.TextInputFormat\n-                          output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n-                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n-                          name: default.tmp_src_part\n+                      value expressions: _col0 (type: string), _col1 (type: bigint)\n+        Reducer 2 \n+            Reduce Operator Tree:\n+              Extract\n+                Statistics: Num rows: 309 Data size: 2718 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 309 Data size: 2718 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+                      name: default.tmp_src_part\n \n   Stage: Stage-2\n     Dependency Collection\n@@ -515,314 +527,314 @@ POSTHOOK: Lineage: tmp_src_part PARTITION(d=3).c SIMPLE [(tmp_src)tmp_src.FieldS\n POSTHOOK: Lineage: tmp_src_part PARTITION(d=4).c SIMPLE [(tmp_src)tmp_src.FieldSchema(name:value, type:string, comment:null), ]\n POSTHOOK: Lineage: tmp_src_part PARTITION(d=5).c SIMPLE [(tmp_src)tmp_src.FieldSchema(name:value, type:string, comment:null), ]\n val_490\t1\n-val_287\t1\n-val_286\t1\n-val_285\t1\n-val_284\t1\n-val_283\t1\n-val_114\t1\n-val_487\t1\n-val_485\t1\n-val_28\t1\n-val_484\t1\n-val_181\t1\n-val_275\t1\n-val_274\t1\n-val_183\t1\n-val_483\t1\n-val_27\t1\n-val_266\t1\n-val_482\t1\n-val_263\t1\n-val_262\t1\n-val_260\t1\n-val_481\t1\n-val_258\t1\n-val_257\t1\n-val_116\t1\n-val_479\t1\n-val_252\t1\n-val_249\t1\n-val_248\t1\n-val_247\t1\n-val_244\t1\n-val_92\t1\n-val_241\t1\n-val_477\t1\n-val_475\t1\n-val_472\t1\n-val_470\t1\n-val_235\t1\n-val_47\t1\n-val_186\t1\n-val_126\t1\n-val_228\t1\n-val_226\t1\n-val_131\t1\n-val_467\t1\n-val_222\t1\n-val_133\t1\n-val_82\t1\n-val_218\t1\n-val_80\t1\n-val_460\t1\n-val_214\t1\n-val_8\t1\n-val_78\t1\n-val_189\t1\n-val_457\t1\n-val_455\t1\n-val_136\t1\n-val_202\t1\n-val_201\t1\n-val_453\t1\n-val_20\t1\n-val_2\t1\n-val_19\t1\n-val_452\t1\n-val_196\t1\n-val_449\t1\n-val_194\t1\n-val_190\t1\n-val_192\t1\n-val_448\t1\n-val_446\t1\n-val_444\t1\n-val_443\t1\n-val_44\t1\n-val_77\t1\n-val_143\t1\n-val_437\t1\n-val_436\t1\n-val_435\t1\n-val_432\t1\n-val_145\t1\n-val_150\t1\n-val_43\t1\n-val_10\t1\n-val_427\t1\n-val_74\t1\n-val_421\t1\n-val_9\t1\n-val_419\t1\n-val_418\t1\n-val_153\t1\n-val_105\t1\n-val_69\t1\n-val_411\t1\n-val_41\t1\n-val_155\t1\n-val_407\t1\n-val_156\t1\n-val_87\t1\n-val_157\t1\n-val_402\t1\n-val_158\t1\n-val_400\t1\n-val_4\t1\n-val_66\t1\n-val_65\t1\n-val_160\t1\n-val_64\t1\n-val_394\t1\n-val_393\t1\n-val_392\t1\n-val_389\t1\n-val_386\t1\n-val_162\t1\n-val_86\t1\n-val_379\t1\n-val_378\t1\n-val_377\t1\n-val_375\t1\n-val_374\t1\n-val_373\t1\n-val_57\t1\n-val_163\t1\n-val_368\t1\n-val_54\t1\n-val_366\t1\n-val_365\t1\n-val_364\t1\n-val_362\t1\n-val_360\t1\n-val_356\t1\n-val_53\t1\n-val_351\t1\n-val_166\t1\n-val_168\t1\n-val_345\t1\n-val_85\t1\n-val_11\t1\n-val_341\t1\n-val_34\t1\n-val_339\t1\n-val_338\t1\n-val_336\t1\n-val_335\t1\n-val_111\t1\n-val_332\t1\n-val_497\t1\n-val_33\t1\n-val_17\t1\n-val_496\t1\n-val_323\t1\n-val_495\t1\n-val_494\t1\n-val_170\t1\n-val_493\t1\n-val_177\t1\n-val_315\t1\n-val_178\t1\n-val_310\t1\n-val_96\t1\n-val_308\t1\n-val_491\t1\n-val_306\t1\n-val_305\t1\n-val_302\t1\n-val_30\t1\n-val_180\t1\n-val_296\t1\n-val_292\t1\n-val_291\t1\n val_289\t1\n-val_98\t2\n-val_97\t2\n-val_95\t2\n-val_84\t2\n-val_83\t2\n-val_76\t2\n-val_72\t2\n-val_67\t2\n-val_58\t2\n-val_51\t2\n-val_492\t2\n-val_478\t2\n-val_463\t2\n-val_462\t2\n-val_459\t2\n-val_458\t2\n-val_439\t2\n-val_429\t2\n-val_424\t2\n-val_42\t2\n-val_414\t2\n-val_413\t2\n-val_404\t2\n-val_399\t2\n-val_397\t2\n-val_395\t2\n-val_382\t2\n-val_37\t2\n-val_367\t2\n-val_353\t2\n-val_344\t2\n-val_342\t2\n-val_333\t2\n-val_331\t2\n-val_325\t2\n-val_322\t2\n-val_321\t2\n-val_317\t2\n-val_309\t2\n-val_307\t2\n-val_288\t2\n-val_282\t2\n-val_281\t2\n-val_280\t2\n-val_278\t2\n-val_272\t2\n-val_265\t2\n-val_26\t2\n-val_256\t2\n-val_255\t2\n-val_242\t2\n-val_24\t2\n-val_239\t2\n-val_238\t2\n-val_237\t2\n-val_233\t2\n-val_229\t2\n-val_224\t2\n-val_223\t2\n-val_221\t2\n-val_219\t2\n-val_217\t2\n-val_216\t2\n-val_213\t2\n-val_209\t2\n-val_207\t2\n-val_205\t2\n-val_203\t2\n-val_200\t2\n-val_197\t2\n-val_195\t2\n-val_191\t2\n-val_18\t2\n-val_179\t2\n-val_176\t2\n-val_175\t2\n-val_174\t2\n-val_172\t2\n-val_165\t2\n-val_164\t2\n-val_152\t2\n-val_15\t2\n-val_149\t2\n-val_146\t2\n-val_137\t2\n-val_134\t2\n-val_129\t2\n-val_125\t2\n-val_120\t2\n-val_12\t2\n-val_118\t2\n-val_113\t2\n-val_104\t2\n-val_103\t2\n+val_291\t1\n+val_292\t1\n+val_296\t1\n+val_180\t1\n+val_30\t1\n+val_302\t1\n+val_305\t1\n+val_306\t1\n+val_491\t1\n+val_308\t1\n+val_96\t1\n+val_310\t1\n+val_178\t1\n+val_315\t1\n+val_177\t1\n+val_493\t1\n+val_170\t1\n+val_494\t1\n+val_495\t1\n+val_323\t1\n+val_496\t1\n+val_17\t1\n+val_33\t1\n+val_497\t1\n+val_332\t1\n+val_111\t1\n+val_335\t1\n+val_336\t1\n+val_338\t1\n+val_339\t1\n+val_34\t1\n+val_341\t1\n+val_11\t1\n+val_85\t1\n+val_345\t1\n+val_168\t1\n+val_166\t1\n+val_351\t1\n+val_53\t1\n+val_356\t1\n+val_360\t1\n+val_362\t1\n+val_364\t1\n+val_365\t1\n+val_366\t1\n+val_54\t1\n+val_368\t1\n+val_163\t1\n+val_57\t1\n+val_373\t1\n+val_374\t1\n+val_375\t1\n+val_377\t1\n+val_378\t1\n+val_379\t1\n+val_86\t1\n+val_162\t1\n+val_386\t1\n+val_389\t1\n+val_392\t1\n+val_393\t1\n+val_394\t1\n+val_64\t1\n+val_160\t1\n+val_65\t1\n+val_66\t1\n+val_4\t1\n+val_400\t1\n+val_158\t1\n+val_402\t1\n+val_157\t1\n+val_87\t1\n+val_156\t1\n+val_407\t1\n+val_155\t1\n+val_41\t1\n+val_411\t1\n+val_69\t1\n+val_105\t1\n+val_153\t1\n+val_418\t1\n+val_419\t1\n+val_9\t1\n+val_421\t1\n+val_74\t1\n+val_427\t1\n+val_10\t1\n+val_43\t1\n+val_150\t1\n+val_145\t1\n+val_432\t1\n+val_435\t1\n+val_436\t1\n+val_437\t1\n+val_143\t1\n+val_77\t1\n+val_44\t1\n+val_443\t1\n+val_444\t1\n+val_446\t1\n+val_448\t1\n+val_192\t1\n+val_190\t1\n+val_194\t1\n+val_449\t1\n+val_196\t1\n+val_452\t1\n+val_19\t1\n+val_2\t1\n+val_20\t1\n+val_453\t1\n+val_201\t1\n+val_202\t1\n+val_136\t1\n+val_455\t1\n+val_457\t1\n+val_189\t1\n+val_78\t1\n+val_8\t1\n+val_214\t1\n+val_460\t1\n+val_80\t1\n+val_218\t1\n+val_82\t1\n+val_133\t1\n+val_222\t1\n+val_467\t1\n+val_131\t1\n+val_226\t1\n+val_228\t1\n+val_126\t1\n+val_186\t1\n+val_47\t1\n+val_235\t1\n+val_470\t1\n+val_472\t1\n+val_475\t1\n+val_477\t1\n+val_241\t1\n+val_92\t1\n+val_244\t1\n+val_247\t1\n+val_248\t1\n+val_249\t1\n+val_252\t1\n+val_479\t1\n+val_116\t1\n+val_257\t1\n+val_258\t1\n+val_481\t1\n+val_260\t1\n+val_262\t1\n+val_263\t1\n+val_482\t1\n+val_266\t1\n+val_27\t1\n+val_483\t1\n+val_183\t1\n+val_274\t1\n+val_275\t1\n+val_181\t1\n+val_484\t1\n+val_28\t1\n+val_485\t1\n+val_487\t1\n+val_114\t1\n+val_283\t1\n+val_284\t1\n+val_285\t1\n+val_286\t1\n+val_287\t1\n+val_84\t2\n+val_95\t2\n+val_97\t2\n+val_98\t2\n val_100\t2\n-val_498\t3\n-val_369\t3\n-val_384\t3\n+val_103\t2\n+val_104\t2\n+val_113\t2\n+val_118\t2\n+val_12\t2\n+val_120\t2\n+val_125\t2\n+val_129\t2\n+val_134\t2\n+val_137\t2\n+val_146\t2\n+val_149\t2\n+val_15\t2\n+val_152\t2\n+val_164\t2\n+val_165\t2\n+val_172\t2\n+val_174\t2\n+val_175\t2\n+val_176\t2\n+val_179\t2\n+val_18\t2\n+val_191\t2\n+val_195\t2\n+val_197\t2\n+val_200\t2\n+val_203\t2\n+val_205\t2\n+val_207\t2\n+val_209\t2\n+val_213\t2\n+val_216\t2\n+val_217\t2\n+val_219\t2\n+val_221\t2\n+val_223\t2\n+val_224\t2\n+val_229\t2\n+val_233\t2\n+val_237\t2\n+val_238\t2\n+val_239\t2\n+val_24\t2\n+val_242\t2\n+val_255\t2\n+val_256\t2\n+val_26\t2\n+val_265\t2\n+val_272\t2\n+val_278\t2\n+val_280\t2\n+val_281\t2\n+val_282\t2\n+val_288\t2\n+val_307\t2\n+val_309\t2\n+val_317\t2\n+val_321\t2\n+val_322\t2\n+val_325\t2\n+val_331\t2\n+val_333\t2\n+val_342\t2\n+val_344\t2\n+val_353\t2\n+val_367\t2\n+val_37\t2\n+val_382\t2\n+val_395\t2\n+val_397\t2\n+val_399\t2\n+val_404\t2\n+val_413\t2\n+val_414\t2\n+val_42\t2\n+val_424\t2\n+val_429\t2\n+val_439\t2\n+val_458\t2\n+val_459\t2\n+val_462\t2\n+val_463\t2\n+val_478\t2\n+val_492\t2\n+val_51\t2\n+val_58\t2\n+val_67\t2\n+val_72\t2\n+val_76\t2\n+val_83\t2\n val_396\t3\n-val_403\t3\n-val_409\t3\n-val_417\t3\n-val_5\t3\n-val_430\t3\n-val_70\t3\n-val_119\t3\n-val_0\t3\n-val_431\t3\n-val_438\t3\n-val_480\t3\n-val_193\t3\n-val_199\t3\n-val_208\t3\n-val_187\t3\n-val_273\t3\n-val_298\t3\n-val_454\t3\n-val_311\t3\n-val_316\t3\n-val_466\t3\n-val_90\t3\n-val_128\t3\n-val_318\t3\n-val_327\t3\n-val_167\t3\n+val_384\t3\n+val_369\t3\n+val_498\t3\n val_35\t3\n-val_468\t4\n-val_489\t4\n+val_167\t3\n+val_327\t3\n+val_318\t3\n+val_128\t3\n+val_90\t3\n+val_466\t3\n+val_316\t3\n+val_311\t3\n+val_454\t3\n+val_298\t3\n+val_273\t3\n+val_187\t3\n+val_208\t3\n+val_199\t3\n+val_193\t3\n+val_480\t3\n+val_438\t3\n+val_431\t3\n+val_0\t3\n+val_119\t3\n+val_70\t3\n+val_430\t3\n+val_5\t3\n+val_417\t3\n+val_409\t3\n+val_403\t3\n val_406\t4\n-val_169\t4\n-val_138\t4\n+val_489\t4\n+val_468\t4\n val_277\t4\n-val_469\t5\n-val_401\t5\n-val_230\t5\n+val_138\t4\n+val_169\t4\n val_348\t5\n+val_230\t5\n+val_401\t5\n+val_469\t5\n PREHOOK: query: -- multi insert\n CREATE TABLE even (c int, d string)\n PREHOOK: type: CREATETABLE\n@@ -867,10 +879,10 @@ POSTHOOK: Lineage: tmp_src_part PARTITION(d=5).c SIMPLE [(tmp_src)tmp_src.FieldS\n STAGE DEPENDENCIES:\n   Stage-2 is a root stage\n   Stage-3 depends on stages: Stage-2\n-  Stage-0 depends on stages: Stage-3\n-  Stage-4 depends on stages: Stage-0\n   Stage-1 depends on stages: Stage-3\n-  Stage-5 depends on stages: Stage-1\n+  Stage-4 depends on stages: Stage-1\n+  Stage-0 depends on stages: Stage-3\n+  Stage-5 depends on stages: Stage-0\n \n STAGE PLANS:\n   Stage: Stage-2\n@@ -916,28 +928,28 @@ STAGE PLANS:\n   Stage: Stage-3\n     Dependency Collection\n \n-  Stage: Stage-0\n+  Stage: Stage-1\n     Move Operator\n       tables:\n           replace: false\n           table:\n               input format: org.apache.hadoop.mapred.TextInputFormat\n               output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n               serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n-              name: default.even\n+              name: default.odd\n \n   Stage: Stage-4\n     Stats-Aggr Operator\n \n-  Stage: Stage-1\n+  Stage: Stage-0\n     Move Operator\n       tables:\n           replace: false\n           table:\n               input format: org.apache.hadoop.mapred.TextInputFormat\n               output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n               serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n-              name: default.odd\n+              name: default.even\n \n   Stage: Stage-5\n     Stats-Aggr Operator",
                "deletions": 315
            },
            {
                "sha": "4c0d57cc1ab2f93a7f9a6dbb2e7e6f2cd2e133c8",
                "filename": "ql/src/test/results/clientpositive/tez/tez_union.q.out",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/tez_union.q.out",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/tez_union.q.out",
                "status": "modified",
                "changes": 2477,
                "additions": 952,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/tez_union.q.out?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -79,1546 +79,55 @@ STAGE PLANS:\n     Fetch Operator\n       limit: -1\n \n-PREHOOK: query: select s1.key as key, s1.value as value from src s1 join src s3 on s1.key=s3.key\n+PREHOOK: query: create table ut as\n+select s1.key as key, s1.value as value from src s1 join src s3 on s1.key=s3.key\n UNION  ALL  \n select s2.key as key, s2.value as value from src s2\n-PREHOOK: type: QUERY\n+PREHOOK: type: CREATETABLE_AS_SELECT\n PREHOOK: Input: default@src\n-#### A masked pattern was here ####\n-POSTHOOK: query: select s1.key as key, s1.value as value from src s1 join src s3 on s1.key=s3.key\n+POSTHOOK: query: create table ut as\n+select s1.key as key, s1.value as value from src s1 join src s3 on s1.key=s3.key\n UNION  ALL  \n select s2.key as key, s2.value as value from src s2\n-POSTHOOK: type: QUERY\n+POSTHOOK: type: CREATETABLE_AS_SELECT\n POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: select * from ut order by key, value limit 20\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@ut\n+#### A masked pattern was here ####\n+POSTHOOK: query: select * from ut order by key, value limit 20\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@ut\n #### A masked pattern was here ####\n-238\tval_238\n-238\tval_238\n-86\tval_86\n-311\tval_311\n-311\tval_311\n-311\tval_311\n-27\tval_27\n-165\tval_165\n-165\tval_165\n-409\tval_409\n-409\tval_409\n-409\tval_409\n-255\tval_255\n-255\tval_255\n-278\tval_278\n-278\tval_278\n-98\tval_98\n-98\tval_98\n-484\tval_484\n-265\tval_265\n-265\tval_265\n-193\tval_193\n-193\tval_193\n-193\tval_193\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-150\tval_150\n-273\tval_273\n-273\tval_273\n-273\tval_273\n-224\tval_224\n-224\tval_224\n-369\tval_369\n-369\tval_369\n-369\tval_369\n-66\tval_66\n-128\tval_128\n-128\tval_128\n-128\tval_128\n-213\tval_213\n-213\tval_213\n-146\tval_146\n-146\tval_146\n-406\tval_406\n-406\tval_406\n-406\tval_406\n-406\tval_406\n-429\tval_429\n-429\tval_429\n-374\tval_374\n-152\tval_152\n-152\tval_152\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-145\tval_145\n-495\tval_495\n-37\tval_37\n-37\tval_37\n-327\tval_327\n-327\tval_327\n-327\tval_327\n-281\tval_281\n-281\tval_281\n-277\tval_277\n-277\tval_277\n-277\tval_277\n-277\tval_277\n-209\tval_209\n-209\tval_209\n-15\tval_15\n-15\tval_15\n-82\tval_82\n-403\tval_403\n-403\tval_403\n-403\tval_403\n-166\tval_166\n-417\tval_417\n-417\tval_417\n-417\tval_417\n-430\tval_430\n-430\tval_430\n-430\tval_430\n-252\tval_252\n-292\tval_292\n-219\tval_219\n-219\tval_219\n-287\tval_287\n-153\tval_153\n-193\tval_193\n-193\tval_193\n-193\tval_193\n-338\tval_338\n-446\tval_446\n-459\tval_459\n-459\tval_459\n-394\tval_394\n-237\tval_237\n-237\tval_237\n-482\tval_482\n-174\tval_174\n-174\tval_174\n-413\tval_413\n-413\tval_413\n-494\tval_494\n-207\tval_207\n-207\tval_207\n-199\tval_199\n-199\tval_199\n-199\tval_199\n-466\tval_466\n-466\tval_466\n-466\tval_466\n-208\tval_208\n-208\tval_208\n-208\tval_208\n-174\tval_174\n-174\tval_174\n-399\tval_399\n-399\tval_399\n-396\tval_396\n-396\tval_396\n-396\tval_396\n-247\tval_247\n-417\tval_417\n-417\tval_417\n-417\tval_417\n-489\tval_489\n-489\tval_489\n-489\tval_489\n-489\tval_489\n-162\tval_162\n-377\tval_377\n-397\tval_397\n-397\tval_397\n-309\tval_309\n-309\tval_309\n-365\tval_365\n-266\tval_266\n-439\tval_439\n-439\tval_439\n-342\tval_342\n-342\tval_342\n-367\tval_367\n-367\tval_367\n-325\tval_325\n-325\tval_325\n-167\tval_167\n-167\tval_167\n-167\tval_167\n-195\tval_195\n-195\tval_195\n-475\tval_475\n-17\tval_17\n-113\tval_113\n-113\tval_113\n-155\tval_155\n-203\tval_203\n-203\tval_203\n-339\tval_339\n 0\tval_0\n 0\tval_0\n 0\tval_0\n-455\tval_455\n-128\tval_128\n-128\tval_128\n-128\tval_128\n-311\tval_311\n-311\tval_311\n-311\tval_311\n-316\tval_316\n-316\tval_316\n-316\tval_316\n-57\tval_57\n-302\tval_302\n-205\tval_205\n-205\tval_205\n-149\tval_149\n-149\tval_149\n-438\tval_438\n-438\tval_438\n-438\tval_438\n-345\tval_345\n-129\tval_129\n-129\tval_129\n-170\tval_170\n-20\tval_20\n-489\tval_489\n-489\tval_489\n-489\tval_489\n-489\tval_489\n-157\tval_157\n-378\tval_378\n-221\tval_221\n-221\tval_221\n-92\tval_92\n-111\tval_111\n-47\tval_47\n-72\tval_72\n-72\tval_72\n-4\tval_4\n-280\tval_280\n-280\tval_280\n-35\tval_35\n-35\tval_35\n-35\tval_35\n-427\tval_427\n-277\tval_277\n-277\tval_277\n-277\tval_277\n-277\tval_277\n-208\tval_208\n-208\tval_208\n-208\tval_208\n-356\tval_356\n-399\tval_399\n-399\tval_399\n-169\tval_169\n-169\tval_169\n-169\tval_169\n-169\tval_169\n-382\tval_382\n-382\tval_382\n-498\tval_498\n-498\tval_498\n-498\tval_498\n-125\tval_125\n-125\tval_125\n-386\tval_386\n-437\tval_437\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-192\tval_192\n-286\tval_286\n-187\tval_187\n-187\tval_187\n-187\tval_187\n-176\tval_176\n-176\tval_176\n-54\tval_54\n-459\tval_459\n-459\tval_459\n-51\tval_51\n-51\tval_51\n-138\tval_138\n-138\tval_138\n-138\tval_138\n-138\tval_138\n-103\tval_103\n-103\tval_103\n-239\tval_239\n-239\tval_239\n-213\tval_213\n-213\tval_213\n-216\tval_216\n-216\tval_216\n-430\tval_430\n-430\tval_430\n-430\tval_430\n-278\tval_278\n-278\tval_278\n-176\tval_176\n-176\tval_176\n-289\tval_289\n-221\tval_221\n-221\tval_221\n-65\tval_65\n-318\tval_318\n-318\tval_318\n-318\tval_318\n-332\tval_332\n-311\tval_311\n-311\tval_311\n-311\tval_311\n-275\tval_275\n-137\tval_137\n-137\tval_137\n-241\tval_241\n-83\tval_83\n-83\tval_83\n-333\tval_333\n-333\tval_333\n-180\tval_180\n-284\tval_284\n-12\tval_12\n-12\tval_12\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-181\tval_181\n-67\tval_67\n-67\tval_67\n-260\tval_260\n-404\tval_404\n-404\tval_404\n-384\tval_384\n-384\tval_384\n-384\tval_384\n-489\tval_489\n-489\tval_489\n-489\tval_489\n-489\tval_489\n-353\tval_353\n-353\tval_353\n-373\tval_373\n-272\tval_272\n-272\tval_272\n-138\tval_138\n-138\tval_138\n-138\tval_138\n-138\tval_138\n-217\tval_217\n-217\tval_217\n-84\tval_84\n-84\tval_84\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-466\tval_466\n-466\tval_466\n-466\tval_466\n-58\tval_58\n-58\tval_58\n-8\tval_8\n-411\tval_411\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-208\tval_208\n-208\tval_208\n-208\tval_208\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-24\tval_24\n-24\tval_24\n-463\tval_463\n-463\tval_463\n-431\tval_431\n-431\tval_431\n-431\tval_431\n-179\tval_179\n-179\tval_179\n-172\tval_172\n-172\tval_172\n-42\tval_42\n-42\tval_42\n-129\tval_129\n-129\tval_129\n-158\tval_158\n-119\tval_119\n-119\tval_119\n-119\tval_119\n-496\tval_496\n 0\tval_0\n 0\tval_0\n 0\tval_0\n-322\tval_322\n-322\tval_322\n-197\tval_197\n-197\tval_197\n-468\tval_468\n-468\tval_468\n-468\tval_468\n-468\tval_468\n-393\tval_393\n-454\tval_454\n-454\tval_454\n-454\tval_454\n-100\tval_100\n-100\tval_100\n-298\tval_298\n-298\tval_298\n-298\tval_298\n-199\tval_199\n-199\tval_199\n-199\tval_199\n-191\tval_191\n-191\tval_191\n-418\tval_418\n-96\tval_96\n-26\tval_26\n-26\tval_26\n-165\tval_165\n-165\tval_165\n-327\tval_327\n-327\tval_327\n-327\tval_327\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-205\tval_205\n-205\tval_205\n-120\tval_120\n-120\tval_120\n-131\tval_131\n-51\tval_51\n-51\tval_51\n-404\tval_404\n-404\tval_404\n-43\tval_43\n-436\tval_436\n-156\tval_156\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-468\tval_468\n-468\tval_468\n-468\tval_468\n-468\tval_468\n-308\tval_308\n-95\tval_95\n-95\tval_95\n-196\tval_196\n-288\tval_288\n-288\tval_288\n-481\tval_481\n-457\tval_457\n-98\tval_98\n-98\tval_98\n-282\tval_282\n-282\tval_282\n-197\tval_197\n-197\tval_197\n-187\tval_187\n-187\tval_187\n-187\tval_187\n-318\tval_318\n-318\tval_318\n-318\tval_318\n-318\tval_318\n-318\tval_318\n-318\tval_318\n-409\tval_409\n-409\tval_409\n-409\tval_409\n-470\tval_470\n-137\tval_137\n-137\tval_137\n-369\tval_369\n-369\tval_369\n-369\tval_369\n-316\tval_316\n-316\tval_316\n-316\tval_316\n-169\tval_169\n-169\tval_169\n-169\tval_169\n-169\tval_169\n-413\tval_413\n-413\tval_413\n-85\tval_85\n-77\tval_77\n 0\tval_0\n 0\tval_0\n 0\tval_0\n-490\tval_490\n-87\tval_87\n-364\tval_364\n-179\tval_179\n-179\tval_179\n-118\tval_118\n-118\tval_118\n-134\tval_134\n-134\tval_134\n-395\tval_395\n-395\tval_395\n-282\tval_282\n-282\tval_282\n-138\tval_138\n-138\tval_138\n-138\tval_138\n-138\tval_138\n-238\tval_238\n-238\tval_238\n-419\tval_419\n-15\tval_15\n-15\tval_15\n-118\tval_118\n-118\tval_118\n-72\tval_72\n-72\tval_72\n-90\tval_90\n-90\tval_90\n-90\tval_90\n-307\tval_307\n-307\tval_307\n-19\tval_19\n-435\tval_435\n-10\tval_10\n-277\tval_277\n-277\tval_277\n-277\tval_277\n-277\tval_277\n-273\tval_273\n-273\tval_273\n-273\tval_273\n-306\tval_306\n-224\tval_224\n-224\tval_224\n-309\tval_309\n-309\tval_309\n-389\tval_389\n-327\tval_327\n-327\tval_327\n-327\tval_327\n-242\tval_242\n-242\tval_242\n-369\tval_369\n-369\tval_369\n-369\tval_369\n-392\tval_392\n-272\tval_272\n-272\tval_272\n-331\tval_331\n-331\tval_331\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-242\tval_242\n-242\tval_242\n-452\tval_452\n-177\tval_177\n-226\tval_226\n-5\tval_5\n-5\tval_5\n-5\tval_5\n-497\tval_497\n-402\tval_402\n-396\tval_396\n-396\tval_396\n-396\tval_396\n-317\tval_317\n-317\tval_317\n-395\tval_395\n-395\tval_395\n-58\tval_58\n-58\tval_58\n-35\tval_35\n-35\tval_35\n-35\tval_35\n-336\tval_336\n-95\tval_95\n-95\tval_95\n-11\tval_11\n-168\tval_168\n-34\tval_34\n-229\tval_229\n-229\tval_229\n-233\tval_233\n-233\tval_233\n-143\tval_143\n-472\tval_472\n-322\tval_322\n-322\tval_322\n-498\tval_498\n-498\tval_498\n-498\tval_498\n-160\tval_160\n-195\tval_195\n-195\tval_195\n-42\tval_42\n-42\tval_42\n-321\tval_321\n-321\tval_321\n-430\tval_430\n-430\tval_430\n-430\tval_430\n-119\tval_119\n-119\tval_119\n-119\tval_119\n-489\tval_489\n-489\tval_489\n-489\tval_489\n-489\tval_489\n-458\tval_458\n-458\tval_458\n-78\tval_78\n-76\tval_76\n-76\tval_76\n-41\tval_41\n-223\tval_223\n-223\tval_223\n-492\tval_492\n-492\tval_492\n-149\tval_149\n-149\tval_149\n-449\tval_449\n-218\tval_218\n-228\tval_228\n-138\tval_138\n-138\tval_138\n-138\tval_138\n-138\tval_138\n-453\tval_453\n-30\tval_30\n-209\tval_209\n-209\tval_209\n-64\tval_64\n-468\tval_468\n-468\tval_468\n-468\tval_468\n-468\tval_468\n-76\tval_76\n-76\tval_76\n-74\tval_74\n-342\tval_342\n-342\tval_342\n-69\tval_69\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-33\tval_33\n-368\tval_368\n-103\tval_103\n-103\tval_103\n-296\tval_296\n-113\tval_113\n-113\tval_113\n-216\tval_216\n-216\tval_216\n-367\tval_367\n-367\tval_367\n-344\tval_344\n-344\tval_344\n-167\tval_167\n-167\tval_167\n-167\tval_167\n-274\tval_274\n-219\tval_219\n-219\tval_219\n-239\tval_239\n-239\tval_239\n-485\tval_485\n-116\tval_116\n-223\tval_223\n-223\tval_223\n-256\tval_256\n-256\tval_256\n-263\tval_263\n-70\tval_70\n-70\tval_70\n-70\tval_70\n-487\tval_487\n-480\tval_480\n-480\tval_480\n-480\tval_480\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-288\tval_288\n-288\tval_288\n-191\tval_191\n-191\tval_191\n-5\tval_5\n-5\tval_5\n-5\tval_5\n-244\tval_244\n-438\tval_438\n-438\tval_438\n-438\tval_438\n-128\tval_128\n-128\tval_128\n-128\tval_128\n-467\tval_467\n-432\tval_432\n-202\tval_202\n-316\tval_316\n-316\tval_316\n-316\tval_316\n-229\tval_229\n-229\tval_229\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-463\tval_463\n-463\tval_463\n-280\tval_280\n-280\tval_280\n-2\tval_2\n-35\tval_35\n-35\tval_35\n-35\tval_35\n-283\tval_283\n-331\tval_331\n-331\tval_331\n-235\tval_235\n-80\tval_80\n-44\tval_44\n-193\tval_193\n-193\tval_193\n-193\tval_193\n-321\tval_321\n-321\tval_321\n-335\tval_335\n-104\tval_104\n-104\tval_104\n-466\tval_466\n-466\tval_466\n-466\tval_466\n-366\tval_366\n-175\tval_175\n-175\tval_175\n-403\tval_403\n-403\tval_403\n-403\tval_403\n-483\tval_483\n-53\tval_53\n-105\tval_105\n-257\tval_257\n-406\tval_406\n-406\tval_406\n-406\tval_406\n-406\tval_406\n-409\tval_409\n-409\tval_409\n-409\tval_409\n-190\tval_190\n-406\tval_406\n-406\tval_406\n-406\tval_406\n-406\tval_406\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-114\tval_114\n-258\tval_258\n-90\tval_90\n-90\tval_90\n-90\tval_90\n-203\tval_203\n-203\tval_203\n-262\tval_262\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-424\tval_424\n-424\tval_424\n-12\tval_12\n-12\tval_12\n-396\tval_396\n-396\tval_396\n-396\tval_396\n-201\tval_201\n-217\tval_217\n-217\tval_217\n-164\tval_164\n-164\tval_164\n-431\tval_431\n-431\tval_431\n-431\tval_431\n-454\tval_454\n-454\tval_454\n-454\tval_454\n-478\tval_478\n-478\tval_478\n-298\tval_298\n-298\tval_298\n-298\tval_298\n-125\tval_125\n-125\tval_125\n-431\tval_431\n-431\tval_431\n-431\tval_431\n-164\tval_164\n-164\tval_164\n-424\tval_424\n-424\tval_424\n-187\tval_187\n-187\tval_187\n-187\tval_187\n-382\tval_382\n-382\tval_382\n-5\tval_5\n-5\tval_5\n-5\tval_5\n-70\tval_70\n-70\tval_70\n-70\tval_70\n-397\tval_397\n-397\tval_397\n-480\tval_480\n-480\tval_480\n-480\tval_480\n-291\tval_291\n-24\tval_24\n-24\tval_24\n-351\tval_351\n-255\tval_255\n-255\tval_255\n-104\tval_104\n-104\tval_104\n-70\tval_70\n-70\tval_70\n-70\tval_70\n-163\tval_163\n-438\tval_438\n-438\tval_438\n-438\tval_438\n-119\tval_119\n-119\tval_119\n-119\tval_119\n-414\tval_414\n-414\tval_414\n-200\tval_200\n-200\tval_200\n-491\tval_491\n-237\tval_237\n-237\tval_237\n-439\tval_439\n-439\tval_439\n-360\tval_360\n-248\tval_248\n-479\tval_479\n-305\tval_305\n-417\tval_417\n-417\tval_417\n-417\tval_417\n-199\tval_199\n-199\tval_199\n-199\tval_199\n-444\tval_444\n-120\tval_120\n-120\tval_120\n-429\tval_429\n-429\tval_429\n-169\tval_169\n-169\tval_169\n-169\tval_169\n-169\tval_169\n-443\tval_443\n-323\tval_323\n-325\tval_325\n-325\tval_325\n-277\tval_277\n-277\tval_277\n-277\tval_277\n-277\tval_277\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-230\tval_230\n-478\tval_478\n-478\tval_478\n-178\tval_178\n-468\tval_468\n-468\tval_468\n-468\tval_468\n-468\tval_468\n-310\tval_310\n-317\tval_317\n-317\tval_317\n-333\tval_333\n-333\tval_333\n-493\tval_493\n-460\tval_460\n-207\tval_207\n-207\tval_207\n-249\tval_249\n-265\tval_265\n-265\tval_265\n-480\tval_480\n-480\tval_480\n-480\tval_480\n-83\tval_83\n-83\tval_83\n-136\tval_136\n-353\tval_353\n-353\tval_353\n-172\tval_172\n-172\tval_172\n-214\tval_214\n-462\tval_462\n-462\tval_462\n-233\tval_233\n-233\tval_233\n-406\tval_406\n-406\tval_406\n-406\tval_406\n-406\tval_406\n-133\tval_133\n-175\tval_175\n-175\tval_175\n-189\tval_189\n-454\tval_454\n-454\tval_454\n-454\tval_454\n-375\tval_375\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-401\tval_401\n-421\tval_421\n-407\tval_407\n-384\tval_384\n-384\tval_384\n-384\tval_384\n-256\tval_256\n-256\tval_256\n-26\tval_26\n-26\tval_26\n-134\tval_134\n-134\tval_134\n-67\tval_67\n-67\tval_67\n-384\tval_384\n-384\tval_384\n-384\tval_384\n-379\tval_379\n-18\tval_18\n-18\tval_18\n-462\tval_462\n-462\tval_462\n-492\tval_492\n-492\tval_492\n-100\tval_100\n-100\tval_100\n-298\tval_298\n-298\tval_298\n-298\tval_298\n-9\tval_9\n-341\tval_341\n-498\tval_498\n-498\tval_498\n-498\tval_498\n-146\tval_146\n-146\tval_146\n-458\tval_458\n-458\tval_458\n-362\tval_362\n-186\tval_186\n-285\tval_285\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-167\tval_167\n-167\tval_167\n-167\tval_167\n-18\tval_18\n-18\tval_18\n-273\tval_273\n-273\tval_273\n-273\tval_273\n-183\tval_183\n-281\tval_281\n-281\tval_281\n-344\tval_344\n-344\tval_344\n-97\tval_97\n-97\tval_97\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-469\tval_469\n-315\tval_315\n-84\tval_84\n-84\tval_84\n-28\tval_28\n-37\tval_37\n-37\tval_37\n-448\tval_448\n-152\tval_152\n-152\tval_152\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-348\tval_348\n-307\tval_307\n-307\tval_307\n-194\tval_194\n-414\tval_414\n-414\tval_414\n-477\tval_477\n-222\tval_222\n-126\tval_126\n-90\tval_90\n-90\tval_90\n-90\tval_90\n-169\tval_169\n-169\tval_169\n-169\tval_169\n-169\tval_169\n-403\tval_403\n-403\tval_403\n-403\tval_403\n-400\tval_400\n-200\tval_200\n-200\tval_200\n-97\tval_97\n-97\tval_97\n-238\tval_238\n-86\tval_86\n-311\tval_311\n-27\tval_27\n-165\tval_165\n-409\tval_409\n-255\tval_255\n-278\tval_278\n-98\tval_98\n-484\tval_484\n-265\tval_265\n-193\tval_193\n-401\tval_401\n-150\tval_150\n-273\tval_273\n-224\tval_224\n-369\tval_369\n-66\tval_66\n-128\tval_128\n-213\tval_213\n-146\tval_146\n-406\tval_406\n-429\tval_429\n-374\tval_374\n-152\tval_152\n-469\tval_469\n-145\tval_145\n-495\tval_495\n-37\tval_37\n-327\tval_327\n-281\tval_281\n-277\tval_277\n-209\tval_209\n-15\tval_15\n-82\tval_82\n-403\tval_403\n-166\tval_166\n-417\tval_417\n-430\tval_430\n-252\tval_252\n-292\tval_292\n-219\tval_219\n-287\tval_287\n-153\tval_153\n-193\tval_193\n-338\tval_338\n-446\tval_446\n-459\tval_459\n-394\tval_394\n-237\tval_237\n-482\tval_482\n-174\tval_174\n-413\tval_413\n-494\tval_494\n-207\tval_207\n-199\tval_199\n-466\tval_466\n-208\tval_208\n-174\tval_174\n-399\tval_399\n-396\tval_396\n-247\tval_247\n-417\tval_417\n-489\tval_489\n-162\tval_162\n-377\tval_377\n-397\tval_397\n-309\tval_309\n-365\tval_365\n-266\tval_266\n-439\tval_439\n-342\tval_342\n-367\tval_367\n-325\tval_325\n-167\tval_167\n-195\tval_195\n-475\tval_475\n-17\tval_17\n-113\tval_113\n-155\tval_155\n-203\tval_203\n-339\tval_339\n 0\tval_0\n-455\tval_455\n-128\tval_128\n-311\tval_311\n-316\tval_316\n-57\tval_57\n-302\tval_302\n-205\tval_205\n-149\tval_149\n-438\tval_438\n-345\tval_345\n-129\tval_129\n-170\tval_170\n-20\tval_20\n-489\tval_489\n-157\tval_157\n-378\tval_378\n-221\tval_221\n-92\tval_92\n-111\tval_111\n-47\tval_47\n-72\tval_72\n-4\tval_4\n-280\tval_280\n-35\tval_35\n-427\tval_427\n-277\tval_277\n-208\tval_208\n-356\tval_356\n-399\tval_399\n-169\tval_169\n-382\tval_382\n-498\tval_498\n-125\tval_125\n-386\tval_386\n-437\tval_437\n-469\tval_469\n-192\tval_192\n-286\tval_286\n-187\tval_187\n-176\tval_176\n-54\tval_54\n-459\tval_459\n-51\tval_51\n-138\tval_138\n-103\tval_103\n-239\tval_239\n-213\tval_213\n-216\tval_216\n-430\tval_430\n-278\tval_278\n-176\tval_176\n-289\tval_289\n-221\tval_221\n-65\tval_65\n-318\tval_318\n-332\tval_332\n-311\tval_311\n-275\tval_275\n-137\tval_137\n-241\tval_241\n-83\tval_83\n-333\tval_333\n-180\tval_180\n-284\tval_284\n-12\tval_12\n-230\tval_230\n-181\tval_181\n-67\tval_67\n-260\tval_260\n-404\tval_404\n-384\tval_384\n-489\tval_489\n-353\tval_353\n-373\tval_373\n-272\tval_272\n-138\tval_138\n-217\tval_217\n-84\tval_84\n-348\tval_348\n-466\tval_466\n-58\tval_58\n-8\tval_8\n-411\tval_411\n-230\tval_230\n-208\tval_208\n-348\tval_348\n-24\tval_24\n-463\tval_463\n-431\tval_431\n-179\tval_179\n-172\tval_172\n-42\tval_42\n-129\tval_129\n-158\tval_158\n-119\tval_119\n-496\tval_496\n 0\tval_0\n-322\tval_322\n-197\tval_197\n-468\tval_468\n-393\tval_393\n-454\tval_454\n-100\tval_100\n-298\tval_298\n-199\tval_199\n-191\tval_191\n-418\tval_418\n-96\tval_96\n-26\tval_26\n-165\tval_165\n-327\tval_327\n-230\tval_230\n-205\tval_205\n-120\tval_120\n-131\tval_131\n-51\tval_51\n-404\tval_404\n-43\tval_43\n-436\tval_436\n-156\tval_156\n-469\tval_469\n-468\tval_468\n-308\tval_308\n-95\tval_95\n-196\tval_196\n-288\tval_288\n-481\tval_481\n-457\tval_457\n-98\tval_98\n-282\tval_282\n-197\tval_197\n-187\tval_187\n-318\tval_318\n-318\tval_318\n-409\tval_409\n-470\tval_470\n-137\tval_137\n-369\tval_369\n-316\tval_316\n-169\tval_169\n-413\tval_413\n-85\tval_85\n-77\tval_77\n 0\tval_0\n-490\tval_490\n-87\tval_87\n-364\tval_364\n-179\tval_179\n-118\tval_118\n-134\tval_134\n-395\tval_395\n-282\tval_282\n-138\tval_138\n-238\tval_238\n-419\tval_419\n-15\tval_15\n-118\tval_118\n-72\tval_72\n-90\tval_90\n-307\tval_307\n-19\tval_19\n-435\tval_435\n 10\tval_10\n-277\tval_277\n-273\tval_273\n-306\tval_306\n-224\tval_224\n-309\tval_309\n-389\tval_389\n-327\tval_327\n-242\tval_242\n-369\tval_369\n-392\tval_392\n-272\tval_272\n-331\tval_331\n-401\tval_401\n-242\tval_242\n-452\tval_452\n-177\tval_177\n-226\tval_226\n-5\tval_5\n-497\tval_497\n-402\tval_402\n-396\tval_396\n-317\tval_317\n-395\tval_395\n-58\tval_58\n-35\tval_35\n-336\tval_336\n-95\tval_95\n-11\tval_11\n-168\tval_168\n-34\tval_34\n-229\tval_229\n-233\tval_233\n-143\tval_143\n-472\tval_472\n-322\tval_322\n-498\tval_498\n-160\tval_160\n-195\tval_195\n-42\tval_42\n-321\tval_321\n-430\tval_430\n-119\tval_119\n-489\tval_489\n-458\tval_458\n-78\tval_78\n-76\tval_76\n-41\tval_41\n-223\tval_223\n-492\tval_492\n-149\tval_149\n-449\tval_449\n-218\tval_218\n-228\tval_228\n-138\tval_138\n-453\tval_453\n-30\tval_30\n-209\tval_209\n-64\tval_64\n-468\tval_468\n-76\tval_76\n-74\tval_74\n-342\tval_342\n-69\tval_69\n-230\tval_230\n-33\tval_33\n-368\tval_368\n-103\tval_103\n-296\tval_296\n-113\tval_113\n-216\tval_216\n-367\tval_367\n-344\tval_344\n-167\tval_167\n-274\tval_274\n-219\tval_219\n-239\tval_239\n-485\tval_485\n-116\tval_116\n-223\tval_223\n-256\tval_256\n-263\tval_263\n-70\tval_70\n-487\tval_487\n-480\tval_480\n-401\tval_401\n-288\tval_288\n-191\tval_191\n-5\tval_5\n-244\tval_244\n-438\tval_438\n-128\tval_128\n-467\tval_467\n-432\tval_432\n-202\tval_202\n-316\tval_316\n-229\tval_229\n-469\tval_469\n-463\tval_463\n-280\tval_280\n-2\tval_2\n-35\tval_35\n-283\tval_283\n-331\tval_331\n-235\tval_235\n-80\tval_80\n-44\tval_44\n-193\tval_193\n-321\tval_321\n-335\tval_335\n-104\tval_104\n-466\tval_466\n-366\tval_366\n-175\tval_175\n-403\tval_403\n-483\tval_483\n-53\tval_53\n-105\tval_105\n-257\tval_257\n-406\tval_406\n-409\tval_409\n-190\tval_190\n-406\tval_406\n-401\tval_401\n-114\tval_114\n-258\tval_258\n-90\tval_90\n-203\tval_203\n-262\tval_262\n-348\tval_348\n-424\tval_424\n-12\tval_12\n-396\tval_396\n-201\tval_201\n-217\tval_217\n-164\tval_164\n-431\tval_431\n-454\tval_454\n-478\tval_478\n-298\tval_298\n-125\tval_125\n-431\tval_431\n-164\tval_164\n-424\tval_424\n-187\tval_187\n-382\tval_382\n-5\tval_5\n-70\tval_70\n-397\tval_397\n-480\tval_480\n-291\tval_291\n-24\tval_24\n-351\tval_351\n-255\tval_255\n-104\tval_104\n-70\tval_70\n-163\tval_163\n-438\tval_438\n-119\tval_119\n-414\tval_414\n-200\tval_200\n-491\tval_491\n-237\tval_237\n-439\tval_439\n-360\tval_360\n-248\tval_248\n-479\tval_479\n-305\tval_305\n-417\tval_417\n-199\tval_199\n-444\tval_444\n-120\tval_120\n-429\tval_429\n-169\tval_169\n-443\tval_443\n-323\tval_323\n-325\tval_325\n-277\tval_277\n-230\tval_230\n-478\tval_478\n-178\tval_178\n-468\tval_468\n-310\tval_310\n-317\tval_317\n-333\tval_333\n-493\tval_493\n-460\tval_460\n-207\tval_207\n-249\tval_249\n-265\tval_265\n-480\tval_480\n-83\tval_83\n-136\tval_136\n-353\tval_353\n-172\tval_172\n-214\tval_214\n-462\tval_462\n-233\tval_233\n-406\tval_406\n-133\tval_133\n-175\tval_175\n-189\tval_189\n-454\tval_454\n-375\tval_375\n-401\tval_401\n-421\tval_421\n-407\tval_407\n-384\tval_384\n-256\tval_256\n-26\tval_26\n-134\tval_134\n-67\tval_67\n-384\tval_384\n-379\tval_379\n-18\tval_18\n-462\tval_462\n-492\tval_492\n+10\tval_10\n+100\tval_100\n+100\tval_100\n+100\tval_100\n 100\tval_100\n-298\tval_298\n-9\tval_9\n-341\tval_341\n-498\tval_498\n-146\tval_146\n-458\tval_458\n-362\tval_362\n-186\tval_186\n-285\tval_285\n-348\tval_348\n-167\tval_167\n-18\tval_18\n-273\tval_273\n-183\tval_183\n-281\tval_281\n-344\tval_344\n-97\tval_97\n-469\tval_469\n-315\tval_315\n-84\tval_84\n-28\tval_28\n-37\tval_37\n-448\tval_448\n-152\tval_152\n-348\tval_348\n-307\tval_307\n-194\tval_194\n-414\tval_414\n-477\tval_477\n-222\tval_222\n-126\tval_126\n-90\tval_90\n-169\tval_169\n-403\tval_403\n-400\tval_400\n-200\tval_200\n-97\tval_97\n+100\tval_100\n+100\tval_100\n+PREHOOK: query: drop table ut\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@ut\n+PREHOOK: Output: default@ut\n+POSTHOOK: query: drop table ut\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@ut\n+POSTHOOK: Output: default@ut\n PREHOOK: query: explain\n with u as (select * from src union all select * from src)\n select count(*) from (select u1.key as k1, u2.key as k2 from\n@@ -1736,16 +245,934 @@ STAGE PLANS:\n     Fetch Operator\n       limit: -1\n \n-PREHOOK: query: with u as (select * from src union all select * from src)\n-select count(*) from (select u1.key as k1, u2.key as k2 from\n+PREHOOK: query: create table ut as\n+with u as (select * from src union all select * from src)\n+select count(*) as cnt from (select u1.key as k1, u2.key as k2 from\n+u as u1 join u as u2 on (u1.key = u2.key)) a\n+PREHOOK: type: CREATETABLE_AS_SELECT\n+PREHOOK: Input: default@src\n+POSTHOOK: query: create table ut as\n+with u as (select * from src union all select * from src)\n+select count(*) as cnt from (select u1.key as k1, u2.key as k2 from\n u as u1 join u as u2 on (u1.key = u2.key)) a\n+POSTHOOK: type: CREATETABLE_AS_SELECT\n+POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: select * from ut order by cnt limit 20\n PREHOOK: type: QUERY\n+PREHOOK: Input: default@ut\n+#### A masked pattern was here ####\n+POSTHOOK: query: select * from ut order by cnt limit 20\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@ut\n+#### A masked pattern was here ####\n+4112\n+PREHOOK: query: drop table ut\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@ut\n+PREHOOK: Output: default@ut\n+POSTHOOK: query: drop table ut\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@ut\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: explain select s1.key as skey, u1.key as ukey from\n+src s1\n+join (select * from src union all select * from src) u1 on s1.key = u1.key\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain select s1.key as skey, u1.key as ukey from\n+src s1\n+join (select * from src union all select * from src) u1 on s1.key = u1.key\n+POSTHOOK: type: QUERY\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 2 <- Map 1 (BROADCAST_EDGE), Union 3 (CONTAINS)\n+        Map 4 <- Map 1 (BROADCAST_EDGE), Union 3 (CONTAINS)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s1\n+                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string)\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string)\n+        Map 2 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src\n+                  Select Operator\n+                    expressions: key (type: string), value (type: string)\n+                    outputColumnNames: _col0, _col1\n+                    Map Join Operator\n+                      condition map:\n+                           Inner Join 0 to 1\n+                      condition expressions:\n+                        0 {key}\n+                        1 {_col0}\n+                      keys:\n+                        0 key (type: string)\n+                        1 _col0 (type: string)\n+                      outputColumnNames: _col0, _col4\n+                      Select Operator\n+                        expressions: _col0 (type: string), _col4 (type: string)\n+                        outputColumnNames: _col0, _col1\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src\n+                  Select Operator\n+                    expressions: key (type: string), value (type: string)\n+                    outputColumnNames: _col0, _col1\n+                    Map Join Operator\n+                      condition map:\n+                           Inner Join 0 to 1\n+                      condition expressions:\n+                        0 {key}\n+                        1 {_col0}\n+                      keys:\n+                        0 key (type: string)\n+                        1 _col0 (type: string)\n+                      outputColumnNames: _col0, _col4\n+                      Select Operator\n+                        expressions: _col0 (type: string), _col4 (type: string)\n+                        outputColumnNames: _col0, _col1\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 3 \n+            Vertex: Union 3\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+\n+PREHOOK: query: create table ut as\n+select s1.key as skey, u1.key as ukey from\n+src s1\n+join (select * from src union all select * from src) u1 on s1.key = u1.key\n+PREHOOK: type: CREATETABLE_AS_SELECT\n PREHOOK: Input: default@src\n+POSTHOOK: query: create table ut as\n+select s1.key as skey, u1.key as ukey from\n+src s1\n+join (select * from src union all select * from src) u1 on s1.key = u1.key\n+POSTHOOK: type: CREATETABLE_AS_SELECT\n+POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: select * from ut order by skey, ukey limit 20\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@ut\n #### A masked pattern was here ####\n-POSTHOOK: query: with u as (select * from src union all select * from src)\n-select count(*) from (select u1.key as k1, u2.key as k2 from\n-u as u1 join u as u2 on (u1.key = u2.key)) a\n+POSTHOOK: query: select * from ut order by skey, ukey limit 20\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@ut\n+#### A masked pattern was here ####\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+10\t10\n+10\t10\n+PREHOOK: query: drop table ut\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@ut\n+PREHOOK: Output: default@ut\n+POSTHOOK: query: drop table ut\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@ut\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: explain select s1.key as skey, u1.key as ukey, s8.key as lkey from \n+src s1\n+join (select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+      union all select s4.key from src s4 join src s5 on s4.key = s5.key\n+      union all select s6.key from src s6 join src s7 on s6.key = s7.key) u1 on (s1.key = u1.key)\n+join src s8 on (u1.key = s8.key)\n+order by lkey\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain select s1.key as skey, u1.key as ukey, s8.key as lkey from \n+src s1\n+join (select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+      union all select s4.key from src s4 join src s5 on s4.key = s5.key\n+      union all select s6.key from src s6 join src s7 on s6.key = s7.key) u1 on (s1.key = u1.key)\n+join src s8 on (u1.key = s8.key)\n+order by lkey\n+POSTHOOK: type: QUERY\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 2 <- Map 1 (BROADCAST_EDGE), Union 3 (CONTAINS), Map 5 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)\n+        Map 7 <- Map 1 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE), Union 3 (CONTAINS), Map 8 (BROADCAST_EDGE)\n+        Map 9 <- Map 1 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE), Union 3 (CONTAINS), Map 10 (BROADCAST_EDGE)\n+        Reducer 4 <- Union 3 (SIMPLE_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s1\n+                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string)\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string)\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string)\n+        Map 10 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s5\n+                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+        Map 2 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s2\n+                  Map Join Operator\n+                    condition map:\n+                         Inner Join 0 to 1\n+                    condition expressions:\n+                      0 {key}\n+                      1 \n+                    keys:\n+                      0 key (type: string)\n+                      1 key (type: string)\n+                    outputColumnNames: _col0\n+                    Select Operator\n+                      expressions: _col0 (type: string)\n+                      outputColumnNames: _col0\n+                      Map Join Operator\n+                        condition map:\n+                             Inner Join 0 to 1\n+                             Inner Join 1 to 2\n+                        condition expressions:\n+                          0 {key}\n+                          1 {_col0}\n+                          2 {key}\n+                        keys:\n+                          0 key (type: string)\n+                          1 _col0 (type: string)\n+                          2 key (type: string)\n+                        outputColumnNames: _col0, _col4, _col5\n+                        Select Operator\n+                          expressions: _col0 (type: string), _col4 (type: string), _col5 (type: string)\n+                          outputColumnNames: _col0, _col1, _col2\n+                          Reduce Output Operator\n+                            key expressions: _col2 (type: string)\n+                            sort order: +\n+                            value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string)\n+        Map 5 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s3\n+                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+        Map 6 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s7\n+                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+        Map 7 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s6\n+                  Map Join Operator\n+                    condition map:\n+                         Inner Join 0 to 1\n+                    condition expressions:\n+                      0 {key}\n+                      1 \n+                    keys:\n+                      0 key (type: string)\n+                      1 key (type: string)\n+                    outputColumnNames: _col0\n+                    Select Operator\n+                      expressions: _col0 (type: string)\n+                      outputColumnNames: _col0\n+                      Map Join Operator\n+                        condition map:\n+                             Inner Join 0 to 1\n+                             Inner Join 1 to 2\n+                        condition expressions:\n+                          0 {key}\n+                          1 {_col0}\n+                          2 {key}\n+                        keys:\n+                          0 key (type: string)\n+                          1 _col0 (type: string)\n+                          2 key (type: string)\n+                        outputColumnNames: _col0, _col4, _col5\n+                        Select Operator\n+                          expressions: _col0 (type: string), _col4 (type: string), _col5 (type: string)\n+                          outputColumnNames: _col0, _col1, _col2\n+                          Reduce Output Operator\n+                            key expressions: _col2 (type: string)\n+                            sort order: +\n+                            value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string)\n+        Map 8 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s8\n+                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string)\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string)\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string)\n+        Map 9 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s4\n+                  Map Join Operator\n+                    condition map:\n+                         Inner Join 0 to 1\n+                    condition expressions:\n+                      0 {key}\n+                      1 \n+                    keys:\n+                      0 key (type: string)\n+                      1 key (type: string)\n+                    outputColumnNames: _col0\n+                    Select Operator\n+                      expressions: _col0 (type: string)\n+                      outputColumnNames: _col0\n+                      Map Join Operator\n+                        condition map:\n+                             Inner Join 0 to 1\n+                             Inner Join 1 to 2\n+                        condition expressions:\n+                          0 {key}\n+                          1 {_col0}\n+                          2 {key}\n+                        keys:\n+                          0 key (type: string)\n+                          1 _col0 (type: string)\n+                          2 key (type: string)\n+                        outputColumnNames: _col0, _col4, _col5\n+                        Select Operator\n+                          expressions: _col0 (type: string), _col4 (type: string), _col5 (type: string)\n+                          outputColumnNames: _col0, _col1, _col2\n+                          Reduce Output Operator\n+                            key expressions: _col2 (type: string)\n+                            sort order: +\n+                            value expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string)\n+        Reducer 4 \n+            Reduce Operator Tree:\n+              Extract\n+                Statistics: Num rows: 415 Data size: 42193 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 415 Data size: 42193 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.TextInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 3 \n+            Vertex: Union 3\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+\n+PREHOOK: query: create table ut as\n+select s1.key as skey, u1.key as ukey, s8.key as lkey from \n+src s1\n+join (select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+      union all select s4.key from src s4 join src s5 on s4.key = s5.key\n+      union all select s6.key from src s6 join src s7 on s6.key = s7.key) u1 on (s1.key = u1.key)\n+join src s8 on (u1.key = s8.key)\n+order by lkey\n+PREHOOK: type: CREATETABLE_AS_SELECT\n+PREHOOK: Input: default@src\n+POSTHOOK: query: create table ut as\n+select s1.key as skey, u1.key as ukey, s8.key as lkey from \n+src s1\n+join (select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+      union all select s4.key from src s4 join src s5 on s4.key = s5.key\n+      union all select s6.key from src s6 join src s7 on s6.key = s7.key) u1 on (s1.key = u1.key)\n+join src s8 on (u1.key = s8.key)\n+order by lkey\n+POSTHOOK: type: CREATETABLE_AS_SELECT\n+POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: select * from ut order by skey, ukey, lkey limit 100\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@ut\n+#### A masked pattern was here ####\n+POSTHOOK: query: select * from ut order by skey, ukey, lkey limit 100\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@ut\n+#### A masked pattern was here ####\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+0\t0\t0\n+PREHOOK: query: drop table ut\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@ut\n+PREHOOK: Output: default@ut\n+POSTHOOK: query: drop table ut\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@ut\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: explain\n+select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+union all select s4.key from src s4 join src s5 on s4.key = s5.key\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain\n+select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+union all select s4.key from src s4 join src s5 on s4.key = s5.key\n POSTHOOK: type: QUERY\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS), Map 3 (BROADCAST_EDGE)\n+        Map 4 <- Union 2 (CONTAINS), Map 5 (BROADCAST_EDGE)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s2\n+                  Map Join Operator\n+                    condition map:\n+                         Inner Join 0 to 1\n+                    condition expressions:\n+                      0 {key}\n+                      1 \n+                    keys:\n+                      0 key (type: string)\n+                      1 key (type: string)\n+                    outputColumnNames: _col0\n+                    Select Operator\n+                      expressions: _col0 (type: string)\n+                      outputColumnNames: _col0\n+                      Select Operator\n+                        expressions: _col0 (type: string)\n+                        outputColumnNames: _col0\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s3\n+                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s4\n+                  Map Join Operator\n+                    condition map:\n+                         Inner Join 0 to 1\n+                    condition expressions:\n+                      0 {key}\n+                      1 \n+                    keys:\n+                      0 key (type: string)\n+                      1 key (type: string)\n+                    outputColumnNames: _col0\n+                    Select Operator\n+                      expressions: _col0 (type: string)\n+                      outputColumnNames: _col0\n+                      Select Operator\n+                        expressions: _col0 (type: string)\n+                        outputColumnNames: _col0\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 5 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s5\n+                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+\n+PREHOOK: query: create table ut as\n+select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+union all select s4.key from src s4 join src s5 on s4.key = s5.key\n+PREHOOK: type: CREATETABLE_AS_SELECT\n+PREHOOK: Input: default@src\n+POSTHOOK: query: create table ut as\n+select s2.key as key from src s2 join src s3 on s2.key = s3.key\n+union all select s4.key from src s4 join src s5 on s4.key = s5.key\n+POSTHOOK: type: CREATETABLE_AS_SELECT\n POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: select * from ut order by key limit 30\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@ut\n #### A masked pattern was here ####\n-4112\n+POSTHOOK: query: select * from ut order by key limit 30\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@ut\n+#### A masked pattern was here ####\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+10\n+10\n+100\n+100\n+100\n+100\n+100\n+100\n+100\n+100\n+103\n+103\n+PREHOOK: query: drop table ut\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@ut\n+PREHOOK: Output: default@ut\n+POSTHOOK: query: drop table ut\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@ut\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: explain\n+select * from\n+(select * from src union all select * from src) u\n+left outer join src s on u.key = s.key\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain\n+select * from\n+(select * from src union all select * from src) u\n+left outer join src s on u.key = s.key\n+POSTHOOK: type: QUERY\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS), Map 3 (BROADCAST_EDGE)\n+        Map 4 <- Map 3 (BROADCAST_EDGE), Union 2 (CONTAINS)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src\n+                  Select Operator\n+                    expressions: key (type: string), value (type: string)\n+                    outputColumnNames: _col0, _col1\n+                    Map Join Operator\n+                      condition map:\n+                           Left Outer Join0 to 1\n+                      condition expressions:\n+                        0 {_col0} {_col1}\n+                        1 {key} {value}\n+                      keys:\n+                        0 _col0 (type: string)\n+                        1 key (type: string)\n+                      outputColumnNames: _col0, _col1, _col2, _col3\n+                      Select Operator\n+                        expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)\n+                        outputColumnNames: _col0, _col1, _col2, _col3\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s\n+                  Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string), value (type: string)\n+                  Reduce Output Operator\n+                    key expressions: key (type: string)\n+                    sort order: +\n+                    Map-reduce partition columns: key (type: string)\n+                    Statistics: Num rows: 29 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: key (type: string), value (type: string)\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src\n+                  Select Operator\n+                    expressions: key (type: string), value (type: string)\n+                    outputColumnNames: _col0, _col1\n+                    Map Join Operator\n+                      condition map:\n+                           Left Outer Join0 to 1\n+                      condition expressions:\n+                        0 {_col0} {_col1}\n+                        1 {key} {value}\n+                      keys:\n+                        0 _col0 (type: string)\n+                        1 key (type: string)\n+                      outputColumnNames: _col0, _col1, _col2, _col3\n+                      Select Operator\n+                        expressions: _col0 (type: string), _col1 (type: string), _col2 (type: string), _col3 (type: string)\n+                        outputColumnNames: _col0, _col1, _col2, _col3\n+                        File Output Operator\n+                          compressed: false\n+                          table:\n+                              input format: org.apache.hadoop.mapred.TextInputFormat\n+                              output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                              serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+\n+PREHOOK: query: explain\n+select u.key as ukey, s.key as skey from\n+(select * from src union all select * from src) u\n+right outer join src s on u.key = s.key\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain\n+select u.key as ukey, s.key as skey from\n+(select * from src union all select * from src) u\n+right outer join src s on u.key = s.key\n+POSTHOOK: type: QUERY\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 is a root stage\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Tez\n+      Edges:\n+        Map 1 <- Union 2 (CONTAINS)\n+        Map 3 <- Union 2 (BROADCAST_EDGE)\n+        Map 4 <- Union 2 (CONTAINS)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src\n+                  Select Operator\n+                    expressions: key (type: string), value (type: string)\n+                    outputColumnNames: _col0, _col1\n+                    Reduce Output Operator\n+                      key expressions: _col0 (type: string)\n+                      sort order: +\n+                      Map-reduce partition columns: _col0 (type: string)\n+                      value expressions: _col0 (type: string)\n+        Map 3 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: s\n+                  Statistics: Num rows: 58 Data size: 5812 Basic stats: COMPLETE Column stats: NONE\n+                  Map Join Operator\n+                    condition map:\n+                         Right Outer Join0 to 1\n+                    condition expressions:\n+                      0 {_col0}\n+                      1 {key}\n+                    keys:\n+                      0 _col0 (type: string)\n+                      1 key (type: string)\n+                    outputColumnNames: _col0, _col2\n+                    Statistics: Num rows: 63 Data size: 12786 Basic stats: COMPLETE Column stats: NONE\n+                    Select Operator\n+                      expressions: _col0 (type: string), _col2 (type: string)\n+                      outputColumnNames: _col0, _col1\n+                      Statistics: Num rows: 63 Data size: 12786 Basic stats: COMPLETE Column stats: NONE\n+                      File Output Operator\n+                        compressed: false\n+                        Statistics: Num rows: 63 Data size: 12786 Basic stats: COMPLETE Column stats: NONE\n+                        table:\n+                            input format: org.apache.hadoop.mapred.TextInputFormat\n+                            output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\n+                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+        Map 4 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: src\n+                  Select Operator\n+                    expressions: key (type: string), value (type: string)\n+                    outputColumnNames: _col0, _col1\n+                    Reduce Output Operator\n+                      key expressions: _col0 (type: string)\n+                      sort order: +\n+                      Map-reduce partition columns: _col0 (type: string)\n+                      value expressions: _col0 (type: string)\n+        Union 2 \n+            Vertex: Union 2\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+\n+PREHOOK: query: create table ut as\n+select u.key as ukey, s.key as skey from\n+(select * from src union all select * from src) u\n+right outer join src s on u.key = s.key\n+PREHOOK: type: CREATETABLE_AS_SELECT\n+PREHOOK: Input: default@src\n+POSTHOOK: query: create table ut as\n+select u.key as ukey, s.key as skey from\n+(select * from src union all select * from src) u\n+right outer join src s on u.key = s.key\n+POSTHOOK: type: CREATETABLE_AS_SELECT\n+POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@ut\n+PREHOOK: query: select * from ut order by ukey, skey limit 20\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@ut\n+#### A masked pattern was here ####\n+POSTHOOK: query: select * from ut order by ukey, skey limit 20\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@ut\n+#### A masked pattern was here ####\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+0\t0\n+10\t10\n+10\t10\n+PREHOOK: query: drop table ut\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@ut\n+PREHOOK: Output: default@ut\n+POSTHOOK: query: drop table ut\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@ut\n+POSTHOOK: Output: default@ut",
                "deletions": 1525
            },
            {
                "sha": "717a3cb73cb8f6db5734fb14b9293f721fc8a11f",
                "filename": "ql/src/test/results/clientpositive/tez/vectorization_15.q.out",
                "blob_url": "https://github.com/apache/hive/blob/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/vectorization_15.q.out",
                "raw_url": "https://github.com/apache/hive/raw/d375b3977d42936b3b00888e2b1bacf736e8ac3e/ql/src/test/results/clientpositive/tez/vectorization_15.q.out",
                "status": "modified",
                "changes": 38,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/tez/vectorization_15.q.out?ref=d375b3977d42936b3b00888e2b1bacf736e8ac3e",
                "patch": "@@ -77,32 +77,32 @@ NULL\ttrue\t10419.0\t10\tNULL\t-721614386\tNULL\tNULL\t7.2161435972E8\t10419.0\t828862.706\n NULL\ttrue\t14519.0\t100xJdkyc\tNULL\t729277608\tNULL\tNULL\t-7.2927763428E8\t14519.0\t1155030.007\tNULL\tNULL\tNULL\t-23.0\tNULL\t0.0\tNULL\tNULL\t7.2927763428E8\t0.0\n -62.0\tNULL\t15601.0\tNULL\t-62\tNULL\t1969-12-31 16:00:09.889\t0.0\tNULL\t15601.0\t1241106.353\t33.0\t0.0\t0.0\t-23.0\t62\tNULL\tNULL\t-23\tNULL\tNULL\n -51.0\tNULL\t-200.0\tNULL\t-51\tNULL\t1969-12-31 15:59:55.423\t0.0\tNULL\t-200.0\t-15910.599999999999\t33.0\t0.0\t0.0\t-23.0\t51\tNULL\tNULL\t-23\tNULL\tNULL\n--51.0\tfalse\tNULL\t10\t-51\t1058319346\t1969-12-31 16:00:08.451\t0.0\t-1.05831937228E9\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t1.058319397E9\t-23\t1.05831937228E9\t0.0\n--51.0\tfalse\tNULL\t10TYIE5S35U6dj3N\t-51\t-469581869\t1969-12-31 16:00:08.451\t0.0\t4.6958184272E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-4.69581818E8\t-23\t-4.6958184272E8\t0.0\n--51.0\tfalse\tNULL\t1Lh6Uoq3WhNtOqQHu7WN7U\t-51\t-352637533\t1969-12-31 16:00:08.451\t0.0\t3.5263750672E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-3.52637482E8\t-23\t-3.5263750672E8\t0.0\n--51.0\ttrue\tNULL\t04Y1mA17\t-51\t-114647521\t1969-12-31 16:00:08.451\t0.0\t1.1464749472E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-1.1464747E8\t-23\t-1.1464749472E8\t0.0\n+-51.0\tfalse\tNULL\t10\t-51\t1058319346\t1969-12-31 16:00:08.451\t0.0\t-1.05831937228E9\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t1.05831942E9\t-23\t1.05831937228E9\t0.0\n+-51.0\tfalse\tNULL\t10TYIE5S35U6dj3N\t-51\t-469581869\t1969-12-31 16:00:08.451\t0.0\t4.6958184272E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-4.69581792E8\t-23\t-4.6958184272E8\t0.0\n+-51.0\tfalse\tNULL\t1Lh6Uoq3WhNtOqQHu7WN7U\t-51\t-352637533\t1969-12-31 16:00:08.451\t0.0\t3.5263750672E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-3.52637472E8\t-23\t-3.5263750672E8\t0.0\n+-51.0\ttrue\tNULL\t04Y1mA17\t-51\t-114647521\t1969-12-31 16:00:08.451\t0.0\t1.1464749472E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-1.14647472E8\t-23\t-1.1464749472E8\t0.0\n -51.0\ttrue\tNULL\t10Wu570aLPO0p02P17FeH\t-51\t405338893\t1969-12-31 16:00:08.451\t0.0\t-4.0533891928E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t4.05338944E8\t-23\t4.0533891928E8\t0.0\n -51.0\ttrue\tNULL\t3cQp060\t-51\t-226923315\t1969-12-31 16:00:08.451\t0.0\t2.2692328872E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-2.26923264E8\t-23\t-2.2692328872E8\t0.0\n--51.0\ttrue\tNULL\t8EPG0Xi307qd\t-51\t-328662044\t1969-12-31 16:00:08.451\t0.0\t3.2866201772E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-3.28661993E8\t-23\t-3.2866201772E8\t0.0\n--51.0\ttrue\tNULL\t8iHtdkJ6d\t-51\t1006818344\t1969-12-31 16:00:08.451\t0.0\t-1.00681837028E9\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t1.006818395E9\t-23\t1.00681837028E9\t0.0\n--51.0\ttrue\tNULL\tQiOcvR0kt6r7f0R7fiPxQTCU\t-51\t266531954\t1969-12-31 16:00:08.451\t0.0\t-2.6653198028E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t2.66532005E8\t-23\t2.6653198028E8\t0.0\n--51.0\ttrue\tNULL\tYbpj38RTTYl7CnJXPNx1g4C\t-51\t-370919370\t1969-12-31 16:00:08.451\t0.0\t3.7091934372E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-3.70919319E8\t-23\t-3.7091934372E8\t0.0\n+-51.0\ttrue\tNULL\t8EPG0Xi307qd\t-51\t-328662044\t1969-12-31 16:00:08.451\t0.0\t3.2866201772E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-3.28661984E8\t-23\t-3.2866201772E8\t0.0\n+-51.0\ttrue\tNULL\t8iHtdkJ6d\t-51\t1006818344\t1969-12-31 16:00:08.451\t0.0\t-1.00681837028E9\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t1.00681843E9\t-23\t1.00681837028E9\t0.0\n+-51.0\ttrue\tNULL\tQiOcvR0kt6r7f0R7fiPxQTCU\t-51\t266531954\t1969-12-31 16:00:08.451\t0.0\t-2.6653198028E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t2.66532E8\t-23\t2.6653198028E8\t0.0\n+-51.0\ttrue\tNULL\tYbpj38RTTYl7CnJXPNx1g4C\t-51\t-370919370\t1969-12-31 16:00:08.451\t0.0\t3.7091934372E8\tNULL\tNULL\t33.0\t0.0\t0.0\tNULL\t51\t0.0\t-3.70919296E8\t-23\t-3.7091934372E8\t0.0\n -48.0\tNULL\t-7196.0\tNULL\t-48\tNULL\t1969-12-31 16:00:06.337\t0.0\tNULL\t-7196.0\t-572463.388\t33.0\t0.0\t0.0\t-23.0\t48\tNULL\tNULL\t-23\tNULL\tNULL\n -6.0\tNULL\t-200.0\tNULL\t-6\tNULL\t1969-12-31 15:59:56.094\t0.0\tNULL\t-200.0\t-15910.599999999999\t3.0\t0.0\t0.0\t-23.0\t6\tNULL\tNULL\t-5\tNULL\tNULL\n 5.0\tNULL\t15601.0\tNULL\t5\tNULL\t1969-12-31 16:00:00.959\t0.0\tNULL\t15601.0\t1241106.353\t3.0\t0.0\t0.0\t-23.0\t-5\tNULL\tNULL\t-3\tNULL\tNULL\n-8.0\tfalse\tNULL\t10V3pN5r5lI2qWl2lG103\t8\t-362835731\t1969-12-31 16:00:15.892\t0.0\t3.6283570472E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-3.62835739E8\t-7\t-3.6283570472E8\t0.0\n-8.0\tfalse\tNULL\t10c4qt584m5y6uWT\t8\t-183000142\t1969-12-31 16:00:15.892\t0.0\t1.8300011572E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-1.8300015E8\t-7\t-1.8300011572E8\t0.0\n+8.0\tfalse\tNULL\t10V3pN5r5lI2qWl2lG103\t8\t-362835731\t1969-12-31 16:00:15.892\t0.0\t3.6283570472E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-3.62835744E8\t-7\t-3.6283570472E8\t0.0\n+8.0\tfalse\tNULL\t10c4qt584m5y6uWT\t8\t-183000142\t1969-12-31 16:00:15.892\t0.0\t1.8300011572E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-1.8300016E8\t-7\t-1.8300011572E8\t0.0\n 8.0\tfalse\tNULL\t8GloEukQ0c68JDmnYL53\t8\t-722873402\t1969-12-31 16:00:15.892\t0.0\t7.2287337572E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-7.2287341E8\t-7\t-7.2287337572E8\t0.0\n 8.0\tfalse\tNULL\tkA0XH5C5\t8\t-503903864\t1969-12-31 16:00:15.892\t0.0\t5.0390383772E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-5.03903872E8\t-7\t-5.0390383772E8\t0.0\n-8.0\ttrue\tNULL\t100VTM7PEW8GH1uE\t8\t88129338\t1969-12-31 16:00:15.892\t0.0\t-8.812936428E7\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t8.812933E7\t-7\t8.812936428E7\t0.0\n-8.0\ttrue\tNULL\t1062158y\t8\t-1005155523\t1969-12-31 16:00:15.892\t0.0\t1.00515549672E9\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-1.005155531E9\t-7\t-1.00515549672E9\t0.0\n-8.0\ttrue\tNULL\t1063cEnGjSal\t8\t-624769630\t1969-12-31 16:00:15.892\t0.0\t6.2476960372E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-6.24769638E8\t-7\t-6.2476960372E8\t0.0\n-8.0\ttrue\tNULL\t4kMasVoB7lX1wc5i64bNk\t8\t683567667\t1969-12-31 16:00:15.892\t0.0\t-6.8356769328E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t6.83567659E8\t-7\t6.8356769328E8\t0.0\n-8.0\ttrue\tNULL\tXH6I7A417\t8\t436627202\t1969-12-31 16:00:15.892\t0.0\t-4.3662722828E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t4.36627194E8\t-7\t4.3662722828E8\t0.0\n-11.0\tfalse\tNULL\t10pO8p1LNx4Y\t11\t271296824\t1969-12-31 16:00:02.351\t0.0\t-2.7129685028E8\tNULL\tNULL\t0.0\t0.0\t0.0\tNULL\t-11\t0.0\t2.71296813E8\t-1\t2.7129685028E8\t0.0\n-11.0\tfalse\tNULL\t1H6wGP\t11\t-560827082\t1969-12-31 16:00:02.351\t0.0\t5.6082705572E8\tNULL\tNULL\t0.0\t0.0\t0.0\tNULL\t-11\t0.0\t-5.60827093E8\t-1\t-5.6082705572E8\t0.0\n-11.0\tfalse\tNULL\t2a7V63IL7jK3o\t11\t-325931647\t1969-12-31 16:00:02.351\t0.0\t3.2593162072E8\tNULL\tNULL\t0.0\t0.0\t0.0\tNULL\t-11\t0.0\t-3.25931658E8\t-1\t-3.2593162072E8\t0.0\n-11.0\ttrue\tNULL\t10\t11\t92365813\t1969-12-31 16:00:02.351\t0.0\t-9.236583928E7\tNULL\tNULL\t0.0\t0.0\t0.0\tNULL\t-11\t0.0\t9.2365802E7\t-1\t9.236583928E7\t0.0\n+8.0\ttrue\tNULL\t100VTM7PEW8GH1uE\t8\t88129338\t1969-12-31 16:00:15.892\t0.0\t-8.812936428E7\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t8.8129328E7\t-7\t8.812936428E7\t0.0\n+8.0\ttrue\tNULL\t1062158y\t8\t-1005155523\t1969-12-31 16:00:15.892\t0.0\t1.00515549672E9\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-1.00515552E9\t-7\t-1.00515549672E9\t0.0\n+8.0\ttrue\tNULL\t1063cEnGjSal\t8\t-624769630\t1969-12-31 16:00:15.892\t0.0\t6.2476960372E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t-6.247696E8\t-7\t-6.2476960372E8\t0.0\n+8.0\ttrue\tNULL\t4kMasVoB7lX1wc5i64bNk\t8\t683567667\t1969-12-31 16:00:15.892\t0.0\t-6.8356769328E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t6.8356768E8\t-7\t6.8356769328E8\t0.0\n+8.0\ttrue\tNULL\tXH6I7A417\t8\t436627202\t1969-12-31 16:00:15.892\t0.0\t-4.3662722828E8\tNULL\tNULL\t1.0\t0.0\t0.0\tNULL\t-8\t0.0\t4.366272E8\t-7\t4.3662722828E8\t0.0\n+11.0\tfalse\tNULL\t10pO8p1LNx4Y\t11\t271296824\t1969-12-31 16:00:02.351\t0.0\t-2.7129685028E8\tNULL\tNULL\t0.0\t0.0\t0.0\tNULL\t-11\t0.0\t2.71296832E8\t-1\t2.7129685028E8\t0.0\n+11.0\tfalse\tNULL\t1H6wGP\t11\t-560827082\t1969-12-31 16:00:02.351\t0.0\t5.6082705572E8\tNULL\tNULL\t0.0\t0.0\t0.0\tNULL\t-11\t0.0\t-5.6082707E8\t-1\t-5.6082705572E8\t0.0\n+11.0\tfalse\tNULL\t2a7V63IL7jK3o\t11\t-325931647\t1969-12-31 16:00:02.351\t0.0\t3.2593162072E8\tNULL\tNULL\t0.0\t0.0\t0.0\tNULL\t-11\t0.0\t-3.25931648E8\t-1\t-3.2593162072E8\t0.0\n+11.0\ttrue\tNULL\t10\t11\t92365813\t1969-12-31 16:00:02.351\t0.0\t-9.236583928E7\tNULL\tNULL\t0.0\t0.0\t0.0\tNULL\t-11\t0.0\t9.2365808E7\t-1\t9.236583928E7\t0.0\n 21.0\tNULL\t15601.0\tNULL\t21\tNULL\t1969-12-31 16:00:14.256\t0.0\tNULL\t15601.0\t1241106.353\t12.0\t0.0\t0.0\t-23.0\t-21\tNULL\tNULL\t-2\tNULL\tNULL\n 32.0\tNULL\t-200.0\tNULL\t32\tNULL\t1969-12-31 16:00:02.445\t0.0\tNULL\t-200.0\t-15910.599999999999\t1.0\t0.0\t0.0\t-23.0\t-32\tNULL\tNULL\t-23\tNULL\tNULL\n 36.0\tNULL\t-200.0\tNULL\t36\tNULL\t1969-12-31 16:00:00.554\t0.0\tNULL\t-200.0\t-15910.599999999999\t33.0\t0.0\t0.0\t-23.0\t-36\tNULL\tNULL\t-23\tNULL\tNULL",
                "deletions": 19
            }
        ],
        "patched_files": [
            "GenTezWork.java"
        ],
        "unit_tests": [
            "TestGenTezWork.java"
        ]
    },
    "hive_01fe664": {
        "repo": "hive",
        "message": "HIVE-8203 ACID operations result in NPE when run through HS2 (Alan Gates, reviewed by Eugene Koifman)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1627914 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/01fe6647430ef5dfcc120f93bdcab40677166c7c",
        "parent": "https://github.com/apache/hive/commit/b30756c2dac8b3d9adfdb131e3185498d4dd322b",
        "bug_id": "hive_01fe664",
        "file": [
            {
                "sha": "7f0a6b3b7daecb9cafb5034877d43ee0aeec882b",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java",
                "blob_url": "https://github.com/apache/hive/blob/01fe6647430ef5dfcc120f93bdcab40677166c7c/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java",
                "raw_url": "https://github.com/apache/hive/raw/01fe6647430ef5dfcc120f93bdcab40677166c7c/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStoreTxns.java?ref=01fe6647430ef5dfcc120f93bdcab40677166c7c",
                "patch": "@@ -75,6 +75,21 @@ public void testTxns() throws Exception {\n     Assert.assertFalse(validTxns.isTxnCommitted(4));\n   }\n \n+  @Test\n+  public void testOpenTxnNotExcluded() throws Exception {\n+    List<Long> tids = client.openTxns(\"me\", 3).getTxn_ids();\n+    Assert.assertEquals(1L, (long) tids.get(0));\n+    Assert.assertEquals(2L, (long) tids.get(1));\n+    Assert.assertEquals(3L, (long) tids.get(2));\n+    client.rollbackTxn(1);\n+    client.commitTxn(2);\n+    ValidTxnList validTxns = client.getValidTxns(3);\n+    Assert.assertFalse(validTxns.isTxnCommitted(1));\n+    Assert.assertTrue(validTxns.isTxnCommitted(2));\n+    Assert.assertTrue(validTxns.isTxnCommitted(3));\n+    Assert.assertFalse(validTxns.isTxnCommitted(4));\n+  }\n+\n   @Test\n   public void testTxnRange() throws Exception {\n     ValidTxnList validTxns = client.getValidTxns();",
                "deletions": 0
            },
            {
                "sha": "94c22450e417b3ffee293aef5a848ddcfc339c49",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "blob_url": "https://github.com/apache/hive/blob/01fe6647430ef5dfcc120f93bdcab40677166c7c/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "raw_url": "https://github.com/apache/hive/raw/01fe6647430ef5dfcc120f93bdcab40677166c7c/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java?ref=01fe6647430ef5dfcc120f93bdcab40677166c7c",
                "patch": "@@ -1689,7 +1689,12 @@ public void cancelDelegationToken(String tokenStrForm) throws MetaException, TEx\n \n   @Override\n   public ValidTxnList getValidTxns() throws TException {\n-    return TxnHandler.createValidTxnList(client.get_open_txns());\n+    return TxnHandler.createValidTxnList(client.get_open_txns(), 0);\n+  }\n+\n+  @Override\n+  public ValidTxnList getValidTxns(long currentTxn) throws TException {\n+    return TxnHandler.createValidTxnList(client.get_open_txns(), currentTxn);\n   }\n \n   @Override",
                "deletions": 1
            },
            {
                "sha": "066ab68443fdd1bd04e14c8a3b1b2bbac9130d6c",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java",
                "blob_url": "https://github.com/apache/hive/blob/01fe6647430ef5dfcc120f93bdcab40677166c7c/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java",
                "raw_url": "https://github.com/apache/hive/raw/01fe6647430ef5dfcc120f93bdcab40677166c7c/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java?ref=01fe6647430ef5dfcc120f93bdcab40677166c7c",
                "patch": "@@ -1085,6 +1085,15 @@ Function getFunction(String dbName, String funcName)\n    */\n   ValidTxnList getValidTxns() throws TException;\n \n+  /**\n+   * Get a structure that details valid transactions.\n+   * @param currentTxn The current transaction of the caller.  This will be removed from the\n+   *                   exceptions list so that the caller sees records from his own transaction.\n+   * @return list of valid transactions\n+   * @throws TException\n+   */\n+  ValidTxnList getValidTxns(long currentTxn) throws TException;\n+\n   /**\n    * Initiate a transaction.\n    * @param user User who is opening this transaction.  This is the Hive user,",
                "deletions": 0
            },
            {
                "sha": "6f44169af90e747838bd7e2ccb5652f59ac26475",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java",
                "blob_url": "https://github.com/apache/hive/blob/01fe6647430ef5dfcc120f93bdcab40677166c7c/metastore/src/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java",
                "raw_url": "https://github.com/apache/hive/raw/01fe6647430ef5dfcc120f93bdcab40677166c7c/metastore/src/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java",
                "status": "modified",
                "changes": 14,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/txn/TxnHandler.java?ref=01fe6647430ef5dfcc120f93bdcab40677166c7c",
                "patch": "@@ -233,12 +233,22 @@ public GetOpenTxnsResponse getOpenTxns() throws MetaException {\n     }\n   }\n \n-  public static ValidTxnList createValidTxnList(GetOpenTxnsResponse txns) {\n+  /**\n+   * Transform a {@link org.apache.hadoop.hive.metastore.api.GetOpenTxnsResponse} to a\n+   * {@link org.apache.hadoop.hive.common.ValidTxnList}.\n+   * @param txns txn list from the metastore\n+   * @param currentTxn Current transaction that the user has open.  If this is greater than 0 it\n+   *                   will be removed from the exceptions list so that the user sees his own\n+   *                   transaction as valid.\n+   * @return a valid txn list.\n+   */\n+  public static ValidTxnList createValidTxnList(GetOpenTxnsResponse txns, long currentTxn) {\n     long highWater = txns.getTxn_high_water_mark();\n     Set<Long> open = txns.getOpen_txns();\n-    long[] exceptions = new long[open.size()];\n+    long[] exceptions = new long[open.size() - (currentTxn > 0 ? 1 : 0)];\n     int i = 0;\n     for(long txn: open) {\n+      if (currentTxn > 0 && currentTxn == txn) continue;\n       exceptions[i++] = txn;\n     }\n     return new ValidTxnListImpl(exceptions, highWater);",
                "deletions": 2
            },
            {
                "sha": "4826abcc4fce6102642480c576bd823ec59f9743",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/Driver.java",
                "blob_url": "https://github.com/apache/hive/blob/01fe6647430ef5dfcc120f93bdcab40677166c7c/ql/src/java/org/apache/hadoop/hive/ql/Driver.java",
                "raw_url": "https://github.com/apache/hive/raw/01fe6647430ef5dfcc120f93bdcab40677166c7c/ql/src/java/org/apache/hadoop/hive/ql/Driver.java",
                "status": "modified",
                "changes": 20,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/Driver.java?ref=01fe6647430ef5dfcc120f93bdcab40677166c7c",
                "patch": "@@ -390,6 +390,9 @@ public int compile(String command, boolean resetTaskIds) {\n       tree = ParseUtils.findRootNonNullToken(tree);\n       perfLogger.PerfLogEnd(CLASS_NAME, PerfLogger.PARSE);\n \n+      // Initialize the transaction manager.  This must be done before analyze is called\n+      SessionState.get().initTxnMgr(conf);\n+\n       perfLogger.PerfLogBegin(CLASS_NAME, PerfLogger.ANALYZE);\n       BaseSemanticAnalyzer sem = SemanticAnalyzerFactory.get(conf, tree);\n       List<HiveSemanticAnalyzerHook> saHooks =\n@@ -889,9 +892,12 @@ private int recordValidTxns() {\n \n   /**\n    * Acquire read and write locks needed by the statement. The list of objects to be locked are\n-   * obtained from he inputs and outputs populated by the compiler. The lock acuisition scheme is\n+   * obtained from the inputs and outputs populated by the compiler. The lock acuisition scheme is\n    * pretty simple. If all the locks cannot be obtained, error out. Deadlock is avoided by making\n    * sure that the locks are lexicographically sorted.\n+   *\n+   * This method also records the list of valid transactions.  This must be done after any\n+   * transactions have been opened and locks acquired.\n    **/\n   private int acquireLocksAndOpenTxn() {\n     PerfLogger perfLogger = PerfLogger.getPerfLogger();\n@@ -931,7 +937,7 @@ private int acquireLocksAndOpenTxn() {\n \n       txnMgr.acquireLocks(plan, ctx, userFromUGI);\n \n-      return 0;\n+      return recordValidTxns();\n     } catch (LockException e) {\n       errorMessage = \"FAILED: Error in acquiring locks: \" + e.getMessage();\n       SQLState = ErrorMsg.findSQLState(e.getMessage());\n@@ -1108,11 +1114,6 @@ private CommandProcessorResponse runInternal(String command, boolean alreadyComp\n     SessionState ss = SessionState.get();\n     try {\n       ckLock = checkConcurrency();\n-      try {\n-        ss.initTxnMgr(conf);\n-      } catch (LockException e) {\n-        throw new SemanticException(e.getMessage(), e);\n-      }\n     } catch (SemanticException e) {\n       errorMessage = \"FAILED: Error in semantic analysis: \" + e.getMessage();\n       SQLState = ErrorMsg.findSQLState(e.getMessage());\n@@ -1121,11 +1122,8 @@ private CommandProcessorResponse runInternal(String command, boolean alreadyComp\n           + org.apache.hadoop.util.StringUtils.stringifyException(e));\n       return createProcessorResponse(10);\n     }\n-    int ret = recordValidTxns();\n-    if (ret != 0) {\n-      return createProcessorResponse(ret);\n-    }\n \n+    int ret;\n     if (!alreadyCompiled) {\n       ret = compileInternal(command);\n       if (ret != 0) {",
                "deletions": 11
            },
            {
                "sha": "46b441a13d6d981dd6aea5dfc1c0a2abad884cc1",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/lockmgr/DbTxnManager.java",
                "blob_url": "https://github.com/apache/hive/blob/01fe6647430ef5dfcc120f93bdcab40677166c7c/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/DbTxnManager.java",
                "raw_url": "https://github.com/apache/hive/raw/01fe6647430ef5dfcc120f93bdcab40677166c7c/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/DbTxnManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/DbTxnManager.java?ref=01fe6647430ef5dfcc120f93bdcab40677166c7c",
                "patch": "@@ -286,7 +286,7 @@ public void heartbeat() throws LockException {\n   public ValidTxnList getValidTxns() throws LockException {\n     init();\n     try {\n-      return client.getValidTxns();\n+      return client.getValidTxns(txnId);\n     } catch (TException e) {\n       throw new LockException(ErrorMsg.METASTORE_COMMUNICATION_FAILED.getMsg(),\n           e);",
                "deletions": 1
            },
            {
                "sha": "c1d0fe11c709c90996ce4d18bd41199d3257d780",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java",
                "blob_url": "https://github.com/apache/hive/blob/01fe6647430ef5dfcc120f93bdcab40677166c7c/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java",
                "raw_url": "https://github.com/apache/hive/raw/01fe6647430ef5dfcc120f93bdcab40677166c7c/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Initiator.java?ref=01fe6647430ef5dfcc120f93bdcab40677166c7c",
                "patch": "@@ -76,7 +76,7 @@ public void run() {\n         // don't doom the entire thread.\n         try {\n           ShowCompactResponse currentCompactions = txnHandler.showCompact(new ShowCompactRequest());\n-          ValidTxnList txns = TxnHandler.createValidTxnList(txnHandler.getOpenTxns());\n+          ValidTxnList txns = TxnHandler.createValidTxnList(txnHandler.getOpenTxns(), 0);\n           Set<CompactionInfo> potentials = txnHandler.findPotentialCompactions(abortedThreshold);\n           LOG.debug(\"Found \" + potentials.size() + \" potential compactions, \" +\n               \"checking to see if we should compact any of them\");",
                "deletions": 1
            },
            {
                "sha": "249fece426f05b7c2757d8fd52c6959a80941091",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java",
                "blob_url": "https://github.com/apache/hive/blob/01fe6647430ef5dfcc120f93bdcab40677166c7c/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java",
                "raw_url": "https://github.com/apache/hive/raw/01fe6647430ef5dfcc120f93bdcab40677166c7c/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/txn/compactor/Worker.java?ref=01fe6647430ef5dfcc120f93bdcab40677166c7c",
                "patch": "@@ -120,7 +120,7 @@ public void run() {\n \n         final boolean isMajor = ci.isMajorCompaction();\n         final ValidTxnList txns =\n-            TxnHandler.createValidTxnList(txnHandler.getOpenTxns());\n+            TxnHandler.createValidTxnList(txnHandler.getOpenTxns(), 0);\n         final StringBuffer jobName = new StringBuffer(name);\n         jobName.append(\"-compactor-\");\n         jobName.append(ci.getFullPartitionName());",
                "deletions": 1
            }
        ],
        "patched_files": [
            "IMetaStoreClient.java",
            "DbTxnManager.java",
            "HiveMetaStoreClient.java",
            "Worker.java",
            "Initiator.java",
            "TxnHandler.java",
            "Driver.java"
        ],
        "unit_tests": [
            "TestDbTxnManager.java",
            "TestWorker.java",
            "TestTxnHandler.java",
            "TestHiveMetaStoreTxns.java",
            "TestInitiator.java"
        ]
    },
    "hive_b650b79": {
        "repo": "hive",
        "message": "HIVE-9330 : DummyTxnManager will throw NPE if WriteEntity writeType has not been set (Chaoyu Tang via Szehon)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1652897 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/b650b798ffb589800e19320595c54f5793cd1e40",
        "parent": "https://github.com/apache/hive/commit/ec3c2f86bc2399cab3127463846efcd44d7efea2",
        "bug_id": "hive_b650b79",
        "file": [
            {
                "sha": "8fdac5e29e723695a00e99751303ed54e6a9e5e5",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/lockmgr/DummyTxnManager.java",
                "blob_url": "https://github.com/apache/hive/blob/b650b798ffb589800e19320595c54f5793cd1e40/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/DummyTxnManager.java",
                "raw_url": "https://github.com/apache/hive/raw/b650b798ffb589800e19320595c54f5793cd1e40/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/DummyTxnManager.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/lockmgr/DummyTxnManager.java?ref=b650b798ffb589800e19320595c54f5793cd1e40",
                "patch": "@@ -254,9 +254,13 @@ static void dedupLockObjects(List<HiveLockObj> lockObjects) {\n \n   private HiveLockMode getWriteEntityLockMode (WriteEntity we) {\n     HiveLockMode lockMode = we.isComplete() ? HiveLockMode.EXCLUSIVE : HiveLockMode.SHARED;\n-    //but the writeEntity is complete in DDL operations, and we need check its writeType to\n-    //to determine the lockMode\n-    switch (we.getWriteType()) {\n+    //but the writeEntity is complete in DDL operations, instead DDL sets the writeType, so\n+    //we use it to determine its lockMode, and first we check if the writeType was set\n+    WriteEntity.WriteType writeType = we.getWriteType();\n+    if (writeType == null) {\n+      return lockMode;\n+    }\n+    switch (writeType) {\n       case DDL_EXCLUSIVE:\n         return HiveLockMode.EXCLUSIVE;\n       case DDL_SHARED:",
                "deletions": 3
            }
        ],
        "patched_files": [
            "DummyTxnManager.java"
        ],
        "unit_tests": [
            "TestDummyTxnManager.java"
        ]
    },
    "hive_d00edc7": {
        "repo": "hive",
        "message": "HIVE-7987 : Storage based authorization  - NPE for drop view (Thejas Nair, reviewed by Jason Dere)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1622767 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/d00edc7b5ae5227484f9da610b021e13f60f5812",
        "parent": "https://github.com/apache/hive/commit/94af26453ece19e170b2a072b38392a305bd5668",
        "bug_id": "hive_d00edc7",
        "file": [
            {
                "sha": "79819b89c6821cac9cf7f601daadfa93f87a9045",
                "filename": "common/src/java/org/apache/hadoop/hive/common/FileUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/d00edc7b5ae5227484f9da610b021e13f60f5812/common/src/java/org/apache/hadoop/hive/common/FileUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/d00edc7b5ae5227484f9da610b021e13f60f5812/common/src/java/org/apache/hadoop/hive/common/FileUtils.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/common/src/java/org/apache/hadoop/hive/common/FileUtils.java?ref=d00edc7b5ae5227484f9da610b021e13f60f5812",
                "patch": "@@ -649,6 +649,11 @@ public static void checkDeletePermission(Path path, Configuration conf, String u\n     //   if a user is a super user. Also super users running hive queries is not a common\n     //   use case. super users can also do a chown to be able to drop the file\n \n+    if(path == null) {\n+      // no file/dir to be deleted\n+      return;\n+    }\n+\n     final FileSystem fs = path.getFileSystem(conf);\n     if (!fs.exists(path)) {\n       // no file/dir to be deleted",
                "deletions": 0
            },
            {
                "sha": "6cf8565a3753a6bf92d6ffaf6aeb975c51e9c031",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestStorageBasedMetastoreAuthorizationDrops.java",
                "blob_url": "https://github.com/apache/hive/blob/d00edc7b5ae5227484f9da610b021e13f60f5812/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestStorageBasedMetastoreAuthorizationDrops.java",
                "raw_url": "https://github.com/apache/hive/raw/d00edc7b5ae5227484f9da610b021e13f60f5812/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestStorageBasedMetastoreAuthorizationDrops.java",
                "status": "modified",
                "changes": 34,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/security/TestStorageBasedMetastoreAuthorizationDrops.java?ref=d00edc7b5ae5227484f9da610b021e13f60f5812",
                "patch": "@@ -96,6 +96,7 @@ protected void setUp() throws Exception {\n     driver = new Driver(clientHiveConf);\n \n     setupFakeUser();\n+    InjectableDummyAuthenticator.injectMode(false);\n   }\n \n \n@@ -159,6 +160,38 @@ private void dropTableByOtherUser(String perm, int expectedRet) throws Exception\n     assertEquals(expectedRet, resp.getResponseCode());\n   }\n \n+  /**\n+   * Drop view should not be blocked by SBA. View will not have any location to drop.\n+   * @throws Exception\n+   */\n+  public void testDropView() throws Exception {\n+    String dbName = getTestDbName();\n+    String tblName = getTestTableName();\n+    String viewName = \"view\" + tblName;\n+    setPermissions(clientHiveConf.getVar(ConfVars.METASTOREWAREHOUSE), \"-rwxrwxrwx\");\n+\n+    CommandProcessorResponse resp = driver.run(\"create database \" + dbName);\n+    assertEquals(0, resp.getResponseCode());\n+    Database db = msc.getDatabase(dbName);\n+    validateCreateDb(db, dbName);\n+\n+    setPermissions(db.getLocationUri(), \"-rwxrwxrwt\");\n+\n+    String dbDotTable = dbName + \".\" + tblName;\n+    resp = driver.run(\"create table \" + dbDotTable + \"(i int)\");\n+    assertEquals(0, resp.getResponseCode());\n+\n+    String dbDotView = dbName + \".\" + viewName;\n+    resp = driver.run(\"create view \" + dbDotView + \" as select * from \" +  dbDotTable);\n+    assertEquals(0, resp.getResponseCode());\n+\n+    resp = driver.run(\"drop view \" + dbDotView);\n+    assertEquals(0, resp.getResponseCode());\n+\n+    resp = driver.run(\"drop table \" + dbDotTable);\n+    assertEquals(0, resp.getResponseCode());\n+  }\n+\n \n   public void testDropPartition() throws Exception {\n     dropPartitionByOtherUser(\"-rwxrwxrwx\", 0);\n@@ -202,7 +235,6 @@ private void setupFakeUser() {\n \n     InjectableDummyAuthenticator.injectUserName(fakeUser);\n     InjectableDummyAuthenticator.injectGroupNames(fakeGroupNames);\n-    InjectableDummyAuthenticator.injectMode(true);\n   }\n \n   private String setupUser() {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "FileUtils.java"
        ],
        "unit_tests": [
            "TestStorageBasedMetastoreAuthorizationDrops.java"
        ]
    },
    "hive_70d6eef": {
        "repo": "hive",
        "message": "HIVE-6704 : date_add()/date_sub()/datediff() fail with NPE with null input (Jason Dere via Ashutosh Chauhan)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1580538 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/70d6eefe775453553ec804889c9319c6dd88f4cd",
        "parent": "https://github.com/apache/hive/commit/6745354ab2db240bd87f9a884814fff21b3146c5",
        "bug_id": "hive_70d6eef",
        "file": [
            {
                "sha": "3168385a4939c4a9217c356d5777da8b84a57485",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java",
                "blob_url": "https://github.com/apache/hive/blob/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java",
                "raw_url": "https://github.com/apache/hive/raw/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java?ref=70d6eefe775453553ec804889c9319c6dd88f4cd",
                "patch": "@@ -96,6 +96,9 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen\n     ObjectInspector outputOI = PrimitiveObjectInspectorFactory.writableStringObjectInspector;\n     switch (inputType1) {\n     case STRING:\n+    case VARCHAR:\n+    case CHAR:\n+      inputType1 = PrimitiveCategory.STRING;\n       textConverter = ObjectInspectorConverters.getConverter(\n         (PrimitiveObjectInspector) arguments[0],\n         PrimitiveObjectInspectorFactory.writableStringObjectInspector);\n@@ -129,7 +132,14 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen\n   @Override\n   public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n+    if (arguments[0].get() == null) {\n+      return null;\n+    }\n     IntWritable toBeAdded = (IntWritable) intWritableConverter.convert(arguments[1].get());\n+    if (toBeAdded == null) {\n+      return null;\n+    }\n+\n     switch (inputType1) {\n     case STRING:\n       String dateString = textConverter.convert(arguments[0].get()).toString();",
                "deletions": 0
            },
            {
                "sha": "5d8bd0d66580ca7d8a3577f7b5f069d7bcf044d2",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java",
                "blob_url": "https://github.com/apache/hive/blob/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java",
                "raw_url": "https://github.com/apache/hive/raw/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java?ref=70d6eefe775453553ec804889c9319c6dd88f4cd",
                "patch": "@@ -113,9 +113,14 @@ private Date convertToDate(PrimitiveCategory inputType, Converter converter, Def\n     throws HiveException {\n     assert(converter != null);\n     assert(argument != null);\n+    if (argument.get() == null) {\n+      return null;\n+    }\n     Date date = new Date();\n     switch (inputType) {\n     case STRING:\n+    case VARCHAR:\n+    case CHAR:\n       String dateString = converter.convert(argument.get()).toString();\n       try {\n         date = formatter.parse(dateString);\n@@ -149,6 +154,8 @@ private Converter checkArguments(ObjectInspector[] arguments, int i) throws UDFA\n     Converter converter;\n     switch (inputType) {\n     case STRING:\n+    case VARCHAR:\n+    case CHAR:\n       converter = ObjectInspectorConverters.getConverter(\n         (PrimitiveObjectInspector) arguments[i],\n         PrimitiveObjectInspectorFactory.writableStringObjectInspector);",
                "deletions": 0
            },
            {
                "sha": "1685a86dc5053bcfadda0da940d0c338a2faa2c4",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java",
                "blob_url": "https://github.com/apache/hive/blob/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java",
                "raw_url": "https://github.com/apache/hive/raw/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java?ref=70d6eefe775453553ec804889c9319c6dd88f4cd",
                "patch": "@@ -96,6 +96,9 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen\n     ObjectInspector outputOI = PrimitiveObjectInspectorFactory.writableStringObjectInspector;\n     switch (inputType1) {\n     case STRING:\n+    case VARCHAR:\n+    case CHAR:\n+      inputType1 = PrimitiveCategory.STRING;\n       textConverter = ObjectInspectorConverters.getConverter(\n         (PrimitiveObjectInspector) arguments[0],\n         PrimitiveObjectInspectorFactory.writableStringObjectInspector);\n@@ -129,7 +132,14 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen\n   @Override\n   public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n+    if (arguments[0].get() == null) {\n+      return null;\n+    }\n     IntWritable toBeSubed = (IntWritable) intWritableConverter.convert(arguments[1].get());\n+    if (toBeSubed == null) {\n+      return null;\n+    }\n+\n     switch (inputType1) {\n     case STRING:\n       String dateString = textConverter.convert(arguments[0].get()).toString();",
                "deletions": 0
            },
            {
                "sha": "53b8f939ec260e2f04b92f6aac4d27c6ebd21680",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateAdd.java",
                "blob_url": "https://github.com/apache/hive/blob/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateAdd.java",
                "raw_url": "https://github.com/apache/hive/raw/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateAdd.java",
                "status": "modified",
                "changes": 30,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateAdd.java?ref=70d6eefe775453553ec804889c9319c6dd88f4cd",
                "patch": "@@ -47,6 +47,16 @@ public void testStringToDate() throws HiveException {\n     Text output = (Text) udf.evaluate(args);\n \n     assertEquals(\"date_add() test for STRING failed \", \"2009-07-22\", output.toString());\n+\n+    // Test with null args\n+    args = new DeferredObject[] { new DeferredJavaObject(null), valueObj2 };\n+    assertNull(\"date_add() 1st arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { valueObj1, new DeferredJavaObject(null) };\n+    assertNull(\"date_add() 2nd arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { new DeferredJavaObject(null), new DeferredJavaObject(null) };\n+    assertNull(\"date_add() both args null\", udf.evaluate(args));\n   }\n \n   public void testTimestampToDate() throws HiveException {\n@@ -63,6 +73,16 @@ public void testTimestampToDate() throws HiveException {\n     Text output = (Text) udf.evaluate(args);\n \n     assertEquals(\"date_add() test for TIMESTAMP failed \", \"2009-07-23\", output.toString());\n+\n+    // Test with null args\n+    args = new DeferredObject[] { new DeferredJavaObject(null), valueObj2 };\n+    assertNull(\"date_add() 1st arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { valueObj1, new DeferredJavaObject(null) };\n+    assertNull(\"date_add() 2nd arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { new DeferredJavaObject(null), new DeferredJavaObject(null) };\n+    assertNull(\"date_add() both args null\", udf.evaluate(args));\n   }\n \n   public void testDateWritablepToDate() throws HiveException {\n@@ -79,6 +99,16 @@ public void testDateWritablepToDate() throws HiveException {\n     Text output = (Text) udf.evaluate(args);\n \n     assertEquals(\"date_add() test for DATEWRITABLE failed \", \"2009-07-24\", output.toString());\n+\n+    // Test with null args\n+    args = new DeferredObject[] { new DeferredJavaObject(null), valueObj2 };\n+    assertNull(\"date_add() 1st arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { valueObj1, new DeferredJavaObject(null) };\n+    assertNull(\"date_add() 2nd arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { new DeferredJavaObject(null), new DeferredJavaObject(null) };\n+    assertNull(\"date_add() both args null\", udf.evaluate(args));\n   }\n \n }",
                "deletions": 0
            },
            {
                "sha": "849e70c17a1e2c839bf857ca22b5b61cda6de9e1",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateDiff.java",
                "blob_url": "https://github.com/apache/hive/blob/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateDiff.java",
                "raw_url": "https://github.com/apache/hive/raw/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateDiff.java",
                "status": "modified",
                "changes": 30,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateDiff.java?ref=70d6eefe775453553ec804889c9319c6dd88f4cd",
                "patch": "@@ -48,6 +48,16 @@ public void testStringToDate() throws HiveException {\n     IntWritable output = (IntWritable) udf.evaluate(args);\n \n     assertEquals(\"date_iff() test for STRING failed \", \"-2\", output.toString());\n+\n+    // Test with null args\n+    args = new DeferredObject[] { new DeferredJavaObject(null), valueObj2 };\n+    assertNull(\"date_add() 1st arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { valueObj1, new DeferredJavaObject(null) };\n+    assertNull(\"date_add() 2nd arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { new DeferredJavaObject(null), new DeferredJavaObject(null) };\n+    assertNull(\"date_add() both args null\", udf.evaluate(args));\n   }\n \n   public void testTimestampToDate() throws HiveException {\n@@ -65,6 +75,16 @@ public void testTimestampToDate() throws HiveException {\n     IntWritable output = (IntWritable) udf.evaluate(args);\n \n     assertEquals(\"datediff() test for TIMESTAMP failed \", \"3\", output.toString());\n+\n+    // Test with null args\n+    args = new DeferredObject[] { new DeferredJavaObject(null), valueObj2 };\n+    assertNull(\"date_add() 1st arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { valueObj1, new DeferredJavaObject(null) };\n+    assertNull(\"date_add() 2nd arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { new DeferredJavaObject(null), new DeferredJavaObject(null) };\n+    assertNull(\"date_add() both args null\", udf.evaluate(args));\n   }\n \n   public void testDateWritablepToDate() throws HiveException {\n@@ -81,6 +101,16 @@ public void testDateWritablepToDate() throws HiveException {\n     IntWritable output = (IntWritable) udf.evaluate(args);\n \n     assertEquals(\"datediff() test for DATEWRITABLE failed \", \"10\", output.toString());\n+\n+    // Test with null args\n+    args = new DeferredObject[] { new DeferredJavaObject(null), valueObj2 };\n+    assertNull(\"date_add() 1st arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { valueObj1, new DeferredJavaObject(null) };\n+    assertNull(\"date_add() 2nd arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { new DeferredJavaObject(null), new DeferredJavaObject(null) };\n+    assertNull(\"date_add() both args null\", udf.evaluate(args));\n   }\n \n }",
                "deletions": 0
            },
            {
                "sha": "d419ef28c66f2a4f2c95a1a78d0bdc337e5276c6",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateSub.java",
                "blob_url": "https://github.com/apache/hive/blob/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateSub.java",
                "raw_url": "https://github.com/apache/hive/raw/70d6eefe775453553ec804889c9319c6dd88f4cd/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateSub.java",
                "status": "modified",
                "changes": 30,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDateSub.java?ref=70d6eefe775453553ec804889c9319c6dd88f4cd",
                "patch": "@@ -47,6 +47,16 @@ public void testStringToDate() throws HiveException {\n     Text output = (Text) udf.evaluate(args);\n \n     assertEquals(\"date_sub() test for STRING failed \", \"2009-07-18\", output.toString());\n+\n+    // Test with null args\n+    args = new DeferredObject[] { new DeferredJavaObject(null), valueObj2 };\n+    assertNull(\"date_add() 1st arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { valueObj1, new DeferredJavaObject(null) };\n+    assertNull(\"date_add() 2nd arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { new DeferredJavaObject(null), new DeferredJavaObject(null) };\n+    assertNull(\"date_add() both args null\", udf.evaluate(args));\n   }\n \n   public void testTimestampToDate() throws HiveException {\n@@ -63,6 +73,16 @@ public void testTimestampToDate() throws HiveException {\n     Text output = (Text) udf.evaluate(args);\n \n     assertEquals(\"date_sub() test for TIMESTAMP failed \", \"2009-07-17\", output.toString());\n+\n+    // Test with null args\n+    args = new DeferredObject[] { new DeferredJavaObject(null), valueObj2 };\n+    assertNull(\"date_add() 1st arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { valueObj1, new DeferredJavaObject(null) };\n+    assertNull(\"date_add() 2nd arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { new DeferredJavaObject(null), new DeferredJavaObject(null) };\n+    assertNull(\"date_add() both args null\", udf.evaluate(args));\n   }\n \n   public void testDateWritablepToDate() throws HiveException {\n@@ -79,6 +99,16 @@ public void testDateWritablepToDate() throws HiveException {\n     Text output = (Text) udf.evaluate(args);\n \n     assertEquals(\"date_sub() test for DATEWRITABLE failed \", \"2009-07-16\", output.toString());\n+\n+    // Test with null args\n+    args = new DeferredObject[] { new DeferredJavaObject(null), valueObj2 };\n+    assertNull(\"date_add() 1st arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { valueObj1, new DeferredJavaObject(null) };\n+    assertNull(\"date_add() 2nd arg null\", udf.evaluate(args));\n+\n+    args = new DeferredObject[] { new DeferredJavaObject(null), new DeferredJavaObject(null) };\n+    assertNull(\"date_add() both args null\", udf.evaluate(args));\n   }\n \n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "GenericUDFDateSub.java",
            "GenericUDFDateAdd.java",
            "GenericUDFDateDiff.java"
        ],
        "unit_tests": [
            "TestGenericUDFDateAdd.java",
            "TestGenericUDFDateDiff.java",
            "TestGenericUDFDateSub.java"
        ]
    },
    "hive_13938db": {
        "repo": "hive",
        "message": "HIVE-21421: HiveStatement.getQueryId throws NPE when query is not running (Sankar Hariappan, reviewed by Mahesh Kumar Behera)\n\nSigned-off-by: Sankar Hariappan <sankarh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/13938db46ff89fc4a425854b4795df604ced8ba9",
        "parent": "https://github.com/apache/hive/commit/9f2f101feec4283f020b72b918e0961215e76789",
        "bug_id": "hive_13938db",
        "file": [
            {
                "sha": "14187cc83bfd6f90496477de828dce773de605ac",
                "filename": "itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java",
                "blob_url": "https://github.com/apache/hive/blob/13938db46ff89fc4a425854b4795df604ced8ba9/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java",
                "raw_url": "https://github.com/apache/hive/raw/13938db46ff89fc4a425854b4795df604ced8ba9/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestJdbcDriver2.java?ref=13938db46ff89fc4a425854b4795df604ced8ba9",
                "patch": "@@ -3044,8 +3044,13 @@ private void testInsertOverwrite(HiveStatement stmt) throws SQLException {\n   public void testGetQueryId() throws Exception {\n     HiveStatement stmt = (HiveStatement) con.createStatement();\n     HiveStatement stmt1 = (HiveStatement) con.createStatement();\n-    stmt.executeAsync(\"create database query_id_test with dbproperties ('repl.source.for' = '1, 2, 3')\");\n+\n+    // Returns null if no query is running.\n     String queryId = stmt.getQueryId();\n+    assertTrue(queryId == null);\n+\n+    stmt.executeAsync(\"create database query_id_test with dbproperties ('repl.source.for' = '1, 2, 3')\");\n+    queryId = stmt.getQueryId();\n     assertFalse(queryId.isEmpty());\n     stmt.getUpdateCount();\n ",
                "deletions": 1
            },
            {
                "sha": "d9b625466ca8880c739977f52eabc92ce44aa98d",
                "filename": "jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java",
                "blob_url": "https://github.com/apache/hive/blob/13938db46ff89fc4a425854b4795df604ced8ba9/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java",
                "raw_url": "https://github.com/apache/hive/raw/13938db46ff89fc4a425854b4795df604ced8ba9/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java",
                "status": "modified",
                "changes": 19,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java?ref=13938db46ff89fc4a425854b4795df604ced8ba9",
                "patch": "@@ -18,8 +18,8 @@\n \n package org.apache.hive.jdbc;\n \n-import com.google.common.annotations.VisibleForTesting;\n import org.apache.commons.codec.binary.Base64;\n+import org.apache.hadoop.hive.common.classification.InterfaceAudience.LimitedPrivate;\n import org.apache.hive.jdbc.logs.InPlaceUpdateStream;\n import org.apache.hive.service.cli.RowSet;\n import org.apache.hive.service.cli.RowSetFactory;\n@@ -37,7 +37,6 @@\n import org.apache.hive.service.rpc.thrift.TGetOperationStatusResp;\n import org.apache.hive.service.rpc.thrift.TGetQueryIdReq;\n import org.apache.hive.service.rpc.thrift.TOperationHandle;\n-import org.apache.hive.service.rpc.thrift.TOperationState;\n import org.apache.hive.service.rpc.thrift.TSessionHandle;\n import org.apache.thrift.TException;\n import org.slf4j.Logger;\n@@ -1007,12 +1006,26 @@ public void setInPlaceUpdateStream(InPlaceUpdateStream stream) {\n     this.inPlaceUpdateStream = stream;\n   }\n \n-  @VisibleForTesting\n+  /**\n+   * Returns the Query ID if it is running.\n+   * This method is a public API for usage outside of Hive, although it is not part of the\n+   * interface java.sql.Statement.\n+   * @return Valid query ID if it is running else returns NULL.\n+   * @throws SQLException If any internal failures.\n+   */\n+  @LimitedPrivate(value={\"Hive and closely related projects.\"})\n   public String getQueryId() throws SQLException {\n+    if (stmtHandle == null) {\n+      // If query is not running or already closed.\n+      return null;\n+    }\n     try {\n       return client.GetQueryId(new TGetQueryIdReq(stmtHandle)).getQueryId();\n     } catch (TException e) {\n       throw new SQLException(e);\n+    } catch (Exception e) {\n+      // If concurrently the query is closed before we fetch queryID.\n+      return null;\n     }\n   }\n }",
                "deletions": 3
            }
        ],
        "patched_files": [
            "HiveStatement.java"
        ],
        "unit_tests": [
            "TestJdbcDriver2.java",
            "TestHiveStatement.java"
        ]
    },
    "hive_9544297": {
        "repo": "hive",
        "message": "HIVE-6097: Sessions on Tez NPE when quitting CLI (Gunther Hagleitner)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/branches/tez@1553108 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/9544297803858557b776822296663c0438cf0723",
        "parent": "https://github.com/apache/hive/commit/329d7f354a4ff3b669a2a1aa23b19469814307c2",
        "bug_id": "hive_9544297",
        "file": [
            {
                "sha": "3e69f01c14cc1c314f9d77cc51061b3a2fd6ada4",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "blob_url": "https://github.com/apache/hive/blob/9544297803858557b776822296663c0438cf0723/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "raw_url": "https://github.com/apache/hive/raw/9544297803858557b776822296663c0438cf0723/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java?ref=9544297803858557b776822296663c0438cf0723",
                "patch": "@@ -831,9 +831,13 @@ public void close() throws IOException {\n     }\n \n     try {\n-      tezSessionState.close(false);\n+      if (tezSessionState != null) {\n+        tezSessionState.close(false);\n+      }\n     } catch (Exception e) {\n       LOG.info(\"Error closing tez session\", e);\n+    } finally {\n+      tezSessionState = null;\n     }\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "d4e737fe85f6c6b565b1bba3b4eb573f17f5260c",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/session/TestSessionState.java",
                "blob_url": "https://github.com/apache/hive/blob/9544297803858557b776822296663c0438cf0723/ql/src/test/org/apache/hadoop/hive/ql/session/TestSessionState.java",
                "raw_url": "https://github.com/apache/hive/raw/9544297803858557b776822296663c0438cf0723/ql/src/test/org/apache/hadoop/hive/ql/session/TestSessionState.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/session/TestSessionState.java?ref=9544297803858557b776822296663c0438cf0723",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.hadoop.hive.ql.session;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n \n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.MetaStoreUtils;\n@@ -57,5 +58,11 @@ public void testgetDbName() throws Exception {\n \n   }\n \n-\n+  @Test\n+  public void testClose() throws Exception {\n+    SessionState ss = SessionState.get();\n+    assertNull(ss.getTezSession());\n+    ss.close();\n+    assertNull(ss.getTezSession());\n+  }\n }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "SessionState.java"
        ],
        "unit_tests": [
            "TestSessionState.java"
        ]
    },
    "hive_0410bf1": {
        "repo": "hive",
        "message": "HIVE-17961 : NPE during initialization of VectorizedParquetRecordReader when input split is null (Vihang Karajgaonkar, reviewed by Ferdinand Xu)",
        "commit": "https://github.com/apache/hive/commit/0410bf17a361514f88774cf0545ec07271a26ab8",
        "parent": "https://github.com/apache/hive/commit/bff9da2cc03da848189c7266ee57069dde3fe668",
        "bug_id": "hive_0410bf1",
        "file": [
            {
                "sha": "e4d11fdb126e7687db70770179f8dcaf8d2f5b7b",
                "filename": "itests/hive-jmh/src/main/java/org/apache/hive/benchmark/storage/ColumnarStorageBench.java",
                "blob_url": "https://github.com/apache/hive/blob/0410bf17a361514f88774cf0545ec07271a26ab8/itests/hive-jmh/src/main/java/org/apache/hive/benchmark/storage/ColumnarStorageBench.java",
                "raw_url": "https://github.com/apache/hive/raw/0410bf17a361514f88774cf0545ec07271a26ab8/itests/hive-jmh/src/main/java/org/apache/hive/benchmark/storage/ColumnarStorageBench.java",
                "status": "modified",
                "changes": 11,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-jmh/src/main/java/org/apache/hive/benchmark/storage/ColumnarStorageBench.java?ref=0410bf17a361514f88774cf0545ec07271a26ab8",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.hadoop.hive.ql.io.orc.OrcSerde;\n import org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat;\n import org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat;\n+import org.apache.hadoop.hive.ql.io.parquet.VectorizedColumnReaderTestBase;\n import org.apache.hadoop.hive.ql.io.parquet.read.DataWritableReadSupport;\n import org.apache.hadoop.hive.ql.io.parquet.serde.ArrayWritableObjectInspector;\n import org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe;\n@@ -332,15 +333,7 @@ public RecordReader getVectorizedRecordReader(Path inputPath) throws Exception {\n       // types.\n       conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);\n       conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, \"0,1,2,3,6\");\n-      conf.set(ReadSupport.PARQUET_READ_SCHEMA, \"test schema\");\n-      HiveConf.setBoolVar(conf, HiveConf.ConfVars.HIVE_VECTORIZATION_ENABLED, true);\n-      HiveConf.setVar(conf, HiveConf.ConfVars.PLAN, \"//tmp\");\n-      Job vectorJob = new Job(conf, \"read vector\");\n-      ParquetInputFormat.setInputPaths(vectorJob, inputPath);\n-      ParquetInputFormat parquetInputFormat = new ParquetInputFormat(GroupReadSupport.class);\n-      InputSplit split = (InputSplit) parquetInputFormat.getSplits(vectorJob).get(0);\n-      initialVectorizedRowBatchCtx(conf);\n-      return new VectorizedParquetRecordReader(split, new JobConf(conf));\n+      return VectorizedColumnReaderTestBase.createTestParquetReader(\"test schema\", conf);\n     }\n   }\n ",
                "deletions": 9
            },
            {
                "sha": "1d9dba7842835b8024410ae8d15e9b6d2f159675",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/parquet/vector/VectorizedParquetRecordReader.java",
                "blob_url": "https://github.com/apache/hive/blob/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/vector/VectorizedParquetRecordReader.java",
                "raw_url": "https://github.com/apache/hive/raw/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/vector/VectorizedParquetRecordReader.java",
                "status": "modified",
                "changes": 22,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/parquet/vector/VectorizedParquetRecordReader.java?ref=0410bf17a361514f88774cf0545ec07271a26ab8",
                "patch": "@@ -118,20 +118,6 @@\n    */\n   protected long totalRowCount = 0;\n \n-  @VisibleForTesting\n-  public VectorizedParquetRecordReader(\n-    InputSplit inputSplit,\n-    JobConf conf) {\n-    try {\n-      serDeStats = new SerDeStats();\n-      projectionPusher = new ProjectionPusher();\n-      initialize(inputSplit, conf);\n-    } catch (Throwable e) {\n-      LOG.error(\"Failed to create the vectorized reader due to exception \" + e);\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n   public VectorizedParquetRecordReader(\n       org.apache.hadoop.mapred.InputSplit oldInputSplit, JobConf conf) {\n     this(oldInputSplit, conf, null, null, null);\n@@ -146,6 +132,10 @@ public VectorizedParquetRecordReader(\n       this.cacheConf = cacheConf;\n       serDeStats = new SerDeStats();\n       projectionPusher = new ProjectionPusher();\n+      colsToInclude = ColumnProjectionUtils.getReadColumnIDs(conf);\n+      //initialize the rowbatchContext\n+      jobConf = conf;\n+      rbCtx = Utilities.getVectorizedRowBatchCtx(jobConf);\n       ParquetInputSplit inputSplit = getSplit(oldInputSplit, conf);\n       if (inputSplit != null) {\n         initialize(inputSplit, conf);\n@@ -171,10 +161,6 @@ private void initPartitionValues(FileSplit fileSplit, JobConf conf) throws IOExc\n   public void initialize(\n     InputSplit oldSplit,\n     JobConf configuration) throws IOException, InterruptedException {\n-    colsToInclude = ColumnProjectionUtils.getReadColumnIDs(configuration);\n-    //initialize the rowbatchContext\n-    jobConf = configuration;\n-    rbCtx = Utilities.getVectorizedRowBatchCtx(jobConf);\n     // the oldSplit may be null during the split phase\n     if (oldSplit == null) {\n       return;",
                "deletions": 18
            },
            {
                "sha": "81d8cffa85fabc4ccdb52a9ff6ece28b33a48ca5",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedColumnReader.java",
                "blob_url": "https://github.com/apache/hive/blob/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedColumnReader.java",
                "raw_url": "https://github.com/apache/hive/raw/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedColumnReader.java",
                "status": "modified",
                "changes": 32,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/TestVectorizedColumnReader.java?ref=0410bf17a361514f88774cf0545ec07271a26ab8",
                "patch": "@@ -22,15 +22,21 @@\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.io.IOConstants;\n import org.apache.hadoop.hive.ql.io.parquet.vector.VectorizedParquetRecordReader;\n+import org.apache.hadoop.hive.serde2.ColumnProjectionUtils;\n+import org.apache.hadoop.mapred.FileSplit;\n import org.apache.hadoop.mapred.JobConf;\n-import org.apache.hadoop.mapreduce.InputSplit;\n+import org.apache.hadoop.mapreduce.Job;\n+import org.apache.parquet.hadoop.ParquetInputFormat;\n+import org.apache.parquet.hadoop.ParquetInputSplit;\n import org.junit.AfterClass;\n+import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n import java.io.IOException;\n \n import static junit.framework.TestCase.assertFalse;\n+import static org.apache.parquet.hadoop.api.ReadSupport.PARQUET_READ_SCHEMA;\n \n public class TestVectorizedColumnReader extends VectorizedColumnReaderTestBase {\n   static boolean isDictionaryEncoding = false;\n@@ -97,16 +103,34 @@ public void decimalRead() throws Exception {\n     decimalRead(isDictionaryEncoding);\n   }\n \n+  private class TestVectorizedParquetRecordReader extends VectorizedParquetRecordReader {\n+    public TestVectorizedParquetRecordReader(\n+        org.apache.hadoop.mapred.InputSplit oldInputSplit, JobConf conf) {\n+      super(oldInputSplit, conf);\n+    }\n+    @Override\n+    protected ParquetInputSplit getSplit(\n+        org.apache.hadoop.mapred.InputSplit oldInputSplit, JobConf conf) {\n+      return null;\n+    }\n+  }\n+\n   @Test\n   public void testNullSplitForParquetReader() throws Exception {\n     Configuration conf = new Configuration();\n     conf.set(IOConstants.COLUMNS,\"int32_field\");\n     conf.set(IOConstants.COLUMNS_TYPES,\"int\");\n+    conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);\n+    conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, \"0\");\n+    conf.set(PARQUET_READ_SCHEMA, \"message test { required int32 int32_field;}\");\n     HiveConf.setBoolVar(conf, HiveConf.ConfVars.HIVE_VECTORIZATION_ENABLED, true);\n     HiveConf.setVar(conf, HiveConf.ConfVars.PLAN, \"//tmp\");\n+    Job vectorJob = new Job(conf, \"read vector\");\n+    ParquetInputFormat.setInputPaths(vectorJob, file);\n     initialVectorizedRowBatchCtx(conf);\n-    VectorizedParquetRecordReader reader =\n-        new VectorizedParquetRecordReader((InputSplit)null, new JobConf(conf));\n-    assertFalse(reader.next(reader.createKey(), reader.createValue()));\n+    FileSplit fsplit = getFileSplit(vectorJob);\n+    JobConf jobConf = new JobConf(conf);\n+    TestVectorizedParquetRecordReader testReader = new TestVectorizedParquetRecordReader(fsplit, jobConf);\n+    Assert.assertNull(\"Test should return null split from getSplit() method\", testReader.getSplit(fsplit, jobConf));\n   }\n }",
                "deletions": 4
            },
            {
                "sha": "1a5d0952fa0ed1b85a1cba843d9537ef5b5d0c3c",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java",
                "blob_url": "https://github.com/apache/hive/blob/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java",
                "raw_url": "https://github.com/apache/hive/raw/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java",
                "status": "modified",
                "changes": 39,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/io/parquet/VectorizedColumnReaderTestBase.java?ref=0410bf17a361514f88774cf0545ec07271a26ab8",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\n import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;\n import org.apache.hadoop.io.NullWritable;\n+import org.apache.hadoop.mapred.FileSplit;\n import org.apache.hadoop.mapreduce.InputSplit;\n import org.apache.hadoop.mapred.JobConf;\n import org.apache.hadoop.mapreduce.Job;\n@@ -213,18 +214,22 @@ protected static boolean isNull(int index) {\n     return (index % NULL_FREQUENCY == 0);\n   }\n \n-  protected VectorizedParquetRecordReader createParquetReader(String schemaString, Configuration conf)\n+  public static VectorizedParquetRecordReader createTestParquetReader(String schemaString, Configuration conf)\n     throws IOException, InterruptedException, HiveException {\n     conf.set(PARQUET_READ_SCHEMA, schemaString);\n     HiveConf.setBoolVar(conf, HiveConf.ConfVars.HIVE_VECTORIZATION_ENABLED, true);\n     HiveConf.setVar(conf, HiveConf.ConfVars.PLAN, \"//tmp\");\n-\n     Job vectorJob = new Job(conf, \"read vector\");\n     ParquetInputFormat.setInputPaths(vectorJob, file);\n+    initialVectorizedRowBatchCtx(conf);\n+    return new VectorizedParquetRecordReader(getFileSplit(vectorJob),new JobConf(conf));\n+  }\n+\n+  protected static FileSplit getFileSplit(Job vectorJob) throws IOException, InterruptedException {\n     ParquetInputFormat parquetInputFormat = new ParquetInputFormat(GroupReadSupport.class);\n     InputSplit split = (InputSplit) parquetInputFormat.getSplits(vectorJob).get(0);\n-    initialVectorizedRowBatchCtx(conf);\n-    return new VectorizedParquetRecordReader(split, new JobConf(conf));\n+    FileSplit fsplit = new FileSplit(file,0L,split.getLength(),split.getLocations());\n+    return fsplit;\n   }\n \n   protected static void writeData(ParquetWriter<Group> writer, boolean isDictionaryEncoding) throws IOException {\n@@ -295,7 +300,7 @@ protected static void writeData(ParquetWriter<Group> writer, boolean isDictionar\n     writer.close();\n   }\n \n-  protected void initialVectorizedRowBatchCtx(Configuration conf) throws HiveException {\n+  protected static void initialVectorizedRowBatchCtx(Configuration conf) throws HiveException {\n     MapWork mapWork = new MapWork();\n     VectorizedRowBatchCtx rbCtx = new VectorizedRowBatchCtx();\n     rbCtx.init(createStructObjectInspector(conf), new String[0]);\n@@ -304,7 +309,7 @@ protected void initialVectorizedRowBatchCtx(Configuration conf) throws HiveExcep\n     Utilities.setMapWork(conf, mapWork);\n   }\n \n-  private StructObjectInspector createStructObjectInspector(Configuration conf) {\n+  private static StructObjectInspector createStructObjectInspector(Configuration conf) {\n     // Create row related objects\n     String columnNames = conf.get(IOConstants.COLUMNS);\n     List<String> columnNamesList = DataWritableReadSupport.getColumnNames(columnNames);\n@@ -321,7 +326,7 @@ protected void intRead(boolean isDictionaryEncoding) throws InterruptedException\n     conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);\n     conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, \"0\");\n     VectorizedParquetRecordReader reader =\n-      createParquetReader(\"message test { required int32 int32_field;}\", conf);\n+      createTestParquetReader(\"message test { required int32 int32_field;}\", conf);\n     VectorizedRowBatch previous = reader.createValue();\n     try {\n       int c = 0;\n@@ -350,7 +355,7 @@ protected void longRead(boolean isDictionaryEncoding) throws Exception {\n     conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);\n     conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, \"0\");\n     VectorizedParquetRecordReader reader =\n-      createParquetReader(\"message test { required int64 int64_field;}\", conf);\n+      createTestParquetReader(\"message test { required int64 int64_field;}\", conf);\n     VectorizedRowBatch previous = reader.createValue();\n     try {\n       int c = 0;\n@@ -379,7 +384,7 @@ protected void doubleRead(boolean isDictionaryEncoding) throws Exception {\n     conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);\n     conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, \"0\");\n     VectorizedParquetRecordReader reader =\n-      createParquetReader(\"message test { required double double_field;}\", conf);\n+      createTestParquetReader(\"message test { required double double_field;}\", conf);\n     VectorizedRowBatch previous = reader.createValue();\n     try {\n       int c = 0;\n@@ -409,7 +414,7 @@ protected void floatRead(boolean isDictionaryEncoding) throws Exception {\n     conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);\n     conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, \"0\");\n     VectorizedParquetRecordReader reader =\n-      createParquetReader(\"message test { required float float_field;}\", conf);\n+      createTestParquetReader(\"message test { required float float_field;}\", conf);\n     VectorizedRowBatch previous = reader.createValue();\n     try {\n       int c = 0;\n@@ -439,7 +444,7 @@ protected void booleanRead() throws Exception {\n     conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);\n     conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, \"0\");\n     VectorizedParquetRecordReader reader =\n-      createParquetReader(\"message test { required boolean boolean_field;}\", conf);\n+      createTestParquetReader(\"message test { required boolean boolean_field;}\", conf);\n     VectorizedRowBatch previous = reader.createValue();\n     try {\n       int c = 0;\n@@ -468,7 +473,7 @@ protected void binaryRead(boolean isDictionaryEncoding) throws Exception {\n     conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);\n     conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, \"0\");\n     VectorizedParquetRecordReader reader =\n-      createParquetReader(\"message test { required binary binary_field_some_null;}\", conf);\n+      createTestParquetReader(\"message test { required binary binary_field_some_null;}\", conf);\n     VectorizedRowBatch previous = reader.createValue();\n     int c = 0;\n     try {\n@@ -511,7 +516,7 @@ protected void structRead(boolean isDictionaryEncoding) throws Exception {\n       + \"  optional double b;\\n\"\n       + \"}\\n\"\n       + \"}\\n\";\n-    VectorizedParquetRecordReader reader = createParquetReader(schema, conf);\n+    VectorizedParquetRecordReader reader = createTestParquetReader(schema, conf);\n     VectorizedRowBatch previous = reader.createValue();\n     int c = 0;\n     try {\n@@ -551,7 +556,7 @@ protected void nestedStructRead0(boolean isDictionaryEncoding) throws Exception\n       + \"  }\"\n       + \"optional double e;\\n\"\n       + \"}\\n\";\n-    VectorizedParquetRecordReader reader = createParquetReader(schema, conf);\n+    VectorizedParquetRecordReader reader = createTestParquetReader(schema, conf);\n     VectorizedRowBatch previous = reader.createValue();\n     int c = 0;\n     try {\n@@ -592,7 +597,7 @@ protected void nestedStructRead1(boolean isDictionaryEncoding) throws Exception\n       + \"    optional int32 c;\\n\"\n       + \"  }\"\n       + \"}\\n\";\n-    VectorizedParquetRecordReader reader = createParquetReader(schema, conf);\n+    VectorizedParquetRecordReader reader = createTestParquetReader(schema, conf);\n     VectorizedRowBatch previous = reader.createValue();\n     int c = 0;\n     try {\n@@ -628,7 +633,7 @@ protected void structReadSomeNull(boolean isDictionaryEncoding) throws Exception\n       + \"  optional int32 f;\\n\"\n       + \"  optional double g;\\n\"\n       + \"}\\n\";\n-    VectorizedParquetRecordReader reader = createParquetReader(schema, conf);\n+    VectorizedParquetRecordReader reader = createTestParquetReader(schema, conf);\n     VectorizedRowBatch previous = reader.createValue();\n     int c = 0;\n     try {\n@@ -669,7 +674,7 @@ protected void decimalRead(boolean isDictionaryEncoding) throws Exception {\n     conf.setBoolean(ColumnProjectionUtils.READ_ALL_COLUMNS, false);\n     conf.set(ColumnProjectionUtils.READ_COLUMN_IDS_CONF_STR, \"0\");\n     VectorizedParquetRecordReader reader =\n-      createParquetReader(\"message hive_schema { required value (DECIMAL(5,2));}\", conf);\n+      createTestParquetReader(\"message hive_schema { required value (DECIMAL(5,2));}\", conf);\n     VectorizedRowBatch previous = reader.createValue();\n     try {\n       int c = 0;",
                "deletions": 17
            },
            {
                "sha": "2bcaa987015a98084e6178991e542d13c5d65455",
                "filename": "ql/src/test/queries/clientpositive/vectorization_parquet_projection.q",
                "blob_url": "https://github.com/apache/hive/blob/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/queries/clientpositive/vectorization_parquet_projection.q",
                "raw_url": "https://github.com/apache/hive/raw/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/queries/clientpositive/vectorization_parquet_projection.q",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/vectorization_parquet_projection.q?ref=0410bf17a361514f88774cf0545ec07271a26ab8",
                "patch": "@@ -77,3 +77,20 @@ group by m1[\"color\"];\n \n select m1[\"color\"], count(*) from parquet_project_test\n group by m1[\"color\"];\n+\n+\n+create table if not exists parquet_nullsplit(key string, val string) partitioned by (len string)\n+stored as parquet;\n+\n+insert into table parquet_nullsplit partition(len='1')\n+values ('one', 'red');\n+\n+explain vectorization select count(*) from parquet_nullsplit where len = '1';\n+select count(*) from parquet_nullsplit where len = '1';\n+\n+explain vectorization select count(*) from parquet_nullsplit where len = '99';\n+select count(*) from parquet_nullsplit where len = '99';\n+\n+drop table parquet_nullsplit;\n+drop table parquet_project_test;\n+drop table parquet_types_staging;",
                "deletions": 0
            },
            {
                "sha": "53d059f16125cf6ad48e9bd398eae20f7984f7bf",
                "filename": "ql/src/test/results/clientpositive/spark/vectorization_parquet_projection.q.out",
                "blob_url": "https://github.com/apache/hive/blob/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/results/clientpositive/spark/vectorization_parquet_projection.q.out",
                "raw_url": "https://github.com/apache/hive/raw/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/results/clientpositive/spark/vectorization_parquet_projection.q.out",
                "status": "modified",
                "changes": 211,
                "additions": 211,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/spark/vectorization_parquet_projection.q.out?ref=0410bf17a361514f88774cf0545ec07271a26ab8",
                "patch": "@@ -456,3 +456,214 @@ POSTHOOK: Input: default@parquet_project_test\n blue\t7\n green\t7\n red\t8\n+PREHOOK: query: create table if not exists parquet_nullsplit(key string, val string) partitioned by (len string)\n+stored as parquet\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@parquet_nullsplit\n+POSTHOOK: query: create table if not exists parquet_nullsplit(key string, val string) partitioned by (len string)\n+stored as parquet\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@parquet_nullsplit\n+PREHOOK: query: insert into table parquet_nullsplit partition(len='1')\n+values ('one', 'red')\n+PREHOOK: type: QUERY\n+PREHOOK: Output: default@parquet_nullsplit@len=1\n+POSTHOOK: query: insert into table parquet_nullsplit partition(len='1')\n+values ('one', 'red')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Output: default@parquet_nullsplit@len=1\n+POSTHOOK: Lineage: parquet_nullsplit PARTITION(len=1).key SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]\n+POSTHOOK: Lineage: parquet_nullsplit PARTITION(len=1).val SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]\n+PREHOOK: query: explain vectorization select count(*) from parquet_nullsplit where len = '1'\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain vectorization select count(*) from parquet_nullsplit where len = '1'\n+POSTHOOK: type: QUERY\n+PLAN VECTORIZATION:\n+  enabled: true\n+  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Spark\n+      Edges:\n+        Reducer 2 <- Map 1 (GROUP, 1)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: parquet_nullsplit\n+                  Statistics: Num rows: 1 Data size: 2 Basic stats: COMPLETE Column stats: NONE\n+                  Select Operator\n+                    Statistics: Num rows: 1 Data size: 2 Basic stats: COMPLETE Column stats: NONE\n+                    Group By Operator\n+                      aggregations: count()\n+                      mode: hash\n+                      outputColumnNames: _col0\n+                      Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                      Reduce Output Operator\n+                        sort order: \n+                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                        value expressions: _col0 (type: bigint)\n+            Execution mode: vectorized\n+            Map Vectorization:\n+                enabled: true\n+                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true\n+                inputFormatFeatureSupport: []\n+                featureSupportInUse: []\n+                inputFileFormats: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\n+                allNative: false\n+                usesVectorUDFAdaptor: false\n+                vectorized: true\n+        Reducer 2 \n+            Execution mode: vectorized\n+            Reduce Vectorization:\n+                enabled: true\n+                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true\n+                allNative: false\n+                usesVectorUDFAdaptor: false\n+                vectorized: true\n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: count(VALUE._col0)\n+                mode: mergepartial\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+PREHOOK: query: select count(*) from parquet_nullsplit where len = '1'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@parquet_nullsplit\n+PREHOOK: Input: default@parquet_nullsplit@len=1\n+#### A masked pattern was here ####\n+POSTHOOK: query: select count(*) from parquet_nullsplit where len = '1'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@parquet_nullsplit\n+POSTHOOK: Input: default@parquet_nullsplit@len=1\n+#### A masked pattern was here ####\n+1\n+PREHOOK: query: explain vectorization select count(*) from parquet_nullsplit where len = '99'\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain vectorization select count(*) from parquet_nullsplit where len = '99'\n+POSTHOOK: type: QUERY\n+PLAN VECTORIZATION:\n+  enabled: true\n+  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Spark\n+      Edges:\n+        Reducer 2 <- Map 1 (GROUP, 1)\n+#### A masked pattern was here ####\n+      Vertices:\n+        Map 1 \n+            Map Operator Tree:\n+                TableScan\n+                  alias: parquet_nullsplit\n+                  Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE\n+                  Filter Operator\n+                    predicate: (len = '99') (type: boolean)\n+                    Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE\n+                    Select Operator\n+                      Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE\n+                      Group By Operator\n+                        aggregations: count()\n+                        mode: hash\n+                        outputColumnNames: _col0\n+                        Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                        Reduce Output Operator\n+                          sort order: \n+                          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                          value expressions: _col0 (type: bigint)\n+            Execution mode: vectorized\n+            Map Vectorization:\n+                enabled: true\n+                inputFormatFeatureSupport: []\n+                featureSupportInUse: []\n+                allNative: false\n+                usesVectorUDFAdaptor: false\n+                vectorized: true\n+        Reducer 2 \n+            Execution mode: vectorized\n+            Reduce Vectorization:\n+                enabled: true\n+                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine spark IN [tez, spark] IS true\n+                allNative: false\n+                usesVectorUDFAdaptor: false\n+                vectorized: true\n+            Reduce Operator Tree:\n+              Group By Operator\n+                aggregations: count(VALUE._col0)\n+                mode: mergepartial\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                File Output Operator\n+                  compressed: false\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  table:\n+                      input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                      output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                      serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+PREHOOK: query: select count(*) from parquet_nullsplit where len = '99'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@parquet_nullsplit\n+#### A masked pattern was here ####\n+POSTHOOK: query: select count(*) from parquet_nullsplit where len = '99'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@parquet_nullsplit\n+#### A masked pattern was here ####\n+0\n+PREHOOK: query: drop table parquet_nullsplit\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@parquet_nullsplit\n+PREHOOK: Output: default@parquet_nullsplit\n+POSTHOOK: query: drop table parquet_nullsplit\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@parquet_nullsplit\n+POSTHOOK: Output: default@parquet_nullsplit\n+PREHOOK: query: drop table parquet_project_test\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@parquet_project_test\n+PREHOOK: Output: default@parquet_project_test\n+POSTHOOK: query: drop table parquet_project_test\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@parquet_project_test\n+POSTHOOK: Output: default@parquet_project_test\n+PREHOOK: query: drop table parquet_types_staging\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@parquet_types_staging\n+PREHOOK: Output: default@parquet_types_staging\n+POSTHOOK: query: drop table parquet_types_staging\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@parquet_types_staging\n+POSTHOOK: Output: default@parquet_types_staging",
                "deletions": 0
            },
            {
                "sha": "e167523cbe06b4a505fde7e3eeeef6378996d949",
                "filename": "ql/src/test/results/clientpositive/vectorization_parquet_projection.q.out",
                "blob_url": "https://github.com/apache/hive/blob/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/results/clientpositive/vectorization_parquet_projection.q.out",
                "raw_url": "https://github.com/apache/hive/raw/0410bf17a361514f88774cf0545ec07271a26ab8/ql/src/test/results/clientpositive/vectorization_parquet_projection.q.out",
                "status": "modified",
                "changes": 193,
                "additions": 193,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/vectorization_parquet_projection.q.out?ref=0410bf17a361514f88774cf0545ec07271a26ab8",
                "patch": "@@ -426,3 +426,196 @@ POSTHOOK: Input: default@parquet_project_test\n blue\t7\n green\t7\n red\t8\n+PREHOOK: query: create table if not exists parquet_nullsplit(key string, val string) partitioned by (len string)\n+stored as parquet\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@parquet_nullsplit\n+POSTHOOK: query: create table if not exists parquet_nullsplit(key string, val string) partitioned by (len string)\n+stored as parquet\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@parquet_nullsplit\n+PREHOOK: query: insert into table parquet_nullsplit partition(len='1')\n+values ('one', 'red')\n+PREHOOK: type: QUERY\n+PREHOOK: Output: default@parquet_nullsplit@len=1\n+POSTHOOK: query: insert into table parquet_nullsplit partition(len='1')\n+values ('one', 'red')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Output: default@parquet_nullsplit@len=1\n+POSTHOOK: Lineage: parquet_nullsplit PARTITION(len=1).key SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]\n+POSTHOOK: Lineage: parquet_nullsplit PARTITION(len=1).val SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]\n+PREHOOK: query: explain vectorization select count(*) from parquet_nullsplit where len = '1'\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain vectorization select count(*) from parquet_nullsplit where len = '1'\n+POSTHOOK: type: QUERY\n+PLAN VECTORIZATION:\n+  enabled: true\n+  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: parquet_nullsplit\n+            Statistics: Num rows: 1 Data size: 2 Basic stats: COMPLETE Column stats: NONE\n+            Select Operator\n+              Statistics: Num rows: 1 Data size: 2 Basic stats: COMPLETE Column stats: NONE\n+              Group By Operator\n+                aggregations: count()\n+                mode: hash\n+                outputColumnNames: _col0\n+                Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                Reduce Output Operator\n+                  sort order: \n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  value expressions: _col0 (type: bigint)\n+      Execution mode: vectorized\n+      Map Vectorization:\n+          enabled: true\n+          enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true\n+          inputFormatFeatureSupport: []\n+          featureSupportInUse: []\n+          inputFileFormats: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat\n+          allNative: false\n+          usesVectorUDFAdaptor: false\n+          vectorized: true\n+      Reduce Vectorization:\n+          enabled: false\n+          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true\n+          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false\n+      Reduce Operator Tree:\n+        Group By Operator\n+          aggregations: count(VALUE._col0)\n+          mode: mergepartial\n+          outputColumnNames: _col0\n+          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+          File Output Operator\n+            compressed: false\n+            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+            table:\n+                input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+PREHOOK: query: select count(*) from parquet_nullsplit where len = '1'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@parquet_nullsplit\n+PREHOOK: Input: default@parquet_nullsplit@len=1\n+#### A masked pattern was here ####\n+POSTHOOK: query: select count(*) from parquet_nullsplit where len = '1'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@parquet_nullsplit\n+POSTHOOK: Input: default@parquet_nullsplit@len=1\n+#### A masked pattern was here ####\n+1\n+PREHOOK: query: explain vectorization select count(*) from parquet_nullsplit where len = '99'\n+PREHOOK: type: QUERY\n+POSTHOOK: query: explain vectorization select count(*) from parquet_nullsplit where len = '99'\n+POSTHOOK: type: QUERY\n+PLAN VECTORIZATION:\n+  enabled: true\n+  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]\n+\n+STAGE DEPENDENCIES:\n+  Stage-1 is a root stage\n+  Stage-0 depends on stages: Stage-1\n+\n+STAGE PLANS:\n+  Stage: Stage-1\n+    Map Reduce\n+      Map Operator Tree:\n+          TableScan\n+            alias: parquet_nullsplit\n+            Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE\n+            Filter Operator\n+              predicate: (len = '99') (type: boolean)\n+              Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE\n+              Select Operator\n+                Statistics: Num rows: 1 Data size: 0 Basic stats: PARTIAL Column stats: NONE\n+                Group By Operator\n+                  aggregations: count()\n+                  mode: hash\n+                  outputColumnNames: _col0\n+                  Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                  Reduce Output Operator\n+                    sort order: \n+                    Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+                    value expressions: _col0 (type: bigint)\n+      Execution mode: vectorized\n+      Map Vectorization:\n+          enabled: true\n+          inputFormatFeatureSupport: []\n+          featureSupportInUse: []\n+          allNative: false\n+          usesVectorUDFAdaptor: false\n+          vectorized: true\n+      Reduce Vectorization:\n+          enabled: false\n+          enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true\n+          enableConditionsNotMet: hive.execution.engine mr IN [tez, spark] IS false\n+      Reduce Operator Tree:\n+        Group By Operator\n+          aggregations: count(VALUE._col0)\n+          mode: mergepartial\n+          outputColumnNames: _col0\n+          Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+          File Output Operator\n+            compressed: false\n+            Statistics: Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: NONE\n+            table:\n+                input format: org.apache.hadoop.mapred.SequenceFileInputFormat\n+                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat\n+                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\n+\n+  Stage: Stage-0\n+    Fetch Operator\n+      limit: -1\n+      Processor Tree:\n+        ListSink\n+\n+PREHOOK: query: select count(*) from parquet_nullsplit where len = '99'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@parquet_nullsplit\n+#### A masked pattern was here ####\n+POSTHOOK: query: select count(*) from parquet_nullsplit where len = '99'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@parquet_nullsplit\n+#### A masked pattern was here ####\n+0\n+PREHOOK: query: drop table parquet_nullsplit\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@parquet_nullsplit\n+PREHOOK: Output: default@parquet_nullsplit\n+POSTHOOK: query: drop table parquet_nullsplit\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@parquet_nullsplit\n+POSTHOOK: Output: default@parquet_nullsplit\n+PREHOOK: query: drop table parquet_project_test\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@parquet_project_test\n+PREHOOK: Output: default@parquet_project_test\n+POSTHOOK: query: drop table parquet_project_test\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@parquet_project_test\n+POSTHOOK: Output: default@parquet_project_test\n+PREHOOK: query: drop table parquet_types_staging\n+PREHOOK: type: DROPTABLE\n+PREHOOK: Input: default@parquet_types_staging\n+PREHOOK: Output: default@parquet_types_staging\n+POSTHOOK: query: drop table parquet_types_staging\n+POSTHOOK: type: DROPTABLE\n+POSTHOOK: Input: default@parquet_types_staging\n+POSTHOOK: Output: default@parquet_types_staging",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ColumnarStorageBench.java",
            "VectorizedColumnReaderTestBase.java",
            "VectorizedParquetRecordReader.java",
            "VectorizedColumnReader.java"
        ],
        "unit_tests": [
            "TestVectorizedColumnReader.java"
        ]
    },
    "hive_22371f5": {
        "repo": "hive",
        "message": "HIVE-21811: Load data into partitioned table throws NPE if DB is enabled for replication (Sankar Hariappan, reviewed by Thejas M Nair)\n\nSigned-off-by: Sankar Hariappan <sankarh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/22371f51f365ab609862dc493a86aed17212dac5",
        "parent": "https://github.com/apache/hive/commit/81117db0e59aa673adc454d0da40d0a146555ae2",
        "bug_id": "hive_22371f5",
        "file": [
            {
                "sha": "6f47056ca72bb532730a25381a1973be81361ff1",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java",
                "blob_url": "https://github.com/apache/hive/blob/22371f51f365ab609862dc493a86aed17212dac5/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java",
                "raw_url": "https://github.com/apache/hive/raw/22371f51f365ab609862dc493a86aed17212dac5/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java?ref=22371f51f365ab609862dc493a86aed17212dac5",
                "patch": "@@ -176,6 +176,8 @@ static void internalBeforeClassSetup(Map<String, String> additionalProperties, b\n     hconf.set(HiveConf.ConfVars.METASTORE_RAW_STORE_IMPL.varname,\n         \"org.apache.hadoop.hive.metastore.InjectableBehaviourObjectStore\");\n     hconf.setBoolVar(HiveConf.ConfVars.HIVEOPTIMIZEMETADATAQUERIES, true);\n+    hconf.setBoolVar(HiveConf.ConfVars.HIVESTATSAUTOGATHER, true);\n+    hconf.setBoolVar(HiveConf.ConfVars.HIVE_STATS_RELIABLE, true);\n     System.setProperty(HiveConf.ConfVars.PREEXECHOOKS.varname, \" \");\n     System.setProperty(HiveConf.ConfVars.POSTEXECHOOKS.varname, \" \");\n \n@@ -850,20 +852,20 @@ public void testIncrementalAdds() throws IOException {\n     // Now, we load data into the tables, and see if an incremental\n     // repl drop/load can duplicate it.\n \n-    run(\"LOAD DATA LOCAL INPATH '\" + unptn_locn + \"' OVERWRITE INTO TABLE \" + dbName + \".unptned\", driver);\n+    run(\"LOAD DATA LOCAL INPATH '\" + unptn_locn + \"' OVERWRITE INTO TABLE \" + dbName + \".unptned\", true, driver);\n     verifySetup(\"SELECT * from \" + dbName + \".unptned\", unptn_data, driver);\n     run(\"CREATE TABLE \" + dbName + \".unptned_late AS SELECT * from \" + dbName + \".unptned\", driver);\n     verifySetup(\"SELECT * from \" + dbName + \".unptned_late\", unptn_data, driver);\n \n-    run(\"LOAD DATA LOCAL INPATH '\" + ptn_locn_1 + \"' OVERWRITE INTO TABLE \" + dbName + \".ptned PARTITION(b=1)\", driver);\n+    run(\"LOAD DATA LOCAL INPATH '\" + ptn_locn_1 + \"' OVERWRITE INTO TABLE \" + dbName + \".ptned PARTITION(b=1)\", true, driver);\n     verifySetup(\"SELECT a from \" + dbName + \".ptned WHERE b=1\", ptn_data_1, driver);\n-    run(\"LOAD DATA LOCAL INPATH '\" + ptn_locn_2 + \"' OVERWRITE INTO TABLE \" + dbName + \".ptned PARTITION(b=2)\", driver);\n+    run(\"LOAD DATA LOCAL INPATH '\" + ptn_locn_2 + \"' OVERWRITE INTO TABLE \" + dbName + \".ptned PARTITION(b=2)\", true, driver);\n     verifySetup(\"SELECT a from \" + dbName + \".ptned WHERE b=2\", ptn_data_2, driver);\n \n     run(\"CREATE TABLE \" + dbName + \".ptned_late(a string) PARTITIONED BY (b int) STORED AS TEXTFILE\", driver);\n-    run(\"LOAD DATA LOCAL INPATH '\" + ptn_locn_1 + \"' OVERWRITE INTO TABLE \" + dbName + \".ptned_late PARTITION(b=1)\", driver);\n+    run(\"LOAD DATA LOCAL INPATH '\" + ptn_locn_1 + \"' OVERWRITE INTO TABLE \" + dbName + \".ptned_late PARTITION(b=1)\", true, driver);\n     verifySetup(\"SELECT a from \" + dbName + \".ptned_late WHERE b=1\",ptn_data_1, driver);\n-    run(\"LOAD DATA LOCAL INPATH '\" + ptn_locn_2 + \"' OVERWRITE INTO TABLE \" + dbName + \".ptned_late PARTITION(b=2)\", driver);\n+    run(\"LOAD DATA LOCAL INPATH '\" + ptn_locn_2 + \"' OVERWRITE INTO TABLE \" + dbName + \".ptned_late PARTITION(b=2)\", true, driver);\n     verifySetup(\"SELECT a from \" + dbName + \".ptned_late WHERE b=2\", ptn_data_2, driver);\n \n     // Perform REPL-DUMP/LOAD",
                "deletions": 5
            },
            {
                "sha": "ee0e52879ae4129257e81de4f14cebf3640bb781",
                "filename": "standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java",
                "blob_url": "https://github.com/apache/hive/blob/22371f51f365ab609862dc493a86aed17212dac5/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java",
                "raw_url": "https://github.com/apache/hive/raw/22371f51f365ab609862dc493a86aed17212dac5/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/metastore-server/src/main/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java?ref=22371f51f365ab609862dc493a86aed17212dac5",
                "patch": "@@ -823,7 +823,7 @@ private void blockPartitionLocationChangesOnReplSource(Database db, Table tbl,\n \n     // Do not allow changing location of a managed table as alter event doesn't capture the\n     // new files list. So, it may cause data inconsistency.\n-    if (ec.isSetProperties()) {\n+    if ((ec != null) && ec.isSetProperties()) {\n       String alterType = ec.getProperties().get(ALTER_TABLE_OPERATION_TYPE);\n       if (alterType != null && alterType.equalsIgnoreCase(ALTERLOCATION) &&\n               tbl.getTableType().equalsIgnoreCase(TableType.MANAGED_TABLE.name())) {\n@@ -846,7 +846,7 @@ private void validateTableChangesOnReplSource(Database db, Table oldTbl, Table n\n     // Do not allow changing location of a managed table as alter event doesn't capture the\n     // new files list. So, it may cause data inconsistency. We do this whether or not strict\n     // managed is true on the source cluster.\n-    if (ec.isSetProperties()) {\n+    if ((ec != null) && ec.isSetProperties()) {\n         String alterType = ec.getProperties().get(ALTER_TABLE_OPERATION_TYPE);\n         if (alterType != null && alterType.equalsIgnoreCase(ALTERLOCATION) &&\n             oldTbl.getTableType().equalsIgnoreCase(TableType.MANAGED_TABLE.name())) {",
                "deletions": 2
            }
        ],
        "patched_files": [
            "HiveAlterHandler.java"
        ],
        "unit_tests": [
            "TestReplicationScenarios.java",
            "TestHiveAlterHandler.java"
        ]
    },
    "hive_31591bf": {
        "repo": "hive",
        "message": "HIVE-10428 : NPE in RegexSerDe using HCat (Jason Dere via Ashutosh Chauhan)\n\nSigned-off-by: Ashutosh Chauhan <hashutosh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/31591bf1833fb3858c599addbe53aa57ac381ba4",
        "parent": "https://github.com/apache/hive/commit/aaa112dbfd0b52285925dad4160f34487b8dfd82",
        "bug_id": "hive_31591bf",
        "file": [
            {
                "sha": "31001814097966b2b40ccebd4300322939e38ea5",
                "filename": "hcatalog/core/src/main/java/org/apache/hive/hcatalog/mapreduce/InternalUtil.java",
                "blob_url": "https://github.com/apache/hive/blob/31591bf1833fb3858c599addbe53aa57ac381ba4/hcatalog/core/src/main/java/org/apache/hive/hcatalog/mapreduce/InternalUtil.java",
                "raw_url": "https://github.com/apache/hive/raw/31591bf1833fb3858c599addbe53aa57ac381ba4/hcatalog/core/src/main/java/org/apache/hive/hcatalog/mapreduce/InternalUtil.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/main/java/org/apache/hive/hcatalog/mapreduce/InternalUtil.java?ref=31591bf1833fb3858c599addbe53aa57ac381ba4",
                "patch": "@@ -164,6 +164,8 @@ private static Properties getSerdeProperties(HCatTableInfo info, HCatSchema s)\n       MetaStoreUtils.getColumnNamesFromFieldSchema(fields));\n     props.setProperty(org.apache.hadoop.hive.serde.serdeConstants.LIST_COLUMN_TYPES,\n       MetaStoreUtils.getColumnTypesFromFieldSchema(fields));\n+    props.setProperty(\"columns.comments\",\n+      MetaStoreUtils.getColumnCommentsFromFieldSchema(fields));\n \n     // setting these props to match LazySimpleSerde\n     props.setProperty(org.apache.hadoop.hive.serde.serdeConstants.SERIALIZATION_NULL_FORMAT, \"\\\\N\");",
                "deletions": 0
            },
            {
                "sha": "38dc4062f8c5f485618f67a38c9c58b742d57438",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/31591bf1833fb3858c599addbe53aa57ac381ba4/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/31591bf1833fb3858c599addbe53aa57ac381ba4/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java?ref=31591bf1833fb3858c599addbe53aa57ac381ba4",
                "patch": "@@ -1115,6 +1115,17 @@ public static String getColumnTypesFromFieldSchema(\n     return sb.toString();\n   }\n \n+  public static String getColumnCommentsFromFieldSchema(List<FieldSchema> fieldSchemas) {\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < fieldSchemas.size(); i++) {\n+      if (i > 0) {\n+        sb.append(SerDeUtils.COLUMN_COMMENTS_DELIMITER);\n+      }\n+      sb.append(fieldSchemas.get(i).getComment());\n+    }\n+    return sb.toString();\n+  }\n+\n   public static void makeDir(Path path, HiveConf hiveConf) throws MetaException {\n     FileSystem fs;\n     try {",
                "deletions": 0
            },
            {
                "sha": "8dada5a324545bf80e26c5766545ff735f7fce40",
                "filename": "serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/31591bf1833fb3858c599addbe53aa57ac381ba4/serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/31591bf1833fb3858c599addbe53aa57ac381ba4/serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java?ref=31591bf1833fb3858c599addbe53aa57ac381ba4",
                "patch": "@@ -62,6 +62,7 @@\n   public static final char QUOTE = '\"';\n   public static final char COLON = ':';\n   public static final char COMMA = ',';\n+  public static final char COLUMN_COMMENTS_DELIMITER = '\\0';\n   public static final String LBRACKET = \"[\";\n   public static final String RBRACKET = \"]\";\n   public static final String LBRACE = \"{\";",
                "deletions": 0
            }
        ],
        "patched_files": [
            "MetaStoreUtils.java"
        ],
        "unit_tests": [
            "TestMetaStoreUtils.java"
        ]
    },
    "hive_460d97d": {
        "repo": "hive",
        "message": "HIVE-8408 : hcat cli throws NPE when authorizer using new api is enabled (Thejas Nair, reviewed by Sushanth Sowmyan\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1630996 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/460d97daa215607674ea7516fec1692c443d7bc8",
        "parent": "https://github.com/apache/hive/commit/a112a576871e8ee778d0e1c719aef7a467875cfc",
        "bug_id": "hive_460d97d",
        "file": [
            {
                "sha": "8b6922325e3a7096e8e048dc1664a38e16efc039",
                "filename": "hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/CreateTableHook.java",
                "blob_url": "https://github.com/apache/hive/blob/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/CreateTableHook.java",
                "raw_url": "https://github.com/apache/hive/raw/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/CreateTableHook.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/CreateTableHook.java?ref=460d97daa215607674ea7516fec1692c443d7bc8",
                "patch": "@@ -26,7 +26,6 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.api.FieldSchema;\n import org.apache.hadoop.hive.ql.exec.DDLTask;\n import org.apache.hadoop.hive.ql.exec.Task;\n@@ -195,8 +194,7 @@ public void postAnalyze(HiveSemanticAnalyzerHookContext context,\n \n         //authorize against the table operation so that location permissions can be checked if any\n \n-        if (HiveConf.getBoolVar(context.getConf(),\n-          HiveConf.ConfVars.HIVE_AUTHORIZATION_ENABLED)) {\n+        if (HCatAuthUtil.isAuthorizationEnabled(context.getConf())) {\n           authorize(table, Privilege.CREATE);\n         }\n       } catch (HiveException ex) {",
                "deletions": 3
            },
            {
                "sha": "6dce9c4b1d1218ce1f8b4ebffee0eaacb31d25cd",
                "filename": "hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatAuthUtil.java",
                "blob_url": "https://github.com/apache/hive/blob/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatAuthUtil.java",
                "raw_url": "https://github.com/apache/hive/raw/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatAuthUtil.java",
                "status": "added",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatAuthUtil.java?ref=460d97daa215607674ea7516fec1692c443d7bc8",
                "patch": "@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.hive.hcatalog.cli.SemanticAnalysis;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+\n+final class HCatAuthUtil {\n+  public static boolean isAuthorizationEnabled(Configuration conf) {\n+    // the session state getAuthorizer can return null even if authorization is\n+    // enabled if the V2 api of authorizer in use.\n+    // The additional authorization checks happening in hcatalog are designed to\n+    // work with  storage based authorization (on client side). It should not try doing\n+    // additional checks if a V2 authorizer is in use. The reccomended configuration is to\n+    // use storage based authorization in metastore server\n+    return HiveConf.getBoolVar(conf, HiveConf.ConfVars.HIVE_AUTHORIZATION_ENABLED)\n+        && SessionState.get().getAuthorizer() != null;\n+  }\n+}",
                "deletions": 0
            },
            {
                "sha": "5b3ef946613a0b26b3dab340b44f8eb9338ccaf7",
                "filename": "hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzerBase.java",
                "blob_url": "https://github.com/apache/hive/blob/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzerBase.java",
                "raw_url": "https://github.com/apache/hive/raw/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzerBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzerBase.java?ref=460d97daa215607674ea7516fec1692c443d7bc8",
                "patch": "@@ -22,7 +22,6 @@\n import java.io.Serializable;\n import java.util.List;\n \n-import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.api.Database;\n import org.apache.hadoop.hive.ql.exec.Task;\n import org.apache.hadoop.hive.ql.metadata.AuthorizationException;\n@@ -89,8 +88,7 @@ public void postAnalyze(HiveSemanticAnalyzerHookContext context,\n   protected void authorizeDDL(HiveSemanticAnalyzerHookContext context,\n                 List<Task<? extends Serializable>> rootTasks) throws SemanticException {\n \n-    if (!HiveConf.getBoolVar(context.getConf(),\n-      HiveConf.ConfVars.HIVE_AUTHORIZATION_ENABLED)) {\n+    if (!HCatAuthUtil.isAuthorizationEnabled(context.getConf())) {\n       return;\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "830dcb8119c255127f64a128a1d7b66f041bfb3e",
                "filename": "hcatalog/core/src/test/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/TestHCatAuthUtil.java",
                "blob_url": "https://github.com/apache/hive/blob/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/core/src/test/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/TestHCatAuthUtil.java",
                "raw_url": "https://github.com/apache/hive/raw/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/core/src/test/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/TestHCatAuthUtil.java",
                "status": "added",
                "changes": 84,
                "additions": 84,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/test/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/TestHCatAuthUtil.java?ref=460d97daa215607674ea7516fec1692c443d7bc8",
                "patch": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.hive.hcatalog.cli.SemanticAnalysis;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.ql.security.HiveAuthenticationProvider;\n+import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthorizer;\n+import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthorizerFactory;\n+import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthzPluginException;\n+import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAuthzSessionContext;\n+import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveMetastoreClientFactory;\n+import org.apache.hadoop.hive.ql.session.SessionState;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Test HCatAuthUtil\n+ */\n+public class TestHCatAuthUtil {\n+\n+  public static class DummyV2AuthorizerFactory implements HiveAuthorizerFactory {\n+\n+    @Override\n+    public HiveAuthorizer createHiveAuthorizer(HiveMetastoreClientFactory metastoreClientFactory,\n+        HiveConf conf, HiveAuthenticationProvider hiveAuthenticator, HiveAuthzSessionContext ctx)\n+        throws HiveAuthzPluginException {\n+      return Mockito.mock(HiveAuthorizer.class);\n+    }\n+  }\n+\n+  /**\n+   * Test with auth enabled and v1 auth\n+   */\n+  @Test\n+  public void authEnabledV1Auth() throws Exception {\n+    HiveConf hcatConf = new HiveConf(this.getClass());\n+    hcatConf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED, true);\n+    SessionState.start(hcatConf);\n+    assertTrue(\"hcat auth should be enabled\", HCatAuthUtil.isAuthorizationEnabled(hcatConf));\n+  }\n+\n+  /**\n+   * Test with auth enabled and v2 auth\n+   */\n+  @Test\n+  public void authEnabledV2Auth() throws Exception {\n+    HiveConf hcatConf = new HiveConf(this.getClass());\n+    hcatConf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED, true);\n+    hcatConf.setVar(ConfVars.HIVE_AUTHORIZATION_MANAGER, DummyV2AuthorizerFactory.class.getName());\n+    SessionState.start(hcatConf);\n+    assertFalse(\"hcat auth should be disabled\", HCatAuthUtil.isAuthorizationEnabled(hcatConf));\n+  }\n+\n+  /**\n+   * Test with auth disabled\n+   */\n+  @Test\n+  public void authDisabled() throws Exception {\n+    HiveConf hcatConf = new HiveConf(this.getClass());\n+    hcatConf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED, false);\n+    SessionState.start(hcatConf);\n+    assertFalse(\"hcat auth should be disabled\", HCatAuthUtil.isAuthorizationEnabled(hcatConf));\n+  }\n+}",
                "deletions": 0
            },
            {
                "sha": "cff3837dd20df14e0950c30a1db1da8b61df6339",
                "filename": "hcatalog/pom.xml",
                "blob_url": "https://github.com/apache/hive/blob/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/pom.xml",
                "raw_url": "https://github.com/apache/hive/raw/460d97daa215607674ea7516fec1692c443d7bc8/hcatalog/pom.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/pom.xml?ref=460d97daa215607674ea7516fec1692c443d7bc8",
                "patch": "@@ -46,6 +46,15 @@\n     <module>streaming</module>\n   </modules>\n \n+  <dependencies>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-all</artifactId>\n+      <version>${mockito-all.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n   <profiles>\n     <profile>\n       <id>hadoop-1</id>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HCatSemanticAnalyzerBase.java",
            "CreateTableHook.java",
            "HCatAuthUtil.java"
        ],
        "unit_tests": [
            "TestHCatAuthUtil.java"
        ]
    },
    "hive_5404635": {
        "repo": "hive",
        "message": "HIVE-18946: Fix columnstats merge NPE (Laszlo Bodor via Zoltan Haindrich)\n\nSigned-off-by: Zoltan Haindrich <kirk@rxd.hu>",
        "commit": "https://github.com/apache/hive/commit/54046353e022d7aa5f3656de7d2a66f15608466d",
        "parent": "https://github.com/apache/hive/commit/fa9e743e7afbcd6409a51955e39e4e2bb3c109d2",
        "bug_id": "hive_5404635",
        "file": [
            {
                "sha": "6ea6125964fbf8fc7c16c8b80dbc38ecc12e72b6",
                "filename": "ql/src/test/queries/clientpositive/stats_analyze_empty.q",
                "blob_url": "https://github.com/apache/hive/blob/54046353e022d7aa5f3656de7d2a66f15608466d/ql/src/test/queries/clientpositive/stats_analyze_empty.q",
                "raw_url": "https://github.com/apache/hive/raw/54046353e022d7aa5f3656de7d2a66f15608466d/ql/src/test/queries/clientpositive/stats_analyze_empty.q",
                "status": "added",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/stats_analyze_empty.q?ref=54046353e022d7aa5f3656de7d2a66f15608466d",
                "patch": "@@ -0,0 +1,18 @@\n+set hive.stats.autogather=true;\n+set hive.explain.user=true;\n+\n+drop table if exists testdeci2;\n+\n+create table testdeci2(\n+id int,\n+amount decimal(10,3),\n+sales_tax decimal(10,3),\n+item string)\n+stored as orc location '/tmp/testdeci2'\n+TBLPROPERTIES (\"transactional\"=\"false\")\n+;\n+\n+\n+analyze table testdeci2 compute statistics for columns;\n+\n+insert into table testdeci2 values(1,12.123,12345.123,'desk1'),(2,123.123,1234.123,'desk2');",
                "deletions": 0
            },
            {
                "sha": "6eb51e950dbcb24c6a4f9ce08837eb2ebd608cdc",
                "filename": "ql/src/test/results/clientpositive/stats_analyze_empty.q.out",
                "blob_url": "https://github.com/apache/hive/blob/54046353e022d7aa5f3656de7d2a66f15608466d/ql/src/test/results/clientpositive/stats_analyze_empty.q.out",
                "raw_url": "https://github.com/apache/hive/raw/54046353e022d7aa5f3656de7d2a66f15608466d/ql/src/test/results/clientpositive/stats_analyze_empty.q.out",
                "status": "added",
                "changes": 48,
                "additions": 48,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/stats_analyze_empty.q.out?ref=54046353e022d7aa5f3656de7d2a66f15608466d",
                "patch": "@@ -0,0 +1,48 @@\n+PREHOOK: query: drop table if exists testdeci2\n+PREHOOK: type: DROPTABLE\n+POSTHOOK: query: drop table if exists testdeci2\n+POSTHOOK: type: DROPTABLE\n+PREHOOK: query: create table testdeci2(\n+id int,\n+amount decimal(10,3),\n+sales_tax decimal(10,3),\n+item string)\n+#### A masked pattern was here ####\n+TBLPROPERTIES (\"transactional\"=\"false\")\n+PREHOOK: type: CREATETABLE\n+#### A masked pattern was here ####\n+PREHOOK: Output: database:default\n+PREHOOK: Output: default@testdeci2\n+POSTHOOK: query: create table testdeci2(\n+id int,\n+amount decimal(10,3),\n+sales_tax decimal(10,3),\n+item string)\n+#### A masked pattern was here ####\n+TBLPROPERTIES (\"transactional\"=\"false\")\n+POSTHOOK: type: CREATETABLE\n+#### A masked pattern was here ####\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@testdeci2\n+PREHOOK: query: analyze table testdeci2 compute statistics for columns\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@testdeci2\n+PREHOOK: Output: default@testdeci2\n+#### A masked pattern was here ####\n+POSTHOOK: query: analyze table testdeci2 compute statistics for columns\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@testdeci2\n+POSTHOOK: Output: default@testdeci2\n+#### A masked pattern was here ####\n+PREHOOK: query: insert into table testdeci2 values(1,12.123,12345.123,'desk1'),(2,123.123,1234.123,'desk2')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: _dummy_database@_dummy_table\n+PREHOOK: Output: default@testdeci2\n+POSTHOOK: query: insert into table testdeci2 values(1,12.123,12345.123,'desk1'),(2,123.123,1234.123,'desk2')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: _dummy_database@_dummy_table\n+POSTHOOK: Output: default@testdeci2\n+POSTHOOK: Lineage: testdeci2.amount SCRIPT []\n+POSTHOOK: Lineage: testdeci2.id SCRIPT []\n+POSTHOOK: Lineage: testdeci2.item SCRIPT []\n+POSTHOOK: Lineage: testdeci2.sales_tax SCRIPT []",
                "deletions": 0
            },
            {
                "sha": "517ca7259b7542c6d830b13b2a391c773862879d",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/columnstats/merge/DecimalColumnStatsMerger.java",
                "blob_url": "https://github.com/apache/hive/blob/54046353e022d7aa5f3656de7d2a66f15608466d/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/columnstats/merge/DecimalColumnStatsMerger.java",
                "raw_url": "https://github.com/apache/hive/raw/54046353e022d7aa5f3656de7d2a66f15608466d/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/columnstats/merge/DecimalColumnStatsMerger.java",
                "status": "modified",
                "changes": 36,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/columnstats/merge/DecimalColumnStatsMerger.java?ref=54046353e022d7aa5f3656de7d2a66f15608466d",
                "patch": "@@ -31,15 +31,15 @@ public void merge(ColumnStatisticsObj aggregateColStats, ColumnStatisticsObj new\n         (DecimalColumnStatsDataInspector) aggregateColStats.getStatsData().getDecimalStats();\n     DecimalColumnStatsDataInspector newData =\n         (DecimalColumnStatsDataInspector) newColStats.getStatsData().getDecimalStats();\n-    Decimal lowValue = aggregateData.getLowValue() != null\n-        && (aggregateData.getLowValue().compareTo(newData.getLowValue()) > 0) ? aggregateData\n-        .getLowValue() : newData.getLowValue();\n+\n+    Decimal lowValue = getMin(aggregateData.getLowValue(), newData.getLowValue());\n     aggregateData.setLowValue(lowValue);\n-    Decimal highValue = aggregateData.getHighValue() != null\n-        && (aggregateData.getHighValue().compareTo(newData.getHighValue()) > 0) ? aggregateData\n-        .getHighValue() : newData.getHighValue();\n+\n+    Decimal highValue = getMax(aggregateData.getHighValue(), newData.getHighValue());\n     aggregateData.setHighValue(highValue);\n+\n     aggregateData.setNumNulls(aggregateData.getNumNulls() + newData.getNumNulls());\n+\n     if (aggregateData.getNdvEstimator() == null || newData.getNdvEstimator() == null) {\n       aggregateData.setNumDVs(Math.max(aggregateData.getNumDVs(), newData.getNumDVs()));\n     } else {\n@@ -58,4 +58,28 @@ public void merge(ColumnStatisticsObj aggregateColStats, ColumnStatisticsObj new\n       aggregateData.setNumDVs(ndv);\n     }\n   }\n+\n+  Decimal getMax(Decimal firstValue, Decimal secondValue) {\n+    if (firstValue == null && secondValue == null) {\n+      return null;\n+    }\n+\n+    if (firstValue != null && secondValue != null) {\n+      return firstValue.compareTo(secondValue) > 0 ? firstValue : secondValue;\n+    }\n+\n+    return firstValue == null ? secondValue : firstValue;\n+  }\n+\n+  Decimal getMin(Decimal firstValue, Decimal secondValue) {\n+    if (firstValue == null && secondValue == null) {\n+      return null;\n+    }\n+\n+    if (firstValue != null && secondValue != null) {\n+      return firstValue.compareTo(secondValue) > 0 ? secondValue : firstValue;\n+    }\n+\n+    return firstValue == null ? secondValue : firstValue;\n+  }\n }",
                "deletions": 6
            },
            {
                "sha": "3b74d1e381207cb71c2e5a36220db5201f85ac14",
                "filename": "standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/columnstats/merge/DecimalColumnStatsMergerTest.java",
                "blob_url": "https://github.com/apache/hive/blob/54046353e022d7aa5f3656de7d2a66f15608466d/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/columnstats/merge/DecimalColumnStatsMergerTest.java",
                "raw_url": "https://github.com/apache/hive/raw/54046353e022d7aa5f3656de7d2a66f15608466d/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/columnstats/merge/DecimalColumnStatsMergerTest.java",
                "status": "added",
                "changes": 242,
                "additions": 242,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/columnstats/merge/DecimalColumnStatsMergerTest.java?ref=54046353e022d7aa5f3656de7d2a66f15608466d",
                "patch": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hadoop.hive.metastore.columnstats.merge;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.hadoop.hive.metastore.annotation.MetastoreUnitTest;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsData;\n+import org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj;\n+import org.apache.hadoop.hive.metastore.api.Decimal;\n+import org.apache.hadoop.hive.metastore.columnstats.cache.DecimalColumnStatsDataInspector;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(MetastoreUnitTest.class)\n+public class DecimalColumnStatsMergerTest {\n+\n+  private static final Decimal DECIMAL_3 = getDecimal(3, 0);\n+  private static final Decimal DECIMAL_5 = getDecimal(5, 0);\n+  private static final Decimal DECIMAL_20 = getDecimal(2, 1);\n+\n+  private DecimalColumnStatsMerger merger = new DecimalColumnStatsMerger();\n+\n+  @Test\n+  public void testMergeNullMinMaxValues() {\n+    ColumnStatisticsObj objNulls = new ColumnStatisticsObj();\n+    createData(objNulls, null, null);\n+\n+    merger.merge(objNulls, objNulls);\n+\n+    Assert.assertNull(objNulls.getStatsData().getDecimalStats().getLowValue());\n+    Assert.assertNull(objNulls.getStatsData().getDecimalStats().getHighValue());\n+  }\n+\n+  @Test\n+  public void testMergeNonNullAndNullLowerValuesOldIsNull() {\n+    ColumnStatisticsObj oldObj = new ColumnStatisticsObj();\n+    createData(oldObj, null, null);\n+\n+    ColumnStatisticsObj newObj = new ColumnStatisticsObj();\n+    createData(newObj, DECIMAL_3, null);\n+\n+    merger.merge(oldObj, newObj);\n+\n+    Assert.assertEquals(DECIMAL_3, oldObj.getStatsData().getDecimalStats().getLowValue());\n+  }\n+\n+  @Test\n+  public void testMergeNonNullAndNullLowerValuesNewIsNull() {\n+    ColumnStatisticsObj oldObj = new ColumnStatisticsObj();\n+    createData(oldObj, DECIMAL_3, null);\n+\n+    ColumnStatisticsObj newObj = new ColumnStatisticsObj();\n+    createData(newObj, null, null);\n+\n+    merger.merge(oldObj, newObj);\n+\n+    Assert.assertEquals(DECIMAL_3, oldObj.getStatsData().getDecimalStats().getLowValue());\n+  }\n+\n+  @Test\n+  public void testMergeNonNullAndNullHigherValuesOldIsNull() {\n+    ColumnStatisticsObj oldObj = new ColumnStatisticsObj();\n+    createData(oldObj, null, null);\n+\n+    ColumnStatisticsObj newObj = new ColumnStatisticsObj();\n+    createData(newObj, null, DECIMAL_3);\n+\n+    merger.merge(oldObj, newObj);\n+\n+    Assert.assertEquals(DECIMAL_3, oldObj.getStatsData().getDecimalStats().getHighValue());\n+  }\n+\n+  @Test\n+  public void testMergeNonNullAndNullHigherValuesNewIsNull() {\n+    ColumnStatisticsObj oldObj = new ColumnStatisticsObj();\n+    createData(oldObj, null, DECIMAL_3);\n+\n+    ColumnStatisticsObj newObj = new ColumnStatisticsObj();\n+    createData(newObj, null, null);\n+\n+    merger.merge(oldObj, newObj);\n+\n+    Assert.assertEquals(DECIMAL_3, oldObj.getStatsData().getDecimalStats().getHighValue());\n+  }\n+\n+  @Test\n+  public void testMergeLowValuesFirstWins() {\n+    ColumnStatisticsObj oldObj = new ColumnStatisticsObj();\n+    createData(oldObj, DECIMAL_3, null);\n+\n+    ColumnStatisticsObj newObj = new ColumnStatisticsObj();\n+    createData(newObj, DECIMAL_5, null);\n+\n+    merger.merge(oldObj, newObj);\n+\n+    Assert.assertEquals(DECIMAL_3, oldObj.getStatsData().getDecimalStats().getLowValue());\n+  }\n+\n+  @Test\n+  public void testMergeLowValuesSecondWins() {\n+    ColumnStatisticsObj oldObj = new ColumnStatisticsObj();\n+    createData(oldObj, DECIMAL_5, null);\n+\n+    ColumnStatisticsObj newObj = new ColumnStatisticsObj();\n+    createData(newObj, DECIMAL_3, null);\n+\n+    merger.merge(oldObj, newObj);\n+\n+    Assert.assertEquals(DECIMAL_3, oldObj.getStatsData().getDecimalStats().getLowValue());\n+  }\n+\n+  @Test\n+  public void testMergeHighValuesFirstWins() {\n+    ColumnStatisticsObj oldObj = new ColumnStatisticsObj();\n+    createData(oldObj, null, DECIMAL_5);\n+\n+    ColumnStatisticsObj newObj = new ColumnStatisticsObj();\n+    createData(newObj, null, DECIMAL_3);\n+\n+    merger.merge(oldObj, newObj);\n+\n+    Assert.assertEquals(DECIMAL_5, oldObj.getStatsData().getDecimalStats().getHighValue());\n+  }\n+\n+  @Test\n+  public void testMergeHighValuesSecondWins() {\n+    ColumnStatisticsObj oldObj = new ColumnStatisticsObj();\n+    createData(oldObj, null, DECIMAL_3);\n+\n+    ColumnStatisticsObj newObj = new ColumnStatisticsObj();\n+    createData(newObj, null, DECIMAL_5);\n+\n+    merger.merge(oldObj, newObj);\n+\n+    Assert.assertEquals(DECIMAL_5, oldObj.getStatsData().getDecimalStats().getHighValue());\n+  }\n+\n+  @Test\n+  public void testDecimalCompareEqual() {\n+    Assert.assertTrue(DECIMAL_3.equals(DECIMAL_3));\n+  }\n+\n+  @Test\n+  public void testDecimalCompareDoesntEqual() {\n+    Assert.assertTrue(!DECIMAL_3.equals(DECIMAL_5));\n+  }\n+\n+  @Test\n+  public void testCompareSimple() {\n+    Assert.assertEquals(DECIMAL_5, merger.getMax(DECIMAL_3, DECIMAL_5));\n+  }\n+\n+  @Test\n+  public void testCompareSimpleFlipped() {\n+    Assert.assertEquals(DECIMAL_5, merger.getMax(DECIMAL_5, DECIMAL_3));\n+  }\n+\n+  @Test\n+  public void testCompareSimpleReversed() {\n+    Assert.assertEquals(DECIMAL_3, merger.getMin(DECIMAL_3, DECIMAL_5));\n+  }\n+\n+  @Test\n+  public void testCompareSimpleFlippedReversed() {\n+    Assert.assertEquals(DECIMAL_3, merger.getMin(DECIMAL_5, DECIMAL_3));\n+  }\n+\n+  /*\n+   * it should pass, but fails because of HIVE-19131, get back to this later!\n+   *\n+   * @Test public void testCompareUnscaledValue() { Assert.assertEquals(DECIMAL_20,\n+   * merger.compareValues(DECIMAL_3, DECIMAL_20)); }\n+   */\n+\n+  @Test\n+  public void testCompareNullsMin() {\n+    Assert.assertNull(merger.getMin(null, null));\n+  }\n+\n+  @Test\n+  public void testCompareNullsMax() {\n+    Assert.assertNull(merger.getMax(null, null));\n+  }\n+\n+  @Test\n+  public void testCompareFirstNullMin() {\n+    Assert.assertEquals(DECIMAL_3, merger.getMin(null, DECIMAL_3));\n+  }\n+\n+  @Test\n+  public void testCompareSecondNullMin() {\n+    Assert.assertEquals(DECIMAL_3, merger.getMin(DECIMAL_3, null));\n+  }\n+\n+  @Test\n+  public void testCompareFirstNullMax() {\n+    Assert.assertEquals(DECIMAL_3, merger.getMax(null, DECIMAL_3));\n+  }\n+\n+  @Test\n+  public void testCompareSecondNullMax() {\n+    Assert.assertEquals(DECIMAL_3, merger.getMax(DECIMAL_3, null));\n+  }\n+\n+  private static Decimal getDecimal(int number, int scale) {\n+    ByteBuffer bb = ByteBuffer.allocate(4);\n+    bb.asIntBuffer().put(number);\n+    return new Decimal(bb, (short) scale);\n+  }\n+\n+  private DecimalColumnStatsDataInspector createData(ColumnStatisticsObj objNulls, Decimal lowValue,\n+      Decimal highValue) {\n+    ColumnStatisticsData statisticsData = new ColumnStatisticsData();\n+    DecimalColumnStatsDataInspector data = new DecimalColumnStatsDataInspector();\n+\n+    statisticsData.setDecimalStats(data);\n+    objNulls.setStatsData(statisticsData);\n+\n+    data.setLowValue(lowValue);\n+    data.setHighValue(highValue);\n+    return data;\n+  }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DecimalColumnStatsMerger.java"
        ],
        "unit_tests": [
            "DecimalColumnStatsMergerTest.java"
        ]
    },
    "hive_e1ef225": {
        "repo": "hive",
        "message": "HIVE-6716: ORC struct throws NPE for tables with inner structs having null values (Prasanth J via Gunther Hagleitner)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1581007 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/e1ef225bafd066b63dbe48a3496fa5b3fa39a6dc",
        "parent": "https://github.com/apache/hive/commit/a39be7254a38c010154e7ebd65e8282db804ba80",
        "bug_id": "hive_e1ef225",
        "file": [
            {
                "sha": "685b386606cec0e85eb3bf5fa0e7cf0e4fd6f88f",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java",
                "blob_url": "https://github.com/apache/hive/blob/e1ef225bafd066b63dbe48a3496fa5b3fa39a6dc/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java",
                "raw_url": "https://github.com/apache/hive/raw/e1ef225bafd066b63dbe48a3496fa5b3fa39a6dc/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java?ref=e1ef225bafd066b63dbe48a3496fa5b3fa39a6dc",
                "patch": "@@ -207,11 +207,17 @@ public StructField getStructFieldRef(String s) {\n \n     @Override\n     public Object getStructFieldData(Object object, StructField field) {\n+      if (object == null) {\n+        return null;\n+      }\n       return ((OrcStruct) object).fields[((Field) field).offset];\n     }\n \n     @Override\n     public List<Object> getStructFieldsDataAsList(Object object) {\n+      if (object == null) {\n+        return null;\n+      }\n       OrcStruct struct = (OrcStruct) object;\n       List<Object> result = new ArrayList<Object>(struct.fields.length);\n       for (Object child: struct.fields) {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "OrcStruct.java"
        ],
        "unit_tests": [
            "TestOrcStruct.java"
        ]
    },
    "hive_0cbf45c": {
        "repo": "hive",
        "message": "HIVE-12577: NPE in LlapTaskCommunicator when unregistering containers (Siddarth Seth, reviewed by Sergey Shelukhin)",
        "commit": "https://github.com/apache/hive/commit/0cbf45cfc046f39bed4533ab83542002e79b4f5b",
        "parent": "https://github.com/apache/hive/commit/b340ecb5e163277e86def59b454b8c041ece39d5",
        "bug_id": "hive_0cbf45c",
        "file": [
            {
                "sha": "2884e40fe787a1b0884b6832f6a05fa6945baf4a",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapDaemonProtocolClientProxy.java",
                "blob_url": "https://github.com/apache/hive/blob/0cbf45cfc046f39bed4533ab83542002e79b4f5b/llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapDaemonProtocolClientProxy.java",
                "raw_url": "https://github.com/apache/hive/raw/0cbf45cfc046f39bed4533ab83542002e79b4f5b/llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapDaemonProtocolClientProxy.java",
                "status": "renamed",
                "changes": 11,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapDaemonProtocolClientProxy.java?ref=0cbf45cfc046f39bed4533ab83542002e79b4f5b",
                "patch": "@@ -16,8 +16,6 @@\n \n import javax.net.SocketFactory;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.DataInputStream;\n import java.io.IOException;\n import java.security.PrivilegedAction;\n import java.util.HashSet;\n@@ -49,7 +47,6 @@\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n import org.apache.hadoop.hive.llap.LlapNodeId;\n-import org.apache.hadoop.hive.llap.configuration.LlapConfiguration;\n import org.apache.hadoop.hive.llap.daemon.LlapDaemonProtocolBlockingPB;\n import org.apache.hadoop.hive.llap.daemon.impl.LlapDaemonProtocolClientImpl;\n import org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.QueryCompleteRequestProto;\n@@ -71,9 +68,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class TaskCommunicator extends AbstractService {\n+public class LlapDaemonProtocolClientProxy extends AbstractService {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(TaskCommunicator.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(LlapDaemonProtocolClientProxy.class);\n \n   private final ConcurrentMap<String, LlapDaemonProtocolBlockingPB> hostProxies;\n \n@@ -85,9 +82,9 @@\n   private volatile ListenableFuture<Void> requestManagerFuture;\n   private final Token<LlapTokenIdentifier> llapToken;\n \n-  public TaskCommunicator(\n+  public LlapDaemonProtocolClientProxy(\n       int numThreads, Configuration conf, Token<LlapTokenIdentifier> llapToken) {\n-    super(TaskCommunicator.class.getSimpleName());\n+    super(LlapDaemonProtocolClientProxy.class.getSimpleName());\n     this.hostProxies = new ConcurrentHashMap<>();\n     this.socketFactory = NetUtils.getDefaultSocketFactory(conf);\n     this.llapToken = llapToken;",
                "deletions": 7,
                "previous_filename": "llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/TaskCommunicator.java"
            },
            {
                "sha": "5c370eef18e3037ebdc8abee4497cca04e461d1c",
                "filename": "llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java",
                "blob_url": "https://github.com/apache/hive/blob/0cbf45cfc046f39bed4533ab83542002e79b4f5b/llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java",
                "raw_url": "https://github.com/apache/hive/raw/0cbf45cfc046f39bed4533ab83542002e79b4f5b/llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java",
                "status": "modified",
                "changes": 187,
                "additions": 143,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/java/org/apache/hadoop/hive/llap/tezplugins/LlapTaskCommunicator.java?ref=0cbf45cfc046f39bed4533ab83542002e79b4f5b",
                "patch": "@@ -22,8 +22,10 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.BiMap;\n import com.google.common.collect.HashBiMap;\n@@ -79,6 +81,9 @@\n \n   private static final Logger LOG = LoggerFactory.getLogger(LlapTaskCommunicator.class);\n \n+  private static final boolean isInfoEnabled = LOG.isInfoEnabled();\n+  private static final boolean isDebugEnabed = LOG.isDebugEnabled();\n+\n   private final SubmitWorkRequestProto BASE_SUBMIT_WORK_REQUEST;\n   private final ConcurrentMap<String, ByteBuffer> credentialMap;\n \n@@ -88,11 +93,17 @@\n   private final SourceStateTracker sourceStateTracker;\n   private final Set<LlapNodeId> nodesForQuery = new HashSet<>();\n \n-  private TaskCommunicator communicator;\n+  private LlapDaemonProtocolClientProxy communicator;\n   private long deleteDelayOnDagComplete;\n   private final LlapTaskUmbilicalProtocol umbilical;\n   private final Token<LlapTokenIdentifier> token;\n \n+  // These two structures track the list of known nodes, and the list of nodes which are sending in keep-alive heartbeats.\n+  // Primarily for debugging purposes a.t.m, since there's some unexplained TASK_TIMEOUTS which are currently being observed.\n+  private final ConcurrentMap<LlapNodeId, Long> knownNodeMap = new ConcurrentHashMap<>();\n+  private final ConcurrentMap<LlapNodeId, PingingNodeInfo> pingedNodeMap = new ConcurrentHashMap<>();\n+\n+\n   private volatile String currentDagName;\n \n   public LlapTaskCommunicator(\n@@ -131,7 +142,7 @@ public void initialize() throws Exception {\n     super.initialize();\n     Configuration conf = getConf();\n     int numThreads = HiveConf.getIntVar(conf, ConfVars.LLAP_DAEMON_COMMUNICATOR_NUM_THREADS);\n-    this.communicator = new TaskCommunicator(numThreads, conf, token);\n+    this.communicator = new LlapDaemonProtocolClientProxy(numThreads, conf, token);\n     this.deleteDelayOnDagComplete = HiveConf.getTimeVar(\n         conf, ConfVars.LLAP_FILE_CLEANUP_DELAY_SECONDS, TimeUnit.SECONDS);\n     LOG.info(\"Running LlapTaskCommunicator with \"\n@@ -235,6 +246,7 @@ public void registerRunningTaskAttempt(final ContainerId containerId, final Task\n     }\n \n     LlapNodeId nodeId = LlapNodeId.getInstance(host, port);\n+    registerKnownNode(nodeId);\n     entityTracker.registerTaskAttempt(containerId, taskSpec.getTaskAttemptID(), host, port);\n     nodesForQuery.add(nodeId);\n \n@@ -254,7 +266,7 @@ public void registerRunningTaskAttempt(final ContainerId containerId, final Task\n     getContext()\n         .taskStartedRemotely(taskSpec.getTaskAttemptID(), containerId);\n     communicator.sendSubmitWork(requestProto, host, port,\n-        new TaskCommunicator.ExecuteRequestCallback<SubmitWorkResponseProto>() {\n+        new LlapDaemonProtocolClientProxy.ExecuteRequestCallback<SubmitWorkResponseProto>() {\n           @Override\n           public void setResponse(SubmitWorkResponseProto response) {\n             if (response.hasSubmissionState()) {\n@@ -333,14 +345,14 @@ private void sendTaskTerminated(final TezTaskAttemptID taskAttemptId,\n     LOG.info(\n         \"DBG: Attempting to send terminateRequest for fragment {} due to internal preemption invoked by {}\",\n         taskAttemptId.toString(), invokedByContainerEnd ? \"containerEnd\" : \"taskEnd\");\n-    LlapNodeId nodeId = entityTracker.getNodeIfForTaskAttempt(taskAttemptId);\n+    LlapNodeId nodeId = entityTracker.getNodeIdForTaskAttempt(taskAttemptId);\n     // NodeId can be null if the task gets unregistered due to failure / being killed by the daemon itself\n     if (nodeId != null) {\n       TerminateFragmentRequestProto request =\n           TerminateFragmentRequestProto.newBuilder().setDagName(currentDagName)\n               .setFragmentIdentifierString(taskAttemptId.toString()).build();\n       communicator.sendTerminateFragment(request, nodeId.getHostname(), nodeId.getPort(),\n-          new TaskCommunicator.ExecuteRequestCallback<TerminateFragmentResponseProto>() {\n+          new LlapDaemonProtocolClientProxy.ExecuteRequestCallback<TerminateFragmentResponseProto>() {\n             @Override\n             public void setResponse(TerminateFragmentResponseProto response) {\n             }\n@@ -365,7 +377,7 @@ public void dagComplete(final String dagName) {\n     for (final LlapNodeId llapNodeId : nodesForQuery) {\n       LOG.info(\"Sending dagComplete message for {}, to {}\", dagName, llapNodeId);\n       communicator.sendQueryComplete(request, llapNodeId.getHostname(), llapNodeId.getPort(),\n-          new TaskCommunicator.ExecuteRequestCallback<LlapDaemonProtocolProtos.QueryCompleteResponseProto>() {\n+          new LlapDaemonProtocolClientProxy.ExecuteRequestCallback<LlapDaemonProtocolProtos.QueryCompleteResponseProto>() {\n             @Override\n             public void setResponse(LlapDaemonProtocolProtos.QueryCompleteResponseProto response) {\n             }\n@@ -391,7 +403,7 @@ public void onVertexStateUpdated(VertexStateUpdate vertexStateUpdate) {\n   public void sendStateUpdate(final String host, final int port,\n                               final SourceStateUpdatedRequestProto request) {\n     communicator.sendSourceStateUpdate(request, host, port,\n-        new TaskCommunicator.ExecuteRequestCallback<SourceStateUpdatedResponseProto>() {\n+        new LlapDaemonProtocolClientProxy.ExecuteRequestCallback<SourceStateUpdatedResponseProto>() {\n           @Override\n           public void setResponse(SourceStateUpdatedResponseProto response) {\n           }\n@@ -409,6 +421,79 @@ public void indicateError(Throwable t) {\n   }\n \n \n+  private static class PingingNodeInfo {\n+    final AtomicLong logTimestamp;\n+    final AtomicInteger pingCount;\n+\n+    PingingNodeInfo(long currentTs) {\n+      logTimestamp = new AtomicLong(currentTs);\n+      pingCount = new AtomicInteger(1);\n+    }\n+  }\n+\n+  public void registerKnownNode(LlapNodeId nodeId) {\n+    Long old = knownNodeMap.putIfAbsent(nodeId,\n+        TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS));\n+    if (old == null) {\n+      if (isInfoEnabled) {\n+        LOG.info(\"Added new known node: {}\", nodeId);\n+      }\n+    }\n+  }\n+\n+  public void registerPingingNode(LlapNodeId nodeId) {\n+    long currentTs = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n+    PingingNodeInfo ni = new PingingNodeInfo(currentTs);\n+    PingingNodeInfo old = pingedNodeMap.put(nodeId, ni);\n+    if (old == null) {\n+      if (isInfoEnabled) {\n+        LOG.info(\"Added new pinging node: [{}]\", nodeId);\n+      }\n+    } else {\n+      old.pingCount.incrementAndGet();\n+    }\n+    // The node should always be known by this point. Log occasionally if it is not known.\n+    if (!knownNodeMap.containsKey(nodeId)) {\n+      if (old == null) {\n+        // First time this is seen. Log it.\n+        LOG.warn(\"Received ping from unknownNode: [{}], count={}\", nodeId, ni.pingCount.get());\n+      } else {\n+        // Pinged before. Log only occasionally.\n+        if (currentTs > old.logTimestamp.get() + 5000l) { // 5 seconds elapsed. Log again.\n+          LOG.warn(\"Received ping from unknownNode: [{}], count={}\", nodeId, old.pingCount.get());\n+          old.logTimestamp.set(currentTs);\n+        }\n+      }\n+\n+    }\n+  }\n+\n+\n+  private final AtomicLong nodeNotFoundLogTime = new AtomicLong(0);\n+\n+  void nodePinged(String hostname, int port) {\n+    LlapNodeId nodeId = LlapNodeId.getInstance(hostname, port);\n+    registerPingingNode(nodeId);\n+    BiMap<ContainerId, TezTaskAttemptID> biMap =\n+        entityTracker.getContainerAttemptMapForNode(nodeId);\n+    if (biMap != null) {\n+      synchronized (biMap) {\n+        for (Map.Entry<ContainerId, TezTaskAttemptID> entry : biMap.entrySet()) {\n+          getContext().taskAlive(entry.getValue());\n+          getContext().containerAlive(entry.getKey());\n+        }\n+      }\n+    } else {\n+      long currentTs = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n+      if (currentTs > nodeNotFoundLogTime.get() + 5000l) {\n+        LOG.warn(\"Received ping from node without any registered tasks or containers: \" + hostname +\n+            \":\" + port +\n+            \". Could be caused by pre-emption by the AM,\" +\n+            \" or a mismatched hostname. Enable debug logging for mismatched host names\");\n+        nodeNotFoundLogTime.set(currentTs);\n+      }\n+    }\n+  }\n \n   private void resetCurrentDag(String newDagName) {\n     // Working on the assumption that a single DAG runs at a time per AM.\n@@ -454,6 +539,8 @@ private ByteBuffer serializeCredentials(Credentials credentials) throws IOExcept\n     return ByteBuffer.wrap(containerTokens_dob.getData(), 0, containerTokens_dob.getLength());\n   }\n \n+\n+\n   protected class LlapTaskUmbilicalProtocolImpl implements LlapTaskUmbilicalProtocol {\n \n     private final TezTaskUmbilicalProtocol tezUmbilical;\n@@ -475,7 +562,7 @@ public TezHeartbeatResponse heartbeat(TezHeartbeatRequest request) throws IOExce\n \n     @Override\n     public void nodeHeartbeat(Text hostname, int port) throws IOException {\n-      entityTracker.nodePinged(hostname.toString(), port);\n+      nodePinged(hostname.toString(), port);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Received heartbeat from [\" + hostname + \":\" + port +\"]\");\n       }\n@@ -502,17 +589,28 @@ public ProtocolSignature getProtocolSignature(String protocol, long clientVersio\n     }\n   }\n \n-  private final class EntityTracker {\n-    private final ConcurrentMap<TezTaskAttemptID, LlapNodeId> attemptToNodeMap = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<ContainerId, LlapNodeId> containerToNodeMap = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<LlapNodeId, BiMap<ContainerId, TezTaskAttemptID>> nodeMap = new ConcurrentHashMap<>();\n+  /**\n+   * Track the association between known containers and taskAttempts, along with the nodes they are assigned to.\n+   */\n+  @VisibleForTesting\n+  static final class EntityTracker {\n+    @VisibleForTesting\n+    final ConcurrentMap<TezTaskAttemptID, LlapNodeId> attemptToNodeMap = new ConcurrentHashMap<>();\n+    @VisibleForTesting\n+    final ConcurrentMap<ContainerId, LlapNodeId> containerToNodeMap = new ConcurrentHashMap<>();\n+    @VisibleForTesting\n+    final ConcurrentMap<LlapNodeId, BiMap<ContainerId, TezTaskAttemptID>> nodeMap = new ConcurrentHashMap<>();\n \n     void registerTaskAttempt(ContainerId containerId, TezTaskAttemptID taskAttemptId, String host, int port) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Registering \" + containerId + \", \" + taskAttemptId + \" for node: \" + host + \":\" + port);\n       }\n       LlapNodeId llapNodeId = LlapNodeId.getInstance(host, port);\n       attemptToNodeMap.putIfAbsent(taskAttemptId, llapNodeId);\n+\n+      registerContainer(containerId, host, port);\n+\n+      // nodeMap registration.\n       BiMap<ContainerId, TezTaskAttemptID> tmpMap = HashBiMap.create();\n       BiMap<ContainerId, TezTaskAttemptID> old = nodeMap.putIfAbsent(llapNodeId, tmpMap);\n       BiMap<ContainerId, TezTaskAttemptID> usedInstance;\n@@ -538,10 +636,9 @@ void unregisterTaskAttempt(TezTaskAttemptID attemptId) {\n         synchronized(bMap) {\n           matched = bMap.inverse().remove(attemptId);\n         }\n-      }\n-      // Removing here. Registration into the map has to make sure to put\n-      if (bMap.isEmpty()) {\n-        nodeMap.remove(llapNodeId);\n+        if (bMap.isEmpty()) {\n+          nodeMap.remove(llapNodeId);\n+        }\n       }\n \n       // Remove the container mapping\n@@ -552,23 +649,29 @@ void unregisterTaskAttempt(TezTaskAttemptID attemptId) {\n     }\n \n     void registerContainer(ContainerId containerId, String hostname, int port) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Registering \" + containerId + \" for node: \" + hostname + \":\" + port);\n+      }\n       containerToNodeMap.putIfAbsent(containerId, LlapNodeId.getInstance(hostname, port));\n+      // nodeMap registration is not required, since there's no taskId association.\n     }\n \n     LlapNodeId getNodeIdForContainer(ContainerId containerId) {\n       return containerToNodeMap.get(containerId);\n     }\n \n-    LlapNodeId getNodeIfForTaskAttempt(TezTaskAttemptID taskAttemptId) {\n+    LlapNodeId getNodeIdForTaskAttempt(TezTaskAttemptID taskAttemptId) {\n       return attemptToNodeMap.get(taskAttemptId);\n     }\n \n     ContainerId getContainerIdForAttempt(TezTaskAttemptID taskAttemptId) {\n-      LlapNodeId llapNodeId = getNodeIfForTaskAttempt(taskAttemptId);\n+      LlapNodeId llapNodeId = getNodeIdForTaskAttempt(taskAttemptId);\n       if (llapNodeId != null) {\n         BiMap<TezTaskAttemptID, ContainerId> bMap = nodeMap.get(llapNodeId).inverse();\n         if (bMap != null) {\n-          return bMap.get(taskAttemptId);\n+          synchronized (bMap) {\n+            return bMap.get(taskAttemptId);\n+          }\n         } else {\n           return null;\n         }\n@@ -582,7 +685,9 @@ TezTaskAttemptID getTaskAttemptIdForContainer(ContainerId containerId) {\n       if (llapNodeId != null) {\n         BiMap<ContainerId, TezTaskAttemptID> bMap = nodeMap.get(llapNodeId);\n         if (bMap != null) {\n-          return bMap.get(containerId);\n+          synchronized (bMap) {\n+            return bMap.get(containerId);\n+          }\n         } else {\n           return null;\n         }\n@@ -604,10 +709,9 @@ void unregisterContainer(ContainerId containerId) {\n         synchronized(bMap) {\n           matched = bMap.remove(containerId);\n         }\n-      }\n-      // Removing here. Registration into the map has to make sure to put\n-      if (bMap.isEmpty()) {\n-        nodeMap.remove(llapNodeId);\n+        if (bMap.isEmpty()) {\n+          nodeMap.remove(llapNodeId);\n+        }\n       }\n \n       // Remove the container mapping\n@@ -616,25 +720,20 @@ void unregisterContainer(ContainerId containerId) {\n       }\n     }\n \n-    private final AtomicLong nodeNotFoundLogTime = new AtomicLong(0);\n-    void nodePinged(String hostname, int port) {\n-      LlapNodeId nodeId = LlapNodeId.getInstance(hostname, port);\n-      BiMap<ContainerId, TezTaskAttemptID> biMap = nodeMap.get(nodeId);\n-      if (biMap != null) {\n-        synchronized(biMap) {\n-          for (Map.Entry<ContainerId, TezTaskAttemptID> entry : biMap.entrySet()) {\n-            getContext().taskAlive(entry.getValue());\n-            getContext().containerAlive(entry.getKey());\n-          }\n-        }\n-      } else {\n-        if (System.currentTimeMillis() > nodeNotFoundLogTime.get() + 5000l) {\n-          LOG.warn(\"Received ping from unknown node: \" + hostname + \":\" + port +\n-              \". Could be caused by pre-emption by the AM,\" +\n-              \" or a mismatched hostname. Enable debug logging for mismatched host names\");\n-          nodeNotFoundLogTime.set(System.currentTimeMillis());\n-        }\n-      }\n+    /**\n+     * Return a {@link BiMap} containing container->taskAttemptId mapping for the host specified.\n+     * </p>\n+     * <p/>\n+     * This method return the internal structure used by the EntityTracker. Users must synchronize\n+     * on the structure to ensure correct usage.\n+     *\n+     * @param llapNodeId\n+     * @return\n+     */\n+    BiMap<ContainerId, TezTaskAttemptID> getContainerAttemptMapForNode(LlapNodeId llapNodeId) {\n+      BiMap<ContainerId, TezTaskAttemptID> biMap = nodeMap.get(llapNodeId);\n+      return biMap;\n     }\n+\n   }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 44
            },
            {
                "sha": "a6af8c2405c9ead687ac5ddc5531f55a7c6c258d",
                "filename": "llap-server/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapDaemonProtocolClientProxy.java",
                "blob_url": "https://github.com/apache/hive/blob/0cbf45cfc046f39bed4533ab83542002e79b4f5b/llap-server/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapDaemonProtocolClientProxy.java",
                "raw_url": "https://github.com/apache/hive/raw/0cbf45cfc046f39bed4533ab83542002e79b4f5b/llap-server/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapDaemonProtocolClientProxy.java",
                "status": "renamed",
                "changes": 18,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapDaemonProtocolClientProxy.java?ref=0cbf45cfc046f39bed4533ab83542002e79b4f5b",
                "patch": "@@ -28,7 +28,7 @@\n import org.apache.hadoop.hive.llap.LlapNodeId;\n import org.junit.Test;\n \n-public class TestTaskCommunicator {\n+public class TestLlapDaemonProtocolClientProxy {\n \n   @Test (timeout = 5000)\n   public void testMultipleNodes() {\n@@ -38,8 +38,8 @@ public void testMultipleNodes() {\n     LlapNodeId nodeId2 = LlapNodeId.getInstance(\"host2\", 1025);\n \n     Message mockMessage = mock(Message.class);\n-    TaskCommunicator.ExecuteRequestCallback mockExecuteRequestCallback = mock(\n-        TaskCommunicator.ExecuteRequestCallback.class);\n+    LlapDaemonProtocolClientProxy.ExecuteRequestCallback mockExecuteRequestCallback = mock(\n+        LlapDaemonProtocolClientProxy.ExecuteRequestCallback.class);\n \n     // Request two messages\n     requestManager.queueRequest(\n@@ -66,8 +66,8 @@ public void testSingleInvocationPerNode() {\n     LlapNodeId nodeId1 = LlapNodeId.getInstance(\"host1\", 1025);\n \n     Message mockMessage = mock(Message.class);\n-    TaskCommunicator.ExecuteRequestCallback mockExecuteRequestCallback = mock(\n-        TaskCommunicator.ExecuteRequestCallback.class);\n+    LlapDaemonProtocolClientProxy.ExecuteRequestCallback mockExecuteRequestCallback = mock(\n+        LlapDaemonProtocolClientProxy.ExecuteRequestCallback.class);\n \n     // First request for host.\n     requestManager.queueRequest(\n@@ -101,7 +101,7 @@ public void testSingleInvocationPerNode() {\n   }\n \n \n-  static class RequestManagerForTest extends TaskCommunicator.RequestManager {\n+  static class RequestManagerForTest extends LlapDaemonProtocolClientProxy.RequestManager {\n \n     int numSubmissionsCounters = 0;\n     private Map<LlapNodeId, MutableInt> numInvocationsPerNode = new HashMap<>();\n@@ -110,7 +110,7 @@ public RequestManagerForTest(int numThreads) {\n       super(numThreads);\n     }\n \n-    protected void submitToExecutor(TaskCommunicator.CallableRequest request, LlapNodeId nodeId) {\n+    protected void submitToExecutor(LlapDaemonProtocolClientProxy.CallableRequest request, LlapNodeId nodeId) {\n       numSubmissionsCounters++;\n       MutableInt nodeCount = numInvocationsPerNode.get(nodeId);\n       if (nodeCount == null) {\n@@ -127,10 +127,10 @@ void reset() {\n \n   }\n \n-  static class CallableRequestForTest extends TaskCommunicator.CallableRequest<Message, Message> {\n+  static class CallableRequestForTest extends LlapDaemonProtocolClientProxy.CallableRequest<Message, Message> {\n \n     protected CallableRequestForTest(LlapNodeId nodeId, Message message,\n-                                     TaskCommunicator.ExecuteRequestCallback<Message> callback) {\n+                                     LlapDaemonProtocolClientProxy.ExecuteRequestCallback<Message> callback) {\n       super(nodeId, message, callback);\n     }\n ",
                "deletions": 9,
                "previous_filename": "llap-server/src/test/org/apache/hadoop/hive/llap/tezplugins/TestTaskCommunicator.java"
            },
            {
                "sha": "8f3d10474b95fa9f609272ba59356979f9e5642c",
                "filename": "llap-server/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapTaskCommunicator.java",
                "blob_url": "https://github.com/apache/hive/blob/0cbf45cfc046f39bed4533ab83542002e79b4f5b/llap-server/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapTaskCommunicator.java",
                "raw_url": "https://github.com/apache/hive/raw/0cbf45cfc046f39bed4533ab83542002e79b4f5b/llap-server/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapTaskCommunicator.java",
                "status": "added",
                "changes": 100,
                "additions": 100,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/llap-server/src/test/org/apache/hadoop/hive/llap/tezplugins/TestLlapTaskCommunicator.java?ref=0cbf45cfc046f39bed4533ab83542002e79b4f5b",
                "patch": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.llap.tezplugins;\n+\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+\n+import org.apache.hadoop.hive.llap.LlapNodeId;\n+import org.apache.hadoop.yarn.api.records.ContainerId;\n+import org.apache.tez.dag.records.TezTaskAttemptID;\n+import org.junit.Test;\n+\n+public class TestLlapTaskCommunicator {\n+\n+  @Test (timeout = 5000)\n+  public void testEntityTracker1() {\n+    LlapTaskCommunicator.EntityTracker entityTracker = new LlapTaskCommunicator.EntityTracker();\n+\n+    String host1 = \"host1\";\n+    String host2 = \"host2\";\n+    String host3 = \"host3\";\n+    int port = 1451;\n+\n+\n+    // Simple container registration and un-registration without any task attempt being involved.\n+    ContainerId containerId101 = constructContainerId(101);\n+    entityTracker.registerContainer(containerId101, host1, port);\n+    assertEquals(LlapNodeId.getInstance(host1, port), entityTracker.getNodeIdForContainer(containerId101));\n+\n+    entityTracker.unregisterContainer(containerId101);\n+    assertNull(entityTracker.getContainerAttemptMapForNode(LlapNodeId.getInstance(host1, port)));\n+    assertNull(entityTracker.getNodeIdForContainer(containerId101));\n+    assertEquals(0, entityTracker.nodeMap.size());\n+    assertEquals(0, entityTracker.attemptToNodeMap.size());\n+    assertEquals(0, entityTracker.containerToNodeMap.size());\n+\n+\n+    // Simple task registration and un-registration.\n+    ContainerId containerId1 = constructContainerId(1);\n+    TezTaskAttemptID taskAttemptId1 = constructTaskAttemptId(1);\n+    entityTracker.registerTaskAttempt(containerId1, taskAttemptId1, host1, port);\n+    assertEquals(LlapNodeId.getInstance(host1, port), entityTracker.getNodeIdForContainer(containerId1));\n+    assertEquals(LlapNodeId.getInstance(host1, port), entityTracker.getNodeIdForTaskAttempt(taskAttemptId1));\n+\n+    entityTracker.unregisterTaskAttempt(taskAttemptId1);\n+    assertNull(entityTracker.getContainerAttemptMapForNode(LlapNodeId.getInstance(host1, port)));\n+    assertNull(entityTracker.getNodeIdForContainer(containerId1));\n+    assertNull(entityTracker.getNodeIdForTaskAttempt(taskAttemptId1));\n+    assertEquals(0, entityTracker.nodeMap.size());\n+    assertEquals(0, entityTracker.attemptToNodeMap.size());\n+    assertEquals(0, entityTracker.containerToNodeMap.size());\n+\n+    // Register taskAttempt, unregister container. TaskAttempt should also be unregistered\n+    ContainerId containerId201 = constructContainerId(201);\n+    TezTaskAttemptID taskAttemptId201 = constructTaskAttemptId(201);\n+    entityTracker.registerTaskAttempt(containerId201, taskAttemptId201, host1, port);\n+    assertEquals(LlapNodeId.getInstance(host1, port), entityTracker.getNodeIdForContainer(containerId201));\n+    assertEquals(LlapNodeId.getInstance(host1, port), entityTracker.getNodeIdForTaskAttempt(taskAttemptId201));\n+\n+    entityTracker.unregisterContainer(containerId201);\n+    assertNull(entityTracker.getContainerAttemptMapForNode(LlapNodeId.getInstance(host1, port)));\n+    assertNull(entityTracker.getNodeIdForContainer(containerId201));\n+    assertNull(entityTracker.getNodeIdForTaskAttempt(taskAttemptId201));\n+    assertEquals(0, entityTracker.nodeMap.size());\n+    assertEquals(0, entityTracker.attemptToNodeMap.size());\n+    assertEquals(0, entityTracker.containerToNodeMap.size());\n+\n+    entityTracker.unregisterTaskAttempt(taskAttemptId201); // No errors\n+  }\n+\n+\n+  private ContainerId constructContainerId(int id) {\n+    ContainerId containerId = mock(ContainerId.class);\n+    doReturn(id).when(containerId).getId();\n+    doReturn((long)id).when(containerId).getContainerId();\n+    return containerId;\n+  }\n+\n+  private TezTaskAttemptID constructTaskAttemptId(int id) {\n+    TezTaskAttemptID taskAttemptId = mock(TezTaskAttemptID.class);\n+    doReturn(id).when(taskAttemptId).getId();\n+    return taskAttemptId;\n+  }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "LlapTaskCommunicator.java",
            "LlapDaemonProtocolClientProxy.java"
        ],
        "unit_tests": [
            "TestLlapDaemonProtocolClientProxy.java",
            "TestLlapTaskCommunicator.java"
        ]
    },
    "hive_72c9d36": {
        "repo": "hive",
        "message": "HIVE-7210: NPE with \"No plan file found\" when running Driver instances on multiple threads (Jason Dere, reviewed by Gunther Hagleitner/Vikram Dixit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1603344 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/72c9d3616f9ca836bc4fd6f2addf0edf7799cd46",
        "parent": "https://github.com/apache/hive/commit/cd05b4c1c4738e8e575ffbe6d542bb93ef626361",
        "bug_id": "hive_72c9d36",
        "file": [
            {
                "sha": "5e5cf97c7b8fefb204e45028af8bf1003437d25a",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "blob_url": "https://github.com/apache/hive/blob/72c9d3616f9ca836bc4fd6f2addf0edf7799cd46/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "raw_url": "https://github.com/apache/hive/raw/72c9d3616f9ca836bc4fd6f2addf0edf7799cd46/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "status": "modified",
                "changes": 23,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java?ref=72c9d3616f9ca836bc4fd6f2addf0edf7799cd46",
                "patch": "@@ -242,7 +242,7 @@ public static void clearWork(Configuration conf) {\n     Path reducePath = getPlanPath(conf, REDUCE_PLAN_NAME);\n \n     // if the plan path hasn't been initialized just return, nothing to clean.\n-    if (mapPath == null || reducePath == null) {\n+    if (mapPath == null && reducePath == null) {\n       return;\n     }\n \n@@ -260,12 +260,7 @@ public static void clearWork(Configuration conf) {\n     } finally {\n       // where a single process works with multiple plans - we must clear\n       // the cache before working with the next plan.\n-      if (mapPath != null) {\n-        gWorkMap.remove(mapPath);\n-      }\n-      if (reducePath != null) {\n-        gWorkMap.remove(reducePath);\n-      }\n+      clearWorkMapForConf(conf);\n     }\n   }\n \n@@ -3314,7 +3309,19 @@ public static boolean isVectorMode(Configuration conf) {\n     return false;\n   }\n \n-    public static void clearWorkMap() {\n+  public static void clearWorkMapForConf(Configuration conf) {\n+    // Remove cached query plans for the current query only\n+    Path mapPath = getPlanPath(conf, MAP_PLAN_NAME);\n+    Path reducePath = getPlanPath(conf, REDUCE_PLAN_NAME);\n+    if (mapPath != null) {\n+      gWorkMap.remove(mapPath);\n+    }\n+    if (reducePath != null) {\n+      gWorkMap.remove(reducePath);\n+    }\n+  }\n+\n+  public static void clearWorkMap() {\n     gWorkMap.clear();\n   }\n ",
                "deletions": 8
            },
            {
                "sha": "61cc874dfebd8982fd5057371d605e8233b6ca79",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/HiveInputFormat.java",
                "blob_url": "https://github.com/apache/hive/blob/72c9d3616f9ca836bc4fd6f2addf0edf7799cd46/ql/src/java/org/apache/hadoop/hive/ql/io/HiveInputFormat.java",
                "raw_url": "https://github.com/apache/hive/raw/72c9d3616f9ca836bc4fd6f2addf0edf7799cd46/ql/src/java/org/apache/hadoop/hive/ql/io/HiveInputFormat.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/HiveInputFormat.java?ref=72c9d3616f9ca836bc4fd6f2addf0edf7799cd46",
                "patch": "@@ -393,7 +393,7 @@ private void addSplitsForGroup(List<Path> dirs, TableScanOperator tableScan, Job\n           currentTable, result);\n     }\n \n-    Utilities.clearWorkMap();\n+    Utilities.clearWorkMapForConf(job);\n     LOG.info(\"number of splits \" + result.size());\n     perfLogger.PerfLogEnd(CLASS_NAME, PerfLogger.GET_SPLITS);\n     return result.toArray(new HiveInputSplit[result.size()]);",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Utilities.java"
        ],
        "unit_tests": [
            "TestUtilities.java"
        ]
    },
    "hive_90fabf1": {
        "repo": "hive",
        "message": "HIVE-5950: ORC SARG creation fails with NPE for predicate conditions with decimal/date/char/varchar datatypes (Prasanth J via Gunther Hagleitner)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1574237 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/90fabf185f264508afd329d9e0bf847fc9ae19f1",
        "parent": "https://github.com/apache/hive/commit/c192ecbb3e28610a46a0ecea6ba677ad0e467c3a",
        "bug_id": "hive_90fabf1",
        "file": [
            {
                "sha": "a425a01f0831218199fcad008855dd4d149996bc",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.java",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.java",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.java?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -848,10 +848,10 @@ private boolean isStripeSatisfyPredicate(StripeStatistics stripeStatistics,\n \n             // column statistics at index 0 contains only the number of rows\n             ColumnStatistics stats = stripeStatistics.getColumnStatistics()[filterColumns[pred] + 1];\n-            Object minValue = getMin(stats);\n-            Object maxValue = getMax(stats);\n-            truthValues[pred] = RecordReaderImpl.evaluatePredicateRange(predLeaves.get(pred),\n-                minValue, maxValue);\n+            Object minValue = RecordReaderImpl.getMin(stats);\n+            Object maxValue = RecordReaderImpl.getMax(stats);\n+            PredicateLeaf predLeaf = predLeaves.get(pred);\n+            truthValues[pred] = RecordReaderImpl.evaluatePredicateRange(predLeaf, minValue, maxValue);\n           } else {\n \n             // parition column case.",
                "deletions": 4
            },
            {
                "sha": "cfa78cb5f45f065e233b13b4fb880bd8f49e8662",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java",
                "status": "modified",
                "changes": 148,
                "additions": 99,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/orc/RecordReaderImpl.java?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -31,16 +31,25 @@\n import java.util.TreeMap;\n \n import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.FSDataInputStream;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.common.type.HiveChar;\n import org.apache.hadoop.hive.common.type.HiveDecimal;\n import org.apache.hadoop.hive.conf.HiveConf;\n import static org.apache.hadoop.hive.conf.HiveConf.ConfVars.HIVE_ORC_ZEROCOPY;\n import org.apache.hadoop.hive.ql.exec.vector.*;\n+import org.apache.hadoop.hive.common.type.HiveVarchar;\n+import org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\n+import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;\n+import org.apache.hadoop.hive.ql.exec.vector.DecimalColumnVector;\n+import org.apache.hadoop.hive.ql.exec.vector.DoubleColumnVector;\n+import org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\n+import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n import org.apache.hadoop.hive.ql.io.sarg.PredicateLeaf;\n import org.apache.hadoop.hive.ql.io.sarg.SearchArgument;\n import org.apache.hadoop.hive.ql.io.sarg.SearchArgument.TruthValue;\n@@ -2165,57 +2174,47 @@ private static TreeReader createTreeReader(Path path,\n   }\n \n   /**\n-   * Get the minimum value out of an index entry.\n-   * @param index the index entry\n-   * @return the object for the minimum value or null if there isn't one\n+   * Get the maximum value out of an index entry.\n+   * @param index\n+   *          the index entry\n+   * @return the object for the maximum value or null if there isn't one\n    */\n-  static Object getMin(OrcProto.ColumnStatistics index) {\n-    if (index.hasIntStatistics()) {\n-      OrcProto.IntegerStatistics stat = index.getIntStatistics();\n-      if (stat.hasMinimum()) {\n-        return stat.getMinimum();\n-      }\n-    }\n-    if (index.hasStringStatistics()) {\n-      OrcProto.StringStatistics stat = index.getStringStatistics();\n-      if (stat.hasMinimum()) {\n-        return stat.getMinimum();\n-      }\n-    }\n-    if (index.hasDoubleStatistics()) {\n-      OrcProto.DoubleStatistics stat = index.getDoubleStatistics();\n-      if (stat.hasMinimum()) {\n-        return stat.getMinimum();\n-      }\n+  static Object getMax(ColumnStatistics index) {\n+    if (index instanceof IntegerColumnStatistics) {\n+      return ((IntegerColumnStatistics) index).getMaximum();\n+    } else if (index instanceof DoubleColumnStatistics) {\n+      return ((DoubleColumnStatistics) index).getMaximum();\n+    } else if (index instanceof StringColumnStatistics) {\n+      return ((StringColumnStatistics) index).getMaximum();\n+    } else if (index instanceof DateColumnStatistics) {\n+      return ((DateColumnStatistics) index).getMaximum();\n+    } else if (index instanceof DecimalColumnStatistics) {\n+      return ((DecimalColumnStatistics) index).getMaximum();\n+    } else {\n+      return null;\n     }\n-    return null;\n   }\n \n   /**\n-   * Get the maximum value out of an index entry.\n-   * @param index the index entry\n-   * @return the object for the maximum value or null if there isn't one\n+   * Get the minimum value out of an index entry.\n+   * @param index\n+   *          the index entry\n+   * @return the object for the minimum value or null if there isn't one\n    */\n-  static Object getMax(OrcProto.ColumnStatistics index) {\n-    if (index.hasIntStatistics()) {\n-      OrcProto.IntegerStatistics stat = index.getIntStatistics();\n-      if (stat.hasMaximum()) {\n-        return stat.getMaximum();\n-      }\n-    }\n-    if (index.hasStringStatistics()) {\n-      OrcProto.StringStatistics stat = index.getStringStatistics();\n-      if (stat.hasMaximum()) {\n-        return stat.getMaximum();\n-      }\n-    }\n-    if (index.hasDoubleStatistics()) {\n-      OrcProto.DoubleStatistics stat = index.getDoubleStatistics();\n-      if (stat.hasMaximum()) {\n-        return stat.getMaximum();\n-      }\n+  static Object getMin(ColumnStatistics index) {\n+    if (index instanceof IntegerColumnStatistics) {\n+      return ((IntegerColumnStatistics) index).getMinimum();\n+    } else if (index instanceof DoubleColumnStatistics) {\n+      return ((DoubleColumnStatistics) index).getMinimum();\n+    } else if (index instanceof StringColumnStatistics) {\n+      return ((StringColumnStatistics) index).getMinimum();\n+    } else if (index instanceof DateColumnStatistics) {\n+      return ((DateColumnStatistics) index).getMinimum();\n+    } else if (index instanceof DecimalColumnStatistics) {\n+      return ((DecimalColumnStatistics) index).getMinimum();\n+    } else {\n+      return null;\n     }\n-    return null;\n   }\n \n   /**\n@@ -2228,7 +2227,8 @@ static Object getMax(OrcProto.ColumnStatistics index) {\n    */\n   static TruthValue evaluatePredicate(OrcProto.ColumnStatistics index,\n                                PredicateLeaf predicate) {\n-    Object minValue = getMin(index);\n+    ColumnStatistics cs = ColumnStatisticsImpl.deserialize(index);\n+    Object minValue = getMin(cs);\n     // if we didn't have any values, everything must have been null\n     if (minValue == null) {\n       if (predicate.getOperator() == PredicateLeaf.Operator.IS_NULL) {\n@@ -2237,13 +2237,20 @@ static TruthValue evaluatePredicate(OrcProto.ColumnStatistics index,\n         return TruthValue.NULL;\n       }\n     }\n-    Object maxValue = getMax(index);\n+    Object maxValue = getMax(cs);\n     return evaluatePredicateRange(predicate, minValue, maxValue);\n   }\n \n-  static TruthValue evaluatePredicateRange(PredicateLeaf predicate, Object minValue,\n-      Object maxValue) {\n+  static TruthValue evaluatePredicateRange(PredicateLeaf predicate, Object min,\n+      Object max) {\n     Location loc;\n+\n+    // column statistics for char/varchar columns are stored as strings, so convert char/varchar\n+    // type predicates to string\n+    Object predObj = predicate.getLiteral();\n+    Object minValue = getPrimitiveObject(predObj, min);\n+    Object maxValue = getPrimitiveObject(predObj, max);\n+\n     switch (predicate.getOperator()) {\n       case NULL_SAFE_EQUALS:\n         loc = compareToRange((Comparable) predicate.getLiteral(),\n@@ -2288,6 +2295,8 @@ static TruthValue evaluatePredicateRange(PredicateLeaf predicate, Object minValu\n           // for a single value, look through to see if that value is in the\n           // set\n           for(Object arg: predicate.getLiteralList()) {\n+            minValue = getPrimitiveObject(arg, min);\n+            maxValue = getPrimitiveObject(arg, max);\n             loc = compareToRange((Comparable) arg, minValue, maxValue);\n             if (loc == Location.MIN) {\n               return TruthValue.YES_NULL;\n@@ -2297,6 +2306,8 @@ static TruthValue evaluatePredicateRange(PredicateLeaf predicate, Object minValu\n         } else {\n           // are all of the values outside of the range?\n           for(Object arg: predicate.getLiteralList()) {\n+            minValue = getPrimitiveObject(arg, min);\n+            maxValue = getPrimitiveObject(arg, max);\n             loc = compareToRange((Comparable) arg, minValue, maxValue);\n             if (loc == Location.MIN || loc == Location.MIDDLE ||\n                 loc == Location.MAX) {\n@@ -2307,9 +2318,16 @@ static TruthValue evaluatePredicateRange(PredicateLeaf predicate, Object minValu\n         }\n       case BETWEEN:\n         List<Object> args = predicate.getLiteralList();\n+        minValue = getPrimitiveObject(args.get(0), min);\n+        maxValue = getPrimitiveObject(args.get(0), max);\n+\n         loc = compareToRange((Comparable) args.get(0), minValue, maxValue);\n         if (loc == Location.BEFORE || loc == Location.MIN) {\n-          Location loc2 = compareToRange((Comparable) args.get(1), minValue,\n+          Object predObj2 = args.get(1);\n+          minValue = getPrimitiveObject(predObj2, min);\n+          maxValue = getPrimitiveObject(predObj2, max);\n+\n+          Location loc2 = compareToRange((Comparable) predObj2, minValue,\n               maxValue);\n           if (loc2 == Location.AFTER || loc2 == Location.MAX) {\n             return TruthValue.YES_NULL;\n@@ -2330,6 +2348,38 @@ static TruthValue evaluatePredicateRange(PredicateLeaf predicate, Object minValu\n     }\n   }\n \n+  private static Object getPrimitiveObject(Object predObj, Object obj) {\n+    if (obj instanceof DateWritable) {\n+      DateWritable dobj = (DateWritable) obj;\n+      if (predObj instanceof String || predObj instanceof HiveChar\n+          || predObj instanceof HiveVarchar) {\n+        return dobj.toString();\n+      }\n+    } else if (obj instanceof HiveDecimal) {\n+      HiveDecimal hdObj = (HiveDecimal) obj;\n+      if (predObj instanceof Float) {\n+        return hdObj.floatValue();\n+      } else if (predObj instanceof Double) {\n+        return hdObj.doubleValue();\n+      } else if (predObj instanceof Short) {\n+        return hdObj.shortValue();\n+      } else if (predObj instanceof Integer) {\n+        return hdObj.intValue();\n+      } else if (predObj instanceof Long) {\n+        return hdObj.longValue();\n+      } else if (predObj instanceof String || predObj instanceof HiveChar\n+          || predObj instanceof HiveVarchar) {\n+        // primitive type of char/varchar is Text (i.e trailing white spaces trimmed string)\n+        return StringUtils.stripEnd(hdObj.toString(), null);\n+      }\n+    } else if (obj instanceof String || obj instanceof HiveChar || obj instanceof HiveVarchar) {\n+      // primitive type of char/varchar is Text (i.e trailing white spaces trimmed string)\n+      return StringUtils.stripEnd(obj.toString(), null);\n+    }\n+\n+    return obj;\n+  }\n+\n   /**\n    * Pick the row groups that we need to load from the current stripe.\n    * @return an array with a boolean for each row group or null if all of the",
                "deletions": 49
            },
            {
                "sha": "922b99f9331aa048c4b9990f428a8ed0aa991eab",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/sarg/PredicateLeaf.java",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/java/org/apache/hadoop/hive/ql/io/sarg/PredicateLeaf.java",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/java/org/apache/hadoop/hive/ql/io/sarg/PredicateLeaf.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/sarg/PredicateLeaf.java?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -45,7 +45,11 @@\n   public static enum Type {\n     INTEGER, // all of the integer types\n     FLOAT,   // float and double\n-    STRING\n+    STRING,\n+    DATE,\n+    DECIMAL,\n+    CHAR,\n+    VARCHAR\n   }\n \n   /**",
                "deletions": 1
            },
            {
                "sha": "4f26d3fade609d7e906ff54fa842551ce3dcd20b",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -283,11 +283,19 @@ Operator getOperator() {\n           case INT:\n           case LONG:\n             return PredicateLeaf.Type.INTEGER;\n+          case CHAR:\n+            return PredicateLeaf.Type.CHAR;\n+          case VARCHAR:\n+            return PredicateLeaf.Type.VARCHAR;\n           case STRING:\n             return PredicateLeaf.Type.STRING;\n           case FLOAT:\n           case DOUBLE:\n             return PredicateLeaf.Type.FLOAT;\n+          case DATE:\n+            return PredicateLeaf.Type.DATE;\n+          case DECIMAL:\n+            return PredicateLeaf.Type.DECIMAL;\n           default:\n         }\n       }",
                "deletions": 0
            },
            {
                "sha": "3595e0516f456135dd3e21bbc3a18469bd91cf71",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestRecordReaderImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestRecordReaderImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestRecordReaderImpl.java",
                "status": "modified",
                "changes": 287,
                "additions": 253,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/io/orc/TestRecordReaderImpl.java?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -18,21 +18,21 @@\n \n package org.apache.hadoop.hive.ql.io.orc;\n \n-import org.apache.hadoop.hive.ql.io.sarg.PredicateLeaf;\n-import org.apache.hadoop.hive.ql.io.sarg.SearchArgument.TruthValue;\n-import org.apache.hadoop.hive.ql.io.sarg.TestSearchArgumentImpl;\n-import org.junit.Test;\n-\n-import org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.Location;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n import static junit.framework.Assert.assertEquals;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.hadoop.hive.common.type.HiveDecimal;\n+import org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.Location;\n+import org.apache.hadoop.hive.ql.io.sarg.PredicateLeaf;\n+import org.apache.hadoop.hive.ql.io.sarg.SearchArgument.TruthValue;\n+import org.apache.hadoop.hive.ql.io.sarg.TestSearchArgumentImpl;\n+import org.junit.Test;\n+\n public class TestRecordReaderImpl {\n \n   @Test\n@@ -75,26 +75,45 @@ public void testCompareToRangeString() throws Exception {\n         RecordReaderImpl.compareToRange(\"c\", \"b\", \"b\"));\n   }\n \n+  @Test\n+  public void testCompareToCharNeedConvert() throws Exception {\n+    assertEquals(Location.BEFORE,\n+        RecordReaderImpl.compareToRange(\"apple\", \"hello\", \"world\"));\n+    assertEquals(Location.AFTER,\n+        RecordReaderImpl.compareToRange(\"zombie\", \"hello\", \"world\"));\n+    assertEquals(Location.MIN,\n+        RecordReaderImpl.compareToRange(\"hello\", \"hello\", \"world\"));\n+    assertEquals(Location.MIDDLE,\n+        RecordReaderImpl.compareToRange(\"pilot\", \"hello\", \"world\"));\n+    assertEquals(Location.MAX,\n+        RecordReaderImpl.compareToRange(\"world\", \"hello\", \"world\"));\n+    assertEquals(Location.BEFORE,\n+        RecordReaderImpl.compareToRange(\"apple\", \"hello\", \"hello\"));\n+    assertEquals(Location.MIN,\n+        RecordReaderImpl.compareToRange(\"hello\", \"hello\", \"hello\"));\n+    assertEquals(Location.AFTER,\n+        RecordReaderImpl.compareToRange(\"zombie\", \"hello\", \"hello\"));\n+  }\n+\n   @Test\n   public void testGetMin() throws Exception {\n-    assertEquals(null, RecordReaderImpl.getMin(createIntStats(null, null)));\n-    assertEquals(10L, RecordReaderImpl.getMin(createIntStats(10L, 100L)));\n-    assertEquals(null, RecordReaderImpl.getMin(\n-        OrcProto.ColumnStatistics.newBuilder()\n-            .setDoubleStatistics(OrcProto.DoubleStatistics.newBuilder().build())\n-            .build()));\n-    assertEquals(10.0d, RecordReaderImpl.getMin(\n+    assertEquals(10L, RecordReaderImpl.getMin(ColumnStatisticsImpl.deserialize(createIntStats(10L, 100L))));\n+    assertEquals(10.0d, RecordReaderImpl.getMin(ColumnStatisticsImpl.deserialize(\n         OrcProto.ColumnStatistics.newBuilder()\n             .setDoubleStatistics(OrcProto.DoubleStatistics.newBuilder()\n-                .setMinimum(10.0d).setMaximum(100.0d).build()).build()));\n-    assertEquals(null, RecordReaderImpl.getMin(\n+                .setMinimum(10.0d).setMaximum(100.0d).build()).build())));\n+    assertEquals(null, RecordReaderImpl.getMin(ColumnStatisticsImpl.deserialize(\n         OrcProto.ColumnStatistics.newBuilder()\n             .setStringStatistics(OrcProto.StringStatistics.newBuilder().build())\n-            .build()));\n-    assertEquals(\"a\", RecordReaderImpl.getMin(\n+            .build())));\n+    assertEquals(\"a\", RecordReaderImpl.getMin(ColumnStatisticsImpl.deserialize(\n         OrcProto.ColumnStatistics.newBuilder()\n             .setStringStatistics(OrcProto.StringStatistics.newBuilder()\n-                .setMinimum(\"a\").setMaximum(\"b\").build()).build()));\n+                .setMinimum(\"a\").setMaximum(\"b\").build()).build())));\n+    assertEquals(\"hello\", RecordReaderImpl.getMin(ColumnStatisticsImpl\n+        .deserialize(createStringStats(\"hello\", \"world\"))));\n+    assertEquals(HiveDecimal.create(\"111.1\"), RecordReaderImpl.getMin(ColumnStatisticsImpl\n+        .deserialize(createDecimalStats(\"111.1\", \"112.1\"))));\n   }\n \n   private static OrcProto.ColumnStatistics createIntStats(Long min,\n@@ -111,26 +130,39 @@ public void testGetMin() throws Exception {\n         .setIntStatistics(intStats.build()).build();\n   }\n \n+  private static OrcProto.ColumnStatistics createStringStats(String min, String max) {\n+    OrcProto.StringStatistics.Builder strStats = OrcProto.StringStatistics.newBuilder();\n+    strStats.setMinimum(min);\n+    strStats.setMaximum(max);\n+    return OrcProto.ColumnStatistics.newBuilder().setStringStatistics(strStats.build()).build();\n+  }\n+\n+  private static OrcProto.ColumnStatistics createDecimalStats(String min, String max) {\n+    OrcProto.DecimalStatistics.Builder decStats = OrcProto.DecimalStatistics.newBuilder();\n+    decStats.setMinimum(min);\n+    decStats.setMaximum(max);\n+    return OrcProto.ColumnStatistics.newBuilder().setDecimalStatistics(decStats.build()).build();\n+  }\n+\n   @Test\n   public void testGetMax() throws Exception {\n-    assertEquals(null, RecordReaderImpl.getMax(createIntStats(null, null)));\n-    assertEquals(100L, RecordReaderImpl.getMax(createIntStats(10L, 100L)));\n-    assertEquals(null, RecordReaderImpl.getMax(\n-        OrcProto.ColumnStatistics.newBuilder()\n-            .setDoubleStatistics(OrcProto.DoubleStatistics.newBuilder().build())\n-            .build()));\n-    assertEquals(100.0d, RecordReaderImpl.getMax(\n+    assertEquals(100L, RecordReaderImpl.getMax(ColumnStatisticsImpl.deserialize(createIntStats(10L, 100L))));\n+    assertEquals(100.0d, RecordReaderImpl.getMax(ColumnStatisticsImpl.deserialize(\n         OrcProto.ColumnStatistics.newBuilder()\n             .setDoubleStatistics(OrcProto.DoubleStatistics.newBuilder()\n-                .setMinimum(10.0d).setMaximum(100.0d).build()).build()));\n-    assertEquals(null, RecordReaderImpl.getMax(\n+                .setMinimum(10.0d).setMaximum(100.0d).build()).build())));\n+    assertEquals(null, RecordReaderImpl.getMax(ColumnStatisticsImpl.deserialize(\n         OrcProto.ColumnStatistics.newBuilder()\n             .setStringStatistics(OrcProto.StringStatistics.newBuilder().build())\n-            .build()));\n-    assertEquals(\"b\", RecordReaderImpl.getMax(\n+            .build())));\n+    assertEquals(\"b\", RecordReaderImpl.getMax(ColumnStatisticsImpl.deserialize(\n         OrcProto.ColumnStatistics.newBuilder()\n             .setStringStatistics(OrcProto.StringStatistics.newBuilder()\n-                .setMinimum(\"a\").setMaximum(\"b\").build()).build()));\n+                .setMinimum(\"a\").setMaximum(\"b\").build()).build())));\n+    assertEquals(\"world\", RecordReaderImpl.getMax(ColumnStatisticsImpl\n+        .deserialize(createStringStats(\"hello\", \"world\"))));\n+    assertEquals(HiveDecimal.create(\"112.1\"), RecordReaderImpl.getMax(ColumnStatisticsImpl\n+        .deserialize(createDecimalStats(\"111.1\", \"112.1\"))));\n   }\n \n   @Test\n@@ -150,6 +182,37 @@ public void testEquals() throws Exception {\n         RecordReaderImpl.evaluatePredicate(createIntStats(0L, 10L), pred));\n     assertEquals(TruthValue.YES_NULL,\n         RecordReaderImpl.evaluatePredicate(createIntStats(15L, 15L), pred));\n+\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.EQUALS,\n+        PredicateLeaf.Type.CHAR, \"x\", \"b\", null);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n+\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.EQUALS,\n+        PredicateLeaf.Type.VARCHAR, \"x\", \"b\", null);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n+\n   }\n \n   @Test\n@@ -169,6 +232,36 @@ public void testNullSafeEquals() throws Exception {\n         RecordReaderImpl.evaluatePredicate(createIntStats(0L, 10L), pred));\n     assertEquals(TruthValue.YES_NO,\n         RecordReaderImpl.evaluatePredicate(createIntStats(15L, 15L), pred));\n+\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.NULL_SAFE_EQUALS,\n+        PredicateLeaf.Type.CHAR, \"x\", \"hello\", null);\n+    assertEquals(TruthValue.NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"world\", \"zombie\"), pred));\n+    assertEquals(TruthValue.YES_NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"hello\", \"zombie\"), pred));\n+    assertEquals(TruthValue.YES_NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"apple\", \"zombie\"), pred));\n+    assertEquals(TruthValue.YES_NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"apple\", \"hello\"), pred));\n+    assertEquals(TruthValue.NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"apple\", \"banana\"), pred));\n+    assertEquals(TruthValue.YES_NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"hello\", \"hello\"), pred));\n+\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.NULL_SAFE_EQUALS,\n+        PredicateLeaf.Type.VARCHAR, \"x\", \"hello\", null);\n+    assertEquals(TruthValue.NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"world\", \"zombie\"), pred));\n+    assertEquals(TruthValue.YES_NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"hello\", \"zombie\"), pred));\n+    assertEquals(TruthValue.YES_NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"apple\", \"zombie\"), pred));\n+    assertEquals(TruthValue.YES_NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"apple\", \"hello\"), pred));\n+    assertEquals(TruthValue.NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"apple\", \"banana\"), pred));\n+    assertEquals(TruthValue.YES_NO,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"hello\", \"hello\"), pred));\n   }\n \n   @Test\n@@ -186,6 +279,36 @@ public void testLessThan() throws Exception {\n         RecordReaderImpl.evaluatePredicate(createIntStats(10L, 15L), lessThan));\n     assertEquals(TruthValue.YES_NULL,\n         RecordReaderImpl.evaluatePredicate(createIntStats(0L, 10L), lessThan));\n+\n+    PredicateLeaf pred = TestSearchArgumentImpl.createPredicateLeaf(\n+        PredicateLeaf.Operator.LESS_THAN, PredicateLeaf.Type.CHAR, \"x\", \"b\", null);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n+\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.LESS_THAN,\n+        PredicateLeaf.Type.VARCHAR, \"x\", \"b\", null);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n   }\n \n   @Test\n@@ -203,6 +326,36 @@ public void testLessThanEquals() throws Exception {\n         RecordReaderImpl.evaluatePredicate(createIntStats(10L, 15L), pred));\n     assertEquals(TruthValue.YES_NULL,\n         RecordReaderImpl.evaluatePredicate(createIntStats(0L, 10L), pred));\n+\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.LESS_THAN_EQUALS,\n+        PredicateLeaf.Type.CHAR, \"x\", \"b\", null);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n+\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.LESS_THAN_EQUALS,\n+        PredicateLeaf.Type.VARCHAR, \"x\", \"b\", null);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n   }\n \n   @Test\n@@ -221,6 +374,39 @@ public void testIn() throws Exception {\n         RecordReaderImpl.evaluatePredicate(createIntStats(10L, 30L), pred));\n     assertEquals(TruthValue.NO_NULL,\n         RecordReaderImpl.evaluatePredicate(createIntStats(12L, 18L), pred));\n+\n+    args.clear();\n+    args.add(\"a\");\n+    args.add(\"b\");\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.IN,\n+        PredicateLeaf.Type.CHAR, \"x\", null, args);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n+\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.IN,\n+        PredicateLeaf.Type.VARCHAR, \"x\", null, args);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n   }\n \n   @Test\n@@ -245,6 +431,39 @@ public void testBetween() throws Exception {\n         RecordReaderImpl.evaluatePredicate(createIntStats(10L, 20L), pred));\n     assertEquals(TruthValue.YES_NULL,\n         RecordReaderImpl.evaluatePredicate(createIntStats(12L, 18L), pred));\n+\n+    args.clear();\n+    args.add(\"a\");\n+    args.add(\"b\");\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.BETWEEN,\n+        PredicateLeaf.Type.CHAR, \"x\", null, args);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n+\n+    pred = TestSearchArgumentImpl.createPredicateLeaf(PredicateLeaf.Operator.BETWEEN,\n+        PredicateLeaf.Type.VARCHAR, \"x\", null, args);\n+    assertEquals(TruthValue.NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"c\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"d\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"b\"), pred));\n+    assertEquals(TruthValue.YES_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"a\", \"a\"), pred));\n+    assertEquals(TruthValue.YES_NO_NULL,\n+        RecordReaderImpl.evaluatePredicate(createStringStats(\"b\", \"b\"), pred));\n   }\n \n   @Test",
                "deletions": 34
            },
            {
                "sha": "1f5f54ae19ee8035505d5aaf264fded6c82b7514",
                "filename": "ql/src/test/queries/clientpositive/orc_ppd_char.q",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/queries/clientpositive/orc_ppd_char.q",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/queries/clientpositive/orc_ppd_char.q",
                "status": "added",
                "changes": 76,
                "additions": 76,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/orc_ppd_char.q?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -0,0 +1,76 @@\n+SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\n+SET mapred.min.split.size=1000;\n+SET mapred.max.split.size=5000;\n+\n+create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\"); \n+\n+insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl;\n+\n+set hive.optimize.index.filter=false;\n+\n+-- char data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where c=\"apple\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c=\"apple\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c!=\"apple\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c!=\"apple\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c<\"hello\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c<\"hello\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c<=\"hello\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c<=\"hello\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c=\"apple \";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c=\"apple \";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c in (\"apple\", \"carrot\");\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c in (\"apple\", \"carrot\");\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c in (\"apple\", \"hello\");\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c in (\"apple\", \"hello\");\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c in (\"carrot\");\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c in (\"carrot\");\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c between \"apple\" and \"carrot\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c between \"apple\" and \"carrot\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c between \"apple\" and \"zombie\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c between \"apple\" and \"zombie\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where c between \"carrot\" and \"carrot1\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where c between \"carrot\" and \"carrot1\";\n+",
                "deletions": 0
            },
            {
                "sha": "c34be867e484f40dc074fd0579fa96bec40f7027",
                "filename": "ql/src/test/queries/clientpositive/orc_ppd_date.q",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/queries/clientpositive/orc_ppd_date.q",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/queries/clientpositive/orc_ppd_date.q",
                "status": "added",
                "changes": 97,
                "additions": 97,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/orc_ppd_date.q?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -0,0 +1,97 @@\n+SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\n+SET mapred.min.split.size=1000;\n+SET mapred.max.split.size=5000;\n+\n+create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\"); \n+\n+insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl;\n+\n+-- date data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where da='1970-02-20';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da='1970-02-20';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as date);\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as date);\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as varchar(20));\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as varchar(20));\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da!='1970-02-20';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da!='1970-02-20';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da<'1970-02-27';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da<'1970-02-27';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da<'1970-02-29';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da<'1970-02-29';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da<'1970-02-15';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da<'1970-02-15';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da<='1970-02-20';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da<='1970-02-20';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da<='1970-02-27';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da<='1970-02-27';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-27' as date));\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-27' as date));\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da in (cast('1970-02-20' as date), cast('1970-02-27' as date));\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da in (cast('1970-02-20' as date), cast('1970-02-27' as date));\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-22' as date));\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-22' as date));\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-22';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-22';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-28';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-28';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where da between '1970-02-18' and '1970-02-19';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where da between '1970-02-18' and '1970-02-19';",
                "deletions": 0
            },
            {
                "sha": "a93590eacca01b2d752303eda2a1a8df6caacb47",
                "filename": "ql/src/test/queries/clientpositive/orc_ppd_decimal.q",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/queries/clientpositive/orc_ppd_decimal.q",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/queries/clientpositive/orc_ppd_decimal.q",
                "status": "added",
                "changes": 151,
                "additions": 151,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/orc_ppd_decimal.q?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -0,0 +1,151 @@\n+SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\n+SET mapred.min.split.size=1000;\n+SET mapred.max.split.size=5000;\n+\n+create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\"); \n+\n+insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl;\n+\n+-- decimal data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where d=0.22;\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d=0.22;\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d='0.22';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d='0.22';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d=cast('0.22' as float);\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d=cast('0.22' as float);\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d!=0.22;\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d!=0.22;\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d!='0.22';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d!='0.22';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d!=cast('0.22' as float);\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d!=cast('0.22' as float);\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d<11.22;\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d<11.22;\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d<'11.22';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d<'11.22';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d<cast('11.22' as float);\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d<cast('11.22' as float);\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d<1;\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d<1;\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d<=11.22;\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d<=11.22;\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d<='11.22';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d<='11.22';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d<=cast('11.22' as float);\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d<=cast('11.22' as float);\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d<=12;\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d<=12;\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d in ('0.22', '1.0');\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d in ('0.22', '1.0');\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d in ('0.22', '11.22');\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d in ('0.22', '11.22');\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d in ('0.9', '1.0');\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d in ('0.9', '1.0');\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22);\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22);\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22, cast('11.22' as float));\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22, cast('11.22' as float));\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d between 0 and 1;\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d between 0 and 1;\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d between 0 and 1000;\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d between 0 and 1000;\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d between 0 and '2.0';\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d between 0 and '2.0';\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d between 0 and cast(3 as float);\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d between 0 and cast(3 as float);\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where d between 1 and cast(30 as char(10));\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where d between 1 and cast(30 as char(10));",
                "deletions": 0
            },
            {
                "sha": "0fecc664e46db6bfdb8e1b270e3b016da68877ef",
                "filename": "ql/src/test/queries/clientpositive/orc_ppd_varchar.q",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/queries/clientpositive/orc_ppd_varchar.q",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/queries/clientpositive/orc_ppd_varchar.q",
                "status": "added",
                "changes": 76,
                "additions": 76,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/orc_ppd_varchar.q?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -0,0 +1,76 @@\n+SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\n+SET mapred.min.split.size=1000;\n+SET mapred.max.split.size=5000;\n+\n+create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\"); \n+\n+insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl;\n+\n+set hive.optimize.index.filter=false;\n+\n+-- varchar data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where v=\"bee\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v=\"bee\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v!=\"bee\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v!=\"bee\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v<\"world\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v<\"world\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v<=\"world\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v<=\"world\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v=\"bee   \";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v=\"bee   \";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v in (\"bee\", \"orange\");\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v in (\"bee\", \"orange\");\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v in (\"bee\", \"world\");\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v in (\"bee\", \"world\");\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v in (\"orange\");\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v in (\"orange\");\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v between \"bee\" and \"orange\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v between \"bee\" and \"orange\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v between \"bee\" and \"zombie\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v between \"bee\" and \"zombie\";\n+\n+set hive.optimize.index.filter=false;\n+select sum(hash(*)) from newtypesorc where v between \"orange\" and \"pine\";\n+\n+set hive.optimize.index.filter=true;\n+select sum(hash(*)) from newtypesorc where v between \"orange\" and \"pine\";\n+",
                "deletions": 0
            },
            {
                "sha": "6d92e09d942bc71f993875df0f84ac25f544a03a",
                "filename": "ql/src/test/results/clientpositive/orc_ppd_char.q.out",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/results/clientpositive/orc_ppd_char.q.out",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/results/clientpositive/orc_ppd_char.q.out",
                "status": "added",
                "changes": 307,
                "additions": 307,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/orc_ppd_char.q.out?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -0,0 +1,307 @@\n+PREHOOK: query: create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\")\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+POSTHOOK: query: create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\")\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@newtypesorc\n+PREHOOK: query: insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@src\n+PREHOOK: Output: default@newtypesorc\n+POSTHOOK: query: insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@newtypesorc\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+PREHOOK: query: -- char data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where c=\"apple\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: -- char data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where c=\"apple\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c=\"apple\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c=\"apple\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c!=\"apple\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c!=\"apple\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c!=\"apple\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c!=\"apple\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c<\"hello\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c<\"hello\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c<\"hello\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c<\"hello\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c<=\"hello\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c<=\"hello\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c<=\"hello\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c<=\"hello\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c=\"apple \"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c=\"apple \"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c=\"apple \"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c=\"apple \"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"apple\", \"carrot\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"apple\", \"carrot\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"apple\", \"carrot\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"apple\", \"carrot\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"apple\", \"hello\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"apple\", \"hello\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"apple\", \"hello\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"apple\", \"hello\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"carrot\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"carrot\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"carrot\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c in (\"carrot\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c between \"apple\" and \"carrot\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c between \"apple\" and \"carrot\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c between \"apple\" and \"carrot\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c between \"apple\" and \"carrot\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c between \"apple\" and \"zombie\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c between \"apple\" and \"zombie\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c between \"apple\" and \"zombie\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c between \"apple\" and \"zombie\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c between \"carrot\" and \"carrot1\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c between \"carrot\" and \"carrot1\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where c between \"carrot\" and \"carrot1\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where c between \"carrot\" and \"carrot1\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL",
                "deletions": 0
            },
            {
                "sha": "a3e5253d97a4be97876975a75c1e4d7fb87a42a0",
                "filename": "ql/src/test/results/clientpositive/orc_ppd_date.q.out",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/results/clientpositive/orc_ppd_date.q.out",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/results/clientpositive/orc_ppd_date.q.out",
                "status": "added",
                "changes": 411,
                "additions": 411,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/orc_ppd_date.q.out?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -0,0 +1,411 @@\n+PREHOOK: query: create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\")\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+POSTHOOK: query: create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\")\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@newtypesorc\n+PREHOOK: query: insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@src\n+PREHOOK: Output: default@newtypesorc\n+POSTHOOK: query: insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@newtypesorc\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+PREHOOK: query: -- date data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where da='1970-02-20'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: -- date data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where da='1970-02-20'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da='1970-02-20'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da='1970-02-20'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as date)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as date)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as date)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as date)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as varchar(20))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as varchar(20))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as varchar(20))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da=cast('1970-02-20' as varchar(20))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da!='1970-02-20'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da!='1970-02-20'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da!='1970-02-20'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da!='1970-02-20'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-27'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-27'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-27'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-27'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-29'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-29'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-29'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-29'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-15'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-15'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-15'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<'1970-02-15'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<='1970-02-20'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<='1970-02-20'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<='1970-02-20'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<='1970-02-20'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<='1970-02-27'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<='1970-02-27'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da<='1970-02-27'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da<='1970-02-27'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-27' as date))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-27' as date))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-27' as date))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-27' as date))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-20' as date), cast('1970-02-27' as date))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-20' as date), cast('1970-02-27' as date))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-20' as date), cast('1970-02-27' as date))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-20' as date), cast('1970-02-27' as date))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-22' as date))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-22' as date))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-22' as date))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da in (cast('1970-02-21' as date), cast('1970-02-22' as date))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-28'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-28'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-28'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-19' and '1970-02-28'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-18' and '1970-02-19'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-18' and '1970-02-19'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-18' and '1970-02-19'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where da between '1970-02-18' and '1970-02-19'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL",
                "deletions": 0
            },
            {
                "sha": "a1094b6819725da343ea71477af0e467cf77365d",
                "filename": "ql/src/test/results/clientpositive/orc_ppd_decimal.q.out",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/results/clientpositive/orc_ppd_decimal.q.out",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/results/clientpositive/orc_ppd_decimal.q.out",
                "status": "added",
                "changes": 645,
                "additions": 645,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/orc_ppd_decimal.q.out?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -0,0 +1,645 @@\n+PREHOOK: query: create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\")\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+POSTHOOK: query: create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\")\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@newtypesorc\n+PREHOOK: query: insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@src\n+PREHOOK: Output: default@newtypesorc\n+POSTHOOK: query: insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@newtypesorc\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+PREHOOK: query: -- decimal data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where d=0.22\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: -- decimal data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where d=0.22\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d=0.22\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d=0.22\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d='0.22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d='0.22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d='0.22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d='0.22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d=cast('0.22' as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d=cast('0.22' as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d=cast('0.22' as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d=cast('0.22' as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d!=0.22\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d!=0.22\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d!=0.22\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d!=0.22\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d!='0.22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d!='0.22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d!='0.22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d!='0.22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d!=cast('0.22' as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d!=cast('0.22' as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d!=cast('0.22' as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d!=cast('0.22' as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<11.22\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<11.22\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<11.22\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<11.22\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<'11.22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<'11.22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<'11.22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<'11.22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<cast('11.22' as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<cast('11.22' as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<cast('11.22' as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<cast('11.22' as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<1\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<1\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<1\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<1\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<=11.22\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<=11.22\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<=11.22\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<=11.22\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<='11.22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<='11.22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<='11.22'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<='11.22'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<=cast('11.22' as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<=cast('11.22' as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<=cast('11.22' as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<=cast('11.22' as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<=12\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<=12\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d<=12\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d<=12\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.22', '1.0')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.22', '1.0')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.22', '1.0')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.22', '1.0')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.22', '11.22')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.22', '11.22')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.22', '11.22')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.22', '11.22')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', '1.0')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', '1.0')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', '1.0')\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', '1.0')\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22, cast('11.22' as float))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22, cast('11.22' as float))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22, cast('11.22' as float))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d in ('0.9', 0.22, cast('11.22' as float))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and 1\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and 1\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and 1\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and 1\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and 1000\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and 1000\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and 1000\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and 1000\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and '2.0'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and '2.0'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and '2.0'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and '2.0'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and cast(3 as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and cast(3 as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and cast(3 as float)\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 0 and cast(3 as float)\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 1 and cast(30 as char(10))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 1 and cast(30 as char(10))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where d between 1 and cast(30 as char(10))\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where d between 1 and cast(30 as char(10))\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500",
                "deletions": 0
            },
            {
                "sha": "0bce7605b436e0a43cf9a9e3ee53550d79c0e114",
                "filename": "ql/src/test/results/clientpositive/orc_ppd_varchar.q.out",
                "blob_url": "https://github.com/apache/hive/blob/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/results/clientpositive/orc_ppd_varchar.q.out",
                "raw_url": "https://github.com/apache/hive/raw/90fabf185f264508afd329d9e0bf847fc9ae19f1/ql/src/test/results/clientpositive/orc_ppd_varchar.q.out",
                "status": "added",
                "changes": 307,
                "additions": 307,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/orc_ppd_varchar.q.out?ref=90fabf185f264508afd329d9e0bf847fc9ae19f1",
                "patch": "@@ -0,0 +1,307 @@\n+PREHOOK: query: create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\")\n+PREHOOK: type: CREATETABLE\n+PREHOOK: Output: database:default\n+POSTHOOK: query: create table newtypesorc(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties(\"orc.stripe.size\"=\"16777216\")\n+POSTHOOK: type: CREATETABLE\n+POSTHOOK: Output: database:default\n+POSTHOOK: Output: default@newtypesorc\n+PREHOOK: query: insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@src\n+PREHOOK: Output: default@newtypesorc\n+POSTHOOK: query: insert overwrite table newtypesorc select * from (select cast(\"apple\" as char(10)), cast(\"bee\" as varchar(10)), 0.22, cast(\"1970-02-20\" as date) from src src1 union all select cast(\"hello\" as char(10)), cast(\"world\" as varchar(10)), 11.22, cast(\"1970-02-27\" as date) from src src2) uniontbl\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@src\n+POSTHOOK: Output: default@newtypesorc\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+PREHOOK: query: -- varchar data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where v=\"bee\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: -- varchar data types (EQUAL, NOT_EQUAL, LESS_THAN, LESS_THAN_EQUALS, IN, BETWEEN tests)\n+select sum(hash(*)) from newtypesorc where v=\"bee\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v=\"bee\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v=\"bee\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v!=\"bee\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v!=\"bee\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v!=\"bee\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v!=\"bee\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+334427804500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v<\"world\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v<\"world\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v<\"world\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v<\"world\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v<=\"world\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v<=\"world\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v<=\"world\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v<=\"world\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v=\"bee   \"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v=\"bee   \"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v=\"bee   \"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v=\"bee   \"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"bee\", \"orange\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"bee\", \"orange\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"bee\", \"orange\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"bee\", \"orange\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"bee\", \"world\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"bee\", \"world\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"bee\", \"world\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"bee\", \"world\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"orange\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"orange\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"orange\")\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v in (\"orange\")\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v between \"bee\" and \"orange\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v between \"bee\" and \"orange\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v between \"bee\" and \"orange\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v between \"bee\" and \"orange\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+-252951929000\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v between \"bee\" and \"zombie\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v between \"bee\" and \"zombie\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v between \"bee\" and \"zombie\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v between \"bee\" and \"zombie\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+81475875500\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v between \"orange\" and \"pine\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v between \"orange\" and \"pine\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL\n+PREHOOK: query: select sum(hash(*)) from newtypesorc where v between \"orange\" and \"pine\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: query: select sum(hash(*)) from newtypesorc where v between \"orange\" and \"pine\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@newtypesorc\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: newtypesorc.c EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.d EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.da EXPRESSION []\n+POSTHOOK: Lineage: newtypesorc.v EXPRESSION []\n+NULL",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RecordReaderImpl.java",
            "OrcInputFormat.java",
            "SearchArgumentImpl.java",
            "PredicateLeaf.java"
        ],
        "unit_tests": [
            "TestRecordReaderImpl.java",
            "TestSearchArgumentImpl.java"
        ]
    },
    "hive_e8221ab": {
        "repo": "hive",
        "message": "HIVE-5580. Predicate pushdown predicates with an and-operator between \nnon-SARGable predicates cause a NPE. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1550010 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/e8221ab0e147580441e89a516c2570a3acaa8e17",
        "parent": "https://github.com/apache/hive/commit/a93fe77129d10cbd4ec37ae320b8ae32e9305f2f",
        "bug_id": "hive_e8221ab",
        "file": [
            {
                "sha": "1663d785d412d4a92252fef29ae68fc30b22f6cc",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/e8221ab0e147580441e89a516c2570a3acaa8e17/ql/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/e8221ab0e147580441e89a516c2570a3acaa8e17/ql/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/io/sarg/SearchArgumentImpl.java?ref=e8221ab0e147580441e89a516c2570a3acaa8e17",
                "patch": "@@ -573,7 +573,7 @@ static ExpressionTree pushDownNot(ExpressionTree root) {\n      * @param expr The expression to clean up\n      * @return The cleaned up expression\n      */\n-    ExpressionTree foldMaybe(ExpressionTree expr) {\n+    static ExpressionTree foldMaybe(ExpressionTree expr) {\n       if (expr.children != null) {\n         for(int i=0; i < expr.children.size(); ++i) {\n           ExpressionTree child = foldMaybe(expr.children.get(i));\n@@ -594,6 +594,9 @@ ExpressionTree foldMaybe(ExpressionTree expr) {\n             expr.children.set(i, child);\n           }\n         }\n+        if (expr.children.isEmpty()) {\n+          return new ExpressionTree(TruthValue.YES_NO_NULL);\n+        }\n       }\n       return expr;\n     }",
                "deletions": 1
            },
            {
                "sha": "6a2a56a831cd682b00dc63a904b79643867ba273",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java",
                "blob_url": "https://github.com/apache/hive/blob/e8221ab0e147580441e89a516c2570a3acaa8e17/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java",
                "raw_url": "https://github.com/apache/hive/raw/e8221ab0e147580441e89a516c2570a3acaa8e17/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java",
                "status": "modified",
                "changes": 25,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/io/sarg/TestSearchArgumentImpl.java?ref=e8221ab0e147580441e89a516c2570a3acaa8e17",
                "patch": "@@ -146,6 +146,31 @@ public void testFlatten() throws Exception {\n         ).toString());\n   }\n \n+  @Test\n+  public void testFoldMaybe() throws Exception {\n+    assertEquals(\"(and leaf-1)\",\n+        ExpressionBuilder.foldMaybe(and(leaf(1),\n+            constant(TruthValue.YES_NO_NULL))).toString());\n+    assertEquals(\"(and leaf-1 leaf-2)\",\n+        ExpressionBuilder.foldMaybe(and(leaf(1),\n+            constant(TruthValue.YES_NO_NULL), leaf(2))).toString());\n+    assertEquals(\"(and leaf-1 leaf-2)\",\n+        ExpressionBuilder.foldMaybe(and(constant(TruthValue.YES_NO_NULL),\n+            leaf(1), leaf(2), constant(TruthValue.YES_NO_NULL))).toString());\n+    assertEquals(\"YES_NO_NULL\",\n+        ExpressionBuilder.foldMaybe(and(constant(TruthValue.YES_NO_NULL),\n+            constant(TruthValue.YES_NO_NULL))).toString());\n+    assertEquals(\"YES_NO_NULL\",\n+        ExpressionBuilder.foldMaybe(or(leaf(1),\n+            constant(TruthValue.YES_NO_NULL))).toString());\n+    assertEquals(\"(or leaf-1 (and leaf-2))\",\n+        ExpressionBuilder.foldMaybe(or(leaf(1),\n+            and(leaf(2), constant(TruthValue.YES_NO_NULL)))).toString());\n+    assertEquals(\"(and leaf-1)\",\n+        ExpressionBuilder.foldMaybe(and(or(leaf(2),\n+            constant(TruthValue.YES_NO_NULL)), leaf(1))).toString());\n+  }\n+\n   @Test\n   public void testCNF() throws Exception {\n     assertEquals(\"leaf-1\", ExpressionBuilder.convertToCNF(leaf(1)).toString());",
                "deletions": 0
            },
            {
                "sha": "823727d5edc604f79714c968b4528407acafad84",
                "filename": "ql/src/test/queries/clientpositive/orc_create.q",
                "blob_url": "https://github.com/apache/hive/blob/e8221ab0e147580441e89a516c2570a3acaa8e17/ql/src/test/queries/clientpositive/orc_create.q",
                "raw_url": "https://github.com/apache/hive/raw/e8221ab0e147580441e89a516c2570a3acaa8e17/ql/src/test/queries/clientpositive/orc_create.q",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/orc_create.q?ref=e8221ab0e147580441e89a516c2570a3acaa8e17",
                "patch": "@@ -92,6 +92,15 @@ SET hive.optimize.index.filter=true;\n -- test predicate push down with partition pruning\n SELECT COUNT(*) FROM orc_create_people where id < 10 and state = 'Ca';\n \n+-- test predicate push down\n+SELECT COUNT(*) FROM orc_create_people where id = 50;\n+SELECT COUNT(*) FROM orc_create_people where id between 10 and 20;\n+SELECT COUNT(*) FROM orc_create_people where id > 10 and id < 100;\n+SELECT COUNT(*) FROM orc_create_people where (id + 1) = 20;\n+SELECT COUNT(*) FROM orc_create_people where (id + 10) < 200;\n+SELECT COUNT(*) FROM orc_create_people where id < 30  or first_name = \"Rafael\";\n+SELECT COUNT(*) FROM orc_create_people where length(substr(first_name, 1, 2)) <= 2 and last_name like '%';\n+\n -- test predicate push down with no column projection\n SELECT id, first_name, last_name, address\n   FROM orc_create_people WHERE id > 90;",
                "deletions": 0
            },
            {
                "sha": "259520ed458ef8d589ba7fab2a5f4753744fc2d1",
                "filename": "ql/src/test/results/clientpositive/orc_create.q.out",
                "blob_url": "https://github.com/apache/hive/blob/e8221ab0e147580441e89a516c2570a3acaa8e17/ql/src/test/results/clientpositive/orc_create.q.out",
                "raw_url": "https://github.com/apache/hive/raw/e8221ab0e147580441e89a516c2570a3acaa8e17/ql/src/test/results/clientpositive/orc_create.q.out",
                "status": "modified",
                "changes": 177,
                "additions": 177,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/orc_create.q.out?ref=e8221ab0e147580441e89a516c2570a3acaa8e17",
                "patch": "@@ -506,6 +506,183 @@ POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).first_name SIMPLE [(orc\n POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n 5\n+PREHOOK: query: -- test predicate push down\n+SELECT COUNT(*) FROM orc_create_people where id = 50\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@orc_create_people\n+PREHOOK: Input: default@orc_create_people@state=Ca\n+PREHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: query: -- test predicate push down\n+SELECT COUNT(*) FROM orc_create_people where id = 50\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@orc_create_people\n+POSTHOOK: Input: default@orc_create_people@state=Ca\n+POSTHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: orc_create_complex.lst SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:lst, type:array<string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.mp SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:mp, type:map<string,string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.str SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:str, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.strct SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:strct, type:struct<A:string,B:string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+1\n+PREHOOK: query: SELECT COUNT(*) FROM orc_create_people where id between 10 and 20\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@orc_create_people\n+PREHOOK: Input: default@orc_create_people@state=Ca\n+PREHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: query: SELECT COUNT(*) FROM orc_create_people where id between 10 and 20\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@orc_create_people\n+POSTHOOK: Input: default@orc_create_people@state=Ca\n+POSTHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: orc_create_complex.lst SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:lst, type:array<string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.mp SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:mp, type:map<string,string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.str SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:str, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.strct SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:strct, type:struct<A:string,B:string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+11\n+PREHOOK: query: SELECT COUNT(*) FROM orc_create_people where id > 10 and id < 100\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@orc_create_people\n+PREHOOK: Input: default@orc_create_people@state=Ca\n+PREHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: query: SELECT COUNT(*) FROM orc_create_people where id > 10 and id < 100\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@orc_create_people\n+POSTHOOK: Input: default@orc_create_people@state=Ca\n+POSTHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: orc_create_complex.lst SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:lst, type:array<string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.mp SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:mp, type:map<string,string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.str SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:str, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.strct SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:strct, type:struct<A:string,B:string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+89\n+PREHOOK: query: SELECT COUNT(*) FROM orc_create_people where (id + 1) = 20\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@orc_create_people\n+PREHOOK: Input: default@orc_create_people@state=Ca\n+PREHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: query: SELECT COUNT(*) FROM orc_create_people where (id + 1) = 20\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@orc_create_people\n+POSTHOOK: Input: default@orc_create_people@state=Ca\n+POSTHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: orc_create_complex.lst SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:lst, type:array<string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.mp SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:mp, type:map<string,string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.str SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:str, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.strct SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:strct, type:struct<A:string,B:string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+1\n+PREHOOK: query: SELECT COUNT(*) FROM orc_create_people where (id + 10) < 200\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@orc_create_people\n+PREHOOK: Input: default@orc_create_people@state=Ca\n+PREHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: query: SELECT COUNT(*) FROM orc_create_people where (id + 10) < 200\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@orc_create_people\n+POSTHOOK: Input: default@orc_create_people@state=Ca\n+POSTHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: orc_create_complex.lst SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:lst, type:array<string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.mp SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:mp, type:map<string,string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.str SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:str, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.strct SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:strct, type:struct<A:string,B:string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+100\n+PREHOOK: query: SELECT COUNT(*) FROM orc_create_people where id < 30  or first_name = \"Rafael\"\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@orc_create_people\n+PREHOOK: Input: default@orc_create_people@state=Ca\n+PREHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: query: SELECT COUNT(*) FROM orc_create_people where id < 30  or first_name = \"Rafael\"\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@orc_create_people\n+POSTHOOK: Input: default@orc_create_people@state=Ca\n+POSTHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: orc_create_complex.lst SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:lst, type:array<string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.mp SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:mp, type:map<string,string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.str SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:str, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.strct SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:strct, type:struct<A:string,B:string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+30\n+PREHOOK: query: SELECT COUNT(*) FROM orc_create_people where length(substr(first_name, 1, 2)) <= 2 and last_name like '%'\n+PREHOOK: type: QUERY\n+PREHOOK: Input: default@orc_create_people\n+PREHOOK: Input: default@orc_create_people@state=Ca\n+PREHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: query: SELECT COUNT(*) FROM orc_create_people where length(substr(first_name, 1, 2)) <= 2 and last_name like '%'\n+POSTHOOK: type: QUERY\n+POSTHOOK: Input: default@orc_create_people\n+POSTHOOK: Input: default@orc_create_people@state=Ca\n+POSTHOOK: Input: default@orc_create_people@state=Or\n+#### A masked pattern was here ####\n+POSTHOOK: Lineage: orc_create_complex.lst SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:lst, type:array<string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.mp SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:mp, type:map<string,string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.str SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:str, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_complex.strct SIMPLE [(orc_create_staging)orc_create_staging.FieldSchema(name:strct, type:struct<A:string,B:string>, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Ca).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).address SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:address, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).first_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:first_name, type:string, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).id SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:id, type:int, comment:null), ]\n+POSTHOOK: Lineage: orc_create_people PARTITION(state=Or).last_name SIMPLE [(orc_create_people_staging)orc_create_people_staging.FieldSchema(name:last_name, type:string, comment:null), ]\n+100\n PREHOOK: query: -- test predicate push down with no column projection\n SELECT id, first_name, last_name, address\n   FROM orc_create_people WHERE id > 90",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SearchArgumentImpl.java"
        ],
        "unit_tests": [
            "TestSearchArgumentImpl.java"
        ]
    },
    "hive_a9d35c7": {
        "repo": "hive",
        "message": "HIVE-6567 : \"show grant ... on all\" fails with NPE (Thejas Nair, reviewed by Ashutosh Chauhan)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1577428 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
        "parent": "https://github.com/apache/hive/commit/871b2765ca7db24c65fd22a52241bd2b4f8ce6ca",
        "bug_id": "hive_a9d35c7",
        "file": [
            {
                "sha": "42df435f3e0fa8ec2c347c6a598e9c74fe0cffcf",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java",
                "status": "modified",
                "changes": 18,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/DDLTask.java?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -657,7 +657,7 @@ private int showGrantsV2(ShowGrantDesc showGrantDesc) throws HiveException {\n \n         PrivilegeGrantInfo grantInfo =\n             AuthorizationUtils.getThriftPrivilegeGrantInfo(priv, privInfo.getGrantorPrincipal(),\n-                privInfo.isGrantOption());\n+                privInfo.isGrantOption(), privInfo.getGrantTime());\n \n         //only grantInfo is used\n         HiveObjectPrivilege thriftObjectPriv = new HiveObjectPrivilege(new HiveObjectRef(\n@@ -674,18 +674,6 @@ private int showGrantsV2(ShowGrantDesc showGrantDesc) throws HiveException {\n     return 0;\n   }\n \n-  private static void sortPrivileges(List<HiveObjectPrivilege> privileges) {\n-    Collections.sort(privileges, new Comparator<HiveObjectPrivilege>() {\n-\n-      @Override\n-      public int compare(HiveObjectPrivilege one, HiveObjectPrivilege other) {\n-        return one.getGrantInfo().getPrivilege().compareTo(other.getGrantInfo().getPrivilege());\n-      }\n-\n-    });\n-\n-  }\n-\n   private int grantOrRevokePrivileges(List<PrincipalDesc> principals,\n       List<PrivilegeDesc> privileges, PrivilegeObjectDesc privSubjectDesc,\n       String grantor, PrincipalType grantorType, boolean grantOption, boolean isGrant)\n@@ -854,6 +842,7 @@ private int grantOrRevokePrivilegesV2(List<PrincipalDesc> principals,\n \n   private HivePrivilegeObject getHivePrivilegeObject(PrivilegeObjectDesc privSubjectDesc)\n       throws HiveException {\n+\n     String [] dbTable = Utilities.getDbTableName(privSubjectDesc.getObject());\n     return new HivePrivilegeObject(getPrivObjectType(privSubjectDesc), dbTable[0], dbTable[1]);\n   }\n@@ -877,6 +866,9 @@ private HivePrincipalType getHivePrincipalType(PrincipalType type) throws HiveEx\n   }\n \n   private HivePrivilegeObjectType getPrivObjectType(PrivilegeObjectDesc privSubjectDesc) {\n+    if (privSubjectDesc.getObject() == null) {\n+      return null;\n+    }\n     return privSubjectDesc.getTable() ? HivePrivilegeObjectType.TABLE_OR_VIEW : HivePrivilegeObjectType.DATABASE;\n   }\n ",
                "deletions": 13
            },
            {
                "sha": "9a74fa5800841ad7cbf9beed4abca0981bacf161",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/Utilities.java?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -70,9 +70,6 @@\n import java.util.Random;\n import java.util.Set;\n import java.util.UUID;\n-import java.util.zip.Deflater;\n-import java.util.zip.DeflaterOutputStream;\n-import java.util.zip.InflaterInputStream;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n@@ -81,6 +78,9 @@\n import java.util.concurrent.TimeUnit;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.zip.Deflater;\n+import java.util.zip.DeflaterOutputStream;\n+import java.util.zip.InflaterInputStream;\n \n import org.antlr.runtime.CommonToken;\n import org.apache.commons.codec.binary.Base64;\n@@ -2029,6 +2029,9 @@ public static String formatBinaryString(byte[] array, int start, int length) {\n    * @throws HiveException\n    */\n   public static String[] getDbTableName(String dbtable) throws HiveException{\n+    if(dbtable == null){\n+      return new String[2];\n+    }\n     String[] names =  dbtable.split(\"\\\\.\");\n     switch (names.length) {\n     case 2:",
                "deletions": 3
            },
            {
                "sha": "5e2d12c57bae003ddac6dc9b5732c1f4df8516ec",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/security/authorization/AuthorizationUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/AuthorizationUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/AuthorizationUtils.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/AuthorizationUtils.java?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -108,12 +108,13 @@ public static PrincipalType getThriftPrincipalType(HivePrincipalType type) {\n    * @param privilege\n    * @param grantorPrincipal\n    * @param grantOption\n+   * @param grantTime\n    * @return\n    * @throws HiveException\n    */\n   public static PrivilegeGrantInfo getThriftPrivilegeGrantInfo(HivePrivilege privilege,\n-      HivePrincipal grantorPrincipal, boolean grantOption) throws HiveException {\n-    return new PrivilegeGrantInfo(privilege.getName(), 0 /* time gets added by server */,\n+      HivePrincipal grantorPrincipal, boolean grantOption, int grantTime) throws HiveException {\n+    return new PrivilegeGrantInfo(privilege.getName(), grantTime,\n         grantorPrincipal.getName(), getThriftPrincipalType(grantorPrincipal.getType()), grantOption);\n   }\n \n@@ -125,6 +126,9 @@ public static PrivilegeGrantInfo getThriftPrivilegeGrantInfo(HivePrivilege privi\n    * @throws HiveException\n    */\n   public static HiveObjectType getThriftHiveObjType(HivePrivilegeObjectType type) throws HiveException {\n+    if (type == null) {\n+      return null;\n+    }\n     switch(type){\n     case DATABASE:\n       return HiveObjectType.DATABASE;",
                "deletions": 2
            },
            {
                "sha": "0f91ccbc08614f459b4407c6033c673e27c98611",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/HivePrivilegeInfo.java",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/HivePrivilegeInfo.java",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/HivePrivilegeInfo.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/HivePrivilegeInfo.java?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -31,14 +31,17 @@\n   private final HivePrivilegeObject object;\n   private final HivePrincipal grantorPrincipal;\n   private final boolean grantOption;\n+  private final int grantTime;\n \n   public HivePrivilegeInfo(HivePrincipal principal, HivePrivilege privilege,\n-      HivePrivilegeObject object, HivePrincipal grantorPrincipal, boolean grantOption){\n+      HivePrivilegeObject object, HivePrincipal grantorPrincipal, boolean grantOption,\n+      int grantTime){\n     this.principal = principal;\n     this.privilege = privilege;\n     this.object = object;\n     this.grantorPrincipal = grantorPrincipal;\n     this.grantOption = grantOption;\n+    this.grantTime = grantTime;\n   }\n \n   public HivePrincipal getPrincipal() {\n@@ -61,5 +64,9 @@ public boolean isGrantOption() {\n     return grantOption;\n   }\n \n+  public int getGrantTime() {\n+    return grantTime;\n+  }\n+\n \n }\n\\ No newline at end of file",
                "deletions": 1
            },
            {
                "sha": "03d12ca107cbcd3cf3f00f1517df50ad5c2c93ad",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLAuthorizationUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLAuthorizationUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLAuthorizationUtils.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLAuthorizationUtils.java?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -35,15 +35,13 @@\n import org.apache.hadoop.fs.permission.FsAction;\n import org.apache.hadoop.hive.common.FileUtils;\n import org.apache.hadoop.hive.conf.HiveConf;\n-import org.apache.hadoop.hive.metastore.HiveMetaStore;\n import org.apache.hadoop.hive.metastore.IMetaStoreClient;\n import org.apache.hadoop.hive.metastore.MetaStoreUtils;\n import org.apache.hadoop.hive.metastore.api.Database;\n import org.apache.hadoop.hive.metastore.api.HiveObjectPrivilege;\n import org.apache.hadoop.hive.metastore.api.HiveObjectRef;\n import org.apache.hadoop.hive.metastore.api.HiveObjectType;\n import org.apache.hadoop.hive.metastore.api.MetaException;\n-import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n import org.apache.hadoop.hive.metastore.api.PrincipalPrivilegeSet;\n import org.apache.hadoop.hive.metastore.api.PrivilegeBag;\n import org.apache.hadoop.hive.metastore.api.PrivilegeGrantInfo;\n@@ -91,7 +89,7 @@ static PrivilegeBag getThriftPrivilegesBag(List<HivePrincipal> hivePrincipals,\n             + \" is not supported in sql standard authorization mode\");\n       }\n       PrivilegeGrantInfo grantInfo = getThriftPrivilegeGrantInfo(privilege, grantorPrincipal,\n-          grantOption);\n+          grantOption, 0 /*real grant time added by metastore*/);\n       for (HivePrincipal principal : hivePrincipals) {\n         HiveObjectPrivilege objPriv = new HiveObjectPrivilege(privObj, principal.getName(),\n             AuthorizationUtils.getThriftPrincipalType(principal.getType()), grantInfo);\n@@ -102,10 +100,11 @@ static PrivilegeBag getThriftPrivilegesBag(List<HivePrincipal> hivePrincipals,\n   }\n \n   static PrivilegeGrantInfo getThriftPrivilegeGrantInfo(HivePrivilege privilege,\n-      HivePrincipal grantorPrincipal, boolean grantOption) throws HiveAuthzPluginException {\n+      HivePrincipal grantorPrincipal, boolean grantOption, int grantTime)\n+          throws HiveAuthzPluginException {\n     try {\n       return AuthorizationUtils.getThriftPrivilegeGrantInfo(privilege, grantorPrincipal,\n-          grantOption);\n+          grantOption, grantTime);\n     } catch (HiveException e) {\n       throw new HiveAuthzPluginException(e);\n     }",
                "deletions": 5
            },
            {
                "sha": "fec5eae72c6ff5bcdd4da7f379c86f81edb185dc",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLStdHiveAccessController.java",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLStdHiveAccessController.java",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLStdHiveAccessController.java",
                "status": "modified",
                "changes": 48,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/sqlstd/SQLStdHiveAccessController.java?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -39,7 +39,6 @@\n import org.apache.hadoop.hive.metastore.api.PrivilegeGrantInfo;\n import org.apache.hadoop.hive.metastore.api.Role;\n import org.apache.hadoop.hive.metastore.api.RolePrincipalGrant;\n-import org.apache.hadoop.hive.ql.metadata.HiveException;\n import org.apache.hadoop.hive.ql.security.HiveAuthenticationProvider;\n import org.apache.hadoop.hive.ql.security.authorization.AuthorizationUtils;\n import org.apache.hadoop.hive.ql.security.authorization.plugin.HiveAccessControlException;\n@@ -156,7 +155,7 @@ public void grantPrivileges(List<HivePrincipal> hivePrincipals,\n         metastoreClient, authenticator.getUserName(), getCurrentRoles(), isUserAdmin());\n \n     // grant\n-    PrivilegeBag privBag = getThriftPrivilegesBag(hivePrincipals, hivePrivileges, hivePrivObject,\n+    PrivilegeBag privBag = SQLAuthorizationUtils.getThriftPrivilegesBag(hivePrincipals, hivePrivileges, hivePrivObject,\n         grantorPrincipal, grantOption);\n     try {\n       metastoreClient.grant_privileges(privBag);\n@@ -188,49 +187,6 @@ public void grantPrivileges(List<HivePrincipal> hivePrincipals,\n     return new ArrayList<HivePrivilege>(hivePrivSet);\n   }\n \n-  /**\n-   * Create thrift privileges bag\n-   *\n-   * @param hivePrincipals\n-   * @param hivePrivileges\n-   * @param hivePrivObject\n-   * @param grantorPrincipal\n-   * @param grantOption\n-   * @return\n-   * @throws HiveAuthzPluginException\n-   */\n-  private PrivilegeBag getThriftPrivilegesBag(List<HivePrincipal> hivePrincipals,\n-      List<HivePrivilege> hivePrivileges, HivePrivilegeObject hivePrivObject,\n-      HivePrincipal grantorPrincipal, boolean grantOption) throws HiveAuthzPluginException {\n-\n-    HiveObjectRef privObj = SQLAuthorizationUtils.getThriftHiveObjectRef(hivePrivObject);\n-    PrivilegeBag privBag = new PrivilegeBag();\n-    for (HivePrivilege privilege : hivePrivileges) {\n-      if (privilege.getColumns() != null && privilege.getColumns().size() > 0) {\n-        throw new HiveAuthzPluginException(\"Privileges on columns not supported currently\"\n-            + \" in sql standard authorization mode\");\n-      }\n-\n-      PrivilegeGrantInfo grantInfo = getThriftPrivilegeGrantInfo(privilege, grantorPrincipal,\n-          grantOption);\n-      for (HivePrincipal principal : hivePrincipals) {\n-        HiveObjectPrivilege objPriv = new HiveObjectPrivilege(privObj, principal.getName(),\n-            AuthorizationUtils.getThriftPrincipalType(principal.getType()), grantInfo);\n-        privBag.addToPrivileges(objPriv);\n-      }\n-    }\n-    return privBag;\n-  }\n-\n-  private PrivilegeGrantInfo getThriftPrivilegeGrantInfo(HivePrivilege privilege,\n-      HivePrincipal grantorPrincipal, boolean grantOption) throws HiveAuthzPluginException {\n-    try {\n-      return AuthorizationUtils.getThriftPrivilegeGrantInfo(privilege, grantorPrincipal,\n-          grantOption);\n-    } catch (HiveException e) {\n-      throw new HiveAuthzPluginException(e);\n-    }\n-  }\n \n   @Override\n   public void revokePrivileges(List<HivePrincipal> hivePrincipals,\n@@ -430,7 +386,7 @@ public void revokeRole(List<HivePrincipal> hivePrincipals, List<String> roleName\n             AuthorizationUtils.getHivePrincipalType(msGrantInfo.getGrantorType()));\n \n         HivePrivilegeInfo resPrivInfo = new HivePrivilegeInfo(resPrincipal, resPrivilege,\n-            resPrivObj, grantorPrincipal, msGrantInfo.isGrantOption());\n+            resPrivObj, grantorPrincipal, msGrantInfo.isGrantOption(), msGrantInfo.getCreateTime());\n         resPrivInfos.add(resPrivInfo);\n       }\n       return resPrivInfos;",
                "deletions": 46
            },
            {
                "sha": "2e384d7f1227efa111e4552ef27338d3d435c17c",
                "filename": "ql/src/test/queries/clientpositive/authorization_revoke_table_priv.q",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/test/queries/clientpositive/authorization_revoke_table_priv.q",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/test/queries/clientpositive/authorization_revoke_table_priv.q",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/authorization_revoke_table_priv.q?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -9,6 +9,7 @@ CREATE TABLE table_priv_rev(i int);\n -- grant insert privilege to user2\n GRANT INSERT ON table_priv_rev TO USER user2;\n SHOW GRANT USER user2 ON TABLE table_priv_rev;\n+SHOW GRANT USER user2 ON ALL;\n \n -- revoke insert privilege from user2\n REVOKE INSERT ON TABLE table_priv_rev FROM USER user2;\n@@ -18,6 +19,7 @@ SHOW GRANT USER user2 ON TABLE table_priv_rev;\n -- grant insert privilege to user2\n GRANT INSERT ON table_priv_rev TO USER user2;\n SHOW GRANT USER user2 ON TABLE table_priv_rev;\n+SHOW GRANT USER user2 ON ALL;\n \n -- grant select privilege to user2, with grant option\n GRANT SELECT ON table_priv_rev TO USER user2 WITH GRANT OPTION;\n@@ -31,10 +33,12 @@ SHOW GRANT USER user2 ON TABLE table_priv_rev;\n GRANT DELETE ON table_priv_rev TO USER user2;\n SHOW GRANT USER user2 ON TABLE table_priv_rev;\n \n+\n -- start revoking --\n -- revoke update privilege from user2\n REVOKE UPDATE ON TABLE table_priv_rev FROM USER user2;\n SHOW GRANT USER user2 ON TABLE table_priv_rev;\n+SHOW GRANT USER user2 ON ALL;\n \n -- revoke DELETE privilege from user2\n REVOKE DELETE ON TABLE table_priv_rev FROM USER user2;\n@@ -47,7 +51,7 @@ SHOW GRANT USER user2 ON TABLE table_priv_rev;\n -- revoke select privilege from user2\n REVOKE SELECT ON TABLE table_priv_rev FROM USER user2;\n SHOW GRANT USER user2 ON TABLE table_priv_rev;\n-\n+SHOW GRANT USER user2 ON ALL;\n \n -- grant all followed by revoke all\n GRANT ALL ON table_priv_rev TO USER user2;",
                "deletions": 1
            },
            {
                "sha": "915237acb93957cd0f061f10fca42c8a5e7602ea",
                "filename": "ql/src/test/queries/clientpositive/authorization_view_sqlstd.q",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/test/queries/clientpositive/authorization_view_sqlstd.q",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/test/queries/clientpositive/authorization_view_sqlstd.q",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/queries/clientpositive/authorization_view_sqlstd.q?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -12,6 +12,8 @@ create view vt1 as select i,k from t1;\n -- protecting certain rows\n create view vt2 as select * from t1 where i > 1;\n \n+show grant user user1 on all;\n+\n --view grant to user\n -- try with and without table keyword\n \n@@ -21,20 +23,24 @@ grant insert on table vt1 to user user3;\n show grant user user2 on table vt1;\n show grant user user3 on table vt1;\n \n+\n set user.name=user2;\n select * from vt1;\n \n set user.name=user1;\n \n grant all on table vt2 to user user2;\n show grant user user2 on table vt2;\n+show grant user user2 on all;\n \n revoke all on vt2 from user user2;\n show grant user user2 on table vt2;\n \n revoke select on table vt1 from user user2;\n show grant user user2 on table vt1;\n \n+show grant user user2 on all;\n+\n -- grant privileges on roles for view, after next statement\n show grant user user3 on table vt1;\n ",
                "deletions": 0
            },
            {
                "sha": "907c8898b662be53bae7f6a64cd1f02c3f43f547",
                "filename": "ql/src/test/results/clientpositive/authorization_revoke_table_priv.q.out",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/test/results/clientpositive/authorization_revoke_table_priv.q.out",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/test/results/clientpositive/authorization_revoke_table_priv.q.out",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/authorization_revoke_table_priv.q.out?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -22,6 +22,11 @@ PREHOOK: type: SHOW_GRANT\n POSTHOOK: query: SHOW GRANT USER user2 ON TABLE table_priv_rev\n POSTHOOK: type: SHOW_GRANT\n default\ttable_priv_rev\t\t\tuser2\tUSER\tINSERT\tfalse\t-1\tuser1\n+PREHOOK: query: SHOW GRANT USER user2 ON ALL\n+PREHOOK: type: SHOW_GRANT\n+POSTHOOK: query: SHOW GRANT USER user2 ON ALL\n+POSTHOOK: type: SHOW_GRANT\n+default\ttable_priv_rev\t\t\tuser2\tUSER\tINSERT\tfalse\t-1\tuser1\n PREHOOK: query: -- revoke insert privilege from user2\n REVOKE INSERT ON TABLE table_priv_rev FROM USER user2\n PREHOOK: type: REVOKE_PRIVILEGE\n@@ -49,6 +54,11 @@ PREHOOK: type: SHOW_GRANT\n POSTHOOK: query: SHOW GRANT USER user2 ON TABLE table_priv_rev\n POSTHOOK: type: SHOW_GRANT\n default\ttable_priv_rev\t\t\tuser2\tUSER\tINSERT\tfalse\t-1\tuser1\n+PREHOOK: query: SHOW GRANT USER user2 ON ALL\n+PREHOOK: type: SHOW_GRANT\n+POSTHOOK: query: SHOW GRANT USER user2 ON ALL\n+POSTHOOK: type: SHOW_GRANT\n+default\ttable_priv_rev\t\t\tuser2\tUSER\tINSERT\tfalse\t-1\tuser1\n PREHOOK: query: -- grant select privilege to user2, with grant option\n GRANT SELECT ON table_priv_rev TO USER user2 WITH GRANT OPTION\n PREHOOK: type: GRANT_PRIVILEGE\n@@ -111,6 +121,13 @@ POSTHOOK: type: SHOW_GRANT\n default\ttable_priv_rev\t\t\tuser2\tUSER\tDELETE\tfalse\t-1\tuser1\n default\ttable_priv_rev\t\t\tuser2\tUSER\tINSERT\tfalse\t-1\tuser1\n default\ttable_priv_rev\t\t\tuser2\tUSER\tSELECT\ttrue\t-1\tuser1\n+PREHOOK: query: SHOW GRANT USER user2 ON ALL\n+PREHOOK: type: SHOW_GRANT\n+POSTHOOK: query: SHOW GRANT USER user2 ON ALL\n+POSTHOOK: type: SHOW_GRANT\n+default\ttable_priv_rev\t\t\tuser2\tUSER\tDELETE\tfalse\t-1\tuser1\n+default\ttable_priv_rev\t\t\tuser2\tUSER\tINSERT\tfalse\t-1\tuser1\n+default\ttable_priv_rev\t\t\tuser2\tUSER\tSELECT\ttrue\t-1\tuser1\n PREHOOK: query: -- revoke DELETE privilege from user2\n REVOKE DELETE ON TABLE table_priv_rev FROM USER user2\n PREHOOK: type: REVOKE_PRIVILEGE\n@@ -150,6 +167,10 @@ PREHOOK: query: SHOW GRANT USER user2 ON TABLE table_priv_rev\n PREHOOK: type: SHOW_GRANT\n POSTHOOK: query: SHOW GRANT USER user2 ON TABLE table_priv_rev\n POSTHOOK: type: SHOW_GRANT\n+PREHOOK: query: SHOW GRANT USER user2 ON ALL\n+PREHOOK: type: SHOW_GRANT\n+POSTHOOK: query: SHOW GRANT USER user2 ON ALL\n+POSTHOOK: type: SHOW_GRANT\n PREHOOK: query: -- grant all followed by revoke all\n GRANT ALL ON table_priv_rev TO USER user2\n PREHOOK: type: GRANT_PRIVILEGE",
                "deletions": 0
            },
            {
                "sha": "89186a5a1d5c43acdadd17007705a5bfd1a07278",
                "filename": "ql/src/test/results/clientpositive/authorization_view_sqlstd.q.out",
                "blob_url": "https://github.com/apache/hive/blob/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/test/results/clientpositive/authorization_view_sqlstd.q.out",
                "raw_url": "https://github.com/apache/hive/raw/a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2/ql/src/test/results/clientpositive/authorization_view_sqlstd.q.out",
                "status": "modified",
                "changes": 29,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/authorization_view_sqlstd.q.out?ref=a9d35c747dcd7e0b1c16c68bcdc5e0c702a0d5a2",
                "patch": "@@ -23,6 +23,22 @@ create view vt2 as select * from t1 where i > 1\n POSTHOOK: type: CREATEVIEW\n POSTHOOK: Input: default@t1\n POSTHOOK: Output: default@vt2\n+PREHOOK: query: show grant user user1 on all\n+PREHOOK: type: SHOW_GRANT\n+POSTHOOK: query: show grant user user1 on all\n+POSTHOOK: type: SHOW_GRANT\n+default\tt1\t\t\tuser1\tUSER\tDELETE\ttrue\t-1\tuser1\n+default\tt1\t\t\tuser1\tUSER\tINSERT\ttrue\t-1\tuser1\n+default\tt1\t\t\tuser1\tUSER\tSELECT\ttrue\t-1\tuser1\n+default\tt1\t\t\tuser1\tUSER\tUPDATE\ttrue\t-1\tuser1\n+default\tvt1\t\t\tuser1\tUSER\tDELETE\ttrue\t-1\tuser1\n+default\tvt1\t\t\tuser1\tUSER\tINSERT\ttrue\t-1\tuser1\n+default\tvt1\t\t\tuser1\tUSER\tSELECT\ttrue\t-1\tuser1\n+default\tvt1\t\t\tuser1\tUSER\tUPDATE\ttrue\t-1\tuser1\n+default\tvt2\t\t\tuser1\tUSER\tDELETE\ttrue\t-1\tuser1\n+default\tvt2\t\t\tuser1\tUSER\tINSERT\ttrue\t-1\tuser1\n+default\tvt2\t\t\tuser1\tUSER\tSELECT\ttrue\t-1\tuser1\n+default\tvt2\t\t\tuser1\tUSER\tUPDATE\ttrue\t-1\tuser1\n PREHOOK: query: --view grant to user\n -- try with and without table keyword\n \n@@ -75,6 +91,15 @@ default\tvt2\t\t\tuser2\tUSER\tDELETE\tfalse\t-1\tuser1\n default\tvt2\t\t\tuser2\tUSER\tINSERT\tfalse\t-1\tuser1\n default\tvt2\t\t\tuser2\tUSER\tSELECT\tfalse\t-1\tuser1\n default\tvt2\t\t\tuser2\tUSER\tUPDATE\tfalse\t-1\tuser1\n+PREHOOK: query: show grant user user2 on all\n+PREHOOK: type: SHOW_GRANT\n+POSTHOOK: query: show grant user user2 on all\n+POSTHOOK: type: SHOW_GRANT\n+default\tvt1\t\t\tuser2\tUSER\tSELECT\tfalse\t-1\tuser1\n+default\tvt2\t\t\tuser2\tUSER\tDELETE\tfalse\t-1\tuser1\n+default\tvt2\t\t\tuser2\tUSER\tINSERT\tfalse\t-1\tuser1\n+default\tvt2\t\t\tuser2\tUSER\tSELECT\tfalse\t-1\tuser1\n+default\tvt2\t\t\tuser2\tUSER\tUPDATE\tfalse\t-1\tuser1\n PREHOOK: query: revoke all on vt2 from user user2\n PREHOOK: type: REVOKE_PRIVILEGE\n PREHOOK: Output: default@vt2\n@@ -95,6 +120,10 @@ PREHOOK: query: show grant user user2 on table vt1\n PREHOOK: type: SHOW_GRANT\n POSTHOOK: query: show grant user user2 on table vt1\n POSTHOOK: type: SHOW_GRANT\n+PREHOOK: query: show grant user user2 on all\n+PREHOOK: type: SHOW_GRANT\n+POSTHOOK: query: show grant user user2 on all\n+POSTHOOK: type: SHOW_GRANT\n PREHOOK: query: -- grant privileges on roles for view, after next statement\n show grant user user3 on table vt1\n PREHOOK: type: SHOW_GRANT",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Utilities.java"
        ],
        "unit_tests": [
            "TestUtilities.java"
        ]
    },
    "hive_01526cf": {
        "repo": "hive",
        "message": "HIVE-6645 : to_date()/to_unix_timestamp() fail with NPE if input is null (Jason Dere via Ashutosh Chauhan)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1579500 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/01526cfa663c24e903ba1c493deb308efdd5439e",
        "parent": "https://github.com/apache/hive/commit/bbdded414f1b841e8d40b4d735b565f1a2ffe066",
        "bug_id": "hive_01526cf",
        "file": [
            {
                "sha": "9ee948019189b8d38c55f7a82a460e7f9a60e101",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java",
                "blob_url": "https://github.com/apache/hive/blob/01526cfa663c24e903ba1c493deb308efdd5439e/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java",
                "raw_url": "https://github.com/apache/hive/raw/01526cfa663c24e903ba1c493deb308efdd5439e/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java",
                "status": "modified",
                "changes": 15,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java?ref=01526cfa663c24e903ba1c493deb308efdd5439e",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.hadoop.hive.serde2.io.TimestampWritable;\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector.Category;\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters.Converter;\n import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;\n@@ -63,14 +64,20 @@\n   public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumentException {\n     if (arguments.length != 1) {\n       throw new UDFArgumentLengthException(\n-          \"to_date() requires 1 argument, got \" + arguments.length);\n+        \"to_date() requires 1 argument, got \" + arguments.length);\n+    }\n+    if (arguments[0].getCategory() != Category.PRIMITIVE) {\n+      throw new UDFArgumentException(\"to_date() only accepts STRING/TIMESTAMP/DATEWRITABLE types, got \"\n+          + arguments[0].getTypeName());\n     }\n     argumentOI = (PrimitiveObjectInspector) arguments[0];\n     inputType = argumentOI.getPrimitiveCategory();\n     ObjectInspector outputOI = PrimitiveObjectInspectorFactory.writableStringObjectInspector;\n     switch (inputType) {\n+    case CHAR:\n+    case VARCHAR:\n     case STRING:\n-      // textConverter = new TextConverter(argumentOI);\n+      inputType = PrimitiveCategory.STRING;\n       textConverter = ObjectInspectorConverters.getConverter(\n         argumentOI, PrimitiveObjectInspectorFactory.writableStringObjectInspector);\n       break;\n@@ -91,6 +98,10 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen\n \n   @Override\n   public Object evaluate(DeferredObject[] arguments) throws HiveException {\n+    if (arguments[0].get() == null) {\n+      return null;\n+    }\n+\n     switch (inputType) {\n     case STRING:\n       Date date;",
                "deletions": 2
            },
            {
                "sha": "65a2297fa12a877ed35b8c8b291fcbf384deb9ea",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToUnixTimeStamp.java",
                "blob_url": "https://github.com/apache/hive/blob/01526cfa663c24e903ba1c493deb308efdd5439e/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToUnixTimeStamp.java",
                "raw_url": "https://github.com/apache/hive/raw/01526cfa663c24e903ba1c493deb308efdd5439e/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToUnixTimeStamp.java",
                "status": "modified",
                "changes": 78,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFToUnixTimeStamp.java?ref=01526cfa663c24e903ba1c493deb308efdd5439e",
                "patch": "@@ -31,11 +31,18 @@\n import org.apache.hadoop.hive.ql.exec.vector.expressions.VectorUDFUnixTimeStampString;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector.Category;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters.Converter;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.DateObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.StringObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.primitive.TimestampObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils.PrimitiveGrouping;\n import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n \n /**\n  * deterministic version of UDFUnixTimeStamp. enforces argument\n@@ -46,10 +53,10 @@\n @VectorizedExpressions({VectorUDFUnixTimeStampLong.class, VectorUDFUnixTimeStampString.class})\n public class GenericUDFToUnixTimeStamp extends GenericUDF {\n \n-  private transient StringObjectInspector intputTextOI;\n   private transient DateObjectInspector inputDateOI;\n   private transient TimestampObjectInspector inputTimestampOI;\n-  private transient StringObjectInspector patternOI;\n+  private transient Converter inputTextConverter;\n+  private transient Converter patternConverter;\n \n   private transient String lasPattern = \"yyyy-MM-dd HH:mm:ss\";\n   private transient final SimpleDateFormat formatter = new SimpleDateFormat(lasPattern);\n@@ -62,26 +69,44 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen\n \n   protected void initializeInput(ObjectInspector[] arguments) throws UDFArgumentException {\n     if (arguments.length < 1) {\n-      throw new UDFArgumentLengthException(\"The function TO_UNIX_TIMESTAMP \" +\n+      throw new UDFArgumentLengthException(\"The function \" + getName().toUpperCase() +\n           \"requires at least one argument\");\n     }\n+    for (ObjectInspector argument : arguments) {\n+      if (arguments[0].getCategory() != Category.PRIMITIVE) {\n+        throw new UDFArgumentException(getName().toUpperCase() +\n+            \" only takes string/date/timestamp types, got \" + argument.getTypeName());\n+      }\n+    }\n \n-    if (arguments[0] instanceof StringObjectInspector) {\n-      intputTextOI = (StringObjectInspector) arguments[0];\n-      if (arguments.length > 1) {\n-        if (!(arguments[1] instanceof StringObjectInspector)) {\n-          throw new UDFArgumentException(\n-            \"The time pattern for \" + getName().toUpperCase() + \" should be string type\");\n+    PrimitiveObjectInspector arg1OI = (PrimitiveObjectInspector) arguments[0];\n+    switch (arg1OI.getPrimitiveCategory()) {\n+      case CHAR:\n+      case VARCHAR:\n+      case STRING:\n+        inputTextConverter = ObjectInspectorConverters.getConverter(arg1OI,\n+            PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n+        if (arguments.length > 1) {\n+          PrimitiveObjectInspector arg2OI = (PrimitiveObjectInspector) arguments[1];\n+          if (PrimitiveObjectInspectorUtils.getPrimitiveGrouping(arg2OI.getPrimitiveCategory())\n+              != PrimitiveGrouping.STRING_GROUP) {\n+            throw new UDFArgumentException(\n+              \"The time pattern for \" + getName().toUpperCase() + \" should be string type\");\n+          }\n+          patternConverter = ObjectInspectorConverters.getConverter(arg2OI,\n+              PrimitiveObjectInspectorFactory.javaStringObjectInspector);\n         }\n-        patternOI = (StringObjectInspector) arguments[1];\n-      }\n-    } else if (arguments[0] instanceof DateObjectInspector) {\n-      inputDateOI = (DateObjectInspector) arguments[0];\n-    } else if (arguments[0] instanceof TimestampObjectInspector) {\n-      inputTimestampOI = (TimestampObjectInspector) arguments[0];\n-    } else {\n-      throw new UDFArgumentException(\n-          \"The function \" + getName().toUpperCase() + \" takes only string or timestamp types\");\n+        break;\n+\n+      case DATE:\n+        inputDateOI = (DateObjectInspector) arguments[0];\n+        break;\n+      case TIMESTAMP:\n+        inputTimestampOI = (TimestampObjectInspector) arguments[0];\n+        break;\n+      default:\n+        throw new UDFArgumentException(\n+            \"The function \" + getName().toUpperCase() + \" takes only string/date/timestamp types\");\n     }\n   }\n \n@@ -93,13 +118,20 @@ protected String getName() {\n \n   @Override\n   public Object evaluate(DeferredObject[] arguments) throws HiveException {\n-    if (intputTextOI != null) {\n-      String textVal = intputTextOI.getPrimitiveJavaObject(arguments[0].get());\n+    if (arguments[0].get() == null) {\n+      return null;\n+    }\n+\n+    if (inputTextConverter != null) {\n+      String textVal = (String) inputTextConverter.convert(arguments[0].get());\n       if (textVal == null) {\n         return null;\n       }\n-      if (patternOI != null) {\n-        String patternVal = patternOI.getPrimitiveJavaObject(arguments[1].get());\n+      if (patternConverter != null) {\n+        if (arguments[1].get() == null) {\n+          return null;\n+        }\n+        String patternVal = (String) patternConverter.convert(arguments[1].get());\n         if (patternVal == null) {\n           return null;\n         }\n@@ -118,7 +150,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n       retValue.set(inputDateOI.getPrimitiveWritableObject(arguments[0].get())\n                    .getTimeInSeconds());\n       return retValue;\n-\t}\n+    }\n     Timestamp timestamp = inputTimestampOI.getPrimitiveJavaObject(arguments[0].get());\n     retValue.set(timestamp.getTime() / 1000);\n     return retValue;",
                "deletions": 23
            },
            {
                "sha": "0d40ff7cb3c47ed4c2a8d2e88d9d8c32eb87d09d",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDate.java",
                "blob_url": "https://github.com/apache/hive/blob/01526cfa663c24e903ba1c493deb308efdd5439e/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDate.java",
                "raw_url": "https://github.com/apache/hive/raw/01526cfa663c24e903ba1c493deb308efdd5439e/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDate.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/udf/TestGenericUDFDate.java?ref=01526cfa663c24e903ba1c493deb308efdd5439e",
                "patch": "@@ -45,6 +45,11 @@ public void testStringToDate() throws HiveException {\n     Text output = (Text) udf.evaluate(args);\n \n     assertEquals(\"to_date() test for STRING failed \", \"2009-07-30\", output.toString());\n+\n+    // Try with null args\n+    DeferredObject[] nullArgs = { new DeferredJavaObject(null) };\n+    output = (Text) udf.evaluate(nullArgs);\n+    assertNull(\"to_date() with null STRING\", output);\n   }\n \n   public void testTimestampToDate() throws HiveException {\n@@ -59,6 +64,11 @@ public void testTimestampToDate() throws HiveException {\n     Text output = (Text) udf.evaluate(args);\n \n     assertEquals(\"to_date() test for TIMESTAMP failed \", \"2009-07-30\", output.toString());\n+\n+    // Try with null args\n+    DeferredObject[] nullArgs = { new DeferredJavaObject(null) };\n+    output = (Text) udf.evaluate(nullArgs);\n+    assertNull(\"to_date() with null TIMESTAMP\", output);\n   }\n \n   public void testDateWritablepToDate() throws HiveException {\n@@ -72,6 +82,11 @@ public void testDateWritablepToDate() throws HiveException {\n     Text output = (Text) udf.evaluate(args);\n \n     assertEquals(\"to_date() test for DATEWRITABLE failed \", \"2009-07-30\", output.toString());\n+\n+    // Try with null args\n+    DeferredObject[] nullArgs = { new DeferredJavaObject(null) };\n+    output = (Text) udf.evaluate(nullArgs);\n+    assertNull(\"to_date() with null DATE\", output);\n   }\n \n }",
                "deletions": 0
            },
            {
                "sha": "52d30d3007a0ef00ee67c2cecd7df24fb3fd5a32",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFToUnixTimestamp.java",
                "blob_url": "https://github.com/apache/hive/blob/01526cfa663c24e903ba1c493deb308efdd5439e/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFToUnixTimestamp.java",
                "raw_url": "https://github.com/apache/hive/raw/01526cfa663c24e903ba1c493deb308efdd5439e/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFToUnixTimestamp.java",
                "status": "added",
                "changes": 126,
                "additions": 126,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDFToUnixTimestamp.java?ref=01526cfa663c24e903ba1c493deb308efdd5439e",
                "patch": "@@ -0,0 +1,126 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.udf.generic;\n+\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredJavaObject;\n+import org.apache.hadoop.hive.ql.udf.generic.GenericUDF.DeferredObject;\n+import org.apache.hadoop.hive.serde2.io.DateWritable;\n+import org.apache.hadoop.hive.serde2.io.TimestampWritable;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n+\n+import junit.framework.TestCase;\n+\n+public class TestGenericUDFToUnixTimestamp extends TestCase {\n+\n+  public static void runAndVerify(GenericUDFToUnixTimeStamp udf,\n+      Object arg, Object expected) throws HiveException {\n+    DeferredObject[] args = { new DeferredJavaObject(arg) };\n+    Object result = udf.evaluate(args);\n+    if (expected == null) {\n+      assertNull(result);\n+    } else {\n+      assertEquals(expected.toString(), result.toString());\n+    }\n+  }\n+\n+  public static void runAndVerify(GenericUDFToUnixTimeStamp udf,\n+      Object arg1, Object arg2, Object expected) throws HiveException {\n+    DeferredObject[] args = { new DeferredJavaObject(arg1), new DeferredJavaObject(arg2) };\n+    Object result = udf.evaluate(args);\n+    if (expected == null) {\n+      assertNull(result);\n+    } else {\n+      assertEquals(expected.toString(), result.toString());\n+    }\n+  }\n+\n+  public void testTimestamp() throws HiveException {\n+    GenericUDFToUnixTimeStamp udf = new GenericUDFToUnixTimeStamp();\n+    ObjectInspector valueOI = PrimitiveObjectInspectorFactory.writableTimestampObjectInspector;\n+    ObjectInspector[] arguments = {valueOI};\n+    udf.initialize(arguments);\n+\n+    Timestamp ts = Timestamp.valueOf(\"1970-01-01 00:00:00\");\n+    runAndVerify(udf,\n+        new TimestampWritable(ts),\n+        new LongWritable(ts.getTime() / 1000));\n+\n+    ts = Timestamp.valueOf(\"2001-02-03 01:02:03\");\n+    runAndVerify(udf,\n+        new TimestampWritable(ts),\n+        new LongWritable(ts.getTime() / 1000));\n+\n+    // test null values\n+    runAndVerify(udf, null, null);\n+  }\n+\n+  public void testDate() throws HiveException {\n+    GenericUDFToUnixTimeStamp udf = new GenericUDFToUnixTimeStamp();\n+    ObjectInspector valueOI = PrimitiveObjectInspectorFactory.writableDateObjectInspector;\n+    ObjectInspector[] arguments = {valueOI};\n+    udf.initialize(arguments);\n+\n+    Date date = Date.valueOf(\"1970-01-01\");\n+    runAndVerify(udf,\n+        new DateWritable(date),\n+        new LongWritable(date.getTime() / 1000));\n+\n+    // test null values\n+    runAndVerify(udf, null, null);\n+  }\n+\n+  public void testString() throws HiveException {\n+    GenericUDFToUnixTimeStamp udf1 = new GenericUDFToUnixTimeStamp();\n+    ObjectInspector valueOI = PrimitiveObjectInspectorFactory.writableStringObjectInspector;\n+    ObjectInspector[] arguments = {valueOI};\n+    udf1.initialize(arguments);\n+\n+    String val = \"2001-01-01 01:02:03\";\n+    runAndVerify(udf1,\n+        new Text(val),\n+        new LongWritable(Timestamp.valueOf(val).getTime() / 1000));\n+\n+    // test null values\n+    runAndVerify(udf1, null, null);\n+\n+    // Try 2-arg version\n+    GenericUDFToUnixTimeStamp udf2 = new GenericUDFToUnixTimeStamp();\n+    ObjectInspector[] args2 = {valueOI, valueOI};\n+    udf2.initialize(args2);\n+\n+    val = \"2001-01-01\";\n+    String format = \"yyyy-MM-dd\";\n+    runAndVerify(udf2,\n+        new Text(val),\n+        new Text(format),\n+        new LongWritable(Date.valueOf(val).getTime() / 1000));\n+\n+    // test null values\n+    runAndVerify(udf2, null, null, null);\n+    runAndVerify(udf2, null, new Text(format), null);\n+    runAndVerify(udf2, new Text(val), null, null);\n+  }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "GenericUDFToUnixTimeStamp.java",
            "GenericUDFDate.java"
        ],
        "unit_tests": [
            "TestGenericUDFDate.java",
            "TestGenericUDFToUnixTimestamp.java"
        ]
    },
    "hive_1c33fea": {
        "repo": "hive",
        "message": "HIVE-19970: Replication dump has a NPE when table is empty (Mahesh Kumar Behera, reviewed by Peter Vary, Sankar Hariappan)",
        "commit": "https://github.com/apache/hive/commit/1c33fea890bc01a85eb336caf5d73a85652f91a3",
        "parent": "https://github.com/apache/hive/commit/80c3bb58e24f13f82ca698486645c6c72364d75d",
        "bug_id": "hive_1c33fea",
        "file": [
            {
                "sha": "46c623d34bb8de2f0ded145b77e52dc34f3e7d49",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java",
                "status": "modified",
                "changes": 42,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenarios.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -91,6 +91,7 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.apache.hadoop.hive.metastore.ReplChangeManager.SOURCE_OF_REPLICATION;\n+import org.junit.Assert;\n \n public class TestReplicationScenarios {\n \n@@ -3185,6 +3186,47 @@ public void testLoadCmPathMissing() throws IOException {\n     fs.create(path, false);\n   }\n \n+  @Test\n+  public void testDumpWithTableDirMissing() throws IOException {\n+    String dbName = createDB(testName.getMethodName(), driver);\n+    run(\"CREATE TABLE \" + dbName + \".normal(a int)\", driver);\n+    run(\"INSERT INTO \" + dbName + \".normal values (1)\", driver);\n+\n+    Path path = new Path(System.getProperty(\"test.warehouse.dir\", \"\"));\n+    path = new Path(path, dbName.toLowerCase() + \".db\");\n+    path = new Path(path, \"normal\");\n+    FileSystem fs = path.getFileSystem(hconf);\n+    fs.delete(path);\n+\n+    advanceDumpDir();\n+    CommandProcessorResponse ret = driver.run(\"REPL DUMP \" + dbName);\n+    Assert.assertEquals(ret.getResponseCode(), ErrorMsg.FILE_NOT_FOUND.getErrorCode());\n+\n+    run(\"DROP TABLE \" + dbName + \".normal\", driver);\n+    run(\"drop database \" + dbName, true, driver);\n+  }\n+\n+  @Test\n+  public void testDumpWithPartitionDirMissing() throws IOException {\n+    String dbName = createDB(testName.getMethodName(), driver);\n+    run(\"CREATE TABLE \" + dbName + \".normal(a int) PARTITIONED BY (part int)\", driver);\n+    run(\"INSERT INTO \" + dbName + \".normal partition (part= 124) values (1)\", driver);\n+\n+    Path path = new Path(System.getProperty(\"test.warehouse.dir\",\"\"));\n+    path = new Path(path, dbName.toLowerCase()+\".db\");\n+    path = new Path(path, \"normal\");\n+    path = new Path(path, \"part=124\");\n+    FileSystem fs = path.getFileSystem(hconf);\n+    fs.delete(path);\n+\n+    advanceDumpDir();\n+    CommandProcessorResponse ret = driver.run(\"REPL DUMP \" + dbName);\n+    Assert.assertEquals(ret.getResponseCode(), ErrorMsg.FILE_NOT_FOUND.getErrorCode());\n+\n+    run(\"DROP TABLE \" + dbName + \".normal\", driver);\n+    run(\"drop database \" + dbName, true, driver);\n+  }\n+\n   @Test\n   public void testDumpNonReplDatabase() throws IOException {\n     String dbName = createDBNonRepl(testName.getMethodName(), driver);",
                "deletions": 0
            },
            {
                "sha": "86c040532f0c07a6e79dd2418496a11545beb9f9",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java",
                "status": "modified",
                "changes": 52,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcidTables.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -32,6 +32,10 @@\n import org.apache.hadoop.hive.metastore.InjectableBehaviourObjectStore.CallerArguments;\n import org.apache.hadoop.hive.metastore.InjectableBehaviourObjectStore.BehaviourInjection;\n import static org.apache.hadoop.hive.metastore.ReplChangeManager.SOURCE_OF_REPLICATION;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n+import org.apache.hadoop.hive.ql.processors.CommandProcessorResponse;\n import org.junit.rules.TestName;\n import org.junit.rules.TestRule;\n import org.slf4j.Logger;\n@@ -63,10 +67,11 @@\n   protected static final Logger LOG = LoggerFactory.getLogger(TestReplicationScenarios.class);\n   private static WarehouseInstance primary, replica, replicaNonAcid;\n   private String primaryDbName, replicatedDbName;\n+  private static HiveConf conf;\n \n   @BeforeClass\n   public static void classLevelSetup() throws Exception {\n-    Configuration conf = new Configuration();\n+    conf = new HiveConf(TestReplicationScenariosAcidTables.class);\n     conf.set(\"dfs.client.use.datanode.hostname\", \"true\");\n     conf.set(\"hadoop.proxyuser.\" + Utils.getUGI().getShortUserName() + \".hosts\", \"*\");\n     MiniDFSCluster miniDFSCluster =\n@@ -432,4 +437,49 @@ public Boolean apply(@Nullable CallerArguments args) {\n             .run(\"select name from t2 order by name\")\n             .verifyResults(Arrays.asList(\"bob\", \"carl\"));\n   }\n+\n+  @Test\n+  public void testDumpAcidTableWithPartitionDirMissing() throws Throwable {\n+    String dbName = testName.getMethodName();\n+    primary.run(\"CREATE DATABASE \" + dbName + \" WITH DBPROPERTIES ( '\" +\n+            SOURCE_OF_REPLICATION + \"' = '1,2,3')\")\n+    .run(\"CREATE TABLE \" + dbName + \".normal (a int) PARTITIONED BY (part int)\" +\n+            \" STORED AS ORC TBLPROPERTIES ('transactional'='true')\")\n+    .run(\"INSERT INTO \" + dbName + \".normal partition (part= 124) values (1)\");\n+\n+    Path path = new Path(primary.warehouseRoot, dbName.toLowerCase()+\".db\");\n+    path = new Path(path, \"normal\");\n+    path = new Path(path, \"part=124\");\n+    FileSystem fs = path.getFileSystem(conf);\n+    fs.delete(path);\n+\n+    CommandProcessorResponse ret = primary.runCommand(\"REPL DUMP \" + dbName +\n+            \" with ('hive.repl.dump.include.acid.tables' = 'true')\");\n+    Assert.assertEquals(ret.getResponseCode(), ErrorMsg.FILE_NOT_FOUND.getErrorCode());\n+\n+    primary.run(\"DROP TABLE \" + dbName + \".normal\");\n+    primary.run(\"drop database \" + dbName);\n+  }\n+\n+  @Test\n+  public void testDumpAcidTableWithTableDirMissing() throws Throwable {\n+    String dbName = testName.getMethodName();\n+    primary.run(\"CREATE DATABASE \" + dbName + \" WITH DBPROPERTIES ( '\" +\n+            SOURCE_OF_REPLICATION + \"' = '1,2,3')\")\n+            .run(\"CREATE TABLE \" + dbName + \".normal (a int) \" +\n+                    \" STORED AS ORC TBLPROPERTIES ('transactional'='true')\")\n+            .run(\"INSERT INTO \" + dbName + \".normal values (1)\");\n+\n+    Path path = new Path(primary.warehouseRoot, dbName.toLowerCase()+\".db\");\n+    path = new Path(path, \"normal\");\n+    FileSystem fs = path.getFileSystem(conf);\n+    fs.delete(path);\n+\n+    CommandProcessorResponse ret = primary.runCommand(\"REPL DUMP \" + dbName +\n+            \" with ('hive.repl.dump.include.acid.tables' = 'true')\");\n+    Assert.assertEquals(ret.getResponseCode(), ErrorMsg.FILE_NOT_FOUND.getErrorCode());\n+\n+    primary.run(\"DROP TABLE \" + dbName + \".normal\");\n+    primary.run(\"drop database \" + dbName);\n+  }\n }",
                "deletions": 1
            },
            {
                "sha": "08f013031fe9c1e34da14649bb92a65fae562ee0",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java",
                "status": "modified",
                "changes": 42,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/TestReplicationScenariosAcrossInstances.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -68,6 +68,9 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.apache.hadoop.hive.metastore.ReplChangeManager.SOURCE_OF_REPLICATION;\n+import org.apache.hadoop.hive.ql.processors.CommandProcessorResponse;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n+import org.junit.Assert;\n \n public class TestReplicationScenariosAcrossInstances {\n   @Rule\n@@ -878,41 +881,6 @@ private void verifyIfSrcOfReplPropMissing(Map<String, String> props) {\n     assertFalse(props.containsKey(SOURCE_OF_REPLICATION));\n   }\n \n-  @Test\n-  public void testIfCkptSetForObjectsByBootstrapReplLoad() throws Throwable {\n-    WarehouseInstance.Tuple tuple = primary\n-            .run(\"use \" + primaryDbName)\n-            .run(\"create table t1 (id int)\")\n-            .run(\"insert into table t1 values (10)\")\n-            .run(\"create table t2 (place string) partitioned by (country string)\")\n-            .run(\"insert into table t2 partition(country='india') values ('bangalore')\")\n-            .run(\"insert into table t2 partition(country='uk') values ('london')\")\n-            .run(\"insert into table t2 partition(country='us') values ('sfo')\")\n-            .dump(primaryDbName, null);\n-\n-    replica.load(replicatedDbName, tuple.dumpLocation)\n-            .run(\"use \" + replicatedDbName)\n-            .run(\"repl status \" + replicatedDbName)\n-            .verifyResult(tuple.lastReplicationId)\n-            .run(\"show tables\")\n-            .verifyResults(new String[] { \"t1\", \"t2\" })\n-            .run(\"select country from t2\")\n-            .verifyResults(Arrays.asList(\"india\", \"uk\", \"us\"));\n-\n-    Database db = replica.getDatabase(replicatedDbName);\n-    verifyIfCkptSet(db.getParameters(), tuple.dumpLocation);\n-    Table t1 = replica.getTable(replicatedDbName, \"t1\");\n-    verifyIfCkptSet(t1.getParameters(), tuple.dumpLocation);\n-    Table t2 = replica.getTable(replicatedDbName, \"t2\");\n-    verifyIfCkptSet(t2.getParameters(), tuple.dumpLocation);\n-    Partition india = replica.getPartition(replicatedDbName, \"t2\", Collections.singletonList(\"india\"));\n-    verifyIfCkptSet(india.getParameters(), tuple.dumpLocation);\n-    Partition us = replica.getPartition(replicatedDbName, \"t2\", Collections.singletonList(\"us\"));\n-    verifyIfCkptSet(us.getParameters(), tuple.dumpLocation);\n-    Partition uk = replica.getPartition(replicatedDbName, \"t2\", Collections.singletonList(\"uk\"));\n-    verifyIfCkptSet(uk.getParameters(), tuple.dumpLocation);\n-  }\n-\n   @Test\n   public void testIncrementalDumpMultiIteration() throws Throwable {\n     WarehouseInstance.Tuple bootstrapTuple = primary.dump(primaryDbName, null);\n@@ -1182,7 +1150,9 @@ public Boolean apply(@Nullable CallerArguments args) {\n     assertEquals(0, replica.getForeignKeyList(replicatedDbName, \"t2\").size());\n \n     // Retry with different dump should fail.\n-    replica.loadFailure(replicatedDbName, tuple2.dumpLocation);\n+    CommandProcessorResponse ret = replica.runCommand(\"REPL LOAD \" + replicatedDbName +\n+            \" FROM '\" + tuple2.dumpLocation + \"'\");\n+    Assert.assertEquals(ret.getResponseCode(), ErrorMsg.REPL_BOOTSTRAP_LOAD_PATH_NOT_VALID.getErrorCode());\n \n     // Verify if create table is not called on table t1 but called for t2 and t3.\n     // Also, allow constraint creation only on t1 and t3. Foreign key creation on t2 fails.",
                "deletions": 36
            },
            {
                "sha": "f666df11415dc238e2cd9f7c190fd16ae7132929",
                "filename": "itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/parse/WarehouseInstance.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -77,6 +77,7 @@\n   HiveConf hiveConf;\n   MiniDFSCluster miniDFSCluster;\n   private HiveMetaStoreClient client;\n+  public final Path warehouseRoot;\n \n   private static int uniqueIdentifier = 0;\n \n@@ -90,7 +91,7 @@\n     assert miniDFSCluster.isDataNodeUp();\n     DistributedFileSystem fs = miniDFSCluster.getFileSystem();\n \n-    Path warehouseRoot = mkDir(fs, \"/warehouse\" + uniqueIdentifier);\n+    warehouseRoot = mkDir(fs, \"/warehouse\" + uniqueIdentifier);\n     if (StringUtils.isNotEmpty(keyNameForEncryptedZone)) {\n       fs.createEncryptionZone(warehouseRoot, keyNameForEncryptedZone);\n     }\n@@ -199,6 +200,10 @@ public WarehouseInstance run(String command) throws Throwable {\n     return this;\n   }\n \n+  public CommandProcessorResponse runCommand(String command) throws Throwable {\n+    return driver.run(command);\n+  }\n+\n   WarehouseInstance runFailure(String command) throws Throwable {\n     CommandProcessorResponse ret = driver.run(command);\n     if (ret.getException() == null) {",
                "deletions": 1
            },
            {
                "sha": "b2c9daa436039a0bd2ea57a3cb25c7d09b9c52b6",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/ErrorMsg.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -502,7 +502,8 @@\n   //if the error message is changed for REPL_EVENTS_MISSING_IN_METASTORE, then need modification in getNextNotification\n   //method in HiveMetaStoreClient\n   REPL_EVENTS_MISSING_IN_METASTORE(20016, \"Notification events are missing in the meta store.\"),\n-  REPL_BOOTSTRAP_LOAD_PATH_NOT_VALID(20017, \"Target database is bootstrapped from some other path.\"),\n+  REPL_BOOTSTRAP_LOAD_PATH_NOT_VALID(20017, \"Load path {0} not valid as target database is bootstrapped \" +\n+          \"from some other path : {1}.\"),\n   REPL_FILE_MISSING_FROM_SRC_AND_CM_PATH(20018, \"File is missing from both source and cm path.\"),\n   REPL_LOAD_PATH_NOT_FOUND(20019, \"Load path does not exist.\"),\n   REPL_DATABASE_IS_NOT_SOURCE_OF_REPLICATION(20020,",
                "deletions": 1
            },
            {
                "sha": "e48657c35d87a52f4269eae15f7146c333c0e125",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplDumpTask.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplDumpTask.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplDumpTask.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/ReplDumpTask.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -121,6 +121,10 @@ protected int execute(DriverContext driverContext) {\n         lastReplId = incrementalDump(dumpRoot, dmd, cmRoot);\n       }\n       prepareReturnValues(Arrays.asList(dumpRoot.toUri().toString(), String.valueOf(lastReplId)), dumpSchema);\n+    } catch (RuntimeException e) {\n+      LOG.error(\"failed\", e);\n+      setException(e);\n+      return ErrorMsg.getErrorMsg(e.getMessage()).getErrorCode();\n     } catch (Exception e) {\n       LOG.error(\"failed\", e);\n       setException(e);",
                "deletions": 0
            },
            {
                "sha": "0fd305a0f9abb5f19a8bf226fdcfcb056b1286d2",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/repl/bootstrap/load/LoadDatabase.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/bootstrap/load/LoadDatabase.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/bootstrap/load/LoadDatabase.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/bootstrap/load/LoadDatabase.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -79,7 +79,7 @@ public TaskTracker tasks() throws SemanticException {\n       }\n       return tracker;\n     } catch (Exception e) {\n-      throw new SemanticException(e);\n+      throw new SemanticException(e.getMessage(), e);\n     }\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "b1f731ff96da06e7ed677d7685b40bc3cae9511e",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/repl/util/ReplUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/util/ReplUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/util/ReplUtils.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/repl/util/ReplUtils.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.api.InvalidOperationException;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n import org.apache.hadoop.hive.ql.exec.Task;\n import org.apache.hadoop.hive.ql.exec.TaskFactory;\n import org.apache.hadoop.hive.ql.exec.repl.ReplStateLogWork;\n@@ -115,9 +116,8 @@ public static boolean replCkptStatus(String dbName, Map<String, String> props, S\n       if (props.get(REPL_CHECKPOINT_KEY).equals(dumpRoot)) {\n         return true;\n       }\n-      throw new InvalidOperationException(\"REPL LOAD with Dump: \" + dumpRoot\n-              + \" is not allowed as the target DB: \" + dbName\n-              + \" is already bootstrap loaded by another Dump \" + props.get(REPL_CHECKPOINT_KEY));\n+      throw new InvalidOperationException(ErrorMsg.REPL_BOOTSTRAP_LOAD_PATH_NOT_VALID.format(dumpRoot,\n+              props.get(REPL_CHECKPOINT_KEY)));\n     }\n     return false;\n   }",
                "deletions": 3
            },
            {
                "sha": "9e2479938278a01abe39e44fc5512e6f1e56525b",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/PartitionExport.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/PartitionExport.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/PartitionExport.java",
                "status": "modified",
                "changes": 24,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/PartitionExport.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -20,6 +20,7 @@\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n import org.apache.hadoop.hive.ql.metadata.Partition;\n import org.apache.hadoop.hive.ql.metadata.PartitionIterable;\n import org.apache.hadoop.hive.ql.parse.ReplicationSpec;\n@@ -29,13 +30,15 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.Future;\n \n import static org.apache.hadoop.hive.ql.parse.repl.dump.TableExport.Paths;\n \n@@ -70,10 +73,11 @@\n     this.callersSession = SessionState.get();\n   }\n \n-  void write(final ReplicationSpec forReplicationSpec) throws InterruptedException {\n+  void write(final ReplicationSpec forReplicationSpec) throws InterruptedException, HiveException {\n+    List<Future<?>> futures = new LinkedList<>();\n     ExecutorService producer = Executors.newFixedThreadPool(1,\n         new ThreadFactoryBuilder().setNameFormat(\"partition-submitter-thread-%d\").build());\n-    producer.submit(() -> {\n+    futures.add(producer.submit(() -> {\n       SessionState.setCurrentSessionState(callersSession);\n       for (Partition partition : partitionIterable) {\n         try {\n@@ -83,7 +87,7 @@ void write(final ReplicationSpec forReplicationSpec) throws InterruptedException\n               \"Error while queuing up the partitions for export of data files\", e);\n         }\n       }\n-    });\n+    }));\n     producer.shutdown();\n \n     ThreadFactory namingThreadFactory =\n@@ -102,7 +106,7 @@ void write(final ReplicationSpec forReplicationSpec) throws InterruptedException\n         continue;\n       }\n       LOG.debug(\"scheduling partition dump {}\", partition.getName());\n-      consumer.submit(() -> {\n+      futures.add(consumer.submit(() -> {\n         String partitionName = partition.getName();\n         String threadName = Thread.currentThread().getName();\n         LOG.debug(\"Thread: {}, start partition dump {}\", threadName, partitionName);\n@@ -115,11 +119,19 @@ void write(final ReplicationSpec forReplicationSpec) throws InterruptedException\n                   .export(forReplicationSpec);\n           LOG.debug(\"Thread: {}, finish partition dump {}\", threadName, partitionName);\n         } catch (Exception e) {\n-          throw new RuntimeException(\"Error while export of data files\", e);\n+          throw new RuntimeException(e.getMessage(), e);\n         }\n-      });\n+      }));\n     }\n     consumer.shutdown();\n+    for (Future<?> future : futures) {\n+      try {\n+        future.get();\n+      } catch (Exception e) {\n+        LOG.error(\"failed\", e.getCause());\n+        throw new HiveException(e.getCause().getMessage(), e.getCause());\n+      }\n+    }\n     // may be drive this via configuration as well.\n     consumer.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);\n   }",
                "deletions": 6
            },
            {
                "sha": "976104c210d0ef6bf633817a8d53d04a173ad001",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/Utils.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/Utils.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/Utils.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/Utils.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.api.Database;\n import org.apache.hadoop.hive.metastore.api.NotificationEvent;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n import org.apache.hadoop.hive.ql.exec.Utilities;\n import org.apache.hadoop.hive.ql.io.AcidUtils;\n import org.apache.hadoop.hive.ql.metadata.Hive;\n@@ -37,6 +38,7 @@\n import org.slf4j.LoggerFactory;\n \n import java.io.DataOutputStream;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.util.Collection;\n import java.util.Collections;\n@@ -204,7 +206,11 @@ public static boolean shouldReplicate(NotificationEvent tableForEvent,\n   static List<Path> getDataPathList(Path fromPath, ReplicationSpec replicationSpec, HiveConf conf)\n           throws IOException {\n     if (replicationSpec.isTransactionalTableDump()) {\n-      return AcidUtils.getValidDataPaths(fromPath, conf, replicationSpec.getValidWriteIdList());\n+      try {\n+        return AcidUtils.getValidDataPaths(fromPath, conf, replicationSpec.getValidWriteIdList());\n+      } catch (FileNotFoundException e) {\n+        throw new IOException(ErrorMsg.FILE_NOT_FOUND.format(e.getMessage()), e);\n+      }\n     } else {\n       return Collections.singletonList(fromPath);\n     }",
                "deletions": 1
            },
            {
                "sha": "e8eaae6961e7071e18e559291024ca369bfe5eb5",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/io/FileOperations.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/io/FileOperations.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/io/FileOperations.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/repl/dump/io/FileOperations.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.hadoop.hive.ql.parse.repl.dump.io;\n \n import java.io.BufferedWriter;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.OutputStreamWriter;\n import java.util.ArrayList;\n@@ -46,6 +47,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.hadoop.hive.ql.ErrorMsg.FILE_NOT_FOUND;\n+\n //TODO: this object is created once to call one method and then immediately destroyed.\n //So it's basically just a roundabout way to pass arguments to a static method. Simplify?\n public class FileOperations {\n@@ -156,6 +159,10 @@ private void exportFilesAsList() throws SemanticException, IOException, LoginExc\n         }\n         done = true;\n       } catch (IOException e) {\n+        if (e instanceof FileNotFoundException) {\n+          logger.error(\"exporting data files in dir : \" + dataPathList + \" to \" + exportRootDataDir + \" failed\");\n+          throw new FileNotFoundException(FILE_NOT_FOUND.format(e.getMessage()));\n+        }\n         repeat++;\n         logger.info(\"writeFilesList failed\", e);\n         if (repeat >= FileUtils.MAX_IO_ERROR_RETRY) {",
                "deletions": 0
            },
            {
                "sha": "93ac74c68b5e14687852a76fdb298557bf79a08a",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java",
                "blob_url": "https://github.com/apache/hive/blob/1c33fea890bc01a85eb336caf5d73a85652f91a3/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java",
                "raw_url": "https://github.com/apache/hive/raw/1c33fea890bc01a85eb336caf5d73a85652f91a3/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java?ref=1c33fea890bc01a85eb336caf5d73a85652f91a3",
                "patch": "@@ -125,13 +125,10 @@ public void alterTable(RawStore msdb, Warehouse wh, String catName, String dbnam\n \n     Table oldt = null;\n \n-    List<TransactionalMetaStoreEventListener> transactionalListeners = null;\n-    List<MetaStoreEventListener> listeners = null;\n+    List<TransactionalMetaStoreEventListener> transactionalListeners = handler.getTransactionalListeners();\n+    List<MetaStoreEventListener> listeners = handler.getListeners();\n     Map<String, String> txnAlterTableEventResponses = Collections.emptyMap();\n \n-    transactionalListeners = handler.getTransactionalListeners();\n-    listeners = handler.getListeners();\n-\n     try {\n       boolean rename = false;\n       List<Partition> parts;",
                "deletions": 5
            }
        ],
        "patched_files": [
            "ReplDumpTask.java",
            "PartitionExport.java",
            "FileOperations.java",
            "WarehouseInstance.java",
            "Utils.java",
            "ErrorMsg.java",
            "HiveAlterHandler.java",
            "LoadDatabase.java",
            "ReplUtils.java"
        ],
        "unit_tests": [
            "TestReplicationScenarios.java",
            "TestReplicationScenariosAcidTables.java",
            "TestReplicationScenariosAcrossInstances.java",
            "TestHiveAlterHandler.java",
            "TestErrorMsg.java"
        ]
    },
    "hive_4d62b46": {
        "repo": "hive",
        "message": "HIVE-6205 : alter <table> partition column throws NPE in authorization (Navis via Thejas Nair)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1561391 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/4d62b4621871c79de3210157dc33021d746b5b2b",
        "parent": "https://github.com/apache/hive/commit/2684a3ff8e8324be6541b35771b0171907ded0d1",
        "bug_id": "hive_4d62b46",
        "file": [
            {
                "sha": "8bb40455c48d14e77187a1d2ff8156764e19fd1a",
                "filename": "hcatalog/core/src/main/java/org/apache/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/hcatalog/core/src/main/java/org/apache/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/hcatalog/core/src/main/java/org/apache/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/main/java/org/apache/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzer.java?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -78,7 +78,7 @@ public ASTNode preAnalyze(HiveSemanticAnalyzerHookContext context, ASTNode ast)\n     case HiveParser.TOK_ALTERTABLE_PARTITION:\n       if (((ASTNode) ast.getChild(1)).getToken().getType() == HiveParser.TOK_ALTERTABLE_FILEFORMAT) {\n         return ast;\n-      } else if (((ASTNode) ast.getChild(1)).getToken().getType() == HiveParser.TOK_ALTERTABLE_ALTERPARTS_MERGEFILES) {\n+      } else if (((ASTNode) ast.getChild(1)).getToken().getType() == HiveParser.TOK_ALTERTABLE_MERGEFILES) {\n         // unsupported\n         throw new SemanticException(\"Operation not supported.\");\n       } else {",
                "deletions": 1
            },
            {
                "sha": "75f54e2ed414ea1461bc61a2fa01c224de12cbbf",
                "filename": "hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/hcatalog/core/src/main/java/org/apache/hive/hcatalog/cli/SemanticAnalysis/HCatSemanticAnalyzer.java?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -75,7 +75,7 @@ public ASTNode preAnalyze(HiveSemanticAnalyzerHookContext context, ASTNode ast)\n     case HiveParser.TOK_ALTERTABLE_PARTITION:\n       if (((ASTNode) ast.getChild(1)).getToken().getType() == HiveParser.TOK_ALTERTABLE_FILEFORMAT) {\n         return ast;\n-      } else if (((ASTNode) ast.getChild(1)).getToken().getType() == HiveParser.TOK_ALTERTABLE_ALTERPARTS_MERGEFILES) {\n+      } else if (((ASTNode) ast.getChild(1)).getToken().getType() == HiveParser.TOK_ALTERTABLE_MERGEFILES) {\n         // unsupported\n         throw new SemanticException(\"Operation not supported.\");\n       } else {",
                "deletions": 1
            },
            {
                "sha": "cb0c1a5b720955db0103b7494175d9f42cfd4fd5",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/Driver.java",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/Driver.java",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/Driver.java",
                "status": "modified",
                "changes": 75,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/Driver.java?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -527,55 +527,54 @@ private void doAuthorization(BaseSemanticAnalyzer sem)\n     SessionState ss = SessionState.get();\n     HiveOperation op = ss.getHiveOperation();\n     Hive db = sem.getDb();\n-    if(ss.isAuthorizationModeV2()){\n+    if (ss.isAuthorizationModeV2()) {\n       doAuthorizationV2(ss, op, inputs, outputs);\n       return;\n     }\n \n-    if (op != null) {\n-      if (op.equals(HiveOperation.CREATEDATABASE)) {\n-        ss.getAuthorizer().authorize(\n-            op.getInputRequiredPrivileges(), op.getOutputRequiredPrivileges());\n-      } else if (op.equals(HiveOperation.CREATETABLE_AS_SELECT)\n-          || op.equals(HiveOperation.CREATETABLE)) {\n-        ss.getAuthorizer().authorize(\n-            db.getDatabase(SessionState.get().getCurrentDatabase()), null,\n-            HiveOperation.CREATETABLE_AS_SELECT.getOutputRequiredPrivileges());\n-      } else {\n-        if (op.equals(HiveOperation.IMPORT)) {\n-          ImportSemanticAnalyzer isa = (ImportSemanticAnalyzer) sem;\n-          if (!isa.existsTable()) {\n-            ss.getAuthorizer().authorize(\n-                db.getDatabase(SessionState.get().getCurrentDatabase()), null,\n-                HiveOperation.CREATETABLE_AS_SELECT.getOutputRequiredPrivileges());\n-          }\n+    if (op == null) {\n+      throw new HiveException(\"Operation should not be null\");\n+    }\n+    if (op.equals(HiveOperation.CREATEDATABASE)) {\n+      ss.getAuthorizer().authorize(\n+          op.getInputRequiredPrivileges(), op.getOutputRequiredPrivileges());\n+    } else if (op.equals(HiveOperation.CREATETABLE_AS_SELECT)\n+        || op.equals(HiveOperation.CREATETABLE)) {\n+      ss.getAuthorizer().authorize(\n+          db.getDatabase(SessionState.get().getCurrentDatabase()), null,\n+          HiveOperation.CREATETABLE_AS_SELECT.getOutputRequiredPrivileges());\n+    } else {\n+      if (op.equals(HiveOperation.IMPORT)) {\n+        ImportSemanticAnalyzer isa = (ImportSemanticAnalyzer) sem;\n+        if (!isa.existsTable()) {\n+          ss.getAuthorizer().authorize(\n+              db.getDatabase(SessionState.get().getCurrentDatabase()), null,\n+              HiveOperation.CREATETABLE_AS_SELECT.getOutputRequiredPrivileges());\n         }\n       }\n-      if (outputs != null && outputs.size() > 0) {\n-        //do authorization for each output\n-        for (WriteEntity write : outputs) {\n-          if (write.getType() == Entity.Type.DATABASE) {\n-            ss.getAuthorizer().authorize(write.getDatabase(),\n-                null, op.getOutputRequiredPrivileges());\n-            continue;\n-          }\n-\n-          if (write.getType() == WriteEntity.Type.PARTITION) {\n-            Partition part = db.getPartition(write.getTable(), write\n-                .getPartition().getSpec(), false);\n-            if (part != null) {\n-              ss.getAuthorizer().authorize(write.getPartition(), null,\n-                      op.getOutputRequiredPrivileges());\n-              continue;\n-            }\n-          }\n+    }\n+    if (outputs != null && outputs.size() > 0) {\n+      for (WriteEntity write : outputs) {\n+        if (write.getType() == Entity.Type.DATABASE) {\n+          ss.getAuthorizer().authorize(write.getDatabase(),\n+              null, op.getOutputRequiredPrivileges());\n+          continue;\n+        }\n \n-          if (write.getTable() != null) {\n-            ss.getAuthorizer().authorize(write.getTable(), null,\n+        if (write.getType() == WriteEntity.Type.PARTITION) {\n+          Partition part = db.getPartition(write.getTable(), write\n+              .getPartition().getSpec(), false);\n+          if (part != null) {\n+            ss.getAuthorizer().authorize(write.getPartition(), null,\n                     op.getOutputRequiredPrivileges());\n+            continue;\n           }\n         }\n \n+        if (write.getTable() != null) {\n+          ss.getAuthorizer().authorize(write.getTable(), null,\n+                  op.getOutputRequiredPrivileges());\n+        }\n       }\n     }\n ",
                "deletions": 38
            },
            {
                "sha": "f4d9a83bf3c792bb5e7d18fcf3438a06fd1780f7",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/DDLSemanticAnalyzer.java?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -233,11 +233,11 @@ public void analyzeInternal(ASTNode ast) throws SemanticException {\n       ast = (ASTNode) ast.getChild(1);\n       if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_FILEFORMAT) {\n         analyzeAlterTableFileFormat(ast, tableName, partSpec);\n-      } else if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE) {\n+      } else if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_PROTECTMODE) {\n         analyzeAlterTableProtectMode(ast, tableName, partSpec);\n       } else if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_LOCATION) {\n         analyzeAlterTableLocation(ast, tableName, partSpec);\n-      } else if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_ALTERPARTS_MERGEFILES) {\n+      } else if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_MERGEFILES) {\n         analyzeAlterTablePartMergeFiles(tablePart, ast, tableName, partSpec);\n       } else if (ast.getToken().getType() == HiveParser.TOK_ALTERTABLE_SERIALIZER) {\n         analyzeAlterTableSerde(ast, tableName, partSpec);\n@@ -365,8 +365,8 @@ public void analyzeInternal(ASTNode ast) throws SemanticException {\n     case HiveParser.TOK_ALTERTABLE_DROPPARTS:\n       analyzeAlterTableDropParts(ast, false);\n       break;\n-    case HiveParser.TOK_ALTERTABLE_ALTERPARTS:\n-      analyzeAlterTableAlterParts(ast);\n+    case HiveParser.TOK_ALTERTABLE_PARTCOLTYPE:\n+      analyzeAlterTablePartColType(ast);\n       break;\n     case HiveParser.TOK_ALTERTABLE_PROPERTIES:\n       analyzeAlterTableProps(ast, false, false);\n@@ -2433,7 +2433,7 @@ private void analyzeAlterTableDropParts(ASTNode ast, boolean expectView)\n         dropTblDesc), conf));\n   }\n \n-  private void analyzeAlterTableAlterParts(ASTNode ast)\n+  private void analyzeAlterTablePartColType(ASTNode ast)\n       throws SemanticException {\n     // get table name\n     String tblName = getUnescapedName((ASTNode)ast.getChild(0));",
                "deletions": 5
            },
            {
                "sha": "216c361148a695d32fa1eb67e51fb14e54843abf",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g",
                "status": "modified",
                "changes": 20,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/HiveParser.g?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -138,8 +138,9 @@ TOK_ALTERTABLE_RENAMEPART;\n TOK_ALTERTABLE_REPLACECOLS;\n TOK_ALTERTABLE_ADDPARTS;\n TOK_ALTERTABLE_DROPPARTS;\n-TOK_ALTERTABLE_ALTERPARTS;\n-TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE;\n+TOK_ALTERTABLE_PARTCOLTYPE;\n+TOK_ALTERTABLE_PROTECTMODE;\n+TOK_ALTERTABLE_MERGEFILES;\n TOK_ALTERTABLE_TOUCH;\n TOK_ALTERTABLE_ARCHIVE;\n TOK_ALTERTABLE_UNARCHIVE;\n@@ -285,7 +286,6 @@ TOK_DATABASEPROPERTIES;\n TOK_DATABASELOCATION;\n TOK_DBPROPLIST;\n TOK_ALTERDATABASE_PROPERTIES;\n-TOK_ALTERTABLE_ALTERPARTS_MERGEFILES;\n TOK_TABNAME;\n TOK_TABSRC;\n TOK_RESTRICT;\n@@ -900,8 +900,16 @@ alterTableStatementSuffix\n     | alterTblPartitionStatement\n     | alterStatementSuffixSkewedby\n     | alterStatementSuffixExchangePartition\n+    | alterStatementPartitionKeyType\n     ;\n \n+alterStatementPartitionKeyType\n+@init {msgs.push(\"alter partition key type\"); }\n+@after {msgs.pop();}\n+\t: identifier KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN\n+\t-> ^(TOK_ALTERTABLE_PARTCOLTYPE identifier columnNameType)\n+\t;\n+\n alterViewStatementSuffix\n @init { msgs.push(\"alter view statement\"); }\n @after { msgs.pop(); }\n@@ -1058,8 +1066,6 @@ alterTblPartitionStatement\n @after {msgs.pop();}\n   : tablePartitionPrefix alterTblPartitionStatementSuffix\n   -> ^(TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix)\n-  |Identifier KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN\n-  -> ^(TOK_ALTERTABLE_ALTERPARTS Identifier columnNameType)\n   ;\n \n alterTblPartitionStatementSuffix\n@@ -1151,7 +1157,7 @@ alterStatementSuffixProtectMode\n @init { msgs.push(\"alter partition protect mode statement\"); }\n @after { msgs.pop(); }\n     : alterProtectMode\n-    -> ^(TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode)\n+    -> ^(TOK_ALTERTABLE_PROTECTMODE alterProtectMode)\n     ;\n \n alterStatementSuffixRenamePart\n@@ -1165,7 +1171,7 @@ alterStatementSuffixMergeFiles\n @init { msgs.push(\"\"); }\n @after { msgs.pop(); }\n     : KW_CONCATENATE\n-    -> ^(TOK_ALTERTABLE_ALTERPARTS_MERGEFILES)\n+    -> ^(TOK_ALTERTABLE_MERGEFILES)\n     ;\n \n alterProtectMode",
                "deletions": 7
            },
            {
                "sha": "2495c40e0c1a0f0f60e8fe12f8265723cdd51c9b",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzerFactory.java",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzerFactory.java",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzerFactory.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzerFactory.java?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -102,11 +102,12 @@\n     commandType.put(HiveParser.TOK_ALTERTABLE_SKEWED, HiveOperation.ALTERTABLE_SKEWED);\n     commandType.put(HiveParser.TOK_ANALYZE, HiveOperation.ANALYZE_TABLE);\n     commandType.put(HiveParser.TOK_ALTERVIEW_RENAME, HiveOperation.ALTERVIEW_RENAME);\n+    commandType.put(HiveParser.TOK_ALTERTABLE_PARTCOLTYPE, HiveOperation.ALTERTABLE_PARTCOLTYPE);\n   }\n \n   static {\n     tablePartitionCommandType.put(\n-        HiveParser.TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE,\n+        HiveParser.TOK_ALTERTABLE_PROTECTMODE,\n         new HiveOperation[] { HiveOperation.ALTERTABLE_PROTECTMODE,\n             HiveOperation.ALTERPARTITION_PROTECTMODE });\n     tablePartitionCommandType.put(HiveParser.TOK_ALTERTABLE_FILEFORMAT,\n@@ -115,7 +116,7 @@\n     tablePartitionCommandType.put(HiveParser.TOK_ALTERTABLE_LOCATION,\n         new HiveOperation[] { HiveOperation.ALTERTABLE_LOCATION,\n             HiveOperation.ALTERPARTITION_LOCATION });\n-    tablePartitionCommandType.put(HiveParser.TOK_ALTERTABLE_ALTERPARTS_MERGEFILES,\n+    tablePartitionCommandType.put(HiveParser.TOK_ALTERTABLE_MERGEFILES,\n         new HiveOperation[] {HiveOperation.ALTERTABLE_MERGEFILES,\n             HiveOperation.ALTERPARTITION_MERGEFILES });\n     tablePartitionCommandType.put(HiveParser.TOK_ALTERTABLE_SERIALIZER,\n@@ -172,6 +173,7 @@ public static BaseSemanticAnalyzer get(HiveConf conf, ASTNode tree)\n       case HiveParser.TOK_DROPTABLE_PROPERTIES:\n       case HiveParser.TOK_ALTERTABLE_SERIALIZER:\n       case HiveParser.TOK_ALTERTABLE_SERDEPROPERTIES:\n+      case HiveParser.TOK_ALTERTABLE_PARTCOLTYPE:\n       case HiveParser.TOK_ALTERINDEX_REBUILD:\n       case HiveParser.TOK_ALTERINDEX_PROPERTIES:\n       case HiveParser.TOK_ALTERVIEW_PROPERTIES:\n@@ -196,7 +198,6 @@ public static BaseSemanticAnalyzer get(HiveConf conf, ASTNode tree)\n       case HiveParser.TOK_ALTERTABLE_TOUCH:\n       case HiveParser.TOK_ALTERTABLE_ARCHIVE:\n       case HiveParser.TOK_ALTERTABLE_UNARCHIVE:\n-      case HiveParser.TOK_ALTERTABLE_ALTERPARTS:\n       case HiveParser.TOK_LOCKTABLE:\n       case HiveParser.TOK_UNLOCKTABLE:\n       case HiveParser.TOK_LOCKDB:",
                "deletions": 3
            },
            {
                "sha": "e1a3dce303df13165fc064bdb5a92ec57eba8aa6",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/plan/HiveOperation.java",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/plan/HiveOperation.java",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/plan/HiveOperation.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/plan/HiveOperation.java?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -106,6 +106,7 @@\n   ALTERTABLE_SKEWED(\"ALTERTABLE_SKEWED\", new Privilege[] {Privilege.ALTER_METADATA}, null),\n   ALTERTBLPART_SKEWED_LOCATION(\"ALTERTBLPART_SKEWED_LOCATION\",\n       new Privilege[] {Privilege.ALTER_DATA}, null),\n+  ALTERTABLE_PARTCOLTYPE(\"ALTERTABLE_PARTCOLTYPE\", new Privilege[] { Privilege.SELECT }, new Privilege[] { Privilege.ALTER_DATA }),\n   ALTERVIEW_RENAME(\"ALTERVIEW_RENAME\", new Privilege[] {Privilege.ALTER_METADATA}, null),\n   ;\n ",
                "deletions": 0
            },
            {
                "sha": "0fcfe5252242c570ac37a700b2d0cf2a52e1e8e2",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/HiveOperationType.java",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/HiveOperationType.java",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/HiveOperationType.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/security/authorization/plugin/HiveOperationType.java?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -49,6 +49,7 @@\n   ALTERTABLE_UNARCHIVE,\n   ALTERTABLE_PROPERTIES,\n   ALTERTABLE_SERIALIZER,\n+  ALTERTABLE_PARTCOLTYPE,\n   ALTERPARTITION_SERIALIZER,\n   ALTERTABLE_SERDEPROPERTIES,\n   ALTERPARTITION_SERDEPROPERTIES,",
                "deletions": 0
            },
            {
                "sha": "c8f4021d7c47d51a4128b46bba53d6d70cbc52b3",
                "filename": "ql/src/test/results/clientnegative/alter_partition_coltype_2columns.q.out",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/test/results/clientnegative/alter_partition_coltype_2columns.q.out",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/test/results/clientnegative/alter_partition_coltype_2columns.q.out",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientnegative/alter_partition_coltype_2columns.q.out?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -33,4 +33,4 @@ ts                  \tstring              \tNone\n \t \t \n dt                  \tstring              \tNone                \n ts                  \tstring              \tNone                \n-FAILED: ParseException line 4:50 mismatched input ',' expecting ) near 'int' in alter table partition statement\n+FAILED: ParseException line 4:50 mismatched input ',' expecting ) near 'int' in alter partition key type",
                "deletions": 1
            },
            {
                "sha": "04b9b2ce5c3639d8a5fae29514b396b199c2c8c5",
                "filename": "ql/src/test/results/clientpositive/alter_partition_coltype.q.out",
                "blob_url": "https://github.com/apache/hive/blob/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/test/results/clientpositive/alter_partition_coltype.q.out",
                "raw_url": "https://github.com/apache/hive/raw/4d62b4621871c79de3210157dc33021d746b5b2b/ql/src/test/results/clientpositive/alter_partition_coltype.q.out",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/results/clientpositive/alter_partition_coltype.q.out?ref=4d62b4621871c79de3210157dc33021d746b5b2b",
                "patch": "@@ -50,11 +50,11 @@ POSTHOOK: Lineage: alter_coltype PARTITION(dt=100x,ts=6:30pm).value SIMPLE [(src\n 25\n PREHOOK: query: -- alter partition key column data type for dt column.\n alter table alter_coltype partition column (dt int)\n-PREHOOK: type: null\n+PREHOOK: type: ALTERTABLE_PARTCOLTYPE\n PREHOOK: Input: default@alter_coltype\n POSTHOOK: query: -- alter partition key column data type for dt column.\n alter table alter_coltype partition column (dt int)\n-POSTHOOK: type: null\n+POSTHOOK: type: ALTERTABLE_PARTCOLTYPE\n POSTHOOK: Input: default@alter_coltype\n POSTHOOK: Output: default@alter_coltype\n POSTHOOK: Lineage: alter_coltype PARTITION(dt=100x,ts=6:30pm).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]\n@@ -240,22 +240,22 @@ POSTHOOK: Lineage: alter_coltype PARTITION(dt=100x,ts=6:30pm).value SIMPLE [(src\n 0\n PREHOOK: query: -- alter partition key column data type for ts column.\n alter table alter_coltype partition column (ts double)\n-PREHOOK: type: null\n+PREHOOK: type: ALTERTABLE_PARTCOLTYPE\n PREHOOK: Input: default@alter_coltype\n POSTHOOK: query: -- alter partition key column data type for ts column.\n alter table alter_coltype partition column (ts double)\n-POSTHOOK: type: null\n+POSTHOOK: type: ALTERTABLE_PARTCOLTYPE\n POSTHOOK: Input: default@alter_coltype\n POSTHOOK: Output: default@alter_coltype\n POSTHOOK: Lineage: alter_coltype PARTITION(dt=10,ts=3.0).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]\n POSTHOOK: Lineage: alter_coltype PARTITION(dt=10,ts=3.0).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]\n POSTHOOK: Lineage: alter_coltype PARTITION(dt=100x,ts=6:30pm).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]\n POSTHOOK: Lineage: alter_coltype PARTITION(dt=100x,ts=6:30pm).value SIMPLE [(src1)src1.FieldSchema(name:value, type:string, comment:default), ]\n PREHOOK: query: alter table alter_coltype partition column (dt string)\n-PREHOOK: type: null\n+PREHOOK: type: ALTERTABLE_PARTCOLTYPE\n PREHOOK: Input: default@alter_coltype\n POSTHOOK: query: alter table alter_coltype partition column (dt string)\n-POSTHOOK: type: null\n+POSTHOOK: type: ALTERTABLE_PARTCOLTYPE\n POSTHOOK: Input: default@alter_coltype\n POSTHOOK: Output: default@alter_coltype\n POSTHOOK: Lineage: alter_coltype PARTITION(dt=10,ts=3.0).key SIMPLE [(src1)src1.FieldSchema(name:key, type:string, comment:default), ]",
                "deletions": 6
            }
        ],
        "patched_files": [
            "Driver.java",
            "SemanticAnalyzerFactory.java",
            "HiveOperationType.java"
        ],
        "unit_tests": [
            "TestSemanticAnalyzerFactory.java",
            "TestDriver.java",
            "TestHiveOperationType.java"
        ]
    },
    "hive_463546f": {
        "repo": "hive",
        "message": "HIVE-6739 : Hive HBase query fails on Tez due to missing jars and then due to NPE in getSplits (Sergey Shelukhin, reviewed by Vikram Dixit K)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1585602 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/hive/commit/463546f4b03e29aaf9f55c11e33f13e53be1840d",
        "parent": "https://github.com/apache/hive/commit/a989afbdb18f8e7da707f0dda5e481befd3d62fc",
        "bug_id": "hive_463546f",
        "file": [
            {
                "sha": "14d188ff54e4d7e98704139cbf9c262f056967f1",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java",
                "status": "modified",
                "changes": 38,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/DagUtils.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -604,7 +604,7 @@ public PreWarmContext createPreWarmContext(TezSessionConfiguration sessionConfig\n     combinedResources.putAll(sessionConfig.getSessionResources());\n \n     try {\n-      for(LocalResource lr : localizeTempFiles(conf)) {\n+      for(LocalResource lr : localizeTempFilesFromConf(getHiveJarDirectory(conf), conf)) {\n         combinedResources.put(getBaseName(lr), lr);\n       }\n     } catch(LoginException le) {\n@@ -665,7 +665,8 @@ public Path getDefaultDestDir(Configuration conf) throws LoginException, IOExcep\n    * @throws IOException when hdfs operation fails\n    * @throws LoginException when getDefaultDestDir fails with the same exception\n    */\n-  public List<LocalResource> localizeTempFiles(Configuration conf) throws IOException, LoginException {\n+  public List<LocalResource> localizeTempFilesFromConf(\n+      String hdfsDirPathStr, Configuration conf) throws IOException, LoginException {\n     List<LocalResource> tmpResources = new ArrayList<LocalResource>();\n \n     String addedFiles = Utilities.getResourceFiles(conf, SessionState.ResourceType.FILE);\n@@ -683,15 +684,32 @@ public Path getDefaultDestDir(Configuration conf) throws LoginException, IOExcep\n \n     String auxJars = HiveConf.getVar(conf, HiveConf.ConfVars.HIVEAUXJARS);\n \n-    // need to localize the additional jars and files\n+    String allFiles = auxJars + \",\" + addedJars + \",\" + addedFiles + \",\" + addedArchives;\n+    addTempFiles(conf, tmpResources, hdfsDirPathStr, allFiles.split(\",\"));\n+    return tmpResources;\n+  }\n \n-    // we need the directory on hdfs to which we shall put all these files\n-    // Use HIVE_JAR_DIRECTORY only if it's set explicitly; otherwise use default directory\n-    String hdfsDirPathStr = getHiveJarDirectory(conf);\n+  /**\n+   * Localizes files, archives and jars from a provided array of names.\n+   * @param hdfsDirPathStr Destination directoty in HDFS.\n+   * @param conf Configuration.\n+   * @param inputOutputJars The file names to localize.\n+   * @return List<LocalResource> local resources to add to execution\n+   * @throws IOException when hdfs operation fails.\n+   * @throws LoginException when getDefaultDestDir fails with the same exception\n+   */\n+  public List<LocalResource> localizeTempFiles(String hdfsDirPathStr, Configuration conf,\n+      String[] inputOutputJars) throws IOException, LoginException {\n+    if (inputOutputJars == null) return null;\n+    List<LocalResource> tmpResources = new ArrayList<LocalResource>();\n+    addTempFiles(conf, tmpResources, hdfsDirPathStr, inputOutputJars);\n+    return tmpResources;\n+  }\n \n-    String allFiles = auxJars + \",\" + addedJars + \",\" + addedFiles + \",\" + addedArchives;\n-    String[] allFilesArr = allFiles.split(\",\");\n-    for (String file : allFilesArr) {\n+  private void addTempFiles(Configuration conf,\n+      List<LocalResource> tmpResources, String hdfsDirPathStr,\n+      String[] files) throws IOException {\n+    for (String file : files) {\n       if (!StringUtils.isNotBlank(file)) {\n         continue;\n       }\n@@ -700,8 +718,6 @@ public Path getDefaultDestDir(Configuration conf) throws LoginException, IOExcep\n           new Path(hdfsFilePathStr), conf);\n       tmpResources.add(localResource);\n     }\n-\n-    return tmpResources;\n   }\n \n   public String getHiveJarDirectory(Configuration conf) throws IOException, LoginException {",
                "deletions": 11
            },
            {
                "sha": "6cbe8c55d55cc15bb6458f31a1e813cf27fae83e",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionPoolManager.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionPoolManager.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionPoolManager.java",
                "status": "modified",
                "changes": 30,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionPoolManager.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -64,7 +64,7 @@ public void startPool() throws Exception {\n       HiveConf newConf = new HiveConf(initConf);\n       TezSessionState sessionState = defaultQueuePool.take();\n       newConf.set(\"tez.queue.name\", sessionState.getQueueName());\n-      sessionState.open(TezSessionState.makeSessionId(), newConf);\n+      sessionState.open(newConf);\n       defaultQueuePool.put(sessionState);\n     }\n   }\n@@ -91,7 +91,7 @@ public void setupPool(HiveConf conf) throws InterruptedException {\n         if (queue.length() == 0) {\n           continue;\n         }\n-        TezSessionState sessionState = createSession();\n+        TezSessionState sessionState = createSession(TezSessionState.makeSessionId());\n         sessionState.setQueueName(queue);\n         sessionState.setDefault();\n         LOG.info(\"Created new tez session for queue: \" + queue +\n@@ -102,7 +102,7 @@ public void setupPool(HiveConf conf) throws InterruptedException {\n     }\n   }\n \n-  private TezSessionState getSession(HiveConf conf)\n+  private TezSessionState getSession(HiveConf conf, boolean doOpen)\n       throws Exception {\n \n     String queueName = conf.get(\"tez.queue.name\");\n@@ -120,7 +120,7 @@ private TezSessionState getSession(HiveConf conf)\n       LOG.info(\"QueueName: \" + queueName + \" nonDefaultUser: \" + nonDefaultUser +\n           \" defaultQueuePool: \" + defaultQueuePool +\n           \" blockingQueueLength: \" + blockingQueueLength);\n-      return getNewSessionState(conf, queueName);\n+      return getNewSessionState(conf, queueName, doOpen);\n     }\n \n     LOG.info(\"Choosing a session from the defaultQueuePool\");\n@@ -130,16 +130,21 @@ private TezSessionState getSession(HiveConf conf)\n   /**\n    * @param conf HiveConf that is used to initialize the session\n    * @param queueName could be null. Set in the tez session.\n+   * @param doOpen\n    * @return\n    * @throws Exception\n    */\n   private TezSessionState getNewSessionState(HiveConf conf,\n-      String queueName) throws Exception {\n-    TezSessionState retTezSessionState = createSession();\n+      String queueName, boolean doOpen) throws Exception {\n+    TezSessionState retTezSessionState = createSession(TezSessionState.makeSessionId());\n     retTezSessionState.setQueueName(queueName);\n-    retTezSessionState.open(TezSessionState.makeSessionId(), conf);\n+    String what = \"Created\";\n+    if (doOpen) {\n+      retTezSessionState.open(conf);\n+      what = \"Started\";\n+    }\n \n-    LOG.info(\"Started a new session for queue: \" + queueName +\n+    LOG.info(what + \" a new session for queue: \" + queueName +\n         \" session id: \" + retTezSessionState.getSessionId());\n     return retTezSessionState;\n   }\n@@ -179,11 +184,12 @@ public void stop() throws Exception {\n     }\n   }\n \n-  protected TezSessionState createSession() {\n-    return new TezSessionState();\n+  protected TezSessionState createSession(String sessionId) {\n+    return new TezSessionState(sessionId);\n   }\n \n-  public TezSessionState getSession(TezSessionState session, HiveConf conf) throws Exception {\n+  public TezSessionState getSession(\n+      TezSessionState session, HiveConf conf, boolean doOpen) throws Exception {\n     if (canWorkWithSameSession(session, conf)) {\n       return session;\n     }\n@@ -192,7 +198,7 @@ public TezSessionState getSession(TezSessionState session, HiveConf conf) throws\n       session.close(false);\n     }\n \n-    return getSession(conf);\n+    return getSession(conf, doOpen);\n   }\n \n   /*",
                "deletions": 12
            },
            {
                "sha": "74940e68846184586a4fc97cc70868ffd5bd1379",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java",
                "status": "modified",
                "changes": 35,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -23,6 +23,7 @@\n import java.net.URISyntaxException;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n@@ -68,6 +69,8 @@\n   private String queueName;\n   private boolean defaultQueue = false;\n \n+  private HashSet<String> additionalAmFiles = null;\n+\n   private static List<TezSessionState> openSessions\n     = Collections.synchronizedList(new LinkedList<TezSessionState>());\n \n@@ -83,8 +86,9 @@ public TezSessionState(DagUtils utils) {\n    * Constructor. We do not automatically connect, because we only want to\n    * load tez classes when the user has tez installed.\n    */\n-  public TezSessionState() {\n+  public TezSessionState(String sessionId) {\n     this(DagUtils.getInstance());\n+    this.sessionId = sessionId;\n   }\n \n   /**\n@@ -106,6 +110,11 @@ public static String makeSessionId() {\n     return UUID.randomUUID().toString();\n   }\n \n+  public void open(HiveConf conf)\n+      throws IOException, LoginException, URISyntaxException, TezException {\n+    open(conf, null);\n+  }\n+\n   /**\n    * Creates a tez session. A session is tied to either a cli/hs2 session. You can\n    * submit multiple DAGs against a session (as long as they are executed serially).\n@@ -114,10 +123,8 @@ public static String makeSessionId() {\n    * @throws LoginException\n    * @throws TezException\n    */\n-  public void open(String sessionId, HiveConf conf)\n-    throws IOException, LoginException, URISyntaxException, TezException {\n-\n-    this.sessionId = sessionId;\n+  public void open(HiveConf conf, List<LocalResource> additionalLr)\n+    throws IOException, LoginException, IllegalArgumentException, URISyntaxException, TezException {\n     this.conf = conf;\n \n     // create the tez tmp dir\n@@ -135,6 +142,14 @@ public void open(String sessionId, HiveConf conf)\n     // configuration for the application master\n     Map<String, LocalResource> commonLocalResources = new HashMap<String, LocalResource>();\n     commonLocalResources.put(utils.getBaseName(appJarLr), appJarLr);\n+    if (additionalLr != null) {\n+      additionalAmFiles = new HashSet<String>();\n+      for (LocalResource lr : additionalLr) {\n+        String baseName = utils.getBaseName(lr);\n+        additionalAmFiles.add(baseName);\n+        commonLocalResources.put(baseName, lr);\n+      }\n+    }\n \n     // Create environment for AM.\n     Map<String, String> amEnv = new HashMap<String, String>();\n@@ -174,6 +189,15 @@ public void open(String sessionId, HiveConf conf)\n     openSessions.add(this);\n   }\n \n+  public boolean hasResources(List<LocalResource> lrs) {\n+    if (lrs == null || lrs.isEmpty()) return true;\n+    if (additionalAmFiles == null || additionalAmFiles.isEmpty()) return false;\n+    for (LocalResource lr : lrs) {\n+      if (!additionalAmFiles.contains(utils.getBaseName(lr))) return false;\n+    }\n+    return true;\n+  }\n+\n   /**\n    * Close a tez session. Will cleanup any tez/am related resources. After closing a session\n    * no further DAGs can be executed against it.\n@@ -202,6 +226,7 @@ public void close(boolean keepTmpDir) throws TezException, IOException {\n     tezScratchDir = null;\n     conf = null;\n     appJarLr = null;\n+    additionalAmFiles = null;\n   }\n \n   public String getSessionId() {",
                "deletions": 5
            },
            {
                "sha": "c355d5aed2d2f9c8550c8ec56132b9fc68a80c30",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java",
                "status": "modified",
                "changes": 61,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezTask.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.Collections;\n import java.util.EnumSet;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n@@ -103,45 +104,62 @@ public int execute(DriverContext driverContext) {\n     TezSessionState session = null;\n \n     try {\n-      // Get or create Context object. If we create it we have to clean\n-      // it later as well.\n+      // Get or create Context object. If we create it we have to clean it later as well.\n       ctx = driverContext.getCtx();\n       if (ctx == null) {\n         ctx = new Context(conf);\n         cleanContext = true;\n       }\n \n-      // Need to remove this static hack. But this is the way currently to\n-      // get a session.\n+      // Need to remove this static hack. But this is the way currently to get a session.\n       SessionState ss = SessionState.get();\n       session = ss.getTezSession();\n-      session = TezSessionPoolManager.getInstance().getSession(session, conf);\n+      session = TezSessionPoolManager.getInstance().getSession(session, conf, false);\n       ss.setTezSession(session);\n \n-      // if it's not running start it.\n-      if (!session.isOpen()) {\n-        // can happen if the user sets the tez flag after the session was\n-        // established\n-        LOG.info(\"Tez session hasn't been created yet. Opening session\");\n-        session.open(session.getSessionId(), conf);\n-      }\n+      // jobConf will hold all the configuration for hadoop, tez, and hive\n+      JobConf jobConf = utils.createConfiguration(conf);\n+\n+      // Get all user jars from work (e.g. input format stuff).\n+      String[] inputOutputJars = work.configureJobConfAndExtractJars(jobConf);\n \n       // we will localize all the files (jars, plans, hashtables) to the\n-      // scratch dir. let's create this first.\n+      // scratch dir. let's create this and tmp first.\n       Path scratchDir = ctx.getMRScratchDir();\n-\n-      // create the tez tmp dir\n       utils.createTezDir(scratchDir, conf);\n \n-      // jobConf will hold all the configuration for hadoop, tez, and hive\n-      JobConf jobConf = utils.createConfiguration(conf);\n+      // we need to get the user specified local resources for this dag\n+      String hiveJarDir = utils.getHiveJarDirectory(conf);\n+      List<LocalResource> additionalLr = utils.localizeTempFilesFromConf(hiveJarDir, conf);\n+      List<LocalResource> handlerLr = utils.localizeTempFiles(hiveJarDir, conf, inputOutputJars);\n+      if (handlerLr != null) {\n+        additionalLr.addAll(handlerLr);\n+      }\n+\n+      // If we have any jars from input format, we need to restart the session because\n+      // AM will need them; so, AM has to be restarted. What a mess...\n+      if (!session.hasResources(handlerLr)) {\n+        if (session.isOpen()) {\n+          LOG.info(\"Tez session being reopened to pass custom jars to AM\");\n+          session.close(false);\n+          session = TezSessionPoolManager.getInstance().getSession(null, conf, false);\n+          ss.setTezSession(session);\n+        }\n+        session.open(conf, additionalLr);\n+      }\n+      if (!session.isOpen()) {\n+        // can happen if the user sets the tez flag after the session was\n+        // established\n+        LOG.info(\"Tez session hasn't been created yet. Opening session\");\n+        session.open(conf);\n+      }\n \n       // unless already installed on all the cluster nodes, we'll have to\n       // localize hive-exec.jar as well.\n       LocalResource appJarLr = session.getAppJarLr();\n \n       // next we translate the TezWork to a Tez DAG\n-      DAG dag = build(jobConf, work, scratchDir, appJarLr, ctx);\n+      DAG dag = build(jobConf, work, scratchDir, appJarLr, additionalLr, ctx);\n \n       // submit will send the job to the cluster and start executing\n       client = submit(jobConf, dag, scratchDir, appJarLr, session);\n@@ -186,16 +204,13 @@ public int execute(DriverContext driverContext) {\n   }\n \n   DAG build(JobConf conf, TezWork work, Path scratchDir,\n-      LocalResource appJarLr, Context ctx)\n+      LocalResource appJarLr, List<LocalResource> additionalLr, Context ctx)\n       throws Exception {\n \n     perfLogger.PerfLogBegin(CLASS_NAME, PerfLogger.TEZ_BUILD_DAG);\n     Map<BaseWork, Vertex> workToVertex = new HashMap<BaseWork, Vertex>();\n     Map<BaseWork, JobConf> workToConf = new HashMap<BaseWork, JobConf>();\n \n-    // we need to get the user specified local resources for this dag\n-    List<LocalResource> additionalLr = utils.localizeTempFiles(conf);\n-\n     // getAllWork returns a topologically sorted list, which we use to make\n     // sure that vertices are created before they are used in edges.\n     List<BaseWork> ws = work.getAllWork();\n@@ -299,7 +314,7 @@ DAGClient submit(JobConf conf, DAG dag, Path scratchDir,\n       sessionState.close(true);\n \n       // (re)open the session\n-      sessionState.open(sessionState.getSessionId(), this.conf);\n+      sessionState.open(this.conf);\n \n       console.printInfo(\"Session re-established.\");\n ",
                "deletions": 23
            },
            {
                "sha": "f285312bab17a6d14be0a5cacc8ae4e830e0691f",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/GenMapRedUtils.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/optimizer/GenMapRedUtils.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/optimizer/GenMapRedUtils.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/optimizer/GenMapRedUtils.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -845,6 +845,13 @@ public static void setKeyAndValueDescForTaskTree(Task<? extends Serializable> ta\n           setKeyAndValueDesc(work.getReduceWork(), op);\n         }\n       }\n+    } else if (task != null && (task.getWork() instanceof TezWork)) {\n+      TezWork work = (TezWork)task.getWork();\n+      for (BaseWork w : work.getAllWorkUnsorted()) {\n+        if (w instanceof MapWork) {\n+          ((MapWork)w).deriveExplainAttributes();\n+        }\n+      }\n     }\n \n     if (task.getChildTasks() == null) {",
                "deletions": 0
            },
            {
                "sha": "4d3658fb0694b63fe05e3926bf63ceb7425908d9",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/plan/BaseWork.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/plan/BaseWork.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/plan/BaseWork.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/plan/BaseWork.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -28,6 +28,7 @@\n \n import org.apache.hadoop.hive.ql.exec.HashTableDummyOperator;\n import org.apache.hadoop.hive.ql.exec.Operator;\n+import org.apache.hadoop.mapred.JobConf;\n \n /**\n  * BaseWork. Base class for any \"work\" that's being done on the cluster. Items like stats\n@@ -106,4 +107,6 @@ public void addDummyOp(HashTableDummyOperator dummyOp) {\n \n     return returnSet;\n   }\n+\n+  public abstract void configureJobConf(JobConf job);\n }",
                "deletions": 0
            },
            {
                "sha": "9945dea53e714424d27d6c67babe2798ab77be8b",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/plan/MapWork.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/plan/MapWork.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/plan/MapWork.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/plan/MapWork.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -172,6 +172,8 @@ public void setPathToPartitionInfo(\n \n   /**\n    * Derive additional attributes to be rendered by EXPLAIN.\n+   * TODO: this method is relied upon by custom input formats to set jobconf properties.\n+   *       This is madness? - This is Hive Storage Handlers!\n    */\n   public void deriveExplainAttributes() {\n     if (pathToPartitionInfo != null) {\n@@ -495,6 +497,7 @@ public String getSamplingTypeString() {\n         samplingType == 2 ? \"SAMPLING_ON_START\" : null;\n   }\n \n+  @Override\n   public void configureJobConf(JobConf job) {\n     for (PartitionDesc partition : aliasToPartnInfo.values()) {\n       PlanUtils.configureJobConf(partition.getTableDesc(), job);",
                "deletions": 0
            },
            {
                "sha": "7394588130861466cb98b5e53a74a729214397ec",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/plan/TezWork.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/plan/TezWork.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/plan/TezWork.java",
                "status": "modified",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/plan/TezWork.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.hive.ql.plan.TezEdgeProperty.EdgeType;\n+import org.apache.hadoop.mapred.JobConf;\n import org.apache.tez.dag.api.EdgeProperty;\n \n /**\n@@ -93,6 +94,10 @@ public String getName() {\n     return result;\n   }\n \n+  public Collection<BaseWork> getAllWorkUnsorted() {\n+    return workGraph.keySet();\n+  }\n+\n   private void visit(BaseWork child, Set<BaseWork> seen, List<BaseWork> result) {\n \n     if (seen.contains(child)) {\n@@ -271,6 +276,37 @@ public String getType() {\n     }\n     return result;\n   }\n+  \n+  private static final String MR_JAR_PROPERTY = \"tmpjars\";\n+  /**\n+   * Calls configureJobConf on instances of work that are part of this TezWork.\n+   * Uses the passed job configuration to extract \"tmpjars\" added by these, so that Tez\n+   * could add them to the job proper Tez way. This is a very hacky way but currently\n+   * there's no good way to get these JARs - both storage handler interface, and HBase\n+   * code, would have to change to get the list directly (right now it adds to tmpjars).\n+   * This will happen in 0.14 hopefully.\n+   * @param jobConf Job configuration.\n+   * @return List of files added to tmpjars by storage handlers.\n+   */\n+  public String[] configureJobConfAndExtractJars(JobConf jobConf) {\n+    String[] oldTmpJars = jobConf.getStrings(MR_JAR_PROPERTY);\n+    jobConf.setStrings(MR_JAR_PROPERTY, new String[0]);\n+    for (BaseWork work : workGraph.keySet()) {\n+      work.configureJobConf(jobConf);\n+    }\n+    String[] newTmpJars = jobConf.getStrings(MR_JAR_PROPERTY);\n+    if (oldTmpJars != null && (oldTmpJars.length != 0)) {\n+      if (newTmpJars != null && (newTmpJars.length != 0)) {\n+        String[] combinedTmpJars = new String[newTmpJars.length + oldTmpJars.length];\n+        System.arraycopy(oldTmpJars, 0, combinedTmpJars, 0, oldTmpJars.length);\n+        System.arraycopy(newTmpJars, 0, combinedTmpJars, oldTmpJars.length, newTmpJars.length);\n+        jobConf.setStrings(MR_JAR_PROPERTY, combinedTmpJars);\n+      } else {\n+        jobConf.setStrings(MR_JAR_PROPERTY, oldTmpJars);\n+      }\n+    }\n+    return newTmpJars;\n+   }\n \n   /**\n    * connect adds an edge between a and b. Both nodes have",
                "deletions": 0
            },
            {
                "sha": "5ef0e074b632ec74b4e546ffddba52719bc6b60d",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/plan/UnionWork.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/plan/UnionWork.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/plan/UnionWork.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/plan/UnionWork.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.hadoop.hive.ql.plan.BaseWork;\n import org.apache.hadoop.hive.ql.exec.Operator;\n import org.apache.hadoop.hive.ql.exec.UnionOperator;\n+import org.apache.hadoop.mapred.JobConf;\n \n /**\n  * Simple wrapper for union all cases. All contributing work for a union all\n@@ -68,4 +69,7 @@ public void addUnionOperators(Collection<UnionOperator> unions) {\n   public Set<UnionOperator> getUnionOperators() {\n     return unionOperators;\n   }\n+\n+  public void configureJobConf(JobConf job) {\n+  }\n }",
                "deletions": 0
            },
            {
                "sha": "4785b7f1576c8deabb12ab4782d8dc53976bc64b",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/session/SessionState.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -347,9 +347,9 @@ public static SessionState start(SessionState startSs) {\n         .equals(\"tez\") && (startSs.isHiveServerQuery == false)) {\n       try {\n         if (startSs.tezSessionState == null) {\n-          startSs.tezSessionState = new TezSessionState();\n+          startSs.tezSessionState = new TezSessionState(startSs.getSessionId());\n         }\n-        startSs.tezSessionState.open(startSs.getSessionId(), startSs.conf);\n+        startSs.tezSessionState.open(startSs.conf);\n       } catch (Exception e) {\n         throw new RuntimeException(e);\n       }\n@@ -815,10 +815,10 @@ public boolean delete_resource(ResourceType t, String value) {\n   }\n \n   public Set<String> list_resource(ResourceType t, List<String> filter) {\n-    if (resource_map.get(t) == null) {\n+    Set<String> orig = resource_map.get(t);\n+    if (orig == null) {\n       return null;\n     }\n-    Set<String> orig = resource_map.get(t);\n     if (filter == null) {\n       return orig;\n     } else {",
                "deletions": 4
            },
            {
                "sha": "ad5a6e7ac218a1d16168b3a93e50dbbc6353dc69",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionPool.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionPool.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionPool.java",
                "status": "modified",
                "changes": 20,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionPool.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -40,9 +40,9 @@ public TestTezSessionPoolManager() {\n     }\n \n     @Override\n-      public TezSessionState createSession() {\n-        return new TestTezSessionState();\n-      }\n+    public TezSessionState createSession(String sessionId) {\n+      return new TestTezSessionState(sessionId);\n+    }\n   }\n \n   @Before\n@@ -54,8 +54,8 @@ public void setUp() {\n     public void testGetNonDefaultSession() {\n       poolManager = new TestTezSessionPoolManager();\n       try {\n-        TezSessionState sessionState = poolManager.getSession(null, conf);\n-        TezSessionState sessionState1 = poolManager.getSession(sessionState, conf);\n+        TezSessionState sessionState = poolManager.getSession(null, conf, true);\n+        TezSessionState sessionState1 = poolManager.getSession(sessionState, conf, true);\n         if (sessionState1 != sessionState) {\n           fail();\n         }\n@@ -75,25 +75,25 @@ public void testSessionPoolGetInOrder() {\n         poolManager = new TestTezSessionPoolManager();\n         poolManager.setupPool(conf);\n         poolManager.startPool();\n-        TezSessionState sessionState = poolManager.getSession(null, conf);\n+        TezSessionState sessionState = poolManager.getSession(null, conf, true);\n         if (sessionState.getQueueName().compareTo(\"a\") != 0) {\n           fail();\n         }\n         poolManager.returnSession(sessionState);\n \n-        sessionState = poolManager.getSession(null, conf);\n+        sessionState = poolManager.getSession(null, conf, true);\n         if (sessionState.getQueueName().compareTo(\"b\") != 0) {\n           fail();\n         }\n         poolManager.returnSession(sessionState);\n \n-        sessionState = poolManager.getSession(null, conf);\n+        sessionState = poolManager.getSession(null, conf, true);\n         if (sessionState.getQueueName().compareTo(\"c\") != 0) {\n           fail();\n         }\n         poolManager.returnSession(sessionState);\n \n-        sessionState = poolManager.getSession(null, conf);\n+        sessionState = poolManager.getSession(null, conf, true);\n         if (sessionState.getQueueName().compareTo(\"a\") != 0) {\n           fail();\n         }\n@@ -118,7 +118,7 @@ public void run() {\n             tmpConf.set(\"tez.queue.name\", \"\");\n           }\n \n-          TezSessionState session = poolManager.getSession(null, tmpConf);\n+          TezSessionState session = poolManager.getSession(null, tmpConf, true);\n           Thread.sleep((random.nextInt(9) % 10) * 1000);\n           poolManager.returnSession(session);\n         } catch (Exception e) {",
                "deletions": 10
            },
            {
                "sha": "6ee6e42a979d58e1693f9f9ea85cec3842910d99",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionState.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionState.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionState.java",
                "status": "modified",
                "changes": 13,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezSessionState.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -38,6 +38,11 @@\n   private String sessionId;\n   private HiveConf hiveConf;\n \n+  public TestTezSessionState(String sessionId) {\n+    super(sessionId);\n+    this.sessionId = sessionId;\n+  }\n+\n   @Override\n     public boolean isOpen() {\n       return open;\n@@ -48,11 +53,9 @@ public void setOpen(boolean open) {\n   }\n \n   @Override\n-    public void open(String sessionId, HiveConf conf) throws IOException,\n-           LoginException, URISyntaxException, TezException {\n-             this.sessionId = sessionId;\n-             this.hiveConf = conf;\n-    }\n+  public void open(HiveConf conf) {\n+    this.hiveConf = conf;\n+  }\n \n   @Override\n     public void close(boolean keepTmpDir) throws TezException, IOException {",
                "deletions": 5
            },
            {
                "sha": "1793b58fc8a218e9d81cdc0b564d1739f3d637b7",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezTask.java",
                "blob_url": "https://github.com/apache/hive/blob/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezTask.java",
                "raw_url": "https://github.com/apache/hive/raw/463546f4b03e29aaf9f55c11e33f13e53be1840d/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezTask.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/exec/tez/TestTezTask.java?ref=463546f4b03e29aaf9f55c11e33f13e53be1840d",
                "patch": "@@ -33,6 +33,7 @@\n import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n \n import javax.security.auth.login.LoginException;\n \n@@ -176,7 +177,7 @@ public void tearDown() throws Exception {\n \n   @Test\n   public void testBuildDag() throws IllegalArgumentException, IOException, Exception {\n-    DAG dag = task.build(conf, work, path, appLr, new Context(conf));\n+    DAG dag = task.build(conf, work, path, appLr, null, new Context(conf));\n     for (BaseWork w: work.getAllWork()) {\n       Vertex v = dag.getVertex(w.getName());\n       assertNotNull(v);\n@@ -196,7 +197,7 @@ public void testBuildDag() throws IllegalArgumentException, IOException, Excepti\n \n   @Test\n   public void testEmptyWork() throws IllegalArgumentException, IOException, Exception {\n-    DAG dag = task.build(conf, new TezWork(\"\"), path, appLr, new Context(conf));\n+    DAG dag = task.build(conf, new TezWork(\"\"), path, appLr, null, new Context(conf));\n     assertEquals(dag.getVertices().size(), 0);\n   }\n \n@@ -206,7 +207,7 @@ public void testSubmit() throws LoginException, IllegalArgumentException,\n     DAG dag = new DAG(\"test\");\n     task.submit(conf, dag, path, appLr, sessionState);\n     // validate close/reopen\n-    verify(sessionState, times(1)).open(any(String.class), any(HiveConf.class));\n+    verify(sessionState, times(1)).open(any(HiveConf.class));\n     verify(sessionState, times(1)).close(eq(true));\n     verify(session, times(2)).submitDAG(any(DAG.class));\n   }",
                "deletions": 3
            }
        ],
        "patched_files": [
            "BaseWork.java",
            "TezSessionPoolManager.java",
            "TezSessionState.java",
            "TezTask.java",
            "TezWork.java",
            "GenMapRedUtils.java",
            "DagUtils.java",
            "UnionWork.java",
            "SessionState.java",
            "MapWork.java"
        ],
        "unit_tests": [
            "TestSessionState.java",
            "TestTezTask.java",
            "TestTezSessionPool.java",
            "TestTezWork.java",
            "TestTezSessionState.java"
        ]
    },
    "hive_5b2cbb5": {
        "repo": "hive",
        "message": "HIVE-18786 : NPE in Hive windowing functions (Dongwook Kwon via Ashutosh Chauhan)\n\nSigned-off-by: Ashutosh Chauhan <hashutosh@apache.org>",
        "commit": "https://github.com/apache/hive/commit/5b2cbb5489ffc672e1eb7ee40b8eaa50fd26115e",
        "parent": "https://github.com/apache/hive/commit/1b3ac733f53598636870f4f7af09d2938fe0b09f",
        "bug_id": "hive_5b2cbb5",
        "file": [
            {
                "sha": "b02ca0708b8526912129872a821ab1722d9b32c9",
                "filename": "ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFEvaluator.java",
                "blob_url": "https://github.com/apache/hive/blob/5b2cbb5489ffc672e1eb7ee40b8eaa50fd26115e/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFEvaluator.java",
                "raw_url": "https://github.com/apache/hive/raw/5b2cbb5489ffc672e1eb7ee40b8eaa50fd26115e/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFEvaluator.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDAFEvaluator.java?ref=5b2cbb5489ffc672e1eb7ee40b8eaa50fd26115e",
                "patch": "@@ -149,6 +149,7 @@ public ObjectInspector init(Mode m, ObjectInspector[] parameters) throws HiveExc\n     // This function should be overriden in every sub class\n     // And the sub class should call super.init(m, parameters) to get mode set.\n     mode = m;\n+    partitionEvaluator = null;\n     return null;\n   }\n ",
                "deletions": 0
            },
            {
                "sha": "0747fa15d0b80215155ec6ffcb5d0746a97abef9",
                "filename": "ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDAFEvaluator.java",
                "blob_url": "https://github.com/apache/hive/blob/5b2cbb5489ffc672e1eb7ee40b8eaa50fd26115e/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDAFEvaluator.java",
                "raw_url": "https://github.com/apache/hive/raw/5b2cbb5489ffc672e1eb7ee40b8eaa50fd26115e/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDAFEvaluator.java",
                "status": "added",
                "changes": 79,
                "additions": 79,
                "contents_url": "https://api.github.com/repos/apache/hive/contents/ql/src/test/org/apache/hadoop/hive/ql/udf/generic/TestGenericUDAFEvaluator.java?ref=5b2cbb5489ffc672e1eb7ee40b8eaa50fd26115e",
                "patch": "@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hive.ql.udf.generic;\n+\n+import org.apache.hadoop.hive.ql.exec.PTFPartition;\n+import org.apache.hadoop.hive.ql.metadata.HiveException;\n+import org.apache.hadoop.hive.ql.plan.ptf.PTFExpressionDef;\n+import org.apache.hadoop.hive.ql.plan.ptf.WindowFrameDef;\n+import org.apache.hadoop.hive.ql.udf.ptf.BasePartitionEvaluator;\n+import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TestGenericUDAFEvaluator {\n+\n+  @Mock(answer = Answers.CALLS_REAL_METHODS)\n+  private GenericUDAFEvaluator udafEvaluator;\n+\n+  @Mock\n+  private WindowFrameDef winFrame;\n+\n+  @Mock\n+  private PTFPartition partition1;\n+\n+  @Mock\n+  private ObjectInspector outputOI;\n+\n+  private List<PTFExpressionDef> parameters = Collections.emptyList();\n+\n+  @Test\n+  public void testGetPartitionWindowingEvaluatorWithoutInitCall() {\n+    BasePartitionEvaluator partition1Evaluator1 = udafEvaluator.getPartitionWindowingEvaluator(\n+        winFrame, partition1, parameters, outputOI);\n+\n+    BasePartitionEvaluator partition1Evaluator2 = udafEvaluator.getPartitionWindowingEvaluator(\n+        winFrame, partition1, parameters, outputOI);\n+\n+    Assert.assertEquals(partition1Evaluator1, partition1Evaluator2);\n+  }\n+\n+  @Test\n+  public void testGetPartitionWindowingEvaluatorWithInitCall() throws HiveException {\n+    BasePartitionEvaluator partition1Evaluator1 = udafEvaluator.getPartitionWindowingEvaluator(\n+        winFrame, partition1, parameters, outputOI);\n+\n+    udafEvaluator.init(GenericUDAFEvaluator.Mode.COMPLETE, null);\n+\n+    BasePartitionEvaluator newPartitionEvaluator = udafEvaluator.getPartitionWindowingEvaluator(\n+        winFrame, partition1, parameters, outputOI);\n+\n+    Assert.assertNotEquals(partition1Evaluator1, newPartitionEvaluator);\n+  }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "GenericUDAFEvaluator.java"
        ],
        "unit_tests": [
            "TestGenericUDAFEvaluator.java"
        ]
    }
}