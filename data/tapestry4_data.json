[{"commit": "https://github.com/apache/tapestry4/commit/e673815d0ab3702b4a710d45b8af52868b2f6e09", "parent": "https://github.com/apache/tapestry4/commit/4bb7c2aeb907a93d8c59b80fea3d4a58467ccd79", "message": "TAPESTRY-1915: handle NPE and StringIndexOOBE in assetencoder\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry4/trunk@642446 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_1", "file": [{"additions": 13, "raw_url": "https://github.com/apache/tapestry4/raw/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java", "blob_url": "https://github.com/apache/tapestry4/blob/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java", "sha": "87cc4df7bc8ca991bb43b27ddc62ee27b9eb03ec", "changes": 18, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java?ref=e673815d0ab3702b4a710d45b8af52868b2f6e09", "patch": "@@ -67,16 +67,24 @@ public void decode(ServiceEncoding encoding)\n     {\n         if (!encoding.getServletPath().equals(_path))\n             return;\n-        \n+        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n         String pathInfo = encoding.getPathInfo();\n+        if (pathInfo == null)\n+            pathInfo = \"/\";\n         \n         // The lead character is a slash, so find the next slash (the divider between the\n         // digest and the path).\n         int slashx = pathInfo.indexOf('/', 1);\n-        \n-        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n-        encoding.setParameterValue(AssetService.DIGEST, pathInfo.substring(1, slashx));\n-        encoding.setParameterValue(AssetService.PATH, pathInfo.substring(slashx));\n+        if (slashx < 0) \n+        {\n+            encoding.setParameterValue(AssetService.DIGEST, \"\");\n+            encoding.setParameterValue(AssetService.PATH, \"\");\n+        }\n+        else\n+        {\n+            encoding.setParameterValue(AssetService.DIGEST, pathInfo.substring(1, slashx));\n+            encoding.setParameterValue(AssetService.PATH, pathInfo.substring(slashx));\n+        }\n     }\n     \n }", "filename": "tapestry-framework/src/java/org/apache/tapestry/engine/encoders/AssetEncoder.java"}, {"additions": 42, "raw_url": "https://github.com/apache/tapestry4/raw/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java", "blob_url": "https://github.com/apache/tapestry4/blob/e673815d0ab3702b4a710d45b8af52868b2f6e09/tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java", "sha": "3574387a170734e60b5cc6d5364727ab5f8c4af2", "changes": 42, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java?ref=e673815d0ab3702b4a710d45b8af52868b2f6e09", "patch": "@@ -189,4 +189,46 @@ public void test_Decode_Unprotected()\n \n         verify();\n     }\n+\n+    public void test_Decode_Null_Pathinfo()\n+    {\n+        ServiceEncoding encoding = newEncoding();\n+\n+        trainGetServletPath(encoding, \"/assets\");\n+        trainGetPathInfo(encoding, null);\n+\n+        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n+        encoding.setParameterValue(AssetService.DIGEST, \"\");\n+        encoding.setParameterValue(AssetService.PATH, \"\");\n+\n+        replay();\n+\n+        AssetEncoder encoder = new AssetEncoder();\n+        encoder.setPath(\"/assets\");\n+\n+        encoder.decode(encoding);\n+\n+        verify();\n+    }\n+    \n+    public void test_Decode_Empty_Pathinfo()\n+    {\n+        ServiceEncoding encoding = newEncoding();\n+\n+        trainGetServletPath(encoding, \"/assets\");\n+        trainGetPathInfo(encoding, \"/\");\n+\n+        encoding.setParameterValue(ServiceConstants.SERVICE, Tapestry.ASSET_SERVICE);\n+        encoding.setParameterValue(AssetService.DIGEST, \"\");\n+        encoding.setParameterValue(AssetService.PATH, \"\");         \n+\n+        replay();\n+\n+        AssetEncoder encoder = new AssetEncoder();\n+        encoder.setPath(\"/assets\");\n+\n+        encoder.decode(encoding);\n+\n+        verify();\n+    }\n }", "filename": "tapestry-framework/src/test/org/apache/tapestry/engine/encoders/AssetEncoderTest.java"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/268a85714cc64daa2d50582c9632ae0889eda3bc", "parent": "https://github.com/apache/tapestry4/commit/142eefacf6a50f9cd30f4b9efa69ef16a673b466", "message": "[ 25585 ] ValidationDelegate throws NPE for some new FieldLabel/ValidField\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243678 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_2", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tapestry4/raw/268a85714cc64daa2d50582c9632ae0889eda3bc/framework/src/org/apache/tapestry/valid/ValidationDelegate.java", "blob_url": "https://github.com/apache/tapestry4/blob/268a85714cc64daa2d50582c9632ae0889eda3bc/framework/src/org/apache/tapestry/valid/ValidationDelegate.java", "sha": "8d015a18c84ac319a80cbb11c1584bbfc8a67000", "changes": 9, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/valid/ValidationDelegate.java?ref=268a85714cc64daa2d50582c9632ae0889eda3bc", "patch": "@@ -62,6 +62,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.tapestry.IForm;\n import org.apache.tapestry.IMarkupWriter;\n import org.apache.tapestry.IRender;\n import org.apache.tapestry.IRequestCycle;\n@@ -432,7 +433,13 @@ protected boolean isInError(IFormComponent component)\n         if (_trackingMap == null)\n             return false;\n \n-        String formName = component.getForm().getName();\n+        IForm form = component.getForm();\n+        // if there is no form, the component cannot have been rewound or rendered into a form yet\n+        // so assume it cannot have errors.\n+        if (form == null)\n+            return false;\n+        \n+        String formName = form.getName();\n         Map formMap = (Map) _trackingMap.get(formName);\n \n         if (formMap == null)", "filename": "framework/src/org/apache/tapestry/valid/ValidationDelegate.java"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/60f37294052072f87557264172305cb58cc395cc", "parent": "https://github.com/apache/tapestry4/commit/46f26f58cc257ab8665acdf33b3c0cc1615b88e2", "message": "[ 627332 ] NPE in BaseValidator (form without body)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243003 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_3", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/framework/src/net/sf/tapestry/TapestryStrings.properties", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/framework/src/net/sf/tapestry/TapestryStrings.properties", "sha": "7ac909b73472eeb88f5297d6c7d88b56be89e467", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/TapestryStrings.properties?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -368,6 +368,7 @@ FieldLabel.no-display-name=Display name not specified and not provided by field\n \n ValidField.no-delegate=No IValidationDelegate is available to ValidField {0}; it is specified as the delegate parameter of Form {1}.\n ValidField.no-type=The type parameter for field {0} was not specified and is required by the field''s validator.\n+ValidField.must-be-contained-by-body=A ValidField using client-side validation must be wrapped by a Body component.\n \n NumberValidator.no-adaptor-for-field=Unable to provide validation for field {0} (value type {1}).\n ", "filename": "framework/src/net/sf/tapestry/TapestryStrings.properties"}, {"additions": 3, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/framework/src/net/sf/tapestry/valid/BaseValidator.java", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/framework/src/net/sf/tapestry/valid/BaseValidator.java", "sha": "db6daeb04373957b27edf89e5503bac0d53572bb", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/valid/BaseValidator.java?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -266,6 +266,9 @@ protected void processValidatorScript(String scriptPath, IRequestCycle cycle, IF\n \n         Body body = Body.get(cycle);\n \n+        if (body == null)\n+            throw new RequestCycleException(Tapestry.getString(\"ValidField.must-be-contained-by-body\"), field);\n+\n         body.process(session);\n \n         String functionName = (String) finalSymbols.get(FUNCTION_SYMBOL);", "filename": "framework/src/net/sf/tapestry/valid/BaseValidator.java"}, {"additions": 12, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/MockTestCase.java", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/MockTestCase.java", "sha": "da095ad846955a393f90fb90ec2a1d54d8c1d4c3", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/MockTestCase.java?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -159,4 +159,16 @@ public void testStrings()\n     {\n         attempt(\"/net/sf/tapestry/junit/mock/TestStrings.xml\");\n     }\n+    \n+    /**\n+     *  Test case for a ValidField with a validator and client-side scripting, but\n+     *  no Body.\n+     * \n+     **/\n+    \n+    public void testValidFieldNoBody()\n+    throws Exception\n+    {\n+        attempt(\"/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml\");\n+    }\n }", "filename": "junit/src/net/sf/tapestry/junit/mock/MockTestCase.java"}, {"additions": 0, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/TestStrings.xml", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/TestStrings.xml", "sha": "b3c72dab2438a5f98fd43b818289756f62a6aa81", "changes": 4, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/TestStrings.xml?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -3,8 +3,6 @@\n <!-- $Id$ -->\n \n \n-<!-- Tests stale session exception with a DirectLink. -->\n-\n <mock-test>\n     <context name=\"mock\"/>\n     \n@@ -14,8 +12,6 @@\n   \t\t\tvalue=\"/net/sf/tapestry/junit/mock/app/Mock.application\"/>\n   \t</servlet>  \t\n   \t\n-  \t<!-- Simulate clicking the link, which should send the\n-  \t     user to the Protected page.  -->\n   \t     \n   \t<request>\n   \t\t<parameter name=\"service\" value=\"page\"/>", "filename": "junit/src/net/sf/tapestry/junit/mock/TestStrings.xml"}, {"additions": 36, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml", "sha": "1be189a2f73630c2bac0689eb51eb1d9de5c4b37", "changes": 36, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!-- $Id$ -->\n+\n+\n+\n+<mock-test>\n+    <context name=\"mock\"/>\n+    \n+    <servlet name=\"app\" class=\"net.sf.tapestry.ApplicationServlet\">\n+  \t\t<init-parameter\n+  \t\t\tname=\"net.sf.tapestry.application-specification\"\n+  \t\t\tvalue=\"/net/sf/tapestry/junit/mock/app/Mock.application\"/>\n+  \t</servlet>  \t\n+  \t\n+  \t     \n+  \t<request>\n+  \t\t<parameter name=\"service\" value=\"page\"/>\n+  \t\t<parameter name=\"context\" value=\"ValidFieldNoBody\"/>\n+  \t\t\n+\t\n+\t\t<!-- Should get an Exception -->\n+\t\n+\t\t<assert-output name=\"Title\">\n+<![CDATA[\n+<title>Exception</title>\n+]]>\t\t\n+\t\t</assert-output>\n+\t\n+\t\t<assert-output name=\"Message\">\n+\t\tA ValidField using client-side validation must be wrapped by a Body component.\n+\t\t</assert-output>\n+\t\n+\t</request>\n+\t\t  \t\n+</mock-test>\n\\ No newline at end of file", "filename": "junit/src/net/sf/tapestry/junit/mock/TestValidFieldNoBody.xml"}, {"additions": 2, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/Mock.application", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/Mock.application", "sha": "edd73db0f3bbda13aa0d28bd546e60850eb063d0", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/Mock.application?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -22,6 +22,8 @@\n \n \t<page name=\"Stale\" specification-path=\"/net/sf/tapestry/junit/mock/app/Stale.page\"/>\n \n+\t<page name=\"ValidFieldNoBody\" specification-path=\"/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page\"/>\n+\n \t\t\n \t<library id=\"lib\" specification-path=\"/net/sf/tapestry/junit/mock/lib/MockLibrary.library\"/>\n \t", "filename": "junit/src/net/sf/tapestry/junit/mock/app/Mock.application"}, {"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/Strings.page", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/Strings.page", "sha": "ee9401332055d3b21d068f558fa4266b369a90ea", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/Strings.page?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -7,7 +7,7 @@\n <page-specification class=\"net.sf.tapestry.html.BasePage\">\n \n   <component id=\"border\" type=\"lib:Border\">\n-  \t<static-binding name=\"title\">StaleSession Test Page</static-binding>\n+  \t<static-binding name=\"title\">Insert Localized Key Test Page</static-binding>\n   </component>\n \n </page-specification>\t\n\\ No newline at end of file", "filename": "junit/src/net/sf/tapestry/junit/mock/app/Strings.page"}, {"additions": 17, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.html", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.html", "sha": "65f5752f60c5cadd367c8de0168958c8b8e87510", "changes": 17, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.html?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -0,0 +1,17 @@\n+<!-- $Id$ -->\n+\n+<span jwcid=\"Shell\">\n+\n+<body>\n+\n+<form jwcid=\"form\">\n+\n+<input jwcid=\"inputNumber\"/>\n+\n+<input type=\"submit\"/>\n+\n+</form>\n+\n+</body>\n+\n+</span>\n\\ No newline at end of file", "filename": "junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.html"}, {"additions": 58, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.java", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.java", "sha": "e0c8209a9f64835aba54ccadf98892a779136bd8", "changes": 58, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.java?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -0,0 +1,58 @@\n+//\n+// Tapestry Web Application Framework\n+// Copyright (c) 2002 by Howard Lewis Ship\n+//\n+// Howard Lewis Ship\n+// http://sf.net/projects/tapestry\n+// mailto:hship@users.sf.net\n+//\n+// This library is free software.\n+//\n+// You may redistribute it and/or modify it under the terms of the GNU\n+// Lesser General Public License as published by the Free Software Foundation.\n+//\n+// Version 2.1 of the license should be included with this distribution in\n+// the file LICENSE, as well as License.html. If the license is not\n+// included with this distribution, you may find a copy at the FSF web\n+// site at 'www.gnu.org' or 'www.fsf.org', or you may write to the\n+// Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139 USA.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied waranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// Lesser General Public License for more details.\n+//\n+\n+package net.sf.tapestry.junit.mock.app;\n+\n+import net.sf.tapestry.html.BasePage;\n+\n+/**\n+ *  Page for testing a validator, with client side validation, but no Body.\n+ *\n+ *  @author Howard Lewis Ship\n+ *  @version $Id$\n+ *  @since 2.3\n+ * \n+ **/\n+\n+public class ValidFieldNoBody extends BasePage\n+{\n+    private int _intValue;        \n+    \n+    protected void initialize()\n+    {\n+        _intValue = 10;\n+    }\n+        \n+    public int getIntValue()\n+    {\n+        return _intValue;\n+    }\n+\n+    public void setIntValue(int intValue)\n+    {\n+        _intValue = intValue;\n+    }\n+\n+}", "filename": "junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.java"}, {"additions": 34, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page", "sha": "ba6d45112838b70d6799e08259c5ed64b202f13c", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- $Id$ -->\n+<!DOCTYPE page-specification PUBLIC \n+\t\"-//Howard Lewis Ship//Tapestry Specification 1.3//EN\" \n+\t\"http://tapestry.sf.net/dtd/Tapestry_1_3.dtd\">\n+\t\n+<page-specification class=\"net.sf.tapestry.junit.mock.app.ValidFieldNoBody\">\n+\n+  <bean name=\"delegate\" class=\"net.sf.tapestry.valid.ValidationDelegate\"/>\n+\n+  <bean name=\"intValidator\" lifecycle=\"render\" class=\"net.sf.tapestry.valid.NumberValidator\">\n+  \t<set-property name=\"required\" expression=\"true\"/>\n+  \t<set-property name=\"clientScriptingEnabled\" expression=\"true\"/>\n+  </bean>\n+  \n+  <component id=\"Shell\" type=\"Shell\">\n+  \t<static-binding name=\"title\">ValidField w/o Body Test Page</static-binding>\n+  </component>\n+\n+  <component id=\"form\" type=\"Form\">\n+  \t<binding name=\"delegate\" expression=\"beans.delegate\"/>\n+  </component>\n+  \n+\n+  <component id=\"inputNumber\" type=\"ValidField\">\n+    <binding name=\"validator\" expression=\"beans.intValidator\"/>\n+    <binding name=\"value\" expression=\"intValue\"/>\n+    <static-binding name=\"displayName\">Integer Field</static-binding>\n+    <static-binding name=\"type\">Integer</static-binding>\n+  </component>  \n+  \n+  \n+\n+</page-specification>\t\n\\ No newline at end of file", "filename": "junit/src/net/sf/tapestry/junit/mock/app/ValidFieldNoBody.page"}, {"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/60f37294052072f87557264172305cb58cc395cc/web/new.html", "blob_url": "https://github.com/apache/tapestry4/blob/60f37294052072f87557264172305cb58cc395cc/web/new.html", "sha": "a3952749d0b203899017bdbdd13f99c5559b2099", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/web/new.html?ref=60f37294052072f87557264172305cb58cc395cc", "patch": "@@ -39,6 +39,7 @@ <h3>Release 2.3-alpha-1</h3>\n [ 619481 ] use jakarta commons lang Enum\n [ 627478 ] Don't require servlet subclass\n [ 614324 ] Add a param \"raw\" in addition to \"key\"\n+[ 627332 ] NPE in BaseValidator (form without body)\n </pre>\n \n <h3>Release 2.2</h3>", "filename": "web/new.html"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2", "parent": "https://github.com/apache/tapestry4/commit/f8b156da1273cb46921d9f4082abbb52dc826c76", "message": "[ 618342 ] NPE in AbstractComponent toString\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242972 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_4", "file": [{"additions": 3, "raw_url": "https://github.com/apache/tapestry4/raw/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2/framework/src/net/sf/tapestry/AbstractComponent.java", "blob_url": "https://github.com/apache/tapestry4/blob/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2/framework/src/net/sf/tapestry/AbstractComponent.java", "sha": "7da50b4e7ed41b6e42163e94502ed4082fdde6b1", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/AbstractComponent.java?ref=6a366c85d9f70216dca1f82f64ac665d5ce2f9b2", "patch": "@@ -596,6 +596,9 @@ public void setContainer(IComponent value)\n \n     public String getExtendedId()\n     {\n+        if (page == null)\n+            return null;\n+            \n         return page.getName() + \"/\" + getIdPath();\n     }\n ", "filename": "framework/src/net/sf/tapestry/AbstractComponent.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2/web/new.html", "blob_url": "https://github.com/apache/tapestry4/blob/6a366c85d9f70216dca1f82f64ac665d5ce2f9b2/web/new.html", "sha": "3136993716c9833f34ea23c8d493502020f0c495", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/web/new.html?ref=6a366c85d9f70216dca1f82f64ac665d5ce2f9b2", "patch": "@@ -21,6 +21,7 @@ <h3>Release 2.2-rc-1</h3>\n [ 616851 ] Can't redirect to a library page\n [ 617867 ] ImageSubmit null image\n [ 618317 ] Contrib:NumericField missing type param\n+[ 618342 ] NPE in AbstractComponent toString\n </pre>\n \n <h3>Release 2.2-beta-3</h3>", "filename": "web/new.html"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf", "parent": "https://github.com/apache/tapestry4/commit/da42fb0784c6b709280df9f0d2792c868a69734b", "message": " [ 566158 ] ValidField NPE if no delegate\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242590 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_5", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/RequestContext.java", "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/RequestContext.java", "sha": "a5b004991110db2c115ba61b9c6b6773954c47cb", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/RequestContext.java?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf", "patch": "@@ -819,7 +819,7 @@ public void write(IMarkupWriter writer)\n \n             writer.begin(\"tr\");\n             writer.attribute(\"class\", getRowClass());\n-            writer.begin(\"td\");\n+            writer.begin(\"th\");\n             writer.print(name);\n             writer.end();\n             writer.begin(\"td\");", "filename": "framework/src/net/sf/tapestry/RequestContext.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/TapestryStrings.properties", "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/TapestryStrings.properties", "sha": "066ad9165839549c3d607d75376a18c3c61f0cd8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/TapestryStrings.properties?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf", "patch": "@@ -331,7 +331,7 @@ AbstractDocumentParser.invalid-identifier={0} is not a valid identifier (in elem\n # net.sf.tapestry.valid\n \n FieldLabel.no-display-name=Display name not specified and not provided by field {0}.\n-\n+ValidField.no-delegate=No IValidationDelegate is available to ValidField {0}; it is specified as the delegate parameter of Form {1}.\n \n \n ", "filename": "framework/src/net/sf/tapestry/TapestryStrings.properties"}, {"additions": 45, "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.html", "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.html", "sha": "835dde12f93543f85b6daa8b19677ad8e9afdb5c", "changes": 71, "status": "modified", "deletions": 26, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/html/ExceptionDisplay.html?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf", "patch": "@@ -1,51 +1,70 @@\n <!-- $Id$ -->\n+<html>\n+<link rel=\"stylesheet\" type=\"text/css\" href=\"../pages/Exception.css\">\n \n+<body>\n+\n+<span jwcid=\"$content$\">\n <p>\n \n <table class=\"exception-display\">\n \n-<jwc id=\"e-exception\">\n+<span jwcid=\"e-exception\">\n \t\n-\t\t<tr class=\"property\">\n-\t\t\t<th>Name:</th>\n-\t\t\t<td><jwc id=\"insertClass\"/></td>\n+\t\t<tr class=\"exception-name\">\n+\t\t\t<td colspan=\"2\"><span jwcid=\"insertClass\">some.exception.Class</span></td>\n \t\t</tr>\n \t\t\n-\t\t<tr class=\"property\">\n-\t\t\t<th>Message:</th>\n-\t\t\t<td><jwc id=\"insertMessage\"/></td>\n+\t\t<tr class=\"exception-message\">\n+\t\t\t<td colspan=\"2\"><span jwcid=\"insertMessage\">A message describing the exception.</span></td>\n \t\t</tr>\n-\n-<jwc id=\"e-property\">\n \t\t\n-\t\t<tr class=\"property\">\n-\t\t\t<th><jwc id=\"insertPropertyName\"/>:</th>\n-\t\t\t<td><jwc id=\"insertPropertyValue\"/></td>\n+\t\t<tr jwcid=\"e-property\">\n+\t\t\t<th><span jwcid=\"insertPropertyName\">Property Name</span>:</th>\n+\t\t\t<td><span jwcid=\"insertPropertyValue\">Property Value</span></td>\n+\t\t</tr>\n+\n+\t\t<tr jwcid=\"$remove$\" class=\"odd\">\n+\t\t\t<th>Property Name 2:</th>\n+\t\t\t<td>Property Value 2</td>\n+\t\t</tr>\n+\n+\t\t<tr jwcid=\"$remove$\" class=\"even\">\n+\t\t\t<th>Property Name 3:</th>\n+\t\t\t<td>Property Value 3</td>\n \t\t</tr>\n+\n+\t\t<tr jwcid=\"$remove$\" class=\"odd\">\n+\t\t\t<th>Property Name 4:</th>\n+\t\t\t<td>Property Value 4</td>\n+\t\t</tr>\t\t\n \t\t\n-</jwc>\t\n-\t\n-<jwc id=\"ifNotLast\">\n+<span jwcid=\"ifNotLast\">\n \t\t<tr> <td colspan=2> &nbsp; </td> </tr>\n-</jwc>\n+</span>\n \t\n-<jwc id=\"ifLast\">\n-\t\t<tr class=\"property\">\n-\t\t\t<th>Trace:</th> <td>&nbsp;</td>\n+<span jwcid=\"ifLast\">\n+\t\t<tr class=\"stack-trace-label\">\n+\t\t\t<td colspan=\"2\">Stack Trace:</td>\n \t\t</tr>\n \n \t\t<tr class=\"stack-trace\">\n \t\t\t<td colspan=2>\n \t\t\t\t<ul>\n-\t\t\t\t<jwc id=\"e-stack\">\n-\t\t\t\t\t<li><jwc id=\"insertStackTrace\"/>\n-\t\t\t\t</jwc>\n+\t\t\t\t\t<li jwcid=\"e-stack\"><span jwcid=\"insertStackTrace\">foo.bar.baz(Line:xyz)</span></li>\n+\t\t\t\t\t<li jwcid=\"$remove$\">foo.bar.baz(Line:xyz)</li>\n+\t\t\t\t\t<li jwcid=\"$remove$\">foo.bar.baz(Line:xyz)</li>\n+\t\t\t\t\t<li jwcid=\"$remove$\">foo.bar.baz(Line:xyz)</li>\t\t\t\t\t\n+\t\t\t\t\t<li jwcid=\"$remove$\">foo.bar.baz(Line:xyz)</li>\n \t\t\t\t</ul>\n-\n-\n \t\t\t</td>\n \t\t</tr>\n-</jwc>\n-</jwc>\n+</span> <!-- ifLast -->\n+</span> <!-- e-exception -->\n \n </table>\n+\n+</span> <!-- $content$ -->\n+\n+</body>\n+</html>", "filename": "framework/src/net/sf/tapestry/html/ExceptionDisplay.html"}, {"additions": 22, "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.java", "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.java", "sha": "1e33579e8e56a8a37717e7fd07b2485688ec407a", "changes": 24, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/html/ExceptionDisplay.java?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf", "patch": "@@ -30,6 +30,7 @@\n import net.sf.tapestry.IMarkupWriter;\n import net.sf.tapestry.IRequestCycle;\n import net.sf.tapestry.RequestCycleException;\n+import net.sf.tapestry.bean.EvenOdd;\n import net.sf.tapestry.util.exception.ExceptionDescription;\n \n /**\n@@ -46,6 +47,7 @@\n     private ExceptionDescription exception;\n     private int count;\n     private int index;\n+    private EvenOdd evenOdd;\n \n     public void setExceptionsBinding(IBinding value)\n     {\n@@ -57,9 +59,17 @@ public IBinding getExceptionsBinding()\n         return exceptionsBinding;\n     }\n \n+    /**\n+     *  Each time the current exception is set, as a side effect,\n+     *  the evenOdd helper bean is reset to even.\n+     * \n+     **/\n+    \n     public void setException(ExceptionDescription value)\n     {\n         exception = value;\n+        \n+        evenOdd.setEven(true);\n     }\n \n     public ExceptionDescription getException()\n@@ -76,8 +86,18 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n                 ExceptionDescription[].class);\n \n         count = exceptions.length;\n-\n-        super.renderComponent(writer, cycle);\n+        \n+        try\n+        {\n+            evenOdd = (EvenOdd)getBeans().getBean(\"evenOdd\");\n+            \n+            super.renderComponent(writer, cycle);\n+        }\n+        finally\n+        {\n+            exception = null;\n+            evenOdd = null;\n+        }\n     }\n \n     public void setIndex(int value)", "filename": "framework/src/net/sf/tapestry/html/ExceptionDisplay.java"}, {"additions": 9, "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.jwc", "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/html/ExceptionDisplay.jwc", "sha": "362413735414d5a5d26e647decdd818255374edf", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/html/ExceptionDisplay.jwc?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf", "patch": "@@ -1,6 +1,9 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!-- $Id$ -->\n-<!DOCTYPE specification PUBLIC \"-//Howard Ship//Tapestry Specification 1.1//EN\" \"http://tapestry.sf.net/dtd/Tapestry_1_1.dtd\">\n+<!DOCTYPE specification PUBLIC \n+\t\"-//Howard Lewis Ship//Tapestry Specification 1.2//EN\" \n+\t\t\"http://tapestry.sf.net/dtd/Tapestry_1_2.dtd\">\n+\t\t\n <specification class=\"net.sf.tapestry.html.ExceptionDisplay\" \n \tallow-body=\"no\" \n \tallow-informal-parameters=\"no\">\n@@ -15,6 +18,8 @@\n     </description>\n   </parameter>\n   \n+  <bean name=\"evenOdd\" class=\"net.sf.tapestry.bean.EvenOdd\"/>\n+    \n   <component id=\"e-exception\" type=\"Foreach\">\n     <inherited-binding name=\"source\" parameter-name=\"exceptions\"/>\n     <binding name=\"value\" property-path=\"exception\"/>\n@@ -30,6 +35,8 @@\n   </component>\n   \n   <component id=\"e-property\" type=\"Foreach\">\n+  \t<static-binding name=\"element\">tr</static-binding>\n+  \t<binding name=\"class\" property-path=\"beans.evenOdd.next\"/>\n     <binding name=\"source\" property-path=\"exception.properties\"/>\n   </component>\n   \n@@ -51,6 +58,7 @@\n   </component>\n   \n   <component id=\"e-stack\" type=\"Foreach\">\n+    <static-binding name=\"element\">li</static-binding>\n     <binding name=\"source\" property-path=\"exception.stackTrace\"/>\n   </component>\n   ", "filename": "framework/src/net/sf/tapestry/html/ExceptionDisplay.jwc"}, {"additions": 23, "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/inspector/Inspector.css", "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/inspector/Inspector.css", "sha": "4d02c3d519fcf7b8f86c27baa27a233faa437b24", "changes": 30, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/inspector/Inspector.css?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf", "patch": "@@ -120,24 +120,24 @@ SPAN.request-context-object  {\n TR.request-context-section TH  {\n \ttext-align : center;\n \tcolor : White;\n-\tbackground-color : \"#330066\";\n+\tbackground-color : Blue;\n }\n \n TR.request-context-header TH  {\n \ttext-align : center;\n \tcolor : White;\n-\tbackground-color : \"#330066\";\n+\tbackground-color : Blue;\n }\n \n TABLE.request-context-object TR.odd TD  {\n \ttext-align : left;\n \tcolor : Black;\n-\tbackground-color : Silver;\n+\tbackground-color : #C0C0FF;\n }\n \n TABLE.request-context-object TR.odd TH  {\n \tcolor : Black;\n-\tbackground-color : Silver;\n+\tbackground-color : #C0C0FF;\n \ttext-align : right;\n }\n \n@@ -158,16 +158,32 @@ TABLE.request-context-object TR  {\n \tvertical-align : text-top;\n }\n \n-TABLE.exception-display TR.property  {\n+TABLE.exception-display TR.even  {\n \ttop : auto;\n }\n \n-TABLE.exception-display TR.property TH  {\n+TABLE.exception-displaY TD\n+{\n+\twidth: 100%;\n+}\n+\n+TABLE.exception-display TR.even TH  {\n+\ttext-align : right;\n+\tfont-weight : bold;\n+}\n+\n+TABLE.exception-display TR.odd TD  {\n+\ttext-align : left;\n+\tbackground-color : #C0C0FF;\n+}\n+\n+TABLE.exception-display TR.odd TH  {\n \ttext-align : right;\n \tfont-weight : bold;\n+\tbackground-color : #C0C0FF;\t\n }\n \n-TABLE.exception-display TR.property TD  {\n+TABLE.exception-display TR.even TD  {\n \ttext-align : left;\n }\n ", "filename": "framework/src/net/sf/tapestry/inspector/Inspector.css"}, {"additions": 54, "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/pages/Exception.css", "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/pages/Exception.css", "sha": "e6f19213aa864a1a212398afd30b38af466dc8a4", "changes": 68, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/pages/Exception.css?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf", "patch": "@@ -16,18 +16,23 @@ A:Hover  {}\n \n BODY  {}\n \n-TABLE.exception-display TR.property  {\n+TABLE.exception-display TR.even  {\n \ttop : auto;\n-\tbackground-color : Silver;\n }\n \n-TABLE.exception-display TR.property TH  {\n+TABLE.exception-display TR.odd  {\n+\ttop : auto;\n+\tbackground-color : #C0C0FF;\n+}\n+\n+TABLE.exception-display TH  {\n \ttext-align : right;\n \tfont-weight : bold;\n }\n \n-TABLE.exception-display TR.property TD  {\n+TABLE.exception-display TD  {\n \ttext-align : left;\n+\twidth : 100%;\t\n }\n \n TABLE.exception-display TR.stack-trace  {\n@@ -60,7 +65,7 @@ TR.request-context-section TH  {\n \tfont-weight : bold;\n \ttext-align : center;\n \tcolor : White;\n-\tbackground-color : Black;\n+\tbackground-color : Blue;\n }\n \n TR.request-context-header TH  {\n@@ -69,18 +74,24 @@ TR.request-context-header TH  {\n \tfont-weight : bold;\n \ttext-align : center;\n \tcolor : White;\n-\tbackground-color : Black;\n+\tbackground-color : Blue;\n+}\n+\n+TABLE.request-context-object TD\n+{\n+\twidth: 100%;\n }\n \n TABLE.request-context-object TR.odd TD  {\n \ttext-align : left;\n \tcolor : Black;\n-\tbackground-color : Silver;\n+\tbackground-color : #C0C0FF;\n+\twidth: 100%;\n }\n \n TABLE.request-context-object TR.odd TH  {\n \tcolor : Black;\n-\tbackground-color : Silver;\n+\tbackground-color : #C0C0FF;\n \ttext-align : right;\n }\n \n@@ -100,9 +111,38 @@ TABLE.request-context-object TR  {\n \tvertical-align : text-top;\n }\n \n-UL \n-{\n-\tmargin-top: 0px;\n-\tmargin-bottom: 0px;\n-\tmargin-left: 20px;\n-}\n\\ No newline at end of file\n+UL  {\n+\tmargin-top : 0px;\n+\tmargin-bottom : 0px;\n+\tmargin-left : 20px;\n+}\n+\n+TABLE.exception-display TR.exception-name TD  {\n+\tfont-size : larger;\n+\tfont-weight : bold;\n+\ttext-align : center;\n+\tbackground-color : Blue;\n+\tcolor : White;\n+}\n+\n+TABLE.exception-display  {\n+\twidth : 100%;\n+}\n+\n+TABLE.exception-display TR.exception-message TD  {\n+\tborder-width : 1;\n+\tborder-color : Black;\n+\tborder-style : solid;\n+\tpadding : 2;\n+\ttext-align : left;\n+\tfont-style : italic;\n+}\n+\n+TABLE.exception-display TR.strack-trace-label TD  {\n+\tmargin : 2;\n+\tborder-width : 1;\n+\tborder-color : Black;\n+\tborder-style : solid;\n+\ttext-align : center;\n+}\n+", "filename": "framework/src/net/sf/tapestry/pages/Exception.css"}, {"additions": 12, "raw_url": "https://github.com/apache/tapestry4/raw/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/valid/ValidField.java", "blob_url": "https://github.com/apache/tapestry4/blob/46a8f312c2bc1f4de03e4cb19323c2aaec060eaf/framework/src/net/sf/tapestry/valid/ValidField.java", "sha": "0c774de9953a4a0b046c0c57ddd5a7e14dc8dbd0", "changes": 22, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/valid/ValidField.java?ref=46a8f312c2bc1f4de03e4cb19323c2aaec060eaf", "patch": "@@ -150,9 +150,7 @@\n  *\n  **/\n \n-public class ValidField\n-    extends AbstractTextField\n-    implements IField, IFormComponent\n+public class ValidField extends AbstractTextField implements IField, IFormComponent\n {\n     private IBinding valueBinding;\n \n@@ -190,7 +188,7 @@ public void setDisplayNameBinding(IBinding value)\n      *  is direction custom, allowing it to be resolved even when not renderring.\n      * \n      **/\n-    \n+\n     public String getDisplayName()\n     {\n         // Return the static value, if known.\n@@ -203,15 +201,14 @@ public String getDisplayName()\n         return displayNameBinding.getString();\n     }\n \n-\n     /**\n      *\n-     * Renders the component, which involves the {@link IValidationDelegate delegate}.\n+     *  Renders the component, which involves the {@link IValidationDelegate delegate}.\n      *\n-     * <p>During a render, the <em>first</em> field rendered that is either\n-     * in error, or required but null gets special treatment.  JavaScript is added\n-     * to select that field (such that the cursor jumps right to the field when the\n-     * page loads).\n+     *  <p>During a render, the <em>first</em> field rendered that is either\n+     *  in error, or required but null gets special treatment.  JavaScript is added\n+     *  to select that field (such that the cursor jumps right to the field when the\n+     *  page loads).\n      *\n      **/\n \n@@ -220,6 +217,11 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n     {\n         IValidationDelegate delegate = getForm().getDelegate();\n \n+        if (delegate == null)\n+            throw new RequestCycleException(\n+                Tapestry.getString(\"ValidField.no-delegate\", getExtendedId(), getForm().getExtendedId()),\n+                this);\n+\n         String displayName = null;\n \n         boolean rendering = !cycle.isRewinding();", "filename": "framework/src/net/sf/tapestry/valid/ValidField.java"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2", "parent": "https://github.com/apache/tapestry4/commit/2ceec2df4ad58a7df7bfdf3b6f9e23c8f6b80efe", "message": "[ 549482 ] NPE in RequestCycle.observeChange()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242522 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_6", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/config/Version.properties", "blob_url": "https://github.com/apache/tapestry4/blob/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/config/Version.properties", "sha": "783eaad5803c56888cee0dac4a9bd47600c6613b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/config/Version.properties?ref=c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2", "patch": "@@ -2,4 +2,4 @@\n #\n # Stores the version number of the framework.\n \n-framework.version=2.0.2\n+framework.version=2.0.2a", "filename": "config/Version.properties"}, {"additions": 34, "raw_url": "https://github.com/apache/tapestry4/raw/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/framework/src/com/primix/tapestry/engine/RequestCycle.java", "blob_url": "https://github.com/apache/tapestry4/blob/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/framework/src/com/primix/tapestry/engine/RequestCycle.java", "sha": "5624edb1fe7d7e7249852bc84503a41ed257e023", "changes": 41, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/engine/RequestCycle.java?ref=c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2", "patch": "@@ -304,6 +304,34 @@ protected IPageRecorder getPageRecorder(String name)\n \t\treturn result;\n \t}\n \n+\t/** \n+\t * \n+\t *  Gets the page recorder from the loadedRecorders cache, or from the engine\n+\t *  (putting it into loadedRecorders).  If the recorder does not yet exist,\n+\t *  it is created.\n+\t * \n+\t *  @see IEngine#createPageRecorder(String, IRequestCycle)\n+\t *  @since 2.0.3\n+\t * \n+\t **/\n+\n+\tprivate IPageRecorder createPageRecorder(String name)\n+\t{\n+\t\tIPageRecorder result = getPageRecorder(name);\n+\n+\t\tif (result == null)\n+\t\t{\n+\t\t\tresult = engine.createPageRecorder(name, this);\n+\n+\t\t\tif (loadedRecorders == null)\n+\t\t\t\tloadedRecorders = new HashMap();\n+\n+\t\t\tloadedRecorders.put(name, result);\n+\t\t}\n+\n+\t\treturn result;\n+\t}\n+\n \tpublic RequestContext getRequestContext()\n \t{\n \t\treturn requestContext;\n@@ -633,14 +661,13 @@ public void observeChange(ObservedChangeEvent event)\n \t\tif (CAT.isDebugEnabled())\n \t\t\tCAT.debug(\"Observed change in page \" + pageName + \"; creating page recorder.\");\n \n-\t\tIPageRecorder recorder = getPageRecorder(pageName);\n-         \n+\t\tIPageRecorder recorder = createPageRecorder(pageName);\n+\n \t\tpage.setChangeObserver(recorder);\n \n \t\trecorder.observeChange(event);\n \t}\n \n-\n \t/**\n \t *  Finds the page and its page recorder, creating the page recorder if necessary.\n \t *  The page recorder is marked for discard regardless of its current state.\n@@ -656,17 +683,17 @@ public void observeChange(ObservedChangeEvent event)\n \n \tpublic void discardPage(String name)\n \t{\n-        if (CAT.isDebugEnabled())\n-            CAT.debug(\"Discarding page \" + name);\n-            \n+\t\tif (CAT.isDebugEnabled())\n+\t\t\tCAT.debug(\"Discarding page \" + name);\n+\n \t\tIPageRecorder recorder = engine.getPageRecorder(name);\n \n \t\tif (recorder == null)\n \t\t{\n \n \t\t\tpage = getPage(name);\n \n-\t\t\trecorder = engine.createPageRecorder(name, this);\n+\t\t\trecorder = createPageRecorder(name);\n \n \t\t\tpage.setChangeObserver(recorder);\n \t\t}", "filename": "framework/src/com/primix/tapestry/engine/RequestCycle.java"}, {"additions": 4, "raw_url": "https://github.com/apache/tapestry4/raw/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/web/new.html", "blob_url": "https://github.com/apache/tapestry4/blob/c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2/web/new.html", "sha": "5541f149d9f3b34c40556120f7bd170f795b9d99", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/web/new.html?ref=c63e0e0126d72f2c9fd24b0c0787540f1d56e9f2", "patch": "@@ -11,6 +11,10 @@\n \t<tr>\n \t\t<td valign=\"top\" align=\"left\"><img height=\"44\" src=\"images/ico_t.gif\" alt=\"[Tapestry Logo]\" width=\"44\" align=\"absMiddle\" border=\"0\">&nbsp;<img height=\"22\" alt=\"Tapestry\" src=\"images/hd_tapestry.gif\" width=\"100\" align=\"absMiddle\" vspace=\"17\" border=\"0\">\n \n+<h3>Release 2.0.2a</h3>\n+\n+[ 549482 ] NPE in RequestCycle.observeChange()\n+\n <h3>Release 2.0.2</h3>\n \n Changed the inspector icon into an animated GIF for compatiblility with more browsers.", "filename": "web/new.html"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/fa1d223e7783eb1fd3e4500023ba3775b868c337", "parent": "https://github.com/apache/tapestry4/commit/7913ff033feac8e7e419f550817cd191473e2618", "message": "[ 532562 ] Submit.jwc contains error\n[ 532587 ] Submit throws NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242454 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_7", "file": [{"additions": 21, "raw_url": "https://github.com/apache/tapestry4/raw/fa1d223e7783eb1fd3e4500023ba3775b868c337/framework/src/com/primix/tapestry/form/Submit.java", "blob_url": "https://github.com/apache/tapestry4/blob/fa1d223e7783eb1fd3e4500023ba3775b868c337/framework/src/com/primix/tapestry/form/Submit.java", "sha": "18b9da8552ec19a460ec33fa74021f398d69a669", "changes": 31, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/form/Submit.java?ref=fa1d223e7783eb1fd3e4500023ba3775b868c337", "patch": "@@ -215,16 +215,27 @@ public void render(IResponseWriter writer, IRequestCycle cycle)\n \t\t\tif (value == null)\n \t\t\t\treturn;\n \n-\t\t\t// OK, now to notify the application code (via the parameters)\n-\t\t\t// that *this* Submit was selected.  We do this by applying\n-\t\t\t// a tag (presumably, specific to the Submit in question)\n-\t\t\t// to the selected binding.\n-\n-\t\t\tif (tagValue == null)\n-\t\t\t\ttagValue = tagBinding.getObject();\n-\n-\t\t\tif (tagValue != null)\n-\t\t\t\tselectedBinding.setObject(tagValue);\n+\t\t\tif (selectedBinding != null)\n+    \t\t\t{\n+    \t\t\t// OK, now to notify the application code (via the parameters)\n+    \t\t\t// that *this* Submit was selected.  We do this by applying\n+    \t\t\t// a tag (presumably, specific to the Submit in question)\n+    \t\t\t// to the selected binding.\n+    \n+\t\t\t\tif (tagBinding == null)\n+\t\t\t\t\tthrow new RequestCycleException(\n+\t\t\t\t\t\t\"The tag parameter is required if the selected parameter is bound.\",\n+\t\t\t\t\t\tthis);\n+\n+    \t\t\tif (tagValue == null)\n+    \t\t\t\ttagValue = tagBinding.getObject();\n+    \n+ \t\t\t\tif (tagValue == null)\n+\t\t\t\t\tthrow new RequiredParameterException(this, \"tag\", tagBinding);\n+\n+\t   \t\t\tif (tagValue != null)\n+    \t\t\t\tselectedBinding.setObject(tagValue);\n+\t\t\t}\n \n \t\t\tif (listenerBinding != null)\n \t\t\t{", "filename": "framework/src/com/primix/tapestry/form/Submit.java"}, {"additions": 2, "raw_url": "https://github.com/apache/tapestry4/raw/fa1d223e7783eb1fd3e4500023ba3775b868c337/framework/src/com/primix/tapestry/form/Submit.jwc", "blob_url": "https://github.com/apache/tapestry4/blob/fa1d223e7783eb1fd3e4500023ba3775b868c337/framework/src/com/primix/tapestry/form/Submit.jwc", "sha": "064c6d4fc05697b1797b27ddff16d3ad1ba215d7", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/com/primix/tapestry/form/Submit.jwc?ref=fa1d223e7783eb1fd3e4500023ba3775b868c337", "patch": "@@ -4,8 +4,8 @@\n <specification class=\"com.primix.tapestry.form.Submit\" allow-body=\"no\">\n   <parameter name=\"label\" java-type=\"java.lang.String\"/>\n   <parameter name=\"disabled\"/>\n-  <parameter name=\"selected\">\n-  <parameter name=\"tag\">\n+  <parameter name=\"selected\"/>\n+  <parameter name=\"tag\"/>\n   <parameter name=\"listener\" java-type=\"com.primix.tapestry.IActionListener\"/>\n   \n   <reserved-parameter name=\"name\"/>", "filename": "framework/src/com/primix/tapestry/form/Submit.jwc"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/36043f294e52ddc61ff16409be64acb452aa3ee1", "parent": "https://github.com/apache/tapestry4/commit/d2c4a3e7821ecec9d6f2f69b9b27122bf33ac8bb", "message": "TAPESTRY-701: NPE creating a link from pageValidate() when there are client-persistent properties with page scope\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@348184 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_8", "file": [{"additions": 14, "raw_url": "https://github.com/apache/tapestry4/raw/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/java/org/apache/tapestry/record/PageClientPropertyPersistenceScope.java", "blob_url": "https://github.com/apache/tapestry4/blob/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/java/org/apache/tapestry/record/PageClientPropertyPersistenceScope.java", "sha": "9380aa67b1783dda1d7e96d3af06f821abf40bfd", "changes": 16, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/record/PageClientPropertyPersistenceScope.java?ref=36043f294e52ddc61ff16409be64acb452aa3ee1", "patch": "@@ -14,6 +14,7 @@\n \n package org.apache.tapestry.record;\n \n+import org.apache.tapestry.IPage;\n import org.apache.tapestry.IRequestCycle;\n import org.apache.tapestry.engine.ServiceEncoding;\n \n@@ -29,7 +30,7 @@\n         AbstractPrefixedClientPropertyPersistenceScope\n {\n     private IRequestCycle _requestCycle;\n-    \n+\n     public PageClientPropertyPersistenceScope()\n     {\n         super(\"state:\");\n@@ -43,7 +44,18 @@ public PageClientPropertyPersistenceScope()\n     public boolean shouldEncodeState(ServiceEncoding encoding, String pageName,\n             PersistentPropertyData data)\n     {\n-        return pageName.equals(_requestCycle.getPage().getPageName());\n+        IPage page = _requestCycle.getPage();\n+\n+        // TAPESTRY-701: if you try to generate a link using, say, page or external service,\n+        // from inside PageValidateListener.pageValidate(), then there may not be an active\n+        // page yet. Seems like the right thing to do is hold onto any properties until\n+        // we know what the active page is.  I know this one is going to cause a fight\n+        // since its not clear whether keeping or discarding is the right way to go.\n+        \n+        if (page == null)\n+            return true;\n+\n+        return pageName.equals(page.getPageName());\n     }\n \n     public void setRequestCycle(IRequestCycle requestCycle)", "filename": "framework/src/java/org/apache/tapestry/record/PageClientPropertyPersistenceScope.java"}, {"additions": 122, "raw_url": "https://github.com/apache/tapestry4/raw/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/test/org/apache/tapestry/record/ClientPropertyPersistenceStrategyTest.java", "blob_url": "https://github.com/apache/tapestry4/blob/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/test/org/apache/tapestry/record/ClientPropertyPersistenceStrategyTest.java", "previous_filename": "framework/src/test/org/apache/tapestry/record/TestClientPropertyPersistenceStrategy.java", "sha": "e9bc66ac6845c2948ab3d373ab359dfb7891a2b1", "changes": 209, "status": "renamed", "deletions": 87, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/test/org/apache/tapestry/record/ClientPropertyPersistenceStrategyTest.java?ref=36043f294e52ddc61ff16409be64acb452aa3ee1", "patch": "@@ -23,58 +23,66 @@\n import org.apache.tapestry.IRequestCycle;\n import org.apache.tapestry.engine.ServiceEncoding;\n import org.apache.tapestry.web.WebRequest;\n-import org.easymock.MockControl;\n \n /**\n  * Tests for {@link org.apache.tapestry.record.ClientPropertyPersistenceStrategy}.\n  * \n  * @author Howard M. Lewis Ship\n  * @since 4.0\n  */\n-public class TestClientPropertyPersistenceStrategy extends HiveMindTestCase\n+public class ClientPropertyPersistenceStrategyTest extends HiveMindTestCase\n {\n-    public void testInitialize()\n+    private IRequestCycle newCycle()\n     {\n-        MockControl requestc = newControl(WebRequest.class);\n-        WebRequest request = (WebRequest) requestc.getMock();\n+        return (IRequestCycle) newMock(IRequestCycle.class);\n+    }\n \n-        request.getParameterNames();\n-        requestc.setReturnValue(Arrays.asList(new Object[]\n-        { \"foo\", \"state:MyPage\" }));\n+    private PersistentPropertyDataEncoder newEncoder()\n+    {\n+        PersistentPropertyDataEncoderImpl encoder = new PersistentPropertyDataEncoderImpl();\n+        encoder.setClassResolver(getClassResolver());\n \n-        MockControl scopec = newControl(ClientPropertyPersistenceScope.class);\n-        ClientPropertyPersistenceScope scope = (ClientPropertyPersistenceScope) scopec.getMock();\n+        return encoder;\n+    }\n \n-        scope.isParameterForScope(\"foo\");\n-        scopec.setReturnValue(false);\n+    private IPage newPage()\n+    {\n+        return (IPage) newMock(IPage.class);\n+    }\n+\n+    private WebRequest newRequest()\n+    {\n+        return (WebRequest) newMock(WebRequest.class);\n+    }\n \n-        scope.isParameterForScope(\"state:MyPage\");\n-        scopec.setReturnValue(true);\n+    private ClientPropertyPersistenceScope newScope()\n+    {\n+        return (ClientPropertyPersistenceScope) newMock(ClientPropertyPersistenceScope.class);\n+    }\n \n-        scope.extractPageName(\"state:MyPage\");\n-        scopec.setReturnValue(\"MyPage\");\n+    public void testAddParametersForPersistentProperties()\n+    {\n+        WebRequest request = newRequest();\n \n-        request.getParameterValue(\"state:MyPage\");\n-        requestc.setReturnValue(\"ENCODED\");\n+        ServiceEncoding encoding = (ServiceEncoding) newMock(ServiceEncoding.class);\n \n-        MockControl encoderc = newControl(PersistentPropertyDataEncoder.class);\n-        PersistentPropertyDataEncoder encoder = (PersistentPropertyDataEncoder) encoderc.getMock();\n+        trainGetParameterNames(request, new String[]\n+        { \"bar\", \"appstate:MyPage\" });\n \n-        List changes = Collections.singletonList(new PropertyChangeImpl(\"foo\", \"bar\", \"baz\"));\n+        trainGetParameterValue(request, \"appstate:MyPage\", \"ENCODED\");\n \n-        encoder.decodePageChanges(\"ENCODED\");\n-        encoderc.setReturnValue(changes);\n+        encoding.setParameterValue(\"appstate:MyPage\", \"ENCODED\");\n \n         replayControls();\n \n         ClientPropertyPersistenceStrategy strategy = new ClientPropertyPersistenceStrategy();\n         strategy.setRequest(request);\n-        strategy.setScope(scope);\n-        strategy.setEncoder(encoder);\n+        strategy.setScope(new AppClientPropertyPersistenceScope());\n+        strategy.setEncoder(newEncoder());\n \n         strategy.initializeService();\n \n-        assertSame(changes, strategy.getStoredChanges(\"MyPage\"));\n+        strategy.addParametersForPersistentProperties(encoding, false);\n \n         verifyControls();\n     }\n@@ -86,96 +94,62 @@ public void testGetChangesUnknownPage()\n         assertTrue(strategy.getStoredChanges(\"UnknownPage\").isEmpty());\n     }\n \n-    public void testStoreAndRetrieve()\n+    public void testInitialize()\n     {\n-        PropertyChange pc = new PropertyChangeImpl(\"foo\", \"bar\", \"baz\");\n-\n-        ClientPropertyPersistenceStrategy strategy = new ClientPropertyPersistenceStrategy();\n-        strategy.setEncoder(newEncoder());\n-\n-        strategy.store(\"MyPage\", \"foo\", \"bar\", \"baz\");\n+        WebRequest request = newRequest();\n+        ClientPropertyPersistenceScope scope = newScope();\n+        PersistentPropertyDataEncoder encoder = (PersistentPropertyDataEncoder) newMock(PersistentPropertyDataEncoder.class);\n \n-        assertEquals(Collections.singletonList(pc), strategy.getStoredChanges(\"MyPage\"));\n+        trainGetParameterNames(request, new String[]\n+        { \"foo\", \"state:MyPage\" });\n \n-        strategy.discardStoredChanges(\"MyPage\");\n+        trainIsParameterForScope(scope, \"foo\", false);\n+        trainIsParameterForScope(scope, \"state:MyPage\", true);\n \n-        assertEquals(Collections.EMPTY_LIST, strategy.getStoredChanges(\"MyPage\"));\n-    }\n+        trainExtractPageName(scope, \"state:MyPage\", \"MyPage\");\n \n-    public void testAddParametersForPersistentProperties()\n-    {\n-        MockControl requestc = newControl(WebRequest.class);\n-        WebRequest request = (WebRequest) requestc.getMock();\n+        trainGetParameterValue(request, \"state:MyPage\", \"ENCODED\");\n \n-        ServiceEncoding encoding = (ServiceEncoding) newMock(ServiceEncoding.class);\n-\n-        request.getParameterNames();\n-        requestc.setReturnValue(Arrays.asList(new Object[]\n-        { \"bar\", \"appstate:MyPage\" }));\n+        List changes = Collections.singletonList(new PropertyChangeImpl(\"foo\", \"bar\", \"baz\"));\n \n-        request.getParameterValue(\"appstate:MyPage\");\n-        requestc.setReturnValue(\"ENCODED\");\n-\n-        encoding.setParameterValue(\"appstate:MyPage\", \"ENCODED\");\n+        trainDecodePageChanges(encoder, \"ENCODED\", changes);\n \n         replayControls();\n \n         ClientPropertyPersistenceStrategy strategy = new ClientPropertyPersistenceStrategy();\n         strategy.setRequest(request);\n-        strategy.setScope(new AppClientPropertyPersistenceScope());\n-        strategy.setEncoder(newEncoder());\n+        strategy.setScope(scope);\n+        strategy.setEncoder(encoder);\n \n         strategy.initializeService();\n \n-        strategy.addParametersForPersistentProperties(encoding, false);\n+        assertSame(changes, strategy.getStoredChanges(\"MyPage\"));\n \n         verifyControls();\n     }\n \n-    private PersistentPropertyDataEncoder newEncoder()\n-    {\n-        PersistentPropertyDataEncoderImpl encoder = new PersistentPropertyDataEncoderImpl();\n-        encoder.setClassResolver(getClassResolver());\n-\n-        return encoder;\n-    }\n-\n     public void testPageScope()\n     {\n-        MockControl requestc = newControl(WebRequest.class);\n-        WebRequest request = (WebRequest) requestc.getMock();\n-\n-        MockControl cyclec = newControl(IRequestCycle.class);\n-        IRequestCycle cycle = (IRequestCycle) cyclec.getMock();\n-\n-        MockControl pagec = newControl(IPage.class);\n-        IPage page = (IPage) pagec.getMock();\n+        WebRequest request = newRequest();\n+        IRequestCycle cycle = newCycle();\n+        IPage page = newPage();\n \n         ServiceEncoding encoding = (ServiceEncoding) newMock(ServiceEncoding.class);\n \n-        cycle.getPage();\n-        cyclec.setReturnValue(page);\n-\n-        cycle.getPage();\n-        cyclec.setReturnValue(page);\n+        trainGetPage(cycle, page);\n \n-        page.getPageName();\n-        pagec.setReturnValue(\"MyPage\");\n-\n-        page.getPageName();\n-        pagec.setReturnValue(\"MyPage\");\n+        trainGetPageName(page, \"MyPage\");\n \n-        request.getParameterNames();\n-        requestc.setReturnValue(Arrays.asList(new Object[]\n-        { \"foo\", \"state:MyPage\", \"state:OtherPage\" }));\n+        trainGetPage(cycle, page);\n+        trainGetPageName(page, \"MyPage\");\n \n-        request.getParameterValue(\"state:MyPage\");\n-        requestc.setReturnValue(\"ENCODED\");\n+        trainGetParameterNames(request, new String[]\n+        { \"foo\", \"state:MyPage\", \"state:OtherPage\" });\n \n-        request.getParameterValue(\"state:OtherPage\");\n-        requestc.setReturnValue(\"ENCODED\");\n+        trainGetParameterValue(request, \"state:MyPage\", \"ENCODED1\");\n+        trainGetParameterValue(request, \"state:OtherPage\", \"ENCODED2\");\n \n-        encoding.setParameterValue(\"state:MyPage\", \"ENCODED\");\n+        encoding.setParameterValue(\"state:MyPage\", \"ENCODED1\");\n \n         replayControls();\n \n@@ -194,4 +168,65 @@ public void testPageScope()\n         verifyControls();\n \n     }\n+\n+    public void testStoreAndRetrieve()\n+    {\n+        PropertyChange pc = new PropertyChangeImpl(\"foo\", \"bar\", \"baz\");\n+\n+        ClientPropertyPersistenceStrategy strategy = new ClientPropertyPersistenceStrategy();\n+        strategy.setEncoder(newEncoder());\n+\n+        strategy.store(\"MyPage\", \"foo\", \"bar\", \"baz\");\n+\n+        assertEquals(Collections.singletonList(pc), strategy.getStoredChanges(\"MyPage\"));\n+\n+        strategy.discardStoredChanges(\"MyPage\");\n+\n+        assertEquals(Collections.EMPTY_LIST, strategy.getStoredChanges(\"MyPage\"));\n+    }\n+\n+    private void trainDecodePageChanges(PersistentPropertyDataEncoder encoder, String encoded,\n+            List changes)\n+    {\n+        encoder.decodePageChanges(encoded);\n+        setReturnValue(encoder, changes);\n+    }\n+\n+    private void trainExtractPageName(ClientPropertyPersistenceScope scope, String parameterName,\n+            String pageName)\n+    {\n+        scope.extractPageName(parameterName);\n+        setReturnValue(scope, pageName);\n+    }\n+\n+    private void trainGetPage(IRequestCycle cycle, IPage page)\n+    {\n+        cycle.getPage();\n+        setReturnValue(cycle, page);\n+    }\n+\n+    private void trainGetPageName(IPage page, String pageName)\n+    {\n+        page.getPageName();\n+        setReturnValue(page, pageName);\n+    }\n+\n+    private void trainGetParameterNames(WebRequest request, String[] names)\n+    {\n+        request.getParameterNames();\n+        setReturnValue(request, Arrays.asList(names));\n+    }\n+\n+    private void trainGetParameterValue(WebRequest request, String parameterName, String value)\n+    {\n+        request.getParameterValue(parameterName);\n+        setReturnValue(request, value);\n+    }\n+\n+    private void trainIsParameterForScope(ClientPropertyPersistenceScope scope,\n+            String parameterName, boolean result)\n+    {\n+        scope.isParameterForScope(parameterName);\n+        setReturnValue(scope, result);\n+    }\n }\n\\ No newline at end of file", "filename": "framework/src/test/org/apache/tapestry/record/ClientPropertyPersistenceStrategyTest.java"}, {"additions": 128, "raw_url": "https://github.com/apache/tapestry4/raw/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/test/org/apache/tapestry/record/PageClientPropertyPersistenceScopeTest.java", "blob_url": "https://github.com/apache/tapestry4/blob/36043f294e52ddc61ff16409be64acb452aa3ee1/framework/src/test/org/apache/tapestry/record/PageClientPropertyPersistenceScopeTest.java", "sha": "333f79030d96ed921503fdce0e5a1c3590942f00", "changes": 128, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/test/org/apache/tapestry/record/PageClientPropertyPersistenceScopeTest.java?ref=36043f294e52ddc61ff16409be64acb452aa3ee1", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2005 The Apache Software Foundation\r\n+//\r\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+// you may not use this file except in compliance with the License.\r\n+// You may obtain a copy of the License at\r\n+//\r\n+//     http://www.apache.org/licenses/LICENSE-2.0\r\n+//\r\n+// Unless required by applicable law or agreed to in writing, software\r\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+// See the License for the specific language governing permissions and\r\n+// limitations under the License.\r\n+\r\n+package org.apache.tapestry.record;\r\n+\r\n+import org.apache.hivemind.test.HiveMindTestCase;\r\n+import org.apache.tapestry.IPage;\r\n+import org.apache.tapestry.IRequestCycle;\r\n+\r\n+/**\r\n+ * Tests for {@link org.apache.tapestry.record.PageClientPropertyPersistenceScope}.\r\n+ * \r\n+ * @author Howard M. Lewis Ship\r\n+ * @since 4.0\r\n+ */\r\n+public class PageClientPropertyPersistenceScopeTest extends HiveMindTestCase\r\n+{\r\n+    protected IRequestCycle newCycle()\r\n+    {\r\n+        return (IRequestCycle) newMock(IRequestCycle.class);\r\n+    }\r\n+\r\n+    protected IPage newPage()\r\n+    {\r\n+        return (IPage) newMock(IPage.class);\r\n+    }\r\n+\r\n+    public void testConstructParameterName()\r\n+    {\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        assertEquals(\"state:MyPage\", scope.constructParameterName(\"MyPage\"));\r\n+    }\r\n+\r\n+    public void testIsParameterForScope()\r\n+    {\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        assertEquals(true, scope.isParameterForScope(\"state:MyPage\"));\r\n+        assertEquals(false, scope.isParameterForScope(\"foo\"));\r\n+        assertEquals(false, scope.isParameterForScope(\"appstate:Foo\"));\r\n+    }\r\n+\r\n+    public void testExtractPageName()\r\n+    {\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        assertEquals(\"MyPage\", scope.extractPageName(\"state:MyPage\"));\r\n+    }\r\n+\r\n+    public void testShouldEncodeState()\r\n+    {\r\n+        IRequestCycle cycle = newCycle();\r\n+        IPage page = newPage();\r\n+\r\n+        trainGetPage(cycle, page);\r\n+        trainGetPageName(page, \"MyPage\");\r\n+\r\n+        replayControls();\r\n+\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        scope.setRequestCycle(cycle);\r\n+\r\n+        assertEquals(true, scope.shouldEncodeState(null, \"MyPage\", null));\r\n+\r\n+        verifyControls();\r\n+    }\r\n+\r\n+    public void testShouldEncodeStateDifferentPage()\r\n+    {\r\n+        IRequestCycle cycle = newCycle();\r\n+        IPage page = newPage();\r\n+\r\n+        trainGetPage(cycle, page);\r\n+        trainGetPageName(page, \"MyPage\");\r\n+\r\n+        replayControls();\r\n+\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        scope.setRequestCycle(cycle);\r\n+\r\n+        assertEquals(false, scope.shouldEncodeState(null, \"OtherPage\", null));\r\n+\r\n+        verifyControls();\r\n+    }\r\n+\r\n+    public void testShouldEncodeStateNoActivePage()\r\n+    {\r\n+        IRequestCycle cycle = newCycle();\r\n+\r\n+        trainGetPage(cycle, null);\r\n+\r\n+        replayControls();\r\n+\r\n+        PageClientPropertyPersistenceScope scope = new PageClientPropertyPersistenceScope();\r\n+\r\n+        scope.setRequestCycle(cycle);\r\n+\r\n+        assertEquals(true, scope.shouldEncodeState(null, \"MyPage\", null));\r\n+\r\n+        verifyControls();\r\n+    }\r\n+\r\n+    private void trainGetPageName(IPage page, String pageName)\r\n+    {\r\n+        page.getPageName();\r\n+        setReturnValue(page, pageName);\r\n+    }\r\n+\r\n+    private void trainGetPage(IRequestCycle cycle, IPage page)\r\n+    {\r\n+        cycle.getPage();\r\n+        setReturnValue(cycle, page);\r\n+    }\r\n+}\r", "filename": "framework/src/test/org/apache/tapestry/record/PageClientPropertyPersistenceScopeTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/36043f294e52ddc61ff16409be64acb452aa3ee1/status.xml", "blob_url": "https://github.com/apache/tapestry4/blob/36043f294e52ddc61ff16409be64acb452aa3ee1/status.xml", "sha": "784e447f2c3978397421239c020056530a776004", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=36043f294e52ddc61ff16409be64acb452aa3ee1", "patch": "@@ -67,6 +67,7 @@\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-769\">StateBinding doesn't override isInvariant()</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-768\">FormMessages class has typo in message key for fieldAlreadyPrerendered()</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-275\" due-to=\"Igor Grimaylo\">Single quotes in a localization of DatePicker strings causes a failure</action>\n+      <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-701\">NPE creating a link from pageValidate() when there are client-persistent properties with page scope</action>\n     </release>\n     <release version=\"4.0-beta-13\" date=\"Nov 12 2005\">\n       <action type=\"update\" dev=\"HLS\">Switch to HiveMind 1.1 (final)</action>", "filename": "status.xml"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/7c467b766690f98567701b5a8df67f642f7f5e63", "parent": "https://github.com/apache/tapestry4/commit/dc15d3911e6b4a8aa86e6846127c46eb9479a7f0", "message": "TAPESTRY-719: If an engine service returns null from getName(), an NPE occurs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@332812 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_9", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/7c467b766690f98567701b5a8df67f642f7f5e63/framework/src/java/org/apache/tapestry/services/impl/ServiceMapImpl.java", "blob_url": "https://github.com/apache/tapestry4/blob/7c467b766690f98567701b5a8df67f642f7f5e63/framework/src/java/org/apache/tapestry/services/impl/ServiceMapImpl.java", "sha": "d5be72c97b93d98a008340024e6af643952314ce", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/services/impl/ServiceMapImpl.java?ref=7c467b766690f98567701b5a8df67f642f7f5e63", "patch": "@@ -128,7 +128,7 @@ public IEngineService resolveEngineService(String name)\n         IEngineService service = contribution.getService();\n         String serviceName = service.getName();\n \n-        if (!serviceName.equals(name))\n+        if (!name.equals(serviceName))\n             throw new ApplicationRuntimeException(ImplMessages.serviceNameMismatch(\n                     service,\n                     name,", "filename": "framework/src/java/org/apache/tapestry/services/impl/ServiceMapImpl.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/7c467b766690f98567701b5a8df67f642f7f5e63/status.xml", "blob_url": "https://github.com/apache/tapestry4/blob/7c467b766690f98567701b5a8df67f642f7f5e63/status.xml", "sha": "7dbaaf1afd6f3b0138bc63fc47873fc427be8290", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=7c467b766690f98567701b5a8df67f642f7f5e63", "patch": "@@ -66,6 +66,7 @@\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-652\">Checkbox does not support FieldLabel</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-328\">When an engine implementation is missing Tapestry does not throw an appropriate error</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-720\">Tapestry should validate that all engine services provide a non-null service parameter</action>\n+      <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-719\">If an engine service returns null from getName(), an NPE occurs</action>\n     </release>\n     <release version=\"4.0-beta-12\" date=\"Oct 30 2005\">\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-718\">Asset injection makes assets appear as null inside finishLoad()</action>", "filename": "status.xml"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/23031202a9ebf8455dbe637192e13cc03b9a64ff", "parent": "https://github.com/apache/tapestry4/commit/7d7c4042249a27cc94a4df759647ecdd961f7b68", "message": "TAPESTRY-526: Tapestry throws a NPE if you try to configure an asset without an extension\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@329628 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_10", "file": [{"additions": 12, "raw_url": "https://github.com/apache/tapestry4/raw/23031202a9ebf8455dbe637192e13cc03b9a64ff/framework/src/java/org/apache/tapestry/web/LocalizedWebContextResourceFinder.java", "blob_url": "https://github.com/apache/tapestry4/blob/23031202a9ebf8455dbe637192e13cc03b9a64ff/framework/src/java/org/apache/tapestry/web/LocalizedWebContextResourceFinder.java", "sha": "2afefc38bdee17ba3cbfd79aac980b5d087dc68d", "changes": 14, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/java/org/apache/tapestry/web/LocalizedWebContextResourceFinder.java?ref=23031202a9ebf8455dbe637192e13cc03b9a64ff", "patch": "@@ -46,8 +46,18 @@ public LocalizedWebContextResourceFinder(WebContext context)\n     public LocalizedResource resolve(String contextPath, Locale locale)\n     {\n         int dotx = contextPath.lastIndexOf('.');\n-        String basePath = contextPath.substring(0, dotx);\n-        String suffix = contextPath.substring(dotx);\n+        String basePath;\n+        String suffix;\n+        if (dotx >= 0) {\n+        \tbasePath = contextPath.substring(0, dotx);\n+        \tsuffix = contextPath.substring(dotx);\n+        }\n+        else\n+        {\n+        \t// Resource without extension\n+        \tbasePath = contextPath;\n+        \tsuffix = \"\";\n+        }\n \n         LocalizedNameGenerator generator = new LocalizedNameGenerator(basePath, locale, suffix);\n ", "filename": "framework/src/java/org/apache/tapestry/web/LocalizedWebContextResourceFinder.java"}, {"additions": 33, "raw_url": "https://github.com/apache/tapestry4/raw/23031202a9ebf8455dbe637192e13cc03b9a64ff/framework/src/test/org/apache/tapestry/web/WebContextResourceTest.java", "blob_url": "https://github.com/apache/tapestry4/blob/23031202a9ebf8455dbe637192e13cc03b9a64ff/framework/src/test/org/apache/tapestry/web/WebContextResourceTest.java", "previous_filename": "framework/src/test/org/apache/tapestry/web/TestWebContextResource.java", "sha": "b05e511edeb597735e1be6b8cafecefc9c283f0d", "changes": 55, "status": "renamed", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/test/org/apache/tapestry/web/WebContextResourceTest.java?ref=23031202a9ebf8455dbe637192e13cc03b9a64ff", "patch": "@@ -19,17 +19,14 @@\n \n import org.apache.hivemind.Resource;\n import org.apache.hivemind.test.HiveMindTestCase;\n-import org.apache.tapestry.web.WebContextResource;\n-import org.apache.tapestry.web.WebContext;\n-import org.easymock.MockControl;\n \n /**\n  * Tests for {@link org.apache.tapestry.web.WebContextResource}.\n  * \n  * @author Howard M. Lewis Ship\n  * @since 4.0\n  */\n-public class TestWebContextResource extends HiveMindTestCase\n+public class WebContextResourceTest extends HiveMindTestCase\n {\n     private WebContext newContext()\n     {\n@@ -57,11 +54,9 @@ public void testConstructor()\n \n     public void testLocalizationExists() throws Exception\n     {\n-        MockControl control = newControl(WebContext.class);\n-        WebContext context = (WebContext) control.getMock();\n+        WebContext context = newContext();\n \n-        context.getResource(\"/foo/bar/baz_en.html\");\n-        control.setReturnValue(new URL(\"http://foo.com\"));\n+        trainGetResource(context, \"/foo/bar/baz_en.html\", new URL(\"http://foo.com\"));\n \n         replayControls();\n \n@@ -75,16 +70,18 @@ public void testLocalizationExists() throws Exception\n         verifyControls();\n     }\n \n-    public void testLocalizationSame() throws Exception\n+    private void trainGetResource(WebContext context, String path, URL url)\n     {\n-        MockControl control = newControl(WebContext.class);\n-        WebContext context = (WebContext) control.getMock();\n+        context.getResource(path);\n+        setReturnValue(context, url);\n+    }\n \n-        context.getResource(\"/foo/bar/baz_en.html\");\n-        control.setReturnValue(null);\n+    public void testLocalizationSame() throws Exception\n+    {\n+        WebContext context = newContext();\n \n-        context.getResource(\"/foo/bar/baz.html\");\n-        control.setReturnValue(new URL(\"http://foo.com\"));\n+        trainGetResource(context, \"/foo/bar/baz_en.html\", null);\n+        trainGetResource(context, \"/foo/bar/baz.html\", new URL(\"http://foo.com\"));\n \n         replayControls();\n \n@@ -99,14 +96,10 @@ public void testLocalizationSame() throws Exception\n \n     public void testLocalizationMissing() throws Exception\n     {\n-        MockControl control = newControl(WebContext.class);\n-        WebContext context = (WebContext) control.getMock();\n-\n-        context.getResource(\"/foo/bar/baz_en.html\");\n-        control.setReturnValue(null);\n+        WebContext context = newContext();\n \n-        context.getResource(\"/foo/bar/baz.html\");\n-        control.setReturnValue(null);\n+        trainGetResource(context, \"/foo/bar/baz_en.html\", null);\n+        trainGetResource(context, \"/foo/bar/baz.html\", null);\n \n         replayControls();\n \n@@ -130,4 +123,22 @@ public void testGetRelativeResource()\n \n         verifyControls();\n     }\n+\n+    public void testGetExtensionlessResource() throws Exception\n+    {\n+        WebContext context = newContext();\n+\n+        trainGetResource(context, \"/foo/bar/baz_en\", new URL(\"http://foo.com\"));\n+\n+        replayControls();\n+\n+        Resource r1 = new WebContextResource(context, \"/foo/bar/baz\");\n+\n+        Resource r2 = r1.getLocalization(Locale.ENGLISH);\n+\n+        assertEquals(\"/foo/bar/baz_en\", r2.getPath());\n+        assertEquals(Locale.ENGLISH, r2.getLocale());\n+\n+        verifyControls();\n+    }\n }\n\\ No newline at end of file", "filename": "framework/src/test/org/apache/tapestry/web/WebContextResourceTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/23031202a9ebf8455dbe637192e13cc03b9a64ff/status.xml", "blob_url": "https://github.com/apache/tapestry4/blob/23031202a9ebf8455dbe637192e13cc03b9a64ff/status.xml", "sha": "8802b82c317598fec816e558772fe8942f3e0beb", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=23031202a9ebf8455dbe637192e13cc03b9a64ff", "patch": "@@ -61,6 +61,7 @@\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-715\">LinkSubmit component should render its body, even when disabled</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-602\">Add annotation to define default value of property</action>\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-723\">The \"empty\" property of StringTranslator is broken</action>\n+      <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-526\" due-to=\"Marcus Brito\">Tapestry throws a NPE if you try to configure an asset without an extension</action>\n     </release>\n     <release version=\"4.0-beta-11\" date=\"Oct 16 2005\">\n       <action type=\"fix\" dev=\"HLS\" fixes-bug=\"TAPESTRY-650\">ClassNotFoundException thrown when deserializing an object from a client persistent property</action>", "filename": "status.xml"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/83c0e2643427a253787b99b088b8b39793fa4db7", "parent": "https://github.com/apache/tapestry4/commit/f976404502d1b737498509696926e2f6782a89b2", "message": "Fix bug 28177 (NPE in org.apache.tapestry.form.LinkSubmit). Thanks to sito@htf.highway.ne.jp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243875 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_11", "file": [{"additions": 7, "raw_url": "https://github.com/apache/tapestry4/raw/83c0e2643427a253787b99b088b8b39793fa4db7/framework/src/org/apache/tapestry/form/LinkSubmit.java", "blob_url": "https://github.com/apache/tapestry4/blob/83c0e2643427a253787b99b088b8b39793fa4db7/framework/src/org/apache/tapestry/form/LinkSubmit.java", "sha": "07acee631dacb64e34f0bfa4ec46e116a40efdfb", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/form/LinkSubmit.java?ref=83c0e2643427a253787b99b088b8b39793fa4db7", "patch": "@@ -81,6 +81,13 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n             {\n                 Body body = Body.get(cycle);\n \n+\t\t\t\tif (body == null)\n+\t\t\t\t    throw new ApplicationRuntimeException(\n+\t\t\t\t        Tapestry.format(\"must-be-contained-by-body\", \"LinkSubmit\"),\n+\t\t\t\t        this,\n+\t\t\t\t        null,\n+\t\t\t\t        null);\n+\t\t\t\t        \t\t\t\t\n                 // make sure the submit function is on the page (once)\n                 if (cycle.getAttribute(ATTRIBUTE_FUNCTION_NAME) == null)\n                 {", "filename": "framework/src/org/apache/tapestry/form/LinkSubmit.java"}, {"additions": 3, "raw_url": "https://github.com/apache/tapestry4/raw/83c0e2643427a253787b99b088b8b39793fa4db7/status.xml", "blob_url": "https://github.com/apache/tapestry4/blob/83c0e2643427a253787b99b088b8b39793fa4db7/status.xml", "sha": "282c50be3b0e936ce614192b914a7a2e2bc73290", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=83c0e2643427a253787b99b088b8b39793fa4db7", "patch": "@@ -240,6 +240,9 @@ NextGen) be released as version number 3.0.\n   <action type=\"fix\" dev=\"HLS\" fixes-bug=\"28010\">\n      ExpressionBinding optimizes expressions incorrectly  \t\n   </action>\n+  <action type=\"fix\" dev=\"DS\" fixes-bug=\"28177\" due-to=\"sito@htf.highway.ne.jp\">\n+     NPE in org.apache.tapestry.form.LinkSubmit.\n+  </action>\n \n  </release>\n   ", "filename": "status.xml"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/3d22aaa2e573ffe36a5522b22eb15320376c4c12", "parent": "https://github.com/apache/tapestry4/commit/81cb012aa3758af4d7125dcd9a7e838ae2d3afc4", "message": "[27954] NPE as follow-up to a ClassNotFoundException caused by a wrongly stuffed OGNL context\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243860 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_12", "file": [{"additions": 5, "raw_url": "https://github.com/apache/tapestry4/raw/3d22aaa2e573ffe36a5522b22eb15320376c4c12/status.xml", "blob_url": "https://github.com/apache/tapestry4/blob/3d22aaa2e573ffe36a5522b22eb15320376c4c12/status.xml", "sha": "1aaab8710d7d712ac912f8d8e86ca53458a546a7", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/status.xml?ref=3d22aaa2e573ffe36a5522b22eb15320376c4c12", "patch": "@@ -209,9 +209,13 @@ NextGen) be released as version number 3.0.\n <!-- Use due-to to give acknowledgement for patches. -->\n   \n  <release version=\"3.0-rc-2\" date=\"unreleased\">\n- \t<action type=\"fix\" dev=\"HLS\" fixed-bug=\"28057\">\n+ \t<action type=\"fix\" dev=\"HLS\" fixes-bug=\"28057\">\n  \t\tFix problems in the binary distribution.\n  \t</action>\t\n+ \t<action type=\"fix\" dev=\"HLS\" fixes-bug=\"27954\">\n+ \t\tCreate proper OGNL context when checking for invariant OGNL expressions\n+ \t\t(when initializing component properties).\n+ \t</action>\n  </release>\n   \n  <release version=\"3.0-rc-1\" date=\"Mar 15 2004\">", "filename": "status.xml"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/81cb012aa3758af4d7125dcd9a7e838ae2d3afc4", "parent": "https://github.com/apache/tapestry4/commit/b24d25a075abc1fcf7383e8767ae29e06177e727", "message": "[27954 ] NPE as follow-up to a ClassNotFoundException caused by a wrongly stuffed OGNL context\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243859 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_13", "file": [{"additions": 13, "raw_url": "https://github.com/apache/tapestry4/raw/81cb012aa3758af4d7125dcd9a7e838ae2d3afc4/framework/src/org/apache/tapestry/pageload/PropertyInitializer.java", "blob_url": "https://github.com/apache/tapestry4/blob/81cb012aa3758af4d7125dcd9a7e838ae2d3afc4/framework/src/org/apache/tapestry/pageload/PropertyInitializer.java", "sha": "2d3d9ebec098fddcd4412d7a6e5a5d4bbd14544e", "changes": 22, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/pageload/PropertyInitializer.java?ref=81cb012aa3758af4d7125dcd9a7e838ae2d3afc4", "patch": "@@ -58,13 +58,14 @@ public PropertyInitializer(\n         _propertyName = propertyName;\n         _expression = expression;\n         _location = location;\n-        \n+\n         prepareInvariant();\n     }\n \n     public void prepareInvariant()\n     {\n         _invariant = false;\n+\n         try\n         {\n             // If no initial value expression is provided, then read the current\n@@ -76,12 +77,13 @@ public void prepareInvariant()\n                 _invariant = true;\n                 _value = OgnlUtils.get(_propertyName, _resolver, _component);\n             }\n-            else if (Ognl.isConstant(_expression))\n-            {\n-                // If the expression is a constant, evaluate it and remember the value \n-                _invariant = true;\n-                _value = OgnlUtils.get(_expression, _resolver, _component);\n-            }\n+            else\n+                if (Ognl.isConstant(_expression, Ognl.createDefaultContext(_component, _resolver)))\n+                {\n+                    // If the expression is a constant, evaluate it and remember the value \n+                    _invariant = true;\n+                    _value = OgnlUtils.get(_expression, _resolver, _component);\n+                }\n         }\n         catch (Exception ex)\n         {\n@@ -98,10 +100,12 @@ else if (Ognl.isConstant(_expression))\n \n     public void pageDetached(PageEvent event)\n     {\n-        try {\n+        try\n+        {\n             if (_invariant)\n                 OgnlUtils.set(_propertyName, _resolver, _component, _value);\n-            else {\n+            else\n+            {\n                 Object value = OgnlUtils.get(_expression, _resolver, _component);\n                 OgnlUtils.set(_propertyName, _resolver, _component, value);\n             }", "filename": "framework/src/org/apache/tapestry/pageload/PropertyInitializer.java"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/909723a2759dc41524d42e1563ddcad2655b1281", "parent": "https://github.com/apache/tapestry4/commit/528d4e2cb9db38f43a61e07d213d15624dd943aa", "message": "Fixed Bug: 26599; NPE in toString() reported by Michael.Frericks@sparkassen-informatik.de\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243762 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_14", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/909723a2759dc41524d42e1563ddcad2655b1281/framework/src/org/apache/tapestry/valid/PatternValidator.java", "blob_url": "https://github.com/apache/tapestry4/blob/909723a2759dc41524d42e1563ddcad2655b1281/framework/src/org/apache/tapestry/valid/PatternValidator.java", "sha": "98b8eadd2a675caf78b833494411ce0c16efdc9a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/valid/PatternValidator.java?ref=909723a2759dc41524d42e1563ddcad2655b1281", "patch": "@@ -291,6 +291,6 @@ public String toString()\n             + \"; Script Path: \"\n             + _scriptPath\n             + \"; Pattern Delegate: \"\n-            + _patternDelegate.toString();\n+            + _patternDelegate;\n     }\n }", "filename": "framework/src/org/apache/tapestry/valid/PatternValidator.java"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4", "parent": "https://github.com/apache/tapestry4/commit/7ac9c0af04e7fe4166f7ae47e3ea3857a68056f7", "message": "Fix minor errors in AbstractEngine exception messages.\nEliminate NPE in Image component when binding value is null.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243291 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_15", "file": [{"additions": 2, "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/IEngine.java", "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/IEngine.java", "sha": "1c9cb693a62642bcd00ca6c067e12c4d4303635f", "changes": 7, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/IEngine.java?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4", "patch": "@@ -242,11 +242,8 @@\n     /**\n      *  Method invoked from the {@link org.apache.tapestry.ApplicationServlet} \n      *  to perform processing of the\n-     *  request.  The return value for this method indicates whether the state of the engine\n-     *  could possibly change during processing; in most cases this is true.  In a few\n-     *  possible cases, this is false.  The ApplicationServlet sometimes performs extra\n-     *  work to ensure that the engine is properly replicated in a clustering environment; if\n-     *  this method returns false, it can skip that extra work.\n+     *  request.  In release 2.4, this has become more of a dirty flag, indicating\n+     *  if any state stored by the engine instance itself has changed.\n      *\n      *  @return true if the state of the engine was, or could have been, changed during\n      *  processing.", "filename": "framework/src/org/apache/tapestry/IEngine.java"}, {"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/TapestryStrings.properties", "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/TapestryStrings.properties", "sha": "c61247e0be924de9e28dfde5c1a8e09cd817d7c1", "changes": 5, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/TapestryStrings.properties?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4", "patch": "@@ -121,11 +121,10 @@ AbstractEngine.unknown-specification=<Unknown specification>\n AbstractEngine.unknown-service=Engine does not implement a service name {0}.\n AbstractEngine.unable-to-begin-request=Tapestry unable to begin processing request.\n AbstractEngine.unable-to-cleanup-page=Unable to cleanup page {0}.\n-AbstractEngine.visit-class-property-not-specified=Could not create visit object because property {0} was not configured.\n AbstractEngine.unable-to-instantiate-visit=Unable to instantiate visit object from class {0}.\n AbstractEngine.unable-to-instantiate-global=Unable to instantiate global object from class {0}.\n AbstractEngine.unable-to-redirect=Unable to redirect to {0}.\n-AbstractEngine.service-name-mismatch=Class {1} is registerred as service {0} but provides service {2} instead.\n+AbstractEngine.service-name-mismatch=Class {1} is registered as service {0} but provides service {2} instead.\n AbstractEngine.unable-to-instantiate-service=Unable to instantiate class {1} as service {0}.\n AbstractEngine.unable-to-find-dispatcher=Unable to find a request dispatcher for local resource ''{0}''.\n AbstractEngine.unable-to-forward=Unable to forward to local resource ''{0}''.\n@@ -318,8 +317,6 @@ PageRecorder.null-property-name=A change event for component {0} failed to speci\n \n RollbackException.message=Unable to set property {0} of component {1} to {2}.\n \n-DefaultValuePersister.no-value-copier-for-class=No value copier has been registerred for class {0}.\n-\n # net.sf.tapestry.resource\n \n ContextResourceLocation.unable-to-reference-context-path=Unable to reference context path ''{0}''.", "filename": "framework/src/org/apache/tapestry/TapestryStrings.properties"}, {"additions": 138, "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/engine/AbstractEngine.java", "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/engine/AbstractEngine.java", "sha": "91d7a16cca32dc63508e399e03e015ae6ddb25a3", "changes": 169, "status": "modified", "deletions": 31, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/engine/AbstractEngine.java?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4", "patch": "@@ -75,6 +75,8 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSession;\n+import javax.servlet.http.HttpSessionBindingEvent;\n+import javax.servlet.http.HttpSessionBindingListener;\n \n import org.apache.tapestry.ApplicationRuntimeException;\n import org.apache.tapestry.ApplicationServlet;\n@@ -107,6 +109,7 @@\n import org.apache.tapestry.util.pool.Pool;\n import org.apache.tapestry.util.prop.OgnlUtils;\n import org.apache.bsf.BSFManager;\n+import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n@@ -162,7 +165,8 @@\n  * \n  **/\n \n-public abstract class AbstractEngine implements IEngine, IEngineServiceView, Externalizable\n+public abstract class AbstractEngine\n+    implements IEngine, IEngineServiceView, Externalizable, HttpSessionBindingListener\n {\n     private static final Log LOG = LogFactory.getLog(AbstractEngine.class);\n \n@@ -312,7 +316,8 @@\n      *\n      **/\n \n-    protected static final String SPECIFICATION_SOURCE_NAME = \"org.apache.tapestry.SpecificationSource\";\n+    protected static final String SPECIFICATION_SOURCE_NAME =\n+        \"org.apache.tapestry.SpecificationSource\";\n \n     /**\n      *  Servlet context attribute name for the {@link IPageSource}\n@@ -431,6 +436,18 @@\n \n     private transient IComponentClassEnhancer _enhancer;\n \n+    /**\n+     *  Set to true when there is a (potential)\n+     *  change to the internal state of the engine, set\n+     *  to false when the engine is stored into the\n+     *  {@link HttpSession}.  \n+     * \n+     *  @since 2.4\n+     * \n+     **/\n+\n+    private transient boolean _dirty;\n+\n     /**\n      *  Sets the Exception page's exception property, then renders the Exception page.\n      *\n@@ -515,23 +532,16 @@ public void reportException(String reportTitle, Throwable ex)\n     /**\n      *  Extends the description of the class generated by {@link #toString()}.\n      *  If a subclass adds additional instance variables that should be described\n-     *  in the instance description, it may overide this method.  Subclasses\n-     *  should invoke this implementation first.  They should append a space\n-     *  before each value.\n+     *  in the instance description, it may overide this method. This implementation\n+     *  does nothing.\n      *\n      *  @see #toString()\n+     * \n      **/\n \n-    public void extendDescription(StringBuffer buffer)\n+    protected void extendDescription(ToStringBuilder builder)\n     {\n-        // In rare cases, toString() may be invoked before\n-        // the engine has a change to obtain the specification\n-        // from the servlet.\n \n-        if (_specification == null)\n-            buffer.append(Tapestry.getString(\"AbstractEngine.unknown-specification\"));\n-        else\n-            buffer.append(_specification.getName());\n     }\n \n     /**\n@@ -850,7 +860,16 @@ public boolean service(RequestContext context) throws ServletException, IOExcept\n \n                 monitor.serviceBegin(serviceName, context.getRequestURI());\n \n-                return service.service(this, cycle, output);\n+                // Invoke the service, which returns true if it may have changed\n+                // the state of the engine (most do return true).\n+\n+                boolean serviceResult = service.service(this, cycle, output);\n+\n+                // Return true only if the engine is actually dirty.  This cuts down\n+                // on the number of times the engine is stored into the\n+                // session unceccesarily.\n+\n+                return serviceResult && _dirty;\n             }\n             catch (PageRedirectException ex)\n             {\n@@ -930,7 +949,7 @@ public boolean service(RequestContext context) throws ServletException, IOExcept\n         // When in doubt, assume that the request did cause some change\n         // to the engine.\n \n-        return true;\n+        return _dirty;\n     }\n \n     /**\n@@ -1049,6 +1068,7 @@ public void setLocale(Locale value)\n         {\n             _locale = value;\n             _localeChanged = true;\n+            markDirty();\n         }\n     }\n \n@@ -1379,23 +1399,28 @@ public IResourceResolver getResourceResolver()\n      *  Invokes {@link #extendDescription(StringBuffer)}\n      *  to fill in details about the instance.\n      *\n-     *  @see #extendDescription(StringBuffer)\n+     *  @see #extendDescription(ToStringB)\n      *\n      **/\n \n     public String toString()\n     {\n-        StringBuffer buffer;\n+        ToStringBuilder builder = new ToStringBuilder(this);\n \n-        buffer = new StringBuffer(super.toString());\n+        builder.append(\n+            \"name\",\n+            _specification == null\n+                ? Tapestry.getString(\"AbstractEngine.unknown-specification\")\n+                : _specification.getName());\n \n-        buffer.append('[');\n+        builder.append(\"dirty\", _dirty);\n+        builder.append(\"locale\", _locale);\n+        builder.append(\"stateful\", _stateful);\n+        builder.append(\"visit\", _visit);\n \n-        extendDescription(buffer);\n+        extendDescription(builder);\n \n-        buffer.append(']');\n-\n-        return buffer.toString();\n+        return builder.toString();\n     }\n \n     /**\n@@ -1420,10 +1445,19 @@ public boolean isResetServiceEnabled()\n     /**\n      *  Gets the visit object, if it has been created already.\n      *\n+     *  <p>\n+     *  If the visit is non-null then\n+     *  the {@link #isDirty()} flag is set (because\n+     *  the engine can't tell what the caller will\n+     *  <i>do</i> with the visit).\n+     * \n      **/\n \n     public Object getVisit()\n     {\n+        if (_visit != null)\n+            markDirty();\n+\n         return _visit;\n     }\n \n@@ -1435,6 +1469,10 @@ public Object getVisit()\n      *  After creating the visit, but before returning,\n      *  the {@link HttpSession} will be created, and\n      *  {@link #setStateful()} will be invoked.\n+     * \n+     *  <p>\n+     *  Sets the {@link #isDirty()} flag, if the return value\n+     *  is not null.\n      *\n      *\n      **/\n@@ -1453,12 +1491,23 @@ public Object getVisit(IRequestCycle cycle)\n             setStateful();\n         }\n \n+        if (_visit != null)\n+            markDirty();\n+\n         return _visit;\n     }\n \n+    /**\n+     *  Updates the visit object and\n+     *  sets the {@link #isDirty() dirty flag}.\n+     * \n+     **/\n+\n     public void setVisit(Object value)\n     {\n         _visit = value;\n+\n+        markDirty();\n     }\n \n     public boolean getHasVisit()\n@@ -1483,11 +1532,6 @@ protected Object createVisit(IRequestCycle cycle)\n         Object result = null;\n \n         visitClassName = _propertySource.getPropertyValue(VISIT_CLASS_PROPERTY_NAME);\n-        if (visitClassName == null)\n-            throw new ApplicationRuntimeException(\n-                Tapestry.getString(\n-                    \"AbstractEngine.visit-class-property-not-specified\",\n-                    VISIT_CLASS_PROPERTY_NAME));\n \n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Creating visit object as instance of \" + visitClassName);\n@@ -1744,7 +1788,7 @@ private Map createServiceMap()\n                         Tapestry.getString(\n                             \"AbstractEngine.service-name-mismatch\",\n                             name,\n-                            serviceClass,\n+                            className,\n                             serviceName));\n \n                 // Replace the class name with an instance\n@@ -1914,7 +1958,8 @@ public IPropertySource getPropertySource()\n      * \n      **/\n \n-    private static final String EXTENSION_PROPERTY_SOURCE_NAME = \"org.apache.tapestry.property-source\";\n+    private static final String EXTENSION_PROPERTY_SOURCE_NAME =\n+        \"org.apache.tapestry.property-source\";\n \n     /**\n      *  The name of an application extension that implements {@link IMonitor}.\n@@ -1972,7 +2017,8 @@ protected IPropertySource createPropertySource(RequestContext context)\n \n         // Lastly, add a final source to handle \"factory defaults\".\n \n-        ResourceBundle bundle = ResourceBundle.getBundle(\"org.apache.tapestry.ConfigurationDefaults\");\n+        ResourceBundle bundle =\n+            ResourceBundle.getBundle(\"org.apache.tapestry.ConfigurationDefaults\");\n \n         result.addSource(new ResourceBundlePropertySource(bundle));\n \n@@ -2072,4 +2118,65 @@ public IComponentClassEnhancer getComponentClassEnhancer()\n         return _enhancer;\n     }\n \n+    /**\n+     *  Returns true if the engine has (potentially) changed\n+     *  state since the last time it was stored\n+     *  into the {@link javax.servlet.http.HttpSession}.  Various\n+     *  events set this property to true.\n+     * \n+     *  @since 2.4\n+     * \n+     **/\n+\n+    public boolean isDirty()\n+    {\n+        return _dirty;\n+    }\n+\n+    /**\n+     *  Invoked to set the dirty flag, indicating that the\n+     *  engine should be stored into the \n+     *  {@link javax.servlet.http.HttpSession}.\n+     * \n+     * \n+     *  @since 2.4\n+     * \n+     **/\n+\n+    protected void markDirty()\n+    {\n+        if (!_dirty)\n+            LOG.debug(\"Setting dirty flag.\");\n+\n+        _dirty = true;\n+    }\n+\n+    /** \n+     * \n+     *  Clears the dirty flag when a engine is stored into the \n+     *  {@link HttpSession}.\n+     * \n+     * \n+     *  @since 2.4 \n+     * \n+     **/\n+\n+    public void valueBound(HttpSessionBindingEvent arg0)\n+    {\n+        LOG.debug(_dirty ? \"Clearing dirty flag.\" : \"Dirty flag already cleared.\");\n+\n+        _dirty = false;\n+    }\n+\n+    /**\n+     *  Does nothing.\n+     * \n+     *  @since 2.4\n+     * \n+     **/\n+\n+    public void valueUnbound(HttpSessionBindingEvent arg0)\n+    {\n+    }\n+\n }\n\\ No newline at end of file", "filename": "framework/src/org/apache/tapestry/engine/AbstractEngine.java"}, {"additions": 17, "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/engine/BaseEngine.java", "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/engine/BaseEngine.java", "sha": "5ee61c81845cc39d5230d3469eec372173ec6944", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/engine/BaseEngine.java?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4", "patch": "@@ -65,6 +65,7 @@\n import java.util.Map;\n import java.util.*;\n \n+import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.tapestry.ApplicationRuntimeException;\n import org.apache.tapestry.IRequestCycle;\n import org.apache.tapestry.Tapestry;\n@@ -104,6 +105,7 @@ protected void cleanupAfterRequest(IRequestCycle cycle)\n         if (Tapestry.isEmpty(_recorders))\n             return;\n \n+\t\tboolean markDirty = false;\n         Iterator i = _recorders.entrySet().iterator();\n \n         while (i.hasNext())\n@@ -119,8 +121,13 @@ protected void cleanupAfterRequest(IRequestCycle cycle)\n                 i.remove();\n \n                 _activePageNames.remove(pageName);\n+      \t\n+      \t\t\tmarkDirty = true;\n             }\n         }\n+        \n+        if (markDirty)\n+        \tmarkDirty();\n     }\n \n     public void forgetPage(String name)\n@@ -139,6 +146,8 @@ public void forgetPage(String name)\n         recorder.discard();\n         _recorders.remove(name);\n         _activePageNames.remove(name);\n+        \n+        markDirty();\n     }\n \n     /**\n@@ -190,6 +199,7 @@ public IPageRecorder createPageRecorder(String pageName, IRequestCycle cycle)\n \n         cycle.getRequestContext().createSession();\n         setStateful();\n+       \n \n         IPageRecorder result = new SessionPageRecorder();\n         result.initialize(pageName, cycle);\n@@ -200,6 +210,8 @@ public IPageRecorder createPageRecorder(String pageName, IRequestCycle cycle)\n             _activePageNames = new HashSet();\n \n         _activePageNames.add(pageName);\n+        \n+        markDirty();\n \n         return result;\n     }\n@@ -259,4 +271,9 @@ public void writeExternal(ObjectOutput out) throws IOException\n         }\n     }\n \n+    public void extendDescription(ToStringBuilder builder)\n+    {\n+\t\tbuilder.append(\"activePageNames\", _activePageNames);\n+    }\n+\n }\n\\ No newline at end of file", "filename": "framework/src/org/apache/tapestry/engine/BaseEngine.java"}, {"additions": 8, "raw_url": "https://github.com/apache/tapestry4/raw/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/html/Image.java", "blob_url": "https://github.com/apache/tapestry4/blob/1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4/framework/src/org/apache/tapestry/html/Image.java", "sha": "a24d23c033d7d2fdf76f0689fb9d54724f0905c5", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/org/apache/tapestry/html/Image.java?ref=1bbbb92942c8a4dd4d3cf2a8056cc06bf2a3c6c4", "patch": "@@ -60,6 +60,7 @@\n import org.apache.tapestry.IMarkupWriter;\n import org.apache.tapestry.IRequestCycle;\n import org.apache.tapestry.RequestCycleException;\n+import org.apache.tapestry.RequiredParameterException;\n \n /**\n  *  Used to insert an image.  To create a rollover image, use the\n@@ -91,7 +92,12 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n         if (cycle.isRewinding())\n             return;\n \n-        String imageURL = getImage().buildURL(cycle);\n+        IAsset imageAsset = getImage();\n+\n+        if (imageAsset == null)\n+            throw new RequiredParameterException(this, \"image\", getBinding(\"image\"));\n+\n+        String imageURL = imageAsset.buildURL(cycle);\n \n         writer.beginEmpty(\"img\");\n \n@@ -106,6 +112,6 @@ protected void renderComponent(IMarkupWriter writer, IRequestCycle cycle)\n     }\n \n     public abstract IAsset getImage();\n-    \n+\n     public abstract int getBorder();\n }\n\\ No newline at end of file", "filename": "framework/src/org/apache/tapestry/html/Image.java"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/1ab692d8e68386f40c9426a8d00a652e5e7ec39c", "parent": "https://github.com/apache/tapestry4/commit/8ffab5ec3ef3fc38fb685c4a2399fe03c9de56d7", "message": "Fix a bug where NPE was thrown when HttpSession timed out.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@243205 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_16", "file": [{"additions": 1, "raw_url": "https://github.com/apache/tapestry4/raw/1ab692d8e68386f40c9426a8d00a652e5e7ec39c/framework/src/net/sf/tapestry/engine/AbstractEngine.java", "blob_url": "https://github.com/apache/tapestry4/blob/1ab692d8e68386f40c9426a8d00a652e5e7ec39c/framework/src/net/sf/tapestry/engine/AbstractEngine.java", "sha": "e67639d08f46a51d9f4189b6254fae378c111bae", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/framework/src/net/sf/tapestry/engine/AbstractEngine.java?ref=1ab692d8e68386f40c9426a8d00a652e5e7ec39c", "patch": "@@ -1418,7 +1418,6 @@ protected void cleanupEngine()\n         if (activePageNames.isEmpty())\n             return;\n \n-        ISpecificationSource specSource = getSpecificationSource();\n         IPageSource source = getPageSource();\n \n         // A bit of a hack, used only when cleaning up the engine and any pages\n@@ -1439,7 +1438,7 @@ protected void cleanupEngine()\n             return;\n         }\n \n-        IRequestCycle fakeCycle = new RequestCycle(this, fakeContext, null);\n+        IRequestCycle fakeCycle = new RequestCycle(this, fakeContext, new NullMonitor());\n \n         Iterator i = activePageNames.iterator();\n ", "filename": "framework/src/net/sf/tapestry/engine/AbstractEngine.java"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/235e9c7e6f304ebd66338fbb92db278d943bcd36", "parent": "https://github.com/apache/tapestry4/commit/fa1d223e7783eb1fd3e4500023ba3775b868c337", "message": "Changed the build to include debugging symbols with the frameworks.\n\n[ 532562 ] Submit.jwc contains error\n[ 532587 ] Submit throws NPE\n[ 532815 ] ValidationDelegate errors\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/tapestry/trunk@242455 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_17", "file": [{"additions": 8, "raw_url": "https://github.com/apache/tapestry4/raw/235e9c7e6f304ebd66338fbb92db278d943bcd36/web/ex_new.html", "blob_url": "https://github.com/apache/tapestry4/blob/235e9c7e6f304ebd66338fbb92db278d943bcd36/web/ex_new.html", "sha": "b487b24cf2ae83d6ba4df08dad4e524b104edbe9", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/web/ex_new.html?ref=235e9c7e6f304ebd66338fbb92db278d943bcd36", "patch": "@@ -42,6 +42,14 @@\n \t<IMG height=44 src=\"images/ico_t.gif\" width=44 align=absMiddle border=0>&nbsp;\n \t  <IMG height=22 alt=\"\" src=\"images/hd_tapestry.gif\" width=100 align=absMiddle vspace=17 border=0> \n \t\n+<h3>Release 1.0.10</h3>\n+\n+Changed the build to include debugging symbols with the frameworks.\n+\n+[ 532562 ] Submit.jwc contains error\n+[ 532587 ] Submit throws NPE\n+[ 532815 ] ValidationDelegate errors\n+\n <h3>Release 1.0.9</h3>\n \n <p>The framework and contrib jar files are now named with the release number (i.e.,", "filename": "web/ex_new.html"}], "repo": "tapestry4"}, {"commit": "https://github.com/apache/tapestry4/commit/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba", "parent": "https://github.com/apache/tapestry4/commit/618bae503b4c52bc550413051fd2e3fabf4ffb86", "message": "TAPESTRY-2570: Fixed NPE issue when trying to report an exception involving an instance that returns null for toString() + move around some variables definition to improve readability\n\ngit-svn-id: https://svn.apache.org/repos/asf/tapestry/tapestry4/trunk@833891 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "tapestry4_18", "file": [{"additions": 22, "raw_url": "https://github.com/apache/tapestry4/raw/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java", "blob_url": "https://github.com/apache/tapestry4/blob/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java", "sha": "1ba34a976df9eade1c2abeb85d17c24cc549ca62", "changes": 50, "status": "modified", "deletions": 28, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java?ref=02b9cfe88da6501b9075f8ad2c89c97fed00b3ba", "patch": "@@ -101,30 +101,15 @@ public void setExhaustive(boolean value)\n     }\n \n     protected Throwable buildDescription(Throwable exception)\n-    {\n-        BeanInfo info;\n-        Class exceptionClass;\n-        ExceptionProperty property;\n-        PropertyDescriptor[] descriptors;\n-        PropertyDescriptor descriptor;\n-        Throwable next = null;\n-        int i;\n-        Object value;\n-        Method method;\n-        ExceptionProperty[] properties;\n-        ExceptionDescription description;\n-        String stringValue;\n-        String message;\n-        String[] stackTrace = null;\n-\n+    {   \n         propertyDescriptions.clear();\n-\n-        message = exception.getMessage();\n-        exceptionClass = exception.getClass();\n+        \n+        Class exceptionClass = exception.getClass();\n \n         // Get properties, ignoring those in Throwable and higher\n         // (including the 'message' property).\n \n+        BeanInfo info;\n         try\n         {\n             info = Introspector.getBeanInfo(exceptionClass, Throwable.class);\n@@ -134,13 +119,16 @@ protected Throwable buildDescription(Throwable exception)\n             return null;\n         }\n \n-        descriptors = info.getPropertyDescriptors();\n+        Object value;\n+        Throwable next = null;\n+        String message = exception.getMessage();\n+        PropertyDescriptor[] descriptors = info.getPropertyDescriptors();\n \n-        for (i = 0; i < descriptors.length; i++)\n+        for (int i = 0; i < descriptors.length; i++)\n         {\n-            descriptor = descriptors[i];\n+        \tPropertyDescriptor descriptor = descriptors[i];\n \n-            method = descriptor.getReadMethod();\n+            Method method = descriptor.getReadMethod();\n             if (method == null)\n                 continue;\n \n@@ -175,29 +163,35 @@ protected Throwable buildDescription(Throwable exception)\n                 continue;\n             }\n \n-            stringValue = value.toString().trim();\n+            String stringValue = value.toString();\n+            \n+            if (stringValue == null)\n+            \tcontinue;\n+            \n+            stringValue = stringValue.trim();            \n \n             if (stringValue.length() == 0)\n                 continue;\n \n-            property = new ExceptionProperty(descriptor.getDisplayName(), value);\n+            ExceptionProperty property = new ExceptionProperty(descriptor.getDisplayName(), value);\n \n             propertyDescriptions.add(property);\n         }\n \n         // If exhaustive, or in the deepest exception (where there's no next)\n         // the extract the stack trace.\n-\n+        String[] stackTrace = null;\n+        \n         if (next == null || exhaustive)\n             stackTrace = getStackTrace(exception);\n \n         // Would be nice to sort the properties here.\n \n-        properties = new ExceptionProperty[propertyDescriptions.size()];\n+        ExceptionProperty[] properties = new ExceptionProperty[propertyDescriptions.size()];\n \n         ExceptionProperty[] propArray = (ExceptionProperty[]) propertyDescriptions.toArray(properties);\n \n-        description = new ExceptionDescription(exceptionClass.getName(), message, propArray, stackTrace);\n+        ExceptionDescription description = new ExceptionDescription(exceptionClass.getName(), message, propArray, stackTrace);\n \n         exceptionDescriptions.add(description);\n ", "filename": "tapestry-framework/src/java/org/apache/tapestry/util/exception/ExceptionAnalyzer.java"}, {"additions": 52, "raw_url": "https://github.com/apache/tapestry4/raw/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java", "blob_url": "https://github.com/apache/tapestry4/blob/02b9cfe88da6501b9075f8ad2c89c97fed00b3ba/tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java", "sha": "ccc3595474418d1e7f801cc27e5010bf8340e20e", "changes": 52, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/tapestry4/contents/tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java?ref=02b9cfe88da6501b9075f8ad2c89c97fed00b3ba", "patch": "@@ -0,0 +1,52 @@\n+package org.apache.tapestry.util.exception;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+import org.apache.hivemind.ApplicationRuntimeException;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+@Test\n+public class TestExceptionAnalyzer extends Assert {\n+\t\n+\tpublic void test_report_exception() {\n+\t\tApplicationRuntimeException ex = new ApplicationRuntimeException(\"TAPerrorSTRY\");\t\t\n+\t\t\n+\t\tByteArrayOutputStream stream = new ByteArrayOutputStream();\n+\t\t\n+\t\tnew ExceptionAnalyzer().reportException(ex, new PrintStream(stream));\n+\t\t\n+\t\tString output = stream.toString();\n+\t\t\t\n+\t\tassertTrue(output.contains(\"org.apache.hivemind.ApplicationRuntimeException\"));\n+\t\tassertTrue(output.contains(\"TAPerrorSTRY\"));\n+\t}\n+\t\n+\t// test for TAPESTRY-2570\n+\tpublic void test_with_null_tostring_exception() {\n+\t\tException dummyException = new Exception(\"TAPerrorSTRY\"){\n+\t\t\tpublic Object getDummy() {\n+\t\t\t\treturn new Object(){\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String toString() {\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t};\n+\t\t\t}\n+\t\t};\n+\t\tApplicationRuntimeException ex = new ApplicationRuntimeException(dummyException);\n+\t\t\n+\t\tByteArrayOutputStream stream = new ByteArrayOutputStream();\n+\t\t\n+\t\tnew ExceptionAnalyzer().reportException(ex, new PrintStream(stream));\n+\t\t\n+\t\tString output = stream.toString();\n+\t\t\n+\t\tassertTrue(output.contains(\"org.apache.hivemind.ApplicationRuntimeException\"));\n+\t\tassertTrue(output.contains(\"TAPerrorSTRY\"));\n+\t\t\n+\t}\n+\t\n+\t\n+}", "filename": "tapestry-framework/src/test/org/apache/tapestry/util/exception/TestExceptionAnalyzer.java"}], "repo": "tapestry4"}]
