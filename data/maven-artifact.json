{
    "maven-artifact_3915cd3": {
        "bug_id": "maven-artifact_3915cd3",
        "commit": "https://github.com/apache/maven-artifact/commit/3915cd36e8706cf27ca298d49b5d37b6c682b346",
        "file": [
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/maven-artifact/blob/3915cd36e8706cf27ca298d49b5d37b6c682b346/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "changes": 157,
                "contents_url": "https://api.github.com/repos/apache/maven-artifact/contents/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java?ref=3915cd36e8706cf27ca298d49b5d37b6c682b346",
                "deletions": 75,
                "filename": "src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "patch": "@@ -481,13 +481,6 @@ private void getRemoteFile( ArtifactRepository repository,\n             wagon.addTransferListener( downloadMonitor );\n         }\n \n-        // TODO: configure on repository\n-        int i = 0;\n-\n-        ChecksumObserver md5ChecksumObserver = addChecksumObserver( wagon, CHECKSUM_ALGORITHMS[i++] );\n-\n-        ChecksumObserver sha1ChecksumObserver = addChecksumObserver( wagon, CHECKSUM_ALGORITHMS[i++] );\n-\n         File temp = new File( destination + \".tmp\" );\n \n         temp.deleteOnExit();\n@@ -507,105 +500,121 @@ private void getRemoteFile( ArtifactRepository repository,\n             // only way the retry flag can be set is if ( firstRun == true ).\n             while ( firstRun || retry )\n             {\n-                // reset the retry flag.\n-                retry = false;\n-\n-                // This should take care of creating destination directory now on\n-                if ( destination.exists() && !force )\n+                ChecksumObserver md5ChecksumObserver = null;\n+                ChecksumObserver sha1ChecksumObserver = null;\n+                try\n                 {\n-                    try\n+                    // TODO: configure on repository\n+                    int i = 0;\n+\n+                    md5ChecksumObserver = addChecksumObserver( wagon, CHECKSUM_ALGORITHMS[i++] );\n+                    sha1ChecksumObserver = addChecksumObserver( wagon, CHECKSUM_ALGORITHMS[i++] );\n+\n+                    // reset the retry flag.\n+                    retry = false;\n+\n+                    // This should take care of creating destination directory now on\n+                    if ( destination.exists() && !force )\n                     {\n-                        downloaded = wagon.getIfNewer( remotePath, temp, destination.lastModified() );\n+                        try\n+                        {\n+                            downloaded = wagon.getIfNewer( remotePath, temp, destination.lastModified() );\n \n-                        if ( !downloaded )\n+                            if ( !downloaded )\n+                            {\n+                                // prevent additional checks of this artifact until it expires again\n+                                destination.setLastModified( System.currentTimeMillis() );\n+                            }\n+                        }\n+                        catch ( UnsupportedOperationException e )\n                         {\n-                            // prevent additional checks of this artifact until it expires again\n-                            destination.setLastModified( System.currentTimeMillis() );\n+                            // older wagons throw this. Just get() instead\n+                            wagon.get( remotePath, temp );\n+\n+                            downloaded = true;\n                         }\n                     }\n-                    catch ( UnsupportedOperationException e )\n+                    else\n                     {\n-                        // older wagons throw this. Just get() instead\n                         wagon.get( remotePath, temp );\n-\n                         downloaded = true;\n                     }\n-                }\n-                else\n-                {\n-                    wagon.get( remotePath, temp );\n-                    downloaded = true;\n-                }\n-\n-                if ( downloaded )\n-                {\n-                    // keep the checksum files from showing up on the download monitor...\n-                    if ( downloadMonitor != null )\n-                    {\n-                        wagon.removeTransferListener( downloadMonitor );\n-                    }\n \n-                    // try to verify the SHA-1 checksum for this file.\n-                    try\n-                    {\n-                        verifyChecksum( sha1ChecksumObserver, destination, temp, remotePath, \".sha1\", wagon );\n-                    }\n-                    catch ( ChecksumFailedException e )\n+                    if ( downloaded )\n                     {\n-                        // if we catch a ChecksumFailedException, it means the transfer/read succeeded, but the checksum\n-                        // doesn't match. This could be a problem with the server (ibiblio HTTP-200 error page), so we'll\n-                        // try this up to two times. On the second try, we'll handle it as a bona-fide error, based on the\n-                        // repository's checksum checking policy.\n-                        if ( firstRun )\n-                        {\n-                            getLogger().warn( \"*** CHECKSUM FAILED - \" + e.getMessage() + \" - RETRYING\" );\n-                            retry = true;\n-                        }\n-                        else\n+                        // keep the checksum files from showing up on the download monitor...\n+                        if ( downloadMonitor != null )\n                         {\n-                            handleChecksumFailure( checksumPolicy, e.getMessage(), e.getCause() );\n+                            wagon.removeTransferListener( downloadMonitor );\n                         }\n-                    }\n-                    catch ( ResourceDoesNotExistException sha1TryException )\n-                    {\n-                        getLogger().debug( \"SHA1 not found, trying MD5\", sha1TryException );\n \n-                        // if this IS NOT a ChecksumFailedException, it was a problem with transfer/read of the checksum\n-                        // file...we'll try again with the MD5 checksum.\n+                        // try to verify the SHA-1 checksum for this file.\n                         try\n                         {\n-                            verifyChecksum( md5ChecksumObserver, destination, temp, remotePath, \".md5\", wagon );\n+                            verifyChecksum( sha1ChecksumObserver, destination, temp, remotePath, \".sha1\", wagon );\n                         }\n                         catch ( ChecksumFailedException e )\n                         {\n-                            // if we also fail to verify based on the MD5 checksum, and the checksum transfer/read\n-                            // succeeded, then we need to determine whether to retry or handle it as a failure.\n+                            // if we catch a ChecksumFailedException, it means the transfer/read succeeded, but the checksum\n+                            // doesn't match. This could be a problem with the server (ibiblio HTTP-200 error page), so we'll\n+                            // try this up to two times. On the second try, we'll handle it as a bona-fide error, based on the\n+                            // repository's checksum checking policy.\n                             if ( firstRun )\n                             {\n+                                getLogger().warn( \"*** CHECKSUM FAILED - \" + e.getMessage() + \" - RETRYING\" );\n                                 retry = true;\n                             }\n                             else\n                             {\n                                 handleChecksumFailure( checksumPolicy, e.getMessage(), e.getCause() );\n                             }\n                         }\n-                        catch ( ResourceDoesNotExistException md5TryException )\n+                        catch ( ResourceDoesNotExistException sha1TryException )\n                         {\n-                            // this was a failed transfer, and we don't want to retry.\n-                            handleChecksumFailure( checksumPolicy, \"Error retrieving checksum file for \" + remotePath,\n-                                md5TryException );\n+                            getLogger().debug( \"SHA1 not found, trying MD5\", sha1TryException );\n+\n+                            // if this IS NOT a ChecksumFailedException, it was a problem with transfer/read of the checksum\n+                            // file...we'll try again with the MD5 checksum.\n+                            try\n+                            {\n+                                verifyChecksum( md5ChecksumObserver, destination, temp, remotePath, \".md5\", wagon );\n+                            }\n+                            catch ( ChecksumFailedException e )\n+                            {\n+                                // if we also fail to verify based on the MD5 checksum, and the checksum transfer/read\n+                                // succeeded, then we need to determine whether to retry or handle it as a failure.\n+                                if ( firstRun )\n+                                {\n+                                    retry = true;\n+                                }\n+                                else\n+                                {\n+                                    handleChecksumFailure( checksumPolicy, e.getMessage(), e.getCause() );\n+                                }\n+                            }\n+                            catch ( ResourceDoesNotExistException md5TryException )\n+                            {\n+                                // this was a failed transfer, and we don't want to retry.\n+                                handleChecksumFailure( checksumPolicy, \"Error retrieving checksum file for \" + remotePath,\n+                                    md5TryException );\n+                            }\n                         }\n-                    }\n \n-                    // reinstate the download monitor...\n-                    if ( downloadMonitor != null )\n-                    {\n-                        wagon.addTransferListener( downloadMonitor );\n+                        // reinstate the download monitor...\n+                        if ( downloadMonitor != null )\n+                        {\n+                            wagon.addTransferListener( downloadMonitor );\n+                        }\n                     }\n-                }\n \n-                // unset the firstRun flag, so we don't get caught in an infinite loop...\n-                firstRun = false;\n+                    // unset the firstRun flag, so we don't get caught in an infinite loop...\n+                    firstRun = false;\n+                }\n+                finally\n+                {\n+                    wagon.removeTransferListener( md5ChecksumObserver );\n+                    wagon.removeTransferListener( sha1ChecksumObserver );\n+                }\n             }\n         }\n         catch ( ConnectionException e )\n@@ -626,9 +635,7 @@ private void getRemoteFile( ArtifactRepository repository,\n         }\n         finally\n         {\n-            // Remove every TransferListener\n-            wagon.removeTransferListener( md5ChecksumObserver );\n-            wagon.removeTransferListener( sha1ChecksumObserver );\n+            // Remove remaining TransferListener instances (checksum handlers removed in above finally clause)\n             if ( downloadMonitor != null )\n             {\n                 wagon.removeTransferListener( downloadMonitor );",
                "raw_url": "https://github.com/apache/maven-artifact/raw/3915cd36e8706cf27ca298d49b5d37b6c682b346/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "sha": "818a85b622ab3acb412b5df74f85a46334a1df80",
                "status": "modified"
            }
        ],
        "message": "Move checksum-observer management inside while loop, since digester is set to null after transfer error, which will result in NPE on next checksum-download attempt. This should be fixed in wagon, but I'm making the adjustment here for now to avoid depending on a wagon snapshot.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/artifact/trunk@672812 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/maven-artifact/commit/56f25d45d06360d8041d1b1e9bfa9916b9b9e651",
        "repo": "maven-artifact",
        "unit_tests": [
            "DefaultWagonManagerTest.java"
        ]
    },
    "maven-artifact_3a3168f": {
        "bug_id": "maven-artifact_3a3168f",
        "commit": "https://github.com/apache/maven-artifact/commit/3a3168f6270f597f228cf8d00d3679675cc66998",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/maven-artifact/blob/3a3168f6270f597f228cf8d00d3679675cc66998/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/maven-artifact/contents/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java?ref=3a3168f6270f597f228cf8d00d3679675cc66998",
                "deletions": 1,
                "filename": "src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "patch": "@@ -681,7 +681,14 @@ public ArtifactRepository getMirrorRepository( ArtifactRepository repository )\n         ArtifactRepository mirror = getMirror( repository );\n         if ( mirror != null )\n         {\n-            repository = repositoryFactory.createArtifactRepository( mirror.getId(), mirror.getUrl(),\n+            String id = mirror.getId();\n+            if ( id == null )\n+            {\n+                // TODO: this should be illegal in settings.xml\n+                id = repository.getId();\n+            }\n+\n+            repository = repositoryFactory.createArtifactRepository( id, mirror.getUrl(),\n                                                                      repository.getLayout(), repository.getSnapshots(),\n                                                                      repository.getReleases() );\n         }",
                "raw_url": "https://github.com/apache/maven-artifact/raw/3a3168f6270f597f228cf8d00d3679675cc66998/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "sha": "8a2b024f0b0a4f23db6264f1f55eaf91c73e94bc",
                "status": "modified"
            }
        ],
        "message": "[MNG-3495] avoid a potential NPE in the repository hashcode during exceptions for artifact resolution errors if settings.xml is malformed\nMerged from: r643880\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/artifact/trunk@643883 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/maven-artifact/commit/d1acc0ec552078afec8249203f429ea93b84d28f",
        "repo": "maven-artifact",
        "unit_tests": [
            "DefaultWagonManagerTest.java"
        ]
    },
    "maven-artifact_9550093": {
        "bug_id": "maven-artifact_9550093",
        "commit": "https://github.com/apache/maven-artifact/commit/95500936130331239734639e1b468bca693e284f",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/maven-artifact/blob/95500936130331239734639e1b468bca693e284f/src/main/java/org/apache/maven/artifact/DefaultArtifact.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/maven-artifact/contents/src/main/java/org/apache/maven/artifact/DefaultArtifact.java?ref=95500936130331239734639e1b468bca693e284f",
                "deletions": 14,
                "filename": "src/main/java/org/apache/maven/artifact/DefaultArtifact.java",
                "patch": "@@ -101,7 +101,7 @@ public DefaultArtifact( String groupId, String artifactId, VersionRange versionR\n         this.artifactId = artifactId;\n \n         this.versionRange = versionRange;\n-        \n+\n         selectVersionFromNewRangeIfAvailable();\n \n         this.artifactHandler = artifactHandler;\n@@ -142,7 +142,7 @@ private void validateIdentity()\n                                                   \"The type cannot be empty.\" );\n         }\n \n-        if ( version == null && versionRange == null )\n+        if ( ( version == null ) && ( versionRange == null ) )\n         {\n             throw new InvalidArtifactRTException( groupId, artifactId, getVersion(), type,\n                                                   \"The version cannot be empty.\" );\n@@ -151,7 +151,7 @@ private void validateIdentity()\n \n     private boolean empty( String value )\n     {\n-        return value == null || value.trim().length() < 1;\n+        return ( value == null ) || ( value.trim().length() < 1 );\n     }\n \n     public String getClassifier()\n@@ -187,8 +187,8 @@ public String getVersion()\n     public void setVersion( String version )\n     {\n         this.version = version;\n-        this.setBaseVersionInternal( version );\n-        this.versionRange = null;\n+        setBaseVersionInternal( version );\n+        versionRange = null;\n     }\n \n     public String getType()\n@@ -283,9 +283,9 @@ public String toString()\n         }\n         appendArtifactTypeClassifierString( sb );\n         sb.append( \":\" );\n-        if ( getBaseVersion() != null )\n+        if ( getBaseVersionInternal() != null )\n         {\n-            sb.append( getBaseVersion() );\n+            sb.append( getBaseVersionInternal() );\n         }\n         else\n         {\n@@ -366,11 +366,21 @@ public String getBaseVersion()\n         return baseVersion;\n     }\n \n+    protected String getBaseVersionInternal()\n+    {\n+        if ( ( baseVersion == null ) && ( version != null ) )\n+        {\n+            setBaseVersionInternal( version );\n+        }\n+\n+        return baseVersion;\n+    }\n+\n     public void setBaseVersion( String baseVersion )\n     {\n         setBaseVersionInternal( baseVersion );\n     }\n-    \n+\n     protected void setBaseVersionInternal( String baseVersion )\n     {\n         Matcher m = VERSION_FILE_PATTERN.matcher( baseVersion );\n@@ -449,7 +459,7 @@ public ArtifactFilter getDependencyFilter()\n \n     public void setDependencyFilter( ArtifactFilter artifactFilter )\n     {\n-        this.dependencyFilter = artifactFilter;\n+        dependencyFilter = artifactFilter;\n     }\n \n     public ArtifactHandler getArtifactHandler()\n@@ -480,20 +490,20 @@ public VersionRange getVersionRange()\n     public void setVersionRange( VersionRange versionRange )\n     {\n         this.versionRange = versionRange;\n-        \n+\n         selectVersionFromNewRangeIfAvailable();\n     }\n-    \n+\n     private void selectVersionFromNewRangeIfAvailable()\n     {\n-        if ( versionRange != null && versionRange.getRecommendedVersion() != null )\n+        if ( ( versionRange != null ) && ( versionRange.getRecommendedVersion() != null ) )\n         {\n             selectVersion( versionRange.getRecommendedVersion().toString() );\n         }\n         else\n         {\n-            this.version = null;\n-            this.baseVersion = null;\n+            version = null;\n+            baseVersion = null;\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/maven-artifact/raw/95500936130331239734639e1b468bca693e284f/src/main/java/org/apache/maven/artifact/DefaultArtifact.java",
                "sha": "c7549ee93ae0df4962be597be49ba035bec420ca",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE when version is null on DefaultArtifact.toString() without removing the NPE throw when the public API getBaseVersion() is called and version is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/artifact/trunk@570473 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/maven-artifact/commit/e104295bc920554961432dce31a1c62a471af618",
        "repo": "maven-artifact",
        "unit_tests": [
            "DefaultArtifactTest.java"
        ]
    },
    "maven-artifact_98a0df1": {
        "bug_id": "maven-artifact_98a0df1",
        "commit": "https://github.com/apache/maven-artifact/commit/98a0df1636ccf85c021fac1e33de3f3a8b3e22b9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/maven-artifact/blob/98a0df1636ccf85c021fac1e33de3f3a8b3e22b9/src/main/java/org/apache/maven/artifact/DefaultArtifact.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/maven-artifact/contents/src/main/java/org/apache/maven/artifact/DefaultArtifact.java?ref=98a0df1636ccf85c021fac1e33de3f3a8b3e22b9",
                "deletions": 1,
                "filename": "src/main/java/org/apache/maven/artifact/DefaultArtifact.java",
                "patch": "@@ -305,7 +305,7 @@ else if ( !a.getType().equals( type ) )\n         {\n             return false;\n         }\n-        else if ( classifier == null ? a.getClassifier() != null : !a.getClassifier().equals( classifier ) )\n+        else if ( a.getClassifier() == null ? classifier != null : !a.getClassifier().equals( classifier ) )\n         {\n             return false;\n         }",
                "raw_url": "https://github.com/apache/maven-artifact/raw/98a0df1636ccf85c021fac1e33de3f3a8b3e22b9/src/main/java/org/apache/maven/artifact/DefaultArtifact.java",
                "sha": "0e45e3296ce1754aacbdce5166816903ca623ea8",
                "status": "modified"
            }
        ],
        "message": "prevent NPE in equals()\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk/maven-artifact@349699 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/maven-artifact/commit/63db0abc3a1caaeb32fd5335817737749f7d995c",
        "repo": "maven-artifact",
        "unit_tests": [
            "DefaultArtifactTest.java"
        ]
    },
    "maven-artifact_cc1506e": {
        "bug_id": "maven-artifact_cc1506e",
        "commit": "https://github.com/apache/maven-artifact/commit/cc1506ef9a183c4b2c142783690b2b058654b93b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/maven-artifact/blob/cc1506ef9a183c4b2c142783690b2b058654b93b/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/maven-artifact/contents/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java?ref=cc1506ef9a183c4b2c142783690b2b058654b93b",
                "deletions": 0,
                "filename": "src/main/java/org/apache/maven/artifact/versioning/VersionRange.java",
                "patch": "@@ -54,6 +54,11 @@ public List getRestrictions()\n     public static VersionRange createFromVersionSpec( String spec )\n         throws InvalidVersionSpecificationException\n     {\n+        if ( spec == null )\n+        {\n+            return null;\n+        }\n+\n         List restrictions = new ArrayList();\n         String process = spec;\n         ArtifactVersion version = null;",
                "raw_url": "https://github.com/apache/maven-artifact/raw/cc1506ef9a183c4b2c142783690b2b058654b93b/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java",
                "sha": "945f988cb0146608010b1865151f5ce3714bb0d0",
                "status": "modified"
            }
        ],
        "message": "avoid NPE, pass on to proper validation\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk/maven-artifact@219888 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/maven-artifact/commit/731b8be9463363de5d5032deb05ab2d53a8568e7",
        "repo": "maven-artifact",
        "unit_tests": [
            "VersionRangeTest.java"
        ]
    }
}