{
    "shindig_1be03ff": {
        "bug_id": "shindig_1be03ff",
        "commit": "https://github.com/apache/shindig/commit/1be03fffc280051646d722518e91fbaf6938291e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/shindig/blob/1be03fffc280051646d722518e91fbaf6938291e/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java?ref=1be03fffc280051646d722518e91fbaf6938291e",
                "deletions": 4,
                "filename": "java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "patch": "@@ -112,10 +112,12 @@ public RestHandler getRestHandler(String path, String method) {\n     Map<String, SortedSet<RestPath>> methods = serviceMethodPathMap.get(pathParts[0]);\n     if (methods != null) {\n       SortedSet<RestPath> paths = methods.get(method);\n-      for (RestPath restPath : paths) {\n-        RestHandler handler = restPath.accept(pathParts);\n-        if (handler != null) {\n-          return handler;\n+      if (paths != null) {\n+        for (RestPath restPath : paths) {\n+          RestHandler handler = restPath.accept(pathParts);\n+          if (handler != null) {\n+            return handler;\n+          }\n         }\n       }\n     }",
                "raw_url": "https://github.com/apache/shindig/raw/1be03fffc280051646d722518e91fbaf6938291e/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "sha": "41b93b46c5d099f947503c153340c24800477a00",
                "status": "modified"
            }
        ],
        "message": "avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@746034 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/22a06925697a972b4767ec72c1f91dba8dd86d1d",
        "repo": "shindig",
        "unit_tests": [
            "DefaultHandlerRegistryTest.java"
        ]
    },
    "shindig_1e8d0dc": {
        "bug_id": "shindig_1e8d0dc",
        "commit": "https://github.com/apache/shindig/commit/1e8d0dc34570f2ed09f9ed6b86bbb61b5a820305",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/shindig/blob/1e8d0dc34570f2ed09f9ed6b86bbb61b5a820305/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java?ref=1e8d0dc34570f2ed09f9ed6b86bbb61b5a820305",
                "deletions": 4,
                "filename": "java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "patch": "@@ -317,9 +317,7 @@ private SourceMappings(int[][] lines, String[] mappings, List<JsContent> content\n           int nextMapping = lines[line][col];\n           codePos++;\n           if (nextMapping != curMapping && curMapping != -1) {\n-            JsContent sourceJs = orig.get(getRootSrc(mappings[curMapping]));\n-            compiledOut.add(JsContent.fromFeature(compiled.substring(codeStart, codePos),\n-                sourceJs.getSource(), sourceJs.getFeature(), null));\n+            appendJsContent(compiledOut, codeStart, codePos, compiled, curMapping);\n             codeStart = codePos;\n           }\n           curMapping = nextMapping;\n@@ -332,8 +330,14 @@ private SourceMappings(int[][] lines, String[] mappings, List<JsContent> content\n     private void appendJsContent(List<JsContent> out, int startPos, int codePos, \n         String compiled, int mapping) {\n       JsContent sourceJs = orig.get(getRootSrc(mappings[mapping]));\n+      String sourceName = \"[closure-compiler-synthesized]\";\n+      String featureName = \"[closure-compiler]\";\n+      if (sourceJs != null) {\n+        sourceName = sourceJs.getSource() != null ? sourceJs.getSource() : \"\";\n+        featureName = sourceJs.getFeature() != null ? sourceJs.getFeature() : \"\";\n+      }\n       out.add(JsContent.fromFeature(compiled.substring(startPos, codePos),\n-          sourceJs.getSource(), sourceJs.getFeature(), null));\n+          sourceName, featureName, null));\n     }\n     \n     private static final String BEGIN_COMMENT = \"/*\";",
                "raw_url": "https://github.com/apache/shindig/raw/1e8d0dc34570f2ed09f9ed6b86bbb61b5a820305/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "sha": "3b43eb30f92721257676499e97b2a319e163c207",
                "status": "modified"
            }
        ],
        "message": "sourceMapping NPE fixes to ClosureJsCompiler.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@1086813 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/bb279b37ebbd91405beb72715d39feaafa7a3646",
        "repo": "shindig",
        "unit_tests": [
            "ClosureJsCompilerTest.java"
        ]
    },
    "shindig_27455f1": {
        "bug_id": "shindig_27455f1",
        "commit": "https://github.com/apache/shindig/commit/27455f1379596a1d8ac6d47fbe480f1b7e5577d7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/27455f1379596a1d8ac6d47fbe480f1b7e5577d7/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java?ref=27455f1379596a1d8ac6d47fbe480f1b7e5577d7",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "patch": "@@ -330,11 +330,13 @@ private void appendJsContent(List<JsContent> out, int startPos, int codePos,\n         String compiled, int mapping) {\n       JsContent sourceJs = orig.get(getRootSrc(mappings[mapping]));\n       String sourceName = \"[closure-compiler-synthesized]\";\n+      FeatureBundle bundle = null;\n       if (sourceJs != null) {\n         sourceName = sourceJs.getSource() != null ? sourceJs.getSource() : \"\";\n+        bundle = sourceJs.getFeatureBundle();\n       }\n       out.add(JsContent.fromFeature(compiled.substring(startPos, codePos),\n-          sourceName, sourceJs.getFeatureBundle(), null));\n+          sourceName, bundle, null));\n     }\n     \n     private static final String BEGIN_COMMENT = \"/*\";",
                "raw_url": "https://github.com/apache/shindig/raw/27455f1379596a1d8ac6d47fbe480f1b7e5577d7/java/gadgets/src/main/java16/org/apache/shindig/gadgets/rewrite/js/ClosureJsCompiler.java",
                "sha": "22f830bbe5adf9d5f82020c8bf2e65c9a8b2c652",
                "status": "modified"
            }
        ],
        "message": "Fix NPE for profiled JS generating from text-type JsContent.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/shindig/trunk@1097217 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/4b4b520cd2ea44ddfe68d43c287a560baf0ac841",
        "repo": "shindig",
        "unit_tests": [
            "ClosureJsCompilerTest.java"
        ]
    },
    "shindig_523ce10": {
        "bug_id": "shindig_523ce10",
        "commit": "https://github.com/apache/shindig/commit/523ce105dd231488a7c07015175a088d3c6fe329",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 9,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "patch": "@@ -135,11 +135,13 @@ public String getTitle() {\n    */\n   public URL getTitleURL() {\n     URL ret = null;\n-    String urlStr = baseSpec.getTitleURL().toString();\n-    try {\n-      ret = new URL(substitutions.substitute(urlStr));\n-    } catch (MalformedURLException e) {\n-      return null;\n+    if (baseSpec.getTitleURL() != null) {\n+      String urlStr = baseSpec.getTitleURL().toString();\n+      try {\n+        ret = new URL(substitutions.substitute(urlStr));\n+      } catch (MalformedURLException e) {\n+        return null;\n+      }\n     }\n     return ret;\n   }\n@@ -264,12 +266,9 @@ public ContentType getContentType() {\n \n   /**\n    * @return URL of gadget to render of type == URL; null if malformed/missing\n+   * @throws IllegalStateException if contentType is not URL.\n    */\n   public URL getContentHref() {\n-    if (getContentType() != ContentType.URL) {\n-      return null;\n-    }\n-\n     URL ret = null;\n     String urlStr = baseSpec.getContentHref().toString();\n     try {\n@@ -282,6 +281,7 @@ public URL getContentHref() {\n \n   /**\n    * @return Gadget contents with all substitutions applied\n+   * @throws IllegalStateException if contentType is not HTML.\n    */\n   public String getContentData() {\n     return substitutions.substitute(baseSpec.getContentData());",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "sha": "6f31f2cbd4ee8a7fc9ea61e157da51b9bb017fe1",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpec.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpec.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 0,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpec.java",
                "patch": "@@ -77,7 +77,19 @@\n   }\n \n   public ContentType getContentType();\n+\n+  /**\n+   * Must be a URL type gadget.\n+   *\n+   * @return The URL for this gadget spec.\n+   * @throws IllegalStateException if contentType is not URL.\n+   */\n   public URL getContentHref();\n+\n+  /**\n+   * @return The HTML content for this gadget spec.\n+   * @throws IllegalStateException if contentType is not HTML.\n+   */\n   public String getContentData();\n \n   /**",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpec.java",
                "sha": "988b0ac9ebb2591f874b9df4875247ed00ef91b2",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpecParser.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpecParser.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 0,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpecParser.java",
                "patch": "@@ -507,10 +507,16 @@ public ContentType getContentType() {\n     }\n \n     public URL getContentHref() {\n+      if (contentType != ContentType.URL) {\n+        throw new IllegalStateException(\"contentType must be URL\");\n+      }\n       return contentHref;\n     }\n \n     public String getContentData() {\n+      if (contentType != ContentType.HTML) {\n+        throw new IllegalStateException(\"contentType must be HTML\");\n+      }\n       return contentData;\n     }\n   }",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/GadgetSpecParser.java",
                "sha": "8e5c7f55eb741b0faa54522bbd0e70108a8aa5ec",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Substitutions.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/Substitutions.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 7,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/Substitutions.java",
                "patch": "@@ -106,19 +106,21 @@ public void addSubstitutions(Type type, Map<String, String> entries) {\n    *\n    * @param input\n    *        The base string, with substitution markers.\n-   * @return The substituted string.\n+   * @return The substituted string or null if {@code input} is null.\n    */\n   public String substitute(String input) {\n-    for (Type type : Type.values()) {\n-      input = substituteType(type, input);\n+    if (input != null) {\n+      for (Type type : Type.values()) {\n+        input = substituteType(type, input);\n+      }\n     }\n     return input;\n   }\n \n   /**\n    * Performs string substitution only for the specified type. If no\n-   * substitution for the given string was provided, the output is left\n-   * untouched.\n+   * substitution for {@code input} was provided or {@code input} is null,\n+   * the output is left untouched.\n    *\n    * @param type\n    *        The type you wish to perform substitutions for.\n@@ -127,8 +129,8 @@ public String substitute(String input) {\n    * @return The substituted string.\n    */\n   public String substituteType(Type type, String input) {\n-    if (!input.contains(type.prefix) ||\n-         substitutions.get(type).size() == 0) {\n+    if (input == null || substitutions.get(type).size() == 0 ||\n+        !input.contains(type.prefix)) {\n       return input;\n     }\n ",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Substitutions.java",
                "sha": "54b4a84272f3fcd40e8363b576ac36858eb5efb5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Utf8InputStream.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/Utf8InputStream.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 2,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/Utf8InputStream.java",
                "patch": "@@ -13,7 +13,6 @@\n  */\n package org.apache.shindig.gadgets;\n \n-import java.io.IOException;\n import java.io.InputStream;\n \n /**\n@@ -24,8 +23,9 @@\n   private int position = 0;\n \n   @Override\n-  public int read() throws IOException {\n+  public int read() {\n     if (position == 0\n+        && content.length >= 3\n         && content[0] == (byte)0xEF\n         && content[1] == (byte)0xBB\n         && content[2] == (byte)0xBF) {",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/Utf8InputStream.java",
                "sha": "f349abd9d16fbbb5517099d1004f527676ba05f8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/shindig/blob/26be495c579c134237976ae4643fc064e2766915/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/JsonpProxyServlet.java",
                "changes": 146,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/JsonpProxyServlet.java?ref=26be495c579c134237976ae4643fc064e2766915",
                "deletions": 146,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/JsonpProxyServlet.java",
                "patch": "@@ -1,146 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.shindig.gadgets.http;\n-\n-import org.apache.shindig.gadgets.BasicRemoteContentFetcher;\n-import org.apache.shindig.gadgets.RemoteContent;\n-\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.util.Date;\n-\n-public class JsonpProxyServlet extends HttpServlet {\n-  private static final String UNPARSEABLE_CRUFT = \"throw 1; < don't be evil' >\";\n-  private static final int TWO_HOURS_IN_MS = 7200000;\n-  private static final int ONE_HOUR_IN_SECS = 3600;\n-\n-  @Override\n-  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n-      throws ServletException, IOException {\n-    // TODO: If this request is coming in on a Host: that does not match\n-    // the configured gadget rendering host, we should check for edit tokens\n-    // somehow.\n-\n-    // Validate url= parameter\n-    URL origin_url = extractAndValidateUrl(request);\n-\n-    // Fetch the content and convert it into JSON.\n-    BasicRemoteContentFetcher fetcher = new BasicRemoteContentFetcher(1024*1024);\n-    RemoteContent results = fetcher.fetch(origin_url);\n-    String response_template = buildResponse(origin_url.toString(), results);\n-\n-    // Fill out the response.\n-    setCachingHeaders(response);\n-    PrintWriter pw = response.getWriter();\n-    pw.write(response_template);\n-  }\n-\n-  /**\n-   * Gets the url= parameter from the request and applies some basic sanity\n-   * checking.\n-   *\n-   * @param request The HTTP request from the browser.\n-   * @return A URL object of the URL\n-   * @throws ServletException if the URL fails security checks or is malformed.\n-   */\n-  private URL extractAndValidateUrl(HttpServletRequest request)\n-      throws ServletException {\n-    String url = request.getParameter(\"url\");\n-    if (url == null) {\n-      throw new ServletException(\"Missing url= parameter\");\n-    }\n-\n-    if (!url.startsWith(\"http://\")) {\n-      throw new ServletException(\"url= parameter does not start with http://\");\n-    }\n-\n-    URL origin_url;\n-    try {\n-      origin_url = new URL(url);\n-    } catch (MalformedURLException e) {\n-      throw new ServletException(\"malformed url= parameter\");\n-    }\n-    return origin_url;\n-  }\n-\n-  /**\n-   * Sets HTTP headers that instruct the browser to cache for 2 hours.\n-   *\n-   * @param response The HTTP response\n-   */\n-  private void setCachingHeaders(HttpServletResponse response) {\n-    // TODO: figure out why we're not using the same amount of time for these\n-    // headers.\n-    response.setHeader(\"Cache-Control\", \"public,max-age=\" + ONE_HOUR_IN_SECS);\n-    response.setDateHeader(\"Expires\", new Date().getTime() + TWO_HOURS_IN_MS);\n-  }\n-\n-  /**\n-   * Converts the results of the fetch into a response suitable for parsing by\n-   * JavaScript.\n-   *\n-   * @param url             Canonical representation of the URL\n-   * @param origin_response The results of the fetch\n-   * @return A string suitable for writing to the browser.\n-   */\n-  private String buildResponse(String url,\n-                               RemoteContent origin_response) {\n-    String escaped_output =\n-        javaScriptStringEscape(new String(origin_response.getByteArray()));\n-\n-    String response_template = UNPARSEABLE_CRUFT +\n-        \"{ '{{URL}}' : \" +\n-        \"{ 'body': '{{CONTENT}}', \" +\n-        \"  'rc': {{HTTP_STATUS_CODE}} } }\";\n-\n-    response_template =\n-        response_template.replace(\"{{URL}}\", javaScriptStringEscape(url));\n-    response_template =\n-        response_template.replace(\"{{CONTENT}}\", escaped_output);\n-    response_template = response_template\n-        .replace(\"{{HTTP_STATUS_CODE}}\",\n-            Integer.toString(origin_response.getHttpStatusCode()));\n-    return response_template;\n-  }\n-\n-  /**\n-   * Escapes a string so that it can be used as a JavaScript literal.\n-   * <p/>\n-   * TODO: fix this to support proper JS escaping.  This doesn't handle Unicode\n-   * characters correctly.\n-   *\n-   * @param unescaped The unescaped string.\n-   * @return a string with all JavaScript metacharacters escaped\n-   */\n-  private String javaScriptStringEscape(String unescaped) {\n-    StringBuilder escaped = new StringBuilder();\n-    for (int i = 0; i < unescaped.length(); i++) {\n-      char c = unescaped.charAt(i);\n-      if (Character.isDigit(c) || Character.isLetter(c) ||\n-          Character.isWhitespace(c)) {\n-        escaped.append(c);\n-      } else {\n-        escaped.append(\"\\\\x\");\n-        escaped.append(Integer.toHexString(c));\n-      }\n-    }\n-    return escaped.toString();\n-  }\n-}",
                "raw_url": "https://github.com/apache/shindig/raw/26be495c579c134237976ae4643fc064e2766915/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/JsonpProxyServlet.java",
                "sha": "db99943c4e2b86f25f22d9c0f9ce78b42907aa1d",
                "status": "removed"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/shindig/blob/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/ProxyServlet.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/ProxyServlet.java?ref=523ce105dd231488a7c07015175a088d3c6fe329",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/ProxyServlet.java",
                "patch": "@@ -28,7 +28,8 @@\n   private final static ProxyHandler handler = new ProxyHandler();\n   protected void doGet(HttpServletRequest request, HttpServletResponse response)\n       throws ServletException, IOException {\n-    if (request.getServletPath().equals(\"/gadgets/jsonp\")) {\n+    String output = request.getParameter(\"output\");\n+    if (output != null && output.equals(\"js\")) {\n       handler.fetchJson(request, response);\n     } else {\n       handler.fetch(request, response);",
                "raw_url": "https://github.com/apache/shindig/raw/523ce105dd231488a7c07015175a088d3c6fe329/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/ProxyServlet.java",
                "sha": "f0ff6940e58aec7dbe937dd7c296ee93507b9ed6",
                "status": "modified"
            }
        ],
        "message": "      * Fixed NPE in substitute() and  substituteType() when input is null, and\n          check if there are no subs for that type before checking input for\n          its prefix since that is much faster.\n      * GadgetSpec.getContentData/Href() throw ISE if not correct type.\n      * Gadget and ParsedGadgetSpec honor this contract.\n\n      * Resolved proxy handler confusion by adding an explicit output parameter to /proxy and eliminating /jsonp. Fixed a potenatial runtime exception in Utf8InputStream.\n\n      * Fix handling of null title-url.\n\nContributors: dharkness@google.com, lryan@google.com, etnu@google.com (still getting SVN access set up; I'm proxying in the meantime)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@604358 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/26be495c579c134237976ae4643fc064e2766915",
        "repo": "shindig",
        "unit_tests": [
            "ProxyServletTest.java"
        ]
    },
    "shindig_90f5746": {
        "bug_id": "shindig_90f5746",
        "commit": "https://github.com/apache/shindig/commit/90f5746c44abeca76d6557db5fb534a84f67cb7b",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/shindig/blob/90f5746c44abeca76d6557db5fb534a84f67cb7b/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java?ref=90f5746c44abeca76d6557db5fb534a84f67cb7b",
                "deletions": 12,
                "filename": "java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "patch": "@@ -140,18 +140,20 @@ public RpcHandler getRpcHandler(JSONObject rpc) {\n    */\n   public RestHandler getRestHandler(String path, String method) {\n     method = method.toUpperCase();\n-    if (path.startsWith(\"/\")) {\n-      path = path.substring(1);\n-    }\n-    String[] pathParts = path.split(\"/\");\n-    Map<String, SortedSet<RestPath>> methods = serviceMethodPathMap.get(pathParts[0]);\n-    if (methods != null) {\n-      SortedSet<RestPath> paths = methods.get(method);\n-      if (paths != null) {\n-        for (RestPath restPath : paths) {\n-          RestHandler handler = restPath.accept(pathParts);\n-          if (handler != null) {\n-            return handler;\n+    if (path != null) {\n+      if (path.startsWith(\"/\")) {\n+        path = path.substring(1);\n+      }\n+      String[] pathParts = path.split(\"/\");\n+      Map<String, SortedSet<RestPath>> methods = serviceMethodPathMap.get(pathParts[0]);\n+      if (methods != null) {\n+        SortedSet<RestPath> paths = methods.get(method);\n+        if (paths != null) {\n+          for (RestPath restPath : paths) {\n+            RestHandler handler = restPath.accept(pathParts);\n+            if (handler != null) {\n+              return handler;\n+            }\n           }\n         }\n       }",
                "raw_url": "https://github.com/apache/shindig/raw/90f5746c44abeca76d6557db5fb534a84f67cb7b/java/common/src/main/java/org/apache/shindig/protocol/DefaultHandlerRegistry.java",
                "sha": "e098d00faf2bb3f033c050c63b094bd97f2f872a",
                "status": "modified"
            }
        ],
        "message": "SHINDIG-1075 | DefaultHandlerRegistry.getRestHandler throws an NPE for unregistered paths\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@782159 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/587c6029f7b5f72c645278bebadadaef5866e92a",
        "repo": "shindig",
        "unit_tests": [
            "DefaultHandlerRegistryTest.java"
        ]
    },
    "shindig_9cd9964": {
        "bug_id": "shindig_9cd9964",
        "commit": "https://github.com/apache/shindig/commit/9cd99644a15ea7668228ccfa45985c1926870b3a",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/9cd99644a15ea7668228ccfa45985c1926870b3a/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java?ref=9cd99644a15ea7668228ccfa45985c1926870b3a",
                "deletions": 1,
                "filename": "java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "patch": "@@ -116,8 +116,10 @@ private static String getPropertyName(Method setter) {\n     }\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n+  // Class.cast() would be better - but the Class object may be null\n   public <T> T convertToObject(String string, Class<T> clazz) {\n-    return clazz.cast(convertToObject(string, (Type) clazz));\n+    return (T)convertToObject(string, (Type) clazz);\n   }\n \n   @SuppressWarnings(\"unchecked\")",
                "raw_url": "https://github.com/apache/shindig/raw/9cd99644a15ea7668228ccfa45985c1926870b3a/java/common/src/main/java/org/apache/shindig/protocol/conversion/BeanJsonConverter.java",
                "sha": "525c5f4fd2134ac43fed842526748625af0767a5",
                "status": "modified"
            }
        ],
        "message": "Thank you Kevin, for paying attention: fix NPE (re-)introduced by previous checkin\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@758813 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/37e7b5a84eacf27f88d7d7bffb096344207c3cf1",
        "repo": "shindig",
        "unit_tests": [
            "BeanJsonConverterTest.java"
        ]
    },
    "shindig_a87bdb7": {
        "bug_id": "shindig_a87bdb7",
        "commit": "https://github.com/apache/shindig/commit/a87bdb7043c82fc353ca1a8ef937c42ed544d916",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/shindig/blob/a87bdb7043c82fc353ca1a8ef937c42ed544d916/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java?ref=a87bdb7043c82fc353ca1a8ef937c42ed544d916",
                "deletions": 1,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java",
                "patch": "@@ -24,10 +24,13 @@\n import com.google.inject.name.Named;\n import com.ibm.icu.text.CharsetDetector;\n import com.ibm.icu.text.CharsetMatch;\n+\n+import org.apache.commons.lang.ArrayUtils;\n import org.apache.shindig.common.util.DateUtil;\n \n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.util.Arrays;\n@@ -121,7 +124,18 @@\n   private HttpResponse(int httpStatusCode, String body) {\n     this(new HttpResponseBuilder()\n       .setHttpStatusCode(httpStatusCode)\n-      .setResponse(body.getBytes(Charset.forName(\"UTF-8\"))));\n+      .setResponse(getUtf8Bytes(body)));\n+  }\n+  \n+  private static byte[] getUtf8Bytes(String body) {\n+    try {\n+      if (body == null) {\n+        return ArrayUtils.EMPTY_BYTE_ARRAY;\n+      }\n+      return body.getBytes(DEFAULT_ENCODING);\n+    } catch (UnsupportedEncodingException e) {\n+      throw new RuntimeException(e);\n+    }\n   }\n \n   public HttpResponse(String body) {",
                "raw_url": "https://github.com/apache/shindig/raw/a87bdb7043c82fc353ca1a8ef937c42ed544d916/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponse.java",
                "sha": "298f237852993dc0e0e82f481414c71911bb248f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/a87bdb7043c82fc353ca1a8ef937c42ed544d916/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponseBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponseBuilder.java?ref=a87bdb7043c82fc353ca1a8ef937c42ed544d916",
                "deletions": 0,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponseBuilder.java",
                "patch": "@@ -63,6 +63,9 @@ public HttpResponse create() {\n    * @param responseBytes The response body. Copied when set.\n    */\n   public HttpResponseBuilder setResponse(byte[] responseBytes) {\n+    if (responseBytes == null) {\n+      responseBytes = ArrayUtils.EMPTY_BYTE_ARRAY;\n+    }\n     this.responseBytes = new byte[responseBytes.length];\n     System.arraycopy(responseBytes, 0, this.responseBytes, 0, responseBytes.length);\n     return this;",
                "raw_url": "https://github.com/apache/shindig/raw/a87bdb7043c82fc353ca1a8ef937c42ed544d916/java/gadgets/src/main/java/org/apache/shindig/gadgets/http/HttpResponseBuilder.java",
                "sha": "6ba3abe477321992d48c6d94374c4802ce15b7d5",
                "status": "modified"
            }
        ],
        "message": "Fix an NPE on HttpResponseBuilder.setBytes(null), and get this compiling under\njava 1.5.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@688232 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/f8c7009efe433e4fbd1bff41e5a14bfc27ae9b4d",
        "repo": "shindig",
        "unit_tests": [
            "HttpResponseBuilderTest.java"
        ]
    },
    "shindig_af9664c": {
        "bug_id": "shindig_af9664c",
        "commit": "https://github.com/apache/shindig/commit/af9664c572834851959cfb39b9d5d9fc23b9ef70",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/shindig/blob/af9664c572834851959cfb39b9d5d9fc23b9ef70/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/shindig/contents/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java?ref=af9664c572834851959cfb39b9d5d9fc23b9ef70",
                "deletions": 2,
                "filename": "java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "patch": "@@ -138,7 +138,8 @@ public void removeFeature(String name) {\n    * @return\n    */\n   public boolean sanitizeOutput() {\n-    return (getCurrentView().getType() == View.ContentType.X_HTML_SANITIZED ||\n-        \"1\".equals(getContext().getParameter(ProxyBase.SANITIZE_CONTENT_PARAM)));\n+    return (getCurrentView() != null &&\n+        getCurrentView().getType() == View.ContentType.X_HTML_SANITIZED) ||\n+        \"1\".equals(getContext().getParameter(ProxyBase.SANITIZE_CONTENT_PARAM));\n   }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/shindig/raw/af9664c572834851959cfb39b9d5d9fc23b9ef70/java/gadgets/src/main/java/org/apache/shindig/gadgets/Gadget.java",
                "sha": "25f1adf80b85c168f766b03889f923b40188c91b",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE in check to determine whether content output should be sanitized. SHINDIG-958\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/shindig/trunk@749439 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/shindig/commit/455ae89fe3c7fbec593da7206dc9806c4a5dbcf8",
        "repo": "shindig",
        "unit_tests": [
            "GadgetTest.java"
        ]
    }
}