{
    "cassandra_03ea58a": {
        "bug_id": "cassandra_03ea58a",
        "commit": "https://github.com/apache/cassandra/commit/03ea58a94827087ac75bf48ae1ef8698fb48fda0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/03ea58a94827087ac75bf48ae1ef8698fb48fda0/src/java/org/apache/cassandra/service/StorageProxy.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageProxy.java?ref=03ea58a94827087ac75bf48ae1ef8698fb48fda0",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/service/StorageProxy.java",
                "patch": "@@ -362,11 +362,8 @@ public void runMayThrow() throws IOException\n                 try\n                 {\n                     UUID hostId = StorageService.instance.getTokenMetadata().getHostId(target);\n-                    if (hostId == null) // The node in question will not have a host id if older than MessagingService.VERSION_12 in a mixed version cluster\n-                    {\n-                        logger.warn(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n-                        return;\n-                    }\n+                    if ((hostId == null) && (Gossiper.instance.getVersion(target) < MessagingService.VERSION_12))\n+                        logger.info(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n                     RowMutation hintedMutation = RowMutation.hintFor(mutation, ByteBuffer.wrap(UUIDGen.decompose(hostId)));\n                     hintedMutation.apply();\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/03ea58a94827087ac75bf48ae1ef8698fb48fda0/src/java/org/apache/cassandra/service/StorageProxy.java",
                "sha": "9fad95a6e309becfce280eac7cce5ccce4cc38ae",
                "status": "modified"
            }
        ],
        "message": "Revert \"StorageProxy throws NPEs for when there's no hostids for a target\"\n\nThis reverts commit bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d.",
        "parent": "https://github.com/apache/cassandra/commit/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d",
        "repo": "cassandra",
        "unit_tests": [
            "StorageProxyTest.java"
        ]
    },
    "cassandra_043d180": {
        "bug_id": "cassandra_043d180",
        "commit": "https://github.com/apache/cassandra/commit/043d1808366a40b81d5275090060b7372ae4cbf5",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cassandra/blob/043d1808366a40b81d5275090060b7372ae4cbf5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=043d1808366a40b81d5275090060b7372ae4cbf5",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -1730,7 +1730,10 @@ public void setMinimumCompactionThreshold(int minCompactionThreshold)\n             throw new RuntimeException(\"The min_compaction_threshold cannot be larger than the max.\");\n \n         this.minCompactionThreshold.set(minCompactionThreshold);\n-        CompactionManager.instance.submitBackground(this);\n+\n+        // this is called as part of CompactionStrategy constructor; avoid circular dependency by checking for null\n+        if (compactionStrategy != null)\n+            CompactionManager.instance.submitBackground(this);\n     }\n \n     public int getMaximumCompactionThreshold()\n@@ -1744,7 +1747,10 @@ public void setMaximumCompactionThreshold(int maxCompactionThreshold)\n             throw new RuntimeException(\"The max_compaction_threshold cannot be smaller than the min.\");\n \n         this.maxCompactionThreshold.set(maxCompactionThreshold);\n-        CompactionManager.instance.submitBackground(this);\n+\n+        // this is called as part of CompactionStrategy constructor; avoid circular dependency by checking for null\n+        if (compactionStrategy != null)\n+            CompactionManager.instance.submitBackground(this);\n     }\n \n     public boolean isCompactionDisabled()",
                "raw_url": "https://github.com/apache/cassandra/raw/043d1808366a40b81d5275090060b7372ae4cbf5/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "b3da68ee36e69f6ab3b1db09e58f10f662b4ffa0",
                "status": "modified"
            }
        ],
        "message": "fix NPE from circular dependency on compaction strategy",
        "parent": "https://github.com/apache/cassandra/commit/853a75936c886136e9c7d5e0be42583e0305a6bd",
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_05920cb": {
        "bug_id": "cassandra_05920cb",
        "commit": "https://github.com/apache/cassandra/commit/05920cb38bc8559704450965ce4bb326a917c86a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/05920cb38bc8559704450965ce4bb326a917c86a/src/java/org/apache/cassandra/gms/Gossiper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=05920cb38bc8559704450965ce4bb326a917c86a",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/gms/Gossiper.java",
                "patch": "@@ -298,6 +298,8 @@ public long getEndpointDowntime(InetAddress ep)\n     public void convict(InetAddress endpoint, double phi)\n     {\n         EndpointState epState = endpointStateMap.get(endpoint);\n+        if (epState == null)\n+            return;\n         if (epState.isAlive() && !isDeadState(epState))\n         {\n             markDead(endpoint, epState);",
                "raw_url": "https://github.com/apache/cassandra/raw/05920cb38bc8559704450965ce4bb326a917c86a/src/java/org/apache/cassandra/gms/Gossiper.java",
                "sha": "4514da717303b1acb01f3bc94d78dba585433bfb",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE on FD conviction race\n\nPatch by brandonwilliams, reviewed by thobbs for CASSANDRA-7940",
        "parent": "https://github.com/apache/cassandra/commit/f19b4cb807d30cc7fdb1869c407ee9a5e9e3acce",
        "repo": "cassandra",
        "unit_tests": [
            "GossiperTest.java"
        ]
    },
    "cassandra_08c07f5": {
        "bug_id": "cassandra_08c07f5",
        "commit": "https://github.com/apache/cassandra/commit/08c07f5f323a30926fdb760a01b7ef993693153c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/08c07f5f323a30926fdb760a01b7ef993693153c/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=08c07f5f323a30926fdb760a01b7ef993693153c",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -323,7 +323,7 @@ public void stopRPCServer()\n \n     public boolean isRPCServerRunning()\n     {\n-        if (daemon == null)\n+        if ((daemon == null) || (daemon.thriftServer == null))\n         {\n             return false;\n         }\n@@ -358,7 +358,7 @@ public void stopNativeTransport()\n \n     public boolean isNativeTransportRunning()\n     {\n-        if (daemon == null)\n+        if ((daemon == null) || (daemon.nativeServer == null))\n         {\n             return false;\n         }",
                "raw_url": "https://github.com/apache/cassandra/raw/08c07f5f323a30926fdb760a01b7ef993693153c/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "7967deec73be0b1506cebe165f07f3a15524df80",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in nodetool on booting instances.\nPatch by Mikhail Stepura, reviewed by brandonwilliams for CASSANDRA-5968",
        "parent": "https://github.com/apache/cassandra/commit/0e18f23c5cb7080b3bbaee15b87001b323fd1c29",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_0a35341": {
        "bug_id": "cassandra_0a35341",
        "commit": "https://github.com/apache/cassandra/commit/0a35341675c6c2026113736f9447f08069b6eb83",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/0a35341675c6c2026113736f9447f08069b6eb83/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=0a35341675c6c2026113736f9447f08069b6eb83",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -18,6 +18,7 @@\n  * Hadoop integration is incompatible with Cassandra Driver 3.0.0 (CASSANDRA-11001)\n  * Add dropped_columns to the list of schema table so it gets handled\n    properly (CASSANDRA-11050)\n+ * Fix NPE when using forceRepairRangeAsync without DC (CASSANDRA-11239)\n Merged from 2.2:\n  * Range.compareTo() violates the contract of Comparable (CASSANDRA-11216)\n  * Avoid NPE when serializing ErrorMessage with null message (CASSANDRA-11167)",
                "raw_url": "https://github.com/apache/cassandra/raw/0a35341675c6c2026113736f9447f08069b6eb83/CHANGES.txt",
                "sha": "ba3d2fd3e39c83813545815d25d5f2c4a8452add",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/0a35341675c6c2026113736f9447f08069b6eb83/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=0a35341675c6c2026113736f9447f08069b6eb83",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -3081,7 +3081,10 @@ public int forceRepairRangeAsync(String beginToken,\n         Collection<Range<Token>> repairingRange = createRepairRangeFrom(beginToken, endToken);\n \n         RepairOption options = new RepairOption(parallelism, false, !fullRepair, false, 1, repairingRange, true);\n-        options.getDataCenters().addAll(dataCenters);\n+        if (dataCenters != null)\n+        {\n+            options.getDataCenters().addAll(dataCenters);\n+        }\n         if (hosts != null)\n         {\n             options.getHosts().addAll(hosts);",
                "raw_url": "https://github.com/apache/cassandra/raw/0a35341675c6c2026113736f9447f08069b6eb83/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "164c419f829440defc4c87d8b6cfa13ee4c5703d",
                "status": "modified"
            }
        ],
        "message": "Don't NPE when using forceRepairRangeAsync\n\nPatch by Nick Bailey; reviewed by Paulo Motta for CASSANDRA-11239",
        "parent": "https://github.com/apache/cassandra/commit/8fc1b28e8320cfae71e3195954470a1edbfa6121",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_0d7b232": {
        "bug_id": "cassandra_0d7b232",
        "commit": "https://github.com/apache/cassandra/commit/0d7b232bdb406c2a49784f175ea4c8ab9e245cef",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/0d7b232bdb406c2a49784f175ea4c8ab9e245cef/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/SchemaKeyspace.java?ref=0d7b232bdb406c2a49784f175ea4c8ab9e245cef",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "patch": "@@ -1434,13 +1434,13 @@ private static IndexMetadata createIndexMetadataFromIndexesRow(CFMetaData cfm, U\n \n         Set<String> targetColumnNames = row.getSet(\"target_columns\", UTF8Type.instance);\n         assert targetType == IndexMetadata.TargetType.COLUMN : \"Per row indexes with dynamic target columns are not supported yet\";\n-        assert targetColumnNames.size() == 1 : \"Secondary indexes targetting multiple columns are not supported yet\";\n \n         Set<ColumnIdentifier> targetColumns = new HashSet<>();\n         // if it's not a CQL table, we can't assume that the column name is utf8, so\n         // in that case we have to do a linear scan of the cfm's columns to get the matching one\n         if (targetColumnNames != null)\n         {\n+            assert targetColumnNames.size() == 1 : \"Secondary indexes targetting multiple columns are not supported yet\";\n             targetColumnNames.forEach(targetColumnName -> {\n                 if (cfm.isCQLTable())\n                     targetColumns.add(ColumnIdentifier.getInterned(targetColumnName, true));",
                "raw_url": "https://github.com/apache/cassandra/raw/0d7b232bdb406c2a49784f175ea4c8ab9e245cef/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "sha": "f93ccfdc79d92950451287374d487bcd2dcb0f7b",
                "status": "modified"
            }
        ],
        "message": "Fix coverity warning for potential NPE (CASSANDRA-6717 follow up)",
        "parent": "https://github.com/apache/cassandra/commit/f50e9321f78a644a69383b410b165367b72435c5",
        "repo": "cassandra",
        "unit_tests": [
            "SchemaKeyspaceTest.java"
        ]
    },
    "cassandra_1124615": {
        "bug_id": "cassandra_1124615",
        "commit": "https://github.com/apache/cassandra/commit/1124615a65329a4991a5a610fa78af56b0502627",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/1124615a65329a4991a5a610fa78af56b0502627/src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/AutoSavingCache.java?ref=1124615a65329a4991a5a610fa78af56b0502627",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "patch": "@@ -137,6 +137,9 @@ public int loadSaved(ColumnFamilyStore cfs)\n                 while (in.available() > 0)\n                 {\n                     Pair<K, V> entry = cacheLoader.deserialize(in, cfs);\n+                    // Key cache entry can return null, if the SSTable doesn't exist.\n+                    if (entry == null)\n+                        continue;\n                     put(entry.left, entry.right);\n                     count++;\n                 }",
                "raw_url": "https://github.com/apache/cassandra/raw/1124615a65329a4991a5a610fa78af56b0502627/src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "sha": "ec054fb4984c48f165136199fb298b5c96963669",
                "status": "modified"
            }
        ],
        "message": "NPE while loading Saved KeyCache\npatch by Vijay; reviewed by Jonathan Ellis for CASSANDRA-4553",
        "parent": "https://github.com/apache/cassandra/commit/71f5d91ab7825196990a2744cf3e40e654917d33",
        "repo": "cassandra",
        "unit_tests": [
            "AutoSavingCacheTest.java"
        ]
    },
    "cassandra_1240c9b": {
        "bug_id": "cassandra_1240c9b",
        "commit": "https://github.com/apache/cassandra/commit/1240c9bd228da81c4052eade48e40bc34ec1d34d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/1240c9bd228da81c4052eade48e40bc34ec1d34d/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=1240c9bd228da81c4052eade48e40bc34ec1d34d",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,5 +1,6 @@\n 2.0.3\n  * Reject bootstrapping if the node already exists in gossip (CASSANDRA-5571)\n+ * Fix NPE while loading paxos state (CASSANDRA-6211)\n Merged from 1.2:\n  * Fix altering column types (CASSANDRA-6185)\n  * cqlsh: fix CREATE/ALTER WITH completion (CASSANDRA-6196)",
                "raw_url": "https://github.com/apache/cassandra/raw/1240c9bd228da81c4052eade48e40bc34ec1d34d/CHANGES.txt",
                "sha": "1df6ade07568945b893a3bd7de5eac63d02fd33a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/1240c9bd228da81c4052eade48e40bc34ec1d34d/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SystemKeyspace.java?ref=1240c9bd228da81c4052eade48e40bc34ec1d34d",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "patch": "@@ -844,7 +844,9 @@ public static PaxosState loadPaxosState(ByteBuffer key, CFMetaData metadata)\n         if (results.isEmpty())\n             return new PaxosState(key, metadata);\n         UntypedResultSet.Row row = results.one();\n-        Commit promised = new Commit(key, row.getUUID(\"in_progress_ballot\"), EmptyColumns.factory.create(metadata));\n+        Commit promised = row.has(\"in_progress_ballot\")\n+                        ? new Commit(key, row.getUUID(\"in_progress_ballot\"), EmptyColumns.factory.create(metadata))\n+                        : Commit.emptyCommit(key, metadata);\n         // either we have both a recently accepted ballot and update or we have neither\n         Commit accepted = row.has(\"proposal\")\n                         ? new Commit(key, row.getUUID(\"proposal_ballot\"), ColumnFamily.fromBytes(row.getBytes(\"proposal\")))",
                "raw_url": "https://github.com/apache/cassandra/raw/1240c9bd228da81c4052eade48e40bc34ec1d34d/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "sha": "1917bc8741ad70f794cfeb938b8c44a5175157de",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE while loading paxos state\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-6211",
        "parent": "https://github.com/apache/cassandra/commit/93da683e0c835eb7e6cd28a03561c11f90435bb0",
        "repo": "cassandra",
        "unit_tests": [
            "SystemKeyspaceTest.java"
        ]
    },
    "cassandra_1a0aaf0": {
        "bug_id": "cassandra_1a0aaf0",
        "commit": "https://github.com/apache/cassandra/commit/1a0aaf04986155eae45b2685d234b928866b681c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/1a0aaf04986155eae45b2685d234b928866b681c/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=1a0aaf04986155eae45b2685d234b928866b681c",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -22,6 +22,7 @@\n  * Fix error when doing reversed queries with static columns (CASSANDRA-7490)\n  * Backport CASSANDRA-6747 (CASSANDRA-7560)\n  * Track max/min timestamps for range tombstones (CASSANDRA-7647)\n+ * Fix NPE when listing saved caches dir (CASSANDRA-7632)\n Merged from 1.2:\n  * Set correct stream ID on responses when non-Exception Throwables\n    are thrown while handling native protocol messages (CASSANDRA-7470)",
                "raw_url": "https://github.com/apache/cassandra/raw/1a0aaf04986155eae45b2685d234b928866b681c/CHANGES.txt",
                "sha": "1fcb556a30c8a396b1a0d7a97dbb0d2acaecc444",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/cassandra/blob/1a0aaf04986155eae45b2685d234b928866b681c/src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/AutoSavingCache.java?ref=1a0aaf04986155eae45b2685d234b928866b681c",
                "deletions": 9,
                "filename": "src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "patch": "@@ -261,19 +261,24 @@ private void deleteOldCacheFiles()\n         {\n             File savedCachesDir = new File(DatabaseDescriptor.getSavedCachesLocation());\n             assert savedCachesDir.exists() && savedCachesDir.isDirectory();\n-\n-            for (File file : savedCachesDir.listFiles())\n+            File[] files = savedCachesDir.listFiles();\n+            if (files != null)\n             {\n-                if (!file.isFile())\n-                    continue; // someone's been messing with our directory.  naughty!\n-\n-                if (file.getName().endsWith(cacheType.toString())\n-                    || file.getName().endsWith(String.format(\"%s-%s.db\", cacheType.toString(), CURRENT_VERSION)))\n+                for (File file : files)\n                 {\n-                    if (!file.delete())\n-                        logger.warn(\"Failed to delete {}\", file.getAbsolutePath());\n+                    if (!file.isFile())\n+                        continue; // someone's been messing with our directory.  naughty!\n+\n+                    if (file.getName().endsWith(cacheType.toString())\n+                            || file.getName().endsWith(String.format(\"%s-%s.db\", cacheType.toString(), CURRENT_VERSION)))\n+                    {\n+                        if (!file.delete())\n+                            logger.warn(\"Failed to delete {}\", file.getAbsolutePath());\n+                    }\n                 }\n             }\n+            else\n+                logger.warn(\"Could not list files in {}\", savedCachesDir);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/1a0aaf04986155eae45b2685d234b928866b681c/src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "sha": "64234e2f2771ca3028666dac0689426ef9314cce",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when listing saved caches directory\n\nPatch by marcuse; reviewed by yukim for CASSANDRA-7632",
        "parent": "https://github.com/apache/cassandra/commit/892bf5551c06e669b02d161439463ebf2de0793c",
        "repo": "cassandra",
        "unit_tests": [
            "AutoSavingCacheTest.java"
        ]
    },
    "cassandra_2046956": {
        "bug_id": "cassandra_2046956",
        "commit": "https://github.com/apache/cassandra/commit/2046956b6cfd809702bf33cb85a9cae091ce1d72",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/2046956b6cfd809702bf33cb85a9cae091ce1d72/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=2046956b6cfd809702bf33cb85a9cae091ce1d72",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -46,6 +46,8 @@\n  * Allows (internally) doing a range query with a limit of columns instead of\n    rows (CASSANDRA-3742)\n  * Allow rangeSlice queries to be start/end inclusive/exclusive (CASSANDRA-3749)\n+ * Fix BulkLoader to support new SSTable layout and add stream\n+   throttling to prevent an NPE when there is no yaml config (CASSANDRA-3752)\n \n \n 1.0.8",
                "raw_url": "https://github.com/apache/cassandra/raw/2046956b6cfd809702bf33cb85a9cae091ce1d72/CHANGES.txt",
                "sha": "4a8ee4203769dfb16ca2f3c64e91b7c6daf062fe",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/2046956b6cfd809702bf33cb85a9cae091ce1d72/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java?ref=2046956b6cfd809702bf33cb85a9cae091ce1d72",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableLoader.java",
                "patch": "@@ -50,7 +50,7 @@\n     public SSTableLoader(File directory, Client client, OutputHandler outputHandler)\n     {\n         this.directory = directory;\n-        this.keyspace = directory.getName();\n+        this.keyspace = directory.getParentFile().getName();\n         this.client = client;\n         this.outputHandler = outputHandler;\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/2046956b6cfd809702bf33cb85a9cae091ce1d72/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java",
                "sha": "131deb26d33ac5e58b8118a5928eecca9e97e1dd",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cassandra/blob/2046956b6cfd809702bf33cb85a9cae091ce1d72/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/BulkLoader.java?ref=2046956b6cfd809702bf33cb85a9cae091ce1d72",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/tools/BulkLoader.java",
                "patch": "@@ -52,13 +52,15 @@\n     private static final String IGNORE_NODES_OPTION  = \"ignore\";\n     private static final String INITIAL_HOST_ADDRESS_OPTION = \"nodes\";\n     private static final String RPC_PORT_OPTION = \"port\";\n+    private static final String THROTTLE_MBITS = \"throttle\";\n \n     public static void main(String args[]) throws IOException\n     {\n         LoaderOptions options = LoaderOptions.parseArgs(args);\n         try\n         {\n             SSTableLoader loader = new SSTableLoader(options.directory, new ExternalClient(options, options.hosts, options.rpcPort), options);\n+            DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(options.throttle);\n             SSTableLoader.LoaderFuture future = loader.stream(options.ignores);\n \n             if (options.noProgress)\n@@ -249,6 +251,7 @@ public boolean validateColumnFamily(String keyspace, String cfName)\n         public boolean verbose;\n         public boolean noProgress;\n         public int rpcPort = 9160;\n+        public int throttle = 0;\n \n         public Set<InetAddress> hosts = new HashSet<InetAddress>();\n         public Set<InetAddress> ignores = new HashSet<InetAddress>();\n@@ -302,6 +305,9 @@ public static LoaderOptions parseArgs(String cmdArgs[])\n                 opts.verbose = cmd.hasOption(VERBOSE_OPTION);\n                 opts.noProgress = cmd.hasOption(NOPROGRESS_OPTION);\n \n+                if (cmd.hasOption(THROTTLE_MBITS))\n+                    opts.throttle = Integer.valueOf(cmd.getOptionValue(THROTTLE_MBITS));\n+\n                 if (cmd.hasOption(RPC_PORT_OPTION))\n                     opts.rpcPort = Integer.valueOf(cmd.getOptionValue(RPC_PORT_OPTION));\n \n@@ -381,6 +387,7 @@ private static CmdLineOptions getCmdLineOptions()\n             options.addOption(\"i\",  IGNORE_NODES_OPTION, \"NODES\", \"don't stream to this (comma separated) list of nodes\");\n             options.addOption(\"d\",  INITIAL_HOST_ADDRESS_OPTION, \"initial hosts\", \"try to connect to these hosts (comma separated) initially for ring information\");\n             options.addOption(\"p\",  RPC_PORT_OPTION, \"rpc port\", \"port used for rpc (default 9160)\");\n+            options.addOption(\"t\",  THROTTLE_MBITS, \"throttle\", \"throttle speed in Mbits (default unlimited)\");\n             return options;\n         }\n \n@@ -389,11 +396,11 @@ public static void printUsage(Options options)\n             String usage = String.format(\"%s [options] <dir_path>\", TOOL_NAME);\n             StringBuilder header = new StringBuilder();\n             header.append(\"--\\n\");\n-            header.append(\"Bulk load the sstables find in the directory <dir_path> to the configured cluster.\" );\n-            header.append(\"The last directory of <dir_path> is used as the keyspace name. \");\n-            header.append(\"So for instance, to load a sstable named Standard1-g-1-Data.db into keyspace Keyspace1, \");\n+            header.append(\"Bulk load the sstables found in the directory <dir_path> to the configured cluster.\" );\n+            header.append(\"The parent directory of <dir_path> is used as the keyspace name. \");\n+            header.append(\"So for instance, to load an sstable named Standard1-g-1-Data.db into keyspace Keyspace1, \");\n             header.append(\"you will need to have the files Standard1-g-1-Data.db and Standard1-g-1-Index.db in a \");\n-            header.append(\"directory Keyspace1/ in the current directory and call: sstableloader Keyspace1\");\n+            header.append(\"directory Keyspace1/Standard1/ in the directory and call: sstableloader Keyspace1/Standard1\");\n             header.append(\"\\n--\\n\");\n             header.append(\"Options are:\");\n             new HelpFormatter().printHelp(usage, header.toString(), options, \"\");",
                "raw_url": "https://github.com/apache/cassandra/raw/2046956b6cfd809702bf33cb85a9cae091ce1d72/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "sha": "b1a0560888c473bea116072bb4f825724c79375e",
                "status": "modified"
            }
        ],
        "message": "Fix BulkLoader to support new SSTable layout and add stream throttling to prevent an NPE when there is no yaml config\npatch by Brandon Williams; reviewed by Pavel Yaskevich for CASSANDRA-3752",
        "parent": "https://github.com/apache/cassandra/commit/c9cf050982f83cacfe973fc588fa385bcf544690",
        "repo": "cassandra",
        "unit_tests": [
            "BulkLoaderTest.java"
        ]
    },
    "cassandra_2c3f9ba": {
        "bug_id": "cassandra_2c3f9ba",
        "commit": "https://github.com/apache/cassandra/commit/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/auth/DataResource.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/auth/DataResource.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/auth/DataResource.java",
                "patch": "@@ -152,17 +152,17 @@ public IResource getParent()\n \n     public boolean isRootLevel()\n     {\n-        return level.equals(Level.ROOT);\n+        return level == Level.ROOT;\n     }\n \n     public boolean isKeyspaceLevel()\n     {\n-        return level.equals(Level.KEYSPACE);\n+        return level == Level.KEYSPACE;\n     }\n \n     public boolean isColumnFamilyLevel()\n     {\n-        return level.equals(Level.COLUMN_FAMILY);\n+        return level == Level.COLUMN_FAMILY;\n     }\n     /**\n      * @return keyspace of the resource. Throws IllegalStateException if it's the root-level resource.\n@@ -187,14 +187,16 @@ public String getColumnFamily()\n     /**\n      * @return Whether or not the resource has a parent in the hierarchy.\n      */\n+    @Override\n     public boolean hasParent()\n     {\n-        return !level.equals(Level.ROOT);\n+        return level != Level.ROOT;\n     }\n \n     /**\n      * @return Whether or not the resource exists in Cassandra.\n      */\n+    @Override\n     public boolean exists()\n     {\n         switch (level)",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/auth/DataResource.java",
                "sha": "75a3fdf3dc25f91636745c68b3e2402a88a87bba",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cache/CachingOptions.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/CachingOptions.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 6,
                "filename": "src/java/org/apache/cassandra/cache/CachingOptions.java",
                "patch": "@@ -188,7 +188,7 @@ public static KeyCache fromString(String keyCache)\n \n         public boolean isEnabled()\n         {\n-            return type.equals(Type.ALL);\n+            return type == Type.ALL;\n         }\n \n         @Override\n@@ -223,7 +223,7 @@ public String toString()\n \n         public RowCache(Type type)\n         {\n-            this(type, type.equals(Type.ALL) ? Integer.MAX_VALUE : 0);\n+            this(type, (type == Type.ALL) ? Integer.MAX_VALUE : 0);\n         }\n         public RowCache(Type type, int rowsToCache)\n         {\n@@ -246,17 +246,17 @@ else if (rowCache.equalsIgnoreCase(\"all\"))\n         }\n         public boolean isEnabled()\n         {\n-            return type.equals(Type.ALL) || type.equals(Type.HEAD);\n+            return (type == Type.ALL) || (type == Type.HEAD);\n         }\n         public boolean cacheFullPartitions()\n         {\n-            return type.equals(Type.ALL);\n+            return type == Type.ALL;\n         }\n         @Override\n         public String toString()\n         {\n-            if (type.equals(Type.ALL)) return \"ALL\";\n-            if (type.equals(Type.NONE)) return \"NONE\";\n+            if (type == Type.ALL) return \"ALL\";\n+            if (type == Type.NONE) return \"NONE\";\n             return String.valueOf(rowsToCache);\n         }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cache/CachingOptions.java",
                "sha": "c2605f58479b007c89b0a792ff42a1bf778fe711",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/config/CFMetaData.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/CFMetaData.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/config/CFMetaData.java",
                "patch": "@@ -815,7 +815,7 @@ public void validateCompatility(CFMetaData cfm) throws ConfigurationException\n             throw new ConfigurationException(String.format(\"Column family ID mismatch (found %s; expected %s)\",\n                                                            cfm.cfId, cfId));\n \n-        if (!cfm.cfType.equals(cfType))\n+        if (cfm.cfType != cfType)\n             throw new ConfigurationException(\"types do not match.\");\n \n         if (!cfm.comparator.isCompatibleWith(comparator))",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/config/CFMetaData.java",
                "sha": "23c1b8b639328f01afb19f15e3c3c1584b395813",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/ColumnCondition.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/ColumnCondition.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 17,
                "filename": "src/java/org/apache/cassandra/cql3/ColumnCondition.java",
                "patch": "@@ -59,7 +59,7 @@ private ColumnCondition(ColumnDefinition column, Term collectionElement, Term va\n         this.inValues = inValues;\n         this.operator = op;\n \n-        if (!operator.equals(Operator.IN))\n+        if (operator != Operator.IN)\n             assert this.inValues == null;\n     }\n \n@@ -117,7 +117,7 @@ public void collectMarkerSpecification(VariableSpecifications boundNames)\n         if (collectionElement != null)\n             collectionElement.collectMarkerSpecification(boundNames);\n \n-        if (operator.equals(Operator.IN) && inValues != null)\n+        if ((operator == Operator.IN) && inValues != null)\n         {\n             for (Term value : inValues)\n                 value.collectMarkerSpecification(boundNames);\n@@ -130,7 +130,7 @@ public void collectMarkerSpecification(VariableSpecifications boundNames)\n \n     public ColumnCondition.Bound bind(QueryOptions options) throws InvalidRequestException\n     {\n-        boolean isInCondition = operator.equals(Operator.IN);\n+        boolean isInCondition = operator == Operator.IN;\n         if (column.type instanceof CollectionType)\n         {\n             if (collectionElement == null)\n@@ -186,7 +186,7 @@ protected boolean compareWithOperator(Operator operator, AbstractType<?> type, B\n             else if (otherValue == null)\n             {\n                 // the condition value is not null, so only NEQ can return true\n-                return operator.equals(Operator.NEQ);\n+                return operator == Operator.NEQ;\n             }\n             int comparison = type.compare(otherValue, value);\n             switch (operator)\n@@ -236,7 +236,7 @@ private SimpleBound(ColumnCondition condition, QueryOptions options) throws Inva\n         {\n             super(condition.column, condition.operator);\n             assert !(column.type instanceof CollectionType) && condition.collectionElement == null;\n-            assert !condition.operator.equals(Operator.IN);\n+            assert condition.operator != Operator.IN;\n             this.value = condition.value.bindAndGet(options);\n         }\n \n@@ -258,7 +258,7 @@ private SimpleInBound(ColumnCondition condition, QueryOptions options) throws In\n         {\n             super(condition.column, condition.operator);\n             assert !(column.type instanceof CollectionType) && condition.collectionElement == null;\n-            assert condition.operator.equals(Operator.IN);\n+            assert condition.operator == Operator.IN;\n             if (condition.inValues == null)\n                 this.inValues = ((Lists.Marker) condition.value).bind(options).getElements();\n             else\n@@ -291,7 +291,7 @@ private ElementAccessBound(ColumnCondition condition, QueryOptions options) thro\n         {\n             super(condition.column, condition.operator);\n             assert column.type instanceof CollectionType && condition.collectionElement != null;\n-            assert !condition.operator.equals(Operator.IN);\n+            assert condition.operator != Operator.IN;\n             this.collectionElement = condition.collectionElement.bindAndGet(options);\n             this.value = condition.value.bindAndGet(options);\n         }\n@@ -468,7 +468,7 @@ private CollectionBound(ColumnCondition condition, QueryOptions options) throws\n         {\n             super(condition.column, condition.operator);\n             assert column.type.isCollection() && condition.collectionElement == null;\n-            assert !condition.operator.equals(Operator.IN);\n+            assert condition.operator != Operator.IN;\n             this.value = condition.value.bind(options);\n         }\n \n@@ -481,9 +481,9 @@ public boolean appliesTo(Composite rowPrefix, ColumnFamily current, final long n\n                 Iterator<Cell> iter = collectionColumns(current.metadata().comparator.create(rowPrefix, column), current, now);\n                 if (value == null)\n                 {\n-                    if (operator.equals(Operator.EQ))\n+                    if (operator == Operator.EQ)\n                         return !iter.hasNext();\n-                    else if (operator.equals(Operator.NEQ))\n+                    else if (operator == Operator.NEQ)\n                         return iter.hasNext();\n                     else\n                         throw new InvalidRequestException(String.format(\"Invalid comparison with null for operator \\\"%s\\\"\", operator));\n@@ -535,7 +535,7 @@ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> i\n             while(iter.hasNext())\n             {\n                 if (!conditionIter.hasNext())\n-                    return operator.equals(Operator.GT) || operator.equals(Operator.GTE) || operator.equals(Operator.NEQ);\n+                    return (operator == Operator.GT) || (operator == Operator.GTE) || (operator == Operator.NEQ);\n \n                 // for lists we use the cell value; for sets we use the cell name\n                 ByteBuffer cellValue = isSet? iter.next().name().collectionElement() : iter.next().value();\n@@ -545,7 +545,7 @@ private static boolean setOrListAppliesTo(AbstractType<?> type, Iterator<Cell> i\n             }\n \n             if (conditionIter.hasNext())\n-                return operator.equals(Operator.LT) || operator.equals(Operator.LTE) || operator.equals(Operator.NEQ);\n+                return (operator == Operator.LT) || (operator == Operator.LTE) || (operator == Operator.NEQ);\n \n             // they're equal\n             return operator == Operator.EQ || operator == Operator.LTE || operator == Operator.GTE;\n@@ -590,7 +590,7 @@ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, B\n             while(iter.hasNext())\n             {\n                 if (!conditionIter.hasNext())\n-                    return operator.equals(Operator.GT) || operator.equals(Operator.GTE) || operator.equals(Operator.NEQ);\n+                    return (operator == Operator.GT) || (operator == Operator.GTE) || (operator == Operator.NEQ);\n \n                 Map.Entry<ByteBuffer, ByteBuffer> conditionEntry = conditionIter.next();\n                 Cell c = iter.next();\n@@ -607,7 +607,7 @@ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, B\n             }\n \n             if (conditionIter.hasNext())\n-                return operator.equals(Operator.LT) || operator.equals(Operator.LTE) || operator.equals(Operator.NEQ);\n+                return (operator == Operator.LT) || (operator == Operator.LTE) || (operator == Operator.NEQ);\n \n             // they're equal\n             return operator == Operator.EQ || operator == Operator.LTE || operator == Operator.GTE;\n@@ -622,7 +622,7 @@ private CollectionInBound(ColumnCondition condition, QueryOptions options) throw\n         {\n             super(condition.column, condition.operator);\n             assert column.type instanceof CollectionType && condition.collectionElement == null;\n-            assert condition.operator.equals(Operator.IN);\n+            assert condition.operator == Operator.IN;\n             inValues = new ArrayList<>();\n             if (condition.inValues == null)\n             {\n@@ -768,7 +768,7 @@ public ColumnCondition prepare(String keyspace, ColumnDefinition receiver) throw\n \n             if (collectionElement == null)\n             {\n-                if (operator.equals(Operator.IN))\n+                if (operator == Operator.IN)\n                 {\n                     if (inValues == null)\n                         return ColumnCondition.inCondition(receiver, inMarker.prepare(keyspace, receiver));\n@@ -802,7 +802,7 @@ public ColumnCondition prepare(String keyspace, ColumnDefinition receiver) throw\n                 default:\n                     throw new AssertionError();\n             }\n-            if (operator.equals(Operator.IN))\n+            if (operator == Operator.IN)\n             {\n                 if (inValues == null)\n                     return ColumnCondition.inCondition(receiver, collectionElement.prepare(keyspace, elementSpec), inMarker.prepare(keyspace, valueSpec));",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/ColumnCondition.java",
                "sha": "a8c8cc2ada36c9c163f3d9310384c91226a1fc27",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "patch": "@@ -1422,7 +1422,7 @@ public RawStatement(CFName cfName, Parameters parameters, List<RawSelector> sele\n                         hasQueriableIndex |= queriable[0];\n                         hasQueriableClusteringColumnIndex |= queriable[1];\n                         names.add(def);\n-                        hasMultiColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN.equals(def.kind);\n+                        hasMultiColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN == def.kind;\n                     }\n                     updateRestrictionsForRelation(stmt, names, rel, boundNames);\n                 }\n@@ -1434,7 +1434,7 @@ public RawStatement(CFName cfName, Parameters parameters, List<RawSelector> sele\n                     boolean[] queriable = processRelationEntity(stmt, indexManager, relation, entity, def);\n                     hasQueriableIndex |= queriable[0];\n                     hasQueriableClusteringColumnIndex |= queriable[1];\n-                    hasSingleColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN.equals(def.kind);\n+                    hasSingleColumnRelations |= ColumnDefinition.Kind.CLUSTERING_COLUMN == def.kind;\n                     updateRestrictionsForRelation(stmt, def, rel, boundNames);\n                 }\n             }",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "sha": "960abaa788b3f40642acda2f1e43395608513a75",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/db/DataTracker.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/DataTracker.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/DataTracker.java",
                "patch": "@@ -312,7 +312,7 @@ public void replaceWithNewInstances(Collection<SSTableReader> toReplace, Collect\n     public void replaceEarlyOpenedFiles(Collection<SSTableReader> toReplace, Collection<SSTableReader> replaceWith)\n     {\n         for (SSTableReader s : toReplace)\n-            assert s.openReason.equals(SSTableReader.OpenReason.EARLY);\n+            assert s.openReason == SSTableReader.OpenReason.EARLY;\n         // note that we can replace an early opened file with a real one\n         replaceReaders(toReplace, replaceWith, false);\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/db/DataTracker.java",
                "sha": "f8b9376b927ba24e7b64588dab62940bc6224bdd",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/ClientState.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ClientState.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/service/ClientState.java",
                "patch": "@@ -235,10 +235,10 @@ private void hasAccess(String keyspace, Permission perm, DataResource resource)\n             return;\n         validateLogin();\n         preventSystemKSSchemaModification(keyspace, resource, perm);\n-        if (perm.equals(Permission.SELECT) && READABLE_SYSTEM_RESOURCES.contains(resource))\n+        if ((perm == Permission.SELECT) && READABLE_SYSTEM_RESOURCES.contains(resource))\n             return;\n         if (PROTECTED_AUTH_RESOURCES.contains(resource))\n-            if (perm.equals(Permission.CREATE) || perm.equals(Permission.ALTER) || perm.equals(Permission.DROP))\n+            if ((perm == Permission.CREATE) || (perm == Permission.ALTER) || (perm == Permission.DROP))\n                 throw new UnauthorizedException(String.format(\"%s schema is protected\", resource));\n         ensureHasPermission(perm, resource);\n     }\n@@ -258,7 +258,7 @@ public void ensureHasPermission(Permission perm, IResource resource) throws Unau\n     private void preventSystemKSSchemaModification(String keyspace, DataResource resource, Permission perm) throws UnauthorizedException\n     {\n         // we only care about schema modification.\n-        if (!(perm.equals(Permission.ALTER) || perm.equals(Permission.DROP) || perm.equals(Permission.CREATE)))\n+        if (!((perm == Permission.ALTER) || (perm == Permission.DROP) || (perm == Permission.CREATE)))\n             return;\n \n         // prevent system keyspace modification\n@@ -267,7 +267,7 @@ private void preventSystemKSSchemaModification(String keyspace, DataResource res\n \n         // we want to allow altering AUTH_KS and TRACING_KS.\n         Set<String> allowAlter = Sets.newHashSet(Auth.AUTH_KS, TraceKeyspace.NAME);\n-        if (allowAlter.contains(keyspace.toLowerCase()) && !(resource.isKeyspaceLevel() && perm.equals(Permission.ALTER)))\n+        if (allowAlter.contains(keyspace.toLowerCase()) && !(resource.isKeyspaceLevel() && (perm == Permission.ALTER)))\n             throw new UnauthorizedException(String.format(\"Cannot %s %s\", perm, resource));\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/ClientState.java",
                "sha": "9c8d7d86e43507c8fb157f6e7bfb4f820099d38b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -1335,7 +1335,7 @@ public void beforeChange(InetAddress endpoint, EndpointState currentState, Appli\n      */\n     public void onChange(InetAddress endpoint, ApplicationState state, VersionedValue value)\n     {\n-        if (state.equals(ApplicationState.STATUS))\n+        if (state == ApplicationState.STATUS)\n         {\n             String apStateValue = value.value;\n             String[] pieces = apStateValue.split(VersionedValue.DELIMITER_STR, -1);\n@@ -2194,7 +2194,7 @@ public void forceKeyspaceCompaction(String keyspaceName, String... columnFamilie\n      */\n     public void takeSnapshot(String tag, String... keyspaceNames) throws IOException\n     {\n-        if (operationMode.equals(Mode.JOINING))\n+        if (operationMode == Mode.JOINING)\n             throw new IOException(\"Cannot snapshot until bootstrap completes\");\n         if (tag == null || tag.equals(\"\"))\n             throw new IOException(\"You must supply a snapshot name.\");\n@@ -2233,7 +2233,7 @@ public void takeColumnFamilySnapshot(String keyspaceName, String columnFamilyNam\n     {\n         if (keyspaceName == null)\n             throw new IOException(\"You must supply a keyspace name\");\n-        if (operationMode.equals(Mode.JOINING))\n+        if (operationMode == Mode.JOINING)\n             throw new IOException(\"Cannot snapshot until bootstrap completes\");\n \n         if (columnFamilyName == null)",
                "raw_url": "https://github.com/apache/cassandra/raw/2c3f9ba048af3f4f4bb144f7fdb41a84df5346e2/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "9cc643babaf0846b8f9340da4cdb48de92c942ba",
                "status": "modified"
            }
        ],
        "message": "avoid npe chance, use == with enums",
        "parent": "https://github.com/apache/cassandra/commit/9c564f10fddce15746e81f003798ddddd023522b",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_3e5edb8": {
        "bug_id": "cassandra_3e5edb8",
        "commit": "https://github.com/apache/cassandra/commit/3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cassandra/blob/3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6",
                "deletions": 23,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -158,6 +158,27 @@ public static Config loadConfig() throws ConfigurationException\n         return loader.loadConfig();\n     }\n \n+    private static InetAddress getNetworkInterfaceAddress(String intf, String configName) throws ConfigurationException\n+    {\n+        try\n+        {\n+            NetworkInterface ni = NetworkInterface.getByName(intf);\n+            if (ni == null)\n+                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" could not be found\");\n+            Enumeration<InetAddress> addrs = ni.getInetAddresses();\n+            if (!addrs.hasMoreElements())\n+                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" was found, but had no addresses\");\n+            InetAddress retval = listenAddress = addrs.nextElement();\n+            if (addrs.hasMoreElements())\n+                throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" can't have more than one address\");\n+            return retval;\n+        }\n+        catch (SocketException e)\n+        {\n+            throw new ConfigurationException(\"Configured \" + configName + \" \\\"\" + intf + \"\\\" caused an exception\", e);\n+        }\n+    }\n+\n     private static void applyConfig(Config config) throws ConfigurationException\n     {\n         conf = config;\n@@ -326,18 +347,7 @@ else if (conf.listen_address != null)\n         }\n         else if (conf.listen_interface != null)\n         {\n-            try\n-            {\n-                Enumeration<InetAddress> addrs = NetworkInterface.getByName(conf.listen_interface).getInetAddresses();\n-                listenAddress = addrs.nextElement();\n-                if (addrs.hasMoreElements())\n-                    throw new ConfigurationException(\"Interface \" + conf.listen_interface +\" can't have more than one address\");\n-            }\n-            catch (SocketException e)\n-            {\n-                throw new ConfigurationException(\"Unknown network interface in listen_interface \" + conf.listen_interface);\n-            }\n-\n+            listenAddress = getNetworkInterfaceAddress(conf.listen_interface, \"listen_interface\");\n         }\n \n         /* Gossip Address to broadcast */\n@@ -374,17 +384,7 @@ else if (conf.rpc_address != null)\n         }\n         else if (conf.rpc_interface != null)\n         {\n-            try\n-            {\n-                Enumeration<InetAddress> addrs = NetworkInterface.getByName(conf.rpc_interface).getInetAddresses();\n-                rpcAddress = addrs.nextElement();\n-                if (addrs.hasMoreElements())\n-                    throw new ConfigurationException(\"Interface \" + conf.rpc_interface +\" can't have more than one address\");\n-            }\n-            catch (SocketException e)\n-            {\n-                throw new ConfigurationException(\"Unknown network interface in rpc_interface \" + conf.rpc_interface);\n-            }\n+            listenAddress = getNetworkInterfaceAddress(conf.rpc_interface, \"rpc_interface\");\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/3e5edb82c73b7b7c6e1d1e970fb764c3e3158da6/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "1dd16883eb0da7329d2a7a802a35ef017e0f88d6",
                "status": "modified"
            }
        ],
        "message": "rpc_interface and listen_interface generate NPE on startup when specified interface doesn't exist\n\nPatch by Ariel Weisberg; reviewed by Robert Stupp for CASSANDRA-8677",
        "parent": "https://github.com/apache/cassandra/commit/33297bad040c660c8cd5ea6378189fffb100b0ab",
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_3f56f6b": {
        "bug_id": "cassandra_3f56f6b",
        "commit": "https://github.com/apache/cassandra/commit/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -939,7 +939,10 @@ public static String getDataFileLocationForTable(String table, long expectedComp\n     public static AbstractType getComparator(String tableName, String cfName)\n     {\n         assert tableName != null;\n-        return getCFMetaData(tableName, cfName).comparator;\n+        CFMetaData cfmd = getCFMetaData(tableName, cfName);\n+        if (cfmd == null)\n+            throw new NullPointerException(\"Unknown ColumnFamily \" + cfName + \" in keyspace \" + tableName);\n+        return cfmd.comparator;\n     }\n \n     public static AbstractType getSubComparator(String tableName, String cfName)",
                "raw_url": "https://github.com/apache/cassandra/raw/3f56f6b4dd975e4eaed65c9f27d0d50b1b6b5788/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "2d524a9c416247f222d6ccf18cb2f0acc0b4488e",
                "status": "modified"
            }
        ],
        "message": "include cf/keyspace name in sstable2json NPEs.  patch by jbellis\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@898809 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/2ad01352a88b319a4364bb5a9e714e601b17a700",
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_417b175": {
        "bug_id": "cassandra_417b175",
        "commit": "https://github.com/apache/cassandra/commit/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cassandra/blob/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/db/RowIndexEntry.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/RowIndexEntry.java?ref=417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/RowIndexEntry.java",
                "patch": "@@ -90,6 +90,18 @@ public void serialize(RowIndexEntry rie, DataOutput dos) throws IOException\n             }\n         }\n \n+        public RowIndexEntry deserializePositionOnly(DataInput dis, Descriptor descriptor) throws IOException\n+        {\n+            long position = dis.readLong();\n+            if (descriptor.hasPromotedIndexes)\n+            {\n+                int size = dis.readInt();\n+                if (size > 0)\n+                    FileUtils.skipBytesFully(dis, size);\n+            }\n+            return new RowIndexEntry(position);\n+        }\n+\n         public RowIndexEntry deserialize(DataInput dis, Descriptor descriptor) throws IOException\n         {\n             long position = dis.readLong();",
                "raw_url": "https://github.com/apache/cassandra/raw/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/db/RowIndexEntry.java",
                "sha": "aea3c2fe4ada58e77c19a085d039621d65230ce6",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cassandra/blob/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "patch": "@@ -360,23 +360,24 @@ private void load(boolean recreatebloom, Set<DecoratedKey> keysToLoadInCache) th\n                 DecoratedKey decoratedKey = null;\n                 int len = ByteBufferUtil.readShortLength(input);\n \n+                // when primary index file contains info other than data position, there is noway to determine\n+                // the last key without deserializing index entry\n                 boolean firstKey = left == null;\n-                boolean lastKey = indexPosition + DBConstants.SHORT_SIZE + len + DBConstants.LONG_SIZE == indexSize;\n+                boolean lastKeyForUnpromoted = indexPosition + DBConstants.SHORT_SIZE + len + DBConstants.LONG_SIZE == indexSize;\n                 boolean shouldAddEntry = indexSummary.shouldAddEntry();\n-                if (shouldAddEntry || cacheLoading || recreatebloom || firstKey || lastKey)\n+                if (shouldAddEntry || cacheLoading || recreatebloom || firstKey || lastKeyForUnpromoted || descriptor.hasPromotedIndexes)\n                 {\n                     decoratedKey = decodeKey(partitioner, descriptor, ByteBufferUtil.read(input, len));\n                     if (firstKey)\n                         left = decoratedKey;\n-                    if (lastKey)\n-                        right = decoratedKey;\n+                    right = decoratedKey;\n                 }\n                 else\n                 {\n                     FileUtils.skipBytesFully(input, len);\n                 }\n \n-                RowIndexEntry indexEntry = RowIndexEntry.serializer.deserialize(input, descriptor);\n+                RowIndexEntry indexEntry = null;\n                 if (decoratedKey != null)\n                 {\n                     if (recreatebloom)\n@@ -385,8 +386,13 @@ private void load(boolean recreatebloom, Set<DecoratedKey> keysToLoadInCache) th\n                         indexSummary.addEntry(decoratedKey, indexPosition);\n                     // if key cache could be used and we have key already pre-loaded\n                     if (cacheLoading && keysToLoadInCache.contains(decoratedKey))\n+                    {\n+                        indexEntry = RowIndexEntry.serializer.deserialize(input, descriptor);\n                         cacheKey(decoratedKey, indexEntry);\n+                    }\n                 }\n+                if (indexEntry == null)\n+                    indexEntry = RowIndexEntry.serializer.deserializePositionOnly(input, descriptor);\n \n                 indexSummary.incrementRowid();\n                 ibuilder.addPotentialBoundary(indexPosition);",
                "raw_url": "https://github.com/apache/cassandra/raw/417b175fa4bfc80994b3d4e85c9f8d93f3d9ab60/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "sha": "9799846401057cc023376f1b2928ddd1c18724e9",
                "status": "modified"
            }
        ],
        "message": "fix NPE in index summarization\npatch by yukim; reviewed by dbrosius for CASSANDRA-4023",
        "parent": "https://github.com/apache/cassandra/commit/1d850e1a5647697d58c1c37a607d4b3809ca7f9a",
        "repo": "cassandra",
        "unit_tests": [
            "SSTableReaderTest.java"
        ]
    },
    "cassandra_428eaec": {
        "bug_id": "cassandra_428eaec",
        "commit": "https://github.com/apache/cassandra/commit/428eaec33857126b2fe32e0918ee809e868fe8d4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/428eaec33857126b2fe32e0918ee809e868fe8d4/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=428eaec33857126b2fe32e0918ee809e868fe8d4",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -619,6 +619,8 @@ public TokenMetadata getTokenMetadata()\n             {\n                 if (endpoint.equals(FBUtilities.getLocalAddress()))\n                     rpcaddrs.add(DatabaseDescriptor.getRpcAddress().getHostAddress());\n+                else if (Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.RPC_ADDRESS) == null)\n+                    rpcaddrs.add(endpoint.getHostAddress());\n                 else\n                     rpcaddrs.add(Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.RPC_ADDRESS).value);\n             }",
                "raw_url": "https://github.com/apache/cassandra/raw/428eaec33857126b2fe32e0918ee809e868fe8d4/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "ff2aff10cf4461679000d3be2b1879724966f68a",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in describe_ring with a mixed cluster.\nPatch by brandonwilliams, reviewed by jbellis for CASSANDRA-3032\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1161189 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/cea0342823bd306ff469d61c37fc851c9088daea",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_45955e6": {
        "bug_id": "cassandra_45955e6",
        "commit": "https://github.com/apache/cassandra/commit/45955e6829a765cb12671f628480e9c397cb695d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=45955e6829a765cb12671f628480e9c397cb695d",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.0.6\n+ * Fix upgradesstables NPE for non-CF-based indexes (CASSANDRA-6645)\n  * Improve nodetool cfhistograms formatting (CASSANDRA-6360)\n  * Expose bulk loading progress over JMX (CASSANDRA-4757)\n  * Correctly handle null with IF conditions and TTL (CASSANDRA-6623)",
                "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/CHANGES.txt",
                "sha": "b260b49397447e751ea72da8cefec102b4ccf8e6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/SecondaryIndexSearcher.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/SecondaryIndexSearcher.java?ref=45955e6829a765cb12671f628480e9c397cb695d",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/index/SecondaryIndexSearcher.java",
                "patch": "@@ -63,7 +63,7 @@ protected IndexExpression highestSelectivityPredicate(List<IndexExpression> clau\n                 continue;\n \n             SecondaryIndex index = indexManager.getIndexForColumn(expression.column_name);\n-            if (index == null || (expression.op != IndexOperator.EQ))\n+            if (index == null || index.getIndexCfs() == null || expression.op != IndexOperator.EQ)\n                 continue;\n             int columns = index.getIndexCfs().getMeanColumns();\n             candidates.put(index, columns);",
                "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/SecondaryIndexSearcher.java",
                "sha": "e93efd18b46f7fc4f3adbe136447da65cbef8b5d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java?ref=45955e6829a765cb12671f628480e9c397cb695d",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java",
                "patch": "@@ -80,6 +80,7 @@ private ByteBuffer makePrefix(CompositesIndex index, ByteBuffer key, ExtendedFil\n         final IndexExpression primary = highestSelectivityPredicate(filter.getClause());\n         final CompositesIndex index = (CompositesIndex)indexManager.getIndexForColumn(primary.column_name);\n         assert index != null;\n+        assert index.getIndexCfs() != null;\n         final DecoratedKey indexKey = index.getIndexKeyFor(primary.value);\n \n         if (logger.isDebugEnabled())",
                "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java",
                "sha": "90e708986268a1c99d2ba58bd47c4d8422265756",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java?ref=45955e6829a765cb12671f628480e9c397cb695d",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java",
                "patch": "@@ -63,6 +63,7 @@ public KeysSearcher(SecondaryIndexManager indexManager, Set<ByteBuffer> columns)\n         final IndexExpression primary = highestSelectivityPredicate(filter.getClause());\n         final SecondaryIndex index = indexManager.getIndexForColumn(primary.column_name);\n         assert index != null;\n+        assert index.getIndexCfs() != null;\n         final DecoratedKey indexKey = index.getIndexKeyFor(primary.value);\n \n         if (logger.isDebugEnabled())",
                "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java",
                "sha": "5d82ba0251f304dfd93912aee75e84765e2d90a3",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cassandra/blob/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=45955e6829a765cb12671f628480e9c397cb695d",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -2297,8 +2297,10 @@ public void clearSnapshot(String tag, String... keyspaceNames) throws IOExceptio\n                 {\n                     for (SecondaryIndex si : cfStore.indexManager.getIndexes())\n                     {\n-                        logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n-                        valid.add(si.getIndexCfs());\n+                        if (si.getIndexCfs() != null) {\n+                            logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n+                            valid.add(si.getIndexCfs());\n+                        }\n                     }\n \n                 }\n@@ -2346,8 +2348,10 @@ public void clearSnapshot(String tag, String... keyspaceNames) throws IOExceptio\n                 {\n                     for(SecondaryIndex si : cfStore.indexManager.getIndexes())\n                     {\n-                        logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n-                        valid.add(si.getIndexCfs());\n+                        if (si.getIndexCfs() != null) {\n+                            logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n+                            valid.add(si.getIndexCfs());\n+                        }\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/cassandra/raw/45955e6829a765cb12671f628480e9c397cb695d/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "26846e7becf1e515f8356aeef3d9227acfd32162",
                "status": "modified"
            }
        ],
        "message": "Fix upgradesstables NPE for non-CF-based indexes\npatch by Sergio Bossa; reviewed by jbellis for CASSANDRA-6645",
        "parent": "https://github.com/apache/cassandra/commit/43e6e184b0bc4881a3324fa1caad987207a95e9e",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_45c8f53": {
        "bug_id": "cassandra_45c8f53",
        "commit": "https://github.com/apache/cassandra/commit/45c8f53a2c42f48317110908734119a7cb24baf1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/45c8f53a2c42f48317110908734119a7cb24baf1/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=45c8f53a2c42f48317110908734119a7cb24baf1",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,6 @@\n 1.1.2\n+ * Raise a meaningful exception instead of NPE when PFS encounters\n+   an unconfigured node + no default (CASSANDRA-4349)\n  * fix bug in sstable blacklisting with LCS (CASSANDRA-4343)\n  * LCS no longer promotes tiny sstables out of L0 (CASSANDRA-4341)\n  * skip tombstones during hint replay (CASSANDRA-4320)",
                "raw_url": "https://github.com/apache/cassandra/raw/45c8f53a2c42f48317110908734119a7cb24baf1/CHANGES.txt",
                "sha": "b6702cb5232386ab29a48ba5bb5a69231382b69e",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cassandra/blob/45c8f53a2c42f48317110908734119a7cb24baf1/src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java?ref=45c8f53a2c42f48317110908734119a7cb24baf1",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java",
                "patch": "@@ -34,15 +34,13 @@\n      * Return the rack for which an endpoint resides in\n      * @param endpoint a specified endpoint\n      * @return string of rack\n-     * @throws UnknownHostException\n      */\n     abstract public String getRack(InetAddress endpoint);\n \n     /**\n      * Return the data center for which an endpoint resides in\n      * @param endpoint a specified endpoint\n      * @return string of data center\n-     * @throws UnknownHostException\n      */\n     abstract public String getDatacenter(InetAddress endpoint);\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/45c8f53a2c42f48317110908734119a7cb24baf1/src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java",
                "sha": "68404c91938a2b6f1942e34a3840480d6ba8cd29",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cassandra/blob/45c8f53a2c42f48317110908734119a7cb24baf1/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java?ref=45c8f53a2c42f48317110908734119a7cb24baf1",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/locator/PropertyFileSnitch.java",
                "patch": "@@ -83,6 +83,14 @@ protected void runMayThrow() throws ConfigurationException\n      * @return a array of string with the first index being the data center and the second being the rack\n      */\n     public String[] getEndpointInfo(InetAddress endpoint)\n+    {\n+        String[] rawEndpointInfo = getRawEndpointInfo(endpoint);\n+        if (rawEndpointInfo == null)\n+            throw new RuntimeException(\"Unknown host \" + endpoint + \" with no default configured\");\n+        return rawEndpointInfo;\n+    }\n+\n+    private String[] getRawEndpointInfo(InetAddress endpoint)\n     {\n         String[] value = endpointMap.get(endpoint);\n         if (value == null)",
                "raw_url": "https://github.com/apache/cassandra/raw/45c8f53a2c42f48317110908734119a7cb24baf1/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java",
                "sha": "0bf58507c916887d466423c32e5bdb68c85ac1d6",
                "status": "modified"
            }
        ],
        "message": "Raise a meaningful exception instead of NPE when PFS encounters an unconfigured node\npatch by jbellis; reviewed by brandonwilliams for CASSANDRA-4349",
        "parent": "https://github.com/apache/cassandra/commit/0ba2631ee228bdefaba61a53d723a65107ca044d",
        "repo": "cassandra",
        "unit_tests": [
            "PropertyFileSnitchTest.java"
        ]
    },
    "cassandra_4618b41": {
        "bug_id": "cassandra_4618b41",
        "commit": "https://github.com/apache/cassandra/commit/4618b41ea9374e09ee61e569da9ca4a4fedf81ed",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/4618b41ea9374e09ee61e569da9ca4a4fedf81ed/src/java/org/apache/cassandra/db/CounterMutation.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/CounterMutation.java?ref=4618b41ea9374e09ee61e569da9ca4a4fedf81ed",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/CounterMutation.java",
                "patch": "@@ -126,7 +126,7 @@ public RowMutation makeReplicationMutation() throws IOException\n         {\n             Table table = Table.open(readCommand.table);\n             Row row = readCommand.getRow(table);\n-            if (null == row)\n+            if (row == null || row.cf == null)\n                 continue;\n             AbstractType defaultValidator = row.cf.metadata().getDefaultValidator();\n             if (defaultValidator.isCommutative())",
                "raw_url": "https://github.com/apache/cassandra/raw/4618b41ea9374e09ee61e569da9ca4a4fedf81ed/src/java/org/apache/cassandra/db/CounterMutation.java",
                "sha": "14d863053083e0ef63edab9b620462e486716555",
                "status": "modified"
            }
        ],
        "message": "fix #2 for counter replication NPE\npatch by Stu Hood; reviewed by slebresne for CASSANDRA-2289\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@1079833 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/2303abc1ef3e7163eab99ae600696b445bfc4e6c",
        "repo": "cassandra",
        "unit_tests": [
            "CounterMutationTest.java"
        ]
    },
    "cassandra_46e5f23": {
        "bug_id": "cassandra_46e5f23",
        "commit": "https://github.com/apache/cassandra/commit/46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/dht/BootStrapper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/dht/BootStrapper.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/dht/BootStrapper.java",
                "patch": "@@ -110,7 +110,7 @@ public void run()\n         }).start();\n     }\n \n-    public static void guessTokenIfNotSpecified() throws IOException\n+    public static void guessTokenIfNotSpecified(TokenMetadata metadata) throws IOException\n     {\n         StorageService ss = StorageService.instance();\n         StorageLoadBalancer slb = StorageLoadBalancer.instance();\n@@ -122,8 +122,10 @@ public static void guessTokenIfNotSpecified() throws IOException\n         {\n             double maxLoad = 0;\n             InetAddress maxEndpoint = null;\n-            for (Map.Entry<InetAddress,Double> entry : slb.getLoadInfo().entrySet())\n+            for (Map.Entry<InetAddress, Double> entry : slb.getLoadInfo().entrySet())\n             {\n+                if (!metadata.isMember(entry.getKey()))\n+                    continue;\n                 if (maxEndpoint == null || entry.getValue() > maxLoad)\n                 {\n                     maxEndpoint = entry.getKey();",
                "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/dht/BootStrapper.java",
                "sha": "7f50e2ff952a2a1bfba09e882d4c89401dfe75fc",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/locator/TokenMetadata.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/locator/TokenMetadata.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/locator/TokenMetadata.java",
                "patch": "@@ -114,7 +114,8 @@ public void update(Token token, InetAddress endpoint)\n     public Token getToken(InetAddress endpoint)\n     {\n         assert endpoint != null;\n-\n+        assert isMember(endpoint); // don't want to return nulls\n+        \n         lock.readLock().lock();\n         try\n         {\n@@ -126,7 +127,7 @@ public Token getToken(InetAddress endpoint)\n         }\n     }\n     \n-    public boolean isKnownEndPoint(InetAddress endpoint)\n+    public boolean isMember(InetAddress endpoint)\n     {\n         assert endpoint != null;\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/locator/TokenMetadata.java",
                "sha": "837e1190ddad70b5922decd3ffbe10db85cd5351",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cassandra/blob/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=46e5f23e1bb6cf374d0d89ecff40c84a1824b998",
                "deletions": 8,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -272,7 +272,7 @@ public void start() throws IOException\n         {\n             logger_.info(\"Starting in bootstrap mode (first, sleeping to get load information)\");\n             Gossiper.instance().addApplicationState(MODE, new ApplicationState(MODE_MOVING));\n-            BootStrapper.guessTokenIfNotSpecified();\n+            BootStrapper.guessTokenIfNotSpecified(tokenMetadata_);\n             new BootStrapper(replicationStrategy_, FBUtilities.getLocalAddress(), getLocalToken(), tokenMetadata_).startBootstrap(); // handles token update\n         }\n         else\n@@ -373,20 +373,21 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n             Token newToken = getPartitioner().getTokenFactory().fromString(nodeIdState.getState());\n             if (logger_.isDebugEnabled())\n               logger_.debug(\"CHANGE IN STATE FOR \" + endpoint + \" - has token \" + nodeIdState.getState());\n-            Token oldToken = tokenMetadata_.getToken(endpoint);\n \n-            if ( oldToken != null )\n+            if (tokenMetadata_.isMember(endpoint))\n             {\n+                Token oldToken = tokenMetadata_.getToken(endpoint);\n+\n                 /*\n                  * If oldToken equals the newToken then the node had crashed\n                  * and is coming back up again. If oldToken is not equal to\n                  * the newToken this means that the node is being relocated\n                  * to another position in the ring.\n                 */\n-                if ( !oldToken.equals(newToken) )\n+                if (!oldToken.equals(newToken))\n                 {\n                     if (logger_.isDebugEnabled())\n-                      logger_.debug(\"Relocation for endpoint \" + endpoint);\n+                        logger_.debug(\"Relocation for endpoint \" + endpoint);\n                     updateForeignToken(newToken, endpoint);\n                 }\n                 else\n@@ -396,7 +397,7 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n                      * Deliver the hints that we have for this endpoint.\n                     */\n                     if (logger_.isDebugEnabled())\n-                      logger_.debug(\"Sending hinted data to \" + endpoint);\n+                        logger_.debug(\"Sending hinted data to \" + endpoint);\n                     deliverHints(endpoint);\n                 }\n             }\n@@ -414,10 +415,10 @@ public void onChange(InetAddress endpoint, EndPointState epState)\n              * If we are here and if this node is UP and already has an entry\n              * in the token map. It means that the node was behind a network partition.\n             */\n-            if ( epState.isAlive() && tokenMetadata_.isKnownEndPoint(endpoint) )\n+            if (epState.isAlive() && tokenMetadata_.isMember(endpoint))\n             {\n                 if (logger_.isDebugEnabled())\n-                  logger_.debug(\"InetAddress \" + endpoint + \" just recovered from a partition. Sending hinted data.\");\n+                    logger_.debug(\"InetAddress \" + endpoint + \" just recovered from a partition. Sending hinted data.\");\n                 deliverHints(endpoint);\n             }\n         }",
                "raw_url": "https://github.com/apache/cassandra/raw/46e5f23e1bb6cf374d0d89ecff40c84a1824b998/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "d39f7c4647b84b07a48d5355bbfbdace18c31411",
                "status": "modified"
            }
        ],
        "message": "fix NPE caused by getToken on endpoint that isn't member of ring yet.  add assert to prevent in the future.\npatch by jbellis for CASSANDRA-522\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/cassandra/trunk@832268 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/3678daa0be6e88821b3a61e20c78493d6f119449",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_4e96cc9": {
        "bug_id": "cassandra_4e96cc9",
        "commit": "https://github.com/apache/cassandra/commit/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -23,6 +23,7 @@\n  * remove no-op HHOM.renameHints (CASSANDRA-2693)\n  * clone super columns to avoid modifying them during flush (CASSANDRA-2675)\n  * allow writes to bypass the commitlog for certain keyspaces (CASSANDRA-2683)\n+ * avoid NPE when bypassing commitlog during memtable flush (CASSANDRA-2781)\n \n \n 0.8.0-final",
                "raw_url": "https://github.com/apache/cassandra/raw/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/CHANGES.txt",
                "sha": "53cb3f63a6804e46ff3febc88e3d6d1da3f4d858",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -646,7 +646,7 @@ public String getTempSSTablePath(String directory)\n \n             assert getMemtableThreadSafe() == oldMemtable;\n             oldMemtable.freeze();\n-            final ReplayPosition ctx = writeCommitLog ? CommitLog.instance.getContext() : null;\n+            final ReplayPosition ctx = writeCommitLog ? CommitLog.instance.getContext() : ReplayPosition.NONE;\n \n             // submit the memtable for any indexed sub-cfses, and our own.\n             List<ColumnFamilyStore> icc = new ArrayList<ColumnFamilyStore>(indexedColumns.size());",
                "raw_url": "https://github.com/apache/cassandra/raw/4e96cc9d41bccc9781cbe3008db6e72c91c7d5f1/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "e1759951a9bf30cfff58705fedb530549b1d4492",
                "status": "modified"
            }
        ],
        "message": "fix NPE\twhen bypassing commitlog during\tmemtable flush\n\nPatch by tjake;\t reviewed by Sylvain Lebresne for CASSANDRA-2718\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1128306 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/1dd1df7c912892fe67f37a6fe7437bd3e56259b0",
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_5223c47": {
        "bug_id": "cassandra_5223c47",
        "commit": "https://github.com/apache/cassandra/commit/5223c4797cbb46d5df427d72bb115f96af342d60",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/5223c4797cbb46d5df427d72bb115f96af342d60/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5223c4797cbb46d5df427d72bb115f96af342d60",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,7 +1,9 @@\n 2.1.0-beta2\n+ * Fix ABTC NPE (CASSANDRA-6692)\n  * Allow nodetool to use a file or prompt for password (CASSANDRA-6660)\n  * Fix AIOOBE when concurrently accessing ABSC (CASSANDRA-6742)\n \n+\n 2.1.0-beta1\n  * Add flush directory distinct from compaction directories (CASSANDRA-6357)\n  * Require JNA by default (CASSANDRA-6575)",
                "raw_url": "https://github.com/apache/cassandra/raw/5223c4797cbb46d5df427d72bb115f96af342d60/CHANGES.txt",
                "sha": "efc54f8034e0119ed1d7316a1885ef07721cc30f",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cassandra/blob/5223c4797cbb46d5df427d72bb115f96af342d60/src/java/org/apache/cassandra/db/AtomicBTreeColumns.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/AtomicBTreeColumns.java?ref=5223c4797cbb46d5df427d72bb115f96af342d60",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/db/AtomicBTreeColumns.java",
                "patch": "@@ -230,25 +230,29 @@ public Delta addAllWithSizeDelta(final ColumnFamily cm, AbstractAllocator alloca\n             Holder current = ref;\n \n             delta.reset();\n-            DeletionInfo deletionInfo = cm.deletionInfo();\n-            if (deletionInfo.mayModify(current.deletionInfo))\n+            DeletionInfo deletionInfo;\n+            if (cm.deletionInfo().mayModify(current.deletionInfo))\n             {\n-                if (deletionInfo.hasRanges())\n+                if (cm.deletionInfo().hasRanges())\n                 {\n                     for (Iterator<Cell> iter : new Iterator[] { insert.iterator(), BTree.<Cell>slice(current.tree, true) })\n                     {\n                         while (iter.hasNext())\n                         {\n                             Cell col = iter.next();\n-                            if (deletionInfo.isDeleted(col))\n+                            if (cm.deletionInfo().isDeleted(col))\n                                 indexer.remove(col);\n                         }\n                     }\n                 }\n \n-                deletionInfo = current.deletionInfo.copy().add(deletionInfo);\n+                deletionInfo = current.deletionInfo.copy().add(cm.deletionInfo());\n                 delta.addHeapSize(deletionInfo.unsharedHeapSize() - current.deletionInfo.unsharedHeapSize());\n             }\n+            else\n+            {\n+                deletionInfo = current.deletionInfo;\n+            }\n \n             ColumnUpdater updater = new ColumnUpdater(this, current, allocator, transformation, indexer, delta);\n             Object[] tree = BTree.update(current.tree, metadata.comparator.columnComparator(), insert, true, updater);",
                "raw_url": "https://github.com/apache/cassandra/raw/5223c4797cbb46d5df427d72bb115f96af342d60/src/java/org/apache/cassandra/db/AtomicBTreeColumns.java",
                "sha": "f75efd2fc765b0d80d8c9ef112bc9c074083b320",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/cassandra/blob/5223c4797cbb46d5df427d72bb115f96af342d60/src/java/org/apache/cassandra/utils/btree/BTree.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/btree/BTree.java?ref=5223c4797cbb46d5df427d72bb115f96af342d60",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/utils/btree/BTree.java",
                "patch": "@@ -18,9 +18,11 @@\n  */\n package org.apache.cassandra.utils.btree;\n \n+import java.util.ArrayDeque;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Comparator;\n+import java.util.Queue;\n \n import org.apache.cassandra.utils.ObjectSizes;\n \n@@ -113,7 +115,13 @@\n         if (!sorted)\n             source = sorted(source, comparator, size);\n \n-        return modifier.get().build(source, size);\n+        Queue<Builder> queue = modifier.get();\n+        Builder builder = queue.poll();\n+        if (builder == null)\n+            builder = new Builder();\n+        Object[] btree = builder.build(source, size);\n+        queue.add(builder);\n+        return btree;\n     }\n \n     /**\n@@ -154,7 +162,13 @@\n         if (!updateWithIsSorted)\n             updateWith = sorted(updateWith, comparator, updateWith.size());\n \n-        return modifier.get().update(btree, comparator, updateWith, updateF);\n+        Queue<Builder> queue = modifier.get();\n+        Builder builder = queue.poll();\n+        if (builder == null)\n+            builder = new Builder();\n+        btree = builder.update(btree, comparator, updateWith, updateF);\n+        queue.add(builder);\n+        return btree;\n     }\n \n     /**\n@@ -319,12 +333,12 @@ public int compareTo(Object o)\n         }\n     };\n \n-    private static final ThreadLocal<Builder> modifier = new ThreadLocal<Builder>()\n+    private static final ThreadLocal<Queue<Builder>> modifier = new ThreadLocal<Queue<Builder>>()\n     {\n         @Override\n-        protected Builder initialValue()\n+        protected Queue<Builder> initialValue()\n         {\n-            return new Builder();\n+            return new ArrayDeque<>();\n         }\n     };\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/5223c4797cbb46d5df427d72bb115f96af342d60/src/java/org/apache/cassandra/utils/btree/BTree.java",
                "sha": "69cf1455095b248c18a98d7d20eef71f4f1da982",
                "status": "modified"
            }
        ],
        "message": "Fix ABTC NPE\npatch by Benedict Elliott Smith; reviewed by jbellis for CASSANDRA-6692",
        "parent": "https://github.com/apache/cassandra/commit/63b1ef4eebb26523d69b96cfcf20d9e5ae0b15c0",
        "repo": "cassandra",
        "unit_tests": [
            "BTreeTest.java"
        ]
    },
    "cassandra_55dda73": {
        "bug_id": "cassandra_55dda73",
        "commit": "https://github.com/apache/cassandra/commit/55dda732bdafc081addcb2f0280d0f7945343ff6",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/55dda732bdafc081addcb2f0280d0f7945343ff6/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java?ref=55dda732bdafc081addcb2f0280d0f7945343ff6",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java",
                "patch": "@@ -151,6 +151,9 @@ public synchronized AbstractCompactionTask getNextBackgroundTask(int gcBefore)\n     public AbstractCompactionTask getMaximalTask(final int gcBefore)\n     {\n         Collection<SSTableReader> sstables = cfs.markAllCompacting();\n+        if (sstables == null)\n+            return null;\n+\n         return new CompactionTask(cfs, sstables, gcBefore);\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/55dda732bdafc081addcb2f0280d0f7945343ff6/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java",
                "sha": "8d990e51e5d0109919090bbb75a0395eb76e4fe3",
                "status": "modified"
            }
        ],
        "message": "avoid NPE on no-op major compaction",
        "parent": "https://github.com/apache/cassandra/commit/d21556f4f53d4b59c3e2ae1d3571fb1fba6bf5ed",
        "repo": "cassandra",
        "unit_tests": [
            "SizeTieredCompactionStrategyTest.java"
        ]
    },
    "cassandra_56b5c6f": {
        "bug_id": "cassandra_56b5c6f",
        "commit": "https://github.com/apache/cassandra/commit/56b5c6f3024625b90f7a1deef1def7a7002b6e28",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/56b5c6f3024625b90f7a1deef1def7a7002b6e28/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=56b5c6f3024625b90f7a1deef1def7a7002b6e28",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -18,6 +18,7 @@\n  * Fix paxos bugs (CASSANDRA-6012, 6013, 6023)\n  * Fix paged ranges with multiple replicas (CASSANDRA-6004)\n  * Fix potential AssertionError during tracing (CASSANDRA-6041)\n+ * Fix NPE in sstablesplit (CASSANDRA-6027)\n Merged from 1.2:\n 1.2.10\n  * Fix possible divide-by-zero in HHOM (CASSANDRA-5990)",
                "raw_url": "https://github.com/apache/cassandra/raw/56b5c6f3024625b90f7a1deef1def7a7002b6e28/CHANGES.txt",
                "sha": "f48fb5c45ed66bb3d2eaad7b28a8b7eb2d5237ce",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/56b5c6f3024625b90f7a1deef1def7a7002b6e28/src/java/org/apache/cassandra/db/compaction/CompactionController.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionController.java?ref=56b5c6f3024625b90f7a1deef1def7a7002b6e28",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/compaction/CompactionController.java",
                "patch": "@@ -100,6 +100,10 @@ public CompactionController(ColumnFamilyStore cfs, Set<SSTableReader> compacting\n     public static Set<SSTableReader> getFullyExpiredSSTables(ColumnFamilyStore cfStore, Set<SSTableReader> compacting, Set<SSTableReader> overlapping, int gcBefore)\n     {\n         logger.debug(\"Checking droppable sstables in {}\", cfStore);\n+\n+        if (compacting == null)\n+            return Collections.<SSTableReader>emptySet();\n+\n         List<SSTableReader> candidates = new ArrayList<SSTableReader>();\n \n         long minTimestamp = Integer.MAX_VALUE;",
                "raw_url": "https://github.com/apache/cassandra/raw/56b5c6f3024625b90f7a1deef1def7a7002b6e28/src/java/org/apache/cassandra/db/compaction/CompactionController.java",
                "sha": "95528954f096320c5d2b64cf81404df24a830cc3",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in sstablesplit\n\npatch by slebresne; reviewed by iamaleksey for CASSANDRA-6027",
        "parent": "https://github.com/apache/cassandra/commit/765d1e97ff7dbe50ce13297993720147ddb6eca0",
        "repo": "cassandra",
        "unit_tests": [
            "CompactionControllerTest.java"
        ]
    },
    "cassandra_5749fb1": {
        "bug_id": "cassandra_5749fb1",
        "commit": "https://github.com/apache/cassandra/commit/5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -1725,6 +1725,9 @@ public ColumnFamily getColumnFamily(QueryFilter filter)\n      */\n     ColumnFamily filterColumnFamily(ColumnFamily cached, QueryFilter filter)\n     {\n+        if (cached == null)\n+            return null;\n+\n         ColumnFamily cf = cached.cloneMeShallow(ArrayBackedSortedColumns.factory, filter.filter.isReversed());\n         OnDiskAtomIterator ci = filter.getColumnFamilyIterator(cached);\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/5749fb1eaa81e4c6c6ba06bce38e3b29d17d398e/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "0a2eb1421e92e79d85ee66d0abe2fe810ac251dd",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE",
        "parent": "https://github.com/apache/cassandra/commit/07a451ea0274ab75f4772aef741bf8aa83e86f91",
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_582b66f": {
        "bug_id": "cassandra_582b66f",
        "commit": "https://github.com/apache/cassandra/commit/582b66fbdfbedd8eb14b16c9f6522067ea921a13",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/582b66fbdfbedd8eb14b16c9f6522067ea921a13/src/java/org/apache/cassandra/gms/Gossiper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=582b66fbdfbedd8eb14b16c9f6522067ea921a13",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/gms/Gossiper.java",
                "patch": "@@ -887,7 +887,8 @@ EndpointState getStateForVersionBiggerThan(InetAddress forEndpoint, int version)\n                     states.put(key, value);\n                 }\n             }\n-            reqdEndpointState.addApplicationStates(states);\n+            if (reqdEndpointState != null)\n+                reqdEndpointState.addApplicationStates(states);\n         }\n         return reqdEndpointState;\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/582b66fbdfbedd8eb14b16c9f6522067ea921a13/src/java/org/apache/cassandra/gms/Gossiper.java",
                "sha": "2f69d664cb6861f09dcb087cb091566b5a0b1bef",
                "status": "modified"
            }
        ],
        "message": "Follow up to 10089 - fix possible NPE in Gossiper.getStateForVersionBiggerThan",
        "parent": "https://github.com/apache/cassandra/commit/ecd66de2bdf2ecb88c4276a4616a76f5ec2921bb",
        "repo": "cassandra",
        "unit_tests": [
            "GossiperTest.java"
        ]
    },
    "cassandra_59bf44d": {
        "bug_id": "cassandra_59bf44d",
        "commit": "https://github.com/apache/cassandra/commit/59bf44dd94939cea513a74250f6002357d1f9f2c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/59bf44dd94939cea513a74250f6002357d1f9f2c/src/java/org/apache/cassandra/db/HintedHandOffManager.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/HintedHandOffManager.java?ref=59bf44dd94939cea513a74250f6002357d1f9f2c",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/db/HintedHandOffManager.java",
                "patch": "@@ -209,7 +209,7 @@ private int waitForSchemaAgreement(InetAddress endpoint) throws TimeoutException\n         Gossiper gossiper = Gossiper.instance;\n         int waited = 0;\n         // first, wait for schema to be gossiped.\n-        while (gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA) == null)\n+        while (gossiper.getEndpointStateForEndpoint(endpoint) != null && gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA) == null)\n         {\n             try\n             {\n@@ -223,12 +223,14 @@ private int waitForSchemaAgreement(InetAddress endpoint) throws TimeoutException\n             if (waited > 2 * StorageService.RING_DELAY)\n                 throw new TimeoutException(\"Didin't receive gossiped schema from \" + endpoint + \" in \" + 2 * StorageService.RING_DELAY + \"ms\");\n         }\n+        if (gossiper.getEndpointStateForEndpoint(endpoint) == null)\n+            throw new TimeoutException(\"Node \" + endpoint + \" vanished while waiting for agreement\");\n         waited = 0;\n         // then wait for the correct schema version.\n         // usually we use DD.getDefsVersion, which checks the local schema uuid as stored in the system table.\n         // here we check the one in gossip instead; this serves as a canary to warn us if we introduce a bug that\n         // causes the two to diverge (see CASSANDRA-2946)\n-        while (!gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA).value.equals(\n+        while (gossiper.getEndpointStateForEndpoint(endpoint) != null && !gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA).value.equals(\n                 gossiper.getEndpointStateForEndpoint(FBUtilities.getBroadcastAddress()).getApplicationState(ApplicationState.SCHEMA).value))\n         {\n             try\n@@ -243,6 +245,8 @@ private int waitForSchemaAgreement(InetAddress endpoint) throws TimeoutException\n             if (waited > 2 * StorageService.RING_DELAY)\n                 throw new TimeoutException(\"Could not reach schema agreement with \" + endpoint + \" in \" + 2 * StorageService.RING_DELAY + \"ms\");\n         }\n+        if (gossiper.getEndpointStateForEndpoint(endpoint) == null)\n+            throw new TimeoutException(\"Node \" + endpoint + \" vanished while waiting for agreement\");\n         logger.debug(\"schema for {} matches local schema\", endpoint);\n         return waited;\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/59bf44dd94939cea513a74250f6002357d1f9f2c/src/java/org/apache/cassandra/db/HintedHandOffManager.java",
                "sha": "ede49e4a6158d7570b2ee0a42bb1deb8aa803f44",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/59bf44dd94939cea513a74250f6002357d1f9f2c/src/java/org/apache/cassandra/service/MigrationManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/MigrationManager.java?ref=59bf44dd94939cea513a74250f6002357d1f9f2c",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/MigrationManager.java",
                "patch": "@@ -127,7 +127,10 @@ private static void maybeScheduleSchemaPull(final UUID theirVersion, final InetA\n                 public void run()\n                 {\n                     // grab the latest version of the schema since it may have changed again since the initial scheduling\n-                    VersionedValue value = Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA);\n+                    EndpointState epState = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+                    if (epState == null)\n+                        return;\n+                    VersionedValue value = epState.getApplicationState(ApplicationState.SCHEMA);\n                     UUID currentVersion = UUID.fromString(value.value);\n                     if (Schema.instance.getVersion().equals(currentVersion))\n                         return;",
                "raw_url": "https://github.com/apache/cassandra/raw/59bf44dd94939cea513a74250f6002357d1f9f2c/src/java/org/apache/cassandra/service/MigrationManager.java",
                "sha": "3ede35e72215c561cd6375294ccfb011aa598462",
                "status": "modified"
            }
        ],
        "message": "Fix harmless NPE in MM/HHOM\nPatch by brandonwilliams, reviewed by Tyler Hobbs for CASSANDRA-5185",
        "parent": "https://github.com/apache/cassandra/commit/12413ad1f848aacb3314d279fb4db7e2b293d066",
        "repo": "cassandra",
        "unit_tests": [
            "MigrationManagerTest.java"
        ]
    },
    "cassandra_5ae9320": {
        "bug_id": "cassandra_5ae9320",
        "commit": "https://github.com/apache/cassandra/commit/5ae93209f29aab470dbe159eadc040bee073c5f5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/5ae93209f29aab470dbe159eadc040bee073c5f5/src/java/org/apache/cassandra/config/Config.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/Config.java?ref=5ae93209f29aab470dbe159eadc040bee073c5f5",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/config/Config.java",
                "patch": "@@ -109,7 +109,7 @@\n     public RequestSchedulerId request_scheduler_id;\n     public RequestSchedulerOptions request_scheduler_options;\n \n-    public EncryptionOptions encryption_options;\n+    public EncryptionOptions encryption_options = new EncryptionOptions();\n \n     public Integer index_interval = 128;\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/5ae93209f29aab470dbe159eadc040bee073c5f5/src/java/org/apache/cassandra/config/Config.java",
                "sha": "9f5480c5e40aabda88d7f407dbc53500b74f200a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/5ae93209f29aab470dbe159eadc040bee073c5f5/src/java/org/apache/cassandra/net/MessagingService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/MessagingService.java?ref=5ae93209f29aab470dbe159eadc040bee073c5f5",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/net/MessagingService.java",
                "patch": "@@ -240,7 +240,7 @@ public void listen(InetAddress localEp) throws IOException, ConfigurationExcepti\n     private List<ServerSocket> getServerSocket(InetAddress localEp) throws IOException, ConfigurationException\n     {\n        final List<ServerSocket> ss = new ArrayList<ServerSocket>();\n-        if (DatabaseDescriptor.getEncryptionOptions() != null && DatabaseDescriptor.getEncryptionOptions().internode_encryption != EncryptionOptions.InternodeEncryption.none)\n+        if (DatabaseDescriptor.getEncryptionOptions().internode_encryption != EncryptionOptions.InternodeEncryption.none)\n         {\n             ss.add(SSLFactory.getServerSocket(DatabaseDescriptor.getEncryptionOptions(), localEp, DatabaseDescriptor.getSSLStoragePort()));\n             // setReuseAddress happens in the factory.",
                "raw_url": "https://github.com/apache/cassandra/raw/5ae93209f29aab470dbe159eadc040bee073c5f5/src/java/org/apache/cassandra/net/MessagingService.java",
                "sha": "8829557f3a6c31ecf2ebad944febf2ae663e9e5d",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE when encryption options are missing.\nPatch by brandonwilliams, reviewed by jbellis for CASSANDRA-3489\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-1.0@1209229 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/ed1c9a26de39e17cc84f4cdbf1c96d22a327533d",
        "repo": "cassandra",
        "unit_tests": [
            "MessagingServiceTest.java"
        ]
    },
    "cassandra_5b6a2b1": {
        "bug_id": "cassandra_5b6a2b1",
        "commit": "https://github.com/apache/cassandra/commit/5b6a2b11bc8a9499ac012d745869e3d814cc91ad",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/5b6a2b11bc8a9499ac012d745869e3d814cc91ad/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=5b6a2b11bc8a9499ac012d745869e3d814cc91ad",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -1192,7 +1192,7 @@ ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore)\n             readStats.addNano(System.nanoTime() - start);\n         }\n \n-        logger.debug(\"Read {} columns\", result.getColumnCount());\n+        logger.debug(\"Read {} columns\", result == null ? 0 : result.getColumnCount());\n         return result;\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/5b6a2b11bc8a9499ac012d745869e3d814cc91ad/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "ef0e55dcec4d496e8e5305ae6f465a3b45b89f4d",
                "status": "modified"
            }
        ],
        "message": "fix NPE\npatch by David Alves for CASSANDRA-1123",
        "parent": "https://github.com/apache/cassandra/commit/ad52ce4fa303d2c63cbd9833b7245ab2cdff28b3",
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_5b982d7": {
        "bug_id": "cassandra_5b982d7",
        "commit": "https://github.com/apache/cassandra/commit/5b982d790bffbf1beb92fd605f6f213914ba4b63",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/5b982d790bffbf1beb92fd605f6f213914ba4b63/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5b982d790bffbf1beb92fd605f6f213914ba4b63",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.2.11\n+ * Fix potential NPE when resume bootstrap fails (CASSANDRA-13272)\n  * Fix toJSONString for the UDT, tuple and collection types (CASSANDRA-13592)\n  * Fix nested Tuples/UDTs validation (CASSANDRA-13646)\n  * Remove unused max_value_size_in_mb config setting from yaml (CASSANDRA-13625",
                "raw_url": "https://github.com/apache/cassandra/raw/5b982d790bffbf1beb92fd605f6f213914ba4b63/CHANGES.txt",
                "sha": "122ba54cb52efe248c372a22ac34c42db8519b6a",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/5b982d790bffbf1beb92fd605f6f213914ba4b63/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=5b982d790bffbf1beb92fd605f6f213914ba4b63",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -1254,8 +1254,16 @@ public void onSuccess(StreamState streamState)\n                 @Override\n                 public void onFailure(Throwable e)\n                 {\n-                    String message = \"Error during bootstrap: \" + e.getCause().getMessage();\n-                    logger.error(message, e.getCause());\n+                    String message = \"Error during bootstrap: \";\n+                    if (e instanceof ExecutionException && e.getCause() != null)\n+                    {\n+                        message += e.getCause().getMessage();\n+                    }\n+                    else\n+                    {\n+                        message += e.getMessage();\n+                    }\n+                    logger.error(message, e);\n                     progressSupport.progress(\"bootstrap\", new ProgressEvent(ProgressEventType.ERROR, 1, 1, message));\n                     progressSupport.progress(\"bootstrap\", new ProgressEvent(ProgressEventType.COMPLETE, 1, 1, \"Resume bootstrap complete\"));\n                 }",
                "raw_url": "https://github.com/apache/cassandra/raw/5b982d790bffbf1beb92fd605f6f213914ba4b63/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "1ecedacd7c571ede1f8c2ed19cedb6d801e0fbb9",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE when resume bootstrap fails\n\npatch by Tim Lamballais; reviewed by Benjamin Lerer for CASSANDRA-13272",
        "parent": "https://github.com/apache/cassandra/commit/cb6fad3efcd7cd3dc87d02ca7e8e97eb277a66ab",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_5d08a25": {
        "bug_id": "cassandra_5d08a25",
        "commit": "https://github.com/apache/cassandra/commit/5d08a2518d3c538ba7c6a91893424493b28fd9ac",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/5d08a2518d3c538ba7c6a91893424493b28fd9ac/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5d08a2518d3c538ba7c6a91893424493b28fd9ac",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -7,6 +7,7 @@\n  * Do not open non-ssl storage port if encryption option is all (CASSANDRA-3916)\n  * Move batchlog replay to its own executor (CASSANDRA-6079)\n  * Add tombstone debug threshold and histogram (CASSANDRA-6042, 6057)\n+ * Fix fat client schema pull NPE (CASSANDRA-6089)\n \n \n 1.2.10",
                "raw_url": "https://github.com/apache/cassandra/raw/5d08a2518d3c538ba7c6a91893424493b28fd9ac/CHANGES.txt",
                "sha": "27ebc9b8e57e6135cae5dc24286c64fe98335800",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/5d08a2518d3c538ba7c6a91893424493b28fd9ac/src/java/org/apache/cassandra/service/MigrationManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/MigrationManager.java?ref=5d08a2518d3c538ba7c6a91893424493b28fd9ac",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/MigrationManager.java",
                "patch": "@@ -110,7 +110,7 @@ public void onRemove(InetAddress endpoint)\n      */\n     private static void maybeScheduleSchemaPull(final UUID theirVersion, final InetAddress endpoint)\n     {\n-        if (Schema.instance.getVersion().equals(theirVersion) || !shouldPullSchemaFrom(endpoint))\n+        if ((Schema.instance.getVersion() != null && Schema.instance.getVersion().equals(theirVersion)) || !shouldPullSchemaFrom(endpoint))\n             return;\n \n         if (Schema.emptyVersion.equals(Schema.instance.getVersion()) || runtimeMXBean.getUptime() < MIGRATION_DELAY_IN_MS)",
                "raw_url": "https://github.com/apache/cassandra/raw/5d08a2518d3c538ba7c6a91893424493b28fd9ac/src/java/org/apache/cassandra/service/MigrationManager.java",
                "sha": "e901b61140d4cb0420b0b0020b7f9c9daa0939fb",
                "status": "modified"
            }
        ],
        "message": "Fix fat client schema pull NPE\n\npatch by Mikhail Panchenko; reviewed by Aleksey Yeschenko for\nCASSANDRA-6089",
        "parent": "https://github.com/apache/cassandra/commit/25926d0946ff04243dab6876dcdd76b05c57e472",
        "repo": "cassandra",
        "unit_tests": [
            "MigrationManagerTest.java"
        ]
    },
    "cassandra_5e40a3b": {
        "bug_id": "cassandra_5e40a3b",
        "commit": "https://github.com/apache/cassandra/commit/5e40a3b7c120f430d73ab34db68b361c0313b2eb",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/5e40a3b7c120f430d73ab34db68b361c0313b2eb/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=5e40a3b7c120f430d73ab34db68b361c0313b2eb",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -15,6 +15,7 @@\n  * Fix SecondaryIndexManager#deleteFromIndexes() (CASSANDRA-6711)\n  * Fix snapshot repair not snapshotting coordinator itself (CASSANDRA-6713)\n  * Support negative timestamps for CQL3 dates in query string (CASSANDRA-6718)\n+ * Avoid NPEs when receiving table changes for an unknown keyspace (CASSANDRA-5631)\n \n \n 1.2.15",
                "raw_url": "https://github.com/apache/cassandra/raw/5e40a3b7c120f430d73ab34db68b361c0313b2eb/CHANGES.txt",
                "sha": "51dec14a5da818d3d289d9597bc1433f188eecff",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/5e40a3b7c120f430d73ab34db68b361c0313b2eb/src/java/org/apache/cassandra/service/MigrationManager.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/MigrationManager.java?ref=5e40a3b7c120f430d73ab34db68b361c0313b2eb",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/service/MigrationManager.java",
                "patch": "@@ -210,7 +210,7 @@ else if (ksm.cfMetaData().containsKey(cfm.cfName))\n             throw new AlreadyExistsException(cfm.ksName, cfm.cfName);\n \n         logger.info(String.format(\"Create new ColumnFamily: %s\", cfm));\n-        announce(cfm.toSchema(FBUtilities.timestampMicros()));\n+        announce(addSerializedKeyspace(cfm.toSchema(FBUtilities.timestampMicros()), cfm.ksName));\n     }\n \n     public static void announceKeyspaceUpdate(KSMetaData ksm) throws ConfigurationException\n@@ -236,7 +236,7 @@ public static void announceColumnFamilyUpdate(CFMetaData cfm) throws Configurati\n         oldCfm.validateCompatility(cfm);\n \n         logger.info(String.format(\"Update ColumnFamily '%s/%s' From %s To %s\", cfm.ksName, cfm.cfName, oldCfm, cfm));\n-        announce(oldCfm.toSchemaUpdate(cfm, FBUtilities.timestampMicros()));\n+        announce(addSerializedKeyspace(oldCfm.toSchemaUpdate(cfm, FBUtilities.timestampMicros()), cfm.ksName));\n     }\n \n     public static void announceKeyspaceDrop(String ksName) throws ConfigurationException\n@@ -256,7 +256,14 @@ public static void announceColumnFamilyDrop(String ksName, String cfName) throws\n             throw new ConfigurationException(String.format(\"Cannot drop non existing column family '%s' in keyspace '%s'.\", cfName, ksName));\n \n         logger.info(String.format(\"Drop ColumnFamily '%s/%s'\", oldCfm.ksName, oldCfm.cfName));\n-        announce(oldCfm.dropFromSchema(FBUtilities.timestampMicros()));\n+        announce(addSerializedKeyspace(oldCfm.dropFromSchema(FBUtilities.timestampMicros()), ksName));\n+    }\n+\n+    // Include the serialized keyspace for when a target node missed the CREATE KEYSPACE migration (see #5631).\n+    private static RowMutation addSerializedKeyspace(RowMutation migration, String ksName)\n+    {\n+        migration.add(SystemTable.readSchemaRow(ksName).cf);\n+        return migration;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cassandra/raw/5e40a3b7c120f430d73ab34db68b361c0313b2eb/src/java/org/apache/cassandra/service/MigrationManager.java",
                "sha": "9f6113cb486663876460163436ffdd75baed1ac0",
                "status": "modified"
            }
        ],
        "message": "Avoid NPEs when receiving table changes for an unknown keyspace\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for CASSANDRA-5631",
        "parent": "https://github.com/apache/cassandra/commit/c92b20b3073f1c5cca3666225db33ea102ba77b5",
        "repo": "cassandra",
        "unit_tests": [
            "MigrationManagerTest.java"
        ]
    },
    "cassandra_5fe0600": {
        "bug_id": "cassandra_5fe0600",
        "commit": "https://github.com/apache/cassandra/commit/5fe0600744cba01d8e238746c0bd363f2059320c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/db/DataTracker.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/DataTracker.java?ref=5fe0600744cba01d8e238746c0bd363f2059320c",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/db/DataTracker.java",
                "patch": "@@ -437,11 +437,12 @@ public long estimatedKeys()\n     public int getMeanColumns()\n     {\n         long sum = 0;\n-        int count = 0;\n+        long count = 0;\n         for (SSTableReader sstable : getSSTables())\n         {\n-            sum += sstable.getEstimatedColumnCount().mean();\n-            count++;\n+            long n = sstable.getEstimatedColumnCount().count();\n+            sum += sstable.getEstimatedColumnCount().mean() * n;\n+            count += n;\n         }\n         return count > 0 ? (int) (sum / count) : 0;\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/db/DataTracker.java",
                "sha": "d90c0ffa4d4844e5d276c98ece508b5624ab20db",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java?ref=5fe0600744cba01d8e238746c0bd363f2059320c",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java",
                "patch": "@@ -111,15 +111,15 @@ public boolean signal()\n      */\n     public void signalAll()\n     {\n-        if (!hasWaiters())\n+        RegisteredSignal last = queue.peekLast();\n+        if (last == null)\n             return;\n         List<Thread> woke = null;\n         if (logger.isTraceEnabled())\n             woke = new ArrayList<>();\n         long start = System.nanoTime();\n         // we wake up only a snapshot of the queue, to avoid a race where the condition is not met and the woken thread\n         // immediately waits on the queue again\n-        RegisteredSignal last = queue.getLast();\n         Iterator<RegisteredSignal> iter = queue.iterator();\n         while (iter.hasNext())\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/5fe0600744cba01d8e238746c0bd363f2059320c/src/java/org/apache/cassandra/utils/concurrent/WaitQueue.java",
                "sha": "4f3747d3c95404e8bf675348f442e7974d3b484f",
                "status": "modified"
            }
        ],
        "message": "fix NPE\npatch by Benedict Elliott Smith; reviewed by jbellis for CASSANDRA-6671",
        "parent": "https://github.com/apache/cassandra/commit/ff2a92c13c822e3220fe980323590bb4032f32bc",
        "repo": "cassandra",
        "unit_tests": [
            "WaitQueueTest.java"
        ]
    },
    "cassandra_64e1c79": {
        "bug_id": "cassandra_64e1c79",
        "commit": "https://github.com/apache/cassandra/commit/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=64e1c79501028d6d8d3e835f72f73c7c5e8c7f11",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -1149,7 +1149,7 @@ else if (!column.name().hasArray() || !column.value().hasArray())\n                 }\n             }\n \n-            // TFFT resuses the underlying buffer for the key\n+            // avoid keeping a permanent reference to the original key buffer\n             ssTables.getRowCache().put(new DecoratedKey(key.token, ByteBufferUtil.clone(key.key)), cached);\n         }\n         return cached;",
                "raw_url": "https://github.com/apache/cassandra/raw/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "f9b81703a6951aee8a4289f9f79e9cb749b8b959",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=64e1c79501028d6d8d3e835f72f73c7c5e8c7f11",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "patch": "@@ -417,8 +417,9 @@ public DecoratedKey apply(IndexSummary.KeyPosition kp)\n \n     public void cacheKey(DecoratedKey key, Long info)\n     {\n-        //TFFT reuses the underlying buffer for the key\n-        keyCache.put(new Pair<Descriptor, DecoratedKey>(descriptor, new DecoratedKey(key.token, ByteBufferUtil.clone(key.key))), info);\n+        // avoid keeping a permanent reference to the original key buffer\n+        DecoratedKey copiedKey = new DecoratedKey(key.token, key.key == null ? null : ByteBufferUtil.clone(key.key));\n+        keyCache.put(new Pair<Descriptor, DecoratedKey>(descriptor, copiedKey), info);\n     }\n \n     public Long getCachedPosition(DecoratedKey key)\n@@ -441,8 +442,12 @@ private Long getCachedPosition(Pair<Descriptor, DecoratedKey> unifiedKey)\n     public long getPosition(DecoratedKey decoratedKey, Operator op)\n     {\n         // first, check bloom filter\n-        if (op == Operator.EQ && !bf.isPresent(decoratedKey.key))\n-            return -1;\n+        if (op == Operator.EQ)\n+        {\n+            assert decoratedKey.key != null; // null is ok for GE scans\n+            if (!bf.isPresent(decoratedKey.key))\n+                return -1;\n+        }\n \n         // next, the key cache\n         Pair<Descriptor, DecoratedKey> unifiedKey = new Pair<Descriptor, DecoratedKey>(descriptor, decoratedKey);\n@@ -482,7 +487,7 @@ public long getPosition(DecoratedKey decoratedKey, Operator op)\n                             if (op == Operator.EQ)\n                                 bloomFilterTracker.addTruePositive();\n                             // store exact match for the key\n-                            cacheKey(unifiedKey.right, dataPosition);\n+                            cacheKey(decoratedKey, dataPosition);\n                         }\n                         return dataPosition;\n                     }",
                "raw_url": "https://github.com/apache/cassandra/raw/64e1c79501028d6d8d3e835f72f73c7c5e8c7f11/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "sha": "feb53df07a28308b6518557bb66b7b9a1cd4c0ae",
                "status": "modified"
            }
        ],
        "message": "fix NPE from #2102\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.7@1069517 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/9460a5fb6ec61745b89e50577a8a1e4a81768567",
        "repo": "cassandra",
        "unit_tests": [
            "SSTableReaderTest.java"
        ]
    },
    "cassandra_6658a6e": {
        "bug_id": "cassandra_6658a6e",
        "commit": "https://github.com/apache/cassandra/commit/6658a6e03cb4062036f84e78aba6fc3114499c80",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/6658a6e03cb4062036f84e78aba6fc3114499c80/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=6658a6e03cb4062036f84e78aba6fc3114499c80",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "patch": "@@ -89,6 +89,8 @@\n import org.apache.cassandra.io.sstable.metadata.MetadataType;\n import org.apache.cassandra.io.sstable.metadata.StatsMetadata;\n import org.apache.cassandra.io.sstable.metadata.ValidationMetadata;\n+import org.apache.cassandra.io.util.BufferedSegmentedFile;\n+import org.apache.cassandra.io.util.CompressedSegmentedFile;\n import org.apache.cassandra.io.util.DataOutputStreamAndChannel;\n import org.apache.cassandra.io.util.FileDataInput;\n import org.apache.cassandra.io.util.FileUtils;\n@@ -335,10 +337,10 @@ public static SSTableReader openForBatch(Descriptor descriptor, Set<Component> c\n                                                   statsMetadata);\n \n         // special implementation of load to use non-pooled SegmentedFile builders\n-        SegmentedFile.Builder ibuilder = SegmentedFile.getBuilder(DatabaseDescriptor.getIndexAccessMode());\n+        SegmentedFile.Builder ibuilder = new BufferedSegmentedFile.Builder();\n         SegmentedFile.Builder dbuilder = sstable.compression\n-                                       ? SegmentedFile.getCompressedBuilder()\n-                                       : SegmentedFile.getBuilder(DatabaseDescriptor.getDiskAccessMode());\n+                                       ? new CompressedSegmentedFile.Builder()\n+                                       : new BufferedSegmentedFile.Builder();\n         if (!sstable.loadSummary(ibuilder, dbuilder))\n             sstable.buildSummary(false, ibuilder, dbuilder, false, Downsampling.BASE_SAMPLING_LEVEL);\n         sstable.ifile = ibuilder.complete(sstable.descriptor.filenameFor(Component.PRIMARY_INDEX));\n@@ -796,7 +798,7 @@ public boolean loadSummary(SegmentedFile.Builder ibuilder, SegmentedFile.Builder\n         }\n         catch (IOException e)\n         {\n-            logger.debug(\"Cannot deserialize SSTable {} Summary: {}\", toString(), e.getMessage());\n+            logger.debug(\"Cannot deserialize SSTable Summary File {}: {}\", summariesFile.getPath(), e.getMessage());\n             // corrupted; delete it and fall back to creating a new summary\n             FileUtils.closeQuietly(iStream);\n             // delete it and fall back to creating a new summary",
                "raw_url": "https://github.com/apache/cassandra/raw/6658a6e03cb4062036f84e78aba6fc3114499c80/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "sha": "e70fd60c2748125a91f0e37bb1b5589ce0168df4",
                "status": "modified"
            }
        ],
        "message": "Fix sstableloader NPE\n\npatch by benedict; reviewed by yukim for CASSANDRA7015",
        "parent": "https://github.com/apache/cassandra/commit/7232783bc5ab7134c1698d866ceb9cca330d0441",
        "repo": "cassandra",
        "unit_tests": [
            "SSTableReaderTest.java"
        ]
    },
    "cassandra_6ad62c3": {
        "bug_id": "cassandra_6ad62c3",
        "commit": "https://github.com/apache/cassandra/commit/6ad62c3f4a44ccbf1b462075610487e771e56f73",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/6ad62c3f4a44ccbf1b462075610487e771e56f73/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=6ad62c3f4a44ccbf1b462075610487e771e56f73",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -4,6 +4,7 @@\n  * Fix dateOf() function for pre-2.0 timestamp columns (CASSANDRA-5928)\n  * Fix SSTable unintentionally loads BF when opened for batch (CASSANDRA-5938)\n  * Add stream session progress to JMX (CASSANDRA-4757)\n+ * Fix NPE during CAS operation (CASSANDRA-5925)\n Merged from 1.2:\n  * Fix getBloomFilterDiskSpaceUsed for AlwaysPresentFilter (CASSANDRA-5900)\n  * Don't announce schema version until we've loaded the changes locally",
                "raw_url": "https://github.com/apache/cassandra/raw/6ad62c3f4a44ccbf1b462075610487e771e56f73/CHANGES.txt",
                "sha": "0cb223fb7488bf65e1ee06e4bbdef20cbb1b3d4f",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cassandra/blob/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java?ref=6ad62c3f4a44ccbf1b462075610487e771e56f73",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java",
                "patch": "@@ -108,6 +108,8 @@ public void checkAccess(ClientState state) throws InvalidRequestException, Unaut\n \n     public void validate(ClientState state) throws InvalidRequestException\n     {\n+        if (hasConditions() && attrs.isTimestampSet())\n+            throw new InvalidRequestException(\"Custom timestamps are not allowed when conditions are used\");\n     }\n \n     public void addOperation(Operation op)\n@@ -370,13 +372,17 @@ public ResultMessage executeWithCondition(QueryState queryState, QueryOptions op\n             throw new InvalidRequestException(\"IN on the partition key is not supported with conditional updates\");\n \n         ColumnNameBuilder clusteringPrefix = createClusteringPrefixBuilder(variables);\n-        UpdateParameters params = new UpdateParameters(cfm, variables, getTimestamp(queryState.getTimestamp(), variables), getTimeToLive(variables), null);\n \n         ByteBuffer key = keys.get(0);\n         ThriftValidation.validateKey(cfm, key);\n \n-        ColumnFamily updates = updateForKey(key, clusteringPrefix, params);\n-        ColumnFamily expected = buildConditions(key, clusteringPrefix, params);\n+        UpdateParameters updParams = new UpdateParameters(cfm, variables, queryState.getTimestamp(), getTimeToLive(variables), null);\n+        ColumnFamily updates = updateForKey(key, clusteringPrefix, updParams);\n+\n+        // When building the conditions, we should not use the TTL. It's not useful, and if a very low ttl (1 seconds) is used, it's possible\n+        // for it to expire before actually build the conditions which would break since we would then test for the presence of tombstones.\n+        UpdateParameters condParams = new UpdateParameters(cfm, variables, queryState.getTimestamp(), 0, null);\n+        ColumnFamily expected = buildConditions(key, clusteringPrefix, condParams);\n \n         ColumnFamily result = StorageProxy.cas(keyspace(),\n                                                columnFamily(),",
                "raw_url": "https://github.com/apache/cassandra/raw/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/cql3/statements/ModificationStatement.java",
                "sha": "93c4438d01ea32d07d2c3ce274e145f5787b263f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/SystemKeyspace.java?ref=6ad62c3f4a44ccbf1b462075610487e771e56f73",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "patch": "@@ -806,10 +806,11 @@ public static void savePaxosPromise(Commit promise)\n \n     public static void savePaxosProposal(Commit commit)\n     {\n-        processInternal(String.format(\"UPDATE %s USING TIMESTAMP %d AND TTL %d SET proposal = 0x%s WHERE row_key = 0x%s AND cf_id = %s\",\n+        processInternal(String.format(\"UPDATE %s USING TIMESTAMP %d AND TTL %d SET in_progress_ballot = %s, proposal = 0x%s WHERE row_key = 0x%s AND cf_id = %s\",\n                                       PAXOS_CF,\n                                       UUIDGen.microsTimestamp(commit.ballot),\n                                       paxosTtl(commit.update.metadata),\n+                                      commit.ballot,\n                                       ByteBufferUtil.bytesToHex(commit.update.toBytes()),\n                                       ByteBufferUtil.bytesToHex(commit.key),\n                                       commit.update.id()));",
                "raw_url": "https://github.com/apache/cassandra/raw/6ad62c3f4a44ccbf1b462075610487e771e56f73/src/java/org/apache/cassandra/db/SystemKeyspace.java",
                "sha": "5dd505f67cc760c9fe0caea2e51d47b7dd2f3487",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in cas operations\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-5925",
        "parent": "https://github.com/apache/cassandra/commit/cf1de311224dce9c3db51db9dcbeae30bb22cfd0",
        "repo": "cassandra",
        "unit_tests": [
            "SystemKeyspaceTest.java"
        ]
    },
    "cassandra_6e1f3a0": {
        "bug_id": "cassandra_6e1f3a0",
        "commit": "https://github.com/apache/cassandra/commit/6e1f3a0195b777c9ae79ab89230b67ca20c1adc4",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/cassandra/blob/6e1f3a0195b777c9ae79ab89230b67ca20c1adc4/src/java/org/apache/cassandra/db/Directories.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Directories.java?ref=6e1f3a0195b777c9ae79ab89230b67ca20c1adc4",
                "deletions": 19,
                "filename": "src/java/org/apache/cassandra/db/Directories.java",
                "patch": "@@ -31,7 +31,6 @@\n import org.apache.cassandra.config.*;\n import org.apache.cassandra.db.compaction.LeveledManifest;\n import org.apache.cassandra.io.util.FileUtils;\n-import org.apache.cassandra.io.util.MmappedSegmentedFile;\n import org.apache.cassandra.io.sstable.*;\n import org.apache.cassandra.service.StorageService;\n import org.apache.cassandra.utils.CLibrary;\n@@ -479,16 +478,24 @@ public static void migrateSSTables()\n             if (!location.exists() || !location.isDirectory())\n                 continue;\n \n-            for (File ksDir : location.listFiles())\n+            File[] ksDirs = location.listFiles();\n+            if (ksDirs != null)\n             {\n-                if (!ksDir.isDirectory())\n-                    continue;\n+                for (File ksDir : ksDirs)\n+                {\n+                    if (!ksDir.isDirectory())\n+                        continue;\n \n-                for (File file : ksDir.listFiles())\n-                    migrateFile(file, ksDir, null);\n+                    File[] files = ksDir.listFiles();\n+                    if (files != null)\n+                    {\n+                        for (File file : files)\n+                            migrateFile(file, ksDir, null);\n+                    }\n \n-                migrateSnapshots(ksDir);\n-                migrateBackups(ksDir);\n+                    migrateSnapshots(ksDir);\n+                    migrateBackups(ksDir);\n+                }\n             }\n         }\n     }\n@@ -499,16 +506,23 @@ private static void migrateSnapshots(File ksDir)\n         if (!snapshotDir.exists())\n             return;\n \n-        for (File snapshot : snapshotDir.listFiles())\n+        File[] snapshots = snapshotDir.listFiles();\n+        if (snapshots != null)\n         {\n-            if (!snapshot.isDirectory())\n-                continue;\n-\n-            for (File f : snapshot.listFiles())\n-                migrateFile(f, ksDir, join(SNAPSHOT_SUBDIR, snapshot.getName()));\n+            for (File snapshot : snapshots)\n+            {\n+                if (!snapshot.isDirectory())\n+                    continue;\n \n-            if (!snapshot.delete())\n-                logger.info(\"Old snapsot directory {} not deleted by migraation as it is not empty\", snapshot);\n+                File[] files = snapshot.listFiles();\n+                if (files != null)\n+                {\n+                    for (File f : files)\n+                        migrateFile(f, ksDir, join(SNAPSHOT_SUBDIR, snapshot.getName()));\n+                }\n+                if (!snapshot.delete())\n+                    logger.info(\"Old snapsot directory {} not deleted by migraation as it is not empty\", snapshot);\n+            }\n         }\n         if (!snapshotDir.delete())\n             logger.info(\"Old directory {} not deleted by migration as it is not empty\", snapshotDir);\n@@ -520,9 +534,12 @@ private static void migrateBackups(File ksDir)\n         if (!backupDir.exists())\n             return;\n \n-        for (File f : backupDir.listFiles())\n-            migrateFile(f, ksDir, BACKUPS_SUBDIR);\n-\n+        File[] files = backupDir.listFiles();\n+        if (files != null)\n+        {\n+            for (File f : files)\n+                migrateFile(f, ksDir, BACKUPS_SUBDIR);\n+        }\n         if (!backupDir.delete())\n             logger.info(\"Old directory {} not deleted by migration as it is not empty\", backupDir);\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/6e1f3a0195b777c9ae79ab89230b67ca20c1adc4/src/java/org/apache/cassandra/db/Directories.java",
                "sha": "7ee2823d6d4f3761160dde554e9769a59fa0c3f7",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when listing directory; patch by yukim reviewed by jbellis for\nCASSANDRA-4572",
        "parent": "https://github.com/apache/cassandra/commit/b0342978a0a444b067fae25f4bf9a2f7e5dca0e3",
        "repo": "cassandra",
        "unit_tests": [
            "DirectoriesTest.java"
        ]
    },
    "cassandra_6ed9134": {
        "bug_id": "cassandra_6ed9134",
        "commit": "https://github.com/apache/cassandra/commit/6ed9134336bb48d04284cefd303d8374ed901c0a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/6ed9134336bb48d04284cefd303d8374ed901c0a/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=6ed9134336bb48d04284cefd303d8374ed901c0a",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.0.14\n+ * Fix NPE in StorageService.excise() (CASSANDRA-13163)\n  * Expire OutboundTcpConnection messages by a single Thread (CASSANDRA-13265)\n  * Fail repair if insufficient responses received (CASSANDRA-13397)\n  * Fix SSTableLoader fail when the loaded table contains dropped columns (CASSANDRA-13276)",
                "raw_url": "https://github.com/apache/cassandra/raw/6ed9134336bb48d04284cefd303d8374ed901c0a/CHANGES.txt",
                "sha": "17a11ab889f914d9ea8ed7b906a480928d0e1570",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/6ed9134336bb48d04284cefd303d8374ed901c0a/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=6ed9134336bb48d04284cefd303d8374ed901c0a",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -2247,8 +2247,9 @@ private void excise(Collection<Token> tokens, InetAddress endpoint)\n     {\n         logger.info(\"Removing tokens {} for {}\", tokens, endpoint);\n \n-        if (tokenMetadata.isMember(endpoint))\n-            HintsService.instance.excise(tokenMetadata.getHostId(endpoint));\n+        UUID hostId = tokenMetadata.getHostId(endpoint);\n+        if (hostId != null && tokenMetadata.isMember(endpoint))\n+            HintsService.instance.excise(hostId);\n \n         removeEndpoint(endpoint);\n         tokenMetadata.removeEndpoint(endpoint);",
                "raw_url": "https://github.com/apache/cassandra/raw/6ed9134336bb48d04284cefd303d8374ed901c0a/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "9bc046f5d3c2b9f3a71f6ed6bd5e0d6c91ef8bc8",
                "status": "modified"
            }
        ],
        "message": "CASSANDRA-13163, fix NPE in StorageService.excise()\n\nPatch by Ariel Weisberg; Reviewed by Jason Brown for CASSANDRA-13163",
        "parent": "https://github.com/apache/cassandra/commit/617c8ebadb6c4df99c35a913184760e82172b1f5",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_723fcd1": {
        "bug_id": "cassandra_723fcd1",
        "commit": "https://github.com/apache/cassandra/commit/723fcd1936ad792b8e85490312cbe3edc9d4099e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/723fcd1936ad792b8e85490312cbe3edc9d4099e/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=723fcd1936ad792b8e85490312cbe3edc9d4099e",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -346,7 +346,8 @@ public void stopNativeTransport()\n         {\n             throw new IllegalStateException(\"No configured daemon\");\n         }\n-        daemon.nativeServer.stop();\n+        if (daemon.nativeServer != null)\n+            daemon.nativeServer.stop();\n     }\n \n     public boolean isNativeTransportRunning()",
                "raw_url": "https://github.com/apache/cassandra/raw/723fcd1936ad792b8e85490312cbe3edc9d4099e/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "5f9657d1223f228cb24da83a58347eb982c2f051",
                "status": "modified"
            }
        ],
        "message": "fix NPE when stopping nonexistent native server, again.",
        "parent": "https://github.com/apache/cassandra/commit/039e9b9a18cbe78091231a4538b6d428deacc771",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_729d0b8": {
        "bug_id": "cassandra_729d0b8",
        "commit": "https://github.com/apache/cassandra/commit/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.1.1\n+ * Avoid NPEs when receiving type changes for an unknown keyspace (CASSANDRA-7689)\n  * Add support for custom 2i validation (CASSANDRA-7575)\n  * Pig support for hadoop CqlInputFormat (CASSANDRA-6454)\n  * Add listen_interface and rpc_interface options (CASSANDRA-7417)",
                "raw_url": "https://github.com/apache/cassandra/raw/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee/CHANGES.txt",
                "sha": "897119b84a71592c3f098f75c88e6cf02d7d55cc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee/src/java/org/apache/cassandra/service/MigrationManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/MigrationManager.java?ref=729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/MigrationManager.java",
                "patch": "@@ -256,7 +256,7 @@ public static void announceNewType(UserType newType)\n \n     public static void announceNewType(UserType newType, boolean announceLocally)\n     {\n-        announce(UTMetaData.toSchema(newType, FBUtilities.timestampMicros()), announceLocally);\n+        announce(addSerializedKeyspace(UTMetaData.toSchema(newType, FBUtilities.timestampMicros()), newType.keyspace), announceLocally);\n     }\n \n     public static void announceKeyspaceUpdate(KSMetaData ksm) throws ConfigurationException\n@@ -349,7 +349,7 @@ public static void announceTypeDrop(UserType droppedType)\n \n     public static void announceTypeDrop(UserType droppedType, boolean announceLocally)\n     {\n-        announce(UTMetaData.dropFromSchema(droppedType, FBUtilities.timestampMicros()), announceLocally);\n+        announce(addSerializedKeyspace(UTMetaData.dropFromSchema(droppedType, FBUtilities.timestampMicros()), droppedType.keyspace), announceLocally);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cassandra/raw/729d0b8aaf15a3c1e9ab62b97d06ba492c00cfee/src/java/org/apache/cassandra/service/MigrationManager.java",
                "sha": "bdae208b4c107cc08dc4e8efdbb39bb03c1a2f77",
                "status": "modified"
            }
        ],
        "message": "Avoid NPEs when receiving table changes for an unknown keyspace\n\npatch by Robert Stupp; reviewed by Aleksey Yeschenko for CASSANDRA-7689",
        "parent": "https://github.com/apache/cassandra/commit/a31441f01adc9912ec441412cc3c94d12f4bebec",
        "repo": "cassandra",
        "unit_tests": [
            "MigrationManagerTest.java"
        ]
    },
    "cassandra_76d625d": {
        "bug_id": "cassandra_76d625d",
        "commit": "https://github.com/apache/cassandra/commit/76d625d5094807a10e6e2f10c5e314c957053170",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/76d625d5094807a10e6e2f10c5e314c957053170/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=76d625d5094807a10e6e2f10c5e314c957053170",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -417,7 +417,11 @@ public void runMayThrow() throws ExecutionException, InterruptedException, IOExc\n                     if (!ksm.isDurableWrites())\n                     {\n                         for (ColumnFamilyStore cfs : table.getColumnFamilyStores())\n-                            flushes.add(cfs.forceFlush());\n+                        {\n+                            Future<?> future = cfs.forceFlush();\n+                            if (future != null)\n+                                flushes.add(future);\n+                        }\n                     }\n                 }\n                 FBUtilities.waitOnFutures(flushes);",
                "raw_url": "https://github.com/apache/cassandra/raw/76d625d5094807a10e6e2f10c5e314c957053170/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "c40de136d17df3154eb354faee9806bc8440e020",
                "status": "modified"
            }
        ],
        "message": "avoid NPE when flushing in shutdown hook\npatch by jbellis for CASSANDRA-2958\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1152891 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/4624cb45655aaf231c49258d8796828aeabf560a",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_7f01980": {
        "bug_id": "cassandra_7f01980",
        "commit": "https://github.com/apache/cassandra/commit/7f019804ca82c727062c2a787fe534690e9dbf6d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/7f019804ca82c727062c2a787fe534690e9dbf6d/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=7f019804ca82c727062c2a787fe534690e9dbf6d",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -13,6 +13,7 @@\n  * Ensure that batchlog and hint timeouts do not produce hints (CASSANDRA-7058)\n  * Don't shut MessagingService down when replacing a node (CASSANDRA-6476)\n  * Always clean up references in SerializingCache (CASSANDRA-6994)\n+ * fix npe when doing -Dcassandra.fd_initial_value_ms (CASSANDRA-6751)\n \n \n 1.2.16",
                "raw_url": "https://github.com/apache/cassandra/raw/7f019804ca82c727062c2a787fe534690e9dbf6d/CHANGES.txt",
                "sha": "e8d6a8d47b024b3094e8f40452880f42b19f6801",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/7f019804ca82c727062c2a787fe534690e9dbf6d/src/java/org/apache/cassandra/gms/FailureDetector.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/FailureDetector.java?ref=7f019804ca82c727062c2a787fe534690e9dbf6d",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/gms/FailureDetector.java",
                "patch": "@@ -43,12 +43,12 @@\n  */\n public class FailureDetector implements IFailureDetector, FailureDetectorMBean\n {\n+    private static final Logger logger = LoggerFactory.getLogger(FailureDetector.class);\n     public static final String MBEAN_NAME = \"org.apache.cassandra.net:type=FailureDetector\";\n     private static final int SAMPLE_SIZE = 1000;\n     protected static final int INITIAL_VALUE = getInitialValue();\n \n     public static final IFailureDetector instance = new FailureDetector();\n-    private static final Logger logger = LoggerFactory.getLogger(FailureDetector.class);\n \n     // this is useless except to provide backwards compatibility in phi_convict_threshold,\n     // because everyone seems pretty accustomed to the default of 8, and users who have",
                "raw_url": "https://github.com/apache/cassandra/raw/7f019804ca82c727062c2a787fe534690e9dbf6d/src/java/org/apache/cassandra/gms/FailureDetector.java",
                "sha": "f5c500cb5ab3a7eee3f1a2adb8e962a21c66aebf",
                "status": "modified"
            }
        ],
        "message": "fix npe when specifying -Dcassandra.fd_initial_value_ms\n\npatch by dbrosius reviewed by bwilliams for cassandra 6751",
        "parent": "https://github.com/apache/cassandra/commit/63ba5886e3ee3d6e5b5ab538c4b2e5890bfebeb3",
        "repo": "cassandra",
        "unit_tests": [
            "FailureDetectorTest.java"
        ]
    },
    "cassandra_886d9fc": {
        "bug_id": "cassandra_886d9fc",
        "commit": "https://github.com/apache/cassandra/commit/886d9fce46b369807071c5fc87204bb552db906d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/886d9fce46b369807071c5fc87204bb552db906d/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=886d9fce46b369807071c5fc87204bb552db906d",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.0.9\n+ * Fix NPE in StreamTransferTask.createMessageForRetry() (CASSANDRA-7323)\n  * Add conditional CREATE/DROP USER support (CASSANDRA-7264)\n  * Swap local and global default read repair chances (CASSANDRA-7320)\n  * Add missing iso8601 patterns for date strings (CASSANDRA-6973)",
                "raw_url": "https://github.com/apache/cassandra/raw/886d9fce46b369807071c5fc87204bb552db906d/CHANGES.txt",
                "sha": "d1d10301d899c351694512a80b22b992ada1b079",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/886d9fce46b369807071c5fc87204bb552db906d/src/java/org/apache/cassandra/streaming/StreamTransferTask.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamTransferTask.java?ref=886d9fce46b369807071c5fc87204bb552db906d",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/streaming/StreamTransferTask.java",
                "patch": "@@ -99,11 +99,12 @@ public long getTotalSize()\n         return new ArrayList<>(files.values());\n     }\n \n-    public OutgoingFileMessage createMessageForRetry(int sequenceNumber)\n+    public synchronized OutgoingFileMessage createMessageForRetry(int sequenceNumber)\n     {\n         // remove previous time out task to be rescheduled later\n         ScheduledFuture future = timeoutTasks.get(sequenceNumber);\n-        future.cancel(false);\n+        if (future != null)\n+            future.cancel(false);\n         return files.get(sequenceNumber);\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/886d9fce46b369807071c5fc87204bb552db906d/src/java/org/apache/cassandra/streaming/StreamTransferTask.java",
                "sha": "a543d01e8d633d06c6a8de98afc5ed6ddedb404d",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in StreamTransferTask.createMessageForRetry()\n\npatch by Josh McKenzie; reviewed by Aleksey Yeschenko for CASSANDRA-7323",
        "parent": "https://github.com/apache/cassandra/commit/8480fa7be1bbf54c526d76aeee7ecb07c417db6d",
        "repo": "cassandra",
        "unit_tests": [
            "StreamTransferTaskTest.java"
        ]
    },
    "cassandra_893fd21": {
        "bug_id": "cassandra_893fd21",
        "commit": "https://github.com/apache/cassandra/commit/893fd21b52254b1f7d68d87f6cf5f77f3010734b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/893fd21b52254b1f7d68d87f6cf5f77f3010734b/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=893fd21b52254b1f7d68d87f6cf5f77f3010734b",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -48,6 +48,7 @@\n  * Avoid digest mismatch with empty but static rows (CASSANDRA-12090)\n  * Fix EOF exception when altering column type (CASSANDRA-11820)\n  * Fix JsonTransformer output of partition with deletion info (CASSANDRA-12418)\n+ * Fix NPE in SSTableLoader when specifying partial directory path (CASSANDRA-12609)\n Merged from 2.2:\n  * Add local address entry in PropertyFileSnitch (CASSANDRA-11332)\n  * cqlshlib tests: increase default execute timeout (CASSANDRA-12481)",
                "raw_url": "https://github.com/apache/cassandra/raw/893fd21b52254b1f7d68d87f6cf5f77f3010734b/CHANGES.txt",
                "sha": "798496af336deaf47ee146c8fec23a232f9603ed",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/893fd21b52254b1f7d68d87f6cf5f77f3010734b/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/BulkLoader.java?ref=893fd21b52254b1f7d68d87f6cf5f77f3010734b",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/tools/BulkLoader.java",
                "patch": "@@ -77,7 +77,7 @@ public static void main(String args[])\n         LoaderOptions options = LoaderOptions.parseArgs(args).validateArguments();\n         OutputHandler handler = new OutputHandler.SystemOutput(options.verbose, options.debug);\n         SSTableLoader loader = new SSTableLoader(\n-                options.directory,\n+                options.directory.getAbsoluteFile(),\n                 new ExternalClient(\n                         options.hosts,\n                         options.nativePort,",
                "raw_url": "https://github.com/apache/cassandra/raw/893fd21b52254b1f7d68d87f6cf5f77f3010734b/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "sha": "9dba1b2531d372af30792ba5624c1edb36abbb5d",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in SSTableLoader when specifying partial directory path\n\npatch by hkroger reviewed by dbrosius for CASSANDRA-12609",
        "parent": "https://github.com/apache/cassandra/commit/fa14804543e9ed2cc781d9f8511ab7a5c22f8dd7",
        "repo": "cassandra",
        "unit_tests": [
            "BulkLoaderTest.java"
        ]
    },
    "cassandra_8b6d87b": {
        "bug_id": "cassandra_8b6d87b",
        "commit": "https://github.com/apache/cassandra/commit/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,6 +1,8 @@\n 1.2.16\n+ * Fix upgradesstables NPE for non-CF-based indexes (CASSANDRA-6645)\n  * Fix partition and range deletes not triggering flush (CASSANDRA-6655)\n \n+\n 1.2.15\n  * Move handling of migration event source to solve bootstrap race (CASSANDRA-6648)\n  * Make sure compaction throughput value doesn't overflow with int math (CASSANDRA-6647)",
                "raw_url": "https://github.com/apache/cassandra/raw/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/CHANGES.txt",
                "sha": "4be97f14bf8fc375ec3156302a9f3b5d680c1d0b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java?ref=8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java",
                "patch": "@@ -65,7 +65,7 @@ private IndexExpression highestSelectivityPredicate(List<IndexExpression> clause\n                 continue;\n \n             SecondaryIndex index = indexManager.getIndexForColumn(expression.column_name);\n-            if (index == null || (expression.op != IndexOperator.EQ))\n+            if (index == null || index.getIndexCfs() == null || (expression.op != IndexOperator.EQ))\n                 continue;\n             int columns = index.getIndexCfs().getMeanColumns();\n             candidates.put(index, columns);\n@@ -106,6 +106,7 @@ public boolean isIndexing(List<IndexExpression> clause)\n         final IndexExpression primary = highestSelectivityPredicate(filter.getClause());\n         final SecondaryIndex index = indexManager.getIndexForColumn(primary.column_name);\n         assert index != null;\n+        assert index.getIndexCfs() != null;\n         final DecoratedKey indexKey = index.getIndexKeyFor(primary.value);\n \n         if (logger.isDebugEnabled())",
                "raw_url": "https://github.com/apache/cassandra/raw/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/db/index/composites/CompositesSearcher.java",
                "sha": "39744662181fed9da798cf934b2f7913349b791b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java?ref=8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java",
                "patch": "@@ -61,7 +61,7 @@ private IndexExpression highestSelectivityPredicate(List<IndexExpression> clause\n                 continue;\n \n             SecondaryIndex index = indexManager.getIndexForColumn(expression.column_name);\n-            if (index == null || (expression.op != IndexOperator.EQ))\n+            if (index == null || index.getIndexCfs() == null || (expression.op != IndexOperator.EQ))\n                 continue;\n             int columns = index.getIndexCfs().getMeanColumns();\n             candidates.put(index, columns);\n@@ -102,6 +102,7 @@ public boolean isIndexing(List<IndexExpression> clause)\n         final IndexExpression primary = highestSelectivityPredicate(filter.getClause());\n         final SecondaryIndex index = indexManager.getIndexForColumn(primary.column_name);\n         assert index != null;\n+        assert index.getIndexCfs() != null;\n         final DecoratedKey indexKey = index.getIndexKeyFor(primary.value);\n \n         if (logger.isDebugEnabled())",
                "raw_url": "https://github.com/apache/cassandra/raw/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java",
                "sha": "7e7595b4986b9c301c71c66d40637ba77a616809",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -2314,8 +2314,11 @@ public void clearSnapshot(String tag, String... tableNames) throws IOException\n                 {\n                     for (SecondaryIndex si : cfStore.indexManager.getIndexes())\n                     {\n-                        logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n-                        valid.add(si.getIndexCfs());\n+                        if (si.getIndexCfs() != null)\n+                        {\n+                            logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n+                            valid.add(si.getIndexCfs());\n+                        }\n                     }\n \n                 }\n@@ -2364,8 +2367,11 @@ public void clearSnapshot(String tag, String... tableNames) throws IOException\n                 {\n                     for(SecondaryIndex si : cfStore.indexManager.getIndexes())\n                     {\n-                        logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n-                        valid.add(si.getIndexCfs());\n+                        if (si.getIndexCfs() != null)\n+                        {\n+                            logger.info(\"adding secondary index {} to operation\", si.getIndexName());\n+                            valid.add(si.getIndexCfs());\n+                        }\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/cassandra/raw/8b6d87b86b0134221dd15fb74e96a9a8ee5ff1d9/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "94dd73d9d742dbc35d818c5f5f208b6d989ad168",
                "status": "modified"
            }
        ],
        "message": "Fix upgradesstables NPE for non-CF-based indexes\npatch by Sergio Bossa; reviewed by jbellis for CASSANDRA-6645",
        "parent": "https://github.com/apache/cassandra/commit/adcb713d597302a868b6224a87ea6ce38e718e5d",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_8e03f7b": {
        "bug_id": "cassandra_8e03f7b",
        "commit": "https://github.com/apache/cassandra/commit/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=8e03f7bdf26558dc397628c885c5b6ab0cfde3e0",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,3 +1,6 @@\n+1.1.6\n+  * (cql3) fix potential NPE with both equal and unequal restriction (CASSANDRA-4532)\n+\n 1.1.5\n  * add SecondaryIndex.reload API (CASSANDRA-4581)\n  * use millis + atomicint for commitlog segment creation instead of",
                "raw_url": "https://github.com/apache/cassandra/raw/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0/CHANGES.txt",
                "sha": "6e72892f66141412e29a5e2d977c426bbf895f9c",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=8e03f7bdf26558dc397628c885c5b6ab0cfde3e0",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "patch": "@@ -1274,6 +1274,9 @@ public void setBound(ColumnIdentifier name, Relation.Type type, Term t) throws I\n                     break;\n             }\n \n+            if (bounds == null)\n+                throw new InvalidRequestException(String.format(\"%s cannot be restricted by both an equal and an inequal relation\", name));\n+\n             if (bounds[b.idx] != null)\n                 throw new InvalidRequestException(String.format(\"Invalid restrictions found on %s\", name));\n             bounds[b.idx] = t;",
                "raw_url": "https://github.com/apache/cassandra/raw/8e03f7bdf26558dc397628c885c5b6ab0cfde3e0/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "sha": "dd00c5ce26120d04339c44a55de3f150c50b2461",
                "status": "modified"
            }
        ],
        "message": "fix potential NPE with both equal and unequal restriction\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-4532",
        "parent": "https://github.com/apache/cassandra/commit/acaa52465554e82519fc312d3fcff586f55ee36e",
        "repo": "cassandra",
        "unit_tests": [
            "SelectStatementTest.java"
        ]
    },
    "cassandra_8fc9275": {
        "bug_id": "cassandra_8fc9275",
        "commit": "https://github.com/apache/cassandra/commit/8fc9275d3020fa0c80ed1852726be0a5a63e487c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 3.0.15\n+ * Improve config validation and documentation on overflow and NPE (CASSANDRA-13622)\n  * Range deletes in a CAS batch are ignored (CASSANDRA-13655)\n  * Change repair midpoint logging for tiny ranges (CASSANDRA-13603)\n  * Better handle corrupt final commitlog segment (CASSANDRA-11995)",
                "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/CHANGES.txt",
                "sha": "b00e47c604d83747d35fe81176c70590bee015e5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/conf/cassandra.yaml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/conf/cassandra.yaml?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c",
                "deletions": 2,
                "filename": "conf/cassandra.yaml",
                "patch": "@@ -315,6 +315,7 @@ commitlog_sync_period_in_ms: 10000\n # is reasonable.\n # Max mutation size is also configurable via max_mutation_size_in_kb setting in\n # cassandra.yaml. The default is half the size commitlog_segment_size_in_mb * 1024.\n+# This should be positive and less than 2048.\n #\n # NOTE: If max_mutation_size_in_kb is set explicitly then commitlog_segment_size_in_mb must\n # be set to at least twice the size of max_mutation_size_in_kb / 1024\n@@ -517,7 +518,7 @@ native_transport_port: 9042\n #\n # The maximum size of allowed frame. Frame (requests) larger than this will\n # be rejected as invalid. The default is 256MB. If you're changing this parameter,\n-# you may want to adjust max_value_size_in_mb accordingly.\n+# you may want to adjust max_value_size_in_mb accordingly. This should be positive and less than 2048.\n # native_transport_max_frame_size_in_mb: 256\n \n # The maximum number of concurrent client connections.\n@@ -960,7 +961,7 @@ windows_timer_interval: 1\n \n # Maximum size of any value in SSTables. Safety measure to detect SSTable corruption\n # early. Any value size larger than this threshold will result into marking an SSTable\n-# as corrupted.\n+# as corrupted. This should be positive and less than 2048.\n # max_value_size_in_mb: 256\n \n # Coalescing Strategies #",
                "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/conf/cassandra.yaml",
                "sha": "d77d27a2f5dd6f5498c6d7e79950e003e0c813c1",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -442,6 +442,9 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n \n         if (conf.native_transport_max_frame_size_in_mb <= 0)\n             throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be positive, but was \" + conf.native_transport_max_frame_size_in_mb, false);\n+        else if (conf.native_transport_max_frame_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.native_transport_max_frame_size_in_mb, false);\n \n         // fail early instead of OOMing (see CASSANDRA-8116)\n         if (ThriftServer.HSHA.equals(conf.rpc_server_type) && conf.rpc_max_threads == Integer.MAX_VALUE)\n@@ -576,6 +579,8 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)\n         /* data file and commit log directories. they get created later, when they're needed. */\n         for (String datadir : conf.data_file_directories)\n         {\n+            if (datadir == null)\n+                throw new ConfigurationException(\"data_file_directories must not contain empty entry\", false);\n             if (datadir.equals(conf.commitlog_directory))\n                 throw new ConfigurationException(\"commitlog_directory must not be the same as any data_file_directories\", false);\n             if (datadir.equals(conf.hints_directory))\n@@ -718,6 +723,13 @@ else if (conf.num_tokens > MAX_NUM_TOKENS)\n         if (conf.user_defined_function_fail_timeout < conf.user_defined_function_warn_timeout)\n             throw new ConfigurationException(\"user_defined_function_warn_timeout must less than user_defined_function_fail_timeout\", false);\n \n+        if (conf.commitlog_segment_size_in_mb <= 0)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be positive, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+        else if (conf.commitlog_segment_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+\n         if (conf.max_mutation_size_in_kb == null)\n             conf.max_mutation_size_in_kb = conf.commitlog_segment_size_in_mb * 1024 / 2;\n         else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_in_kb)\n@@ -733,6 +745,9 @@ else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_i\n \n         if (conf.max_value_size_in_mb == null || conf.max_value_size_in_mb <= 0)\n             throw new ConfigurationException(\"max_value_size_in_mb must be positive\", false);\n+        else if (conf.max_value_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"max_value_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.max_value_size_in_mb, false);\n \n         if (conf.otc_coalescing_enough_coalesced_messages > 128)\n             throw new ConfigurationException(\"otc_coalescing_enough_coalesced_messages must be smaller than 128\", false);",
                "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "029db89cd940dd95d2b3848ef1e697a89cc79c6c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=8fc9275d3020fa0c80ed1852726be0a5a63e487c",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java",
                "patch": "@@ -34,6 +34,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -82,8 +84,9 @@\n \n     public static int getAvailableProcessors()\n     {\n-        if (System.getProperty(\"cassandra.available_processors\") != null)\n-            return Integer.parseInt(System.getProperty(\"cassandra.available_processors\"));\n+        String availableProcessors = System.getProperty(\"cassandra.available_processors\");\n+        if (!Strings.isNullOrEmpty(availableProcessors))\n+            return Integer.parseInt(availableProcessors);\n         else\n             return Runtime.getRuntime().availableProcessors();\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/8fc9275d3020fa0c80ed1852726be0a5a63e487c/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "sha": "5562f5e22c370f4ec12fba1346e9fc4e820642e3",
                "status": "modified"
            }
        ],
        "message": "Improve config validation and documentation on overflow and NPE\n\npatch by Zhao Yang; reviewed by Kurt Greaves for CASSANDRA-13622",
        "parent": "https://github.com/apache/cassandra/commit/e86bef4394650dfb96a041533de50c4fbf47bbdb",
        "repo": "cassandra",
        "unit_tests": [
            "FBUtilitiesTest.java"
        ]
    },
    "cassandra_9002e76": {
        "bug_id": "cassandra_9002e76",
        "commit": "https://github.com/apache/cassandra/commit/9002e76d6971c3035a439209a9f2e5b8c2465247",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/9002e76d6971c3035a439209a9f2e5b8c2465247/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=9002e76d6971c3035a439209a9f2e5b8c2465247",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -434,7 +434,8 @@ public boolean accept(File pathname)\n         for (File dir : directories.getCFDirectories())\n         {\n             File[] lockfiles = dir.listFiles(filter);\n-            if (lockfiles.length == 0)\n+            // lock files can be null if I/O error happens\n+            if (lockfiles == null || lockfiles.length == 0)\n                 continue;\n             logger.info(\"Removing SSTables from failed streaming session. Found {} files to cleanup.\", lockfiles.length);\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/9002e76d6971c3035a439209a9f2e5b8c2465247/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "bfd3b08a9f25e45bfa0c6ba67a6027d99922efb7",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when doing CFS.scrubDataDirectories",
        "parent": "https://github.com/apache/cassandra/commit/95e09f262ce8d448e8bbbd17aa9c77f6546d5ed1",
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_95c4320": {
        "bug_id": "cassandra_95c4320",
        "commit": "https://github.com/apache/cassandra/commit/95c4320baf468c32085676607521e0f33410c351",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/AutoSavingCache.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "patch": "@@ -201,7 +201,7 @@ public int loadSaved()\n                 UUID schemaVersion = new UUID(in.readLong(), in.readLong());\n                 if (!schemaVersion.equals(Schema.instance.getVersion()))\n                     throw new RuntimeException(\"Cache schema version \"\n-                                              + schemaVersion.toString()\n+                                              + schemaVersion\n                                               + \" does not match current schema version \"\n                                               + Schema.instance.getVersion());\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/AutoSavingCache.java",
                "sha": "b7616b9b6a5a637eb1175b4f2c0536ebe4f4597a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/ChunkCache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cache/ChunkCache.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cache/ChunkCache.java",
                "patch": "@@ -289,7 +289,7 @@ public double getCrcCheckChance()\n         @Override\n         public String toString()\n         {\n-            return \"CachingRebufferer:\" + source.toString();\n+            return \"CachingRebufferer:\" + source;\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cache/ChunkCache.java",
                "sha": "7e5b9e1ca8d9fc7ee5e3cb43f186d9d3794da325",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cql3/functions/UDHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/functions/UDHelper.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cql3/functions/UDHelper.java",
                "patch": "@@ -159,7 +159,7 @@ public static Object deserialize(TypeCodec<?> codec, ProtocolVersion protocolVer\n     public static ByteBuffer serialize(TypeCodec<?> codec, ProtocolVersion protocolVersion, Object value)\n     {\n         if (!codec.getJavaType().getRawType().isAssignableFrom(value.getClass()))\n-            throw new InvalidTypeException(\"Invalid value for CQL type \" + codec.getCqlType().getName().toString());\n+            throw new InvalidTypeException(\"Invalid value for CQL type \" + codec.getCqlType().getName());\n \n         return ((TypeCodec)codec).serialize(value, com.datastax.driver.core.ProtocolVersion.fromInt(protocolVersion.asInt()));\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/cql3/functions/UDHelper.java",
                "sha": "935b1b8914d30f39a2f235952315470145c1c46f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java",
                "patch": "@@ -89,7 +89,7 @@ public double getCrcCheckChance()\n     @Override\n     public String toString()\n     {\n-        return \"BufferManagingRebufferer.\" + getClass().getSimpleName() + \":\" + source.toString();\n+        return \"BufferManagingRebufferer.\" + getClass().getSimpleName() + \":\" + source;\n     }\n \n     // BufferHolder methods",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/BufferManagingRebufferer.java",
                "sha": "f3b9a8824cf433f71001392ac54eecd453afeaab",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/LimitingRebufferer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/LimitingRebufferer.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/io/util/LimitingRebufferer.java",
                "patch": "@@ -101,7 +101,7 @@ public void closeReader()\n     @Override\n     public String toString()\n     {\n-        return \"LimitingRebufferer[\" + limiter.toString() + \"]:\" + wrapped.toString();\n+        return \"LimitingRebufferer[\" + limiter + \"]:\" + wrapped;\n     }\n \n     // BufferHolder methods",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/LimitingRebufferer.java",
                "sha": "b5c7f3498d763eef0a99deb1c473833ad86ddf24",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/RandomAccessReader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/util/RandomAccessReader.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/io/util/RandomAccessReader.java",
                "patch": "@@ -169,7 +169,7 @@ public void close()\n     @Override\n     public String toString()\n     {\n-        return getClass().getSimpleName() + ':' + rebufferer.toString();\n+        return getClass().getSimpleName() + ':' + rebufferer;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/io/util/RandomAccessReader.java",
                "sha": "a0ea520aec717d3188a7bd282f3f8d12828df6a5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/schema/SchemaKeyspace.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "patch": "@@ -1074,7 +1074,7 @@ public static ColumnDefinition createColumnFromRow(UntypedResultSet.Row row, Typ\n                                      ? ColumnDefinition.Kind.valueOf(row.getString(\"kind\").toUpperCase())\n                                      : ColumnDefinition.Kind.REGULAR;\n         assert kind == ColumnDefinition.Kind.REGULAR || kind == ColumnDefinition.Kind.STATIC\n-            : \"Unexpected dropped column kind: \" + kind.toString();\n+            : \"Unexpected dropped column kind: \" + kind;\n         return new CFMetaData.DroppedColumn(name, type, droppedTime, kind);\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/schema/SchemaKeyspace.java",
                "sha": "ee0974fb30843da5ae10b3533c8d73a515d57950",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/service/ActiveRepairService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ActiveRepairService.java?ref=95c4320baf468c32085676607521e0f33410c351",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/ActiveRepairService.java",
                "patch": "@@ -333,13 +333,13 @@ public void onFailure(InetAddress from, RequestFailureReason failureReason)\n         catch (InterruptedException e)\n         {\n             removeParentRepairSession(parentRepairSession);\n-            throw new RuntimeException(\"Did not get replies from all endpoints. List of failed endpoint(s): \" + failedNodes.toString(), e);\n+            throw new RuntimeException(\"Did not get replies from all endpoints. List of failed endpoint(s): \" + failedNodes, e);\n         }\n \n         if (!status.get())\n         {\n             removeParentRepairSession(parentRepairSession);\n-            throw new RuntimeException(\"Did not get positive replies from all endpoints. List of failed endpoint(s): \" + failedNodes.toString());\n+            throw new RuntimeException(\"Did not get positive replies from all endpoints. List of failed endpoint(s): \" + failedNodes);\n         }\n \n         return parentRepairSession;",
                "raw_url": "https://github.com/apache/cassandra/raw/95c4320baf468c32085676607521e0f33410c351/src/java/org/apache/cassandra/service/ActiveRepairService.java",
                "sha": "1e89c8be883af787554be694141ce1d2ce1142b3",
                "status": "modified"
            }
        ],
        "message": "avoid chance of NPEs while generating informational strings",
        "parent": "https://github.com/apache/cassandra/commit/88b7126a177a77e28b34384e7792d4b4394cb55f",
        "repo": "cassandra",
        "unit_tests": [
            "ActiveRepairServiceTest.java"
        ]
    },
    "cassandra_98cc2c8": {
        "bug_id": "cassandra_98cc2c8",
        "commit": "https://github.com/apache/cassandra/commit/98cc2c8d6cc27f1a2e675030a13b46fd336812f8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/98cc2c8d6cc27f1a2e675030a13b46fd336812f8/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=98cc2c8d6cc27f1a2e675030a13b46fd336812f8",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.1.13\n+ * Avoid NPE when incremental repair fails (CASSANDRA-10909)\n  * Unmark sstables compacting once they are done in cleanup/scrub/upgradesstables (CASSANDRA-10829)\n  * Revert CASSANDRA-10012 and add more logging (CASSANDRA-10961)\n  * Allow simultaneous bootstrapping with strict consistency when no vnodes are used (CASSANDRA-11005)",
                "raw_url": "https://github.com/apache/cassandra/raw/98cc2c8d6cc27f1a2e675030a13b46fd336812f8/CHANGES.txt",
                "sha": "717595309d49992a5033e882d10d56fe75b344dd",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/98cc2c8d6cc27f1a2e675030a13b46fd336812f8/src/java/org/apache/cassandra/service/ActiveRepairService.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/ActiveRepairService.java?ref=98cc2c8d6cc27f1a2e675030a13b46fd336812f8",
                "deletions": 7,
                "filename": "src/java/org/apache/cassandra/service/ActiveRepairService.java",
                "patch": "@@ -428,15 +428,17 @@ public void handleMessage(InetAddress endpoint, RepairMessage message)\n     {\n         public final Map<UUID, ColumnFamilyStore> columnFamilyStores = new HashMap<>();\n         public final Collection<Range<Token>> ranges;\n-        public final Map<UUID, Set<SSTableReader>> sstableMap;\n+        public final Map<UUID, Set<SSTableReader>> sstableMap = new HashMap<>();\n         public final long repairedAt;\n \n         public ParentRepairSession(List<ColumnFamilyStore> columnFamilyStores, Collection<Range<Token>> ranges, long repairedAt)\n         {\n             for (ColumnFamilyStore cfs : columnFamilyStores)\n+            {\n                 this.columnFamilyStores.put(cfs.metadata.cfId, cfs);\n+                sstableMap.put(cfs.metadata.cfId, new HashSet<SSTableReader>());\n+            }\n             this.ranges = ranges;\n-            this.sstableMap = new HashMap<>();\n             this.repairedAt = repairedAt;\n         }\n \n@@ -466,11 +468,7 @@ public ParentRepairSession(List<ColumnFamilyStore> columnFamilyStores, Collectio\n \n         public void addSSTables(UUID cfId, Collection<SSTableReader> sstables)\n         {\n-            Set<SSTableReader> existingSSTables = this.sstableMap.get(cfId);\n-            if (existingSSTables == null)\n-                existingSSTables = new HashSet<>();\n-            existingSSTables.addAll(sstables);\n-            this.sstableMap.put(cfId, existingSSTables);\n+            sstableMap.get(cfId).addAll(sstables);\n         }\n \n         @Override",
                "raw_url": "https://github.com/apache/cassandra/raw/98cc2c8d6cc27f1a2e675030a13b46fd336812f8/src/java/org/apache/cassandra/service/ActiveRepairService.java",
                "sha": "732267eaca172c7518339e4b793e06743e6cecad",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE on incremental repair failure\n\nPatch by marcuse; reviewed by Carl Yeksigian for CASSANDRA-10909",
        "parent": "https://github.com/apache/cassandra/commit/1b02a6eb40f4cd25675e9b003b4beff1a375ac2d",
        "repo": "cassandra",
        "unit_tests": [
            "ActiveRepairServiceTest.java"
        ]
    },
    "cassandra_98d81e4": {
        "bug_id": "cassandra_98d81e4",
        "commit": "https://github.com/apache/cassandra/commit/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 4.0\n+ * Avoid NPE in RepairRunnable.recordFailure (CASSANDRA-15025)\n  * SSL Cert Hot Reloading should check for sanity of the new keystore/truststore before loading it (CASSANDRA-14991)\n  * Avoid leaking threads when failing anticompactions and rate limit anticompactions (CASSANDRA-15002)\n  * Validate token() arguments early instead of throwing NPE at execution (CASSANDRA-14989)",
                "raw_url": "https://github.com/apache/cassandra/raw/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/CHANGES.txt",
                "sha": "7b0675724aaa6dc2799e793bbf35688ac4f6d08d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/CommonRange.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/repair/CommonRange.java?ref=98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/repair/CommonRange.java",
                "patch": "@@ -41,10 +41,10 @@\n \n     public CommonRange(Set<InetAddressAndPort> endpoints, Set<InetAddressAndPort> transEndpoints, Collection<Range<Token>> ranges)\n     {\n-        Preconditions.checkArgument(endpoints != null && !endpoints.isEmpty());\n-        Preconditions.checkArgument(transEndpoints != null);\n+        Preconditions.checkArgument(endpoints != null && !endpoints.isEmpty(), \"Endpoints can not be empty\");\n+        Preconditions.checkArgument(transEndpoints != null, \"Transient endpoints can not be null\");\n         Preconditions.checkArgument(endpoints.containsAll(transEndpoints), \"transEndpoints must be a subset of endpoints\");\n-        Preconditions.checkArgument(ranges != null && !ranges.isEmpty());\n+        Preconditions.checkArgument(ranges != null && !ranges.isEmpty(), \"Ranges can not be empty\");\n \n         this.endpoints = ImmutableSet.copyOf(endpoints);\n         this.transEndpoints = ImmutableSet.copyOf(transEndpoints);",
                "raw_url": "https://github.com/apache/cassandra/raw/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/CommonRange.java",
                "sha": "dab77c51346c9dbbd33e485fd6e3020e286cc33d",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cassandra/blob/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/RepairRunnable.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/repair/RepairRunnable.java?ref=98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae",
                "deletions": 5,
                "filename": "src/java/org/apache/cassandra/repair/RepairRunnable.java",
                "patch": "@@ -133,10 +133,11 @@ protected void fireProgressEvent(ProgressEvent event)\n     protected void fireErrorAndComplete(int progressCount, int totalProgress, String message)\n     {\n         StorageMetrics.repairExceptions.inc();\n-        fireProgressEvent(new ProgressEvent(ProgressEventType.ERROR, progressCount, totalProgress, message));\n+        String errorMessage = String.format(\"Repair command #%d failed with error %s\", cmd, message);\n+        fireProgressEvent(new ProgressEvent(ProgressEventType.ERROR, progressCount, totalProgress, errorMessage));\n         String completionMessage = String.format(\"Repair command #%d finished with error\", cmd);\n         fireProgressEvent(new ProgressEvent(ProgressEventType.COMPLETE, progressCount, totalProgress, completionMessage));\n-        recordFailure(message, completionMessage);\n+        recordFailure(errorMessage, completionMessage);\n     }\n \n \n@@ -159,7 +160,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (IllegalArgumentException | IOException e)\n         {\n-            logger.error(\"Repair failed:\", e);\n+            logger.error(\"Repair {} failed:\", parentSession, e);\n             fireErrorAndComplete(progress.get(), totalProgress, e.getMessage());\n             return;\n         }\n@@ -216,7 +217,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (IllegalArgumentException e)\n         {\n-            logger.error(\"Repair failed:\", e);\n+            logger.error(\"Repair {} failed:\", parentSession, e);\n             fireErrorAndComplete(progress.get(), totalProgress, e.getMessage());\n             return;\n         }\n@@ -230,6 +231,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (IllegalArgumentException e)\n         {\n+            logger.error(\"Repair {} failed:\", parentSession, e);\n             fireErrorAndComplete(progress.get(), totalProgress, e.getMessage());\n             return;\n         }\n@@ -261,6 +263,7 @@ protected void runMayThrow() throws Exception\n         }\n         catch (Throwable t)\n         {\n+            logger.error(\"Repair {} failed:\", parentSession, t);\n             if (!options.isPreview())\n             {\n                 SystemDistributedKeyspace.failParentRepair(parentSession, t);\n@@ -639,8 +642,11 @@ private void recordFailure(String failureMessage, String completionMessage)\n     {\n         // Note we rely on the first message being the reason for the failure\n         // when inspecting this state from RepairRunner.queryForCompletedRepair\n+        String failure = failureMessage == null ? \"unknown failure\" : failureMessage;\n+        String completion = completionMessage == null ? \"unknown completion\" : completionMessage;\n+\n         ActiveRepairService.instance.recordRepairStatus(cmd, ActiveRepairService.ParentRepairStatus.FAILED,\n-                                               ImmutableList.of(failureMessage, completionMessage));\n+                                               ImmutableList.of(failure, completion));\n     }\n \n     private static void addRangeToNeighbors(List<CommonRange> neighborRangeList, Range<Token> range, EndpointsForRange neighbors)",
                "raw_url": "https://github.com/apache/cassandra/raw/98d81e409a3512fccaeab3ba89f7cf5bfa8f39ae/src/java/org/apache/cassandra/repair/RepairRunnable.java",
                "sha": "7e931e81caab722c6d00e471ab096d524bea847d",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE in fireErrorAndComplete and make sure we log the parentSessionId and exception\n\nPatch by marcuse; reviewed by Blake Eggleston for CASSANDRA-15025",
        "parent": "https://github.com/apache/cassandra/commit/d75c438b21678eda3bf8ba3890fd7f61b9673548",
        "repo": "cassandra",
        "unit_tests": [
            "RepairRunnableTest.java"
        ]
    },
    "cassandra_9b9c4d3": {
        "bug_id": "cassandra_9b9c4d3",
        "commit": "https://github.com/apache/cassandra/commit/9b9c4d32973ea4e586031775b3322180169135cd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/9b9c4d32973ea4e586031775b3322180169135cd/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=9b9c4d32973ea4e586031775b3322180169135cd",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,5 +1,6 @@\n 0.8.8\n  * fix truncate allowing data to be replayed post-restart (CASSANDRA-3297)\n+ * make iwriter final in IndexWriter to avoid NPE (CASSANDRA-2863)\n \n \n 0.8.7",
                "raw_url": "https://github.com/apache/cassandra/raw/9b9c4d32973ea4e586031775b3322180169135cd/CHANGES.txt",
                "sha": "a8fb6c6b9b0c15c1ded16ef5449f4a0e1158fa82",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/9b9c4d32973ea4e586031775b3322180169135cd/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java?ref=9b9c4d32973ea4e586031775b3322180169135cd",
                "deletions": 11,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableWriter.java",
                "patch": "@@ -302,19 +302,18 @@ public SSTableReader build() throws IOException\n         {\n             if (cfs.isInvalid())\n                 return null;\n-            maybeOpenIndexer();\n \n             File ifile = new File(desc.filenameFor(SSTable.COMPONENT_INDEX));\n             File ffile = new File(desc.filenameFor(SSTable.COMPONENT_FILTER));\n             assert !ifile.exists();\n             assert !ffile.exists();\n \n-            long estimatedRows = indexer.prepareIndexing();\n+            maybeOpenIndexer();\n \n             // build the index and filter\n             long rows = indexer.index();\n \n-            logger.debug(\"estimated row count was {} of real count\", ((double)estimatedRows) / rows);\n+            logger.debug(\"estimated row count was {} of real count\", ((double)indexer.estimatedRows) / rows);\n             return SSTableReader.open(rename(desc, SSTable.componentsFor(desc, false)));\n         }\n     }\n@@ -324,8 +323,9 @@ public SSTableReader build() throws IOException\n         protected final Descriptor desc;\n         public final BufferedRandomAccessFile dfile;\n         private final OperationType type;\n+        protected final IndexWriter iwriter;\n+        public final long estimatedRows;\n \n-        protected IndexWriter iwriter;\n         protected ColumnFamilyStore cfs;\n \n         RowIndexer(Descriptor desc, ColumnFamilyStore cfs, OperationType type) throws IOException\n@@ -339,16 +339,11 @@ protected RowIndexer(Descriptor desc, BufferedRandomAccessFile dfile, ColumnFami\n             this.dfile = dfile;\n             this.type = type;\n             this.cfs = cfs;\n-        }\n \n-        long prepareIndexing() throws IOException\n-        {\n-            long estimatedRows;\n             try\n             {\n-                estimatedRows = SSTable.estimateRowsFromData(desc, dfile);\n-                iwriter = new IndexWriter(desc, StorageService.getPartitioner(), estimatedRows);\n-                return estimatedRows;\n+                this.estimatedRows = SSTable.estimateRowsFromData(desc, dfile);\n+                this.iwriter = new IndexWriter(desc, StorageService.getPartitioner(), estimatedRows);\n             }\n             catch(IOException e)\n             {",
                "raw_url": "https://github.com/apache/cassandra/raw/9b9c4d32973ea4e586031775b3322180169135cd/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java",
                "sha": "6a181aeaae287ff7f07afc34807479e821a41bc0",
                "status": "modified"
            }
        ],
        "message": "Make SSTW.RowIndexer.iwriter a final field to avoid NPE\npatch by slebresne; reviewed by jbellis for CASSANDRA-2863\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1180958 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/467e89b12f62bbe3a2e05407383d2cac0b8e88eb",
        "repo": "cassandra",
        "unit_tests": [
            "SSTableWriterTest.java"
        ]
    },
    "cassandra_9eddaa8": {
        "bug_id": "cassandra_9eddaa8",
        "commit": "https://github.com/apache/cassandra/commit/9eddaa8ffa212c42f32f7d1e8b485d5aa0e2f10f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/9eddaa8ffa212c42f32f7d1e8b485d5aa0e2f10f/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=9eddaa8ffa212c42f32f7d1e8b485d5aa0e2f10f",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -318,7 +318,8 @@ public void stopRPCServer()\n         {\n             throw new IllegalStateException(\"No configured daemon\");\n         }\n-        daemon.thriftServer.stop();\n+        if (daemon.thriftServer != null)\n+            daemon.thriftServer.stop();\n     }\n \n     public boolean isRPCServerRunning()",
                "raw_url": "https://github.com/apache/cassandra/raw/9eddaa8ffa212c42f32f7d1e8b485d5aa0e2f10f/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "96c2dd97c5382244fd535e9c343ede82cdfe36b9",
                "status": "modified"
            }
        ],
        "message": "Don't NPE when shutting down non-existent thrift server",
        "parent": "https://github.com/apache/cassandra/commit/c040759da53e70c2cb9ed93186bcdba2b55405ec",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_9ee34b6": {
        "bug_id": "cassandra_9ee34b6",
        "commit": "https://github.com/apache/cassandra/commit/9ee34b6e656428299a98eb2f1403b2246be3190f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/9ee34b6e656428299a98eb2f1403b2246be3190f/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/ColumnFamilyStore.java?ref=9ee34b6e656428299a98eb2f1403b2246be3190f",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "patch": "@@ -612,6 +612,10 @@ public static void removeUnfinishedCompactionLeftovers(CFMetaData metadata, Map<\n             {\n                 throw new FSReadError(e, desc.filenameFor(Component.STATS));\n             }\n+            catch (NullPointerException e)\n+            {\n+                throw new FSReadError(e, \"Failed to remove unfinished compaction leftovers (file: \" + desc.filenameFor(Component.STATS) + \").  See log for details.\");\n+            }\n \n             if (!ancestors.isEmpty()\n                 && unfinishedGenerations.containsAll(ancestors)",
                "raw_url": "https://github.com/apache/cassandra/raw/9ee34b6e656428299a98eb2f1403b2246be3190f/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
                "sha": "3d5e4c2d4bae8f9c8bb631c876801f5eec7dde20",
                "status": "modified"
            }
        ],
        "message": "Make logging for NPE in removeUnfinishedCompactionLeftovers more useful\n\nPatch by jmckenzie; reviewed by ayeschenko for CASSANDRA-8544",
        "parent": "https://github.com/apache/cassandra/commit/107545b3929c32c61e7d00c6ca448c10046db792",
        "repo": "cassandra",
        "unit_tests": [
            "ColumnFamilyStoreTest.java"
        ]
    },
    "cassandra_a586f6c": {
        "bug_id": "cassandra_a586f6c",
        "commit": "https://github.com/apache/cassandra/commit/a586f6c88dab173663b765261d084ed8410efe81",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=a586f6c88dab173663b765261d084ed8410efe81",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,5 +1,6 @@\n 3.0.15\n  * Fix pending view mutations handling and cleanup batchlog when there are local and remote paired mutations (CASSANDRA-13069)\n+ * Improve config validation and documentation on overflow and NPE (CASSANDRA-13622)\n  * Range deletes in a CAS batch are ignored (CASSANDRA-13655)\n  * Change repair midpoint logging for tiny ranges (CASSANDRA-13603)\n  * Better handle corrupt final commitlog segment (CASSANDRA-11995)",
                "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/CHANGES.txt",
                "sha": "6053117a109033b785aa7abed23b6eef0a1400d8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/conf/cassandra.yaml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/conf/cassandra.yaml?ref=a586f6c88dab173663b765261d084ed8410efe81",
                "deletions": 2,
                "filename": "conf/cassandra.yaml",
                "patch": "@@ -315,6 +315,7 @@ commitlog_sync_period_in_ms: 10000\n # is reasonable.\n # Max mutation size is also configurable via max_mutation_size_in_kb setting in\n # cassandra.yaml. The default is half the size commitlog_segment_size_in_mb * 1024.\n+# This should be positive and less than 2048.\n #\n # NOTE: If max_mutation_size_in_kb is set explicitly then commitlog_segment_size_in_mb must\n # be set to at least twice the size of max_mutation_size_in_kb / 1024\n@@ -517,7 +518,7 @@ native_transport_port: 9042\n #\n # The maximum size of allowed frame. Frame (requests) larger than this will\n # be rejected as invalid. The default is 256MB. If you're changing this parameter,\n-# you may want to adjust max_value_size_in_mb accordingly.\n+# you may want to adjust max_value_size_in_mb accordingly. This should be positive and less than 2048.\n # native_transport_max_frame_size_in_mb: 256\n \n # The maximum number of concurrent client connections.\n@@ -960,7 +961,7 @@ windows_timer_interval: 1\n \n # Maximum size of any value in SSTables. Safety measure to detect SSTable corruption\n # early. Any value size larger than this threshold will result into marking an SSTable\n-# as corrupted.\n+# as corrupted. This should be positive and less than 2048.\n # max_value_size_in_mb: 256\n \n # Coalescing Strategies #",
                "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/conf/cassandra.yaml",
                "sha": "d77d27a2f5dd6f5498c6d7e79950e003e0c813c1",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=a586f6c88dab173663b765261d084ed8410efe81",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -442,6 +442,9 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n \n         if (conf.native_transport_max_frame_size_in_mb <= 0)\n             throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be positive, but was \" + conf.native_transport_max_frame_size_in_mb, false);\n+        else if (conf.native_transport_max_frame_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"native_transport_max_frame_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.native_transport_max_frame_size_in_mb, false);\n \n         // fail early instead of OOMing (see CASSANDRA-8116)\n         if (ThriftServer.HSHA.equals(conf.rpc_server_type) && conf.rpc_max_threads == Integer.MAX_VALUE)\n@@ -576,6 +579,8 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)\n         /* data file and commit log directories. they get created later, when they're needed. */\n         for (String datadir : conf.data_file_directories)\n         {\n+            if (datadir == null)\n+                throw new ConfigurationException(\"data_file_directories must not contain empty entry\", false);\n             if (datadir.equals(conf.commitlog_directory))\n                 throw new ConfigurationException(\"commitlog_directory must not be the same as any data_file_directories\", false);\n             if (datadir.equals(conf.hints_directory))\n@@ -718,6 +723,13 @@ else if (conf.num_tokens > MAX_NUM_TOKENS)\n         if (conf.user_defined_function_fail_timeout < conf.user_defined_function_warn_timeout)\n             throw new ConfigurationException(\"user_defined_function_warn_timeout must less than user_defined_function_fail_timeout\", false);\n \n+        if (conf.commitlog_segment_size_in_mb <= 0)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be positive, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+        else if (conf.commitlog_segment_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"commitlog_segment_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.commitlog_segment_size_in_mb, false);\n+\n         if (conf.max_mutation_size_in_kb == null)\n             conf.max_mutation_size_in_kb = conf.commitlog_segment_size_in_mb * 1024 / 2;\n         else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_in_kb)\n@@ -733,6 +745,9 @@ else if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_i\n \n         if (conf.max_value_size_in_mb == null || conf.max_value_size_in_mb <= 0)\n             throw new ConfigurationException(\"max_value_size_in_mb must be positive\", false);\n+        else if (conf.max_value_size_in_mb >= 2048)\n+            throw new ConfigurationException(\"max_value_size_in_mb must be smaller than 2048, but was \"\n+                    + conf.max_value_size_in_mb, false);\n \n         if (conf.otc_coalescing_enough_coalesced_messages > 128)\n             throw new ConfigurationException(\"otc_coalescing_enough_coalesced_messages must be smaller than 128\", false);",
                "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "029db89cd940dd95d2b3848ef1e697a89cc79c6c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/utils/FBUtilities.java?ref=a586f6c88dab173663b765261d084ed8410efe81",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/utils/FBUtilities.java",
                "patch": "@@ -34,6 +34,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Joiner;\n+import com.google.common.base.Strings;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -82,8 +84,9 @@\n \n     public static int getAvailableProcessors()\n     {\n-        if (System.getProperty(\"cassandra.available_processors\") != null)\n-            return Integer.parseInt(System.getProperty(\"cassandra.available_processors\"));\n+        String availableProcessors = System.getProperty(\"cassandra.available_processors\");\n+        if (!Strings.isNullOrEmpty(availableProcessors))\n+            return Integer.parseInt(availableProcessors);\n         else\n             return Runtime.getRuntime().availableProcessors();\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/a586f6c88dab173663b765261d084ed8410efe81/src/java/org/apache/cassandra/utils/FBUtilities.java",
                "sha": "5562f5e22c370f4ec12fba1346e9fc4e820642e3",
                "status": "modified"
            }
        ],
        "message": "Improve config validation and documentation on overflow and NPE\n\npatch by Zhao Yang; reviewed by Kurt Greaves for CASSANDRA-13622",
        "parent": "https://github.com/apache/cassandra/commit/12103653f313d6f1ef030a535986123ddcffea9c",
        "repo": "cassandra",
        "unit_tests": [
            "FBUtilitiesTest.java"
        ]
    },
    "cassandra_aae0dfc": {
        "bug_id": "cassandra_aae0dfc",
        "commit": "https://github.com/apache/cassandra/commit/aae0dfc92aa6e17e1b977788ec8a4280cd4fce42",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/aae0dfc92aa6e17e1b977788ec8a4280cd4fce42/src/java/org/apache/cassandra/net/MessagingService.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/MessagingService.java?ref=aae0dfc92aa6e17e1b977788ec8a4280cd4fce42",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/net/MessagingService.java",
                "patch": "@@ -764,10 +764,14 @@ public ByteBuffer constructStreamHeader(StreamHeader streamHeader, boolean compr\n         return buffer;\n     }\n \n-    public Integer setVersion(InetAddress address, int version)\n+    /**\n+     * @return the last version associated with address, or @param version if this is the first such version\n+     */\n+    public int setVersion(InetAddress address, int version)\n     {\n         logger.debug(\"Setting version {} for {}\", version, address);\n-        return versions.put(address, version);\n+        Integer v = versions.put(address, version);\n+        return v == null ? version : v;\n     }\n \n     public void resetVersion(InetAddress endpoint)",
                "raw_url": "https://github.com/apache/cassandra/raw/aae0dfc92aa6e17e1b977788ec8a4280cd4fce42/src/java/org/apache/cassandra/net/MessagingService.java",
                "sha": "9c9240290afc6e84b90230f6012486dae9fba3fa",
                "status": "modified"
            }
        ],
        "message": "fix potential NPE",
        "parent": "https://github.com/apache/cassandra/commit/6a858a30d61fb6a575521bce9afa9448b5c309c1",
        "repo": "cassandra",
        "unit_tests": [
            "MessagingServiceTest.java"
        ]
    },
    "cassandra_abb39c2": {
        "bug_id": "cassandra_abb39c2",
        "commit": "https://github.com/apache/cassandra/commit/abb39c2bc4f985b848c07d181b45efd378b4795c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=abb39c2bc4f985b848c07d181b45efd378b4795c",
                "deletions": 2,
                "filename": "CHANGES.txt",
                "patch": "@@ -12,6 +12,8 @@\n  * fix stress tool that hangs forever on timeout or error (CASSANDRA-4128)\n  * Fix super columns bug where cache is not updated (CASSANDRA-4190)\n  * stress tool to return appropriate exit code on failure (CASSANDRA-4188)\n+ * fix compaction NPE when out of disk space and assertions disabled\n+   (CASSANDRA-3985)\n \n \n 1.0.9\n@@ -27,8 +29,6 @@\n  * don't change manifest level for cleanup, scrub, and upgradesstables\n    operations under LeveledCompactionStrategy (CASSANDRA-3989, 4112)\n  * fix race leading to super columns assertion failure (CASSANDRA-3957)\n- * ensure that directory is selected for compaction for user-defined\n-   tasks and upgradesstables (CASSANDRA-3985)\n  * fix NPE on invalid CQL delete command (CASSANDRA-3755)\n  * allow custom types in CLI's assume command (CASSANDRA-4081)\n  * fix totalBytes count for parallel compactions (CASSANDRA-3758)",
                "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/CHANGES.txt",
                "sha": "1c1c184f6665c2fa572be083f98fce338326cb70",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=abb39c2bc4f985b848c07d181b45efd378b4795c",
                "deletions": 21,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -757,23 +757,19 @@ public static String getSavedCachesLocation()\n         return Collections.unmodifiableSet(new HashSet(seedProvider.getSeeds()));\n     }\n \n-    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize)\n-    {\n-        return getDataFileLocationForTable(table, expectedCompactedFileSize, true);\n-    }\n-\n     /*\n      * Loop through all the disks to see which disk has the max free space\n      * return the disk with max free space for compactions. If the size of the expected\n      * compacted file is greater than the max disk space available return null, we cannot\n      * do compaction in this case.\n      *\n+     * Should only be called by Table.getDataFileLocation, which knows how to free up extra space under\n+     * some contitions to retry.  (Left public because some test methods cheat and call this directly.)\n+     *\n      * @param table name of the table.\n      * @param expectedCompactedSize expected file size in bytes.\n-     * @param ensureFreeSpace Flag if the function should ensure enough free space exists for the expected file size.\n-     *                        If False and there is not enough free space a warning is logged, and the dir with the most space is returned.\n      */\n-    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize, boolean ensureFreeSpace)\n+    public synchronized static String getDataFileLocationForTable(String table, long expectedCompactedFileSize)\n     {\n         long maxFreeDisk = 0;\n         int maxDiskIndex = 0;\n@@ -791,22 +787,13 @@ public synchronized static String getDataFileLocationForTable(String table, long\n             }\n         }\n \n-        logger.debug(\"expected data files size is {}; largest free partition has {} bytes free\",\n-                     expectedCompactedFileSize,\n-                     maxFreeDisk);\n-\n         // Load factor of 0.9 we do not want to use the entire disk that is too risky.\n         maxFreeDisk = (long) (0.9 * maxFreeDisk);\n-        if (!ensureFreeSpace || expectedCompactedFileSize < maxFreeDisk)\n-        {\n-            dataFileDirectory = dataDirectoryForTable[maxDiskIndex];\n+        logger.debug(\"expected data files size is {}; largest free partition has {} bytes usable\",\n+                     expectedCompactedFileSize, maxFreeDisk);\n \n-            if (expectedCompactedFileSize >= maxFreeDisk)\n-                logger.warn(String.format(\"Data file location %s only has %d free, expected size is %d\",\n-                                          dataFileDirectory,\n-                                          maxFreeDisk,\n-                                          expectedCompactedFileSize));\n-        }\n+        if (expectedCompactedFileSize < maxFreeDisk)\n+            dataFileDirectory = dataDirectoryForTable[maxDiskIndex];\n \n         return dataFileDirectory;\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "82132012826d3a7068542d59d3a771d2f4b5153d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/Table.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/Table.java?ref=abb39c2bc4f985b848c07d181b45efd378b4795c",
                "deletions": 8,
                "filename": "src/java/org/apache/cassandra/db/Table.java",
                "patch": "@@ -556,17 +556,15 @@ private Object indexLockFor(ByteBuffer key)\n \n     public String getDataFileLocation(long expectedSize)\n     {\n-        return getDataFileLocation(expectedSize, true);\n-    }\n+        String path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize);\n \n-    public String getDataFileLocation(long expectedSize, boolean ensureFreeSpace)\n-    {\n-        String path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize, ensureFreeSpace);\n         // Requesting GC has a chance to free space only if we're using mmap and a non SUN jvm\n         if (path == null\n-         && (DatabaseDescriptor.getDiskAccessMode() == Config.DiskAccessMode.mmap || DatabaseDescriptor.getIndexAccessMode() == Config.DiskAccessMode.mmap)\n-         && !MmappedSegmentedFile.isCleanerAvailable())\n+            && (DatabaseDescriptor.getDiskAccessMode() == Config.DiskAccessMode.mmap || DatabaseDescriptor.getIndexAccessMode() == Config.DiskAccessMode.mmap)\n+            && !MmappedSegmentedFile.isCleanerAvailable())\n         {\n+            logger.info(\"Forcing GC to free up disk space.  Upgrade to the Oracle JVM to avoid this\");\n+\n             StorageService.instance.requestGC();\n             // retry after GCing has forced unmap of compacted SSTables so they can be deleted\n             // Note: GCInspector will do this already, but only sun JVM supports GCInspector so far\n@@ -579,8 +577,9 @@ public String getDataFileLocation(long expectedSize, boolean ensureFreeSpace)\n             {\n                 throw new AssertionError(e);\n             }\n-            path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize, ensureFreeSpace);\n+            path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize);\n         }\n+\n         return path;\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/Table.java",
                "sha": "d3a38dbe587b6f23c850296b016e1f76f0b6950b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/compaction/CompactionTask.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/compaction/CompactionTask.java?ref=abb39c2bc4f985b848c07d181b45efd378b4795c",
                "deletions": 15,
                "filename": "src/java/org/apache/cassandra/db/compaction/CompactionTask.java",
                "patch": "@@ -77,7 +77,7 @@ public int execute(CompactionExecutorStatsCollector collector) throws IOExceptio\n             return 0;\n \n         if (compactionFileLocation == null)\n-            compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact), ensureFreeSpace());\n+            compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact));\n \n         if (compactionFileLocation == null && partialCompactionsAcceptable())\n         {\n@@ -89,17 +89,14 @@ public int execute(CompactionExecutorStatsCollector collector) throws IOExceptio\n                 // Note that we have removed files that are still marked as compacting.\n                 // This suboptimal but ok since the caller will unmark all the sstables at the end.\n                 toCompact.remove(cfs.getMaxSizeFile(toCompact));\n-                compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact),\n-                                                                       ensureFreeSpace());\n-            }\n-\n-            if (compactionFileLocation == null)\n-            {\n-                logger.warn(\"insufficient space to compact even the two smallest files, aborting\");\n-                return 0;\n+                compactionFileLocation = cfs.table.getDataFileLocation(cfs.getExpectedCompactedFileSize(toCompact));\n             }\n         }\n-        assert compactionFileLocation != null;\n+        if (compactionFileLocation == null)\n+        {\n+            logger.warn(\"insufficient space to compact; aborting compaction\");\n+            return 0;\n+        }\n \n         if (DatabaseDescriptor.isSnapshotBeforeCompaction())\n             cfs.snapshotWithoutFlush(System.currentTimeMillis() + \"-\" + \"compact-\" + cfs.columnFamily);\n@@ -231,11 +228,6 @@ protected boolean partialCompactionsAcceptable()\n         return !isUserDefined;\n     }\n \n-    protected boolean ensureFreeSpace()\n-    {\n-        return !isUserDefined;\n-    }\n-\n     //extensibility point for other strategies that may want to limit the upper bounds of the sstable segment size\n     protected boolean newSSTableSegmentThresholdReached(SSTableWriter writer, long position)\n     {",
                "raw_url": "https://github.com/apache/cassandra/raw/abb39c2bc4f985b848c07d181b45efd378b4795c/src/java/org/apache/cassandra/db/compaction/CompactionTask.java",
                "sha": "2a1b4156329bd31c25b0b2c01c0fc88775ecb4eb",
                "status": "modified"
            }
        ],
        "message": "fix compaction NPE when out of disk space and assertions disabled\npatch by jbellis; reviewed by xedin for CASSANDRA-3985",
        "parent": "https://github.com/apache/cassandra/commit/f20badb685393e60f74b236edf623c7c9264f1eb",
        "repo": "cassandra",
        "unit_tests": [
            "CompactionTaskTest.java"
        ]
    },
    "cassandra_b3a9a44": {
        "bug_id": "cassandra_b3a9a44",
        "commit": "https://github.com/apache/cassandra/commit/b3a9a443433a271fee33bede60d4892e0c8ffb03",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -27,6 +27,7 @@\n  * Optimize single partition batch statements (CASSANDRA-6737)\n  * Disallow post-query re-ordering when paging (CASSANDRA-6722)\n  * Fix potential paging bug with deleted columns (CASSANDRA-6748)\n+ * Fix NPE on BulkLoader caused by losing StreamEvent (CASSANDRA-6636)\n Merged from 1.2:\n  * Add CMSClassUnloadingEnabled JVM option (CASSANDRA-6541)\n  * Catch memtable flush exceptions during shutdown (CASSANDRA-6735)",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/CHANGES.txt",
                "sha": "3e73f910672d193ad7d229f754e0ecff20027ac5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableLoader.java",
                "patch": "@@ -144,7 +144,7 @@ public StreamResultFuture stream()\n         return stream(Collections.<InetAddress>emptySet());\n     }\n \n-    public StreamResultFuture stream(Set<InetAddress> toIgnore)\n+    public StreamResultFuture stream(Set<InetAddress> toIgnore, StreamEventHandler... listeners)\n     {\n         client.init(keyspace);\n         outputHandler.output(\"Established connection to initial hosts\");\n@@ -175,9 +175,8 @@ public StreamResultFuture stream(Set<InetAddress> toIgnore)\n \n             plan.transferFiles(remote, streamingDetails.get(remote));\n         }\n-        StreamResultFuture bulkResult = plan.execute();\n-        bulkResult.addEventListener(this);\n-        return bulkResult;\n+        plan.listeners(this, listeners);\n+        return plan.execute();\n     }\n \n     public void onSuccess(StreamState finalState) {}",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java",
                "sha": "1ea4c55b5e684cbb2b8f06253e66125a3d2caa8f",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamPlan.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamPlan.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/streaming/StreamPlan.java",
                "patch": "@@ -33,6 +33,7 @@\n {\n     private final UUID planId = UUIDGen.getTimeUUID();\n     private final String description;\n+    private final List<StreamEventHandler> handlers = new ArrayList<>();\n \n     // sessions per InetAddress of the other end.\n     private final Map<InetAddress, StreamSession> sessions = new HashMap<>();\n@@ -121,6 +122,14 @@ public StreamPlan transferFiles(InetAddress to, Collection<StreamSession.SSTable\n         return this;\n     }\n \n+    public StreamPlan listeners(StreamEventHandler handler, StreamEventHandler... handlers)\n+    {\n+        this.handlers.add(handler);\n+        if (handlers != null)\n+            Collections.addAll(this.handlers, handlers);\n+        return this;\n+    }\n+\n     /**\n      * @return true if this plan has no plan to execute\n      */\n@@ -136,7 +145,7 @@ public boolean isEmpty()\n      */\n     public StreamResultFuture execute()\n     {\n-        return StreamResultFuture.init(planId, description, sessions.values());\n+        return StreamResultFuture.init(planId, description, sessions.values(), handlers);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamPlan.java",
                "sha": "740ad6645944a37d68e153fe2594e50556c95a10",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamResultFuture.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/streaming/StreamResultFuture.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/streaming/StreamResultFuture.java",
                "patch": "@@ -75,9 +75,14 @@ private StreamResultFuture(UUID planId, String description, Collection<StreamSes\n             set(getCurrentState());\n     }\n \n-    static StreamResultFuture init(UUID planId, String description, Collection<StreamSession> sessions)\n+    static StreamResultFuture init(UUID planId, String description, Collection<StreamSession> sessions, Collection<StreamEventHandler> listeners)\n     {\n         StreamResultFuture future = createAndRegister(planId, description, sessions);\n+        if (listeners != null)\n+        {\n+            for (StreamEventHandler listener : listeners)\n+                future.addEventListener(listener);\n+        }\n \n         logger.info(\"[Stream #{}] Executing streaming plan for {}\", planId,  description);\n         // start sessions",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/streaming/StreamResultFuture.java",
                "sha": "dcffaff54c4a9d5c95efb0aea810657bb31f3270",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/tools/BulkLoader.java?ref=b3a9a443433a271fee33bede60d4892e0c8ffb03",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/tools/BulkLoader.java",
                "patch": "@@ -79,7 +79,10 @@ public static void main(String args[])\n         StreamResultFuture future = null;\n         try\n         {\n-            future = loader.stream(options.ignores);\n+            if (options.noProgress)\n+                future = loader.stream(options.ignores);\n+            else\n+                future = loader.stream(options.ignores, new ProgressIndicator());\n         }\n         catch (Exception e)\n         {\n@@ -94,8 +97,6 @@ public static void main(String args[])\n         }\n \n         handler.output(String.format(\"Streaming session ID: %s\", future.planId));\n-        if (!options.noProgress)\n-            future.addEventListener(new ProgressIndicator());\n \n         try\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/b3a9a443433a271fee33bede60d4892e0c8ffb03/src/java/org/apache/cassandra/tools/BulkLoader.java",
                "sha": "37ec635d98d966b4802be0a843a63200c15fca65",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on BulkLoader caused by losing StreamEvent\n\npatch by yukim; reviewed by sankalp kohli for CASSANDRA-6636",
        "parent": "https://github.com/apache/cassandra/commit/fd53628cb0e229e1ecc095eeebde056f0ae3e202",
        "repo": "cassandra",
        "unit_tests": [
            "BulkLoaderTest.java"
        ]
    },
    "cassandra_b89037f": {
        "bug_id": "cassandra_b89037f",
        "commit": "https://github.com/apache/cassandra/commit/b89037fe400b2b5097961c8276fa5c157b6cd49c",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cassandra/blob/b89037fe400b2b5097961c8276fa5c157b6cd49c/src/java/org/apache/cassandra/gms/Gossiper.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=b89037fe400b2b5097961c8276fa5c157b6cd49c",
                "deletions": 11,
                "filename": "src/java/org/apache/cassandra/gms/Gossiper.java",
                "patch": "@@ -580,17 +580,6 @@ public void assassinateEndpoint(String address) throws UnknownHostException\n         }\n         else\n         {\n-            try\n-            {\n-                tokens = StorageService.instance.getTokenMetadata().getTokens(endpoint);\n-            }\n-            catch (Throwable th)\n-            {\n-                JVMStabilityInspector.inspectThrowable(th);\n-                // TODO this is broken\n-                logger.warn(\"Unable to calculate tokens for {}.  Will use a random one\", address);\n-                tokens = Collections.singletonList(StorageService.instance.getTokenMetadata().partitioner.getRandomToken());\n-            }\n             int generation = epState.getHeartBeatState().getGeneration();\n             int heartbeat = epState.getHeartBeatState().getHeartBeatVersion();\n             logger.info(\"Sleeping for {}ms to ensure {} does not change\", StorageService.RING_DELAY, endpoint);\n@@ -607,6 +596,18 @@ else if (newState.getHeartBeatState().getHeartBeatVersion() != heartbeat)\n             epState.getHeartBeatState().forceNewerGenerationUnsafe();\n         }\n \n+        try\n+        {\n+            tokens = StorageService.instance.getTokenMetadata().getTokens(endpoint);\n+        }\n+        catch (Throwable th)\n+        {\n+            JVMStabilityInspector.inspectThrowable(th);\n+            // TODO this is broken\n+            logger.warn(\"Unable to calculate tokens for {}.  Will use a random one\", address);\n+            tokens = Collections.singletonList(StorageService.instance.getTokenMetadata().partitioner.getRandomToken());\n+        }\n+\n         // do not pass go, do not collect 200 dollars, just gtfo\n         epState.addApplicationState(ApplicationState.STATUS, StorageService.instance.valueFactory.left(tokens, computeExpireTime()));\n         handleMajorStateChange(endpoint, epState);",
                "raw_url": "https://github.com/apache/cassandra/raw/b89037fe400b2b5097961c8276fa5c157b6cd49c/src/java/org/apache/cassandra/gms/Gossiper.java",
                "sha": "43a45cfccd6a5d7d5f021db28a9b9658d174ed15",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE while assasinating unknown endpoint\n\nPatch by dbrosius; reviewed by jknighton for CASSANDRA-9510",
        "parent": "https://github.com/apache/cassandra/commit/4743fd7631e645a5c75a3da2eeb3870af36e985f",
        "repo": "cassandra",
        "unit_tests": [
            "GossiperTest.java"
        ]
    },
    "cassandra_bc75679": {
        "bug_id": "cassandra_bc75679",
        "commit": "https://github.com/apache/cassandra/commit/bc756792aa4cef31e4274045ec14768b8375674b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=bc756792aa4cef31e4274045ec14768b8375674b",
                "deletions": 1,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,3 +1,6 @@\n+0.8.4\n+ * include files-to-be-streamed in StreamInSession.getSources (CASSANDRA-2972)\n+\n 0.8.3\n  * add ability to drop local reads/writes that are going to timeout\n    (CASSANDRA-2943)\n@@ -34,7 +37,6 @@\n  * add asynchronous and half-sync/half-async thrift servers (CASSANDRA-1405)\n  * fix potential use of free'd native memory in SerializingCache \n    (CASSANDRA-2951)\n- * include files-to-be-streamed in StreamInSession.getSources (CASSANDRA-2972)\n \n \n 0.8.2",
                "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/CHANGES.txt",
                "sha": "7e7c7f8ff5076243cb0ed690433beba2cf888251",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=bc756792aa4cef31e4274045ec14768b8375674b",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -274,6 +274,10 @@ else if (conf.memtable_flush_writers == null)\n                     throw new ConfigurationException(\"Unknown host in rpc_address \" + conf.rpc_address);\n                 }\n             }\n+            else\n+            {\n+                rpcAddress = FBUtilities.getLocalAddress();\n+            }\n \n             if (conf.thrift_framed_transport_size_in_mb <= 0)\n                 throw new ConfigurationException(\"thrift_framed_transport_size_in_mb must be positive\");",
                "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "1ccff5208021fc2afe76c93f66155a103fbdfdda",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java?ref=bc756792aa4cef31e4274045ec14768b8375674b",
                "deletions": 6,
                "filename": "src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java",
                "patch": "@@ -125,12 +125,6 @@ protected void setup() throws IOException\n \n         listenPort = DatabaseDescriptor.getRpcPort();\n         listenAddr = DatabaseDescriptor.getRpcAddress();\n-        /* \n-         * If ThriftAddress was left completely unconfigured, then assume\n-         * the same default as ListenAddress\n-         */\n-        if (listenAddr == null)\n-            listenAddr = FBUtilities.getLocalAddress();\n \n         Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler()\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java",
                "sha": "203ecc8bf597c041d7dcc707ba502bf9087ba911",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=bc756792aa4cef31e4274045ec14768b8375674b",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -452,10 +452,7 @@ private void joinTokenRing() throws IOException, org.apache.cassandra.config.Con\n         Gossiper.instance.start(SystemTable.incrementAndGetGeneration()); // needed for node-ring gathering.\n \n         // add rpc listening info\n-        if (DatabaseDescriptor.getRpcAddress() == null)\n-            Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(FBUtilities.getLocalAddress()));\n-        else\n-            Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(DatabaseDescriptor.getRpcAddress()));\n+        Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(DatabaseDescriptor.getRpcAddress()));\n \n         MessagingService.instance().listen(FBUtilities.getLocalAddress());\n         StorageLoadBalancer.instance.startBroadcasting();",
                "raw_url": "https://github.com/apache/cassandra/raw/bc756792aa4cef31e4274045ec14768b8375674b/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "137e76f1bcbd5d9d8e92f39d095949688fbc0a09",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in getRangeToRpcaddressMap\npatch by slebresne; reviewed by jbellis for CASSANDRA-2996\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1154219 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/931c2f1208dee513634cde9b701ef8a00c566d89",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_bd32d4f": {
        "bug_id": "cassandra_bd32d4f",
        "commit": "https://github.com/apache/cassandra/commit/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cassandra/blob/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d/src/java/org/apache/cassandra/service/StorageProxy.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageProxy.java?ref=bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/service/StorageProxy.java",
                "patch": "@@ -362,8 +362,11 @@ public void runMayThrow() throws IOException\n                 try\n                 {\n                     UUID hostId = StorageService.instance.getTokenMetadata().getHostId(target);\n-                    if ((hostId == null) && (Gossiper.instance.getVersion(target) < MessagingService.VERSION_12))\n-                        logger.info(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n+                    if (hostId == null) // The node in question will not have a host id if older than MessagingService.VERSION_12 in a mixed version cluster\n+                    {\n+                        logger.warn(\"Unable to store hint for host with missing ID, {} (old node?)\", target.toString());\n+                        return;\n+                    }\n                     RowMutation hintedMutation = RowMutation.hintFor(mutation, ByteBuffer.wrap(UUIDGen.decompose(hostId)));\n                     hintedMutation.apply();\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/bd32d4f0b9f0f88fed97e8ddf2ee41b5b048d31d/src/java/org/apache/cassandra/service/StorageProxy.java",
                "sha": "10189a0b3989379be91ef638d77356e4575f2f6c",
                "status": "modified"
            }
        ],
        "message": "StorageProxy throws NPEs for when there's no hostids for a target\npatch by dbrosius reviewed by jbellis for CASSANDRA-4227",
        "parent": "https://github.com/apache/cassandra/commit/669025cf2319d66629c362e7e377ee321489bded",
        "repo": "cassandra",
        "unit_tests": [
            "StorageProxyTest.java"
        ]
    },
    "cassandra_c86de2a": {
        "bug_id": "cassandra_c86de2a",
        "commit": "https://github.com/apache/cassandra/commit/c86de2a9817aa45930afe181ae1891d2363393c7",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/cassandra/blob/c86de2a9817aa45930afe181ae1891d2363393c7/src/java/org/apache/cassandra/net/MessagingService.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/MessagingService.java?ref=c86de2a9817aa45930afe181ae1891d2363393c7",
                "deletions": 14,
                "filename": "src/java/org/apache/cassandra/net/MessagingService.java",
                "patch": "@@ -536,8 +536,6 @@ public Object apply(Pair<Integer, ExpiringMap.CacheableObject<CallbackInfo>> pai\n                 if (cp != null)\n                     cp.incrementTimeout();\n \n-                getConnectionPool(expiredCallbackInfo.target).incrementTimeout();\n-\n                 if (expiredCallbackInfo.callback.supportsBackPressure())\n                 {\n                     updateBackPressureOnReceive(expiredCallbackInfo.target, expiredCallbackInfo.callback, true);\n@@ -607,8 +605,12 @@ public void updateBackPressureOnSend(InetAddress host, IAsyncCallback callback,\n     {\n         if (DatabaseDescriptor.backPressureEnabled() && callback.supportsBackPressure())\n         {\n-            BackPressureState backPressureState = getConnectionPool(host).getBackPressureState();\n-            backPressureState.onMessageSent(message);\n+            OutboundTcpConnectionPool cp = getConnectionPool(host);\n+            if (cp != null)\n+            {\n+                BackPressureState backPressureState = cp.getBackPressureState();\n+                backPressureState.onMessageSent(message);\n+            }\n         }\n     }\n \n@@ -623,11 +625,15 @@ public void updateBackPressureOnReceive(InetAddress host, IAsyncCallback callbac\n     {\n         if (DatabaseDescriptor.backPressureEnabled() && callback.supportsBackPressure())\n         {\n-            BackPressureState backPressureState = getConnectionPool(host).getBackPressureState();\n-            if (!timeout)\n-                backPressureState.onResponseReceived();\n-            else\n-                backPressureState.onResponseTimeout();\n+            OutboundTcpConnectionPool cp = getConnectionPool(host);\n+            if (cp != null)\n+            {\n+                BackPressureState backPressureState = cp.getBackPressureState();\n+                if (!timeout)\n+                    backPressureState.onResponseReceived();\n+                else\n+                    backPressureState.onResponseTimeout();\n+            }\n         }\n     }\n \n@@ -644,10 +650,16 @@ public void applyBackPressure(Iterable<InetAddress> hosts, long timeoutInNanos)\n     {\n         if (DatabaseDescriptor.backPressureEnabled())\n         {\n-            backPressure.apply(StreamSupport.stream(hosts.spliterator(), false)\n-                    .filter(h -> !h.equals(FBUtilities.getBroadcastAddress()))\n-                    .map(h -> getConnectionPool(h).getBackPressureState())\n-                    .collect(Collectors.toSet()), timeoutInNanos, TimeUnit.NANOSECONDS);\n+            Set<BackPressureState> states = new HashSet<BackPressureState>();\n+            for (InetAddress host : hosts)\n+            {\n+                if (host.equals(FBUtilities.getBroadcastAddress()))\n+                    continue;\n+                OutboundTcpConnectionPool cp = getConnectionPool(host);\n+                if (cp != null)\n+                    states.add(cp.getBackPressureState());\n+            }\n+            backPressure.apply(states, timeoutInNanos, TimeUnit.NANOSECONDS);\n         }\n     }\n \n@@ -679,7 +691,7 @@ public void convict(InetAddress ep)\n         if (cp != null)\n         {\n             logger.trace(\"Resetting pool for {}\", ep);\n-            getConnectionPool(ep).reset();\n+            cp.reset();\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/cassandra/raw/c86de2a9817aa45930afe181ae1891d2363393c7/src/java/org/apache/cassandra/net/MessagingService.java",
                "sha": "b7d4329fe8f1919e825853b29543d66247d7d28a",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs in original CASSANDRA-13324 commit\n\nPatch by Ariel Weisberg; Reviewed by Marcus Eriksson",
        "parent": "https://github.com/apache/cassandra/commit/3dabeeaa29bfb6757e79f17031cb467b7b052fcd",
        "repo": "cassandra",
        "unit_tests": [
            "MessagingServiceTest.java"
        ]
    },
    "cassandra_da8be1c": {
        "bug_id": "cassandra_da8be1c",
        "commit": "https://github.com/apache/cassandra/commit/da8be1c093ba0a78604effd76769067e428ca04d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/da8be1c093ba0a78604effd76769067e428ca04d/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=da8be1c093ba0a78604effd76769067e428ca04d",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,4 +1,5 @@\n 2.1.12\n+ * Fix potential NPE from handling result of SIM.highestSelectivityIndex (CASSANDRA-10550)\n  * Fix paging issues with partitions containing only static columns data\n    (CASSANDRA-10381)\n  * Fix conditions on static columns (CASSANDRA-10264)",
                "raw_url": "https://github.com/apache/cassandra/raw/da8be1c093ba0a78604effd76769067e428ca04d/CHANGES.txt",
                "sha": "2a28a86ceba322684569f7d216bd9f9f303157d2",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java?ref=da8be1c093ba0a78604effd76769067e428ca04d",
                "deletions": 4,
                "filename": "src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java",
                "patch": "@@ -858,11 +858,14 @@ public SecondaryIndexSearcher getHighestSelectivityIndexSearcher(List<IndexExpre\n         for (SecondaryIndexSearcher searcher : indexSearchers)\n         {\n             SecondaryIndex highestSelectivityIndex = searcher.highestSelectivityIndex(clause);\n-            long estimate = highestSelectivityIndex.estimateResultRows();\n-            if (estimate <= bestEstimate)\n+            if (highestSelectivityIndex != null)\n             {\n-                bestEstimate = estimate;\n-                mostSelective = searcher;\n+                long estimate = highestSelectivityIndex.estimateResultRows();\n+                if (estimate <= bestEstimate)\n+                {\n+                    bestEstimate = estimate;\n+                    mostSelective = searcher;\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java",
                "sha": "12a0a555b2a8ad43d72248d99a65d2a8416144f8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/service/StorageProxy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageProxy.java?ref=da8be1c093ba0a78604effd76769067e428ca04d",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/StorageProxy.java",
                "patch": "@@ -1571,7 +1571,7 @@ private static float estimateResultRowsPerRange(AbstractRangeCommand command, Ke\n                 {\n                     // use our own mean column count as our estimate for how many matching rows each node will have\n                     SecondaryIndex highestSelectivityIndex = searcher.highestSelectivityIndex(command.rowFilter);\n-                    resultRowsPerRange = Math.min(resultRowsPerRange, highestSelectivityIndex.estimateResultRows());\n+                    resultRowsPerRange = highestSelectivityIndex == null ? resultRowsPerRange : Math.min(resultRowsPerRange, highestSelectivityIndex.estimateResultRows());\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/cassandra/raw/da8be1c093ba0a78604effd76769067e428ca04d/src/java/org/apache/cassandra/service/StorageProxy.java",
                "sha": "4f20ef0273db74ee163287e8f5011ae978764bd3",
                "status": "modified"
            }
        ],
        "message": "NPE fix on null highestSelectivityIndex\n\nPatch by Berenguer Blasi; reviewed by Sam Tunnicliffe for\nCASSANDRA-10550",
        "parent": "https://github.com/apache/cassandra/commit/86583af4ca0eac34725136adee3143f9b14b75b4",
        "repo": "cassandra",
        "unit_tests": [
            "StorageProxyTest.java"
        ]
    },
    "cassandra_db3c198": {
        "bug_id": "cassandra_db3c198",
        "commit": "https://github.com/apache/cassandra/commit/db3c198ad0ce46e255202d03ead7ad44df127070",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cassandra/blob/db3c198ad0ce46e255202d03ead7ad44df127070/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/io/sstable/SSTableReader.java?ref=db3c198ad0ce46e255202d03ead7ad44df127070",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "patch": "@@ -84,7 +84,7 @@\n     private IndexSummary indexSummary;\n     private Filter bf;\n \n-    private final InstrumentingCache<KeyCacheKey, RowIndexEntry> keyCache = CacheService.instance.keyCache;\n+    private InstrumentingCache<KeyCacheKey, RowIndexEntry> keyCache;\n \n     private final BloomFilterTracker bloomFilterTracker = new BloomFilterTracker();\n \n@@ -312,6 +312,10 @@ private SSTableReader(Descriptor desc,\n     public void setTrackedBy(DataTracker tracker)\n     {\n         deletingTask.setTracker(tracker);\n+        // under normal operation we can do this at any time, but SSTR is also used outside C* proper,\n+        // e.g. by BulkLoader, which does not initialize the cache.  As a kludge, we set up the cache\n+        // here when we know we're being wired into the rest of the server infrastructure.\n+        keyCache = CacheService.instance.keyCache;\n     }\n \n     void loadBloomFilter() throws IOException\n@@ -680,6 +684,7 @@ public void cacheKey(DecoratedKey key, RowIndexEntry info)\n \n         if (caching == CFMetaData.Caching.NONE\n             || caching == CFMetaData.Caching.ROWS_ONLY\n+            || keyCache == null\n             || keyCache.getCapacity() == 0)\n         {\n             return;\n@@ -697,7 +702,7 @@ public RowIndexEntry getCachedPosition(DecoratedKey key, boolean updateStats)\n \n     private RowIndexEntry getCachedPosition(KeyCacheKey unifiedKey, boolean updateStats)\n     {\n-        if (keyCache.getCapacity() > 0)\n+        if (keyCache != null && keyCache.getCapacity() > 0)\n             return updateStats ? keyCache.get(unifiedKey) : keyCache.getInternal(unifiedKey);\n         return null;\n     }",
                "raw_url": "https://github.com/apache/cassandra/raw/db3c198ad0ce46e255202d03ead7ad44df127070/src/java/org/apache/cassandra/io/sstable/SSTableReader.java",
                "sha": "91713a1469106b562f2b862b0ad1e9b4f614d518",
                "status": "modified"
            }
        ],
        "message": "fix BulkLoader NPE caused by #4732\npatch by jbellis; reviewed by yukim for CASSANDRA-4846",
        "parent": "https://github.com/apache/cassandra/commit/5eb9e1c1576edb90f5b6e2ef975686e87a8c93af",
        "repo": "cassandra",
        "unit_tests": [
            "SSTableReaderTest.java"
        ]
    },
    "cassandra_dfcb621": {
        "bug_id": "cassandra_dfcb621",
        "commit": "https://github.com/apache/cassandra/commit/dfcb62163b6cfba75714357ee4f63f1b59f9e87a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cassandra/blob/dfcb62163b6cfba75714357ee4f63f1b59f9e87a/CHANGES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=dfcb62163b6cfba75714357ee4f63f1b59f9e87a",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -1,3 +1,7 @@\n+0.8.5\n+ * fix NPE when encryption_options is unspecified (CASSANDRA-3007)\n+\n+\n 0.8.4\n  * include files-to-be-streamed in StreamInSession.getSources (CASSANDRA-2972)\n  * use JAVA env var in cassandra-env.sh (CASSANDRA-2785, 2992)",
                "raw_url": "https://github.com/apache/cassandra/raw/dfcb62163b6cfba75714357ee4f63f1b59f9e87a/CHANGES.txt",
                "sha": "f44ee6978ee9c2145427439bc6a7005800953ddd",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/dfcb62163b6cfba75714357ee4f63f1b59f9e87a/src/java/org/apache/cassandra/net/MessagingService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/net/MessagingService.java?ref=dfcb62163b6cfba75714357ee4f63f1b59f9e87a",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/net/MessagingService.java",
                "patch": "@@ -417,7 +417,8 @@ public IAsyncResult sendRR(Message message, InetAddress to)\n     public void stream(StreamHeader header, InetAddress to)\n     {\n         /* Streaming asynchronously on streamExector_ threads. */\n-        if (DatabaseDescriptor.getEncryptionOptions().internode_encryption == EncryptionOptions.InternodeEncryption.all)\n+        EncryptionOptions encryption = DatabaseDescriptor.getEncryptionOptions();\n+        if (encryption != null && encryption.internode_encryption == EncryptionOptions.InternodeEncryption.all)\n             streamExecutor_.execute(new SSLFileStreamTask(header, to));\n         else\n             streamExecutor_.execute(new FileStreamTask(header, to));",
                "raw_url": "https://github.com/apache/cassandra/raw/dfcb62163b6cfba75714357ee4f63f1b59f9e87a/src/java/org/apache/cassandra/net/MessagingService.java",
                "sha": "c35a3c0a09c3627bbe26111549e6c1859aadd165",
                "status": "modified"
            }
        ],
        "message": "fix NPE when encryption_options is unspecified\npatch by jbellis; reviewed by brandonwilliams for CASSANDRA-3007\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/branches/cassandra-0.8@1156749 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/4346146a46b3ad886124b323f64756b090a06e92",
        "repo": "cassandra",
        "unit_tests": [
            "MessagingServiceTest.java"
        ]
    },
    "cassandra_e70502c": {
        "bug_id": "cassandra_e70502c",
        "commit": "https://github.com/apache/cassandra/commit/e70502c094194fd41d69c1bf8356255a8783a21c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/e70502c094194fd41d69c1bf8356255a8783a21c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=e70502c094194fd41d69c1bf8356255a8783a21c",
                "deletions": 2,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -388,9 +388,9 @@ public static void loadSchemas() throws IOException\n                 Table.open(def.name);\n             }\n             \n-            // since we loaded definitions from local storage, log a warning if definitions exist in xml.\n+            // since we loaded definitions from local storage, log a warning if definitions exist in yaml.\n             \n-            if (conf.keyspaces.size() > 0)\n+            if (conf.keyspaces != null && conf.keyspaces.size() > 0)\n                 logger.warn(\"Schema definitions were defined both locally and in \" + STORAGE_CONF_FILE +\n                     \". Definitions in \" + STORAGE_CONF_FILE + \" were ignored.\");\n             ",
                "raw_url": "https://github.com/apache/cassandra/raw/e70502c094194fd41d69c1bf8356255a8783a21c/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "720a2f1538003b440a11b1637c2678f0cd13dabf",
                "status": "modified"
            }
        ],
        "message": "avoid NPE when no keyspaces are defined in yaml. Patch by Sylvain Lebresne, reviewd by gdusbabek. CASSANDRA-1080\n\ngit-svn-id: https://svn.apache.org/repos/asf/cassandra/trunk@943566 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cassandra/commit/75e832aa7ae2f6e38050b9c8c87f1c7a8e84bce7",
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_ea5b624": {
        "bug_id": "cassandra_ea5b624",
        "commit": "https://github.com/apache/cassandra/commit/ea5b6246d24c6092cda17c28610f76b17b0be25c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cassandra/blob/ea5b6246d24c6092cda17c28610f76b17b0be25c/src/java/org/apache/cassandra/gms/Gossiper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/gms/Gossiper.java?ref=ea5b6246d24c6092cda17c28610f76b17b0be25c",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/gms/Gossiper.java",
                "patch": "@@ -1267,7 +1267,8 @@ public void addLocalApplicationState(ApplicationState state, VersionedValue valu\n \n     public void stop()\n     {\n-        scheduledGossipTask.cancel(false);\n+    \tif (scheduledGossipTask != null)\n+    \t\tscheduledGossipTask.cancel(false);\n         logger.info(\"Announcing shutdown\");\n         Uninterruptibles.sleepUninterruptibly(intervalInMillis * 2, TimeUnit.MILLISECONDS);\n         MessageOut message = new MessageOut(MessagingService.Verb.GOSSIP_SHUTDOWN);",
                "raw_url": "https://github.com/apache/cassandra/raw/ea5b6246d24c6092cda17c28610f76b17b0be25c/src/java/org/apache/cassandra/gms/Gossiper.java",
                "sha": "c04a87d41610e71720b490467a70e8fc45376848",
                "status": "modified"
            }
        ],
        "message": "don't NPE shutting down, due to gossip failure",
        "parent": "https://github.com/apache/cassandra/commit/6faf80c9d267ede53c139b5f2a39e8e56ee80b2a",
        "repo": "cassandra",
        "unit_tests": [
            "GossiperTest.java"
        ]
    },
    "cassandra_ef01ca5": {
        "bug_id": "cassandra_ef01ca5",
        "commit": "https://github.com/apache/cassandra/commit/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -7,6 +7,7 @@\n  * add CompositeType ref to the CLI doc for create/update column family (CASSANDRA-3980)\n  * Pig: support Counter ColumnFamilies (CASSANDRA-3973)\n  * Pig: Composite column support (CASSANDRA-384)\n+ * Avoid NPE during repair when a keyspace has no CFs (CASSANDRA-3988)\n \n \n 1.0.8",
                "raw_url": "https://github.com/apache/cassandra/raw/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d/CHANGES.txt",
                "sha": "bc10ae20534d673f4286100ac480f854392c636a",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d",
                "deletions": 0,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -1808,6 +1808,8 @@ public void forceTableRepair(final String tableName, final String... columnFamil\n         for (Range range : ranges)\n         {\n             AntiEntropyService.RepairFuture future = forceTableRepair(range, tableName, columnFamilies);\n+            if (future == null)\n+                continue;\n             futures.add(future);\n             // wait for a session to be done with its differencing before starting the next one\n             try\n@@ -1848,6 +1850,8 @@ public void forceTableRepairPrimaryRange(final String tableName, final String...\n             return;\n \n         AntiEntropyService.RepairFuture future = forceTableRepair(getLocalPrimaryRange(), tableName, columnFamilies);\n+        if (future == null)\n+            return;\n         try\n         {\n             future.get();\n@@ -1867,6 +1871,12 @@ public void forceTableRepairPrimaryRange(final String tableName, final String...\n             names.add(cfStore.getColumnFamilyName());\n         }\n \n+        if (names.isEmpty())\n+        {\n+            logger_.info(\"No column family to repair for keyspace \" + tableName);\n+            return null;\n+        }\n+\n         return AntiEntropyService.instance.submitRepairSession(range, tableName, names.toArray(new String[names.size()]));\n     }\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/ef01ca5bcf42fcf6c6a43a77eb4f0a90a93bbc1d/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "7f2f9886b600d5e276c60db966b502462527e625",
                "status": "modified"
            }
        ],
        "message": "Avoids NPE during repair when a keyspace has no CFs\n\npatch by slebresne; reviewed by jbellis for CASSANDRA-3988",
        "parent": "https://github.com/apache/cassandra/commit/53fb52ac713e5471edd988b59cbd75f202a4f57b",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_f463fed": {
        "bug_id": "cassandra_f463fed",
        "commit": "https://github.com/apache/cassandra/commit/f463fed234ce5bd9c536ac5fdf51c3555b9af805",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/f463fed234ce5bd9c536ac5fdf51c3555b9af805/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=f463fed234ce5bd9c536ac5fdf51c3555b9af805",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -1255,7 +1255,7 @@ public void onSuccess(StreamState streamState)\n             @Override\n             public void onFailure(Throwable e)\n             {\n-                logger.warn(\"Error during bootstrap: \" + e.getCause().getMessage(), e.getCause());\n+                logger.warn(\"Error during bootstrap.\", e);\n             }\n         });\n         try",
                "raw_url": "https://github.com/apache/cassandra/raw/f463fed234ce5bd9c536ac5fdf51c3555b9af805/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "82d7c8f4a51ab382e1859fa9d5bc97d5e9b77876",
                "status": "modified"
            }
        ],
        "message": "Avoid calls to `getCause` on `Throwable` as it might result into NPE\n\nPatch by Alex Petrov; reviewed by Joel Knighton for CASSANDRA-11272",
        "parent": "https://github.com/apache/cassandra/commit/e0c6a9eca074f1be00ef60131f4db40cc4ea5307",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    },
    "cassandra_fad5ad5": {
        "bug_id": "cassandra_fad5ad5",
        "commit": "https://github.com/apache/cassandra/commit/fad5ad5a6af5a9ed2954a6395149f0ca95d34603",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cassandra/blob/fad5ad5a6af5a9ed2954a6395149f0ca95d34603/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/config/DatabaseDescriptor.java?ref=fad5ad5a6af5a9ed2954a6395149f0ca95d34603",
                "deletions": 9,
                "filename": "src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "patch": "@@ -288,15 +288,6 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)\n             logger.info(\"Global memtable off-heap threshold is disabled, HeapAllocator will be used instead\");\n         else\n             logger.info(\"Global memtable off-heap threshold is enabled at {}MB\", conf.memtable_offheap_space_in_mb);\n-        if (conf.memtable_cleanup_threshold < 0.01f)\n-            throw new ConfigurationException(\"memtable_cleanup_threshold must be >= 0.01\");\n-        if (conf.memtable_cleanup_threshold > 0.99f)\n-            throw new ConfigurationException(\"memtable_cleanup_threshold must be <= 0.99\");\n-        if (conf.memtable_cleanup_threshold < 0.1f)\n-            logger.warn(\"memtable_cleanup_threshold is set very low, which may cause performance degradation\");\n-\n-        if (conf.memtable_flush_writers < 1)\n-            throw new ConfigurationException(\"memtable_flush_writers must be at least 1\");\n \n         /* Local IP or hostname to bind services to */\n         if (conf.listen_address != null)\n@@ -486,9 +477,19 @@ public int compare(InetAddress endpoint1, InetAddress endpoint2)\n         if (conf.memtable_flush_writers == null)\n             conf.memtable_flush_writers = Math.min(8, Math.max(2, Math.min(FBUtilities.getAvailableProcessors(), conf.data_file_directories.length)));\n \n+        if (conf.memtable_flush_writers < 1)\n+            throw new ConfigurationException(\"memtable_flush_writers must be at least 1\");\n+\n         if (conf.memtable_cleanup_threshold == null)\n             conf.memtable_cleanup_threshold = (float) (1.0 / (1 + conf.memtable_flush_writers));\n \n+        if (conf.memtable_cleanup_threshold < 0.01f)\n+            throw new ConfigurationException(\"memtable_cleanup_threshold must be >= 0.01\");\n+        if (conf.memtable_cleanup_threshold > 0.99f)\n+            throw new ConfigurationException(\"memtable_cleanup_threshold must be <= 0.99\");\n+        if (conf.memtable_cleanup_threshold < 0.1f)\n+            logger.warn(\"memtable_cleanup_threshold is set very low, which may cause performance degradation\");\n+\n         if (conf.concurrent_compactors == null)\n             conf.concurrent_compactors = Math.min(8, Math.max(2, Math.min(FBUtilities.getAvailableProcessors(), conf.data_file_directories.length)));\n ",
                "raw_url": "https://github.com/apache/cassandra/raw/fad5ad5a6af5a9ed2954a6395149f0ca95d34603/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
                "sha": "d89967d8e1a07c45da655b47cf196d2a14d4ec2c",
                "status": "modified"
            }
        ],
        "message": "reorder to avoid NPE",
        "parent": "https://github.com/apache/cassandra/commit/233bd3c0340d6bd19fe0c25072bd3b4931be0e1f",
        "repo": "cassandra",
        "unit_tests": [
            "DatabaseDescriptorTest.java"
        ]
    },
    "cassandra_fd60933": {
        "bug_id": "cassandra_fd60933",
        "commit": "https://github.com/apache/cassandra/commit/fd609339eebd13e2adc37969c8e0b439775a17af",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/fd609339eebd13e2adc37969c8e0b439775a17af/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java?ref=fd609339eebd13e2adc37969c8e0b439775a17af",
                "deletions": 1,
                "filename": "src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "patch": "@@ -508,7 +508,7 @@ else if (isColumnRange())\n                     slices = new ColumnSlice[l.size()+1];\n                     slices[0] = staticSlice;\n                     for (int i = 0; i < l.size(); i++)\n-                        slices[i] = l.get(i);\n+                        slices[i+1] = l.get(i);\n                 }\n             }\n             return sliceFilter(slices, limit, toGroup);",
                "raw_url": "https://github.com/apache/cassandra/raw/fd609339eebd13e2adc37969c8e0b439775a17af/src/java/org/apache/cassandra/cql3/statements/SelectStatement.java",
                "sha": "5a9d3d9f2e31743af3d45fd27b1fbfda44eae7bb",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when using static columns and IN\n\npatch by slebresne; reviewed by iamaleksey for CASSANDRA-6769",
        "parent": "https://github.com/apache/cassandra/commit/89da2c9704b5d2a4148a97a274170c3f634a1f0f",
        "repo": "cassandra",
        "unit_tests": [
            "SelectStatementTest.java"
        ]
    },
    "cassandra_fee2a3a": {
        "bug_id": "cassandra_fee2a3a",
        "commit": "https://github.com/apache/cassandra/commit/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cassandra/blob/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd/CHANGES.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/CHANGES.txt?ref=fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -17,6 +17,7 @@\n  * Add formatted row output to assertEmpty in CQL Tester (CASSANDRA-13238)\n  * Legacy caching options can prevent 3.0 upgrade (CASSANDRA-13384)\n  * Nodetool upgradesstables/scrub/compact ignores system tables (CASSANDRA-13410)\n+ * Fix NPE issue in StorageService (CASSANDRA-13060)\n Merged from 2.2:\n  * Honor truststore-password parameter in cassandra-stress (CASSANDRA-12773)\n  * Discard in-flight shadow round responses (CASSANDRA-12653)",
                "raw_url": "https://github.com/apache/cassandra/raw/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd/CHANGES.txt",
                "sha": "7b577dd4af3b5bbef2e1f70b57a68be14151b268",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cassandra/blob/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd/src/java/org/apache/cassandra/service/StorageService.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cassandra/contents/src/java/org/apache/cassandra/service/StorageService.java?ref=fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd",
                "deletions": 3,
                "filename": "src/java/org/apache/cassandra/service/StorageService.java",
                "patch": "@@ -1850,13 +1850,16 @@ private void notifyLeft(InetAddress endpoint)\n \n     private boolean isStatus(InetAddress endpoint, String status)\n     {\n-        return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getStatus().equals(status);\n+        EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+        return state != null && state.getStatus().equals(status);\n     }\n \n     public boolean isRpcReady(InetAddress endpoint)\n     {\n-        return MessagingService.instance().getVersion(endpoint) < MessagingService.VERSION_22 ||\n-                Gossiper.instance.getEndpointStateForEndpoint(endpoint).isRpcReady();\n+        if (MessagingService.instance().getVersion(endpoint) < MessagingService.VERSION_22)\n+            return true;\n+        EndpointState state = Gossiper.instance.getEndpointStateForEndpoint(endpoint);\n+        return state != null && state.isRpcReady();\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cassandra/raw/fee2a3a0958b801e1c3b26b7ad7d4ce1a79868bd/src/java/org/apache/cassandra/service/StorageService.java",
                "sha": "143b402d786542e48222984edbf45c84b36e9f39",
                "status": "modified"
            }
        ],
        "message": "Fix NPE issue in StorageService\n\nPatch by Jay Zhuang; Reviewed by Jeff Jirsa for CASSANDRa-13060",
        "parent": "https://github.com/apache/cassandra/commit/833c993b8e604046179067e663f963dcf4c4a2ca",
        "repo": "cassandra",
        "unit_tests": [
            "StorageServiceTest.java"
        ]
    }
}