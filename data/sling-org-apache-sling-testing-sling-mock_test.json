{
    "sling-org-apache-sling-testing-sling-mock_6f4a286": {
        "bug_id": "sling-org-apache-sling-testing-sling-mock_6f4a286",
        "commit": "https://github.com/apache/sling-org-apache-sling-testing-sling-mock/commit/6f4a286eca4215c9a6c136e12a7b750aa6a2f495",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-testing-sling-mock/blob/6f4a286eca4215c9a6c136e12a7b750aa6a2f495/src/main/java/org/apache/sling/testing/mock/sling/context/ContextResourceResolverFactory.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-testing-sling-mock/contents/src/main/java/org/apache/sling/testing/mock/sling/context/ContextResourceResolverFactory.java?ref=6f4a286eca4215c9a6c136e12a7b750aa6a2f495",
                "deletions": 4,
                "filename": "src/main/java/org/apache/sling/testing/mock/sling/context/ContextResourceResolverFactory.java",
                "patch": "@@ -38,10 +38,14 @@ private ContextResourceResolverFactory() {\n     }\n \n     public static ResourceResolverFactory get(final ResourceResolverType resourceResolverType) {\n+        ResourceResolverType type = resourceResolverType;\n+        if (type == null) {\n+            type = MockSling.DEFAULT_RESOURCERESOLVER_TYPE;\n+        }\n         try {\n-            ResourceResolverFactory factory = MockSling.newResourceResolverFactory(resourceResolverType);\n+            ResourceResolverFactory factory = MockSling.newResourceResolverFactory(type);\n \n-            switch (resourceResolverType) {\n+            switch (type) {\n             case JCR_MOCK:\n                 initializeJcrMock(factory);\n                 break;\n@@ -52,12 +56,12 @@ public static ResourceResolverFactory get(final ResourceResolverType resourceRes\n                 initializeResourceResolverMock(factory);\n                 break;\n             default:\n-                throw new IllegalArgumentException(\"Invalid resource resolver type: \" + resourceResolverType);\n+                throw new IllegalArgumentException(\"Invalid resource resolver type: \" + type);\n             }\n \n             return factory;\n         } catch (Throwable ex) {\n-            throw new RuntimeException(\"Unable to initialize \" + resourceResolverType + \" resource resolver factory.\", ex);\n+            throw new RuntimeException(\"Unable to initialize \" + type + \" resource resolver factory.\", ex);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-testing-sling-mock/raw/6f4a286eca4215c9a6c136e12a7b750aa6a2f495/src/main/java/org/apache/sling/testing/mock/sling/context/ContextResourceResolverFactory.java",
                "sha": "8df107f62834c93169c8fd71a980bf847a89debd",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-testing-sling-mock/blob/6f4a286eca4215c9a6c136e12a7b750aa6a2f495/src/test/java/org/apache/sling/testing/mock/sling/context/SlingContextImplTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-testing-sling-mock/contents/src/test/java/org/apache/sling/testing/mock/sling/context/SlingContextImplTest.java?ref=6f4a286eca4215c9a6c136e12a7b750aa6a2f495",
                "deletions": 0,
                "filename": "src/test/java/org/apache/sling/testing/mock/sling/context/SlingContextImplTest.java",
                "patch": "@@ -200,6 +200,14 @@ public void testResourceResolverFactory() {\n         assertNotNull(factory);\n     }\n \n+    @Test\n+    public void testWithoutResourceResolverType() {\n+        SlingContextImpl contextTest = new SlingContextImpl();\n+        contextTest.setUp();\n+        ResourceResolverFactory factory = contextTest.getService(ResourceResolverFactory.class);\n+        assertNotNull(factory);\n+    }\n+\n     @Model(adaptables = SlingHttpServletRequest.class)\n     public interface RequestAttributeModel {\n         @Inject",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-testing-sling-mock/raw/6f4a286eca4215c9a6c136e12a7b750aa6a2f495/src/test/java/org/apache/sling/testing/mock/sling/context/SlingContextImplTest.java",
                "sha": "2c7aed5da944e5f4d4f56b57547f855e92193924",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-testing-sling-mock/blob/6f4a286eca4215c9a6c136e12a7b750aa6a2f495/src/test/java/org/apache/sling/testing/mock/sling/junit/SlingContextDefaultRRTypeTest.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-testing-sling-mock/contents/src/test/java/org/apache/sling/testing/mock/sling/junit/SlingContextDefaultRRTypeTest.java?ref=6f4a286eca4215c9a6c136e12a7b750aa6a2f495",
                "deletions": 0,
                "filename": "src/test/java/org/apache/sling/testing/mock/sling/junit/SlingContextDefaultRRTypeTest.java",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sling.testing.mock.sling.junit;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class SlingContextDefaultRRTypeTest {\n+\n+    // Run all unit tests for each resource resolver types listed here\n+    @Rule\n+    public SlingContext context = new SlingContext();\n+\n+    @Test\n+    public void testRequest() {\n+        assertNotNull(context.request());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-testing-sling-mock/raw/6f4a286eca4215c9a6c136e12a7b750aa6a2f495/src/test/java/org/apache/sling/testing/mock/sling/junit/SlingContextDefaultRRTypeTest.java",
                "sha": "d5579af362e49e0a3a6dc540a8342f72d2f10326",
                "status": "added"
            }
        ],
        "message": "SLING-4085 NPE when using SlingContext rule without constructor argument\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1633438 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-testing-sling-mock/commit/890db0f4aef6e35a9e58be5b64e59bba41b81ece",
        "patched_files": [
            "ContextResourceResolverFactory.java",
            "SlingContextImpl.java"
        ],
        "repo": "sling-org-apache-sling-testing-sling-mock",
        "unit_tests": [
            "SlingContextDefaultRRTypeTest.java",
            "SlingContextImplTest.java"
        ]
    }
}