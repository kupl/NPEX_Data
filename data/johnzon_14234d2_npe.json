[
    {
        "repo": "johnzon",
        "commit": "https://github.com/apache/johnzon/commit/14234d20ec87efdce26752eb586e390eeeaa1c73",
        "bug_id": "johnzon_14234d2",
        "message": "JOHNZON-54 JOHNZON-55 avoid NPE if no json value is provided + fixing primitive/enum handling when root in collections",
        "parent": "https://github.com/apache/johnzon/commit/0c105624dff86e909754921d0c78234c95b4da6f",
        "patched_files": [
            "Mapper.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 26,
                "raw_url": "https://github.com/apache/johnzon/raw/14234d20ec87efdce26752eb586e390eeeaa1c73/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java?ref=14234d20ec87efdce26752eb586e390eeeaa1c73",
                "filename": "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
                "deletions": 1,
                "sha": "8d94bf9610eca72af9bcfc94d17cb72caa05ab1e",
                "blob_url": "https://github.com/apache/johnzon/blob/14234d20ec87efdce26752eb586e390eeeaa1c73/johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java",
                "patch": "@@ -287,6 +287,18 @@ public void writeObject(final Object object, final OutputStream stream) {\n         doWriteHandlingNullObject(object, generator);\n     }\n \n+    public String writeArrayAsString(final Collection<?> instance) {\n+        final StringWriter writer = new StringWriter();\n+        writeArray(instance, writer);\n+        return writer.toString();\n+    }\n+\n+    public <T> String writeArrayAsString(final T[] instance) {\n+        final StringWriter writer = new StringWriter();\n+        writeArray(instance, writer);\n+        return writer.toString();\n+    }\n+\n     public String writeObjectAsString(final Object instance) {\n         final StringWriter writer = new StringWriter();\n         writeObject(instance, writer);\n@@ -322,6 +334,16 @@ private JsonGenerator doWriteObject(final JsonGenerator generator, final Object\n                 return gen;\n             }\n \n+            final JsonGenerator jsonGenerator = writePrimitives(generator, object);\n+            if (jsonGenerator != null) {\n+                return jsonGenerator;\n+            }\n+\n+            final Class<?> objectClass = object.getClass();\n+            if (objectClass.isEnum()) {\n+                return gen.write(findConverter(objectClass).toString(object));\n+            }\n+\n             gen = gen.writeStartObject();\n             gen = doWriteObjectBody(gen, object);\n             return gen.writeEnd();\n@@ -605,10 +627,13 @@ private Object buildObject(final Type inType, final JsonObject object) throws Ex\n                 classMapping.constructor.newInstance() : classMapping.constructor.newInstance(createParameters(classMapping, object));\n         for (final Map.Entry<String, Mappings.Setter> setter : classMapping.setters.entrySet()) {\n             final JsonValue jsonValue = object.get(setter.getKey());\n+            if (jsonValue == null) {\n+                continue;\n+            }\n+\n             final Mappings.Setter value = setter.getValue();\n             final AccessMode.Writer setterMethod = value.writer;\n             final Object convertedValue = toValue(jsonValue, value.converter, value.itemConverter, value.paramType);\n-\n             if (convertedValue != null) {\n                 setterMethod.write(t, convertedValue);\n             }",
                "changes": 27
            },
            {
                "status": "modified",
                "additions": 79,
                "raw_url": "https://github.com/apache/johnzon/raw/14234d20ec87efdce26752eb586e390eeeaa1c73/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java?ref=14234d20ec87efdce26752eb586e390eeeaa1c73",
                "filename": "johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java",
                "deletions": 2,
                "sha": "f5817bb8f2d11d8dc9ae182ef754710030bb2ca7",
                "blob_url": "https://github.com/apache/johnzon/blob/14234d20ec87efdce26752eb586e390eeeaa1c73/johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java",
                "patch": "@@ -28,6 +28,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.StringReader;\n import java.io.StringWriter;\n+import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -84,12 +85,65 @@ public void readCollection() { // mainly API test\n         assertEquals(1, object.size());\n         final Collection<TheObject> object2 = new MapperBuilder().build()\n                 .readJohnzonCollection(new ByteArrayInputStream(\"[{}]\".getBytes()),\n-                        new JohnzonCollectionType<List<TheObject>>() {\n-                        });\n+                    new JohnzonCollectionType<List<TheObject>>() {\n+                    });\n         assertNotNull(object2);\n         assertEquals(1, object2.size());\n     }\n \n+    @Test\n+    public void testShouldMapACollection() throws Exception {\n+        final Mapper mapper = new MapperBuilder().setAttributeOrder(new Comparator<String>() {\n+            @Override\n+            public int compare(final String o1, final String o2) {\n+                return o1.compareTo(o2);\n+            }\n+        }).build();\n+        final String json = \"[\" +\n+            \"{\\\"name\\\":\\\"addKey\\\"},\" +\n+            \"{\\\"action\\\":\\\"REMOVE\\\",\\\"name\\\":\\\"removeKey\\\"}]\";\n+\n+        final ParameterizedType type = new JohnzonParameterizedType(List.class, Command.class);\n+        final List<Command> properties = new ArrayList(mapper.readCollection(new StringReader(json), type));\n+\n+        assertNotNull(properties);\n+        assertEquals(2, properties.size());\n+        assertEquals(\"addKey\", properties.get(0).getName());\n+        assertEquals(\"removeKey\", properties.get(1).getName());\n+        assertEquals(Command.Action.REMOVE, properties.get(1).getAction());\n+        assertEquals(json, mapper.writeArrayAsString(properties));\n+    }\n+\n+    @Test\n+    public void enumCollection() throws Exception {\n+        final Mapper mapper = new MapperBuilder().build();\n+        final String json = \"[\\\"REMOVE\\\",\\\"ADD\\\"]\";\n+\n+        final ParameterizedType type = new JohnzonParameterizedType(List.class, Command.Action.class);\n+        final List<Command.Action> properties = new ArrayList(mapper.readCollection(new StringReader(json), type));\n+\n+        assertNotNull(properties);\n+        assertEquals(2, properties.size());\n+        assertEquals(Command.Action.ADD, properties.get(1));\n+        assertEquals(Command.Action.REMOVE, properties.get(0));\n+        assertEquals(json, mapper.writeArrayAsString(properties));\n+    }\n+\n+    @Test\n+    public void primitiveCollection() throws Exception {\n+        final Mapper mapper = new MapperBuilder().build();\n+        final String json = \"[1,2]\";\n+\n+        final ParameterizedType type = new JohnzonParameterizedType(List.class, Integer.class);\n+        final List<Integer> properties = new ArrayList(mapper.readCollection(new StringReader(json), type));\n+\n+        assertNotNull(properties);\n+        assertEquals(2, properties.size());\n+        assertEquals(2, properties.get(1).intValue());\n+        assertEquals(1, properties.get(0).intValue());\n+        assertEquals(json, mapper.writeArrayAsString(properties));\n+    }\n+\n     @Test\n     public void readMapObject() {\n         final Map<String, Object> data = new MapperBuilder().build()\n@@ -936,6 +990,29 @@ public void setValue(final String value) {\n         }\n     }\n \n+    public static class Command {\n+        public enum Action { ADD, REMOVE }\n+\n+        private Action action;\n+        private String name;\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(final String name) {\n+            this.name = name;\n+        }\n+\n+        public Action getAction() {\n+            return action;\n+        }\n+\n+        public void setAction(final Action action) {\n+            this.action = action;\n+        }\n+    }\n+\n     /*public static class ByteArray {\n         \n         public byte[] byteArray;",
                "changes": 81
            }
        ],
        "unit_tests": [
            "MapperTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "johnzon-mapper/src/test/java/org/apache/johnzon/mapper/MapperTest.java",
        "buggy_files": [
            "johnzon-mapper/src/main/java/org/apache/johnzon/mapper/Mapper.java"
        ],
        "fixed": true
    }
]