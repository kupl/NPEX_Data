{
    "uima-ruta_05aaeba": {
        "bug_id": "uima-ruta_05aaeba",
        "commit": "https://github.com/apache/uima-ruta/commit/05aaeba6c5d78f570a6fe32e45ec1a17640201d2",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/uima-ruta/blob/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java?ref=05aaeba6c5d78f570a6fe32e45ec1a17640201d2",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java",
                "patch": "@@ -21,6 +21,7 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.uima.cas.FeatureStructure;\n@@ -230,7 +231,7 @@ public String getStringValue(MatchContext context, RutaStream stream) {\n         }\n       }\n     }\n-    return null;\n+    return Collections.emptyList();\n   }\n \n   public MatchReference getReference() {",
                "raw_url": "https://github.com/apache/uima-ruta/raw/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java",
                "sha": "ba460c28bc8a7ca1a90919cde14a4fd8dc501c08",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/uima-ruta/blob/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java?ref=05aaeba6c5d78f570a6fe32e45ec1a17640201d2",
                "deletions": 0,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java",
                "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.uima.ruta.expression;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.uima.cas.CAS;\n+import org.apache.uima.ruta.engine.Ruta;\n+import org.apache.uima.ruta.engine.RutaTestUtils;\n+import org.apache.uima.ruta.engine.RutaTestUtils.TestFeature;\n+import org.junit.Test;\n+\n+public class AnnotationTypeExpressionTest {\n+\n+  @Test\n+  public void testEmptyAnnotationList() throws Exception {\n+    String document = \"This is a test.\";\n+    String script = \"\";\n+    script += \"Document{-> CREATE(Struct1, \\\"as\\\" = COMMA)};\\n\";\n+    script += \"Struct1.as{-> T1};\\n\";\n+    \n+    Map<String, String> complexTypes = new TreeMap<String, String>();\n+    complexTypes.put(\"Struct1\", \"uima.tcas.Annotation\");\n+    complexTypes.put(\"Struct2\", \"uima.tcas.Annotation\");\n+    Map<String, List<TestFeature>> features = new TreeMap<String, List<TestFeature>>();\n+    List<TestFeature> list = new ArrayList<RutaTestUtils.TestFeature>();\n+    features.put(\"Struct1\", list);\n+    features.put(\"Struct2\", list);\n+    list.add(new TestFeature(\"a\", \"\", \"uima.tcas.Annotation\"));\n+    list.add(new TestFeature(\"as\", \"\", \"uima.cas.FSArray\"));\n+    \n+    CAS cas = RutaTestUtils.getCAS(document, complexTypes, features);\n+    Ruta.apply(cas, script);    \n+    \n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 0);\n+  }\n+\n+}",
                "raw_url": "https://github.com/apache/uima-ruta/raw/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java",
                "sha": "82271435a5c60b6d51baf37667f1adb79c65f0fe",
                "status": "added"
            }
        ],
        "message": "UIMA-5370\n- avoid NPE\n- added test\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1787078 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/78816764bcbda395a6ddbb8e965165b53500dc26",
        "repo": "uima-ruta",
        "unit_tests": [
            "AnnotationTypeExpressionTest.java"
        ]
    },
    "uima-ruta_2f9b208": {
        "bug_id": "uima-ruta_2f9b208",
        "commit": "https://github.com/apache/uima-ruta/commit/2f9b208c335f5cadda3b9345218d3a460c809e2c",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/uima-ruta/blob/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java?ref=2f9b208c335f5cadda3b9345218d3a460c809e2c",
                "deletions": 0,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java",
                "patch": "@@ -26,6 +26,8 @@\n import org.apache.commons.lang3.StringUtils;\r\n import org.apache.uima.ruta.action.AbstractRutaAction;\r\n import org.apache.uima.ruta.action.AddAction;\r\n+import org.apache.uima.ruta.action.AddFilterTypeAction;\r\n+import org.apache.uima.ruta.action.AddRetainTypeAction;\r\n import org.apache.uima.ruta.action.AssignAction;\r\n import org.apache.uima.ruta.action.CallAction;\r\n import org.apache.uima.ruta.action.ClearAction;\r\n@@ -57,6 +59,8 @@\n import org.apache.uima.ruta.action.MergeAction;\r\n import org.apache.uima.ruta.action.RemoveAction;\r\n import org.apache.uima.ruta.action.RemoveDuplicateAction;\r\n+import org.apache.uima.ruta.action.RemoveFilterTypeAction;\r\n+import org.apache.uima.ruta.action.RemoveRetainTypeAction;\r\n import org.apache.uima.ruta.action.ReplaceAction;\r\n import org.apache.uima.ruta.action.RetainTypeAction;\r\n import org.apache.uima.ruta.action.SetFeatureAction;\r\n@@ -102,6 +106,10 @@ public String verbalizeName(AbstractRutaAction action) {\n       return \"FILL\";\r\n     } else if (action instanceof FilterTypeAction) {\r\n       return \"FILTERTYPE\";\r\n+    } else if (action instanceof AddFilterTypeAction) {\r\n+      return \"ADDFILTERTYPE\";\r\n+    } else if (action instanceof RemoveFilterTypeAction) {\r\n+      return \"REMOVEFILTERTYPE\";\r\n     } else if (action instanceof LogAction) {\r\n       return \"LOG\";\r\n     } else if (action instanceof MarkOnceAction) {\r\n@@ -124,6 +132,10 @@ public String verbalizeName(AbstractRutaAction action) {\n       return \"REPLACE\";\r\n     } else if (action instanceof RetainTypeAction) {\r\n       return \"RETAINTYPE\";\r\n+    } else if (action instanceof AddRetainTypeAction) {\r\n+      return \"ADDRETAINTYPE\";\r\n+    } else if (action instanceof RemoveRetainTypeAction) {\r\n+      return \"REMOVERETAINTYPE\";\r\n     } else if (action instanceof SetFeatureAction) {\r\n       String name = \"SETFEATURE\";\r\n       return name;\r\n@@ -268,6 +280,12 @@ public String verbalize(AbstractRutaAction action) {\n       FilterTypeAction a = (FilterTypeAction) action;\r\n       return a.getList().isEmpty() ? \"FILTERTYPE\" : \"FILTERTYPE(\"\r\n               + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof AddFilterTypeAction) {\r\n+      AddFilterTypeAction a = (AddFilterTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof RemoveFilterTypeAction) {\r\n+      RemoveFilterTypeAction a = (RemoveFilterTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n     } else if (action instanceof LogAction) {\r\n       LogAction a = (LogAction) action;\r\n       return name + verbalizer.verbalize(a.getText()) + \", \" + a.getLevel() + \")\";\r\n@@ -333,6 +351,12 @@ public String verbalize(AbstractRutaAction action) {\n       RetainTypeAction a = (RetainTypeAction) action;\r\n       return a.getList().isEmpty() ? \"RETAINTYPE\" : \"RETAINTYPE(\"\r\n               + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof AddRetainTypeAction) {\r\n+      AddRetainTypeAction a = (AddRetainTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof RemoveRetainTypeAction) {\r\n+      RemoveRetainTypeAction a = (RemoveRetainTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n     } else if (action instanceof SetFeatureAction) {\r\n       SetFeatureAction a = (SetFeatureAction) action;\r\n       String e1 = verbalizer.verbalize(a.getFeatureStringExpression());\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java",
                "sha": "c7727bfd3e30cbc6441f5362f8a7b6e63cf6d7de",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/uima-ruta/blob/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java?ref=2f9b208c335f5cadda3b9345218d3a460c809e2c",
                "deletions": 0,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java",
                "patch": "@@ -61,6 +61,9 @@ public String verbalizeTypeList(List<Type> list) {\n   }\r\n \r\n   public String verbalizeExpressionList(List<? extends IRutaExpression> list) {\r\n+    if(list == null) {\r\n+      return \"\";\r\n+    }\r\n     StringBuilder result = new StringBuilder();\r\n     Iterator<? extends IRutaExpression> it = list.iterator();\r\n     while (it.hasNext()) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java",
                "sha": "00ff6253967fc6072f6545af8948a23bb659821f",
                "status": "modified"
            }
        ],
        "message": "UIMA-4976\n- avoid npe for empty macros\n- add verbalization of add/remove filterings\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1748728 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674",
        "repo": "uima-ruta",
        "unit_tests": [
            "ActionVerbalizerTest.java"
        ]
    },
    "uima-ruta_62a3cce": {
        "bug_id": "uima-ruta_62a3cce",
        "commit": "https://github.com/apache/uima-ruta/commit/62a3cce74eb18209fb90136a806331a589572312",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/uima-ruta/blob/62a3cce74eb18209fb90136a806331a589572312/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java?ref=62a3cce74eb18209fb90136a806331a589572312",
                "deletions": 10,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "patch": "@@ -71,7 +71,6 @@\n import org.apache.uima.ruta.parser.RutaLexer;\r\n import org.apache.uima.ruta.parser.RutaParser;\r\n import org.apache.uima.ruta.seed.RutaAnnotationSeeder;\r\n-import org.apache.uima.ruta.type.RutaBasic;\r\n import org.apache.uima.ruta.verbalize.RutaVerbalizer;\r\n import org.apache.uima.ruta.visitor.CreatedByVisitor;\r\n import org.apache.uima.ruta.visitor.DebugInfoCollectorVisitor;\r\n@@ -725,7 +724,7 @@ private void initializeScript(String viewName) throws AnalysisEngineProcessExcep\n       } catch (RecognitionException e) {\r\n         throw new AnalysisEngineProcessException(e);\r\n       }\r\n-    } else if(mainScript != null) {\r\n+    } else if (mainScript != null) {\r\n       String scriptLocation = locate(mainScript, scriptPaths, SCRIPT_FILE_EXTENSION);\r\n       if (scriptLocation == null) {\r\n         try {\r\n@@ -750,10 +749,10 @@ private void initializeScript(String viewName) throws AnalysisEngineProcessExcep\n         }\r\n       }\r\n     }\r\n-    if(script == null) {\r\n+    if (script == null) {\r\n       return;\r\n     }\r\n-    \r\n+\r\n     Map<String, RutaModule> additionalScriptsMap = new HashMap<String, RutaModule>();\r\n     Map<String, AnalysisEngine> additionalEnginesMap = new HashMap<String, AnalysisEngine>();\r\n \r\n@@ -1131,18 +1130,22 @@ private String collectionToString(Object[] collection) {\n   @Override\r\n   public void batchProcessComplete() throws AnalysisEngineProcessException {\r\n     super.batchProcessComplete();\r\n-    Collection<AnalysisEngine> values = script.getEngines().values();\r\n-    for (AnalysisEngine each : values) {\r\n-      each.batchProcessComplete();\r\n+    if (script != null) {\r\n+      Collection<AnalysisEngine> values = script.getEngines().values();\r\n+      for (AnalysisEngine each : values) {\r\n+        each.batchProcessComplete();\r\n+      }\r\n     }\r\n   }\r\n \r\n   @Override\r\n   public void collectionProcessComplete() throws AnalysisEngineProcessException {\r\n     super.collectionProcessComplete();\r\n-    Collection<AnalysisEngine> values = script.getEngines().values();\r\n-    for (AnalysisEngine each : values) {\r\n-      each.collectionProcessComplete();\r\n+    if (script != null) {\r\n+      Collection<AnalysisEngine> values = script.getEngines().values();\r\n+      for (AnalysisEngine each : values) {\r\n+        each.collectionProcessComplete();\r\n+      }\r\n     }\r\n   }\r\n \r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/62a3cce74eb18209fb90136a806331a589572312/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "sha": "5b27ad854595a4ae89567497f3c7266815745862",
                "status": "modified"
            }
        ],
        "message": "UIMA-4613\n- avoid NPE for template descriptor import\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1709853 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/8d666d2d4b38dd9dd57e7059cc9ebe8e9cd66bf1",
        "repo": "uima-ruta",
        "unit_tests": [
            "RutaEngineTest.java"
        ]
    },
    "uima-ruta_65d892a": {
        "bug_id": "uima-ruta_65d892a",
        "commit": "https://github.com/apache/uima-ruta/commit/65d892aaa73f4272d367df0239b107378e3fe5aa",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/uima-ruta/blob/65d892aaa73f4272d367df0239b107378e3fe5aa/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java?ref=65d892aaa73f4272d367df0239b107378e3fe5aa",
                "deletions": 3,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "patch": "@@ -615,11 +615,11 @@ private void initializeScript(String viewName) throws AnalysisEngineProcessExcep\n       } catch (IOException e) {\r\n         throw new AnalysisEngineProcessException(new FileNotFoundException(\"Script [\" + mainScript\r\n                 + \"] cannot be found at [\" + collectionToString(scriptPaths)\r\n-                + \"] with extension .ruta\"));\r\n+                + \"] or classpath with extension .ruta\"));\r\n       } catch (RecognitionException e) {\r\n         throw new AnalysisEngineProcessException(new FileNotFoundException(\"Script [\" + mainScript\r\n                 + \"] cannot be found at [\" + collectionToString(scriptPaths)\r\n-                + \"] with extension .ruta\"));\r\n+                + \"] or classpath  with extension .ruta\"));\r\n       }\r\n     } else {\r\n       try {\r\n@@ -876,6 +876,9 @@ private RutaModule loadScript(String scriptLocation) throws IOException, Recogni\n \r\n   private RutaModule loadScriptIS(String scriptLocation) throws IOException, RecognitionException {\r\n     InputStream scriptInputStream = getClass().getClassLoader().getResourceAsStream(scriptLocation);\r\n+    if (scriptInputStream == null) {\r\n+            throw new FileNotFoundException(\"No script found in location [\" + scriptLocation + \"]\");\r\n+    }\r\n     CharStream st = new ANTLRInputStream(scriptInputStream, scriptEncoding);\r\n     RutaLexer lexer = new RutaLexer(st);\r\n     CommonTokenStream tokens = new CommonTokenStream(lexer);\r\n@@ -914,9 +917,15 @@ private String collectionToString(Collection<?> collection) {\n   }\r\n \r\n   private String collectionToString(Object[] collection) {\r\n-    return collectionToString(Arrays.asList(collection));\r\n+    if (collection == null) {\r\n+      return \"\";\r\n+    }\r\n+    else {\r\n+      return collectionToString(Arrays.asList(collection));\r\n+    }\r\n   }\r\n \r\n+  @Override\r\n   public void batchProcessComplete() throws AnalysisEngineProcessException {\r\n     super.batchProcessComplete();\r\n     Collection<AnalysisEngine> values = script.getEngines().values();\r\n@@ -925,6 +934,7 @@ public void batchProcessComplete() throws AnalysisEngineProcessException {\n     }\r\n   }\r\n \r\n+  @Override\r\n   public void collectionProcessComplete() throws AnalysisEngineProcessException {\r\n     super.collectionProcessComplete();\r\n     Collection<AnalysisEngine> values = script.getEngines().values();\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/65d892aaa73f4272d367df0239b107378e3fe5aa/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "sha": "3a93618859b04f8efb9bbd52d814969b6f0a22c2",
                "status": "modified"
            }
        ],
        "message": "[UIMA-3254] NPE if script cannot be found\n- Generate an interna FileNotFoundException in loadScriptIS\n- This is cought by initializeScript creating its own FileNotFoundException\n- Changed collectionToString to return \"\" when passed null instead of throwing another NPE\n- Added missing @Override annotations\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/ruta/trunk@1521087 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/c45d665c6cda22137e908e0458479e76520cca86",
        "repo": "uima-ruta",
        "unit_tests": [
            "RutaEngineTest.java"
        ]
    },
    "uima-ruta_7bb769c": {
        "bug_id": "uima-ruta_7bb769c",
        "commit": "https://github.com/apache/uima-ruta/commit/7bb769cdbab112f3752a1f9389c3d78b299c907d",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/uima-ruta/blob/7bb769cdbab112f3752a1f9389c3d78b299c907d/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java?ref=7bb769cdbab112f3752a1f9389c3d78b299c907d",
                "deletions": 14,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java",
                "patch": "@@ -67,21 +67,24 @@ public void addExternalVerbalizers(IRutaExtension verbalizer) {\n   }\r\n \r\n   public String verbalize(Object element) {\r\n-    if (externalVerbalizers.keySet().contains(element.getClass()) && element instanceof RutaElement) {\r\n-      return externalVerbalizers.get(element.getClass()).verbalize((RutaElement) element, this);\r\n-    } else if (element instanceof AbstractRutaAction) {\r\n-      return actionVerbalizer.verbalize((AbstractRutaAction) element);\r\n-    } else if (element instanceof AbstractRutaCondition) {\r\n-      return conditionVerbalizer.verbalize((AbstractRutaCondition) element);\r\n-    } else if (element instanceof IRutaExpression) {\r\n-      return expressionVerbalizer.verbalize((RutaExpression) element);\r\n-    } else if (element instanceof RutaBlock) {\r\n-      return verbalize((RutaBlock) element, false);\r\n-    } else if (element instanceof RutaElement) {\r\n-      return scriptVerbalizer.verbalize((RutaElement) element);\r\n-    } else {\r\n-      return element.getClass().getSimpleName();\r\n+    if (element != null) {\r\n+      if (externalVerbalizers.keySet().contains(element.getClass()) && element instanceof RutaElement) {\r\n+        return externalVerbalizers.get(element.getClass()).verbalize((RutaElement) element, this);\r\n+      } else if (element instanceof AbstractRutaAction) {\r\n+        return actionVerbalizer.verbalize((AbstractRutaAction) element);\r\n+      } else if (element instanceof AbstractRutaCondition) {\r\n+        return conditionVerbalizer.verbalize((AbstractRutaCondition) element);\r\n+      } else if (element instanceof IRutaExpression) {\r\n+        return expressionVerbalizer.verbalize((RutaExpression) element);\r\n+      } else if (element instanceof RutaBlock) {\r\n+        return verbalize((RutaBlock) element, false);\r\n+      } else if (element instanceof RutaElement) {\r\n+        return scriptVerbalizer.verbalize((RutaElement) element);\r\n+      } else {\r\n+        return element.getClass().getSimpleName();\r\n+      }\r\n     }\r\n+    return \"\";\r\n   }\r\n \r\n   public String verbalizeName(RutaElement element) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/7bb769cdbab112f3752a1f9389c3d78b299c907d/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java",
                "sha": "86d23cacb99ade94ddb8aad2af7d18c575096826",
                "status": "modified"
            }
        ],
        "message": "HD-6029: added NPE check in verbalization\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1859298 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/7da5d3adfd1e485e5bf49a6998b4c025acc62c2d",
        "repo": "uima-ruta",
        "unit_tests": [
            "RutaVerbalizerTest.java"
        ]
    },
    "uima-ruta_9a24355": {
        "bug_id": "uima-ruta_9a24355",
        "commit": "https://github.com/apache/uima-ruta/commit/9a24355d4df677524647f56f856f125734c9190c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/uima-ruta/blob/9a24355d4df677524647f56f856f125734c9190c/ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java?ref=9a24355d4df677524647f56f856f125734c9190c",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java",
                "patch": "@@ -98,7 +98,8 @@ public ScriptApply apply(RutaStream stream, InferenceCrowd crowd) {\n           ruleMatch.addMatched(0, afs);\r\n         }\r\n       }\r\n-      if (!ruleMatch.getMatchedAnnotationsOfRoot().isEmpty()) {\r\n+      List<AnnotationFS> matchedAnnotationsOfRoot = ruleMatch.getMatchedAnnotationsOfRoot();\r\n+      if (matchedAnnotationsOfRoot != null && !matchedAnnotationsOfRoot.isEmpty()) {\r\n         ruleApply.add(ruleMatch);\r\n       }\r\n     }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/9a24355d4df677524647f56f856f125734c9190c/ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java",
                "sha": "eed68e2406540cbcfe8ca1cfa114241cb2a1c57f",
                "status": "modified"
            }
        ],
        "message": "UIMA-3051\n- fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/ruta/trunk@1500266 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/217ac69ef38aeb8125b83b997ab70c173a85fc35",
        "repo": "uima-ruta",
        "unit_tests": [
            "RegExpRuleTest.java"
        ]
    },
    "uima-ruta_b9b202c": {
        "bug_id": "uima-ruta_b9b202c",
        "commit": "https://github.com/apache/uima-ruta/commit/b9b202cf48a0dea611235f03c87ca8f9c481f013",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/uima-ruta/blob/b9b202cf48a0dea611235f03c87ca8f9c481f013/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g?ref=b9b202cf48a0dea611235f03c87ca8f9c481f013",
                "deletions": 3,
                "filename": "ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "patch": "@@ -142,20 +142,20 @@ public void setExternalFactory(RutaExternalFactory factory) {\n \t\r\n    \t    if (e instanceof NoViableAltException) {\r\n \t      NoViableAltException nvae = (NoViableAltException) e;\r\n-\t      String msg = \"Error in line \" + nvae.line + \", \\\"\" + text + \"\\\": found no viable alternative\";\r\n+\t      String msg = \"Error in \"+moduleName+\",  line \" + nvae.line + \", \\\"\" + text + \"\\\": found no viable alternative\";\r\n \t      emitErrorMessage(msg);\r\n \t    } else if (e instanceof MismatchedTokenException) {\r\n \t      MismatchedTokenException mte = (MismatchedTokenException) e;\r\n \t      int expectedInt = mte.expecting;\r\n \t      String stringExpected = getTokenNames()[expectedInt];\r\n-\t      String msg = \"Error in line \" + line + \", \\\"\" + text + \"\\\": expected \" + stringExpected\r\n+\t      String msg = \"Error in \"+moduleName+\", line \" + line + \", \\\"\" + text + \"\\\": expected \" + stringExpected\r\n \t              + \", but found \" + stringFound;\r\n \t      emitErrorMessage(msg);\r\n \t    } else if (e instanceof MissingTokenException) {\r\n \t      MissingTokenException mte = (MissingTokenException) e;\r\n     \t      int missingType = mte.getMissingType();\r\n     \t      String stringMissing = getTokenNames()[missingType];\r\n-    \t      String msg = \"Error in line \" + line + \", \\\"\" + text + \"\\\": missing \" + stringMissing\r\n+    \t      String msg = \"Error in \"+moduleName+\",  line \" + line + \", \\\"\" + text + \"\\\": missing \" + stringMissing\r\n                     + \", but found \" + stringFound;\r\n     \t      emitErrorMessage(msg);\r\n \t    } else {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/b9b202cf48a0dea611235f03c87ca8f9c481f013/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "sha": "3981a086dcd5dea5d705fdc8524628678b4be2b1",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/uima-ruta/blob/b9b202cf48a0dea611235f03c87ca8f9c481f013/ruta-maven-plugin/src/main/java/org/apache/uima/ruta/maven/RutaGenerateDescriptorMojo.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-maven-plugin/src/main/java/org/apache/uima/ruta/maven/RutaGenerateDescriptorMojo.java?ref=b9b202cf48a0dea611235f03c87ca8f9c481f013",
                "deletions": 3,
                "filename": "ruta-maven-plugin/src/main/java/org/apache/uima/ruta/maven/RutaGenerateDescriptorMojo.java",
                "patch": "@@ -297,11 +297,14 @@ private void createDescriptors(RutaDescriptorFactory factory, URLClassLoader cla\n           RutaBuildOptions options, RutaDescriptorInformation descriptorInformation)\n           throws IOException, RecognitionException, InvalidXMLException,\n           ResourceInitializationException, URISyntaxException, SAXException {\n-    String packageString = descriptorInformation.getPackageString().replaceAll(\"[.]\", \"/\");\n-    String engineOutput = new File(analysisEngineOutputDirectory, packageString + \"/\"\n+    String packageString = \"\";\n+    if(!StringUtils.isBlank(descriptorInformation.getPackageString())) {\n+    \tpackageString = descriptorInformation.getPackageString().replaceAll(\"[.]\", \"/\").concat(\"/\");\n+    }\n+    String engineOutput = new File(analysisEngineOutputDirectory, packageString\n             + descriptorInformation.getScriptName() + analysisEngineSuffix + \".xml\")\n             .getAbsolutePath();\n-    String typeSystemOutput = new File(typeSystemOutputDirectory, packageString + \"/\"\n+    String typeSystemOutput = new File(typeSystemOutputDirectory, packageString\n             + descriptorInformation.getScriptName() + typeSystemSuffix + \".xml\").getAbsolutePath();\n     Pair<AnalysisEngineDescription, TypeSystemDescription> descriptions = factory\n             .createDescriptions(engineOutput, typeSystemOutput, descriptorInformation, options,",
                "raw_url": "https://github.com/apache/uima-ruta/raw/b9b202cf48a0dea611235f03c87ca8f9c481f013/ruta-maven-plugin/src/main/java/org/apache/uima/ruta/maven/RutaGenerateDescriptorMojo.java",
                "sha": "3e3b3c2c95fe6c87114b73a656f34a40cb29a35e",
                "status": "modified"
            }
        ],
        "message": "UIMA-3650\n- fixed NPE for building without package def\n- improve error message in parser\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1674756 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/b3b7cff5fd59be4afc8cd43e690871ca2efd523d",
        "repo": "uima-ruta",
        "unit_tests": [
            "RutaGenerateDescriptorMojoTest.java"
        ]
    },
    "uima-ruta_dddd9d8": {
        "bug_id": "uima-ruta_dddd9d8",
        "commit": "https://github.com/apache/uima-ruta/commit/dddd9d8c0fd32b656958febda4f96181970db6fe",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/uima-ruta/blob/dddd9d8c0fd32b656958febda4f96181970db6fe/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java?ref=dddd9d8c0fd32b656958febda4f96181970db6fe",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "patch": "@@ -188,7 +188,7 @@ public String verbalizeRuleElement(RuleElement re) {\n         }\r\n       }\r\n       List<RutaStatement> inlinedActionRules = are.getInlinedActionRules();\r\n-      if (inlinedConditionRules != null && !inlinedActionRules.isEmpty()) {\r\n+      if (inlinedActionRules != null && !inlinedActionRules.isEmpty()) {\r\n         result.append(THEN);\r\n         result.append(CBOPEN);\r\n         for (RutaStatement rutaStatement : inlinedActionRules) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/dddd9d8c0fd32b656958febda4f96181970db6fe/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "sha": "d3b1c210aad0ea7cc8e64960b39eef350ddd1f63",
                "status": "modified"
            }
        ],
        "message": "no jira - fixed possible NPE in explanation\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1696531 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/ca4cee657f508f85ff6968bce7616f656aedfa90",
        "repo": "uima-ruta",
        "unit_tests": [
            "ScriptVerbalizerTest.java"
        ]
    },
    "uima-ruta_fe67e50": {
        "bug_id": "uima-ruta_fe67e50",
        "commit": "https://github.com/apache/uima-ruta/commit/fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.uima.ruta.rule.MatchContext;\r\n import org.apache.uima.ruta.rule.RuleElement;\r\n import org.apache.uima.ruta.rule.RuleMatch;\r\n+import org.apache.uima.ruta.rule.RutaMatcher;\r\n import org.apache.uima.ruta.rule.RutaRuleElement;\r\n import org.apache.uima.ruta.visitor.InferenceCrowd;\r\n \r\n@@ -57,7 +58,10 @@ public void execute(MatchContext context, RutaStream stream, InferenceCrowd crow\n \r\n     Type type = null;\r\n     if (element instanceof RutaRuleElement) {\r\n-      type = ((RutaRuleElement) element).getMatcher().getType(parent, stream);\r\n+      RutaMatcher matcher = ((RutaRuleElement) element).getMatcher();\r\n+      if (matcher != null) {\r\n+        type = matcher.getType(parent, stream);\r\n+      }\r\n     }\r\n     if (type == null) {\r\n       return;\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java",
                "sha": "0541a035947c85a0f2e8835373bced24cbe00689",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 0,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java",
                "patch": "@@ -122,6 +122,9 @@ private void setRuleElementAnchor() {\n   private boolean setRuleElementAnchorRecursively(RuleElement ruleElement) {\n     if (ruleElement instanceof RutaRuleElement) {\n       RutaMatcher matcher = ((RutaRuleElement) ruleElement).getMatcher();\n+      if (matcher == null) {\n+        return false;\n+      }\n       IRutaExpression expression = matcher.getExpression();\n       if (expression instanceof AnnotationTypeExpression) {\n         MatchReference reference = ((AnnotationTypeExpression) expression).getReference();",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java",
                "sha": "a1353ef97f8ea3fab3ff9de3c268e4e80caa4204",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 2,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.uima.ruta.rule.AbstractRuleMatch;\r\n import org.apache.uima.ruta.rule.RuleApply;\r\n import org.apache.uima.ruta.rule.RuleMatch;\r\n+import org.apache.uima.ruta.rule.RutaMatcher;\r\n import org.apache.uima.ruta.rule.RutaRule;\r\n import org.apache.uima.ruta.rule.RutaRuleElement;\r\n import org.apache.uima.ruta.visitor.InferenceCrowd;\r\n@@ -59,8 +60,12 @@ public ScriptApply apply(RutaStream stream, InferenceCrowd crowd) {\n           continue;\r\n         }\r\n         // TODO refactor!!\r\n-        Type type = ((RutaRuleElement) rule.getRuleElements().get(0)).getMatcher()\r\n-                .getType(getParent() == null ? this : getParent(), stream);\r\n+        RutaMatcher matcher = ((RutaRuleElement) rule.getRuleElements().get(0)).getMatcher();\r\n+        if (matcher == null) {\r\n+          continue;\r\n+        }\r\n+\r\n+        Type type = matcher.getType(getParent() == null ? this : getParent(), stream);\r\n         RutaStream window = stream.getWindowStream(each, type);\r\n         for (RutaStatement element : getElements()) {\r\n           if (element != null) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java",
                "sha": "9dc1f51ffb70420210e07659bf405dd4092ab88f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.uima.ruta.rule.EvaluatedCondition;\r\n import org.apache.uima.ruta.rule.MatchContext;\r\n import org.apache.uima.ruta.rule.RuleElement;\r\n+import org.apache.uima.ruta.rule.RutaMatcher;\r\n import org.apache.uima.ruta.rule.RutaRuleElement;\r\n import org.apache.uima.ruta.type.RutaBasic;\r\n import org.apache.uima.ruta.visitor.InferenceCrowd;\r\n@@ -91,7 +92,10 @@ public EvaluatedCondition eval(MatchContext context, RutaStream stream, Inferenc\n     List<Type> targetTypes = new ArrayList<Type>();\r\n     if (element instanceof RutaRuleElement) {\r\n       RutaRuleElement re = (RutaRuleElement) element;\r\n-      targetTypes.add(re.getMatcher().getType(element.getParent(), stream));\r\n+      RutaMatcher matcher = re.getMatcher();\r\n+      if (matcher != null) {\r\n+        targetTypes.add(matcher.getType(element.getParent(), stream));\r\n+      }\r\n     } else {\r\n       targetTypes.add(annotation.getType());\r\n     }\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java",
                "sha": "577309c883c05838f164be64ada4390b7c5d7e53",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 1,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java",
                "patch": "@@ -473,7 +473,7 @@ private ComposedRuleElementMatch getContainerMatchOfNextElement(\n           Type type = matcher.getType(parent, stream);\r\n           iterator = getIteratorOfType(after, type, annotation, stream);\r\n         }\r\n-      } else {\r\n+      } else if (matcher != null) {\r\n         // fallback\r\n         Type type = matcher.getType(parent, stream);\r\n         iterator = getIteratorOfType(after, type, annotation, stream);\r\n@@ -580,6 +580,9 @@ private ComposedRuleElementMatch getContainerMatchOfNextElement(\n           RutaStream stream, InferenceCrowd crowd) {\r\n     List<RuleMatch> result = new ArrayList<RuleMatch>();\r\n     RutaLiteralMatcher matcher = (RutaLiteralMatcher) nextElement.getMatcher();\r\n+    if (matcher == null) {\r\n+      return result;\r\n+    }\r\n     IStringExpression expression = matcher.getExpression();\r\n     MatchContext context = new MatchContext(this, ruleMatch, true);\r\n     String stringValue = expression.getStringValue(context, stream);\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java",
                "sha": "658aad357646300b1965d53fdc4fa6fd2da0efee",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 8,
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "patch": "@@ -156,14 +156,19 @@ public String verbalizeRuleElement(RuleElement re) {\n       RutaRuleElement tmre = (RutaRuleElement) re;\r\n       RutaMatcher matcher = tmre.getMatcher();\r\n       // action-only rule\r\n-      IRutaExpression expression = matcher.getExpression();\r\n-      boolean actionOnlyRule = expression == null;\r\n-      if (expression != null) {\r\n-        String verbalize = verbalizer.verbalize(expression);\r\n-        if (StringUtils.isBlank(verbalize)) {\r\n-          actionOnlyRule = true;\r\n-        } else {\r\n-          result.append(verbalize);\r\n+      boolean actionOnlyRule = false;\r\n+      if (matcher == null) {\r\n+        result.append(\"_\");\r\n+      } else {\r\n+        IRutaExpression expression = matcher.getExpression();\r\n+        actionOnlyRule = expression == null;\r\n+        if (expression != null) {\r\n+          String verbalize = verbalizer.verbalize(expression);\r\n+          if (StringUtils.isBlank(verbalize)) {\r\n+            actionOnlyRule = true;\r\n+          } else {\r\n+            result.append(verbalize);\r\n+          }\r\n         }\r\n       }\r\n       if (actionOnlyRule) {\r",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "sha": "78a8e9863410e63178b7cf58730b974e9268915e",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "deletions": 17,
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java",
                "patch": "@@ -35,17 +35,12 @@\n   private String text = \"Some text 4 more text.\";\n \n   @Test\n-  public void testDefault() {\n+  public void testDefault() throws Exception {\n \n     String script = getForEachScript();\n \n-    CAS cas = null;\n-    try {\n-      cas = RutaTestUtils.getCAS(text);\n-      Ruta.apply(cas, script);\n-    } catch (Exception e) {\n-      e.printStackTrace();\n-    }\n+    CAS cas = RutaTestUtils.getCAS(text);\n+    Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 1, \"4\");\n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 1, \"4\");\n@@ -58,7 +53,6 @@ public void testDefault() {\n     RutaTestUtils.assertAnnotationsEquals(cas, 9, 1, \"Some\");\n     RutaTestUtils.assertAnnotationsEquals(cas, 10, 1, \"4\");\n \n-    cas.release();\n   }\n \n   @Test\n@@ -90,8 +84,6 @@ public void testPerformance() throws Exception {\n     long endForEach = System.currentTimeMillis();\n     System.out.println(\"FOREACH: \" + (endForEach - startForEach) + \"ms\");\n \n-    cas.release();\n-\n   }\n \n   private String getForEachScript() {\n@@ -128,7 +120,6 @@ public void testRigthToLeft() throws Exception {\n     Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 2, \"2^3\", \"2\");\n-    cas.release();\n   }\n \n   @Test\n@@ -144,7 +135,6 @@ public void testEnforcedLeftToRigthInComposedWithDebbugging() throws Exception {\n     Ruta.apply(cas, script, parameters);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 2, \"4\", \"2^3\");\n-    cas.release();\n   }\n \n   @Test\n@@ -161,7 +151,6 @@ public void testDirection() throws Exception {\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 3, \"text 4x2^3\", \"text 4x2\", \"text 4\");\n     RutaTestUtils.assertAnnotationsEquals(cas, 3, 1, \"text 4x2^3\");\n-    cas.release();\n   }\n \n   @Test\n@@ -175,7 +164,6 @@ public void testComposed() throws Exception {\n     Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 1, \"4x2^3\");\n-    cas.release();\n   }\n \n   @Test\n@@ -189,7 +177,6 @@ public void testConditionMacro() throws Exception {\n     Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 1, \"1\");\n-    cas.release();\n   }\n \n   @Test\n@@ -207,7 +194,19 @@ public void testWithContainingBlock() throws Exception {\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 0);\n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 3, \"1\", \"22\", \"333\");\n-    cas.release();\n+  }\n+\n+  @Test\n+  public void testWithOptional() throws Exception {\n+    String script = \"\";\n+    script += \"FOREACH(num) NUM{} {\\n\";\n+    script += \"_{-PARTOF(W)} num{-> T1};\\n\";\n+    script += \"}\\n\";\n+\n+    CAS cas = RutaTestUtils.getCAS(\"1 22 333\");\n+    Ruta.apply(cas, script);\n+\n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 3, \"1\", \"22\", \"333\");\n   }\n \n }",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java",
                "sha": "9468c9de5131e90a1be269f0c35a6b3e95b0c043",
                "status": "modified"
            }
        ],
        "message": "UIMA-6065: fix NPE for optional in FOREACH\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1861314 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-ruta/commit/6229125321681e9a444c2a7d4c2ab6cb62bae365",
        "repo": "uima-ruta",
        "unit_tests": [
            "ForEachBlockTest.java",
            "RutaScriptBlockTest.java",
            "ScriptVerbalizerTest.java"
        ]
    }
}