{
    "camel_012f744": {
        "bug_id": "camel_012f744",
        "commit": "https://github.com/apache/camel/commit/012f744396a6f3f15a7f91a7a0d1b9cea7663495",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/012f744396a6f3f15a7f91a7a0d1b9cea7663495/core/camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java?ref=012f744396a6f3f15a7f91a7a0d1b9cea7663495",
                "deletions": 2,
                "filename": "core/camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java",
                "patch": "@@ -117,7 +117,11 @@ public boolean isAbstract() {\n             @Override\n             public boolean onExchange(Exchange exchange) {\n                 // filter non matching exchanges\n-                return EndpointHelper.matchEndpoint(context, exchange.getFromEndpoint().getEndpointUri(), endpointUri);\n+                if (exchange.getFromEndpoint() != null) {\n+                    return EndpointHelper.matchEndpoint(context, exchange.getFromEndpoint().getEndpointUri(), endpointUri);\n+                } else {\n+                    return false;\n+                }\n             }\n \n             public boolean matches() {\n@@ -191,7 +195,7 @@ public boolean onExchange(Exchange exchange) {\n                 // and just continue to route that on the consumer side, which causes the EventNotifier not to\n                 // emit events when the consumer received the exchange, as its already done. For example by\n                 // ProducerTemplate which creates the UoW before producing messages.\n-                if (exchange.getFromEndpoint().getEndpointUri().startsWith(\"direct:\")) {\n+                if (exchange.getFromEndpoint() != null && exchange.getFromEndpoint().getEndpointUri().startsWith(\"direct:\")) {\n                     return true;\n                 }\n                 return PatternHelper.matchPattern(exchange.getFromRouteId(), \"*\");",
                "raw_url": "https://github.com/apache/camel/raw/012f744396a6f3f15a7f91a7a0d1b9cea7663495/core/camel-core/src/main/java/org/apache/camel/builder/NotifyBuilder.java",
                "sha": "1fd4677ee0991485aae763165a76affd0a4b44c8",
                "status": "modified"
            }
        ],
        "message": "CAMEL-13645: Fixed potential NPE in NotifyBuilder.",
        "parent": "https://github.com/apache/camel/commit/449f8a76ac123f1ebab5fa650a280078aae09fdc",
        "repo": "camel",
        "unit_tests": [
            "NotifyBuilderTest.java"
        ]
    },
    "camel_045a230": {
        "bug_id": "camel_045a230",
        "commit": "https://github.com/apache/camel/commit/045a23054e266df6ae09c17744d240012938b83c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/045a23054e266df6ae09c17744d240012938b83c/camel-core/src/main/java/org/apache/camel/component/rest/RestEndpoint.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/rest/RestEndpoint.java?ref=045a23054e266df6ae09c17744d240012938b83c",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/component/rest/RestEndpoint.java",
                "patch": "@@ -270,6 +270,12 @@ public void setBindingMode(final RestBindingMode bindingMode) {\n \n     @Override\n     public Producer createProducer() throws Exception {\n+        if (ObjectHelper.isEmpty(host)) {\n+            // hostname must be provided\n+            throw new IllegalArgumentException(\"Hostname must be configured on either restConfiguration\"\n+                + \" or in the rest endpoint uri as a query parameter with name host, eg rest:\" + method + \":\" + path + \"?host=someserver\");\n+        }\n+\n         RestProducerFactory apiDocFactory = null;\n         RestProducerFactory factory = null;\n ",
                "raw_url": "https://github.com/apache/camel/raw/045a23054e266df6ae09c17744d240012938b83c/camel-core/src/main/java/org/apache/camel/component/rest/RestEndpoint.java",
                "sha": "5518a10e6dc75c8ec0181453bab650f19e4e34e3",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11216: REST-DSL - Producer fails with NPE or other exceptions if you have not set a hostname",
        "parent": "https://github.com/apache/camel/commit/9a54dcc131442384c600eb536503395d105e959d",
        "repo": "camel",
        "unit_tests": [
            "RestEndpointTest.java"
        ]
    },
    "camel_0607c0d": {
        "bug_id": "camel_0607c0d",
        "commit": "https://github.com/apache/camel/commit/0607c0df1c125a5a7100b47fe422b32e71a75390",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/0607c0df1c125a5a7100b47fe422b32e71a75390/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=0607c0df1c125a5a7100b47fe422b32e71a75390",
                "deletions": 9,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -1874,31 +1874,36 @@ protected synchronized void stopRouteService(RouteService routeService, boolean\n         routeService.setRemovingRoutes(removingRoutes);\n         stopRouteService(routeService);\n     }\n+    \n+    protected void logRouteState(Route route, String state) {\n+        if (log.isInfoEnabled()) {\n+            if (route.getConsumer() != null) {\n+                log.info(\"Route: {} {}, was consuming from: {}\", route.getId(), state, route.getConsumer().getEndpoint());\n+            } else {\n+                log.info(\"Route: {} {}.\", route.getId(), state);\n+            }\n+        }\n+    }\n+    \n     protected synchronized void stopRouteService(RouteService routeService) throws Exception {\n         routeService.stop();\n         for (Route route : routeService.getRoutes()) {\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Route: \" + route.getId() + \" stopped, was consuming from: \" + route.getConsumer().getEndpoint());\n-            }\n+            logRouteState(route, \"stoped\");\n         }\n     }\n \n     protected synchronized void shutdownRouteService(RouteService routeService) throws Exception {\n         routeService.shutdown();\n         for (Route route : routeService.getRoutes()) {\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Route: \" + route.getId() + \" shutdown and removed, was consuming from: \" + route.getConsumer().getEndpoint());\n-            }\n+            logRouteState(route, \"shutdown and removed\");\n         }\n     }\n \n     protected synchronized void suspendRouteService(RouteService routeService) throws Exception {\n         routeService.setRemovingRoutes(false);\n         routeService.suspend();\n         for (Route route : routeService.getRoutes()) {\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Route: \" + route.getId() + \" suspended, was consuming from: \" + route.getConsumer().getEndpoint());\n-            }\n+            logRouteState(route, \"suspended\");\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/0607c0df1c125a5a7100b47fe422b32e71a75390/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "b44de69fa1067b1812eea46eeb1d2d0376b600ac",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5830 fix the NPE when the shutdown the route which is not started rightly.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1414740 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/11f5df13aa67962b6c464e024d24501fd2b1c3b1",
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_0682e8d": {
        "bug_id": "camel_0682e8d",
        "commit": "https://github.com/apache/camel/commit/0682e8dd41045e3375b61d3d76f6e6991e98c869",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/0682e8dd41045e3375b61d3d76f6e6991e98c869/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java?ref=0682e8dd41045e3375b61d3d76f6e6991e98c869",
                "deletions": 3,
                "filename": "components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java",
                "patch": "@@ -142,7 +142,7 @@ public static SearchTerm toSearchTerm(SimpleSearchTerm simple, TypeConverter typ\n             }\n         }\n         if (simple.getToSentDate() != null) {\n-            String s = simple.getFromSentDate();\n+            String s = simple.getToSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), true, offset));\n@@ -153,7 +153,7 @@ public static SearchTerm toSearchTerm(SimpleSearchTerm simple, TypeConverter typ\n             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n-            String s = simple.getFromSentDate();\n+            String s = simple.getFromReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));\n@@ -164,7 +164,7 @@ public static SearchTerm toSearchTerm(SimpleSearchTerm simple, TypeConverter typ\n             }\n         }\n         if (simple.getToReceivedDate() != null) {\n-            String s = simple.getFromSentDate();\n+            String s = simple.getToReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));",
                "raw_url": "https://github.com/apache/camel/raw/0682e8dd41045e3375b61d3d76f6e6991e98c869/components/camel-mail/src/main/java/org/apache/camel/component/mail/MailConverters.java",
                "sha": "8262c14f84cfe8782f08a8e2bd194352efb878f4",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6626 Fixed the search criteria NPE of camel-mail with thanks to Ales",
        "parent": "https://github.com/apache/camel/commit/24e01f17149ea3690d1fe4d2fabe4c78a5d88225",
        "repo": "camel",
        "unit_tests": [
            "MailConvertersTest.java"
        ]
    },
    "camel_07043c1": {
        "bug_id": "camel_07043c1",
        "commit": "https://github.com/apache/camel/commit/07043c1fd2510ac0c84165a7fddc7bd6a58d048e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/07043c1fd2510ac0c84165a7fddc7bd6a58d048e/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java?ref=07043c1fd2510ac0c84165a7fddc7bd6a58d048e",
                "deletions": 2,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "patch": "@@ -200,8 +200,12 @@ public void process(Exchange exchange) throws Exception {\n             if (value != null) {\n                 filteredHeaders.put(header.getKey(), header.getValue());\n             } else if (log.isDebugEnabled()) {\n-                log.debug(\"Ignoring header: {} of class: {} with value: {}\",\n-                    new Object[]{header.getKey(), header.getValue().getClass().getName(), header.getValue()});\n+                if (header.getValue() == null) {\n+                    log.debug(\"Ignoring header: {} with null value\", header.getKey());\n+                } else {\n+                    log.debug(\"Ignoring header: {} of class: {} with value: {}\",\n+                            new Object[]{header.getKey(), ObjectHelper.classCanonicalName(header.getValue()), header.getValue()});\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/07043c1fd2510ac0c84165a7fddc7bd6a58d048e/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "sha": "ea02ce23e0dc6f82c30ce017d918cdf096be7c0c",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7571: Fixed potential NPE iin camel-rabbitmq f debug logging was enabled.",
        "parent": "https://github.com/apache/camel/commit/624b1abc7e9962b9adae62287f48147578ab50fc",
        "repo": "camel",
        "unit_tests": [
            "RabbitMQProducerTest.java"
        ]
    },
    "camel_07caaa4": {
        "bug_id": "camel_07caaa4",
        "commit": "https://github.com/apache/camel/commit/07caaa4f39112deca295a6677402fec9d3fc4019",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/07caaa4f39112deca295a6677402fec9d3fc4019/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java?ref=07caaa4f39112deca295a6677402fec9d3fc4019",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.camel.component.bean.BeanInfo;\n import org.apache.camel.component.bean.BeanProcessor;\n import org.apache.camel.component.bean.ProxyHelper;\n+import org.apache.camel.component.properties.PropertiesComponent;\n import org.apache.camel.processor.CamelInternalProcessor;\n import org.apache.camel.processor.UnitOfWorkProducer;\n import org.apache.camel.util.CamelContextHelper;\n@@ -229,7 +230,14 @@ public Object getInjectionPropertyValue(Class<?> type, String propertyName, Stri\n             String key;\n             String prefix = getCamelContext().getPropertyPrefixToken();\n             String suffix = getCamelContext().getPropertySuffixToken();\n-            if (!propertyName.contains(prefix)) {\n+\n+            if (prefix == null && suffix == null) {\n+                // if no custom prefix/suffix then use defaults\n+                prefix = PropertiesComponent.DEFAULT_PREFIX_TOKEN;\n+                suffix = PropertiesComponent.DEFAULT_SUFFIX_TOKEN;\n+            }\n+\n+            if (!propertyName.startsWith(prefix)) {\n                 // must enclose the property name with prefix/suffix to have it resolved\n                 key = prefix + propertyName + suffix;\n             } else {",
                "raw_url": "https://github.com/apache/camel/raw/07caaa4f39112deca295a6677402fec9d3fc4019/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "sha": "04dbc4d4f73590961f7b504f76f309e354c9bfa2",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8125: Avoid potential NPE when using @PropertyInject with Camel main.",
        "parent": "https://github.com/apache/camel/commit/c00bc44d12972bd99fec89e3c29a93b972f44f6e",
        "repo": "camel",
        "unit_tests": [
            "CamelPostProcessorHelperTest.java"
        ]
    },
    "camel_0a678d8": {
        "bug_id": "camel_0a678d8",
        "commit": "https://github.com/apache/camel/commit/0a678d8920049acc85831f218e478d000125ed15",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/0a678d8920049acc85831f218e478d000125ed15/core/camel-api/src/main/java/org/apache/camel/AggregationStrategy.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-api/src/main/java/org/apache/camel/AggregationStrategy.java?ref=0a678d8920049acc85831f218e478d000125ed15",
                "deletions": 2,
                "filename": "core/camel-api/src/main/java/org/apache/camel/AggregationStrategy.java",
                "patch": "@@ -32,7 +32,7 @@\n  * and <tt>parallelProcessing</tt> is used. You can work around this behavior using the <tt>stopOnAggregateException</tt> option.\n  * <p/>\n  * It is possible that <tt>newExchange</tt> is <tt>null</tt> which could happen if there was no data possible\n- * to acquire. Such as when using a {@link org.apache.camel.processor.PollEnricher} to poll from a JMS queue which\n+ * to acquire. Such as when using a <tt>PollEnricher</tt> to poll from a JMS queue which\n  * is empty and a timeout was set.\n  * <p/>\n  * Possible implementations include performing some kind of combining or delta processing, such as adding line items\n@@ -125,7 +125,6 @@ default void timeout(Exchange exchange, int index, int total, long timeout) {\n      */\n     default void onOptimisticLockFailure(Exchange oldExchange, Exchange newExchange) {\n         LoggerFactory.getLogger(getClass()).trace(\"onOptimisticLockFailure with AggregationStrategy: {}, oldExchange: {}, newExchange: {}\", this, oldExchange, newExchange);\n-\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/0a678d8920049acc85831f218e478d000125ed15/core/camel-api/src/main/java/org/apache/camel/AggregationStrategy.java",
                "sha": "8021584f282923feb3e546014515763590546a7b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/0a678d8920049acc85831f218e478d000125ed15/core/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java?ref=0a678d8920049acc85831f218e478d000125ed15",
                "deletions": 9,
                "filename": "core/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
                "patch": "@@ -98,7 +98,7 @@\n     public static final String COMPLETED_BY_TIMEOUT = \"timeout\";\n     public static final String COMPLETED_BY_FORCE = \"force\";\n \n-    private Lock lock;\n+    private volatile Lock lock;\n     private final AtomicBoolean aggregateRepositoryWarned = new AtomicBoolean();\n     private final CamelContext camelContext;\n     private final AsyncProcessor processor;\n@@ -1116,12 +1116,15 @@ private AggregationTimeoutMap(ScheduledExecutorService executor, long requestMap\n \n         @Override\n         public void purge() {\n-            // must acquire the shared aggregation lock to be able to purge\n-            lock.lock();\n-            try {\n-                super.purge();\n-            } finally {\n-                lock.unlock();\n+            // wait for lock to be created\n+            if (lock != null) {\n+                // must acquire the shared aggregation lock to be able to purge\n+                lock.lock();\n+                try {\n+                    super.purge();\n+                } finally {\n+                    lock.unlock();\n+                }\n             }\n         }\n \n@@ -1399,7 +1402,7 @@ protected void doStart() throws Exception {\n         if (getCompletionInterval() > 0) {\n             log.info(\"Using CompletionInterval to run every {} millis.\", getCompletionInterval());\n             if (getTimeoutCheckerExecutorService() == null) {\n-                setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newScheduledThreadPool(this, AGGREGATE_TIMEOUT_CHECKER, 1));\n+                setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, AGGREGATE_TIMEOUT_CHECKER));\n                 shutdownTimeoutCheckerExecutorService = true;\n             }\n             // trigger completion based on interval\n@@ -1410,7 +1413,7 @@ protected void doStart() throws Exception {\n         if (getCompletionTimeout() > 0 || getCompletionTimeoutExpression() != null) {\n             log.info(\"Using CompletionTimeout to trigger after {} millis of inactivity.\", getCompletionTimeout());\n             if (getTimeoutCheckerExecutorService() == null) {\n-                setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newScheduledThreadPool(this, AGGREGATE_TIMEOUT_CHECKER, 1));\n+                setTimeoutCheckerExecutorService(camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, AGGREGATE_TIMEOUT_CHECKER));\n                 shutdownTimeoutCheckerExecutorService = true;\n             }\n             // check for timed out aggregated messages once every second",
                "raw_url": "https://github.com/apache/camel/raw/0a678d8920049acc85831f218e478d000125ed15/core/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
                "sha": "1db5025ea353f395900aff50e31c6c814c4a05bd",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in aggregate EIP timeout checker",
        "parent": "https://github.com/apache/camel/commit/ea81349dbd71041395bcc8ac55850700f5b43919",
        "repo": "camel",
        "unit_tests": [
            "AggregateProcessorTest.java"
        ]
    },
    "camel_0c36d7b": {
        "bug_id": "camel_0c36d7b",
        "commit": "https://github.com/apache/camel/commit/0c36d7be59ae6361735e0f9aca4823474c147f8f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/0c36d7be59ae6361735e0f9aca4823474c147f8f/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java?ref=0c36d7be59ae6361735e0f9aca4823474c147f8f",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java",
                "patch": "@@ -147,7 +147,8 @@ private CxfPayloadConverter() {\n         if (CxfPayload.class.isAssignableFrom(value.getClass())) {\n             CxfPayload<?> payload = (CxfPayload<?>) value;\n             \n-            if (payload.getBodySources().size() == 1) {\n+            if (payload.getBodySources() != null \n+                && payload.getBodySources().size() == 1) {\n                 if (type.isAssignableFrom(Document.class)) {\n                     Source s = payload.getBodySources().get(0);\n                     Document d;",
                "raw_url": "https://github.com/apache/camel/raw/0c36d7be59ae6361735e0f9aca4823474c147f8f/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfPayloadConverter.java",
                "sha": "0fa3c6043765314fdcb621bbf9eaa5753a277a67",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-5897] FIx a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1423644 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/109c3e9e382758f4b54eff39677b74338ad2e0ad",
        "repo": "camel",
        "unit_tests": [
            "CxfPayloadConverterTest.java"
        ]
    },
    "camel_1099b8c": {
        "bug_id": "camel_1099b8c",
        "commit": "https://github.com/apache/camel/commit/1099b8ce94a928b5b111ff859793ca85168c5eab",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/1099b8ce94a928b5b111ff859793ca85168c5eab/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java?ref=1099b8ce94a928b5b111ff859793ca85168c5eab",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java",
                "patch": "@@ -408,8 +408,12 @@ public String getComponentDocumentation(String componentName) throws IOException\n \n     public String componentParameterJsonSchema(String componentName) throws Exception {\n         Component component = context.getComponent(componentName);\n-        ComponentConfiguration configuration = component.createComponentConfiguration();\n-        return configuration.createParameterJsonSchema();\n+        if (component != null) {\n+            ComponentConfiguration configuration = component.createComponentConfiguration();\n+            return configuration.createParameterJsonSchema();\n+        } else {\n+            return null;\n+        }\n     }\n \n     public void reset(boolean includeRoutes) throws Exception {",
                "raw_url": "https://github.com/apache/camel/raw/1099b8ce94a928b5b111ff859793ca85168c5eab/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedCamelContext.java",
                "sha": "75a4610eb2091f40689dadfc5d441e8c61add725",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPE",
        "parent": "https://github.com/apache/camel/commit/4bcf108874df0c138cf6cf2afbfc27fca9d1d905",
        "repo": "camel",
        "unit_tests": [
            "ManagedCamelContextTest.java"
        ]
    },
    "camel_18f8d29": {
        "bug_id": "camel_18f8d29",
        "commit": "https://github.com/apache/camel/commit/18f8d29f985746e5b5afa7f7b26564c5be564d5c",
        "file": [
            {
                "additions": 155,
                "blob_url": "https://github.com/apache/camel/blob/18f8d29f985746e5b5afa7f7b26564c5be564d5c/camel-core/src/main/java/org/apache/camel/util/EventHelper.java",
                "changes": 199,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/EventHelper.java?ref=18f8d29f985746e5b5afa7f7b26564c5be564d5c",
                "deletions": 44,
                "filename": "camel-core/src/main/java/org/apache/camel/util/EventHelper.java",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.camel.StatefulService;\n import org.apache.camel.spi.EventFactory;\n import org.apache.camel.spi.EventNotifier;\n+import org.apache.camel.spi.ManagementStrategy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -43,7 +44,12 @@ private EventHelper() {\n     }\n \n     public static void notifyCamelContextStarting(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -53,7 +59,7 @@ public static void notifyCamelContextStarting(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -66,7 +72,12 @@ public static void notifyCamelContextStarting(CamelContext context) {\n     }\n \n     public static void notifyCamelContextStarted(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -76,7 +87,7 @@ public static void notifyCamelContextStarted(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -89,7 +100,12 @@ public static void notifyCamelContextStarted(CamelContext context) {\n     }\n \n     public static void notifyCamelContextStartupFailed(CamelContext context, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -99,7 +115,7 @@ public static void notifyCamelContextStartupFailed(CamelContext context, Throwab\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -112,7 +128,12 @@ public static void notifyCamelContextStartupFailed(CamelContext context, Throwab\n     }\n \n     public static void notifyCamelContextStopping(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -122,7 +143,7 @@ public static void notifyCamelContextStopping(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -135,7 +156,12 @@ public static void notifyCamelContextStopping(CamelContext context) {\n     }\n \n     public static void notifyCamelContextStopped(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -145,7 +171,7 @@ public static void notifyCamelContextStopped(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -158,7 +184,12 @@ public static void notifyCamelContextStopped(CamelContext context) {\n     }\n \n     public static void notifyCamelContextStopFailed(CamelContext context, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -168,7 +199,7 @@ public static void notifyCamelContextStopFailed(CamelContext context, Throwable\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -181,7 +212,12 @@ public static void notifyCamelContextStopFailed(CamelContext context, Throwable\n     }\n \n     public static void notifyServiceStopFailure(CamelContext context, Object service, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -191,7 +227,7 @@ public static void notifyServiceStopFailure(CamelContext context, Object service\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -204,7 +240,12 @@ public static void notifyServiceStopFailure(CamelContext context, Object service\n     }\n \n     public static void notifyServiceStartupFailure(CamelContext context, Object service, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -214,7 +255,7 @@ public static void notifyServiceStartupFailure(CamelContext context, Object serv\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -227,7 +268,12 @@ public static void notifyServiceStartupFailure(CamelContext context, Object serv\n     }\n \n     public static void notifyRouteStarted(CamelContext context, Route route) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -237,7 +283,7 @@ public static void notifyRouteStarted(CamelContext context, Route route) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -250,7 +296,12 @@ public static void notifyRouteStarted(CamelContext context, Route route) {\n     }\n \n     public static void notifyRouteStopped(CamelContext context, Route route) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -260,7 +311,7 @@ public static void notifyRouteStopped(CamelContext context, Route route) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -278,7 +329,12 @@ public static void notifyExchangeCreated(CamelContext context, Exchange exchange\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -288,7 +344,7 @@ public static void notifyExchangeCreated(CamelContext context, Exchange exchange\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -306,7 +362,12 @@ public static void notifyExchangeDone(CamelContext context, Exchange exchange) {\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -316,7 +377,7 @@ public static void notifyExchangeDone(CamelContext context, Exchange exchange) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -334,7 +395,12 @@ public static void notifyExchangeFailed(CamelContext context, Exchange exchange)\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -344,7 +410,7 @@ public static void notifyExchangeFailed(CamelContext context, Exchange exchange)\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -363,7 +429,12 @@ public static void notifyExchangeFailureHandled(CamelContext context, Exchange e\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -373,7 +444,7 @@ public static void notifyExchangeFailureHandled(CamelContext context, Exchange e\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -391,7 +462,12 @@ public static void notifyExchangeRedelivery(CamelContext context, Exchange excha\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -401,7 +477,7 @@ public static void notifyExchangeRedelivery(CamelContext context, Exchange excha\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -419,7 +495,12 @@ public static void notifyExchangeSending(CamelContext context, Exchange exchange\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -429,7 +510,7 @@ public static void notifyExchangeSending(CamelContext context, Exchange exchange\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -447,7 +528,12 @@ public static void notifyExchangeSent(CamelContext context, Exchange exchange, E\n             return;\n         }\n \n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -457,7 +543,7 @@ public static void notifyExchangeSent(CamelContext context, Exchange exchange, E\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -470,7 +556,12 @@ public static void notifyExchangeSent(CamelContext context, Exchange exchange, E\n     }\n \n     public static void notifyCamelContextSuspending(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -480,7 +571,7 @@ public static void notifyCamelContextSuspending(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -493,7 +584,12 @@ public static void notifyCamelContextSuspending(CamelContext context) {\n     }\n \n     public static void notifyCamelContextSuspended(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -503,7 +599,7 @@ public static void notifyCamelContextSuspended(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -516,7 +612,12 @@ public static void notifyCamelContextSuspended(CamelContext context) {\n     }\n \n     public static void notifyCamelContextResuming(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -526,7 +627,7 @@ public static void notifyCamelContextResuming(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -539,7 +640,12 @@ public static void notifyCamelContextResuming(CamelContext context) {\n     }\n \n     public static void notifyCamelContextResumed(CamelContext context) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -549,7 +655,7 @@ public static void notifyCamelContextResumed(CamelContext context) {\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }\n@@ -562,7 +668,12 @@ public static void notifyCamelContextResumed(CamelContext context) {\n     }\n \n     public static void notifyCamelContextResumeFailed(CamelContext context, Throwable cause) {\n-        List<EventNotifier> notifiers = context.getManagementStrategy().getEventNotifiers();\n+        ManagementStrategy management = context.getManagementStrategy();\n+        if (management == null) {\n+            return;\n+        }\n+\n+        List<EventNotifier> notifiers = management.getEventNotifiers();\n         if (notifiers == null || notifiers.isEmpty()) {\n             return;\n         }\n@@ -572,7 +683,7 @@ public static void notifyCamelContextResumeFailed(CamelContext context, Throwabl\n                 continue;\n             }\n \n-            EventFactory factory = context.getManagementStrategy().getEventFactory();\n+            EventFactory factory = management.getEventFactory();\n             if (factory == null) {\n                 return;\n             }",
                "raw_url": "https://github.com/apache/camel/raw/18f8d29f985746e5b5afa7f7b26564c5be564d5c/camel-core/src/main/java/org/apache/camel/util/EventHelper.java",
                "sha": "c5206afbcad3f5d7b7fc534982097ba4c3e30c40",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/131d39bc51051343ddeda277a433a84f21a4c825",
        "repo": "camel",
        "unit_tests": [
            "EventHelperTest.java"
        ]
    },
    "camel_1a43769": {
        "bug_id": "camel_1a43769",
        "commit": "https://github.com/apache/camel/commit/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java?ref=1a43769257f84fbb56ab9fbc04dfcb6ad778c83a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java",
                "patch": "@@ -216,6 +216,15 @@ public void testOGNLBodyListAndMap() throws Exception {\n         assertExpression(\"${in.body[0][code]}\", 4321);\n         assertExpression(\"${body[0][code]}\", 4321);\n     }\n+    \n+    public void testOGNLCallReplace() throws Exception {\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"cool\", \"Camel rocks\");\n+        map.put(\"dude\", \"Hey dude\");\n+        exchange.getIn().setHeaders(map);\n+        \n+        assertExpression(\"${headers.cool.replaceAll(\\\"rocks\\\", \\\"is so cool\\\")}\", \"Camel is so cool\");\n+    }\n \n     public void testOGNLBodyListAndMapAndMethod() throws Exception {\n         Map<String, Object> map = new HashMap<String, Object>();",
                "raw_url": "https://github.com/apache/camel/raw/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java",
                "sha": "407f755094d1376ca73e20cc12107686ced7616a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java?ref=1a43769257f84fbb56ab9fbc04dfcb6ad778c83a",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "patch": "@@ -832,6 +832,7 @@ public void testNormalizeClassName() {\n         assertEquals(\"Should get the right class name\", \"my.package-info\", ObjectHelper.normalizeClassName(\"my.package-info\"));\n         assertEquals(\"Should get the right class name\", \"Integer[]\", ObjectHelper.normalizeClassName(\"Integer[] \\r\"));\n         assertEquals(\"Should get the right class name\", \"Hello_World\", ObjectHelper.normalizeClassName(\"Hello_World\"));\n+        assertEquals(\"Should get the right class name\", \"\", ObjectHelper.normalizeClassName(\"////\"));\n     }\n \n     public void testLookupConstantFieldValue() {",
                "raw_url": "https://github.com/apache/camel/raw/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "sha": "3f2b1cd5abe8ea32da0c11fafec5c302b3e7ee50",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiClassResolver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiClassResolver.java?ref=1a43769257f84fbb56ab9fbc04dfcb6ad778c83a",
                "deletions": 0,
                "filename": "components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiClassResolver.java",
                "patch": "@@ -45,6 +45,10 @@ public OsgiClassResolver(BundleContext context) {\n     public Class<?> resolveClass(String name) {\n         LOG.trace(\"Resolve class {}\", name);\n         name = ObjectHelper.normalizeClassName(name);\n+        if (ObjectHelper.isEmpty(name)) {\n+            return null;\n+        }\n+        // we need to avoid the NPE issue of loading the class\n         Class<?> clazz = ObjectHelper.loadSimpleType(name);\n         if (clazz == null) {\n             clazz = doLoadClass(name, bundleContext.getBundle());",
                "raw_url": "https://github.com/apache/camel/raw/1a43769257f84fbb56ab9fbc04dfcb6ad778c83a/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiClassResolver.java",
                "sha": "66c40085022c70348ad25aafd84f0f8767543c4b",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7262 fixed the NPE issue of calling String.replaceAll via simple expression in Karaf",
        "parent": "https://github.com/apache/camel/commit/1ad5655433d27a73bd0ab08f44b9c1aac69cb2fb",
        "repo": "camel",
        "unit_tests": [
            "OsgiClassResolverTest.java"
        ]
    },
    "camel_1d15495": {
        "bug_id": "camel_1d15495",
        "commit": "https://github.com/apache/camel/commit/1d1549541d3489182b049d91638d56b57afd6c02",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/1d1549541d3489182b049d91638d56b57afd6c02/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java?ref=1d1549541d3489182b049d91638d56b57afd6c02",
                "deletions": 10,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.camel.AsyncCallback;\n import org.apache.camel.AsyncProcessor;\n import org.apache.camel.Exchange;\n+import org.apache.camel.InvalidPayloadException;\n import org.apache.camel.RuntimeCamelException;\n import org.apache.camel.impl.DefaultProducer;\n import org.apache.camel.util.ObjectHelper;\n@@ -213,7 +214,7 @@ private void checkParameterSize(CxfEndpoint endpoint, Exchange exchange, Object[\n         if (boi == null) {\n             throw new RuntimeCamelException(\"Can't find the binding operation information from camel exchange\");\n         }\n-        if (!endpoint.isWrapped() && boi != null) {\n+        if (!endpoint.isWrapped()) {\n             if (boi.isUnwrappedCapable()) {\n                 boi = boi.getUnwrappedOperation();\n             }\n@@ -253,7 +254,7 @@ private void checkParameterSize(CxfEndpoint endpoint, Exchange exchange, Object[\n     /**\n      * Get the parameters for the web service operation\n      */\n-    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) {\n+    private Object[] getParams(CxfEndpoint endpoint, Exchange exchange) throws InvalidPayloadException {\n       \n         Object[] params = null;\n         if (endpoint.getDataFormat() == DataFormat.POJO) {\n@@ -276,25 +277,22 @@ private void checkParameterSize(CxfEndpoint endpoint, Exchange exchange, Object[\n                     params[0] = exchange.getIn().getBody();\n                 }\n             }\n+            // make sure we have the right number of parameters\n             checkParameterSize(endpoint, exchange, params);\n-            \n+\n         } else if (endpoint.getDataFormat() == DataFormat.PAYLOAD) {\n             params = new Object[1];\n-            // TODO: maybe it should be mandatory body?\n-            params[0] = exchange.getIn().getBody(CxfPayload.class);\n+            params[0] = exchange.getIn().getMandatoryBody(CxfPayload.class);\n         } else if (endpoint.getDataFormat() == DataFormat.MESSAGE) {\n             params = new Object[1];\n-            // TODO: maybe it should be mandatory body?\n-            params[0] = exchange.getIn().getBody(InputStream.class);\n+            params[0] = exchange.getIn().getMandatoryBody(InputStream.class);\n         }\n \n         if (LOG.isTraceEnabled()) {\n-            if (params instanceof Object[]) {\n+            if (params != null) {\n                 for (int i = 0; i < params.length; i++) {\n                     LOG.trace(\"params[\" + i + \"] = \" + params[i]);\n                 }\n-            } else {\n-                LOG.trace(\"params = \" + params);\n             }\n         }\n         ",
                "raw_url": "https://github.com/apache/camel/raw/1d1549541d3489182b049d91638d56b57afd6c02/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java",
                "sha": "d6f7b20c42334e28012860859c07a1abc9f918ab",
                "status": "modified"
            }
        ],
        "message": "CAMEL-3151: CxfProducer uses mandatory body to ensure input message exists. This avoids NPE exceptions later on.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1003946 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/3cfb9d8846dd38a61d44b30f2b8782967a082f86",
        "repo": "camel",
        "unit_tests": [
            "CxfProducerTest.java"
        ]
    },
    "camel_1ddb528": {
        "bug_id": "camel_1ddb528",
        "commit": "https://github.com/apache/camel/commit/1ddb5289c814b23bac718ce598652a17a95c83df",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/1ddb5289c814b23bac718ce598652a17a95c83df/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=1ddb5289c814b23bac718ce598652a17a95c83df",
                "deletions": 5,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -390,11 +390,11 @@ protected MessageContentsList getResponsePayloadList(org.apache.cxf.message.Exch\n         MessageContentsList answer = new MessageContentsList();\n \n         int i = 0;\n-        \n-        for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {\n-            if (elements.size() > i) {\n-                answer.put(partInfo, elements.get(i++));\n-                \n+        if (boi.getOutput() != null) {\n+            for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {\n+                if (elements.size() > i) {\n+                    answer.put(partInfo, elements.get(i++));\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/1ddb5289c814b23bac718ce598652a17a95c83df/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "318f4cc25277bb1e6efec5533c07a95159434d30",
                "status": "modified"
            }
        ],
        "message": "CAMEL-4452 avoid the NPE error when there oneway operation for the PayLoad invocation on CxfConsumer\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1171396 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/8fa016d8b72cf411b0b4b847cb56df06fbc97b50",
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_1eb0135": {
        "bug_id": "camel_1eb0135",
        "commit": "https://github.com/apache/camel/commit/1eb0135922a485cec0aee34c77f1486dc2539a62",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/1eb0135922a485cec0aee34c77f1486dc2539a62/components/camel-bean/src/main/java/org/apache/camel/component/bean/MethodInfo.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-bean/src/main/java/org/apache/camel/component/bean/MethodInfo.java?ref=1eb0135922a485cec0aee34c77f1486dc2539a62",
                "deletions": 2,
                "filename": "components/camel-bean/src/main/java/org/apache/camel/component/bean/MethodInfo.java",
                "patch": "@@ -56,6 +56,7 @@\n import org.slf4j.LoggerFactory;\n \n import static org.apache.camel.util.ObjectHelper.asString;\n+import static org.apache.camel.util.ObjectHelper.asList;\n \n /**\n  * Information about a method to be used for invocation.\n@@ -438,9 +439,9 @@ protected Object invoke(Method mth, Object pojo, Object[] arguments, Exchange ex\n         try {\n             return ObjectHelper.invokeMethodSafe(mth, pojo, arguments);\n         } catch (IllegalAccessException e) {\n-            throw new RuntimeExchangeException(\"IllegalAccessException occurred invoking method: \" + mth + \" using arguments: \" + Arrays.asList(arguments), exchange, e);\n+            throw new RuntimeExchangeException(\"IllegalAccessException occurred invoking method: \" + mth + \" using arguments: \" + asList(arguments), exchange, e);\n         } catch (IllegalArgumentException e) {\n-            throw new RuntimeExchangeException(\"IllegalArgumentException occurred invoking method: \" + mth + \" using arguments: \" + Arrays.asList(arguments), exchange, e);\n+            throw new RuntimeExchangeException(\"IllegalArgumentException occurred invoking method: \" + mth + \" using arguments: \" + asList(arguments), exchange, e);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/1eb0135922a485cec0aee34c77f1486dc2539a62/components/camel-bean/src/main/java/org/apache/camel/component/bean/MethodInfo.java",
                "sha": "0021e00f2088dcf9ef00cb7ac9365b833ca067ad",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/camel/blob/1eb0135922a485cec0aee34c77f1486dc2539a62/core/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java?ref=1eb0135922a485cec0aee34c77f1486dc2539a62",
                "deletions": 0,
                "filename": "core/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "patch": "@@ -956,4 +956,23 @@ public void testNonInheritedMethodCantOverrideInterfaceMethod() throws Exception\n         Method m2 = InterfaceSize.class.getMethod(\"size\");\n         assertFalse(org.apache.camel.util.ObjectHelper.isOverridingMethod(InterfaceSize.class, m2, m1, false));\n     }\n+    \n+    @Test\n+    public void testAsList() {\n+        List<Object> out0 = ObjectHelper.asList(null);\n+        assertNotNull(out0);\n+        assertTrue(out0 instanceof List && out0.size() == 0);\n+\n+        List<Object> out1 = ObjectHelper.asList(new Object[0]);\n+        assertNotNull(out1);\n+        assertTrue(out1 instanceof List && out1.size() == 0);\n+\n+        String[] args = new String[] {\"foo\", \"bar\"};\n+        List<Object> out2 = ObjectHelper.asList(args);\n+        assertNotNull(out2);\n+        assertTrue(out2 instanceof List && out2.size() == 2);\n+        assertEquals(\"foo\", out2.get(0));\n+        assertEquals(\"bar\", out2.get(1));\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/1eb0135922a485cec0aee34c77f1486dc2539a62/core/camel-core/src/test/java/org/apache/camel/util/ObjectHelperTest.java",
                "sha": "5228614094851753f84027fed8fe95fa72e453ae",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/1eb0135922a485cec0aee34c77f1486dc2539a62/core/camel-util/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-util/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=1eb0135922a485cec0aee34c77f1486dc2539a62",
                "deletions": 0,
                "filename": "core/camel-util/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -1166,4 +1166,15 @@ public static RuntimeException wrapRuntimeCamelException(Throwable e) {\n             return new RuntimeException(e);\n         }\n     }\n+\n+    /**\n+     * Turns the input array to a list of objects.\n+     * \n+     * @param args an array of objects or null\n+     * @return an object list\n+     */\n+    public static List<Object> asList(Object[] objects) {\n+        return objects != null ? Arrays.asList(objects) : Collections.emptyList();\n+    }\n+    \n }",
                "raw_url": "https://github.com/apache/camel/raw/1eb0135922a485cec0aee34c77f1486dc2539a62/core/camel-util/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "317c06690a94506234d31c6d157a03cf587e71de",
                "status": "modified"
            }
        ],
        "message": "Fix NPE at component.bean.MethodInfo.invoke",
        "parent": "https://github.com/apache/camel/commit/ff83c4efaaf9d293dded29b5162ab87aec6b64da",
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_2217722": {
        "bug_id": "camel_2217722",
        "commit": "https://github.com/apache/camel/commit/22177229c2f5a1559f98ca6ed3d38e8004438d48",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/22177229c2f5a1559f98ca6ed3d38e8004438d48/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=22177229c2f5a1559f98ca6ed3d38e8004438d48",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -65,7 +65,6 @@\n import org.apache.camel.ShutdownRunningTask;\n import org.apache.camel.StartupListener;\n import org.apache.camel.StatefulService;\n-import org.apache.camel.StreamCache;\n import org.apache.camel.SuspendableService;\n import org.apache.camel.TypeConverter;\n import org.apache.camel.VetoCamelContextStartException;\n@@ -2442,13 +2441,14 @@ public void setNodeIdFactory(NodeIdFactory idFactory) {\n     }\n \n     public ManagementStrategy getManagementStrategy() {\n-        if (!managementStrategyInitialized.get()) {\n-            synchronized (managementStrategyInitialized) {\n+        synchronized (managementStrategyInitialized) {\n+            if (!managementStrategyInitialized.get()) {\n                 if (managementStrategyInitialized.compareAndSet(false, true)) {\n                     managementStrategy = createManagementStrategy();\n                 }\n             }\n         }\n+\n         return managementStrategy;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/22177229c2f5a1559f98ca6ed3d38e8004438d48/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "8a3091fe432bed52a631ee1ce6e67e437c0a948a",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6576: Fix a potential NPE",
        "parent": "https://github.com/apache/camel/commit/687edfcdc21af44a7686594ad5ffe7ac4d79b3b0",
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_246f9ba": {
        "bug_id": "camel_246f9ba",
        "commit": "https://github.com/apache/camel/commit/246f9ba8303c5f67a9632cab77443eaf04be33b8",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/246f9ba8303c5f67a9632cab77443eaf04be33b8/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java?ref=246f9ba8303c5f67a9632cab77443eaf04be33b8",
                "deletions": 6,
                "filename": "components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java",
                "patch": "@@ -81,14 +81,10 @@ public Consumer createConsumer(Processor processor) throws Exception {\n         return new WsConsumer(this, processor);\n     }\n \n-    WebSocket getWebSocket() {\n+    WebSocket getWebSocket() throws Exception {\n         synchronized (this) {\n             if (websocket == null) {\n-                try { \n-                    connect();\n-                } catch (Exception e) {\n-                    LOG.error(\"Failed to connect\", e);\n-                }\n+                connect();\n             }\n         }\n         return websocket;\n@@ -134,6 +130,7 @@ public void connect() throws InterruptedException, ExecutionException, IOExcepti\n     protected void doStop() throws Exception {\n         if (websocket != null && websocket.isOpen()) {\n             websocket.close();\n+            websocket = null;\n         }\n         super.doStop();\n     }",
                "raw_url": "https://github.com/apache/camel/raw/246f9ba8303c5f67a9632cab77443eaf04be33b8/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsEndpoint.java",
                "sha": "973ca79fe126a940889ec541a49ae40bf587612c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/246f9ba8303c5f67a9632cab77443eaf04be33b8/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsProducer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsProducer.java?ref=246f9ba8303c5f67a9632cab77443eaf04be33b8",
                "deletions": 1,
                "filename": "components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsProducer.java",
                "patch": "@@ -132,7 +132,7 @@ private void sendStreamMessage(WebSocket webSocket, InputStream in) throws IOExc\n         }\n     }\n     \n-    private WebSocket getWebSocket() {\n+    private WebSocket getWebSocket() throws Exception {\n         return getEndpoint().getWebSocket();\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/246f9ba8303c5f67a9632cab77443eaf04be33b8/components/camel-ahc-ws/src/main/java/org/apache/camel/component/ahc/ws/WsProducer.java",
                "sha": "d6319ad4b520860767ae2e0487b4e35ca6f3b128",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8927: Do not swallow exception when connecting, which causes NPE exceptions later.",
        "parent": "https://github.com/apache/camel/commit/78bafd79460a3fa99891a241d7ab321d2c99fa3e",
        "repo": "camel",
        "unit_tests": [
            "WsProducerTest.java"
        ]
    },
    "camel_24e4451": {
        "bug_id": "camel_24e4451",
        "commit": "https://github.com/apache/camel/commit/24e4451567b6f023bb77bd42cecab29a2aa722cb",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/24e4451567b6f023bb77bd42cecab29a2aa722cb/components/camel-aws-kms/src/main/java/org/apache/camel/component/aws/kms/KMSProducer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-aws-kms/src/main/java/org/apache/camel/component/aws/kms/KMSProducer.java?ref=24e4451567b6f023bb77bd42cecab29a2aa722cb",
                "deletions": 0,
                "filename": "components/camel-aws-kms/src/main/java/org/apache/camel/component/aws/kms/KMSProducer.java",
                "patch": "@@ -80,6 +80,10 @@ private KMSOperations determineOperation(Exchange exchange) {\n         if (operation == null) {\n             operation = getConfiguration().getOperation();\n         }\n+\n+        if (ObjectHelper.isEmpty(operation)) {\n+            throw new IllegalArgumentException(\"Operation must be specified\");\n+        }\n         return operation;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/24e4451567b6f023bb77bd42cecab29a2aa722cb/components/camel-aws-kms/src/main/java/org/apache/camel/component/aws/kms/KMSProducer.java",
                "sha": "c12a5eb22c3101f2f8412dee6f55642907cf11cb",
                "status": "modified"
            }
        ],
        "message": "Npe fix",
        "parent": "https://github.com/apache/camel/commit/d4bb6ddb01c4e543d5f3c28a25a39db8c8833a41",
        "repo": "camel",
        "unit_tests": [
            "KMSProducerTest.java"
        ]
    },
    "camel_25423af": {
        "bug_id": "camel_25423af",
        "commit": "https://github.com/apache/camel/commit/25423af4ff459ea261e1f081bc810bb921bd054f",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/25423af4ff459ea261e1f081bc810bb921bd054f/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java?ref=25423af4ff459ea261e1f081bc810bb921bd054f",
                "deletions": 5,
                "filename": "components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java",
                "patch": "@@ -73,7 +73,7 @@\n     private ExecutorService jmsConsumerExecutors;\n     private final AtomicBoolean running = new AtomicBoolean(false);\n     private final AtomicReference<CountDownLatch> consumersShutdownLatchRef = new AtomicReference<>();\n-    private Connection connection;\n+    private volatile Connection connection;\n \n     public SjmsBatchConsumer(SjmsBatchEndpoint sjmsBatchEndpoint, Processor processor) {\n         super(sjmsBatchEndpoint, processor);\n@@ -177,16 +177,16 @@ public void run() {\n                     localConnection = connectionFactory.createConnection();\n                     localConnection.start();\n \n+                    // its success so prepare for exit\n+                    connection = localConnection;\n+\n                     final List<AtomicBoolean> triggers = new ArrayList<>();\n                     for (int i = 0; i < consumerCount; i++) {\n                         BatchConsumptionLoop loop = new BatchConsumptionLoop();\n                         triggers.add(loop.getCompletionTimeoutTrigger());\n-                        jmsConsumerExecutors.execute(loop);\n+                        jmsConsumerExecutors.submit(loop);\n                     }\n \n-                    // its success so prepare for exit\n-                    connection = localConnection;\n-\n                     if (completionInterval > 0) {\n                         // trigger completion based on interval\n                         timeoutCheckerExecutorService.scheduleAtFixedRate(new CompletionIntervalTask(triggers), completionInterval, completionInterval, TimeUnit.MILLISECONDS);",
                "raw_url": "https://github.com/apache/camel/raw/25423af4ff459ea261e1f081bc810bb921bd054f/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java",
                "sha": "630bdfb848abd9ea665f1f7eb48709d8c2b75266",
                "status": "modified"
            }
        ],
        "message": "CAMEL-10677: Fixed NPE in camel-sjms batch consumer. And use submit for the consumer task as it should not risk using the starter thread which execute can do.",
        "parent": "https://github.com/apache/camel/commit/15256c88a35c8decfb63de9c0ea1ddc4d6c667fc",
        "repo": "camel",
        "unit_tests": [
            "SjmsBatchConsumerTest.java"
        ]
    },
    "camel_25f5737": {
        "bug_id": "camel_25f5737",
        "commit": "https://github.com/apache/camel/commit/25f5737e2a4b6a33c2cbef993d183ac3812e16f2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/25f5737e2a4b6a33c2cbef993d183ac3812e16f2/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java?ref=25f5737e2a4b6a33c2cbef993d183ac3812e16f2",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java",
                "patch": "@@ -98,7 +98,7 @@ public void activate() {\n \n         try {\n             getLogger().log(Level.FINE, \"establishing Camel connection\");\n-            distinationEndpoint = camelContext.getEndpoint(camelDestinationUri);\n+            distinationEndpoint = getCamelContext().getEndpoint(camelDestinationUri);\n             consumer = distinationEndpoint.createConsumer(new ConsumerProcessor());\n             consumer.start();\n ",
                "raw_url": "https://github.com/apache/camel/raw/25f5737e2a4b6a33c2cbef993d183ac3812e16f2/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java",
                "sha": "2c5f36e0d2502d424d187bf9ec8600a348c426d2",
                "status": "modified"
            }
        ],
        "message": "Fixed the NPE error of CamelDestination\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@816892 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/b2141b1c311b5078d9b8cdf73ef802cdea89b9bd",
        "repo": "camel",
        "unit_tests": [
            "CamelDestinationTest.java"
        ]
    },
    "camel_2c5e316": {
        "bug_id": "camel_2c5e316",
        "commit": "https://github.com/apache/camel/commit/2c5e3167c21e29c752a7b4b38be4a80850f1e169",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/2c5e3167c21e29c752a7b4b38be4a80850f1e169/components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java?ref=2c5e3167c21e29c752a7b4b38be4a80850f1e169",
                "deletions": 1,
                "filename": "components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java",
                "patch": "@@ -48,7 +48,7 @@ public static RequestEntity toRequestEntity(InputStream inStream, Exchange excha\n \n     @Converter\n     public static RequestEntity toRequestEntity(String str, Exchange exchange) throws Exception {\n-        if (GZIPHelper.isGzip(exchange.getIn())) {\n+        if (exchange != null && GZIPHelper.isGzip(exchange.getIn())) {\n             byte[] data = exchange.getContext().getTypeConverter().convertTo(byte[].class, str);\n             return asRequestEntity(data, exchange);\n         } else {",
                "raw_url": "https://github.com/apache/camel/raw/2c5e3167c21e29c752a7b4b38be4a80850f1e169/components/camel-http/src/main/java/org/apache/camel/component/http/RequestEntityConverter.java",
                "sha": "92f0abb21d8e1cb6a545966169b2da90c1d4062e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/2c5e3167c21e29c752a7b4b38be4a80850f1e169/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java?ref=2c5e3167c21e29c752a7b4b38be4a80850f1e169",
                "deletions": 1,
                "filename": "components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java",
                "patch": "@@ -219,7 +219,8 @@ protected void doStop() throws Exception {\n             } else {\n                 marshaller.marshal(value, buffer);\n             }\n-            answer = parentTypeConverter.convertTo(type, buffer.toString());\n+            // we need to pass the exchange\n+            answer = parentTypeConverter.convertTo(type, exchange, buffer.toString());\n         }\n \n         return answer;",
                "raw_url": "https://github.com/apache/camel/raw/2c5e3167c21e29c752a7b4b38be4a80850f1e169/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/FallbackTypeConverter.java",
                "sha": "d882f251614de7a1eb195ca662a5cd758da9aa1e",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/camel/blob/2c5e3167c21e29c752a7b4b38be4a80850f1e169/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java?ref=2c5e3167c21e29c752a7b4b38be4a80850f1e169",
                "deletions": 0,
                "filename": "tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java",
                "patch": "@@ -0,0 +1,50 @@\n+package org.apache.camel.itest.jaxb;\n+\n+import java.io.InputStream;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.itest.jaxb.example.Bar;\n+import org.apache.camel.test.junit4.CamelTestSupport;\n+import org.apache.commons.httpclient.methods.RequestEntity;\n+import org.junit.Test;\n+\n+public class JaxbFallbackTypeConverterTest extends CamelTestSupport {\n+    \n+    @Test\n+    public void testJaxbFallbackTypeConverter() {\n+        Bar bar = new Bar();\n+        bar.setName(\"camel\");\n+        bar.setValue(\"cool\");\n+        String result = template.requestBody(\"direct:start\", bar, String.class);\n+        assertNotNull(result);\n+        assertTrue(\"Get a wrong xml string\", result.indexOf(\"<bar name=\\\"camel\\\" value=\\\"cool\\\"/>\") > 0);\n+    }\n+    \n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+\n+                from(\"direct:start\").process(new Processor() {\n+\n+                    @Override\n+                    public void process(Exchange exchange) throws Exception {\n+                        Message in = exchange.getIn();\n+                        RequestEntity entity = in.getBody(RequestEntity.class);\n+                        assertNull(\"We should not get the entity here\", entity);\n+                        InputStream is = in.getMandatoryBody(InputStream.class);\n+                        // make sure we can get the InputStream rightly.\n+                        exchange.getOut().setBody(is);\n+                    }\n+                    \n+                });\n+            }\n+        };\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/2c5e3167c21e29c752a7b4b38be4a80850f1e169/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/JaxbFallbackTypeConverterTest.java",
                "sha": "cc3e980b1850ce6333f8805502a1293adced77d0",
                "status": "added"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/camel/blob/2c5e3167c21e29c752a7b4b38be4a80850f1e169/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/example/Bar.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/example/Bar.java?ref=2c5e3167c21e29c752a7b4b38be4a80850f1e169",
                "deletions": 0,
                "filename": "tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/example/Bar.java",
                "patch": "@@ -0,0 +1,52 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.itest.jaxb.example;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+@XmlRootElement\n+@XmlAccessorType(XmlAccessType.FIELD)\n+public class Bar {\n+    \n+    @XmlAttribute\n+    private String name;\n+    @XmlAttribute\n+    private String value;\n+    \n+    public Bar() {\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+    \n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public String getValue() {\n+        return value;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/camel/raw/2c5e3167c21e29c752a7b4b38be4a80850f1e169/tests/camel-itest/src/test/java/org/apache/camel/itest/jaxb/example/Bar.java",
                "sha": "4e511b62ff763f5381323fe606faa2b6bee3db7f",
                "status": "added"
            }
        ],
        "message": "CAMEL-5890 fixed the NPE when jaxb fallbackConverter is used with RequestEntityConverter\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1423299 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/07cedff5838644ac5a7b82da21e1247ca5db0e61",
        "repo": "camel",
        "unit_tests": [
            "BarTest.java"
        ]
    },
    "camel_2ddca93": {
        "bug_id": "camel_2ddca93",
        "commit": "https://github.com/apache/camel/commit/2ddca935c9bebf5e29ddde53683eec08879b6f18",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/2ddca935c9bebf5e29ddde53683eec08879b6f18/components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java?ref=2ddca935c9bebf5e29ddde53683eec08879b6f18",
                "deletions": 0,
                "filename": "components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java",
                "patch": "@@ -108,6 +108,7 @@ private Exchange receive(DataQueue queue, long timeout) throws Exception {\n         }\n \n         Exchange exchange = new DefaultExchange(endpoint.getCamelContext());\n+        exchange.setFromEndpoint(endpoint);\n         if (entry != null) {\n             exchange.getIn().setHeader(Jt400Endpoint.SENDER_INFORMATION, entry.getSenderInformation());\n             if (endpoint.getFormat() == Jt400Configuration.Format.binary) {\n@@ -134,6 +135,7 @@ private Exchange receive(KeyedDataQueue queue, long timeout) throws Exception {\n         }\n \n         Exchange exchange = new DefaultExchange(endpoint.getCamelContext());\n+        exchange.setFromEndpoint(endpoint);\n         if (entry != null) {\n             exchange.getIn().setHeader(Jt400Endpoint.SENDER_INFORMATION, entry.getSenderInformation());\n             if (endpoint.getFormat() == Jt400Configuration.Format.binary) {",
                "raw_url": "https://github.com/apache/camel/raw/2ddca935c9bebf5e29ddde53683eec08879b6f18/components/camel-jt400/src/main/java/org/apache/camel/component/jt400/Jt400DataQueueConsumer.java",
                "sha": "825af3cde13f1c4353856db7eaa706687683bb1f",
                "status": "modified"
            }
        ],
        "message": "Added set of fromEndpoint in producing exchanges to prevent a NPE using the component through camel uri binding in switchyard",
        "parent": "https://github.com/apache/camel/commit/75b813aedee88e170a4f76f729a2ecd732a2d9c8",
        "repo": "camel",
        "unit_tests": [
            "Jt400DataQueueConsumerTest.java"
        ]
    },
    "camel_2fe5d2a": {
        "bug_id": "camel_2fe5d2a",
        "commit": "https://github.com/apache/camel/commit/2fe5d2acaf9f3d1b1c91001007645364f6dbfd90",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/2fe5d2acaf9f3d1b1c91001007645364f6dbfd90/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java?ref=2fe5d2acaf9f3d1b1c91001007645364f6dbfd90",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "patch": "@@ -356,7 +356,7 @@ public static Boolean parseBoolean(CamelContext camelContext, String text) throw\n     public static SortedMap<String, Properties> findComponents(CamelContext camelContext) throws LoadPropertiesException {\n         SortedMap<String, Properties> map = new TreeMap<String, Properties>();\n         Enumeration<URL> iter = camelContext.getClassResolver().loadResourcesAsURL(COMPONENT_DESCRIPTOR);\n-        while (iter.hasMoreElements()) {\n+        while (iter != null && iter.hasMoreElements()) {\n             URL url = iter.nextElement();\n             try {\n                 Properties properties = new Properties();",
                "raw_url": "https://github.com/apache/camel/raw/2fe5d2acaf9f3d1b1c91001007645364f6dbfd90/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "sha": "03b54221bfd2505b02ad670670c72b465202c237",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/f57c78f100482592b36bf6f06c9e5c703e5c751d",
        "repo": "camel",
        "unit_tests": [
            "CamelContextHelperTest.java"
        ]
    },
    "camel_337a675": {
        "bug_id": "camel_337a675",
        "commit": "https://github.com/apache/camel/commit/337a6756480354afea7531a1a4216de9d232f211",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/337a6756480354afea7531a1a4216de9d232f211/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java?ref=337a6756480354afea7531a1a4216de9d232f211",
                "deletions": 0,
                "filename": "components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "patch": "@@ -73,6 +73,10 @@ private Object invokeFunction(Method method,\n     }\n \n     Object mapCustom(Object source) {\n+        if (source == null) {\n+            return null;\n+        }\n+\n         // The converter parameter is stored in a thread local variable, so\n         // we need to parse the parameter on each invocation\n         // ex: custom-converter-param=\"org.example.MyMapping,map\"",
                "raw_url": "https://github.com/apache/camel/raw/337a6756480354afea7531a1a4216de9d232f211/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "sha": "72bc783df3fe85f0991ddbdc49017d67804b8976",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9710: Avoid NPE as the class is mandatory",
        "parent": "https://github.com/apache/camel/commit/927bb8a4ce19d72c016a4653bc5e93dd4ab61102",
        "repo": "camel",
        "unit_tests": [
            "CustomMapperTest.java"
        ]
    },
    "camel_36e7b66": {
        "bug_id": "camel_36e7b66",
        "commit": "https://github.com/apache/camel/commit/36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java?ref=36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
                "deletions": 9,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "patch": "@@ -22,6 +22,7 @@\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.CamelContextAware;\n+import org.apache.camel.Component;\n import org.apache.camel.Consume;\n import org.apache.camel.Consumer;\n import org.apache.camel.ConsumerTemplate;\n@@ -37,7 +38,6 @@\n import org.apache.camel.component.bean.BeanInfo;\n import org.apache.camel.component.bean.BeanProcessor;\n import org.apache.camel.component.bean.ProxyHelper;\n-import org.apache.camel.component.properties.PropertiesComponent;\n import org.apache.camel.processor.CamelInternalProcessor;\n import org.apache.camel.processor.UnitOfWorkProducer;\n import org.apache.camel.util.CamelContextHelper;\n@@ -227,17 +227,13 @@ public Object getInjectionValue(Class<?> type, String endpointUri, String endpoi\n     public Object getInjectionPropertyValue(Class<?> type, String propertyName, String propertyDefaultValue,\n                                             String injectionPointName, Object bean, String beanName) {\n         try {\n+            // enforce a properties component to be created if none existed\n+            CamelContextHelper.lookupPropertiesComponent(getCamelContext(), true);\n+\n             String key;\n             String prefix = getCamelContext().getPropertyPrefixToken();\n             String suffix = getCamelContext().getPropertySuffixToken();\n-\n-            if (prefix == null && suffix == null) {\n-                // if no custom prefix/suffix then use defaults\n-                prefix = PropertiesComponent.DEFAULT_PREFIX_TOKEN;\n-                suffix = PropertiesComponent.DEFAULT_SUFFIX_TOKEN;\n-            }\n-\n-            if (!propertyName.startsWith(prefix)) {\n+            if (!propertyName.contains(prefix)) {\n                 // must enclose the property name with prefix/suffix to have it resolved\n                 key = prefix + propertyName + suffix;\n             } else {",
                "raw_url": "https://github.com/apache/camel/raw/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java",
                "sha": "817a2f969c0ff96b5e9990062255c9198b30d676",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
                "deletions": 28,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -37,7 +37,6 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n-\n import javax.naming.Context;\n import javax.xml.bind.JAXBContext;\n import javax.xml.bind.Unmarshaller;\n@@ -1458,23 +1457,8 @@ public String resolvePropertyPlaceholders(String text) throws Exception {\n         if (text != null && !text.startsWith(\"properties:\")) {\n             // No component, assume default tokens.\n             if (pc == null && text.contains(PropertiesComponent.DEFAULT_PREFIX_TOKEN)) {\n-\n-                // try to lookup component, as we may be initializing CamelContext itself\n-                Component existing = lookupPropertiesComponent();\n-                if (existing != null) {\n-                    if (existing instanceof PropertiesComponent) {\n-                        pc = (PropertiesComponent) existing;\n-                    } else {\n-                        // properties component must be expected type\n-                        throw new IllegalArgumentException(\"Found properties component of type: \" + existing.getClass() + \" instead of expected: \" + PropertiesComponent.class);\n-                    }\n-                }\n-\n-                if (pc == null) {\n-                    // create a default properties component to be used as there may be default values we can use\n-                    log.info(\"No existing PropertiesComponent has been configured, creating a new default PropertiesComponent with name: properties\");\n-                    pc = getComponent(\"properties\", PropertiesComponent.class);\n-                }\n+                // lookup existing properties component, or force create a new default component\n+                pc = (PropertiesComponent) CamelContextHelper.lookupPropertiesComponent(this, true);\n             }\n \n             if (pc != null && text.contains(pc.getPrefixToken())) {\n@@ -2111,7 +2095,7 @@ private void doStartCamel() throws Exception {\n \n         // eager lookup any configured properties component to avoid subsequent lookup attempts which may impact performance\n         // due we use properties component for property placeholder resolution at runtime\n-        Component existing = lookupPropertiesComponent();\n+        Component existing = CamelContextHelper.lookupPropertiesComponent(this, false);\n         if (existing != null) {\n             // store reference to the existing properties component\n             if (existing instanceof PropertiesComponent) {\n@@ -3075,16 +3059,12 @@ public DataFormatDefinition resolveDataFormatDefinition(String name) {\n         }\n     }\n \n+    /**\n+     * @deprecated use {@link org.apache.camel.util.CamelContextHelper#lookupPropertiesComponent(org.apache.camel.CamelContext, boolean)}\n+     */\n+    @Deprecated\n     protected Component lookupPropertiesComponent() {\n-        // no existing properties component so lookup and add as component if possible\n-        PropertiesComponent answer = (PropertiesComponent) hasComponent(\"properties\");\n-        if (answer == null) {\n-            answer = getRegistry().lookupByNameAndType(\"properties\", PropertiesComponent.class);\n-            if (answer != null) {\n-                addComponent(\"properties\", answer);\n-            }\n-        }\n-        return answer;\n+        return CamelContextHelper.lookupPropertiesComponent(this, false);\n     }\n \n     public ShutdownStrategy getShutdownStrategy() {",
                "raw_url": "https://github.com/apache/camel/raw/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "7eb7fe6285e57551b832432a5ad946eee1130026",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java?ref=36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.spi.ExecutorServiceManager;\n import org.apache.camel.spi.RouteContext;\n+import org.apache.camel.util.CamelContextHelper;\n import org.apache.camel.util.IntrospectionSupport;\n import org.apache.camel.util.ObjectHelper;\n import org.slf4j.Logger;\n@@ -524,6 +525,9 @@ public static void resolvePropertyPlaceholders(RouteContext routeContext, Object\n                     String local = key.getLocalPart();\n                     Object value = processorDefinition.getOtherAttributes().get(key);\n                     if (value != null && value instanceof String) {\n+                        // enforce a properties component to be created if none existed\n+                        CamelContextHelper.lookupPropertiesComponent(routeContext.getCamelContext(), true);\n+\n                         // value must be enclosed with placeholder tokens\n                         String s = (String) value;\n                         String prefixToken = routeContext.getCamelContext().getPropertyPrefixToken();",
                "raw_url": "https://github.com/apache/camel/raw/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinitionHelper.java",
                "sha": "5ba236b5d17215625050add3a44c64f5a4a6c382",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/camel/blob/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java?ref=36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.NoSuchBeanException;\n import org.apache.camel.NoSuchEndpointException;\n+import org.apache.camel.component.properties.PropertiesComponent;\n import org.apache.camel.spi.ClassResolver;\n import org.apache.camel.spi.RouteStartupOrder;\n import org.slf4j.Logger;\n@@ -477,4 +478,30 @@ public static int getRouteStartupOrder(CamelContext camelContext, String routeId\n         return 0;\n     }\n \n+    /**\n+     * Lookup the {@link org.apache.camel.component.properties.PropertiesComponent} from the {@link org.apache.camel.CamelContext}.\n+     * <p/>\n+     * @param camelContext the camel context\n+     * @param autoCreate whether to automatic create a new default {@link org.apache.camel.component.properties.PropertiesComponent} if no custom component\n+     *                   has been configured.\n+     * @return the properties component, or <tt>null</tt> if none has been defined, and auto create is <tt>false</tt>.\n+     */\n+    public static Component lookupPropertiesComponent(CamelContext camelContext, boolean autoCreate) {\n+        // no existing properties component so lookup and add as component if possible\n+        PropertiesComponent answer = (PropertiesComponent) camelContext.hasComponent(\"properties\");\n+        if (answer == null) {\n+            answer = camelContext.getRegistry().lookupByNameAndType(\"properties\", PropertiesComponent.class);\n+            if (answer != null) {\n+                camelContext.addComponent(\"properties\", answer);\n+            }\n+        }\n+        if (answer == null && autoCreate) {\n+            // create a default properties component to be used as there may be default values we can use\n+            LOG.info(\"No existing PropertiesComponent has been configured, creating a new default PropertiesComponent with name: properties\");\n+            answer = camelContext.getComponent(\"properties\", PropertiesComponent.class);\n+        }\n+        return answer;\n+    }\n+\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/36e7b6681f8817a2b3baf0a30bd82ec14789b32a/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "sha": "097ed29e76442c34be96889183a288cf59919947",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8125: Avoid potential NPE when using @PropertyInject with Camel main.",
        "parent": "https://github.com/apache/camel/commit/07caaa4f39112deca295a6677402fec9d3fc4019",
        "repo": "camel",
        "unit_tests": [
            "CamelContextHelperTest.java"
        ]
    },
    "camel_384751e": {
        "bug_id": "camel_384751e",
        "commit": "https://github.com/apache/camel/commit/384751e1a1b3eae0213190823f36643b39229450",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/384751e1a1b3eae0213190823f36643b39229450/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=384751e1a1b3eae0213190823f36643b39229450",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -1878,7 +1878,7 @@ protected synchronized void stopRouteService(RouteService routeService, boolean\n     protected void logRouteState(Route route, String state) {\n         if (log.isInfoEnabled()) {\n             if (route.getConsumer() != null) {\n-                log.info(\"Route: {} {}, was consuming from: {}\", route.getId(), state, route.getConsumer().getEndpoint());\n+                log.info(\"Route: {} {}, was consuming from: {}\", new Object[]{route.getId(), state, route.getConsumer().getEndpoint()});\n             } else {\n                 log.info(\"Route: {} {}.\", route.getId(), state);\n             }",
                "raw_url": "https://github.com/apache/camel/raw/384751e1a1b3eae0213190823f36643b39229450/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "2e791cf4d4c8277d4e04c538c21aabd1a447ed19",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5830 fix the NPE when the shutdown the route which is not started rightly.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1414857 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/a04674f20f294944b3ee7c6768a482c7dc337d8a",
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_39509af": {
        "bug_id": "camel_39509af",
        "commit": "https://github.com/apache/camel/commit/39509af13790d3baaa6af383c35e509d01c92f6c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/39509af13790d3baaa6af383c35e509d01c92f6c/components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/ServiceInterfaceStrategy.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/ServiceInterfaceStrategy.java?ref=39509af13790d3baaa6af383c35e509d01c92f6c",
                "deletions": 2,
                "filename": "components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/ServiceInterfaceStrategy.java",
                "patch": "@@ -96,7 +96,6 @@ private TypeInfo getOutInfo(Method method) {\n         // parameter types are returned in declaration order\n         Class<?>[] types = method.getParameterTypes();\n         if (types.length == 0) {\n-            typeInfos.add(new TypeInfo(null, null));\n             return typeInfos;\n         }\n         if (requestWrapper != null && requestWrapper.className() != null) {\n@@ -140,7 +139,7 @@ private TypeInfo getOutInfo(Method method) {\n      * Determines how the parameter object of the service method will be named\n      * in xml. It will use either the RequestWrapper annotation of the method if\n      * present or the WebParam method of the parameter.\n-     * \n+     *\n      * @param method\n      */\n     private MethodInfo analyzeMethod(Method method) {",
                "raw_url": "https://github.com/apache/camel/raw/39509af13790d3baaa6af383c35e509d01c92f6c/components/camel-soap/src/main/java/org/apache/camel/dataformat/soap/name/ServiceInterfaceStrategy.java",
                "sha": "15884b806af448e8abb4064c589ace7411ae95b9",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6720: Fixed potential NPE in camel-soap. Thanks to Movees  for the fix.",
        "parent": "https://github.com/apache/camel/commit/ef74ad512a44f94f0ebe58670419c5d914cadfb3",
        "repo": "camel",
        "unit_tests": [
            "ServiceInterfaceStrategyTest.java"
        ]
    },
    "camel_3bc26be": {
        "bug_id": "camel_3bc26be",
        "commit": "https://github.com/apache/camel/commit/3bc26bef77b8d91944ebc20d2e46d5c1b4587f34",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/3bc26bef77b8d91944ebc20d2e46d5c1b4587f34/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowProducer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowProducer.java?ref=3bc26bef77b8d91944ebc20d2e46d5c1b4587f34",
                "deletions": 1,
                "filename": "components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowProducer.java",
                "patch": "@@ -128,7 +128,9 @@ public boolean process(final Exchange camelExchange, final AsyncCallback callbac\n         final TypeConverter tc = endpoint.getCamelContext().getTypeConverter();\n         final ByteBuffer bodyAsByte = tc.tryConvertTo(ByteBuffer.class, body);\n \n-        if (body != null) {\n+        // As tryConvertTo is used to convert the body, we should do null check\n+        // or the call bodyAsByte.remaining() may throw an NPE\n+        if (body != null && bodyAsByte != null) {\n             requestHeaders.put(Headers.CONTENT_LENGTH, bodyAsByte.remaining());\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/3bc26bef77b8d91944ebc20d2e46d5c1b4587f34/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowProducer.java",
                "sha": "a4133dffa968168bc105c65d6503e49acff136d4",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11057: Undertow Producer : NPE if tryConvertTo fails to convert exchange body to ByteBuffer",
        "parent": "https://github.com/apache/camel/commit/5586f91c4b5b22b822eebeda8843cefa59d78569",
        "repo": "camel",
        "unit_tests": [
            "UndertowProducerTest.java"
        ]
    },
    "camel_3c64927": {
        "bug_id": "camel_3c64927",
        "commit": "https://github.com/apache/camel/commit/3c649276475afdfa5cf584194b0acc653118de87",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/3c649276475afdfa5cf584194b0acc653118de87/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java?ref=3c649276475afdfa5cf584194b0acc653118de87",
                "deletions": 1,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "patch": "@@ -277,7 +277,7 @@ public void appendJmsProperty(Message jmsMessage, Exchange exchange, org.apache.\n             Object value = getValidJMSHeaderValue(headerName, headerValue);\n             if (value != null) {\n                 // must encode to safe JMS header name before setting property on jmsMessage\n-                String key = endpoint.getJmsKeyFormatStrategy().encodeKey(headerName);\n+                String key = jmsKeyFormatStrategy.encodeKey(headerName);\n                 jmsMessage.setObjectProperty(key, value);\n             } else if (LOG.isDebugEnabled()) {\n                 // okay the value is not a primitive or string so we cannot sent it over the wire",
                "raw_url": "https://github.com/apache/camel/raw/3c649276475afdfa5cf584194b0acc653118de87/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "sha": "70efe7a5f81ec02d75c0c7dfeccfe186091ca364",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1492: Fixed NPE when endpoint not pprovided in JmsBinding.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@759071 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/5b0c47c57f8a6b9fddf3ed9fa2196f4ba8ca215d",
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java"
        ]
    },
    "camel_3eaf375": {
        "bug_id": "camel_3eaf375",
        "commit": "https://github.com/apache/camel/commit/3eaf3754cc1904c3440c3de030cd58a5bf7a9976",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/3eaf3754cc1904c3440c3de030cd58a5bf7a9976/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java?ref=3eaf3754cc1904c3440c3de030cd58a5bf7a9976",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "patch": "@@ -53,7 +53,7 @@ public ScheduledPollConsumer(DefaultEndpoint endpoint, Processor processor) {\n \n         // TODO: this executor should also be shutdown when CamelContext stops\n         this.executor = endpoint.getCamelContext().getExecutorServiceStrategy()\n-                            .newScheduledThreadPool(this, getEndpoint().getEndpointUri(), DEFAULT_THREADPOOL_SIZE);\n+                            .newScheduledThreadPool(this, endpoint.getEndpointUri(), DEFAULT_THREADPOOL_SIZE);\n         ObjectHelper.notNull(executor, \"executor\");\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/3eaf3754cc1904c3440c3de030cd58a5bf7a9976/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "sha": "9fad778f642a719092cf7e4a9bb23d3d4edddec3",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1588: Fixed a potential NPE if getEndpoint was overridden\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@922230 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/7681dc1dc955293d186f370206d4bb9a8c34d4fa",
        "repo": "camel",
        "unit_tests": [
            "ScheduledPollConsumerTest.java"
        ]
    },
    "camel_4093fe5": {
        "bug_id": "camel_4093fe5",
        "commit": "https://github.com/apache/camel/commit/4093fe50ad947be352a7450bb8bda14f168973ee",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/4093fe50ad947be352a7450bb8bda14f168973ee/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java?ref=4093fe50ad947be352a7450bb8bda14f168973ee",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java",
                "patch": "@@ -509,8 +509,6 @@ protected void setupClientFactoryBean(ClientFactoryBean factoryBean, Class<?> cl\n         if (getServiceName() != null) {\n             factoryBean.setServiceName(getServiceName());\n         }\n-        \n-        \n \n         // port name qname\n         if (getPortName() != null) {\n@@ -560,6 +558,9 @@ protected void setupClientFactoryBean(ClientFactoryBean factoryBean, Class<?> cl\n             AuthorizationPolicy authPolicy = new AuthorizationPolicy();\n             authPolicy.setUserName(username);\n             authPolicy.setPassword(password);\n+            if (factoryBean.getProperties() == null) {\n+                factoryBean.setProperties(new HashMap<String, Object>());\n+            }\n             factoryBean.getProperties().put(AuthorizationPolicy.class.getName(), authPolicy);\n         }\n         ",
                "raw_url": "https://github.com/apache/camel/raw/4093fe50ad947be352a7450bb8bda14f168973ee/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java",
                "sha": "b21bfbee3a5a35cd6762b93c29cf41341cc0ef24",
                "status": "modified"
            }
        ],
        "message": "CAMEL-10708: Fixed potential NPE when setting username/password",
        "parent": "https://github.com/apache/camel/commit/1562121d4c089ed346ea2994008ec2c74ac50e8f",
        "repo": "camel",
        "unit_tests": [
            "CxfEndpointTest.java"
        ]
    },
    "camel_44010a5": {
        "bug_id": "camel_44010a5",
        "commit": "https://github.com/apache/camel/commit/44010a5669052a6db762bd624976b10032b27250",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/44010a5669052a6db762bd624976b10032b27250/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java?ref=44010a5669052a6db762bd624976b10032b27250",
                "deletions": 1,
                "filename": "components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java",
                "patch": "@@ -386,7 +386,7 @@ protected void doStop() throws Exception {\n                 // shutdown http client connections\n                 httpClient.stop();\n                 // destroy http client if it was created by the component\n-                if (config.getHttpClient() == null) {\n+                if (config != null && config.getHttpClient() == null) {\n                     httpClient.destroy();\n                 }\n                 httpClient = null;",
                "raw_url": "https://github.com/apache/camel/raw/44010a5669052a6db762bd624976b10032b27250/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceComponent.java",
                "sha": "5b3dd9cb511dc48fc6e523673af48006bc5dfd89",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11884: NPE when stopping Salesforce compo...\n\n...nent that failed to start\n\nAdds a check to see if `config` is set in order to prevent NPE when\nstopping.",
        "parent": "https://github.com/apache/camel/commit/0ad3f62402805ec0ae1a15a9cac210c7b8096e2e",
        "repo": "camel",
        "unit_tests": [
            "SalesforceComponentTest.java"
        ]
    },
    "camel_49c3c02": {
        "bug_id": "camel_49c3c02",
        "commit": "https://github.com/apache/camel/commit/49c3c024d4f8de9b89da5b7c738e123011a74180",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/49c3c024d4f8de9b89da5b7c738e123011a74180/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java?ref=49c3c024d4f8de9b89da5b7c738e123011a74180",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java",
                "patch": "@@ -898,11 +898,13 @@ String doAsEndpointUri(String scheme, Map<String, String> properties, String amp\n         rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n \n         // clip the scheme from the syntax\n-        originalSyntax = after(originalSyntax, \":\");\n+        String syntax = \"\";\n+        if (originalSyntax.contains(\":\")) {\n+            originalSyntax = after(originalSyntax, \":\");\n+        }\n \n         // build at first according to syntax (use a tree map as we want the uri options sorted)\n         Map<String, String> copy = new TreeMap<>(properties);\n-        String syntax = \"\";\n         Matcher syntaxMatcher = COMPONENT_SYNTAX_PARSER.matcher(originalSyntax);\n         while (syntaxMatcher.find()) {\n             syntax += syntaxMatcher.group(1);",
                "raw_url": "https://github.com/apache/camel/raw/49c3c024d4f8de9b89da5b7c738e123011a74180/camel-core/src/main/java/org/apache/camel/runtimecatalog/AbstractCamelCatalog.java",
                "sha": "95006340340de56ef450b750efee549c95a2ba94",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/49c3c024d4f8de9b89da5b7c738e123011a74180/platforms/camel-catalog/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/platforms/camel-catalog/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java?ref=49c3c024d4f8de9b89da5b7c738e123011a74180",
                "deletions": 2,
                "filename": "platforms/camel-catalog/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java",
                "patch": "@@ -898,11 +898,13 @@ String doAsEndpointUri(String scheme, Map<String, String> properties, String amp\n         rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n \n         // clip the scheme from the syntax\n-        originalSyntax = after(originalSyntax, \":\");\n+        String syntax = \"\";\n+        if (originalSyntax.contains(\":\")) {\n+            originalSyntax = after(originalSyntax, \":\");\n+        }\n \n         // build at first according to syntax (use a tree map as we want the uri options sorted)\n         Map<String, String> copy = new TreeMap<>(properties);\n-        String syntax = \"\";\n         Matcher syntaxMatcher = COMPONENT_SYNTAX_PARSER.matcher(originalSyntax);\n         while (syntaxMatcher.find()) {\n             syntax += syntaxMatcher.group(1);",
                "raw_url": "https://github.com/apache/camel/raw/49c3c024d4f8de9b89da5b7c738e123011a74180/platforms/camel-catalog/src/main/java/org/apache/camel/catalog/AbstractCamelCatalog.java",
                "sha": "78333c2f98a7adbbc86317911b3fa1f64d77ce46",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11576 - Fixed a NPE bug",
        "parent": "https://github.com/apache/camel/commit/cf46c8f6487bacc4304ed8de0e1104383cac70f9",
        "repo": "camel",
        "unit_tests": [
            "AbstractCamelCatalogTest.java"
        ]
    },
    "camel_5067202": {
        "bug_id": "camel_5067202",
        "commit": "https://github.com/apache/camel/commit/50672027fab783e2abd33e6d3630855c448d7bb2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/50672027fab783e2abd33e6d3630855c448d7bb2/camel-core/src/main/java/org/apache/camel/util/IOHelper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/IOHelper.java?ref=50672027fab783e2abd33e6d3630855c448d7bb2",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/IOHelper.java",
                "patch": "@@ -213,7 +213,9 @@ public static int copy(final Reader input, final Writer output, int bufferSize)\n      */\n     public static void force(FileChannel channel, String name, Logger log) {\n         try {\n-            channel.force(true);\n+            if (channel != null) {\n+                channel.force(true);\n+            }\n         } catch (Exception e) {\n             if (log == null) {\n                 // then fallback to use the own Logger",
                "raw_url": "https://github.com/apache/camel/raw/50672027fab783e2abd33e6d3630855c448d7bb2/camel-core/src/main/java/org/apache/camel/util/IOHelper.java",
                "sha": "80566cdacebaf061b375a04116f9f61af5f93277",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1341968 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/2267e34a1cd19f916baf2198bbe196d78a26a7fd",
        "repo": "camel",
        "unit_tests": [
            "IOHelperTest.java"
        ]
    },
    "camel_5827b3d": {
        "bug_id": "camel_5827b3d",
        "commit": "https://github.com/apache/camel/commit/5827b3d503cfc5763470be5290346e345aff26f0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/5827b3d503cfc5763470be5290346e345aff26f0/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=5827b3d503cfc5763470be5290346e345aff26f0",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -1659,7 +1659,7 @@ public void setupRoutes(boolean done) {\n \n     public synchronized RouteDefinition getRouteDefinition(String id) {\n         for (RouteDefinition route : routeDefinitions) {\n-            if (route.getId() != null && route.getId().equals(id)) {\n+            if (route.idOrCreate(nodeIdFactory).equals(id)) {\n                 return route;\n             }\n         }",
                "raw_url": "https://github.com/apache/camel/raw/5827b3d503cfc5763470be5290346e345aff26f0/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "a12f08847665fae04f205a6c51ae612d2284da6e",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8077: Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/4650af58464b2db9c6b0756ca0a22dde0a0e40ae",
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_5b1012e": {
        "bug_id": "camel_5b1012e",
        "commit": "https://github.com/apache/camel/commit/5b1012ef4132bcdc3092287d7fcfcb3af206cefd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/5b1012ef4132bcdc3092287d7fcfcb3af206cefd/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java?ref=5b1012ef4132bcdc3092287d7fcfcb3af206cefd",
                "deletions": 1,
                "filename": "components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java",
                "patch": "@@ -132,7 +132,7 @@ protected HttpClient createHttpClient() {\n         clientBuilder.setDefaultCookieStore(cookieStore);\n         // setup the httpConnectionManager\n         clientBuilder.setConnectionManager(clientConnectionManager);\n-        if (getClientConnectionManager() == getComponent().getClientConnectionManager()) {\n+        if (getComponent() != null && getComponent().getClientConnectionManager() == getClientConnectionManager()) {\n             clientBuilder.setConnectionManagerShared(true);\n         }\n ",
                "raw_url": "https://github.com/apache/camel/raw/5b1012ef4132bcdc3092287d7fcfcb3af206cefd/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpEndpoint.java",
                "sha": "b589e655e31d8d34619ec0b180d02b6de27079db",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/8c938bc1e0f3eab2425effd94b274effa1b8c431",
        "repo": "camel",
        "unit_tests": [
            "HttpEndpointTest.java"
        ]
    },
    "camel_5ff0eb1": {
        "bug_id": "camel_5ff0eb1",
        "commit": "https://github.com/apache/camel/commit/5ff0eb17a6194dbc898e9190a8f9c0cc317771be",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/5ff0eb17a6194dbc898e9190a8f9c0cc317771be/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java?ref=5ff0eb17a6194dbc898e9190a8f9c0cc317771be",
                "deletions": 0,
                "filename": "components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java",
                "patch": "@@ -39,13 +39,15 @@ public IrcMessage(String messageType, IRCUser user, String message) {\n         this.messageType = messageType;\n         this.user = user;\n         this.message = message;\n+        setBody(message);\n     }\n \n     public IrcMessage(String messageType, String target, IRCUser user, String message) {\n         this.messageType = messageType;\n         this.target = target;\n         this.user = user;\n         this.message = message;\n+        setBody(message);\n     }\n \n     public IrcMessage(String messageType, String target, IRCUser user, String whoWasKickedNick, String message) {\n@@ -54,6 +56,7 @@ public IrcMessage(String messageType, String target, IRCUser user, String whoWas\n         this.user = user;\n         this.whoWasKickedNick = whoWasKickedNick;\n         this.message = message;\n+        setBody(message);\n     }\n \n     public IrcMessage(String messageType, String target, IRCUser user) {\n@@ -67,6 +70,7 @@ public IrcMessage(String messageType, int num, String value, String message) {\n         this.num = num;\n         this.value = value;\n         this.message = message;\n+        setBody(message);\n     }\n \n     public String getMessageType() {",
                "raw_url": "https://github.com/apache/camel/raw/5ff0eb17a6194dbc898e9190a8f9c0cc317771be/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java",
                "sha": "be4bc8a00217ba0c0e381e2c9749a1cba348f846",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/5ff0eb17a6194dbc898e9190a8f9c0cc317771be/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java?ref=5ff0eb17a6194dbc898e9190a8f9c0cc317771be",
                "deletions": 11,
                "filename": "components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java",
                "patch": "@@ -50,16 +50,18 @@ public void process(Exchange exchange) throws Exception {\n             throw new RuntimeCamelException(\"Lost connection to \" + connection.getHost());\n         }\n \n-        if (isMessageACommand(msg)) {\n-            LOG.debug(\"Sending command: {}\", msg);\n-            connection.send(msg);\n-        } else if (targetChannel != null) {\n-            LOG.debug(\"Sending to: {} message: {}\", targetChannel, msg);\n-            connection.doPrivmsg(targetChannel, msg);\n-        } else {\n-            for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {\n-                LOG.debug(\"Sending to: {} message: {}\", channel, msg);\n-                connection.doPrivmsg(channel.getName(), msg);\n+        if (msg != null) {\n+            if (isMessageACommand(msg)) {\n+                LOG.debug(\"Sending command: {}\", msg);\n+                connection.send(msg);\n+            } else if (targetChannel != null) {\n+                LOG.debug(\"Sending to: {} message: {}\", targetChannel, msg);\n+                connection.doPrivmsg(targetChannel, msg);\n+            } else {\n+                for (IrcChannel channel : endpoint.getConfiguration().getChannels()) {\n+                    LOG.debug(\"Sending to: {} message: {}\", channel, msg);\n+                    connection.doPrivmsg(channel.getName(), msg);\n+                }\n             }\n         }\n     }\n@@ -72,7 +74,6 @@ protected void doStart() throws Exception {\n         endpoint.joinChannels();\n     }\n \n-\n     @Override\n     protected void doStop() throws Exception {\n         if (connection != null) {",
                "raw_url": "https://github.com/apache/camel/raw/5ff0eb17a6194dbc898e9190a8f9c0cc317771be/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java",
                "sha": "a129be94a65f55b8586dafc0e0a34d9a7411fdfa",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE and set body instead of lazy.",
        "parent": "https://github.com/apache/camel/commit/7253ae98ffe98042733ec243bd3535e9270b8d7c",
        "repo": "camel",
        "unit_tests": [
            "IrcProducerTest.java"
        ]
    },
    "camel_60c5a37": {
        "bug_id": "camel_60c5a37",
        "commit": "https://github.com/apache/camel/commit/60c5a37308f23b271143f4c49ab20405ecec944d",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/60c5a37308f23b271143f4c49ab20405ecec944d/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=60c5a37308f23b271143f4c49ab20405ecec944d",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -326,8 +326,13 @@ public Component getComponent(String name) {\n         if (componentType.isInstance(component)) {\n             return componentType.cast(component);\n         } else {\n-            throw new IllegalArgumentException(\"Found component of type: \" \n-                + component.getClass() + \" instead of expected: \" + componentType);\n+            String message;\n+            if (component == null) {\n+                message = \"Did not find component given by the name: \" + name;\n+            } else {\n+                message = \"Found component of type: \" + component.getClass() + \" instead of expected: \" + componentType;\n+            }\n+            throw new IllegalArgumentException(message);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/60c5a37308f23b271143f4c49ab20405ecec944d/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "3b8594f10c670e62683b63efd88172983f41961d",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE in the case getComponent(name) returns null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1241067 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/1a56e25bee187c6712806d9594b6e8084639b751",
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_70b4008": {
        "bug_id": "camel_70b4008",
        "commit": "https://github.com/apache/camel/commit/70b40086608ca99bebd563d97a2b5f3c15488495",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/70b40086608ca99bebd563d97a2b5f3c15488495/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java?ref=70b40086608ca99bebd563d97a2b5f3c15488495",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java",
                "patch": "@@ -152,7 +152,7 @@ private Object syncInvoke(Exchange cxfExchange) {\n \n                 BindingOperationInfo boi = cxfExchange.getBindingOperationInfo();\n                 // make sure the \"boi\" is remained as wrapped in PAYLOAD mode\n-                if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {\n+                if (boi != null && dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {\n                     boi = boi.getWrappedOperation();\n                     cxfExchange.put(BindingOperationInfo.class, boi);\n                 }",
                "raw_url": "https://github.com/apache/camel/raw/70b40086608ca99bebd563d97a2b5f3c15488495/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java",
                "sha": "a8c29f8364d07c0c52b547ce9caaf71b13797e3d",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-6625]potential NPE in CxfConsumer if the PAYLOAD not match the ServiceModel",
        "parent": "https://github.com/apache/camel/commit/7c066bf4e16acd4aeec8f46c41e34b0355b01431",
        "repo": "camel",
        "unit_tests": [
            "CxfConsumerTest.java"
        ]
    },
    "camel_721a617": {
        "bug_id": "camel_721a617",
        "commit": "https://github.com/apache/camel/commit/721a6179cf60dcae61f2430197f2aa10f6a52442",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/721a6179cf60dcae61f2430197f2aa10f6a52442/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java?ref=721a6179cf60dcae61f2430197f2aa10f6a52442",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java",
                "patch": "@@ -61,7 +61,12 @@ public static Object convertTo(Class<?> type, Exchange exchange, Object value, T\n \n     @Converter\n     public static String convertToString(GenericFile file, Exchange exchange) {\n-        return exchange.getContext().getTypeConverter().convertTo(String.class, file.getBody());\n+        if (exchange != null) {\n+            return exchange.getContext().getTypeConverter().convertTo(String.class, file.getBody());\n+        } else {\n+            // should revert to fallback converter if we dont have an exchange \n+            return null;\n+        }\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/721a6179cf60dcae61f2430197f2aa10f6a52442/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java",
                "sha": "3434052de84884962abfc408f83d5fa244c562a6",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE if exchange was null, eg from mina UDP codec\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@761885 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/88ca359343c3a96786d435985f46841eeffcfb6e",
        "repo": "camel",
        "unit_tests": [
            "GenericFileConverterTest.java"
        ]
    },
    "camel_722b4dc": {
        "bug_id": "camel_722b4dc",
        "commit": "https://github.com/apache/camel/commit/722b4dc56615974b7e1ea87d441972369ee60ffd",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/camel/blob/722b4dc56615974b7e1ea87d441972369ee60ffd/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java?ref=722b4dc56615974b7e1ea87d441972369ee60ffd",
                "deletions": 14,
                "filename": "camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "patch": "@@ -44,23 +44,25 @@ private PackageHelper() {\n     public static boolean isValidVersion(String packageName, double minimumVersion) {\n         try {\n             Package spring = Package.getPackage(packageName);\n-            String value = spring.getImplementationVersion();\n-            if (value != null) {\n-                // lets remove any extra dots in the string...\n-                int idx = value.indexOf('.');\n-                if (idx >= 0) {\n-                    StringBuffer buffer = new StringBuffer(value.substring(0, ++idx));\n-                    int i = idx;\n-                    for (int size = value.length(); i < size; i++) {\n-                        char ch = value.charAt(i);\n-                        if (Character.isDigit(ch)) {\n-                            buffer.append(ch);\n+            if (spring != null) {\n+                String value = spring.getImplementationVersion();\n+                if (value != null) {\n+                    // lets remove any extra dots in the string...\n+                    int idx = value.indexOf('.');\n+                    if (idx >= 0) {\n+                        StringBuffer buffer = new StringBuffer(value.substring(0, ++idx));\n+                        int i = idx;\n+                        for (int size = value.length(); i < size; i++) {\n+                            char ch = value.charAt(i);\n+                            if (Character.isDigit(ch)) {\n+                                buffer.append(ch);\n+                            }\n                         }\n+                        value = buffer.toString();\n                     }\n-                    value = buffer.toString();\n+                    double number = Double.parseDouble(value);\n+                    return number >= minimumVersion;\n                 }\n-                double number = Double.parseDouble(value);\n-                return number >= minimumVersion;\n             }\n         } catch (Exception e) {\n             LOG.debug(\"Failed to find out \" + packageName + \" version: \" + e, e);",
                "raw_url": "https://github.com/apache/camel/raw/722b4dc56615974b7e1ea87d441972369ee60ffd/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "sha": "89b115bede10029e42e7fadeaa5c704fee28d2f0",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1529 Fixed the NPE issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@767824 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/761ea13e803f7203dbe62961c082cd6b68807383",
        "repo": "camel",
        "unit_tests": [
            "PackageHelperTest.java"
        ]
    },
    "camel_72b3e17": {
        "bug_id": "camel_72b3e17",
        "commit": "https://github.com/apache/camel/commit/72b3e17f7419881383e412b831e15aec3ba83375",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/72b3e17f7419881383e412b831e15aec3ba83375/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=72b3e17f7419881383e412b831e15aec3ba83375",
                "deletions": 7,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -686,13 +686,15 @@ protected void propagateHeadersFromCamelToCxf(Exchange camelExchange,\n                 continue;\n             }\n             \n-            // things that are not filtered and not specifically copied will be put in transport headers\n-            if (entry.getValue() instanceof List) {\n-                transportHeaders.put(entry.getKey(), (List<String>)entry.getValue());\n-            } else {\n-                List<String> listValue = new ArrayList<String>();\n-                listValue.add(entry.getValue().toString());\n-                transportHeaders.put(entry.getKey(), listValue);\n+            if (ObjectHelper.isNotEmpty(entry.getValue())) {\n+                // things that are not filtered and not specifically copied will be put in transport headers\n+                if (entry.getValue() instanceof List) {\n+                    transportHeaders.put(entry.getKey(), (List<String>)entry.getValue());\n+                } else {\n+                    List<String> listValue = new ArrayList<String>();\n+                    listValue.add(entry.getValue().toString());\n+                    transportHeaders.put(entry.getKey(), listValue);\n+                }\n             }\n             \n         }",
                "raw_url": "https://github.com/apache/camel/raw/72b3e17f7419881383e412b831e15aec3ba83375/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "13f035b2b8268977fa072896506a0a7eeb719858",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9853: Camel-CXF: Possible NPE in DefaultCXFBinding",
        "parent": "https://github.com/apache/camel/commit/d350c5f270a1e47d675242234ec3ef787ca923a0",
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_759cfd0": {
        "bug_id": "camel_759cfd0",
        "commit": "https://github.com/apache/camel/commit/759cfd0b1586793dbf6eb335eba1e894b713f0db",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/759cfd0b1586793dbf6eb335eba1e894b713f0db/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=759cfd0b1586793dbf6eb335eba1e894b713f0db",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -1659,7 +1659,7 @@ public void setupRoutes(boolean done) {\n \n     public synchronized RouteDefinition getRouteDefinition(String id) {\n         for (RouteDefinition route : routeDefinitions) {\n-            if (route.getId().equals(id)) {\n+            if (route.getId() != null && route.getId().equals(id)) {\n                 return route;\n             }\n         }",
                "raw_url": "https://github.com/apache/camel/raw/759cfd0b1586793dbf6eb335eba1e894b713f0db/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "0cd26f6cc08a88af888e5e4f84e9eaf9481adc30",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8077: Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/e4331eefa001a029e6c2c388dad1a2a8d90ebef5",
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_791979c": {
        "bug_id": "camel_791979c",
        "commit": "https://github.com/apache/camel/commit/791979c8e037cba89d538b8f119be374afae42bc",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/791979c8e037cba89d538b8f119be374afae42bc/core/camel-base/src/main/java/org/apache/camel/runtimecatalog/impl/AbstractCamelCatalog.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/core/camel-base/src/main/java/org/apache/camel/runtimecatalog/impl/AbstractCamelCatalog.java?ref=791979c8e037cba89d538b8f119be374afae42bc",
                "deletions": 9,
                "filename": "core/camel-base/src/main/java/org/apache/camel/runtimecatalog/impl/AbstractCamelCatalog.java",
                "patch": "@@ -765,15 +765,17 @@ public EndpointValidationResult validateEndpointProperties(String uri, boolean i\n             boolean multiValued = isPropertyMultiValue(rows, key);\n             if (multiValued) {\n                 String prefix = getPropertyPrefix(rows, key);\n-                // extra all the multi valued options\n-                Map<String, Object> values = URISupport.extractProperties(parameters, prefix);\n-                // build a string with the extra multi valued options with the prefix and & as separator\n-                String csb = values.entrySet().stream()\n-                        .map(multi -> prefix + multi.getKey() + \"=\" + (multi.getValue() != null ? multi.getValue().toString() : \"\"))\n-                        .collect(Collectors.joining(\"&\"));\n-                // append the extra multi-values to the existing (which contains the first multi value)\n-                if (!csb.isEmpty()) {\n-                    value = value + \"&\" + csb;\n+                if (prefix != null) {\n+                    // extra all the multi valued options\n+                    Map<String, Object> values = URISupport.extractProperties(parameters, prefix);\n+                    // build a string with the extra multi valued options with the prefix and & as separator\n+                    String csb = values.entrySet().stream()\n+                            .map(multi -> prefix + multi.getKey() + \"=\" + (multi.getValue() != null ? multi.getValue().toString() : \"\"))\n+                            .collect(Collectors.joining(\"&\"));\n+                    // append the extra multi-values to the existing (which contains the first multi value)\n+                    if (!csb.isEmpty()) {\n+                        value = value + \"&\" + csb;\n+                    }\n                 }\n             }\n ",
                "raw_url": "https://github.com/apache/camel/raw/791979c8e037cba89d538b8f119be374afae42bc/core/camel-base/src/main/java/org/apache/camel/runtimecatalog/impl/AbstractCamelCatalog.java",
                "sha": "10238760bea976952b5d047d589838f9e1510ea8",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/640820556a0ff4158291f4f68347d62c176e2a34",
        "repo": "camel",
        "unit_tests": [
            "AbstractCamelCatalogTest.java"
        ]
    },
    "camel_7edd77c": {
        "bug_id": "camel_7edd77c",
        "commit": "https://github.com/apache/camel/commit/7edd77c02efd97dd147466ddc3e63231cc9e687f",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/camel/blob/7edd77c02efd97dd147466ddc3e63231cc9e687f/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java?ref=7edd77c02efd97dd147466ddc3e63231cc9e687f",
                "deletions": 5,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java",
                "patch": "@@ -70,7 +70,7 @@\n     /**\n      * Creates a payload object with the information from the given exchange.\n      *\n-     * @param exchange the exchange\n+     * @param exchange the exchange, must <b>not</b> be <tt>null</tt>\n      * @return the holder object with information copied form the exchange\n      */\n     public static DefaultExchangeHolder marshal(Exchange exchange) {\n@@ -80,11 +80,13 @@ public static DefaultExchangeHolder marshal(Exchange exchange) {\n     /**\n      * Creates a payload object with the information from the given exchange.\n      *\n-     * @param exchange the exchange\n+     * @param exchange the exchange, must <b>not</b> be <tt>null</tt>\n      * @param includeProperties whether or not to include exchange properties\n      * @return the holder object with information copied form the exchange\n      */\n     public static DefaultExchangeHolder marshal(Exchange exchange, boolean includeProperties) {\n+        ObjectHelper.notNull(exchange, \"exchange\");\n+\n         // we do not support files\n         Object body = exchange.getIn().getBody();\n         if (body instanceof WrappedFile || body instanceof File) {\n@@ -112,10 +114,13 @@ public static DefaultExchangeHolder marshal(Exchange exchange, boolean includePr\n     /**\n      * Transfers the information from the payload to the exchange.\n      *\n-     * @param exchange the exchange to set values from the payload\n-     * @param payload  the payload with the values\n+     * @param exchange the exchange to set values from the payload, must <b>not</b> be <tt>null</tt>\n+     * @param payload  the payload with the values, must <b>not</b> be <tt>null</tt>\n      */\n     public static void unmarshal(Exchange exchange, DefaultExchangeHolder payload) {\n+        ObjectHelper.notNull(exchange, \"exchange\");\n+        ObjectHelper.notNull(payload, \"payload\");\n+\n         exchange.setExchangeId(payload.exchangeId);\n         exchange.getIn().setBody(payload.inBody);\n         if (payload.inHeaders != null) {\n@@ -126,7 +131,9 @@ public static void unmarshal(Exchange exchange, DefaultExchangeHolder payload) {\n             if (payload.outHeaders != null) {\n                 exchange.getOut().setHeaders(payload.outHeaders);\n             }\n-            exchange.getOut().setFault(payload.outFaultFlag.booleanValue());\n+            if (payload.outFaultFlag != null) {\n+                exchange.getOut().setFault(payload.outFaultFlag);\n+            }\n         }\n         if (payload.properties != null) {\n             for (String key : payload.properties.keySet()) {",
                "raw_url": "https://github.com/apache/camel/raw/7edd77c02efd97dd147466ddc3e63231cc9e687f/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java",
                "sha": "cad02f41eb5ada9329fa8ff2c5d65d8e655b6d07",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6218: Added not null check to avoid NPE exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1462919 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/363b94487c243c19d7cc6dbff4cddff746cad885",
        "repo": "camel",
        "unit_tests": [
            "DefaultExchangeHolderTest.java"
        ]
    },
    "camel_8314bfe": {
        "bug_id": "camel_8314bfe",
        "commit": "https://github.com/apache/camel/commit/8314bfe7a976bb42afc3bfd7c34591d83cbed3d9",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/8314bfe7a976bb42afc3bfd7c34591d83cbed3d9/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=8314bfe7a976bb42afc3bfd7c34591d83cbed3d9",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -733,6 +733,11 @@ public Processor getProcessor(String id) {\n     }\n \n     public <T extends ManagedProcessorMBean> T getManagedProcessor(String id, Class<T> type) {\n+        // jmx must be enabled\n+        if (getManagementStrategy().getManagementAgent() == null) {\n+            return null;\n+        }\n+\n         Processor processor = getProcessor(id);\n         ProcessorDefinition def = getProcessorDefinition(id);\n \n@@ -749,6 +754,11 @@ public Processor getProcessor(String id) {\n     }\n \n     public <T extends ManagedRouteMBean> T getManagedRoute(String routeId, Class<T> type) {\n+        // jmx must be enabled\n+        if (getManagementStrategy().getManagementAgent() == null) {\n+            return null;\n+        }\n+\n         Route route = getRoute(routeId);\n \n         if (route != null) {\n@@ -764,6 +774,11 @@ public Processor getProcessor(String id) {\n     }\n \n     public ManagedCamelContextMBean getManagedCamelContext() {\n+        // jmx must be enabled\n+        if (getManagementStrategy().getManagementAgent() == null) {\n+            return null;\n+        }\n+\n         try {\n             ObjectName on = getManagementStrategy().getManagementNamingStrategy().getObjectNameForCamelContext(this);\n             return getManagementStrategy().getManagementAgent().newProxyClient(on, ManagedCamelContextMBean.class);",
                "raw_url": "https://github.com/apache/camel/raw/8314bfe7a976bb42afc3bfd7c34591d83cbed3d9/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "bbc33776994435af5e1d85172467ef8956e1bb17",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE if JMX not enabled",
        "parent": "https://github.com/apache/camel/commit/c65b632ddc973a1c5c7c724bc34ce0759bc3c0af",
        "repo": "camel",
        "unit_tests": [
            "DefaultCamelContextTest.java"
        ]
    },
    "camel_86525d7": {
        "bug_id": "camel_86525d7",
        "commit": "https://github.com/apache/camel/commit/86525d7c10bddc7d392e4bfe710d1e1b6fc54046",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/camel/blob/86525d7c10bddc7d392e4bfe710d1e1b6fc54046/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java?ref=86525d7c10bddc7d392e4bfe710d1e1b6fc54046",
                "deletions": 7,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "patch": "@@ -64,19 +64,28 @@\n  */\n public class JmsBinding {\n     private static final transient Log LOG = LogFactory.getLog(JmsBinding.class);\n-    private JmsEndpoint endpoint;\n-    private HeaderFilterStrategy headerFilterStrategy;\n+    private final JmsEndpoint endpoint;\n+    private final HeaderFilterStrategy headerFilterStrategy;\n+    private final JmsKeyFormatStrategy jmsKeyFormatStrategy;\n \n     public JmsBinding() {\n+        this.endpoint = null;\n         headerFilterStrategy = new JmsHeaderFilterStrategy();\n+        jmsKeyFormatStrategy = new DefaultJmsKeyFormatStrategy();\n     }\n \n     public JmsBinding(JmsEndpoint endpoint) {\n         this.endpoint = endpoint;\n-        headerFilterStrategy = endpoint.getHeaderFilterStrategy();\n-        if (headerFilterStrategy == null) {\n+        if (endpoint.getHeaderFilterStrategy() != null) {\n+            headerFilterStrategy = endpoint.getHeaderFilterStrategy();\n+        } else {\n             headerFilterStrategy = new JmsHeaderFilterStrategy();\n         }\n+        if (endpoint.getJmsKeyFormatStrategy() != null) {\n+            jmsKeyFormatStrategy = endpoint.getJmsKeyFormatStrategy();\n+        } else {\n+            jmsKeyFormatStrategy = new DefaultJmsKeyFormatStrategy();\n+        }\n     }\n \n     /**\n@@ -154,7 +163,7 @@ public Object extractBodyFromJms(Exchange exchange, Message message) {\n \n                     // must decode back from safe JMS header name to original header name\n                     // when storing on this Camel JmsMessage object.\n-                    String key = endpoint.getJmsKeyFormatStrategy().decodeKey(name);\n+                    String key = jmsKeyFormatStrategy.decodeKey(name);\n                     map.put(key, value);\n                 } catch (JMSException e) {\n                     throw new RuntimeCamelException(name, e);\n@@ -200,7 +209,7 @@ public Message makeJmsMessage(Exchange exchange, Session session) throws JMSExce\n     public Message makeJmsMessage(Exchange exchange, org.apache.camel.Message camelMessage, Session session, Exception cause) throws JMSException {\n         Message answer = null;\n \n-        boolean alwaysCopy = (endpoint != null) && endpoint.getConfiguration().isAlwaysCopyMessage();\n+        boolean alwaysCopy = endpoint != null && endpoint.getConfiguration().isAlwaysCopyMessage();\n         if (!alwaysCopy && camelMessage instanceof JmsMessage) {\n             JmsMessage jmsMessage = (JmsMessage)camelMessage;\n             if (!jmsMessage.shouldCreateNewMessage()) {\n@@ -432,7 +441,6 @@ protected void populateMapMessage(MapMessage message, Map<?, ?> map, CamelContex\n      */\n     protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage, String headerName,\n                                          Object headerValue, Exchange exchange) {\n-\n         return headerFilterStrategy == null\n             || !headerFilterStrategy.applyFilterToCamelHeaders(headerName, headerValue, exchange);\n     }",
                "raw_url": "https://github.com/apache/camel/raw/86525d7c10bddc7d392e4bfe710d1e1b6fc54046/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "sha": "fbf0f5e6fe7e670c9a1f41683d943c43ba6666e7",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1492: Fixed NPE when endpoint not pprovided in JmsBinding.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@759042 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/6d17017c13a25aaaffb423d7bc164cf7a02d129e",
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java"
        ]
    },
    "camel_89dc68e": {
        "bug_id": "camel_89dc68e",
        "commit": "https://github.com/apache/camel/commit/89dc68e5d87f4f19b313d98e22ee9f2337a394f0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/89dc68e5d87f4f19b313d98e22ee9f2337a394f0/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java?ref=89dc68e5d87f4f19b313d98e22ee9f2337a394f0",
                "deletions": 3,
                "filename": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "patch": "@@ -255,9 +255,8 @@ public void appendJmsProperty(Message jmsMessage, Exchange exchange, org.apache.\n                     // only set the JMSReply if the Exchange supports Out\n                     jmsMessage.setJMSReplyTo(ExchangeHelper.convertToType(exchange, Destination.class, headerValue));\n                 } else {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"Exchange is not out capable, Ignoring JMSReplyTo: \" + headerValue);\n-                    }\n+                    // warn we got a JMSReplyTo but the Exchange is not out capable\n+                    LOG.warn(\"Exchange is not out capable, Ignoring JMSReplyTo: \" + headerValue);\n                 }\n             } else if (headerName.equals(\"JMSType\")) {\n                 jmsMessage.setJMSType(ExchangeHelper.convertToType(exchange, String.class, headerValue));",
                "raw_url": "https://github.com/apache/camel/raw/89dc68e5d87f4f19b313d98e22ee9f2337a394f0/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java",
                "sha": "b6559a1621908164b01282f564d30888d5392907",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1461: JMSProducer only sets JMSReplyTo if exchange is out capable. Fixed a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@757730 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/1e31fa5f695e2f3f99fec2488197e99985f36376",
        "repo": "camel",
        "unit_tests": [
            "JmsBindingTest.java"
        ]
    },
    "camel_8a70c60": {
        "bug_id": "camel_8a70c60",
        "commit": "https://github.com/apache/camel/commit/8a70c60d8be187ef80daca054dd80536d7ad9b45",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8a70c60d8be187ef80daca054dd80536d7ad9b45/components/camel-jasypt/src/main/java/org/apache/camel/component/jasypt/JasyptPropertiesParser.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-jasypt/src/main/java/org/apache/camel/component/jasypt/JasyptPropertiesParser.java?ref=8a70c60d8be187ef80daca054dd80536d7ad9b45",
                "deletions": 1,
                "filename": "components/camel-jasypt/src/main/java/org/apache/camel/component/jasypt/JasyptPropertiesParser.java",
                "patch": "@@ -91,7 +91,7 @@ public void setPassword(String password) {\n         if (password.startsWith(\"sysenv:\")) {\n             password = System.getenv(ObjectHelper.after(password, \"sysenv:\"));\n         }\n-        if (password.startsWith(\"sys:\")) {\n+        if (ObjectHelper.isNotEmpty(password) && password.startsWith(\"sys:\")) {\n             password = System.getProperty(ObjectHelper.after(password, \"sys:\"));\n         }\n         this.password = password;",
                "raw_url": "https://github.com/apache/camel/raw/8a70c60d8be187ef80daca054dd80536d7ad9b45/components/camel-jasypt/src/main/java/org/apache/camel/component/jasypt/JasyptPropertiesParser.java",
                "sha": "aa86a0c78645513cdcb30eb710c371b3d4a0d65c",
                "status": "modified"
            }
        ],
        "message": "CAMEL-10822 - Camel Jasypt component throws NPE. Thanks to Joe Luo for the patch.",
        "parent": "https://github.com/apache/camel/commit/99dff7d7f48550cb7bbb4fb865822ab4e7d8a94d",
        "repo": "camel",
        "unit_tests": [
            "JasyptPropertiesParserTest.java"
        ]
    },
    "camel_8b7a7a4": {
        "bug_id": "camel_8b7a7a4",
        "commit": "https://github.com/apache/camel/commit/8b7a7a40140d13cdeafefb90b915f7d769b1b5eb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/8b7a7a40140d13cdeafefb90b915f7d769b1b5eb/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java?ref=8b7a7a40140d13cdeafefb90b915f7d769b1b5eb",
                "deletions": 1,
                "filename": "components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java",
                "patch": "@@ -100,6 +100,8 @@ public SubmitSm createSubmitSm(Exchange exchange) throws UnsupportedEncodingExce\n             \n             if (shortMessage.length < 255) {\n                 submitSm.setShortMessage(shortMessage);\n+                // To avoid the NPE error\n+                submitSm.setOptionalParametes(new OptionalParameter[]{});\n             } else {\n                 submitSm.setShortMessage(new byte[0]);\n                 OptionalParameter messagePayloadTLV = OptionalParameters.deserialize(OptionalParameter.Tag.MESSAGE_PAYLOAD.code(), shortMessage);\n@@ -306,4 +308,4 @@ public SmppConfiguration getConfiguration() {\n     public void setConfiguration(SmppConfiguration configuration) {\n         this.configuration = configuration;\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/camel/raw/8b7a7a40140d13cdeafefb90b915f7d769b1b5eb/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java",
                "sha": "0624fa47e9add6ed95419c50b68cae37f7265af8",
                "status": "modified"
            }
        ],
        "message": "CAMEL-4422 Fixed the NPE issue of camel-smpp when sending the message length is less then 255\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1165987 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/e64e3e33be6a71aa867be059bbb2959f0631d810",
        "repo": "camel",
        "unit_tests": [
            "SmppBindingTest.java"
        ]
    },
    "camel_8e1d10a": {
        "bug_id": "camel_8e1d10a",
        "commit": "https://github.com/apache/camel/commit/8e1d10a46a91bc3c8e5cd100d80ed30991fbf307",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/8e1d10a46a91bc3c8e5cd100d80ed30991fbf307/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java?ref=8e1d10a46a91bc3c8e5cd100d80ed30991fbf307",
                "deletions": 1,
                "filename": "components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java",
                "patch": "@@ -325,7 +325,7 @@ public Object toHttpResponse(HttpServerExchange httpExchange, Message message) t\n                 // we failed due an exception so print it as plain text\n                 StringWriter sw = new StringWriter();\n                 PrintWriter pw = new PrintWriter(sw);\n-                exception.getCause().printStackTrace(pw);\n+                exception.printStackTrace(pw);\n \n                 // the body should then be the stacktrace\n                 body = ByteBuffer.wrap(sw.toString().getBytes());",
                "raw_url": "https://github.com/apache/camel/raw/8e1d10a46a91bc3c8e5cd100d80ed30991fbf307/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java",
                "sha": "3d2578a899cc8b50cbf3360bfdf1b7a3e38412b1",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11264: Fixed potential NPE in DefaultUndertowHttpBinding",
        "parent": "https://github.com/apache/camel/commit/805fa85fae63f37c320742f86674417c079d1aad",
        "repo": "camel",
        "unit_tests": [
            "DefaultUndertowHttpBindingTest.java"
        ]
    },
    "camel_8fb2303": {
        "bug_id": "camel_8fb2303",
        "commit": "https://github.com/apache/camel/commit/8fb2303be6699a794103f051a099fb71580d5db1",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/8fb2303be6699a794103f051a099fb71580d5db1/components/camel-websocket/src/main/docs/websocket.adoc",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-websocket/src/main/docs/websocket.adoc?ref=8fb2303be6699a794103f051a099fb71580d5db1",
                "deletions": 3,
                "filename": "components/camel-websocket/src/main/docs/websocket.adoc",
                "patch": "@@ -33,6 +33,7 @@ Websocket Options\n ^^^^^^^^^^^^^^^^^\n \n \n+\n // component options: START\n The Jetty Websocket component supports 12 options which are listed below.\n \n@@ -48,9 +49,9 @@ The Jetty Websocket component supports 12 options which are listed below.\n | sslPassword | String | The password when using SSL.\n | sslKeystore | String | The path to the keystore.\n | enableJmx | boolean | If this option is true Jetty JMX support will be enabled for this endpoint. See Jetty JMX support for more details.\n-| minThreads | Integer | To set a value for minimum number of threads in server thread pool.\n-| maxThreads | Integer | To set a value for maximum number of threads in server thread pool.\n-| threadPool | ThreadPool | To use a custom thread pool for the server.\n+| minThreads | Integer | To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n+| maxThreads | Integer | To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n+| threadPool | ThreadPool | To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n | sslContextParameters | SSLContextParameters | To configure security using SSLContextParameters\n | socketFactory | Map | To configure a map which contains custom WebSocketFactory for sub protocols. The key in the map is the sub protocol. The default key is reserved for the default implementation.\n |=======================================================================\n@@ -59,6 +60,7 @@ The Jetty Websocket component supports 12 options which are listed below.\n \n \n \n+\n // endpoint options: START\n The Jetty Websocket component supports 20 endpoint options which are listed below:\n ",
                "raw_url": "https://github.com/apache/camel/raw/8fb2303be6699a794103f051a099fb71580d5db1/components/camel-websocket/src/main/docs/websocket.adoc",
                "sha": "1a59752ff137860e238b22daf3af9cdf55f4c5c3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/8fb2303be6699a794103f051a099fb71580d5db1/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java?ref=8fb2303be6699a794103f051a099fb71580d5db1",
                "deletions": 3,
                "filename": "components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "patch": "@@ -688,7 +688,7 @@ public Integer getMinThreads() {\n     }\n \n     /**\n-     * To set a value for minimum number of threads in server thread pool.\n+     * To set a value for minimum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n      */\n     public void setMinThreads(Integer minThreads) {\n         this.minThreads = minThreads;\n@@ -699,7 +699,7 @@ public Integer getMaxThreads() {\n     }\n \n     /**\n-     * To set a value for maximum number of threads in server thread pool.\n+     * To set a value for maximum number of threads in server thread pool. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n      */\n     public void setMaxThreads(Integer maxThreads) {\n         this.maxThreads = maxThreads;\n@@ -710,7 +710,7 @@ public ThreadPool getThreadPool() {\n     }\n \n     /**\n-     * To use a custom thread pool for the server.\n+     * To use a custom thread pool for the server. MaxThreads/minThreads or threadPool fields are required due to switch to Jetty9.\n      */\n     public void setThreadPool(ThreadPool threadPool) {\n         this.threadPool = threadPool;",
                "raw_url": "https://github.com/apache/camel/raw/8fb2303be6699a794103f051a099fb71580d5db1/components/camel-websocket/src/main/java/org/apache/camel/component/websocket/WebsocketComponent.java",
                "sha": "0e9d1d9ca2a9599aca20d73a48f56b576dc91441",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9950: Camel-Websocket: NPE in case minThreads, maxThreads and getThreadPool equals to null",
        "parent": "https://github.com/apache/camel/commit/5ae785204643c5618acc0b1434e29dfb219516b3",
        "repo": "camel",
        "unit_tests": [
            "WebsocketComponentTest.java"
        ]
    },
    "camel_927bb8a": {
        "bug_id": "camel_927bb8a",
        "commit": "https://github.com/apache/camel/commit/927bb8a4ce19d72c016a4653bc5e93dd4ab61102",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/927bb8a4ce19d72c016a4653bc5e93dd4ab61102/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java?ref=927bb8a4ce19d72c016a4653bc5e93dd4ab61102",
                "deletions": 2,
                "filename": "components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "patch": "@@ -105,9 +105,9 @@ Object mapCustom(Object source) {\n         }\n \n         Object customObj;\n-        Method method = null;\n+        Method method;\n         try {\n-            Class<?> customClass = resolver.resolveClass(className);\n+            Class<?> customClass = resolver.resolveMandatoryClass(className);\n             customObj = customClass.newInstance();\n \n             // If a specific mapping operation has been supplied use that",
                "raw_url": "https://github.com/apache/camel/raw/927bb8a4ce19d72c016a4653bc5e93dd4ab61102/components/camel-dozer/src/main/java/org/apache/camel/component/dozer/CustomMapper.java",
                "sha": "5924706b49d970e7a6324f068e1f074f69bd1b53",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9710: Avoid NPE as the class is mandatory",
        "parent": "https://github.com/apache/camel/commit/6f916d80003d4f4ad11a66c81cf3ebb668d550be",
        "repo": "camel",
        "unit_tests": [
            "CustomMapperTest.java"
        ]
    },
    "camel_94d6f0d": {
        "bug_id": "camel_94d6f0d",
        "commit": "https://github.com/apache/camel/commit/94d6f0dd260583e89a2a66db1c4c4d25a051a361",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/94d6f0dd260583e89a2a66db1c4c4d25a051a361/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=94d6f0dd260583e89a2a66db1c4c4d25a051a361",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -1134,7 +1134,7 @@ public static boolean isAssignableFrom(Class<?> a, Class<?> b) {\n      * @return {@code true} if the given type is a Java primitive array type\n      */\n     public static boolean isPrimitiveArrayType(Class<?> clazz) {\n-        if (clazz.isArray()) {\n+        if (clazz != null && clazz.isArray()) {\n             return clazz.getComponentType().isPrimitive();\n         }\n         return false;",
                "raw_url": "https://github.com/apache/camel/raw/94d6f0dd260583e89a2a66db1c4c4d25a051a361/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "c0adf7ce829f7ec2d03dfa4ae85c0c6d97a68cef",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard",
        "parent": "https://github.com/apache/camel/commit/2b6b390e47b2586c32ea7fce4734702ecf3a9b2d",
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_96bcd5e": {
        "bug_id": "camel_96bcd5e",
        "commit": "https://github.com/apache/camel/commit/96bcd5e9ce4fcbc9da2756b154101ba1554336aa",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/96bcd5e9ce4fcbc9da2756b154101ba1554336aa/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java?ref=96bcd5e9ce4fcbc9da2756b154101ba1554336aa",
                "deletions": 1,
                "filename": "components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java",
                "patch": "@@ -48,7 +48,9 @@ protected void doStop() throws Exception {\n \n     Properties getProps() {\n         Properties props = endpoint.getConfiguration().createProducerProperties();\n-        props.put(\"metadata.broker.list\", endpoint.getBrokers());\n+        if (endpoint.getBrokers() != null) {\n+            props.put(\"metadata.broker.list\", endpoint.getBrokers());\n+        }\n         return props;\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/96bcd5e9ce4fcbc9da2756b154101ba1554336aa/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java",
                "sha": "80bf94e466f18feb0adadf7b6103911057cad48f",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/8d6e1032c66f6dac0f22efd2c0f94384414d8688",
        "repo": "camel",
        "unit_tests": [
            "KafkaProducerTest.java"
        ]
    },
    "camel_96f13a7": {
        "bug_id": "camel_96f13a7",
        "commit": "https://github.com/apache/camel/commit/96f13a74c4e961452276db5a0ddd83b2ee4ffe1b",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/96f13a74c4e961452276db5a0ddd83b2ee4ffe1b/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java?ref=96f13a74c4e961452276db5a0ddd83b2ee4ffe1b",
                "deletions": 6,
                "filename": "camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "patch": "@@ -166,13 +166,15 @@ public static Endpoint getEndpointInjection(CamelContext camelContext, String ur\n      * @throws IllegalArgumentException is thrown if the property is illegal\n      */\n     public static int getMaximumCachePoolSize(CamelContext camelContext) throws IllegalArgumentException {\n-        String s = camelContext.getProperties().get(Exchange.MAXIMUM_CACHE_POOL_SIZE);\n-        if (s != null) {\n-            Integer size = camelContext.getTypeConverter().convertTo(Integer.class, s);\n-            if (size == null || size <= 0) {\n-                throw new IllegalArgumentException(\"Property \" + Exchange.MAXIMUM_CACHE_POOL_SIZE + \" must be a positive number, was: \" + s);\n+        if (camelContext != null) {\n+            String s = camelContext.getProperties().get(Exchange.MAXIMUM_CACHE_POOL_SIZE);\n+            if (s != null) {\n+                Integer size = camelContext.getTypeConverter().convertTo(Integer.class, s);\n+                if (size == null || size <= 0) {\n+                    throw new IllegalArgumentException(\"Property \" + Exchange.MAXIMUM_CACHE_POOL_SIZE + \" must be a positive number, was: \" + s);\n+                }\n+                return size;\n             }\n-            return size;\n         }\n \n         // 1000 is the default fallback",
                "raw_url": "https://github.com/apache/camel/raw/96f13a74c4e961452276db5a0ddd83b2ee4ffe1b/camel-core/src/main/java/org/apache/camel/util/CamelContextHelper.java",
                "sha": "898e598ef9ff1370e3ee1a787996579d4c6ef166",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE on startup due IoC wiring invoking static method with null CamelContext.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1077936 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/11e9c701d6645c8126b9e5310a499d80c65711f9",
        "repo": "camel",
        "unit_tests": [
            "CamelContextHelperTest.java"
        ]
    },
    "camel_978b102": {
        "bug_id": "camel_978b102",
        "commit": "https://github.com/apache/camel/commit/978b102866d37fa4eb33b4ecec3cc83584905ae3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/978b102866d37fa4eb33b4ecec3cc83584905ae3/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java?ref=978b102866d37fa4eb33b4ecec3cc83584905ae3",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "patch": "@@ -534,7 +534,7 @@ public static boolean setProperty(CamelContext context, TypeConverter typeConver\n             // we did not find a setter method to use, and if we did try to use a type converter then throw\n             // this kind of exception as the caused by will hint this error\n             throw new IllegalArgumentException(\"Could not find a suitable setter for property: \" + name\n-                    + \" as there isn't a setter method with same type: \" + value.getClass().getCanonicalName()\n+                    + \" as there isn't a setter method with same type: \" + (value != null ? value.getClass().getCanonicalName() : \"[null]\")\n                     + \" nor type conversion possible: \" + typeConversionFailed.getMessage());\n         } else {\n             return false;",
                "raw_url": "https://github.com/apache/camel/raw/978b102866d37fa4eb33b4ecec3cc83584905ae3/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "sha": "22bb389035c389db8f4d032da378486b9bce56d0",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPE",
        "parent": "https://github.com/apache/camel/commit/9d06f956e0d07663cec1d575de97a9f9939b32b6",
        "repo": "camel",
        "unit_tests": [
            "IntrospectionSupportTest.java"
        ]
    },
    "camel_9f8d96c": {
        "bug_id": "camel_9f8d96c",
        "commit": "https://github.com/apache/camel/commit/9f8d96c52cb491efdc867ace2418a79ea2685a42",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/9f8d96c52cb491efdc867ace2418a79ea2685a42/camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java?ref=9f8d96c52cb491efdc867ace2418a79ea2685a42",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java",
                "patch": "@@ -63,6 +63,7 @@ public PollEnricher(PollingConsumer consumer) {\n      *\n      * @param aggregationStrategy  aggregation strategy to aggregate input data and additional data.\n      * @param consumer consumer to resource endpoint.\n+     * @param timeout timeout in millis\n      */\n     public PollEnricher(AggregationStrategy aggregationStrategy, PollingConsumer consumer, long timeout) {\n         this.aggregationStrategy = aggregationStrategy;\n@@ -171,7 +172,8 @@ protected void preChceckPoll(Exchange exchange) throws Exception {\n         if (consumer instanceof EventDrivenPollingConsumer) {\n             EventDrivenPollingConsumer edpc = (EventDrivenPollingConsumer) consumer;\n             boolean fileBasedConsumer = edpc.getEndpoint().getEndpointKey().startsWith(\"file\") || edpc.getEndpoint().getEndpointKey().startsWith(\"ftp\");\n-            boolean fileBasedExchange = exchange.getFromEndpoint().getEndpointUri().startsWith(\"file\") || exchange.getFromEndpoint().getEndpointUri().startsWith(\"ftp\");\n+            boolean fileBasedExchange = exchange.getFromEndpoint() != null\n+                    && (exchange.getFromEndpoint().getEndpointUri().startsWith(\"file\") || exchange.getFromEndpoint().getEndpointUri().startsWith(\"ftp\"));\n             if (fileBasedConsumer && fileBasedExchange) {\n                 throw new IllegalArgumentException(\"Camel currently does not support pollEnrich from a file/ftp endpoint\"\n                         + \" when the route also started from a file/ftp endpoint.\"",
                "raw_url": "https://github.com/apache/camel/raw/9f8d96c52cb491efdc867ace2418a79ea2685a42/camel-core/src/main/java/org/apache/camel/processor/PollEnricher.java",
                "sha": "8112ba72d2e725fa015e6db840efb9058ea5b41e",
                "status": "modified"
            }
        ],
        "message": "MR-332: Avoid NPE if from endpoint is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@931012 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/d2b74c85263bf8398254234b209c55628343b0cf",
        "repo": "camel",
        "unit_tests": [
            "PollEnricherTest.java"
        ]
    },
    "camel_a2a701d": {
        "bug_id": "camel_a2a701d",
        "commit": "https://github.com/apache/camel/commit/a2a701d84d89d92ef7bc36b929a9b660b15365d1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/a2a701d84d89d92ef7bc36b929a9b660b15365d1/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=a2a701d84d89d92ef7bc36b929a9b660b15365d1",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -656,7 +656,7 @@ public static Properties getCamelPropertiesWithPrefix(String prefix, CamelContex\n         if (camelProperties != null) {\n             for (Map.Entry<String, String> entry : camelProperties.entrySet()) {\n                 String key = entry.getKey();\n-                if (key.startsWith(prefix)) {\n+                if (key != null && key.startsWith(prefix)) {\n                     answer.put(key.substring(prefix.length()), entry.getValue());\n                 }\n             }",
                "raw_url": "https://github.com/apache/camel/raw/a2a701d84d89d92ef7bc36b929a9b660b15365d1/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "1fb10f6d28a8dbf3facc65fabc60ed5a580f7bc0",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5682: Fixed possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1394388 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/b42e22dd4ad4f341c96fb20dc1de6fc068bfedd3",
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_a870434": {
        "bug_id": "camel_a870434",
        "commit": "https://github.com/apache/camel/commit/a870434f826e83209ed512cd465e903084d702f2",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/a870434f826e83209ed512cd465e903084d702f2/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java?ref=a870434f826e83209ed512cd465e903084d702f2",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "patch": "@@ -117,8 +117,11 @@ public MethodInvocation createInvocation(Object pojo, Exchange exchange) throws\n \n         String name = exchange.getIn().getHeader(Exchange.BEAN_METHOD_NAME, String.class);\n         if (name != null) {\n-            if (operations.get(name).size() == 1) {\n-                methodInfo = operations.get(name).get(0);\n+            if (operations.containsKey(name)) {\n+                List<MethodInfo> methods = operations.get(name);\n+                if (methods != null && methods.size() == 1) {\n+                    methodInfo = methods.get(0);\n+                }\n             }\n         }\n         if (methodInfo == null) {",
                "raw_url": "https://github.com/apache/camel/raw/a870434f826e83209ed512cd465e903084d702f2/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java",
                "sha": "3546927ce8855e1aa55aac93ec9db71c51455686",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1424: Fixed NPE with BeanInfo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@758692 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/65b5c75712f598b519c965e5a3b6d72f4b200d55",
        "repo": "camel",
        "unit_tests": [
            "BeanInfoTest.java"
        ]
    },
    "camel_a8eafc8": {
        "bug_id": "camel_a8eafc8",
        "commit": "https://github.com/apache/camel/commit/a8eafc8ec82a442fc1909003e44047e855204883",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/a8eafc8ec82a442fc1909003e44047e855204883/components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/CryptoDataFormat.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/CryptoDataFormat.java?ref=a8eafc8ec82a442fc1909003e44047e855204883",
                "deletions": 1,
                "filename": "components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/CryptoDataFormat.java",
                "patch": "@@ -175,6 +175,10 @@ public Object unmarshal(Exchange exchange, InputStream encryptedStream) throws E\n \n     private void inlineInitVector(OutputStream outputStream, byte[] iv) throws IOException {\n         if (inline) {\n+            if (iv == null) {\n+                throw new IllegalStateException(\"Inlining cannot be performed, as no initialization vector was specified\");\n+            }\n+\n             DataOutputStream dout = new DataOutputStream(outputStream);\n             dout.writeInt(iv.length);\n             outputStream.write(iv);\n@@ -251,7 +255,7 @@ public void setInitializationVector(byte[] initializationVector) {\n      * encrypted ciphertext. When the payload is to be decrypted this\n      * initialization vector will need to be read from the stream. Requires that\n      * the formatter has been configured with an init vector that is valid for\n-     * the give algorithm.\n+     * the given algorithm.\n      *\n      * @param inline true if the initialization vector should be inlined in the stream.\n      */",
                "raw_url": "https://github.com/apache/camel/raw/a8eafc8ec82a442fc1909003e44047e855204883/components/camel-crypto/src/main/java/org/apache/camel/converter/crypto/CryptoDataFormat.java",
                "sha": "711b3df048f3d12a0f208b965a9dff50d30dd973",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/camel/commit/36e7b6681f8817a2b3baf0a30bd82ec14789b32a",
        "repo": "camel",
        "unit_tests": [
            "CryptoDataFormatTest.java"
        ]
    },
    "camel_a8fd547": {
        "bug_id": "camel_a8fd547",
        "commit": "https://github.com/apache/camel/commit/a8fd547fbc63429831be89b5f5566334bd9b4358",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/a8fd547fbc63429831be89b5f5566334bd9b4358/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java?ref=a8fd547fbc63429831be89b5f5566334bd9b4358",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "patch": "@@ -458,8 +458,10 @@ public void startScheduler() {\n \n     @Override\n     protected void doStop() throws Exception {\n-        scheduler.unscheduleTask();\n-        ServiceHelper.stopAndShutdownServices(scheduler);\n+        if (scheduler != null) {\n+            scheduler.unscheduleTask();\n+            ServiceHelper.stopAndShutdownServices(scheduler);\n+        }\n \n         // clear counters\n         backoffCounter = 0;",
                "raw_url": "https://github.com/apache/camel/raw/a8fd547fbc63429831be89b5f5566334bd9b4358/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java",
                "sha": "5f25a4f7ce400a94ec4c55424047047354ac2b4b",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/15174ce7bf92d2b589f899f859897263f7d13ac3",
        "repo": "camel",
        "unit_tests": [
            "ScheduledPollConsumerTest.java"
        ]
    },
    "camel_a934af9": {
        "bug_id": "camel_a934af9",
        "commit": "https://github.com/apache/camel/commit/a934af99196ddbe6df6b5c3a858f525eea510623",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/a934af99196ddbe6df6b5c3a858f525eea510623/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=a934af99196ddbe6df6b5c3a858f525eea510623",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -507,7 +507,7 @@ public void remove() {\n \n             // this code is optimized to only use a Scanner if needed, eg there is a delimiter\n \n-            if (s.contains(delimiter)) {\n+            if (delimiter != null && s.contains(delimiter)) {\n                 // use a scanner if it contains the delimiter\n                 Scanner scanner = new Scanner((String)value);\n                 scanner.useDelimiter(delimiter);",
                "raw_url": "https://github.com/apache/camel/raw/a934af99196ddbe6df6b5c3a858f525eea510623/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "65e879154ed2550de853c107fb90cdf34ad917c0",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPE in createIterator if delimier is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1146771 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/094d00bcab83a9b6911cf1761a22b490a7bb4405",
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_b5ab252": {
        "bug_id": "camel_b5ab252",
        "commit": "https://github.com/apache/camel/commit/b5ab252e248f4667db1c00a1c17655cc5cb87840",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/b5ab252e248f4667db1c00a1c17655cc5cb87840/components/camel-spring-security/src/main/java/org/apache/camel/component/spring/security/SpringSecurityAuthorizationPolicy.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-spring-security/src/main/java/org/apache/camel/component/spring/security/SpringSecurityAuthorizationPolicy.java?ref=b5ab252e248f4667db1c00a1c17655cc5cb87840",
                "deletions": 5,
                "filename": "components/camel-spring-security/src/main/java/org/apache/camel/component/spring/security/SpringSecurityAuthorizationPolicy.java",
                "patch": "@@ -59,8 +59,14 @@ protected void beforeProcess(Exchange exchange) throws Exception {\n         ConfigAttributeDefinition attributes = accessPolicy.getConfigAttributeDefinition();\n         \n         try {\n+            Authentication authToken = getAuthentication(exchange);\n+            if (authToken == null) {\n+                CamelAuthorizationException authorizationException =\n+                    new CamelAuthorizationException(\"Cannot find the Authentication instance.\", exchange);\n+                throw authorizationException;\n+            }\n             \n-            Authentication authenticated = authenticateIfRequired(getAuthentication(exchange));\n+            Authentication authenticated = authenticateIfRequired(authToken);\n             \n             // Attempt authorization with exchange\n             try {\n@@ -75,7 +81,7 @@ protected void beforeProcess(Exchange exchange) throws Exception {\n             \n         } catch (SpringSecurityException exception) {\n             CamelAuthorizationException authorizationException =\n-                new CamelAuthorizationException(\"Cannot access the below process\", exchange, exception);\n+                new CamelAuthorizationException(\"Cannot access the processor which has been protected.\", exchange, exception);\n             throw authorizationException;\n         }\n     }\n@@ -88,8 +94,7 @@ protected Authentication getAuthentication(Exchange exchange) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Get the authentication from SecurityContextHolder\");\n             }\n-        }\n-        \n+        }        \n         return answer;\n     }\n \n@@ -114,7 +119,7 @@ public void afterPropertiesSet() throws Exception {\n     }\n     \n     private Authentication authenticateIfRequired(Authentication authentication) {\n-        \n+                    \n         if (authentication.isAuthenticated() && !alwaysReauthenticate) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Previously Authenticated: \" + authentication);",
                "raw_url": "https://github.com/apache/camel/raw/b5ab252e248f4667db1c00a1c17655cc5cb87840/components/camel-spring-security/src/main/java/org/apache/camel/component/spring/security/SpringSecurityAuthorizationPolicy.java",
                "sha": "2e46cca5db72d653318f3d4ca9800cbe7bcef840",
                "status": "modified"
            }
        ],
        "message": "CAMEL-2643 Using CamelAuthorizationException to avoid the NPE of Authentication\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@933901 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/3bcac692db892de42622188c30d0ab1d157bc009",
        "repo": "camel",
        "unit_tests": [
            "SpringSecurityAuthorizationPolicyTest.java"
        ]
    },
    "camel_b9d82f4": {
        "bug_id": "camel_b9d82f4",
        "commit": "https://github.com/apache/camel/commit/b9d82f4d07bf7a3327ec8f223bcb0bc0d483f130",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/b9d82f4d07bf7a3327ec8f223bcb0bc0d483f130/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=b9d82f4d07bf7a3327ec8f223bcb0bc0d483f130",
                "deletions": 3,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -548,12 +548,15 @@ protected void propagateHeadersFromCxfToCamel(Message cxfMessage,\n                             } else {\n                                 evalue = values;\n                             }\n-                        } else {\n+                        } else if (values.size() == 1) {\n                             evalue = values.get(0);\n+                        } else {\n+                            evalue = null;\n+                        }\n+                        if (evalue != null) {\n+                            camelHeaders.put(entry.getKey(), evalue);\n                         }\n-                        camelHeaders.put(entry.getKey(), evalue);\n                     }\n-                    \n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/camel/raw/b9d82f4d07bf7a3327ec8f223bcb0bc0d483f130/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "fa8563561aad4e4dc7e57142292d3bb2b3cb2cfe",
                "status": "modified"
            }
        ],
        "message": "CAMEL-9282: Avoid NPE/IndexOutOfBounds in camel-cxf.",
        "parent": "https://github.com/apache/camel/commit/54cd88f5540de3cf934e9fd07822a070a76752b6",
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_bb6f838": {
        "bug_id": "camel_bb6f838",
        "commit": "https://github.com/apache/camel/commit/bb6f83806ba5d17df32f1b31cbad8c7c47f870c9",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/bb6f83806ba5d17df32f1b31cbad8c7c47f870c9/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java?ref=bb6f83806ba5d17df32f1b31cbad8c7c47f870c9",
                "deletions": 2,
                "filename": "components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java",
                "patch": "@@ -410,7 +410,7 @@ private boolean isRouteCoverageEnabled() {\n \n     @After\n     public void tearDown() throws Exception {\n-        long time = watch.stop();\n+        long time = watch.taken();\n \n         log.info(\"********************************************************************************\");\n         log.info(\"Testing done: \" + getTestMethodName() + \"(\" + getClass().getName() + \")\");\n@@ -422,7 +422,7 @@ public void tearDown() throws Exception {\n             String dir = \"target/camel-route-coverage\";\n             String name = className + \"-\" + getTestMethodName() + \".xml\";\n \n-            ManagedCamelContextMBean managedCamelContext = context.getManagedCamelContext();\n+            ManagedCamelContextMBean managedCamelContext = context != null ? context.getManagedCamelContext() : null;\n             if (managedCamelContext == null) {\n                 log.warn(\"Cannot dump route coverage to file as JMX is not enabled. Override useJmx() method to enable JMX in the unit test classes.\");\n             } else {",
                "raw_url": "https://github.com/apache/camel/raw/bb6f83806ba5d17df32f1b31cbad8c7c47f870c9/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java",
                "sha": "3b9df0284ffbb8e31c33de01f20ee951b0a5cedb",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/0cce3785ce0b7a9e87d0abb08ebfc8290e102264",
        "repo": "camel",
        "unit_tests": [
            "CamelTestSupportTest.java"
        ]
    },
    "camel_bfdee32": {
        "bug_id": "camel_bfdee32",
        "commit": "https://github.com/apache/camel/commit/bfdee323b091ab04a873fa8c95d18fdace3bf965",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/bfdee323b091ab04a873fa8c95d18fdace3bf965/camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java?ref=bfdee323b091ab04a873fa8c95d18fdace3bf965",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java",
                "patch": "@@ -226,6 +226,10 @@ protected Object extractResultBody(Exchange result) {\n \n     private static void doneUoW(Exchange exchange) {\n         try {\n+            // The receiveBody method will get a null exchange\n+            if (exchange == null) {\n+                return;\n+            }\n             if (exchange.getUnitOfWork() == null) {\n                 // handover completions and done them manually to ensure they are being executed\n                 List<Synchronization> synchronizations = exchange.handoverCompletions();",
                "raw_url": "https://github.com/apache/camel/raw/bfdee323b091ab04a873fa8c95d18fdace3bf965/camel-core/src/main/java/org/apache/camel/impl/DefaultConsumerTemplate.java",
                "sha": "86be97ad7c4269701e9711d8d2a4d4a757fb28f7",
                "status": "modified"
            }
        ],
        "message": "CAMEL-3252 Fixed the NPE log fo the DefaultConsumerTemplate\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1024201 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/ef7b6bbada220f65a86fcca7f2f4ba44f548ec41",
        "repo": "camel",
        "unit_tests": [
            "DefaultConsumerTemplateTest.java"
        ]
    },
    "camel_c339fa9": {
        "bug_id": "camel_c339fa9",
        "commit": "https://github.com/apache/camel/commit/c339fa9c90643ce345060eff3ebee664114caade",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/c339fa9c90643ce345060eff3ebee664114caade/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=c339fa9c90643ce345060eff3ebee664114caade",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -684,8 +684,10 @@ protected void propagateHeadersFromCamelToCxf(Exchange camelExchange,\n             \n             // We need to copy the content-type if the dataformat is RAW\n             if (Message.CONTENT_TYPE.equalsIgnoreCase(entry.getKey()) && dataFormat.equals(DataFormat.RAW)) {\n-                LOG.debug(\"Propagate to CXF header: {} value: {}\", Message.CONTENT_TYPE, entry.getValue());\n-                cxfContext.put(Message.CONTENT_TYPE, entry.getValue().toString());\n+                if (entry.getValue() != null) {\n+                    LOG.debug(\"Propagate to CXF header: {} value: {}\", Message.CONTENT_TYPE, entry.getValue());\n+                    cxfContext.put(Message.CONTENT_TYPE, entry.getValue().toString());\n+                }\n                 continue;\n             }\n             ",
                "raw_url": "https://github.com/apache/camel/raw/c339fa9c90643ce345060eff3ebee664114caade/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "b6b9348d8da58d274436db77f475ee5408ea596d",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE",
        "parent": "https://github.com/apache/camel/commit/60c1e38ef13cc0f2a83e53a14cf49dbef2532366",
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_c5296e4": {
        "bug_id": "camel_c5296e4",
        "commit": "https://github.com/apache/camel/commit/c5296e487884418de8dde15e832ea72b027e073f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/c5296e487884418de8dde15e832ea72b027e073f/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java?ref=c5296e487884418de8dde15e832ea72b027e073f",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java",
                "patch": "@@ -394,7 +394,7 @@ public UnitOfWork getUnitOfWork() {\n \n     public void setUnitOfWork(UnitOfWork unitOfWork) {\n         this.unitOfWork = unitOfWork;\n-        if (onCompletions != null) {\n+        if (unitOfWork != null && onCompletions != null) {\n             // now an unit of work has been assigned so add the on completions\n             // we might have registered already\n             for (Synchronization onCompletion : onCompletions) {",
                "raw_url": "https://github.com/apache/camel/raw/c5296e487884418de8dde15e832ea72b027e073f/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java",
                "sha": "3045838636c6d4706c1df500b707443555a9607a",
                "status": "modified"
            }
        ],
        "message": "CAMEL-7785: Fixed potential NPE.",
        "parent": "https://github.com/apache/camel/commit/1ad23d044c389a8121b9ff5d280dd2b17884311e",
        "repo": "camel",
        "unit_tests": [
            "DefaultExchangeTest.java"
        ]
    },
    "camel_c6620db": {
        "bug_id": "camel_c6620db",
        "commit": "https://github.com/apache/camel/commit/c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/CamelContext.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/CamelContext.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/CamelContext.java",
                "patch": "@@ -18,7 +18,9 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.*;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n@@ -1019,8 +1021,12 @@\n \n     /**\n      * Disables using JMX as {@link org.apache.camel.spi.ManagementStrategy}.\n+     * <p/>\n+     * <b>Important:</b> This method must be called <b>before</b> the {@link CamelContext} is started.\n+     *\n+     * @throws IllegalStateException is thrown if the {@link CamelContext} is not in stopped state.\n      */\n-    void disableJMX();\n+    void disableJMX() throws IllegalStateException;\n \n     /**\n      * Gets the inflight repository",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/CamelContext.java",
                "sha": "839b00d8e933e1c022fe5c54ca3225b30f1d9c77",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 19,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -34,7 +34,6 @@\n import java.util.TreeMap;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import javax.naming.Context;\n import javax.xml.bind.JAXBContext;\n@@ -74,6 +73,7 @@\n import org.apache.camel.impl.converter.DefaultTypeConverter;\n import org.apache.camel.impl.converter.LazyLoadingTypeConverter;\n import org.apache.camel.management.DefaultManagementMBeanAssembler;\n+import org.apache.camel.management.DefaultManagementStrategy;\n import org.apache.camel.management.JmxSystemPropertyKeys;\n import org.apache.camel.management.ManagementStrategyFactory;\n import org.apache.camel.model.Constants;\n@@ -167,7 +167,6 @@\n     private List<LifecycleStrategy> lifecycleStrategies = new ArrayList<LifecycleStrategy>();\n     private ManagementStrategy managementStrategy;\n     private ManagementMBeanAssembler managementMBeanAssembler;\n-    private final AtomicBoolean managementStrategyInitialized = new AtomicBoolean(false);\n     private final List<RouteDefinition> routeDefinitions = new ArrayList<RouteDefinition>();\n     private List<InterceptStrategy> interceptStrategies = new ArrayList<InterceptStrategy>();\n \n@@ -242,6 +241,10 @@ public DefaultCamelContext() {\n             packageScanClassResolver = new DefaultPackageScanClassResolver();\n         }\n \n+        // setup management strategy first since end users may use it to add event notifiers\n+        // using the management strategy before the CamelContext has been started\n+        this.managementStrategy = createManagementStrategy();\n+\n         Container.Instance.manage(this);\n     }\n \n@@ -2436,26 +2439,11 @@ public void setNodeIdFactory(NodeIdFactory idFactory) {\n     }\n \n     public ManagementStrategy getManagementStrategy() {\n-        synchronized (managementStrategyInitialized) {\n-            if (!managementStrategyInitialized.get()) {\n-                if (managementStrategyInitialized.compareAndSet(false, true)) {\n-                    managementStrategy = createManagementStrategy();\n-                }\n-            }\n-        }\n-\n         return managementStrategy;\n     }\n \n     public void setManagementStrategy(ManagementStrategy managementStrategy) {\n-        synchronized (managementStrategyInitialized) {\n-            if (managementStrategyInitialized.get()) {\n-                log.warn(\"Resetting ManagementStrategy for CamelContext: \" + getName());\n-            }\n-\n-            this.managementStrategy = managementStrategy;\n-            managementStrategyInitialized.set(true);\n-        }\n+        this.managementStrategy = managementStrategy;\n     }\n \n     public InterceptStrategy getDefaultTracer() {\n@@ -2492,7 +2480,10 @@ public void setDefaultBacklogDebugger(InterceptStrategy defaultBacklogDebugger)\n     }\n \n     public void disableJMX() {\n-        disableJMX = true;\n+        if (isStarting() || isStarted()) {\n+            throw new IllegalStateException(\"Disabling JMX can only be done when CamelContext has not been started\");\n+        }\n+        managementStrategy = new DefaultManagementStrategy(this);\n     }\n \n     public InflightRepository getInflightRepository() {",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "385a9208986dae07dea94fb2954a17d54b609326",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java",
                "patch": "@@ -265,6 +265,9 @@ public boolean isRegistered(ObjectName name) {\n     protected void doStart() throws Exception {\n         ObjectHelper.notNull(camelContext, \"CamelContext\");\n \n+        // must add management lifecycle strategy\n+        camelContext.getLifecycleStrategies().add(0, new DefaultManagementLifecycleStrategy(camelContext));\n+\n         // create mbean server if is has not be injected.\n         if (server == null) {\n             finalizeSettings();",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/DefaultManagementAgent.java",
                "sha": "eeda9c9a4ce8cccadc9f0d2f42db3ceef7347b3f",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 10,
                "filename": "camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java",
                "patch": "@@ -32,8 +32,11 @@\n import org.apache.camel.spi.ManagementNamingStrategy;\n import org.apache.camel.spi.ManagementObjectStrategy;\n import org.apache.camel.spi.ManagementStrategy;\n+import org.apache.camel.support.ServiceSupport;\n import org.apache.camel.util.ObjectHelper;\n import org.apache.camel.util.ServiceHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * A default management strategy that does <b>not</b> manage.\n@@ -48,8 +51,9 @@\n  * @see ManagedManagementStrategy\n  * @version \n  */\n-public class DefaultManagementStrategy implements ManagementStrategy, CamelContextAware {\n+public class DefaultManagementStrategy extends ServiceSupport implements ManagementStrategy, CamelContextAware {\n \n+    private static final transient Logger LOG = LoggerFactory.getLogger(DefaultManagementStrategy.class);\n     private List<EventNotifier> eventNotifiers = new CopyOnWriteArrayList<EventNotifier>();\n     private EventFactory eventFactory = new DefaultEventFactory();\n     private ManagementNamingStrategy managementNamingStrategy;\n@@ -198,7 +202,12 @@ public void setLoadStatisticsEnabled(boolean loadStatisticsEnabled) {\n         this.loadStatisticsEnabled = loadStatisticsEnabled;\n     }\n \n-    public void start() throws Exception {\n+    protected void doStart() throws Exception {\n+        LOG.info(\"JMX is disabled\");\n+        doStartManagementStrategy();\n+    }\n+\n+    protected void doStartManagementStrategy() throws Exception {\n         ObjectHelper.notNull(camelContext, \"CamelContext\");\n \n         if (eventNotifiers != null) {\n@@ -215,7 +224,7 @@ public void start() throws Exception {\n         }\n \n         if (managementAgent != null) {\n-            managementAgent.start();\n+            ServiceHelper.startService(managementAgent);\n             // set the naming strategy using the domain name from the agent\n             if (managementNamingStrategy == null) {\n                 setManagementNamingStrategy(new DefaultManagementNamingStrategy(managementAgent.getMBeanObjectDomainName()));\n@@ -226,13 +235,8 @@ public void start() throws Exception {\n         }\n     }\n \n-    public void stop() throws Exception {\n-        if (managementAgent != null) {\n-            managementAgent.stop();\n-        }\n-        if (eventNotifiers != null) {\n-            ServiceHelper.stopServices(eventNotifiers);\n-        }\n+    protected void doStop() throws Exception {\n+        ServiceHelper.stopServices(managementAgent, eventNotifiers);\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/DefaultManagementStrategy.java",
                "sha": "63aa1322f51d2f75f94ef9cb691c6ac8f13555e0",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java",
                "patch": "@@ -182,4 +182,10 @@ private ObjectName getObjectName(Object managedObject, Object preferedName) thro\n         return objectName;\n     }\n \n+    @Override\n+    protected void doStart() throws Exception {\n+        LOG.info(\"JMX is enabled\");\n+        doStartManagementStrategy();\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/ManagedManagementStrategy.java",
                "sha": "f89ffb4a9803327428fda19481a302855387e60e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 13,
                "filename": "camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.spi.ManagementStrategy;\n-import org.apache.camel.util.ServiceHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -29,27 +28,19 @@\n     private final transient Logger log = LoggerFactory.getLogger(getClass());\n \n     public ManagementStrategy create(CamelContext context, boolean disableJMX) {\n-        ManagementStrategy answer = null;\n+        ManagementStrategy answer;\n \n         if (disableJMX || Boolean.getBoolean(JmxSystemPropertyKeys.DISABLED)) {\n-            log.info(\"JMX is disabled.\");\n+            answer = new DefaultManagementStrategy(context);\n         } else {\n             try {\n                 answer = new ManagedManagementStrategy(context, new DefaultManagementAgent(context));\n-                // must start it to ensure JMX works and can load needed Spring JARs\n-                ServiceHelper.startService(answer);\n-                // prefer to have it at first strategy\n-                context.getLifecycleStrategies().add(0, new DefaultManagementLifecycleStrategy(context));\n-                log.info(\"JMX enabled.\");\n             } catch (Exception e) {\n-                answer = null;\n                 log.warn(\"Cannot create JMX lifecycle strategy. Will fallback and disable JMX.\", e);\n+                answer = new DefaultManagementStrategy(context);\n             }\n         }\n-\n-        if (answer == null) {\n-            answer = new DefaultManagementStrategy(context);\n-        }\n         return answer;\n     }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java",
                "sha": "50d55fa659451985635e16f1bb8b7c4b8d38c69b",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/test/java/org/apache/camel/management/CamelContextDisableJmxTest.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/test/java/org/apache/camel/management/CamelContextDisableJmxTest.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 0,
                "filename": "camel-core/src/test/java/org/apache/camel/management/CamelContextDisableJmxTest.java",
                "patch": "@@ -0,0 +1,35 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.management;\n+\n+import junit.framework.TestCase;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.impl.DefaultCamelContext;\n+\n+public class CamelContextDisableJmxTest extends TestCase {\n+\n+    public void testDisableJmx() throws Exception {\n+        CamelContext context = new DefaultCamelContext();\n+        context.disableJMX();\n+        context.start();\n+\n+        // JMX should be disabled and therefore not a ManagedManagementStrategy instance\n+        assertFalse(context.getManagementStrategy() instanceof ManagedManagementStrategy);\n+\n+        context.stop();\n+    }\n+}",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/camel-core/src/test/java/org/apache/camel/management/CamelContextDisableJmxTest.java",
                "sha": "2946e3c982ec76f3ee48d4969909f6f2d85506f1",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java?ref=c6620dbace9ae1e15981f4c31b1a97b4c396cde6",
                "deletions": 3,
                "filename": "components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java",
                "patch": "@@ -370,9 +370,6 @@ protected void initJMXAgent() throws Exception {\n             ManagementStrategy managementStrategy = new ManagedManagementStrategy(getContext(), agent);\n             getContext().setManagementStrategy(managementStrategy);\n \n-            // clear the existing lifecycle strategies define by the DefaultCamelContext constructor\n-            getContext().getLifecycleStrategies().clear();\n-            getContext().addLifecycleStrategy(new DefaultManagementLifecycleStrategy(getContext()));\n             // set additional configuration from camelJMXAgent\n             boolean onlyId = agent.getOnlyRegisterProcessorWithCustomId() != null && agent.getOnlyRegisterProcessorWithCustomId();\n             getContext().getManagementStrategy().onlyManageProcessorWithCustomId(onlyId);",
                "raw_url": "https://github.com/apache/camel/raw/c6620dbace9ae1e15981f4c31b1a97b4c396cde6/components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java",
                "sha": "76b0c69a51e0c1313947d9e657fc248c4147b853",
                "status": "modified"
            }
        ],
        "message": "CAMEL-6576: Improved initializaiton logic of ManagementStrategy to avoid contention as well a potential NPE.",
        "parent": "https://github.com/apache/camel/commit/7b995ad9a57530fdf1a29f49a7a13b8e0dd38e22",
        "repo": "camel",
        "unit_tests": [
            "AbstractCamelContextFactoryBeanTest.java"
        ]
    },
    "camel_c936be3": {
        "bug_id": "camel_c936be3",
        "commit": "https://github.com/apache/camel/commit/c936be321975ed80e8d14fa7647eb961bdd9c2bd",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/c936be321975ed80e8d14fa7647eb961bdd9c2bd/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/RestSwaggerReader.scala",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/RestSwaggerReader.scala?ref=c936be321975ed80e8d14fa7647eb961bdd9c2bd",
                "deletions": 2,
                "filename": "components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/RestSwaggerReader.scala",
                "patch": "@@ -186,8 +186,8 @@ class RestSwaggerReader {\n         param.getName,\n         Some( param.getDescription ),\n         Some( param.getDefaultValue),\n-        param.getRequired.booleanValue(),\n-        param.getAllowMultiple.booleanValue(),\n+        if (param.getRequired != null) param.getRequired.booleanValue() else false,\n+        if (param.getAllowMultiple != null) param.getAllowMultiple.booleanValue() else false,\n         param.getDataType,\n         allowValues,\n         param.getParamType.toString,",
                "raw_url": "https://github.com/apache/camel/raw/c936be321975ed80e8d14fa7647eb961bdd9c2bd/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/RestSwaggerReader.scala",
                "sha": "9c0fadd2a1c957a5dd2dd081e55c5c8a46c13c79",
                "status": "modified"
            }
        ],
        "message": "CAMEL-8804: Fixed NPE in rest swagger reader.",
        "parent": "https://github.com/apache/camel/commit/dcd149bb77b970d64278436da56fab229d889e3a",
        "repo": "camel",
        "unit_tests": [
            "RestSwaggerReaderTest.java"
        ]
    },
    "camel_cd401ae": {
        "bug_id": "camel_cd401ae",
        "commit": "https://github.com/apache/camel/commit/cd401ae02548435ce6ec756139b94648e2cc83d3",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/cd401ae02548435ce6ec756139b94648e2cc83d3/camel-core/src/main/java/org/apache/camel/processor/Enricher.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/Enricher.java?ref=cd401ae02548435ce6ec756139b94648e2cc83d3",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/Enricher.java",
                "patch": "@@ -247,9 +247,11 @@ public void done(boolean doneSync) {\n \n         LOG.trace(\"Processing exchangeId: {} is continued being processed synchronously\", exchange.getExchangeId());\n \n-        // emit event that the exchange was sent to the endpoint\n-        long timeTaken = watch.taken();\n-        EventHelper.notifyExchangeSent(resourceExchange.getContext(), resourceExchange, destination, timeTaken);\n+        if (watch != null) {\n+            // emit event that the exchange was sent to the endpoint\n+            long timeTaken = watch.taken();\n+            EventHelper.notifyExchangeSent(resourceExchange.getContext(), resourceExchange, destination, timeTaken);\n+        }\n         \n         if (!isAggregateOnException() && resourceExchange.isFailed()) {\n             // copy resource exchange onto original exchange (preserving pattern)",
                "raw_url": "https://github.com/apache/camel/raw/cd401ae02548435ce6ec756139b94648e2cc83d3/camel-core/src/main/java/org/apache/camel/processor/Enricher.java",
                "sha": "1f77111d9c24f3867387d66d46db7ac006fabb76",
                "status": "modified"
            }
        ],
        "message": "CAMEL-11359: Fix a NPE as StopWatch is only in use if needed",
        "parent": "https://github.com/apache/camel/commit/4a99a1bc2843a2b576c13ec995cffcf217926cea",
        "repo": "camel",
        "unit_tests": [
            "EnricherTest.java"
        ]
    },
    "camel_ce3b0e7": {
        "bug_id": "camel_ce3b0e7",
        "commit": "https://github.com/apache/camel/commit/ce3b0e7f693cbd204eada1b3081d0be59bf945eb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/ce3b0e7f693cbd204eada1b3081d0be59bf945eb/components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java?ref=ce3b0e7f693cbd204eada1b3081d0be59bf945eb",
                "deletions": 1,
                "filename": "components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java",
                "patch": "@@ -92,7 +92,9 @@ public void readRequest(HttpServletRequest request, HttpMessage message) {\n         \n         // reset the stream cache\n         StreamCache cache = message.getBody(StreamCache.class);\n-        cache.reset();\n+        if (cache != null) {\n+            cache.reset();\n+        }\n         \n         // store the method and query and other info in headers\n         headers.put(Exchange.HTTP_METHOD, request.getMethod());",
                "raw_url": "https://github.com/apache/camel/raw/ce3b0e7f693cbd204eada1b3081d0be59bf945eb/components/camel-http/src/main/java/org/apache/camel/component/http/DefaultHttpBinding.java",
                "sha": "9d39caaa45e44d573085986907b8e2785689c2da",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/ce3b0e7f693cbd204eada1b3081d0be59bf945eb/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java?ref=ce3b0e7f693cbd204eada1b3081d0be59bf945eb",
                "deletions": 1,
                "filename": "components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java",
                "patch": "@@ -91,7 +91,9 @@ public void readRequest(HttpServletRequest request, HttpMessage message) {\n         popluateRequestParameters(request, message);\n         // reset the stream cache\n         StreamCache cache = message.getBody(StreamCache.class);\n-        cache.reset();\n+        if (cache != null) {\n+            cache.reset();\n+        }\n         \n         // store the method and query and other info in headers\n         headers.put(Exchange.HTTP_METHOD, request.getMethod());",
                "raw_url": "https://github.com/apache/camel/raw/ce3b0e7f693cbd204eada1b3081d0be59bf945eb/components/camel-http4/src/main/java/org/apache/camel/component/http4/DefaultHttpBinding.java",
                "sha": "3b554bf9ec1aacdd7c38aed06f7cfedb90fa696b",
                "status": "modified"
            }
        ],
        "message": "CAMEL-2679 Fixed the NPE of DefaultHttpBinding\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@938784 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/7829d7b56e5eb52fe853bf7eb3d3565e19b07a84",
        "repo": "camel",
        "unit_tests": [
            "DefaultHttpBindingTest.java"
        ]
    },
    "camel_d643d6b": {
        "bug_id": "camel_d643d6b",
        "commit": "https://github.com/apache/camel/commit/d643d6b492becb3b8705e30bf1c68fc6503ee655",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 4,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "patch": "@@ -66,8 +66,8 @@\n     private static int nameSuffix;\n \n     private String name;\n-    private Map<String, Endpoint> endpoints = new HashMap<String, Endpoint>();\n-    private Map<String, Component> components = new HashMap<String, Component>();\n+    private final Map<String, Endpoint> endpoints = new HashMap<String, Endpoint>();\n+    private final Map<String, Component> components = new HashMap<String, Component>();\n     private List<Route> routes;\n     private List<Service> servicesToClose = new ArrayList<Service>();\n     private TypeConverter typeConverter;\n@@ -546,8 +546,7 @@ protected Endpoint createEndpoint(String uri) {\n      * some kind of transformation or wrapper\n      *\n      * @param uri the uri for the endpoint (and name in the registry)\n-     * @param bean the bean to be converted to an endpoint, which will be not\n-     *                null\n+     * @param bean the bean to be converted to an endpoint, which will be not null\n      * @return a new endpoint\n      */\n     protected Endpoint convertBeanToEndpoint(String uri, Object bean) {",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java",
                "sha": "875c009f0c7eb36fe10048c0cfba79713137884d",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 10,
                "filename": "camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "patch": "@@ -32,19 +32,22 @@\n import java.util.Map.Entry;\n import java.util.Set;\n \n-\n import org.apache.camel.TypeConverter;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n public final class IntrospectionSupport {\n \n+    private static final Log LOG = LogFactory.getLog(IntrospectionSupport.class);\n+\n+\n     /**\n      * Utility classes should not have a public constructor.\n      */\n     private IntrospectionSupport() {\n     }\n \n     public static boolean getProperties(Object target, Map props, String optionPrefix) {\n-\n         boolean rc = false;\n         if (target == null) {\n             throw new IllegalArgumentException(\"target was null.\");\n@@ -64,9 +67,7 @@ public static boolean getProperties(Object target, Map props, String optionPrefi\n             Class type = method.getReturnType();\n             Class params[] = method.getParameterTypes();\n             if (name.startsWith(\"get\") && params.length == 0 && type != null && isSettableType(type)) {\n-\n                 try {\n-\n                     Object value = method.invoke(target, new Object[] {});\n                     if (value == null) {\n                         continue;\n@@ -80,10 +81,9 @@ public static boolean getProperties(Object target, Map props, String optionPrefi\n                     name = name.substring(3, 4).toLowerCase() + name.substring(4);\n                     props.put(optionPrefix + name, strValue);\n                     rc = true;\n-\n                 } catch (Throwable ignore) {\n+                    // ignore\n                 }\n-\n             }\n         }\n \n@@ -322,7 +322,6 @@ public static String simpleName(Class clazz) {\n     }\n \n     private static void addFields(Object target, Class startClass, Class stopClass, LinkedHashMap map) {\n-\n         if (startClass != stopClass) {\n             addFields(target, startClass.getSuperclass(), stopClass, map);\n         }\n@@ -341,14 +340,14 @@ private static void addFields(Object target, Class startClass, Class stopClass,\n                     try {\n                         o = Arrays.asList((Object[])o);\n                     } catch (Throwable e) {\n+                        // ignore\n                     }\n                 }\n                 map.put(field.getName(), o);\n             } catch (Throwable e) {\n-                // TODO: LOG or rethrow\n-                e.printStackTrace();\n+                LOG.debug(\"Error adding fields\", e);\n             }\n         }\n-\n     }\n+\n }",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/IntrospectionSupport.java",
                "sha": "a973348270ab5b8554dc5952b84a0e698365896a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/LRUCache.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/LRUCache.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/util/LRUCache.java",
                "patch": "@@ -42,15 +42,15 @@ public LRUCache(int maximumCacheSize) {\n      * @param accessOrder      the ordering mode - <tt>true</tt> for\n      *                         access-order, <tt>false</tt> for insertion-order.\n      * @throws IllegalArgumentException if the initial capacity is negative\n-     *                                  or the load factor is nonpositive.\n+     *                                  or the load factor is non positive.\n      */\n     public LRUCache(int initialCapacity, int maximumCacheSize, float loadFactor, boolean accessOrder) {\n         super(initialCapacity, loadFactor, accessOrder);\n         this.maxCacheSize = maximumCacheSize;\n     }\n \n     /**\n-     * @return Returns the maxCacheSize.\n+     * Returns the maxCacheSize.\n      */\n     public int getMaxCacheSize() {\n         return maxCacheSize;",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/LRUCache.java",
                "sha": "dd5937530facfc5039abccbcd117e0582fda49f8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -171,8 +171,11 @@ public static String removeStartingCharacters(String text, char ch) {\n     }\n \n     public static String capitalize(String text) {\n+        if (text == null) {\n+            return null;\n+        }\n         int length = text.length();\n-        if (text == null || length == 0) {\n+        if (length == 0) {\n             return text;\n         }\n         String answer = text.substring(0, 1).toUpperCase();\n@@ -404,6 +407,7 @@ public static Class convertPrimitiveTypeToWrapperType(Class type) {\n                 rc = Short.class;\n             } else if (type == byte.class) {\n                 rc = Byte.class;\n+            // TODO: Why is boolean disabled\n /*\n             } else if (type == boolean.class) {\n                 rc = Boolean.class;\n@@ -530,7 +534,7 @@ public static boolean isJavaIdentifier(String name) {\n     }\n \n     /**\n-     * returns the type of the given object or null if the value is null\n+     * Returns the type of the given object or null if the value is null\n      */\n     public static Object type(Object bean) {\n         return bean != null ? bean.getClass() : null;",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "59e73143021532e99d5b7c21553ca60abf7c5e0d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "patch": "@@ -25,7 +25,8 @@\n  * @version $Revision$\n  */\n public final class PackageHelper {\n-    public static final transient Log LOG = LogFactory.getLog(PackageHelper.class);\n+    private static final transient Log LOG = LogFactory.getLog(PackageHelper.class);\n+\n     private PackageHelper() {\n         // Utility Class\n     }",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/PackageHelper.java",
                "sha": "94b481fc6a296692181647c843471e1bdccc529c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterLoader.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 2,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterLoader.java",
                "patch": "@@ -16,8 +16,6 @@\n  */\n package org.apache.camel.util;\n \n-\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collections;",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterLoader.java",
                "sha": "74921eeffc3476ac73e9c2907aad8020ceea772e",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterRegistry.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterRegistry.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterRegistry.java",
                "patch": "@@ -31,7 +31,6 @@\n     }\n \n     public void addTypeConverter(Class toType, Class fromType, TypeConverter typeConverter) {\n-\n         if (errors.size() == 0) {\n             errors.add(\"Method should not be invoked.\");\n         }",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ReportingTypeConverterRegistry.java",
                "sha": "60866465583868fa149ebc9fba2fd74f942952a8",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 11,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java",
                "patch": "@@ -126,7 +126,9 @@ public String toString() {\n     public static class AnnotatedWith implements Test {\n         private Class<? extends Annotation> annotation;\n \n-        /** Construts an AnnotatedWith test for the specified annotation type. */\n+        /**\n+         * Constructs an AnnotatedWith test for the specified annotation type.\n+         */\n         public AnnotatedWith(Class<? extends Annotation> annotation) {\n             this.annotation = annotation;\n         }\n@@ -323,14 +325,15 @@ private void loadImplementationsInDirectory(Test test, String parent, File locat\n             String name = file.getName();\n             if (name != null) {\n                 name = name.trim();\n-            }\n-            builder.append(parent).append(\"/\").append(name);\n-            String packageOrClass = parent == null ? name : builder.toString();\n \n-            if (file.isDirectory()) {\n-                loadImplementationsInDirectory(test, packageOrClass, file);\n-            } else if (name.endsWith(\".class\")) {\n-                addIfMatching(test, packageOrClass);\n+                builder.append(parent).append(\"/\").append(name);\n+                String packageOrClass = parent == null ? name : builder.toString();\n+\n+                if (file.isDirectory()) {\n+                    loadImplementationsInDirectory(test, packageOrClass, file);\n+                } else if (name.endsWith(\".class\")) {\n+                    addIfMatching(test, packageOrClass);\n+                }\n             }\n         }\n     }\n@@ -355,9 +358,9 @@ private void loadImplementationsInJar(Test test, String parent, File jarfile) {\n                 String name = entry.getName();\n                 if (name != null) {\n                     name = name.trim();\n-                }\n-                if (!entry.isDirectory() && name.startsWith(parent) && name.endsWith(\".class\")) {\n-                    addIfMatching(test, name);\n+                    if (!entry.isDirectory() && name.startsWith(parent) && name.endsWith(\".class\")) {\n+                        addIfMatching(test, name);\n+                    }\n                 }\n             }\n         } catch (IOException ioe) {",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java",
                "sha": "83c6d939282b7ac4463d820f48158a65657f9d1a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/camel/blob/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/URISupport.java?ref=d643d6b492becb3b8705e30bf1c68fc6503ee655",
                "deletions": 11,
                "filename": "camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "patch": "@@ -31,6 +31,7 @@\n  * @version $Revision$\n  */\n public class URISupport {\n+\n     public static class CompositeData {\n         public String host;\n \n@@ -165,12 +166,6 @@ public static CompositeData parseComposite(URI uri) throws URISyntaxException {\n         return rc;\n     }\n \n-    /**\n-     * @param uri\n-     * @param rc\n-     * @param ssp\n-     * @throws URISyntaxException\n-     */\n     private static void parseComposite(URI uri, CompositeData rc, String ssp) throws URISyntaxException {\n         String componentString;\n         String params;\n@@ -216,10 +211,6 @@ private static void parseComposite(URI uri, CompositeData rc, String ssp) throws\n         }\n     }\n \n-    /**\n-     * @param str\n-     * @return\n-     */\n     private static String[] splitComponents(String str) {\n         ArrayList l = new ArrayList();\n \n@@ -294,7 +285,7 @@ public static String createQueryString(Map options) throws URISyntaxException {\n     }\n \n     /**\n-     * Creates a URI from the original URI and the remaining paramaters\n+     * Creates a URI from the original URI and the remaining parameters\n      * \n      * @throws URISyntaxException\n      */\n@@ -332,6 +323,9 @@ public static boolean checkParenthesis(String str) {\n         return result;\n     }\n \n+    /**\n+     * @deprecated this method will be removed in a future release \n+     */\n     public int indexOfParenthesisMatch(String str) {\n         int result = -1;\n ",
                "raw_url": "https://github.com/apache/camel/raw/d643d6b492becb3b8705e30bf1c68fc6503ee655/camel-core/src/main/java/org/apache/camel/util/URISupport.java",
                "sha": "7971e5bce6ad3b71c870594eab7f467fa187063e",
                "status": "modified"
            }
        ],
        "message": "Various error reported by IDEA fixed:\n- javadoc polished\n- changed logger to private\n- added logging instead of e.printstacktrace\n- avoid potenital NPE if name is null\n- added final modified for synchronized object\n- added TODO why boolean is not part of primitives (James, you are the one that disabled this)\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/camel/trunk@655284 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/db71c7b6c4ce58b04c4ef0efa9a454101ea10fbd",
        "repo": "camel",
        "unit_tests": [
            "URISupportTest.java"
        ]
    },
    "camel_db4fe91": {
        "bug_id": "camel_db4fe91",
        "commit": "https://github.com/apache/camel/commit/db4fe9124d83dfa73ae20cdde8aa7c58ebcee7ea",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/db4fe9124d83dfa73ae20cdde8aa7c58ebcee7ea/camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java?ref=db4fe9124d83dfa73ae20cdde8aa7c58ebcee7ea",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java",
                "patch": "@@ -201,7 +201,9 @@ private void traceOnCompletion(TracedRouteNodes traced, Exchange exchange) {\n     }\n \n     private void traceOnException(TracedRouteNodes traced, Exchange exchange) throws Exception {\n-        traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        if (traced.getLastNode() != null) {\n+            traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        }\n         traced.addTraced(new OnExceptionRouteNode());\n         // log and trace so we have the from -> onException event as well\n         logExchange(exchange);\n@@ -210,7 +212,9 @@ private void traceOnException(TracedRouteNodes traced, Exchange exchange) throws\n     }\n \n     private void traceDoCatch(TracedRouteNodes traced, Exchange exchange) throws Exception {\n-        traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        if (traced.getLastNode() != null) {\n+            traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        }\n         traced.addTraced(new DoCatchRouteNode());\n         // log and trace so we have the from -> doCatch event as well\n         logExchange(exchange);\n@@ -219,7 +223,9 @@ private void traceDoCatch(TracedRouteNodes traced, Exchange exchange) throws Exc\n     }\n \n     private void traceDoFinally(TracedRouteNodes traced, Exchange exchange) throws Exception {\n-        traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        if (traced.getLastNode() != null) {\n+            traced.addTraced(new DefaultRouteNode(traced.getLastNode().getProcessorDefinition(), traced.getLastNode().getProcessor()));\n+        }\n         traced.addTraced(new DoFinallyRouteNode());\n         // log and trace so we have the from -> doFinally event as well\n         logExchange(exchange);",
                "raw_url": "https://github.com/apache/camel/raw/db4fe9124d83dfa73ae20cdde8aa7c58ebcee7ea/camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java",
                "sha": "e7d109768fe8b534d8c58bd61a34205da9e7616c",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in tracer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1029319 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/cf2fea4b3ccff7cd4c94bb1e083549be69ca243f",
        "repo": "camel",
        "unit_tests": [
            "TraceInterceptorTest.java"
        ]
    },
    "camel_ddc94d1": {
        "bug_id": "camel_ddc94d1",
        "commit": "https://github.com/apache/camel/commit/ddc94d10393265c1ec9cd6dbfebe883c6c75f8c9",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/ddc94d10393265c1ec9cd6dbfebe883c6c75f8c9/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java?ref=ddc94d10393265c1ec9cd6dbfebe883c6c75f8c9",
                "deletions": 2,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.camel.spi.HeaderFilterStrategy;\n import org.apache.camel.spi.HeaderFilterStrategyAware;\n import org.apache.camel.util.ExchangeHelper;\n+import org.apache.camel.util.ObjectHelper;\n import org.apache.cxf.helpers.CastUtils;\n import org.apache.cxf.helpers.HttpHeaderHelper;\n import org.apache.cxf.jaxrs.impl.MetadataMap;\n@@ -92,8 +93,10 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,\n             \n             if (response.getHeader(org.apache.cxf.message.Message.PROTOCOL_HEADERS) != null) {\n                 Map<String, Object> headers = CastUtils.cast((Map<?, ?>)response.getHeader(org.apache.cxf.message.Message.PROTOCOL_HEADERS));\n-                cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, \n+                if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {\n+                    cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, \n                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));\n+                }\n                 final Map<String, List<String>> cxfHeaders =\n                     CastUtils.cast((Map<?, ?>) cxfExchange.getOutMessage().get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));\n                 \n@@ -113,8 +116,10 @@ public Object populateCxfRsResponseFromExchange(Exchange camelExchange,\n                 cxfExchange.put(org.apache.cxf.message.Message.RESPONSE_CODE, response.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class));\n             }\n             if (response.getHeader(Exchange.CONTENT_TYPE) != null) {\n-                cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, \n+                if (!ObjectHelper.isEmpty(cxfExchange) && !ObjectHelper.isEmpty(cxfExchange.getOutMessage())) {\n+                    cxfExchange.getOutMessage().putIfAbsent(org.apache.cxf.message.Message.PROTOCOL_HEADERS, \n                                                         new TreeMap<>(String.CASE_INSENSITIVE_ORDER));\n+                }\n                 final Map<String, List<String>> cxfHeaders =\n                     CastUtils.cast((Map<?, ?>) cxfExchange.getOutMessage().get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));\n ",
                "raw_url": "https://github.com/apache/camel/raw/ddc94d10393265c1ec9cd6dbfebe883c6c75f8c9/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java",
                "sha": "1ae15e91fe33aa268b2855aca047ff182984a13b",
                "status": "modified"
            }
        ],
        "message": "CAMEL-12575:NPE on GET request with Content-Type header",
        "parent": "https://github.com/apache/camel/commit/ad2b04de7d013d20738f3d9c765685bcd108f67d",
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfRsBindingTest.java"
        ]
    },
    "camel_e034907": {
        "bug_id": "camel_e034907",
        "commit": "https://github.com/apache/camel/commit/e034907ee15d939cbcfde171bb63715e23f01a6a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/e034907ee15d939cbcfde171bb63715e23f01a6a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java?ref=e034907ee15d939cbcfde171bb63715e23f01a6a",
                "deletions": 1,
                "filename": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "patch": "@@ -392,7 +392,7 @@ protected MessageContentsList getResponsePayloadList(org.apache.cxf.message.Exch\n         int i = 0;\n         if (boi.getOutput() != null) {\n             for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {\n-                if (elements.size() > i) {\n+                if (elements != null && elements.size() > i) {\n                     answer.put(partInfo, elements.get(i++));\n                 }\n             }",
                "raw_url": "https://github.com/apache/camel/raw/e034907ee15d939cbcfde171bb63715e23f01a6a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
                "sha": "8a63da2767d301f8b8fe39d9949c644067b2c4e7",
                "status": "modified"
            }
        ],
        "message": " CAMEL-4649 Fixed the NPE issue of DefaultCxfBinding when the soap body is empty\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1199703 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/b38e01ef285ba5c214a7c1271737f2c50f1d0881",
        "repo": "camel",
        "unit_tests": [
            "DefaultCxfBindingTest.java"
        ]
    },
    "camel_e1d57c3": {
        "bug_id": "camel_e1d57c3",
        "commit": "https://github.com/apache/camel/commit/e1d57c38cc14e7ce508390a619f2e11497238dcc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/e1d57c38cc14e7ce508390a619f2e11497238dcc/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java?ref=e1d57c38cc14e7ce508390a619f2e11497238dcc",
                "deletions": 1,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java",
                "patch": "@@ -53,7 +53,7 @@ protected RabbitMQEndpoint createEndpoint(String uri,\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Creating RabbitMQEndpoint with host {}:{} and exchangeName: {}\",\n-                    endpoint.getHostname(), endpoint.getPortNumber(), endpoint.getExchangeName())\n+                    new Object[]{endpoint.getHostname(), endpoint.getPortNumber(), endpoint.getExchangeName()});\n         }\n \n         return endpoint;",
                "raw_url": "https://github.com/apache/camel/raw/e1d57c38cc14e7ce508390a619f2e11497238dcc/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java",
                "sha": "f8dbd8594479ac42165f614c7703958f81540fff",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in rabbitmq and polished the component.",
        "parent": "https://github.com/apache/camel/commit/3d15766435d90cc1b3c1805b10ea713400a06b8b",
        "repo": "camel",
        "unit_tests": [
            "RabbitMQComponentTest.java"
        ]
    },
    "camel_e317e7b": {
        "bug_id": "camel_e317e7b",
        "commit": "https://github.com/apache/camel/commit/e317e7b470f03d14fe51b9efcc6d251e869c8224",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/e317e7b470f03d14fe51b9efcc6d251e869c8224/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java?ref=e317e7b470f03d14fe51b9efcc6d251e869c8224",
                "deletions": 1,
                "filename": "components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java",
                "patch": "@@ -89,7 +89,9 @@ public Exchange createKafkaExchange(MessageAndMetadata<byte[], byte[]> mm) {\n         Message message = new DefaultMessage();\n         message.setHeader(KafkaConstants.PARTITION, mm.partition());\n         message.setHeader(KafkaConstants.TOPIC, mm.topic());\n-        message.setHeader(KafkaConstants.KEY, new String(mm.key()));\n+        if (mm.key() != null) {\n+            message.setHeader(KafkaConstants.KEY, new String(mm.key()));\n+        }\n         message.setBody(mm.message());\n         exchange.setIn(message);\n ",
                "raw_url": "https://github.com/apache/camel/raw/e317e7b470f03d14fe51b9efcc6d251e869c8224/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java",
                "sha": "002d15e7021152aa454661cc0e953d5dc54b0edb",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-7306]: key is optional. Avoid NPE",
        "parent": "https://github.com/apache/camel/commit/cd8da7d36b008a6f11e5c00715c1906b1a02a87d",
        "repo": "camel",
        "unit_tests": [
            "KafkaEndpointTest.java"
        ]
    },
    "camel_e55c71b": {
        "bug_id": "camel_e55c71b",
        "commit": "https://github.com/apache/camel/commit/e55c71bf74d3a9dc31e1a5e58096576c4589a434",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/camel/blob/e55c71bf74d3a9dc31e1a5e58096576c4589a434/camel-core/src/main/java/org/apache/camel/support/TimerListenerManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/support/TimerListenerManager.java?ref=e55c71bf74d3a9dc31e1a5e58096576c4589a434",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/support/TimerListenerManager.java",
                "patch": "@@ -111,7 +111,10 @@ protected void doStart() throws Exception {\n     @Override\n     protected void doStop() throws Exception {\n         // executor service will be shutdown by CamelContext\n-        task.cancel(true);\n+        if (task != null) {\n+            task.cancel(true);\n+            task = null;\n+        }\n     }\n \n }",
                "raw_url": "https://github.com/apache/camel/raw/e55c71bf74d3a9dc31e1a5e58096576c4589a434/camel-core/src/main/java/org/apache/camel/support/TimerListenerManager.java",
                "sha": "f583b9acfb06e6b5bad2fb2a9caa26ef85bbeb3f",
                "status": "modified"
            }
        ],
        "message": "Fixed potential NPE in doStop\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1232309 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/45b70e23a4ce3fce52a7fc802f1bc0abdc52eb41",
        "repo": "camel",
        "unit_tests": [
            "TimerListenerManagerTest.java"
        ]
    },
    "camel_ebd156c": {
        "bug_id": "camel_ebd156c",
        "commit": "https://github.com/apache/camel/commit/ebd156cf4aeda282c3647c2e7852ef0519994c51",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/camel/blob/ebd156cf4aeda282c3647c2e7852ef0519994c51/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppMessage.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppMessage.java?ref=ebd156cf4aeda282c3647c2e7852ef0519994c51",
                "deletions": 4,
                "filename": "components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppMessage.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.camel.component.smpp;\n \n import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n \n import org.apache.camel.impl.DefaultMessage;\n import org.jsmpp.bean.AlertNotification;\n@@ -77,11 +78,17 @@ public boolean isDeliveryReceipt() {\n     protected Object createBody() {\n         if (command instanceof MessageRequest) {\n             byte[] shortMessage = ((MessageRequest) command).getShortMessage();\n-            try {\n-                return new String(shortMessage, configuration.getEncoding());\n-            } catch (UnsupportedEncodingException e) {\n-                return new String(shortMessage);\n+            if (shortMessage == null || shortMessage.length == 0) {\n+                return null;\n             }\n+            if (Charset.isSupported(configuration.getEncoding())) {\n+                try {\n+                    return new String(shortMessage, configuration.getEncoding());\n+                } catch (UnsupportedEncodingException e) {\n+                    // ignore\n+                }\n+            }\n+            return new String(shortMessage);\n         }\n \n         return null;",
                "raw_url": "https://github.com/apache/camel/raw/ebd156cf4aeda282c3647c2e7852ef0519994c51/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppMessage.java",
                "sha": "f8992295f4a6d2cfc46790f2c65bab4c7c4bf7ab",
                "status": "modified"
            }
        ],
        "message": "CAMEL-5691: Fixed potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1395580 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/d5096566c0ac2fb9ebe26fd6e9b8737e2cd68dc5",
        "repo": "camel",
        "unit_tests": [
            "SmppMessageTest.java"
        ]
    },
    "camel_f0b3821": {
        "bug_id": "camel_f0b3821",
        "commit": "https://github.com/apache/camel/commit/f0b3821a1ae00f976229dfd8e06cd87257deb067",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/camel/blob/f0b3821a1ae00f976229dfd8e06cd87257deb067/components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java?ref=f0b3821a1ae00f976229dfd8e06cd87257deb067",
                "deletions": 1,
                "filename": "components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java",
                "patch": "@@ -79,10 +79,18 @@ public Class findClass(String key, String propertyPrefix) throws ClassNotFoundEx\n        \n     public BundleEntry getResource(String name) {\n         BundleEntry entry = null;\n+        org.osgi.framework.Bundle[] bundles = null;       \n         BundleContext bundleContext = Activator.getBundle().getBundleContext();\n+        if (bundleContext == null) {\n+            // Bundle is not in STARTING|ACTIVE|STOPPING state\n+            // (See OSGi 4.1 spec, section 4.3.17)\n+            bundles = new org.osgi.framework.Bundle[] {Activator.getBundle()};\n+        } else {\n+            bundles = bundleContext.getBundles();\n+        }\n \n         URL url;\n-        for (Bundle bundle : bundleContext.getBundles()) {\n+        for (Bundle bundle : bundles) {\n             url = bundle.getEntry(getResourcePath() + name);\n             if (url != null) {\n                 entry = new BundleEntry();",
                "raw_url": "https://github.com/apache/camel/raw/f0b3821a1ae00f976229dfd8e06cd87257deb067/components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiFactoryFinder.java",
                "sha": "98d6f7796e8135ec55ccf74817dea42f6e4cca41",
                "status": "modified"
            }
        ],
        "message": "CAMEL-2020 fixed the NPE of the OsgiFactoryFinder\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@816105 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/0accc0d75c6c6174a16998633c6dc569bac01af0",
        "repo": "camel",
        "unit_tests": [
            "OsgiFactoryFinderTest.java"
        ]
    },
    "camel_f7f3a44": {
        "bug_id": "camel_f7f3a44",
        "commit": "https://github.com/apache/camel/commit/f7f3a442738221300f707ae5dc8b9323706d083e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java?ref=f7f3a442738221300f707ae5dc8b9323706d083e",
                "deletions": 3,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java",
                "patch": "@@ -61,12 +61,12 @@ public Component resolveComponent(String name, CamelContext context) {\n         } catch (Throwable e) {\n             throw new IllegalArgumentException(\"Invalid URI, no Component registered for scheme: \" + name, e);\n         }\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Found component: \" + name + \" via type: \" + type.getName() + \" via: \" + COMPONENT_FACTORY.getPath() + name);\n-        }\n         if (type == null) {\n             return null;\n         }\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found component: \" + name + \" via type: \" + type.getName() + \" via: \" + COMPONENT_FACTORY.getPath() + name);\n+        }\n         if (Component.class.isAssignableFrom(type)) {\n             return (Component) context.getInjector().newInstance(type);\n         } else {",
                "raw_url": "https://github.com/apache/camel/raw/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/impl/DefaultComponentResolver.java",
                "sha": "b39b75d661d3dbd95ded4360cb3fe65c4951d5eb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/camel/blob/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java?ref=f7f3a442738221300f707ae5dc8b9323706d083e",
                "deletions": 1,
                "filename": "camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java",
                "patch": "@@ -106,7 +106,9 @@ public Class findClass(String key, String propertyPrefix) throws ClassNotFoundEx\n         Class clazz = classMap.get(propertyPrefix + key);\n         if (clazz == null) {\n             clazz = newInstance(doFindFactoryProperties(key), propertyPrefix);\n-            classMap.put(propertyPrefix + key, clazz);\n+            if (clazz != null) {\n+                classMap.put(propertyPrefix + key, clazz);\n+            }\n         }\n         return clazz;\n     }",
                "raw_url": "https://github.com/apache/camel/raw/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/util/FactoryFinder.java",
                "sha": "52a5e8061f8c96e98414bb36597fe46373b7426b",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/camel/blob/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java?ref=f7f3a442738221300f707ae5dc8b9323706d083e",
                "deletions": 25,
                "filename": "camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "patch": "@@ -41,7 +41,7 @@\n \n /**\n  * A number of useful helper methods for working with Objects\n- * \n+ *\n  * @version $Revision$\n  */\n public final class ObjectHelper {\n@@ -260,7 +260,7 @@ public static boolean isNotEmpty(Object value) {\n     /**\n      * Removes any starting characters on the given text which match the given\n      * character\n-     * \n+     *\n      * @param text the string\n      * @param ch the initial characters to remove\n      * @return either the original string or the new substring\n@@ -364,7 +364,7 @@ public void remove() {\n      * Returns the predicate matching boolean on a {@link List} result set where\n      * if the first element is a boolean its value is used otherwise this method\n      * returns true if the collection is not empty\n-     * \n+     *\n      * @return <tt>true</tt> if the first element is a boolean and its value\n      *         is true or if the list is non empty\n      */\n@@ -385,7 +385,7 @@ public static boolean matches(List list) {\n     /**\n      * A helper method to access a system property, catching any security\n      * exceptions\n-     * \n+     *\n      * @param name the name of the system property required\n      * @param defaultValue the default value to use if the property is not\n      *                available or a security exception prevents access\n@@ -407,7 +407,7 @@ public static String getSystemProperty(String name, String defaultValue) {\n     /**\n      * A helper method to access a boolean system property, catching any\n      * security exceptions\n-     * \n+     *\n      * @param name the name of the system property required\n      * @param defaultValue the default value to use if the property is not\n      *                available or a security exception prevents access\n@@ -449,7 +449,7 @@ public static String classCanonicalName(Object value) {\n     /**\n      * Attempts to load the given class name using the thread context class\n      * loader or the class loader used to load this class\n-     * \n+     *\n      * @param name the name of the class to load\n      * @return the class or null if it could not be loaded\n      */\n@@ -460,32 +460,59 @@ public static String classCanonicalName(Object value) {\n     /**\n      * Attempts to load the given class name using the thread context class\n      * loader or the given class loader\n-     * \n+     *\n      * @param name the name of the class to load\n      * @param loader the class loader to use after the thread context class\n      *                loader\n      * @return the class or null if it could not be loaded\n      */\n     public static Class<?> loadClass(String name, ClassLoader loader) {\n-        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n-        if (contextClassLoader != null) {\n-            try {\n-                return contextClassLoader.loadClass(name);\n-            } catch (ClassNotFoundException e) {\n-                try {\n-                    return loader.loadClass(name);\n-                } catch (ClassNotFoundException e1) {\n-                    LOG.debug(\"Could not find class: \" + name + \". Reason: \" + e);\n-                }\n+        // try context class loader first\n+        Class clazz = doLoadClass(name, Thread.currentThread().getContextClassLoader());\n+        if (clazz == null) {\n+            // then the provided loader\n+            clazz = doLoadClass(name, loader);\n+        }\n+        if (clazz == null) {\n+            // and fallback to the loader the loaded the ObjectHelper class\n+            clazz = doLoadClass(name, ObjectHelper.class.getClassLoader());\n+        }\n+\n+        if (clazz == null) {\n+            LOG.warn(\"Could not find class: \" + name);\n+        }\n+\n+        return clazz;\n+    }\n+\n+    /**\n+     * Loads the given class with the provided classloader (may be null).\n+     * Will ignore any class not found and return null.\n+     *\n+     * @param name    the name of the class to load\n+     * @param loader  a provided loader (may be null)\n+     * @return the class, or null if it could not be loaded\n+     */\n+    private static Class<?> doLoadClass(String name, ClassLoader loader) {\n+        ObjectHelper.notEmpty(name, \"name\");\n+        if (loader == null) {\n+            return null;\n+        }\n+        try {\n+            return loader.loadClass(name);\n+        } catch (ClassNotFoundException e) {\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"Can not load class: \" + name + \" using classloader: \" + loader, e);\n             }\n+\n         }\n         return null;\n     }\n \n     /**\n      * Attempts to load the given resource as a stream using the thread context\n      * class loader or the class loader used to load this class\n-     * \n+     *\n      * @param name the name of the resource to load\n      * @return the stream or null if it could not be loaded\n      */\n@@ -506,7 +533,7 @@ public static InputStream loadResourceAsStream(String name) {\n     /**\n      * A helper method to invoke a method via reflection and wrap any exceptions\n      * as {@link RuntimeCamelException} instances\n-     * \n+     *\n      * @param method the method to invoke\n      * @param instance the object instance (or null for static methods)\n      * @param parameters the parameters to the method\n@@ -524,7 +551,7 @@ public static Object invokeMethod(Method method, Object instance, Object... para\n \n     /**\n      * Returns a list of methods which are annotated with the given annotation\n-     * \n+     *\n      * @param type the type to reflect on\n      * @param annotationType the annotation type\n      * @return a list of the methods found\n@@ -536,7 +563,7 @@ public static Object invokeMethod(Method method, Object instance, Object... para\n \n     /**\n      * Returns a list of methods which are annotated with the given annotation\n-     * \n+     *\n      * @param type the type to reflect on\n      * @param annotationType the annotation type\n      * @param checkMetaAnnotations check for meta annotations\n@@ -560,7 +587,7 @@ public static Object invokeMethod(Method method, Object instance, Object... para\n \n     /**\n      * Checks if a Class or Method are annotated with the given annotation\n-     * \n+     *\n      * @param elem the Class or Method to reflect on\n      * @param annotationType the annotation type\n      * @param checkMetaAnnotations check for meta annotations\n@@ -585,7 +612,7 @@ public static boolean hasAnnotation(AnnotatedElement elem, Class<? extends Annot\n \n     /**\n      * Turns the given object arrays into a meaningful string\n-     * \n+     *\n      * @param objects an array of objects or null\n      * @return a meaningful string\n      */\n@@ -682,7 +709,7 @@ public static boolean hasAnnotation(Annotation[] annotations, Class<?> type) {\n     /**\n      * Closes the given resource if it is available, logging any closing\n      * exceptions to the given log\n-     * \n+     *\n      * @param closeable the object to close\n      * @param name the name of the resource\n      * @param log the log to use when reporting closure warnings\n@@ -799,7 +826,7 @@ public static boolean evaluateValuePredicate(Object value) {\n     /**\n      * Wraps the caused exception in a {@link RuntimeCamelException} if its not\n      * already such an exception.\n-     * \n+     *\n      * @param e the caused exception\n      * @return the wrapper exception\n      */",
                "raw_url": "https://github.com/apache/camel/raw/f7f3a442738221300f707ae5dc8b9323706d083e/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java",
                "sha": "c9674de68d6e7430b33f83c9b5f0d77e79f692cd",
                "status": "modified"
            }
        ],
        "message": "CAMEL-1301: Fixed NPE in factory finder and improved ObjectHelper.loadClass\n\ngit-svn-id: https://svn.apache.org/repos/asf/camel/trunk@739199 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/camel/commit/55850e1e30610adcd3418f7e374291fc56a35a68",
        "repo": "camel",
        "unit_tests": [
            "ObjectHelperTest.java"
        ]
    },
    "camel_fab550a": {
        "bug_id": "camel_fab550a",
        "commit": "https://github.com/apache/camel/commit/fab550a7e21467acff6307e707c09d4a90820267",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/camel/blob/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveComponent.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveComponent.java?ref=fab550a7e21467acff6307e707c09d4a90820267",
                "deletions": 3,
                "filename": "components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveComponent.java",
                "patch": "@@ -44,10 +44,11 @@ protected GoogleDriveApiName getApiName(String apiNameStr) throws IllegalArgumen\n         return GoogleDriveApiName.fromValue(apiNameStr);\n     }\n \n-    public Drive getClient() {\n+    public Drive getClient(GoogleDriveConfiguration googleDriveConfiguration) {\n         if (client == null) {\n-            client = getClientFactory().makeClient(configuration.getClientId(), configuration.getClientSecret(), configuration.getScopes(), \n-                configuration.getApplicationName(), configuration.getRefreshToken(), configuration.getAccessToken());\n+            client = getClientFactory().makeClient(googleDriveConfiguration.getClientId(), googleDriveConfiguration.getClientSecret(), \n+                    googleDriveConfiguration.getScopes(), googleDriveConfiguration.getApplicationName(), \n+                    googleDriveConfiguration.getRefreshToken(), googleDriveConfiguration.getAccessToken());\n         }\n         return client;\n     }\n@@ -69,6 +70,9 @@ public void setConfiguration(GoogleDriveConfiguration configuration) {\n \n     @Override\n     public GoogleDriveConfiguration getConfiguration() {\n+        if (configuration == null) {\n+            configuration = new GoogleDriveConfiguration();\n+        }\n         return super.getConfiguration();\n     }\n ",
                "raw_url": "https://github.com/apache/camel/raw/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveComponent.java",
                "sha": "84dc9e2f3293c1162a61c8421bab575695bb6c1e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/camel/blob/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.java?ref=fab550a7e21467acff6307e707c09d4a90820267",
                "deletions": 1,
                "filename": "components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.java",
                "patch": "@@ -124,7 +124,7 @@ protected void afterConfigureProperties() {\n     }\n     \n     public Drive getClient() {\n-        return ((GoogleDriveComponent)getComponent()).getClient();\n+        return ((GoogleDriveComponent)getComponent()).getClient(configuration);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/camel/raw/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.java",
                "sha": "b80a2df31907e68ef50c25ecf8ceb73ac054e622",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveFilesConverter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveFilesConverter.java?ref=fab550a7e21467acff6307e707c09d4a90820267",
                "deletions": 1,
                "filename": "components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveFilesConverter.java",
                "patch": "@@ -98,6 +98,7 @@ public static String downloadContentAsString(com.google.api.services.drive.model\n     }\n     \n     private static Drive getClient(Exchange exchange) {\n-        return exchange.getContext().getComponent(\"google-drive\", GoogleDriveComponent.class).getClient();\n+        GoogleDriveComponent component = exchange.getContext().getComponent(\"google-drive\", GoogleDriveComponent.class);\n+        return component.getClient(component.getConfiguration());\n     }\n }",
                "raw_url": "https://github.com/apache/camel/raw/fab550a7e21467acff6307e707c09d4a90820267/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveFilesConverter.java",
                "sha": "d2273011aa8a2895359a8109f3c3633fee9ca606",
                "status": "modified"
            }
        ],
        "message": "CAMEL-10381 - fix NPE from component configuration",
        "parent": "https://github.com/apache/camel/commit/404ecc5625b34dd011f5257206cda4d60341bfac",
        "repo": "camel",
        "unit_tests": [
            "GoogleDriveFilesConverterTest.java"
        ]
    },
    "camel_fb74240": {
        "bug_id": "camel_fb74240",
        "commit": "https://github.com/apache/camel/commit/fb742406c6083f31c1098d487531556618262cdc",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/camel/blob/fb742406c6083f31c1098d487531556618262cdc/camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java?ref=fb742406c6083f31c1098d487531556618262cdc",
                "deletions": 0,
                "filename": "camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.camel.util.AttachmentMap;\n import org.apache.camel.util.CaseInsensitiveMap;\n import org.apache.camel.util.EndpointHelper;\n+import org.apache.camel.util.ObjectHelper;\n \n /**\n  * The default implementation of {@link org.apache.camel.Message}\n@@ -67,6 +68,8 @@ public Object getHeader(String name, Object defaultValue) {\n     }\n \n     public Object getHeader(String name, Supplier<Object> defaultValueSupplier) {\n+        ObjectHelper.notNull(name, \"name\");\n+        ObjectHelper.notNull(defaultValueSupplier, \"defaultValueSupplier\");\n         Object answer = getHeaders().get(name);\n         return answer != null ? answer : defaultValueSupplier.get();\n     }\n@@ -123,6 +126,9 @@ public Object getHeader(String name, Supplier<Object> defaultValueSupplier) {\n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T getHeader(String name, Supplier<Object> defaultValueSupplier, Class<T> type) {\n+        ObjectHelper.notNull(name, \"name\");\n+        ObjectHelper.notNull(type, \"type\");\n+        ObjectHelper.notNull(defaultValueSupplier, \"defaultValueSupplier\");\n         Object value = getHeader(name, defaultValueSupplier);\n         if (value == null) {\n             // lets avoid NullPointerException when converting to boolean for null values",
                "raw_url": "https://github.com/apache/camel/raw/fb742406c6083f31c1098d487531556618262cdc/camel-core/src/main/java/org/apache/camel/impl/DefaultMessage.java",
                "sha": "57bedfad67e67ea9163c3a6555423c75ea26bad5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/camel/blob/fb742406c6083f31c1098d487531556618262cdc/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/camel/contents/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java?ref=fb742406c6083f31c1098d487531556618262cdc",
                "deletions": 2,
                "filename": "components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "patch": "@@ -220,7 +220,7 @@ protected boolean processInOut(final Exchange exchange, final AsyncCallback call\n             exchangeName = getEndpoint().getExchangeName();\n         }\n \n-        String key = in.getHeader(RabbitMQConstants.ROUTING_KEY, null, String.class);\n+        String key = in.getHeader(RabbitMQConstants.ROUTING_KEY, String.class);\n         // we just need to make sure RoutingKey option take effect if it is not BridgeEndpoint\n         if (key == null || getEndpoint().isBridgeEndpoint()) {\n             key = getEndpoint().getRoutingKey() == null ? \"\" : getEndpoint().getRoutingKey();\n@@ -245,7 +245,7 @@ protected boolean processInOut(final Exchange exchange, final AsyncCallback call\n     private boolean processInOnly(Exchange exchange, AsyncCallback callback) throws Exception {\n         String exchangeName = getEndpoint().getExchangeName(exchange.getIn());\n \n-        String key = exchange.getIn().getHeader(RabbitMQConstants.ROUTING_KEY, null, String.class);\n+        String key = exchange.getIn().getHeader(RabbitMQConstants.ROUTING_KEY, String.class);\n         // we just need to make sure RoutingKey option take effect if it is not BridgeEndpoint\n         if (key == null || getEndpoint().isBridgeEndpoint()) {\n             key = getEndpoint().getRoutingKey() == null ? \"\" : getEndpoint().getRoutingKey();",
                "raw_url": "https://github.com/apache/camel/raw/fb742406c6083f31c1098d487531556618262cdc/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java",
                "sha": "3e45c15cd59c3548185f377c25da1dfbd9af8149",
                "status": "modified"
            }
        ],
        "message": "[CAMEL-11093] NPE when defaultValueProvider not given",
        "parent": "https://github.com/apache/camel/commit/c54509df553933ffa641dddbb6d7929031f3c6a7",
        "repo": "camel",
        "unit_tests": [
            "RabbitMQProducerTest.java"
        ]
    }
}