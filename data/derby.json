{
    "derby_67790a0": {
        "bug_id": "derby_67790a0",
        "commit": "https://github.com/apache/derby/commit/67790a0ed8acd00d35026e4bbbae8a454dbc252e",
        "file": [
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/derby/blob/67790a0ed8acd00d35026e4bbbae8a454dbc252e/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/derby/contents/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java?ref=67790a0ed8acd00d35026e4bbbae8a454dbc252e",
                "deletions": 31,
                "filename": "java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java",
                "patch": "@@ -126,6 +126,20 @@ public void printStackTrace(PrintWriter s) {\n         s.println(threadDump);\n     }\n \n+    /**\n+     * Tells if generating a thread dump is supported in the running JVM.\n+     */\n+    private boolean supportsThreadDump() {\n+        try {\n+            // This checks that we are on a jvm >= 1.5 where we\n+            // can actually do threaddumps.\n+            Thread.class.getMethod(\"getAllStackTraces\", new Class[] {});\n+            return true;\n+        } catch (NoSuchMethodException nsme) {\n+            // Ignore exception\n+        }\n+        return false;\n+    }\n \n     /**\n      * Dumps stack traces for all the threads if the JVM supports it.\n@@ -140,54 +154,57 @@ public void printStackTrace(PrintWriter s) {\n      */\n     private String dumpThreads() {\n \n+        if (!supportsThreadDump()) {\n+            return \"(Skipping thread dump because it is not \" +\n+                    \"supported on JVM 1.4)\";\n+        }\n+            \n+        // NOTE: No need to flush with the StringWriter/PrintWriter combination.\n         StringWriter out = new StringWriter();\n         PrintWriter p = new PrintWriter(out, true);\n \n-        //Try to get a thread dump and deal with various situations.\n+        // Load the class and method we need with reflection.\n+        final Method m;\n         try {\n-            //This checks that we are on a jvm >= 1.5 where we\n-            //can actually do threaddumps.\n-            Thread.class.getMethod(\"getAllStackTraces\", new Class[] {});\n-\n-            //Then get the thread dump.\n-            Class c = Class.\n-            forName(\"org.apache.derby.shared.common.sanity.ThreadDump\");\n-            final Method m = c.getMethod(\"getStackDumpString\",new Class[] {});\n-\n-            String dump;\n+            Class c = Class.forName(\n+                    \"org.apache.derby.shared.common.sanity.ThreadDump\");\n+            m = c.getMethod(\"getStackDumpString\", new Class[] {});\n+        } catch (Exception e) {\n+            p.println(\"Failed to load class/method required to generate \" +\n+                    \"a thread dump:\");\n+            e.printStackTrace(p);\n+            return out.toString();\n+        }\n \n-            dump = (String) AccessController.doPrivileged\n+        //Try to get a thread dump and deal with various situations.\n+        try {\n+            String dump = (String) AccessController.doPrivileged\n             (new PrivilegedExceptionAction(){\n                 public Object run() throws\n-                IllegalArgumentException,\n-                IllegalAccessException,\n-                InvocationTargetException{\n-                    return m.invoke(null, null);\n+                        IllegalArgumentException,\n+                        IllegalAccessException,\n+                        InvocationTargetException {\n+                    return m.invoke(null, (Object[])null);\n                 }\n             }\n             );\n \n             //Print the dump to the message string. That went OK.\n-            p.print(\"---------------\\nStack traces for all \" +\n-            \"live threads:\");\n+            p.print(\"---------------\\nStack traces for all live threads:\");\n             p.println(\"\\n\" + dump);\n             p.println(\"---------------\");\n-        } catch (NoSuchMethodException e) {\n-            p.println(\"(Skipping thread dump because it is not \" +\n-            \"supported on JVM 1.4)\");\n-\n-        } catch (Exception e) {\n-            if (e instanceof PrivilegedActionException &&\n-                e.getCause() instanceof InvocationTargetException &&\n-                e.getCause().getCause() instanceof AccessControlException){\n+        } catch (PrivilegedActionException pae) {\n+            Throwable cause = pae.getCause();\n+            if (cause instanceof InvocationTargetException &&\n+                cause.getCause() instanceof AccessControlException) {\n \n                 p.println(\"(Skipping thread dump \"\n-                        + \"because of insufficient permissions:\\n\"\n-                        + e.getCause().getCause() + \")\\n\");\n+                    + \"because of insufficient permissions:\\n\"\n+                    + cause.getCause() + \")\\n\");\n             } else {\n-                p.println(\"\\nAssertFailure tried to do a thread dump, but \"\n-                        + \"there was an error:\");\n-                e.getCause().printStackTrace(p);\n+                p.println(\"\\nAssertFailure tried to do a thread dump, \"\n+                    + \"but there was an error:\");\n+                cause.printStackTrace(p);\n             }\n         }\n         return out.toString();",
                "raw_url": "https://github.com/apache/derby/raw/67790a0ed8acd00d35026e4bbbae8a454dbc252e/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java",
                "sha": "f23b88aa4d3727a2a66a7e49f17d197e81eaa653",
                "status": "modified"
            }
        ],
        "message": "DERBY-5256: Improve error reporting in common.sanity.AssertFailure \n\nAdded more specific error reporting, and fixed code that could result\nin an NPE under some circumstances.\n\nPatch file: derby-5256-1a-error_reporting.diff\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/db/derby/code/trunk@1130964 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/derby/commit/6f271b4bcca9f126632aee43c3e144061773c08d",
        "repo": "derby",
        "unit_tests": [
            "AssertFailureTest.java"
        ]
    }
}