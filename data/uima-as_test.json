{
    "uima-as_42c949b": {
        "bug_id": "uima-as_42c949b",
        "commit": "https://github.com/apache/uima-as/commit/42c949b522a95df599c19dcb0c0318c4c7ea4558",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/java/org/apache/uima/ae/multiplier/SimpleCasGenerator.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/java/org/apache/uima/ae/multiplier/SimpleCasGenerator.java?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558",
                "deletions": 0,
                "filename": "uimaj-as-activemq/src/test/java/org/apache/uima/ae/multiplier/SimpleCasGenerator.java",
                "patch": "@@ -63,6 +63,8 @@\n   private String text;\n \n   long docCount = 0;\n+  \n+  int failOnDocumentNumber;\n \n   /*\n    * (non-Javadoc)\n@@ -73,6 +75,13 @@\n   public void initialize(UimaContext aContext) throws ResourceInitializationException {\n     super.initialize(aContext);\n     this.nToGen = ((Integer) aContext.getConfigParameterValue(\"NumberToGenerate\")).intValue();\n+    if ( aContext.getConfigParameterValue(\"DocumentNumberToFailOn\") != null ) {\n+      int tmpCount = ((Integer) aContext.getConfigParameterValue(\"DocumentNumberToFailOn\")).intValue();\n+      if ( tmpCount > 0 ) {\n+        this.failOnDocumentNumber = tmpCount;\n+      }\n+    }\n+    \n     FileInputStream fis = null;\n     try {\n       String filename = ((String) aContext.getConfigParameterValue(\"InputFile\")).trim();\n@@ -137,6 +146,13 @@ public AbstractCas next() throws AnalysisEngineProcessException {\n       System.out.println(\"Initializing CAS with a Document of Size:\" + text.length());\n     }\n     docCount++;\n+    \n+    if ( this.failOnDocumentNumber == docCount ) {\n+      cas.release();\n+      //  force CM to finish producing CASes on error\n+      this.mCount = this.nToGen;\n+      throw new AnalysisEngineProcessException(new Exception(\"Simulated Exception in Cas Multiplier next() method\"));\n+    }\n     if (UIMAFramework.getLogger().isLoggable(Level.FINE))\n       System.out.println(\"CasMult creating document#\" + docCount);\n     cas.setDocumentText(this.text);",
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/java/org/apache/uima/ae/multiplier/SimpleCasGenerator.java",
                "sha": "4f5fc33a69332fdd1b1a94cb982a9c633c225b05",
                "status": "modified"
            },
            {
                "additions": 184,
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "changes": 236,
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558",
                "deletions": 52,
                "filename": "uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "patch": "@@ -23,10 +23,13 @@\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.Reader;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n@@ -53,6 +56,7 @@\n import org.apache.uima.aae.controller.Endpoint;\n import org.apache.uima.aae.error.MessageTimeoutException;\n import org.apache.uima.aae.error.ServiceShutdownException;\n+import org.apache.uima.aae.monitor.statistics.AnalysisEnginePerformanceMetrics;\n import org.apache.uima.adapter.jms.JmsConstants;\n import org.apache.uima.adapter.jms.activemq.JmsOutputChannel;\n import org.apache.uima.adapter.jms.activemq.SpringContainerDeployer;\n@@ -61,6 +65,8 @@\n import org.apache.uima.analysis_engine.AnalysisEngineDescription;\n import org.apache.uima.cas.CAS;\n import org.apache.uima.cas.TypeSystem;\n+import org.apache.uima.cas.impl.XmiCasDeserializer;\n+import org.apache.uima.collection.CollectionException;\n import org.apache.uima.collection.CollectionReader;\n import org.apache.uima.collection.CollectionReaderDescription;\n import org.apache.uima.collection.EntityProcessStatus;\n@@ -74,6 +80,7 @@\n import org.apache.uima.resourceSpecifier.factory.UimaASDeploymentDescriptor;\n import org.apache.uima.util.XMLInputSource;\n import org.josql.expressions.IsNullExpression;\n+import org.xml.sax.SAXException;\n \n public class TestUimaASExtended extends BaseTestSupport {\n \n@@ -99,6 +106,183 @@ public void testBrokerLifecycle() {\n             + System.getProperty(\"file.separator\") + \"bin\" + System.getProperty(\"file.separator\")\n             + \"dd2spring.xsl\");\n   }\n+  \n+  public void testDeployAggregateServiceWithFailingCollocatedCM() throws Exception {\n+    System.out.println(\"-------------- testDeployAggregateServiceWithFailingCollocatedCM -------------\");\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    System.setProperty(JmsConstants.SessionTimeoutOverride, \"2500000\");\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml\");\n+    \n+    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\");\n+    appCtx.put(UimaAsynchronousEngine.Timeout, 0);\n+    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 0);\n+    \n+    //addExceptionToignore(org.apache.uima.aae.error.UimaEEServiceException.class); \n+    \n+    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()), \"TopLevelTaeQueue\",\n+            1, EXCEPTION_LATCH);\n+  }\n+  \n+  \n+  public void getLargeCAS(CAS aCAS, File xmiFile) throws IOException, CollectionException {\n+\t    FileInputStream inputStream = new FileInputStream(xmiFile);\n+\t    try {\n+\t    \tXmiCasDeserializer.deserialize(inputStream, aCAS, false);\n+\t    } catch (SAXException e) {\n+\t      throw new CollectionException(e);\n+\t    } finally {\n+\t      inputStream.close();\n+\t    }\n+\t    \n+\t  }\n+  /*\n+  public void testLargeCAS() {\n+\t    System.out.println(\"-------------- testLargeCAS -------------\");\n+\t    try {\n+\t\t    // Instantiate Uima AS Client\n+\t\t    BaseUIMAAsynchronousEngine_impl uimaAsEngine = new BaseUIMAAsynchronousEngine_impl();\n+\t\t    // Deploy Uima AS Primitive Service\n+//\t\t    deployService(uimaAsEngine, relativePath + \"/Deploy_PersonTitleAnnotator.xml\");\n+\t\t    deployService(uimaAsEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//\t\t    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+//\t\t            \"PersonTitleAnnotatorQueue\");\n+\t\t    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+\t\t            \"NoOpAnnotatorQueue\");\n+\t\t    \n+\t\t    \n+\t\t    appCtx.put(UimaAsynchronousEngine.Timeout, 1100);\n+\t\t    appCtx.put(UimaAsynchronousEngine.CpcTimeout, 1100);\n+\t\t    initialize(uimaAsEngine, appCtx);\n+\t\t    waitUntilInitialized();\n+\t        CAS cas = uimaAsEngine.getCAS();\n+\t        getLargeCAS(cas, new File(\"C:/uima/largeCASTest/NYT_ENG_20070514.0065.out.xmi\"));\n+\t       \n+\t        System.out.println(\"UIMA AS Client Sending CAS Request to a Service\");\n+\t\t    uimaAsEngine.sendCAS(cas);\n+\t\t    uimaAsEngine.collectionProcessingComplete();\n+\t\t    System.clearProperty(\"DefaultBrokerURL\");\n+\t\t    uimaAsEngine.stop();\t  \n+\t    \t\n+\t    } catch( Exception e) {\n+\t    \te.printStackTrace();\n+\t    }\n+  }\n+  */\n+  /**\n+   * Tests service quiesce and stop support. This test sets a CasPool to 1 to send just one CAS at a\n+   * time. After the first CAS is sent, a thread is started with a timer to expire before the reply\n+   * is received. When the timer expires, the client initiates quiesceAndStop on the top level\n+   * controller. As part of this, the top level controller stops its listeners on the input queue\n+   * (GetMeta and Process Listeners), and registers a callback with the InProcess cache. When the\n+   * cache is empty, meaning all CASes are processed, the cache notifies the controller which then\n+   * begins the service shutdown. Meanwhile, the client receives a reply for the first CAS, and\n+   * sends a second CAS. This CAS, will remain in the queue as the service has previously stopped\n+   * its listeners. The client times out after 10 seconds and shuts down.\n+   * \n+   * @throws Exception\n+   */\n+  public void testQuiesceAndStop() throws Exception {\n+    System.out.println(\"-------------- testQuiesceAndStop -------------\");\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\");\n+    // Set an explicit process timeout so to test the ping on timeout\n+    appCtx.put(UimaAsynchronousEngine.Timeout, 10000);\n+    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n+    appCtx.put(UimaAsynchronousEngine.CasPoolSize, 10);\n+    String containers[] = new String[1];\n+    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_ScaledPrimitiveAggregateAnnotator.xml\");\n+\n+    \n+//    String containers[] = new String[2];\n+ //   containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+   // containers[1] =  deployService(eeUimaEngine, relativePath\n+     //       + \"/Deploy_AggregateAnnotatorWithInternalCM1000Docs.xml\");\n+//    spinShutdownThread(eeUimaEngine, 5000, containers, SpringContainerDeployer.QUIESCE_AND_STOP);\n+    spinShutdownThread(eeUimaEngine, 5000, containers, SpringContainerDeployer.QUIESCE_AND_STOP);\n+    \n+    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\", 1000, EXCEPTION_LATCH);\n+    //eeUimaEngine.stop();\n+  }\n+/*\n+  public void testQuiesceAndStop2() throws Exception {\n+\t    System.out.println(\"-------------- testQuiesceAndStop -------------\");\n+\t    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+\t    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+\t            \"TopLevelTaeQueue\");\n+\t    // Set an explicit process timeout so to test the ping on timeout\n+\t    appCtx.put(UimaAsynchronousEngine.Timeout, 10000);\n+\t    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n+\t    appCtx.put(UimaAsynchronousEngine.CasPoolSize, 1);\n+\t    String containers[] = new String[1];\n+\t    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_ScaledPrimitiveAggregateAnnotator.xml\");\n+\t    \n+\t    \n+\t    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n+\t            \"TopLevelTaeQueue\", 100, PROCESS_LATCH);\n+\t    System.out.println(\"------------ Undeploying ----------------\");\n+\t    eeUimaEngine.undeploy(containers[0] , SpringContainerDeployer.QUIESCE_AND_STOP);\n+//\t    eeUimaEngine.stop();\n+\t  }\n+\n+  */\n+  \n+  \n+  \n+  public void testStopNow() throws Exception {\n+    System.out.println(\"-------------- testAggregateWithFailedRemoteDelegate -------------\");\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    String containers[] = new String[2];\n+\n+    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    containers[1] = deployService(eeUimaEngine, relativePath\n+            + \"/Deploy_AggregateAnnotatorWithInternalCM1000Docs.xml\");\n+    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\");\n+    // Set an explicit process timeout so to test the ping on timeout\n+    appCtx.put(UimaAsynchronousEngine.Timeout, 4000);\n+    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n+    spinShutdownThread(eeUimaEngine, 3000, containers, SpringContainerDeployer.STOP_NOW);\n+    //  send may fail since we forcefully stop the service. Tolerate\n+    //  ResourceProcessException\n+    addExceptionToignore(ResourceProcessException.class); \n+    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n+            \"TopLevelTaeQueue\", 10, EXCEPTION_LATCH);\n+  }\n+  public void testSendAndReceive() throws Exception  {\n+      BaseUIMAAsynchronousEngine_impl uimaAsEngine \n+      \t= new BaseUIMAAsynchronousEngine_impl();\n+      \n+      deployService(uimaAsEngine, relativePath + \"/Deploy_MeetingDetectorAggregate.xml\");\n+      // Deploy Uima AS Primitive Service\n+ //     deployService(uimaAsEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+      Map<String, Object> appCtx = buildContext(broker.getMasterConnectorURI().toString(),\"MeetingDetectorQueue\");\n+      appCtx.put(UimaAsynchronousEngine.Timeout, 1100);\n+      appCtx.put(UimaAsynchronousEngine.CpcTimeout, 1100);\n+      initialize(uimaAsEngine, appCtx);\n+      waitUntilInitialized();\n+      int errorCount = 0;\n+      List<AnalysisEnginePerformanceMetrics> componentMetricsList = \n+    \t\t  new ArrayList<AnalysisEnginePerformanceMetrics>();\n+      for (int i = 0; i < 15; i++) {\n+        CAS cas = uimaAsEngine.getCAS();\n+        cas.setDocumentText(\"Some Text\");\n+        System.out.println(\"UIMA AS Client Sending CAS#\" + (i + 1) + \" Request to a Service\");\n+        try {\n+          uimaAsEngine.sendAndReceiveCAS(cas,componentMetricsList);\n+          System.out.println(\"-------> Client Received Performance Metrics of Size:\"+componentMetricsList.size());\n+        } catch( Exception e) {\n+          errorCount++;\n+        } finally {\n+          cas.release();\n+          componentMetricsList.clear();\n+        }\n+      }\n+      uimaAsEngine.stop();\n+  }\n   public void testMultipleSyncClientsWithMultipleBrokers() throws Exception  {\n \t    System.out.println(\"-------------- testMultipleSyncClientsWithMultipleBrokers -------------\");\n \t    \n@@ -174,58 +358,6 @@ public void run() {\n \t    broker.stop();\n \t}\n   \n-  /**\n-   * Tests service quiesce and stop support. This test sets a CasPool to 1 to send just one CAS at a\n-   * time. After the first CAS is sent, a thread is started with a timer to expire before the reply\n-   * is received. When the timer expires, the client initiates quiesceAndStop on the top level\n-   * controller. As part of this, the top level controller stops its listeners on the input queue\n-   * (GetMeta and Process Listeners), and registers a callback with the InProcess cache. When the\n-   * cache is empty, meaning all CASes are processed, the cache notifies the controller which then\n-   * begins the service shutdown. Meanwhile, the client receives a reply for the first CAS, and\n-   * sends a second CAS. This CAS, will remain in the queue as the service has previously stopped\n-   * its listeners. The client times out after 10 seconds and shuts down.\n-   * \n-   * @throws Exception\n-   */\n-  public void testQuiesceAndStop() throws Exception {\n-    System.out.println(\"-------------- testQuiesceAndStop -------------\");\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n-            \"TopLevelTaeQueue\");\n-    // Set an explicit process timeout so to test the ping on timeout\n-    appCtx.put(UimaAsynchronousEngine.Timeout, 10000);\n-    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n-    appCtx.put(UimaAsynchronousEngine.CasPoolSize, 1);\n-    String containers[] = new String[2];\n-    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    containers[1] =  deployService(eeUimaEngine, relativePath\n-            + \"/Deploy_AggregateAnnotatorWithInternalCM1000Docs.xml\");\n-    spinShutdownThread(eeUimaEngine, 5000, containers, SpringContainerDeployer.QUIESCE_AND_STOP);\n-    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n-            \"TopLevelTaeQueue\", 3, EXCEPTION_LATCH);\n-    eeUimaEngine.stop();\n-  }\n-\n-  public void testStopNow() throws Exception {\n-    System.out.println(\"-------------- testAggregateWithFailedRemoteDelegate -------------\");\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    String containers[] = new String[2];\n-\n-    containers[0] = deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    containers[1] = deployService(eeUimaEngine, relativePath\n-            + \"/Deploy_AggregateAnnotatorWithInternalCM1000Docs.xml\");\n-    Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n-            \"TopLevelTaeQueue\");\n-    // Set an explicit process timeout so to test the ping on timeout\n-    appCtx.put(UimaAsynchronousEngine.Timeout, 4000);\n-    appCtx.put(UimaAsynchronousEngine.GetMetaTimeout, 300);\n-    spinShutdownThread(eeUimaEngine, 3000, containers, SpringContainerDeployer.STOP_NOW);\n-    //  send may fail since we forcefully stop the service. Tolerate\n-    //  ResourceProcessException\n-    addExceptionToignore(ResourceProcessException.class); \n-    runTest(appCtx, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()),\n-            \"TopLevelTaeQueue\", 10, EXCEPTION_LATCH);\n-  }\n   public void testAggregateHttpTunnelling() throws Exception {\n     System.out.println(\"-------------- testAggregateHttpTunnelling -------------\");\n     // Create Uima EE Client",
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "sha": "8371429c40203c6842c0aac2c71810c54e2bad43",
                "status": "modified"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/deployment/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/resources/deployment/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558",
                "deletions": 0,
                "filename": "uimaj-as-activemq/src/test/resources/deployment/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml",
                "patch": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+  <!--\n+   ***************************************************************\n+   * Licensed to the Apache Software Foundation (ASF) under one\n+   * or more contributor license agreements.  See the NOTICE file\n+   * distributed with this work for additional information\n+   * regarding copyright ownership.  The ASF licenses this file\n+   * to you under the Apache License, Version 2.0 (the\n+   * \"License\"); you may not use this file except in compliance\n+   * with the License.  You may obtain a copy of the License at\n+         *\n+   *   http://www.apache.org/licenses/LICENSE-2.0\n+   * \n+   * Unless required by applicable law or agreed to in writing,\n+   * software distributed under the License is distributed on an\n+   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+   * KIND, either express or implied.  See the License for the\n+   * specific language governing permissions and limitations\n+   * under the License.\n+   ***************************************************************\n+   -->\n+\n+<analysisEngineDeploymentDescription xmlns=\"http://uima.apache.org/resourceSpecifier\">\n+  \n+  <name>Top Level TAE</name>\n+  <description></description>\n+  \n+  <deployment protocol=\"jms\" provider=\"activemq\">\n+    <casPool numberOfCASes=\"5\"/>\n+    <service>\n+      <inputQueue endpoint=\"TopLevelTaeQueue\" brokerURL=\"${DefaultBrokerURL}\" prefetch=\"1\"/>\n+      <topDescriptor>\n+        <import location=\"../descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml\"/>\n+      </topDescriptor>\n+      <analysisEngine>\n+        <delegates>\n+        \n+          <analysisEngine key=\"TestMultiplier\">\n+\t        <casMultiplier poolSize=\"5\"/> \n+          </analysisEngine>\n+\n+          <remoteAnalysisEngine key=\"NoOp\" remoteReplyQueueScaleout=\"3\">\n+\t                  <inputQueue endpoint=\"NoOpAnnotatorQueue\" brokerURL=\"${DefaultBrokerURL}\"/>\n+\t                  <serializer method=\"xmi\"/>\n+                      <asyncAggregateErrorConfiguration>\n+                            <getMetadataErrors maxRetries=\"3\" timeout=\"0\" errorAction=\"continue\" />\n+                            <processCasErrors maxRetries=\"0\" timeout=\"0\" thresholdCount=\"0\" thresholdAction=\"continue\" />\n+                      </asyncAggregateErrorConfiguration>\n+          </remoteAnalysisEngine>\n+\n+        </delegates>\n+      </analysisEngine>\n+    </service>\n+  </deployment>\n+  \n+</analysisEngineDeploymentDescription>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/deployment/Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml",
                "sha": "8ace35352b46296ddd7e4384c7608571c2f86a54",
                "status": "added"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/resources/descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558",
                "deletions": 0,
                "filename": "uimaj-as-activemq/src/test/resources/descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml",
                "patch": "@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+\t<!--\n+\t ***************************************************************\n+\t * Licensed to the Apache Software Foundation (ASF) under one\n+\t * or more contributor license agreements.  See the NOTICE file\n+\t * distributed with this work for additional information\n+\t * regarding copyright ownership.  The ASF licenses this file\n+\t * to you under the Apache License, Version 2.0 (the\n+\t * \"License\"); you may not use this file except in compliance\n+\t * with the License.  You may obtain a copy of the License at\n+         *\n+\t *   http://www.apache.org/licenses/LICENSE-2.0\n+\t * \n+\t * Unless required by applicable law or agreed to in writing,\n+\t * software distributed under the License is distributed on an\n+\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+\t * KIND, either express or implied.  See the License for the\n+\t * specific language governing permissions and limitations\n+\t * under the License.\n+\t ***************************************************************\n+   -->\n+   \n+<analysisEngineDescription xmlns=\"http://uima.apache.org/resourceSpecifier\">\n+  <frameworkImplementation>org.apache.uima.java</frameworkImplementation>\n+  <primitive>false</primitive>\n+  <delegateAnalysisEngineSpecifiers>\n+    \n+    <delegateAnalysisEngine key=\"TestMultiplier\">\n+      <import location=\"../multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml\"/>\n+    </delegateAnalysisEngine>\n+\n+\n+      <delegateAnalysisEngine key=\"NoOp\">\n+      <import location=\"NoOpAnnotator.xml\"/>\n+    </delegateAnalysisEngine>\n+  \n+  </delegateAnalysisEngineSpecifiers>\n+  <analysisEngineMetaData>\n+    <name>Test Aggregate TAE</name>\n+    <description>Detects Nothing</description>\n+    <configurationParameters/>\n+    <configurationParameterSettings/>\n+    <flowConstraints>\n+      <fixedFlow>\n+      \n+        <node>TestMultiplier</node>\n+        <node>NoOp</node> \n+      </fixedFlow>\n+    </flowConstraints>\n+    <capabilities>\n+      <capability>\n+        <inputs/>\n+        <outputs>\n+        </outputs>\n+        <languagesSupported>\n+          <language>en</language>\n+        </languagesSupported>\n+      </capability>\n+    </capabilities>\n+\t<operationalProperties>\n+\t\t<modifiesCas>true</modifiesCas>\n+\t\t<multipleDeploymentAllowed>true</multipleDeploymentAllowed>\n+\t\t<outputsNewCASes>true</outputsNewCASes>\n+\t</operationalProperties>\n+  </analysisEngineMetaData>\n+</analysisEngineDescription>",
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/descriptors/analysis_engine/SimpleTestAggregateWithFailingCasMultiplier.xml",
                "sha": "e211401b5d2be8a213dd927582fde5ab398e9729",
                "status": "added"
            },
            {
                "additions": 125,
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/descriptors/multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/resources/descriptors/multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558",
                "deletions": 0,
                "filename": "uimaj-as-activemq/src/test/resources/descriptors/multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml",
                "patch": "@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+  <!--\n+   ***************************************************************\n+   * Licensed to the Apache Software Foundation (ASF) under one\n+   * or more contributor license agreements.  See the NOTICE file\n+   * distributed with this work for additional information\n+   * regarding copyright ownership.  The ASF licenses this file\n+   * to you under the Apache License, Version 2.0 (the\n+   * \"License\"); you may not use this file except in compliance\n+   * with the License.  You may obtain a copy of the License at\n+         *\n+   *   http://www.apache.org/licenses/LICENSE-2.0\n+   * \n+   * Unless required by applicable law or agreed to in writing,\n+   * software distributed under the License is distributed on an\n+   * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+   * KIND, either express or implied.  See the License for the\n+   * specific language governing permissions and limitations\n+   * under the License.\n+   ***************************************************************\n+   -->\n+<analysisEngineDescription xmlns=\"http://uima.apache.org/resourceSpecifier\">\n+  <frameworkImplementation>org.apache.uima.java</frameworkImplementation>\n+  <primitive>true</primitive>\n+  <annotatorImplementationName>org.apache.uima.ae.multiplier.SimpleCasGenerator</annotatorImplementationName>\n+  <analysisEngineMetaData>\n+    <name>Simple Text Segmenter</name>\n+    <description>Generates specified number of CASes.</description>\n+    <version>1.0</version>\n+    <vendor>The Apache Software Foundation</vendor>\n+    <configurationParameters>\n+      <configurationParameter>\n+        <name>NumberToGenerate</name>\n+        <description>Approximate number of CASes to create.</description>\n+        <type>Integer</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+      <configurationParameter>\n+        <name>DocumentNumberToFailOn</name>\n+        <description>Forces failure on specified document</description>\n+        <type>Integer</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+      \n+      \n+      <configurationParameter>\n+        <name>StringOne</name>\n+        <description>document text</description>\n+        <type>String</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+      <configurationParameter>\n+        <name>StringTwo</name>\n+        <description>document text</description>\n+        <type>String</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+    \n+    \n+      <configurationParameter>\n+        <name>InputFile</name>\n+        <description>document text</description>\n+        <type>String</type>\n+        <multiValued>false</multiValued>\n+        <mandatory>true</mandatory>\n+      </configurationParameter>\n+    \n+    \n+    \n+    \n+    </configurationParameters>\n+    <configurationParameterSettings>\n+      <nameValuePair>\n+        <name>NumberToGenerate</name>\n+        <value>\n+          <integer>100</integer>\n+        </value>\n+      </nameValuePair>\n+      <nameValuePair>\n+        <name>DocumentNumberToFailOn</name>\n+        <value>\n+          <integer>10</integer>\n+        </value>\n+      </nameValuePair>\n+      <nameValuePair>\n+        <name>StringOne</name>\n+        <value>\n+          <string>Upcoming UIMA Seminars      April 7, 2004 Distillery Lunch Seminar   UIMA and its Metadata   12:00PM-1:00PM in HAW GN-K35.       Dave Ferrucci will give a UIMA overview and discuss the types of component metadata that UIMA components provide.  Jon Lenchner will give a demo of the Text Analysis Engine configurator tool.         April 16, 2004 KM &amp; I Department Tea    Title: An Eclipse-based TAE Configurator Tool   3:00PM-4:30PM in HAW GN-K35 .      Jon Lenchner will demo an Eclipse plugin for configuring TAE descriptors, which will be available soon for you to use.  No more editing XML descriptors by hand!         May 11, 2004 UIMA Tutorial    9:00AM-5:00PM in HAW GN-K35.      This is a full-day, hands-on tutorial on UIMA, covering the development of Text Analysis Engines and Collection Processing Engines, as well as how to include these components in your own applications.   </string>\n+        </value>\n+      </nameValuePair>\n+      <nameValuePair>\n+        <name>StringTwo</name>\n+        <value>\n+          <string>UIMA Summer School      August 26, 2003   UIMA 101 - The New UIMA Introduction    (Hands-on Tutorial)   9:00AM-5:00PM in HAW GN-K35      August 28, 2003   FROST Tutorial   9:00AM-5:00PM in HAW GN-K35      September 15, 2003   UIMA 201: UIMA Advanced Topics    (Hands-on Tutorial)   9:00AM-5:00PM in HAW 1S-F53      September 17, 2003   The UIMA System Integration Test and Hardening Service   The \"SITH\"   3:00PM-4:30PM in HAW GN-K35            UIMA Summer School Tutorial and Presentation Details   UIMA 101: The new UIMA tutorial     Tuesday August 26 9:00AM - 4:30PM in GN-K35      UIMA 101 is a hands-on programming tutorial.      UIMA 101 is intended for people who want a first introductory course to UIMA or for people who would like a refresher.      The tutorial covers the same concepts in the first UIMA tutorial given in 3Q 2002 except for some key updates:      1) It uses a new interface to the CAS that makes it more natural to access and update CAS feature structures using ordinary Java objects (i.e., the JCAS) and   2) It uses updated TAE interfaces that give the application developer more control over managing multiple CASs.       Please NOTE expert users of UIMA can skip this one and should consider attending the Advanced Topics tutorial.      Prerequisites for the UIMA 101 Tutorial   1) Java Programming   2) Some experience with Eclipse IDE helpful      FROST Tutorial   August 28  9:00AM - 5:00PM  in GN-K35      Visitors from the FROST team will be here to talk to us about FROST.      UIMA 201: The UIMA Advanced Topics Tutorial   September 15:   9:00AM - 5:30PM in Hawthorne 1S-F53      UIMA 201 will introduce some new UIMA concepts and walk the student through hands-on examples.      The advanced topics tutorial is designed for people who have some experience with UIMA and want    to use new capabilities of UIMA 1.0 to address one or more of the following    Advanced Topics:      1) Collection Processing and Collection Processing Engines (CPEs)   2) Multi-Threading and CAS Pooling   3) Using the UIMA adapter framework to integrate network TAEs with Java TAEs   4) A Semantic Search Application that brings it all together\t      Prerequisites for UIMA 201   1) UIMA 101 Tutorial OR Extensive UIMA Experience      The UIMA Integration Test bed Service (The \"SITH\")   September 17 3:00PM - 4:30PM in HAW GN-K35      We have developed the first version of the UIMA Integration Test bed service.      This service is being developed to help test, evaluate, certify and publish UIMA compliant components.      In this talk we will explain the service and what it is intended to provide the UIMA community. We will address the following topics:      1. SITH Services   2. How to submit components and what to expect in return   3. Overview of the test bed implementation using Collection Processing UIMA and Juru.    4. Next Steps for the SITH         </string>\n+        </value>\n+      </nameValuePair>\n+    \n+      <nameValuePair>\n+        <name>InputFile</name>\n+        <value>\n+        <string>data/IBM_LifeSciences.xml</string>\n+          <!-- <string>c:/new-nt.xml</string>  -->\n+        </value>\n+      </nameValuePair>\n+    \n+    </configurationParameterSettings>\n+    <typeSystemDescription/>\n+    <capabilities>\n+      <capability>\n+        <inputs/>\n+        <outputs/>\n+        <languagesSupported/>\n+      </capability>\n+    </capabilities>\n+    <operationalProperties>\n+      <modifiesCas>false</modifiesCas>\n+      <multipleDeploymentAllowed>true</multipleDeploymentAllowed>\n+      <outputsNewCASes>true</outputsNewCASes>\n+    </operationalProperties>\n+  </analysisEngineMetaData>\n+</analysisEngineDescription>",
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-activemq/src/test/resources/descriptors/multiplier/SimpleCasGeneratorWithFailureOnNthDocument.xml",
                "sha": "36ac3508539130c445fd4b8a688df1b749868bdf",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558",
                "deletions": 4,
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "patch": "@@ -1269,14 +1269,14 @@ private void simpleStep(SimpleStep aStep, String aCasReferenceId)// throws Async\n           CAS cas = cacheEntry.getCas();\n           logCasForEndpoint(analysisEngineKey, cas);\n         }\n-\n+        Delegate delegate = lookupDelegate(analysisEngineKey);\n+        casStateEntry.setLastDelegate(delegate);\n         if (endpoint.isCasMultiplier()) {\n-          Delegate delegateCM = lookupDelegate(analysisEngineKey);\n-          delegateCM.setGeneratingChildrenFrom(aCasReferenceId, true);\n+          delegate.setGeneratingChildrenFrom(aCasReferenceId, true);\n           // Record the outgoing CAS. CASes destined for remote CM are recorded\n           // in JmsOutputchannel.\n           if (!endpoint.isRemote()) {\n-            delegateCM.addNewCasToOutstandingList(aCasReferenceId, true);\n+            delegate.addNewCasToOutstandingList(aCasReferenceId, true);\n           }\n         }\n ",
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/AggregateAnalysisEngineController_impl.java",
                "sha": "d2fd5c3b7ad162a881f46d18cb4bca1efdcaa65d",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/uima-as/blob/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java?ref=42c949b522a95df599c19dcb0c0318c4c7ea4558",
                "deletions": 28,
                "filename": "uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java",
                "patch": "@@ -1781,6 +1781,29 @@ public void stop(Throwable cause, String aCasReferenceId, boolean shutdownNow )\n     if (!isStopped()) {\n       setStopped();\n     }\n+    /*\n+     * Send an exception to the client if this is a top level service\n+     */\n+    if (cause != null && aCasReferenceId != null && getOutputChannel() != null\n+            && isTopLevelComponent()) {\n+      Endpoint clientEndpoint = null;\n+      if ((clientEndpoint = getClientEndpoint()) != null) {\n+        try {\n+          getOutputChannel().sendReply(cause, aCasReferenceId, null, clientEndpoint,\n+                  clientEndpoint.getCommand());\n+        } catch (Exception e) {\n+          if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n+            UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(),\n+                    \"stop\", UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE,\n+                    \"UIMAEE_service_exception_WARNING\", getComponentName());\n+\n+            UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(), \"stop\",\n+                    UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAEE_exception__WARNING\",\n+                   e);\n+          }\n+        }\n+      }\n+    }\n \n     if (daemonServiceExecutor != null) {\n       daemonServiceExecutor.shutdown();\n@@ -1821,35 +1844,20 @@ public void stop(Throwable cause, String aCasReferenceId, boolean shutdownNow )\n     }\n     // Stops internal transport used to communicate with colocated services\n     stopTransportLayer();\n-    /*\n-     * Commented this block. It generates ShutdownException which causes problems The shutdown of\n-     * services happens ad hoc and not orderly. This whole logic needs to be revisited.\n-     * \n-     * // Send an exception to the client if this is a top level service\n-     */\n-    if (cause != null && aCasReferenceId != null && getOutputChannel() != null\n-            && isTopLevelComponent()) {\n-\n-      Endpoint clientEndpoint = null;\n-      if ((clientEndpoint = getClientEndpoint()) != null) {\n-        try {\n-          getOutputChannel().sendReply(cause, aCasReferenceId, null, clientEndpoint,\n-                  clientEndpoint.getCommand());\n-        } catch (Exception e) {\n-          if (UIMAFramework.getLogger(CLASS_NAME).isLoggable(Level.WARNING)) {\n-            UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(),\n-                    \"stop\", UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE,\n-                    \"UIMAEE_service_exception_WARNING\", getComponentName());\n-\n-            UIMAFramework.getLogger(CLASS_NAME).logrb(Level.WARNING, CLASS_NAME.getName(), \"stop\",\n-                    UIMAEE_Constants.JMS_LOG_RESOURCE_BUNDLE, \"UIMAEE_exception__WARNING\",\n-                   e);\n-          }\n-        }\n-      }\n-    }\n+    for (Iterator it = getLocalCache().entrySet().iterator(); it.hasNext();) {\n+       Map.Entry entry = (Map.Entry) it.next();\n+       CasStateEntry casStateEntry = (CasStateEntry) entry.getValue();\n+       if ( casStateEntry.isSubordinate() ) {\n+         try {\n+           getInProcessCache().getCacheEntryForCAS(casStateEntry.getCasReferenceId()).getCas().release();\n+         } catch( Exception e) {\n+           \n+         }\n+       }\n+    }   \n+    \n     getInProcessCache().releaseAllCASes();\n-\n+    getLocalCache().clear();\n     releasedAllCASes = true;\n     if (!isTopLevelComponent()) {\n       adminContext = null;",
                "raw_url": "https://github.com/apache/uima-as/raw/42c949b522a95df599c19dcb0c0318c4c7ea4558/uimaj-as-core/src/main/java/org/apache/uima/aae/controller/BaseAnalysisEngineController.java",
                "sha": "99125207b37e0e7b0eb9d3fe2bf35a3e236c98b7",
                "status": "modified"
            }
        ],
        "message": "UIMA-2324 Fixes NPE while recovering from CM failure. Added new testcase\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1229564 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-as/commit/d06d5adf7cc459bc343aca9157ef68f801bf2d8c",
        "patched_files": [
            "BaseAnalysisEngineController.java",
            "Deploy_AggregateAnnotatorWithFailingCollocatedCM.xml",
            "AggregateAnalysisEngineController_impl.java",
            "SimpleCasGeneratorWithFailureOnNthDocument.xml",
            "SimpleCasGenerator.java",
            "SimpleTestAggregateWithFailingCasMultiplier.xml"
        ],
        "repo": "uima-as",
        "unit_tests": [
            "TestUimaASExtended.java"
        ]
    },
    "uima-as_5bdb2be": {
        "bug_id": "uima-as_5bdb2be",
        "commit": "https://github.com/apache/uima-as/commit/5bdb2bef20b8236a404bafbdc857768fc554a9f5",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/uima-as/blob/5bdb2bef20b8236a404bafbdc857768fc554a9f5/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java?ref=5bdb2bef20b8236a404bafbdc857768fc554a9f5",
                "deletions": 0,
                "filename": "uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "patch": "@@ -1717,6 +1717,7 @@ public void testAsyncClientRecoveryFromBrokerStopAndRestart() throws Exception\n    * @throws Exception\n    */\n \n+  /*\n   @Test\n   public void testMultipleClientsRecoveryFromBrokerStopAndRestart() throws Exception  {\n     System.out.println(\"-------------- testMultipleClientsRecoveryFromBrokerStopAndRestart -------------\");\n@@ -1800,6 +1801,7 @@ public void testMultipleClientsRecoveryFromBrokerStopAndRestart() throws Excepti\n       broker2.waitUntilStopped();\n \n   }\n+  */\n   /**\n    * Tests ability of an aggregate to recover from a Broker restart. The broker managing\n    * delegate's input queue is stopped after 1st CAS is fully processed. As part of error",
                "raw_url": "https://github.com/apache/uima-as/raw/5bdb2bef20b8236a404bafbdc857768fc554a9f5/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "sha": "42713ac95b9a98a1c669b77a64924b1cabfca677",
                "status": "modified"
            }
        ],
        "message": "UIMA-5703 fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/uima-as/trunk@1821015 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-as/commit/d0b6b3d3850d79b35f7f7809997ab44183e0ff97",
        "patched_files": [],
        "repo": "uima-as",
        "unit_tests": [
            "TestUimaASExtended.java"
        ]
    },
    "uima-as_6c15926": {
        "bug_id": "uima-as_6c15926",
        "commit": "https://github.com/apache/uima-as/commit/6c15926c64eb63930af6613e68019babfc9e266d",
        "file": [
            {
                "additions": 197,
                "blob_url": "https://github.com/apache/uima-as/blob/6c15926c64eb63930af6613e68019babfc9e266d/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "changes": 300,
                "contents_url": "https://api.github.com/repos/apache/uima-as/contents/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java?ref=6c15926c64eb63930af6613e68019babfc9e266d",
                "deletions": 103,
                "filename": "uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "patch": "@@ -89,15 +89,109 @@ public void testBrokerLifecycle() {\n             + System.getProperty(\"file.separator\") + \"bin\" + System.getProperty(\"file.separator\")\n             + \"dd2spring.xsl\");\n   }\n+  public void testAggregateHttpTunnelling() throws Exception {\n+    System.out.println(\"-------------- testAggregateHttpTunnelling -------------\");\n+    String httpURI = getHttpURI();\n+    // Create Uima EE Client\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    // Deploy remote service\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    // Deploy top level aggregate that communicates with the remote via Http Tunnelling\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotatorWithHttpDelegate.xml\");\n+\n+    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+    runTest(null, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()), \"TopLevelTaeQueue\",\n+            10, CPC_LATCH);\n+  }\n+  public void testClientHttpTunnellingToAggregate() throws Exception {\n+    System.out.println(\"-------------- testClientHttpTunnellingToAggregate -------------\");\n+    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+    // available the test fails\n+    String httpURI = getHttpURI();\n+    // Create Uima EE Client\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    // Deploy remote service\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotator.xml\");\n+    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+    System.out.println(\"-------- Connecting Client To Service: \"+httpURI);\n+    runTest(null, eeUimaEngine, httpURI, \"TopLevelTaeQueue\", 1, CPC_LATCH);\n+  }\n+  public void testClientHttpTunnelling() throws Exception {\n+    System.out.println(\"-------------- testClientHttpTunnelling -------------\");\n+    String httpURI = getHttpURI();\n+    // Create Uima EE Client\n+    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+    // Deploy remote service\n+    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+    System.out.println(\"-------- Connecting Client To Service: \"+httpURI);\n+    runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, PROCESS_LATCH);\n+  }\n+\n+\n+  public void testClientHttpTunnellingWithDoubleByteText() throws Exception {\n+    System.out.println(\"-------------- testClientHttpTunnellingWithDoubleByteText -------------\");\n+\n+    BufferedReader in = null;\n+    try {\n+      File file = new File(relativeDataPath + \"/DoubleByteText.txt\");\n+      System.out.println(\"Checking for existence of File:\" + file.getAbsolutePath());\n+      // Process only if the file exists\n+      if (file.exists()) {\n+        System.out\n+                .println(\" *** DoubleByteText.txt exists and will be sent through http connector.\");\n+        System.out.println(\" ***   If the vanilla activemq release is being used,\");\n+        System.out\n+                .println(\" ***   and DoubleByteText.txt is bigger than 64KB or so, this test case will hang.\");\n+        System.out\n+                .println(\" *** To fix, override the classpath with the jar files in and under the\");\n+        System.out\n+                .println(\" ***   apache-uima-as/uima-as-distr/src/main/apache-activemq-X.y.z directory\");\n+        System.out.println(\" ***   in the apache-uima-as source distribution.\");\n+\n+        String httpURI = getHttpURI();\n+      // Create Uima EE Client\n+        BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+        // Deploy remote service\n+        deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+\n+        InputStream fis = new FileInputStream(file);\n+        Reader rd = new InputStreamReader(fis, \"UTF-8\");\n+        in = new BufferedReader(rd);\n+        // Set the double-byte text. This is what will be sent to the service\n+        String line = in.readLine();\n+        super.setDoubleByteText(line);\n+        int err = XMLUtils.checkForNonXmlCharacters(line);\n+        if (err >= 0) {\n+          fail(\"Illegal XML char at offset \" + err);\n+        }\n+        System.out.println(\"-------- Connecting Client To Service: \"+httpURI);\n+        // Initialize and run the Test. Wait for a completion and cleanup resources.\n+        runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n+      }\n+    } catch (Exception e) {\n+      // Double-Byte Text file not present. Continue on with the next test\n+      e.printStackTrace();\n+      fail(\"Could not complete test\");\n+    } finally {\n+      if (in != null) {\n+        in.close();\n+      }\n+    }\n+  }\n+\n \n   public void testClientProcess() throws Exception {\n     System.out.println(\"-------------- testClientProcess -------------\");\n+    \n     // Instantiate Uima AS Client\n     BaseUIMAAsynchronousEngine_impl uimaAsEngine = new BaseUIMAAsynchronousEngine_impl();\n     // Deploy Uima AS Primitive Service\n     deployService(uimaAsEngine, relativePath + \"/Deploy_PersonTitleAnnotator.xml\");\n     Map<String, Object> appCtx = buildContext(String.valueOf(broker.getMasterConnectorURI()),\n             \"PersonTitleAnnotatorQueue\");\n+\n     initialize(uimaAsEngine, appCtx);\n     waitUntilInitialized();\n \n@@ -1485,109 +1579,109 @@ public void testPrimitiveShutdownOnTooManyErrors() throws Exception {\n             1, CPC_LATCH);\n   }\n \n-  public void testClientHttpTunnelling() throws Exception {\n-    System.out.println(\"-------------- testClientHttpTunnelling -------------\");\n-    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n-    // available the test fails\n-    String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n-    // Create Uima EE Client\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    // Deploy remote service\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    // Initialize and run the Test. Wait for a completion and cleanup resources.\n-    runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n-    // Remove the HTTP Connector\n-    removeHttpConnector();\n-  }\n-\n-  public void testClientHttpTunnellingToAggregate() throws Exception {\n-    System.out.println(\"-------------- testClientHttpTunnellingToAggregate -------------\");\n-    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n-    // available the test fails\n-    String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n-    // Create Uima EE Client\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    // Deploy remote service\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotator.xml\");\n-    // Initialize and run the Test. Wait for a completion and cleanup resources.\n-    runTest(null, eeUimaEngine, httpURI, \"TopLevelTaeQueue\", 1, CPC_LATCH);\n-    // Remove the HTTP Connector\n-    removeHttpConnector();\n-  }\n-\n-  public void testClientHttpTunnellingWithDoubleByteText() throws Exception {\n-    System.out.println(\"-------------- testClientHttpTunnellingWithDoubleByteText -------------\");\n-\n-    BufferedReader in = null;\n-    try {\n-      File file = new File(relativeDataPath + \"/DoubleByteText.txt\");\n-      System.out.println(\"Checking for existence of File:\" + file.getAbsolutePath());\n-      // Process only if the file exists\n-      if (file.exists()) {\n-        System.out\n-                .println(\" *** DoubleByteText.txt exists and will be sent through http connector.\");\n-        System.out.println(\" ***   If the vanilla activemq release is being used,\");\n-        System.out\n-                .println(\" ***   and DoubleByteText.txt is bigger than 64KB or so, this test case will hang.\");\n-        System.out\n-                .println(\" *** To fix, override the classpath with the jar files in and under the\");\n-        System.out\n-                .println(\" ***   apache-uima-as/uima-as-distr/src/main/apache-activemq-X.y.z directory\");\n-        System.out.println(\" ***   in the apache-uima-as source distribution.\");\n-\n-        // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n-        // available the test fails\n-        String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n-        // Create Uima EE Client\n-        BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-        // Deploy remote service\n-        deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-\n-        InputStream fis = new FileInputStream(file);\n-        Reader rd = new InputStreamReader(fis, \"UTF-8\");\n-        in = new BufferedReader(rd);\n-        // Set the double-byte text. This is what will be sent to the service\n-        String line = in.readLine();\n-        super.setDoubleByteText(line);\n-        int err = XMLUtils.checkForNonXmlCharacters(line);\n-        if (err >= 0) {\n-          fail(\"Illegal XML char at offset \" + err);\n-        }\n-        // Initialize and run the Test. Wait for a completion and cleanup resources.\n-        runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n-      }\n-    } catch (Exception e) {\n-      // Double-Byte Text file not present. Continue on with the next test\n-      e.printStackTrace();\n-      fail(\"Could not complete test\");\n-    } finally {\n-      if (in != null) {\n-        in.close();\n-      }\n-      // Remove the HTTP Connector\n-      removeHttpConnector();\n-    }\n-  }\n-\n-  public void testAggregateHttpTunnelling() throws Exception {\n-    System.out.println(\"-------------- testAggregateHttpTunnelling -------------\");\n-    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n-    // available the test fails\n-    addHttpConnector(DEFAULT_HTTP_PORT);\n-    // Create Uima EE Client\n-    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n-    // Deploy remote service\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n-    // Deploy top level aggregate that communicates with the remote via Http Tunnelling\n-    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotatorWithHttpDelegate.xml\");\n-\n-    // Initialize and run the Test. Wait for a completion and cleanup resources.\n-    runTest(null, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()), \"TopLevelTaeQueue\",\n-            10, CPC_LATCH);\n-    // Remove the HTTP Connector\n-    removeHttpConnector();\n-  }\n+//  public void testClientHttpTunnelling() throws Exception {\n+//    System.out.println(\"-------------- testClientHttpTunnelling -------------\");\n+//    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+//    // available the test fails\n+//    String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n+//    // Create Uima EE Client\n+//    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+//    // Deploy remote service\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+//    runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n+//    // Remove the HTTP Connector\n+//    removeHttpConnector();\n+//  }\n+//\n+//  public void testClientHttpTunnellingToAggregate() throws Exception {\n+//    System.out.println(\"-------------- testClientHttpTunnellingToAggregate -------------\");\n+//    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+//    // available the test fails\n+//    String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n+//    // Create Uima EE Client\n+//    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+//    // Deploy remote service\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotator.xml\");\n+//    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+//    runTest(null, eeUimaEngine, httpURI, \"TopLevelTaeQueue\", 1, CPC_LATCH);\n+//    // Remove the HTTP Connector\n+//    removeHttpConnector();\n+//  }\n+//\n+//  public void testClientHttpTunnellingWithDoubleByteText() throws Exception {\n+//    System.out.println(\"-------------- testClientHttpTunnellingWithDoubleByteText -------------\");\n+//\n+//    BufferedReader in = null;\n+//    try {\n+//      File file = new File(relativeDataPath + \"/DoubleByteText.txt\");\n+//      System.out.println(\"Checking for existence of File:\" + file.getAbsolutePath());\n+//      // Process only if the file exists\n+//      if (file.exists()) {\n+//        System.out\n+//                .println(\" *** DoubleByteText.txt exists and will be sent through http connector.\");\n+//        System.out.println(\" ***   If the vanilla activemq release is being used,\");\n+//        System.out\n+//                .println(\" ***   and DoubleByteText.txt is bigger than 64KB or so, this test case will hang.\");\n+//        System.out\n+//                .println(\" *** To fix, override the classpath with the jar files in and under the\");\n+//        System.out\n+//                .println(\" ***   apache-uima-as/uima-as-distr/src/main/apache-activemq-X.y.z directory\");\n+//        System.out.println(\" ***   in the apache-uima-as source distribution.\");\n+//\n+//        // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+//        // available the test fails\n+//        String httpURI = addHttpConnector(DEFAULT_HTTP_PORT);\n+//        // Create Uima EE Client\n+//        BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+//        // Deploy remote service\n+//        deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//\n+//        InputStream fis = new FileInputStream(file);\n+//        Reader rd = new InputStreamReader(fis, \"UTF-8\");\n+//        in = new BufferedReader(rd);\n+//        // Set the double-byte text. This is what will be sent to the service\n+//        String line = in.readLine();\n+//        super.setDoubleByteText(line);\n+//        int err = XMLUtils.checkForNonXmlCharacters(line);\n+//        if (err >= 0) {\n+//          fail(\"Illegal XML char at offset \" + err);\n+//        }\n+//        // Initialize and run the Test. Wait for a completion and cleanup resources.\n+//        runTest(null, eeUimaEngine, httpURI, \"NoOpAnnotatorQueue\", 1, CPC_LATCH);\n+//      }\n+//    } catch (Exception e) {\n+//      // Double-Byte Text file not present. Continue on with the next test\n+//      e.printStackTrace();\n+//      fail(\"Could not complete test\");\n+//    } finally {\n+//      if (in != null) {\n+//        in.close();\n+//      }\n+//      // Remove the HTTP Connector\n+//      removeHttpConnector();\n+//    }\n+//  }\n+//\n+//  public void testAggregateHttpTunnelling() throws Exception {\n+//    System.out.println(\"-------------- testAggregateHttpTunnelling -------------\");\n+//    // Add HTTP Connector to the broker. The connector will use port 8888. If this port is not\n+//    // available the test fails\n+//    addHttpConnector(DEFAULT_HTTP_PORT);\n+//    // Create Uima EE Client\n+//    BaseUIMAAsynchronousEngine_impl eeUimaEngine = new BaseUIMAAsynchronousEngine_impl();\n+//    // Deploy remote service\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_NoOpAnnotator.xml\");\n+//    // Deploy top level aggregate that communicates with the remote via Http Tunnelling\n+//    deployService(eeUimaEngine, relativePath + \"/Deploy_AggregateAnnotatorWithHttpDelegate.xml\");\n+//\n+//    // Initialize and run the Test. Wait for a completion and cleanup resources.\n+//    runTest(null, eeUimaEngine, String.valueOf(broker.getMasterConnectorURI()), \"TopLevelTaeQueue\",\n+//            10, CPC_LATCH);\n+//    // Remove the HTTP Connector\n+//    removeHttpConnector();\n+//  }\n \n   /**\n    * Tests exception thrown in the Uima EE Client when the Collection Reader is added after the uima",
                "raw_url": "https://github.com/apache/uima-as/raw/6c15926c64eb63930af6613e68019babfc9e266d/uimaj-as-activemq/src/test/java/org/apache/uima/ee/test/TestUimaASExtended.java",
                "sha": "932640069f128d635b36843dead84b826a825e74",
                "status": "modified"
            }
        ],
        "message": "UIMA-1565 Modified to use reflection to detect 5.2.x version of AMQ. In such case the HTTP Connector must be initialized with an instance of a Broker before it is started. Otherwise NPE occurs. Modified to start HTTP Connector when the broker starts.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/uima/uima-as/trunk@815398 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/uima-as/commit/c78d2c0a737fa34a13fc0dced79ead9c960a716f",
        "patched_files": [],
        "repo": "uima-as",
        "unit_tests": [
            "TestUimaASExtended.java"
        ]
    }
}