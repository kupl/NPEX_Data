{
    "wicket_40790b6": {
        "repo": "wicket",
        "message": "throw exception with message rather than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@535928 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/40790b6e424b74008247900402c80ce1201c0806",
        "parent": "https://github.com/apache/wicket/commit/e6f106f7abb5bc78aa1634ff57e212acdd9588c0",
        "bug_id": "wicket_40790b6",
        "file": [
            {
                "sha": "64eef4ce7670002f4dfccd1e0d74b67a7283e4a0",
                "filename": "jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "blob_url": "https://github.com/apache/wicket/blob/40790b6e424b74008247900402c80ce1201c0806/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "raw_url": "https://github.com/apache/wicket/raw/40790b6e424b74008247900402c80ce1201c0806/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java?ref=40790b6e424b74008247900402c80ce1201c0806",
                "patch": "@@ -81,11 +81,19 @@ public VelocityPanel(final String name, final IModel/* <Map> */model)\n \t */\n \tprivate Reader getTemplateReader()\n \t{\n-\t\tfinal String template = getTemplateResource().asString();\n+\t\tfinal IStringResourceStream resource = getTemplateResource();\n+\t\tif (resource == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"getTemplateResource must return a resource\");\n+\t\t}\n+\n+\t\tfinal String template = resource.asString();\n \t\tif (template != null)\n \t\t{\n \t\t\treturn new StringReader(template);\n \t\t}\n+\n \t\treturn null;\n \t}\n ",
                "deletions": 1
            }
        ],
        "patched_files": [
            "VelocityPanel.java"
        ],
        "unit_tests": [
            "VelocityPanelTest.java"
        ]
    },
    "wicket_e519c90": {
        "repo": "wicket",
        "message": "fixed (WICKET-697) FormTester crashes with NullPointerException, if FormComponent is not found\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@550715 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/e519c90e9c5243347f3b0b9c89be0c28e83c7239",
        "parent": "https://github.com/apache/wicket/commit/975462a13ac37bd2e56d85339d6be6fe763801dc",
        "bug_id": "wicket_e519c90",
        "file": [
            {
                "sha": "9bf28fcf0826c87f6ad93443abee2c8821096abe",
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java",
                "blob_url": "https://github.com/apache/wicket/blob/e519c90e9c5243347f3b0b9c89be0c28e83c7239/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java",
                "raw_url": "https://github.com/apache/wicket/raw/e519c90e9c5243347f3b0b9c89be0c28e83c7239/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/tester/FormTester.java?ref=e519c90e9c5243347f3b0b9c89be0c28e83c7239",
                "patch": "@@ -274,6 +274,11 @@ protected void assignValueToFormComponent(FormComponent formComponent, String va\n \t\t */\n \t\tprotected ChoiceSelector create(FormComponent formComponent)\n \t\t{\n+\t\t\tif (formComponent == null)\n+\t\t\t{\n+\t\t\t\tfail(\"Trying to select on null component.\");\n+\t\t\t}\n+\n \t\t\tif (formComponent instanceof RadioGroup || formComponent instanceof DropDownChoice\n \t\t\t\t\t|| formComponent instanceof RadioChoice)\n \t\t\t{",
                "deletions": 0
            }
        ],
        "patched_files": [
            "FormTester.java"
        ],
        "unit_tests": [
            "FormTesterTest.java"
        ]
    },
    "wicket_03078b2": {
        "repo": "wicket",
        "message": "WICKET-4818 NullPointerException while reading the POST parameters\n\nAdd a check that the parameter name and values are not null.",
        "commit": "https://github.com/apache/wicket/commit/03078b2231f0022c65e931f22cae6c1219ae2d06",
        "parent": "https://github.com/apache/wicket/commit/9ed74a4e21df8dff0398439a8c6e612f20d729df",
        "bug_id": "wicket_03078b2",
        "file": [
            {
                "sha": "9de1381780432cb0e0697b109338e0a2370587e8",
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java",
                "blob_url": "https://github.com/apache/wicket/blob/03078b2231f0022c65e931f22cae6c1219ae2d06/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java",
                "raw_url": "https://github.com/apache/wicket/raw/03078b2231f0022c65e931f22cae6c1219ae2d06/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java",
                "status": "modified",
                "changes": 53,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/servlet/ServletWebRequest.java?ref=03078b2231f0022c65e931f22cae6c1219ae2d06",
                "patch": "@@ -304,38 +304,41 @@ private static boolean isMultiPart(ServletRequest request)\n \t\t\tfinal String name = param.getKey();\n \t\t\tfinal String[] values = param.getValue();\n \n-\t\t\t// build a mutable list of query params that have the same name as the post param\n-\t\t\tList<StringValue> queryValues = queryParams.getParameterValues(name);\n-\t\t\tif (queryValues == null)\n+\t\t\tif (name != null && values != null)\n \t\t\t{\n-\t\t\t\tqueryValues = Collections.emptyList();\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tqueryValues = new ArrayList<StringValue>(queryValues);\n-\t\t\t}\n-\n-\t\t\t// the list that will contain accepted post param values\n-\t\t\tList<StringValue> postValues = new ArrayList<StringValue>();\n-\n-\t\t\tfor (String value : values)\n-\t\t\t{\n-\t\t\t\tStringValue val = StringValue.valueOf(value);\n-\t\t\t\tif (queryValues.contains(val))\n+\t\t\t\t// build a mutable list of query params that have the same name as the post param\n+\t\t\t\tList<StringValue> queryValues = queryParams.getParameterValues(name);\n+\t\t\t\tif (queryValues == null)\n \t\t\t\t{\n-\t\t\t\t\t// if a query param with this value exists remove it and continue\n-\t\t\t\t\tqueryValues.remove(val);\n+\t\t\t\t\tqueryValues = Collections.emptyList();\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\t\t// there is no query param with this value, assume post\n-\t\t\t\t\tpostValues.add(val);\n+\t\t\t\t\tqueryValues = new ArrayList<StringValue>(queryValues);\n \t\t\t\t}\n-\t\t\t}\n \n-\t\t\tif (!postValues.isEmpty())\n-\t\t\t{\n-\t\t\t\tpostParameters.put(name, postValues);\n+\t\t\t\t// the list that will contain accepted post param values\n+\t\t\t\tList<StringValue> postValues = new ArrayList<StringValue>();\n+\n+\t\t\t\tfor (String value : values)\n+\t\t\t\t{\n+\t\t\t\t\tStringValue val = StringValue.valueOf(value);\n+\t\t\t\t\tif (queryValues.contains(val))\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// if a query param with this value exists remove it and continue\n+\t\t\t\t\t\tqueryValues.remove(val);\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// there is no query param with this value, assume post\n+\t\t\t\t\t\tpostValues.add(val);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif (!postValues.isEmpty())\n+\t\t\t\t{\n+\t\t\t\t\tpostParameters.put(name, postValues);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn postParameters;",
                "deletions": 25
            }
        ],
        "patched_files": [
            "ServletWebRequest.java"
        ],
        "unit_tests": [
            "ServletWebRequestTest.java"
        ]
    },
    "wicket_823b30b": {
        "repo": "wicket",
        "message": "Fix a possible NullPointerException\n\nFix typo in javadoc.\nRemove useless javadoc.",
        "commit": "https://github.com/apache/wicket/commit/823b30b5f818630f9b75c70a564566e9af36c937",
        "parent": "https://github.com/apache/wicket/commit/41776c423ae6c018026430d32a8490492de038e8",
        "bug_id": "wicket_823b30b",
        "file": [
            {
                "sha": "ea03de989da252227382897f6fe90a05f3f37e08",
                "filename": "wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "blob_url": "https://github.com/apache/wicket/blob/823b30b5f818630f9b75c70a564566e9af36c937/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "raw_url": "https://github.com/apache/wicket/raw/823b30b5f818630f9b75c70a564566e9af36c937/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java",
                "status": "modified",
                "changes": 27,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/ConverterLocator.java?ref=823b30b5f818630f9b75c70a564566e9af36c937",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.wicket.util.convert.converter.SqlDateConverter;\n import org.apache.wicket.util.convert.converter.SqlTimeConverter;\n import org.apache.wicket.util.convert.converter.SqlTimestampConverter;\n+import org.apache.wicket.util.lang.Args;\n import org.apache.wicket.util.lang.Objects;\n \n \n@@ -58,7 +59,7 @@\n public class ConverterLocator implements IConverterLocator\n {\n \t/**\n-\t * CoverterLocator that is to be used when no registered converter is found.\n+\t * ConverterLocator that is to be used when no registered converter is found.\n \t * \n \t * @param <C>\n \t *            The object to convert from and to String\n@@ -79,10 +80,6 @@ private DefaultConverter(Class<C> type)\n \t\t\tthis.type = new WeakReference<>(type);\n \t\t}\n \n-\t\t/**\n-\t\t * @see org.apache.wicket.util.convert.IConverter#convertToObject(java.lang.String,\n-\t\t *      java.util.Locale)\n-\t\t */\n \t\t@Override\n \t\tpublic C convertToObject(String value, Locale locale)\n \t\t{\n@@ -108,7 +105,7 @@ public C convertToObject(String value, Locale locale)\n \t\t\t\t\treturn converted;\n \t\t\t\t}\n \n-\t\t\t\tif (theType.isInstance(value))\n+\t\t\t\tif (theType != null && theType.isInstance(value))\n \t\t\t\t{\n \t\t\t\t\treturn theType.cast(value);\n \t\t\t\t}\n@@ -122,10 +119,6 @@ public C convertToObject(String value, Locale locale)\n \t\t\t\ttheType.getName() + \". Could not find compatible converter.\").setSourceValue(value);\n \t\t}\n \n-\t\t/**\n-\t\t * @see org.apache.wicket.util.convert.IConverter#convertToString(java.lang.Object,\n-\t\t *      java.util.Locale)\n-\t\t */\n \t\t@Override\n \t\tpublic String convertToString(C value, Locale locale)\n \t\t{\n@@ -141,7 +134,7 @@ public String convertToString(C value, Locale locale)\n \t\t\tcatch (RuntimeException e)\n \t\t\t{\n \t\t\t\tthrow new ConversionException(\"Could not convert object of type: \" +\n-\t\t\t\t\tvalue.getClass() + \" to string. Possible its #toString() returned null. \" +\n+\t\t\t\t\tvalue.getClass() + \" to String. Possible its #toString() returned null. \" +\n \t\t\t\t\t\"Either install a custom converter (see IConverterLocator) or \" +\n \t\t\t\t\t\"override #toString() to return a non-null value.\", e).setSourceValue(value)\n \t\t\t\t\t.setConverter(this);\n@@ -224,7 +217,7 @@ public ConverterLocator()\n \t\tfinal IConverter<C> converter = get(type);\n \t\tif (converter == null)\n \t\t{\n-\t\t\treturn new DefaultConverter<C>(type);\n+\t\t\treturn new DefaultConverter<>(type);\n \t\t}\n \t\treturn converter;\n \t}\n@@ -254,14 +247,8 @@ public ConverterLocator()\n \t */\n \tpublic final IConverter<?> set(final Class<?> c, final IConverter<?> converter)\n \t{\n-\t\tif (converter == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"CoverterLocator cannot be null\");\n-\t\t}\n-\t\tif (c == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"Class cannot be null\");\n-\t\t}\n+\t\tArgs.notNull(c, \"Class\");\n+\t\tArgs.notNull(converter, \"converter\");\n \t\treturn classToConverter.put(c.getName(), converter);\n \t}\n }",
                "deletions": 20
            }
        ],
        "patched_files": [
            "ConverterLocator.java"
        ],
        "unit_tests": [
            "ConverterLocatorTest.java"
        ]
    },
    "wicket_bd61e91": {
        "repo": "wicket",
        "message": "backport of npe checks in webresponse\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@528855 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/bd61e915a12ed1690df182e6e8745d477396bd25",
        "parent": "https://github.com/apache/wicket/commit/25c519429533d73bba7f5b2ad45162ee32acae76",
        "bug_id": "wicket_bd61e91",
        "file": [
            {
                "sha": "b872c892497b18f8e02ae882dd7ade15af814530",
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java",
                "blob_url": "https://github.com/apache/wicket/blob/bd61e915a12ed1690df182e6e8745d477396bd25/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java",
                "raw_url": "https://github.com/apache/wicket/raw/bd61e915a12ed1690df182e6e8745d477396bd25/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java",
                "status": "modified",
                "changes": 46,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WebResponse.java?ref=bd61e915a12ed1690df182e6e8745d477396bd25",
                "patch": "@@ -82,7 +82,10 @@ public WebResponse(final HttpServletResponse httpServletResponse)\n \t */\n \tpublic void addCookie(final Cookie cookie)\n \t{\n-\t\tgetHttpServletResponse().addCookie(cookie);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.addCookie(cookie);\n+\t\t}\n \t}\n \n \t/**\n@@ -94,9 +97,12 @@ public void addCookie(final Cookie cookie)\n \t */\n \tpublic void clearCookie(final Cookie cookie)\n \t{\n-\t\tcookie.setMaxAge(0);\n-\t\tcookie.setValue(null);\n-\t\taddCookie(cookie);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\tcookie.setMaxAge(0);\n+\t\t\tcookie.setValue(null);\n+\t\t\taddCookie(cookie);\n+\t\t}\n \t}\n \n \t/**\n@@ -229,25 +235,34 @@ public void redirect(String url)\n \t */\n \tpublic final void setContentType(final String mimeType)\n \t{\n-\t\thttpServletResponse.setContentType(mimeType);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setContentType(mimeType);\n+\t\t}\n \t}\n \n \t/**\n \t * @see org.apache.wicket.Response#setContentLength(long)\n \t */\n \tpublic void setContentLength(long length)\n \t{\n-\t\thttpServletResponse.setContentLength((int)length);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setContentLength((int)length);\n+\t\t}\n \t}\n \n \t/**\n \t * @see org.apache.wicket.Response#setLastModifiedTime(org.apache.wicket.util.time.Time)\n \t */\n \tpublic void setLastModifiedTime(Time time)\n \t{\n-\t\tif (time != null && time.getMilliseconds() != -1)\n+\t\tif (httpServletResponse != null)\n \t\t{\n-\t\t\thttpServletResponse.setDateHeader(\"Last-Modified\", time.getMilliseconds());\n+\t\t\tif (time != null && time.getMilliseconds() != -1)\n+\t\t\t{\n+\t\t\t\thttpServletResponse.setDateHeader(\"Last-Modified\", time.getMilliseconds());\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -265,7 +280,10 @@ public void setLastModifiedTime(Time time)\n \t */\n \tpublic final void setLocale(final Locale locale)\n \t{\n-\t\thttpServletResponse.setLocale(locale);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setLocale(locale);\n+\t\t}\n \t}\n \n \t/**\n@@ -333,7 +351,10 @@ public void write(AppendingStringBuffer asb)\n \t */\n \tpublic void setDateHeader(String header, long date)\n \t{\n-\t\thttpServletResponse.setDateHeader(header, date);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setDateHeader(header, date);\n+\t\t}\n \t}\n \n \n@@ -345,7 +366,10 @@ public void setDateHeader(String header, long date)\n \t */\n \tpublic void setHeader(String header, String value)\n \t{\n-\t\thttpServletResponse.setHeader(header, value);\n+\t\tif (httpServletResponse != null)\n+\t\t{\n+\t\t\thttpServletResponse.setHeader(header, value);\n+\t\t}\n \t}\n \n \t/**",
                "deletions": 11
            }
        ],
        "patched_files": [
            "WebResponse.java"
        ],
        "unit_tests": [
            "WebResponseTest.java"
        ]
    },
    "wicket_8468de3": {
        "repo": "wicket",
        "message": "WICKET-1415: BundleStringResourceLoader throws NPE if component is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@640155 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/8468de343669cdd482f41359acaaadc6ae4d5653",
        "parent": "https://github.com/apache/wicket/commit/7536a80d5183c8a00050dae51a0fa008ab0c40d9",
        "bug_id": "wicket_8468de3",
        "file": [
            {
                "sha": "2651fcf450c59a145e6cfa843eea3b89a648ef39",
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "blob_url": "https://github.com/apache/wicket/blob/8468de343669cdd482f41359acaaadc6ae4d5653/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "raw_url": "https://github.com/apache/wicket/raw/8468de343669cdd482f41359acaaadc6ae4d5653/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java?ref=8468de343669cdd482f41359acaaadc6ae4d5653",
                "patch": "@@ -62,7 +62,7 @@ public BundleStringResourceLoader(final String bundleName)\n \t * @return The string resource value or null if resource not found\n \t */\n \tpublic final String loadStringResource(final Class clazz, final String key, Locale locale,\n-\t\t\tfinal String style)\n+\t\tfinal String style)\n \t{\n \t\tif (locale == null)\n \t\t{\n@@ -91,6 +91,7 @@ public final String loadStringResource(final Class clazz, final String key, Loca\n \t */\n \tpublic final String loadStringResource(final Component component, final String key)\n \t{\n-\t\treturn loadStringResource(null, key, component.getLocale(), null);\n+\t\tfinal Locale locale = (component != null) ? component.getLocale() : null;\n+\t\treturn loadStringResource(null, key, locale, null);\n \t}\n }",
                "deletions": 2
            }
        ],
        "patched_files": [
            "BundleStringResourceLoader.java"
        ],
        "unit_tests": [
            "BundleStringResourceLoaderTest.java"
        ]
    },
    "wicket_e37a9e1": {
        "repo": "wicket",
        "message": "WICKET-4968 NPE in FencedFeedbackPanel#onRemove",
        "commit": "https://github.com/apache/wicket/commit/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c",
        "parent": "https://github.com/apache/wicket/commit/af3f84485ccf7a10a7fafe9246d80ff83b13daed",
        "bug_id": "wicket_e37a9e1",
        "file": [
            {
                "sha": "f6916f2c8f0e19f04d4de8cbe3d0dc4210f3a43f",
                "filename": "wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "blob_url": "https://github.com/apache/wicket/blob/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "raw_url": "https://github.com/apache/wicket/raw/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java?ref=e37a9e101f6ee74aa03bff9a6797a16d304b3d0c",
                "patch": "@@ -152,7 +152,7 @@ protected void onRemove()\n \t\t\t// decrement the fence count\n \n \t\t\tInteger count = fence.getMetaData(FENCE_KEY);\n-\t\t\tcount = count == 1 ? null : count - 1;\n+\t\t\tcount = (count == null || count == 1) ? null : count - 1;\n \t\t\tfence.setMetaData(FENCE_KEY, count);\n \t\t}\n \t}",
                "deletions": 1
            }
        ],
        "patched_files": [
            "FencedFeedbackPanel.java"
        ],
        "unit_tests": [
            "FencedFeedbackPanelTest.java"
        ]
    },
    "wicket_d7c2804": {
        "repo": "wicket",
        "message": "Do not chain the constructors because this causes NullPointerException when the parameter to Arrays.asList is  null",
        "commit": "https://github.com/apache/wicket/commit/d7c28049e464cc7a12952913c15095158b97a7f2",
        "parent": "https://github.com/apache/wicket/commit/ba2a4177d1391d875ae60f25c69e1dc5186112c0",
        "bug_id": "wicket_d7c2804",
        "file": [
            {
                "sha": "54f96de90ea586a87548793c4fa8976a43413c6a",
                "filename": "wicket-ioc/src/main/java/org/apache/wicket/injection/CompoundFieldValueFactory.java",
                "blob_url": "https://github.com/apache/wicket/blob/d7c28049e464cc7a12952913c15095158b97a7f2/wicket-ioc/src/main/java/org/apache/wicket/injection/CompoundFieldValueFactory.java",
                "raw_url": "https://github.com/apache/wicket/raw/d7c28049e464cc7a12952913c15095158b97a7f2/wicket-ioc/src/main/java/org/apache/wicket/injection/CompoundFieldValueFactory.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-ioc/src/main/java/org/apache/wicket/injection/CompoundFieldValueFactory.java?ref=d7c28049e464cc7a12952913c15095158b97a7f2",
                "patch": "@@ -44,7 +44,9 @@\n \t */\n \tpublic CompoundFieldValueFactory(final IFieldValueFactory[] factories)\n \t{\n-\t\tthis(Arrays.asList(factories));\n+\t\tArgs.notNull(factories, \"factories\");\n+\n+\t\tdelegates.addAll(Arrays.asList(factories));\n \t}\n \n \t/**",
                "deletions": 1
            }
        ],
        "patched_files": [
            "CompoundFieldValueFactory.java"
        ],
        "unit_tests": [
            "CompoundFieldValueFactoryTest.java"
        ]
    },
    "wicket_2c19418": {
        "repo": "wicket",
        "message": "WICKET-738 setVisible(false) on Page throws NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@555407 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/2c194180a5c2660a70ae1121cd12ce355afebc52",
        "parent": "https://github.com/apache/wicket/commit/cd6e324a6751689013539f14d55085f3efc9c2ba",
        "bug_id": "wicket_2c19418",
        "file": [
            {
                "sha": "8dc71e8c5edd275c83f2ab196f363adc5c3d7bdc",
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "blob_url": "https://github.com/apache/wicket/blob/2c194180a5c2660a70ae1121cd12ce355afebc52/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "raw_url": "https://github.com/apache/wicket/raw/2c194180a5c2660a70ae1121cd12ce355afebc52/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java?ref=2c194180a5c2660a70ae1121cd12ce355afebc52",
                "patch": "@@ -1979,7 +1979,8 @@ public final void render(final MarkupStream markupStream)\n \t\t\t\tlog.debug(\"End render \" + this);\n \t\t\t}\n \t\t}\n-\t\telse\n+\t\t// markupStream is null when rendering a page\n+\t\telse if (markupStream != null)\n \t\t{\n \t\t\tif (getFlag(FLAG_PLACEHOLDER))\n \t\t\t{",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Component.java"
        ],
        "unit_tests": [
            "TestComponent.java",
            "ComponentTest.java"
        ]
    },
    "wicket_381b90f": {
        "repo": "wicket",
        "message": "WICKET-5072 Cookies#isEqual(Cookie, Cookie) may fail with NullPointerException",
        "commit": "https://github.com/apache/wicket/commit/381b90fd0a55e40983d0e826139363a7d965ee0e",
        "parent": "https://github.com/apache/wicket/commit/b1e68de911c0ccb71df58a6744bf3ad18c2f265d",
        "bug_id": "wicket_381b90f",
        "file": [
            {
                "sha": "d3a8a6e17e889aca52c09cb0b9673d815f231a39",
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java",
                "blob_url": "https://github.com/apache/wicket/blob/381b90fd0a55e40983d0e826139363a7d965ee0e/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java",
                "raw_url": "https://github.com/apache/wicket/raw/381b90fd0a55e40983d0e826139363a7d965ee0e/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/mock/Cookies.java?ref=381b90fd0a55e40983d0e826139363a7d965ee0e",
                "patch": "@@ -19,6 +19,7 @@\n import javax.servlet.http.Cookie;\n \n import org.apache.wicket.util.lang.Args;\n+import org.apache.wicket.util.lang.Objects;\n \n /**\n  * A helper class for dealing with cookies\n@@ -59,7 +60,7 @@ public static boolean isEqual(Cookie c1, Cookie c2)\n \t\tArgs.notNull(c2, \"c2\");\n \n \t\treturn c1.getName().equals(c2.getName()) &&\n-\t\t\t\t((c1.getPath() == null && c2.getPath() == null) || (c1.getPath().equals(c2.getPath()))) &&\n-\t\t\t\t((c1.getDomain() == null && c2.getDomain() == null) || (c1.getDomain().equals(c2.getDomain())));\n+\t\t\t\tObjects.isEqual(c1.getPath(), c2.getPath()) &&\n+\t\t\t\tObjects.isEqual(c1.getDomain(), c2.getDomain());\n \t}\n }",
                "deletions": 2
            },
            {
                "sha": "9e7755bf1638998e8e3ad218412f0a7591393b80",
                "filename": "wicket-core/src/test/java/org/apache/wicket/protocol/http/mock/CookiesTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/381b90fd0a55e40983d0e826139363a7d965ee0e/wicket-core/src/test/java/org/apache/wicket/protocol/http/mock/CookiesTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/381b90fd0a55e40983d0e826139363a7d965ee0e/wicket-core/src/test/java/org/apache/wicket/protocol/http/mock/CookiesTest.java",
                "status": "added",
                "changes": 33,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/protocol/http/mock/CookiesTest.java?ref=381b90fd0a55e40983d0e826139363a7d965ee0e",
                "patch": "@@ -0,0 +1,33 @@\n+package org.apache.wicket.protocol.http.mock;\n+\n+import javax.servlet.http.Cookie;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for Cookies helper class\n+ */\n+public class CookiesTest extends Assert\n+{\n+\t@Test\n+\tpublic void testIsEqual() throws Exception\n+\t{\n+\t\tCookie c1 = new Cookie(\"Name\", \"Value\");\n+\t\tCookie c2 = new Cookie(\"Name\", \"Value\");\n+\n+\t\tassertTrue(Cookies.isEqual(c1, c2));\n+\n+\t\tc2.setPath(\"Path\");\n+\t\tassertFalse(Cookies.isEqual(c1, c2));\n+\n+\t\tc1.setPath(\"Path\");\n+\t\tassertTrue(Cookies.isEqual(c1, c2));\n+\n+\t\tc2.setDomain(\"Domain\");\n+\t\tassertFalse(Cookies.isEqual(c1, c2));\n+\n+\t\tc1.setDomain(\"Domain\");\n+\t\tassertTrue(Cookies.isEqual(c1, c2));\n+\t}\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Cookies.java"
        ],
        "unit_tests": [
            "CookiesTest.java"
        ]
    },
    "wicket_b719561": {
        "repo": "wicket",
        "message": "WICKET-4706 SerializableChecker.close throws NPE",
        "commit": "https://github.com/apache/wicket/commit/b719561b4429941ccbd705ac1ddd13e4aa1aec0e",
        "parent": "https://github.com/apache/wicket/commit/4fc82e3598ec6d790fe13c05ef99b1a69095779e",
        "bug_id": "wicket_b719561",
        "file": [
            {
                "sha": "57f831716882a7750bc29cb274e46a8c3b771e81",
                "filename": "wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "blob_url": "https://github.com/apache/wicket/blob/b719561b4429941ccbd705ac1ddd13e4aa1aec0e/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "raw_url": "https://github.com/apache/wicket/raw/b719561b4429941ccbd705ac1ddd13e4aa1aec0e/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java?ref=b719561b4429941ccbd705ac1ddd13e4aa1aec0e",
                "patch": "@@ -349,6 +349,15 @@ public void reset() throws IOException\n \t\twriteObjectMethodMissing.clear();\n \t}\n \n+\t@Override\n+\tpublic void close() throws IOException\n+\t{\n+\t\t// do not call super.close() because SerializableChecker uses ObjectOutputStream's no-arg constructor\n+\n+\t\t// just null-ify the declared members\n+\t\treset();\n+\t}\n+\n \tprivate void check(Object obj)\n \t{\n \t\tif (obj == null)",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SerializableChecker.java"
        ],
        "unit_tests": [
            "SerializableCheckerTest.java"
        ]
    },
    "wicket_8cd64ee": {
        "repo": "wicket",
        "message": "patch possible npe when interface is passed in\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@683701 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/8cd64ee40d1ac5444d7136e9a68c71010085f65a",
        "parent": "https://github.com/apache/wicket/commit/02c85dba31a0d5c315f5e90a994df2263a61b2d9",
        "bug_id": "wicket_8cd64ee",
        "file": [
            {
                "sha": "a9554af89fb74d05902eade24f4accfe338a6fbc",
                "filename": "wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "blob_url": "https://github.com/apache/wicket/blob/8cd64ee40d1ac5444d7136e9a68c71010085f65a/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "raw_url": "https://github.com/apache/wicket/raw/8cd64ee40d1ac5444d7136e9a68c71010085f65a/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "status": "modified",
                "changes": 20,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java?ref=8cd64ee40d1ac5444d7136e9a68c71010085f65a",
                "patch": "@@ -110,7 +110,7 @@ public ComponentStringResourceLoader()\n \t * @see org.apache.wicket.resource.loader.IStringResourceLoader#loadStringResource(java.lang.Class,\n \t *      java.lang.String, java.util.Locale, java.lang.String)\n \t */\n-\tpublic String loadStringResource(Class< ? > clazz, final String key, final Locale locale,\n+\tpublic String loadStringResource(Class<?> clazz, final String key, final Locale locale,\n \t\tfinal String style)\n \t{\n \t\tif (clazz == null)\n@@ -132,7 +132,7 @@ public String loadStringResource(Class< ? > clazz, final String key, final Local\n \t\t\tResourceNameIterator iter = new ResourceNameIterator(path, style, locale, null);\n \t\t\twhile (iter.hasNext())\n \t\t\t{\n-\t\t\t\tString newPath = (String)iter.next();\n+\t\t\t\tString newPath = iter.next();\n \n \t\t\t\tfinal Properties props = propertiesFactory.load(clazz, newPath);\n \t\t\t\tif (props != null)\n@@ -159,6 +159,12 @@ public String loadStringResource(Class< ? > clazz, final String key, final Local\n \n \t\t\t// Move to the next superclass\n \t\t\tclazz = clazz.getSuperclass();\n+\n+\t\t\tif (clazz == null)\n+\t\t\t{\n+\t\t\t\t// nothing more to search, done\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \n \t\t// not found\n@@ -188,12 +194,12 @@ public String loadStringResource(final Component component, final String key)\n \n \t\t// The reason why we need to create that stack is because we need to\n \t\t// walk it downwards starting with Page down to the Component\n-\t\tList<Class< ? >> searchStack = getComponentStack(component);\n+\t\tList<Class<?>> searchStack = getComponentStack(component);\n \n \t\t// Walk the component hierarchy down from page to the component\n \t\tfor (int i = searchStack.size() - 1; (i >= 0) && (string == null); i--)\n \t\t{\n-\t\t\tClass< ? > clazz = searchStack.get(i);\n+\t\t\tClass<?> clazz = searchStack.get(i);\n \n \t\t\t// First, try the fully qualified resource name relative to the\n \t\t\t// component on the path from page down.\n@@ -226,10 +232,10 @@ public String loadStringResource(final Component component, final String key)\n \t *            The component to evaluate\n \t * @return The stack of classes\n \t */\n-\tprivate List<Class< ? >> getComponentStack(final Component component)\n+\tprivate List<Class<?>> getComponentStack(final Component component)\n \t{\n \t\t// Build the search stack\n-\t\tfinal List<Class< ? >> searchStack = new ArrayList<Class< ? >>();\n+\t\tfinal List<Class<?>> searchStack = new ArrayList<Class<?>>();\n \t\tsearchStack.add(component.getClass());\n \n \t\tif (!(component instanceof Page))\n@@ -258,7 +264,7 @@ public String loadStringResource(final Component component, final String key)\n \t *            The class to check\n \t * @return Whether to stop the search\n \t */\n-\tprotected boolean isStopResourceSearch(final Class< ? > clazz)\n+\tprotected boolean isStopResourceSearch(final Class<?> clazz)\n \t{\n \t\tif ((clazz == null) || clazz.equals(Object.class) || clazz.equals(Application.class))\n \t\t{",
                "deletions": 7
            }
        ],
        "patched_files": [
            "ComponentStringResourceLoader.java"
        ],
        "unit_tests": [
            "ComponentStringResourceLoaderTest.java"
        ]
    },
    "wicket_bc10ba5": {
        "repo": "wicket",
        "message": "Move the check for non-null earlier in the method body. It would throw NPE in #checkHierarchyChange() otherwise.\n\nUse Args.",
        "commit": "https://github.com/apache/wicket/commit/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc",
        "parent": "https://github.com/apache/wicket/commit/0b78d759220c1b09abb0d47b5007757bbfeb4e0c",
        "bug_id": "wicket_bc10ba5",
        "file": [
            {
                "sha": "731065c5f3aa82804f1f3fe85de5c0c7cc2bd4fb",
                "filename": "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "blob_url": "https://github.com/apache/wicket/blob/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "raw_url": "https://github.com/apache/wicket/raw/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java?ref=bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc",
                "patch": "@@ -710,12 +710,9 @@ public final void renderAssociatedMarkup(final String openTagName, final String\n \t */\n \tpublic MarkupContainer replace(final Component child)\n \t{\n-\t\tcheckHierarchyChange(child);\n+\t\tArgs.notNull(child, \"child\");\n \n-\t\tif (child == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"argument child must be not null\");\n-\t\t}\n+\t\tcheckHierarchyChange(child);\n \n \t\tif (log.isDebugEnabled())\n \t\t{",
                "deletions": 5
            }
        ],
        "patched_files": [
            "MarkupContainer.java"
        ],
        "unit_tests": [
            "MarkupContainerTest.java"
        ]
    },
    "wicket_c940a37": {
        "repo": "wicket",
        "message": "fixed NPE when reloading updated markup in development mode\nIssue: WICKET-3336\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1059368 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/c940a378736e728ba959ec62d9a1f10fb0bc6a0f",
        "parent": "https://github.com/apache/wicket/commit/b40d5d6d529720e41948fa3ad55aa4bd29e527c4",
        "bug_id": "wicket_c940a37",
        "file": [
            {
                "sha": "dd4c4bc1a7a13a40d7dfb4c1e0a65be7c513c170",
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "blob_url": "https://github.com/apache/wicket/blob/c940a378736e728ba959ec62d9a1f10fb0bc6a0f/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "raw_url": "https://github.com/apache/wicket/raw/c940a378736e728ba959ec62d9a1f10fb0bc6a0f/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "status": "modified",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java?ref=c940a378736e728ba959ec62d9a1f10fb0bc6a0f",
                "patch": "@@ -96,18 +96,27 @@ protected MarkupCache()\n \t\t}\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic void clear()\n \t{\n \t\tmarkupCache.clear();\n \t\tmarkupKeyCache.clear();\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic void shutdown()\n \t{\n \t\tmarkupCache.shutdown();\n \t\tmarkupKeyCache.shutdown();\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic final IMarkupFragment removeMarkup(final String cacheKey)\n \t{\n \t\tArgs.notNull(cacheKey, \"cacheKey\");\n@@ -188,6 +197,10 @@ private boolean isBaseMarkupCached(final CharSequence key)\n \t{\n \t\t// Get the markup associated with key\n \t\tMarkup markup = markupCache.get(key);\n+\t\tif (markup == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n \n \t\t// Get the base markup resource stream from the markup\n \t\tMarkupResourceStream resourceStream = markup.getMarkupResourceStream()\n@@ -215,6 +228,9 @@ private boolean isMarkupCached(final MarkupResourceStream resourceStream)\n \t\treturn false;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic final int size()\n \t{\n \t\treturn markupCache.size();\n@@ -610,11 +626,17 @@ public DefaultCacheImplementation()\n \t\t{\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void clear()\n \t\t{\n \t\t\tcache.clear();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic boolean containsKey(Object key)\n \t\t{\n \t\t\tif (key == null)\n@@ -624,6 +646,9 @@ public boolean containsKey(Object key)\n \t\t\treturn cache.containsKey(key);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic V get(Object key)\n \t\t{\n \t\t\tif (key == null)\n@@ -633,26 +658,41 @@ public V get(Object key)\n \t\t\treturn cache.get(key);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic Collection<K> getKeys()\n \t\t{\n \t\t\treturn cache.keySet();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void put(K key, V value)\n \t\t{\n \t\t\tcache.put(key, value);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic boolean remove(K key)\n \t\t{\n \t\t\treturn cache.remove(key) == null;\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic int size()\n \t\t{\n \t\t\treturn cache.size();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void shutdown()\n \t\t{\n \t\t\tclear();",
                "deletions": 0
            }
        ],
        "patched_files": [
            "MarkupCache.java"
        ],
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_feed0b7": {
        "repo": "wicket",
        "message": "WICKET-5532 NPE calling PackageResource.getResourceStream() if there is no RequestCycle defined\n\nUse empty request and response when a PackageResource is used out of a request cycle\n\n(cherry picked from commit ae44d26db32587f4ddb9b8c52460ec1450dc96f5)",
        "commit": "https://github.com/apache/wicket/commit/feed0b7814855c9d8815826ecd4c75f96da090cf",
        "parent": "https://github.com/apache/wicket/commit/5fe57410df21141d1a8db05fcb95728ab0ab8065",
        "bug_id": "wicket_feed0b7",
        "file": [
            {
                "sha": "403d1f7da77e6859b25ac03d5b1174c046c1f8ef",
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "blob_url": "https://github.com/apache/wicket/blob/feed0b7814855c9d8815826ecd4c75f96da090cf/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "raw_url": "https://github.com/apache/wicket/raw/feed0b7814855c9d8815826ecd4c75f96da090cf/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "status": "modified",
                "changes": 14,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java?ref=feed0b7814855c9d8815826ecd4c75f96da090cf",
                "patch": "@@ -30,8 +30,11 @@\n import org.apache.wicket.core.util.lang.WicketObjects;\n import org.apache.wicket.core.util.resource.locator.IResourceStreamLocator;\n import org.apache.wicket.markup.html.IPackageResourceGuard;\n+import org.apache.wicket.mock.MockWebRequest;\n+import org.apache.wicket.request.Url;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.request.resource.caching.IStaticCacheableResource;\n+import org.apache.wicket.response.StringResponse;\n import org.apache.wicket.util.io.IOUtils;\n import org.apache.wicket.util.lang.Classes;\n import org.apache.wicket.util.lang.Packages;\n@@ -493,7 +496,16 @@ public InputStream getInputStream() throws ResourceStreamNotFoundException\n \t\t\t}\n \n \t\t\tRequestCycle cycle = RequestCycle.get();\n-\t\t\tAttributes attributes = new Attributes(cycle.getRequest(), cycle.getResponse());\n+\t\t\tAttributes attributes;\n+\t\t\tif (cycle != null)\n+\t\t\t{\n+\t\t\t\tattributes = new Attributes(cycle.getRequest(), cycle.getResponse());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\t// use empty request and response in case of non-http thread. WICKET-5532\n+\t\t\t\tattributes = new Attributes(new MockWebRequest(Url.parse(\"\")), new StringResponse());\n+\t\t\t}\n \t\t\tbyte[] processedBytes = processResponse(attributes, bytes);\n \t\t\treturn new ByteArrayInputStream(processedBytes);\n \t\t}",
                "deletions": 1
            }
        ],
        "patched_files": [
            "PackageResource.java"
        ],
        "unit_tests": [
            "PackageResourceTest.java"
        ]
    },
    "wicket_d35517e": {
        "repo": "wicket",
        "message": "test preventing the NPE requesting an StringResourceStream binded to the application as an resource\nIssue: WICKET-3187\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1038300 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/d35517e5e8c6fb4730e60af2d7be1e20197f8c4a",
        "parent": "https://github.com/apache/wicket/commit/947823f922143d00103b2309c8afdcfa5669091b",
        "bug_id": "wicket_d35517e",
        "file": [
            {
                "sha": "ab431686d6316e4889a601d14767bfc0a7c909ae",
                "filename": "wicket/src/test/java/org/apache/wicket/ResourceTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/d35517e5e8c6fb4730e60af2d7be1e20197f8c4a/wicket/src/test/java/org/apache/wicket/ResourceTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/d35517e5e8c6fb4730e60af2d7be1e20197f8c4a/wicket/src/test/java/org/apache/wicket/ResourceTest.java",
                "status": "modified",
                "changes": 30,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/java/org/apache/wicket/ResourceTest.java?ref=d35517e5e8c6fb4730e60af2d7be1e20197f8c4a",
                "patch": "@@ -25,6 +25,8 @@\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.request.resource.ResourceStreamResource;\n import org.apache.wicket.util.resource.FileResourceStream;\n+import org.apache.wicket.util.resource.IResourceStream;\n+import org.apache.wicket.util.resource.StringResourceStream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -40,7 +42,7 @@\n \t/**\n \t * tests a resource that is not cacheable.\n \t */\n-\tpublic void testResource()\n+\tpublic void testFileResourceStream()\n \t{\n \t\tfinal File testFile;\n \t\ttry\n@@ -54,19 +56,29 @@ public void testResource()\n \t\t{\n \t\t\tthrow new RuntimeException(e);\n \t\t}\n-\n-\t\tIResource file = new ResourceStreamResource(new FileResourceStream(\n+\t\tbindToApplicationAsResourceAndRequestIt(new FileResourceStream(\n \t\t\tnew org.apache.wicket.util.file.File(testFile)));\n-\t\ttester.getApplication().getSharedResources().add(\"file\", file);\n+\t\tassertEquals(MockHttpServletResponse.formatDate(testFile.lastModified()),\n+\t\t\ttester.getLastModifiedFromResponseHeader());\n+\t\tassertEquals(TEST_STRING.length(), tester.getContentLengthFromResponseHeader());\n+\t}\n+\n+\tpublic void testStringResourceStream()\n+\t{\n+\t\tStringResourceStream resourceStream = new StringResourceStream(TEST_STRING);\n+\t\tbindToApplicationAsResourceAndRequestIt(resourceStream);\n+\t\tassertEquals(TEST_STRING.length(), tester.getContentLengthFromResponseHeader());\n+\t}\n+\n+\tprivate void bindToApplicationAsResourceAndRequestIt(IResourceStream iResourceStream)\n+\t{\n+\t\tIResource resource = new ResourceStreamResource(iResourceStream);\n+\t\ttester.getApplication().getSharedResources().add(\"resource\", resource);\n \t\ttester.getRequest().setUrl(\n \t\t\ttester.getRequestCycle().mapUrlFor(\n \t\t\t\ttester.getApplication()\n \t\t\t\t\t.getSharedResources()\n-\t\t\t\t\t.get(Application.class, \"file\", null, null, null, true), null));\n+\t\t\t\t\t.get(Application.class, \"resource\", null, null, null, true), null));\n \t\ttester.processRequest();\n-\n-\t\tassertEquals(MockHttpServletResponse.formatDate(testFile.lastModified()),\n-\t\t\ttester.getLastModifiedFromResponseHeader());\n-\t\tassertEquals(TEST_STRING.length(), tester.getContentLengthFromResponseHeader());\n \t}\n }",
                "deletions": 9
            }
        ],
        "patched_files": [],
        "unit_tests": [
            "ResourceTest.java"
        ]
    },
    "wicket_6073fbd": {
        "repo": "wicket",
        "message": "Fixes WICKET-3632: NPE while injecting\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1095885 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/6073fbd0585602fcca3d09e10dc89fcbc6a629c4",
        "parent": "https://github.com/apache/wicket/commit/90d7803ba60c644eef9bbbbf3dc792d2ab137aa6",
        "bug_id": "wicket_6073fbd",
        "file": [
            {
                "sha": "4a8880c05e58e76b6a753329d71f51fa36eeda78",
                "filename": "wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "blob_url": "https://github.com/apache/wicket/blob/6073fbd0585602fcca3d09e10dc89fcbc6a629c4/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "raw_url": "https://github.com/apache/wicket/raw/6073fbd0585602fcca3d09e10dc89fcbc6a629c4/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java?ref=6073fbd0585602fcca3d09e10dc89fcbc6a629c4",
                "patch": "@@ -188,7 +188,8 @@ private final String getBeanNameOfClass(final ApplicationContext ctx, final Clas\n \t\t\t\tBeanDefinition beanDef = getBeanDefinition(\n \t\t\t\t\t((AbstractApplicationContext)ctx).getBeanFactory(), possibility);\n \t\t\t\tif (BeanFactoryUtils.isFactoryDereference(possibility) ||\n-\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") || !beanDef.isAutowireCandidate())\n+\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") ||\n+\t\t\t\t\t(beanDef != null && !beanDef.isAutowireCandidate()))\n \t\t\t\t{\n \t\t\t\t\tit.remove();\n \t\t\t\t}",
                "deletions": 1
            }
        ],
        "patched_files": [
            "AnnotProxyFieldValueFactory.java"
        ],
        "unit_tests": [
            "AnnotProxyFieldValueFactoryTest.java"
        ]
    },
    "wicket_35e9a11": {
        "repo": "wicket",
        "message": "WICKET-3691 NPE in PersistentPageManager.SessionEntry.writeObject(ObjectOutputStream) when using embedded Tomcat\n\nAdd check for pages == null.\nRename local variable to have more meaningful name (l -> serializedPages).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1101019 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/35e9a11b577db1cd427bc893fb4d95f091ead2b1",
        "parent": "https://github.com/apache/wicket/commit/af9cae20fa58d20fd8e833e0366ad99f4207bb9c",
        "bug_id": "wicket_35e9a11",
        "file": [
            {
                "sha": "c9fd4731e98007ad423cb7d7783425725c8e1033",
                "filename": "wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "blob_url": "https://github.com/apache/wicket/blob/35e9a11b577db1cd427bc893fb4d95f091ead2b1/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "raw_url": "https://github.com/apache/wicket/raw/35e9a11b577db1cd427bc893fb4d95f091ead2b1/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "status": "modified",
                "changes": 35,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java?ref=35e9a11b577db1cd427bc893fb4d95f091ead2b1",
                "patch": "@@ -218,26 +218,29 @@ private void writeObject(final ObjectOutputStream s) throws IOException\n \t\t\ts.defaultWriteObject();\n \n \t\t\t// prepare for serialization and store the pages\n-\t\t\tList<Serializable> l = new ArrayList<Serializable>();\n-\t\t\tIPageStore pageStore = getPageStore();\n-\t\t\tfor (IManageablePage p : pages)\n+\t\t\tList<Serializable> serializedPages = new ArrayList<Serializable>();\n+\t\t\tif (pages != null)\n \t\t\t{\n-\t\t\t\tSerializable preparedPage;\n-\t\t\t\tif (pageStore != null)\n-\t\t\t\t{\n-\t\t\t\t\tpreparedPage = pageStore.prepareForSerialization(sessionId, p);\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tpreparedPage = p;\n-\t\t\t\t}\n-\n-\t\t\t\tif (preparedPage != null)\n+\t\t\t\tIPageStore pageStore = getPageStore();\n+\t\t\t\tfor (IManageablePage p : pages)\n \t\t\t\t{\n-\t\t\t\t\tl.add(preparedPage);\n+\t\t\t\t\tSerializable preparedPage;\n+\t\t\t\t\tif (pageStore != null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpreparedPage = pageStore.prepareForSerialization(sessionId, p);\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpreparedPage = p;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (preparedPage != null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tserializedPages.add(preparedPage);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\ts.writeObject(l);\n+\t\t\ts.writeObject(serializedPages);\n \t\t}\n \n \t\t/**",
                "deletions": 16
            }
        ],
        "patched_files": [
            "PersistentPageManager.java"
        ],
        "unit_tests": [
            "PersistentPageManagerTest.java"
        ]
    },
    "wicket_b02ba6d": {
        "repo": "wicket",
        "message": "fixed: NPE after application hot redeployment (MarkupCache)\nIssue: WICKET-2475\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@816867 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/b02ba6d5f4810ab70f0144f9c16273311b976b9a",
        "parent": "https://github.com/apache/wicket/commit/9771e6b210e353c3e91aeefbf7c7214ef30b6d75",
        "bug_id": "wicket_b02ba6d",
        "file": [
            {
                "sha": "3328337be9948e0ad20976b1f8e96de96be93aba",
                "filename": "wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "blob_url": "https://github.com/apache/wicket/blob/b02ba6d5f4810ab70f0144f9c16273311b976b9a/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "raw_url": "https://github.com/apache/wicket/raw/b02ba6d5f4810ab70f0144f9c16273311b976b9a/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java?ref=b02ba6d5f4810ab70f0144f9c16273311b976b9a",
                "patch": "@@ -694,6 +694,10 @@ public void clear()\n \t\t */\n \t\tpublic boolean containsKey(Object key)\n \t\t{\n+\t\t\tif (key == null)\n+\t\t\t{\n+\t\t\t\treturn false;\n+\t\t\t}\n \t\t\treturn cache.containsKey(key);\n \t\t}\n \n@@ -702,6 +706,10 @@ public boolean containsKey(Object key)\n \t\t */\n \t\tpublic V get(Object key)\n \t\t{\n+\t\t\tif (key == null)\n+\t\t\t{\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\treturn cache.get(key);\n \t\t}\n ",
                "deletions": 0
            }
        ],
        "patched_files": [
            "MarkupCache.java"
        ],
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_7614520": {
        "repo": "wicket",
        "message": "WICKET-1430: Form processing throws NPE if button.onsubmit() moves the button or its parents out of the component hierarchy\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@638021 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/7614520e94eb49cb2e5c2c560d055b18c8785301",
        "parent": "https://github.com/apache/wicket/commit/0d0a8b78760f7dd7a984df0ab6e6329755fb7f3f",
        "bug_id": "wicket_7614520",
        "file": [
            {
                "sha": "0d712f2df35f973b53ace581e2ba31bb7ca108d8",
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "blob_url": "https://github.com/apache/wicket/blob/7614520e94eb49cb2e5c2c560d055b18c8785301/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "raw_url": "https://github.com/apache/wicket/raw/7614520e94eb49cb2e5c2c560d055b18c8785301/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "status": "modified",
                "changes": 15,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java?ref=7614520e94eb49cb2e5c2c560d055b18c8785301",
                "patch": "@@ -1319,9 +1319,9 @@ protected void delegateSubmit(IFormSubmittingComponent submittingComponent)\n \t\tForm formToProcess = this;\n \t\tif (submittingComponent != null)\n \t\t{\n-\t\t\tsubmittingComponent.onSubmit();\n \t\t\t// use the form which the submittingComponent has submitted for further processing\n \t\t\tformToProcess = submittingComponent.getForm();\n+\t\t\tsubmittingComponent.onSubmit();\n \t\t}\n \n \t\t// Model was successfully updated with valid data\n@@ -1368,13 +1368,12 @@ protected final String getJavascriptId()\n \n \n \t/**\n-\t * Gets the HTTP submit method that will appear in form markup. If no method is specified in \n-\t * the template, \"post\" is the default. Note that the markup-declared HTTP method may not\n-\t * correspond to the one actually used to submit the form; in an Ajax submit, for example, \n-\t * JavaScript event handlers may submit the form with a \"get\" even when the form method is \n-\t * declared as \"post.\" Therefore this method should not be considered a guarantee of the \n-\t * HTTP method used, but a value for the markup only.\n-\t * Override if you have a requirement to alter this behavior.\n+\t * Gets the HTTP submit method that will appear in form markup. If no method is specified in the\n+\t * template, \"post\" is the default. Note that the markup-declared HTTP method may not correspond\n+\t * to the one actually used to submit the form; in an Ajax submit, for example, JavaScript event\n+\t * handlers may submit the form with a \"get\" even when the form method is declared as \"post.\"\n+\t * Therefore this method should not be considered a guarantee of the HTTP method used, but a\n+\t * value for the markup only. Override if you have a requirement to alter this behavior.\n \t * \n \t * @return the submit method specified in markup.\n \t */",
                "deletions": 8
            }
        ],
        "patched_files": [
            "Form.java"
        ],
        "unit_tests": [
            "TestForm.java",
            "FormTest.java"
        ]
    },
    "wicket_809b2da": {
        "repo": "wicket",
        "message": "WICKET-6169 NullPointerException accessing AbstractRequestLogger.getLiveSessions",
        "commit": "https://github.com/apache/wicket/commit/809b2da16cc0796ee4e5aca8ef816c200c01baf2",
        "parent": "https://github.com/apache/wicket/commit/e1157cb783cb82d791bdf97869d4924bd369a1f0",
        "bug_id": "wicket_809b2da",
        "file": [
            {
                "sha": "8cb8fcd76b5559b221aa8ac808f512e435f32a14",
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/AbstractRequestLogger.java",
                "blob_url": "https://github.com/apache/wicket/blob/809b2da16cc0796ee4e5aca8ef816c200c01baf2/wicket-core/src/main/java/org/apache/wicket/protocol/http/AbstractRequestLogger.java",
                "raw_url": "https://github.com/apache/wicket/raw/809b2da16cc0796ee4e5aca8ef816c200c01baf2/wicket-core/src/main/java/org/apache/wicket/protocol/http/AbstractRequestLogger.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/AbstractRequestLogger.java?ref=809b2da16cc0796ee4e5aca8ef816c200c01baf2",
                "patch": "@@ -134,8 +134,7 @@ public int getPeakActiveRequestCount()\n \t@Override\n \tpublic SessionData[] getLiveSessions()\n \t{\n-\t\tfinal SessionData[] sessions = liveSessions.values().toArray(\n-\t\t\tnew SessionData[liveSessions.values().size()]);\n+\t\tfinal SessionData[] sessions = liveSessions.values().toArray(new SessionData[0]);\n \t\tArrays.sort(sessions);\n \t\treturn sessions;\n \t}",
                "deletions": 2
            },
            {
                "sha": "edbc5521a291800425148073ad71f2a3cf80a6c3",
                "filename": "wicket-core/src/test/java/org/apache/wicket/protocol/http/RequestLoggerLiveSessionsTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/809b2da16cc0796ee4e5aca8ef816c200c01baf2/wicket-core/src/test/java/org/apache/wicket/protocol/http/RequestLoggerLiveSessionsTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/809b2da16cc0796ee4e5aca8ef816c200c01baf2/wicket-core/src/test/java/org/apache/wicket/protocol/http/RequestLoggerLiveSessionsTest.java",
                "status": "added",
                "changes": 123,
                "additions": 123,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/protocol/http/RequestLoggerLiveSessionsTest.java?ref=809b2da16cc0796ee4e5aca8ef816c200c01baf2",
                "patch": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.protocol.http;\n+\n+import org.apache.wicket.util.SlowTests;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.util.ArrayList;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Test for https://issues.apache.org/jira/browse/WICKET-6169\n+ */\n+@Category(SlowTests.class)\n+public class RequestLoggerLiveSessionsTest \n+{\n+\tprivate final RequestLogger requestLogger = new RequestLogger();\n+\t\n+\tprivate final ArrayList<String> sessionIds = new ArrayList<>();\n+\n+\t@Test\n+\tpublic void concurrentModification() {\n+\t\tSessionCreateThread sct = new SessionCreateThread();\n+\t\tSessionDestroyThread sdt = new SessionDestroyThread();\n+\t\tsct.start();\n+\t\tsdt.start();\n+\t\tAtomicBoolean nullPointerExceptionThrown = new AtomicBoolean(false);\n+\n+\t\tint count = 10000000;\n+\n+\t\twhile (count-- > 0)\n+\t\t{\n+\t\t\ttry {\n+\t\t\t\trequestLogger.getLiveSessions();\n+\t\t\t}\n+\t\t\tcatch (NullPointerException e)\n+\t\t\t{\n+\t\t\t\te.printStackTrace();\n+\t\t\t\tnullPointerExceptionThrown.set(true);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tsct.interrupt();\n+\t\tsdt.interrupt();\n+\n+\t\tif (nullPointerExceptionThrown.get()) {\n+\t\t\tAssert.fail(\"The test should not fail with NullPointerException\");\n+\t\t}\n+\t}\n+\t\n+\tprivate class SessionCreateThread extends Thread\n+\t{\n+\t\tprivate final Random random = new Random();\n+\t\t\n+\t\tpublic void run()\n+\t\t{\n+\t\t\twhile (!isInterrupted())\n+\t\t\t{\n+\t\t\t\tif (sessionIds.size() < 50)\n+\t\t\t\t{\n+\t\t\t\t\tString sessionId = UUID.randomUUID().toString();\n+\t\t\t\t\tsynchronized (sessionIds) {\n+\t\t\t\t\t\tsessionIds.add(sessionId);\n+\t\t\t\t\t}\n+\t\t\t\t\trequestLogger.sessionCreated(sessionId);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\tThread.sleep(random.nextInt(20));\n+\t\t\t\t}\n+\t\t\t\t\tcatch (InterruptedException e) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class SessionDestroyThread extends Thread\n+\t{\n+\t\tprivate final Random random = new Random();\n+\t\t\n+\t\tpublic void run()\n+\t\t{\n+\t\t\twhile (!isInterrupted())\n+\t\t\t{\n+\t\t\t\tif (sessionIds.size() > 0)\n+\t\t\t\t{\n+\t\t\t\t\tString sessionId = sessionIds.get(random.nextInt(sessionIds.size()));\n+\t\t\t\t\trequestLogger.sessionDestroyed(sessionId);\n+\t\t\t\t\tsynchronized (sessionIds) {\n+\t\t\t\t\t\tsessionIds.remove(sessionId);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\tThread.sleep(random.nextInt(20));\n+\t\t\t\t}\n+\t\t\t\t\tcatch (InterruptedException e) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AbstractRequestLogger.java"
        ],
        "unit_tests": [
            "RequestLoggerLiveSessionsTest.java",
            "AbstractRequestLoggerTest.java"
        ]
    },
    "wicket_7ebae30": {
        "repo": "wicket",
        "message": "Fix for NPE in ListView on AJAX calls.  The problem was with IFeedback implementing components, which were special cased in onBeforeRenderChildren() based on the assumption that Page had already called beforeRender() on them.  This is not the case with an AJAX rendering.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@537919 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
        "parent": "https://github.com/apache/wicket/commit/5db310ad78875869177502a2d15581de227dc0cd",
        "bug_id": "wicket_7ebae30",
        "file": [
            {
                "sha": "27560128b0a5a3b2c2f3f56b591d71d58e67afb5",
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "blob_url": "https://github.com/apache/wicket/blob/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "raw_url": "https://github.com/apache/wicket/raw/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "status": "modified",
                "changes": 9,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java?ref=7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
                "patch": "@@ -23,7 +23,6 @@\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.wicket.feedback.IFeedback;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.MarkupElement;\n import org.apache.wicket.markup.MarkupException;\n@@ -1394,12 +1393,8 @@ void onBeforeRenderChildren()\n \t\t\t\t// Get next child\n \t\t\t\tfinal Component child = children_get(i);\n \n-\t\t\t\t// Ignore feedback as that was done in Page\n-\t\t\t\tif (!(child instanceof IFeedback))\n-\t\t\t\t{\n-\t\t\t\t\t// Call begin request on the child\n-\t\t\t\t\tchild.beforeRender();\n-\t\t\t\t}\n+\t\t\t\t// Call begin request on the child\n+\t\t\t\tchild.beforeRender();\n \t\t\t}\n \t\t}\n \t\tcatch (RuntimeException ex)",
                "deletions": 7
            },
            {
                "sha": "b4fbb7cadfcc397c6ab7e3933862e5cee4cd8779",
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "blob_url": "https://github.com/apache/wicket/blob/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "raw_url": "https://github.com/apache/wicket/raw/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java?ref=7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
                "patch": "@@ -814,7 +814,6 @@ public final void renderPage()\n \t\t\tpublic Object component(Component component)\n \t\t\t{\n \t\t\t\t((IFeedback)component).updateFeedback();\n-\t\t\t\tcomponent.beforeRender();\n \t\t\t\treturn IVisitor.CONTINUE_TRAVERSAL;\n \t\t\t}\n \t\t});",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Page.java",
            "MarkupContainer.java"
        ],
        "unit_tests": [
            "MarkupContainerTest.java",
            "TestPage.java"
        ]
    },
    "wicket_c14a1e1": {
        "repo": "wicket",
        "message": "WICKET-3828 QueryStringWithTimestampResourceCachingStrategy#undecorateUrl(ResourceUrl) can causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1138591 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/c14a1e127d7e324383ba5fc6c0c42aa1c3817449",
        "parent": "https://github.com/apache/wicket/commit/f5a62da5b38c504db8945a88857a53aae6b5d7b7",
        "bug_id": "wicket_c14a1e1",
        "file": [
            {
                "sha": "cdc5ac7fd169ea5e328234d98316edcd5e1fe5ed",
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "blob_url": "https://github.com/apache/wicket/blob/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "raw_url": "https://github.com/apache/wicket/raw/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "status": "modified",
                "changes": 7,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java?ref=c14a1e127d7e324383ba5fc6c0c42aa1c3817449",
                "patch": "@@ -92,13 +92,6 @@ public IRequestHandler mapRequest(Request request)\n \t\t\t\t// should be stripped of timestamps\n \t\t\t\tif (i + 1 == segmentsSize)\n \t\t\t\t{\n-\t\t\t\t\t// since we need mutable page parameters for \n-\t\t\t\t\t// the caching strategy ensure they are not null \n-\t\t\t\t\tif (pageParameters == null)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tpageParameters = new PageParameters();\n-\t\t\t\t\t}\n-\t\t\t\t\t\n \t\t\t\t\t// The filename + parameters eventually contain caching\n \t\t\t\t\t// related information which needs to be removed\n \t\t\t\t\tResourceUrl resourceUrl = new ResourceUrl(segment, pageParameters);",
                "deletions": 7
            },
            {
                "sha": "654114ee84431de46c1c3c5d5d0da7a79ef9f7ef",
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java",
                "blob_url": "https://github.com/apache/wicket/blob/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java",
                "raw_url": "https://github.com/apache/wicket/raw/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java?ref=c14a1e127d7e324383ba5fc6c0c42aa1c3817449",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.wicket.request.resource.caching;\n \n import org.apache.wicket.request.http.WebResponse;\n+import org.apache.wicket.request.mapper.parameter.INamedParameters;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.ResourceReference;\n import org.apache.wicket.util.lang.Args;\n@@ -75,7 +76,12 @@ public void decorateUrl(ResourceUrl url, final ResourceReference reference)\n \n \tpublic void undecorateUrl(ResourceUrl url)\n \t{\n-\t\turl.getParameters().remove(timestampParameter);\n+\t\tfinal INamedParameters parameters = url.getParameters();\n+\t\t\n+\t\tif (parameters != null)\n+\t\t{\n+\t\t\tparameters.remove(timestampParameter);\n+\t\t}\n \t}\n \n \tpublic void decorateResponse(AbstractResource.ResourceResponse response)",
                "deletions": 1
            }
        ],
        "patched_files": [
            "BasicResourceReferenceMapper.java"
        ],
        "unit_tests": [
            "BasicResourceReferenceMapperTest.java"
        ]
    },
    "wicket_55eb521": {
        "repo": "wicket",
        "message": "WICKET-5209 NPE when using ComponentRenderer.renderComponent on a panel with <wicket:enclosure>",
        "commit": "https://github.com/apache/wicket/commit/55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
        "parent": "https://github.com/apache/wicket/commit/415e6debab43dc59235f54e79d6e52f62359ac66",
        "bug_id": "wicket_55eb521",
        "file": [
            {
                "sha": "41704a65c8cfa8e41e075062b367fcb13b3fb35f",
                "filename": "wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "patch": "@@ -100,6 +100,7 @@ public static CharSequence renderComponent(final Component component)\n \n \t\t\tRenderPage page = new RenderPage();\n \t\t\tpage.add(component);\n+\t\t\tpage.internalInitialize();\n \n \t\t\tcomponent.render();\n \t\t}",
                "deletions": 0
            },
            {
                "sha": "80922f8f6020d03b4a67a32af1f31cf13cf7a4dd",
                "filename": "wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java",
                "status": "added",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.core.util.string;\n+\n+import org.apache.wicket.WicketTestCase;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for ComponentRenderer\n+ */\n+public class ComponentRendererTest extends WicketTestCase\n+{\n+\n+\t/**\n+\t * https://issues.apache.org/jira/browse/WICKET-5209\n+\t *\n+\t * Tests that the page and the components in it are initialized.\n+\t * Enclosure won't know its child component without being initialized\n+\t */\n+\t@Test\n+\tpublic void componentsAreInitialized()\n+\t{\n+\t\tComponentRenderer.renderComponent(new EnclosurePanel(ComponentRenderer.COMP_ID));\n+\t}\n+}",
                "deletions": 0
            },
            {
                "sha": "2977d1bd73e82d39222af38a8ef68d0b0ff38a28",
                "filename": "wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html",
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html",
                "status": "added",
                "changes": 22,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "patch": "@@ -0,0 +1,22 @@\n+<!--\n+    ====================================================================\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<!DOCTYPE html>\n+<html xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n+\t<wicket:panel>\n+\t\t<wicket:enclosure child=\"externalLink\">\n+\t\t\t<a wicket:id=\"externalLink\">Google</a>\n+\t\t</wicket:enclosure>\n+\t</wicket:panel>\n+</html>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "d204ed4c53b95eab3425771c57f1079b48de2406",
                "filename": "wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java",
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java",
                "status": "added",
                "changes": 35,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.core.util.string;\n+\n+import org.apache.wicket.markup.html.link.ExternalLink;\n+import org.apache.wicket.markup.html.panel.Panel;\n+\n+class EnclosurePanel extends Panel\n+{\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate static final String TEST_LINK = \"http://google.com\";\n+\n+\tpublic EnclosurePanel(String id) {\n+\t\tsuper(id);\n+\t\t\n+\t\tExternalLink externalLink = new ExternalLink(\"externalLink\", TEST_LINK);\n+\t\tadd(externalLink);\n+\t}\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "EnclosurePanel.java",
            "ComponentRenderer.java"
        ],
        "unit_tests": [
            "ComponentRendererTest.java"
        ]
    },
    "wicket_e9170eb": {
        "repo": "wicket",
        "message": "WICKET-3736 npe in StoredResponsesMap\n\nAdd a check for null for the last entry.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1126429 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/e9170ebd658342d5871a3a93397dbe85314e6a53",
        "parent": "https://github.com/apache/wicket/commit/802995c6f1be706d9c4f1f618e8d365a2fc9e971",
        "bug_id": "wicket_e9170eb",
        "file": [
            {
                "sha": "29b61774d4da20daace5d1415130d124294461ec",
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java",
                "blob_url": "https://github.com/apache/wicket/blob/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java",
                "raw_url": "https://github.com/apache/wicket/raw/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java?ref=e9170ebd658342d5871a3a93397dbe85314e6a53",
                "patch": "@@ -70,11 +70,14 @@ protected boolean removeEldestEntry(java.util.Map.Entry<String, Object> eldest)\n \t\tif (removed == false)\n \t\t{\n \t\t\tValue value = (Value)eldest.getValue();\n-\t\t\tDuration elapsedTime = Time.now().subtract(value.creationTime);\n-\t\t\tif (lifetime.lessThanOrEqual(elapsedTime))\n+\t\t\tif (value != null)\n \t\t\t{\n-\t\t\t\tremovedValue = value.response;\n-\t\t\t\tremoved = true;\n+\t\t\t\tDuration elapsedTime = Time.now().subtract(value.creationTime);\n+\t\t\t\tif (lifetime.lessThanOrEqual(elapsedTime))\n+\t\t\t\t{\n+\t\t\t\t\tremovedValue = value.response;\n+\t\t\t\t\tremoved = true;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn removed;",
                "deletions": 4
            },
            {
                "sha": "62fa114656fe7a2eba15288f4b47872bfd435805",
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "blob_url": "https://github.com/apache/wicket/blob/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "raw_url": "https://github.com/apache/wicket/raw/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "status": "modified",
                "changes": 18,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java?ref=e9170ebd658342d5871a3a93397dbe85314e6a53",
                "patch": "@@ -16,6 +16,13 @@\n  */\n package org.apache.wicket.protocol.http;\n \n+import java.io.UnsupportedEncodingException;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n import org.apache.wicket.Application;\n import org.apache.wicket.IPageRendererProvider;\n import org.apache.wicket.Page;\n@@ -62,13 +69,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.UnsupportedEncodingException;\n-\n-import javax.servlet.ServletContext;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.servlet.http.HttpSession;\n-\n \n /**\n  * A web application is a subclass of Application which associates with an instance of WicketServlet\n@@ -681,8 +681,8 @@ protected void outputDevelopmentModeWarning()\n \t}\n \n \t/*\n-\t * Can contain at most 1000 responses and each entry can live at most one minute for now there\n-\t * is no need to configure these parameters externally\n+\t * Can contain at most 1000 responses and each entry can live at most one minute. For now there\n+\t * is no need to configure these parameters externally.\n \t */\n \tprivate final StoredResponsesMap storedResponses = new StoredResponsesMap(1000,\n \t\tDuration.seconds(60));",
                "deletions": 9
            },
            {
                "sha": "12effe3d29f700ede7140ab0eb44c1f4f7f332e6",
                "filename": "wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java",
                "status": "modified",
                "changes": 64,
                "additions": 64,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java?ref=e9170ebd658342d5871a3a93397dbe85314e6a53",
                "patch": "@@ -20,10 +20,16 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.wicket.util.time.Duration;\n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n \n /**\n  * @see <a href=\"https://issues.apache.org/jira/browse/WICKET-3209\">WICKET-3209</a>\n@@ -75,4 +81,62 @@ public void cannotPutArbitraryValue()\n \t\tStoredResponsesMap map = new StoredResponsesMap(1000, Duration.days(1));\n \t\tmap.put(\"1\", new Object());\n \t}\n+\n+\t/**\n+\t * <a href=\"https://issues.apache.org/jira/browse/WICKET-3736\">WICKET-3736</a>\n+\t * \n+\t * Tries to simulate heavy load on the {@link StoredResponsesMap} by putting many entries and\n+\t * removing randomly them.\n+\t * \n+\t * The test is disabled by default because it is slow (~ 30secs). Enable it when we have\n+\t * categorized tests ({@link Category}) and run slow ones only at Apache CI servers\n+\t * \n+\t * @throws InterruptedException\n+\t */\n+\t@Test\n+\t@Ignore\n+\tpublic void heavyLoad() throws InterruptedException\n+\t{\n+\t\tint numberOfThreads = 100;\n+\t\tfinal int iterations = 10000;\n+\t\tfinal CountDownLatch startLatch = new CountDownLatch(numberOfThreads);\n+\t\tfinal CountDownLatch endLatch = new CountDownLatch(numberOfThreads);\n+\t\tfinal SecureRandom rnd = new SecureRandom();\n+\t\tfinal StoredResponsesMap map = new StoredResponsesMap(1000, Duration.seconds(60));\n+\t\tfinal List<String> keys = new ArrayList<String>();\n+\n+\t\tRunnable r = new Runnable()\n+\t\t{\n+\t\t\tpublic void run()\n+\t\t\t{\n+\t\t\t\tstartLatch.countDown();\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\t// wait all threads before starting the test\n+\t\t\t\t\tstartLatch.await();\n+\t\t\t\t}\n+\t\t\t\tcatch (InterruptedException e)\n+\t\t\t\t{\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\n+\t\t\t\tfor (int i = 0; i < iterations; i++)\n+\t\t\t\t{\n+\t\t\t\t\tString key = \"abc\" + (rnd.nextDouble() * iterations);\n+\t\t\t\t\tkeys.add(key);\n+\t\t\t\t\tmap.put(key, new BufferedWebResponse(null));\n+\n+\t\t\t\t\tString key2 = keys.get(rnd.nextInt(keys.size() - 1));\n+\t\t\t\t\tmap.remove(key2);\n+\t\t\t\t}\n+\t\t\t\tendLatch.countDown();\n+\t\t\t}\n+\t\t};\n+\n+\t\tfor (int t = 0; t < numberOfThreads; t++)\n+\t\t{\n+\t\t\tnew Thread(r).start();\n+\t\t}\n+\t\tendLatch.await();\n+\t}\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "WebApplication.java",
            "StoredResponsesMap.java"
        ],
        "unit_tests": [
            "StoredResponsesMapTest.java"
        ]
    },
    "wicket_32a40bc": {
        "repo": "wicket",
        "message": "WICKET-5904 NPE after editing a markup file in debug mode",
        "commit": "https://github.com/apache/wicket/commit/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
        "parent": "https://github.com/apache/wicket/commit/52d99f303bea3994a28d2f08c878909ef56044f1",
        "bug_id": "wicket_32a40bc",
        "file": [
            {
                "sha": "6478da26547d265dbe05a1edea4f5749e4c42d8c",
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "status": "modified",
                "changes": 31,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "patch": "@@ -17,14 +17,17 @@\n package org.apache.wicket.markup.parser;\n \n import java.text.ParseException;\n+import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.wicket.MetaDataKey;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.HtmlSpecialTag;\n import org.apache.wicket.markup.Markup;\n import org.apache.wicket.markup.MarkupElement;\n import org.apache.wicket.markup.MarkupParser;\n import org.apache.wicket.markup.MarkupResourceStream;\n import org.apache.wicket.markup.MarkupStream;\n+import org.apache.wicket.request.cycle.RequestCycle;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,7 +48,12 @@\n \n \t/** The next MarkupFilter in the chain */\n \tprivate IMarkupFilter parent;\n-\n+\t\n+\t/** A key for a request-relative counter (see {@link #getRequestUniqueId()}) **/\n+\tprivate final static MetaDataKey<AtomicLong> REQUEST_COUNTER_KEY = new MetaDataKey<AtomicLong>()\n+\t{\n+\t};\n+\t\t\n \t/**\n \t * Construct.\n \t */\n@@ -190,4 +198,25 @@ else if (markupResourceStream != null)\n \t\t}\n \t\treturn wicketNamespace;\n \t}\n+\t\n+\t/**\n+\t * Returns an id using a request-relative counter. This can be\n+\t * useful for autocomponent tags that needs to get tag id.\n+\t * \n+\t * @return\n+\t * \t\tthe request-relative id\n+\t */\n+\tprotected long getRequestUniqueId()\n+\t{\n+\t\tAtomicLong counter = RequestCycle.get().getMetaData(REQUEST_COUNTER_KEY);\n+\t\t\n+\t\tif (counter == null)\n+\t\t{\n+\t\t\tcounter = new AtomicLong();\n+\t\t\t\n+\t\t\tRequestCycle.get().setMetaData(REQUEST_COUNTER_KEY, counter);\n+\t\t}\n+\t\t\n+\t\treturn counter.getAndIncrement();\n+\t}\n }",
                "deletions": 1
            },
            {
                "sha": "b29da3bef70a4499a7c830f2b446d40c5f4e4453",
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "status": "modified",
                "changes": 11,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "patch": "@@ -19,7 +19,6 @@\n import java.text.ParseException;\n import java.util.ArrayDeque;\n import java.util.Deque;\n-import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -73,14 +72,6 @@ public Component newComponent(MarkupContainer container, ComponentTag tag)\n \t/** Stack of <wicket:enclosure> tags */\n \tprivate Deque<ComponentTag> stack;\n \n-\t/**\n-\t * Used to assign unique ids to enclosures\n-\t * \n-\t * TODO queueing: there has to be a better way of doing this, perhaps some merged-markup-unique\n-\t * counter\n-\t */\n-\tprivate static final AtomicLong index = new AtomicLong();\n-\n \t/** The id of the first wicket tag inside the enclosure */\n \tprivate String childId;\n \n@@ -109,7 +100,7 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\t\t// If open tag, than put the tag onto the stack\n \t\t\tif (tag.isOpen())\n \t\t\t{\n-\t\t\t\ttag.setId(tag.getId() + index.getAndIncrement());\n+\t\t\t\ttag.setId(tag.getId() + getRequestUniqueId());\n \t\t\t\ttag.setModified(true);\n \t\t\t\ttag.setAutoComponentFactory(FACTORY);\n ",
                "deletions": 10
            },
            {
                "sha": "554df3edb071d8a2de01aebbf1fe95e8d5a371b1",
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "status": "modified",
                "changes": 11,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "patch": "@@ -18,7 +18,6 @@\n \n import java.text.ParseException;\n import java.util.Iterator;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -109,14 +108,6 @@ public Component newComponent(MarkupContainer container, ComponentTag tag)\n \t\t}\n \t};\n \n-\t\n-\t/** \n-\t * https://issues.apache.org/jira/browse/WICKET-5724\n-\t * \n-\t * Unique index to generate new tag ids.\n-\t * */\n-\tprivate final AtomicInteger componentIndex = new AtomicInteger();\n-\n \t/**\n \t * Constructor for the IComponentResolver role.\n \t */\n@@ -164,7 +155,7 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\t\t\tif (tag.getId() == null)\n \t\t\t\t{\n \t\t\t\t\ttag.setId(getWicketRelativePathPrefix(null)\n-\t\t\t\t\t\t+ componentIndex.getAndIncrement());\n+\t\t\t\t\t\t+ getRequestUniqueId());\n \t\t\t\t\ttag.setAutoComponentTag(true);\n \t\t\t\t}\n ",
                "deletions": 10
            }
        ],
        "patched_files": [
            "RelativePathPrefixHandler.java"
        ],
        "unit_tests": [
            "RelativePathPrefixHandlerTest.java"
        ]
    },
    "wicket_3dd37b3": {
        "repo": "wicket",
        "message": "WICKET-5912 NPE in Page#hasInvisibleTransparentChild",
        "commit": "https://github.com/apache/wicket/commit/3dd37b3fb67a44cc44390848d18a96ebd3db220e",
        "parent": "https://github.com/apache/wicket/commit/5c5490dafbc29748abfda0441e002fe456c1ff31",
        "bug_id": "wicket_3dd37b3",
        "file": [
            {
                "sha": "c01b90e4e56a54735917313c4c0ce8cc91a77dfa",
                "filename": "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "blob_url": "https://github.com/apache/wicket/blob/3dd37b3fb67a44cc44390848d18a96ebd3db220e/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "raw_url": "https://github.com/apache/wicket/raw/3dd37b3fb67a44cc44390848d18a96ebd3db220e/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java?ref=3dd37b3fb67a44cc44390848d18a96ebd3db220e",
                "patch": "@@ -727,8 +727,8 @@ public MarkupContainer replace(final Component child)\n \n \t\tif (child.getParent() != this)\n \t\t{\n-\t\t\t// Add to map\n-\t\t\tfinal Component replaced = put(child);\n+\t\t\t// Get the child component to replace\n+\t\t\tfinal Component replaced = children_get(child.getId());\n \n \t\t\t// Look up to make sure it was already in the map\n \t\t\tif (replaced == null)\n@@ -737,7 +737,10 @@ public MarkupContainer replace(final Component child)\n \t\t\t\t\texceptionMessage(\"Cannot replace a component which has not been added: id='\" +\n \t\t\t\t\t\tchild.getId() + \"', component=\" + child));\n \t\t\t}\n-\n+\t\t\t\n+\t\t\t// Add to map\n+\t\t\tput(child);\n+\t\t\t\n \t\t\t// first remove the component.\n \t\t\tremovedComponent(replaced);\n ",
                "deletions": 3
            }
        ],
        "patched_files": [
            "MarkupContainer.java"
        ],
        "unit_tests": [
            "MarkupContainerTest.java"
        ]
    },
    "wicket_ed5bfed": {
        "repo": "wicket",
        "message": "fixed WICKET-3039 and added test case: WicketServlet failes to initialise with NullPointerException in WebXmlFile.getFilterPath()\nIssue: WICKET-3029\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@995709 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
        "parent": "https://github.com/apache/wicket/commit/c00b2b84f910bcb0b39822c968bfde9faf50bbd1",
        "bug_id": "wicket_ed5bfed",
        "file": [
            {
                "sha": "f045b84707738d282065fc91a31990986c649fad",
                "filename": "wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-examples/src/main/webapp/WEB-INF/web.xml",
                "status": "modified",
                "changes": 22,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-examples/src/main/webapp/WEB-INF/web.xml?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "patch": "@@ -707,18 +707,18 @@\n \t\t  <param-value>org.apache.wicket.examples.events.EventsApplication</param-value>\n \t\t</init-param>\n \t</filter>\n+\t\n \t<filter-mapping>\n \t\t<filter-name>EventsApplication</filter-name>\n         <url-pattern>/events/*</url-pattern>\n \t</filter-mapping>\n \n-\n-\n-\n+\t<!-- LISTENER -->\n \t<listener>\n \t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n \t</listener>\n \n+\t<!-- SERVLET -->\n \t<servlet>\n \t\t<servlet-name>HelloWorldServlet</servlet-name>\n \t\t<servlet-class>org.apache.wicket.examples.HelloWorldServlet</servlet-class>\n@@ -729,6 +729,22 @@\n \t\t<url-pattern>/helloworldservlet/*</url-pattern>\n \t</servlet-mapping>\n \n+\t<servlet>\n+   \t\t<servlet-name>ServletTest</servlet-name>\n+   \t\t<servlet-class>org.apache.wicket.protocol.http.WicketServlet</servlet-class>\n+   \t\t<init-param>\n+     \t\t<param-name>applicationClassName</param-name>\n+     \t\t<param-value>org.apache.wicket.examples.helloworld.HelloWorldApplication</param-value>\n+   \t\t</init-param>\n+   \t\t<load-on-startup>0</load-on-startup>\n+ \t</servlet>\n+\n+\t<servlet-mapping>\n+\t\t<servlet-name>ServletTest</servlet-name>\n+\t\t<url-pattern>/servlettest/*</url-pattern>\n+\t</servlet-mapping>\n+\n+\n \t<session-config>\n \t\t<session-timeout>5</session-timeout>\n \t</session-config>",
                "deletions": 3
            },
            {
                "sha": "3dfd04486f3eadcc25785a103a447094e27d2eab",
                "filename": "wicket-util/src/main/java/org/apache/wicket/util/file/WebXmlFile.java",
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-util/src/main/java/org/apache/wicket/util/file/WebXmlFile.java",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-util/src/main/java/org/apache/wicket/util/file/WebXmlFile.java",
                "status": "modified",
                "changes": 38,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/main/java/org/apache/wicket/util/file/WebXmlFile.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "patch": "@@ -52,29 +52,35 @@ public WebXmlFile()\n \t/**\r\n \t * Gets Wicket filter path via FilterConfig\r\n \t * \r\n+\t * @param isServlet\r\n+\t *            true if Servlet, false if Filter\r\n \t * @param filterConfig\r\n \t * @return Filter path retrieved from \"url-pattern\". Null if not found or error occured\r\n \t */\r\n-\tpublic final String getFilterPath(final FilterConfig filterConfig)\r\n+\tpublic final String getFilterPath(final boolean isServlet, final FilterConfig filterConfig)\r\n \t{\r\n-\t\treturn getFilterPath(filterConfig.getServletContext(), filterConfig.getFilterName());\r\n+\t\treturn getFilterPath(isServlet, filterConfig.getServletContext(),\r\n+\t\t\tfilterConfig.getFilterName());\r\n \t}\r\n \r\n \t/**\r\n \t * Gets Wicket filter path via ServletContext and the filter name\r\n \t * \r\n+\t * @param isServlet\r\n+\t *            true if Servlet, false if Filter\r\n \t * @param servletContext\r\n \t * @param filterName\r\n \t * @return Filter path retrieved from \"url-pattern\". Null if not found or error occured\r\n \t */\r\n-\tpublic final String getFilterPath(final ServletContext servletContext, final String filterName)\r\n+\tpublic final String getFilterPath(final boolean isServlet, final ServletContext servletContext,\r\n+\t\tfinal String filterName)\r\n \t{\r\n \t\tInputStream is = servletContext.getResourceAsStream(\"/WEB-INF/web.xml\");\r\n \t\tif (is != null)\r\n \t\t{\r\n \t\t\ttry\r\n \t\t\t{\r\n-\t\t\t\treturn getFilterPath(filterName, is);\r\n+\t\t\t\treturn getFilterPath(isServlet, filterName, is);\r\n \t\t\t}\r\n \t\t\tcatch (ParserConfigurationException ex)\r\n \t\t\t{\r\n@@ -124,6 +130,8 @@ public final String getFilterPath(final ServletContext servletContext, final Str\n \t * </code>\r\n \t * </pre>\r\n \t * \r\n+\t * @param isServlet\r\n+\t *            true if Servlet, false if Filter\r\n \t * @param filterName\r\n \t * @param is\r\n \t *            The web.xml file\r\n@@ -132,17 +140,31 @@ public final String getFilterPath(final ServletContext servletContext, final Str\n \t * @throws IOException\r\n \t * @throws SAXException\r\n \t */\r\n-\tpublic final String getFilterPath(final String filterName, final InputStream is)\r\n-\t\tthrows ParserConfigurationException, SAXException, IOException\r\n+\tpublic final String getFilterPath(final boolean isServlet, final String filterName,\r\n+\t\tfinal InputStream is) throws ParserConfigurationException, SAXException, IOException\r\n \t{\r\n \t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n \t\tDocumentBuilder builder = factory.newDocumentBuilder();\r\n \t\tDocument document = builder.parse(is);\r\n \r\n-\t\tString mapping = \"filter-mapping\";\r\n-\t\tString name = \"filter-name\";\r\n+\t\tString tag = (isServlet ? \"servlet\" : \"filter\");\r\n+\t\tString mapping = tag + \"-mapping\";\r\n+\t\tString name = tag + \"-name\";\r\n \r\n \t\tString urlPattern = getFilterPath(filterName, mapping, name, document.getChildNodes());\r\n+\t\tif (urlPattern == null)\r\n+\t\t{\r\n+\t\t\tif (log.isWarnEnabled())\r\n+\t\t\t{\r\n+\t\t\t\tlog.warn(\"web.xml: No url-pattern found for \" + tag + \" with name \" + filterName);\r\n+\t\t\t}\r\n+\t\t\treturn null;\r\n+\t\t}\r\n+\t\telse if (log.isInfoEnabled())\r\n+\t\t{\r\n+\t\t\tlog.info(\"web.xml: found \" + tag + \" with name \" + filterName + \". url-pattern=\" +\r\n+\t\t\t\turlPattern);\r\n+\t\t}\r\n \r\n \t\t// remove leading \"/\" and trailing \"*\"\r\n \t\treturn urlPattern.substring(1, urlPattern.length() - 1);\r",
                "deletions": 8
            },
            {
                "sha": "2b6003e118b53bf7ce2763a8c0077a55da875128",
                "filename": "wicket-util/src/test/java/org/apache/wicket/util/file/WebXmlFileTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-util/src/test/java/org/apache/wicket/util/file/WebXmlFileTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket-util/src/test/java/org/apache/wicket/util/file/WebXmlFileTest.java",
                "status": "modified",
                "changes": 82,
                "additions": 70,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/test/java/org/apache/wicket/util/file/WebXmlFileTest.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "patch": "@@ -31,29 +31,87 @@\n  */\r\n public class WebXmlFileTest extends TestCase\r\n {\r\n-\tpublic void test_1() throws ParserConfigurationException, SAXException, IOException\r\n+\t/**\r\n+\t * \r\n+\t * @throws ParserConfigurationException\r\n+\t * @throws SAXException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void test_filter() throws ParserConfigurationException, SAXException, IOException\r\n+\t{\r\n+\t\tfilterOrServlet(false);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \r\n+\t * @throws ParserConfigurationException\r\n+\t * @throws SAXException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void test_servlet() throws ParserConfigurationException, SAXException, IOException\r\n+\t{\r\n+\t\tfilterOrServlet(true);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \r\n+\t * @param servlet\r\n+\t * @throws ParserConfigurationException\r\n+\t * @throws SAXException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void filterOrServlet(boolean servlet) throws ParserConfigurationException, SAXException,\r\n+\t\tIOException\r\n+\t{\r\n+\t\tString tag = servlet ? \"servlet\" : \"filter\";\r\n+\r\n+\t\tString webxml = getWebXml(tag, \"/*\");\r\n+\t\tString path = new WebXmlFile().getFilterPath(servlet, \"HelloWorldApplication\",\r\n+\t\t\tnew ByteArrayInputStream(webxml.toString().getBytes()));\r\n+\t\tassertEquals(\"\", path);\r\n+\r\n+\t\twebxml = getWebXml(tag, \"/test/*\");\r\n+\t\tpath = new WebXmlFile().getFilterPath(servlet, \"HelloWorldApplication\",\r\n+\t\t\tnew ByteArrayInputStream(webxml.toString().getBytes()));\r\n+\t\tassertEquals(\"test/\", path);\r\n+\r\n+\t\tpath = new WebXmlFile().getFilterPath(servlet, \"xxx\", new ByteArrayInputStream(\r\n+\t\t\twebxml.toString().getBytes()));\r\n+\t\tassertNull(path);\r\n+\r\n+\t\tpath = new WebXmlFile().getFilterPath(!servlet, \"HelloWorldApplication\",\r\n+\t\t\tnew ByteArrayInputStream(webxml.toString().getBytes()));\r\n+\t\tassertNull(path);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * \r\n+\t * @param filter\r\n+\t * @param url\r\n+\t * @return webxml\r\n+\t */\r\n+\tprivate String getWebXml(String filter, String url)\r\n \t{\r\n \t\tStringBuffer webxml = new StringBuffer();\r\n \t\twebxml.append(\"<web-app>\");\r\n-\t\twebxml.append(\"<filter>\");\r\n-\t\twebxml.append(\" <filter-name>HelloWorldApplication</filter-name>\");\r\n-\t\twebxml.append(\" <filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>\");\r\n+\t\twebxml.append(\"<\" + filter + \">\");\r\n+\t\twebxml.append(\" <\" + filter + \"-name>HelloWorldApplication</\" + filter + \"-name>\");\r\n+\t\twebxml.append(\" <\" + filter + \"-class>org.apache.wicket.protocol.http.WicketFilter</\" +\r\n+\t\t\tfilter + \"-class>\");\r\n \t\twebxml.append(\" <init-param>\");\r\n \t\twebxml.append(\"  <param-name>applicationClassName</param-name>\");\r\n \t\twebxml.append(\"  <param-value>org.apache.wicket.examples.helloworld.HelloWorldApplication</param-value>\");\r\n \t\twebxml.append(\" </init-param>\");\r\n-\t\twebxml.append(\"</filter>\");\r\n+\t\twebxml.append(\"</\" + filter + \">\");\r\n \t\twebxml.append(\"\");\r\n-\t\twebxml.append(\"<filter-mapping>\");\r\n-\t\twebxml.append(\" <filter-name>HelloWorldApplication</filter-name>\");\r\n-\t\twebxml.append(\" <url-pattern>/*</url-pattern>\");\r\n+\t\twebxml.append(\"<\" + filter + \"-mapping>\");\r\n+\t\twebxml.append(\" <\" + filter + \"-name>HelloWorldApplication</\" + filter + \"-name>\");\r\n+\t\twebxml.append(\" <url-pattern>\" + url + \"</url-pattern>\");\r\n \t\twebxml.append(\" <dispatcher>REQUEST</dispatcher>\");\r\n \t\twebxml.append(\" <dispatcher>INCLUDE</dispatcher>\");\r\n-\t\twebxml.append(\"</filter-mapping>\");\r\n+\t\twebxml.append(\"</\" + filter + \"-mapping>\");\r\n \t\twebxml.append(\"</web-app>\");\r\n \r\n-\t\tString path = new WebXmlFile().getFilterPath(\"HelloWorldApplication\",\r\n-\t\t\tnew ByteArrayInputStream(webxml.toString().getBytes()));\r\n-\t\tassertEquals(\"\", path);\r\n+\t\treturn webxml.toString();\r\n \t}\r\n }\r",
                "deletions": 12
            },
            {
                "sha": "2093ead3fef79577e5af660dcf7c5644240c22c7",
                "filename": "wicket/src/main/disabled/org/apache/wicket/protocol/http/MockWebApplication.java",
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/disabled/org/apache/wicket/protocol/http/MockWebApplication.java",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/disabled/org/apache/wicket/protocol/http/MockWebApplication.java",
                "status": "modified",
                "changes": 8,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/disabled/org/apache/wicket/protocol/http/MockWebApplication.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.Session;\n import org.apache.wicket.markup.html.pages.ExceptionErrorPage;\n+import org.apache.wicket.protocol.http.WicketFilter;\n import org.apache.wicket.protocol.http.request.WebErrorCodeResponseHandler;\n import org.apache.wicket.protocol.http.request.WebRequestCodingStrategy;\n import org.apache.wicket.request.target.coding.WebRequestEncoder;\n@@ -172,7 +173,6 @@ public void destroy()\n \t\t{\n \t\t\tfilter.init(new FilterConfig()\n \t\t\t{\n-\n \t\t\t\tpublic ServletContext getServletContext()\n \t\t\t\t{\n \t\t\t\t\treturn context;\n@@ -185,12 +185,6 @@ public ServletContext getServletContext()\n \n \t\t\t\tpublic String getInitParameter(String name)\n \t\t\t\t{\n-\t\t\t\t\tif (name.equals(WicketFilter.FILTER_MAPPING_PARAM))\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn WicketFilter.SERVLET_PATH_HOLDER;\n-\t\t\t\t\t\t// return \"/\" + MockWebApplication.this.getName() +\n-\t\t\t\t\t\t// \"/*\";\n-\t\t\t\t\t}\n \t\t\t\t\treturn null;\n \t\t\t\t}\n ",
                "deletions": 7
            },
            {
                "sha": "def56f3faf69ee9434376cb0dc2aa09f2d883a3d",
                "filename": "wicket/src/main/java/org/apache/wicket/protocol/http/ReloadingWicketFilter.java",
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/ReloadingWicketFilter.java",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/ReloadingWicketFilter.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/protocol/http/ReloadingWicketFilter.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "patch": "@@ -143,10 +143,11 @@ protected ClassLoader getClassLoader()\n \t}\n \n \t/**\n-\t * @see org.apache.wicket.protocol.http.WicketFilter#init(javax.servlet.FilterConfig)\n+\t * @see org.apache.wicket.protocol.http.WicketFilter#init(boolean, javax.servlet.FilterConfig)\n \t */\n \t@Override\n-\tpublic void init(final FilterConfig filterConfig) throws ServletException\n+\tpublic void init(final boolean isServlet, final FilterConfig filterConfig)\n+\t\tthrows ServletException\n \t{\n \t\treloadingClassLoader.setListener(new IChangeListener()\n \t\t{\n@@ -172,6 +173,6 @@ public void onChange()\n \t\t\t}\n \t\t});\n \n-\t\tsuper.init(filterConfig);\n+\t\tsuper.init(isServlet, filterConfig);\n \t}\n }",
                "deletions": 3
            },
            {
                "sha": "062fab42f3bd36accdc661f40ddb82ca152da9a4",
                "filename": "wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "status": "modified",
                "changes": 27,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "patch": "@@ -67,8 +67,6 @@\n \t/** The name of the context parameter that specifies application factory class */\n \tpublic static final String APP_FACT_PARAM = \"applicationFactoryClassName\";\n \n-\tstatic final String SERVLET_PATH_HOLDER = \"<servlet>\";\n-\n \t// Wicket's Application object\n \tprivate WebApplication application;\n \n@@ -245,9 +243,28 @@ protected IWebApplicationFactory getApplicationFactory()\n \t}\n \n \t/**\n+\t * If you do have a need to subclass, you may subclass {@link #init(boolean, FilterConfig)}\n+\t * \n \t * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)\n \t */\n-\tpublic void init(final FilterConfig filterConfig) throws ServletException\n+\tpublic final void init(final FilterConfig filterConfig) throws ServletException\n+\t{\n+\t\tinit(false, filterConfig);\n+\t}\n+\n+\t/**\n+\t * Servlets and Filters are treated essentially the same with Wicket. This is the entry point\n+\t * for both of them.\n+\t * \n+\t * @see #init(FilterConfig)\n+\t * \n+\t * @param isServlet\n+\t *            True if Servlet, false of Filter\n+\t * @param filterConfig\n+\t * @throws ServletException\n+\t */\n+\tpublic void init(final boolean isServlet, final FilterConfig filterConfig)\n+\t\tthrows ServletException\n \t{\n \t\tthis.filterConfig = filterConfig;\n \n@@ -259,8 +276,8 @@ public void init(final FilterConfig filterConfig) throws ServletException\n \t\t// Allow the filterPath to tbe preset via setFilterPath()\n \t\tif (filterPath == null)\n \t\t{\n-\t\t\tfilterPath = new WebXmlFile().getFilterPath(filterConfig);\n-\t\t\tif (filterPath == null)\n+\t\t\tfilterPath = new WebXmlFile().getFilterPath(isServlet, filterConfig);\n+\t\t\tif ((filterPath == null) && log.isInfoEnabled())\n \t\t\t{\n \t\t\t\tlog.info(\"Unable to parse filter mapping web.xml for \" +\n \t\t\t\t\tfilterConfig.getFilterName() + \". \" + \"Configure with init-param \" +",
                "deletions": 5
            },
            {
                "sha": "90dee580e390942f0a66982b1719dd66d5c9610f",
                "filename": "wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java",
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java",
                "status": "modified",
                "changes": 27,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/protocol/http/WicketServlet.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "patch": "@@ -162,7 +162,12 @@ public final void doPost(final HttpServletRequest servletRequest,\n \t\t}\n \t}\n \n-\tprivate static String getURL(HttpServletRequest httpServletRequest)\n+\t/**\n+\t * \n+\t * @param httpServletRequest\n+\t * @return URL\n+\t */\n+\tprivate static String getURL(final HttpServletRequest httpServletRequest)\n \t{\n \t\t/*\n \t\t * Servlet 2.3 specification :\n@@ -183,8 +188,7 @@ private static String getURL(HttpServletRequest httpServletRequest)\n \t\t\turl += pathInfo;\n \t\t}\n \n-\t\tfinal String queryString = httpServletRequest.getQueryString();\n-\n+\t\tString queryString = httpServletRequest.getQueryString();\n \t\tif (queryString != null)\n \t\t{\n \t\t\turl += (\"?\" + queryString);\n@@ -199,7 +203,13 @@ private static String getURL(HttpServletRequest httpServletRequest)\n \t\treturn url;\n \t}\n \n-\tprivate void fallback(HttpServletRequest request, HttpServletResponse response)\n+\t/**\n+\t * \n+\t * @param request\n+\t * @param response\n+\t * @throws IOException\n+\t */\n+\tprivate void fallback(final HttpServletRequest request, final HttpServletResponse response)\n \t\tthrows IOException\n \t{\n \t\t// The ServletWebRequest is created here to avoid code duplication. The getURL call doesn't\n@@ -251,7 +261,7 @@ private void fallback(HttpServletRequest request, HttpServletResponse response)\n \tpublic void init() throws ServletException\n \t{\n \t\twicketFilter = newWicketFilter();\n-\t\twicketFilter.init(new FilterConfig()\n+\t\twicketFilter.init(true, new FilterConfig()\n \t\t{\n \t\t\t/**\n \t\t\t * @see javax.servlet.FilterConfig#getServletContext()\n@@ -273,12 +283,8 @@ public ServletContext getServletContext()\n \t\t\t/**\n \t\t\t * @see javax.servlet.FilterConfig#getInitParameter(java.lang.String)\n \t\t\t */\n-\t\t\tpublic String getInitParameter(String name)\n+\t\t\tpublic String getInitParameter(final String name)\n \t\t\t{\n-\t\t\t\tif (WicketFilter.FILTER_MAPPING_PARAM.equals(name))\n-\t\t\t\t{\n-\t\t\t\t\treturn WicketFilter.SERVLET_PATH_HOLDER;\n-\t\t\t\t}\n \t\t\t\treturn WicketServlet.this.getInitParameter(name);\n \t\t\t}\n \n@@ -309,5 +315,4 @@ public void destroy()\n \t\twicketFilter.destroy();\n \t\twicketFilter = null;\n \t}\n-\n }",
                "deletions": 11
            },
            {
                "sha": "f614b2786f2feff4183b7c2bcf3ce6621c4ee6a8",
                "filename": "wicket/src/test/java/org/apache/wicket/protocol/http/WicketFilterTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/test/java/org/apache/wicket/protocol/http/WicketFilterTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/ed5bfed401b658b2f23c91e126c8492c8e87a1e0/wicket/src/test/java/org/apache/wicket/protocol/http/WicketFilterTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/java/org/apache/wicket/protocol/http/WicketFilterTest.java?ref=ed5bfed401b658b2f23c91e126c8492c8e87a1e0",
                "patch": "@@ -143,7 +143,7 @@ private String getFilterPath(String string, InputStream in)\n \t{\n \t\ttry\n \t\t{\n-\t\t\treturn new WebXmlFile().getFilterPath(string, in);\n+\t\t\treturn new WebXmlFile().getFilterPath(false, string, in);\n \t\t}\n \t\tcatch (ParserConfigurationException ex)\n \t\t{",
                "deletions": 1
            }
        ],
        "patched_files": [
            "WebXmlFile.java",
            "WicketFilter.java",
            "ReloadingWicketFilter.java",
            "MockWebApplication.java",
            "WicketServlet.java"
        ],
        "unit_tests": [
            "WebXmlFileTest.java",
            "WicketFilterTest.java"
        ]
    },
    "wicket_f2adf1c": {
        "repo": "wicket",
        "message": "WICKET-6332 NullPointerException in PageParameters#equals()",
        "commit": "https://github.com/apache/wicket/commit/f2adf1c86369638ad5bb465c00924fec0428cfae",
        "parent": "https://github.com/apache/wicket/commit/093893684984a2fcac04b4330fbacb3a81bac3a2",
        "bug_id": "wicket_f2adf1c",
        "file": [
            {
                "sha": "000e34f8731abdb16387e78b596f4e25c48e2ffe",
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "blob_url": "https://github.com/apache/wicket/blob/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "raw_url": "https://github.com/apache/wicket/raw/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java?ref=f2adf1c86369638ad5bb465c00924fec0428cfae",
                "patch": "@@ -59,7 +59,7 @@\n \t * @author Matej Knopp\r\n \t */\r\n \t@SuppressWarnings(\"serial\")\r\n-\tpublic static class NamedPair implements IClusterable\r\n+\tclass NamedPair implements IClusterable\r\n \t{\r\n \t\tprivate final String key;\r\n \t\tprivate final String value;\r",
                "deletions": 1
            },
            {
                "sha": "c985dcbc7db2466013a180e80c64b20d56c61738",
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "blob_url": "https://github.com/apache/wicket/blob/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "raw_url": "https://github.com/apache/wicket/raw/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java?ref=f2adf1c86369638ad5bb465c00924fec0428cfae",
                "patch": "@@ -467,6 +467,8 @@ else if (!indexedParameters.equals(other.indexedParameters))\n \t\t\tif (other.namedParameters != null)\n \t\t\t\treturn false;\n \t\t}\n+\t\telse if (other.namedParameters == null)\n+\t\t\treturn false;\n \t\telse if (!CollectionUtils.isEqualCollection(namedParameters, other.namedParameters))\n \t\t\treturn false;\n \t\treturn true;",
                "deletions": 0
            },
            {
                "sha": "d390eeee73b66ddf916ed1cc5c4c5184ef249800",
                "filename": "wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/f2adf1c86369638ad5bb465c00924fec0428cfae/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "status": "modified",
                "changes": 35,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java?ref=f2adf1c86369638ad5bb465c00924fec0428cfae",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.not;\n \n import java.util.List;\n \n@@ -300,7 +301,7 @@ public void equality()\n \t * https://issues.apache.org/jira/browse/WICKET-6283\n \t */\n \t@Test\n-\tpublic void equalityOfDiferenteNamedParametersOrder()\n+\tpublic void equalityOfDifferentNamedParametersOrder()\n \t{\n \t\tPageParameters p1 = new PageParameters()\n \t\t\t\t.add(\"a\", \"b\")\n@@ -313,6 +314,38 @@ public void equalityOfDiferenteNamedParametersOrder()\n \t\tassertThat(p1, is(equalTo(p2)));\n \t}\n \n+\t/**\n+\t * namedParameters equality should handle null namedParameters instance.\n+\t *\n+\t * https://issues.apache.org/jira/browse/WICKET-6332\n+\t */\n+\t@Test\n+\tpublic void equalityWithEmptyNamedParameters()\n+\t{\n+\t\tPageParameters p1 = new PageParameters()\n+\t\t\t\t.add(\"a\", \"b\");\n+\n+\t\tPageParameters p2 = new PageParameters();\n+\n+\t\tassertThat(p1, is(not(equalTo(p2))));\n+\t}\n+\n+\t/**\n+\t * indexedParameters equality should handle null namedParameters instance.\n+\t *\n+\t * https://issues.apache.org/jira/browse/WICKET-6332\n+\t */\n+\t@Test\n+\tpublic void equalityWithEmptyIndexedParameters()\n+\t{\n+\t\tPageParameters p1 = new PageParameters()\n+\t\t\t\t.set(0, \"b\");\n+\n+\t\tPageParameters p2 = new PageParameters();\n+\n+\t\tassertThat(p1, is(not(equalTo(p2))));\n+\t}\n+\n \t/**\n \t * NamedPairs hashCode should not depend on the type\n \t *",
                "deletions": 1
            }
        ],
        "patched_files": [
            "INamedParameters.java",
            "PageParameters.java"
        ],
        "unit_tests": [
            "PageParametersTest.java"
        ]
    },
    "wicket_42a640a": {
        "repo": "wicket",
        "message": "AAU-2949 fix NPE. hasRawInput() can return null for check boxes...",
        "commit": "https://github.com/apache/wicket/commit/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
        "parent": "https://github.com/apache/wicket/commit/b2dc52d6f522ad9c9aabcd6f25c1242f5071bc25",
        "bug_id": "wicket_42a640a",
        "file": [
            {
                "sha": "f0f6b1c3771ba057eeb31398d0bfc7226e7afb73",
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "blob_url": "https://github.com/apache/wicket/blob/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "raw_url": "https://github.com/apache/wicket/raw/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "status": "modified",
                "changes": 16,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java?ref=42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
                "patch": "@@ -174,19 +174,15 @@ protected void onComponentTag(final ComponentTag tag)\n \t\t\t\t\"] contains a null model object, must be an object of type java.util.Collection\");\n \t\t}\n \n-\t\tif (group.hasRawInput())\n+\t\tfinal String raw = group.getRawInput();\n+\t\tif (!Strings.isEmpty(raw))\n \t\t{\n-\t\t\t// Wicket-2949 getInputAsArray() might not be the raw input\n-\t\t\tfinal String[] inputArray = group.getRawInput().split(FormComponent.VALUE_SEPARATOR);\n-\n-\t\t\tif (inputArray != null)\n+\t\t\tfinal String[] values = raw.split(FormComponent.VALUE_SEPARATOR);\n+\t\t\tfor (String value : values)\n \t\t\t{\n-\t\t\t\tfor (String input : inputArray)\n+\t\t\t\tif (uuid.equals(value))\n \t\t\t\t{\n-\t\t\t\t\tif (uuid.equals(input))\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttag.put(\"checked\", \"checked\");\n-\t\t\t\t\t}\n+\t\t\t\t\ttag.put(\"checked\", \"checked\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
                "deletions": 10
            },
            {
                "sha": "45f8b373938ff16c9ac32e89cfb5baa6d2b84394",
                "filename": "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "blob_url": "https://github.com/apache/wicket/blob/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "raw_url": "https://github.com/apache/wicket/raw/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "status": "modified",
                "changes": 19,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java?ref=42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
                "patch": "@@ -221,22 +221,19 @@ boolean isSelected(final SelectOption<?> option)\n \t\tArgs.notNull(option, \"option\");\n \n \t\t// if the raw input is specified use that, otherwise use model\n-\t\tif (hasRawInput())\n+\t\tfinal String raw = getRawInput();\n+\t\tif (!Strings.isEmpty(raw))\n \t\t{\n-\t\t\t// Wicket-2949 getInputAsArray() might not be the raw input\n-\t\t\tString[] values = getRawInput().split(VALUE_SEPARATOR);\n-\t\t\tif (values != null && values.length > 0)\n+\t\t\tString[] values = raw.split(VALUE_SEPARATOR);\n+\t\t\tfor (int i = 0; i < values.length; i++)\n \t\t\t{\n-\t\t\t\tfor (int i = 0; i < values.length; i++)\n+\t\t\t\tString value = values[i];\n+\t\t\t\tif (value.equals(option.getValue()))\n \t\t\t\t{\n-\t\t\t\t\tString value = values[i];\n-\t\t\t\t\tif (value.equals(option.getValue()))\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n+\t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\treturn false;\n \t\t\t}\n+\t\t\treturn false;\n \t\t}\n \n \t\treturn compareModels(getDefaultModelObject(), option.getDefaultModelObject());",
                "deletions": 11
            }
        ],
        "patched_files": [
            "Select.java"
        ],
        "unit_tests": [
            "SelectTest.java"
        ]
    },
    "wicket_f81ad2a": {
        "repo": "wicket",
        "message": "Do not try to print the class name of the used input stream.\n\nIf there is an error often the variable 'ois' is not initialized and causes NullPointerException and thus hides the real cause of the problem",
        "commit": "https://github.com/apache/wicket/commit/f81ad2a53a7bcba321d3faa7f0b484b0bb431da9",
        "parent": "https://github.com/apache/wicket/commit/c8abde8be1c0c983a7ac837a1b057a476478b783",
        "bug_id": "wicket_f81ad2a",
        "file": [
            {
                "sha": "7e201e225eb327c965f5ae06072a74a6e27aa18f",
                "filename": "wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "blob_url": "https://github.com/apache/wicket/blob/f81ad2a53a7bcba321d3faa7f0b484b0bb431da9/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "raw_url": "https://github.com/apache/wicket/raw/f81ad2a53a7bcba321d3faa7f0b484b0bb431da9/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java?ref=f81ad2a53a7bcba321d3faa7f0b484b0bb431da9",
                "patch": "@@ -134,13 +134,13 @@ public Object deserialize(final byte[] data)\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (ClassNotFoundException e)\n+\t\tcatch (ClassNotFoundException cnfx)\n \t\t{\n-\t\t\tthrow new RuntimeException(\"Could not deserialize object using: \" + ois.getClass(), e);\n+\t\t\tthrow new RuntimeException(\"Could not deserialize object from byte[]\", cnfx);\n \t\t}\n-\t\tcatch (IOException e)\n+\t\tcatch (IOException iox)\n \t\t{\n-\t\t\tthrow new RuntimeException(\"Could not deserialize object using: \" + ois.getClass(), e);\n+\t\t\tthrow new RuntimeException(\"Could not deserialize object from byte[]\", iox);\n \t\t}\n \t\tfinally\n \t\t{",
                "deletions": 4
            }
        ],
        "patched_files": [
            "JavaSerializer.java"
        ],
        "unit_tests": [
            "JavaSerializerTest.java"
        ]
    },
    "wicket_f5a62da": {
        "repo": "wicket",
        "message": "WICKET-3828 QueryStringWithTimestampResourceCachingStrategy#undecorateUrl(ResourceUrl) can causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1138587 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/f5a62da5b38c504db8945a88857a53aae6b5d7b7",
        "parent": "https://github.com/apache/wicket/commit/d997f7e9d4939eaa4074e185bd06ac07361e9ccd",
        "bug_id": "wicket_f5a62da",
        "file": [
            {
                "sha": "c1530cfdd5da3dbce6a5fb760db2933994625e47",
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "blob_url": "https://github.com/apache/wicket/blob/f5a62da5b38c504db8945a88857a53aae6b5d7b7/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "raw_url": "https://github.com/apache/wicket/raw/f5a62da5b38c504db8945a88857a53aae6b5d7b7/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java?ref=f5a62da5b38c504db8945a88857a53aae6b5d7b7",
                "patch": "@@ -92,6 +92,13 @@ public IRequestHandler mapRequest(Request request)\n \t\t\t\t// should be stripped of timestamps\n \t\t\t\tif (i + 1 == segmentsSize)\n \t\t\t\t{\n+\t\t\t\t\t// since we need mutable page parameters for \n+\t\t\t\t\t// the caching strategy ensure they are not null \n+\t\t\t\t\tif (pageParameters == null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpageParameters = new PageParameters();\n+\t\t\t\t\t}\n+\t\t\t\t\t\n \t\t\t\t\t// The filename + parameters eventually contain caching\n \t\t\t\t\t// related information which needs to be removed\n \t\t\t\t\tResourceUrl resourceUrl = new ResourceUrl(segment, pageParameters);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "BasicResourceReferenceMapper.java"
        ],
        "unit_tests": [
            "BasicResourceReferenceMapperTest.java"
        ]
    },
    "wicket_59b3e31": {
        "repo": "wicket",
        "message": "Move the try/catch just around the 'validator.validate()' call. Otherwise the construction of the error message will fail with NPE because 'validator' my be null",
        "commit": "https://github.com/apache/wicket/commit/59b3e318762733adea00cfe3b31c5dd25e4d2147",
        "parent": "https://github.com/apache/wicket/commit/9575f0d93901b7163a46c2ea38f43f135ecd7d50",
        "bug_id": "wicket_59b3e31",
        "file": [
            {
                "sha": "660cf5393620e7f470c83c30ab4eef91f6f37916",
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "blob_url": "https://github.com/apache/wicket/blob/59b3e318762733adea00cfe3b31c5dd25e4d2147/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "raw_url": "https://github.com/apache/wicket/raw/59b3e318762733adea00cfe3b31c5dd25e4d2147/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "status": "modified",
                "changes": 42,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java?ref=59b3e318762733adea00cfe3b31c5dd25e4d2147",
                "patch": "@@ -1503,38 +1503,38 @@ protected final void validateValidators()\n \n \t\tIValidator<T> validator = null;\n \n-\t\ttry\n+\t\tfor (Behavior behavior : getBehaviors())\n \t\t{\n-\t\t\tfor (Behavior behavior : getBehaviors())\n+\t\t\tvalidator = null;\n+\t\t\tif (behavior instanceof ValidatorAdapter)\n \t\t\t{\n-\t\t\t\tvalidator = null;\n-\t\t\t\tif (behavior instanceof ValidatorAdapter)\n-\t\t\t\t{\n-\t\t\t\t\tvalidator = ((ValidatorAdapter<T>)behavior).getValidator();\n-\t\t\t\t}\n-\t\t\t\telse if (behavior instanceof IValidator)\n-\t\t\t\t{\n-\t\t\t\t\tvalidator = (IValidator<T>)behavior;\n-\t\t\t\t}\n-\t\t\t\tif (validator != null)\n+\t\t\t\tvalidator = ((ValidatorAdapter<T>)behavior).getValidator();\n+\t\t\t}\n+\t\t\telse if (behavior instanceof IValidator)\n+\t\t\t{\n+\t\t\t\tvalidator = (IValidator<T>)behavior;\n+\t\t\t}\n+\t\t\tif (validator != null)\n+\t\t\t{\n+\t\t\t\tif (isNull == false || validator instanceof INullAcceptingValidator<?>)\n \t\t\t\t{\n-\t\t\t\t\tif (isNull == false || validator instanceof INullAcceptingValidator<?>)\n+\t\t\t\t\ttry\n \t\t\t\t\t{\n \t\t\t\t\t\tvalidator.validate(validatable);\n \t\t\t\t\t}\n-\t\t\t\t\tif (!isValid())\n+\t\t\t\t\tcatch (Exception e)\n \t\t\t\t\t{\n-\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tthrow new WicketRuntimeException(\"Exception '\" + e.getMessage() +\n+\t\t\t\t\t\t\t\t\"' occurred during validation \" + validator.getClass().getName() +\n+\t\t\t\t\t\t\t\t\" on component \" + getPath(), e);\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\tif (!isValid())\n+\t\t\t\t{\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (Exception e)\n-\t\t{\n-\t\t\tthrow new WicketRuntimeException(\"Exception '\" + e.getMessage() +\n-\t\t\t\t\"' occurred during validation \" + validator.getClass().getName() +\n-\t\t\t\t\" on component \" + getPath(), e);\n-\t\t}\n \t}\n \n \t/**",
                "deletions": 21
            }
        ],
        "patched_files": [
            "FormComponent.java"
        ],
        "unit_tests": [
            "FormComponentTest.java"
        ]
    },
    "wicket_69f2d0a": {
        "repo": "wicket",
        "message": "WICKET-6151 DebugBar/PageSizeDebugPanel throws NullPointerException (need wrapper exception with more detail)\n\nThrow an exception if the result of serializing an object is null.\nPassing null to deserialization will lead to NullPointerException without details of the problematic object",
        "commit": "https://github.com/apache/wicket/commit/69f2d0ad9820e8ada6907ff1fa8138c89970713c",
        "parent": "https://github.com/apache/wicket/commit/b9a1ae901b8add3285d29a29d4a18ac2c23c8f86",
        "bug_id": "wicket_69f2d0a",
        "file": [
            {
                "sha": "0f4564c164b86875b0f5c0ba140addba6a3f08de",
                "filename": "wicket-core/src/main/java/org/apache/wicket/core/util/lang/WicketObjects.java",
                "blob_url": "https://github.com/apache/wicket/blob/69f2d0ad9820e8ada6907ff1fa8138c89970713c/wicket-core/src/main/java/org/apache/wicket/core/util/lang/WicketObjects.java",
                "raw_url": "https://github.com/apache/wicket/raw/69f2d0ad9820e8ada6907ff1fa8138c89970713c/wicket-core/src/main/java/org/apache/wicket/core/util/lang/WicketObjects.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/core/util/lang/WicketObjects.java?ref=69f2d0ad9820e8ada6907ff1fa8138c89970713c",
                "patch": "@@ -310,6 +310,11 @@ protected Object replaceObject(Object obj) throws IOException\n \t\t\t\tserializer = new JavaSerializer(WicketObjects.class.getName());\r\n \t\t\t}\r\n \t\t\tbyte[] serialized = serializer.serialize(object);\r\n+\t\t\tif (serialized == null)\r\n+\t\t\t{\r\n+\t\t\t\tthrow new IllegalStateException(\"A problem occurred while serializing an object. \" +\r\n+\t\t\t\t\t\t\"Please check the earlier logs for more details. Problematic object: \" + object);\r\n+\t\t\t}\r\n \t\t\tObject deserialized = serializer.deserialize(serialized);\r\n \t\t\treturn (T) deserialized;\r\n \t\t}\r",
                "deletions": 0
            },
            {
                "sha": "1ca239b9ea797fec23a74205689371b2c5426fd5",
                "filename": "wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "blob_url": "https://github.com/apache/wicket/blob/69f2d0ad9820e8ada6907ff1fa8138c89970713c/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "raw_url": "https://github.com/apache/wicket/raw/69f2d0ad9820e8ada6907ff1fa8138c89970713c/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java",
                "status": "modified",
                "changes": 6,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/serialize/java/JavaSerializer.java?ref=69f2d0ad9820e8ada6907ff1fa8138c89970713c",
                "patch": "@@ -134,14 +134,10 @@ public Object deserialize(final byte[] data)\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (ClassNotFoundException cnfx)\n+\t\tcatch (ClassNotFoundException | IOException cnfx)\n \t\t{\n \t\t\tthrow new RuntimeException(\"Could not deserialize object from byte[]\", cnfx);\n \t\t}\n-\t\tcatch (IOException iox)\n-\t\t{\n-\t\t\tthrow new RuntimeException(\"Could not deserialize object from byte[]\", iox);\n-\t\t}\n \t\tfinally\n \t\t{\n \t\t\tThreadContext.restore(old);",
                "deletions": 5
            }
        ],
        "patched_files": [
            "JavaSerializer.java",
            "WicketObjects.java"
        ],
        "unit_tests": [
            "JavaSerializerTest.java",
            "WicketObjectsTest.java"
        ]
    },
    "wicket_c29d8a5": {
        "repo": "wicket",
        "message": "WICKET-2856: PackageStringResourceLoader.loadStringResource() causes NullPointerException when used in a Class within the root package (i.e. it has no package declaration)\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@945910 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/wicket/commit/c29d8a5a672770bab08f675269963f73e2c5c84d",
        "parent": "https://github.com/apache/wicket/commit/9b440862570d0404cbf0fb5df833855b36a1d8e8",
        "bug_id": "wicket_c29d8a5",
        "file": [
            {
                "sha": "ae8e7722ca9fcab49cc9ceabe18894a03e1fd621",
                "filename": "wicket/src/main/java/org/apache/wicket/resource/loader/PackageStringResourceLoader.java",
                "blob_url": "https://github.com/apache/wicket/blob/c29d8a5a672770bab08f675269963f73e2c5c84d/wicket/src/main/java/org/apache/wicket/resource/loader/PackageStringResourceLoader.java",
                "raw_url": "https://github.com/apache/wicket/raw/c29d8a5a672770bab08f675269963f73e2c5c84d/wicket/src/main/java/org/apache/wicket/resource/loader/PackageStringResourceLoader.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/resource/loader/PackageStringResourceLoader.java?ref=c29d8a5a672770bab08f675269963f73e2c5c84d",
                "patch": "@@ -79,13 +79,18 @@ public String loadStringResource(Class<?> clazz, final String key, final Locale\n \r\n \t\twhile (true)\r\n \t\t{\r\n-\t\t\tString packageName = clazz.getPackage().getName();\r\n+\t\t\tPackage pkg = clazz.getPackage();\r\n+\t\t\tString packageName = (pkg == null) ? \"\" : pkg.getName();\r\n \t\t\tpackageName = packageName.replace('.', '/');\r\n \r\n-\t\t\twhile (packageName.length() > 0)\r\n+\t\t\tdo\r\n \t\t\t{\r\n \t\t\t\t// Create the base path\r\n-\t\t\t\tString path = packageName + \"/\" + filename;\r\n+\t\t\t\tString path = filename;\r\n+\t\t\t\tif (packageName.length() > 0)\r\n+\t\t\t\t{\r\n+\t\t\t\t\tpath = packageName + \"/\" + path;\r\n+\t\t\t\t}\r\n \r\n \t\t\t\t// Iterator over all the combinations\r\n \t\t\t\tResourceNameIterator iter = new ResourceNameIterator(path, style, variation,\r\n@@ -114,6 +119,7 @@ public String loadStringResource(Class<?> clazz, final String key, final Locale\n \t\t\t\t// Didn't find the key yet, continue searching if possible\r\n \t\t\t\tpackageName = Strings.beforeLast(packageName, '/');\r\n \t\t\t}\r\n+\t\t\twhile (packageName.length() > 0);\r\n \r\n \t\t\tclazz = clazz.getSuperclass();\r\n \t\t\tif (clazz == null)\r",
                "deletions": 3
            }
        ],
        "patched_files": [
            "PackageStringResourceLoader.java"
        ],
        "unit_tests": [
            "PackageStringResourceLoaderTest.java"
        ]
    },
    "wicket_bcea89f": {
        "repo": "wicket",
        "message": "WICKET-5751 NullPointerException in IntHashMap\nWICKET-5584 DiskDataStore error\n\nInitialize modCount in readObject()",
        "commit": "https://github.com/apache/wicket/commit/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb",
        "parent": "https://github.com/apache/wicket/commit/988f0fa57195ed60fcf1ac00d1023ca024647ca5",
        "bug_id": "wicket_bcea89f",
        "file": [
            {
                "sha": "7a8d1809295dc8ece761157c1df44a83e8143948",
                "filename": "wicket-util/src/main/java/org/apache/wicket/util/collections/IntHashMap.java",
                "blob_url": "https://github.com/apache/wicket/blob/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb/wicket-util/src/main/java/org/apache/wicket/util/collections/IntHashMap.java",
                "raw_url": "https://github.com/apache/wicket/raw/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb/wicket-util/src/main/java/org/apache/wicket/util/collections/IntHashMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/main/java/org/apache/wicket/util/collections/IntHashMap.java?ref=bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb",
                "patch": "@@ -1145,6 +1145,8 @@ private void writeObject(final java.io.ObjectOutputStream s) throws IOException\n \tprivate void readObject(final java.io.ObjectInputStream s) throws IOException,\n \t\tClassNotFoundException\n \t{\n+\t\tmodCount = new AtomicInteger(0);\n+\n \t\t// Read in the threshold, loadfactor, and any hidden stuff\n \t\ts.defaultReadObject();\n ",
                "deletions": 0
            },
            {
                "sha": "f38ee54e6ab5335b3063529e05ef7413f76e7bf8",
                "filename": "wicket-util/src/test/java/org/apache/wicket/util/collections/IntHashMapTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb/wicket-util/src/test/java/org/apache/wicket/util/collections/IntHashMapTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb/wicket-util/src/test/java/org/apache/wicket/util/collections/IntHashMapTest.java",
                "status": "added",
                "changes": 61,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/test/java/org/apache/wicket/util/collections/IntHashMapTest.java?ref=bcea89fc8a196d2e1ebdcecf9c81298a06b4f5cb",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.util.collections;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Iterator;\n+\n+import org.apache.wicket.util.io.ByteArrayOutputStream;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class IntHashMapTest extends Assert\n+{\n+\n+\t@Test\n+\tpublic void serialize() throws IOException, ClassNotFoundException\n+\t{\n+\t\tIntHashMap<String> map = new IntHashMap<>();\n+\t\tmap.put(1, \"one\");\n+\t\tmap.put(2, \"two\");\n+\n+\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\t\tObjectOutputStream oos = new ObjectOutputStream(baos);\n+\t\toos.writeObject(map);\n+\n+\t\tbyte[] serialized = baos.toByteArray();\n+\t\tByteArrayInputStream bais = new ByteArrayInputStream(serialized);\n+\t\tObjectInputStream ois = new ObjectInputStream(bais);\n+\t\tIntHashMap<String> deserialized = (IntHashMap<String>) ois.readObject();\n+\t\tassertThat(deserialized, is(notNullValue()));\n+\t\tassertThat(deserialized.get(1), is(equalTo(\"one\")));\n+\t\tassertThat(deserialized.get(2), is(equalTo(\"two\")));\n+\n+\t\t// WICKET-5584\n+\t\tdeserialized.put(3, \"three\");\n+\n+\t\t// WICKET-5751\n+\t\tdeserialized.entrySet().iterator();\n+\t}\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "IntHashMap.java"
        ],
        "unit_tests": [
            "IntHashMapTest.java"
        ]
    },
    "wicket_724066f": {
        "repo": "wicket",
        "message": "WICKET-5497 NPE in JsonUtils when the value is null",
        "commit": "https://github.com/apache/wicket/commit/724066f406590a1b383a2476ee9983974f40ab80",
        "parent": "https://github.com/apache/wicket/commit/972c71522caddfa3c6836dafab6831a9643cbd08",
        "bug_id": "wicket_724066f",
        "file": [
            {
                "sha": "ece49971528276158f163328eac2e31285412653",
                "filename": "wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java",
                "blob_url": "https://github.com/apache/wicket/blob/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java",
                "raw_url": "https://github.com/apache/wicket/raw/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java",
                "status": "modified",
                "changes": 24,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java?ref=724066f406590a1b383a2476ee9983974f40ab80",
                "patch": "@@ -58,23 +58,23 @@ public static JSONArray asArray(Map<String, Object> map) throws JSONException\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\telse if (value.getClass().isArray())\n+\t\t\t\telse if (value != null)\n \t\t\t\t{\n-\t\t\t\t\tObject[] array = (Object[]) value;\n-\t\t\t\t\tfor (Object v : array)\n+\t\t\t\t\tif (value.getClass().isArray())\n \t\t\t\t\t{\n-\t\t\t\t\t\tif (v != null)\n+\t\t\t\t\t\tObject[] array = (Object[]) value;\n+\t\t\t\t\t\tfor (Object v : array)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tJSONObject object = new JSONObject();\n-\t\t\t\t\t\t\tobject.put(\"name\", name);\n-\t\t\t\t\t\t\tobject.put(\"value\", v);\n-\t\t\t\t\t\t\tjsonArray.put(object);\n+\t\t\t\t\t\t\tif (v != null)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tJSONObject object = new JSONObject();\n+\t\t\t\t\t\t\t\tobject.put(\"name\", name);\n+\t\t\t\t\t\t\t\tobject.put(\"value\", v);\n+\t\t\t\t\t\t\t\tjsonArray.put(object);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tif (value != null)\n+\t\t\t\t\telse\n \t\t\t\t\t{\n \t\t\t\t\t\tJSONObject object = new JSONObject();\n \t\t\t\t\t\tobject.put(\"name\", name);",
                "deletions": 12
            },
            {
                "sha": "b78003bcfd3f3906670deba8cb173e2621591127",
                "filename": "wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java?ref=724066f406590a1b383a2476ee9983974f40ab80",
                "patch": "@@ -56,5 +56,11 @@ public void asArray() throws Exception\n \t\tObject[] arrayValues = {\"arrayValue\", 3, null, true};\n \t\tmap.put(\"array\", arrayValues);\n \t\tassertEquals(\"[{\\\"name\\\":\\\"array\\\",\\\"value\\\":\\\"arrayValue\\\"},{\\\"name\\\":\\\"array\\\",\\\"value\\\":3},{\\\"name\\\":\\\"array\\\",\\\"value\\\":true}]\", JsonUtils.asArray(map).toString());\n+\n+\t\tmap.clear();\n+\t\tmap.put(\"null\", null);\n+\t\tassertEquals(\"[]\", JsonUtils.asArray(map).toString());\n+\t\tmap.put(\"notNull\", \"notNull\");\n+\t\tassertEquals(\"[{\\\"name\\\":\\\"notNull\\\",\\\"value\\\":\\\"notNull\\\"}]\", JsonUtils.asArray(map).toString());\n \t}\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "JsonUtils.java"
        ],
        "unit_tests": [
            "JsonUtilsTest.java"
        ]
    },
    "wicket_065cb03": {
        "repo": "wicket",
        "message": "WICKET-6169 NullPointerException accessing AbstractRequestLogger.getLiveSessions\n\nFix some more candidates for the same problem.\nRemove implicit modifiers",
        "commit": "https://github.com/apache/wicket/commit/065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
        "parent": "https://github.com/apache/wicket/commit/809b2da16cc0796ee4e5aca8ef816c200c01baf2",
        "bug_id": "wicket_065cb03",
        "file": [
            {
                "sha": "36f0ca7d0832b27317dc8a6c53615cf2d6572a7b",
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/IRequestLogger.java",
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-core/src/main/java/org/apache/wicket/protocol/http/IRequestLogger.java",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-core/src/main/java/org/apache/wicket/protocol/http/IRequestLogger.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/IRequestLogger.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "patch": "@@ -163,14 +163,14 @@\n \t/**\n \t * Perform the actual logging\n \t */\n-\tpublic void performLogging();\n+\tvoid performLogging();\n \n \t/**\n \t * This class hold the information one request of a session has.\n \t * \n \t * @author jcompagner\n \t */\n-\tpublic static class SessionData implements IClusterable, Comparable<SessionData>\n+\tclass SessionData implements IClusterable, Comparable<SessionData>\n \t{\n \t\tprivate static final long serialVersionUID = 1L;\n \n@@ -304,7 +304,7 @@ else if (sd.startDate < startDate)\n \t * \n \t * @author jcompagner\n \t */\n-\tpublic static class RequestData implements IClusterable\n+\tclass RequestData implements IClusterable\n \t{\n \t\tprivate static final long serialVersionUID = 1L;\n ",
                "deletions": 3
            },
            {
                "sha": "86ec61e6a8a53896d48d81b44cc47f8a44c9431f",
                "filename": "wicket-core/src/test/java/org/apache/wicket/protocol/http/AbstractRequestLoggerTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-core/src/test/java/org/apache/wicket/protocol/http/AbstractRequestLoggerTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-core/src/test/java/org/apache/wicket/protocol/http/AbstractRequestLoggerTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/protocol/http/AbstractRequestLoggerTest.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "patch": "@@ -25,7 +25,6 @@\n  */\n public class AbstractRequestLoggerTest extends WicketTestCase\n {\n-\n \tprivate int counter;\n \t\n \t@Test",
                "deletions": 1
            },
            {
                "sha": "863804df4efbbfa70ff667eab829288e4b748f92",
                "filename": "wicket-jmx/src/main/java/org/apache/wicket/jmx/wrapper/ResourceSettings.java",
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-jmx/src/main/java/org/apache/wicket/jmx/wrapper/ResourceSettings.java",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-jmx/src/main/java/org/apache/wicket/jmx/wrapper/ResourceSettings.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-jmx/src/main/java/org/apache/wicket/jmx/wrapper/ResourceSettings.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "patch": "@@ -120,7 +120,7 @@ public String getResourceStreamLocator()\n \t\t\t{\n \t\t\t\tlist.add(loader.toString());\n \t\t\t}\n-\t\t\treturn list.toArray(new String[loaders.size()]);\n+\t\t\treturn list.toArray(new String[0]);\n \t\t}\n \t\treturn null;\n \t}",
                "deletions": 1
            },
            {
                "sha": "1b9da35ebbba6ea5ca546de0fa6ef03b37a80cff",
                "filename": "wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/HttpSessionCopy.java",
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/HttpSessionCopy.java",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/HttpSessionCopy.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/HttpSessionCopy.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "patch": "@@ -117,7 +117,7 @@ public Object getValue(String name)\n \t@Override\n \tpublic String[] getValueNames()\n \t{\n-\t\treturn Collections.list(attributes.keys()).toArray(new String[attributes.size()]);\n+\t\treturn Collections.list(attributes.keys()).toArray(new String[0]);\n \t}\n \n \t@Override",
                "deletions": 1
            },
            {
                "sha": "bf22062b46fa055d5b7fc6522659f16fe62f25af",
                "filename": "wicket-native-websocket/wicket-native-websocket-javax/src/main/java/org/apache/wicket/protocol/ws/javax/JavaxUpgradeHttpRequest.java",
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-native-websocket/wicket-native-websocket-javax/src/main/java/org/apache/wicket/protocol/ws/javax/JavaxUpgradeHttpRequest.java",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-native-websocket/wicket-native-websocket-javax/src/main/java/org/apache/wicket/protocol/ws/javax/JavaxUpgradeHttpRequest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-javax/src/main/java/org/apache/wicket/protocol/ws/javax/JavaxUpgradeHttpRequest.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "patch": "@@ -87,7 +87,7 @@ public JavaxUpgradeHttpRequest(final Session session, EndpointConfig endpointCon\n \t\t\t{\n \t\t\t\tString name = entry.getKey();\n \t\t\t\tList<String> value = entry.getValue();\n-\t\t\t\tparametersMap.put(name, value.toArray(new String[value.size()]));\n+\t\t\t\tparametersMap.put(name, value.toArray(new String[0]));\n \t\t\t}\n \t\t}\n \t}",
                "deletions": 1
            },
            {
                "sha": "4365abb4223319c665abf38746ad649295fe3612",
                "filename": "wicket-spring/src/main/java/org/apache/wicket/spring/test/ApplicationContextMock.java",
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-spring/src/main/java/org/apache/wicket/spring/test/ApplicationContextMock.java",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-spring/src/main/java/org/apache/wicket/spring/test/ApplicationContextMock.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-spring/src/main/java/org/apache/wicket/spring/test/ApplicationContextMock.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "patch": "@@ -256,7 +256,7 @@ public int getBeanDefinitionCount()\n \t@Override\n \tpublic String[] getBeanDefinitionNames()\n \t{\n-\t\treturn beans.keySet().toArray(new String[beans.size()]);\n+\t\treturn beans.keySet().toArray(new String[0]);\n \t}\n \n \t@Override",
                "deletions": 1
            },
            {
                "sha": "e052cf8548f9817c7d58d0b734468d317ecacdd6",
                "filename": "wicket-util/src/main/java/org/apache/wicket/util/string/StringList.java",
                "blob_url": "https://github.com/apache/wicket/blob/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-util/src/main/java/org/apache/wicket/util/string/StringList.java",
                "raw_url": "https://github.com/apache/wicket/raw/065cb0398fbcb5ca3e83f9ed614756ab81de13f3/wicket-util/src/main/java/org/apache/wicket/util/string/StringList.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-util/src/main/java/org/apache/wicket/util/string/StringList.java?ref=065cb0398fbcb5ca3e83f9ed614756ab81de13f3",
                "patch": "@@ -376,7 +376,7 @@ public void sort()\n \t@Override\r\n \tpublic String[] toArray()\r\n \t{\r\n-\t\treturn strings.toArray(new String[size()]);\r\n+\t\treturn strings.toArray(new String[0]);\r\n \t}\r\n \r\n \t/**\r",
                "deletions": 1
            }
        ],
        "patched_files": [
            "AbstractRequestLogger.java",
            "HttpSessionCopy.java",
            "ApplicationContextMock.java",
            "IRequestLogger.java",
            "ResourceSettings.java",
            "StringList.java",
            "JavaxUpgradeHttpRequest.java"
        ],
        "unit_tests": [
            "StringListTest.java",
            "AbstractRequestLoggerTest.java"
        ]
    },
    "wicket_3f0e3c7": {
        "repo": "wicket",
        "message": "WICKET-6332 NullPointerException in PageParameters#equals()",
        "commit": "https://github.com/apache/wicket/commit/3f0e3c7d94e8729f4d1ac30839481d653cbcf651",
        "parent": "https://github.com/apache/wicket/commit/21ae5a9fb26eba66e593bf8566004c9296548001",
        "bug_id": "wicket_3f0e3c7",
        "file": [
            {
                "sha": "000e34f8731abdb16387e78b596f4e25c48e2ffe",
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "blob_url": "https://github.com/apache/wicket/blob/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "raw_url": "https://github.com/apache/wicket/raw/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/INamedParameters.java?ref=3f0e3c7d94e8729f4d1ac30839481d653cbcf651",
                "patch": "@@ -59,7 +59,7 @@\n \t * @author Matej Knopp\r\n \t */\r\n \t@SuppressWarnings(\"serial\")\r\n-\tpublic static class NamedPair implements IClusterable\r\n+\tclass NamedPair implements IClusterable\r\n \t{\r\n \t\tprivate final String key;\r\n \t\tprivate final String value;\r",
                "deletions": 1
            },
            {
                "sha": "c985dcbc7db2466013a180e80c64b20d56c61738",
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "blob_url": "https://github.com/apache/wicket/blob/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "raw_url": "https://github.com/apache/wicket/raw/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java?ref=3f0e3c7d94e8729f4d1ac30839481d653cbcf651",
                "patch": "@@ -467,6 +467,8 @@ else if (!indexedParameters.equals(other.indexedParameters))\n \t\t\tif (other.namedParameters != null)\n \t\t\t\treturn false;\n \t\t}\n+\t\telse if (other.namedParameters == null)\n+\t\t\treturn false;\n \t\telse if (!CollectionUtils.isEqualCollection(namedParameters, other.namedParameters))\n \t\t\treturn false;\n \t\treturn true;",
                "deletions": 0
            },
            {
                "sha": "d390eeee73b66ddf916ed1cc5c4c5184ef249800",
                "filename": "wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/3f0e3c7d94e8729f4d1ac30839481d653cbcf651/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java",
                "status": "modified",
                "changes": 35,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/test/java/org/apache/wicket/request/mapper/parameter/PageParametersTest.java?ref=3f0e3c7d94e8729f4d1ac30839481d653cbcf651",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.not;\n \n import java.util.List;\n \n@@ -300,7 +301,7 @@ public void equality()\n \t * https://issues.apache.org/jira/browse/WICKET-6283\n \t */\n \t@Test\n-\tpublic void equalityOfDiferenteNamedParametersOrder()\n+\tpublic void equalityOfDifferentNamedParametersOrder()\n \t{\n \t\tPageParameters p1 = new PageParameters()\n \t\t\t\t.add(\"a\", \"b\")\n@@ -313,6 +314,38 @@ public void equalityOfDiferenteNamedParametersOrder()\n \t\tassertThat(p1, is(equalTo(p2)));\n \t}\n \n+\t/**\n+\t * namedParameters equality should handle null namedParameters instance.\n+\t *\n+\t * https://issues.apache.org/jira/browse/WICKET-6332\n+\t */\n+\t@Test\n+\tpublic void equalityWithEmptyNamedParameters()\n+\t{\n+\t\tPageParameters p1 = new PageParameters()\n+\t\t\t\t.add(\"a\", \"b\");\n+\n+\t\tPageParameters p2 = new PageParameters();\n+\n+\t\tassertThat(p1, is(not(equalTo(p2))));\n+\t}\n+\n+\t/**\n+\t * indexedParameters equality should handle null namedParameters instance.\n+\t *\n+\t * https://issues.apache.org/jira/browse/WICKET-6332\n+\t */\n+\t@Test\n+\tpublic void equalityWithEmptyIndexedParameters()\n+\t{\n+\t\tPageParameters p1 = new PageParameters()\n+\t\t\t\t.set(0, \"b\");\n+\n+\t\tPageParameters p2 = new PageParameters();\n+\n+\t\tassertThat(p1, is(not(equalTo(p2))));\n+\t}\n+\n \t/**\n \t * NamedPairs hashCode should not depend on the type\n \t *",
                "deletions": 1
            }
        ],
        "patched_files": [
            "INamedParameters.java",
            "PageParameters.java"
        ],
        "unit_tests": [
            "PageParametersTest.java"
        ]
    },
    "wicket_e4399d7": {
        "repo": "wicket",
        "message": "WICKET-6031 NPE in PackageResourceReference#getResource() when there is no request",
        "commit": "https://github.com/apache/wicket/commit/e4399d74234b657435f44eb137969db1a22896d5",
        "parent": "https://github.com/apache/wicket/commit/490fdf67646f1b987c2c1065a3fa6c55f6c5b338",
        "bug_id": "wicket_e4399d7",
        "file": [
            {
                "sha": "f10a01cb83b22133f83f457d6db6fbc5c0dbb966",
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java",
                "blob_url": "https://github.com/apache/wicket/blob/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java",
                "raw_url": "https://github.com/apache/wicket/raw/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java",
                "status": "modified",
                "changes": 34,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java?ref=e4399d74234b657435f44eb137969db1a22896d5",
                "patch": "@@ -111,10 +111,16 @@ public PackageResource getResource()\n \t\tfinal String extension = getExtension();\n \n \t\tfinal PackageResource resource;\n-\t\t\n-\t\tfinal Url url = RequestCycle.get().getRequest().getUrl();\n-\t\t//resource attributes (locale, style, variation) might be encoded in the URL\n-\t\tfinal UrlAttributes urlAttributes = ResourceUtil.decodeResourceReferenceAttributes(url);\n+\n+\t\tRequestCycle requestCycle = RequestCycle.get();\n+\t\tUrlAttributes urlAttributes = null;\n+\t\tif (requestCycle != null)\n+\t\t{\n+\t\t\t//resource attributes (locale, style, variation) might be encoded in the URL\n+\t\t\tfinal Url url = requestCycle.getRequest().getUrl();\n+\t\t\turlAttributes = ResourceUtil.decodeResourceReferenceAttributes(url);\n+\t\t}\n+\n \t\tfinal String currentVariation = getCurrentVariation(urlAttributes);\n \t\tfinal String currentStyle = getCurrentStyle(urlAttributes);\n \t\tfinal Locale currentLocale = getCurrentLocale(urlAttributes);\n@@ -185,7 +191,11 @@ private Locale getCurrentLocale(UrlAttributes attributes)\n \t{\n \t\tLocale currentLocale = getCurrentLocale();\n \n-\t\treturn currentLocale != null ? currentLocale : attributes.getLocale();\n+\t\treturn currentLocale != null\n+\t\t\t\t? currentLocale\n+\t\t\t\t: attributes != null\n+\t\t\t\t\t? attributes.getLocale()\n+\t\t\t\t\t: null;\n \t}\n \n \tprivate Locale getCurrentLocale()\n@@ -208,8 +218,12 @@ private Locale getCurrentLocale()\n \tprivate String getCurrentStyle(UrlAttributes attributes)\n \t{\n \t\tString currentStyle = getCurrentStyle();\n-\t\t\n-\t\treturn currentStyle != null ? currentStyle : attributes.getStyle();\n+\n+\t\treturn currentStyle != null\n+\t\t\t\t? currentStyle\n+\t\t\t\t: attributes != null\n+\t\t\t\t\t? attributes.getStyle()\n+\t\t\t\t\t: null;\n \t}\n \t\n \tprivate String getCurrentStyle()\n@@ -233,7 +247,11 @@ private String getCurrentVariation(UrlAttributes attributes)\n \t{\n \t\tfinal String variation = getVariation();\n \n-\t\treturn variation != null ? variation : attributes.getVariation();\n+\t\treturn variation != null\n+\t\t\t\t? variation\n+\t\t\t\t: attributes != null\n+\t\t\t\t\t? attributes.getVariation()\n+\t\t\t\t\t: null;\n \t}\n \n \t/**",
                "deletions": 8
            },
            {
                "sha": "de7a0a55b3f91d97e34e9685dbf9aef74a77c3e0",
                "filename": "wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java?ref=e4399d74234b657435f44eb137969db1a22896d5",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Locale;\r\n \r\n import org.apache.wicket.Application;\r\n+import org.apache.wicket.ThreadContext;\r\n import org.apache.wicket.protocol.http.mock.MockHttpServletRequest;\r\n import org.apache.wicket.protocol.http.mock.MockHttpServletResponse;\r\n import org.apache.wicket.request.Request;\r\n@@ -355,5 +356,23 @@ public void testContentRangeHeaders()\n \t\t\tnew String(mockHttpServletResponse.getBinaryContent()));\r\n \t}\r\n \r\n+\t/**\r\n+\t * https://issues.apache.org/jira/browse/WICKET-6031\r\n+\t */\r\n+\t@Test\r\n+\tpublic void noRequestCycle()\r\n+\t{\r\n+\t\tThreadContext.setRequestCycle(null);\r\n+\r\n+\t\tPackageResourceReference reference = new PackageResourceReference(scope, \"resource.txt\",\r\n+\t\t\t\tlocales[1], styles[1], variations[1]);\r\n+\r\n+\t\tPackageResource resource = reference.getResource();\r\n+\t\tassertNotNull(resource);\r\n+\r\n+\t\tassertEquals(locales[1], resource.getResourceStream().getLocale());\r\n+\t\tassertEquals(styles[1], resource.getResourceStream().getStyle());\r\n+\t\tassertEquals(variations[1], resource.getResourceStream().getVariation());\r\n+\t}\r\n \r\n }\r",
                "deletions": 0
            }
        ],
        "patched_files": [
            "PackageResourceReference.java"
        ],
        "unit_tests": [
            "PackageResourceReferenceTest.java"
        ]
    },
    "wicket_af05b3d": {
        "repo": "wicket",
        "message": "WICKET-5462 fix npe in ajax form component label repainting",
        "commit": "https://github.com/apache/wicket/commit/af05b3d68ca8b8021db8e205d39557782eb68a7b",
        "parent": "https://github.com/apache/wicket/commit/a3a5a40fcea53384554d7a8ada08ef7bb021bf1d",
        "bug_id": "wicket_af05b3d",
        "file": [
            {
                "sha": "7eeb1e17c4c76b9726b4859279bd15f8034abf08",
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "blob_url": "https://github.com/apache/wicket/blob/af05b3d68ca8b8021db8e205d39557782eb68a7b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "raw_url": "https://github.com/apache/wicket/raw/af05b3d68ca8b8021db8e205d39557782eb68a7b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java?ref=af05b3d68ca8b8021db8e205d39557782eb68a7b",
                "patch": "@@ -774,10 +774,10 @@ else if (hasError())\n \t\t\tcallOnError(submitter);\n \t\t}\n \n-\n-\t\tif (((WebRequest)getRequest()).isAjax())\n+\t\t// update auto labels if we are inside an ajax request\n+\t\tfinal AjaxRequestTarget target = getRequestCycle().find(AjaxRequestTarget.class);\n+\t\tif (target != null)\n \t\t{\n-\t\t\tfinal AjaxRequestTarget target = getRequestCycle().find(AjaxRequestTarget.class);\n \t\t\tvisitChildren(FormComponent.class, new IVisitor<FormComponent<?>, Void>()\n \t\t\t{\n \t\t\t\t@Override",
                "deletions": 3
            }
        ],
        "patched_files": [
            "Form.java"
        ],
        "unit_tests": [
            "TestForm.java",
            "FormTest.java"
        ]
    },
    "wicket_4b8ac4c": {
        "repo": "wicket",
        "message": "WICKET-6483 JavaxUpgradeHttpRequest can cause NullPointerException\n\nWICKET-6493 WebSocket SessionIds are wrong (HttpSession one used instead of Websocket one) + NPE if no HttpSession is found during Handshake Request\n\nRevert the change to use 'request.getSession(false) because this breaks WicketTester/WebSocketTester infrastructure",
        "commit": "https://github.com/apache/wicket/commit/4b8ac4c8cc14f2926312e2572fee4299256e7b11",
        "parent": "https://github.com/apache/wicket/commit/39d7ac1f80c4ea5366e91eb0fd6deceb219e1b26",
        "bug_id": "wicket_4b8ac4c",
        "file": [
            {
                "sha": "ca3569d63a39727e6a6a4cc2430ac1e1f64f6253",
                "filename": "wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "blob_url": "https://github.com/apache/wicket/blob/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "raw_url": "https://github.com/apache/wicket/raw/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/api/AbstractWebSocketProcessor.java?ref=4b8ac4c8cc14f2926312e2572fee4299256e7b11",
                "patch": "@@ -102,7 +102,7 @@\n \t */\n \tpublic AbstractWebSocketProcessor(final HttpServletRequest request, final WebApplication application)\n \t{\n-\t\tfinal HttpSession httpSession = request.getSession(false);\n+\t\tfinal HttpSession httpSession = request.getSession(true);\n \t\tif (httpSession == null)\n \t\t{\n \t\t\tthrow new IllegalStateException(\"There is no HTTP Session bound. Without a session Wicket won't be \" +",
                "deletions": 1
            },
            {
                "sha": "f83894f77921f632724c199cfcd8e7c33571c901",
                "filename": "wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTester.java",
                "blob_url": "https://github.com/apache/wicket/blob/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTester.java",
                "raw_url": "https://github.com/apache/wicket/raw/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTester.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-core/src/main/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTester.java?ref=4b8ac4c8cc14f2926312e2572fee4299256e7b11",
                "patch": "@@ -39,7 +39,7 @@\n \n \t/**\n \t * Constructor.\n-\t * Prepares a WebSockConnection that will be used to send messages from the client (the test case)\n+\t * Prepares a WebSocketConnection that will be used to send messages from the client (the test case)\n \t * to the server.\n \t *\n \t * @param page",
                "deletions": 1
            },
            {
                "sha": "0a7dd1041ef8b0d4859042dd57bcca4986437c2d",
                "filename": "wicket-native-websocket/wicket-native-websocket-core/src/test/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTesterProcessorTest.java",
                "blob_url": "https://github.com/apache/wicket/blob/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/test/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTesterProcessorTest.java",
                "raw_url": "https://github.com/apache/wicket/raw/4b8ac4c8cc14f2926312e2572fee4299256e7b11/wicket-native-websocket/wicket-native-websocket-core/src/test/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTesterProcessorTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-native-websocket/wicket-native-websocket-core/src/test/java/org/apache/wicket/protocol/ws/util/tester/WebSocketTesterProcessorTest.java?ref=4b8ac4c8cc14f2926312e2572fee4299256e7b11",
                "patch": "@@ -100,7 +100,6 @@ public void onConnectNoOrigin()\n \t\tassertTrue(TestWebSocketResource.ON_ABORT_CALLED.get());\n \t}\n \n-//\t@Ignore\n \t@Test\n \tpublic void onConnectMultipleOrigins()\n \t{",
                "deletions": 1
            }
        ],
        "patched_files": [
            "AbstractWebSocketProcessor.java",
            "WebSocketTester.java"
        ],
        "unit_tests": [
            "WebSocketTesterProcessorTest.java"
        ]
    }
}